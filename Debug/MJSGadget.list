
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b2d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001308  0801b390  0801b390  0001c390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c698  0801c698  0001e3c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c698  0801c698  0001d698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c6a0  0801c6a0  0001e3c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c6a0  0801c6a0  0001d6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c6a4  0801c6a4  0001d6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c8  20000000  0801c6a8  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d54  200003c8  0801ca70  0001e3c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000411c  0801ca70  0001f11c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001e3c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c740  00000000  00000000  0001e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000081fa  00000000  00000000  0004ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002560  00000000  00000000  00052d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c62  00000000  00000000  00055290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021244  00000000  00000000  00056ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b162  00000000  00000000  00078136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6ca  00000000  00000000  000b3298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150962  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009990  00000000  00000000  001509a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c8 	.word	0x200003c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801b378 	.word	0x0801b378

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003cc 	.word	0x200003cc
 8000104:	0801b378 	.word	0x0801b378

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801bf88 	.word	0x0801bf88
 8000d08:	0801bfc8 	.word	0x0801bfc8
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801c004 	.word	0x0801c004
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003560:	f007 ff38 	bl	800b3d4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003564:	2316      	movs	r3, #22
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e015      	b.n	800359a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2416      	movs	r4, #22
 8003574:	193b      	adds	r3, r7, r4
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2000      	movs	r0, #0
 8003582:	f007 ff8f 	bl	800b4a4 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800358e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003590:	193b      	adds	r3, r7, r4
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	3201      	adds	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	2316      	movs	r3, #22
 800359c:	18fa      	adds	r2, r7, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e2      	bcc.n	800356e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80035a8:	f007 ff42 	bl	800b430 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	200003e4 	.word	0x200003e4

080035bc <WriteUint8ArrayEepromSafe>:

uint32_t WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	0019      	movs	r1, r3
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ffb0 	bl	800354c <WriteUint8ArrayEeprom>
    }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e010      	b.n	8003630 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800360e:	2016      	movs	r0, #22
 8003610:	183b      	adds	r3, r7, r0
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	0019      	movs	r1, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	3201      	adds	r2, #1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2316      	movs	r3, #22
 8003632:	18fa      	adds	r2, r7, r3
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e7      	bcc.n	800360e <ReadUint8ArrayEEprom+0x18>
    }
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003656:	f007 febd 	bl	800b3d4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800365a:	230e      	movs	r3, #14
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e00c      	b.n	800367e <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003664:	240e      	movs	r4, #14
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f007 feec 	bl	800b44c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003674:	193b      	adds	r3, r7, r4
 8003676:	193a      	adds	r2, r7, r4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	3204      	adds	r2, #4
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	230e      	movs	r3, #14
 8003680:	18fa      	adds	r2, r7, r3
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3eb      	bcc.n	8003664 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800368c:	f007 fed0 	bl	800b430 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b005      	add	sp, #20
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800369c:	f002 f838 	bl	8005710 <ReadBatteryVoltage>
 80036a0:	1c02      	adds	r2, r0, #0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <setCharges+0x20>)
 80036a4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80036a6:	f002 f895 	bl	80057d4 <ReadSolarVoltage>
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <setCharges+0x24>)
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	2000050c 	.word	0x2000050c
 80036bc:	20000510 	.word	0x20000510

080036c0 <ESP_GetHT>:

void ESP_GetHT(float temp, float humid){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <ESP_GetHT+0x20>)
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036d0:	4b04      	ldr	r3, [pc, #16]	@ (80036e4 <ESP_GetHT+0x24>)
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b002      	add	sp, #8
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	20000504 	.word	0x20000504
 80036e4:	20000508 	.word	0x20000508

080036e8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	1dbb      	adds	r3, r7, #6
 80036f4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036f6:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <setMeasurement+0x2c>)
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <setMeasurement+0x30>)
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <setMeasurement+0x34>)
 8003704:	1dba      	adds	r2, r7, #6
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	801a      	strh	r2, [r3, #0]
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	20000504 	.word	0x20000504
 8003718:	20000508 	.word	0x20000508
 800371c:	20000514 	.word	0x20000514

08003720 <setMic>:
void setMic(float dB){
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003728:	4b03      	ldr	r3, [pc, #12]	@ (8003738 <setMic+0x18>)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	20000518 	.word	0x20000518

0800373c <SetConfigMode>:

void SetConfigMode(){
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003740:	4b02      	ldr	r3, [pc, #8]	@ (800374c <SetConfigMode+0x10>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
}
 8003746:	46c0      	nop			@ (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200004f2 	.word	0x200004f2

08003750 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003754:	f006 fe0a 	bl	800a36c <HAL_GetUIDw0>
 8003758:	0002      	movs	r2, r0
 800375a:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <ESP_GetUID+0x28>)
 800375c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800375e:	f006 fe0f 	bl	800a380 <HAL_GetUIDw1>
 8003762:	0002      	movs	r2, r0
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <ESP_GetUID+0x28>)
 8003766:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003768:	f006 fe14 	bl	800a394 <HAL_GetUIDw2>
 800376c:	0002      	movs	r2, r0
 800376e:	4b02      	ldr	r3, [pc, #8]	@ (8003778 <ESP_GetUID+0x28>)
 8003770:	609a      	str	r2, [r3, #8]
}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200004f8 	.word	0x200004f8

0800377c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <ESP_Init+0x20>)
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800378a:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <ESP_Init+0x24>)
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003790:	f7ff ffde 	bl	8003750 <ESP_GetUID>
}
 8003794:	46c0      	nop			@ (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200003e8 	.word	0x200003e8
 80037a0:	20000021 	.word	0x20000021

080037a4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80037a4:	b5b0      	push	{r4, r5, r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	000a      	movs	r2, r1
 80037ae:	1cbb      	adds	r3, r7, #2
 80037b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80037b2:	4b0e      	ldr	r3, [pc, #56]	@ (80037ec <ESP_Send+0x48>)
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	250f      	movs	r5, #15
 80037b8:	197c      	adds	r4, r7, r5
 80037ba:	1cbb      	adds	r3, r7, #2
 80037bc:	881a      	ldrh	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0019      	movs	r1, r3
 80037c2:	f00e f9bf 	bl	8011b44 <HAL_UART_Transmit_DMA>
 80037c6:	0003      	movs	r3, r0
 80037c8:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037ca:	197b      	adds	r3, r7, r5
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80037d2:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <ESP_Send+0x4c>)
 80037d4:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <ESP_Send+0x50>)
 80037d6:	0019      	movs	r1, r3
 80037d8:	2003      	movs	r0, #3
 80037da:	f006 fa13 	bl	8009c04 <CreateLine>
    return false;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <ESP_Send+0x40>
  }
  return true;
 80037e2:	2301      	movs	r3, #1
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bdb0      	pop	{r4, r5, r7, pc}
 80037ec:	200003e8 	.word	0x200003e8
 80037f0:	0801b390 	.word	0x0801b390
 80037f4:	0801b3b0 	.word	0x0801b3b0

080037f8 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	000a      	movs	r2, r1
 8003802:	1cfb      	adds	r3, r7, #3
 8003804:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <ESP_Receive+0x58>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 800380c:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <ESP_Receive+0x5c>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	1cfb      	adds	r3, r7, #3
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b29a      	uxth	r2, r3
 8003816:	250f      	movs	r5, #15
 8003818:	197c      	adds	r4, r7, r5
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0019      	movs	r1, r3
 800381e:	f00e fa21 	bl	8011c64 <HAL_UART_Receive_DMA>
 8003822:	0003      	movs	r3, r0
 8003824:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003826:	197b      	adds	r3, r7, r5
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 800382e:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <ESP_Receive+0x60>)
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <ESP_Receive+0x64>)
 8003832:	0019      	movs	r1, r3
 8003834:	2003      	movs	r0, #3
 8003836:	f006 f9e5 	bl	8009c04 <CreateLine>
    RxComplete = true;
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <ESP_Receive+0x58>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
    return false;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <ESP_Receive+0x4e>
  }
  return true;
 8003844:	2301      	movs	r3, #1
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bdb0      	pop	{r4, r5, r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	200003ec 	.word	0x200003ec
 8003854:	200003e8 	.word	0x200003e8
 8003858:	0801b3b4 	.word	0x0801b3b4
 800385c:	0801b3b0 	.word	0x0801b3b0

08003860 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003868:	4b08      	ldr	r3, [pc, #32]	@ (800388c <HAL_UART_RxCpltCallback+0x2c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d108      	bne.n	8003884 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 8003872:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <HAL_UART_RxCpltCallback+0x30>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003878:	4a06      	ldr	r2, [pc, #24]	@ (8003894 <HAL_UART_RxCpltCallback+0x34>)
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <HAL_UART_RxCpltCallback+0x38>)
 800387c:	0019      	movs	r1, r3
 800387e:	2003      	movs	r0, #3
 8003880:	f006 f9c0 	bl	8009c04 <CreateLine>
  }
}
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}
 800388c:	200003e8 	.word	0x200003e8
 8003890:	200003ec 	.word	0x200003ec
 8003894:	0801b3d4 	.word	0x0801b3d4
 8003898:	0801b3b0 	.word	0x0801b3b0

0800389c <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80038a4:	4b07      	ldr	r3, [pc, #28]	@ (80038c4 <HAL_UART_ErrorCallback+0x28>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d105      	bne.n	80038ba <HAL_UART_ErrorCallback+0x1e>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("An error has ocurred");
 80038ae:	4a06      	ldr	r2, [pc, #24]	@ (80038c8 <HAL_UART_ErrorCallback+0x2c>)
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_UART_ErrorCallback+0x30>)
 80038b2:	0019      	movs	r1, r3
 80038b4:	2003      	movs	r0, #3
 80038b6:	f006 f9a5 	bl	8009c04 <CreateLine>
  }
}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200003e8 	.word	0x200003e8
 80038c8:	0801b3e0 	.word	0x0801b3e0
 80038cc:	0801b3b0 	.word	0x0801b3b0

080038d0 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e010      	b.n	8003902 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	001a      	movs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1898      	adds	r0, r3, r2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	001a      	movs	r2, r3
 80038f4:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <uint8ArrayToString+0x44>)
 80038f6:	0019      	movs	r1, r3
 80038f8:	f014 fda0 	bl	801843c <siprintf>
  for (int i = 0; i < 12; i++)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b0b      	cmp	r3, #11
 8003906:	ddeb      	ble.n	80038e0 <uint8ArrayToString+0x10>
  }
}
 8003908:	46c0      	nop			@ (mov r8, r8)
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b004      	add	sp, #16
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	0801b3f8 	.word	0x0801b3f8

08003918 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af04      	add	r7, sp, #16
 800391e:	0002      	movs	r2, r0
 8003920:	1dfb      	adds	r3, r7, #7
 8003922:	701a      	strb	r2, [r3, #0]
  uint16_t messageLength = 0;
 8003924:	230c      	movs	r3, #12
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2200      	movs	r2, #0
 800392a:	801a      	strh	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800392c:	4bb0      	ldr	r3, [pc, #704]	@ (8003bf0 <CreateMessage+0x2d8>)
 800392e:	48b1      	ldr	r0, [pc, #708]	@ (8003bf4 <CreateMessage+0x2dc>)
 8003930:	220c      	movs	r2, #12
 8003932:	0019      	movs	r1, r3
 8003934:	f7ff fe5f 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003938:	4baf      	ldr	r3, [pc, #700]	@ (8003bf8 <CreateMessage+0x2e0>)
 800393a:	48b0      	ldr	r0, [pc, #704]	@ (8003bfc <CreateMessage+0x2e4>)
 800393c:	220c      	movs	r2, #12
 800393e:	0019      	movs	r1, r3
 8003940:	f7ff fe59 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003944:	4bae      	ldr	r3, [pc, #696]	@ (8003c00 <CreateMessage+0x2e8>)
 8003946:	48af      	ldr	r0, [pc, #700]	@ (8003c04 <CreateMessage+0x2ec>)
 8003948:	220c      	movs	r2, #12
 800394a:	0019      	movs	r1, r3
 800394c:	f7ff fe53 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003950:	4bad      	ldr	r3, [pc, #692]	@ (8003c08 <CreateMessage+0x2f0>)
 8003952:	48ae      	ldr	r0, [pc, #696]	@ (8003c0c <CreateMessage+0x2f4>)
 8003954:	220c      	movs	r2, #12
 8003956:	0019      	movs	r1, r3
 8003958:	f7ff fe4d 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 800395c:	4bac      	ldr	r3, [pc, #688]	@ (8003c10 <CreateMessage+0x2f8>)
 800395e:	48ad      	ldr	r0, [pc, #692]	@ (8003c14 <CreateMessage+0x2fc>)
 8003960:	220c      	movs	r2, #12
 8003962:	0019      	movs	r1, r3
 8003964:	f7ff fe47 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003968:	4bab      	ldr	r3, [pc, #684]	@ (8003c18 <CreateMessage+0x300>)
 800396a:	48ac      	ldr	r0, [pc, #688]	@ (8003c1c <CreateMessage+0x304>)
 800396c:	220c      	movs	r2, #12
 800396e:	0019      	movs	r1, r3
 8003970:	f7ff fe41 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003974:	4baa      	ldr	r3, [pc, #680]	@ (8003c20 <CreateMessage+0x308>)
 8003976:	48ab      	ldr	r0, [pc, #684]	@ (8003c24 <CreateMessage+0x30c>)
 8003978:	221e      	movs	r2, #30
 800397a:	0019      	movs	r1, r3
 800397c:	f7ff fe3b 	bl	80035f6 <ReadUint8ArrayEEprom>
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003980:	f7ff fe8a 	bl	8003698 <setCharges>

  memset(message, 0, sizeof(message));
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	00da      	lsls	r2, r3, #3
 8003988:	4ba7      	ldr	r3, [pc, #668]	@ (8003c28 <CreateMessage+0x310>)
 800398a:	2100      	movs	r1, #0
 800398c:	0018      	movs	r0, r3
 800398e:	f014 fdf9 	bl	8018584 <memset>
  uint16_t index = 0;
 8003992:	260e      	movs	r6, #14
 8003994:	19bb      	adds	r3, r7, r6
 8003996:	2200      	movs	r2, #0
 8003998:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 800399a:	19bb      	adds	r3, r7, r6
 800399c:	881a      	ldrh	r2, [r3, #0]
 800399e:	4ba2      	ldr	r3, [pc, #648]	@ (8003c28 <CreateMessage+0x310>)
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	4aa2      	ldr	r2, [pc, #648]	@ (8003c2c <CreateMessage+0x314>)
 80039a4:	0011      	movs	r1, r2
 80039a6:	0018      	movs	r0, r3
 80039a8:	f014 fd48 	bl	801843c <siprintf>
  index = strlen(message);
 80039ac:	4b9e      	ldr	r3, [pc, #632]	@ (8003c28 <CreateMessage+0x310>)
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7fc fbaa 	bl	8000108 <strlen>
 80039b4:	0002      	movs	r2, r0
 80039b6:	19bb      	adds	r3, r7, r6
 80039b8:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 80039ba:	4a8d      	ldr	r2, [pc, #564]	@ (8003bf0 <CreateMessage+0x2d8>)
 80039bc:	4b9c      	ldr	r3, [pc, #624]	@ (8003c30 <CreateMessage+0x318>)
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7ff ff85 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 80039c6:	19bb      	adds	r3, r7, r6
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	4b97      	ldr	r3, [pc, #604]	@ (8003c28 <CreateMessage+0x310>)
 80039cc:	18d4      	adds	r4, r2, r3
 80039ce:	4b99      	ldr	r3, [pc, #612]	@ (8003c34 <CreateMessage+0x31c>)
 80039d0:	689d      	ldr	r5, [r3, #8]
 80039d2:	4b99      	ldr	r3, [pc, #612]	@ (8003c38 <CreateMessage+0x320>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	1c18      	adds	r0, r3, #0
 80039d8:	f7ff fcc2 	bl	8003360 <__aeabi_f2d>
 80039dc:	0002      	movs	r2, r0
 80039de:	000b      	movs	r3, r1
 80039e0:	488f      	ldr	r0, [pc, #572]	@ (8003c20 <CreateMessage+0x308>)
 80039e2:	4996      	ldr	r1, [pc, #600]	@ (8003c3c <CreateMessage+0x324>)
 80039e4:	9202      	str	r2, [sp, #8]
 80039e6:	9303      	str	r3, [sp, #12]
 80039e8:	4b91      	ldr	r3, [pc, #580]	@ (8003c30 <CreateMessage+0x318>)
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	0003      	movs	r3, r0
 80039ee:	002a      	movs	r2, r5
 80039f0:	0020      	movs	r0, r4
 80039f2:	f014 fd23 	bl	801843c <siprintf>
  index = strlen(message);
 80039f6:	4b8c      	ldr	r3, [pc, #560]	@ (8003c28 <CreateMessage+0x310>)
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7fc fb85 	bl	8000108 <strlen>
 80039fe:	0002      	movs	r2, r0
 8003a00:	19bb      	adds	r3, r7, r6
 8003a02:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003a04:	4a7c      	ldr	r2, [pc, #496]	@ (8003bf8 <CreateMessage+0x2e0>)
 8003a06:	4b8a      	ldr	r3, [pc, #552]	@ (8003c30 <CreateMessage+0x318>)
 8003a08:	0011      	movs	r1, r2
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7ff ff60 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003a10:	19bb      	adds	r3, r7, r6
 8003a12:	881a      	ldrh	r2, [r3, #0]
 8003a14:	4b84      	ldr	r3, [pc, #528]	@ (8003c28 <CreateMessage+0x310>)
 8003a16:	18d4      	adds	r4, r2, r3
 8003a18:	4b86      	ldr	r3, [pc, #536]	@ (8003c34 <CreateMessage+0x31c>)
 8003a1a:	689d      	ldr	r5, [r3, #8]
 8003a1c:	4b88      	ldr	r3, [pc, #544]	@ (8003c40 <CreateMessage+0x328>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1c18      	adds	r0, r3, #0
 8003a22:	f7ff fc9d 	bl	8003360 <__aeabi_f2d>
 8003a26:	0002      	movs	r2, r0
 8003a28:	000b      	movs	r3, r1
 8003a2a:	487d      	ldr	r0, [pc, #500]	@ (8003c20 <CreateMessage+0x308>)
 8003a2c:	4985      	ldr	r1, [pc, #532]	@ (8003c44 <CreateMessage+0x32c>)
 8003a2e:	9202      	str	r2, [sp, #8]
 8003a30:	9303      	str	r3, [sp, #12]
 8003a32:	4b7f      	ldr	r3, [pc, #508]	@ (8003c30 <CreateMessage+0x318>)
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	0003      	movs	r3, r0
 8003a38:	002a      	movs	r2, r5
 8003a3a:	0020      	movs	r0, r4
 8003a3c:	f014 fcfe 	bl	801843c <siprintf>
  index = strlen(message);
 8003a40:	4b79      	ldr	r3, [pc, #484]	@ (8003c28 <CreateMessage+0x310>)
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fc fb60 	bl	8000108 <strlen>
 8003a48:	0002      	movs	r2, r0
 8003a4a:	19bb      	adds	r3, r7, r6
 8003a4c:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003a4e:	4a6c      	ldr	r2, [pc, #432]	@ (8003c00 <CreateMessage+0x2e8>)
 8003a50:	4b77      	ldr	r3, [pc, #476]	@ (8003c30 <CreateMessage+0x318>)
 8003a52:	0011      	movs	r1, r2
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7ff ff3b 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003a5a:	19bb      	adds	r3, r7, r6
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	4b72      	ldr	r3, [pc, #456]	@ (8003c28 <CreateMessage+0x310>)
 8003a60:	18d4      	adds	r4, r2, r3
 8003a62:	4b74      	ldr	r3, [pc, #464]	@ (8003c34 <CreateMessage+0x31c>)
 8003a64:	689d      	ldr	r5, [r3, #8]
 8003a66:	4b78      	ldr	r3, [pc, #480]	@ (8003c48 <CreateMessage+0x330>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	1c18      	adds	r0, r3, #0
 8003a6c:	f7ff fc78 	bl	8003360 <__aeabi_f2d>
 8003a70:	0002      	movs	r2, r0
 8003a72:	000b      	movs	r3, r1
 8003a74:	486a      	ldr	r0, [pc, #424]	@ (8003c20 <CreateMessage+0x308>)
 8003a76:	4975      	ldr	r1, [pc, #468]	@ (8003c4c <CreateMessage+0x334>)
 8003a78:	9202      	str	r2, [sp, #8]
 8003a7a:	9303      	str	r3, [sp, #12]
 8003a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c30 <CreateMessage+0x318>)
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	0003      	movs	r3, r0
 8003a82:	002a      	movs	r2, r5
 8003a84:	0020      	movs	r0, r4
 8003a86:	f014 fcd9 	bl	801843c <siprintf>
  index = strlen(message);
 8003a8a:	4b67      	ldr	r3, [pc, #412]	@ (8003c28 <CreateMessage+0x310>)
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7fc fb3b 	bl	8000108 <strlen>
 8003a92:	0002      	movs	r2, r0
 8003a94:	19bb      	adds	r3, r7, r6
 8003a96:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003a98:	4a5b      	ldr	r2, [pc, #364]	@ (8003c08 <CreateMessage+0x2f0>)
 8003a9a:	4b65      	ldr	r3, [pc, #404]	@ (8003c30 <CreateMessage+0x318>)
 8003a9c:	0011      	movs	r1, r2
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7ff ff16 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003aa4:	19bb      	adds	r3, r7, r6
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8003c28 <CreateMessage+0x310>)
 8003aaa:	18d0      	adds	r0, r2, r3
 8003aac:	4b61      	ldr	r3, [pc, #388]	@ (8003c34 <CreateMessage+0x31c>)
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	4b67      	ldr	r3, [pc, #412]	@ (8003c50 <CreateMessage+0x338>)
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	4c5a      	ldr	r4, [pc, #360]	@ (8003c20 <CreateMessage+0x308>)
 8003ab6:	4967      	ldr	r1, [pc, #412]	@ (8003c54 <CreateMessage+0x33c>)
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	4b5d      	ldr	r3, [pc, #372]	@ (8003c30 <CreateMessage+0x318>)
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	0023      	movs	r3, r4
 8003ac0:	f014 fcbc 	bl	801843c <siprintf>
  index = strlen(message);
 8003ac4:	4b58      	ldr	r3, [pc, #352]	@ (8003c28 <CreateMessage+0x310>)
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7fc fb1e 	bl	8000108 <strlen>
 8003acc:	0002      	movs	r2, r0
 8003ace:	19bb      	adds	r3, r7, r6
 8003ad0:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003ad2:	1dfb      	adds	r3, r7, #7
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4053      	eors	r3, r2
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d04a      	beq.n	8003b76 <CreateMessage+0x25e>
    uint8ArrayToString(Buffer, batteryConfig);
 8003ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8003c10 <CreateMessage+0x2f8>)
 8003ae2:	4b53      	ldr	r3, [pc, #332]	@ (8003c30 <CreateMessage+0x318>)
 8003ae4:	0011      	movs	r1, r2
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7ff fef2 	bl	80038d0 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	881a      	ldrh	r2, [r3, #0]
 8003af0:	4b4d      	ldr	r3, [pc, #308]	@ (8003c28 <CreateMessage+0x310>)
 8003af2:	18d4      	adds	r4, r2, r3
 8003af4:	4b4f      	ldr	r3, [pc, #316]	@ (8003c34 <CreateMessage+0x31c>)
 8003af6:	689d      	ldr	r5, [r3, #8]
 8003af8:	4b57      	ldr	r3, [pc, #348]	@ (8003c58 <CreateMessage+0x340>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	1c18      	adds	r0, r3, #0
 8003afe:	f7ff fc2f 	bl	8003360 <__aeabi_f2d>
 8003b02:	0002      	movs	r2, r0
 8003b04:	000b      	movs	r3, r1
 8003b06:	4846      	ldr	r0, [pc, #280]	@ (8003c20 <CreateMessage+0x308>)
 8003b08:	4954      	ldr	r1, [pc, #336]	@ (8003c5c <CreateMessage+0x344>)
 8003b0a:	9202      	str	r2, [sp, #8]
 8003b0c:	9303      	str	r3, [sp, #12]
 8003b0e:	4b48      	ldr	r3, [pc, #288]	@ (8003c30 <CreateMessage+0x318>)
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	0003      	movs	r3, r0
 8003b14:	002a      	movs	r2, r5
 8003b16:	0020      	movs	r0, r4
 8003b18:	f014 fc90 	bl	801843c <siprintf>
    index = strlen(message);
 8003b1c:	4b42      	ldr	r3, [pc, #264]	@ (8003c28 <CreateMessage+0x310>)
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f7fc faf2 	bl	8000108 <strlen>
 8003b24:	0002      	movs	r2, r0
 8003b26:	19bb      	adds	r3, r7, r6
 8003b28:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c18 <CreateMessage+0x300>)
 8003b2c:	4b40      	ldr	r3, [pc, #256]	@ (8003c30 <CreateMessage+0x318>)
 8003b2e:	0011      	movs	r1, r2
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fecd 	bl	80038d0 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003b36:	19bb      	adds	r3, r7, r6
 8003b38:	881a      	ldrh	r2, [r3, #0]
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <CreateMessage+0x310>)
 8003b3c:	18d4      	adds	r4, r2, r3
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c34 <CreateMessage+0x31c>)
 8003b40:	689d      	ldr	r5, [r3, #8]
 8003b42:	4b47      	ldr	r3, [pc, #284]	@ (8003c60 <CreateMessage+0x348>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	1c18      	adds	r0, r3, #0
 8003b48:	f7ff fc0a 	bl	8003360 <__aeabi_f2d>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	000b      	movs	r3, r1
 8003b50:	4833      	ldr	r0, [pc, #204]	@ (8003c20 <CreateMessage+0x308>)
 8003b52:	4944      	ldr	r1, [pc, #272]	@ (8003c64 <CreateMessage+0x34c>)
 8003b54:	9202      	str	r2, [sp, #8]
 8003b56:	9303      	str	r3, [sp, #12]
 8003b58:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <CreateMessage+0x318>)
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	002a      	movs	r2, r5
 8003b60:	0020      	movs	r0, r4
 8003b62:	f014 fc6b 	bl	801843c <siprintf>
    index = strlen(message);
 8003b66:	4b30      	ldr	r3, [pc, #192]	@ (8003c28 <CreateMessage+0x310>)
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7fc facd 	bl	8000108 <strlen>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	19bb      	adds	r3, r7, r6
 8003b72:	801a      	strh	r2, [r3, #0]
 8003b74:	e025      	b.n	8003bc2 <CreateMessage+0x2aa>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003b76:	4a26      	ldr	r2, [pc, #152]	@ (8003c10 <CreateMessage+0x2f8>)
 8003b78:	4b2d      	ldr	r3, [pc, #180]	@ (8003c30 <CreateMessage+0x318>)
 8003b7a:	0011      	movs	r1, r2
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7ff fea7 	bl	80038d0 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003b82:	260e      	movs	r6, #14
 8003b84:	19bb      	adds	r3, r7, r6
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	4b27      	ldr	r3, [pc, #156]	@ (8003c28 <CreateMessage+0x310>)
 8003b8a:	18d4      	adds	r4, r2, r3
 8003b8c:	4b29      	ldr	r3, [pc, #164]	@ (8003c34 <CreateMessage+0x31c>)
 8003b8e:	689d      	ldr	r5, [r3, #8]
 8003b90:	4b31      	ldr	r3, [pc, #196]	@ (8003c58 <CreateMessage+0x340>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	1c18      	adds	r0, r3, #0
 8003b96:	f7ff fbe3 	bl	8003360 <__aeabi_f2d>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	000b      	movs	r3, r1
 8003b9e:	4820      	ldr	r0, [pc, #128]	@ (8003c20 <CreateMessage+0x308>)
 8003ba0:	4931      	ldr	r1, [pc, #196]	@ (8003c68 <CreateMessage+0x350>)
 8003ba2:	9202      	str	r2, [sp, #8]
 8003ba4:	9303      	str	r3, [sp, #12]
 8003ba6:	4b22      	ldr	r3, [pc, #136]	@ (8003c30 <CreateMessage+0x318>)
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	0003      	movs	r3, r0
 8003bac:	002a      	movs	r2, r5
 8003bae:	0020      	movs	r0, r4
 8003bb0:	f014 fc44 	bl	801843c <siprintf>
    index = strlen(message);
 8003bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c28 <CreateMessage+0x310>)
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7fc faa6 	bl	8000108 <strlen>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	19bb      	adds	r3, r7, r6
 8003bc0:	801a      	strh	r2, [r3, #0]
  }

  index = sprintf(&message[index], "]");
 8003bc2:	240e      	movs	r4, #14
 8003bc4:	193b      	adds	r3, r7, r4
 8003bc6:	881a      	ldrh	r2, [r3, #0]
 8003bc8:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <CreateMessage+0x310>)
 8003bca:	18d3      	adds	r3, r2, r3
 8003bcc:	4a27      	ldr	r2, [pc, #156]	@ (8003c6c <CreateMessage+0x354>)
 8003bce:	0011      	movs	r1, r2
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f014 fc33 	bl	801843c <siprintf>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003bdc:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <CreateMessage+0x310>)
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7fc fa92 	bl	8000108 <strlen>
 8003be4:	0003      	movs	r3, r0
 8003be6:	b29b      	uxth	r3, r3
}
 8003be8:	0018      	movs	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b005      	add	sp, #20
 8003bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf0:	20000b38 	.word	0x20000b38
 8003bf4:	0808000c 	.word	0x0808000c
 8003bf8:	20000b44 	.word	0x20000b44
 8003bfc:	08080018 	.word	0x08080018
 8003c00:	20000b50 	.word	0x20000b50
 8003c04:	08080048 	.word	0x08080048
 8003c08:	20000b5c 	.word	0x20000b5c
 8003c0c:	08080030 	.word	0x08080030
 8003c10:	20000b68 	.word	0x20000b68
 8003c14:	0808006c 	.word	0x0808006c
 8003c18:	20000b74 	.word	0x20000b74
 8003c1c:	08080078 	.word	0x08080078
 8003c20:	20000b80 	.word	0x20000b80
 8003c24:	08080090 	.word	0x08080090
 8003c28:	2000051c 	.word	0x2000051c
 8003c2c:	0801b400 	.word	0x0801b400
 8003c30:	20000ba0 	.word	0x20000ba0
 8003c34:	200004f8 	.word	0x200004f8
 8003c38:	20000504 	.word	0x20000504
 8003c3c:	0801b404 	.word	0x0801b404
 8003c40:	20000508 	.word	0x20000508
 8003c44:	0801b458 	.word	0x0801b458
 8003c48:	20000518 	.word	0x20000518
 8003c4c:	0801b4b0 	.word	0x0801b4b0
 8003c50:	20000514 	.word	0x20000514
 8003c54:	0801b508 	.word	0x0801b508
 8003c58:	2000050c 	.word	0x2000050c
 8003c5c:	0801b55c 	.word	0x0801b55c
 8003c60:	20000510 	.word	0x20000510
 8003c64:	0801b5bc 	.word	0x0801b5bc
 8003c68:	0801b618 	.word	0x0801b618
 8003c6c:	0801b670 	.word	0x0801b670

08003c70 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003c78:	2380      	movs	r3, #128	@ 0x80
 8003c7a:	009a      	lsls	r2, r3, #2
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <SetCommandBuffer+0x24>)
 8003c80:	0018      	movs	r0, r3
 8003c82:	f014 fc95 	bl	80185b0 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003c86:	4b04      	ldr	r3, [pc, #16]	@ (8003c98 <SetCommandBuffer+0x28>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
}
 8003c8c:	46c0      	nop			@ (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b002      	add	sp, #8
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000930 	.word	0x20000930
 8003c98:	20000b30 	.word	0x20000b30

08003c9c <StartProg>:
void StartProg(){
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003ca0:	2064      	movs	r0, #100	@ 0x64
 8003ca2:	f006 fb3f 	bl	800a324 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003ca6:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <StartProg+0x60>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2101      	movs	r1, #1
 8003cac:	0018      	movs	r0, r3
 8003cae:	f007 fece 	bl	800ba4e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003cb2:	2064      	movs	r0, #100	@ 0x64
 8003cb4:	f006 fb36 	bl	800a324 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003cb8:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <StartProg+0x60>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f007 fec5 	bl	800ba4e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003cc4:	23fa      	movs	r3, #250	@ 0xfa
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f006 fb2b 	bl	800a324 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003cce:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <StartProg+0x60>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f007 feba 	bl	800ba4e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003cda:	23fa      	movs	r3, #250	@ 0xfa
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f006 fb20 	bl	800a324 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <StartProg+0x60>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	2102      	movs	r1, #2
 8003cea:	0018      	movs	r0, r3
 8003cec:	f007 feaf 	bl	800ba4e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003cf0:	2028      	movs	r0, #40	@ 0x28
 8003cf2:	f006 fb17 	bl	800a324 <HAL_Delay>
}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	50001c00 	.word	0x50001c00

08003d00 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d02:	46c6      	mov	lr, r8
 8003d04:	b500      	push	{lr}
 8003d06:	b09a      	sub	sp, #104	@ 0x68
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	61f8      	str	r0, [r7, #28]
 8003d0c:	0008      	movs	r0, r1
 8003d0e:	0011      	movs	r1, r2
 8003d10:	261a      	movs	r6, #26
 8003d12:	19bb      	adds	r3, r7, r6
 8003d14:	1c02      	adds	r2, r0, #0
 8003d16:	801a      	strh	r2, [r3, #0]
 8003d18:	2319      	movs	r3, #25
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	1c0a      	adds	r2, r1, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	466b      	mov	r3, sp
 8003d22:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003d24:	19bb      	adds	r3, r7, r6
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	1e5a      	subs	r2, r3, #1
 8003d2c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d2e:	001a      	movs	r2, r3
 8003d30:	60ba      	str	r2, [r7, #8]
 8003d32:	2200      	movs	r2, #0
 8003d34:	60fa      	str	r2, [r7, #12]
 8003d36:	68b8      	ldr	r0, [r7, #8]
 8003d38:	68f9      	ldr	r1, [r7, #12]
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	0f52      	lsrs	r2, r2, #29
 8003d3e:	000e      	movs	r6, r1
 8003d40:	00f6      	lsls	r6, r6, #3
 8003d42:	617e      	str	r6, [r7, #20]
 8003d44:	697e      	ldr	r6, [r7, #20]
 8003d46:	4316      	orrs	r6, r2
 8003d48:	617e      	str	r6, [r7, #20]
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	00d2      	lsls	r2, r2, #3
 8003d4e:	613a      	str	r2, [r7, #16]
 8003d50:	001a      	movs	r2, r3
 8003d52:	603a      	str	r2, [r7, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	6838      	ldr	r0, [r7, #0]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	0f52      	lsrs	r2, r2, #29
 8003d60:	000e      	movs	r6, r1
 8003d62:	00f5      	lsls	r5, r6, #3
 8003d64:	4315      	orrs	r5, r2
 8003d66:	0002      	movs	r2, r0
 8003d68:	00d4      	lsls	r4, r2, #3
 8003d6a:	3307      	adds	r3, #7
 8003d6c:	08db      	lsrs	r3, r3, #3
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	466a      	mov	r2, sp
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	469d      	mov	sp, r3
 8003d76:	466b      	mov	r3, sp
 8003d78:	3300      	adds	r3, #0
 8003d7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003d7c:	234f      	movs	r3, #79	@ 0x4f
 8003d7e:	2118      	movs	r1, #24
 8003d80:	185b      	adds	r3, r3, r1
 8003d82:	19db      	adds	r3, r3, r7
 8003d84:	2203      	movs	r2, #3
 8003d86:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003d88:	234c      	movs	r3, #76	@ 0x4c
 8003d8a:	185b      	adds	r3, r3, r1
 8003d8c:	19db      	adds	r3, r3, r7
 8003d8e:	2200      	movs	r2, #0
 8003d90:	801a      	strh	r2, [r3, #0]
 8003d92:	e013      	b.n	8003dbc <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003d94:	204c      	movs	r0, #76	@ 0x4c
 8003d96:	2418      	movs	r4, #24
 8003d98:	1903      	adds	r3, r0, r4
 8003d9a:	19db      	adds	r3, r3, r7
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	18d2      	adds	r2, r2, r3
 8003da2:	1903      	adds	r3, r0, r4
 8003da4:	19db      	adds	r3, r3, r7
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	7811      	ldrb	r1, [r2, #0]
 8003daa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dac:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003dae:	1903      	adds	r3, r0, r4
 8003db0:	19db      	adds	r3, r3, r7
 8003db2:	881a      	ldrh	r2, [r3, #0]
 8003db4:	1903      	adds	r3, r0, r4
 8003db6:	19db      	adds	r3, r3, r7
 8003db8:	3201      	adds	r2, #1
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	234c      	movs	r3, #76	@ 0x4c
 8003dbe:	2018      	movs	r0, #24
 8003dc0:	181b      	adds	r3, r3, r0
 8003dc2:	19da      	adds	r2, r3, r7
 8003dc4:	211a      	movs	r1, #26
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	8812      	ldrh	r2, [r2, #0]
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d3e1      	bcc.n	8003d94 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003dda:	233f      	movs	r3, #63	@ 0x3f
 8003ddc:	0006      	movs	r6, r0
 8003dde:	199b      	adds	r3, r3, r6
 8003de0:	19db      	adds	r3, r3, r7
 8003de2:	224e      	movs	r2, #78	@ 0x4e
 8003de4:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  char * ParsePoint4;
  const char OK[] = AT_RESPONSE_OK;
 8003de6:	252c      	movs	r5, #44	@ 0x2c
 8003de8:	19ab      	adds	r3, r5, r6
 8003dea:	19db      	adds	r3, r3, r7
 8003dec:	4a6b      	ldr	r2, [pc, #428]	@ (8003f9c <ParseBuffer+0x29c>)
 8003dee:	8811      	ldrh	r1, [r2, #0]
 8003df0:	8019      	strh	r1, [r3, #0]
 8003df2:	7892      	ldrb	r2, [r2, #2]
 8003df4:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003df6:	2324      	movs	r3, #36	@ 0x24
 8003df8:	199b      	adds	r3, r3, r6
 8003dfa:	19db      	adds	r3, r3, r7
 8003dfc:	4a68      	ldr	r2, [pc, #416]	@ (8003fa0 <ParseBuffer+0x2a0>)
 8003dfe:	6811      	ldr	r1, [r2, #0]
 8003e00:	6019      	str	r1, [r3, #0]
 8003e02:	8892      	ldrh	r2, [r2, #4]
 8003e04:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003e06:	231c      	movs	r3, #28
 8003e08:	199b      	adds	r3, r3, r6
 8003e0a:	19db      	adds	r3, r3, r7
 8003e0c:	4a65      	ldr	r2, [pc, #404]	@ (8003fa4 <ParseBuffer+0x2a4>)
 8003e0e:	6811      	ldr	r1, [r2, #0]
 8003e10:	6019      	str	r1, [r3, #0]
 8003e12:	8892      	ldrh	r2, [r2, #4]
 8003e14:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003e16:	2318      	movs	r3, #24
 8003e18:	199b      	adds	r3, r3, r6
 8003e1a:	19db      	adds	r3, r3, r7
 8003e1c:	223e      	movs	r2, #62	@ 0x3e
 8003e1e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003e20:	2308      	movs	r3, #8
 8003e22:	199b      	adds	r3, r3, r6
 8003e24:	19db      	adds	r3, r3, r7
 8003e26:	4a60      	ldr	r2, [pc, #384]	@ (8003fa8 <ParseBuffer+0x2a8>)
 8003e28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e2a:	c313      	stmia	r3!, {r0, r1, r4}
 8003e2c:	8811      	ldrh	r1, [r2, #0]
 8003e2e:	8019      	strh	r1, [r3, #0]
 8003e30:	7892      	ldrb	r2, [r2, #2]
 8003e32:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003e34:	2319      	movs	r3, #25
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d108      	bne.n	8003e50 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003e3e:	19ab      	adds	r3, r5, r6
 8003e40:	19da      	adds	r2, r3, r7
 8003e42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e44:	0011      	movs	r1, r2
 8003e46:	0018      	movs	r0, r3
 8003e48:	f014 fbc6 	bl	80185d8 <strstr>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003e50:	2319      	movs	r3, #25
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d10a      	bne.n	8003e70 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003e5a:	231c      	movs	r3, #28
 8003e5c:	2218      	movs	r2, #24
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	19da      	adds	r2, r3, r7
 8003e62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e64:	0011      	movs	r1, r2
 8003e66:	0018      	movs	r0, r3
 8003e68:	f014 fbb6 	bl	80185d8 <strstr>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003e70:	2319      	movs	r3, #25
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d10a      	bne.n	8003e90 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003e7a:	2318      	movs	r3, #24
 8003e7c:	2218      	movs	r2, #24
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	19da      	adds	r2, r3, r7
 8003e82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e84:	0011      	movs	r1, r2
 8003e86:	0018      	movs	r0, r3
 8003e88:	f014 fba6 	bl	80185d8 <strstr>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003e90:	2324      	movs	r3, #36	@ 0x24
 8003e92:	2418      	movs	r4, #24
 8003e94:	191b      	adds	r3, r3, r4
 8003e96:	19da      	adds	r2, r3, r7
 8003e98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e9a:	0011      	movs	r1, r2
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f014 fb9b 	bl	80185d8 <strstr>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	191b      	adds	r3, r3, r4
 8003eaa:	19da      	adds	r2, r3, r7
 8003eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eae:	0011      	movs	r1, r2
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f014 fb91 	bl	80185d8 <strstr>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8003eba:	4a3c      	ldr	r2, [pc, #240]	@ (8003fac <ParseBuffer+0x2ac>)
 8003ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f014 fb89 	bl	80185d8 <strstr>
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if(len > 1 ){
 8003eca:	231a      	movs	r3, #26
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d957      	bls.n	8003f84 <ParseBuffer+0x284>
    TestChar = *ParsePoint;
 8003ed4:	213f      	movs	r1, #63	@ 0x3f
 8003ed6:	190b      	adds	r3, r1, r4
 8003ed8:	19db      	adds	r3, r3, r7
 8003eda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003ee0:	190b      	adds	r3, r1, r4
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b4f      	cmp	r3, #79	@ 0x4f
 8003ee8:	d104      	bne.n	8003ef4 <ParseBuffer+0x1f4>
      status = RECEIVE_STATUS_OK;
 8003eea:	234f      	movs	r3, #79	@ 0x4f
 8003eec:	191b      	adds	r3, r3, r4
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003ef4:	233f      	movs	r3, #63	@ 0x3f
 8003ef6:	2218      	movs	r2, #24
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b72      	cmp	r3, #114	@ 0x72
 8003f00:	d104      	bne.n	8003f0c <ParseBuffer+0x20c>
      status = RECEIVE_STATUS_READY;
 8003f02:	234f      	movs	r3, #79	@ 0x4f
 8003f04:	189b      	adds	r3, r3, r2
 8003f06:	19db      	adds	r3, r3, r7
 8003f08:	2202      	movs	r2, #2
 8003f0a:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003f0c:	233f      	movs	r3, #63	@ 0x3f
 8003f0e:	2218      	movs	r2, #24
 8003f10:	189b      	adds	r3, r3, r2
 8003f12:	19db      	adds	r3, r3, r7
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f18:	d104      	bne.n	8003f24 <ParseBuffer+0x224>
      status = RECEIVE_STATUS_START;
 8003f1a:	234f      	movs	r3, #79	@ 0x4f
 8003f1c:	189b      	adds	r3, r3, r2
 8003f1e:	19db      	adds	r3, r3, r7
 8003f20:	2205      	movs	r2, #5
 8003f22:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003f24:	213f      	movs	r1, #63	@ 0x3f
 8003f26:	2018      	movs	r0, #24
 8003f28:	180b      	adds	r3, r1, r0
 8003f2a:	19db      	adds	r3, r3, r7
 8003f2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003f32:	0002      	movs	r2, r0
 8003f34:	188b      	adds	r3, r1, r2
 8003f36:	19db      	adds	r3, r3, r7
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b45      	cmp	r3, #69	@ 0x45
 8003f3c:	d104      	bne.n	8003f48 <ParseBuffer+0x248>
      status = RECEIVE_STATUS_ERROR;
 8003f3e:	234f      	movs	r3, #79	@ 0x4f
 8003f40:	189b      	adds	r3, r3, r2
 8003f42:	19db      	adds	r3, r3, r7
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003f48:	213f      	movs	r1, #63	@ 0x3f
 8003f4a:	2018      	movs	r0, #24
 8003f4c:	180b      	adds	r3, r1, r0
 8003f4e:	19db      	adds	r3, r3, r7
 8003f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003f56:	180b      	adds	r3, r1, r0
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b57      	cmp	r3, #87	@ 0x57
 8003f5e:	d102      	bne.n	8003f66 <ParseBuffer+0x266>
      ConnectionMade = true;
 8003f60:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <ParseBuffer+0x2b0>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint4;
 8003f66:	213f      	movs	r1, #63	@ 0x3f
 8003f68:	2018      	movs	r0, #24
 8003f6a:	180b      	adds	r3, r1, r0
 8003f6c:	19db      	adds	r3, r3, r7
 8003f6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	701a      	strb	r2, [r3, #0]
    if(TestChar == '2'){
 8003f74:	180b      	adds	r3, r1, r0
 8003f76:	19db      	adds	r3, r3, r7
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b32      	cmp	r3, #50	@ 0x32
 8003f7c:	d102      	bne.n	8003f84 <ParseBuffer+0x284>
      beurs = true;
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <ParseBuffer+0x2b4>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003f84:	234f      	movs	r3, #79	@ 0x4f
 8003f86:	2218      	movs	r2, #24
 8003f88:	189b      	adds	r3, r3, r2
 8003f8a:	19db      	adds	r3, r3, r7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	46c5      	mov	sp, r8

}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b01a      	add	sp, #104	@ 0x68
 8003f96:	bc80      	pop	{r7}
 8003f98:	46b8      	mov	r8, r7
 8003f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f9c:	0801b674 	.word	0x0801b674
 8003fa0:	0801b678 	.word	0x0801b678
 8003fa4:	0801b680 	.word	0x0801b680
 8003fa8:	0801b688 	.word	0x0801b688
 8003fac:	0801c044 	.word	0x0801c044
 8003fb0:	200004f3 	.word	0x200004f3
 8003fb4:	200004f5 	.word	0x200004f5

08003fb8 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <PollAwake+0x3c>)
 8003fc0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff fe53 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7fc f89b 	bl	8000108 <strlen>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0011      	movs	r1, r2
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7ff fbe2 	bl	80037a4 <ESP_Send>
 8003fe0:	1e03      	subs	r3, r0, #0
 8003fe2:	d001      	beq.n	8003fe8 <PollAwake+0x30>
    return true;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <PollAwake+0x32>
  }
  else{
    return false;
 8003fe8:	2300      	movs	r3, #0
  }
}
 8003fea:	0018      	movs	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b002      	add	sp, #8
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	0801b698 	.word	0x0801b698

08003ff8 <RFPower>:
bool RFPower(){
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <RFPower+0x3c>)
 8004000:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	0018      	movs	r0, r3
 8004006:	f7ff fe33 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	f7fc f87b 	bl	8000108 <strlen>
 8004012:	0003      	movs	r3, r0
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0011      	movs	r1, r2
 800401a:	0018      	movs	r0, r3
 800401c:	f7ff fbc2 	bl	80037a4 <ESP_Send>
 8004020:	1e03      	subs	r3, r0, #0
 8004022:	d001      	beq.n	8004028 <RFPower+0x30>
    return true;
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <RFPower+0x32>
  }
  else{
    return false;
 8004028:	2300      	movs	r3, #0
  }
}
 800402a:	0018      	movs	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	b002      	add	sp, #8
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	0801b6a0 	.word	0x0801b6a0

08004038 <CheckRFPower>:
bool CheckRFPower(){
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800403e:	4b0d      	ldr	r3, [pc, #52]	@ (8004074 <CheckRFPower+0x3c>)
 8004040:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0018      	movs	r0, r3
 8004046:	f7ff fe13 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f7fc f85b 	bl	8000108 <strlen>
 8004052:	0003      	movs	r3, r0
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0011      	movs	r1, r2
 800405a:	0018      	movs	r0, r3
 800405c:	f7ff fba2 	bl	80037a4 <ESP_Send>
 8004060:	1e03      	subs	r3, r0, #0
 8004062:	d001      	beq.n	8004068 <CheckRFPower+0x30>
    return true;
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <CheckRFPower+0x32>
  }
  else{
    return false;
 8004068:	2300      	movs	r3, #0
  }
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b002      	add	sp, #8
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	0801b6b0 	.word	0x0801b6b0

08004078 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800407e:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <ATRestore+0x3c>)
 8004080:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f7ff fdf3 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0018      	movs	r0, r3
 800408e:	f7fc f83b 	bl	8000108 <strlen>
 8004092:	0003      	movs	r3, r0
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0011      	movs	r1, r2
 800409a:	0018      	movs	r0, r3
 800409c:	f7ff fb82 	bl	80037a4 <ESP_Send>
 80040a0:	1e03      	subs	r3, r0, #0
 80040a2:	d001      	beq.n	80040a8 <ATRestore+0x30>
    return true;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <ATRestore+0x32>
  }
  else{
    return false;
 80040a8:	2300      	movs	r3, #0
  }
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b002      	add	sp, #8
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	0801b6c0 	.word	0x0801b6c0

080040b8 <CWINIT>:
bool CWINIT(){
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <CWINIT+0x3c>)
 80040c0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff fdd3 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7fc f81b 	bl	8000108 <strlen>
 80040d2:	0003      	movs	r3, r0
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0011      	movs	r1, r2
 80040da:	0018      	movs	r0, r3
 80040dc:	f7ff fb62 	bl	80037a4 <ESP_Send>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d001      	beq.n	80040e8 <CWINIT+0x30>
    return true;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <CWINIT+0x32>
  }
  else{
    return false;
 80040e8:	2300      	movs	r3, #0
  }
}
 80040ea:	0018      	movs	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b002      	add	sp, #8
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			@ (mov r8, r8)
 80040f4:	0801b6d0 	.word	0x0801b6d0

080040f8 <CWMODE1>:
bool CWMODE1(){
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80040fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <CWMODE1+0x3c>)
 8004100:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0018      	movs	r0, r3
 8004106:	f7ff fdb3 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f7fb fffb 	bl	8000108 <strlen>
 8004112:	0003      	movs	r3, r0
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	0011      	movs	r1, r2
 800411a:	0018      	movs	r0, r3
 800411c:	f7ff fb42 	bl	80037a4 <ESP_Send>
 8004120:	1e03      	subs	r3, r0, #0
 8004122:	d001      	beq.n	8004128 <CWMODE1+0x30>
    return true;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <CWMODE1+0x32>
  }
  else{
    return false;
 8004128:	2300      	movs	r3, #0
  }
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b002      	add	sp, #8
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	0801b6e0 	.word	0x0801b6e0

08004138 <CWMODE2>:
bool CWMODE2(){
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <CWMODE2+0x3c>)
 8004140:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0018      	movs	r0, r3
 8004146:	f7ff fd93 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f7fb ffdb 	bl	8000108 <strlen>
 8004152:	0003      	movs	r3, r0
 8004154:	b29a      	uxth	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0011      	movs	r1, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7ff fb22 	bl	80037a4 <ESP_Send>
 8004160:	1e03      	subs	r3, r0, #0
 8004162:	d001      	beq.n	8004168 <CWMODE2+0x30>
    return true;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <CWMODE2+0x32>
  }
  else{
    return false;
 8004168:	2300      	movs	r3, #0
  }
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b002      	add	sp, #8
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	0801b6f0 	.word	0x0801b6f0

08004178 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800417e:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <CWAUTOCONN+0x3c>)
 8004180:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff fd73 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f7fb ffbb 	bl	8000108 <strlen>
 8004192:	0003      	movs	r3, r0
 8004194:	b29a      	uxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	0011      	movs	r1, r2
 800419a:	0018      	movs	r0, r3
 800419c:	f7ff fb02 	bl	80037a4 <ESP_Send>
 80041a0:	1e03      	subs	r3, r0, #0
 80041a2:	d001      	beq.n	80041a8 <CWAUTOCONN+0x30>
    return true;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <CWAUTOCONN+0x32>
  }
  else{
    return false;
 80041a8:	2300      	movs	r3, #0
  }
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b002      	add	sp, #8
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	0801b700 	.word	0x0801b700

080041b8 <CWJAP>:
bool CWJAP(){
 80041b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ba:	46c6      	mov	lr, r8
 80041bc:	b500      	push	{lr}
 80041be:	b0a2      	sub	sp, #136	@ 0x88
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	466b      	mov	r3, sp
 80041c4:	4698      	mov	r8, r3
  beursTest = true;
 80041c6:	4b3b      	ldr	r3, [pc, #236]	@ (80042b4 <CWJAP+0xfc>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80041cc:	2618      	movs	r6, #24
 80041ce:	19bb      	adds	r3, r7, r6
 80041d0:	2264      	movs	r2, #100	@ 0x64
 80041d2:	2100      	movs	r1, #0
 80041d4:	0018      	movs	r0, r3
 80041d6:	f014 f9d5 	bl	8018584 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80041da:	4b37      	ldr	r3, [pc, #220]	@ (80042b8 <CWJAP+0x100>)
 80041dc:	4a37      	ldr	r2, [pc, #220]	@ (80042bc <CWJAP+0x104>)
 80041de:	4938      	ldr	r1, [pc, #224]	@ (80042c0 <CWJAP+0x108>)
 80041e0:	19b8      	adds	r0, r7, r6
 80041e2:	f014 f92b 	bl	801843c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80041e6:	19bb      	adds	r3, r7, r6
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7fb ff8d 	bl	8000108 <strlen>
 80041ee:	0002      	movs	r2, r0
 80041f0:	216f      	movs	r1, #111	@ 0x6f
 80041f2:	0030      	movs	r0, r6
 80041f4:	180b      	adds	r3, r1, r0
 80041f6:	19db      	adds	r3, r3, r7
 80041f8:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80041fa:	180b      	adds	r3, r1, r0
 80041fc:	19db      	adds	r3, r3, r7
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	1e5a      	subs	r2, r3, #1
 8004204:	2180      	movs	r1, #128	@ 0x80
 8004206:	1879      	adds	r1, r7, r1
 8004208:	600a      	str	r2, [r1, #0]
 800420a:	001a      	movs	r2, r3
 800420c:	60ba      	str	r2, [r7, #8]
 800420e:	2200      	movs	r2, #0
 8004210:	60fa      	str	r2, [r7, #12]
 8004212:	68b8      	ldr	r0, [r7, #8]
 8004214:	68f9      	ldr	r1, [r7, #12]
 8004216:	0002      	movs	r2, r0
 8004218:	0f52      	lsrs	r2, r2, #29
 800421a:	000e      	movs	r6, r1
 800421c:	00f6      	lsls	r6, r6, #3
 800421e:	617e      	str	r6, [r7, #20]
 8004220:	697e      	ldr	r6, [r7, #20]
 8004222:	4316      	orrs	r6, r2
 8004224:	617e      	str	r6, [r7, #20]
 8004226:	0002      	movs	r2, r0
 8004228:	00d2      	lsls	r2, r2, #3
 800422a:	613a      	str	r2, [r7, #16]
 800422c:	001a      	movs	r2, r3
 800422e:	603a      	str	r2, [r7, #0]
 8004230:	2200      	movs	r2, #0
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	6838      	ldr	r0, [r7, #0]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	0002      	movs	r2, r0
 800423a:	0f52      	lsrs	r2, r2, #29
 800423c:	000e      	movs	r6, r1
 800423e:	00f5      	lsls	r5, r6, #3
 8004240:	4315      	orrs	r5, r2
 8004242:	0002      	movs	r2, r0
 8004244:	00d4      	lsls	r4, r2, #3
 8004246:	3307      	adds	r3, #7
 8004248:	08db      	lsrs	r3, r3, #3
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	466a      	mov	r2, sp
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	469d      	mov	sp, r3
 8004252:	466b      	mov	r3, sp
 8004254:	3300      	adds	r3, #0
 8004256:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004258:	246f      	movs	r4, #111	@ 0x6f
 800425a:	2518      	movs	r5, #24
 800425c:	1963      	adds	r3, r4, r5
 800425e:	19db      	adds	r3, r3, r7
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	001a      	movs	r2, r3
 8004266:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004268:	2100      	movs	r1, #0
 800426a:	0018      	movs	r0, r3
 800426c:	f014 f98a 	bl	8018584 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004270:	1963      	adds	r3, r4, r5
 8004272:	19db      	adds	r3, r3, r7
 8004274:	781a      	ldrb	r2, [r3, #0]
 8004276:	1979      	adds	r1, r7, r5
 8004278:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800427a:	0018      	movs	r0, r3
 800427c:	f014 f998 	bl	80185b0 <strncpy>
  SetCommandBuffer(atCommand);
 8004280:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004282:	0018      	movs	r0, r3
 8004284:	f7ff fcf4 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004288:	1963      	adds	r3, r4, r5
 800428a:	19db      	adds	r3, r3, r7
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b29a      	uxth	r2, r3
 8004290:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004292:	0011      	movs	r1, r2
 8004294:	0018      	movs	r0, r3
 8004296:	f7ff fa85 	bl	80037a4 <ESP_Send>
 800429a:	1e03      	subs	r3, r0, #0
 800429c:	d001      	beq.n	80042a2 <CWJAP+0xea>
    return true;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <CWJAP+0xec>
  }
  else{
    return false;
 80042a2:	2300      	movs	r3, #0
 80042a4:	46c5      	mov	sp, r8
  }
}
 80042a6:	0018      	movs	r0, r3
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b022      	add	sp, #136	@ 0x88
 80042ac:	bc80      	pop	{r7}
 80042ae:	46b8      	mov	r8, r7
 80042b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	200004f4 	.word	0x200004f4
 80042b8:	0801c050 	.word	0x0801c050
 80042bc:	0801c044 	.word	0x0801c044
 80042c0:	0801b714 	.word	0x0801b714

080042c4 <CWMODE3>:
bool CWMODE3(){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <CWMODE3+0x3c>)
 80042cc:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7ff fccd 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	0018      	movs	r0, r3
 80042da:	f7fb ff15 	bl	8000108 <strlen>
 80042de:	0003      	movs	r3, r0
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0011      	movs	r1, r2
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7ff fa5c 	bl	80037a4 <ESP_Send>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d001      	beq.n	80042f4 <CWMODE3+0x30>
    return true;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <CWMODE3+0x32>
  }
  else{
    return false;
 80042f4:	2300      	movs	r3, #0
  }
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b002      	add	sp, #8
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	0801b72c 	.word	0x0801b72c

08004304 <CWSTATE>:
bool CWSTATE(){
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800430a:	4b0d      	ldr	r3, [pc, #52]	@ (8004340 <CWSTATE+0x3c>)
 800430c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0018      	movs	r0, r3
 8004312:	f7ff fcad 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	0018      	movs	r0, r3
 800431a:	f7fb fef5 	bl	8000108 <strlen>
 800431e:	0003      	movs	r3, r0
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0011      	movs	r1, r2
 8004326:	0018      	movs	r0, r3
 8004328:	f7ff fa3c 	bl	80037a4 <ESP_Send>
 800432c:	1e03      	subs	r3, r0, #0
 800432e:	d001      	beq.n	8004334 <CWSTATE+0x30>
    return true;
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <CWSTATE+0x32>
  }
  else{
    return false;
 8004334:	2300      	movs	r3, #0
  }
}
 8004336:	0018      	movs	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	b002      	add	sp, #8
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	0801b73c 	.word	0x0801b73c

08004344 <CWSAP>:
bool CWSAP(){
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <CWSAP+0x3c>)
 800434c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	0018      	movs	r0, r3
 8004352:	f7ff fc8d 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0018      	movs	r0, r3
 800435a:	f7fb fed5 	bl	8000108 <strlen>
 800435e:	0003      	movs	r3, r0
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0011      	movs	r1, r2
 8004366:	0018      	movs	r0, r3
 8004368:	f7ff fa1c 	bl	80037a4 <ESP_Send>
 800436c:	1e03      	subs	r3, r0, #0
 800436e:	d001      	beq.n	8004374 <CWSAP+0x30>
    return true;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <CWSAP+0x32>
  }
  else{
    return false;
 8004374:	2300      	movs	r3, #0
  }
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b002      	add	sp, #8
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	0801b74c 	.word	0x0801b74c

08004384 <CIPMUX>:
bool CIPMUX(){
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <CIPMUX+0x3c>)
 800438c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	0018      	movs	r0, r3
 8004392:	f7ff fc6d 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f7fb feb5 	bl	8000108 <strlen>
 800439e:	0003      	movs	r3, r0
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	0011      	movs	r1, r2
 80043a6:	0018      	movs	r0, r3
 80043a8:	f7ff f9fc 	bl	80037a4 <ESP_Send>
 80043ac:	1e03      	subs	r3, r0, #0
 80043ae:	d001      	beq.n	80043b4 <CIPMUX+0x30>
    return true;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <CIPMUX+0x32>
  }
  else{
    return false;
 80043b4:	2300      	movs	r3, #0
  }
}
 80043b6:	0018      	movs	r0, r3
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b002      	add	sp, #8
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	0801b770 	.word	0x0801b770

080043c4 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80043ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004400 <WEBSERVER+0x3c>)
 80043cc:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7ff fc4d 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0018      	movs	r0, r3
 80043da:	f7fb fe95 	bl	8000108 <strlen>
 80043de:	0003      	movs	r3, r0
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0011      	movs	r1, r2
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7ff f9dc 	bl	80037a4 <ESP_Send>
 80043ec:	1e03      	subs	r3, r0, #0
 80043ee:	d001      	beq.n	80043f4 <WEBSERVER+0x30>
    return true;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <WEBSERVER+0x32>
  }
  else{
    return false;
 80043f4:	2300      	movs	r3, #0
  }
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b002      	add	sp, #8
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	0801b780 	.word	0x0801b780

08004404 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b0c5      	sub	sp, #276	@ 0x114
 8004408:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	005a      	lsls	r2, r3, #1
 800440e:	1d3b      	adds	r3, r7, #4
 8004410:	2100      	movs	r1, #0
 8004412:	0018      	movs	r0, r3
 8004414:	f014 f8b6 	bl	8018584 <memset>
  uint16_t length = CreateMessage(beurs);
 8004418:	4b24      	ldr	r3, [pc, #144]	@ (80044ac <HTTPCPOST+0xa8>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	1dfc      	adds	r4, r7, #7
 800441e:	34ff      	adds	r4, #255	@ 0xff
 8004420:	0018      	movs	r0, r3
 8004422:	f7ff fa79 	bl	8003918 <CreateMessage>
 8004426:	0003      	movs	r3, r0
 8004428:	8023      	strh	r3, [r4, #0]
  if(beurs){
 800442a:	4b20      	ldr	r3, [pc, #128]	@ (80044ac <HTTPCPOST+0xa8>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004432:	1dfb      	adds	r3, r7, #7
 8004434:	33ff      	adds	r3, #255	@ 0xff
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	4a1d      	ldr	r2, [pc, #116]	@ (80044b0 <HTTPCPOST+0xac>)
 800443a:	491e      	ldr	r1, [pc, #120]	@ (80044b4 <HTTPCPOST+0xb0>)
 800443c:	1d38      	adds	r0, r7, #4
 800443e:	f013 fffd 	bl	801843c <siprintf>
 8004442:	e016      	b.n	8004472 <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004444:	4b1c      	ldr	r3, [pc, #112]	@ (80044b8 <HTTPCPOST+0xb4>)
 8004446:	481d      	ldr	r0, [pc, #116]	@ (80044bc <HTTPCPOST+0xb8>)
 8004448:	220c      	movs	r2, #12
 800444a:	0019      	movs	r1, r3
 800444c:	f7ff f8d3 	bl	80035f6 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004450:	4a19      	ldr	r2, [pc, #100]	@ (80044b8 <HTTPCPOST+0xb4>)
 8004452:	4b1b      	ldr	r3, [pc, #108]	@ (80044c0 <HTTPCPOST+0xbc>)
 8004454:	0011      	movs	r1, r2
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff fa3a 	bl	80038d0 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 800445c:	1dfb      	adds	r3, r7, #7
 800445e:	33ff      	adds	r3, #255	@ 0xff
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	4c17      	ldr	r4, [pc, #92]	@ (80044c0 <HTTPCPOST+0xbc>)
 8004464:	4a17      	ldr	r2, [pc, #92]	@ (80044c4 <HTTPCPOST+0xc0>)
 8004466:	4918      	ldr	r1, [pc, #96]	@ (80044c8 <HTTPCPOST+0xc4>)
 8004468:	1d38      	adds	r0, r7, #4
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	0023      	movs	r3, r4
 800446e:	f013 ffe5 	bl	801843c <siprintf>
  }
    uint16_t len = strlen(atCommandBuff);
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	0018      	movs	r0, r3
 8004476:	f7fb fe47 	bl	8000108 <strlen>
 800447a:	0002      	movs	r2, r0
 800447c:	1d7b      	adds	r3, r7, #5
 800447e:	33ff      	adds	r3, #255	@ 0xff
 8004480:	801a      	strh	r2, [r3, #0]
  //char atCommand[len+1];
  //strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	0018      	movs	r0, r3
 8004486:	f7ff fbf3 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 800448a:	1d7b      	adds	r3, r7, #5
 800448c:	33ff      	adds	r3, #255	@ 0xff
 800448e:	881a      	ldrh	r2, [r3, #0]
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	0011      	movs	r1, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff f985 	bl	80037a4 <ESP_Send>
 800449a:	1e03      	subs	r3, r0, #0
 800449c:	d001      	beq.n	80044a2 <HTTPCPOST+0x9e>
    return true;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 80044a2:	2300      	movs	r3, #0
  }
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b043      	add	sp, #268	@ 0x10c
 80044aa:	bd90      	pop	{r4, r7, pc}
 80044ac:	200004f5 	.word	0x200004f5
 80044b0:	0801c068 	.word	0x0801c068
 80044b4:	0801b798 	.word	0x0801b798
 80044b8:	20000bbc 	.word	0x20000bbc
 80044bc:	08080000 	.word	0x08080000
 80044c0:	20000bc8 	.word	0x20000bc8
 80044c4:	0801c0a4 	.word	0x0801c0a4
 80044c8:	0801b7d0 	.word	0x0801b7d0

080044cc <SENDDATA>:
bool SENDDATA(){
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	4c14      	ldr	r4, [pc, #80]	@ (8004520 <SENDDATA+0x54>)
 80044d0:	44a5      	add	sp, r4
 80044d2:	af00      	add	r7, sp, #0
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 80044d4:	23a4      	movs	r3, #164	@ 0xa4
 80044d6:	009a      	lsls	r2, r3, #2
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	2100      	movs	r1, #0
 80044dc:	0018      	movs	r0, r3
 80044de:	f014 f851 	bl	8018584 <memset>
  //sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
  uint16_t len = strlen(message);
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <SENDDATA+0x58>)
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7fb fe0f 	bl	8000108 <strlen>
 80044ea:	0002      	movs	r2, r0
 80044ec:	4c0e      	ldr	r4, [pc, #56]	@ (8004528 <SENDDATA+0x5c>)
 80044ee:	193b      	adds	r3, r7, r4
 80044f0:	801a      	strh	r2, [r3, #0]
  //char atCommand[len+1];
  //memset(atCommand, '\0', len+1);
  //1strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	0018      	movs	r0, r3
 80044f6:	f7ff fbbb 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)message, len)) {
 80044fa:	193b      	adds	r3, r7, r4
 80044fc:	881a      	ldrh	r2, [r3, #0]
 80044fe:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <SENDDATA+0x58>)
 8004500:	0011      	movs	r1, r2
 8004502:	0018      	movs	r0, r3
 8004504:	f7ff f94e 	bl	80037a4 <ESP_Send>
 8004508:	1e03      	subs	r3, r0, #0
 800450a:	d001      	beq.n	8004510 <SENDDATA+0x44>
    return true;
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <SENDDATA+0x46>
  }
  else{
    return false;
 8004510:	2300      	movs	r3, #0
  }
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	23a7      	movs	r3, #167	@ 0xa7
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	449d      	add	sp, r3
 800451c:	bd90      	pop	{r4, r7, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	fffffd64 	.word	0xfffffd64
 8004524:	2000051c 	.word	0x2000051c
 8004528:	00000296 	.word	0x00000296

0800452c <SLEEP>:
bool SLEEP(){
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004532:	4b0d      	ldr	r3, [pc, #52]	@ (8004568 <SLEEP+0x3c>)
 8004534:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f7ff fb99 	bl	8003c70 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	0018      	movs	r0, r3
 8004542:	f7fb fde1 	bl	8000108 <strlen>
 8004546:	0003      	movs	r3, r0
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0011      	movs	r1, r2
 800454e:	0018      	movs	r0, r3
 8004550:	f7ff f928 	bl	80037a4 <ESP_Send>
 8004554:	1e03      	subs	r3, r0, #0
 8004556:	d001      	beq.n	800455c <SLEEP+0x30>
    return true;
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <SLEEP+0x32>
  }
  else{
    return false;
 800455c:	2300      	movs	r3, #0
  }
}
 800455e:	0018      	movs	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	b002      	add	sp, #8
 8004564:	bd80      	pop	{r7, pc}
 8004566:	46c0      	nop			@ (mov r8, r8)
 8004568:	0801b810 	.word	0x0801b810

0800456c <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 800456c:	b5b0      	push	{r4, r5, r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	0002      	movs	r2, r0
 8004574:	1dfb      	adds	r3, r7, #7
 8004576:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004578:	4b50      	ldr	r3, [pc, #320]	@ (80046bc <DMA_ProcessBuffer+0x150>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	210e      	movs	r1, #14
 8004582:	187b      	adds	r3, r7, r1
 8004584:	43d2      	mvns	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004588:	200f      	movs	r0, #15
 800458a:	183b      	adds	r3, r7, r0
 800458c:	2203      	movs	r2, #3
 800458e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 8004590:	4b4b      	ldr	r3, [pc, #300]	@ (80046c0 <DMA_ProcessBuffer+0x154>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	187a      	adds	r2, r7, r1
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d130      	bne.n	8004600 <DMA_ProcessBuffer+0x94>
      if(retry >4){
 800459e:	4b49      	ldr	r3, [pc, #292]	@ (80046c4 <DMA_ProcessBuffer+0x158>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d91a      	bls.n	80045dc <DMA_ProcessBuffer+0x70>
        retry = 0;
 80045a6:	4b47      	ldr	r3, [pc, #284]	@ (80046c4 <DMA_ProcessBuffer+0x158>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80045ac:	4b46      	ldr	r3, [pc, #280]	@ (80046c8 <DMA_ProcessBuffer+0x15c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <DMA_ProcessBuffer+0x56>
 80045b4:	4b45      	ldr	r3, [pc, #276]	@ (80046cc <DMA_ProcessBuffer+0x160>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 80045bc:	183b      	adds	r3, r7, r0
 80045be:	2207      	movs	r2, #7
 80045c0:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80045c2:	4b41      	ldr	r3, [pc, #260]	@ (80046c8 <DMA_ProcessBuffer+0x15c>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d103      	bne.n	80045d2 <DMA_ProcessBuffer+0x66>
          EspState = ESP_STATE_MODE_SELECT;
 80045ca:	4b41      	ldr	r3, [pc, #260]	@ (80046d0 <DMA_ProcessBuffer+0x164>)
 80045cc:	220b      	movs	r2, #11
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e016      	b.n	8004600 <DMA_ProcessBuffer+0x94>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80045d2:	230f      	movs	r3, #15
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	2206      	movs	r2, #6
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e011      	b.n	8004600 <DMA_ProcessBuffer+0x94>
        }
      }
     else{
       retry ++;
 80045dc:	4b39      	ldr	r3, [pc, #228]	@ (80046c4 <DMA_ProcessBuffer+0x158>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	4b37      	ldr	r3, [pc, #220]	@ (80046c4 <DMA_ProcessBuffer+0x158>)
 80045e6:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80045e8:	f005 fe92 	bl	800a310 <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	33f5      	adds	r3, #245	@ 0xf5
 80045f0:	33ff      	adds	r3, #255	@ 0xff
 80045f2:	001a      	movs	r2, r3
 80045f4:	4b37      	ldr	r3, [pc, #220]	@ (80046d4 <DMA_ProcessBuffer+0x168>)
 80045f6:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	2204      	movs	r2, #4
 80045fe:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004600:	4b2f      	ldr	r3, [pc, #188]	@ (80046c0 <DMA_ProcessBuffer+0x154>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	210e      	movs	r1, #14
 8004608:	187a      	adds	r2, r7, r1
 800460a:	7812      	ldrb	r2, [r2, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d048      	beq.n	80046a2 <DMA_ProcessBuffer+0x136>
      retry = 0;
 8004610:	4b2c      	ldr	r3, [pc, #176]	@ (80046c4 <DMA_ProcessBuffer+0x158>)
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004616:	4b2a      	ldr	r3, [pc, #168]	@ (80046c0 <DMA_ProcessBuffer+0x154>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	187a      	adds	r2, r7, r1
 800461e:	7812      	ldrb	r2, [r2, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d917      	bls.n	8004654 <DMA_ProcessBuffer+0xe8>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004624:	4b26      	ldr	r3, [pc, #152]	@ (80046c0 <DMA_ProcessBuffer+0x154>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	001a      	movs	r2, r3
 800462c:	4b2a      	ldr	r3, [pc, #168]	@ (80046d8 <DMA_ProcessBuffer+0x16c>)
 800462e:	18d0      	adds	r0, r2, r3
 8004630:	187b      	adds	r3, r7, r1
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	4a22      	ldr	r2, [pc, #136]	@ (80046c0 <DMA_ProcessBuffer+0x154>)
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	b299      	uxth	r1, r3
 8004640:	230f      	movs	r3, #15
 8004642:	18fc      	adds	r4, r7, r3
 8004644:	1dfb      	adds	r3, r7, #7
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	001a      	movs	r2, r3
 800464a:	f7ff fb59 	bl	8003d00 <ParseBuffer>
 800464e:	0003      	movs	r3, r0
 8004650:	7023      	strb	r3, [r4, #0]
 8004652:	e026      	b.n	80046a2 <DMA_ProcessBuffer+0x136>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004654:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <DMA_ProcessBuffer+0x154>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	001a      	movs	r2, r3
 800465c:	4b1e      	ldr	r3, [pc, #120]	@ (80046d8 <DMA_ProcessBuffer+0x16c>)
 800465e:	18d0      	adds	r0, r2, r3
 8004660:	4b17      	ldr	r3, [pc, #92]	@ (80046c0 <DMA_ProcessBuffer+0x154>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	001a      	movs	r2, r3
 8004668:	23ff      	movs	r3, #255	@ 0xff
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	b299      	uxth	r1, r3
 800466e:	250f      	movs	r5, #15
 8004670:	197c      	adds	r4, r7, r5
 8004672:	1dfb      	adds	r3, r7, #7
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	001a      	movs	r2, r3
 8004678:	f7ff fb42 	bl	8003d00 <ParseBuffer>
 800467c:	0003      	movs	r3, r0
 800467e:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 8004680:	220e      	movs	r2, #14
 8004682:	18bb      	adds	r3, r7, r2
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <DMA_ProcessBuffer+0x136>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 800468a:	18bb      	adds	r3, r7, r2
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	b299      	uxth	r1, r3
 8004690:	197c      	adds	r4, r7, r5
 8004692:	1dfb      	adds	r3, r7, #7
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	4b10      	ldr	r3, [pc, #64]	@ (80046d8 <DMA_ProcessBuffer+0x16c>)
 8004698:	0018      	movs	r0, r3
 800469a:	f7ff fb31 	bl	8003d00 <ParseBuffer>
 800469e:	0003      	movs	r3, r0
 80046a0:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 80046a2:	4b07      	ldr	r3, [pc, #28]	@ (80046c0 <DMA_ProcessBuffer+0x154>)
 80046a4:	220e      	movs	r2, #14
 80046a6:	18ba      	adds	r2, r7, r2
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	701a      	strb	r2, [r3, #0]
    return status;
 80046ac:	230f      	movs	r3, #15
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	781b      	ldrb	r3, [r3, #0]
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b004      	add	sp, #16
 80046b8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	20002c6c 	.word	0x20002c6c
 80046c0:	20000927 	.word	0x20000927
 80046c4:	2000092c 	.word	0x2000092c
 80046c8:	20000b32 	.word	0x20000b32
 80046cc:	20000000 	.word	0x20000000
 80046d0:	20000021 	.word	0x20000021
 80046d4:	20000928 	.word	0x20000928
 80046d8:	200003f0 	.word	0x200003f0

080046dc <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	0002      	movs	r2, r0
 80046e4:	1dfb      	adds	r3, r7, #7
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	1dbb      	adds	r3, r7, #6
 80046ea:	1c0a      	adds	r2, r1, #0
 80046ec:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80046ee:	210f      	movs	r1, #15
 80046f0:	187b      	adds	r3, r7, r1
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80046f6:	1dbb      	adds	r3, r7, #6
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80046fe:	187b      	adds	r3, r7, r1
 8004700:	1dfa      	adds	r2, r7, #7
 8004702:	7812      	ldrb	r2, [r2, #0]
 8004704:	4251      	negs	r1, r2
 8004706:	414a      	adcs	r2, r1
 8004708:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800470a:	1dbb      	adds	r3, r7, #6
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004712:	230f      	movs	r3, #15
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	1dfa      	adds	r2, r7, #7
 8004718:	7812      	ldrb	r2, [r2, #0]
 800471a:	3a02      	subs	r2, #2
 800471c:	4251      	negs	r1, r2
 800471e:	414a      	adcs	r2, r1
 8004720:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004722:	1dbb      	adds	r3, r7, #6
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d107      	bne.n	800473a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800472a:	230f      	movs	r3, #15
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	1dfa      	adds	r2, r7, #7
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	3a05      	subs	r2, #5
 8004734:	4251      	negs	r1, r2
 8004736:	414a      	adcs	r2, r1
 8004738:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800473a:	230f      	movs	r3, #15
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	781b      	ldrb	r3, [r3, #0]
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b004      	add	sp, #16
 8004746:	bd80      	pop	{r7, pc}

08004748 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	0002      	movs	r2, r0
 8004750:	1dfb      	adds	r3, r7, #7
 8004752:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004754:	230f      	movs	r3, #15
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
  switch (state){
 800475c:	1dfb      	adds	r3, r7, #7
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b10      	cmp	r3, #16
 8004762:	d900      	bls.n	8004766 <AT_Send+0x1e>
 8004764:	e15f      	b.n	8004a26 <AT_Send+0x2de>
 8004766:	009a      	lsls	r2, r3, #2
 8004768:	4bb2      	ldr	r3, [pc, #712]	@ (8004a34 <AT_Send+0x2ec>)
 800476a:	18d3      	adds	r3, r2, r3
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004770:	4bb1      	ldr	r3, [pc, #708]	@ (8004a38 <AT_Send+0x2f0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	0018      	movs	r0, r3
 8004776:	f005 f9ef 	bl	8009b58 <TimestampIsReached>
 800477a:	1e03      	subs	r3, r0, #0
 800477c:	d100      	bne.n	8004780 <AT_Send+0x38>
 800477e:	e151      	b.n	8004a24 <AT_Send+0x2dc>
    ATCommandSend = PollAwake();
 8004780:	230f      	movs	r3, #15
 8004782:	18fc      	adds	r4, r7, r3
 8004784:	f7ff fc18 	bl	8003fb8 <PollAwake>
 8004788:	0003      	movs	r3, r0
 800478a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800478c:	f005 fdc0 	bl	800a310 <HAL_GetTick>
 8004790:	0003      	movs	r3, r0
 8004792:	3332      	adds	r3, #50	@ 0x32
 8004794:	001a      	movs	r2, r3
 8004796:	4ba8      	ldr	r3, [pc, #672]	@ (8004a38 <AT_Send+0x2f0>)
 8004798:	601a      	str	r2, [r3, #0]
  }
  break;
 800479a:	e143      	b.n	8004a24 <AT_Send+0x2dc>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 800479c:	4aa7      	ldr	r2, [pc, #668]	@ (8004a3c <AT_Send+0x2f4>)
 800479e:	4ba8      	ldr	r3, [pc, #672]	@ (8004a40 <AT_Send+0x2f8>)
 80047a0:	0019      	movs	r1, r3
 80047a2:	2003      	movs	r0, #3
 80047a4:	f005 fa2e 	bl	8009c04 <CreateLine>
    ATCommandSend = RFPower();
 80047a8:	230f      	movs	r3, #15
 80047aa:	18fc      	adds	r4, r7, r3
 80047ac:	f7ff fc24 	bl	8003ff8 <RFPower>
 80047b0:	0003      	movs	r3, r0
 80047b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047b4:	f005 fdac 	bl	800a310 <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	330a      	adds	r3, #10
 80047bc:	001a      	movs	r2, r3
 80047be:	4b9e      	ldr	r3, [pc, #632]	@ (8004a38 <AT_Send+0x2f0>)
 80047c0:	601a      	str	r2, [r3, #0]
    break;
 80047c2:	e130      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 80047c4:	4a9f      	ldr	r2, [pc, #636]	@ (8004a44 <AT_Send+0x2fc>)
 80047c6:	4b9e      	ldr	r3, [pc, #632]	@ (8004a40 <AT_Send+0x2f8>)
 80047c8:	0019      	movs	r1, r3
 80047ca:	2003      	movs	r0, #3
 80047cc:	f005 fa1a 	bl	8009c04 <CreateLine>
    ATCommandSend = CheckRFPower();
 80047d0:	230f      	movs	r3, #15
 80047d2:	18fc      	adds	r4, r7, r3
 80047d4:	f7ff fc30 	bl	8004038 <CheckRFPower>
 80047d8:	0003      	movs	r3, r0
 80047da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047dc:	f005 fd98 	bl	800a310 <HAL_GetTick>
 80047e0:	0003      	movs	r3, r0
 80047e2:	330a      	adds	r3, #10
 80047e4:	001a      	movs	r2, r3
 80047e6:	4b94      	ldr	r3, [pc, #592]	@ (8004a38 <AT_Send+0x2f0>)
 80047e8:	601a      	str	r2, [r3, #0]
    break;
 80047ea:	e11c      	b.n	8004a26 <AT_Send+0x2de>

  case AT_RESTORE:
    Debug("Restoring ESP");
 80047ec:	4a96      	ldr	r2, [pc, #600]	@ (8004a48 <AT_Send+0x300>)
 80047ee:	4b94      	ldr	r3, [pc, #592]	@ (8004a40 <AT_Send+0x2f8>)
 80047f0:	0019      	movs	r1, r3
 80047f2:	2003      	movs	r0, #3
 80047f4:	f005 fa06 	bl	8009c04 <CreateLine>
    ATCommandSend = ATRestore();
 80047f8:	230f      	movs	r3, #15
 80047fa:	18fc      	adds	r4, r7, r3
 80047fc:	f7ff fc3c 	bl	8004078 <ATRestore>
 8004800:	0003      	movs	r3, r0
 8004802:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004804:	f005 fd84 	bl	800a310 <HAL_GetTick>
 8004808:	0003      	movs	r3, r0
 800480a:	3332      	adds	r3, #50	@ 0x32
 800480c:	001a      	movs	r2, r3
 800480e:	4b8a      	ldr	r3, [pc, #552]	@ (8004a38 <AT_Send+0x2f0>)
 8004810:	601a      	str	r2, [r3, #0]
    break;
 8004812:	e108      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004814:	4a8d      	ldr	r2, [pc, #564]	@ (8004a4c <AT_Send+0x304>)
 8004816:	4b8a      	ldr	r3, [pc, #552]	@ (8004a40 <AT_Send+0x2f8>)
 8004818:	0019      	movs	r1, r3
 800481a:	2003      	movs	r0, #3
 800481c:	f005 f9f2 	bl	8009c04 <CreateLine>
    ATCommandSend = CWINIT();
 8004820:	230f      	movs	r3, #15
 8004822:	18fc      	adds	r4, r7, r3
 8004824:	f7ff fc48 	bl	80040b8 <CWINIT>
 8004828:	0003      	movs	r3, r0
 800482a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800482c:	f005 fd70 	bl	800a310 <HAL_GetTick>
 8004830:	0003      	movs	r3, r0
 8004832:	33f5      	adds	r3, #245	@ 0xf5
 8004834:	33ff      	adds	r3, #255	@ 0xff
 8004836:	001a      	movs	r2, r3
 8004838:	4b7f      	ldr	r3, [pc, #508]	@ (8004a38 <AT_Send+0x2f0>)
 800483a:	601a      	str	r2, [r3, #0]
    break;
 800483c:	e0f3      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 800483e:	4a84      	ldr	r2, [pc, #528]	@ (8004a50 <AT_Send+0x308>)
 8004840:	4b7f      	ldr	r3, [pc, #508]	@ (8004a40 <AT_Send+0x2f8>)
 8004842:	0019      	movs	r1, r3
 8004844:	2003      	movs	r0, #3
 8004846:	f005 f9dd 	bl	8009c04 <CreateLine>
    ATCommandSend = CWSTATE();
 800484a:	230f      	movs	r3, #15
 800484c:	18fc      	adds	r4, r7, r3
 800484e:	f7ff fd59 	bl	8004304 <CWSTATE>
 8004852:	0003      	movs	r3, r0
 8004854:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004856:	f005 fd5b 	bl	800a310 <HAL_GetTick>
 800485a:	0003      	movs	r3, r0
 800485c:	33f5      	adds	r3, #245	@ 0xf5
 800485e:	33ff      	adds	r3, #255	@ 0xff
 8004860:	001a      	movs	r2, r3
 8004862:	4b75      	ldr	r3, [pc, #468]	@ (8004a38 <AT_Send+0x2f0>)
 8004864:	601a      	str	r2, [r3, #0]
    break;
 8004866:	e0de      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004868:	4a7a      	ldr	r2, [pc, #488]	@ (8004a54 <AT_Send+0x30c>)
 800486a:	4b75      	ldr	r3, [pc, #468]	@ (8004a40 <AT_Send+0x2f8>)
 800486c:	0019      	movs	r1, r3
 800486e:	2003      	movs	r0, #3
 8004870:	f005 f9c8 	bl	8009c04 <CreateLine>
    ATCommandSend = CWMODE1();
 8004874:	230f      	movs	r3, #15
 8004876:	18fc      	adds	r4, r7, r3
 8004878:	f7ff fc3e 	bl	80040f8 <CWMODE1>
 800487c:	0003      	movs	r3, r0
 800487e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004880:	f005 fd46 	bl	800a310 <HAL_GetTick>
 8004884:	0003      	movs	r3, r0
 8004886:	330a      	adds	r3, #10
 8004888:	001a      	movs	r2, r3
 800488a:	4b6b      	ldr	r3, [pc, #428]	@ (8004a38 <AT_Send+0x2f0>)
 800488c:	601a      	str	r2, [r3, #0]
    break;
 800488e:	e0ca      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004890:	4a70      	ldr	r2, [pc, #448]	@ (8004a54 <AT_Send+0x30c>)
 8004892:	4b6b      	ldr	r3, [pc, #428]	@ (8004a40 <AT_Send+0x2f8>)
 8004894:	0019      	movs	r1, r3
 8004896:	2003      	movs	r0, #3
 8004898:	f005 f9b4 	bl	8009c04 <CreateLine>
    ATCommandSend = CWMODE2();
 800489c:	230f      	movs	r3, #15
 800489e:	18fc      	adds	r4, r7, r3
 80048a0:	f7ff fc4a 	bl	8004138 <CWMODE2>
 80048a4:	0003      	movs	r3, r0
 80048a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80048a8:	f005 fd32 	bl	800a310 <HAL_GetTick>
 80048ac:	0003      	movs	r3, r0
 80048ae:	330a      	adds	r3, #10
 80048b0:	001a      	movs	r2, r3
 80048b2:	4b61      	ldr	r3, [pc, #388]	@ (8004a38 <AT_Send+0x2f0>)
 80048b4:	601a      	str	r2, [r3, #0]
    break;
 80048b6:	e0b6      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 80048b8:	4a67      	ldr	r2, [pc, #412]	@ (8004a58 <AT_Send+0x310>)
 80048ba:	4b61      	ldr	r3, [pc, #388]	@ (8004a40 <AT_Send+0x2f8>)
 80048bc:	0019      	movs	r1, r3
 80048be:	2003      	movs	r0, #3
 80048c0:	f005 f9a0 	bl	8009c04 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 80048c4:	230f      	movs	r3, #15
 80048c6:	18fc      	adds	r4, r7, r3
 80048c8:	f7ff fc56 	bl	8004178 <CWAUTOCONN>
 80048cc:	0003      	movs	r3, r0
 80048ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80048d0:	f005 fd1e 	bl	800a310 <HAL_GetTick>
 80048d4:	0003      	movs	r3, r0
 80048d6:	330a      	adds	r3, #10
 80048d8:	001a      	movs	r2, r3
 80048da:	4b57      	ldr	r3, [pc, #348]	@ (8004a38 <AT_Send+0x2f0>)
 80048dc:	601a      	str	r2, [r3, #0]
    break;
 80048de:	e0a2      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80048e0:	4a5e      	ldr	r2, [pc, #376]	@ (8004a5c <AT_Send+0x314>)
 80048e2:	4b57      	ldr	r3, [pc, #348]	@ (8004a40 <AT_Send+0x2f8>)
 80048e4:	0019      	movs	r1, r3
 80048e6:	2003      	movs	r0, #3
 80048e8:	f005 f98c 	bl	8009c04 <CreateLine>
    ATCommandSend = CWJAP();
 80048ec:	230f      	movs	r3, #15
 80048ee:	18fc      	adds	r4, r7, r3
 80048f0:	f7ff fc62 	bl	80041b8 <CWJAP>
 80048f4:	0003      	movs	r3, r0
 80048f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80048f8:	f005 fd0a 	bl	800a310 <HAL_GetTick>
 80048fc:	0003      	movs	r3, r0
 80048fe:	3332      	adds	r3, #50	@ 0x32
 8004900:	001a      	movs	r2, r3
 8004902:	4b4d      	ldr	r3, [pc, #308]	@ (8004a38 <AT_Send+0x2f0>)
 8004904:	601a      	str	r2, [r3, #0]
    break;
 8004906:	e08e      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004908:	4a55      	ldr	r2, [pc, #340]	@ (8004a60 <AT_Send+0x318>)
 800490a:	4b4d      	ldr	r3, [pc, #308]	@ (8004a40 <AT_Send+0x2f8>)
 800490c:	0019      	movs	r1, r3
 800490e:	2003      	movs	r0, #3
 8004910:	f005 f978 	bl	8009c04 <CreateLine>
    ATCommandSend = CWMODE3();
 8004914:	230f      	movs	r3, #15
 8004916:	18fc      	adds	r4, r7, r3
 8004918:	f7ff fcd4 	bl	80042c4 <CWMODE3>
 800491c:	0003      	movs	r3, r0
 800491e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004920:	f005 fcf6 	bl	800a310 <HAL_GetTick>
 8004924:	0003      	movs	r3, r0
 8004926:	330a      	adds	r3, #10
 8004928:	001a      	movs	r2, r3
 800492a:	4b43      	ldr	r3, [pc, #268]	@ (8004a38 <AT_Send+0x2f0>)
 800492c:	601a      	str	r2, [r3, #0]
    break;
 800492e:	e07a      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004930:	4a4c      	ldr	r2, [pc, #304]	@ (8004a64 <AT_Send+0x31c>)
 8004932:	4b43      	ldr	r3, [pc, #268]	@ (8004a40 <AT_Send+0x2f8>)
 8004934:	0019      	movs	r1, r3
 8004936:	2003      	movs	r0, #3
 8004938:	f005 f964 	bl	8009c04 <CreateLine>
    ATCommandSend = CWSAP();
 800493c:	230f      	movs	r3, #15
 800493e:	18fc      	adds	r4, r7, r3
 8004940:	f7ff fd00 	bl	8004344 <CWSAP>
 8004944:	0003      	movs	r3, r0
 8004946:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004948:	f005 fce2 	bl	800a310 <HAL_GetTick>
 800494c:	0003      	movs	r3, r0
 800494e:	330a      	adds	r3, #10
 8004950:	001a      	movs	r2, r3
 8004952:	4b39      	ldr	r3, [pc, #228]	@ (8004a38 <AT_Send+0x2f0>)
 8004954:	601a      	str	r2, [r3, #0]
    break;
 8004956:	e066      	b.n	8004a26 <AT_Send+0x2de>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 8004958:	4a43      	ldr	r2, [pc, #268]	@ (8004a68 <AT_Send+0x320>)
 800495a:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <AT_Send+0x2f8>)
 800495c:	0019      	movs	r1, r3
 800495e:	2003      	movs	r0, #3
 8004960:	f005 f950 	bl	8009c04 <CreateLine>
    ATCommandSend = CIPMUX();
 8004964:	230f      	movs	r3, #15
 8004966:	18fc      	adds	r4, r7, r3
 8004968:	f7ff fd0c 	bl	8004384 <CIPMUX>
 800496c:	0003      	movs	r3, r0
 800496e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004970:	f005 fcce 	bl	800a310 <HAL_GetTick>
 8004974:	0003      	movs	r3, r0
 8004976:	330a      	adds	r3, #10
 8004978:	001a      	movs	r2, r3
 800497a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a38 <AT_Send+0x2f0>)
 800497c:	601a      	str	r2, [r3, #0]
    break;
 800497e:	e052      	b.n	8004a26 <AT_Send+0x2de>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 8004980:	4a37      	ldr	r2, [pc, #220]	@ (8004a60 <AT_Send+0x318>)
 8004982:	4b2f      	ldr	r3, [pc, #188]	@ (8004a40 <AT_Send+0x2f8>)
 8004984:	0019      	movs	r1, r3
 8004986:	2003      	movs	r0, #3
 8004988:	f005 f93c 	bl	8009c04 <CreateLine>
    ATCommandSend = WEBSERVER();
 800498c:	230f      	movs	r3, #15
 800498e:	18fc      	adds	r4, r7, r3
 8004990:	f7ff fd18 	bl	80043c4 <WEBSERVER>
 8004994:	0003      	movs	r3, r0
 8004996:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004998:	f005 fcba 	bl	800a310 <HAL_GetTick>
 800499c:	0003      	movs	r3, r0
 800499e:	330a      	adds	r3, #10
 80049a0:	001a      	movs	r2, r3
 80049a2:	4b25      	ldr	r3, [pc, #148]	@ (8004a38 <AT_Send+0x2f0>)
 80049a4:	601a      	str	r2, [r3, #0]
    break;
 80049a6:	e03e      	b.n	8004a26 <AT_Send+0x2de>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80049a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a60 <AT_Send+0x318>)
 80049aa:	4b25      	ldr	r3, [pc, #148]	@ (8004a40 <AT_Send+0x2f8>)
 80049ac:	0019      	movs	r1, r3
 80049ae:	2003      	movs	r0, #3
 80049b0:	f005 f928 	bl	8009c04 <CreateLine>
    ATCommandSend = HTTPCPOST();
 80049b4:	230f      	movs	r3, #15
 80049b6:	18fc      	adds	r4, r7, r3
 80049b8:	f7ff fd24 	bl	8004404 <HTTPCPOST>
 80049bc:	0003      	movs	r3, r0
 80049be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80049c0:	f005 fca6 	bl	800a310 <HAL_GetTick>
 80049c4:	0003      	movs	r3, r0
 80049c6:	33f5      	adds	r3, #245	@ 0xf5
 80049c8:	33ff      	adds	r3, #255	@ 0xff
 80049ca:	001a      	movs	r2, r3
 80049cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a38 <AT_Send+0x2f0>)
 80049ce:	601a      	str	r2, [r3, #0]
    break;
 80049d0:	e029      	b.n	8004a26 <AT_Send+0x2de>

  case AT_SENDDATA:
    Debug("Send the data");
 80049d2:	4a26      	ldr	r2, [pc, #152]	@ (8004a6c <AT_Send+0x324>)
 80049d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a40 <AT_Send+0x2f8>)
 80049d6:	0019      	movs	r1, r3
 80049d8:	2003      	movs	r0, #3
 80049da:	f005 f913 	bl	8009c04 <CreateLine>
    ATCommandSend = SENDDATA();
 80049de:	230f      	movs	r3, #15
 80049e0:	18fc      	adds	r4, r7, r3
 80049e2:	f7ff fd73 	bl	80044cc <SENDDATA>
 80049e6:	0003      	movs	r3, r0
 80049e8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80049ea:	f005 fc91 	bl	800a310 <HAL_GetTick>
 80049ee:	0003      	movs	r3, r0
 80049f0:	33f5      	adds	r3, #245	@ 0xf5
 80049f2:	33ff      	adds	r3, #255	@ 0xff
 80049f4:	001a      	movs	r2, r3
 80049f6:	4b10      	ldr	r3, [pc, #64]	@ (8004a38 <AT_Send+0x2f0>)
 80049f8:	601a      	str	r2, [r3, #0]
    break;
 80049fa:	e014      	b.n	8004a26 <AT_Send+0x2de>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80049fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a70 <AT_Send+0x328>)
 80049fe:	4b10      	ldr	r3, [pc, #64]	@ (8004a40 <AT_Send+0x2f8>)
 8004a00:	0019      	movs	r1, r3
 8004a02:	2003      	movs	r0, #3
 8004a04:	f005 f8fe 	bl	8009c04 <CreateLine>
    ATCommandSend = SLEEP();
 8004a08:	230f      	movs	r3, #15
 8004a0a:	18fc      	adds	r4, r7, r3
 8004a0c:	f7ff fd8e 	bl	800452c <SLEEP>
 8004a10:	0003      	movs	r3, r0
 8004a12:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004a14:	f005 fc7c 	bl	800a310 <HAL_GetTick>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	330a      	adds	r3, #10
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <AT_Send+0x2f0>)
 8004a20:	601a      	str	r2, [r3, #0]
    break;
 8004a22:	e000      	b.n	8004a26 <AT_Send+0x2de>
  break;
 8004a24:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004a26:	230f      	movs	r3, #15
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	781b      	ldrb	r3, [r3, #0]
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b005      	add	sp, #20
 8004a32:	bd90      	pop	{r4, r7, pc}
 8004a34:	0801c0cc 	.word	0x0801c0cc
 8004a38:	20000928 	.word	0x20000928
 8004a3c:	0801b820 	.word	0x0801b820
 8004a40:	0801b3b0 	.word	0x0801b3b0
 8004a44:	0801b834 	.word	0x0801b834
 8004a48:	0801b848 	.word	0x0801b848
 8004a4c:	0801b858 	.word	0x0801b858
 8004a50:	0801b86c 	.word	0x0801b86c
 8004a54:	0801b884 	.word	0x0801b884
 8004a58:	0801b89c 	.word	0x0801b89c
 8004a5c:	0801b8b4 	.word	0x0801b8b4
 8004a60:	0801b8c8 	.word	0x0801b8c8
 8004a64:	0801b8e4 	.word	0x0801b8e4
 8004a68:	0801b900 	.word	0x0801b900
 8004a6c:	0801b924 	.word	0x0801b924
 8004a70:	0801b934 	.word	0x0801b934

08004a74 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004a7a:	1dfb      	adds	r3, r7, #7
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004a80:	4b79      	ldr	r3, [pc, #484]	@ (8004c68 <ESP_WakeTest+0x1f4>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d900      	bls.n	8004a8a <ESP_WakeTest+0x16>
 8004a88:	e0d4      	b.n	8004c34 <ESP_WakeTest+0x1c0>
 8004a8a:	009a      	lsls	r2, r3, #2
 8004a8c:	4b77      	ldr	r3, [pc, #476]	@ (8004c6c <ESP_WakeTest+0x1f8>)
 8004a8e:	18d3      	adds	r3, r2, r3
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004a94:	4b76      	ldr	r3, [pc, #472]	@ (8004c70 <ESP_WakeTest+0x1fc>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4053      	eors	r3, r2
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d036      	beq.n	8004b10 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	4873      	ldr	r0, [pc, #460]	@ (8004c74 <ESP_WakeTest+0x200>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	0019      	movs	r1, r3
 8004aac:	f006 ffcf 	bl	800ba4e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004ab0:	2032      	movs	r0, #50	@ 0x32
 8004ab2:	f005 fc37 	bl	800a324 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004ab6:	2380      	movs	r3, #128	@ 0x80
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	486e      	ldr	r0, [pc, #440]	@ (8004c74 <ESP_WakeTest+0x200>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	0019      	movs	r1, r3
 8004ac0:	f006 ffc5 	bl	800ba4e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ac4:	200a      	movs	r0, #10
 8004ac6:	f005 fc2d 	bl	800a324 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004aca:	4b6b      	ldr	r3, [pc, #428]	@ (8004c78 <ESP_WakeTest+0x204>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	2101      	movs	r1, #1
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f006 ffbc 	bl	800ba4e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ad6:	200a      	movs	r0, #10
 8004ad8:	f005 fc24 	bl	800a324 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004adc:	4b66      	ldr	r3, [pc, #408]	@ (8004c78 <ESP_WakeTest+0x204>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f006 ffb3 	bl	800ba4e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ae8:	200a      	movs	r0, #10
 8004aea:	f005 fc1b 	bl	800a324 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004aee:	4b62      	ldr	r3, [pc, #392]	@ (8004c78 <ESP_WakeTest+0x204>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	2101      	movs	r1, #1
 8004af4:	0018      	movs	r0, r3
 8004af6:	f006 ffaa 	bl	800ba4e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004afa:	f005 fc09 	bl	800a310 <HAL_GetTick>
 8004afe:	0003      	movs	r3, r0
 8004b00:	22af      	movs	r2, #175	@ 0xaf
 8004b02:	0092      	lsls	r2, r2, #2
 8004b04:	189a      	adds	r2, r3, r2
 8004b06:	4b5d      	ldr	r3, [pc, #372]	@ (8004c7c <ESP_WakeTest+0x208>)
 8004b08:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004b0a:	4b59      	ldr	r3, [pc, #356]	@ (8004c70 <ESP_WakeTest+0x1fc>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004b10:	4b5b      	ldr	r3, [pc, #364]	@ (8004c80 <ESP_WakeTest+0x20c>)
 8004b12:	21ff      	movs	r1, #255	@ 0xff
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7fe fe6f 	bl	80037f8 <ESP_Receive>
 8004b1a:	1e03      	subs	r3, r0, #0
 8004b1c:	d100      	bne.n	8004b20 <ESP_WakeTest+0xac>
 8004b1e:	e099      	b.n	8004c54 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 8004b20:	4b51      	ldr	r3, [pc, #324]	@ (8004c68 <ESP_WakeTest+0x1f4>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b26:	e095      	b.n	8004c54 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004b28:	4b54      	ldr	r3, [pc, #336]	@ (8004c7c <ESP_WakeTest+0x208>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f005 f813 	bl	8009b58 <TimestampIsReached>
 8004b32:	1e03      	subs	r3, r0, #0
 8004b34:	d100      	bne.n	8004b38 <ESP_WakeTest+0xc4>
 8004b36:	e08f      	b.n	8004c58 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004b38:	4b52      	ldr	r3, [pc, #328]	@ (8004c84 <ESP_WakeTest+0x210>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	1dfc      	adds	r4, r7, #7
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7ff fe02 	bl	8004748 <AT_Send>
 8004b44:	0003      	movs	r3, r0
 8004b46:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004b48:	1dfb      	adds	r3, r7, #7
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d100      	bne.n	8004b52 <ESP_WakeTest+0xde>
 8004b50:	e082      	b.n	8004c58 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 8004b52:	4b45      	ldr	r3, [pc, #276]	@ (8004c68 <ESP_WakeTest+0x1f4>)
 8004b54:	2202      	movs	r2, #2
 8004b56:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004b58:	e07e      	b.n	8004c58 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004b5a:	4b48      	ldr	r3, [pc, #288]	@ (8004c7c <ESP_WakeTest+0x208>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f004 fffa 	bl	8009b58 <TimestampIsReached>
 8004b64:	1e03      	subs	r3, r0, #0
 8004b66:	d100      	bne.n	8004b6a <ESP_WakeTest+0xf6>
 8004b68:	e078      	b.n	8004c5c <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004b6a:	4b47      	ldr	r3, [pc, #284]	@ (8004c88 <ESP_WakeTest+0x214>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7ff fcfc 	bl	800456c <DMA_ProcessBuffer>
 8004b74:	0003      	movs	r3, r0
 8004b76:	001a      	movs	r2, r3
 8004b78:	4b44      	ldr	r3, [pc, #272]	@ (8004c8c <ESP_WakeTest+0x218>)
 8004b7a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004b7c:	4b43      	ldr	r3, [pc, #268]	@ (8004c8c <ESP_WakeTest+0x218>)
 8004b7e:	781a      	ldrb	r2, [r3, #0]
 8004b80:	4b41      	ldr	r3, [pc, #260]	@ (8004c88 <ESP_WakeTest+0x214>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	1dbc      	adds	r4, r7, #6
 8004b86:	0019      	movs	r1, r3
 8004b88:	0010      	movs	r0, r2
 8004b8a:	f7ff fda7 	bl	80046dc <ATCompare>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004b92:	4b3e      	ldr	r3, [pc, #248]	@ (8004c8c <ESP_WakeTest+0x218>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d102      	bne.n	8004ba0 <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 8004b9a:	4b33      	ldr	r3, [pc, #204]	@ (8004c68 <ESP_WakeTest+0x1f4>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8004c8c <ESP_WakeTest+0x218>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b07      	cmp	r3, #7
 8004ba6:	d104      	bne.n	8004bb2 <ESP_WakeTest+0x13e>
          StartProg();
 8004ba8:	f7ff f878 	bl	8003c9c <StartProg>
          TestState = ESP_TEST_BOOT;
 8004bac:	4b2e      	ldr	r3, [pc, #184]	@ (8004c68 <ESP_WakeTest+0x1f4>)
 8004bae:	2205      	movs	r2, #5
 8004bb0:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004bb2:	4b36      	ldr	r3, [pc, #216]	@ (8004c8c <ESP_WakeTest+0x218>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d109      	bne.n	8004bce <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004bba:	f005 fba9 	bl	800a310 <HAL_GetTick>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	3332      	adds	r3, #50	@ 0x32
 8004bc2:	001a      	movs	r2, r3
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <ESP_WakeTest+0x208>)
 8004bc6:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004bc8:	4b27      	ldr	r3, [pc, #156]	@ (8004c68 <ESP_WakeTest+0x1f4>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004bce:	1dbb      	adds	r3, r7, #6
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d042      	beq.n	8004c5c <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004bd6:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <ESP_WakeTest+0x1f4>)
 8004bd8:	2203      	movs	r2, #3
 8004bda:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004bdc:	e03e      	b.n	8004c5c <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004bde:	4b2c      	ldr	r3, [pc, #176]	@ (8004c90 <ESP_WakeTest+0x21c>)
 8004be0:	22fa      	movs	r2, #250	@ 0xfa
 8004be2:	0112      	lsls	r2, r2, #4
 8004be4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004be6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c90 <ESP_WakeTest+0x21c>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004bec:	4b28      	ldr	r3, [pc, #160]	@ (8004c90 <ESP_WakeTest+0x21c>)
 8004bee:	22fa      	movs	r2, #250	@ 0xfa
 8004bf0:	0112      	lsls	r2, r2, #4
 8004bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c68 <ESP_WakeTest+0x1f4>)
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	701a      	strb	r2, [r3, #0]

      break;
 8004bfa:	e030      	b.n	8004c5e <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004bfc:	4b25      	ldr	r3, [pc, #148]	@ (8004c94 <ESP_WakeTest+0x220>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004c02:	4b1b      	ldr	r3, [pc, #108]	@ (8004c70 <ESP_WakeTest+0x1fc>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004c08:	4b1b      	ldr	r3, [pc, #108]	@ (8004c78 <ESP_WakeTest+0x204>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f006 ff1d 	bl	800ba4e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	4816      	ldr	r0, [pc, #88]	@ (8004c74 <ESP_WakeTest+0x200>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	f006 ff16 	bl	800ba4e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <ESP_WakeTest+0x204>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	2102      	movs	r1, #2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f006 ff10 	bl	800ba4e <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004c2e:	f002 f8bf 	bl	8006db0 <SetESPMeasurementDone>
      break;
 8004c32:	e014      	b.n	8004c5e <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004c34:	4b0c      	ldr	r3, [pc, #48]	@ (8004c68 <ESP_WakeTest+0x1f4>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
      break;
 8004c3a:	e010      	b.n	8004c5e <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004c3c:	4b14      	ldr	r3, [pc, #80]	@ (8004c90 <ESP_WakeTest+0x21c>)
 8004c3e:	22fa      	movs	r2, #250	@ 0xfa
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004c44:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <ESP_WakeTest+0x21c>)
 8004c46:	22fa      	movs	r2, #250	@ 0xfa
 8004c48:	0112      	lsls	r2, r2, #4
 8004c4a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004c4c:	4b10      	ldr	r3, [pc, #64]	@ (8004c90 <ESP_WakeTest+0x21c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004c52:	e004      	b.n	8004c5e <ESP_WakeTest+0x1ea>
      break;
 8004c54:	46c0      	nop			@ (mov r8, r8)
 8004c56:	e002      	b.n	8004c5e <ESP_WakeTest+0x1ea>
      break;
 8004c58:	46c0      	nop			@ (mov r8, r8)
 8004c5a:	e000      	b.n	8004c5e <ESP_WakeTest+0x1ea>
      break;
 8004c5c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b003      	add	sp, #12
 8004c64:	bd90      	pop	{r4, r7, pc}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	20000b34 	.word	0x20000b34
 8004c6c:	0801c110 	.word	0x0801c110
 8004c70:	200004ef 	.word	0x200004ef
 8004c74:	50000800 	.word	0x50000800
 8004c78:	50001c00 	.word	0x50001c00
 8004c7c:	20000928 	.word	0x20000928
 8004c80:	200003f0 	.word	0x200003f0
 8004c84:	20000b32 	.word	0x20000b32
 8004c88:	20000b31 	.word	0x20000b31
 8004c8c:	20000022 	.word	0x20000022
 8004c90:	40000400 	.word	0x40000400
 8004c94:	20000000 	.word	0x20000000

08004c98 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004c9e:	1dfb      	adds	r3, r7, #7
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004ca4:	4bc2      	ldr	r3, [pc, #776]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b0e      	cmp	r3, #14
 8004caa:	d900      	bls.n	8004cae <ESP_Upkeep+0x16>
 8004cac:	e266      	b.n	800517c <ESP_Upkeep+0x4e4>
 8004cae:	009a      	lsls	r2, r3, #2
 8004cb0:	4bc0      	ldr	r3, [pc, #768]	@ (8004fb4 <ESP_Upkeep+0x31c>)
 8004cb2:	18d3      	adds	r3, r2, r3
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004cb8:	4bbd      	ldr	r3, [pc, #756]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
      break;
 8004cbe:	e274      	b.n	80051aa <ESP_Upkeep+0x512>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004cc0:	4bbd      	ldr	r3, [pc, #756]	@ (8004fb8 <ESP_Upkeep+0x320>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4053      	eors	r3, r2
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d036      	beq.n	8004d3c <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004cce:	2380      	movs	r3, #128	@ 0x80
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	48ba      	ldr	r0, [pc, #744]	@ (8004fbc <ESP_Upkeep+0x324>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	f006 feb9 	bl	800ba4e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004cdc:	2001      	movs	r0, #1
 8004cde:	f005 fb21 	bl	800a324 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004ce2:	2380      	movs	r3, #128	@ 0x80
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	48b5      	ldr	r0, [pc, #724]	@ (8004fbc <ESP_Upkeep+0x324>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	0019      	movs	r1, r3
 8004cec:	f006 feaf 	bl	800ba4e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	f005 fb17 	bl	800a324 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004cf6:	4bb2      	ldr	r3, [pc, #712]	@ (8004fc0 <ESP_Upkeep+0x328>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f006 fea6 	bl	800ba4e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004d02:	2001      	movs	r0, #1
 8004d04:	f005 fb0e 	bl	800a324 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004d08:	4bad      	ldr	r3, [pc, #692]	@ (8004fc0 <ESP_Upkeep+0x328>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	2102      	movs	r1, #2
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f006 fe9d 	bl	800ba4e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004d14:	2001      	movs	r0, #1
 8004d16:	f005 fb05 	bl	800a324 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004d1a:	4ba9      	ldr	r3, [pc, #676]	@ (8004fc0 <ESP_Upkeep+0x328>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	2101      	movs	r1, #1
 8004d20:	0018      	movs	r0, r3
 8004d22:	f006 fe94 	bl	800ba4e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004d26:	f005 faf3 	bl	800a310 <HAL_GetTick>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	22af      	movs	r2, #175	@ 0xaf
 8004d2e:	0092      	lsls	r2, r2, #2
 8004d30:	189a      	adds	r2, r3, r2
 8004d32:	4ba4      	ldr	r3, [pc, #656]	@ (8004fc4 <ESP_Upkeep+0x32c>)
 8004d34:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004d36:	4ba0      	ldr	r3, [pc, #640]	@ (8004fb8 <ESP_Upkeep+0x320>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004d3c:	4ba2      	ldr	r3, [pc, #648]	@ (8004fc8 <ESP_Upkeep+0x330>)
 8004d3e:	21ff      	movs	r1, #255	@ 0xff
 8004d40:	0018      	movs	r0, r3
 8004d42:	f7fe fd59 	bl	80037f8 <ESP_Receive>
 8004d46:	1e03      	subs	r3, r0, #0
 8004d48:	d100      	bne.n	8004d4c <ESP_Upkeep+0xb4>
 8004d4a:	e223      	b.n	8005194 <ESP_Upkeep+0x4fc>
        EspState = ESP_STATE_MODE_SELECT;
 8004d4c:	4b98      	ldr	r3, [pc, #608]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004d4e:	220b      	movs	r2, #11
 8004d50:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004d52:	e21f      	b.n	8005194 <ESP_Upkeep+0x4fc>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004d54:	4b9d      	ldr	r3, [pc, #628]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004d56:	2209      	movs	r2, #9
 8004d58:	2111      	movs	r1, #17
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f013 fc12 	bl	8018584 <memset>
      if(!InitIsDone || WifiReset){
 8004d60:	4b9b      	ldr	r3, [pc, #620]	@ (8004fd0 <ESP_Upkeep+0x338>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	4053      	eors	r3, r2
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <ESP_Upkeep+0xde>
 8004d6e:	4b99      	ldr	r3, [pc, #612]	@ (8004fd4 <ESP_Upkeep+0x33c>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01a      	beq.n	8004dac <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 7);
 8004d76:	4b95      	ldr	r3, [pc, #596]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004d78:	4a97      	ldr	r2, [pc, #604]	@ (8004fd8 <ESP_Upkeep+0x340>)
 8004d7a:	6811      	ldr	r1, [r2, #0]
 8004d7c:	6019      	str	r1, [r3, #0]
 8004d7e:	8891      	ldrh	r1, [r2, #4]
 8004d80:	8099      	strh	r1, [r3, #4]
 8004d82:	7992      	ldrb	r2, [r2, #6]
 8004d84:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8004d86:	4b8a      	ldr	r3, [pc, #552]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004d88:	2204      	movs	r2, #4
 8004d8a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004d8c:	4b93      	ldr	r3, [pc, #588]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004d92:	4b93      	ldr	r3, [pc, #588]	@ (8004fe0 <ESP_Upkeep+0x348>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004d98:	4b90      	ldr	r3, [pc, #576]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	4b8b      	ldr	r3, [pc, #556]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004da0:	5c9a      	ldrb	r2, [r3, r2]
 8004da2:	4b90      	ldr	r3, [pc, #576]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004da4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004da6:	4b90      	ldr	r3, [pc, #576]	@ (8004fe8 <ESP_Upkeep+0x350>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004dac:	4b88      	ldr	r3, [pc, #544]	@ (8004fd0 <ESP_Upkeep+0x338>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01f      	beq.n	8004df4 <ESP_Upkeep+0x15c>
 8004db4:	4b8d      	ldr	r3, [pc, #564]	@ (8004fec <ESP_Upkeep+0x354>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2201      	movs	r2, #1
 8004dba:	4053      	eors	r3, r2
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d018      	beq.n	8004df4 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004dc2:	4b82      	ldr	r3, [pc, #520]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004dc4:	4a8a      	ldr	r2, [pc, #552]	@ (8004ff0 <ESP_Upkeep+0x358>)
 8004dc6:	6811      	ldr	r1, [r2, #0]
 8004dc8:	6019      	str	r1, [r3, #0]
 8004dca:	8892      	ldrh	r2, [r2, #4]
 8004dcc:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004dce:	4b78      	ldr	r3, [pc, #480]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004dd4:	4b81      	ldr	r3, [pc, #516]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004dda:	4b81      	ldr	r3, [pc, #516]	@ (8004fe0 <ESP_Upkeep+0x348>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004de0:	4b7e      	ldr	r3, [pc, #504]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	001a      	movs	r2, r3
 8004de6:	4b79      	ldr	r3, [pc, #484]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004de8:	5c9a      	ldrb	r2, [r3, r2]
 8004dea:	4b7e      	ldr	r3, [pc, #504]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004dec:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004dee:	4b7e      	ldr	r3, [pc, #504]	@ (8004fe8 <ESP_Upkeep+0x350>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8004df4:	4b76      	ldr	r3, [pc, #472]	@ (8004fd0 <ESP_Upkeep+0x338>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d021      	beq.n	8004e40 <ESP_Upkeep+0x1a8>
 8004dfc:	4b7b      	ldr	r3, [pc, #492]	@ (8004fec <ESP_Upkeep+0x354>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01d      	beq.n	8004e40 <ESP_Upkeep+0x1a8>
 8004e04:	4b7b      	ldr	r3, [pc, #492]	@ (8004ff4 <ESP_Upkeep+0x35c>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	4053      	eors	r3, r2
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d016      	beq.n	8004e40 <ESP_Upkeep+0x1a8>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8004e12:	4b79      	ldr	r3, [pc, #484]	@ (8004ff8 <ESP_Upkeep+0x360>)
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	4b6d      	ldr	r3, [pc, #436]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004e18:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8004e1a:	4b65      	ldr	r3, [pc, #404]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004e20:	4b6e      	ldr	r3, [pc, #440]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8004e26:	4b6e      	ldr	r3, [pc, #440]	@ (8004fe0 <ESP_Upkeep+0x348>)
 8004e28:	2204      	movs	r2, #4
 8004e2a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004e2c:	4b6b      	ldr	r3, [pc, #428]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	001a      	movs	r2, r3
 8004e32:	4b66      	ldr	r3, [pc, #408]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004e34:	5c9a      	ldrb	r2, [r3, r2]
 8004e36:	4b6b      	ldr	r3, [pc, #428]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004e38:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004e3a:	4b6b      	ldr	r3, [pc, #428]	@ (8004fe8 <ESP_Upkeep+0x350>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest){
 8004e40:	4b63      	ldr	r3, [pc, #396]	@ (8004fd0 <ESP_Upkeep+0x338>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d022      	beq.n	8004e8e <ESP_Upkeep+0x1f6>
 8004e48:	4b68      	ldr	r3, [pc, #416]	@ (8004fec <ESP_Upkeep+0x354>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01e      	beq.n	8004e8e <ESP_Upkeep+0x1f6>
 8004e50:	4b68      	ldr	r3, [pc, #416]	@ (8004ff4 <ESP_Upkeep+0x35c>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01a      	beq.n	8004e8e <ESP_Upkeep+0x1f6>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004e58:	4b5c      	ldr	r3, [pc, #368]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004e5a:	4a68      	ldr	r2, [pc, #416]	@ (8004ffc <ESP_Upkeep+0x364>)
 8004e5c:	8811      	ldrh	r1, [r2, #0]
 8004e5e:	8019      	strh	r1, [r3, #0]
 8004e60:	7892      	ldrb	r2, [r2, #2]
 8004e62:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004e64:	4b52      	ldr	r3, [pc, #328]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004e66:	2204      	movs	r2, #4
 8004e68:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004e70:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe0 <ESP_Upkeep+0x348>)
 8004e72:	2202      	movs	r2, #2
 8004e74:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004e76:	f004 f89d 	bl	8008fb4 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004e7a:	4b58      	ldr	r3, [pc, #352]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	001a      	movs	r2, r3
 8004e80:	4b52      	ldr	r3, [pc, #328]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004e82:	5c9a      	ldrb	r2, [r3, r2]
 8004e84:	4b57      	ldr	r3, [pc, #348]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004e86:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004e88:	4b57      	ldr	r3, [pc, #348]	@ (8004fe8 <ESP_Upkeep+0x350>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8005000 <ESP_Upkeep+0x368>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d100      	bne.n	8004e98 <ESP_Upkeep+0x200>
 8004e96:	e17f      	b.n	8005198 <ESP_Upkeep+0x500>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8004e98:	4b4c      	ldr	r3, [pc, #304]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004e9a:	4a5a      	ldr	r2, [pc, #360]	@ (8005004 <ESP_Upkeep+0x36c>)
 8004e9c:	6811      	ldr	r1, [r2, #0]
 8004e9e:	6019      	str	r1, [r3, #0]
 8004ea0:	7912      	ldrb	r2, [r2, #4]
 8004ea2:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004ea4:	4b42      	ldr	r3, [pc, #264]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8004eb0:	4b4b      	ldr	r3, [pc, #300]	@ (8004fe0 <ESP_Upkeep+0x348>)
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004eb6:	f004 f87d 	bl	8008fb4 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004eba:	4b48      	ldr	r3, [pc, #288]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	001a      	movs	r2, r3
 8004ec0:	4b42      	ldr	r3, [pc, #264]	@ (8004fcc <ESP_Upkeep+0x334>)
 8004ec2:	5c9a      	ldrb	r2, [r3, r2]
 8004ec4:	4b47      	ldr	r3, [pc, #284]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004ec6:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004ec8:	4b47      	ldr	r3, [pc, #284]	@ (8004fe8 <ESP_Upkeep+0x350>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004ece:	e163      	b.n	8005198 <ESP_Upkeep+0x500>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004ed0:	4b44      	ldr	r3, [pc, #272]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	1dfc      	adds	r4, r7, #7
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7ff fc36 	bl	8004748 <AT_Send>
 8004edc:	0003      	movs	r3, r0
 8004ede:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004ee0:	1dfb      	adds	r3, r7, #7
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d100      	bne.n	8004eea <ESP_Upkeep+0x252>
 8004ee8:	e158      	b.n	800519c <ESP_Upkeep+0x504>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004eea:	4b31      	ldr	r3, [pc, #196]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004eec:	2203      	movs	r2, #3
 8004eee:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004ef0:	e154      	b.n	800519c <ESP_Upkeep+0x504>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004ef2:	4b34      	ldr	r3, [pc, #208]	@ (8004fc4 <ESP_Upkeep+0x32c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f004 fe2e 	bl	8009b58 <TimestampIsReached>
 8004efc:	1e03      	subs	r3, r0, #0
 8004efe:	d100      	bne.n	8004f02 <ESP_Upkeep+0x26a>
 8004f00:	e14e      	b.n	80051a0 <ESP_Upkeep+0x508>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004f02:	4b39      	ldr	r3, [pc, #228]	@ (8004fe8 <ESP_Upkeep+0x350>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7ff fb30 	bl	800456c <DMA_ProcessBuffer>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	001a      	movs	r2, r3
 8004f10:	4b3d      	ldr	r3, [pc, #244]	@ (8005008 <ESP_Upkeep+0x370>)
 8004f12:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004f14:	4b3c      	ldr	r3, [pc, #240]	@ (8005008 <ESP_Upkeep+0x370>)
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	4b33      	ldr	r3, [pc, #204]	@ (8004fe8 <ESP_Upkeep+0x350>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	1dbc      	adds	r4, r7, #6
 8004f1e:	0019      	movs	r1, r3
 8004f20:	0010      	movs	r0, r2
 8004f22:	f7ff fbdb 	bl	80046dc <ATCompare>
 8004f26:	0003      	movs	r3, r0
 8004f28:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004f2a:	4b37      	ldr	r3, [pc, #220]	@ (8005008 <ESP_Upkeep+0x370>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10f      	bne.n	8004f52 <ESP_Upkeep+0x2ba>
          if(ATCommand == AT_SENDDATA){
 8004f32:	4b2c      	ldr	r3, [pc, #176]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d108      	bne.n	8004f4c <ESP_Upkeep+0x2b4>
            ATCommand = AT_HTTPCPOST;
 8004f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004f3c:	220e      	movs	r2, #14
 8004f3e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004f40:	4b29      	ldr	r3, [pc, #164]	@ (8004fe8 <ESP_Upkeep+0x350>)
 8004f42:	2202      	movs	r2, #2
 8004f44:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8004f46:	4b25      	ldr	r3, [pc, #148]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8004f4c:	4b18      	ldr	r3, [pc, #96]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004f4e:	2204      	movs	r2, #4
 8004f50:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004f52:	4b2d      	ldr	r3, [pc, #180]	@ (8005008 <ESP_Upkeep+0x370>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d106      	bne.n	8004f68 <ESP_Upkeep+0x2d0>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004f5a:	f005 f9d9 	bl	800a310 <HAL_GetTick>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	330a      	adds	r3, #10
 8004f62:	001a      	movs	r2, r3
 8004f64:	4b17      	ldr	r3, [pc, #92]	@ (8004fc4 <ESP_Upkeep+0x32c>)
 8004f66:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004f68:	4b27      	ldr	r3, [pc, #156]	@ (8005008 <ESP_Upkeep+0x370>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d116      	bne.n	8004f9e <ESP_Upkeep+0x306>
          if(ATCommand != AT_SENDDATA){
 8004f70:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b0f      	cmp	r3, #15
 8004f76:	d003      	beq.n	8004f80 <ESP_Upkeep+0x2e8>
            EspState = ESP_STATE_SEND;
 8004f78:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e00e      	b.n	8004f9e <ESP_Upkeep+0x306>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004f80:	4b18      	ldr	r3, [pc, #96]	@ (8004fe4 <ESP_Upkeep+0x34c>)
 8004f82:	220e      	movs	r2, #14
 8004f84:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004f86:	4b15      	ldr	r3, [pc, #84]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	4b13      	ldr	r3, [pc, #76]	@ (8004fdc <ESP_Upkeep+0x344>)
 8004f90:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004f92:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <ESP_Upkeep+0x350>)
 8004f94:	2202      	movs	r2, #2
 8004f96:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004f98:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004f9e:	1dbb      	adds	r3, r7, #6
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d100      	bne.n	8004fa8 <ESP_Upkeep+0x310>
 8004fa6:	e0fb      	b.n	80051a0 <ESP_Upkeep+0x508>
          EspState = ESP_STATE_NEXT_AT;
 8004fa8:	4b01      	ldr	r3, [pc, #4]	@ (8004fb0 <ESP_Upkeep+0x318>)
 8004faa:	2205      	movs	r2, #5
 8004fac:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004fae:	e0f7      	b.n	80051a0 <ESP_Upkeep+0x508>
 8004fb0:	20000021 	.word	0x20000021
 8004fb4:	0801c128 	.word	0x0801c128
 8004fb8:	200004ef 	.word	0x200004ef
 8004fbc:	50000800 	.word	0x50000800
 8004fc0:	50001c00 	.word	0x50001c00
 8004fc4:	20000928 	.word	0x20000928
 8004fc8:	200003f0 	.word	0x200003f0
 8004fcc:	2000091c 	.word	0x2000091c
 8004fd0:	200004f0 	.word	0x200004f0
 8004fd4:	200004f1 	.word	0x200004f1
 8004fd8:	20000004 	.word	0x20000004
 8004fdc:	20000926 	.word	0x20000926
 8004fe0:	20000b33 	.word	0x20000b33
 8004fe4:	20000b32 	.word	0x20000b32
 8004fe8:	20000b31 	.word	0x20000b31
 8004fec:	200004f3 	.word	0x200004f3
 8004ff0:	20000014 	.word	0x20000014
 8004ff4:	200004f4 	.word	0x200004f4
 8004ff8:	20000010 	.word	0x20000010
 8004ffc:	2000000c 	.word	0x2000000c
 8005000:	200004f2 	.word	0x200004f2
 8005004:	2000001c 	.word	0x2000001c
 8005008:	20000023 	.word	0x20000023

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 800500c:	4b6a      	ldr	r3, [pc, #424]	@ (80051b8 <ESP_Upkeep+0x520>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	3301      	adds	r3, #1
 8005012:	b2da      	uxtb	r2, r3
 8005014:	4b68      	ldr	r3, [pc, #416]	@ (80051b8 <ESP_Upkeep+0x520>)
 8005016:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005018:	4b67      	ldr	r3, [pc, #412]	@ (80051b8 <ESP_Upkeep+0x520>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	001a      	movs	r2, r3
 800501e:	4b67      	ldr	r3, [pc, #412]	@ (80051bc <ESP_Upkeep+0x524>)
 8005020:	5c9a      	ldrb	r2, [r3, r2]
 8005022:	4b67      	ldr	r3, [pc, #412]	@ (80051c0 <ESP_Upkeep+0x528>)
 8005024:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005026:	4b66      	ldr	r3, [pc, #408]	@ (80051c0 <ESP_Upkeep+0x528>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d102      	bne.n	8005034 <ESP_Upkeep+0x39c>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 800502e:	4b65      	ldr	r3, [pc, #404]	@ (80051c4 <ESP_Upkeep+0x52c>)
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005034:	4b62      	ldr	r3, [pc, #392]	@ (80051c0 <ESP_Upkeep+0x528>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b0e      	cmp	r3, #14
 800503a:	d102      	bne.n	8005042 <ESP_Upkeep+0x3aa>
        ATExpectation = RECEIVE_EXPECTATION_START;
 800503c:	4b61      	ldr	r3, [pc, #388]	@ (80051c4 <ESP_Upkeep+0x52c>)
 800503e:	2202      	movs	r2, #2
 8005040:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005042:	4b5f      	ldr	r3, [pc, #380]	@ (80051c0 <ESP_Upkeep+0x528>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b0e      	cmp	r3, #14
 8005048:	d006      	beq.n	8005058 <ESP_Upkeep+0x3c0>
 800504a:	4b5d      	ldr	r3, [pc, #372]	@ (80051c0 <ESP_Upkeep+0x528>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b03      	cmp	r3, #3
 8005050:	d002      	beq.n	8005058 <ESP_Upkeep+0x3c0>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005052:	4b5c      	ldr	r3, [pc, #368]	@ (80051c4 <ESP_Upkeep+0x52c>)
 8005054:	2200      	movs	r2, #0
 8005056:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005058:	4b5b      	ldr	r3, [pc, #364]	@ (80051c8 <ESP_Upkeep+0x530>)
 800505a:	2204      	movs	r2, #4
 800505c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 800505e:	4b58      	ldr	r3, [pc, #352]	@ (80051c0 <ESP_Upkeep+0x528>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b11      	cmp	r3, #17
 8005064:	d000      	beq.n	8005068 <ESP_Upkeep+0x3d0>
 8005066:	e09d      	b.n	80051a4 <ESP_Upkeep+0x50c>
        if(Mode == AT_MODE_SEND){
 8005068:	4b58      	ldr	r3, [pc, #352]	@ (80051cc <ESP_Upkeep+0x534>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d10c      	bne.n	800508a <ESP_Upkeep+0x3f2>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8005070:	f005 f94e 	bl	800a310 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	4a56      	ldr	r2, [pc, #344]	@ (80051d0 <ESP_Upkeep+0x538>)
 8005078:	189a      	adds	r2, r3, r2
 800507a:	4b56      	ldr	r3, [pc, #344]	@ (80051d4 <ESP_Upkeep+0x53c>)
 800507c:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 800507e:	f003 ffb1 	bl	8008fe4 <ResetESPIndicator>
          EspState = ESP_STATE_DEINIT;
 8005082:	4b51      	ldr	r3, [pc, #324]	@ (80051c8 <ESP_Upkeep+0x530>)
 8005084:	220d      	movs	r2, #13
 8005086:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005088:	e08c      	b.n	80051a4 <ESP_Upkeep+0x50c>
          EspState = ESP_STATE_RESET;
 800508a:	4b4f      	ldr	r3, [pc, #316]	@ (80051c8 <ESP_Upkeep+0x530>)
 800508c:	2209      	movs	r2, #9
 800508e:	701a      	strb	r2, [r3, #0]
    break;
 8005090:	e088      	b.n	80051a4 <ESP_Upkeep+0x50c>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005092:	4b51      	ldr	r3, [pc, #324]	@ (80051d8 <ESP_Upkeep+0x540>)
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005098:	4b50      	ldr	r3, [pc, #320]	@ (80051dc <ESP_Upkeep+0x544>)
 800509a:	2200      	movs	r2, #0
 800509c:	2101      	movs	r1, #1
 800509e:	0018      	movs	r0, r3
 80050a0:	f006 fcd5 	bl	800ba4e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80050a4:	2001      	movs	r0, #1
 80050a6:	f005 f93d 	bl	800a324 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80050aa:	2380      	movs	r3, #128	@ 0x80
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	484c      	ldr	r0, [pc, #304]	@ (80051e0 <ESP_Upkeep+0x548>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	0019      	movs	r1, r3
 80050b4:	f006 fccb 	bl	800ba4e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80050b8:	2001      	movs	r0, #1
 80050ba:	f005 f933 	bl	800a324 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80050be:	4b47      	ldr	r3, [pc, #284]	@ (80051dc <ESP_Upkeep+0x544>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	2102      	movs	r1, #2
 80050c4:	0018      	movs	r0, r3
 80050c6:	f006 fcc2 	bl	800ba4e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80050ca:	4b3f      	ldr	r3, [pc, #252]	@ (80051c8 <ESP_Upkeep+0x530>)
 80050cc:	2209      	movs	r2, #9
 80050ce:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80050d0:	2001      	movs	r0, #1
 80050d2:	f005 f927 	bl	800a324 <HAL_Delay>
      break;
 80050d6:	e068      	b.n	80051aa <ESP_Upkeep+0x512>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80050d8:	4b3e      	ldr	r3, [pc, #248]	@ (80051d4 <ESP_Upkeep+0x53c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	0018      	movs	r0, r3
 80050de:	f004 fd3b 	bl	8009b58 <TimestampIsReached>
 80050e2:	1e03      	subs	r3, r0, #0
 80050e4:	d103      	bne.n	80050ee <ESP_Upkeep+0x456>
 80050e6:	4b3f      	ldr	r3, [pc, #252]	@ (80051e4 <ESP_Upkeep+0x54c>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d05c      	beq.n	80051a8 <ESP_Upkeep+0x510>
        if(Mode == AT_MODE_INIT){
 80050ee:	4b37      	ldr	r3, [pc, #220]	@ (80051cc <ESP_Upkeep+0x534>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d105      	bne.n	8005102 <ESP_Upkeep+0x46a>
          InitIsDone = true;
 80050f6:	4b3c      	ldr	r3, [pc, #240]	@ (80051e8 <ESP_Upkeep+0x550>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80050fc:	4b32      	ldr	r3, [pc, #200]	@ (80051c8 <ESP_Upkeep+0x530>)
 80050fe:	220b      	movs	r2, #11
 8005100:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005102:	4b32      	ldr	r3, [pc, #200]	@ (80051cc <ESP_Upkeep+0x534>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d108      	bne.n	800511c <ESP_Upkeep+0x484>
          ConnectionMade = true;
 800510a:	4b38      	ldr	r3, [pc, #224]	@ (80051ec <ESP_Upkeep+0x554>)
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005110:	4b37      	ldr	r3, [pc, #220]	@ (80051f0 <ESP_Upkeep+0x558>)
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005116:	4b2c      	ldr	r3, [pc, #176]	@ (80051c8 <ESP_Upkeep+0x530>)
 8005118:	220b      	movs	r2, #11
 800511a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 800511c:	4b2b      	ldr	r3, [pc, #172]	@ (80051cc <ESP_Upkeep+0x534>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d102      	bne.n	800512a <ESP_Upkeep+0x492>
          EspState = ESP_STATE_INIT;
 8005124:	4b28      	ldr	r3, [pc, #160]	@ (80051c8 <ESP_Upkeep+0x530>)
 8005126:	2202      	movs	r2, #2
 8005128:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 800512a:	4b28      	ldr	r3, [pc, #160]	@ (80051cc <ESP_Upkeep+0x534>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d102      	bne.n	8005138 <ESP_Upkeep+0x4a0>
          EspState = ESP_STATE_CONFIG;
 8005132:	4b25      	ldr	r3, [pc, #148]	@ (80051c8 <ESP_Upkeep+0x530>)
 8005134:	220e      	movs	r2, #14
 8005136:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 8005138:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <ESP_Upkeep+0x534>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d133      	bne.n	80051a8 <ESP_Upkeep+0x510>
          EspState = ESP_STATE_MODE_SELECT;
 8005140:	4b21      	ldr	r3, [pc, #132]	@ (80051c8 <ESP_Upkeep+0x530>)
 8005142:	220b      	movs	r2, #11
 8005144:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005146:	4b2b      	ldr	r3, [pc, #172]	@ (80051f4 <ESP_Upkeep+0x55c>)
 8005148:	2201      	movs	r2, #1
 800514a:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 800514c:	e02c      	b.n	80051a8 <ESP_Upkeep+0x510>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 800514e:	4a2a      	ldr	r2, [pc, #168]	@ (80051f8 <ESP_Upkeep+0x560>)
 8005150:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <ESP_Upkeep+0x564>)
 8005152:	0019      	movs	r1, r3
 8005154:	2003      	movs	r0, #3
 8005156:	f004 fd55 	bl	8009c04 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 800515a:	f011 ff73 	bl	8017044 <GetUsbRxPointer>
 800515e:	0003      	movs	r3, r0
 8005160:	0018      	movs	r0, r3
 8005162:	f000 f8c3 	bl	80052ec <Process_PC_Config>

      break;
 8005166:	e020      	b.n	80051aa <ESP_Upkeep+0x512>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005168:	4a25      	ldr	r2, [pc, #148]	@ (8005200 <ESP_Upkeep+0x568>)
 800516a:	4b24      	ldr	r3, [pc, #144]	@ (80051fc <ESP_Upkeep+0x564>)
 800516c:	0019      	movs	r1, r3
 800516e:	2003      	movs	r0, #3
 8005170:	f004 fd48 	bl	8009c04 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005174:	4b14      	ldr	r3, [pc, #80]	@ (80051c8 <ESP_Upkeep+0x530>)
 8005176:	2202      	movs	r2, #2
 8005178:	701a      	strb	r2, [r3, #0]
      break;
 800517a:	e016      	b.n	80051aa <ESP_Upkeep+0x512>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 800517c:	4a21      	ldr	r2, [pc, #132]	@ (8005204 <ESP_Upkeep+0x56c>)
 800517e:	4b1f      	ldr	r3, [pc, #124]	@ (80051fc <ESP_Upkeep+0x564>)
 8005180:	0019      	movs	r1, r3
 8005182:	2003      	movs	r0, #3
 8005184:	f004 fd3e 	bl	8009c04 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005188:	4b0f      	ldr	r3, [pc, #60]	@ (80051c8 <ESP_Upkeep+0x530>)
 800518a:	2207      	movs	r2, #7
 800518c:	701a      	strb	r2, [r3, #0]
      break;
 800518e:	e00c      	b.n	80051aa <ESP_Upkeep+0x512>
      break;
 8005190:	46c0      	nop			@ (mov r8, r8)
 8005192:	e00a      	b.n	80051aa <ESP_Upkeep+0x512>
      break;
 8005194:	46c0      	nop			@ (mov r8, r8)
 8005196:	e008      	b.n	80051aa <ESP_Upkeep+0x512>
    break;
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	e006      	b.n	80051aa <ESP_Upkeep+0x512>
         break;
 800519c:	46c0      	nop			@ (mov r8, r8)
 800519e:	e004      	b.n	80051aa <ESP_Upkeep+0x512>
      break;
 80051a0:	46c0      	nop			@ (mov r8, r8)
 80051a2:	e002      	b.n	80051aa <ESP_Upkeep+0x512>
    break;
 80051a4:	46c0      	nop			@ (mov r8, r8)
 80051a6:	e000      	b.n	80051aa <ESP_Upkeep+0x512>
      break;
 80051a8:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 80051aa:	4b07      	ldr	r3, [pc, #28]	@ (80051c8 <ESP_Upkeep+0x530>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b003      	add	sp, #12
 80051b4:	bd90      	pop	{r4, r7, pc}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	20000926 	.word	0x20000926
 80051bc:	2000091c 	.word	0x2000091c
 80051c0:	20000b32 	.word	0x20000b32
 80051c4:	20000b31 	.word	0x20000b31
 80051c8:	20000021 	.word	0x20000021
 80051cc:	20000b33 	.word	0x20000b33
 80051d0:	000493e0 	.word	0x000493e0
 80051d4:	20000928 	.word	0x20000928
 80051d8:	200004ef 	.word	0x200004ef
 80051dc:	50001c00 	.word	0x50001c00
 80051e0:	50000800 	.word	0x50000800
 80051e4:	200004f2 	.word	0x200004f2
 80051e8:	200004f0 	.word	0x200004f0
 80051ec:	200004f3 	.word	0x200004f3
 80051f0:	200004f5 	.word	0x200004f5
 80051f4:	200004f4 	.word	0x200004f4
 80051f8:	0801b958 	.word	0x0801b958
 80051fc:	0801b3b0 	.word	0x0801b3b0
 8005200:	0801b970 	.word	0x0801b970
 8005204:	0801b984 	.word	0x0801b984

08005208 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005210:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <I2CSensors_Init+0x30>)
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005216:	4a09      	ldr	r2, [pc, #36]	@ (800523c <I2CSensors_Init+0x34>)
 8005218:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <I2CSensors_Init+0x38>)
 800521a:	0011      	movs	r1, r2
 800521c:	0018      	movs	r0, r3
 800521e:	f000 fe7f 	bl	8005f20 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8005222:	4a06      	ldr	r2, [pc, #24]	@ (800523c <I2CSensors_Init+0x34>)
 8005224:	4b06      	ldr	r3, [pc, #24]	@ (8005240 <I2CSensors_Init+0x38>)
 8005226:	0011      	movs	r1, r2
 8005228:	0018      	movs	r0, r3
 800522a:	f000 fce9 	bl	8005c00 <Gas_Init>
}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	46bd      	mov	sp, r7
 8005232:	b002      	add	sp, #8
 8005234:	bd80      	pop	{r7, pc}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	20000be4 	.word	0x20000be4
 800523c:	08005299 	.word	0x08005299
 8005240:	08005245 	.word	0x08005245

08005244 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005244:	b5b0      	push	{r4, r5, r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6039      	str	r1, [r7, #0]
 800524c:	0011      	movs	r1, r2
 800524e:	1dfb      	adds	r3, r7, #7
 8005250:	1c02      	adds	r2, r0, #0
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	1dbb      	adds	r3, r7, #6
 8005256:	1c0a      	adds	r2, r1, #0
 8005258:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800525a:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <ReadI2C+0x50>)
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	1dfb      	adds	r3, r7, #7
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	18db      	adds	r3, r3, r3
 8005266:	b299      	uxth	r1, r3
 8005268:	1dbb      	adds	r3, r7, #6
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	250f      	movs	r5, #15
 8005270:	197c      	adds	r4, r7, r5
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	f006 fda4 	bl	800bdc0 <HAL_I2C_Master_Receive_DMA>
 8005278:	0003      	movs	r3, r0
 800527a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800527c:	197b      	adds	r3, r7, r5
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <ReadI2C+0x44>
        return false;
 8005284:	2300      	movs	r3, #0
 8005286:	e000      	b.n	800528a <ReadI2C+0x46>
    }
    return true;
 8005288:	2301      	movs	r3, #1
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b004      	add	sp, #16
 8005290:	bdb0      	pop	{r4, r5, r7, pc}
 8005292:	46c0      	nop			@ (mov r8, r8)
 8005294:	20000be4 	.word	0x20000be4

08005298 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005298:	b5b0      	push	{r4, r5, r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6039      	str	r1, [r7, #0]
 80052a0:	0011      	movs	r1, r2
 80052a2:	1dfb      	adds	r3, r7, #7
 80052a4:	1c02      	adds	r2, r0, #0
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	1dbb      	adds	r3, r7, #6
 80052aa:	1c0a      	adds	r2, r1, #0
 80052ac:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80052ae:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <WriteI2C+0x50>)
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	1dfb      	adds	r3, r7, #7
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	18db      	adds	r3, r3, r3
 80052ba:	b299      	uxth	r1, r3
 80052bc:	1dbb      	adds	r3, r7, #6
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	250f      	movs	r5, #15
 80052c4:	197c      	adds	r4, r7, r5
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	f006 fc74 	bl	800bbb4 <HAL_I2C_Master_Transmit_DMA>
 80052cc:	0003      	movs	r3, r0
 80052ce:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80052d0:	197b      	adds	r3, r7, r5
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <WriteI2C+0x44>
        return false;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <WriteI2C+0x46>
    }
    return true;
 80052dc:	2301      	movs	r3, #1
}
 80052de:	0018      	movs	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b004      	add	sp, #16
 80052e4:	bdb0      	pop	{r4, r5, r7, pc}
 80052e6:	46c0      	nop			@ (mov r8, r8)
 80052e8:	20000be4 	.word	0x20000be4

080052ec <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80052ec:	b590      	push	{r4, r7, lr}
 80052ee:	b0c3      	sub	sp, #268	@ 0x10c
 80052f0:	af3e      	add	r7, sp, #248	@ 0xf8
 80052f2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80052f4:	f011 fec6 	bl	8017084 <GetUsbRxDataSize>
 80052f8:	0003      	movs	r3, r0
 80052fa:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b05      	cmp	r3, #5
 8005300:	d971      	bls.n	80053e6 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2123      	movs	r1, #35	@ 0x23
 8005306:	0018      	movs	r0, r3
 8005308:	f013 f944 	bl	8018594 <strchr>
 800530c:	0003      	movs	r3, r0
 800530e:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d065      	beq.n	80053e2 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	785a      	ldrb	r2, [r3, #1]
 800531a:	4b34      	ldr	r3, [pc, #208]	@ (80053ec <Process_PC_Config+0x100>)
 800531c:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	789a      	ldrb	r2, [r3, #2]
 8005322:	4b32      	ldr	r3, [pc, #200]	@ (80053ec <Process_PC_Config+0x100>)
 8005324:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005326:	4b31      	ldr	r3, [pc, #196]	@ (80053ec <Process_PC_Config+0x100>)
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	3305      	adds	r3, #5
 800532c:	001a      	movs	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4293      	cmp	r3, r2
 8005332:	d351      	bcc.n	80053d8 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	1cd9      	adds	r1, r3, #3
 8005338:	4b2c      	ldr	r3, [pc, #176]	@ (80053ec <Process_PC_Config+0x100>)
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	001a      	movs	r2, r3
 800533e:	4b2c      	ldr	r3, [pc, #176]	@ (80053f0 <Process_PC_Config+0x104>)
 8005340:	0018      	movs	r0, r3
 8005342:	f013 f9e9 	bl	8018718 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005346:	4b29      	ldr	r3, [pc, #164]	@ (80053ec <Process_PC_Config+0x100>)
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	3303      	adds	r3, #3
 800534c:	001a      	movs	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	189b      	adds	r3, r3, r2
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	b21a      	sxth	r2, r3
 8005358:	4b24      	ldr	r3, [pc, #144]	@ (80053ec <Process_PC_Config+0x100>)
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	3304      	adds	r3, #4
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	18cb      	adds	r3, r1, r3
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	b21b      	sxth	r3, r3
 8005366:	4313      	orrs	r3, r2
 8005368:	b21b      	sxth	r3, r3
 800536a:	b299      	uxth	r1, r3
 800536c:	4a1f      	ldr	r2, [pc, #124]	@ (80053ec <Process_PC_Config+0x100>)
 800536e:	2381      	movs	r3, #129	@ 0x81
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005374:	4a1d      	ldr	r2, [pc, #116]	@ (80053ec <Process_PC_Config+0x100>)
 8005376:	2381      	movs	r3, #129	@ 0x81
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	5ad4      	ldrh	r4, [r2, r3]
 800537c:	4b1b      	ldr	r3, [pc, #108]	@ (80053ec <Process_PC_Config+0x100>)
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	3303      	adds	r3, #3
 8005382:	b29a      	uxth	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	0011      	movs	r1, r2
 8005388:	0018      	movs	r0, r3
 800538a:	f000 f975 	bl	8005678 <CRC16_ARC>
 800538e:	0003      	movs	r3, r0
 8005390:	429c      	cmp	r4, r3
 8005392:	d007      	beq.n	80053a4 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005394:	4b15      	ldr	r3, [pc, #84]	@ (80053ec <Process_PC_Config+0x100>)
 8005396:	785a      	ldrb	r2, [r3, #1]
 8005398:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <Process_PC_Config+0x104>)
 800539a:	0019      	movs	r1, r3
 800539c:	2001      	movs	r0, #1
 800539e:	f000 f919 	bl	80055d4 <Create_Message>
 80053a2:	e016      	b.n	80053d2 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80053a4:	4c11      	ldr	r4, [pc, #68]	@ (80053ec <Process_PC_Config+0x100>)
 80053a6:	466b      	mov	r3, sp
 80053a8:	0018      	movs	r0, r3
 80053aa:	0023      	movs	r3, r4
 80053ac:	3310      	adds	r3, #16
 80053ae:	22f4      	movs	r2, #244	@ 0xf4
 80053b0:	0019      	movs	r1, r3
 80053b2:	f013 f9b1 	bl	8018718 <memcpy>
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	6861      	ldr	r1, [r4, #4]
 80053ba:	68a2      	ldr	r2, [r4, #8]
 80053bc:	68e3      	ldr	r3, [r4, #12]
 80053be:	f000 f819 	bl	80053f4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80053c2:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <Process_PC_Config+0x100>)
 80053c4:	7818      	ldrb	r0, [r3, #0]
 80053c6:	4b09      	ldr	r3, [pc, #36]	@ (80053ec <Process_PC_Config+0x100>)
 80053c8:	785a      	ldrb	r2, [r3, #1]
 80053ca:	4b09      	ldr	r3, [pc, #36]	@ (80053f0 <Process_PC_Config+0x104>)
 80053cc:	0019      	movs	r1, r3
 80053ce:	f000 f901 	bl	80055d4 <Create_Message>
                }
                ResetUsbRxDataSize();
 80053d2:	f011 fe3f 	bl	8017054 <ResetUsbRxDataSize>
                return;
 80053d6:	e006      	b.n	80053e6 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	0018      	movs	r0, r3
 80053dc:	f011 fe5c 	bl	8017098 <GetUsbRxNextChunk>
 80053e0:	e001      	b.n	80053e6 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80053e2:	f011 fe37 	bl	8017054 <ResetUsbRxDataSize>
        }
    }
}
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b005      	add	sp, #20
 80053ea:	bd90      	pop	{r4, r7, pc}
 80053ec:	20000be8 	.word	0x20000be8
 80053f0:	20000bea 	.word	0x20000bea

080053f4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80053f4:	b084      	sub	sp, #16
 80053f6:	b5b0      	push	{r4, r5, r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	2518      	movs	r5, #24
 80053fe:	197c      	adds	r4, r7, r5
 8005400:	6020      	str	r0, [r4, #0]
 8005402:	6061      	str	r1, [r4, #4]
 8005404:	60a2      	str	r2, [r4, #8]
 8005406:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005408:	197b      	adds	r3, r7, r5
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2bfe      	cmp	r3, #254	@ 0xfe
 800540e:	d100      	bne.n	8005412 <ProcessCmd+0x1e>
 8005410:	e09c      	b.n	800554c <ProcessCmd+0x158>
 8005412:	dd00      	ble.n	8005416 <ProcessCmd+0x22>
 8005414:	e0bc      	b.n	8005590 <ProcessCmd+0x19c>
 8005416:	2b0c      	cmp	r3, #12
 8005418:	dc0a      	bgt.n	8005430 <ProcessCmd+0x3c>
 800541a:	2b00      	cmp	r3, #0
 800541c:	da00      	bge.n	8005420 <ProcessCmd+0x2c>
 800541e:	e0b7      	b.n	8005590 <ProcessCmd+0x19c>
 8005420:	2b0c      	cmp	r3, #12
 8005422:	d900      	bls.n	8005426 <ProcessCmd+0x32>
 8005424:	e0b4      	b.n	8005590 <ProcessCmd+0x19c>
 8005426:	009a      	lsls	r2, r3, #2
 8005428:	4b5d      	ldr	r3, [pc, #372]	@ (80055a0 <ProcessCmd+0x1ac>)
 800542a:	18d3      	adds	r3, r2, r3
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	469f      	mov	pc, r3
 8005430:	2bfd      	cmp	r3, #253	@ 0xfd
 8005432:	d100      	bne.n	8005436 <ProcessCmd+0x42>
 8005434:	e084      	b.n	8005540 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005436:	e0ab      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005438:	2118      	movs	r1, #24
 800543a:	187b      	adds	r3, r7, r1
 800543c:	785b      	ldrb	r3, [r3, #1]
 800543e:	001a      	movs	r2, r3
 8005440:	187b      	adds	r3, r7, r1
 8005442:	1c99      	adds	r1, r3, #2
 8005444:	4857      	ldr	r0, [pc, #348]	@ (80055a4 <ProcessCmd+0x1b0>)
 8005446:	230c      	movs	r3, #12
 8005448:	f7fe f8b8 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800544c:	e0a0      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800544e:	2118      	movs	r1, #24
 8005450:	187b      	adds	r3, r7, r1
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	001a      	movs	r2, r3
 8005456:	187b      	adds	r3, r7, r1
 8005458:	1c99      	adds	r1, r3, #2
 800545a:	4853      	ldr	r0, [pc, #332]	@ (80055a8 <ProcessCmd+0x1b4>)
 800545c:	230c      	movs	r3, #12
 800545e:	f7fe f8ad 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005462:	e095      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005464:	2118      	movs	r1, #24
 8005466:	187b      	adds	r3, r7, r1
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	001a      	movs	r2, r3
 800546c:	187b      	adds	r3, r7, r1
 800546e:	1c99      	adds	r1, r3, #2
 8005470:	484e      	ldr	r0, [pc, #312]	@ (80055ac <ProcessCmd+0x1b8>)
 8005472:	230c      	movs	r3, #12
 8005474:	f7fe f8a2 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005478:	e08a      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800547a:	2118      	movs	r1, #24
 800547c:	187b      	adds	r3, r7, r1
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	001a      	movs	r2, r3
 8005482:	187b      	adds	r3, r7, r1
 8005484:	1c99      	adds	r1, r3, #2
 8005486:	484a      	ldr	r0, [pc, #296]	@ (80055b0 <ProcessCmd+0x1bc>)
 8005488:	230c      	movs	r3, #12
 800548a:	f7fe f897 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800548e:	e07f      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005490:	2118      	movs	r1, #24
 8005492:	187b      	adds	r3, r7, r1
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	001a      	movs	r2, r3
 8005498:	187b      	adds	r3, r7, r1
 800549a:	1c99      	adds	r1, r3, #2
 800549c:	4845      	ldr	r0, [pc, #276]	@ (80055b4 <ProcessCmd+0x1c0>)
 800549e:	230c      	movs	r3, #12
 80054a0:	f7fe f88c 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054a4:	e074      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054a6:	2118      	movs	r1, #24
 80054a8:	187b      	adds	r3, r7, r1
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	001a      	movs	r2, r3
 80054ae:	187b      	adds	r3, r7, r1
 80054b0:	1c99      	adds	r1, r3, #2
 80054b2:	4841      	ldr	r0, [pc, #260]	@ (80055b8 <ProcessCmd+0x1c4>)
 80054b4:	230c      	movs	r3, #12
 80054b6:	f7fe f881 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054ba:	e069      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054bc:	2118      	movs	r1, #24
 80054be:	187b      	adds	r3, r7, r1
 80054c0:	785b      	ldrb	r3, [r3, #1]
 80054c2:	001a      	movs	r2, r3
 80054c4:	187b      	adds	r3, r7, r1
 80054c6:	1c99      	adds	r1, r3, #2
 80054c8:	483c      	ldr	r0, [pc, #240]	@ (80055bc <ProcessCmd+0x1c8>)
 80054ca:	230c      	movs	r3, #12
 80054cc:	f7fe f876 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054d0:	e05e      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80054d2:	2118      	movs	r1, #24
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	001a      	movs	r2, r3
 80054da:	187b      	adds	r3, r7, r1
 80054dc:	1c99      	adds	r1, r3, #2
 80054de:	4838      	ldr	r0, [pc, #224]	@ (80055c0 <ProcessCmd+0x1cc>)
 80054e0:	231e      	movs	r3, #30
 80054e2:	f7fe f86b 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054e6:	e053      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054e8:	2118      	movs	r1, #24
 80054ea:	187b      	adds	r3, r7, r1
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	001a      	movs	r2, r3
 80054f0:	187b      	adds	r3, r7, r1
 80054f2:	1c99      	adds	r1, r3, #2
 80054f4:	4833      	ldr	r0, [pc, #204]	@ (80055c4 <ProcessCmd+0x1d0>)
 80054f6:	230c      	movs	r3, #12
 80054f8:	f7fe f860 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054fc:	e048      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054fe:	2118      	movs	r1, #24
 8005500:	187b      	adds	r3, r7, r1
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	001a      	movs	r2, r3
 8005506:	187b      	adds	r3, r7, r1
 8005508:	1c99      	adds	r1, r3, #2
 800550a:	482f      	ldr	r0, [pc, #188]	@ (80055c8 <ProcessCmd+0x1d4>)
 800550c:	230c      	movs	r3, #12
 800550e:	f7fe f855 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005512:	e03d      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005514:	2118      	movs	r1, #24
 8005516:	187b      	adds	r3, r7, r1
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	001a      	movs	r2, r3
 800551c:	187b      	adds	r3, r7, r1
 800551e:	1c99      	adds	r1, r3, #2
 8005520:	482a      	ldr	r0, [pc, #168]	@ (80055cc <ProcessCmd+0x1d8>)
 8005522:	230c      	movs	r3, #12
 8005524:	f7fe f84a 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005528:	e032      	b.n	8005590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800552a:	2118      	movs	r1, #24
 800552c:	187b      	adds	r3, r7, r1
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	001a      	movs	r2, r3
 8005532:	187b      	adds	r3, r7, r1
 8005534:	1c99      	adds	r1, r3, #2
 8005536:	4826      	ldr	r0, [pc, #152]	@ (80055d0 <ProcessCmd+0x1dc>)
 8005538:	230c      	movs	r3, #12
 800553a:	f7fe f83f 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800553e:	e027      	b.n	8005590 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005540:	4b18      	ldr	r3, [pc, #96]	@ (80055a4 <ProcessCmd+0x1b0>)
 8005542:	21ba      	movs	r1, #186	@ 0xba
 8005544:	0018      	movs	r0, r3
 8005546:	f7fe f87f 	bl	8003648 <ClearEEprom>
        break;
 800554a:	e021      	b.n	8005590 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800554c:	2118      	movs	r1, #24
 800554e:	187b      	adds	r3, r7, r1
 8005550:	789b      	ldrb	r3, [r3, #2]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	b21a      	sxth	r2, r3
 8005556:	187b      	adds	r3, r7, r1
 8005558:	78db      	ldrb	r3, [r3, #3]
 800555a:	b21b      	sxth	r3, r3
 800555c:	4313      	orrs	r3, r2
 800555e:	b21a      	sxth	r2, r3
 8005560:	1dbb      	adds	r3, r7, #6
 8005562:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005564:	1dbb      	adds	r3, r7, #6
 8005566:	881a      	ldrh	r2, [r3, #0]
 8005568:	23c0      	movs	r3, #192	@ 0xc0
 800556a:	015b      	lsls	r3, r3, #5
 800556c:	429a      	cmp	r2, r3
 800556e:	d207      	bcs.n	8005580 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005570:	1dbb      	adds	r3, r7, #6
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	4a0b      	ldr	r2, [pc, #44]	@ (80055a4 <ProcessCmd+0x1b0>)
 8005576:	0019      	movs	r1, r3
 8005578:	0010      	movs	r0, r2
 800557a:	f7fe f865 	bl	8003648 <ClearEEprom>
            break;
 800557e:	e006      	b.n	800558e <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005580:	23c0      	movs	r3, #192	@ 0xc0
 8005582:	015b      	lsls	r3, r3, #5
 8005584:	4a07      	ldr	r2, [pc, #28]	@ (80055a4 <ProcessCmd+0x1b0>)
 8005586:	0019      	movs	r1, r3
 8005588:	0010      	movs	r0, r2
 800558a:	f7fe f85d 	bl	8003648 <ClearEEprom>
            break;
 800558e:	46c0      	nop			@ (mov r8, r8)
}
 8005590:	46c0      	nop			@ (mov r8, r8)
 8005592:	46bd      	mov	sp, r7
 8005594:	b002      	add	sp, #8
 8005596:	bcb0      	pop	{r4, r5, r7}
 8005598:	bc08      	pop	{r3}
 800559a:	b004      	add	sp, #16
 800559c:	4718      	bx	r3
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	0801c164 	.word	0x0801c164
 80055a4:	08080000 	.word	0x08080000
 80055a8:	0808000c 	.word	0x0808000c
 80055ac:	08080018 	.word	0x08080018
 80055b0:	08080024 	.word	0x08080024
 80055b4:	08080030 	.word	0x08080030
 80055b8:	0808003c 	.word	0x0808003c
 80055bc:	08080048 	.word	0x08080048
 80055c0:	08080090 	.word	0x08080090
 80055c4:	08080078 	.word	0x08080078
 80055c8:	0808006c 	.word	0x0808006c
 80055cc:	08080060 	.word	0x08080060
 80055d0:	08080054 	.word	0x08080054

080055d4 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6039      	str	r1, [r7, #0]
 80055dc:	0011      	movs	r1, r2
 80055de:	1dfb      	adds	r3, r7, #7
 80055e0:	1c02      	adds	r2, r0, #0
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	1dbb      	adds	r3, r7, #6
 80055e6:	1c0a      	adds	r2, r1, #0
 80055e8:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80055ea:	2223      	movs	r2, #35	@ 0x23
 80055ec:	4b20      	ldr	r3, [pc, #128]	@ (8005670 <Create_Message+0x9c>)
 80055ee:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80055f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005670 <Create_Message+0x9c>)
 80055f2:	1dfa      	adds	r2, r7, #7
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80055f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <Create_Message+0x9c>)
 80055fa:	1dba      	adds	r2, r7, #6
 80055fc:	7812      	ldrb	r2, [r2, #0]
 80055fe:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005600:	1dbb      	adds	r3, r7, #6
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	4b1b      	ldr	r3, [pc, #108]	@ (8005674 <Create_Message+0xa0>)
 8005608:	0018      	movs	r0, r3
 800560a:	f013 f885 	bl	8018718 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800560e:	1dbb      	adds	r3, r7, #6
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	b29a      	uxth	r2, r3
 8005614:	250e      	movs	r5, #14
 8005616:	197b      	adds	r3, r7, r5
 8005618:	3203      	adds	r2, #3
 800561a:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 800561c:	260c      	movs	r6, #12
 800561e:	19bc      	adds	r4, r7, r6
 8005620:	197b      	adds	r3, r7, r5
 8005622:	881a      	ldrh	r2, [r3, #0]
 8005624:	4b12      	ldr	r3, [pc, #72]	@ (8005670 <Create_Message+0x9c>)
 8005626:	0011      	movs	r1, r2
 8005628:	0018      	movs	r0, r3
 800562a:	f000 f825 	bl	8005678 <CRC16_ARC>
 800562e:	0003      	movs	r3, r0
 8005630:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005632:	0030      	movs	r0, r6
 8005634:	183b      	adds	r3, r7, r0
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	b29a      	uxth	r2, r3
 800563c:	197b      	adds	r3, r7, r5
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b2d1      	uxtb	r1, r2
 8005642:	4a0b      	ldr	r2, [pc, #44]	@ (8005670 <Create_Message+0x9c>)
 8005644:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005646:	197b      	adds	r3, r7, r5
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	183a      	adds	r2, r7, r0
 800564e:	8812      	ldrh	r2, [r2, #0]
 8005650:	b2d1      	uxtb	r1, r2
 8005652:	4a07      	ldr	r2, [pc, #28]	@ (8005670 <Create_Message+0x9c>)
 8005654:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005656:	197b      	adds	r3, r7, r5
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	3302      	adds	r3, #2
 800565c:	b29a      	uxth	r2, r3
 800565e:	4b04      	ldr	r3, [pc, #16]	@ (8005670 <Create_Message+0x9c>)
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f011 fcb4 	bl	8016fd0 <CDC_Transmit_FS>
}
 8005668:	46c0      	nop			@ (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b005      	add	sp, #20
 800566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005670:	20000cec 	.word	0x20000cec
 8005674:	20000cef 	.word	0x20000cef

08005678 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	000a      	movs	r2, r1
 8005682:	1cbb      	adds	r3, r7, #2
 8005684:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005686:	2316      	movs	r3, #22
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	2200      	movs	r2, #0
 800568c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	e02e      	b.n	80056f2 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	18d3      	adds	r3, r2, r3
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	0019      	movs	r1, r3
 800569e:	2216      	movs	r2, #22
 80056a0:	18bb      	adds	r3, r7, r2
 80056a2:	18ba      	adds	r2, r7, r2
 80056a4:	8812      	ldrh	r2, [r2, #0]
 80056a6:	404a      	eors	r2, r1
 80056a8:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e01a      	b.n	80056e6 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80056b0:	2116      	movs	r1, #22
 80056b2:	187b      	adds	r3, r7, r1
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	4013      	ands	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80056bc:	187b      	adds	r3, r7, r1
 80056be:	187a      	adds	r2, r7, r1
 80056c0:	8812      	ldrh	r2, [r2, #0]
 80056c2:	0852      	lsrs	r2, r2, #1
 80056c4:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80056c6:	187b      	adds	r3, r7, r1
 80056c8:	187a      	adds	r2, r7, r1
 80056ca:	8812      	ldrh	r2, [r2, #0]
 80056cc:	490f      	ldr	r1, [pc, #60]	@ (800570c <CRC16_ARC+0x94>)
 80056ce:	404a      	eors	r2, r1
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e005      	b.n	80056e0 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80056d4:	2216      	movs	r2, #22
 80056d6:	18bb      	adds	r3, r7, r2
 80056d8:	18ba      	adds	r2, r7, r2
 80056da:	8812      	ldrh	r2, [r2, #0]
 80056dc:	0852      	lsrs	r2, r2, #1
 80056de:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b07      	cmp	r3, #7
 80056ea:	dde1      	ble.n	80056b0 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	3301      	adds	r3, #1
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	1cbb      	adds	r3, r7, #2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	dbcb      	blt.n	8005694 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80056fc:	2316      	movs	r3, #22
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	881b      	ldrh	r3, [r3, #0]
}
 8005702:	0018      	movs	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	b006      	add	sp, #24
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	ffffa001 	.word	0xffffa001

08005710 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005714:	4b26      	ldr	r3, [pc, #152]	@ (80057b0 <ReadBatteryVoltage+0xa0>)
 8005716:	4a27      	ldr	r2, [pc, #156]	@ (80057b4 <ReadBatteryVoltage+0xa4>)
 8005718:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800571a:	4b25      	ldr	r3, [pc, #148]	@ (80057b0 <ReadBatteryVoltage+0xa0>)
 800571c:	2280      	movs	r2, #128	@ 0x80
 800571e:	0152      	lsls	r2, r2, #5
 8005720:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005722:	4a23      	ldr	r2, [pc, #140]	@ (80057b0 <ReadBatteryVoltage+0xa0>)
 8005724:	4b24      	ldr	r3, [pc, #144]	@ (80057b8 <ReadBatteryVoltage+0xa8>)
 8005726:	0011      	movs	r1, r2
 8005728:	0018      	movs	r0, r3
 800572a:	f005 f8ad 	bl	800a888 <HAL_ADC_ConfigChannel>
 800572e:	1e03      	subs	r3, r0, #0
 8005730:	d001      	beq.n	8005736 <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005732:	f000 ffc5 	bl	80066c0 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005736:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <ReadBatteryVoltage+0xa8>)
 8005738:	0018      	movs	r0, r3
 800573a:	f004 ffa9 	bl	800a690 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 800573e:	4b1e      	ldr	r3, [pc, #120]	@ (80057b8 <ReadBatteryVoltage+0xa8>)
 8005740:	2101      	movs	r1, #1
 8005742:	0018      	movs	r0, r3
 8005744:	f004 fff8 	bl	800a738 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005748:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <ReadBatteryVoltage+0xa8>)
 800574a:	0018      	movs	r0, r3
 800574c:	f005 f890 	bl	800a870 <HAL_ADC_GetValue>
 8005750:	0002      	movs	r2, r0
 8005752:	4b1a      	ldr	r3, [pc, #104]	@ (80057bc <ReadBatteryVoltage+0xac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4353      	muls	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4919      	ldr	r1, [pc, #100]	@ (80057c0 <ReadBatteryVoltage+0xb0>)
 800575c:	0018      	movs	r0, r3
 800575e:	f7fa fcef 	bl	8000140 <__udivsi3>
 8005762:	0003      	movs	r3, r0
 8005764:	001a      	movs	r2, r3
 8005766:	4b17      	ldr	r3, [pc, #92]	@ (80057c4 <ReadBatteryVoltage+0xb4>)
 8005768:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 800576a:	4b16      	ldr	r3, [pc, #88]	@ (80057c4 <ReadBatteryVoltage+0xb4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	0018      	movs	r0, r3
 8005770:	f7fb fef8 	bl	8001564 <__aeabi_ui2f>
 8005774:	1c03      	adds	r3, r0, #0
 8005776:	4914      	ldr	r1, [pc, #80]	@ (80057c8 <ReadBatteryVoltage+0xb8>)
 8005778:	1c18      	adds	r0, r3, #0
 800577a:	f7fb f9a9 	bl	8000ad0 <__aeabi_fdiv>
 800577e:	1c03      	adds	r3, r0, #0
 8005780:	1c1a      	adds	r2, r3, #0
 8005782:	4b12      	ldr	r3, [pc, #72]	@ (80057cc <ReadBatteryVoltage+0xbc>)
 8005784:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005786:	4b0a      	ldr	r3, [pc, #40]	@ (80057b0 <ReadBatteryVoltage+0xa0>)
 8005788:	4a0a      	ldr	r2, [pc, #40]	@ (80057b4 <ReadBatteryVoltage+0xa4>)
 800578a:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 800578c:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <ReadBatteryVoltage+0xa0>)
 800578e:	4a10      	ldr	r2, [pc, #64]	@ (80057d0 <ReadBatteryVoltage+0xc0>)
 8005790:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005792:	4a07      	ldr	r2, [pc, #28]	@ (80057b0 <ReadBatteryVoltage+0xa0>)
 8005794:	4b08      	ldr	r3, [pc, #32]	@ (80057b8 <ReadBatteryVoltage+0xa8>)
 8005796:	0011      	movs	r1, r2
 8005798:	0018      	movs	r0, r3
 800579a:	f005 f875 	bl	800a888 <HAL_ADC_ConfigChannel>
 800579e:	1e03      	subs	r3, r0, #0
 80057a0:	d001      	beq.n	80057a6 <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 80057a2:	f000 ff8d 	bl	80066c0 <Error_Handler>
   }
   return trueValue;
 80057a6:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <ReadBatteryVoltage+0xbc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 }
 80057aa:	1c18      	adds	r0, r3, #0
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000df4 	.word	0x20000df4
 80057b4:	38004000 	.word	0x38004000
 80057b8:	20000e14 	.word	0x20000e14
 80057bc:	20000024 	.word	0x20000024
 80057c0:	00000fff 	.word	0x00000fff
 80057c4:	20000dfc 	.word	0x20000dfc
 80057c8:	447a0000 	.word	0x447a0000
 80057cc:	20000e00 	.word	0x20000e00
 80057d0:	00001001 	.word	0x00001001

080057d4 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 80057d8:	4b27      	ldr	r3, [pc, #156]	@ (8005878 <ReadSolarVoltage+0xa4>)
 80057da:	4a28      	ldr	r2, [pc, #160]	@ (800587c <ReadSolarVoltage+0xa8>)
 80057dc:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80057de:	4b26      	ldr	r3, [pc, #152]	@ (8005878 <ReadSolarVoltage+0xa4>)
 80057e0:	2280      	movs	r2, #128	@ 0x80
 80057e2:	0152      	lsls	r2, r2, #5
 80057e4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057e6:	4a24      	ldr	r2, [pc, #144]	@ (8005878 <ReadSolarVoltage+0xa4>)
 80057e8:	4b25      	ldr	r3, [pc, #148]	@ (8005880 <ReadSolarVoltage+0xac>)
 80057ea:	0011      	movs	r1, r2
 80057ec:	0018      	movs	r0, r3
 80057ee:	f005 f84b 	bl	800a888 <HAL_ADC_ConfigChannel>
 80057f2:	1e03      	subs	r3, r0, #0
 80057f4:	d001      	beq.n	80057fa <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 80057f6:	f000 ff63 	bl	80066c0 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 80057fa:	4b21      	ldr	r3, [pc, #132]	@ (8005880 <ReadSolarVoltage+0xac>)
 80057fc:	0018      	movs	r0, r3
 80057fe:	f004 ff47 	bl	800a690 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005802:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <ReadSolarVoltage+0xac>)
 8005804:	2101      	movs	r1, #1
 8005806:	0018      	movs	r0, r3
 8005808:	f004 ff96 	bl	800a738 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 800580c:	4b1c      	ldr	r3, [pc, #112]	@ (8005880 <ReadSolarVoltage+0xac>)
 800580e:	0018      	movs	r0, r3
 8005810:	f005 f82e 	bl	800a870 <HAL_ADC_GetValue>
 8005814:	0002      	movs	r2, r0
 8005816:	4b1b      	ldr	r3, [pc, #108]	@ (8005884 <ReadSolarVoltage+0xb0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	435a      	muls	r2, r3
 800581c:	0013      	movs	r3, r2
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	189b      	adds	r3, r3, r2
 8005822:	4919      	ldr	r1, [pc, #100]	@ (8005888 <ReadSolarVoltage+0xb4>)
 8005824:	0018      	movs	r0, r3
 8005826:	f7fa fc8b 	bl	8000140 <__udivsi3>
 800582a:	0003      	movs	r3, r0
 800582c:	001a      	movs	r2, r3
 800582e:	4b17      	ldr	r3, [pc, #92]	@ (800588c <ReadSolarVoltage+0xb8>)
 8005830:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005832:	4b16      	ldr	r3, [pc, #88]	@ (800588c <ReadSolarVoltage+0xb8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	0018      	movs	r0, r3
 8005838:	f7fb fe94 	bl	8001564 <__aeabi_ui2f>
 800583c:	1c03      	adds	r3, r0, #0
 800583e:	4914      	ldr	r1, [pc, #80]	@ (8005890 <ReadSolarVoltage+0xbc>)
 8005840:	1c18      	adds	r0, r3, #0
 8005842:	f7fb f945 	bl	8000ad0 <__aeabi_fdiv>
 8005846:	1c03      	adds	r3, r0, #0
 8005848:	1c1a      	adds	r2, r3, #0
 800584a:	4b12      	ldr	r3, [pc, #72]	@ (8005894 <ReadSolarVoltage+0xc0>)
 800584c:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 800584e:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <ReadSolarVoltage+0xa4>)
 8005850:	4a0a      	ldr	r2, [pc, #40]	@ (800587c <ReadSolarVoltage+0xa8>)
 8005852:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005854:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <ReadSolarVoltage+0xa4>)
 8005856:	4a10      	ldr	r2, [pc, #64]	@ (8005898 <ReadSolarVoltage+0xc4>)
 8005858:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800585a:	4a07      	ldr	r2, [pc, #28]	@ (8005878 <ReadSolarVoltage+0xa4>)
 800585c:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <ReadSolarVoltage+0xac>)
 800585e:	0011      	movs	r1, r2
 8005860:	0018      	movs	r0, r3
 8005862:	f005 f811 	bl	800a888 <HAL_ADC_ConfigChannel>
 8005866:	1e03      	subs	r3, r0, #0
 8005868:	d001      	beq.n	800586e <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 800586a:	f000 ff29 	bl	80066c0 <Error_Handler>
   }
   return trueValue;
 800586e:	4b09      	ldr	r3, [pc, #36]	@ (8005894 <ReadSolarVoltage+0xc0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 }
 8005872:	1c18      	adds	r0, r3, #0
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20000df4 	.word	0x20000df4
 800587c:	3c008000 	.word	0x3c008000
 8005880:	20000e14 	.word	0x20000e14
 8005884:	20000024 	.word	0x20000024
 8005888:	00000fff 	.word	0x00000fff
 800588c:	20000e04 	.word	0x20000e04
 8005890:	447a0000 	.word	0x447a0000
 8005894:	20000e08 	.word	0x20000e08
 8005898:	00001001 	.word	0x00001001

0800589c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 80058a0:	23a0      	movs	r3, #160	@ 0xa0
 80058a2:	05db      	lsls	r3, r3, #23
 80058a4:	2180      	movs	r1, #128	@ 0x80
 80058a6:	0018      	movs	r0, r3
 80058a8:	f006 f8b4 	bl	800ba14 <HAL_GPIO_ReadPin>
 80058ac:	0003      	movs	r3, r0
 80058ae:	1e5a      	subs	r2, r3, #1
 80058b0:	4193      	sbcs	r3, r2
 80058b2:	b2db      	uxtb	r3, r3
}
 80058b4:	0018      	movs	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80058ba:	b580      	push	{r7, lr}
 80058bc:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 80058be:	2380      	movs	r3, #128	@ 0x80
 80058c0:	021a      	lsls	r2, r3, #8
 80058c2:	23a0      	movs	r3, #160	@ 0xa0
 80058c4:	05db      	lsls	r3, r3, #23
 80058c6:	0011      	movs	r1, r2
 80058c8:	0018      	movs	r0, r3
 80058ca:	f006 f8a3 	bl	800ba14 <HAL_GPIO_ReadPin>
 80058ce:	0003      	movs	r3, r0
 80058d0:	1e5a      	subs	r2, r3, #1
 80058d2:	4193      	sbcs	r3, r2
 80058d4:	b2db      	uxtb	r3, r3
}
 80058d6:	0018      	movs	r0, r3
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80058e0:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <UserButton_Pressed+0x1c>)
 80058e2:	2104      	movs	r1, #4
 80058e4:	0018      	movs	r0, r3
 80058e6:	f006 f895 	bl	800ba14 <HAL_GPIO_ReadPin>
 80058ea:	0003      	movs	r3, r0
 80058ec:	425a      	negs	r2, r3
 80058ee:	4153      	adcs	r3, r2
 80058f0:	b2db      	uxtb	r3, r3
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	50000c00 	.word	0x50000c00

080058fc <RTC_SetTime>:
static Clock RealTime = {.Hours = 0, .Minutes = 0, .Seconds = 0};
static Clock NextAction = {.Hours = 0, .Minutes = 0, .Seconds = 0};
RTC_HandleTypeDef* RealTime_Handle = NULL;

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b089      	sub	sp, #36	@ 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	000c      	movs	r4, r1
 8005906:	0010      	movs	r0, r2
 8005908:	0019      	movs	r1, r3
 800590a:	1cfb      	adds	r3, r7, #3
 800590c:	1c22      	adds	r2, r4, #0
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	1cbb      	adds	r3, r7, #2
 8005912:	1c02      	adds	r2, r0, #0
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	1c7b      	adds	r3, r7, #1
 8005918:	1c0a      	adds	r2, r1, #0
 800591a:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 800591c:	240c      	movs	r4, #12
 800591e:	193b      	adds	r3, r7, r4
 8005920:	0018      	movs	r0, r3
 8005922:	2314      	movs	r3, #20
 8005924:	001a      	movs	r2, r3
 8005926:	2100      	movs	r1, #0
 8005928:	f012 fe2c 	bl	8018584 <memset>

    sTime.Hours = hours;
 800592c:	0021      	movs	r1, r4
 800592e:	187b      	adds	r3, r7, r1
 8005930:	1cfa      	adds	r2, r7, #3
 8005932:	7812      	ldrb	r2, [r2, #0]
 8005934:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 8005936:	187b      	adds	r3, r7, r1
 8005938:	1cba      	adds	r2, r7, #2
 800593a:	7812      	ldrb	r2, [r2, #0]
 800593c:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 800593e:	187b      	adds	r3, r7, r1
 8005940:	1c7a      	adds	r2, r7, #1
 8005942:	7812      	ldrb	r2, [r2, #0]
 8005944:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 8005946:	187b      	adds	r3, r7, r1
 8005948:	2200      	movs	r2, #0
 800594a:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800594c:	187b      	adds	r3, r7, r1
 800594e:	2200      	movs	r2, #0
 8005950:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005952:	187b      	adds	r3, r7, r1
 8005954:	2200      	movs	r2, #0
 8005956:	611a      	str	r2, [r3, #16]
    

    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8005958:	1879      	adds	r1, r7, r1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	0018      	movs	r0, r3
 8005960:	f00b fa40 	bl	8010de4 <HAL_RTC_SetTime>
        // Foutafhandeling
    }
}
 8005964:	46c0      	nop			@ (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b009      	add	sp, #36	@ 0x24
 800596a:	bd90      	pop	{r4, r7, pc}

0800596c <InitClock>:

void InitClock(RTC_HandleTypeDef *hrtc){
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  RealTime_Handle = hrtc;
 8005974:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <InitClock+0x2c>)
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime_Handle, RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 800597a:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <InitClock+0x2c>)
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	4b07      	ldr	r3, [pc, #28]	@ (800599c <InitClock+0x30>)
 8005980:	7819      	ldrb	r1, [r3, #0]
 8005982:	4b06      	ldr	r3, [pc, #24]	@ (800599c <InitClock+0x30>)
 8005984:	785a      	ldrb	r2, [r3, #1]
 8005986:	4b05      	ldr	r3, [pc, #20]	@ (800599c <InitClock+0x30>)
 8005988:	789b      	ldrb	r3, [r3, #2]
 800598a:	f7ff ffb7 	bl	80058fc <RTC_SetTime>
}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	b002      	add	sp, #8
 8005994:	bd80      	pop	{r7, pc}
 8005996:	46c0      	nop			@ (mov r8, r8)
 8005998:	20000e10 	.word	0x20000e10
 800599c:	20000e0c 	.word	0x20000e0c

080059a0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80059a6:	003b      	movs	r3, r7
 80059a8:	0018      	movs	r0, r3
 80059aa:	2308      	movs	r3, #8
 80059ac:	001a      	movs	r2, r3
 80059ae:	2100      	movs	r1, #0
 80059b0:	f012 fde8 	bl	8018584 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80059b4:	4b30      	ldr	r3, [pc, #192]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059b6:	4a31      	ldr	r2, [pc, #196]	@ (8005a7c <MX_ADC_Init+0xdc>)
 80059b8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80059ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059bc:	2200      	movs	r2, #0
 80059be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80059c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059c2:	22c0      	movs	r2, #192	@ 0xc0
 80059c4:	0612      	lsls	r2, r2, #24
 80059c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80059c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80059ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80059d4:	4b28      	ldr	r3, [pc, #160]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80059da:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059dc:	2200      	movs	r2, #0
 80059de:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80059e0:	4b25      	ldr	r3, [pc, #148]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059e2:	2220      	movs	r2, #32
 80059e4:	2100      	movs	r1, #0
 80059e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80059e8:	4b23      	ldr	r3, [pc, #140]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059ea:	2221      	movs	r2, #33	@ 0x21
 80059ec:	2101      	movs	r1, #1
 80059ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80059f0:	4b21      	ldr	r3, [pc, #132]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80059f6:	4b20      	ldr	r3, [pc, #128]	@ (8005a78 <MX_ADC_Init+0xd8>)
 80059f8:	22c2      	movs	r2, #194	@ 0xc2
 80059fa:	32ff      	adds	r2, #255	@ 0xff
 80059fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80059fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005a78 <MX_ADC_Init+0xd8>)
 8005a00:	222c      	movs	r2, #44	@ 0x2c
 8005a02:	2100      	movs	r1, #0
 8005a04:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a06:	4b1c      	ldr	r3, [pc, #112]	@ (8005a78 <MX_ADC_Init+0xd8>)
 8005a08:	2204      	movs	r2, #4
 8005a0a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <MX_ADC_Init+0xd8>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8005a12:	4b19      	ldr	r3, [pc, #100]	@ (8005a78 <MX_ADC_Init+0xd8>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8005a18:	4b17      	ldr	r3, [pc, #92]	@ (8005a78 <MX_ADC_Init+0xd8>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8005a1e:	4b16      	ldr	r3, [pc, #88]	@ (8005a78 <MX_ADC_Init+0xd8>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005a24:	4b14      	ldr	r3, [pc, #80]	@ (8005a78 <MX_ADC_Init+0xd8>)
 8005a26:	0018      	movs	r0, r3
 8005a28:	f004 fcbe 	bl	800a3a8 <HAL_ADC_Init>
 8005a2c:	1e03      	subs	r3, r0, #0
 8005a2e:	d001      	beq.n	8005a34 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8005a30:	f000 fe46 	bl	80066c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005a34:	003b      	movs	r3, r7
 8005a36:	4a12      	ldr	r2, [pc, #72]	@ (8005a80 <MX_ADC_Init+0xe0>)
 8005a38:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005a3a:	003b      	movs	r3, r7
 8005a3c:	2280      	movs	r2, #128	@ 0x80
 8005a3e:	0152      	lsls	r2, r2, #5
 8005a40:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005a42:	003a      	movs	r2, r7
 8005a44:	4b0c      	ldr	r3, [pc, #48]	@ (8005a78 <MX_ADC_Init+0xd8>)
 8005a46:	0011      	movs	r1, r2
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f004 ff1d 	bl	800a888 <HAL_ADC_ConfigChannel>
 8005a4e:	1e03      	subs	r3, r0, #0
 8005a50:	d001      	beq.n	8005a56 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8005a52:	f000 fe35 	bl	80066c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005a56:	003b      	movs	r3, r7
 8005a58:	4a0a      	ldr	r2, [pc, #40]	@ (8005a84 <MX_ADC_Init+0xe4>)
 8005a5a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005a5c:	003a      	movs	r2, r7
 8005a5e:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <MX_ADC_Init+0xd8>)
 8005a60:	0011      	movs	r1, r2
 8005a62:	0018      	movs	r0, r3
 8005a64:	f004 ff10 	bl	800a888 <HAL_ADC_ConfigChannel>
 8005a68:	1e03      	subs	r3, r0, #0
 8005a6a:	d001      	beq.n	8005a70 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8005a6c:	f000 fe28 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005a70:	46c0      	nop			@ (mov r8, r8)
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b002      	add	sp, #8
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000e14 	.word	0x20000e14
 8005a7c:	40012400 	.word	0x40012400
 8005a80:	38004000 	.word	0x38004000
 8005a84:	3c008000 	.word	0x3c008000

08005a88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b089      	sub	sp, #36	@ 0x24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a90:	240c      	movs	r4, #12
 8005a92:	193b      	adds	r3, r7, r4
 8005a94:	0018      	movs	r0, r3
 8005a96:	2314      	movs	r3, #20
 8005a98:	001a      	movs	r2, r3
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	f012 fd72 	bl	8018584 <memset>
  if(adcHandle->Instance==ADC1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a14      	ldr	r2, [pc, #80]	@ (8005af8 <HAL_ADC_MspInit+0x70>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d121      	bne.n	8005aee <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005aaa:	4b14      	ldr	r3, [pc, #80]	@ (8005afc <HAL_ADC_MspInit+0x74>)
 8005aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aae:	4b13      	ldr	r3, [pc, #76]	@ (8005afc <HAL_ADC_MspInit+0x74>)
 8005ab0:	2180      	movs	r1, #128	@ 0x80
 8005ab2:	0089      	lsls	r1, r1, #2
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ab8:	4b10      	ldr	r3, [pc, #64]	@ (8005afc <HAL_ADC_MspInit+0x74>)
 8005aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005abc:	4b0f      	ldr	r3, [pc, #60]	@ (8005afc <HAL_ADC_MspInit+0x74>)
 8005abe:	2104      	movs	r1, #4
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8005afc <HAL_ADC_MspInit+0x74>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	2204      	movs	r2, #4
 8005aca:	4013      	ands	r3, r2
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005ad0:	193b      	adds	r3, r7, r4
 8005ad2:	2230      	movs	r2, #48	@ 0x30
 8005ad4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ad6:	193b      	adds	r3, r7, r4
 8005ad8:	2203      	movs	r2, #3
 8005ada:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005adc:	193b      	adds	r3, r7, r4
 8005ade:	2200      	movs	r2, #0
 8005ae0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ae2:	193b      	adds	r3, r7, r4
 8005ae4:	4a06      	ldr	r2, [pc, #24]	@ (8005b00 <HAL_ADC_MspInit+0x78>)
 8005ae6:	0019      	movs	r1, r3
 8005ae8:	0010      	movs	r0, r2
 8005aea:	f005 fd33 	bl	800b554 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005aee:	46c0      	nop			@ (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b009      	add	sp, #36	@ 0x24
 8005af4:	bd90      	pop	{r4, r7, pc}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	40012400 	.word	0x40012400
 8005afc:	40021000 	.word	0x40021000
 8005b00:	50000800 	.word	0x50000800

08005b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b0a:	4b10      	ldr	r3, [pc, #64]	@ (8005b4c <MX_DMA_Init+0x48>)
 8005b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <MX_DMA_Init+0x48>)
 8005b10:	2101      	movs	r1, #1
 8005b12:	430a      	orrs	r2, r1
 8005b14:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <MX_DMA_Init+0x48>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8005b22:	2200      	movs	r2, #0
 8005b24:	2100      	movs	r1, #0
 8005b26:	200a      	movs	r0, #10
 8005b28:	f005 f868 	bl	800abfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005b2c:	200a      	movs	r0, #10
 8005b2e:	f005 f87a 	bl	800ac26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8005b32:	2200      	movs	r2, #0
 8005b34:	2103      	movs	r1, #3
 8005b36:	200b      	movs	r0, #11
 8005b38:	f005 f860 	bl	800abfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005b3c:	200b      	movs	r0, #11
 8005b3e:	f005 f872 	bl	800ac26 <HAL_NVIC_EnableIRQ>

}
 8005b42:	46c0      	nop			@ (mov r8, r8)
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b002      	add	sp, #8
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	40021000 	.word	0x40021000

08005b50 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b90 <Gadget_Init+0x40>)
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f001 f8d7 	bl	8006d14 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 fe1b 	bl	80067a8 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f7fd fe01 	bl	800377c <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005b7a:	4a06      	ldr	r2, [pc, #24]	@ (8005b94 <Gadget_Init+0x44>)
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <Gadget_Init+0x48>)
 8005b7e:	0019      	movs	r1, r3
 8005b80:	2003      	movs	r0, #3
 8005b82:	f004 f83f 	bl	8009c04 <CreateLine>
}
 8005b86:	46c0      	nop			@ (mov r8, r8)
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	b004      	add	sp, #16
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	20000028 	.word	0x20000028
 8005b94:	0801b99c 	.word	0x0801b99c
 8005b98:	0801b9b0 	.word	0x0801b9b0

08005b9c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  Meas_Test();
 8005ba0:	f000 ff38 	bl	8006a14 <Meas_Test>
}
 8005ba4:	46c0      	nop			@ (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <UpkeepGadget>:

bool UpkeepGadget() {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8005bb2:	f001 f81f 	bl	8006bf4 <Meas_Upkeep>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	001a      	movs	r2, r3
 8005bba:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf8 <UpkeepGadget+0x4c>)
 8005bbc:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8005bbe:	f000 ffcb 	bl	8006b58 <Mic_Upkeep>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	001a      	movs	r2, r3
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <UpkeepGadget+0x50>)
 8005bc8:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8005bca:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <UpkeepGadget+0x4c>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d103      	bne.n	8005bda <UpkeepGadget+0x2e>
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <UpkeepGadget+0x50>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d001      	beq.n	8005bde <UpkeepGadget+0x32>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	e000      	b.n	8005be0 <UpkeepGadget+0x34>
 8005bde:	2200      	movs	r2, #0
 8005be0:	1dfb      	adds	r3, r7, #7
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	2101      	movs	r1, #1
 8005be8:	400a      	ands	r2, r1
 8005bea:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8005bec:	1dfb      	adds	r3, r7, #7
 8005bee:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b002      	add	sp, #8
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20000e70 	.word	0x20000e70
 8005bfc:	20000e71 	.word	0x20000e71

08005c00 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0011      	movs	r1, r2
 8005c10:	0018      	movs	r0, r3
 8005c12:	f002 fbe7 	bl	80083e4 <SGP_Init>
}
 8005c16:	46c0      	nop			@ (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b002      	add	sp, #8
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8005c22:	f002 fbf9 	bl	8008418 <SGP_StartMeasurement>
}
 8005c26:	46c0      	nop			@ (mov r8, r8)
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	0018      	movs	r0, r3
 8005c38:	f002 fc5e 	bl	80084f8 <SGP_GetMeasurementValues>
 8005c3c:	0003      	movs	r3, r0
}
 8005c3e:	0018      	movs	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b002      	add	sp, #8
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8005c46:	b580      	push	{r7, lr}
 8005c48:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8005c4a:	f002 fe6b 	bl	8008924 <SGP_DeviceConnected>
 8005c4e:	0003      	movs	r3, r0
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b08b      	sub	sp, #44	@ 0x2c
 8005c5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c5e:	2414      	movs	r4, #20
 8005c60:	193b      	adds	r3, r7, r4
 8005c62:	0018      	movs	r0, r3
 8005c64:	2314      	movs	r3, #20
 8005c66:	001a      	movs	r2, r3
 8005c68:	2100      	movs	r1, #0
 8005c6a:	f012 fc8b 	bl	8018584 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c72:	4b7b      	ldr	r3, [pc, #492]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005c74:	2104      	movs	r1, #4
 8005c76:	430a      	orrs	r2, r1
 8005c78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c7a:	4b79      	ldr	r3, [pc, #484]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	2204      	movs	r2, #4
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005c86:	4b76      	ldr	r3, [pc, #472]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8a:	4b75      	ldr	r3, [pc, #468]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005c8c:	2180      	movs	r1, #128	@ 0x80
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c92:	4b73      	ldr	r3, [pc, #460]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c96:	2280      	movs	r2, #128	@ 0x80
 8005c98:	4013      	ands	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c9e:	4b70      	ldr	r3, [pc, #448]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca2:	4b6f      	ldr	r3, [pc, #444]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005caa:	4b6d      	ldr	r3, [pc, #436]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cae:	2201      	movs	r2, #1
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cba:	4b69      	ldr	r3, [pc, #420]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005cc2:	4b67      	ldr	r3, [pc, #412]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	4013      	ands	r3, r2
 8005cca:	607b      	str	r3, [r7, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cce:	4b64      	ldr	r3, [pc, #400]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd2:	4b63      	ldr	r3, [pc, #396]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005cd4:	2108      	movs	r1, #8
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005cda:	4b61      	ldr	r3, [pc, #388]	@ (8005e60 <MX_GPIO_Init+0x208>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	2208      	movs	r2, #8
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e64 <MX_GPIO_Init+0x20c>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2101      	movs	r1, #1
 8005cec:	0018      	movs	r0, r3
 8005cee:	f005 feae 	bl	800ba4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8005e64 <MX_GPIO_Init+0x20c>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2102      	movs	r1, #2
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f005 fea8 	bl	800ba4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005cfe:	495a      	ldr	r1, [pc, #360]	@ (8005e68 <MX_GPIO_Init+0x210>)
 8005d00:	4b5a      	ldr	r3, [pc, #360]	@ (8005e6c <MX_GPIO_Init+0x214>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	0018      	movs	r0, r3
 8005d06:	f005 fea2 	bl	800ba4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005d0a:	2380      	movs	r3, #128	@ 0x80
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	4858      	ldr	r0, [pc, #352]	@ (8005e70 <MX_GPIO_Init+0x218>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	0019      	movs	r1, r3
 8005d14:	f005 fe9b 	bl	800ba4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8005d18:	2380      	movs	r3, #128	@ 0x80
 8005d1a:	015b      	lsls	r3, r3, #5
 8005d1c:	4854      	ldr	r0, [pc, #336]	@ (8005e70 <MX_GPIO_Init+0x218>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	0019      	movs	r1, r3
 8005d22:	f005 fe94 	bl	800ba4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8005d26:	193b      	adds	r3, r7, r4
 8005d28:	4a52      	ldr	r2, [pc, #328]	@ (8005e74 <MX_GPIO_Init+0x21c>)
 8005d2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d2c:	193b      	adds	r3, r7, r4
 8005d2e:	2203      	movs	r2, #3
 8005d30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d32:	193b      	adds	r3, r7, r4
 8005d34:	2200      	movs	r2, #0
 8005d36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d38:	193b      	adds	r3, r7, r4
 8005d3a:	4a4d      	ldr	r2, [pc, #308]	@ (8005e70 <MX_GPIO_Init+0x218>)
 8005d3c:	0019      	movs	r1, r3
 8005d3e:	0010      	movs	r0, r2
 8005d40:	f005 fc08 	bl	800b554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8005d44:	193b      	adds	r3, r7, r4
 8005d46:	2203      	movs	r2, #3
 8005d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d4a:	193b      	adds	r3, r7, r4
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d50:	193b      	adds	r3, r7, r4
 8005d52:	2200      	movs	r2, #0
 8005d54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d56:	193b      	adds	r3, r7, r4
 8005d58:	2200      	movs	r2, #0
 8005d5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005d5c:	193b      	adds	r3, r7, r4
 8005d5e:	4a41      	ldr	r2, [pc, #260]	@ (8005e64 <MX_GPIO_Init+0x20c>)
 8005d60:	0019      	movs	r1, r3
 8005d62:	0010      	movs	r0, r2
 8005d64:	f005 fbf6 	bl	800b554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005d68:	193b      	adds	r3, r7, r4
 8005d6a:	2270      	movs	r2, #112	@ 0x70
 8005d6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d6e:	193b      	adds	r3, r7, r4
 8005d70:	2203      	movs	r2, #3
 8005d72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d74:	193b      	adds	r3, r7, r4
 8005d76:	2200      	movs	r2, #0
 8005d78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d7a:	193a      	adds	r2, r7, r4
 8005d7c:	23a0      	movs	r3, #160	@ 0xa0
 8005d7e:	05db      	lsls	r3, r3, #23
 8005d80:	0011      	movs	r1, r2
 8005d82:	0018      	movs	r0, r3
 8005d84:	f005 fbe6 	bl	800b554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8005d88:	193b      	adds	r3, r7, r4
 8005d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e78 <MX_GPIO_Init+0x220>)
 8005d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d8e:	193b      	adds	r3, r7, r4
 8005d90:	2200      	movs	r2, #0
 8005d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d94:	193b      	adds	r3, r7, r4
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d9a:	193a      	adds	r2, r7, r4
 8005d9c:	23a0      	movs	r3, #160	@ 0xa0
 8005d9e:	05db      	lsls	r3, r3, #23
 8005da0:	0011      	movs	r1, r2
 8005da2:	0018      	movs	r0, r3
 8005da4:	f005 fbd6 	bl	800b554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005da8:	193b      	adds	r3, r7, r4
 8005daa:	4a2f      	ldr	r2, [pc, #188]	@ (8005e68 <MX_GPIO_Init+0x210>)
 8005dac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dae:	193b      	adds	r3, r7, r4
 8005db0:	2201      	movs	r2, #1
 8005db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db4:	193b      	adds	r3, r7, r4
 8005db6:	2200      	movs	r2, #0
 8005db8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dba:	193b      	adds	r3, r7, r4
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dc0:	193b      	adds	r3, r7, r4
 8005dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005e6c <MX_GPIO_Init+0x214>)
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	0010      	movs	r0, r2
 8005dc8:	f005 fbc4 	bl	800b554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005dcc:	193b      	adds	r3, r7, r4
 8005dce:	4a2b      	ldr	r2, [pc, #172]	@ (8005e7c <MX_GPIO_Init+0x224>)
 8005dd0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dd2:	193b      	adds	r3, r7, r4
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd8:	193b      	adds	r3, r7, r4
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dde:	193b      	adds	r3, r7, r4
 8005de0:	4a22      	ldr	r2, [pc, #136]	@ (8005e6c <MX_GPIO_Init+0x214>)
 8005de2:	0019      	movs	r1, r3
 8005de4:	0010      	movs	r0, r2
 8005de6:	f005 fbb5 	bl	800b554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005dea:	0021      	movs	r1, r4
 8005dec:	187b      	adds	r3, r7, r1
 8005dee:	2280      	movs	r2, #128	@ 0x80
 8005df0:	0092      	lsls	r2, r2, #2
 8005df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005df4:	000c      	movs	r4, r1
 8005df6:	193b      	adds	r3, r7, r4
 8005df8:	2200      	movs	r2, #0
 8005dfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfc:	193b      	adds	r3, r7, r4
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8005e02:	193b      	adds	r3, r7, r4
 8005e04:	4a1a      	ldr	r2, [pc, #104]	@ (8005e70 <MX_GPIO_Init+0x218>)
 8005e06:	0019      	movs	r1, r3
 8005e08:	0010      	movs	r0, r2
 8005e0a:	f005 fba3 	bl	800b554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005e0e:	0021      	movs	r1, r4
 8005e10:	187b      	adds	r3, r7, r1
 8005e12:	22c0      	movs	r2, #192	@ 0xc0
 8005e14:	0152      	lsls	r2, r2, #5
 8005e16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e18:	000c      	movs	r4, r1
 8005e1a:	193b      	adds	r3, r7, r4
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e20:	193b      	adds	r3, r7, r4
 8005e22:	2200      	movs	r2, #0
 8005e24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e26:	193b      	adds	r3, r7, r4
 8005e28:	2200      	movs	r2, #0
 8005e2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e2c:	193b      	adds	r3, r7, r4
 8005e2e:	4a10      	ldr	r2, [pc, #64]	@ (8005e70 <MX_GPIO_Init+0x218>)
 8005e30:	0019      	movs	r1, r3
 8005e32:	0010      	movs	r0, r2
 8005e34:	f005 fb8e 	bl	800b554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005e38:	0021      	movs	r1, r4
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e40:	187b      	adds	r3, r7, r1
 8005e42:	2200      	movs	r2, #0
 8005e44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e46:	187b      	adds	r3, r7, r1
 8005e48:	2201      	movs	r2, #1
 8005e4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e80 <MX_GPIO_Init+0x228>)
 8005e50:	0019      	movs	r1, r3
 8005e52:	0010      	movs	r0, r2
 8005e54:	f005 fb7e 	bl	800b554 <HAL_GPIO_Init>

}
 8005e58:	46c0      	nop			@ (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b00b      	add	sp, #44	@ 0x2c
 8005e5e:	bd90      	pop	{r4, r7, pc}
 8005e60:	40021000 	.word	0x40021000
 8005e64:	50001c00 	.word	0x50001c00
 8005e68:	00000301 	.word	0x00000301
 8005e6c:	50000400 	.word	0x50000400
 8005e70:	50000800 	.word	0x50000800
 8005e74:	0000200c 	.word	0x0000200c
 8005e78:	00008180 	.word	0x00008180
 8005e7c:	0000403e 	.word	0x0000403e
 8005e80:	50000c00 	.word	0x50000c00

08005e84 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2100      	movs	r1, #0
 8005e92:	0018      	movs	r0, r3
 8005e94:	f00b f9f6 	bl	8011284 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2108      	movs	r1, #8
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f00b f9f1 	bl	8011284 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	210c      	movs	r1, #12
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f00b f9ec 	bl	8011284 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8005eac:	2380      	movs	r3, #128	@ 0x80
 8005eae:	05db      	lsls	r3, r3, #23
 8005eb0:	22fa      	movs	r2, #250	@ 0xfa
 8005eb2:	0112      	lsls	r2, r2, #4
 8005eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8005eb6:	2380      	movs	r3, #128	@ 0x80
 8005eb8:	05db      	lsls	r3, r3, #23
 8005eba:	22fa      	movs	r2, #250	@ 0xfa
 8005ebc:	0112      	lsls	r2, r2, #4
 8005ebe:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005ec0:	2380      	movs	r3, #128	@ 0x80
 8005ec2:	05db      	lsls	r3, r3, #23
 8005ec4:	22fa      	movs	r2, #250	@ 0xfa
 8005ec6:	0112      	lsls	r2, r2, #4
 8005ec8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005eca:	2380      	movs	r3, #128	@ 0x80
 8005ecc:	05db      	lsls	r3, r3, #23
 8005ece:	22fa      	movs	r2, #250	@ 0xfa
 8005ed0:	0112      	lsls	r2, r2, #4
 8005ed2:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f00b f9d3 	bl	8011284 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2104      	movs	r1, #4
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f00b f9ce 	bl	8011284 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2108      	movs	r1, #8
 8005eec:	0018      	movs	r0, r3
 8005eee:	f00b f9c9 	bl	8011284 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <GPIO_InitPWMLEDs+0x98>)
 8005ef4:	22fa      	movs	r2, #250	@ 0xfa
 8005ef6:	0112      	lsls	r2, r2, #4
 8005ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005efa:	4b08      	ldr	r3, [pc, #32]	@ (8005f1c <GPIO_InitPWMLEDs+0x98>)
 8005efc:	22fa      	movs	r2, #250	@ 0xfa
 8005efe:	0112      	lsls	r2, r2, #4
 8005f00:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005f02:	4b06      	ldr	r3, [pc, #24]	@ (8005f1c <GPIO_InitPWMLEDs+0x98>)
 8005f04:	22fa      	movs	r2, #250	@ 0xfa
 8005f06:	0112      	lsls	r2, r2, #4
 8005f08:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005f0a:	4b04      	ldr	r3, [pc, #16]	@ (8005f1c <GPIO_InitPWMLEDs+0x98>)
 8005f0c:	22fa      	movs	r2, #250	@ 0xfa
 8005f0e:	0112      	lsls	r2, r2, #4
 8005f10:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005f12:	46c0      	nop			@ (mov r8, r8)
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b002      	add	sp, #8
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	46c0      	nop			@ (mov r8, r8)
 8005f1c:	40000400 	.word	0x40000400

08005f20 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f003 ffad 	bl	8009e90 <HIDS_Init>
}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b002      	add	sp, #8
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005f42:	f003 ffc7 	bl	8009ed4 <HIDS_StartMeasurement>
}
 8005f46:	46c0      	nop			@ (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f004 f895 	bl	800a08c <HIDS_GetMeasurementValues>
 8005f62:	0003      	movs	r3, r0
}
 8005f64:	0018      	movs	r0, r3
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b002      	add	sp, #8
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005f70:	f004 f830 	bl	8009fd4 <HIDS_DeviceConnected>
 8005f74:	0003      	movs	r3, r0
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005f82:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff4 <MX_I2C1_Init+0x78>)
 8005f84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005f86:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005f88:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <MX_I2C1_Init+0x7c>)
 8005f8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005f8c:	4b18      	ldr	r3, [pc, #96]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f92:	4b17      	ldr	r3, [pc, #92]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f98:	4b15      	ldr	r3, [pc, #84]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005f9e:	4b14      	ldr	r3, [pc, #80]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005fa4:	4b12      	ldr	r3, [pc, #72]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005faa:	4b11      	ldr	r3, [pc, #68]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f005 fd65 	bl	800ba88 <HAL_I2C_Init>
 8005fbe:	1e03      	subs	r3, r0, #0
 8005fc0:	d001      	beq.n	8005fc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005fc2:	f000 fb7d 	bl	80066c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005fc8:	2100      	movs	r1, #0
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f007 fcd4 	bl	800d978 <HAL_I2CEx_ConfigAnalogFilter>
 8005fd0:	1e03      	subs	r3, r0, #0
 8005fd2:	d001      	beq.n	8005fd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005fd4:	f000 fb74 	bl	80066c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <MX_I2C1_Init+0x74>)
 8005fda:	2100      	movs	r1, #0
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f007 fd17 	bl	800da10 <HAL_I2CEx_ConfigDigitalFilter>
 8005fe2:	1e03      	subs	r3, r0, #0
 8005fe4:	d001      	beq.n	8005fea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005fe6:	f000 fb6b 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005fea:	46c0      	nop			@ (mov r8, r8)
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000e74 	.word	0x20000e74
 8005ff4:	40005400 	.word	0x40005400
 8005ff8:	00503d58 	.word	0x00503d58

08005ffc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006000:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <MX_I2C2_Init+0x74>)
 8006002:	4a1c      	ldr	r2, [pc, #112]	@ (8006074 <MX_I2C2_Init+0x78>)
 8006004:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006006:	4b1a      	ldr	r3, [pc, #104]	@ (8006070 <MX_I2C2_Init+0x74>)
 8006008:	4a1b      	ldr	r2, [pc, #108]	@ (8006078 <MX_I2C2_Init+0x7c>)
 800600a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800600c:	4b18      	ldr	r3, [pc, #96]	@ (8006070 <MX_I2C2_Init+0x74>)
 800600e:	2200      	movs	r2, #0
 8006010:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006012:	4b17      	ldr	r3, [pc, #92]	@ (8006070 <MX_I2C2_Init+0x74>)
 8006014:	2201      	movs	r2, #1
 8006016:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006018:	4b15      	ldr	r3, [pc, #84]	@ (8006070 <MX_I2C2_Init+0x74>)
 800601a:	2200      	movs	r2, #0
 800601c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800601e:	4b14      	ldr	r3, [pc, #80]	@ (8006070 <MX_I2C2_Init+0x74>)
 8006020:	2200      	movs	r2, #0
 8006022:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006024:	4b12      	ldr	r3, [pc, #72]	@ (8006070 <MX_I2C2_Init+0x74>)
 8006026:	2200      	movs	r2, #0
 8006028:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800602a:	4b11      	ldr	r3, [pc, #68]	@ (8006070 <MX_I2C2_Init+0x74>)
 800602c:	2200      	movs	r2, #0
 800602e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006030:	4b0f      	ldr	r3, [pc, #60]	@ (8006070 <MX_I2C2_Init+0x74>)
 8006032:	2200      	movs	r2, #0
 8006034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006036:	4b0e      	ldr	r3, [pc, #56]	@ (8006070 <MX_I2C2_Init+0x74>)
 8006038:	0018      	movs	r0, r3
 800603a:	f005 fd25 	bl	800ba88 <HAL_I2C_Init>
 800603e:	1e03      	subs	r3, r0, #0
 8006040:	d001      	beq.n	8006046 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006042:	f000 fb3d 	bl	80066c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006046:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <MX_I2C2_Init+0x74>)
 8006048:	2100      	movs	r1, #0
 800604a:	0018      	movs	r0, r3
 800604c:	f007 fc94 	bl	800d978 <HAL_I2CEx_ConfigAnalogFilter>
 8006050:	1e03      	subs	r3, r0, #0
 8006052:	d001      	beq.n	8006058 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006054:	f000 fb34 	bl	80066c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <MX_I2C2_Init+0x74>)
 800605a:	2100      	movs	r1, #0
 800605c:	0018      	movs	r0, r3
 800605e:	f007 fcd7 	bl	800da10 <HAL_I2CEx_ConfigDigitalFilter>
 8006062:	1e03      	subs	r3, r0, #0
 8006064:	d001      	beq.n	800606a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006066:	f000 fb2b 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800606a:	46c0      	nop			@ (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000ec8 	.word	0x20000ec8
 8006074:	40005800 	.word	0x40005800
 8006078:	00503d58 	.word	0x00503d58

0800607c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800607c:	b590      	push	{r4, r7, lr}
 800607e:	b08b      	sub	sp, #44	@ 0x2c
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006084:	2414      	movs	r4, #20
 8006086:	193b      	adds	r3, r7, r4
 8006088:	0018      	movs	r0, r3
 800608a:	2314      	movs	r3, #20
 800608c:	001a      	movs	r2, r3
 800608e:	2100      	movs	r1, #0
 8006090:	f012 fa78 	bl	8018584 <memset>
  if(i2cHandle->Instance==I2C1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a5d      	ldr	r2, [pc, #372]	@ (8006210 <HAL_I2C_MspInit+0x194>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d000      	beq.n	80060a0 <HAL_I2C_MspInit+0x24>
 800609e:	e083      	b.n	80061a8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060a0:	4b5c      	ldr	r3, [pc, #368]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80060a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80060a6:	2102      	movs	r1, #2
 80060a8:	430a      	orrs	r2, r1
 80060aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060ac:	4b59      	ldr	r3, [pc, #356]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	2202      	movs	r2, #2
 80060b2:	4013      	ands	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060b8:	0021      	movs	r1, r4
 80060ba:	187b      	adds	r3, r7, r1
 80060bc:	22c0      	movs	r2, #192	@ 0xc0
 80060be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060c0:	187b      	adds	r3, r7, r1
 80060c2:	2212      	movs	r2, #18
 80060c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c6:	187b      	adds	r3, r7, r1
 80060c8:	2200      	movs	r2, #0
 80060ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	2203      	movs	r2, #3
 80060d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80060d2:	187b      	adds	r3, r7, r1
 80060d4:	2201      	movs	r2, #1
 80060d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060d8:	187b      	adds	r3, r7, r1
 80060da:	4a4f      	ldr	r2, [pc, #316]	@ (8006218 <HAL_I2C_MspInit+0x19c>)
 80060dc:	0019      	movs	r1, r3
 80060de:	0010      	movs	r0, r2
 80060e0:	f005 fa38 	bl	800b554 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80060e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80060e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80060ea:	2180      	movs	r1, #128	@ 0x80
 80060ec:	0389      	lsls	r1, r1, #14
 80060ee:	430a      	orrs	r2, r1
 80060f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80060f2:	4b4a      	ldr	r3, [pc, #296]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 80060f4:	4a4a      	ldr	r2, [pc, #296]	@ (8006220 <HAL_I2C_MspInit+0x1a4>)
 80060f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80060f8:	4b48      	ldr	r3, [pc, #288]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 80060fa:	2206      	movs	r2, #6
 80060fc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060fe:	4b47      	ldr	r3, [pc, #284]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 8006100:	2200      	movs	r2, #0
 8006102:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006104:	4b45      	ldr	r3, [pc, #276]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 8006106:	2200      	movs	r2, #0
 8006108:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800610a:	4b44      	ldr	r3, [pc, #272]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 800610c:	2280      	movs	r2, #128	@ 0x80
 800610e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006110:	4b42      	ldr	r3, [pc, #264]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 8006112:	2200      	movs	r2, #0
 8006114:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006116:	4b41      	ldr	r3, [pc, #260]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 8006118:	2200      	movs	r2, #0
 800611a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800611c:	4b3f      	ldr	r3, [pc, #252]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 800611e:	2200      	movs	r2, #0
 8006120:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006122:	4b3e      	ldr	r3, [pc, #248]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 8006124:	2200      	movs	r2, #0
 8006126:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006128:	4b3c      	ldr	r3, [pc, #240]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 800612a:	0018      	movs	r0, r3
 800612c:	f004 fd98 	bl	800ac60 <HAL_DMA_Init>
 8006130:	1e03      	subs	r3, r0, #0
 8006132:	d001      	beq.n	8006138 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006134:	f000 fac4 	bl	80066c0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a38      	ldr	r2, [pc, #224]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 800613c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800613e:	4b37      	ldr	r3, [pc, #220]	@ (800621c <HAL_I2C_MspInit+0x1a0>)
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006144:	4b37      	ldr	r3, [pc, #220]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 8006146:	4a38      	ldr	r2, [pc, #224]	@ (8006228 <HAL_I2C_MspInit+0x1ac>)
 8006148:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800614a:	4b36      	ldr	r3, [pc, #216]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 800614c:	2206      	movs	r2, #6
 800614e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006150:	4b34      	ldr	r3, [pc, #208]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 8006152:	2210      	movs	r2, #16
 8006154:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006156:	4b33      	ldr	r3, [pc, #204]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 8006158:	2200      	movs	r2, #0
 800615a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800615c:	4b31      	ldr	r3, [pc, #196]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 800615e:	2280      	movs	r2, #128	@ 0x80
 8006160:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006162:	4b30      	ldr	r3, [pc, #192]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 8006164:	2200      	movs	r2, #0
 8006166:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006168:	4b2e      	ldr	r3, [pc, #184]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 800616a:	2200      	movs	r2, #0
 800616c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800616e:	4b2d      	ldr	r3, [pc, #180]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 8006170:	2200      	movs	r2, #0
 8006172:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006174:	4b2b      	ldr	r3, [pc, #172]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 8006176:	2200      	movs	r2, #0
 8006178:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800617a:	4b2a      	ldr	r3, [pc, #168]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 800617c:	0018      	movs	r0, r3
 800617e:	f004 fd6f 	bl	800ac60 <HAL_DMA_Init>
 8006182:	1e03      	subs	r3, r0, #0
 8006184:	d001      	beq.n	800618a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006186:	f000 fa9b 	bl	80066c0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a25      	ldr	r2, [pc, #148]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 800618e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006190:	4b24      	ldr	r3, [pc, #144]	@ (8006224 <HAL_I2C_MspInit+0x1a8>)
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006196:	2200      	movs	r2, #0
 8006198:	2100      	movs	r1, #0
 800619a:	2017      	movs	r0, #23
 800619c:	f004 fd2e 	bl	800abfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80061a0:	2017      	movs	r0, #23
 80061a2:	f004 fd40 	bl	800ac26 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80061a6:	e02e      	b.n	8006206 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1f      	ldr	r2, [pc, #124]	@ (800622c <HAL_I2C_MspInit+0x1b0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d129      	bne.n	8006206 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061b2:	4b18      	ldr	r3, [pc, #96]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80061b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b6:	4b17      	ldr	r3, [pc, #92]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80061b8:	2102      	movs	r1, #2
 80061ba:	430a      	orrs	r2, r1
 80061bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80061be:	4b15      	ldr	r3, [pc, #84]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	2202      	movs	r2, #2
 80061c4:	4013      	ands	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80061ca:	2114      	movs	r1, #20
 80061cc:	187b      	adds	r3, r7, r1
 80061ce:	22c0      	movs	r2, #192	@ 0xc0
 80061d0:	0112      	lsls	r2, r2, #4
 80061d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80061d4:	187b      	adds	r3, r7, r1
 80061d6:	2212      	movs	r2, #18
 80061d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061da:	187b      	adds	r3, r7, r1
 80061dc:	2200      	movs	r2, #0
 80061de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061e0:	187b      	adds	r3, r7, r1
 80061e2:	2203      	movs	r2, #3
 80061e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80061e6:	187b      	adds	r3, r7, r1
 80061e8:	2206      	movs	r2, #6
 80061ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006218 <HAL_I2C_MspInit+0x19c>)
 80061f0:	0019      	movs	r1, r3
 80061f2:	0010      	movs	r0, r2
 80061f4:	f005 f9ae 	bl	800b554 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80061fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061fc:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_I2C_MspInit+0x198>)
 80061fe:	2180      	movs	r1, #128	@ 0x80
 8006200:	03c9      	lsls	r1, r1, #15
 8006202:	430a      	orrs	r2, r1
 8006204:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	46bd      	mov	sp, r7
 800620a:	b00b      	add	sp, #44	@ 0x2c
 800620c:	bd90      	pop	{r4, r7, pc}
 800620e:	46c0      	nop			@ (mov r8, r8)
 8006210:	40005400 	.word	0x40005400
 8006214:	40021000 	.word	0x40021000
 8006218:	50000400 	.word	0x50000400
 800621c:	20000f1c 	.word	0x20000f1c
 8006220:	40020030 	.word	0x40020030
 8006224:	20000f64 	.word	0x20000f64
 8006228:	4002001c 	.word	0x4002001c
 800622c:	40005800 	.word	0x40005800

08006230 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8006234:	4b10      	ldr	r3, [pc, #64]	@ (8006278 <MX_I2S2_Init+0x48>)
 8006236:	4a11      	ldr	r2, [pc, #68]	@ (800627c <MX_I2S2_Init+0x4c>)
 8006238:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800623a:	4b0f      	ldr	r3, [pc, #60]	@ (8006278 <MX_I2S2_Init+0x48>)
 800623c:	22c0      	movs	r2, #192	@ 0xc0
 800623e:	0092      	lsls	r2, r2, #2
 8006240:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8006242:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <MX_I2S2_Init+0x48>)
 8006244:	2210      	movs	r2, #16
 8006246:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8006248:	4b0b      	ldr	r3, [pc, #44]	@ (8006278 <MX_I2S2_Init+0x48>)
 800624a:	2205      	movs	r2, #5
 800624c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800624e:	4b0a      	ldr	r3, [pc, #40]	@ (8006278 <MX_I2S2_Init+0x48>)
 8006250:	2200      	movs	r2, #0
 8006252:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8006254:	4b08      	ldr	r3, [pc, #32]	@ (8006278 <MX_I2S2_Init+0x48>)
 8006256:	22fa      	movs	r2, #250	@ 0xfa
 8006258:	0152      	lsls	r2, r2, #5
 800625a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 800625c:	4b06      	ldr	r3, [pc, #24]	@ (8006278 <MX_I2S2_Init+0x48>)
 800625e:	2208      	movs	r2, #8
 8006260:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8006262:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <MX_I2S2_Init+0x48>)
 8006264:	0018      	movs	r0, r3
 8006266:	f007 fc1f 	bl	800daa8 <HAL_I2S_Init>
 800626a:	1e03      	subs	r3, r0, #0
 800626c:	d001      	beq.n	8006272 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800626e:	f000 fa27 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000fac 	.word	0x20000fac
 800627c:	40003800 	.word	0x40003800

08006280 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006280:	b590      	push	{r4, r7, lr}
 8006282:	b089      	sub	sp, #36	@ 0x24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006288:	240c      	movs	r4, #12
 800628a:	193b      	adds	r3, r7, r4
 800628c:	0018      	movs	r0, r3
 800628e:	2314      	movs	r3, #20
 8006290:	001a      	movs	r2, r3
 8006292:	2100      	movs	r1, #0
 8006294:	f012 f976 	bl	8018584 <memset>
  if(i2sHandle->Instance==SPI2)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2d      	ldr	r2, [pc, #180]	@ (8006354 <HAL_I2S_MspInit+0xd4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d154      	bne.n	800634c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80062a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006358 <HAL_I2S_MspInit+0xd8>)
 80062a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006358 <HAL_I2S_MspInit+0xd8>)
 80062a8:	2180      	movs	r1, #128	@ 0x80
 80062aa:	01c9      	lsls	r1, r1, #7
 80062ac:	430a      	orrs	r2, r1
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062b0:	4b29      	ldr	r3, [pc, #164]	@ (8006358 <HAL_I2S_MspInit+0xd8>)
 80062b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b4:	4b28      	ldr	r3, [pc, #160]	@ (8006358 <HAL_I2S_MspInit+0xd8>)
 80062b6:	2102      	movs	r1, #2
 80062b8:	430a      	orrs	r2, r1
 80062ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80062bc:	4b26      	ldr	r3, [pc, #152]	@ (8006358 <HAL_I2S_MspInit+0xd8>)
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	2202      	movs	r2, #2
 80062c2:	4013      	ands	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80062c8:	193b      	adds	r3, r7, r4
 80062ca:	22b0      	movs	r2, #176	@ 0xb0
 80062cc:	0212      	lsls	r2, r2, #8
 80062ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d0:	0021      	movs	r1, r4
 80062d2:	187b      	adds	r3, r7, r1
 80062d4:	2202      	movs	r2, #2
 80062d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d8:	187b      	adds	r3, r7, r1
 80062da:	2200      	movs	r2, #0
 80062dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062de:	187b      	adds	r3, r7, r1
 80062e0:	2200      	movs	r2, #0
 80062e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	2200      	movs	r2, #0
 80062e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062ea:	187b      	adds	r3, r7, r1
 80062ec:	4a1b      	ldr	r2, [pc, #108]	@ (800635c <HAL_I2S_MspInit+0xdc>)
 80062ee:	0019      	movs	r1, r3
 80062f0:	0010      	movs	r0, r2
 80062f2:	f005 f92f 	bl	800b554 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80062f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 80062f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006364 <HAL_I2S_MspInit+0xe4>)
 80062fa:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80062fc:	4b18      	ldr	r3, [pc, #96]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 80062fe:	2202      	movs	r2, #2
 8006300:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006302:	4b17      	ldr	r3, [pc, #92]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006308:	4b15      	ldr	r3, [pc, #84]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 800630a:	2200      	movs	r2, #0
 800630c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800630e:	4b14      	ldr	r3, [pc, #80]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 8006310:	2280      	movs	r2, #128	@ 0x80
 8006312:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006314:	4b12      	ldr	r3, [pc, #72]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 8006316:	2280      	movs	r2, #128	@ 0x80
 8006318:	0052      	lsls	r2, r2, #1
 800631a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800631c:	4b10      	ldr	r3, [pc, #64]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 800631e:	2280      	movs	r2, #128	@ 0x80
 8006320:	00d2      	lsls	r2, r2, #3
 8006322:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8006324:	4b0e      	ldr	r3, [pc, #56]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 8006326:	2220      	movs	r2, #32
 8006328:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800632a:	4b0d      	ldr	r3, [pc, #52]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 800632c:	2200      	movs	r2, #0
 800632e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006330:	4b0b      	ldr	r3, [pc, #44]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 8006332:	0018      	movs	r0, r3
 8006334:	f004 fc94 	bl	800ac60 <HAL_DMA_Init>
 8006338:	1e03      	subs	r3, r0, #0
 800633a:	d001      	beq.n	8006340 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800633c:	f000 f9c0 	bl	80066c0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a07      	ldr	r2, [pc, #28]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 8006344:	631a      	str	r2, [r3, #48]	@ 0x30
 8006346:	4b06      	ldr	r3, [pc, #24]	@ (8006360 <HAL_I2S_MspInit+0xe0>)
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800634c:	46c0      	nop			@ (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	b009      	add	sp, #36	@ 0x24
 8006352:	bd90      	pop	{r4, r7, pc}
 8006354:	40003800 	.word	0x40003800
 8006358:	40021000 	.word	0x40021000
 800635c:	50000400 	.word	0x50000400
 8006360:	20000fe8 	.word	0x20000fe8
 8006364:	40020044 	.word	0x40020044

08006368 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a0c      	ldr	r2, [pc, #48]	@ (80063a8 <HAL_I2S_MspDeInit+0x40>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d111      	bne.n	800639e <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800637a:	4b0c      	ldr	r3, [pc, #48]	@ (80063ac <HAL_I2S_MspDeInit+0x44>)
 800637c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800637e:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <HAL_I2S_MspDeInit+0x44>)
 8006380:	490b      	ldr	r1, [pc, #44]	@ (80063b0 <HAL_I2S_MspDeInit+0x48>)
 8006382:	400a      	ands	r2, r1
 8006384:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8006386:	23b0      	movs	r3, #176	@ 0xb0
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	4a0a      	ldr	r2, [pc, #40]	@ (80063b4 <HAL_I2S_MspDeInit+0x4c>)
 800638c:	0019      	movs	r1, r3
 800638e:	0010      	movs	r0, r2
 8006390:	f005 fa5e 	bl	800b850 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006398:	0018      	movs	r0, r3
 800639a:	f004 fcd9 	bl	800ad50 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	46bd      	mov	sp, r7
 80063a2:	b002      	add	sp, #8
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	46c0      	nop			@ (mov r8, r8)
 80063a8:	40003800 	.word	0x40003800
 80063ac:	40021000 	.word	0x40021000
 80063b0:	ffffbfff 	.word	0xffffbfff
 80063b4:	50000400 	.word	0x50000400

080063b8 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  testDone = true;
 80063bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006438 <SetTestDone+0x80>)
 80063be:	2201      	movs	r2, #1
 80063c0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80063c2:	23fa      	movs	r3, #250	@ 0xfa
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	0018      	movs	r0, r3
 80063c8:	f003 ffac 	bl	800a324 <HAL_Delay>
  SetDBLED(false, false, true);
 80063cc:	2201      	movs	r2, #1
 80063ce:	2100      	movs	r1, #0
 80063d0:	2000      	movs	r0, #0
 80063d2:	f002 fd15 	bl	8008e00 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 80063d6:	4a19      	ldr	r2, [pc, #100]	@ (800643c <SetTestDone+0x84>)
 80063d8:	23fa      	movs	r3, #250	@ 0xfa
 80063da:	0119      	lsls	r1, r3, #4
 80063dc:	23fa      	movs	r3, #250	@ 0xfa
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	0018      	movs	r0, r3
 80063e2:	f002 fcd9 	bl	8008d98 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 80063e6:	4a15      	ldr	r2, [pc, #84]	@ (800643c <SetTestDone+0x84>)
 80063e8:	23fa      	movs	r3, #250	@ 0xfa
 80063ea:	0119      	lsls	r1, r3, #4
 80063ec:	23fa      	movs	r3, #250	@ 0xfa
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	0018      	movs	r0, r3
 80063f2:	f002 fd4f 	bl	8008e94 <SetVocLED>
  HAL_Delay(1000);
 80063f6:	23fa      	movs	r3, #250	@ 0xfa
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	0018      	movs	r0, r3
 80063fc:	f003 ff92 	bl	800a324 <HAL_Delay>
  SetDBLED(false, false, false);
 8006400:	2200      	movs	r2, #0
 8006402:	2100      	movs	r1, #0
 8006404:	2000      	movs	r0, #0
 8006406:	f002 fcfb 	bl	8008e00 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 800640a:	23fa      	movs	r3, #250	@ 0xfa
 800640c:	011a      	lsls	r2, r3, #4
 800640e:	23fa      	movs	r3, #250	@ 0xfa
 8006410:	0119      	lsls	r1, r3, #4
 8006412:	23fa      	movs	r3, #250	@ 0xfa
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	0018      	movs	r0, r3
 8006418:	f002 fcbe 	bl	8008d98 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 800641c:	23fa      	movs	r3, #250	@ 0xfa
 800641e:	011a      	lsls	r2, r3, #4
 8006420:	23fa      	movs	r3, #250	@ 0xfa
 8006422:	0119      	lsls	r1, r3, #4
 8006424:	23fa      	movs	r3, #250	@ 0xfa
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	0018      	movs	r0, r3
 800642a:	f002 fd33 	bl	8008e94 <SetVocLED>
  InitDone();
 800642e:	f002 fc5d 	bl	8008cec <InitDone>
}
 8006432:	46c0      	nop			@ (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20001030 	.word	0x20001030
 800643c:	00000bb8 	.word	0x00000bb8

08006440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006444:	f003 fefe 	bl	800a244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006448:	f000 f8b4 	bl	80065b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800644c:	f7ff fc04 	bl	8005c58 <MX_GPIO_Init>
  MX_DMA_Init();
 8006450:	f7ff fb58 	bl	8005b04 <MX_DMA_Init>
  MX_I2C1_Init();
 8006454:	f7ff fd92 	bl	8005f7c <MX_I2C1_Init>
  MX_I2S2_Init();
 8006458:	f7ff feea 	bl	8006230 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800645c:	f003 f9e8 	bl	8009830 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8006460:	f7ff fdcc 	bl	8005ffc <MX_I2C2_Init>
  MX_TIM2_Init();
 8006464:	f003 f830 	bl	80094c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006468:	f003 f8a2 	bl	80095b0 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800646c:	f003 fa14 	bl	8009898 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8006470:	f7ff fa96 	bl	80059a0 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8006474:	f010 fd0c 	bl	8016e90 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8006478:	f001 f842 	bl	8007500 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800647c:	f003 f9a2 	bl	80097c4 <MX_LPUART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8006480:	4a3c      	ldr	r2, [pc, #240]	@ (8006574 <main+0x134>)
 8006482:	4b3d      	ldr	r3, [pc, #244]	@ (8006578 <main+0x138>)
 8006484:	0011      	movs	r1, r2
 8006486:	0018      	movs	r0, r3
 8006488:	f7ff fcfc 	bl	8005e84 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 800648c:	f7ff fa26 	bl	80058dc <UserButton_Pressed>
 8006490:	1e03      	subs	r3, r0, #0
 8006492:	d004      	beq.n	800649e <main+0x5e>
    EnableESPProg();
 8006494:	f010 fdcc 	bl	8017030 <EnableESPProg>
    ESP_Programming = true;
 8006498:	4b38      	ldr	r3, [pc, #224]	@ (800657c <main+0x13c>)
 800649a:	2201      	movs	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 800649e:	2003      	movs	r0, #3
 80064a0:	f003 fc12 	bl	8009cc8 <SetVerboseLevel>
  BinaryReleaseInfo();
 80064a4:	f003 fc28 	bl	8009cf8 <BinaryReleaseInfo>
  InitClock(&hrtc);
 80064a8:	4b35      	ldr	r3, [pc, #212]	@ (8006580 <main+0x140>)
 80064aa:	0018      	movs	r0, r3
 80064ac:	f7ff fa5e 	bl	800596c <InitClock>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80064b0:	4b34      	ldr	r3, [pc, #208]	@ (8006584 <main+0x144>)
 80064b2:	4a35      	ldr	r2, [pc, #212]	@ (8006588 <main+0x148>)
 80064b4:	4935      	ldr	r1, [pc, #212]	@ (800658c <main+0x14c>)
 80064b6:	4836      	ldr	r0, [pc, #216]	@ (8006590 <main+0x150>)
 80064b8:	f7ff fb4a 	bl	8005b50 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 80064bc:	4b35      	ldr	r3, [pc, #212]	@ (8006594 <main+0x154>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d019      	beq.n	80064f8 <main+0xb8>
 80064c4:	4b2d      	ldr	r3, [pc, #180]	@ (800657c <main+0x13c>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	4053      	eors	r3, r2
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d012      	beq.n	80064f8 <main+0xb8>
 80064d2:	4b31      	ldr	r3, [pc, #196]	@ (8006598 <main+0x158>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2201      	movs	r2, #1
 80064d8:	4053      	eors	r3, r2
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <main+0xb8>
      MeasurementBusy = UpkeepGadget();
 80064e0:	f7ff fb64 	bl	8005bac <UpkeepGadget>
 80064e4:	0003      	movs	r3, r0
 80064e6:	001a      	movs	r2, r3
 80064e8:	4b2c      	ldr	r3, [pc, #176]	@ (800659c <main+0x15c>)
 80064ea:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 80064ec:	f7fe fbd4 	bl	8004c98 <ESP_Upkeep>
 80064f0:	0003      	movs	r3, r0
 80064f2:	001a      	movs	r2, r3
 80064f4:	4b2a      	ldr	r3, [pc, #168]	@ (80065a0 <main+0x160>)
 80064f6:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 80064f8:	4b26      	ldr	r3, [pc, #152]	@ (8006594 <main+0x154>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2201      	movs	r2, #1
 80064fe:	4053      	eors	r3, r2
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00f      	beq.n	8006526 <main+0xe6>
 8006506:	4b1d      	ldr	r3, [pc, #116]	@ (800657c <main+0x13c>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2201      	movs	r2, #1
 800650c:	4053      	eors	r3, r2
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d008      	beq.n	8006526 <main+0xe6>
 8006514:	4b20      	ldr	r3, [pc, #128]	@ (8006598 <main+0x158>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2201      	movs	r2, #1
 800651a:	4053      	eors	r3, r2
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <main+0xe6>
      Gadget_Test();
 8006522:	f7ff fb3b 	bl	8005b9c <Gadget_Test>
    }
    Status_Upkeep();
 8006526:	f002 fe85 	bl	8009234 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 800652a:	4b1e      	ldr	r3, [pc, #120]	@ (80065a4 <main+0x164>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	0018      	movs	r0, r3
 8006530:	f003 fb12 	bl	8009b58 <TimestampIsReached>
 8006534:	1e03      	subs	r3, r0, #0
 8006536:	d00c      	beq.n	8006552 <main+0x112>
      charge = Battery_Upkeep();
 8006538:	f002 fe83 	bl	8009242 <Battery_Upkeep>
 800653c:	0003      	movs	r3, r0
 800653e:	001a      	movs	r2, r3
 8006540:	4b19      	ldr	r3, [pc, #100]	@ (80065a8 <main+0x168>)
 8006542:	701a      	strb	r2, [r3, #0]
      batteryReadTimer = HAL_GetTick + 60000;
 8006544:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <main+0x16c>)
 8006546:	4a1a      	ldr	r2, [pc, #104]	@ (80065b0 <main+0x170>)
 8006548:	4694      	mov	ip, r2
 800654a:	4463      	add	r3, ip
 800654c:	001a      	movs	r2, r3
 800654e:	4b15      	ldr	r3, [pc, #84]	@ (80065a4 <main+0x164>)
 8006550:	601a      	str	r2, [r3, #0]
      //GoToSleep(2);
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 8006552:	4b15      	ldr	r3, [pc, #84]	@ (80065a8 <main+0x168>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d107      	bne.n	800656a <main+0x12a>
 800655a:	4b11      	ldr	r3, [pc, #68]	@ (80065a0 <main+0x160>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b09      	cmp	r3, #9
 8006560:	d103      	bne.n	800656a <main+0x12a>
      batteryEmpty = true;
 8006562:	4b0d      	ldr	r3, [pc, #52]	@ (8006598 <main+0x158>)
 8006564:	2201      	movs	r2, #1
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	e002      	b.n	8006570 <main+0x130>
    }
    else{
      batteryEmpty = false;
 800656a:	4b0b      	ldr	r3, [pc, #44]	@ (8006598 <main+0x158>)
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 8006570:	e7a4      	b.n	80064bc <main+0x7c>
 8006572:	46c0      	nop			@ (mov r8, r8)
 8006574:	20002a04 	.word	0x20002a04
 8006578:	200029c4 	.word	0x200029c4
 800657c:	20001031 	.word	0x20001031
 8006580:	200028d0 	.word	0x200028d0
 8006584:	20000e14 	.word	0x20000e14
 8006588:	20002bb4 	.word	0x20002bb4
 800658c:	20000fac 	.word	0x20000fac
 8006590:	20000e74 	.word	0x20000e74
 8006594:	20001030 	.word	0x20001030
 8006598:	20001032 	.word	0x20001032
 800659c:	20001033 	.word	0x20001033
 80065a0:	20001039 	.word	0x20001039
 80065a4:	20001034 	.word	0x20001034
 80065a8:	20001038 	.word	0x20001038
 80065ac:	0800a311 	.word	0x0800a311
 80065b0:	0000ea60 	.word	0x0000ea60

080065b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b09d      	sub	sp, #116	@ 0x74
 80065b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065ba:	2438      	movs	r4, #56	@ 0x38
 80065bc:	193b      	adds	r3, r7, r4
 80065be:	0018      	movs	r0, r3
 80065c0:	2338      	movs	r3, #56	@ 0x38
 80065c2:	001a      	movs	r2, r3
 80065c4:	2100      	movs	r1, #0
 80065c6:	f011 ffdd 	bl	8018584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065ca:	2324      	movs	r3, #36	@ 0x24
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	0018      	movs	r0, r3
 80065d0:	2314      	movs	r3, #20
 80065d2:	001a      	movs	r2, r3
 80065d4:	2100      	movs	r1, #0
 80065d6:	f011 ffd5 	bl	8018584 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065da:	003b      	movs	r3, r7
 80065dc:	0018      	movs	r0, r3
 80065de:	2324      	movs	r3, #36	@ 0x24
 80065e0:	001a      	movs	r2, r3
 80065e2:	2100      	movs	r1, #0
 80065e4:	f011 ffce 	bl	8018584 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80065e8:	4b32      	ldr	r3, [pc, #200]	@ (80066b4 <SystemClock_Config+0x100>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a32      	ldr	r2, [pc, #200]	@ (80066b8 <SystemClock_Config+0x104>)
 80065ee:	401a      	ands	r2, r3
 80065f0:	4b30      	ldr	r3, [pc, #192]	@ (80066b4 <SystemClock_Config+0x100>)
 80065f2:	2180      	movs	r1, #128	@ 0x80
 80065f4:	0109      	lsls	r1, r1, #4
 80065f6:	430a      	orrs	r2, r1
 80065f8:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80065fa:	f009 fbf5 	bl	800fde8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80065fe:	4b2f      	ldr	r3, [pc, #188]	@ (80066bc <SystemClock_Config+0x108>)
 8006600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006602:	4b2e      	ldr	r3, [pc, #184]	@ (80066bc <SystemClock_Config+0x108>)
 8006604:	492c      	ldr	r1, [pc, #176]	@ (80066b8 <SystemClock_Config+0x104>)
 8006606:	400a      	ands	r2, r1
 8006608:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800660a:	193b      	adds	r3, r7, r4
 800660c:	2226      	movs	r2, #38	@ 0x26
 800660e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006610:	193b      	adds	r3, r7, r4
 8006612:	2280      	movs	r2, #128	@ 0x80
 8006614:	0052      	lsls	r2, r2, #1
 8006616:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006618:	0021      	movs	r1, r4
 800661a:	187b      	adds	r3, r7, r1
 800661c:	2201      	movs	r2, #1
 800661e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006620:	187b      	adds	r3, r7, r1
 8006622:	2210      	movs	r2, #16
 8006624:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006626:	187b      	adds	r3, r7, r1
 8006628:	2201      	movs	r2, #1
 800662a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800662c:	187b      	adds	r3, r7, r1
 800662e:	2200      	movs	r2, #0
 8006630:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006632:	187b      	adds	r3, r7, r1
 8006634:	0018      	movs	r0, r3
 8006636:	f009 fbe5 	bl	800fe04 <HAL_RCC_OscConfig>
 800663a:	1e03      	subs	r3, r0, #0
 800663c:	d001      	beq.n	8006642 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800663e:	f000 f83f 	bl	80066c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006642:	2124      	movs	r1, #36	@ 0x24
 8006644:	187b      	adds	r3, r7, r1
 8006646:	220f      	movs	r2, #15
 8006648:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800664a:	187b      	adds	r3, r7, r1
 800664c:	2201      	movs	r2, #1
 800664e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006650:	187b      	adds	r3, r7, r1
 8006652:	2200      	movs	r2, #0
 8006654:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006656:	187b      	adds	r3, r7, r1
 8006658:	2200      	movs	r2, #0
 800665a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800665c:	187b      	adds	r3, r7, r1
 800665e:	2200      	movs	r2, #0
 8006660:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006662:	187b      	adds	r3, r7, r1
 8006664:	2100      	movs	r1, #0
 8006666:	0018      	movs	r0, r3
 8006668:	f009 ffa0 	bl	80105ac <HAL_RCC_ClockConfig>
 800666c:	1e03      	subs	r3, r0, #0
 800666e:	d001      	beq.n	8006674 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006670:	f000 f826 	bl	80066c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8006674:	003b      	movs	r3, r7
 8006676:	226d      	movs	r2, #109	@ 0x6d
 8006678:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800667a:	003b      	movs	r3, r7
 800667c:	2200      	movs	r2, #0
 800667e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006680:	003b      	movs	r3, r7
 8006682:	2200      	movs	r2, #0
 8006684:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006686:	003b      	movs	r3, r7
 8006688:	2200      	movs	r2, #0
 800668a:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800668c:	003b      	movs	r3, r7
 800668e:	2280      	movs	r2, #128	@ 0x80
 8006690:	0252      	lsls	r2, r2, #9
 8006692:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006694:	003b      	movs	r3, r7
 8006696:	2280      	movs	r2, #128	@ 0x80
 8006698:	04d2      	lsls	r2, r2, #19
 800669a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800669c:	003b      	movs	r3, r7
 800669e:	0018      	movs	r0, r3
 80066a0:	f00a f9a8 	bl	80109f4 <HAL_RCCEx_PeriphCLKConfig>
 80066a4:	1e03      	subs	r3, r0, #0
 80066a6:	d001      	beq.n	80066ac <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80066a8:	f000 f80a 	bl	80066c0 <Error_Handler>
  }
}
 80066ac:	46c0      	nop			@ (mov r8, r8)
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b01d      	add	sp, #116	@ 0x74
 80066b2:	bd90      	pop	{r4, r7, pc}
 80066b4:	40007000 	.word	0x40007000
 80066b8:	ffffe7ff 	.word	0xffffe7ff
 80066bc:	40021000 	.word	0x40021000

080066c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80066c4:	b672      	cpsid	i
}
 80066c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80066c8:	46c0      	nop			@ (mov r8, r8)
 80066ca:	e7fd      	b.n	80066c8 <Error_Handler+0x8>

080066cc <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80066d0:	f7ff fc35 	bl	8005f3e <HT_StartMeasurement>
}
 80066d4:	46c0      	nop			@ (mov r8, r8)
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 80066e0:	4a04      	ldr	r2, [pc, #16]	@ (80066f4 <HT_IsMeasurementDoneWrapper+0x18>)
 80066e2:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <HT_IsMeasurementDoneWrapper+0x1c>)
 80066e4:	0011      	movs	r1, r2
 80066e6:	0018      	movs	r0, r3
 80066e8:	f7ff fc30 	bl	8005f4c <HT_GetMeasurementValues>
 80066ec:	0003      	movs	r3, r0
}
 80066ee:	0018      	movs	r0, r3
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20001040 	.word	0x20001040
 80066f8:	2000103c 	.word	0x2000103c

080066fc <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8006700:	f7ff fa8d 	bl	8005c1e <Gas_StartMeasurement>
}
 8006704:	46c0      	nop			@ (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8006710:	4b03      	ldr	r3, [pc, #12]	@ (8006720 <VOC_IsMeasurementDoneWrapper+0x14>)
 8006712:	0018      	movs	r0, r3
 8006714:	f7ff fa8a 	bl	8005c2c <Gas_GetMeasurementValues>
 8006718:	0003      	movs	r3, r0
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20001044 	.word	0x20001044

08006724 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
}
 8006728:	46c0      	nop			@ (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800672e:	b580      	push	{r7, lr}
 8006730:	af00      	add	r7, sp, #0
  return true;
 8006732:	2301      	movs	r3, #1
}
 8006734:	0018      	movs	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 800673a:	b580      	push	{r7, lr}
 800673c:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 800673e:	23fa      	movs	r3, #250	@ 0xfa
 8006740:	015b      	lsls	r3, r3, #5
 8006742:	2180      	movs	r1, #128	@ 0x80
 8006744:	0018      	movs	r0, r3
 8006746:	f000 fba3 	bl	8006e90 <MIC_Start>
}
 800674a:	46c0      	nop			@ (mov r8, r8)
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8006754:	f000 fdfe 	bl	8007354 <MIC_MeasurementDone>
 8006758:	0003      	movs	r3, r0
}
 800675a:	0018      	movs	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <Meas_TestStart>:
void Meas_TestStart(){
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8006764:	f7ff ffe9 	bl	800673a <MIC_StartMeasurementWrapper>
}
 8006768:	46c0      	nop			@ (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 800676e:	b580      	push	{r7, lr}
 8006770:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8006772:	f000 fe0f 	bl	8007394 <MIC_TestMeasurementDone>
 8006776:	0003      	movs	r3, r0
}
 8006778:	0018      	movs	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <testInit>:
void testInit(){
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8006784:	4b07      	ldr	r3, [pc, #28]	@ (80067a4 <testInit+0x24>)
 8006786:	2200      	movs	r2, #0
 8006788:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 800678a:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <testInit+0x24>)
 800678c:	2200      	movs	r2, #0
 800678e:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8006790:	4b04      	ldr	r3, [pc, #16]	@ (80067a4 <testInit+0x24>)
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8006796:	4b03      	ldr	r3, [pc, #12]	@ (80067a4 <testInit+0x24>)
 8006798:	2200      	movs	r2, #0
 800679a:	705a      	strb	r2, [r3, #1]
}
 800679c:	46c0      	nop			@ (mov r8, r8)
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	46c0      	nop			@ (mov r8, r8)
 80067a4:	20001080 	.word	0x20001080

080067a8 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 80067a8:	b5b0      	push	{r4, r5, r7, lr}
 80067aa:	b092      	sub	sp, #72	@ 0x48
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 80067b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006974 <Meas_Init+0x1cc>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
  testInit();
 80067ba:	f7ff ffe1 	bl	8006780 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80067be:	4b6e      	ldr	r3, [pc, #440]	@ (8006978 <Meas_Init+0x1d0>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d103      	bne.n	80067ce <Meas_Init+0x26>
 80067c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006978 <Meas_Init+0x1d0>)
 80067c8:	785b      	ldrb	r3, [r3, #1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d068      	beq.n	80068a0 <Meas_Init+0xf8>
    I2CSensors_Init(sensorI2C);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7fe fd19 	bl	8005208 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80067d6:	f7ff fbc9 	bl	8005f6c <HT_DeviceConnected>
 80067da:	0003      	movs	r3, r0
 80067dc:	001a      	movs	r2, r3
 80067de:	2301      	movs	r3, #1
 80067e0:	4053      	eors	r3, r2
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00c      	beq.n	8006802 <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 80067e8:	4a64      	ldr	r2, [pc, #400]	@ (800697c <Meas_Init+0x1d4>)
 80067ea:	4b65      	ldr	r3, [pc, #404]	@ (8006980 <Meas_Init+0x1d8>)
 80067ec:	0019      	movs	r1, r3
 80067ee:	2001      	movs	r0, #1
 80067f0:	f003 fa08 	bl	8009c04 <CreateLine>
       MeasTest.HT_Tested = false;
 80067f4:	4b63      	ldr	r3, [pc, #396]	@ (8006984 <Meas_Init+0x1dc>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 80067fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006978 <Meas_Init+0x1d0>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e008      	b.n	8006814 <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8006802:	4b60      	ldr	r3, [pc, #384]	@ (8006984 <Meas_Init+0x1dc>)
 8006804:	2201      	movs	r2, #1
 8006806:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8006808:	4a5f      	ldr	r2, [pc, #380]	@ (8006988 <Meas_Init+0x1e0>)
 800680a:	4b60      	ldr	r3, [pc, #384]	@ (800698c <Meas_Init+0x1e4>)
 800680c:	0019      	movs	r1, r3
 800680e:	2003      	movs	r0, #3
 8006810:	f003 f9f8 	bl	8009c04 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8006814:	f7ff fa17 	bl	8005c46 <Gas_DeviceConnected>
 8006818:	0003      	movs	r3, r0
 800681a:	001a      	movs	r2, r3
 800681c:	2301      	movs	r3, #1
 800681e:	4053      	eors	r3, r2
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 8006826:	4b57      	ldr	r3, [pc, #348]	@ (8006984 <Meas_Init+0x1dc>)
 8006828:	2200      	movs	r2, #0
 800682a:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 800682c:	4a58      	ldr	r2, [pc, #352]	@ (8006990 <Meas_Init+0x1e8>)
 800682e:	4b54      	ldr	r3, [pc, #336]	@ (8006980 <Meas_Init+0x1d8>)
 8006830:	0019      	movs	r1, r3
 8006832:	2001      	movs	r0, #1
 8006834:	f003 f9e6 	bl	8009c04 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8006838:	4b4f      	ldr	r3, [pc, #316]	@ (8006978 <Meas_Init+0x1d0>)
 800683a:	2200      	movs	r2, #0
 800683c:	705a      	strb	r2, [r3, #1]
 800683e:	e008      	b.n	8006852 <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 8006840:	4b50      	ldr	r3, [pc, #320]	@ (8006984 <Meas_Init+0x1dc>)
 8006842:	2201      	movs	r2, #1
 8006844:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8006846:	4a53      	ldr	r2, [pc, #332]	@ (8006994 <Meas_Init+0x1ec>)
 8006848:	4b50      	ldr	r3, [pc, #320]	@ (800698c <Meas_Init+0x1e4>)
 800684a:	0019      	movs	r1, r3
 800684c:	2003      	movs	r0, #3
 800684e:	f003 f9d9 	bl	8009c04 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8006852:	4b4c      	ldr	r3, [pc, #304]	@ (8006984 <Meas_Init+0x1dc>)
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <Meas_Init+0xc6>
 800685a:	4b4a      	ldr	r3, [pc, #296]	@ (8006984 <Meas_Init+0x1dc>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <Meas_Init+0xc6>
      SetDBLED(false, true, false);
 8006862:	2200      	movs	r2, #0
 8006864:	2101      	movs	r1, #1
 8006866:	2000      	movs	r0, #0
 8006868:	f002 faca 	bl	8008e00 <SetDBLED>
 800686c:	e018      	b.n	80068a0 <Meas_Init+0xf8>
    }
    else{
      SetDBLED(true, false, false);
 800686e:	2200      	movs	r2, #0
 8006870:	2100      	movs	r1, #0
 8006872:	2001      	movs	r0, #1
 8006874:	f002 fac4 	bl	8008e00 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006878:	4b47      	ldr	r3, [pc, #284]	@ (8006998 <Meas_Init+0x1f0>)
 800687a:	2200      	movs	r2, #0
 800687c:	2101      	movs	r1, #1
 800687e:	0018      	movs	r0, r3
 8006880:	f005 f8e5 	bl	800ba4e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006884:	2380      	movs	r3, #128	@ 0x80
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	4843      	ldr	r0, [pc, #268]	@ (8006998 <Meas_Init+0x1f0>)
 800688a:	2201      	movs	r2, #1
 800688c:	0019      	movs	r1, r3
 800688e:	f005 f8de 	bl	800ba4e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006892:	2380      	movs	r3, #128	@ 0x80
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4840      	ldr	r0, [pc, #256]	@ (8006998 <Meas_Init+0x1f0>)
 8006898:	2201      	movs	r2, #1
 800689a:	0019      	movs	r1, r3
 800689c:	f005 f8d7 	bl	800ba4e <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80068a0:	4b35      	ldr	r3, [pc, #212]	@ (8006978 <Meas_Init+0x1d0>)
 80068a2:	78db      	ldrb	r3, [r3, #3]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <Meas_Init+0x10c>
    MIC_Init(micI2s);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	0018      	movs	r0, r3
 80068ac:	f000 fa8a 	bl	8006dc4 <MIC_Init>
    Meas_TestStart();
 80068b0:	f7ff ff56 	bl	8006760 <Meas_TestStart>
  }
  uint8_t offset = 0;
 80068b4:	2547      	movs	r5, #71	@ 0x47
 80068b6:	197b      	adds	r3, r7, r5
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80068bc:	197b      	adds	r3, r7, r5
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	197a      	adds	r2, r7, r5
 80068c2:	1c59      	adds	r1, r3, #1
 80068c4:	7011      	strb	r1, [r2, #0]
 80068c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006978 <Meas_Init+0x1d0>)
 80068c8:	7814      	ldrb	r4, [r2, #0]
 80068ca:	4a34      	ldr	r2, [pc, #208]	@ (800699c <Meas_Init+0x1f4>)
 80068cc:	0119      	lsls	r1, r3, #4
 80068ce:	4834      	ldr	r0, [pc, #208]	@ (80069a0 <Meas_Init+0x1f8>)
 80068d0:	5088      	str	r0, [r1, r2]
 80068d2:	4932      	ldr	r1, [pc, #200]	@ (800699c <Meas_Init+0x1f4>)
 80068d4:	011a      	lsls	r2, r3, #4
 80068d6:	188a      	adds	r2, r1, r2
 80068d8:	3204      	adds	r2, #4
 80068da:	4932      	ldr	r1, [pc, #200]	@ (80069a4 <Meas_Init+0x1fc>)
 80068dc:	6011      	str	r1, [r2, #0]
 80068de:	492f      	ldr	r1, [pc, #188]	@ (800699c <Meas_Init+0x1f4>)
 80068e0:	011a      	lsls	r2, r3, #4
 80068e2:	188a      	adds	r2, r1, r2
 80068e4:	3208      	adds	r2, #8
 80068e6:	4930      	ldr	r1, [pc, #192]	@ (80069a8 <Meas_Init+0x200>)
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	4a2c      	ldr	r2, [pc, #176]	@ (800699c <Meas_Init+0x1f4>)
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	18d3      	adds	r3, r2, r3
 80068f0:	330c      	adds	r3, #12
 80068f2:	1c22      	adds	r2, r4, #0
 80068f4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80068f6:	197b      	adds	r3, r7, r5
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	197a      	adds	r2, r7, r5
 80068fc:	1c59      	adds	r1, r3, #1
 80068fe:	7011      	strb	r1, [r2, #0]
 8006900:	4a1d      	ldr	r2, [pc, #116]	@ (8006978 <Meas_Init+0x1d0>)
 8006902:	7854      	ldrb	r4, [r2, #1]
 8006904:	4a25      	ldr	r2, [pc, #148]	@ (800699c <Meas_Init+0x1f4>)
 8006906:	0119      	lsls	r1, r3, #4
 8006908:	4828      	ldr	r0, [pc, #160]	@ (80069ac <Meas_Init+0x204>)
 800690a:	5088      	str	r0, [r1, r2]
 800690c:	4923      	ldr	r1, [pc, #140]	@ (800699c <Meas_Init+0x1f4>)
 800690e:	011a      	lsls	r2, r3, #4
 8006910:	188a      	adds	r2, r1, r2
 8006912:	3204      	adds	r2, #4
 8006914:	4926      	ldr	r1, [pc, #152]	@ (80069b0 <Meas_Init+0x208>)
 8006916:	6011      	str	r1, [r2, #0]
 8006918:	4920      	ldr	r1, [pc, #128]	@ (800699c <Meas_Init+0x1f4>)
 800691a:	011a      	lsls	r2, r3, #4
 800691c:	188a      	adds	r2, r1, r2
 800691e:	3208      	adds	r2, #8
 8006920:	4924      	ldr	r1, [pc, #144]	@ (80069b4 <Meas_Init+0x20c>)
 8006922:	6011      	str	r1, [r2, #0]
 8006924:	4a1d      	ldr	r2, [pc, #116]	@ (800699c <Meas_Init+0x1f4>)
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	18d3      	adds	r3, r2, r3
 800692a:	330c      	adds	r3, #12
 800692c:	1c22      	adds	r2, r4, #0
 800692e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8006930:	197b      	adds	r3, r7, r5
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	197a      	adds	r2, r7, r5
 8006936:	1c59      	adds	r1, r3, #1
 8006938:	7011      	strb	r1, [r2, #0]
 800693a:	4a0f      	ldr	r2, [pc, #60]	@ (8006978 <Meas_Init+0x1d0>)
 800693c:	7894      	ldrb	r4, [r2, #2]
 800693e:	4a17      	ldr	r2, [pc, #92]	@ (800699c <Meas_Init+0x1f4>)
 8006940:	0119      	lsls	r1, r3, #4
 8006942:	481d      	ldr	r0, [pc, #116]	@ (80069b8 <Meas_Init+0x210>)
 8006944:	5088      	str	r0, [r1, r2]
 8006946:	4915      	ldr	r1, [pc, #84]	@ (800699c <Meas_Init+0x1f4>)
 8006948:	011a      	lsls	r2, r3, #4
 800694a:	188a      	adds	r2, r1, r2
 800694c:	3204      	adds	r2, #4
 800694e:	491b      	ldr	r1, [pc, #108]	@ (80069bc <Meas_Init+0x214>)
 8006950:	6011      	str	r1, [r2, #0]
 8006952:	4912      	ldr	r1, [pc, #72]	@ (800699c <Meas_Init+0x1f4>)
 8006954:	011a      	lsls	r2, r3, #4
 8006956:	188a      	adds	r2, r1, r2
 8006958:	3208      	adds	r2, #8
 800695a:	4919      	ldr	r1, [pc, #100]	@ (80069c0 <Meas_Init+0x218>)
 800695c:	6011      	str	r1, [r2, #0]
 800695e:	4a0f      	ldr	r2, [pc, #60]	@ (800699c <Meas_Init+0x1f4>)
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	18d3      	adds	r3, r2, r3
 8006964:	330c      	adds	r3, #12
 8006966:	1c22      	adds	r2, r4, #0
 8006968:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 800696a:	46c0      	nop			@ (mov r8, r8)
 800696c:	46bd      	mov	sp, r7
 800696e:	b012      	add	sp, #72	@ 0x48
 8006970:	bdb0      	pop	{r4, r5, r7, pc}
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	20001084 	.word	0x20001084
 8006978:	2000107c 	.word	0x2000107c
 800697c:	0801b9b4 	.word	0x0801b9b4
 8006980:	0801b9e4 	.word	0x0801b9e4
 8006984:	20001080 	.word	0x20001080
 8006988:	0801b9e8 	.word	0x0801b9e8
 800698c:	0801ba14 	.word	0x0801ba14
 8006990:	0801ba18 	.word	0x0801ba18
 8006994:	0801ba34 	.word	0x0801ba34
 8006998:	50000400 	.word	0x50000400
 800699c:	2000104c 	.word	0x2000104c
 80069a0:	080066cd 	.word	0x080066cd
 80069a4:	080066dd 	.word	0x080066dd
 80069a8:	20001048 	.word	0x20001048
 80069ac:	080066fd 	.word	0x080066fd
 80069b0:	0800670d 	.word	0x0800670d
 80069b4:	20001049 	.word	0x20001049
 80069b8:	08006725 	.word	0x08006725
 80069bc:	0800672f 	.word	0x0800672f
 80069c0:	2000104a 	.word	0x2000104a

080069c4 <StartMeasurements>:

void StartMeasurements(void) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80069c8:	4b10      	ldr	r3, [pc, #64]	@ (8006a0c <StartMeasurements+0x48>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e015      	b.n	80069fc <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80069d0:	4b0e      	ldr	r3, [pc, #56]	@ (8006a0c <StartMeasurements+0x48>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	4a0e      	ldr	r2, [pc, #56]	@ (8006a10 <StartMeasurements+0x4c>)
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	18d3      	adds	r3, r2, r3
 80069da:	330c      	adds	r3, #12
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80069e2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <StartMeasurements+0x48>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	001a      	movs	r2, r3
 80069e8:	4b09      	ldr	r3, [pc, #36]	@ (8006a10 <StartMeasurements+0x4c>)
 80069ea:	0112      	lsls	r2, r2, #4
 80069ec:	58d3      	ldr	r3, [r2, r3]
 80069ee:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80069f0:	4b06      	ldr	r3, [pc, #24]	@ (8006a0c <StartMeasurements+0x48>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	4b04      	ldr	r3, [pc, #16]	@ (8006a0c <StartMeasurements+0x48>)
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	4b03      	ldr	r3, [pc, #12]	@ (8006a0c <StartMeasurements+0x48>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d9e5      	bls.n	80069d0 <StartMeasurements+0xc>
    }
  }
}
 8006a04:	46c0      	nop			@ (mov r8, r8)
 8006a06:	46c0      	nop			@ (mov r8, r8)
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20001086 	.word	0x20001086
 8006a10:	2000104c 	.word	0x2000104c

08006a14 <Meas_Test>:

void Meas_Test(){
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8006a18:	4b21      	ldr	r3, [pc, #132]	@ (8006aa0 <Meas_Test+0x8c>)
 8006a1a:	78db      	ldrb	r3, [r3, #3]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4053      	eors	r3, r2
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <Meas_Test+0x16>
    ESP_WakeTest();
 8006a26:	f7fe f825 	bl	8004a74 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa0 <Meas_Test+0x8c>)
 8006a2c:	789b      	ldrb	r3, [r3, #2]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4053      	eors	r3, r2
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d017      	beq.n	8006a68 <Meas_Test+0x54>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8006a38:	f7ff fe99 	bl	800676e <MIC_IsTestMeasurementDoneWrapper>
 8006a3c:	1e03      	subs	r3, r0, #0
 8006a3e:	d00b      	beq.n	8006a58 <Meas_Test+0x44>
      MeasTest.MIC_Tested = true;
 8006a40:	4b17      	ldr	r3, [pc, #92]	@ (8006aa0 <Meas_Test+0x8c>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	709a      	strb	r2, [r3, #2]
      SetStatusLED(4000, 3000, 4000);
 8006a46:	23fa      	movs	r3, #250	@ 0xfa
 8006a48:	011a      	lsls	r2, r3, #4
 8006a4a:	4916      	ldr	r1, [pc, #88]	@ (8006aa4 <Meas_Test+0x90>)
 8006a4c:	23fa      	movs	r3, #250	@ 0xfa
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	0018      	movs	r0, r3
 8006a52:	f002 f9a1 	bl	8008d98 <SetStatusLED>
 8006a56:	e007      	b.n	8006a68 <Meas_Test+0x54>
    }
    else{
      SetStatusLED(3000, 4000, 4000);
 8006a58:	23fa      	movs	r3, #250	@ 0xfa
 8006a5a:	011a      	lsls	r2, r3, #4
 8006a5c:	23fa      	movs	r3, #250	@ 0xfa
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	4810      	ldr	r0, [pc, #64]	@ (8006aa4 <Meas_Test+0x90>)
 8006a62:	0019      	movs	r1, r3
 8006a64:	f002 f998 	bl	8008d98 <SetStatusLED>
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8006a68:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa0 <Meas_Test+0x8c>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d013      	beq.n	8006a98 <Meas_Test+0x84>
 8006a70:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa0 <Meas_Test+0x8c>)
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00f      	beq.n	8006a98 <Meas_Test+0x84>
 8006a78:	4b09      	ldr	r3, [pc, #36]	@ (8006aa0 <Meas_Test+0x8c>)
 8006a7a:	78db      	ldrb	r3, [r3, #3]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <Meas_Test+0x84>
 8006a80:	4b07      	ldr	r3, [pc, #28]	@ (8006aa0 <Meas_Test+0x8c>)
 8006a82:	789b      	ldrb	r3, [r3, #2]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <Meas_Test+0x84>
    Debug("Test completed");
 8006a88:	4a07      	ldr	r2, [pc, #28]	@ (8006aa8 <Meas_Test+0x94>)
 8006a8a:	4b08      	ldr	r3, [pc, #32]	@ (8006aac <Meas_Test+0x98>)
 8006a8c:	0019      	movs	r1, r3
 8006a8e:	2003      	movs	r0, #3
 8006a90:	f003 f8b8 	bl	8009c04 <CreateLine>
    SetTestDone();
 8006a94:	f7ff fc90 	bl	80063b8 <SetTestDone>
  }
}
 8006a98:	46c0      	nop			@ (mov r8, r8)
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	46c0      	nop			@ (mov r8, r8)
 8006aa0:	20001080 	.word	0x20001080
 8006aa4:	00000bb8 	.word	0x00000bb8
 8006aa8:	0801ba4c 	.word	0x0801ba4c
 8006aac:	0801ba14 	.word	0x0801ba14

08006ab0 <ResetMeasurements>:
void ResetMeasurements(void) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <ResetMeasurements+0x34>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8006aba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <ResetMeasurements+0x34>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006ac0:	4b08      	ldr	r3, [pc, #32]	@ (8006ae4 <ResetMeasurements+0x34>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8006ac6:	4b07      	ldr	r3, [pc, #28]	@ (8006ae4 <ResetMeasurements+0x34>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006acc:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <ResetMeasurements+0x34>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8006ad2:	4b04      	ldr	r3, [pc, #16]	@ (8006ae4 <ResetMeasurements+0x34>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8006ad8:	4b02      	ldr	r3, [pc, #8]	@ (8006ae4 <ResetMeasurements+0x34>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	73da      	strb	r2, [r3, #15]
}
 8006ade:	46c0      	nop			@ (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	2000103c 	.word	0x2000103c

08006ae8 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006aec:	4b18      	ldr	r3, [pc, #96]	@ (8006b50 <MeasurementsCompleted+0x68>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	e024      	b.n	8006b3e <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006af4:	4b16      	ldr	r3, [pc, #88]	@ (8006b50 <MeasurementsCompleted+0x68>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	4a16      	ldr	r2, [pc, #88]	@ (8006b54 <MeasurementsCompleted+0x6c>)
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	18d3      	adds	r3, r2, r3
 8006afe:	330c      	adds	r3, #12
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d015      	beq.n	8006b32 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8006b06:	4b12      	ldr	r3, [pc, #72]	@ (8006b50 <MeasurementsCompleted+0x68>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	4a12      	ldr	r2, [pc, #72]	@ (8006b54 <MeasurementsCompleted+0x6c>)
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	18d3      	adds	r3, r2, r3
 8006b10:	3304      	adds	r3, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4798      	blx	r3
 8006b16:	1e03      	subs	r3, r0, #0
 8006b18:	d009      	beq.n	8006b2e <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <MeasurementsCompleted+0x68>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8006b54 <MeasurementsCompleted+0x6c>)
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	18d3      	adds	r3, r2, r3
 8006b24:	3308      	adds	r3, #8
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	e001      	b.n	8006b32 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	e00a      	b.n	8006b48 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006b32:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <MeasurementsCompleted+0x68>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	4b05      	ldr	r3, [pc, #20]	@ (8006b50 <MeasurementsCompleted+0x68>)
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	4b04      	ldr	r3, [pc, #16]	@ (8006b50 <MeasurementsCompleted+0x68>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d9d6      	bls.n	8006af4 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8006b46:	2301      	movs	r3, #1
}
 8006b48:	0018      	movs	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	20001086 	.word	0x20001086
 8006b54:	2000104c 	.word	0x2000104c

08006b58 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  switch(MicState){
 8006b5c:	4b21      	ldr	r3, [pc, #132]	@ (8006be4 <Mic_Upkeep+0x8c>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d022      	beq.n	8006baa <Mic_Upkeep+0x52>
 8006b64:	dc2c      	bgt.n	8006bc0 <Mic_Upkeep+0x68>
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d00f      	beq.n	8006b8a <Mic_Upkeep+0x32>
 8006b6a:	dc29      	bgt.n	8006bc0 <Mic_Upkeep+0x68>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <Mic_Upkeep+0x1e>
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d004      	beq.n	8006b7e <Mic_Upkeep+0x26>
 8006b74:	e024      	b.n	8006bc0 <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 8006b76:	4b1b      	ldr	r3, [pc, #108]	@ (8006be4 <Mic_Upkeep+0x8c>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	701a      	strb	r2, [r3, #0]
    break;
 8006b7c:	e02d      	b.n	8006bda <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 8006b7e:	f7ff fddc 	bl	800673a <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8006b82:	4b18      	ldr	r3, [pc, #96]	@ (8006be4 <Mic_Upkeep+0x8c>)
 8006b84:	2202      	movs	r2, #2
 8006b86:	701a      	strb	r2, [r3, #0]
    break;
 8006b88:	e027      	b.n	8006bda <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 8006b8a:	f7ff fde1 	bl	8006750 <MIC_IsMeasurementDoneWrapper>
 8006b8e:	1e03      	subs	r3, r0, #0
 8006b90:	d020      	beq.n	8006bd4 <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 8006b92:	4b14      	ldr	r3, [pc, #80]	@ (8006be4 <Mic_Upkeep+0x8c>)
 8006b94:	2203      	movs	r2, #3
 8006b96:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 8006b98:	f003 fbba 	bl	800a310 <HAL_GetTick>
 8006b9c:	0003      	movs	r3, r0
 8006b9e:	22fa      	movs	r2, #250	@ 0xfa
 8006ba0:	0092      	lsls	r2, r2, #2
 8006ba2:	189a      	adds	r2, r3, r2
 8006ba4:	4b10      	ldr	r3, [pc, #64]	@ (8006be8 <Mic_Upkeep+0x90>)
 8006ba6:	601a      	str	r2, [r3, #0]
    }
    break;
 8006ba8:	e014      	b.n	8006bd4 <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8006baa:	4b0f      	ldr	r3, [pc, #60]	@ (8006be8 <Mic_Upkeep+0x90>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f002 ffd2 	bl	8009b58 <TimestampIsReached>
 8006bb4:	1e03      	subs	r3, r0, #0
 8006bb6:	d00f      	beq.n	8006bd8 <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006be4 <Mic_Upkeep+0x8c>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006bbe:	e00b      	b.n	8006bd8 <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8006bec <Mic_Upkeep+0x94>)
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf0 <Mic_Upkeep+0x98>)
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	2003      	movs	r0, #3
 8006bc8:	f003 f81c 	bl	8009c04 <CreateLine>
    MicState = MIC_STATE_INIT;
 8006bcc:	4b05      	ldr	r3, [pc, #20]	@ (8006be4 <Mic_Upkeep+0x8c>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
    break;
 8006bd2:	e002      	b.n	8006bda <Mic_Upkeep+0x82>
    break;
 8006bd4:	46c0      	nop			@ (mov r8, r8)
 8006bd6:	e000      	b.n	8006bda <Mic_Upkeep+0x82>
    break;
 8006bd8:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8006bda:	4b02      	ldr	r3, [pc, #8]	@ (8006be4 <Mic_Upkeep+0x8c>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
}
 8006bde:	0018      	movs	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	20001085 	.word	0x20001085
 8006be8:	2000108c 	.word	0x2000108c
 8006bec:	0801ba5c 	.word	0x0801ba5c
 8006bf0:	0801ba14 	.word	0x0801ba14

08006bf4 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8006bf4:	b5b0      	push	{r4, r5, r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8006bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8006cec <Meas_Upkeep+0xf8>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b06      	cmp	r3, #6
 8006c00:	d868      	bhi.n	8006cd4 <Meas_Upkeep+0xe0>
 8006c02:	009a      	lsls	r2, r3, #2
 8006c04:	4b3a      	ldr	r3, [pc, #232]	@ (8006cf0 <Meas_Upkeep+0xfc>)
 8006c06:	18d3      	adds	r3, r2, r3
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8006c0c:	4a39      	ldr	r2, [pc, #228]	@ (8006cf4 <Meas_Upkeep+0x100>)
 8006c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8006cf8 <Meas_Upkeep+0x104>)
 8006c10:	0019      	movs	r1, r3
 8006c12:	2003      	movs	r0, #3
 8006c14:	f002 fff6 	bl	8009c04 <CreateLine>
    break;
 8006c18:	e063      	b.n	8006ce2 <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8006c1a:	f7ff ff49 	bl	8006ab0 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8006c1e:	4b33      	ldr	r3, [pc, #204]	@ (8006cec <Meas_Upkeep+0xf8>)
 8006c20:	2201      	movs	r2, #1
 8006c22:	701a      	strb	r2, [r3, #0]
    break;
 8006c24:	e05d      	b.n	8006ce2 <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8006c26:	f7ff fecd 	bl	80069c4 <StartMeasurements>
    SetMeasurementIndicator();
 8006c2a:	f002 f967 	bl	8008efc <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8006c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8006cec <Meas_Upkeep+0xf8>)
 8006c30:	2202      	movs	r2, #2
 8006c32:	701a      	strb	r2, [r3, #0]
   break;
 8006c34:	e055      	b.n	8006ce2 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8006c36:	f7ff ff57 	bl	8006ae8 <MeasurementsCompleted>
 8006c3a:	1e03      	subs	r3, r0, #0
 8006c3c:	d04e      	beq.n	8006cdc <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8006c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8006cec <Meas_Upkeep+0xf8>)
 8006c40:	2203      	movs	r2, #3
 8006c42:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006c44:	e04a      	b.n	8006cdc <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8006c46:	4a2d      	ldr	r2, [pc, #180]	@ (8006cfc <Meas_Upkeep+0x108>)
 8006c48:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf8 <Meas_Upkeep+0x104>)
 8006c4a:	0019      	movs	r1, r3
 8006c4c:	2003      	movs	r0, #3
 8006c4e:	f002 ffd9 	bl	8009c04 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8006c52:	4b2b      	ldr	r3, [pc, #172]	@ (8006d00 <Meas_Upkeep+0x10c>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	4a2b      	ldr	r2, [pc, #172]	@ (8006d04 <Meas_Upkeep+0x110>)
 8006c58:	4927      	ldr	r1, [pc, #156]	@ (8006cf8 <Meas_Upkeep+0x104>)
 8006c5a:	2003      	movs	r0, #3
 8006c5c:	f002 ffd2 	bl	8009c04 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8006c60:	4b27      	ldr	r3, [pc, #156]	@ (8006d00 <Meas_Upkeep+0x10c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	1c18      	adds	r0, r3, #0
 8006c66:	f7fc fb7b 	bl	8003360 <__aeabi_f2d>
 8006c6a:	0004      	movs	r4, r0
 8006c6c:	000d      	movs	r5, r1
 8006c6e:	4b24      	ldr	r3, [pc, #144]	@ (8006d00 <Meas_Upkeep+0x10c>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	1c18      	adds	r0, r3, #0
 8006c74:	f7fc fb74 	bl	8003360 <__aeabi_f2d>
 8006c78:	0002      	movs	r2, r0
 8006c7a:	000b      	movs	r3, r1
 8006c7c:	4822      	ldr	r0, [pc, #136]	@ (8006d08 <Meas_Upkeep+0x114>)
 8006c7e:	491e      	ldr	r1, [pc, #120]	@ (8006cf8 <Meas_Upkeep+0x104>)
 8006c80:	9202      	str	r2, [sp, #8]
 8006c82:	9303      	str	r3, [sp, #12]
 8006c84:	9400      	str	r4, [sp, #0]
 8006c86:	9501      	str	r5, [sp, #4]
 8006c88:	0002      	movs	r2, r0
 8006c8a:	2003      	movs	r0, #3
 8006c8c:	f002 ffba 	bl	8009c04 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006c90:	4b1b      	ldr	r3, [pc, #108]	@ (8006d00 <Meas_Upkeep+0x10c>)
 8006c92:	6858      	ldr	r0, [r3, #4]
 8006c94:	4b1a      	ldr	r3, [pc, #104]	@ (8006d00 <Meas_Upkeep+0x10c>)
 8006c96:	6819      	ldr	r1, [r3, #0]
 8006c98:	4b19      	ldr	r3, [pc, #100]	@ (8006d00 <Meas_Upkeep+0x10c>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	001a      	movs	r2, r3
 8006ca0:	f7fc fd22 	bl	80036e8 <setMeasurement>
    ResetMeasurementIndicator();
 8006ca4:	f002 f942 	bl	8008f2c <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8006ca8:	f003 fb32 	bl	800a310 <HAL_GetTick>
 8006cac:	0003      	movs	r3, r0
 8006cae:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <Meas_Upkeep+0x118>)
 8006cb0:	189a      	adds	r2, r3, r2
 8006cb2:	4b17      	ldr	r3, [pc, #92]	@ (8006d10 <Meas_Upkeep+0x11c>)
 8006cb4:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cec <Meas_Upkeep+0xf8>)
 8006cb8:	2206      	movs	r2, #6
 8006cba:	701a      	strb	r2, [r3, #0]
    break;
 8006cbc:	e011      	b.n	8006ce2 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8006cbe:	4b14      	ldr	r3, [pc, #80]	@ (8006d10 <Meas_Upkeep+0x11c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f002 ff48 	bl	8009b58 <TimestampIsReached>
 8006cc8:	1e03      	subs	r3, r0, #0
 8006cca:	d009      	beq.n	8006ce0 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8006ccc:	4b07      	ldr	r3, [pc, #28]	@ (8006cec <Meas_Upkeep+0xf8>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
    }

    break;
 8006cd2:	e005      	b.n	8006ce0 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006cd4:	4b05      	ldr	r3, [pc, #20]	@ (8006cec <Meas_Upkeep+0xf8>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
    break;
 8006cda:	e002      	b.n	8006ce2 <Meas_Upkeep+0xee>
    break;
 8006cdc:	46c0      	nop			@ (mov r8, r8)
 8006cde:	e000      	b.n	8006ce2 <Meas_Upkeep+0xee>
    break;
 8006ce0:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8006ce2:	4b02      	ldr	r3, [pc, #8]	@ (8006cec <Meas_Upkeep+0xf8>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
}
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bdb0      	pop	{r4, r5, r7, pc}
 8006cec:	20001084 	.word	0x20001084
 8006cf0:	0801c198 	.word	0x0801c198
 8006cf4:	0801ba7c 	.word	0x0801ba7c
 8006cf8:	0801ba14 	.word	0x0801ba14
 8006cfc:	0801ba9c 	.word	0x0801ba9c
 8006d00:	2000103c 	.word	0x2000103c
 8006d04:	0801bab0 	.word	0x0801bab0
 8006d08:	0801bac8 	.word	0x0801bac8
 8006d0c:	00002710 	.word	0x00002710
 8006d10:	20001088 	.word	0x20001088

08006d14 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	1d3b      	adds	r3, r7, #4
 8006d1c:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8006d1e:	240f      	movs	r4, #15
 8006d20:	193b      	adds	r3, r7, r4
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8006d26:	4b20      	ldr	r3, [pc, #128]	@ (8006da8 <Meas_SetEnabledSensors+0x94>)
 8006d28:	1d3a      	adds	r2, r7, #4
 8006d2a:	6812      	ldr	r2, [r2, #0]
 8006d2c:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8006d2e:	193b      	adds	r3, r7, r4
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	193a      	adds	r2, r7, r4
 8006d34:	1c59      	adds	r1, r3, #1
 8006d36:	7011      	strb	r1, [r2, #0]
 8006d38:	0018      	movs	r0, r3
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	7819      	ldrb	r1, [r3, #0]
 8006d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dac <Meas_SetEnabledSensors+0x98>)
 8006d40:	0103      	lsls	r3, r0, #4
 8006d42:	18d3      	adds	r3, r2, r3
 8006d44:	330c      	adds	r3, #12
 8006d46:	1c0a      	adds	r2, r1, #0
 8006d48:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8006d4a:	193b      	adds	r3, r7, r4
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	193a      	adds	r2, r7, r4
 8006d50:	1c59      	adds	r1, r3, #1
 8006d52:	7011      	strb	r1, [r2, #0]
 8006d54:	0018      	movs	r0, r3
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	7859      	ldrb	r1, [r3, #1]
 8006d5a:	4a14      	ldr	r2, [pc, #80]	@ (8006dac <Meas_SetEnabledSensors+0x98>)
 8006d5c:	0103      	lsls	r3, r0, #4
 8006d5e:	18d3      	adds	r3, r2, r3
 8006d60:	330c      	adds	r3, #12
 8006d62:	1c0a      	adds	r2, r1, #0
 8006d64:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8006d66:	193b      	adds	r3, r7, r4
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	193a      	adds	r2, r7, r4
 8006d6c:	1c59      	adds	r1, r3, #1
 8006d6e:	7011      	strb	r1, [r2, #0]
 8006d70:	0018      	movs	r0, r3
 8006d72:	1d3b      	adds	r3, r7, #4
 8006d74:	7899      	ldrb	r1, [r3, #2]
 8006d76:	4a0d      	ldr	r2, [pc, #52]	@ (8006dac <Meas_SetEnabledSensors+0x98>)
 8006d78:	0103      	lsls	r3, r0, #4
 8006d7a:	18d3      	adds	r3, r2, r3
 8006d7c:	330c      	adds	r3, #12
 8006d7e:	1c0a      	adds	r2, r1, #0
 8006d80:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8006d82:	193b      	adds	r3, r7, r4
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	193a      	adds	r2, r7, r4
 8006d88:	1c59      	adds	r1, r3, #1
 8006d8a:	7011      	strb	r1, [r2, #0]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	78d9      	ldrb	r1, [r3, #3]
 8006d92:	4a06      	ldr	r2, [pc, #24]	@ (8006dac <Meas_SetEnabledSensors+0x98>)
 8006d94:	0103      	lsls	r3, r0, #4
 8006d96:	18d3      	adds	r3, r2, r3
 8006d98:	330c      	adds	r3, #12
 8006d9a:	1c0a      	adds	r2, r1, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
}
 8006d9e:	46c0      	nop			@ (mov r8, r8)
 8006da0:	46bd      	mov	sp, r7
 8006da2:	b005      	add	sp, #20
 8006da4:	bd90      	pop	{r4, r7, pc}
 8006da6:	46c0      	nop			@ (mov r8, r8)
 8006da8:	2000107c 	.word	0x2000107c
 8006dac:	2000104c 	.word	0x2000104c

08006db0 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006db4:	4b02      	ldr	r3, [pc, #8]	@ (8006dc0 <SetESPMeasurementDone+0x10>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	70da      	strb	r2, [r3, #3]
}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20001080 	.word	0x20001080

08006dc4 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	4b03      	ldr	r3, [pc, #12]	@ (8006ddc <MIC_Init+0x18>)
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	46c0      	nop			@ (mov r8, r8)
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	b002      	add	sp, #8
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	46c0      	nop			@ (mov r8, r8)
 8006ddc:	20001090 	.word	0x20001090

08006de0 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006de8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e1c <UpdateSampleRate+0x3c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d00e      	beq.n	8006e12 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006df4:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <UpdateSampleRate+0x3c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	0018      	movs	r0, r3
 8006dfa:	f006 ff47 	bl	800dc8c <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006dfe:	4b07      	ldr	r3, [pc, #28]	@ (8006e1c <UpdateSampleRate+0x3c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006e06:	4b05      	ldr	r3, [pc, #20]	@ (8006e1c <UpdateSampleRate+0x3c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f006 fe4c 	bl	800daa8 <HAL_I2S_Init>
 8006e10:	e000      	b.n	8006e14 <UpdateSampleRate+0x34>
    return;
 8006e12:	46c0      	nop			@ (mov r8, r8)
}
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b002      	add	sp, #8
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	46c0      	nop			@ (mov r8, r8)
 8006e1c:	20001090 	.word	0x20001090

08006e20 <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006e28:	4b18      	ldr	r3, [pc, #96]	@ (8006e8c <ConvertAudio+0x6c>)
 8006e2a:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	5e9b      	ldrsh	r3, [r3, r2]
 8006e3a:	025b      	lsls	r3, r3, #9
 8006e3c:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3302      	adds	r3, #2
 8006e42:	2200      	movs	r2, #0
 8006e44:	5e9b      	ldrsh	r3, [r3, r2]
 8006e46:	11db      	asrs	r3, r3, #7
 8006e48:	05db      	lsls	r3, r3, #23
 8006e4a:	0ddb      	lsrs	r3, r3, #23
 8006e4c:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	2380      	movs	r3, #128	@ 0x80
 8006e5a:	041b      	lsls	r3, r3, #16
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d004      	beq.n	8006e6a <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	22ff      	movs	r2, #255	@ 0xff
 8006e64:	0612      	lsls	r2, r2, #24
 8006e66:	4313      	orrs	r3, r2
 8006e68:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006e6e:	68b8      	ldr	r0, [r7, #8]
 8006e70:	f7fa fb2c 	bl	80014cc <__aeabi_i2f>
 8006e74:	1c03      	adds	r3, r0, #0
 8006e76:	69b9      	ldr	r1, [r7, #24]
 8006e78:	1c18      	adds	r0, r3, #0
 8006e7a:	f7f9 fe29 	bl	8000ad0 <__aeabi_fdiv>
 8006e7e:	1c03      	adds	r3, r0, #0
 8006e80:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006e82:	697b      	ldr	r3, [r7, #20]
}
 8006e84:	1c18      	adds	r0, r3, #0
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b008      	add	sp, #32
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	4afffffe 	.word	0x4afffffe

08006e90 <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006e90:	b5b0      	push	{r4, r5, r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	000a      	movs	r2, r1
 8006e9a:	1cbb      	adds	r3, r7, #2
 8006e9c:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8006e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f1c <MIC_Start+0x8c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f20 <MIC_Start+0x90>)
 8006ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8006f24 <MIC_Start+0x94>)
 8006eaa:	0019      	movs	r1, r3
 8006eac:	2001      	movs	r0, #1
 8006eae:	f002 fea9 	bl	8009c04 <CreateLine>
    return;
 8006eb2:	e02f      	b.n	8006f14 <MIC_Start+0x84>
  }
  SetMICIndicator();
 8006eb4:	f002 f850 	bl	8008f58 <SetMICIndicator>
  Debug("In mic start");
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006f28 <MIC_Start+0x98>)
 8006eba:	4b1c      	ldr	r3, [pc, #112]	@ (8006f2c <MIC_Start+0x9c>)
 8006ebc:	0019      	movs	r1, r3
 8006ebe:	2003      	movs	r0, #3
 8006ec0:	f002 fea0 	bl	8009c04 <CreateLine>
  UpdateSampleRate(sampleRate);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f7ff ff8a 	bl	8006de0 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006ecc:	4b18      	ldr	r3, [pc, #96]	@ (8006f30 <MIC_Start+0xa0>)
 8006ece:	1cba      	adds	r2, r7, #2
 8006ed0:	8812      	ldrh	r2, [r2, #0]
 8006ed2:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006ed4:	f003 fa1c 	bl	800a310 <HAL_GetTick>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	3314      	adds	r3, #20
 8006edc:	001a      	movs	r2, r3
 8006ede:	4b15      	ldr	r3, [pc, #84]	@ (8006f34 <MIC_Start+0xa4>)
 8006ee0:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006ee2:	4b15      	ldr	r3, [pc, #84]	@ (8006f38 <MIC_Start+0xa8>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006ee8:	4b14      	ldr	r3, [pc, #80]	@ (8006f3c <MIC_Start+0xac>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006eee:	4b0b      	ldr	r3, [pc, #44]	@ (8006f1c <MIC_Start+0x8c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	250f      	movs	r5, #15
 8006ef4:	197c      	adds	r4, r7, r5
 8006ef6:	2280      	movs	r2, #128	@ 0x80
 8006ef8:	00d2      	lsls	r2, r2, #3
 8006efa:	4911      	ldr	r1, [pc, #68]	@ (8006f40 <MIC_Start+0xb0>)
 8006efc:	0018      	movs	r0, r3
 8006efe:	f006 fef1 	bl	800dce4 <HAL_I2S_Receive_DMA>
 8006f02:	0003      	movs	r3, r0
 8006f04:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006f06:	197b      	adds	r3, r7, r5
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8006f44 <MIC_Start+0xb4>)
 8006f0c:	490e      	ldr	r1, [pc, #56]	@ (8006f48 <MIC_Start+0xb8>)
 8006f0e:	2002      	movs	r0, #2
 8006f10:	f002 fe78 	bl	8009c04 <CreateLine>
}
 8006f14:	46bd      	mov	sp, r7
 8006f16:	b004      	add	sp, #16
 8006f18:	bdb0      	pop	{r4, r5, r7, pc}
 8006f1a:	46c0      	nop			@ (mov r8, r8)
 8006f1c:	20001090 	.word	0x20001090
 8006f20:	0801bafc 	.word	0x0801bafc
 8006f24:	0801bb1c 	.word	0x0801bb1c
 8006f28:	0801bb20 	.word	0x0801bb20
 8006f2c:	0801bb30 	.word	0x0801bb30
 8006f30:	2000002c 	.word	0x2000002c
 8006f34:	20002094 	.word	0x20002094
 8006f38:	20002098 	.word	0x20002098
 8006f3c:	20002099 	.word	0x20002099
 8006f40:	20001094 	.word	0x20001094
 8006f44:	0801bb34 	.word	0x0801bb34
 8006f48:	0801bb40 	.word	0x0801bb40

08006f4c <MinimalValue>:

float MinimalValue(uint16_t length){
 8006f4c:	b590      	push	{r4, r7, lr}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	0002      	movs	r2, r0
 8006f54:	1dbb      	adds	r3, r7, #6
 8006f56:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006f58:	23fe      	movs	r3, #254	@ 0xfe
 8006f5a:	059b      	lsls	r3, r3, #22
 8006f5c:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006f5e:	230a      	movs	r3, #10
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	2200      	movs	r2, #0
 8006f64:	801a      	strh	r2, [r3, #0]
 8006f66:	e01c      	b.n	8006fa2 <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006f68:	240a      	movs	r4, #10
 8006f6a:	193b      	adds	r3, r7, r4
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	5e9a      	ldrsh	r2, [r3, r2]
 8006f70:	4b12      	ldr	r3, [pc, #72]	@ (8006fbc <MinimalValue+0x70>)
 8006f72:	0092      	lsls	r2, r2, #2
 8006f74:	58d3      	ldr	r3, [r2, r3]
 8006f76:	1c19      	adds	r1, r3, #0
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7f9 fabb 	bl	80004f4 <__aeabi_fcmpgt>
 8006f7e:	1e03      	subs	r3, r0, #0
 8006f80:	d006      	beq.n	8006f90 <MinimalValue+0x44>
      MinVal = sample[i];
 8006f82:	193b      	adds	r3, r7, r4
 8006f84:	2200      	movs	r2, #0
 8006f86:	5e9a      	ldrsh	r2, [r3, r2]
 8006f88:	4b0c      	ldr	r3, [pc, #48]	@ (8006fbc <MinimalValue+0x70>)
 8006f8a:	0092      	lsls	r2, r2, #2
 8006f8c:	58d3      	ldr	r3, [r2, r3]
 8006f8e:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006f90:	210a      	movs	r1, #10
 8006f92:	187b      	adds	r3, r7, r1
 8006f94:	2200      	movs	r2, #0
 8006f96:	5e9b      	ldrsh	r3, [r3, r2]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	187b      	adds	r3, r7, r1
 8006fa0:	801a      	strh	r2, [r3, #0]
 8006fa2:	230a      	movs	r3, #10
 8006fa4:	18fb      	adds	r3, r7, r3
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	5e9a      	ldrsh	r2, [r3, r2]
 8006faa:	1dbb      	adds	r3, r7, #6
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	dbda      	blt.n	8006f68 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
}
 8006fb4:	1c18      	adds	r0, r3, #0
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	b005      	add	sp, #20
 8006fba:	bd90      	pop	{r4, r7, pc}
 8006fbc:	200020d0 	.word	0x200020d0

08006fc0 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006fc0:	b590      	push	{r4, r7, lr}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	0002      	movs	r2, r0
 8006fc8:	1dbb      	adds	r3, r7, #6
 8006fca:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006fcc:	4b18      	ldr	r3, [pc, #96]	@ (8007030 <MaximalValue+0x70>)
 8006fce:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006fd0:	230a      	movs	r3, #10
 8006fd2:	18fb      	adds	r3, r7, r3
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	e01c      	b.n	8007014 <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006fda:	240a      	movs	r4, #10
 8006fdc:	193b      	adds	r3, r7, r4
 8006fde:	2200      	movs	r2, #0
 8006fe0:	5e9a      	ldrsh	r2, [r3, r2]
 8006fe2:	4b14      	ldr	r3, [pc, #80]	@ (8007034 <MaximalValue+0x74>)
 8006fe4:	0092      	lsls	r2, r2, #2
 8006fe6:	58d3      	ldr	r3, [r2, r3]
 8006fe8:	1c19      	adds	r1, r3, #0
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f7f9 fa6e 	bl	80004cc <__aeabi_fcmplt>
 8006ff0:	1e03      	subs	r3, r0, #0
 8006ff2:	d006      	beq.n	8007002 <MaximalValue+0x42>
      MaxVal = sample[i];
 8006ff4:	193b      	adds	r3, r7, r4
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	5e9a      	ldrsh	r2, [r3, r2]
 8006ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8007034 <MaximalValue+0x74>)
 8006ffc:	0092      	lsls	r2, r2, #2
 8006ffe:	58d3      	ldr	r3, [r2, r3]
 8007000:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8007002:	210a      	movs	r1, #10
 8007004:	187b      	adds	r3, r7, r1
 8007006:	2200      	movs	r2, #0
 8007008:	5e9b      	ldrsh	r3, [r3, r2]
 800700a:	b29b      	uxth	r3, r3
 800700c:	3301      	adds	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	187b      	adds	r3, r7, r1
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	230a      	movs	r3, #10
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	2200      	movs	r2, #0
 800701a:	5e9a      	ldrsh	r2, [r3, r2]
 800701c:	1dbb      	adds	r3, r7, #6
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	dbda      	blt.n	8006fda <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8007024:	68fb      	ldr	r3, [r7, #12]
}
 8007026:	1c18      	adds	r0, r3, #0
 8007028:	46bd      	mov	sp, r7
 800702a:	b005      	add	sp, #20
 800702c:	bd90      	pop	{r4, r7, pc}
 800702e:	46c0      	nop			@ (mov r8, r8)
 8007030:	bf800000 	.word	0xbf800000
 8007034:	200020d0 	.word	0x200020d0

08007038 <MIC_Check>:
bool MIC_Check(void) {
 8007038:	b5b0      	push	{r4, r5, r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 800703e:	4a25      	ldr	r2, [pc, #148]	@ (80070d4 <MIC_Check+0x9c>)
 8007040:	4b25      	ldr	r3, [pc, #148]	@ (80070d8 <MIC_Check+0xa0>)
 8007042:	0019      	movs	r1, r3
 8007044:	2002      	movs	r0, #2
 8007046:	f002 fddd 	bl	8009c04 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800704a:	230e      	movs	r3, #14
 800704c:	18fb      	adds	r3, r7, r3
 800704e:	2200      	movs	r2, #0
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	e016      	b.n	8007082 <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8007054:	210e      	movs	r1, #14
 8007056:	187b      	adds	r3, r7, r1
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	3302      	adds	r3, #2
 800705e:	005a      	lsls	r2, r3, #1
 8007060:	4b1e      	ldr	r3, [pc, #120]	@ (80070dc <MIC_Check+0xa4>)
 8007062:	18d2      	adds	r2, r2, r3
 8007064:	000d      	movs	r5, r1
 8007066:	187b      	adds	r3, r7, r1
 8007068:	881c      	ldrh	r4, [r3, #0]
 800706a:	0010      	movs	r0, r2
 800706c:	f7ff fed8 	bl	8006e20 <ConvertAudio>
 8007070:	1c01      	adds	r1, r0, #0
 8007072:	4b1b      	ldr	r3, [pc, #108]	@ (80070e0 <MIC_Check+0xa8>)
 8007074:	00a2      	lsls	r2, r4, #2
 8007076:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8007078:	197b      	adds	r3, r7, r5
 800707a:	197a      	adds	r2, r7, r5
 800707c:	8812      	ldrh	r2, [r2, #0]
 800707e:	3201      	adds	r2, #1
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	230e      	movs	r3, #14
 8007084:	18fb      	adds	r3, r7, r3
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	2380      	movs	r3, #128	@ 0x80
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	429a      	cmp	r2, r3
 800708e:	d3e1      	bcc.n	8007054 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8007090:	2380      	movs	r3, #128	@ 0x80
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	0018      	movs	r0, r3
 8007096:	f7ff ff93 	bl	8006fc0 <MaximalValue>
 800709a:	1c03      	adds	r3, r0, #0
 800709c:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 800709e:	2380      	movs	r3, #128	@ 0x80
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	0018      	movs	r0, r3
 80070a4:	f7ff ff52 	bl	8006f4c <MinimalValue>
 80070a8:	1c03      	adds	r3, r0, #0
 80070aa:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 80070ac:	2100      	movs	r1, #0
 80070ae:	68b8      	ldr	r0, [r7, #8]
 80070b0:	f7f9 fa20 	bl	80004f4 <__aeabi_fcmpgt>
 80070b4:	1e03      	subs	r3, r0, #0
 80070b6:	d105      	bne.n	80070c4 <MIC_Check+0x8c>
 80070b8:	2100      	movs	r1, #0
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7f9 fa06 	bl	80004cc <__aeabi_fcmplt>
 80070c0:	1e03      	subs	r3, r0, #0
 80070c2:	d001      	beq.n	80070c8 <MIC_Check+0x90>
    return(true);
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <MIC_Check+0x92>
  }
  return(false);
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	0018      	movs	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b004      	add	sp, #16
 80070d0:	bdb0      	pop	{r4, r5, r7, pc}
 80070d2:	46c0      	nop			@ (mov r8, r8)
 80070d4:	0801bb44 	.word	0x0801bb44
 80070d8:	0801bb40 	.word	0x0801bb40
 80070dc:	20001094 	.word	0x20001094
 80070e0:	200020d0 	.word	0x200020d0

080070e4 <MIC_Print>:
void MIC_Print(void) {
 80070e4:	b590      	push	{r4, r7, lr}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
  Info("New samples");
 80070ea:	4a8a      	ldr	r2, [pc, #552]	@ (8007314 <MIC_Print+0x230>)
 80070ec:	4b8a      	ldr	r3, [pc, #552]	@ (8007318 <MIC_Print+0x234>)
 80070ee:	0019      	movs	r1, r3
 80070f0:	2002      	movs	r0, #2
 80070f2:	f002 fd87 	bl	8009c04 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80070f6:	1dbb      	adds	r3, r7, #6
 80070f8:	2200      	movs	r2, #0
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e014      	b.n	8007128 <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 80070fe:	1dbb      	adds	r3, r7, #6
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	3302      	adds	r3, #2
 8007106:	005a      	lsls	r2, r3, #1
 8007108:	4b84      	ldr	r3, [pc, #528]	@ (800731c <MIC_Print+0x238>)
 800710a:	18d2      	adds	r2, r2, r3
 800710c:	1dbb      	adds	r3, r7, #6
 800710e:	881c      	ldrh	r4, [r3, #0]
 8007110:	0010      	movs	r0, r2
 8007112:	f7ff fe85 	bl	8006e20 <ConvertAudio>
 8007116:	1c01      	adds	r1, r0, #0
 8007118:	4b81      	ldr	r3, [pc, #516]	@ (8007320 <MIC_Print+0x23c>)
 800711a:	00a2      	lsls	r2, r4, #2
 800711c:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800711e:	1dbb      	adds	r3, r7, #6
 8007120:	1dba      	adds	r2, r7, #6
 8007122:	8812      	ldrh	r2, [r2, #0]
 8007124:	3201      	adds	r2, #1
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	1dbb      	adds	r3, r7, #6
 800712a:	881a      	ldrh	r2, [r3, #0]
 800712c:	2380      	movs	r3, #128	@ 0x80
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	429a      	cmp	r2, r3
 8007132:	d3e4      	bcc.n	80070fe <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 8007134:	f000 f976 	bl	8007424 <MIC_GetDB>
 8007138:	1c02      	adds	r2, r0, #0
 800713a:	4b7a      	ldr	r3, [pc, #488]	@ (8007324 <MIC_Print+0x240>)
 800713c:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 800713e:	4b7a      	ldr	r3, [pc, #488]	@ (8007328 <MIC_Print+0x244>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b09      	cmp	r3, #9
 8007144:	d80e      	bhi.n	8007164 <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 8007146:	4b78      	ldr	r3, [pc, #480]	@ (8007328 <MIC_Print+0x244>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	001a      	movs	r2, r3
 800714c:	4b75      	ldr	r3, [pc, #468]	@ (8007324 <MIC_Print+0x240>)
 800714e:	6819      	ldr	r1, [r3, #0]
 8007150:	4b76      	ldr	r3, [pc, #472]	@ (800732c <MIC_Print+0x248>)
 8007152:	0092      	lsls	r2, r2, #2
 8007154:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007156:	4b74      	ldr	r3, [pc, #464]	@ (8007328 <MIC_Print+0x244>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	3301      	adds	r3, #1
 800715c:	b2da      	uxtb	r2, r3
 800715e:	4b72      	ldr	r3, [pc, #456]	@ (8007328 <MIC_Print+0x244>)
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	e013      	b.n	800718c <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 8007164:	4b70      	ldr	r3, [pc, #448]	@ (8007328 <MIC_Print+0x244>)
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 800716a:	4b6f      	ldr	r3, [pc, #444]	@ (8007328 <MIC_Print+0x244>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	001a      	movs	r2, r3
 8007170:	4b6c      	ldr	r3, [pc, #432]	@ (8007324 <MIC_Print+0x240>)
 8007172:	6819      	ldr	r1, [r3, #0]
 8007174:	4b6d      	ldr	r3, [pc, #436]	@ (800732c <MIC_Print+0x248>)
 8007176:	0092      	lsls	r2, r2, #2
 8007178:	50d1      	str	r1, [r2, r3]
    counter += 1;
 800717a:	4b6b      	ldr	r3, [pc, #428]	@ (8007328 <MIC_Print+0x244>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	3301      	adds	r3, #1
 8007180:	b2da      	uxtb	r2, r3
 8007182:	4b69      	ldr	r3, [pc, #420]	@ (8007328 <MIC_Print+0x244>)
 8007184:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8007186:	4b6a      	ldr	r3, [pc, #424]	@ (8007330 <MIC_Print+0x24c>)
 8007188:	2201      	movs	r2, #1
 800718a:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 800718c:	4b68      	ldr	r3, [pc, #416]	@ (8007330 <MIC_Print+0x24c>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2201      	movs	r2, #1
 8007192:	4053      	eors	r3, r2
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <MIC_Print+0xc2>
    setMic(dBc);
 800719a:	4b62      	ldr	r3, [pc, #392]	@ (8007324 <MIC_Print+0x240>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	1c18      	adds	r0, r3, #0
 80071a0:	f7fc fabe 	bl	8003720 <setMic>
 80071a4:	e02d      	b.n	8007202 <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 80071a6:	4b63      	ldr	r3, [pc, #396]	@ (8007334 <MIC_Print+0x250>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 80071ac:	1d7b      	adds	r3, r7, #5
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	e013      	b.n	80071dc <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 80071b4:	1d7b      	adds	r3, r7, #5
 80071b6:	781a      	ldrb	r2, [r3, #0]
 80071b8:	4b5c      	ldr	r3, [pc, #368]	@ (800732c <MIC_Print+0x248>)
 80071ba:	0092      	lsls	r2, r2, #2
 80071bc:	58d2      	ldr	r2, [r2, r3]
 80071be:	4b5d      	ldr	r3, [pc, #372]	@ (8007334 <MIC_Print+0x250>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	1c19      	adds	r1, r3, #0
 80071c4:	1c10      	adds	r0, r2, #0
 80071c6:	f7f9 faf9 	bl	80007bc <__aeabi_fadd>
 80071ca:	1c03      	adds	r3, r0, #0
 80071cc:	1c1a      	adds	r2, r3, #0
 80071ce:	4b59      	ldr	r3, [pc, #356]	@ (8007334 <MIC_Print+0x250>)
 80071d0:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 80071d2:	1d7b      	adds	r3, r7, #5
 80071d4:	781a      	ldrb	r2, [r3, #0]
 80071d6:	1d7b      	adds	r3, r7, #5
 80071d8:	3201      	adds	r2, #1
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	1d7b      	adds	r3, r7, #5
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b09      	cmp	r3, #9
 80071e2:	d9e7      	bls.n	80071b4 <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 80071e4:	4b53      	ldr	r3, [pc, #332]	@ (8007334 <MIC_Print+0x250>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4953      	ldr	r1, [pc, #332]	@ (8007338 <MIC_Print+0x254>)
 80071ea:	1c18      	adds	r0, r3, #0
 80071ec:	f7f9 fc70 	bl	8000ad0 <__aeabi_fdiv>
 80071f0:	1c03      	adds	r3, r0, #0
 80071f2:	1c1a      	adds	r2, r3, #0
 80071f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007334 <MIC_Print+0x250>)
 80071f6:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 80071f8:	4b4e      	ldr	r3, [pc, #312]	@ (8007334 <MIC_Print+0x250>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	1c18      	adds	r0, r3, #0
 80071fe:	f7fc fa8f 	bl	8003720 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8007202:	4b48      	ldr	r3, [pc, #288]	@ (8007324 <MIC_Print+0x240>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	494d      	ldr	r1, [pc, #308]	@ (800733c <MIC_Print+0x258>)
 8007208:	1c18      	adds	r0, r3, #0
 800720a:	f7f9 f973 	bl	80004f4 <__aeabi_fcmpgt>
 800720e:	1e03      	subs	r3, r0, #0
 8007210:	d004      	beq.n	800721c <MIC_Print+0x138>
    SetDBLED(true, true, true);
 8007212:	2201      	movs	r2, #1
 8007214:	2101      	movs	r1, #1
 8007216:	2001      	movs	r0, #1
 8007218:	f001 fdf2 	bl	8008e00 <SetDBLED>
  }
  if(dBc < 85 && dBc >= 80){ //red
 800721c:	4b41      	ldr	r3, [pc, #260]	@ (8007324 <MIC_Print+0x240>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4946      	ldr	r1, [pc, #280]	@ (800733c <MIC_Print+0x258>)
 8007222:	1c18      	adds	r0, r3, #0
 8007224:	f7f9 f952 	bl	80004cc <__aeabi_fcmplt>
 8007228:	1e03      	subs	r3, r0, #0
 800722a:	d00c      	beq.n	8007246 <MIC_Print+0x162>
 800722c:	4b3d      	ldr	r3, [pc, #244]	@ (8007324 <MIC_Print+0x240>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4943      	ldr	r1, [pc, #268]	@ (8007340 <MIC_Print+0x25c>)
 8007232:	1c18      	adds	r0, r3, #0
 8007234:	f7f9 f968 	bl	8000508 <__aeabi_fcmpge>
 8007238:	1e03      	subs	r3, r0, #0
 800723a:	d004      	beq.n	8007246 <MIC_Print+0x162>
    SetDBLED(true, false, false);
 800723c:	2200      	movs	r2, #0
 800723e:	2100      	movs	r1, #0
 8007240:	2001      	movs	r0, #1
 8007242:	f001 fddd 	bl	8008e00 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 75){//purple
 8007246:	4b37      	ldr	r3, [pc, #220]	@ (8007324 <MIC_Print+0x240>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	493d      	ldr	r1, [pc, #244]	@ (8007340 <MIC_Print+0x25c>)
 800724c:	1c18      	adds	r0, r3, #0
 800724e:	f7f9 f93d 	bl	80004cc <__aeabi_fcmplt>
 8007252:	1e03      	subs	r3, r0, #0
 8007254:	d00c      	beq.n	8007270 <MIC_Print+0x18c>
 8007256:	4b33      	ldr	r3, [pc, #204]	@ (8007324 <MIC_Print+0x240>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	493a      	ldr	r1, [pc, #232]	@ (8007344 <MIC_Print+0x260>)
 800725c:	1c18      	adds	r0, r3, #0
 800725e:	f7f9 f953 	bl	8000508 <__aeabi_fcmpge>
 8007262:	1e03      	subs	r3, r0, #0
 8007264:	d004      	beq.n	8007270 <MIC_Print+0x18c>
    SetDBLED(true, false, true);
 8007266:	2201      	movs	r2, #1
 8007268:	2100      	movs	r1, #0
 800726a:	2001      	movs	r0, #1
 800726c:	f001 fdc8 	bl	8008e00 <SetDBLED>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 8007270:	4b2c      	ldr	r3, [pc, #176]	@ (8007324 <MIC_Print+0x240>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4933      	ldr	r1, [pc, #204]	@ (8007344 <MIC_Print+0x260>)
 8007276:	1c18      	adds	r0, r3, #0
 8007278:	f7f9 f928 	bl	80004cc <__aeabi_fcmplt>
 800727c:	1e03      	subs	r3, r0, #0
 800727e:	d00c      	beq.n	800729a <MIC_Print+0x1b6>
 8007280:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <MIC_Print+0x240>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4930      	ldr	r1, [pc, #192]	@ (8007348 <MIC_Print+0x264>)
 8007286:	1c18      	adds	r0, r3, #0
 8007288:	f7f9 f93e 	bl	8000508 <__aeabi_fcmpge>
 800728c:	1e03      	subs	r3, r0, #0
 800728e:	d004      	beq.n	800729a <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 8007290:	2200      	movs	r2, #0
 8007292:	2101      	movs	r1, #1
 8007294:	2001      	movs	r0, #1
 8007296:	f001 fdb3 	bl	8008e00 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 65){//Green
 800729a:	4b22      	ldr	r3, [pc, #136]	@ (8007324 <MIC_Print+0x240>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	492a      	ldr	r1, [pc, #168]	@ (8007348 <MIC_Print+0x264>)
 80072a0:	1c18      	adds	r0, r3, #0
 80072a2:	f7f9 f913 	bl	80004cc <__aeabi_fcmplt>
 80072a6:	1e03      	subs	r3, r0, #0
 80072a8:	d00c      	beq.n	80072c4 <MIC_Print+0x1e0>
 80072aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007324 <MIC_Print+0x240>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4927      	ldr	r1, [pc, #156]	@ (800734c <MIC_Print+0x268>)
 80072b0:	1c18      	adds	r0, r3, #0
 80072b2:	f7f9 f929 	bl	8000508 <__aeabi_fcmpge>
 80072b6:	1e03      	subs	r3, r0, #0
 80072b8:	d004      	beq.n	80072c4 <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 80072ba:	2200      	movs	r2, #0
 80072bc:	2101      	movs	r1, #1
 80072be:	2000      	movs	r0, #0
 80072c0:	f001 fd9e 	bl	8008e00 <SetDBLED>
  }
  if(dBc < 65 && dBc >= 60){//blue
 80072c4:	4b17      	ldr	r3, [pc, #92]	@ (8007324 <MIC_Print+0x240>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4920      	ldr	r1, [pc, #128]	@ (800734c <MIC_Print+0x268>)
 80072ca:	1c18      	adds	r0, r3, #0
 80072cc:	f7f9 f8fe 	bl	80004cc <__aeabi_fcmplt>
 80072d0:	1e03      	subs	r3, r0, #0
 80072d2:	d00c      	beq.n	80072ee <MIC_Print+0x20a>
 80072d4:	4b13      	ldr	r3, [pc, #76]	@ (8007324 <MIC_Print+0x240>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	491d      	ldr	r1, [pc, #116]	@ (8007350 <MIC_Print+0x26c>)
 80072da:	1c18      	adds	r0, r3, #0
 80072dc:	f7f9 f914 	bl	8000508 <__aeabi_fcmpge>
 80072e0:	1e03      	subs	r3, r0, #0
 80072e2:	d004      	beq.n	80072ee <MIC_Print+0x20a>
    SetDBLED(false, false, true);
 80072e4:	2201      	movs	r2, #1
 80072e6:	2100      	movs	r1, #0
 80072e8:	2000      	movs	r0, #0
 80072ea:	f001 fd89 	bl	8008e00 <SetDBLED>
  }
  if(dBc < 60){//light blue
 80072ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007324 <MIC_Print+0x240>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4917      	ldr	r1, [pc, #92]	@ (8007350 <MIC_Print+0x26c>)
 80072f4:	1c18      	adds	r0, r3, #0
 80072f6:	f7f9 f8e9 	bl	80004cc <__aeabi_fcmplt>
 80072fa:	1e03      	subs	r3, r0, #0
 80072fc:	d100      	bne.n	8007300 <MIC_Print+0x21c>
    SetDBLED(false, true, true);
  }


  //FFT();
}
 80072fe:	e004      	b.n	800730a <MIC_Print+0x226>
    SetDBLED(false, true, true);
 8007300:	2201      	movs	r2, #1
 8007302:	2101      	movs	r1, #1
 8007304:	2000      	movs	r0, #0
 8007306:	f001 fd7b 	bl	8008e00 <SetDBLED>
}
 800730a:	46c0      	nop			@ (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	b003      	add	sp, #12
 8007310:	bd90      	pop	{r4, r7, pc}
 8007312:	46c0      	nop			@ (mov r8, r8)
 8007314:	0801bb44 	.word	0x0801bb44
 8007318:	0801bb40 	.word	0x0801bb40
 800731c:	20001094 	.word	0x20001094
 8007320:	200020d0 	.word	0x200020d0
 8007324:	2000209c 	.word	0x2000209c
 8007328:	200020cc 	.word	0x200020cc
 800732c:	200020a0 	.word	0x200020a0
 8007330:	200020cd 	.word	0x200020cd
 8007334:	200020c8 	.word	0x200020c8
 8007338:	41200000 	.word	0x41200000
 800733c:	42aa0000 	.word	0x42aa0000
 8007340:	42a00000 	.word	0x42a00000
 8007344:	42960000 	.word	0x42960000
 8007348:	428c0000 	.word	0x428c0000
 800734c:	42820000 	.word	0x42820000
 8007350:	42700000 	.word	0x42700000

08007354 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  if(DataReady) {
 8007358:	4b0a      	ldr	r3, [pc, #40]	@ (8007384 <MIC_MeasurementDone+0x30>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00c      	beq.n	800737c <MIC_MeasurementDone+0x28>
    MIC_Print();
 8007362:	f7ff febf 	bl	80070e4 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 8007366:	4b08      	ldr	r3, [pc, #32]	@ (8007388 <MIC_MeasurementDone+0x34>)
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	4a08      	ldr	r2, [pc, #32]	@ (800738c <MIC_MeasurementDone+0x38>)
 800736c:	4908      	ldr	r1, [pc, #32]	@ (8007390 <MIC_MeasurementDone+0x3c>)
 800736e:	2003      	movs	r0, #3
 8007370:	f002 fc48 	bl	8009c04 <CreateLine>
    ResetMICIndicator();
 8007374:	f001 fe08 	bl	8008f88 <ResetMICIndicator>
    return true;
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <MIC_MeasurementDone+0x2a>
  }
  return false;
 800737c:	2300      	movs	r3, #0
}
 800737e:	0018      	movs	r0, r3
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20002099 	.word	0x20002099
 8007388:	2000002c 	.word	0x2000002c
 800738c:	0801bb50 	.word	0x0801bb50
 8007390:	0801bb30 	.word	0x0801bb30

08007394 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 800739a:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <MIC_TestMeasurementDone+0x30>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <MIC_TestMeasurementDone+0x24>
    Check = MIC_Check();
 80073a4:	1dfc      	adds	r4, r7, #7
 80073a6:	f7ff fe47 	bl	8007038 <MIC_Check>
 80073aa:	0003      	movs	r3, r0
 80073ac:	7023      	strb	r3, [r4, #0]
    ResetMICIndicator();
 80073ae:	f001 fdeb 	bl	8008f88 <ResetMICIndicator>
    return Check;
 80073b2:	1dfb      	adds	r3, r7, #7
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	e000      	b.n	80073ba <MIC_TestMeasurementDone+0x26>
  }
  return false;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	0018      	movs	r0, r3
 80073bc:	46bd      	mov	sp, r7
 80073be:	b003      	add	sp, #12
 80073c0:	bd90      	pop	{r4, r7, pc}
 80073c2:	46c0      	nop			@ (mov r8, r8)
 80073c4:	20002099 	.word	0x20002099

080073c8 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80073d0:	4b10      	ldr	r3, [pc, #64]	@ (8007414 <HAL_I2S_RxCpltCallback+0x4c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d118      	bne.n	800740c <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 80073da:	4b0f      	ldr	r3, [pc, #60]	@ (8007418 <HAL_I2S_RxCpltCallback+0x50>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 80073e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <HAL_I2S_RxCpltCallback+0x4c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	0018      	movs	r0, r3
 80073ea:	f006 fd3d 	bl	800de68 <HAL_I2S_DMAStop>
    DataReady = true;
 80073ee:	4b0b      	ldr	r3, [pc, #44]	@ (800741c <HAL_I2S_RxCpltCallback+0x54>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	e00b      	b.n	800740e <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 80073f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007420 <HAL_I2S_RxCpltCallback+0x58>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	0018      	movs	r0, r3
 80073fc:	f002 fbac 	bl	8009b58 <TimestampIsReached>
 8007400:	1e03      	subs	r3, r0, #0
 8007402:	d004      	beq.n	800740e <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8007404:	4b04      	ldr	r3, [pc, #16]	@ (8007418 <HAL_I2S_RxCpltCallback+0x50>)
 8007406:	2201      	movs	r2, #1
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	e000      	b.n	800740e <HAL_I2S_RxCpltCallback+0x46>
    return;
 800740c:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 800740e:	46bd      	mov	sp, r7
 8007410:	b002      	add	sp, #8
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20001090 	.word	0x20001090
 8007418:	20002098 	.word	0x20002098
 800741c:	20002099 	.word	0x20002099
 8007420:	20002094 	.word	0x20002094

08007424 <MIC_GetDB>:

float MIC_GetDB(void) {
 8007424:	b590      	push	{r4, r7, lr}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 800742e:	2300      	movs	r3, #0
 8007430:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 8007432:	230a      	movs	r3, #10
 8007434:	18fb      	adds	r3, r7, r3
 8007436:	2280      	movs	r2, #128	@ 0x80
 8007438:	0052      	lsls	r2, r2, #1
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	e019      	b.n	8007472 <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 800743e:	240a      	movs	r4, #10
 8007440:	193b      	adds	r3, r7, r4
 8007442:	881a      	ldrh	r2, [r3, #0]
 8007444:	4b2b      	ldr	r3, [pc, #172]	@ (80074f4 <MIC_GetDB+0xd0>)
 8007446:	0092      	lsls	r2, r2, #2
 8007448:	58d0      	ldr	r0, [r2, r3]
 800744a:	193b      	adds	r3, r7, r4
 800744c:	881a      	ldrh	r2, [r3, #0]
 800744e:	4b29      	ldr	r3, [pc, #164]	@ (80074f4 <MIC_GetDB+0xd0>)
 8007450:	0092      	lsls	r2, r2, #2
 8007452:	58d3      	ldr	r3, [r2, r3]
 8007454:	1c19      	adds	r1, r3, #0
 8007456:	f7f9 fd21 	bl	8000e9c <__aeabi_fmul>
 800745a:	1c03      	adds	r3, r0, #0
 800745c:	1c19      	adds	r1, r3, #0
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f7f9 f9ac 	bl	80007bc <__aeabi_fadd>
 8007464:	1c03      	adds	r3, r0, #0
 8007466:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 8007468:	193b      	adds	r3, r7, r4
 800746a:	881a      	ldrh	r2, [r3, #0]
 800746c:	193b      	adds	r3, r7, r4
 800746e:	3201      	adds	r2, #1
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	230a      	movs	r3, #10
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	881a      	ldrh	r2, [r3, #0]
 8007478:	2380      	movs	r3, #128	@ 0x80
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	429a      	cmp	r2, r3
 800747e:	d3de      	bcc.n	800743e <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 8007480:	2187      	movs	r1, #135	@ 0x87
 8007482:	05c9      	lsls	r1, r1, #23
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7f9 fb23 	bl	8000ad0 <__aeabi_fdiv>
 800748a:	1c03      	adds	r3, r0, #0
 800748c:	1c18      	adds	r0, r3, #0
 800748e:	f7fb ff67 	bl	8003360 <__aeabi_f2d>
 8007492:	0002      	movs	r2, r0
 8007494:	000b      	movs	r3, r1
 8007496:	0010      	movs	r0, r2
 8007498:	0019      	movs	r1, r3
 800749a:	f013 fa55 	bl	801a948 <sqrt>
 800749e:	0002      	movs	r2, r0
 80074a0:	000b      	movs	r3, r1
 80074a2:	0010      	movs	r0, r2
 80074a4:	0019      	movs	r1, r3
 80074a6:	f7fb ffa3 	bl	80033f0 <__aeabi_d2f>
 80074aa:	1c03      	adds	r3, r0, #0
 80074ac:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 80074ae:	6838      	ldr	r0, [r7, #0]
 80074b0:	f7fb ff56 	bl	8003360 <__aeabi_f2d>
 80074b4:	0002      	movs	r2, r0
 80074b6:	000b      	movs	r3, r1
 80074b8:	0010      	movs	r0, r2
 80074ba:	0019      	movs	r1, r3
 80074bc:	f013 fa0e 	bl	801a8dc <log10>
 80074c0:	2200      	movs	r2, #0
 80074c2:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <MIC_GetDB+0xd4>)
 80074c4:	f7fb f838 	bl	8002538 <__aeabi_dmul>
 80074c8:	0002      	movs	r2, r0
 80074ca:	000b      	movs	r3, r1
 80074cc:	0010      	movs	r0, r2
 80074ce:	0019      	movs	r1, r3
 80074d0:	2200      	movs	r2, #0
 80074d2:	4b0a      	ldr	r3, [pc, #40]	@ (80074fc <MIC_GetDB+0xd8>)
 80074d4:	f7fa f888 	bl	80015e8 <__aeabi_dadd>
 80074d8:	0002      	movs	r2, r0
 80074da:	000b      	movs	r3, r1
 80074dc:	0010      	movs	r0, r2
 80074de:	0019      	movs	r1, r3
 80074e0:	f7fb ff86 	bl	80033f0 <__aeabi_d2f>
 80074e4:	1c03      	adds	r3, r0, #0
 80074e6:	607b      	str	r3, [r7, #4]

    return dBValue;
 80074e8:	687b      	ldr	r3, [r7, #4]
}
 80074ea:	1c18      	adds	r0, r3, #0
 80074ec:	46bd      	mov	sp, r7
 80074ee:	b005      	add	sp, #20
 80074f0:	bd90      	pop	{r4, r7, pc}
 80074f2:	46c0      	nop			@ (mov r8, r8)
 80074f4:	200020d0 	.word	0x200020d0
 80074f8:	40340000 	.word	0x40340000
 80074fc:	405e0000 	.word	0x405e0000

08007500 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007504:	4b16      	ldr	r3, [pc, #88]	@ (8007560 <MX_RTC_Init+0x60>)
 8007506:	4a17      	ldr	r2, [pc, #92]	@ (8007564 <MX_RTC_Init+0x64>)
 8007508:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800750a:	4b15      	ldr	r3, [pc, #84]	@ (8007560 <MX_RTC_Init+0x60>)
 800750c:	2200      	movs	r2, #0
 800750e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007510:	4b13      	ldr	r3, [pc, #76]	@ (8007560 <MX_RTC_Init+0x60>)
 8007512:	227f      	movs	r2, #127	@ 0x7f
 8007514:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007516:	4b12      	ldr	r3, [pc, #72]	@ (8007560 <MX_RTC_Init+0x60>)
 8007518:	22ff      	movs	r2, #255	@ 0xff
 800751a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800751c:	4b10      	ldr	r3, [pc, #64]	@ (8007560 <MX_RTC_Init+0x60>)
 800751e:	2200      	movs	r2, #0
 8007520:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007522:	4b0f      	ldr	r3, [pc, #60]	@ (8007560 <MX_RTC_Init+0x60>)
 8007524:	2200      	movs	r2, #0
 8007526:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007528:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <MX_RTC_Init+0x60>)
 800752a:	2200      	movs	r2, #0
 800752c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800752e:	4b0c      	ldr	r3, [pc, #48]	@ (8007560 <MX_RTC_Init+0x60>)
 8007530:	2200      	movs	r2, #0
 8007532:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007534:	4b0a      	ldr	r3, [pc, #40]	@ (8007560 <MX_RTC_Init+0x60>)
 8007536:	0018      	movs	r0, r3
 8007538:	f009 fbb8 	bl	8010cac <HAL_RTC_Init>
 800753c:	1e03      	subs	r3, r0, #0
 800753e:	d001      	beq.n	8007544 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007540:	f7ff f8be 	bl	80066c0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8007544:	4b06      	ldr	r3, [pc, #24]	@ (8007560 <MX_RTC_Init+0x60>)
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	0018      	movs	r0, r3
 800754c:	f009 fdac 	bl	80110a8 <HAL_RTCEx_SetWakeUpTimer>
 8007550:	1e03      	subs	r3, r0, #0
 8007552:	d001      	beq.n	8007558 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8007554:	f7ff f8b4 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007558:	46c0      	nop			@ (mov r8, r8)
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	46c0      	nop			@ (mov r8, r8)
 8007560:	200028d0 	.word	0x200028d0
 8007564:	40002800 	.word	0x40002800

08007568 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a06      	ldr	r2, [pc, #24]	@ (8007590 <HAL_RTC_MspInit+0x28>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d106      	bne.n	8007588 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800757a:	4b06      	ldr	r3, [pc, #24]	@ (8007594 <HAL_RTC_MspInit+0x2c>)
 800757c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800757e:	4b05      	ldr	r3, [pc, #20]	@ (8007594 <HAL_RTC_MspInit+0x2c>)
 8007580:	2180      	movs	r1, #128	@ 0x80
 8007582:	02c9      	lsls	r1, r1, #11
 8007584:	430a      	orrs	r2, r1
 8007586:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007588:	46c0      	nop			@ (mov r8, r8)
 800758a:	46bd      	mov	sp, r7
 800758c:	b002      	add	sp, #8
 800758e:	bd80      	pop	{r7, pc}
 8007590:	40002800 	.word	0x40002800
 8007594:	40021000 	.word	0x40021000

08007598 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d113      	bne.n	80075de <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	22fe      	movs	r2, #254	@ 0xfe
 80075ba:	0592      	lsls	r2, r2, #22
 80075bc:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4a1a      	ldr	r2, [pc, #104]	@ (800762c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 80075c2:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007630 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 80075c8:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4a19      	ldr	r2, [pc, #100]	@ (8007634 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 80075ce:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a19      	ldr	r2, [pc, #100]	@ (8007638 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80075d4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4a18      	ldr	r2, [pc, #96]	@ (800763c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80075da:	61da      	str	r2, [r3, #28]
 80075dc:	e011      	b.n	8007602 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4a17      	ldr	r2, [pc, #92]	@ (8007640 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 80075e2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4a17      	ldr	r2, [pc, #92]	@ (8007644 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80075e8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a16      	ldr	r2, [pc, #88]	@ (8007648 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80075ee:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4a16      	ldr	r2, [pc, #88]	@ (800764c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80075f4:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4a15      	ldr	r2, [pc, #84]	@ (8007650 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80075fa:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4a15      	ldr	r2, [pc, #84]	@ (8007654 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8007600:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4a14      	ldr	r2, [pc, #80]	@ (8007658 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8007606:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4a14      	ldr	r2, [pc, #80]	@ (800765c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800760c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4a12      	ldr	r2, [pc, #72]	@ (800765c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007612:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4a12      	ldr	r2, [pc, #72]	@ (8007660 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8007618:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	0018      	movs	r0, r3
 800761e:	f000 f831 	bl	8007684 <GasIndexAlgorithm_reset>
}
 8007622:	46c0      	nop			@ (mov r8, r8)
 8007624:	46bd      	mov	sp, r7
 8007626:	b004      	add	sp, #16
 8007628:	bd80      	pop	{r7, pc}
 800762a:	46c0      	nop			@ (mov r8, r8)
 800762c:	00002710 	.word	0x00002710
 8007630:	44340000 	.word	0x44340000
 8007634:	46859800 	.word	0x46859800
 8007638:	46a05000 	.word	0x46a05000
 800763c:	41f00000 	.word	0x41f00000
 8007640:	42c80000 	.word	0x42c80000
 8007644:	00004e20 	.word	0x00004e20
 8007648:	43340000 	.word	0x43340000
 800764c:	4528c000 	.word	0x4528c000
 8007650:	45a32000 	.word	0x45a32000
 8007654:	43aa0000 	.word	0x43aa0000
 8007658:	43660000 	.word	0x43660000
 800765c:	41400000 	.word	0x41400000
 8007660:	42480000 	.word	0x42480000

08007664 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800766e:	22fe      	movs	r2, #254	@ 0xfe
 8007670:	0592      	lsls	r2, r2, #22
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	0018      	movs	r0, r3
 8007678:	f7ff ff8e 	bl	8007598 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800767c:	46c0      	nop			@ (mov r8, r8)
 800767e:	46bd      	mov	sp, r7
 8007680:	b002      	add	sp, #8
 8007682:	bd80      	pop	{r7, pc}

08007684 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	0018      	movs	r0, r3
 80076a2:	f000 f805 	bl	80076b0 <GasIndexAlgorithm__init_instances>
}
 80076a6:	46c0      	nop			@ (mov r8, r8)
 80076a8:	46bd      	mov	sp, r7
 80076aa:	b002      	add	sp, #8
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	0018      	movs	r0, r3
 80076bc:	f000 f8e8 	bl	8007890 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	0018      	movs	r0, r3
 80076c4:	f000 f9a6 	bl	8007a14 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80076c8:	1c04      	adds	r4, r0, #0
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	0018      	movs	r0, r3
 80076ce:	f000 f9ab 	bl	8007a28 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80076d2:	1c02      	adds	r2, r0, #0
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	1c21      	adds	r1, r4, #0
 80076d8:	0018      	movs	r0, r3
 80076da:	f000 fc3b 	bl	8007f54 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d107      	bne.n	80076f6 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80076e6:	23fe      	movs	r3, #254	@ 0xfe
 80076e8:	059b      	lsls	r3, r3, #22
 80076ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007714 <GasIndexAlgorithm__init_instances+0x64>)
 80076ec:	490a      	ldr	r1, [pc, #40]	@ (8007718 <GasIndexAlgorithm__init_instances+0x68>)
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fc86 	bl	8008000 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80076f4:	e005      	b.n	8007702 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80076f6:	4b09      	ldr	r3, [pc, #36]	@ (800771c <GasIndexAlgorithm__init_instances+0x6c>)
 80076f8:	4a09      	ldr	r2, [pc, #36]	@ (8007720 <GasIndexAlgorithm__init_instances+0x70>)
 80076fa:	490a      	ldr	r1, [pc, #40]	@ (8007724 <GasIndexAlgorithm__init_instances+0x74>)
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fc7f 	bl	8008000 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	0018      	movs	r0, r3
 8007706:	f000 fd35 	bl	8008174 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800770a:	46c0      	nop			@ (mov r8, r8)
 800770c:	46bd      	mov	sp, r7
 800770e:	b003      	add	sp, #12
 8007710:	bd90      	pop	{r4, r7, pc}
 8007712:	46c0      	nop			@ (mov r8, r8)
 8007714:	bc257a78 	.word	0xbc257a78
 8007718:	44198000 	.word	0x44198000
 800771c:	42c80000 	.word	0x42c80000
 8007720:	bbd4fdf4 	.word	0xbbd4fdf4
 8007724:	43550000 	.word	0x43550000

08007728 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007738:	4952      	ldr	r1, [pc, #328]	@ (8007884 <GasIndexAlgorithm_process+0x15c>)
 800773a:	1c18      	adds	r0, r3, #0
 800773c:	f7f8 fed0 	bl	80004e0 <__aeabi_fcmple>
 8007740:	1e03      	subs	r3, r0, #0
 8007742:	d00c      	beq.n	800775e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	1c19      	adds	r1, r3, #0
 800774e:	1c10      	adds	r0, r2, #0
 8007750:	f7f9 f834 	bl	80007bc <__aeabi_fadd>
 8007754:	1c03      	adds	r3, r0, #0
 8007756:	1c1a      	adds	r2, r3, #0
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	631a      	str	r2, [r3, #48]	@ 0x30
 800775c:	e080      	b.n	8007860 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	dd25      	ble.n	80077b0 <GasIndexAlgorithm_process+0x88>
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4a48      	ldr	r2, [pc, #288]	@ (8007888 <GasIndexAlgorithm_process+0x160>)
 8007768:	4293      	cmp	r3, r2
 800776a:	dc21      	bgt.n	80077b0 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	dc04      	bgt.n	8007780 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	3301      	adds	r3, #1
 800777c:	60bb      	str	r3, [r7, #8]
 800777e:	e00d      	b.n	800779c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	4a41      	ldr	r2, [pc, #260]	@ (800788c <GasIndexAlgorithm_process+0x164>)
 8007786:	4694      	mov	ip, r2
 8007788:	4463      	add	r3, ip
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	429a      	cmp	r2, r3
 800778e:	dd05      	ble.n	800779c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	4a3d      	ldr	r2, [pc, #244]	@ (800788c <GasIndexAlgorithm_process+0x164>)
 8007796:	4694      	mov	ip, r2
 8007798:	4463      	add	r3, ip
 800779a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	0018      	movs	r0, r3
 80077a6:	f7f9 fe91 	bl	80014cc <__aeabi_i2f>
 80077aa:	1c02      	adds	r2, r0, #0
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	0018      	movs	r0, r3
 80077bc:	f000 f945 	bl	8007a4a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80077c0:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80077c2:	d014      	beq.n	80077ee <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	1c11      	adds	r1, r2, #0
 80077cc:	0018      	movs	r0, r3
 80077ce:	f000 fbd1 	bl	8007f74 <GasIndexAlgorithm__mox_model__process>
 80077d2:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	1c11      	adds	r1, r2, #0
 80077e0:	0018      	movs	r0, r3
 80077e2:	f000 fc25 	bl	8008030 <GasIndexAlgorithm__sigmoid_scaled__process>
 80077e6:	1c02      	adds	r2, r0, #0
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80077ec:	e003      	b.n	80077f6 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	1c11      	adds	r1, r2, #0
 80077fe:	0018      	movs	r0, r3
 8007800:	f000 fcec 	bl	80081dc <GasIndexAlgorithm__adaptive_lowpass__process>
 8007804:	1c02      	adds	r2, r0, #0
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780e:	21fc      	movs	r1, #252	@ 0xfc
 8007810:	0589      	lsls	r1, r1, #22
 8007812:	1c18      	adds	r0, r3, #0
 8007814:	f7f8 fe5a 	bl	80004cc <__aeabi_fcmplt>
 8007818:	1e03      	subs	r3, r0, #0
 800781a:	d003      	beq.n	8007824 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	22fc      	movs	r2, #252	@ 0xfc
 8007820:	0592      	lsls	r2, r2, #22
 8007822:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007828:	2100      	movs	r1, #0
 800782a:	1c18      	adds	r0, r3, #0
 800782c:	f7f8 fe62 	bl	80004f4 <__aeabi_fcmpgt>
 8007830:	1e03      	subs	r3, r0, #0
 8007832:	d015      	beq.n	8007860 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	1c11      	adds	r1, r2, #0
 800783c:	0018      	movs	r0, r3
 800783e:	f000 fa4f 	bl	8007ce0 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	0018      	movs	r0, r3
 8007846:	f000 f8e5 	bl	8007a14 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800784a:	1c04      	adds	r4, r0, #0
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	0018      	movs	r0, r3
 8007850:	f000 f8ea 	bl	8007a28 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007854:	1c02      	adds	r2, r0, #0
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	1c21      	adds	r1, r4, #0
 800785a:	0018      	movs	r0, r3
 800785c:	f000 fb7a 	bl	8007f54 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007864:	21fc      	movs	r1, #252	@ 0xfc
 8007866:	0589      	lsls	r1, r1, #22
 8007868:	1c18      	adds	r0, r3, #0
 800786a:	f7f8 ffa7 	bl	80007bc <__aeabi_fadd>
 800786e:	1c03      	adds	r3, r0, #0
 8007870:	1c18      	adds	r0, r3, #0
 8007872:	f7f9 fe0b 	bl	800148c <__aeabi_f2iz>
 8007876:	0002      	movs	r2, r0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	601a      	str	r2, [r3, #0]
    return;
 800787c:	46c0      	nop			@ (mov r8, r8)
}
 800787e:	46bd      	mov	sp, r7
 8007880:	b005      	add	sp, #20
 8007882:	bd90      	pop	{r4, r7, pc}
 8007884:	42340000 	.word	0x42340000
 8007888:	0000fde7 	.word	0x0000fde7
 800788c:	00007fff 	.word	0x00007fff

08007890 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007890:	b5b0      	push	{r4, r5, r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	223c      	movs	r2, #60	@ 0x3c
 800789c:	2100      	movs	r1, #0
 800789e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	4952      	ldr	r1, [pc, #328]	@ (8007a04 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80078ba:	1c18      	adds	r0, r3, #0
 80078bc:	f7f9 f908 	bl	8000ad0 <__aeabi_fdiv>
 80078c0:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80078c2:	2188      	movs	r1, #136	@ 0x88
 80078c4:	05c9      	lsls	r1, r1, #23
 80078c6:	1c18      	adds	r0, r3, #0
 80078c8:	f7f9 fae8 	bl	8000e9c <__aeabi_fmul>
 80078cc:	1c03      	adds	r3, r0, #0
 80078ce:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	494a      	ldr	r1, [pc, #296]	@ (8007a04 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80078da:	1c18      	adds	r0, r3, #0
 80078dc:	f7f9 f8f8 	bl	8000ad0 <__aeabi_fdiv>
 80078e0:	1c03      	adds	r3, r0, #0
 80078e2:	1c19      	adds	r1, r3, #0
 80078e4:	1c20      	adds	r0, r4, #0
 80078e6:	f7f8 ff69 	bl	80007bc <__aeabi_fadd>
 80078ea:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80078ec:	1c19      	adds	r1, r3, #0
 80078ee:	1c28      	adds	r0, r5, #0
 80078f0:	f7f9 f8ee 	bl	8000ad0 <__aeabi_fdiv>
 80078f4:	1c03      	adds	r3, r0, #0
 80078f6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4940      	ldr	r1, [pc, #256]	@ (8007a04 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007902:	1c18      	adds	r0, r3, #0
 8007904:	f7f9 f8e4 	bl	8000ad0 <__aeabi_fdiv>
 8007908:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800790a:	2185      	movs	r1, #133	@ 0x85
 800790c:	05c9      	lsls	r1, r1, #23
 800790e:	1c18      	adds	r0, r3, #0
 8007910:	f7f9 fac4 	bl	8000e9c <__aeabi_fmul>
 8007914:	1c03      	adds	r3, r0, #0
 8007916:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	4938      	ldr	r1, [pc, #224]	@ (8007a04 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007922:	1c18      	adds	r0, r3, #0
 8007924:	f7f9 f8d4 	bl	8000ad0 <__aeabi_fdiv>
 8007928:	1c03      	adds	r3, r0, #0
 800792a:	1c19      	adds	r1, r3, #0
 800792c:	1c20      	adds	r0, r4, #0
 800792e:	f7f8 ff45 	bl	80007bc <__aeabi_fadd>
 8007932:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007934:	1c19      	adds	r1, r3, #0
 8007936:	1c28      	adds	r0, r5, #0
 8007938:	f7f9 f8ca 	bl	8000ad0 <__aeabi_fdiv>
 800793c:	1c03      	adds	r3, r0, #0
 800793e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d118      	bne.n	800797e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007950:	2188      	movs	r1, #136	@ 0x88
 8007952:	05c9      	lsls	r1, r1, #23
 8007954:	1c18      	adds	r0, r3, #0
 8007956:	f7f9 faa1 	bl	8000e9c <__aeabi_fmul>
 800795a:	1c03      	adds	r3, r0, #0
 800795c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8007962:	4929      	ldr	r1, [pc, #164]	@ (8007a08 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8007964:	1c18      	adds	r0, r3, #0
 8007966:	f7f8 ff29 	bl	80007bc <__aeabi_fadd>
 800796a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800796c:	1c19      	adds	r1, r3, #0
 800796e:	1c20      	adds	r0, r4, #0
 8007970:	f7f9 f8ae 	bl	8000ad0 <__aeabi_fdiv>
 8007974:	1c03      	adds	r3, r0, #0
 8007976:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	655a      	str	r2, [r3, #84]	@ 0x54
 800797c:	e017      	b.n	80079ae <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007982:	2188      	movs	r1, #136	@ 0x88
 8007984:	05c9      	lsls	r1, r1, #23
 8007986:	1c18      	adds	r0, r3, #0
 8007988:	f7f9 fa88 	bl	8000e9c <__aeabi_fmul>
 800798c:	1c03      	adds	r3, r0, #0
 800798e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8007994:	491d      	ldr	r1, [pc, #116]	@ (8007a0c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8007996:	1c18      	adds	r0, r3, #0
 8007998:	f7f8 ff10 	bl	80007bc <__aeabi_fadd>
 800799c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800799e:	1c19      	adds	r1, r3, #0
 80079a0:	1c20      	adds	r0, r4, #0
 80079a2:	f7f9 f895 	bl	8000ad0 <__aeabi_fdiv>
 80079a6:	1c03      	adds	r3, r0, #0
 80079a8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80079b2:	2185      	movs	r1, #133	@ 0x85
 80079b4:	05c9      	lsls	r1, r1, #23
 80079b6:	1c18      	adds	r0, r3, #0
 80079b8:	f7f9 fa70 	bl	8000e9c <__aeabi_fmul>
 80079bc:	1c03      	adds	r3, r0, #0
 80079be:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	4912      	ldr	r1, [pc, #72]	@ (8007a10 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80079c6:	1c18      	adds	r0, r3, #0
 80079c8:	f7f8 fef8 	bl	80007bc <__aeabi_fadd>
 80079cc:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80079ce:	1c19      	adds	r1, r3, #0
 80079d0:	1c20      	adds	r0, r4, #0
 80079d2:	f7f9 f87d 	bl	8000ad0 <__aeabi_fdiv>
 80079d6:	1c03      	adds	r3, r0, #0
 80079d8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80079fc:	46c0      	nop			@ (mov r8, r8)
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b002      	add	sp, #8
 8007a02:	bdb0      	pop	{r4, r5, r7, pc}
 8007a04:	45610000 	.word	0x45610000
 8007a08:	44960000 	.word	0x44960000
 8007a0c:	41a00000 	.word	0x41a00000
 8007a10:	451c4000 	.word	0x451c4000

08007a14 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8007a20:	1c18      	adds	r0, r3, #0
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b002      	add	sp, #8
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8007a38:	1c19      	adds	r1, r3, #0
 8007a3a:	1c10      	adds	r0, r2, #0
 8007a3c:	f7f8 febe 	bl	80007bc <__aeabi_fadd>
 8007a40:	1c03      	adds	r3, r0, #0
}
 8007a42:	1c18      	adds	r0, r3, #0
 8007a44:	46bd      	mov	sp, r7
 8007a46:	b002      	add	sp, #8
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	223c      	movs	r2, #60	@ 0x3c
 8007a56:	5c9b      	ldrb	r3, [r3, r2]
}
 8007a58:	0018      	movs	r0, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b002      	add	sp, #8
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8007a60:	b5b0      	push	{r4, r5, r7, lr}
 8007a62:	b08c      	sub	sp, #48	@ 0x30
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8007a6c:	1c19      	adds	r1, r3, #0
 8007a6e:	4895      	ldr	r0, [pc, #596]	@ (8007cc4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8007a70:	f7f9 fb52 	bl	8001118 <__aeabi_fsub>
 8007a74:	1c03      	adds	r3, r0, #0
 8007a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7c:	1c19      	adds	r1, r3, #0
 8007a7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a80:	f7f8 fd38 	bl	80004f4 <__aeabi_fcmpgt>
 8007a84:	1e03      	subs	r3, r0, #0
 8007a86:	d00b      	beq.n	8007aa0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007a90:	1c19      	adds	r1, r3, #0
 8007a92:	1c10      	adds	r0, r2, #0
 8007a94:	f7f8 fe92 	bl	80007bc <__aeabi_fadd>
 8007a98:	1c03      	adds	r3, r0, #0
 8007a9a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aa4:	1c19      	adds	r1, r3, #0
 8007aa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007aa8:	f7f8 fd24 	bl	80004f4 <__aeabi_fcmpgt>
 8007aac:	1e03      	subs	r3, r0, #0
 8007aae:	d00b      	beq.n	8007ac8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007ab8:	1c19      	adds	r1, r3, #0
 8007aba:	1c10      	adds	r0, r2, #0
 8007abc:	f7f8 fe7e 	bl	80007bc <__aeabi_fadd>
 8007ac0:	1c03      	adds	r3, r0, #0
 8007ac2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6959      	ldr	r1, [r3, #20]
 8007acc:	4a7e      	ldr	r2, [pc, #504]	@ (8007cc8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	f000 f9f1 	bl	8007eb8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	1c11      	adds	r1, r2, #0
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f000 f9fa 	bl	8007ed8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007ae4:	1c03      	adds	r3, r0, #0
 8007ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007af4:	1c19      	adds	r1, r3, #0
 8007af6:	1c10      	adds	r0, r2, #0
 8007af8:	f7f9 fb0e 	bl	8001118 <__aeabi_fsub>
 8007afc:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007afe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b00:	1c18      	adds	r0, r3, #0
 8007b02:	f7f9 f9cb 	bl	8000e9c <__aeabi_fmul>
 8007b06:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007b08:	1c19      	adds	r1, r3, #0
 8007b0a:	1c20      	adds	r0, r4, #0
 8007b0c:	f7f8 fe56 	bl	80007bc <__aeabi_fadd>
 8007b10:	1c03      	adds	r3, r0, #0
 8007b12:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007b1c:	1c19      	adds	r1, r3, #0
 8007b1e:	486b      	ldr	r0, [pc, #428]	@ (8007ccc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007b20:	f7f9 fafa 	bl	8001118 <__aeabi_fsub>
 8007b24:	1c03      	adds	r3, r0, #0
 8007b26:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	1c11      	adds	r1, r2, #0
 8007b30:	0018      	movs	r0, r3
 8007b32:	f000 f9d1 	bl	8007ed8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007b36:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007b38:	1c19      	adds	r1, r3, #0
 8007b3a:	1c28      	adds	r0, r5, #0
 8007b3c:	f7f9 f9ae 	bl	8000e9c <__aeabi_fmul>
 8007b40:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8007b42:	1c19      	adds	r1, r3, #0
 8007b44:	1c20      	adds	r0, r4, #0
 8007b46:	f7f8 fe39 	bl	80007bc <__aeabi_fadd>
 8007b4a:	1c03      	adds	r3, r0, #0
 8007b4c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007b4e:	4a60      	ldr	r2, [pc, #384]	@ (8007cd0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007b50:	6a39      	ldr	r1, [r7, #32]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	0018      	movs	r0, r3
 8007b56:	f000 f9af 	bl	8007eb8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	1c11      	adds	r1, r2, #0
 8007b62:	0018      	movs	r0, r3
 8007b64:	f000 f9b8 	bl	8007ed8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007b68:	1c03      	adds	r3, r0, #0
 8007b6a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b6e:	69f8      	ldr	r0, [r7, #28]
 8007b70:	f7f9 f994 	bl	8000e9c <__aeabi_fmul>
 8007b74:	1c03      	adds	r3, r0, #0
 8007b76:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6999      	ldr	r1, [r3, #24]
 8007b80:	4a51      	ldr	r2, [pc, #324]	@ (8007cc8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	0018      	movs	r0, r3
 8007b86:	f000 f997 	bl	8007eb8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	1c11      	adds	r1, r2, #0
 8007b92:	0018      	movs	r0, r3
 8007b94:	f000 f9a0 	bl	8007ed8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007b98:	1c03      	adds	r3, r0, #0
 8007b9a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007ba8:	1c19      	adds	r1, r3, #0
 8007baa:	1c10      	adds	r0, r2, #0
 8007bac:	f7f9 fab4 	bl	8001118 <__aeabi_fsub>
 8007bb0:	1c03      	adds	r3, r0, #0
 8007bb2:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8007bb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bb6:	69b8      	ldr	r0, [r7, #24]
 8007bb8:	f7f9 faae 	bl	8001118 <__aeabi_fsub>
 8007bbc:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007bbe:	1c19      	adds	r1, r3, #0
 8007bc0:	1c28      	adds	r0, r5, #0
 8007bc2:	f7f9 f96b 	bl	8000e9c <__aeabi_fmul>
 8007bc6:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007bc8:	1c19      	adds	r1, r3, #0
 8007bca:	1c20      	adds	r0, r4, #0
 8007bcc:	f7f8 fdf6 	bl	80007bc <__aeabi_fadd>
 8007bd0:	1c03      	adds	r3, r0, #0
 8007bd2:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007bdc:	1c19      	adds	r1, r3, #0
 8007bde:	483b      	ldr	r0, [pc, #236]	@ (8007ccc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007be0:	f7f9 fa9a 	bl	8001118 <__aeabi_fsub>
 8007be4:	1c03      	adds	r3, r0, #0
 8007be6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	1c11      	adds	r1, r2, #0
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f000 f971 	bl	8007ed8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007bf6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007bf8:	1c19      	adds	r1, r3, #0
 8007bfa:	1c28      	adds	r0, r5, #0
 8007bfc:	f7f9 f94e 	bl	8000e9c <__aeabi_fmul>
 8007c00:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8007c02:	1c19      	adds	r1, r3, #0
 8007c04:	1c20      	adds	r0, r4, #0
 8007c06:	f7f8 fdd9 	bl	80007bc <__aeabi_fadd>
 8007c0a:	1c03      	adds	r3, r0, #0
 8007c0c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007c0e:	4a30      	ldr	r2, [pc, #192]	@ (8007cd0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007c10:	6939      	ldr	r1, [r7, #16]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	0018      	movs	r0, r3
 8007c16:	f000 f94f 	bl	8007eb8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	1c11      	adds	r1, r2, #0
 8007c22:	0018      	movs	r0, r3
 8007c24:	f000 f958 	bl	8007ed8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007c28:	1c03      	adds	r3, r0, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007c2c:	6979      	ldr	r1, [r7, #20]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7f9 f934 	bl	8000e9c <__aeabi_fmul>
 8007c34:	1c03      	adds	r3, r0, #0
 8007c36:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	4923      	ldr	r1, [pc, #140]	@ (8007cd4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007c46:	1c18      	adds	r0, r3, #0
 8007c48:	f7f8 ff42 	bl	8000ad0 <__aeabi_fdiv>
 8007c4c:	1c03      	adds	r3, r0, #0
 8007c4e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007c50:	69f9      	ldr	r1, [r7, #28]
 8007c52:	20fe      	movs	r0, #254	@ 0xfe
 8007c54:	0580      	lsls	r0, r0, #22
 8007c56:	f7f9 fa5f 	bl	8001118 <__aeabi_fsub>
 8007c5a:	1c03      	adds	r3, r0, #0
 8007c5c:	491e      	ldr	r1, [pc, #120]	@ (8007cd8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007c5e:	1c18      	adds	r0, r3, #0
 8007c60:	f7f9 f91c 	bl	8000e9c <__aeabi_fmul>
 8007c64:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007c66:	491d      	ldr	r1, [pc, #116]	@ (8007cdc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007c68:	1c18      	adds	r0, r3, #0
 8007c6a:	f7f9 fa55 	bl	8001118 <__aeabi_fsub>
 8007c6e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007c70:	1c19      	adds	r1, r3, #0
 8007c72:	1c28      	adds	r0, r5, #0
 8007c74:	f7f9 f912 	bl	8000e9c <__aeabi_fmul>
 8007c78:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007c7a:	1c19      	adds	r1, r3, #0
 8007c7c:	1c20      	adds	r0, r4, #0
 8007c7e:	f7f8 fd9d 	bl	80007bc <__aeabi_fadd>
 8007c82:	1c03      	adds	r3, r0, #0
 8007c84:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c8e:	2100      	movs	r1, #0
 8007c90:	1c18      	adds	r0, r3, #0
 8007c92:	f7f8 fc1b 	bl	80004cc <__aeabi_fcmplt>
 8007c96:	1e03      	subs	r3, r0, #0
 8007c98:	d002      	beq.n	8007ca0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007ca8:	1c19      	adds	r1, r3, #0
 8007caa:	1c10      	adds	r0, r2, #0
 8007cac:	f7f8 fc22 	bl	80004f4 <__aeabi_fcmpgt>
 8007cb0:	1e03      	subs	r3, r0, #0
 8007cb2:	d100      	bne.n	8007cb6 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007cb4:	e002      	b.n	8007cbc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007cbc:	46c0      	nop			@ (mov r8, r8)
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	b00c      	add	sp, #48	@ 0x30
 8007cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8007cc4:	46fffe00 	.word	0x46fffe00
 8007cc8:	3c23d70a 	.word	0x3c23d70a
 8007ccc:	43ff0000 	.word	0x43ff0000
 8007cd0:	3db851ec 	.word	0x3db851ec
 8007cd4:	42700000 	.word	0x42700000
 8007cd8:	3fa66666 	.word	0x3fa66666
 8007cdc:	3e99999a 	.word	0x3e99999a

08007ce0 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	223c      	movs	r2, #60	@ 0x3c
 8007cee:	5c9b      	ldrb	r3, [r3, r2]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	4053      	eors	r3, r2
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	223c      	movs	r2, #60	@ 0x3c
 8007cfe:	2101      	movs	r1, #1
 8007d00:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8007d0e:	e0c8      	b.n	8007ea2 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d14:	4965      	ldr	r1, [pc, #404]	@ (8007eac <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007d16:	1c18      	adds	r0, r3, #0
 8007d18:	f7f8 fbf6 	bl	8000508 <__aeabi_fcmpge>
 8007d1c:	1e03      	subs	r3, r0, #0
 8007d1e:	d107      	bne.n	8007d30 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007d24:	4962      	ldr	r1, [pc, #392]	@ (8007eb0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007d26:	1c18      	adds	r0, r3, #0
 8007d28:	f7f8 fbda 	bl	80004e0 <__aeabi_fcmple>
 8007d2c:	1e03      	subs	r3, r0, #0
 8007d2e:	d00e      	beq.n	8007d4e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007d38:	1c19      	adds	r1, r3, #0
 8007d3a:	1c10      	adds	r0, r2, #0
 8007d3c:	f7f8 fd3e 	bl	80007bc <__aeabi_fadd>
 8007d40:	1c03      	adds	r3, r0, #0
 8007d42:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d52:	1c19      	adds	r1, r3, #0
 8007d54:	6838      	ldr	r0, [r7, #0]
 8007d56:	f7f9 f9df 	bl	8001118 <__aeabi_fsub>
 8007d5a:	1c03      	adds	r3, r0, #0
 8007d5c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	0018      	movs	r0, r3
 8007d62:	f7ff fe7d 	bl	8007a60 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	1c19      	adds	r1, r3, #0
 8007d6c:	6838      	ldr	r0, [r7, #0]
 8007d6e:	f7f9 f9d3 	bl	8001118 <__aeabi_fsub>
 8007d72:	1c03      	adds	r3, r0, #0
 8007d74:	2185      	movs	r1, #133	@ 0x85
 8007d76:	05c9      	lsls	r1, r1, #23
 8007d78:	1c18      	adds	r0, r3, #0
 8007d7a:	f7f8 fea9 	bl	8000ad0 <__aeabi_fdiv>
 8007d7e:	1c03      	adds	r3, r0, #0
 8007d80:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007d82:	2100      	movs	r1, #0
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7f8 fba1 	bl	80004cc <__aeabi_fcmplt>
 8007d8a:	1e03      	subs	r3, r0, #0
 8007d8c:	d008      	beq.n	8007da0 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d92:	68f9      	ldr	r1, [r7, #12]
 8007d94:	1c18      	adds	r0, r3, #0
 8007d96:	f7f9 f9bf 	bl	8001118 <__aeabi_fsub>
 8007d9a:	1c03      	adds	r3, r0, #0
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	e007      	b.n	8007db0 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da4:	1c19      	adds	r1, r3, #0
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7f8 fd08 	bl	80007bc <__aeabi_fadd>
 8007dac:	1c03      	adds	r3, r0, #0
 8007dae:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007db0:	23fe      	movs	r3, #254	@ 0xfe
 8007db2:	059b      	lsls	r3, r3, #22
 8007db4:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007db6:	493f      	ldr	r1, [pc, #252]	@ (8007eb4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007db8:	6978      	ldr	r0, [r7, #20]
 8007dba:	f7f8 fb9b 	bl	80004f4 <__aeabi_fcmpgt>
 8007dbe:	1e03      	subs	r3, r0, #0
 8007dc0:	d010      	beq.n	8007de4 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007dc2:	493c      	ldr	r1, [pc, #240]	@ (8007eb4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007dc4:	6978      	ldr	r0, [r7, #20]
 8007dc6:	f7f8 fe83 	bl	8000ad0 <__aeabi_fdiv>
 8007dca:	1c03      	adds	r3, r0, #0
 8007dcc:	1c1c      	adds	r4, r3, #0
 8007dce:	4939      	ldr	r1, [pc, #228]	@ (8007eb4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007dd0:	6978      	ldr	r0, [r7, #20]
 8007dd2:	f7f8 fe7d 	bl	8000ad0 <__aeabi_fdiv>
 8007dd6:	1c03      	adds	r3, r0, #0
 8007dd8:	1c19      	adds	r1, r3, #0
 8007dda:	1c20      	adds	r0, r4, #0
 8007ddc:	f7f9 f85e 	bl	8000e9c <__aeabi_fmul>
 8007de0:	1c03      	adds	r3, r0, #0
 8007de2:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007de8:	1c19      	adds	r1, r3, #0
 8007dea:	2085      	movs	r0, #133	@ 0x85
 8007dec:	05c0      	lsls	r0, r0, #23
 8007dee:	f7f9 f993 	bl	8001118 <__aeabi_fsub>
 8007df2:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007df4:	6939      	ldr	r1, [r7, #16]
 8007df6:	1c18      	adds	r0, r3, #0
 8007df8:	f7f9 f850 	bl	8000e9c <__aeabi_fmul>
 8007dfc:	1c03      	adds	r3, r0, #0
 8007dfe:	1c18      	adds	r0, r3, #0
 8007e00:	f012 fdf0 	bl	801a9e4 <sqrtf>
 8007e04:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007e0e:	2185      	movs	r1, #133	@ 0x85
 8007e10:	05c9      	lsls	r1, r1, #23
 8007e12:	6938      	ldr	r0, [r7, #16]
 8007e14:	f7f9 f842 	bl	8000e9c <__aeabi_fmul>
 8007e18:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007e1a:	1c19      	adds	r1, r3, #0
 8007e1c:	1c28      	adds	r0, r5, #0
 8007e1e:	f7f8 fe57 	bl	8000ad0 <__aeabi_fdiv>
 8007e22:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007e24:	1c19      	adds	r1, r3, #0
 8007e26:	1c20      	adds	r0, r4, #0
 8007e28:	f7f9 f838 	bl	8000e9c <__aeabi_fmul>
 8007e2c:	1c03      	adds	r3, r0, #0
 8007e2e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e34:	68f9      	ldr	r1, [r7, #12]
 8007e36:	1c18      	adds	r0, r3, #0
 8007e38:	f7f9 f830 	bl	8000e9c <__aeabi_fmul>
 8007e3c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007e3e:	6939      	ldr	r1, [r7, #16]
 8007e40:	1c18      	adds	r0, r3, #0
 8007e42:	f7f8 fe45 	bl	8000ad0 <__aeabi_fdiv>
 8007e46:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007e48:	68f9      	ldr	r1, [r7, #12]
 8007e4a:	1c18      	adds	r0, r3, #0
 8007e4c:	f7f9 f826 	bl	8000e9c <__aeabi_fmul>
 8007e50:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007e52:	1c19      	adds	r1, r3, #0
 8007e54:	1c20      	adds	r0, r4, #0
 8007e56:	f7f8 fcb1 	bl	80007bc <__aeabi_fadd>
 8007e5a:	1c03      	adds	r3, r0, #0
 8007e5c:	1c18      	adds	r0, r3, #0
 8007e5e:	f012 fdc1 	bl	801a9e4 <sqrtf>
 8007e62:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007e64:	1c19      	adds	r1, r3, #0
 8007e66:	1c30      	adds	r0, r6, #0
 8007e68:	f7f9 f818 	bl	8000e9c <__aeabi_fmul>
 8007e6c:	1c03      	adds	r3, r0, #0
 8007e6e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e7c:	68f9      	ldr	r1, [r7, #12]
 8007e7e:	1c18      	adds	r0, r3, #0
 8007e80:	f7f9 f80c 	bl	8000e9c <__aeabi_fmul>
 8007e84:	1c03      	adds	r3, r0, #0
 8007e86:	2182      	movs	r1, #130	@ 0x82
 8007e88:	05c9      	lsls	r1, r1, #23
 8007e8a:	1c18      	adds	r0, r3, #0
 8007e8c:	f7f8 fe20 	bl	8000ad0 <__aeabi_fdiv>
 8007e90:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007e92:	1c19      	adds	r1, r3, #0
 8007e94:	1c20      	adds	r0, r4, #0
 8007e96:	f7f8 fc91 	bl	80007bc <__aeabi_fadd>
 8007e9a:	1c03      	adds	r3, r0, #0
 8007e9c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007ea2:	46c0      	nop			@ (mov r8, r8)
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	b007      	add	sp, #28
 8007ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eaa:	46c0      	nop			@ (mov r8, r8)
 8007eac:	42c80000 	.word	0x42c80000
 8007eb0:	c2c80000 	.word	0xc2c80000
 8007eb4:	44b40000 	.word	0x44b40000

08007eb8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ed0:	46c0      	nop			@ (mov r8, r8)
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	b004      	add	sp, #16
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007ed8:	b590      	push	{r4, r7, lr}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eea:	1c19      	adds	r1, r3, #0
 8007eec:	6838      	ldr	r0, [r7, #0]
 8007eee:	f7f9 f913 	bl	8001118 <__aeabi_fsub>
 8007ef2:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007ef4:	1c19      	adds	r1, r3, #0
 8007ef6:	1c20      	adds	r0, r4, #0
 8007ef8:	f7f8 ffd0 	bl	8000e9c <__aeabi_fmul>
 8007efc:	1c03      	adds	r3, r0, #0
 8007efe:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007f00:	4912      	ldr	r1, [pc, #72]	@ (8007f4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7f8 fae2 	bl	80004cc <__aeabi_fcmplt>
 8007f08:	1e03      	subs	r3, r0, #0
 8007f0a:	d002      	beq.n	8007f12 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007f0c:	23fe      	movs	r3, #254	@ 0xfe
 8007f0e:	059b      	lsls	r3, r3, #22
 8007f10:	e018      	b.n	8007f44 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007f12:	490f      	ldr	r1, [pc, #60]	@ (8007f50 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7f8 faed 	bl	80004f4 <__aeabi_fcmpgt>
 8007f1a:	1e03      	subs	r3, r0, #0
 8007f1c:	d001      	beq.n	8007f22 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e010      	b.n	8007f44 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1c18      	adds	r0, r3, #0
 8007f26:	f012 fd35 	bl	801a994 <expf>
 8007f2a:	1c03      	adds	r3, r0, #0
 8007f2c:	21fe      	movs	r1, #254	@ 0xfe
 8007f2e:	0589      	lsls	r1, r1, #22
 8007f30:	1c18      	adds	r0, r3, #0
 8007f32:	f7f8 fc43 	bl	80007bc <__aeabi_fadd>
 8007f36:	1c03      	adds	r3, r0, #0
 8007f38:	1c19      	adds	r1, r3, #0
 8007f3a:	20fe      	movs	r0, #254	@ 0xfe
 8007f3c:	0580      	lsls	r0, r0, #22
 8007f3e:	f7f8 fdc7 	bl	8000ad0 <__aeabi_fdiv>
 8007f42:	1c03      	adds	r3, r0, #0
    }
}
 8007f44:	1c18      	adds	r0, r3, #0
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b005      	add	sp, #20
 8007f4a:	bd90      	pop	{r4, r7, pc}
 8007f4c:	c2480000 	.word	0xc2480000
 8007f50:	42480000 	.word	0x42480000

08007f54 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007f6c:	46c0      	nop			@ (mov r8, r8)
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	b004      	add	sp, #16
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007f74:	b590      	push	{r4, r7, lr}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d114      	bne.n	8007fb0 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f8a:	1c19      	adds	r1, r3, #0
 8007f8c:	6838      	ldr	r0, [r7, #0]
 8007f8e:	f7f9 f8c3 	bl	8001118 <__aeabi_fsub>
 8007f92:	1c03      	adds	r3, r0, #0
 8007f94:	4918      	ldr	r1, [pc, #96]	@ (8007ff8 <GasIndexAlgorithm__mox_model__process+0x84>)
 8007f96:	1c18      	adds	r0, r3, #0
 8007f98:	f7f8 fd9a 	bl	8000ad0 <__aeabi_fdiv>
 8007f9c:	1c03      	adds	r3, r0, #0
 8007f9e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007fa4:	1c19      	adds	r1, r3, #0
 8007fa6:	1c10      	adds	r0, r2, #0
 8007fa8:	f7f8 ff78 	bl	8000e9c <__aeabi_fmul>
 8007fac:	1c03      	adds	r3, r0, #0
 8007fae:	e01f      	b.n	8007ff0 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fb4:	1c19      	adds	r1, r3, #0
 8007fb6:	6838      	ldr	r0, [r7, #0]
 8007fb8:	f7f9 f8ae 	bl	8001118 <__aeabi_fsub>
 8007fbc:	1c03      	adds	r3, r0, #0
 8007fbe:	1c1a      	adds	r2, r3, #0
 8007fc0:	2380      	movs	r3, #128	@ 0x80
 8007fc2:	061b      	lsls	r3, r3, #24
 8007fc4:	4053      	eors	r3, r2
 8007fc6:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fcc:	490b      	ldr	r1, [pc, #44]	@ (8007ffc <GasIndexAlgorithm__mox_model__process+0x88>)
 8007fce:	1c18      	adds	r0, r3, #0
 8007fd0:	f7f8 fbf4 	bl	80007bc <__aeabi_fadd>
 8007fd4:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007fd6:	1c19      	adds	r1, r3, #0
 8007fd8:	1c20      	adds	r0, r4, #0
 8007fda:	f7f8 fd79 	bl	8000ad0 <__aeabi_fdiv>
 8007fde:	1c03      	adds	r3, r0, #0
 8007fe0:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007fe6:	1c19      	adds	r1, r3, #0
 8007fe8:	1c10      	adds	r0, r2, #0
 8007fea:	f7f8 ff57 	bl	8000e9c <__aeabi_fmul>
 8007fee:	1c03      	adds	r3, r0, #0
    }
}
 8007ff0:	1c18      	adds	r0, r3, #0
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	b003      	add	sp, #12
 8007ff6:	bd90      	pop	{r4, r7, pc}
 8007ff8:	44fa0000 	.word	0x44fa0000
 8007ffc:	435c0000 	.word	0x435c0000

08008000 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2180      	movs	r1, #128	@ 0x80
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2184      	movs	r1, #132	@ 0x84
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2188      	movs	r1, #136	@ 0x88
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	505a      	str	r2, [r3, r1]
}
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	46bd      	mov	sp, r7
 800802a:	b004      	add	sp, #16
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8008030:	b590      	push	{r4, r7, lr}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2280      	movs	r2, #128	@ 0x80
 800803e:	589c      	ldr	r4, [r3, r2]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2284      	movs	r2, #132	@ 0x84
 8008044:	589b      	ldr	r3, [r3, r2]
 8008046:	1c19      	adds	r1, r3, #0
 8008048:	6838      	ldr	r0, [r7, #0]
 800804a:	f7f9 f865 	bl	8001118 <__aeabi_fsub>
 800804e:	1c03      	adds	r3, r0, #0
 8008050:	1c19      	adds	r1, r3, #0
 8008052:	1c20      	adds	r0, r4, #0
 8008054:	f7f8 ff22 	bl	8000e9c <__aeabi_fmul>
 8008058:	1c03      	adds	r3, r0, #0
 800805a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800805c:	4940      	ldr	r1, [pc, #256]	@ (8008160 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800805e:	68b8      	ldr	r0, [r7, #8]
 8008060:	f7f8 fa34 	bl	80004cc <__aeabi_fcmplt>
 8008064:	1e03      	subs	r3, r0, #0
 8008066:	d001      	beq.n	800806c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8008068:	4b3e      	ldr	r3, [pc, #248]	@ (8008164 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800806a:	e075      	b.n	8008158 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800806c:	493e      	ldr	r1, [pc, #248]	@ (8008168 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800806e:	68b8      	ldr	r0, [r7, #8]
 8008070:	f7f8 fa40 	bl	80004f4 <__aeabi_fcmpgt>
 8008074:	1e03      	subs	r3, r0, #0
 8008076:	d001      	beq.n	800807c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8008078:	2300      	movs	r3, #0
 800807a:	e06d      	b.n	8008158 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800807c:	2100      	movs	r1, #0
 800807e:	6838      	ldr	r0, [r7, #0]
 8008080:	f7f8 fa42 	bl	8000508 <__aeabi_fcmpge>
 8008084:	1e03      	subs	r3, r0, #0
 8008086:	d047      	beq.n	8008118 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2288      	movs	r2, #136	@ 0x88
 800808c:	589b      	ldr	r3, [r3, r2]
 800808e:	21fe      	movs	r1, #254	@ 0xfe
 8008090:	0589      	lsls	r1, r1, #22
 8008092:	1c18      	adds	r0, r3, #0
 8008094:	f7f8 fa14 	bl	80004c0 <__aeabi_fcmpeq>
 8008098:	1e03      	subs	r3, r0, #0
 800809a:	d00e      	beq.n	80080ba <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	1c19      	adds	r1, r3, #0
 80080a2:	20fe      	movs	r0, #254	@ 0xfe
 80080a4:	0580      	lsls	r0, r0, #22
 80080a6:	f7f9 f837 	bl	8001118 <__aeabi_fsub>
 80080aa:	1c03      	adds	r3, r0, #0
 80080ac:	492f      	ldr	r1, [pc, #188]	@ (800816c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80080ae:	1c18      	adds	r0, r3, #0
 80080b0:	f7f8 fef4 	bl	8000e9c <__aeabi_fmul>
 80080b4:	1c03      	adds	r3, r0, #0
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	e012      	b.n	80080e0 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	492c      	ldr	r1, [pc, #176]	@ (8008170 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80080c0:	1c18      	adds	r0, r3, #0
 80080c2:	f7f8 feeb 	bl	8000e9c <__aeabi_fmul>
 80080c6:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80080c8:	1c19      	adds	r1, r3, #0
 80080ca:	4826      	ldr	r0, [pc, #152]	@ (8008164 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80080cc:	f7f9 f824 	bl	8001118 <__aeabi_fsub>
 80080d0:	1c03      	adds	r3, r0, #0
 80080d2:	2181      	movs	r1, #129	@ 0x81
 80080d4:	05c9      	lsls	r1, r1, #23
 80080d6:	1c18      	adds	r0, r3, #0
 80080d8:	f7f8 fcfa 	bl	8000ad0 <__aeabi_fdiv>
 80080dc:	1c03      	adds	r3, r0, #0
 80080de:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 80080e0:	4920      	ldr	r1, [pc, #128]	@ (8008164 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7f8 fb6a 	bl	80007bc <__aeabi_fadd>
 80080e8:	1c03      	adds	r3, r0, #0
 80080ea:	1c1c      	adds	r4, r3, #0
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	1c18      	adds	r0, r3, #0
 80080f0:	f012 fc50 	bl	801a994 <expf>
 80080f4:	1c03      	adds	r3, r0, #0
 80080f6:	21fe      	movs	r1, #254	@ 0xfe
 80080f8:	0589      	lsls	r1, r1, #22
 80080fa:	1c18      	adds	r0, r3, #0
 80080fc:	f7f8 fb5e 	bl	80007bc <__aeabi_fadd>
 8008100:	1c03      	adds	r3, r0, #0
 8008102:	1c19      	adds	r1, r3, #0
 8008104:	1c20      	adds	r0, r4, #0
 8008106:	f7f8 fce3 	bl	8000ad0 <__aeabi_fdiv>
 800810a:	1c03      	adds	r3, r0, #0
 800810c:	68f9      	ldr	r1, [r7, #12]
 800810e:	1c18      	adds	r0, r3, #0
 8008110:	f7f9 f802 	bl	8001118 <__aeabi_fsub>
 8008114:	1c03      	adds	r3, r0, #0
 8008116:	e01f      	b.n	8008158 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2188      	movs	r1, #136	@ 0x88
 8008120:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8008122:	1c19      	adds	r1, r3, #0
 8008124:	1c10      	adds	r0, r2, #0
 8008126:	f7f8 fcd3 	bl	8000ad0 <__aeabi_fdiv>
 800812a:	1c03      	adds	r3, r0, #0
 800812c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	1c18      	adds	r0, r3, #0
 8008132:	f012 fc2f 	bl	801a994 <expf>
 8008136:	1c03      	adds	r3, r0, #0
 8008138:	21fe      	movs	r1, #254	@ 0xfe
 800813a:	0589      	lsls	r1, r1, #22
 800813c:	1c18      	adds	r0, r3, #0
 800813e:	f7f8 fb3d 	bl	80007bc <__aeabi_fadd>
 8008142:	1c03      	adds	r3, r0, #0
 8008144:	1c19      	adds	r1, r3, #0
 8008146:	4807      	ldr	r0, [pc, #28]	@ (8008164 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008148:	f7f8 fcc2 	bl	8000ad0 <__aeabi_fdiv>
 800814c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800814e:	1c19      	adds	r1, r3, #0
 8008150:	1c20      	adds	r0, r4, #0
 8008152:	f7f8 fea3 	bl	8000e9c <__aeabi_fmul>
 8008156:	1c03      	adds	r3, r0, #0
        }
    }
}
 8008158:	1c18      	adds	r0, r3, #0
 800815a:	46bd      	mov	sp, r7
 800815c:	b005      	add	sp, #20
 800815e:	bd90      	pop	{r4, r7, pc}
 8008160:	c2480000 	.word	0xc2480000
 8008164:	43fa0000 	.word	0x43fa0000
 8008168:	42480000 	.word	0x42480000
 800816c:	3f8041ab 	.word	0x3f8041ab
 8008170:	40a00000 	.word	0x40a00000

08008174 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008174:	b590      	push	{r4, r7, lr}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	4913      	ldr	r1, [pc, #76]	@ (80081d4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8008186:	1c18      	adds	r0, r3, #0
 8008188:	f7f8 fb18 	bl	80007bc <__aeabi_fadd>
 800818c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800818e:	1c19      	adds	r1, r3, #0
 8008190:	1c20      	adds	r0, r4, #0
 8008192:	f7f8 fc9d 	bl	8000ad0 <__aeabi_fdiv>
 8008196:	1c03      	adds	r3, r0, #0
 8008198:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	228c      	movs	r2, #140	@ 0x8c
 800819e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	490b      	ldr	r1, [pc, #44]	@ (80081d8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80081aa:	1c18      	adds	r0, r3, #0
 80081ac:	f7f8 fb06 	bl	80007bc <__aeabi_fadd>
 80081b0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80081b2:	1c19      	adds	r1, r3, #0
 80081b4:	1c20      	adds	r0, r4, #0
 80081b6:	f7f8 fc8b 	bl	8000ad0 <__aeabi_fdiv>
 80081ba:	1c03      	adds	r3, r0, #0
 80081bc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2290      	movs	r2, #144	@ 0x90
 80081c2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2294      	movs	r2, #148	@ 0x94
 80081c8:	2100      	movs	r1, #0
 80081ca:	5499      	strb	r1, [r3, r2]
}
 80081cc:	46c0      	nop			@ (mov r8, r8)
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b003      	add	sp, #12
 80081d2:	bd90      	pop	{r4, r7, pc}
 80081d4:	41a00000 	.word	0x41a00000
 80081d8:	43fa0000 	.word	0x43fa0000

080081dc <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80081dc:	b590      	push	{r4, r7, lr}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2294      	movs	r2, #148	@ 0x94
 80081ea:	5c9b      	ldrb	r3, [r3, r2]
 80081ec:	2201      	movs	r2, #1
 80081ee:	4053      	eors	r3, r2
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00f      	beq.n	8008216 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2198      	movs	r1, #152	@ 0x98
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	219c      	movs	r1, #156	@ 0x9c
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	21a0      	movs	r1, #160	@ 0xa0
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2294      	movs	r2, #148	@ 0x94
 8008212:	2101      	movs	r1, #1
 8008214:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	228c      	movs	r2, #140	@ 0x8c
 800821a:	589b      	ldr	r3, [r3, r2]
 800821c:	1c19      	adds	r1, r3, #0
 800821e:	20fe      	movs	r0, #254	@ 0xfe
 8008220:	0580      	lsls	r0, r0, #22
 8008222:	f7f8 ff79 	bl	8001118 <__aeabi_fsub>
 8008226:	1c03      	adds	r3, r0, #0
 8008228:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2298      	movs	r2, #152	@ 0x98
 800822e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008230:	1c19      	adds	r1, r3, #0
 8008232:	f7f8 fe33 	bl	8000e9c <__aeabi_fmul>
 8008236:	1c03      	adds	r3, r0, #0
 8008238:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	228c      	movs	r2, #140	@ 0x8c
 800823e:	589b      	ldr	r3, [r3, r2]
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	1c18      	adds	r0, r3, #0
 8008244:	f7f8 fe2a 	bl	8000e9c <__aeabi_fmul>
 8008248:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800824a:	1c19      	adds	r1, r3, #0
 800824c:	1c20      	adds	r0, r4, #0
 800824e:	f7f8 fab5 	bl	80007bc <__aeabi_fadd>
 8008252:	1c03      	adds	r3, r0, #0
 8008254:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2298      	movs	r2, #152	@ 0x98
 800825a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2290      	movs	r2, #144	@ 0x90
 8008260:	589b      	ldr	r3, [r3, r2]
 8008262:	1c19      	adds	r1, r3, #0
 8008264:	20fe      	movs	r0, #254	@ 0xfe
 8008266:	0580      	lsls	r0, r0, #22
 8008268:	f7f8 ff56 	bl	8001118 <__aeabi_fsub>
 800826c:	1c03      	adds	r3, r0, #0
 800826e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	229c      	movs	r2, #156	@ 0x9c
 8008274:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008276:	1c19      	adds	r1, r3, #0
 8008278:	f7f8 fe10 	bl	8000e9c <__aeabi_fmul>
 800827c:	1c03      	adds	r3, r0, #0
 800827e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2290      	movs	r2, #144	@ 0x90
 8008284:	589b      	ldr	r3, [r3, r2]
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	1c18      	adds	r0, r3, #0
 800828a:	f7f8 fe07 	bl	8000e9c <__aeabi_fmul>
 800828e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8008290:	1c19      	adds	r1, r3, #0
 8008292:	1c20      	adds	r0, r4, #0
 8008294:	f7f8 fa92 	bl	80007bc <__aeabi_fadd>
 8008298:	1c03      	adds	r3, r0, #0
 800829a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	229c      	movs	r2, #156	@ 0x9c
 80082a0:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2298      	movs	r2, #152	@ 0x98
 80082a6:	589a      	ldr	r2, [r3, r2]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	219c      	movs	r1, #156	@ 0x9c
 80082ac:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80082ae:	1c19      	adds	r1, r3, #0
 80082b0:	1c10      	adds	r0, r2, #0
 80082b2:	f7f8 ff31 	bl	8001118 <__aeabi_fsub>
 80082b6:	1c03      	adds	r3, r0, #0
 80082b8:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80082ba:	2100      	movs	r1, #0
 80082bc:	6978      	ldr	r0, [r7, #20]
 80082be:	f7f8 f905 	bl	80004cc <__aeabi_fcmplt>
 80082c2:	1e03      	subs	r3, r0, #0
 80082c4:	d004      	beq.n	80082d0 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2280      	movs	r2, #128	@ 0x80
 80082ca:	0612      	lsls	r2, r2, #24
 80082cc:	4053      	eors	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80082d0:	4923      	ldr	r1, [pc, #140]	@ (8008360 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80082d2:	6978      	ldr	r0, [r7, #20]
 80082d4:	f7f8 fde2 	bl	8000e9c <__aeabi_fmul>
 80082d8:	1c03      	adds	r3, r0, #0
 80082da:	1c18      	adds	r0, r3, #0
 80082dc:	f012 fb5a 	bl	801a994 <expf>
 80082e0:	1c03      	adds	r3, r0, #0
 80082e2:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 80082e4:	491f      	ldr	r1, [pc, #124]	@ (8008364 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 80082e6:	6938      	ldr	r0, [r7, #16]
 80082e8:	f7f8 fdd8 	bl	8000e9c <__aeabi_fmul>
 80082ec:	1c03      	adds	r3, r0, #0
 80082ee:	491e      	ldr	r1, [pc, #120]	@ (8008368 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80082f0:	1c18      	adds	r0, r3, #0
 80082f2:	f7f8 fa63 	bl	80007bc <__aeabi_fadd>
 80082f6:	1c03      	adds	r3, r0, #0
 80082f8:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685c      	ldr	r4, [r3, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	1c18      	adds	r0, r3, #0
 8008306:	f7f8 fa59 	bl	80007bc <__aeabi_fadd>
 800830a:	1c03      	adds	r3, r0, #0
 800830c:	1c19      	adds	r1, r3, #0
 800830e:	1c20      	adds	r0, r4, #0
 8008310:	f7f8 fbde 	bl	8000ad0 <__aeabi_fdiv>
 8008314:	1c03      	adds	r3, r0, #0
 8008316:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	20fe      	movs	r0, #254	@ 0xfe
 800831c:	0580      	lsls	r0, r0, #22
 800831e:	f7f8 fefb 	bl	8001118 <__aeabi_fsub>
 8008322:	1c03      	adds	r3, r0, #0
 8008324:	1c18      	adds	r0, r3, #0
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	22a0      	movs	r2, #160	@ 0xa0
 800832a:	589b      	ldr	r3, [r3, r2]
 800832c:	1c19      	adds	r1, r3, #0
 800832e:	f7f8 fdb5 	bl	8000e9c <__aeabi_fmul>
 8008332:	1c03      	adds	r3, r0, #0
 8008334:	1c1c      	adds	r4, r3, #0
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	68b8      	ldr	r0, [r7, #8]
 800833a:	f7f8 fdaf 	bl	8000e9c <__aeabi_fmul>
 800833e:	1c03      	adds	r3, r0, #0
 8008340:	1c19      	adds	r1, r3, #0
 8008342:	1c20      	adds	r0, r4, #0
 8008344:	f7f8 fa3a 	bl	80007bc <__aeabi_fadd>
 8008348:	1c03      	adds	r3, r0, #0
 800834a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	22a0      	movs	r2, #160	@ 0xa0
 8008350:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	22a0      	movs	r2, #160	@ 0xa0
 8008356:	589b      	ldr	r3, [r3, r2]
}
 8008358:	1c18      	adds	r0, r3, #0
 800835a:	46bd      	mov	sp, r7
 800835c:	b007      	add	sp, #28
 800835e:	bd90      	pop	{r4, r7, pc}
 8008360:	be4ccccd 	.word	0xbe4ccccd
 8008364:	43f00000 	.word	0x43f00000
 8008368:	41a00000 	.word	0x41a00000

0800836c <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800836c:	b590      	push	{r4, r7, lr}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6039      	str	r1, [r7, #0]
 8008374:	0011      	movs	r1, r2
 8008376:	1dfb      	adds	r3, r7, #7
 8008378:	1c02      	adds	r2, r0, #0
 800837a:	701a      	strb	r2, [r3, #0]
 800837c:	1dbb      	adds	r3, r7, #6
 800837e:	1c0a      	adds	r2, r1, #0
 8008380:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008382:	4b08      	ldr	r3, [pc, #32]	@ (80083a4 <ReadRegister+0x38>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d008      	beq.n	800839c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800838a:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <ReadRegister+0x38>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	1dba      	adds	r2, r7, #6
 8008390:	7814      	ldrb	r4, [r2, #0]
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	1dfa      	adds	r2, r7, #7
 8008396:	7810      	ldrb	r0, [r2, #0]
 8008398:	0022      	movs	r2, r4
 800839a:	4798      	blx	r3
  }
}
 800839c:	46c0      	nop			@ (mov r8, r8)
 800839e:	46bd      	mov	sp, r7
 80083a0:	b003      	add	sp, #12
 80083a2:	bd90      	pop	{r4, r7, pc}
 80083a4:	200028f4 	.word	0x200028f4

080083a8 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80083a8:	b590      	push	{r4, r7, lr}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6039      	str	r1, [r7, #0]
 80083b0:	0011      	movs	r1, r2
 80083b2:	1dfb      	adds	r3, r7, #7
 80083b4:	1c02      	adds	r2, r0, #0
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	1dbb      	adds	r3, r7, #6
 80083ba:	1c0a      	adds	r2, r1, #0
 80083bc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80083be:	4b08      	ldr	r3, [pc, #32]	@ (80083e0 <WriteRegister+0x38>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d008      	beq.n	80083d8 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80083c6:	4b06      	ldr	r3, [pc, #24]	@ (80083e0 <WriteRegister+0x38>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	1dba      	adds	r2, r7, #6
 80083cc:	7814      	ldrb	r4, [r2, #0]
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	1dfa      	adds	r2, r7, #7
 80083d2:	7810      	ldrb	r0, [r2, #0]
 80083d4:	0022      	movs	r2, r4
 80083d6:	4798      	blx	r3
  }
}
 80083d8:	46c0      	nop			@ (mov r8, r8)
 80083da:	46bd      	mov	sp, r7
 80083dc:	b003      	add	sp, #12
 80083de:	bd90      	pop	{r4, r7, pc}
 80083e0:	200028f8 	.word	0x200028f8

080083e4 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80083ee:	4b07      	ldr	r3, [pc, #28]	@ (800840c <SGP_Init+0x28>)
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80083f4:	4b06      	ldr	r3, [pc, #24]	@ (8008410 <SGP_Init+0x2c>)
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80083fa:	4b06      	ldr	r3, [pc, #24]	@ (8008414 <SGP_Init+0x30>)
 80083fc:	2100      	movs	r1, #0
 80083fe:	0018      	movs	r0, r3
 8008400:	f7ff f930 	bl	8007664 <GasIndexAlgorithm_init>
}
 8008404:	46c0      	nop			@ (mov r8, r8)
 8008406:	46bd      	mov	sp, r7
 8008408:	b002      	add	sp, #8
 800840a:	bd80      	pop	{r7, pc}
 800840c:	200028f4 	.word	0x200028f4
 8008410:	200028f8 	.word	0x200028f8
 8008414:	20002908 	.word	0x20002908

08008418 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800841c:	4b13      	ldr	r3, [pc, #76]	@ (800846c <SGP_StartMeasurement+0x54>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00d      	beq.n	8008440 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008424:	4b12      	ldr	r3, [pc, #72]	@ (8008470 <SGP_StartMeasurement+0x58>)
 8008426:	2208      	movs	r2, #8
 8008428:	0019      	movs	r1, r3
 800842a:	2059      	movs	r0, #89	@ 0x59
 800842c:	f7ff ffbc 	bl	80083a8 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008430:	f001 fc5a 	bl	8009ce8 <GetCurrentHalTicks>
 8008434:	0003      	movs	r3, r0
 8008436:	331e      	adds	r3, #30
 8008438:	001a      	movs	r2, r3
 800843a:	4b0e      	ldr	r3, [pc, #56]	@ (8008474 <SGP_StartMeasurement+0x5c>)
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	e00c      	b.n	800845a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008440:	4b0d      	ldr	r3, [pc, #52]	@ (8008478 <SGP_StartMeasurement+0x60>)
 8008442:	2208      	movs	r2, #8
 8008444:	0019      	movs	r1, r3
 8008446:	2059      	movs	r0, #89	@ 0x59
 8008448:	f7ff ffae 	bl	80083a8 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800844c:	f001 fc4c 	bl	8009ce8 <GetCurrentHalTicks>
 8008450:	0003      	movs	r3, r0
 8008452:	33aa      	adds	r3, #170	@ 0xaa
 8008454:	001a      	movs	r2, r3
 8008456:	4b09      	ldr	r3, [pc, #36]	@ (800847c <SGP_StartMeasurement+0x64>)
 8008458:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800845a:	4b09      	ldr	r3, [pc, #36]	@ (8008480 <SGP_StartMeasurement+0x68>)
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8008460:	4b08      	ldr	r3, [pc, #32]	@ (8008484 <SGP_StartMeasurement+0x6c>)
 8008462:	2200      	movs	r2, #0
 8008464:	701a      	strb	r2, [r3, #0]
}
 8008466:	46c0      	nop			@ (mov r8, r8)
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	200029b0 	.word	0x200029b0
 8008470:	20000040 	.word	0x20000040
 8008474:	20000054 	.word	0x20000054
 8008478:	20000038 	.word	0x20000038
 800847c:	2000004c 	.word	0x2000004c
 8008480:	20002906 	.word	0x20002906
 8008484:	20002907 	.word	0x20002907

08008488 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
 800848c:	4b04      	ldr	r3, [pc, #16]	@ (80084a0 <SGP_HeatedUp+0x18>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	0018      	movs	r0, r3
 8008492:	f001 fb61 	bl	8009b58 <TimestampIsReached>
 8008496:	0003      	movs	r3, r0
 8008498:	0018      	movs	r0, r3
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	46c0      	nop			@ (mov r8, r8)
 80084a0:	2000004c 	.word	0x2000004c

080084a4 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80084a8:	4b04      	ldr	r3, [pc, #16]	@ (80084bc <SGP_MeasurementReady+0x18>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	0018      	movs	r0, r3
 80084ae:	f001 fb53 	bl	8009b58 <TimestampIsReached>
 80084b2:	0003      	movs	r3, r0
}
 80084b4:	0018      	movs	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	46c0      	nop			@ (mov r8, r8)
 80084bc:	20000054 	.word	0x20000054

080084c0 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80084c4:	4b04      	ldr	r3, [pc, #16]	@ (80084d8 <SGP_MeasurementDone+0x18>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	0018      	movs	r0, r3
 80084ca:	f001 fb45 	bl	8009b58 <TimestampIsReached>
 80084ce:	0003      	movs	r3, r0
}
 80084d0:	0018      	movs	r0, r3
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	46c0      	nop			@ (mov r8, r8)
 80084d8:	20000050 	.word	0x20000050

080084dc <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80084e0:	4b04      	ldr	r3, [pc, #16]	@ (80084f4 <SGP_TurnHeaterOff+0x18>)
 80084e2:	2202      	movs	r2, #2
 80084e4:	0019      	movs	r1, r3
 80084e6:	2059      	movs	r0, #89	@ 0x59
 80084e8:	f7ff ff5e 	bl	80083a8 <WriteRegister>
}
 80084ec:	46c0      	nop			@ (mov r8, r8)
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	46c0      	nop			@ (mov r8, r8)
 80084f4:	20000030 	.word	0x20000030

080084f8 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80084f8:	b5b0      	push	{r4, r5, r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af02      	add	r7, sp, #8
 80084fe:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008500:	f7ff ffc2 	bl	8008488 <SGP_HeatedUp>
 8008504:	1e03      	subs	r3, r0, #0
 8008506:	d038      	beq.n	800857a <SGP_GetMeasurementValues+0x82>
 8008508:	4bd5      	ldr	r3, [pc, #852]	@ (8008860 <SGP_GetMeasurementValues+0x368>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2201      	movs	r2, #1
 800850e:	4053      	eors	r3, r2
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d031      	beq.n	800857a <SGP_GetMeasurementValues+0x82>
 8008516:	4bd3      	ldr	r3, [pc, #844]	@ (8008864 <SGP_GetMeasurementValues+0x36c>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2201      	movs	r2, #1
 800851c:	4053      	eors	r3, r2
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d02a      	beq.n	800857a <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8008524:	4ad0      	ldr	r2, [pc, #832]	@ (8008868 <SGP_GetMeasurementValues+0x370>)
 8008526:	4bd1      	ldr	r3, [pc, #836]	@ (800886c <SGP_GetMeasurementValues+0x374>)
 8008528:	0019      	movs	r1, r3
 800852a:	2003      	movs	r0, #3
 800852c:	f001 fb6a 	bl	8009c04 <CreateLine>
    HeatUpIsDone = true;
 8008530:	4bcb      	ldr	r3, [pc, #812]	@ (8008860 <SGP_GetMeasurementValues+0x368>)
 8008532:	2201      	movs	r2, #1
 8008534:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8008536:	4bce      	ldr	r3, [pc, #824]	@ (8008870 <SGP_GetMeasurementValues+0x378>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00d      	beq.n	800855a <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800853e:	4bcd      	ldr	r3, [pc, #820]	@ (8008874 <SGP_GetMeasurementValues+0x37c>)
 8008540:	2208      	movs	r2, #8
 8008542:	0019      	movs	r1, r3
 8008544:	2059      	movs	r0, #89	@ 0x59
 8008546:	f7ff ff2f 	bl	80083a8 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800854a:	f001 fbcd 	bl	8009ce8 <GetCurrentHalTicks>
 800854e:	0003      	movs	r3, r0
 8008550:	331e      	adds	r3, #30
 8008552:	001a      	movs	r2, r3
 8008554:	4bc8      	ldr	r3, [pc, #800]	@ (8008878 <SGP_GetMeasurementValues+0x380>)
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	e00c      	b.n	8008574 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800855a:	4bc8      	ldr	r3, [pc, #800]	@ (800887c <SGP_GetMeasurementValues+0x384>)
 800855c:	2208      	movs	r2, #8
 800855e:	0019      	movs	r1, r3
 8008560:	2059      	movs	r0, #89	@ 0x59
 8008562:	f7ff ff21 	bl	80083a8 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008566:	f001 fbbf 	bl	8009ce8 <GetCurrentHalTicks>
 800856a:	0003      	movs	r3, r0
 800856c:	331e      	adds	r3, #30
 800856e:	001a      	movs	r2, r3
 8008570:	4bc1      	ldr	r3, [pc, #772]	@ (8008878 <SGP_GetMeasurementValues+0x380>)
 8008572:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8008574:	4bbb      	ldr	r3, [pc, #748]	@ (8008864 <SGP_GetMeasurementValues+0x36c>)
 8008576:	2201      	movs	r2, #1
 8008578:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800857a:	4bb9      	ldr	r3, [pc, #740]	@ (8008860 <SGP_GetMeasurementValues+0x368>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d100      	bne.n	8008584 <SGP_GetMeasurementValues+0x8c>
 8008582:	e1a9      	b.n	80088d8 <SGP_GetMeasurementValues+0x3e0>
 8008584:	f7ff ff8e 	bl	80084a4 <SGP_MeasurementReady>
 8008588:	1e03      	subs	r3, r0, #0
 800858a:	d100      	bne.n	800858e <SGP_GetMeasurementValues+0x96>
 800858c:	e1a4      	b.n	80088d8 <SGP_GetMeasurementValues+0x3e0>
 800858e:	4bbc      	ldr	r3, [pc, #752]	@ (8008880 <SGP_GetMeasurementValues+0x388>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2201      	movs	r2, #1
 8008594:	4053      	eors	r3, r2
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d100      	bne.n	800859e <SGP_GetMeasurementValues+0xa6>
 800859c:	e19c      	b.n	80088d8 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800859e:	4bb9      	ldr	r3, [pc, #740]	@ (8008884 <SGP_GetMeasurementValues+0x38c>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	4ab8      	ldr	r2, [pc, #736]	@ (8008888 <SGP_GetMeasurementValues+0x390>)
 80085a6:	49b1      	ldr	r1, [pc, #708]	@ (800886c <SGP_GetMeasurementValues+0x374>)
 80085a8:	2003      	movs	r0, #3
 80085aa:	f001 fb2b 	bl	8009c04 <CreateLine>
    MeasurementIsReady = true;
 80085ae:	4bb4      	ldr	r3, [pc, #720]	@ (8008880 <SGP_GetMeasurementValues+0x388>)
 80085b0:	2201      	movs	r2, #1
 80085b2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 80085b4:	4bb5      	ldr	r3, [pc, #724]	@ (800888c <SGP_GetMeasurementValues+0x394>)
 80085b6:	2203      	movs	r2, #3
 80085b8:	0019      	movs	r1, r3
 80085ba:	2059      	movs	r0, #89	@ 0x59
 80085bc:	f7ff fed6 	bl	800836c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 80085c0:	4bb2      	ldr	r3, [pc, #712]	@ (800888c <SGP_GetMeasurementValues+0x394>)
 80085c2:	2203      	movs	r2, #3
 80085c4:	2103      	movs	r1, #3
 80085c6:	0018      	movs	r0, r3
 80085c8:	f000 f9ec 	bl	80089a4 <CheckCRC>
 80085cc:	0003      	movs	r3, r0
 80085ce:	001a      	movs	r2, r3
 80085d0:	2301      	movs	r3, #1
 80085d2:	4053      	eors	r3, r2
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d02a      	beq.n	8008630 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 80085da:	4aad      	ldr	r2, [pc, #692]	@ (8008890 <SGP_GetMeasurementValues+0x398>)
 80085dc:	4bad      	ldr	r3, [pc, #692]	@ (8008894 <SGP_GetMeasurementValues+0x39c>)
 80085de:	0019      	movs	r1, r3
 80085e0:	2001      	movs	r0, #1
 80085e2:	f001 fb0f 	bl	8009c04 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80085e6:	4aac      	ldr	r2, [pc, #688]	@ (8008898 <SGP_GetMeasurementValues+0x3a0>)
 80085e8:	4bac      	ldr	r3, [pc, #688]	@ (800889c <SGP_GetMeasurementValues+0x3a4>)
 80085ea:	0019      	movs	r1, r3
 80085ec:	2002      	movs	r0, #2
 80085ee:	f001 fb09 	bl	8009c04 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80085f2:	230f      	movs	r3, #15
 80085f4:	18fb      	adds	r3, r7, r3
 80085f6:	2200      	movs	r2, #0
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	e012      	b.n	8008622 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80085fc:	240f      	movs	r4, #15
 80085fe:	193b      	adds	r3, r7, r4
 8008600:	7818      	ldrb	r0, [r3, #0]
 8008602:	193b      	adds	r3, r7, r4
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	4aa1      	ldr	r2, [pc, #644]	@ (800888c <SGP_GetMeasurementValues+0x394>)
 8008608:	5cd3      	ldrb	r3, [r2, r3]
 800860a:	4aa5      	ldr	r2, [pc, #660]	@ (80088a0 <SGP_GetMeasurementValues+0x3a8>)
 800860c:	4997      	ldr	r1, [pc, #604]	@ (800886c <SGP_GetMeasurementValues+0x374>)
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	0003      	movs	r3, r0
 8008612:	2003      	movs	r0, #3
 8008614:	f001 faf6 	bl	8009c04 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008618:	193b      	adds	r3, r7, r4
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	193b      	adds	r3, r7, r4
 800861e:	3201      	adds	r2, #1
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	230f      	movs	r3, #15
 8008624:	18fb      	adds	r3, r7, r3
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b02      	cmp	r3, #2
 800862a:	d9e7      	bls.n	80085fc <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800862c:	2300      	movs	r3, #0
 800862e:	e16b      	b.n	8008908 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8008630:	f001 fb5a 	bl	8009ce8 <GetCurrentHalTicks>
 8008634:	0003      	movs	r3, r0
 8008636:	22fa      	movs	r2, #250	@ 0xfa
 8008638:	0092      	lsls	r2, r2, #2
 800863a:	189a      	adds	r2, r3, r2
 800863c:	4b99      	ldr	r3, [pc, #612]	@ (80088a4 <SGP_GetMeasurementValues+0x3ac>)
 800863e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8008640:	f7ff ff4c 	bl	80084dc <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8008644:	4b8f      	ldr	r3, [pc, #572]	@ (8008884 <SGP_GetMeasurementValues+0x38c>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	3301      	adds	r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	4b8d      	ldr	r3, [pc, #564]	@ (8008884 <SGP_GetMeasurementValues+0x38c>)
 800864e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8008650:	4b8c      	ldr	r3, [pc, #560]	@ (8008884 <SGP_GetMeasurementValues+0x38c>)
 8008652:	781a      	ldrb	r2, [r3, #0]
 8008654:	4b94      	ldr	r3, [pc, #592]	@ (80088a8 <SGP_GetMeasurementValues+0x3b0>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d200      	bcs.n	800865e <SGP_GetMeasurementValues+0x166>
 800865c:	e13c      	b.n	80088d8 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800865e:	4b8b      	ldr	r3, [pc, #556]	@ (800888c <SGP_GetMeasurementValues+0x394>)
 8008660:	785b      	ldrb	r3, [r3, #1]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	b21a      	sxth	r2, r3
 8008666:	4b89      	ldr	r3, [pc, #548]	@ (800888c <SGP_GetMeasurementValues+0x394>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b21b      	sxth	r3, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	b21a      	sxth	r2, r3
 8008670:	240c      	movs	r4, #12
 8008672:	193b      	adds	r3, r7, r4
 8008674:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8008676:	193b      	adds	r3, r7, r4
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	4a8c      	ldr	r2, [pc, #560]	@ (80088ac <SGP_GetMeasurementValues+0x3b4>)
 800867c:	497b      	ldr	r1, [pc, #492]	@ (800886c <SGP_GetMeasurementValues+0x374>)
 800867e:	2003      	movs	r0, #3
 8008680:	f001 fac0 	bl	8009c04 <CreateLine>
      int32_t tempVocIndex = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8008688:	193b      	adds	r3, r7, r4
 800868a:	8819      	ldrh	r1, [r3, #0]
 800868c:	2308      	movs	r3, #8
 800868e:	18fa      	adds	r2, r7, r3
 8008690:	4b87      	ldr	r3, [pc, #540]	@ (80088b0 <SGP_GetMeasurementValues+0x3b8>)
 8008692:	0018      	movs	r0, r3
 8008694:	f7ff f848 	bl	8007728 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4a86      	ldr	r2, [pc, #536]	@ (80088b4 <SGP_GetMeasurementValues+0x3bc>)
 800869c:	4973      	ldr	r1, [pc, #460]	@ (800886c <SGP_GetMeasurementValues+0x374>)
 800869e:	2003      	movs	r0, #3
 80086a0:	f001 fab0 	bl	8009c04 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dd5a      	ble.n	8008768 <SGP_GetMeasurementValues+0x270>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b64      	cmp	r3, #100	@ 0x64
 80086b8:	dc56      	bgt.n	8008768 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	0018      	movs	r0, r3
 80086c0:	f7fa fdfc 	bl	80032bc <__aeabi_i2d>
 80086c4:	2200      	movs	r2, #0
 80086c6:	4b7c      	ldr	r3, [pc, #496]	@ (80088b8 <SGP_GetMeasurementValues+0x3c0>)
 80086c8:	f7f9 faf2 	bl	8001cb0 <__aeabi_ddiv>
 80086cc:	0002      	movs	r2, r0
 80086ce:	000b      	movs	r3, r1
 80086d0:	2000      	movs	r0, #0
 80086d2:	497a      	ldr	r1, [pc, #488]	@ (80088bc <SGP_GetMeasurementValues+0x3c4>)
 80086d4:	f7fa f9f8 	bl	8002ac8 <__aeabi_dsub>
 80086d8:	0002      	movs	r2, r0
 80086da:	000b      	movs	r3, r1
 80086dc:	0014      	movs	r4, r2
 80086de:	001d      	movs	r5, r3
 80086e0:	4b77      	ldr	r3, [pc, #476]	@ (80088c0 <SGP_GetMeasurementValues+0x3c8>)
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	0018      	movs	r0, r3
 80086e6:	f7fa fde9 	bl	80032bc <__aeabi_i2d>
 80086ea:	0002      	movs	r2, r0
 80086ec:	000b      	movs	r3, r1
 80086ee:	0020      	movs	r0, r4
 80086f0:	0029      	movs	r1, r5
 80086f2:	f7f9 ff21 	bl	8002538 <__aeabi_dmul>
 80086f6:	0002      	movs	r2, r0
 80086f8:	000b      	movs	r3, r1
 80086fa:	0010      	movs	r0, r2
 80086fc:	0019      	movs	r1, r3
 80086fe:	f7f7 ff73 	bl	80005e8 <__aeabi_d2uiz>
 8008702:	0003      	movs	r3, r0
 8008704:	b29a      	uxth	r2, r3
 8008706:	4b6f      	ldr	r3, [pc, #444]	@ (80088c4 <SGP_GetMeasurementValues+0x3cc>)
 8008708:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	0018      	movs	r0, r3
 8008710:	f7fa fdd4 	bl	80032bc <__aeabi_i2d>
 8008714:	2200      	movs	r2, #0
 8008716:	4b68      	ldr	r3, [pc, #416]	@ (80088b8 <SGP_GetMeasurementValues+0x3c0>)
 8008718:	f7f9 faca 	bl	8001cb0 <__aeabi_ddiv>
 800871c:	0002      	movs	r2, r0
 800871e:	000b      	movs	r3, r1
 8008720:	0014      	movs	r4, r2
 8008722:	001d      	movs	r5, r3
 8008724:	4b66      	ldr	r3, [pc, #408]	@ (80088c0 <SGP_GetMeasurementValues+0x3c8>)
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	0018      	movs	r0, r3
 800872a:	f7fa fdc7 	bl	80032bc <__aeabi_i2d>
 800872e:	0002      	movs	r2, r0
 8008730:	000b      	movs	r3, r1
 8008732:	0020      	movs	r0, r4
 8008734:	0029      	movs	r1, r5
 8008736:	f7f9 feff 	bl	8002538 <__aeabi_dmul>
 800873a:	0002      	movs	r2, r0
 800873c:	000b      	movs	r3, r1
 800873e:	0010      	movs	r0, r2
 8008740:	0019      	movs	r1, r3
 8008742:	f7f7 ff51 	bl	80005e8 <__aeabi_d2uiz>
 8008746:	0003      	movs	r3, r0
 8008748:	b29a      	uxth	r2, r3
 800874a:	4b5f      	ldr	r3, [pc, #380]	@ (80088c8 <SGP_GetMeasurementValues+0x3d0>)
 800874c:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800874e:	4b5c      	ldr	r3, [pc, #368]	@ (80088c0 <SGP_GetMeasurementValues+0x3c8>)
 8008750:	881a      	ldrh	r2, [r3, #0]
 8008752:	4b5e      	ldr	r3, [pc, #376]	@ (80088cc <SGP_GetMeasurementValues+0x3d4>)
 8008754:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 8008756:	4b5d      	ldr	r3, [pc, #372]	@ (80088cc <SGP_GetMeasurementValues+0x3d4>)
 8008758:	8818      	ldrh	r0, [r3, #0]
 800875a:	4b5a      	ldr	r3, [pc, #360]	@ (80088c4 <SGP_GetMeasurementValues+0x3cc>)
 800875c:	8819      	ldrh	r1, [r3, #0]
 800875e:	4b5a      	ldr	r3, [pc, #360]	@ (80088c8 <SGP_GetMeasurementValues+0x3d0>)
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	001a      	movs	r2, r3
 8008764:	f000 fb96 	bl	8008e94 <SetVocLED>
      }
      if(*vocIndex > 100){
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b64      	cmp	r3, #100	@ 0x64
 800876e:	dd66      	ble.n	800883e <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	0018      	movs	r0, r3
 8008776:	f7fa fda1 	bl	80032bc <__aeabi_i2d>
 800877a:	2200      	movs	r2, #0
 800877c:	4b4e      	ldr	r3, [pc, #312]	@ (80088b8 <SGP_GetMeasurementValues+0x3c0>)
 800877e:	f7fa f9a3 	bl	8002ac8 <__aeabi_dsub>
 8008782:	0002      	movs	r2, r0
 8008784:	000b      	movs	r3, r1
 8008786:	0010      	movs	r0, r2
 8008788:	0019      	movs	r1, r3
 800878a:	2200      	movs	r2, #0
 800878c:	4b50      	ldr	r3, [pc, #320]	@ (80088d0 <SGP_GetMeasurementValues+0x3d8>)
 800878e:	f7f9 fa8f 	bl	8001cb0 <__aeabi_ddiv>
 8008792:	0002      	movs	r2, r0
 8008794:	000b      	movs	r3, r1
 8008796:	0014      	movs	r4, r2
 8008798:	001d      	movs	r5, r3
 800879a:	4b49      	ldr	r3, [pc, #292]	@ (80088c0 <SGP_GetMeasurementValues+0x3c8>)
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	0018      	movs	r0, r3
 80087a0:	f7fa fd8c 	bl	80032bc <__aeabi_i2d>
 80087a4:	0002      	movs	r2, r0
 80087a6:	000b      	movs	r3, r1
 80087a8:	0020      	movs	r0, r4
 80087aa:	0029      	movs	r1, r5
 80087ac:	f7f9 fec4 	bl	8002538 <__aeabi_dmul>
 80087b0:	0002      	movs	r2, r0
 80087b2:	000b      	movs	r3, r1
 80087b4:	0010      	movs	r0, r2
 80087b6:	0019      	movs	r1, r3
 80087b8:	f7f7 ff16 	bl	80005e8 <__aeabi_d2uiz>
 80087bc:	0003      	movs	r3, r0
 80087be:	b29a      	uxth	r2, r3
 80087c0:	4b40      	ldr	r3, [pc, #256]	@ (80088c4 <SGP_GetMeasurementValues+0x3cc>)
 80087c2:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	0018      	movs	r0, r3
 80087ca:	f7fa fd77 	bl	80032bc <__aeabi_i2d>
 80087ce:	2200      	movs	r2, #0
 80087d0:	4b39      	ldr	r3, [pc, #228]	@ (80088b8 <SGP_GetMeasurementValues+0x3c0>)
 80087d2:	f7fa f979 	bl	8002ac8 <__aeabi_dsub>
 80087d6:	0002      	movs	r2, r0
 80087d8:	000b      	movs	r3, r1
 80087da:	0010      	movs	r0, r2
 80087dc:	0019      	movs	r1, r3
 80087de:	2200      	movs	r2, #0
 80087e0:	4b3b      	ldr	r3, [pc, #236]	@ (80088d0 <SGP_GetMeasurementValues+0x3d8>)
 80087e2:	f7f9 fa65 	bl	8001cb0 <__aeabi_ddiv>
 80087e6:	0002      	movs	r2, r0
 80087e8:	000b      	movs	r3, r1
 80087ea:	2000      	movs	r0, #0
 80087ec:	4933      	ldr	r1, [pc, #204]	@ (80088bc <SGP_GetMeasurementValues+0x3c4>)
 80087ee:	f7fa f96b 	bl	8002ac8 <__aeabi_dsub>
 80087f2:	0002      	movs	r2, r0
 80087f4:	000b      	movs	r3, r1
 80087f6:	0014      	movs	r4, r2
 80087f8:	001d      	movs	r5, r3
 80087fa:	4b31      	ldr	r3, [pc, #196]	@ (80088c0 <SGP_GetMeasurementValues+0x3c8>)
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	0018      	movs	r0, r3
 8008800:	f7fa fd5c 	bl	80032bc <__aeabi_i2d>
 8008804:	0002      	movs	r2, r0
 8008806:	000b      	movs	r3, r1
 8008808:	0020      	movs	r0, r4
 800880a:	0029      	movs	r1, r5
 800880c:	f7f9 fe94 	bl	8002538 <__aeabi_dmul>
 8008810:	0002      	movs	r2, r0
 8008812:	000b      	movs	r3, r1
 8008814:	0010      	movs	r0, r2
 8008816:	0019      	movs	r1, r3
 8008818:	f7f7 fee6 	bl	80005e8 <__aeabi_d2uiz>
 800881c:	0003      	movs	r3, r0
 800881e:	b29a      	uxth	r2, r3
 8008820:	4b2a      	ldr	r3, [pc, #168]	@ (80088cc <SGP_GetMeasurementValues+0x3d4>)
 8008822:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8008824:	4b26      	ldr	r3, [pc, #152]	@ (80088c0 <SGP_GetMeasurementValues+0x3c8>)
 8008826:	881a      	ldrh	r2, [r3, #0]
 8008828:	4b27      	ldr	r3, [pc, #156]	@ (80088c8 <SGP_GetMeasurementValues+0x3d0>)
 800882a:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800882c:	4b27      	ldr	r3, [pc, #156]	@ (80088cc <SGP_GetMeasurementValues+0x3d4>)
 800882e:	8818      	ldrh	r0, [r3, #0]
 8008830:	4b24      	ldr	r3, [pc, #144]	@ (80088c4 <SGP_GetMeasurementValues+0x3cc>)
 8008832:	8819      	ldrh	r1, [r3, #0]
 8008834:	4b24      	ldr	r3, [pc, #144]	@ (80088c8 <SGP_GetMeasurementValues+0x3d0>)
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	001a      	movs	r2, r3
 800883a:	f000 fb2b 	bl	8008e94 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800883e:	4b11      	ldr	r3, [pc, #68]	@ (8008884 <SGP_GetMeasurementValues+0x38c>)
 8008840:	2200      	movs	r2, #0
 8008842:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8008844:	4a23      	ldr	r2, [pc, #140]	@ (80088d4 <SGP_GetMeasurementValues+0x3dc>)
 8008846:	4b09      	ldr	r3, [pc, #36]	@ (800886c <SGP_GetMeasurementValues+0x374>)
 8008848:	0019      	movs	r1, r3
 800884a:	2003      	movs	r0, #3
 800884c:	f001 f9da 	bl	8009c04 <CreateLine>
      HT_MeasurementReceived = false;
 8008850:	4b07      	ldr	r3, [pc, #28]	@ (8008870 <SGP_GetMeasurementValues+0x378>)
 8008852:	2200      	movs	r2, #0
 8008854:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8008856:	4b03      	ldr	r3, [pc, #12]	@ (8008864 <SGP_GetMeasurementValues+0x36c>)
 8008858:	2200      	movs	r2, #0
 800885a:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800885c:	2301      	movs	r3, #1
 800885e:	e053      	b.n	8008908 <SGP_GetMeasurementValues+0x410>
 8008860:	20002906 	.word	0x20002906
 8008864:	200029b1 	.word	0x200029b1
 8008868:	0801bb7c 	.word	0x0801bb7c
 800886c:	0801bba8 	.word	0x0801bba8
 8008870:	200029b0 	.word	0x200029b0
 8008874:	20000040 	.word	0x20000040
 8008878:	20000054 	.word	0x20000054
 800887c:	20000038 	.word	0x20000038
 8008880:	20002907 	.word	0x20002907
 8008884:	20002905 	.word	0x20002905
 8008888:	0801bbac 	.word	0x0801bbac
 800888c:	200028fc 	.word	0x200028fc
 8008890:	0801bbdc 	.word	0x0801bbdc
 8008894:	0801bc00 	.word	0x0801bc00
 8008898:	0801bc04 	.word	0x0801bc04
 800889c:	0801bc24 	.word	0x0801bc24
 80088a0:	0801bc28 	.word	0x0801bc28
 80088a4:	20000050 	.word	0x20000050
 80088a8:	20000048 	.word	0x20000048
 80088ac:	0801bc48 	.word	0x0801bc48
 80088b0:	20002908 	.word	0x20002908
 80088b4:	0801bc5c 	.word	0x0801bc5c
 80088b8:	40590000 	.word	0x40590000
 80088bc:	3ff00000 	.word	0x3ff00000
 80088c0:	20000058 	.word	0x20000058
 80088c4:	200029b6 	.word	0x200029b6
 80088c8:	200029b4 	.word	0x200029b4
 80088cc:	200029b2 	.word	0x200029b2
 80088d0:	40790000 	.word	0x40790000
 80088d4:	0801bc70 	.word	0x0801bc70
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80088d8:	f7ff fdf2 	bl	80084c0 <SGP_MeasurementDone>
 80088dc:	1e03      	subs	r3, r0, #0
 80088de:	d012      	beq.n	8008906 <SGP_GetMeasurementValues+0x40e>
 80088e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <SGP_GetMeasurementValues+0x418>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00e      	beq.n	8008906 <SGP_GetMeasurementValues+0x40e>
 80088e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008914 <SGP_GetMeasurementValues+0x41c>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80088f0:	4a09      	ldr	r2, [pc, #36]	@ (8008918 <SGP_GetMeasurementValues+0x420>)
 80088f2:	4b0a      	ldr	r3, [pc, #40]	@ (800891c <SGP_GetMeasurementValues+0x424>)
 80088f4:	0019      	movs	r1, r3
 80088f6:	2003      	movs	r0, #3
 80088f8:	f001 f984 	bl	8009c04 <CreateLine>
    SGP_StartMeasurement();
 80088fc:	f7ff fd8c 	bl	8008418 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <SGP_GetMeasurementValues+0x428>)
 8008902:	2200      	movs	r2, #0
 8008904:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8008906:	2300      	movs	r3, #0
}
 8008908:	0018      	movs	r0, r3
 800890a:	46bd      	mov	sp, r7
 800890c:	b004      	add	sp, #16
 800890e:	bdb0      	pop	{r4, r5, r7, pc}
 8008910:	20002906 	.word	0x20002906
 8008914:	20002907 	.word	0x20002907
 8008918:	0801bc94 	.word	0x0801bc94
 800891c:	0801bba8 	.word	0x0801bba8
 8008920:	200029b1 	.word	0x200029b1

08008924 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800892a:	4b1a      	ldr	r3, [pc, #104]	@ (8008994 <SGP_DeviceConnected+0x70>)
 800892c:	2202      	movs	r2, #2
 800892e:	0019      	movs	r1, r3
 8008930:	2059      	movs	r0, #89	@ 0x59
 8008932:	f7ff fd39 	bl	80083a8 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8008936:	2001      	movs	r0, #1
 8008938:	f001 fcf4 	bl	800a324 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800893c:	4b16      	ldr	r3, [pc, #88]	@ (8008998 <SGP_DeviceConnected+0x74>)
 800893e:	2209      	movs	r2, #9
 8008940:	0019      	movs	r1, r3
 8008942:	2059      	movs	r0, #89	@ 0x59
 8008944:	f7ff fd12 	bl	800836c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8008948:	1dfb      	adds	r3, r7, #7
 800894a:	2200      	movs	r2, #0
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	e011      	b.n	8008974 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8008950:	1dfb      	adds	r3, r7, #7
 8008952:	7818      	ldrb	r0, [r3, #0]
 8008954:	1dfb      	adds	r3, r7, #7
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	4a0f      	ldr	r2, [pc, #60]	@ (8008998 <SGP_DeviceConnected+0x74>)
 800895a:	5cd3      	ldrb	r3, [r2, r3]
 800895c:	4a0f      	ldr	r2, [pc, #60]	@ (800899c <SGP_DeviceConnected+0x78>)
 800895e:	4910      	ldr	r1, [pc, #64]	@ (80089a0 <SGP_DeviceConnected+0x7c>)
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	0003      	movs	r3, r0
 8008964:	2002      	movs	r0, #2
 8008966:	f001 f94d 	bl	8009c04 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800896a:	1dfb      	adds	r3, r7, #7
 800896c:	781a      	ldrb	r2, [r3, #0]
 800896e:	1dfb      	adds	r3, r7, #7
 8008970:	3201      	adds	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]
 8008974:	1dfb      	adds	r3, r7, #7
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b08      	cmp	r3, #8
 800897a:	d9e9      	bls.n	8008950 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800897c:	4b06      	ldr	r3, [pc, #24]	@ (8008998 <SGP_DeviceConnected+0x74>)
 800897e:	2203      	movs	r2, #3
 8008980:	2109      	movs	r1, #9
 8008982:	0018      	movs	r0, r3
 8008984:	f000 f80e 	bl	80089a4 <CheckCRC>
 8008988:	0003      	movs	r3, r0
}
 800898a:	0018      	movs	r0, r3
 800898c:	46bd      	mov	sp, r7
 800898e:	b002      	add	sp, #8
 8008990:	bd80      	pop	{r7, pc}
 8008992:	46c0      	nop			@ (mov r8, r8)
 8008994:	20000034 	.word	0x20000034
 8008998:	200028fc 	.word	0x200028fc
 800899c:	0801bcb4 	.word	0x0801bcb4
 80089a0:	0801bc24 	.word	0x0801bc24

080089a4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80089a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089a6:	b08f      	sub	sp, #60	@ 0x3c
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6278      	str	r0, [r7, #36]	@ 0x24
 80089ac:	0008      	movs	r0, r1
 80089ae:	0011      	movs	r1, r2
 80089b0:	2323      	movs	r3, #35	@ 0x23
 80089b2:	18fb      	adds	r3, r7, r3
 80089b4:	1c02      	adds	r2, r0, #0
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	2322      	movs	r3, #34	@ 0x22
 80089ba:	18fb      	adds	r3, r7, r3
 80089bc:	1c0a      	adds	r2, r1, #0
 80089be:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80089c0:	2317      	movs	r3, #23
 80089c2:	2220      	movs	r2, #32
 80089c4:	189b      	adds	r3, r3, r2
 80089c6:	19db      	adds	r3, r3, r7
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	e09f      	b.n	8008b0e <CheckCRC+0x16a>
 80089ce:	466b      	mov	r3, sp
 80089d0:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80089d2:	2322      	movs	r3, #34	@ 0x22
 80089d4:	18fb      	adds	r3, r7, r3
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	001a      	movs	r2, r3
 80089da:	3a01      	subs	r2, #1
 80089dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80089de:	60bb      	str	r3, [r7, #8]
 80089e0:	2200      	movs	r2, #0
 80089e2:	60fa      	str	r2, [r7, #12]
 80089e4:	68b8      	ldr	r0, [r7, #8]
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	0002      	movs	r2, r0
 80089ea:	0f52      	lsrs	r2, r2, #29
 80089ec:	000c      	movs	r4, r1
 80089ee:	00e4      	lsls	r4, r4, #3
 80089f0:	61fc      	str	r4, [r7, #28]
 80089f2:	69fc      	ldr	r4, [r7, #28]
 80089f4:	4314      	orrs	r4, r2
 80089f6:	61fc      	str	r4, [r7, #28]
 80089f8:	0002      	movs	r2, r0
 80089fa:	00d2      	lsls	r2, r2, #3
 80089fc:	61ba      	str	r2, [r7, #24]
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	6838      	ldr	r0, [r7, #0]
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	0002      	movs	r2, r0
 8008a0a:	0f52      	lsrs	r2, r2, #29
 8008a0c:	000c      	movs	r4, r1
 8008a0e:	00e4      	lsls	r4, r4, #3
 8008a10:	617c      	str	r4, [r7, #20]
 8008a12:	697c      	ldr	r4, [r7, #20]
 8008a14:	4314      	orrs	r4, r2
 8008a16:	617c      	str	r4, [r7, #20]
 8008a18:	0002      	movs	r2, r0
 8008a1a:	00d2      	lsls	r2, r2, #3
 8008a1c:	613a      	str	r2, [r7, #16]
 8008a1e:	3307      	adds	r3, #7
 8008a20:	08db      	lsrs	r3, r3, #3
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	466a      	mov	r2, sp
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	469d      	mov	sp, r3
 8008a2a:	466b      	mov	r3, sp
 8008a2c:	3300      	adds	r3, #0
 8008a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8008a30:	2316      	movs	r3, #22
 8008a32:	2220      	movs	r2, #32
 8008a34:	189b      	adds	r3, r3, r2
 8008a36:	19db      	adds	r3, r3, r7
 8008a38:	2200      	movs	r2, #0
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	e01e      	b.n	8008a7c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8008a3e:	2317      	movs	r3, #23
 8008a40:	2220      	movs	r2, #32
 8008a42:	189b      	adds	r3, r3, r2
 8008a44:	19db      	adds	r3, r3, r7
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	2116      	movs	r1, #22
 8008a4a:	2320      	movs	r3, #32
 8008a4c:	18cb      	adds	r3, r1, r3
 8008a4e:	19db      	adds	r3, r3, r7
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	18d3      	adds	r3, r2, r3
 8008a54:	001a      	movs	r2, r3
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	189a      	adds	r2, r3, r2
 8008a5a:	0008      	movs	r0, r1
 8008a5c:	2320      	movs	r3, #32
 8008a5e:	18cb      	adds	r3, r1, r3
 8008a60:	19db      	adds	r3, r3, r7
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	7811      	ldrb	r1, [r2, #0]
 8008a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a68:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8008a6a:	2320      	movs	r3, #32
 8008a6c:	18c3      	adds	r3, r0, r3
 8008a6e:	19db      	adds	r3, r3, r7
 8008a70:	781a      	ldrb	r2, [r3, #0]
 8008a72:	2320      	movs	r3, #32
 8008a74:	18c3      	adds	r3, r0, r3
 8008a76:	19db      	adds	r3, r3, r7
 8008a78:	3201      	adds	r2, #1
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	2316      	movs	r3, #22
 8008a7e:	2220      	movs	r2, #32
 8008a80:	189b      	adds	r3, r3, r2
 8008a82:	19da      	adds	r2, r3, r7
 8008a84:	2322      	movs	r3, #34	@ 0x22
 8008a86:	18fb      	adds	r3, r7, r3
 8008a88:	7812      	ldrb	r2, [r2, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d3d6      	bcc.n	8008a3e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8008a90:	2417      	movs	r4, #23
 8008a92:	2320      	movs	r3, #32
 8008a94:	18e3      	adds	r3, r4, r3
 8008a96:	19db      	adds	r3, r3, r7
 8008a98:	781a      	ldrb	r2, [r3, #0]
 8008a9a:	2322      	movs	r3, #34	@ 0x22
 8008a9c:	18fb      	adds	r3, r7, r3
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	18d3      	adds	r3, r2, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa6:	18d2      	adds	r2, r2, r3
 8008aa8:	250b      	movs	r5, #11
 8008aaa:	2320      	movs	r3, #32
 8008aac:	18eb      	adds	r3, r5, r3
 8008aae:	19db      	adds	r3, r3, r7
 8008ab0:	7812      	ldrb	r2, [r2, #0]
 8008ab2:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8008ab4:	2322      	movs	r3, #34	@ 0x22
 8008ab6:	18fb      	adds	r3, r7, r3
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac0:	0011      	movs	r1, r2
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f000 f838 	bl	8008b38 <CalculateCRC>
 8008ac8:	0003      	movs	r3, r0
 8008aca:	001a      	movs	r2, r3
 8008acc:	2320      	movs	r3, #32
 8008ace:	18eb      	adds	r3, r5, r3
 8008ad0:	19db      	adds	r3, r3, r7
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d00c      	beq.n	8008af2 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008ad8:	2320      	movs	r3, #32
 8008ada:	18e3      	adds	r3, r4, r3
 8008adc:	19db      	adds	r3, r3, r7
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	4a13      	ldr	r2, [pc, #76]	@ (8008b30 <CheckCRC+0x18c>)
 8008ae4:	4913      	ldr	r1, [pc, #76]	@ (8008b34 <CheckCRC+0x190>)
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	f001 f88c 	bl	8009c04 <CreateLine>
      return false;
 8008aec:	2300      	movs	r3, #0
 8008aee:	46b5      	mov	sp, r6
 8008af0:	e019      	b.n	8008b26 <CheckCRC+0x182>
 8008af2:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008af4:	2217      	movs	r2, #23
 8008af6:	2320      	movs	r3, #32
 8008af8:	18d3      	adds	r3, r2, r3
 8008afa:	19db      	adds	r3, r3, r7
 8008afc:	2120      	movs	r1, #32
 8008afe:	1852      	adds	r2, r2, r1
 8008b00:	19d1      	adds	r1, r2, r7
 8008b02:	2222      	movs	r2, #34	@ 0x22
 8008b04:	18ba      	adds	r2, r7, r2
 8008b06:	7809      	ldrb	r1, [r1, #0]
 8008b08:	7812      	ldrb	r2, [r2, #0]
 8008b0a:	188a      	adds	r2, r1, r2
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	2317      	movs	r3, #23
 8008b10:	2220      	movs	r2, #32
 8008b12:	189b      	adds	r3, r3, r2
 8008b14:	19da      	adds	r2, r3, r7
 8008b16:	2323      	movs	r3, #35	@ 0x23
 8008b18:	18fb      	adds	r3, r7, r3
 8008b1a:	7812      	ldrb	r2, [r2, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d200      	bcs.n	8008b24 <CheckCRC+0x180>
 8008b22:	e754      	b.n	80089ce <CheckCRC+0x2a>
    }
  }
  return true;
 8008b24:	2301      	movs	r3, #1
}
 8008b26:	0018      	movs	r0, r3
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	b00f      	add	sp, #60	@ 0x3c
 8008b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b2e:	46c0      	nop			@ (mov r8, r8)
 8008b30:	0801bcd4 	.word	0x0801bcd4
 8008b34:	0801bc00 	.word	0x0801bc00

08008b38 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	000a      	movs	r2, r1
 8008b42:	1cfb      	adds	r3, r7, #3
 8008b44:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008b46:	230f      	movs	r3, #15
 8008b48:	18fb      	adds	r3, r7, r3
 8008b4a:	22ff      	movs	r2, #255	@ 0xff
 8008b4c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008b4e:	230e      	movs	r3, #14
 8008b50:	18fb      	adds	r3, r7, r3
 8008b52:	2200      	movs	r2, #0
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	e037      	b.n	8008bc8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008b58:	230e      	movs	r3, #14
 8008b5a:	18fb      	adds	r3, r7, r3
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	18d3      	adds	r3, r2, r3
 8008b62:	7819      	ldrb	r1, [r3, #0]
 8008b64:	220f      	movs	r2, #15
 8008b66:	18bb      	adds	r3, r7, r2
 8008b68:	18ba      	adds	r2, r7, r2
 8008b6a:	7812      	ldrb	r2, [r2, #0]
 8008b6c:	404a      	eors	r2, r1
 8008b6e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008b70:	230d      	movs	r3, #13
 8008b72:	18fb      	adds	r3, r7, r3
 8008b74:	2200      	movs	r2, #0
 8008b76:	701a      	strb	r2, [r3, #0]
 8008b78:	e01b      	b.n	8008bb2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8008b7a:	210f      	movs	r1, #15
 8008b7c:	187b      	adds	r3, r7, r1
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	da09      	bge.n	8008b9a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8008b86:	187b      	adds	r3, r7, r1
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	b25b      	sxtb	r3, r3
 8008b8e:	2231      	movs	r2, #49	@ 0x31
 8008b90:	4053      	eors	r3, r2
 8008b92:	b25a      	sxtb	r2, r3
 8008b94:	187b      	adds	r3, r7, r1
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	e005      	b.n	8008ba6 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8008b9a:	230f      	movs	r3, #15
 8008b9c:	18fa      	adds	r2, r7, r3
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	18db      	adds	r3, r3, r3
 8008ba4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008ba6:	210d      	movs	r1, #13
 8008ba8:	187b      	adds	r3, r7, r1
 8008baa:	781a      	ldrb	r2, [r3, #0]
 8008bac:	187b      	adds	r3, r7, r1
 8008bae:	3201      	adds	r2, #1
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	230d      	movs	r3, #13
 8008bb4:	18fb      	adds	r3, r7, r3
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b07      	cmp	r3, #7
 8008bba:	d9de      	bls.n	8008b7a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008bbc:	210e      	movs	r1, #14
 8008bbe:	187b      	adds	r3, r7, r1
 8008bc0:	781a      	ldrb	r2, [r3, #0]
 8008bc2:	187b      	adds	r3, r7, r1
 8008bc4:	3201      	adds	r2, #1
 8008bc6:	701a      	strb	r2, [r3, #0]
 8008bc8:	230e      	movs	r3, #14
 8008bca:	18fa      	adds	r2, r7, r3
 8008bcc:	1cfb      	adds	r3, r7, #3
 8008bce:	7812      	ldrb	r2, [r2, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3c0      	bcc.n	8008b58 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008bd6:	230f      	movs	r3, #15
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	781b      	ldrb	r3, [r3, #0]
}
 8008bdc:	0018      	movs	r0, r3
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b004      	add	sp, #16
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4936      	ldr	r1, [pc, #216]	@ (8008ccc <SGP_GetHT+0xe8>)
 8008bf4:	1c18      	adds	r0, r3, #0
 8008bf6:	f7f7 fde1 	bl	80007bc <__aeabi_fadd>
 8008bfa:	1c03      	adds	r3, r0, #0
 8008bfc:	4934      	ldr	r1, [pc, #208]	@ (8008cd0 <SGP_GetHT+0xec>)
 8008bfe:	1c18      	adds	r0, r3, #0
 8008c00:	f7f7 ff66 	bl	8000ad0 <__aeabi_fdiv>
 8008c04:	1c03      	adds	r3, r0, #0
 8008c06:	4933      	ldr	r1, [pc, #204]	@ (8008cd4 <SGP_GetHT+0xf0>)
 8008c08:	1c18      	adds	r0, r3, #0
 8008c0a:	f7f8 f947 	bl	8000e9c <__aeabi_fmul>
 8008c0e:	1c03      	adds	r3, r0, #0
 8008c10:	1c18      	adds	r0, r3, #0
 8008c12:	f7f7 fcd1 	bl	80005b8 <__aeabi_f2uiz>
 8008c16:	0003      	movs	r3, r0
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008cd8 <SGP_GetHT+0xf4>)
 8008c1c:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	492e      	ldr	r1, [pc, #184]	@ (8008cdc <SGP_GetHT+0xf8>)
 8008c24:	1c18      	adds	r0, r3, #0
 8008c26:	f7f7 ff53 	bl	8000ad0 <__aeabi_fdiv>
 8008c2a:	1c03      	adds	r3, r0, #0
 8008c2c:	4929      	ldr	r1, [pc, #164]	@ (8008cd4 <SGP_GetHT+0xf0>)
 8008c2e:	1c18      	adds	r0, r3, #0
 8008c30:	f7f8 f934 	bl	8000e9c <__aeabi_fmul>
 8008c34:	1c03      	adds	r3, r0, #0
 8008c36:	1c18      	adds	r0, r3, #0
 8008c38:	f7f7 fcbe 	bl	80005b8 <__aeabi_f2uiz>
 8008c3c:	0003      	movs	r3, r0
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	4b27      	ldr	r3, [pc, #156]	@ (8008ce0 <SGP_GetHT+0xfc>)
 8008c42:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008c44:	4b26      	ldr	r3, [pc, #152]	@ (8008ce0 <SGP_GetHT+0xfc>)
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	0a1b      	lsrs	r3, r3, #8
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	4b25      	ldr	r3, [pc, #148]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008c50:	709a      	strb	r2, [r3, #2]
 8008c52:	4b24      	ldr	r3, [pc, #144]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008c54:	789a      	ldrb	r2, [r3, #2]
 8008c56:	210c      	movs	r1, #12
 8008c58:	187b      	adds	r3, r7, r1
 8008c5a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008c5c:	4b20      	ldr	r3, [pc, #128]	@ (8008ce0 <SGP_GetHT+0xfc>)
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	4b20      	ldr	r3, [pc, #128]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008c64:	70da      	strb	r2, [r3, #3]
 8008c66:	4b1f      	ldr	r3, [pc, #124]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008c68:	78da      	ldrb	r2, [r3, #3]
 8008c6a:	187b      	adds	r3, r7, r1
 8008c6c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8008c6e:	187b      	adds	r3, r7, r1
 8008c70:	2102      	movs	r1, #2
 8008c72:	0018      	movs	r0, r3
 8008c74:	f7ff ff60 	bl	8008b38 <CalculateCRC>
 8008c78:	0003      	movs	r3, r0
 8008c7a:	001a      	movs	r2, r3
 8008c7c:	4b19      	ldr	r3, [pc, #100]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008c7e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008c80:	4b15      	ldr	r3, [pc, #84]	@ (8008cd8 <SGP_GetHT+0xf4>)
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	0a1b      	lsrs	r3, r3, #8
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	4b16      	ldr	r3, [pc, #88]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008c8c:	715a      	strb	r2, [r3, #5]
 8008c8e:	4b15      	ldr	r3, [pc, #84]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008c90:	795a      	ldrb	r2, [r3, #5]
 8008c92:	2108      	movs	r1, #8
 8008c94:	187b      	adds	r3, r7, r1
 8008c96:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008c98:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd8 <SGP_GetHT+0xf4>)
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	4b11      	ldr	r3, [pc, #68]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008ca0:	719a      	strb	r2, [r3, #6]
 8008ca2:	4b10      	ldr	r3, [pc, #64]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008ca4:	799a      	ldrb	r2, [r3, #6]
 8008ca6:	187b      	adds	r3, r7, r1
 8008ca8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008caa:	187b      	adds	r3, r7, r1
 8008cac:	2102      	movs	r1, #2
 8008cae:	0018      	movs	r0, r3
 8008cb0:	f7ff ff42 	bl	8008b38 <CalculateCRC>
 8008cb4:	0003      	movs	r3, r0
 8008cb6:	001a      	movs	r2, r3
 8008cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce4 <SGP_GetHT+0x100>)
 8008cba:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce8 <SGP_GetHT+0x104>)
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	701a      	strb	r2, [r3, #0]
}
 8008cc2:	46c0      	nop			@ (mov r8, r8)
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b004      	add	sp, #16
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	46c0      	nop			@ (mov r8, r8)
 8008ccc:	42340000 	.word	0x42340000
 8008cd0:	432f0000 	.word	0x432f0000
 8008cd4:	477fff00 	.word	0x477fff00
 8008cd8:	200029ae 	.word	0x200029ae
 8008cdc:	42c80000 	.word	0x42c80000
 8008ce0:	200029ac 	.word	0x200029ac
 8008ce4:	20000040 	.word	0x20000040
 8008ce8:	200029b0 	.word	0x200029b0

08008cec <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  init = false;
 8008cf0:	4b02      	ldr	r3, [pc, #8]	@ (8008cfc <InitDone+0x10>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
}
 8008cf6:	46c0      	nop			@ (mov r8, r8)
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	2000005a 	.word	0x2000005a

08008d00 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 8008d06:	f7fc fd03 	bl	8005710 <ReadBatteryVoltage>
 8008d0a:	1c03      	adds	r3, r0, #0
 8008d0c:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 8008d0e:	491f      	ldr	r1, [pc, #124]	@ (8008d8c <batteryChargeCheck+0x8c>)
 8008d10:	6838      	ldr	r0, [r7, #0]
 8008d12:	f7f7 fbdb 	bl	80004cc <__aeabi_fcmplt>
 8008d16:	1e03      	subs	r3, r0, #0
 8008d18:	d002      	beq.n	8008d20 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 8008d1a:	1dfb      	adds	r3, r7, #7
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 8008d20:	6838      	ldr	r0, [r7, #0]
 8008d22:	f7fa fb1d 	bl	8003360 <__aeabi_f2d>
 8008d26:	4a1a      	ldr	r2, [pc, #104]	@ (8008d90 <batteryChargeCheck+0x90>)
 8008d28:	4b1a      	ldr	r3, [pc, #104]	@ (8008d94 <batteryChargeCheck+0x94>)
 8008d2a:	f7f7 fb95 	bl	8000458 <__aeabi_dcmplt>
 8008d2e:	1e03      	subs	r3, r0, #0
 8008d30:	d008      	beq.n	8008d44 <batteryChargeCheck+0x44>
 8008d32:	4916      	ldr	r1, [pc, #88]	@ (8008d8c <batteryChargeCheck+0x8c>)
 8008d34:	6838      	ldr	r0, [r7, #0]
 8008d36:	f7f7 fbe7 	bl	8000508 <__aeabi_fcmpge>
 8008d3a:	1e03      	subs	r3, r0, #0
 8008d3c:	d002      	beq.n	8008d44 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 8008d3e:	1dfb      	adds	r3, r7, #7
 8008d40:	2202      	movs	r2, #2
 8008d42:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8008d44:	2181      	movs	r1, #129	@ 0x81
 8008d46:	05c9      	lsls	r1, r1, #23
 8008d48:	6838      	ldr	r0, [r7, #0]
 8008d4a:	f7f7 fbbf 	bl	80004cc <__aeabi_fcmplt>
 8008d4e:	1e03      	subs	r3, r0, #0
 8008d50:	d00b      	beq.n	8008d6a <batteryChargeCheck+0x6a>
 8008d52:	6838      	ldr	r0, [r7, #0]
 8008d54:	f7fa fb04 	bl	8003360 <__aeabi_f2d>
 8008d58:	4a0d      	ldr	r2, [pc, #52]	@ (8008d90 <batteryChargeCheck+0x90>)
 8008d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d94 <batteryChargeCheck+0x94>)
 8008d5c:	f7f7 fb9a 	bl	8000494 <__aeabi_dcmpge>
 8008d60:	1e03      	subs	r3, r0, #0
 8008d62:	d002      	beq.n	8008d6a <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8008d64:	1dfb      	adds	r3, r7, #7
 8008d66:	2203      	movs	r2, #3
 8008d68:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8008d6a:	2181      	movs	r1, #129	@ 0x81
 8008d6c:	05c9      	lsls	r1, r1, #23
 8008d6e:	6838      	ldr	r0, [r7, #0]
 8008d70:	f7f7 fbca 	bl	8000508 <__aeabi_fcmpge>
 8008d74:	1e03      	subs	r3, r0, #0
 8008d76:	d002      	beq.n	8008d7e <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8008d78:	1dfb      	adds	r3, r7, #7
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8008d7e:	1dfb      	adds	r3, r7, #7
 8008d80:	781b      	ldrb	r3, [r3, #0]
}
 8008d82:	0018      	movs	r0, r3
 8008d84:	46bd      	mov	sp, r7
 8008d86:	b002      	add	sp, #8
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	46c0      	nop			@ (mov r8, r8)
 8008d8c:	40600000 	.word	0x40600000
 8008d90:	9999999a 	.word	0x9999999a
 8008d94:	400d9999 	.word	0x400d9999

08008d98 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8008d98:	b590      	push	{r4, r7, lr}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	0004      	movs	r4, r0
 8008da0:	0008      	movs	r0, r1
 8008da2:	0011      	movs	r1, r2
 8008da4:	1dbb      	adds	r3, r7, #6
 8008da6:	1c22      	adds	r2, r4, #0
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	1d3b      	adds	r3, r7, #4
 8008dac:	1c02      	adds	r2, r0, #0
 8008dae:	801a      	strh	r2, [r3, #0]
 8008db0:	1cbb      	adds	r3, r7, #2
 8008db2:	1c0a      	adds	r2, r1, #0
 8008db4:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8008db6:	4b0f      	ldr	r3, [pc, #60]	@ (8008df4 <SetStatusLED+0x5c>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d107      	bne.n	8008dce <SetStatusLED+0x36>
 8008dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8008df8 <SetStatusLED+0x60>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d103      	bne.n	8008dce <SetStatusLED+0x36>
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008dfc <SetStatusLED+0x64>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00e      	beq.n	8008dec <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8008dce:	2380      	movs	r3, #128	@ 0x80
 8008dd0:	05db      	lsls	r3, r3, #23
 8008dd2:	1dba      	adds	r2, r7, #6
 8008dd4:	8812      	ldrh	r2, [r2, #0]
 8008dd6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8008dd8:	2380      	movs	r3, #128	@ 0x80
 8008dda:	05db      	lsls	r3, r3, #23
 8008ddc:	1d3a      	adds	r2, r7, #4
 8008dde:	8812      	ldrh	r2, [r2, #0]
 8008de0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8008de2:	2380      	movs	r3, #128	@ 0x80
 8008de4:	05db      	lsls	r3, r3, #23
 8008de6:	1cba      	adds	r2, r7, #2
 8008de8:	8812      	ldrh	r2, [r2, #0]
 8008dea:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008dec:	46c0      	nop			@ (mov r8, r8)
 8008dee:	46bd      	mov	sp, r7
 8008df0:	b003      	add	sp, #12
 8008df2:	bd90      	pop	{r4, r7, pc}
 8008df4:	200029b9 	.word	0x200029b9
 8008df8:	2000005a 	.word	0x2000005a
 8008dfc:	200029ba 	.word	0x200029ba

08008e00 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8008e00:	b590      	push	{r4, r7, lr}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	0004      	movs	r4, r0
 8008e08:	0008      	movs	r0, r1
 8008e0a:	0011      	movs	r1, r2
 8008e0c:	1dfb      	adds	r3, r7, #7
 8008e0e:	1c22      	adds	r2, r4, #0
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	1dbb      	adds	r3, r7, #6
 8008e14:	1c02      	adds	r2, r0, #0
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	1d7b      	adds	r3, r7, #5
 8008e1a:	1c0a      	adds	r2, r1, #0
 8008e1c:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8008e1e:	4b19      	ldr	r3, [pc, #100]	@ (8008e84 <SetDBLED+0x84>)
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d107      	bne.n	8008e36 <SetDBLED+0x36>
 8008e26:	4b18      	ldr	r3, [pc, #96]	@ (8008e88 <SetDBLED+0x88>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d103      	bne.n	8008e36 <SetDBLED+0x36>
 8008e2e:	4b17      	ldr	r3, [pc, #92]	@ (8008e8c <SetDBLED+0x8c>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d022      	beq.n	8008e7c <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8008e36:	1dfb      	adds	r3, r7, #7
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4053      	eors	r3, r2
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	001a      	movs	r2, r3
 8008e42:	4b13      	ldr	r3, [pc, #76]	@ (8008e90 <SetDBLED+0x90>)
 8008e44:	2101      	movs	r1, #1
 8008e46:	0018      	movs	r0, r3
 8008e48:	f002 fe01 	bl	800ba4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8008e4c:	1dbb      	adds	r3, r7, #6
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2201      	movs	r2, #1
 8008e52:	4053      	eors	r3, r2
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	001a      	movs	r2, r3
 8008e58:	2380      	movs	r3, #128	@ 0x80
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	480c      	ldr	r0, [pc, #48]	@ (8008e90 <SetDBLED+0x90>)
 8008e5e:	0019      	movs	r1, r3
 8008e60:	f002 fdf5 	bl	800ba4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8008e64:	1d7b      	adds	r3, r7, #5
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	4053      	eors	r3, r2
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	001a      	movs	r2, r3
 8008e70:	2380      	movs	r3, #128	@ 0x80
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4806      	ldr	r0, [pc, #24]	@ (8008e90 <SetDBLED+0x90>)
 8008e76:	0019      	movs	r1, r3
 8008e78:	f002 fde9 	bl	800ba4e <HAL_GPIO_WritePin>
  }
}
 8008e7c:	46c0      	nop			@ (mov r8, r8)
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b003      	add	sp, #12
 8008e82:	bd90      	pop	{r4, r7, pc}
 8008e84:	200029b9 	.word	0x200029b9
 8008e88:	2000005a 	.word	0x2000005a
 8008e8c:	200029ba 	.word	0x200029ba
 8008e90:	50000400 	.word	0x50000400

08008e94 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8008e94:	b590      	push	{r4, r7, lr}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	0004      	movs	r4, r0
 8008e9c:	0008      	movs	r0, r1
 8008e9e:	0011      	movs	r1, r2
 8008ea0:	1dbb      	adds	r3, r7, #6
 8008ea2:	1c22      	adds	r2, r4, #0
 8008ea4:	801a      	strh	r2, [r3, #0]
 8008ea6:	1d3b      	adds	r3, r7, #4
 8008ea8:	1c02      	adds	r2, r0, #0
 8008eaa:	801a      	strh	r2, [r3, #0]
 8008eac:	1cbb      	adds	r3, r7, #2
 8008eae:	1c0a      	adds	r2, r1, #0
 8008eb0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8008eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008eec <SetVocLED+0x58>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d107      	bne.n	8008eca <SetVocLED+0x36>
 8008eba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef0 <SetVocLED+0x5c>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d103      	bne.n	8008eca <SetVocLED+0x36>
 8008ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef4 <SetVocLED+0x60>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00b      	beq.n	8008ee2 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8008eca:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef8 <SetVocLED+0x64>)
 8008ecc:	1dba      	adds	r2, r7, #6
 8008ece:	8812      	ldrh	r2, [r2, #0]
 8008ed0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8008ed2:	4b09      	ldr	r3, [pc, #36]	@ (8008ef8 <SetVocLED+0x64>)
 8008ed4:	1d3a      	adds	r2, r7, #4
 8008ed6:	8812      	ldrh	r2, [r2, #0]
 8008ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8008eda:	4b07      	ldr	r3, [pc, #28]	@ (8008ef8 <SetVocLED+0x64>)
 8008edc:	1cba      	adds	r2, r7, #2
 8008ede:	8812      	ldrh	r2, [r2, #0]
 8008ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008ee2:	46c0      	nop			@ (mov r8, r8)
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	b003      	add	sp, #12
 8008ee8:	bd90      	pop	{r4, r7, pc}
 8008eea:	46c0      	nop			@ (mov r8, r8)
 8008eec:	200029b9 	.word	0x200029b9
 8008ef0:	2000005a 	.word	0x2000005a
 8008ef4:	200029ba 	.word	0x200029ba
 8008ef8:	40000400 	.word	0x40000400

08008efc <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8008efc:	b580      	push	{r7, lr}
 8008efe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f00:	4b07      	ldr	r3, [pc, #28]	@ (8008f20 <SetMeasurementIndicator+0x24>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d103      	bne.n	8008f10 <SetMeasurementIndicator+0x14>
 8008f08:	4b06      	ldr	r3, [pc, #24]	@ (8008f24 <SetMeasurementIndicator+0x28>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = 3000;
 8008f10:	2380      	movs	r3, #128	@ 0x80
 8008f12:	05db      	lsls	r3, r3, #23
 8008f14:	4a04      	ldr	r2, [pc, #16]	@ (8008f28 <SetMeasurementIndicator+0x2c>)
 8008f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008f18:	46c0      	nop			@ (mov r8, r8)
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	46c0      	nop			@ (mov r8, r8)
 8008f20:	200029b9 	.word	0x200029b9
 8008f24:	200029ba 	.word	0x200029ba
 8008f28:	00000bb8 	.word	0x00000bb8

08008f2c <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f30:	4b07      	ldr	r3, [pc, #28]	@ (8008f50 <ResetMeasurementIndicator+0x24>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d103      	bne.n	8008f40 <ResetMeasurementIndicator+0x14>
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <ResetMeasurementIndicator+0x28>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d004      	beq.n	8008f4a <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = 4000;
 8008f40:	2380      	movs	r3, #128	@ 0x80
 8008f42:	05db      	lsls	r3, r3, #23
 8008f44:	22fa      	movs	r2, #250	@ 0xfa
 8008f46:	0112      	lsls	r2, r2, #4
 8008f48:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008f4a:	46c0      	nop			@ (mov r8, r8)
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	200029b9 	.word	0x200029b9
 8008f54:	200029ba 	.word	0x200029ba

08008f58 <SetMICIndicator>:
void SetMICIndicator(){
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f5c:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <SetMICIndicator+0x24>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d103      	bne.n	8008f6c <SetMICIndicator+0x14>
 8008f64:	4b06      	ldr	r3, [pc, #24]	@ (8008f80 <SetMICIndicator+0x28>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = 3000;
 8008f6c:	2380      	movs	r3, #128	@ 0x80
 8008f6e:	05db      	lsls	r3, r3, #23
 8008f70:	4a04      	ldr	r2, [pc, #16]	@ (8008f84 <SetMICIndicator+0x2c>)
 8008f72:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008f74:	46c0      	nop			@ (mov r8, r8)
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	46c0      	nop			@ (mov r8, r8)
 8008f7c:	200029b9 	.word	0x200029b9
 8008f80:	200029ba 	.word	0x200029ba
 8008f84:	00000bb8 	.word	0x00000bb8

08008f88 <ResetMICIndicator>:
void ResetMICIndicator(){
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f8c:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <ResetMICIndicator+0x24>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d103      	bne.n	8008f9c <ResetMICIndicator+0x14>
 8008f94:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <ResetMICIndicator+0x28>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = 4000;
 8008f9c:	2380      	movs	r3, #128	@ 0x80
 8008f9e:	05db      	lsls	r3, r3, #23
 8008fa0:	22fa      	movs	r2, #250	@ 0xfa
 8008fa2:	0112      	lsls	r2, r2, #4
 8008fa4:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008fa6:	46c0      	nop			@ (mov r8, r8)
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	200029b9 	.word	0x200029b9
 8008fb0:	200029ba 	.word	0x200029ba

08008fb4 <SetESPIndicator>:
void SetESPIndicator(){
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008fb8:	4b07      	ldr	r3, [pc, #28]	@ (8008fd8 <SetESPIndicator+0x24>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d103      	bne.n	8008fc8 <SetESPIndicator+0x14>
 8008fc0:	4b06      	ldr	r3, [pc, #24]	@ (8008fdc <SetESPIndicator+0x28>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = 3000;
 8008fc8:	2380      	movs	r3, #128	@ 0x80
 8008fca:	05db      	lsls	r3, r3, #23
 8008fcc:	4a04      	ldr	r2, [pc, #16]	@ (8008fe0 <SetESPIndicator+0x2c>)
 8008fce:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008fd0:	46c0      	nop			@ (mov r8, r8)
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	46c0      	nop			@ (mov r8, r8)
 8008fd8:	200029b9 	.word	0x200029b9
 8008fdc:	200029ba 	.word	0x200029ba
 8008fe0:	00000bb8 	.word	0x00000bb8

08008fe4 <ResetESPIndicator>:
void ResetESPIndicator(){
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008fe8:	4b07      	ldr	r3, [pc, #28]	@ (8009008 <ResetESPIndicator+0x24>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d103      	bne.n	8008ff8 <ResetESPIndicator+0x14>
 8008ff0:	4b06      	ldr	r3, [pc, #24]	@ (800900c <ResetESPIndicator+0x28>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d004      	beq.n	8009002 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = 4000;
 8008ff8:	2380      	movs	r3, #128	@ 0x80
 8008ffa:	05db      	lsls	r3, r3, #23
 8008ffc:	22fa      	movs	r2, #250	@ 0xfa
 8008ffe:	0112      	lsls	r2, r2, #4
 8009000:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8009002:	46c0      	nop			@ (mov r8, r8)
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	200029b9 	.word	0x200029b9
 800900c:	200029ba 	.word	0x200029ba

08009010 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
  SetStatusLED(4000,4000,4000);
 8009014:	23fa      	movs	r3, #250	@ 0xfa
 8009016:	011a      	lsls	r2, r3, #4
 8009018:	23fa      	movs	r3, #250	@ 0xfa
 800901a:	0119      	lsls	r1, r3, #4
 800901c:	23fa      	movs	r3, #250	@ 0xfa
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	0018      	movs	r0, r3
 8009022:	f7ff feb9 	bl	8008d98 <SetStatusLED>
  SetDBLED(false,false,false);
 8009026:	2200      	movs	r2, #0
 8009028:	2100      	movs	r1, #0
 800902a:	2000      	movs	r0, #0
 800902c:	f7ff fee8 	bl	8008e00 <SetDBLED>
  SetVocLED(4000,4000,4000);
 8009030:	23fa      	movs	r3, #250	@ 0xfa
 8009032:	011a      	lsls	r2, r3, #4
 8009034:	23fa      	movs	r3, #250	@ 0xfa
 8009036:	0119      	lsls	r1, r3, #4
 8009038:	23fa      	movs	r3, #250	@ 0xfa
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	0018      	movs	r0, r3
 800903e:	f7ff ff29 	bl	8008e94 <SetVocLED>
return;
 8009042:	46c0      	nop			@ (mov r8, r8)
}
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <powerCheck>:

Battery_Status powerCheck(){
 8009048:	b590      	push	{r4, r7, lr}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800904e:	f7fc fc25 	bl	800589c <Check_USB_PowerOn>
 8009052:	0003      	movs	r3, r0
 8009054:	001a      	movs	r2, r3
 8009056:	2301      	movs	r3, #1
 8009058:	4053      	eors	r3, r2
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <powerCheck+0x24>
    status = batteryChargeCheck();
 8009060:	1dfc      	adds	r4, r7, #7
 8009062:	f7ff fe4d 	bl	8008d00 <batteryChargeCheck>
 8009066:	0003      	movs	r3, r0
 8009068:	7023      	strb	r3, [r4, #0]
 800906a:	e002      	b.n	8009072 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800906c:	1dfb      	adds	r3, r7, #7
 800906e:	2201      	movs	r2, #1
 8009070:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009072:	1dfb      	adds	r3, r7, #7
 8009074:	781b      	ldrb	r3, [r3, #0]
}
 8009076:	0018      	movs	r0, r3
 8009078:	46bd      	mov	sp, r7
 800907a:	b003      	add	sp, #12
 800907c:	bd90      	pop	{r4, r7, pc}
	...

08009080 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	0002      	movs	r2, r0
 8009088:	1dfb      	adds	r3, r7, #7
 800908a:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800908c:	1dfb      	adds	r3, r7, #7
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d105      	bne.n	80090a0 <powerDisplay+0x20>
    Debug("LEDS are okay");
 8009094:	4a18      	ldr	r2, [pc, #96]	@ (80090f8 <powerDisplay+0x78>)
 8009096:	4b19      	ldr	r3, [pc, #100]	@ (80090fc <powerDisplay+0x7c>)
 8009098:	0019      	movs	r1, r3
 800909a:	2003      	movs	r0, #3
 800909c:	f000 fdb2 	bl	8009c04 <CreateLine>

  }
  if(status == BATTERY_FULL){
 80090a0:	1dfb      	adds	r3, r7, #7
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	d105      	bne.n	80090b4 <powerDisplay+0x34>
    Debug("Battery fully charged");
 80090a8:	4a15      	ldr	r2, [pc, #84]	@ (8009100 <powerDisplay+0x80>)
 80090aa:	4b14      	ldr	r3, [pc, #80]	@ (80090fc <powerDisplay+0x7c>)
 80090ac:	0019      	movs	r1, r3
 80090ae:	2003      	movs	r0, #3
 80090b0:	f000 fda8 	bl	8009c04 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 80090b4:	1dfb      	adds	r3, r7, #7
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d105      	bne.n	80090c8 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 80090bc:	4a11      	ldr	r2, [pc, #68]	@ (8009104 <powerDisplay+0x84>)
 80090be:	4b0f      	ldr	r3, [pc, #60]	@ (80090fc <powerDisplay+0x7c>)
 80090c0:	0019      	movs	r1, r3
 80090c2:	2003      	movs	r0, #3
 80090c4:	f000 fd9e 	bl	8009c04 <CreateLine>
  }
  if(status == BATTERY_LOW){
 80090c8:	1dfb      	adds	r3, r7, #7
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d105      	bne.n	80090dc <powerDisplay+0x5c>
    Debug("Battery is getting low");
 80090d0:	4a0d      	ldr	r2, [pc, #52]	@ (8009108 <powerDisplay+0x88>)
 80090d2:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <powerDisplay+0x7c>)
 80090d4:	0019      	movs	r1, r3
 80090d6:	2003      	movs	r0, #3
 80090d8:	f000 fd94 	bl	8009c04 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 80090dc:	1dfb      	adds	r3, r7, #7
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d105      	bne.n	80090f0 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 80090e4:	4a09      	ldr	r2, [pc, #36]	@ (800910c <powerDisplay+0x8c>)
 80090e6:	4b05      	ldr	r3, [pc, #20]	@ (80090fc <powerDisplay+0x7c>)
 80090e8:	0019      	movs	r1, r3
 80090ea:	2003      	movs	r0, #3
 80090ec:	f000 fd8a 	bl	8009c04 <CreateLine>
  }
}
 80090f0:	46c0      	nop			@ (mov r8, r8)
 80090f2:	46bd      	mov	sp, r7
 80090f4:	b002      	add	sp, #8
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	0801bd7c 	.word	0x0801bd7c
 80090fc:	0801bd8c 	.word	0x0801bd8c
 8009100:	0801bd90 	.word	0x0801bd90
 8009104:	0801bda8 	.word	0x0801bda8
 8009108:	0801bdc8 	.word	0x0801bdc8
 800910c:	0801bde0 	.word	0x0801bde0

08009110 <configCheck>:

void configCheck(){
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8009114:	f7fc fbd1 	bl	80058ba <BootButton_Pressed>
 8009118:	1e03      	subs	r3, r0, #0
 800911a:	d007      	beq.n	800912c <configCheck+0x1c>
 800911c:	f7fc fbde 	bl	80058dc <UserButton_Pressed>
 8009120:	1e03      	subs	r3, r0, #0
 8009122:	d003      	beq.n	800912c <configCheck+0x1c>
    configSet = true;
 8009124:	4b3d      	ldr	r3, [pc, #244]	@ (800921c <configCheck+0x10c>)
 8009126:	2201      	movs	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]
 800912a:	e00a      	b.n	8009142 <configCheck+0x32>
  }
  else{
    configSet = false;
 800912c:	4b3b      	ldr	r3, [pc, #236]	@ (800921c <configCheck+0x10c>)
 800912e:	2200      	movs	r2, #0
 8009130:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8009132:	f001 f8ed 	bl	800a310 <HAL_GetTick>
 8009136:	0003      	movs	r3, r0
 8009138:	22fa      	movs	r2, #250	@ 0xfa
 800913a:	00d2      	lsls	r2, r2, #3
 800913c:	189a      	adds	r2, r3, r2
 800913e:	4b38      	ldr	r3, [pc, #224]	@ (8009220 <configCheck+0x110>)
 8009140:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8009142:	4b36      	ldr	r3, [pc, #216]	@ (800921c <configCheck+0x10c>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00d      	beq.n	8009166 <configCheck+0x56>
 800914a:	4b35      	ldr	r3, [pc, #212]	@ (8009220 <configCheck+0x110>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	0018      	movs	r0, r3
 8009150:	f000 fd02 	bl	8009b58 <TimestampIsReached>
 8009154:	1e03      	subs	r3, r0, #0
 8009156:	d006      	beq.n	8009166 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 8009158:	f7fa faf0 	bl	800373c <SetConfigMode>
    SetDBLED(true, true, true);
 800915c:	2201      	movs	r2, #1
 800915e:	2101      	movs	r1, #1
 8009160:	2001      	movs	r0, #1
 8009162:	f7ff fe4d 	bl	8008e00 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 8009166:	f7fc fba8 	bl	80058ba <BootButton_Pressed>
 800916a:	0003      	movs	r3, r0
 800916c:	001a      	movs	r2, r3
 800916e:	2301      	movs	r3, #1
 8009170:	4053      	eors	r3, r2
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01d      	beq.n	80091b4 <configCheck+0xa4>
 8009178:	f7fc fbb0 	bl	80058dc <UserButton_Pressed>
 800917c:	1e03      	subs	r3, r0, #0
 800917e:	d019      	beq.n	80091b4 <configCheck+0xa4>
 8009180:	4b28      	ldr	r3, [pc, #160]	@ (8009224 <configCheck+0x114>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2201      	movs	r2, #1
 8009186:	4053      	eors	r3, r2
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d012      	beq.n	80091b4 <configCheck+0xa4>
    SetLEDsOff();
 800918e:	f7ff ff3f 	bl	8009010 <SetLEDsOff>
    userToggle = !userToggle;
 8009192:	4b25      	ldr	r3, [pc, #148]	@ (8009228 <configCheck+0x118>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	1e5a      	subs	r2, r3, #1
 8009198:	4193      	sbcs	r3, r2
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2201      	movs	r2, #1
 800919e:	4053      	eors	r3, r2
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	1c1a      	adds	r2, r3, #0
 80091a4:	2301      	movs	r3, #1
 80091a6:	4013      	ands	r3, r2
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	4b1f      	ldr	r3, [pc, #124]	@ (8009228 <configCheck+0x118>)
 80091ac:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 80091ae:	4b1d      	ldr	r3, [pc, #116]	@ (8009224 <configCheck+0x114>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80091b4:	f7fc fb81 	bl	80058ba <BootButton_Pressed>
 80091b8:	0003      	movs	r3, r0
 80091ba:	001a      	movs	r2, r3
 80091bc:	2301      	movs	r3, #1
 80091be:	4053      	eors	r3, r2
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00b      	beq.n	80091de <configCheck+0xce>
 80091c6:	f7fc fb89 	bl	80058dc <UserButton_Pressed>
 80091ca:	0003      	movs	r3, r0
 80091cc:	001a      	movs	r2, r3
 80091ce:	2301      	movs	r3, #1
 80091d0:	4053      	eors	r3, r2
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <configCheck+0xce>
    buttonHeld = false;
 80091d8:	4b12      	ldr	r3, [pc, #72]	@ (8009224 <configCheck+0x114>)
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 80091de:	f7fc fb5d 	bl	800589c <Check_USB_PowerOn>
 80091e2:	1e03      	subs	r3, r0, #0
 80091e4:	d003      	beq.n	80091ee <configCheck+0xde>
    usbPluggedIn = true;
 80091e6:	4b11      	ldr	r3, [pc, #68]	@ (800922c <configCheck+0x11c>)
 80091e8:	2201      	movs	r2, #1
 80091ea:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 80091ec:	e012      	b.n	8009214 <configCheck+0x104>
    if(!userToggle && !init){
 80091ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009228 <configCheck+0x118>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2201      	movs	r2, #1
 80091f4:	4053      	eors	r3, r2
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d008      	beq.n	800920e <configCheck+0xfe>
 80091fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009230 <configCheck+0x120>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2201      	movs	r2, #1
 8009202:	4053      	eors	r3, r2
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <configCheck+0xfe>
      SetLEDsOff();
 800920a:	f7ff ff01 	bl	8009010 <SetLEDsOff>
    usbPluggedIn = false;
 800920e:	4b07      	ldr	r3, [pc, #28]	@ (800922c <configCheck+0x11c>)
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
}
 8009214:	46c0      	nop			@ (mov r8, r8)
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	200029b8 	.word	0x200029b8
 8009220:	200029bc 	.word	0x200029bc
 8009224:	200029bb 	.word	0x200029bb
 8009228:	200029ba 	.word	0x200029ba
 800922c:	200029b9 	.word	0x200029b9
 8009230:	2000005a 	.word	0x2000005a

08009234 <Status_Upkeep>:
  RTC_SetWakeUpTimer(&hrtc, sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  configCheck();
 8009238:	f7ff ff6a 	bl	8009110 <configCheck>
}
 800923c:	46c0      	nop			@ (mov r8, r8)
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8009242:	b590      	push	{r4, r7, lr}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8009248:	1dfc      	adds	r4, r7, #7
 800924a:	f7ff fefd 	bl	8009048 <powerCheck>
 800924e:	0003      	movs	r3, r0
 8009250:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);
 8009252:	1dfb      	adds	r3, r7, #7
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	0018      	movs	r0, r3
 8009258:	f7ff ff12 	bl	8009080 <powerDisplay>
  return status;
 800925c:	1dfb      	adds	r3, r7, #7
 800925e:	781b      	ldrb	r3, [r3, #0]

}
 8009260:	0018      	movs	r0, r3
 8009262:	46bd      	mov	sp, r7
 8009264:	b003      	add	sp, #12
 8009266:	bd90      	pop	{r4, r7, pc}

08009268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800926c:	4b07      	ldr	r3, [pc, #28]	@ (800928c <HAL_MspInit+0x24>)
 800926e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009270:	4b06      	ldr	r3, [pc, #24]	@ (800928c <HAL_MspInit+0x24>)
 8009272:	2101      	movs	r1, #1
 8009274:	430a      	orrs	r2, r1
 8009276:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8009278:	4b04      	ldr	r3, [pc, #16]	@ (800928c <HAL_MspInit+0x24>)
 800927a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800927c:	4b03      	ldr	r3, [pc, #12]	@ (800928c <HAL_MspInit+0x24>)
 800927e:	2180      	movs	r1, #128	@ 0x80
 8009280:	0549      	lsls	r1, r1, #21
 8009282:	430a      	orrs	r2, r1
 8009284:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009286:	46c0      	nop			@ (mov r8, r8)
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40021000 	.word	0x40021000

08009290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009294:	46c0      	nop			@ (mov r8, r8)
 8009296:	e7fd      	b.n	8009294 <NMI_Handler+0x4>

08009298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800929c:	46c0      	nop			@ (mov r8, r8)
 800929e:	e7fd      	b.n	800929c <HardFault_Handler+0x4>

080092a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80092a4:	46c0      	nop			@ (mov r8, r8)
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80092ae:	46c0      	nop			@ (mov r8, r8)
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80092b8:	f001 f818 	bl	800a2ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80092bc:	46c0      	nop			@ (mov r8, r8)
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80092c8:	4b05      	ldr	r3, [pc, #20]	@ (80092e0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80092ca:	0018      	movs	r0, r3
 80092cc:	f001 fe8b 	bl	800afe6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80092d0:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80092d2:	0018      	movs	r0, r3
 80092d4:	f001 fe87 	bl	800afe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80092d8:	46c0      	nop			@ (mov r8, r8)
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	46c0      	nop			@ (mov r8, r8)
 80092e0:	20000f64 	.word	0x20000f64
 80092e4:	20000f1c 	.word	0x20000f1c

080092e8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80092ec:	4b07      	ldr	r3, [pc, #28]	@ (800930c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80092ee:	0018      	movs	r0, r3
 80092f0:	f001 fe79 	bl	800afe6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80092f4:	4b06      	ldr	r3, [pc, #24]	@ (8009310 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80092f6:	0018      	movs	r0, r3
 80092f8:	f001 fe75 	bl	800afe6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80092fc:	4b05      	ldr	r3, [pc, #20]	@ (8009314 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80092fe:	0018      	movs	r0, r3
 8009300:	f001 fe71 	bl	800afe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8009304:	46c0      	nop			@ (mov r8, r8)
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	46c0      	nop			@ (mov r8, r8)
 800930c:	20000fe8 	.word	0x20000fe8
 8009310:	20002c6c 	.word	0x20002c6c
 8009314:	20002cb4 	.word	0x20002cb4

08009318 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800931c:	4b03      	ldr	r3, [pc, #12]	@ (800932c <USART4_5_IRQHandler+0x14>)
 800931e:	0018      	movs	r0, r3
 8009320:	f008 fcfe 	bl	8011d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8009324:	46c0      	nop			@ (mov r8, r8)
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	46c0      	nop			@ (mov r8, r8)
 800932c:	20002bb4 	.word	0x20002bb4

08009330 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8009334:	4b09      	ldr	r3, [pc, #36]	@ (800935c <I2C1_IRQHandler+0x2c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	699a      	ldr	r2, [r3, #24]
 800933a:	23e0      	movs	r3, #224	@ 0xe0
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	4013      	ands	r3, r2
 8009340:	d004      	beq.n	800934c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8009342:	4b06      	ldr	r3, [pc, #24]	@ (800935c <I2C1_IRQHandler+0x2c>)
 8009344:	0018      	movs	r0, r3
 8009346:	f002 fe5b 	bl	800c000 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800934a:	e003      	b.n	8009354 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800934c:	4b03      	ldr	r3, [pc, #12]	@ (800935c <I2C1_IRQHandler+0x2c>)
 800934e:	0018      	movs	r0, r3
 8009350:	f002 fe3c 	bl	800bfcc <HAL_I2C_EV_IRQHandler>
}
 8009354:	46c0      	nop			@ (mov r8, r8)
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	46c0      	nop			@ (mov r8, r8)
 800935c:	20000e74 	.word	0x20000e74

08009360 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009364:	4b03      	ldr	r3, [pc, #12]	@ (8009374 <USB_IRQHandler+0x14>)
 8009366:	0018      	movs	r0, r3
 8009368:	f005 f812 	bl	800e390 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800936c:	46c0      	nop			@ (mov r8, r8)
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	46c0      	nop			@ (mov r8, r8)
 8009374:	20003abc 	.word	0x20003abc

08009378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  return 1;
 800937c:	2301      	movs	r3, #1
}
 800937e:	0018      	movs	r0, r3
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <_kill>:

int _kill(int pid, int sig)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800938e:	f00f f98b 	bl	80186a8 <__errno>
 8009392:	0003      	movs	r3, r0
 8009394:	2216      	movs	r2, #22
 8009396:	601a      	str	r2, [r3, #0]
  return -1;
 8009398:	2301      	movs	r3, #1
 800939a:	425b      	negs	r3, r3
}
 800939c:	0018      	movs	r0, r3
 800939e:	46bd      	mov	sp, r7
 80093a0:	b002      	add	sp, #8
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <_exit>:

void _exit (int status)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80093ac:	2301      	movs	r3, #1
 80093ae:	425a      	negs	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	0011      	movs	r1, r2
 80093b4:	0018      	movs	r0, r3
 80093b6:	f7ff ffe5 	bl	8009384 <_kill>
  while (1) {}    /* Make sure we hang here */
 80093ba:	46c0      	nop			@ (mov r8, r8)
 80093bc:	e7fd      	b.n	80093ba <_exit+0x16>

080093be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b086      	sub	sp, #24
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
 80093ce:	e00a      	b.n	80093e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80093d0:	e000      	b.n	80093d4 <_read+0x16>
 80093d2:	bf00      	nop
 80093d4:	0001      	movs	r1, r0
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	60ba      	str	r2, [r7, #8]
 80093dc:	b2ca      	uxtb	r2, r1
 80093de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	3301      	adds	r3, #1
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	dbf0      	blt.n	80093d0 <_read+0x12>
  }

  return len;
 80093ee:	687b      	ldr	r3, [r7, #4]
}
 80093f0:	0018      	movs	r0, r3
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b006      	add	sp, #24
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009400:	2301      	movs	r3, #1
 8009402:	425b      	negs	r3, r3
}
 8009404:	0018      	movs	r0, r3
 8009406:	46bd      	mov	sp, r7
 8009408:	b002      	add	sp, #8
 800940a:	bd80      	pop	{r7, pc}

0800940c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2280      	movs	r2, #128	@ 0x80
 800941a:	0192      	lsls	r2, r2, #6
 800941c:	605a      	str	r2, [r3, #4]
  return 0;
 800941e:	2300      	movs	r3, #0
}
 8009420:	0018      	movs	r0, r3
 8009422:	46bd      	mov	sp, r7
 8009424:	b002      	add	sp, #8
 8009426:	bd80      	pop	{r7, pc}

08009428 <_isatty>:

int _isatty(int file)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009430:	2301      	movs	r3, #1
}
 8009432:	0018      	movs	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	b002      	add	sp, #8
 8009438:	bd80      	pop	{r7, pc}

0800943a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009446:	2300      	movs	r3, #0
}
 8009448:	0018      	movs	r0, r3
 800944a:	46bd      	mov	sp, r7
 800944c:	b004      	add	sp, #16
 800944e:	bd80      	pop	{r7, pc}

08009450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009458:	4a14      	ldr	r2, [pc, #80]	@ (80094ac <_sbrk+0x5c>)
 800945a:	4b15      	ldr	r3, [pc, #84]	@ (80094b0 <_sbrk+0x60>)
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009464:	4b13      	ldr	r3, [pc, #76]	@ (80094b4 <_sbrk+0x64>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d102      	bne.n	8009472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800946c:	4b11      	ldr	r3, [pc, #68]	@ (80094b4 <_sbrk+0x64>)
 800946e:	4a12      	ldr	r2, [pc, #72]	@ (80094b8 <_sbrk+0x68>)
 8009470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009472:	4b10      	ldr	r3, [pc, #64]	@ (80094b4 <_sbrk+0x64>)
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	18d3      	adds	r3, r2, r3
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	429a      	cmp	r2, r3
 800947e:	d207      	bcs.n	8009490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009480:	f00f f912 	bl	80186a8 <__errno>
 8009484:	0003      	movs	r3, r0
 8009486:	220c      	movs	r2, #12
 8009488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800948a:	2301      	movs	r3, #1
 800948c:	425b      	negs	r3, r3
 800948e:	e009      	b.n	80094a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009490:	4b08      	ldr	r3, [pc, #32]	@ (80094b4 <_sbrk+0x64>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009496:	4b07      	ldr	r3, [pc, #28]	@ (80094b4 <_sbrk+0x64>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	18d2      	adds	r2, r2, r3
 800949e:	4b05      	ldr	r3, [pc, #20]	@ (80094b4 <_sbrk+0x64>)
 80094a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80094a2:	68fb      	ldr	r3, [r7, #12]
}
 80094a4:	0018      	movs	r0, r3
 80094a6:	46bd      	mov	sp, r7
 80094a8:	b006      	add	sp, #24
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20005000 	.word	0x20005000
 80094b0:	00000400 	.word	0x00000400
 80094b4:	200029c0 	.word	0x200029c0
 80094b8:	20004120 	.word	0x20004120

080094bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80094c0:	46c0      	nop			@ (mov r8, r8)
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094ce:	2310      	movs	r3, #16
 80094d0:	18fb      	adds	r3, r7, r3
 80094d2:	0018      	movs	r0, r3
 80094d4:	2308      	movs	r3, #8
 80094d6:	001a      	movs	r2, r3
 80094d8:	2100      	movs	r1, #0
 80094da:	f00f f853 	bl	8018584 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80094de:	003b      	movs	r3, r7
 80094e0:	0018      	movs	r0, r3
 80094e2:	2310      	movs	r3, #16
 80094e4:	001a      	movs	r2, r3
 80094e6:	2100      	movs	r1, #0
 80094e8:	f00f f84c 	bl	8018584 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80094ec:	4b2e      	ldr	r3, [pc, #184]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 80094ee:	2280      	movs	r2, #128	@ 0x80
 80094f0:	05d2      	lsls	r2, r2, #23
 80094f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80094f4:	4b2c      	ldr	r3, [pc, #176]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094fa:	4b2b      	ldr	r3, [pc, #172]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8009500:	4b29      	ldr	r3, [pc, #164]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 8009502:	4a2a      	ldr	r2, [pc, #168]	@ (80095ac <MX_TIM2_Init+0xe4>)
 8009504:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009506:	4b28      	ldr	r3, [pc, #160]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 8009508:	2200      	movs	r2, #0
 800950a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800950c:	4b26      	ldr	r3, [pc, #152]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 800950e:	2200      	movs	r2, #0
 8009510:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009512:	4b25      	ldr	r3, [pc, #148]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 8009514:	0018      	movs	r0, r3
 8009516:	f007 fe75 	bl	8011204 <HAL_TIM_PWM_Init>
 800951a:	1e03      	subs	r3, r0, #0
 800951c:	d001      	beq.n	8009522 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800951e:	f7fd f8cf 	bl	80066c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009522:	2110      	movs	r1, #16
 8009524:	187b      	adds	r3, r7, r1
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800952a:	187b      	adds	r3, r7, r1
 800952c:	2200      	movs	r2, #0
 800952e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009530:	187a      	adds	r2, r7, r1
 8009532:	4b1d      	ldr	r3, [pc, #116]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 8009534:	0011      	movs	r1, r2
 8009536:	0018      	movs	r0, r3
 8009538:	f008 f982 	bl	8011840 <HAL_TIMEx_MasterConfigSynchronization>
 800953c:	1e03      	subs	r3, r0, #0
 800953e:	d001      	beq.n	8009544 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8009540:	f7fd f8be 	bl	80066c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009544:	003b      	movs	r3, r7
 8009546:	2260      	movs	r2, #96	@ 0x60
 8009548:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800954a:	003b      	movs	r3, r7
 800954c:	2200      	movs	r2, #0
 800954e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009550:	003b      	movs	r3, r7
 8009552:	2200      	movs	r2, #0
 8009554:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009556:	003b      	movs	r3, r7
 8009558:	2200      	movs	r2, #0
 800955a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800955c:	0039      	movs	r1, r7
 800955e:	4b12      	ldr	r3, [pc, #72]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 8009560:	2200      	movs	r2, #0
 8009562:	0018      	movs	r0, r3
 8009564:	f007 ff20 	bl	80113a8 <HAL_TIM_PWM_ConfigChannel>
 8009568:	1e03      	subs	r3, r0, #0
 800956a:	d001      	beq.n	8009570 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800956c:	f7fd f8a8 	bl	80066c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009570:	0039      	movs	r1, r7
 8009572:	4b0d      	ldr	r3, [pc, #52]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 8009574:	2208      	movs	r2, #8
 8009576:	0018      	movs	r0, r3
 8009578:	f007 ff16 	bl	80113a8 <HAL_TIM_PWM_ConfigChannel>
 800957c:	1e03      	subs	r3, r0, #0
 800957e:	d001      	beq.n	8009584 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8009580:	f7fd f89e 	bl	80066c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009584:	0039      	movs	r1, r7
 8009586:	4b08      	ldr	r3, [pc, #32]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 8009588:	220c      	movs	r2, #12
 800958a:	0018      	movs	r0, r3
 800958c:	f007 ff0c 	bl	80113a8 <HAL_TIM_PWM_ConfigChannel>
 8009590:	1e03      	subs	r3, r0, #0
 8009592:	d001      	beq.n	8009598 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8009594:	f7fd f894 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009598:	4b03      	ldr	r3, [pc, #12]	@ (80095a8 <MX_TIM2_Init+0xe0>)
 800959a:	0018      	movs	r0, r3
 800959c:	f000 f8aa 	bl	80096f4 <HAL_TIM_MspPostInit>

}
 80095a0:	46c0      	nop			@ (mov r8, r8)
 80095a2:	46bd      	mov	sp, r7
 80095a4:	b006      	add	sp, #24
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	200029c4 	.word	0x200029c4
 80095ac:	0000ffff 	.word	0x0000ffff

080095b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095b6:	2310      	movs	r3, #16
 80095b8:	18fb      	adds	r3, r7, r3
 80095ba:	0018      	movs	r0, r3
 80095bc:	2308      	movs	r3, #8
 80095be:	001a      	movs	r2, r3
 80095c0:	2100      	movs	r1, #0
 80095c2:	f00e ffdf 	bl	8018584 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80095c6:	003b      	movs	r3, r7
 80095c8:	0018      	movs	r0, r3
 80095ca:	2310      	movs	r3, #16
 80095cc:	001a      	movs	r2, r3
 80095ce:	2100      	movs	r1, #0
 80095d0:	f00e ffd8 	bl	8018584 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80095d4:	4b32      	ldr	r3, [pc, #200]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 80095d6:	4a33      	ldr	r2, [pc, #204]	@ (80096a4 <MX_TIM3_Init+0xf4>)
 80095d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80095da:	4b31      	ldr	r3, [pc, #196]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 80095dc:	2200      	movs	r2, #0
 80095de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095e0:	4b2f      	ldr	r3, [pc, #188]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80095e6:	4b2e      	ldr	r3, [pc, #184]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 80095e8:	4a2f      	ldr	r2, [pc, #188]	@ (80096a8 <MX_TIM3_Init+0xf8>)
 80095ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095ec:	4b2c      	ldr	r3, [pc, #176]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095f2:	4b2b      	ldr	r3, [pc, #172]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80095f8:	4b29      	ldr	r3, [pc, #164]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 80095fa:	0018      	movs	r0, r3
 80095fc:	f007 fe02 	bl	8011204 <HAL_TIM_PWM_Init>
 8009600:	1e03      	subs	r3, r0, #0
 8009602:	d001      	beq.n	8009608 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8009604:	f7fd f85c 	bl	80066c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009608:	2110      	movs	r1, #16
 800960a:	187b      	adds	r3, r7, r1
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009610:	187b      	adds	r3, r7, r1
 8009612:	2200      	movs	r2, #0
 8009614:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009616:	187a      	adds	r2, r7, r1
 8009618:	4b21      	ldr	r3, [pc, #132]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 800961a:	0011      	movs	r1, r2
 800961c:	0018      	movs	r0, r3
 800961e:	f008 f90f 	bl	8011840 <HAL_TIMEx_MasterConfigSynchronization>
 8009622:	1e03      	subs	r3, r0, #0
 8009624:	d001      	beq.n	800962a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8009626:	f7fd f84b 	bl	80066c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800962a:	003b      	movs	r3, r7
 800962c:	2260      	movs	r2, #96	@ 0x60
 800962e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009630:	003b      	movs	r3, r7
 8009632:	2200      	movs	r2, #0
 8009634:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009636:	003b      	movs	r3, r7
 8009638:	2200      	movs	r2, #0
 800963a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800963c:	003b      	movs	r3, r7
 800963e:	2200      	movs	r2, #0
 8009640:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009642:	0039      	movs	r1, r7
 8009644:	4b16      	ldr	r3, [pc, #88]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 8009646:	2200      	movs	r2, #0
 8009648:	0018      	movs	r0, r3
 800964a:	f007 fead 	bl	80113a8 <HAL_TIM_PWM_ConfigChannel>
 800964e:	1e03      	subs	r3, r0, #0
 8009650:	d001      	beq.n	8009656 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8009652:	f7fd f835 	bl	80066c0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8009656:	4b12      	ldr	r3, [pc, #72]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 8009658:	2104      	movs	r1, #4
 800965a:	0018      	movs	r0, r3
 800965c:	f008 f94e 	bl	80118fc <HAL_TIMEx_RemapConfig>
 8009660:	1e03      	subs	r3, r0, #0
 8009662:	d001      	beq.n	8009668 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8009664:	f7fd f82c 	bl	80066c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009668:	0039      	movs	r1, r7
 800966a:	4b0d      	ldr	r3, [pc, #52]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 800966c:	2204      	movs	r2, #4
 800966e:	0018      	movs	r0, r3
 8009670:	f007 fe9a 	bl	80113a8 <HAL_TIM_PWM_ConfigChannel>
 8009674:	1e03      	subs	r3, r0, #0
 8009676:	d001      	beq.n	800967c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009678:	f7fd f822 	bl	80066c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800967c:	0039      	movs	r1, r7
 800967e:	4b08      	ldr	r3, [pc, #32]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 8009680:	2208      	movs	r2, #8
 8009682:	0018      	movs	r0, r3
 8009684:	f007 fe90 	bl	80113a8 <HAL_TIM_PWM_ConfigChannel>
 8009688:	1e03      	subs	r3, r0, #0
 800968a:	d001      	beq.n	8009690 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800968c:	f7fd f818 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009690:	4b03      	ldr	r3, [pc, #12]	@ (80096a0 <MX_TIM3_Init+0xf0>)
 8009692:	0018      	movs	r0, r3
 8009694:	f000 f82e 	bl	80096f4 <HAL_TIM_MspPostInit>

}
 8009698:	46c0      	nop			@ (mov r8, r8)
 800969a:	46bd      	mov	sp, r7
 800969c:	b006      	add	sp, #24
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20002a04 	.word	0x20002a04
 80096a4:	40000400 	.word	0x40000400
 80096a8:	0000ffff 	.word	0x0000ffff

080096ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	2380      	movs	r3, #128	@ 0x80
 80096ba:	05db      	lsls	r3, r3, #23
 80096bc:	429a      	cmp	r2, r3
 80096be:	d106      	bne.n	80096ce <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80096c0:	4b0a      	ldr	r3, [pc, #40]	@ (80096ec <HAL_TIM_PWM_MspInit+0x40>)
 80096c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096c4:	4b09      	ldr	r3, [pc, #36]	@ (80096ec <HAL_TIM_PWM_MspInit+0x40>)
 80096c6:	2101      	movs	r1, #1
 80096c8:	430a      	orrs	r2, r1
 80096ca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80096cc:	e00a      	b.n	80096e4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a07      	ldr	r2, [pc, #28]	@ (80096f0 <HAL_TIM_PWM_MspInit+0x44>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d105      	bne.n	80096e4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80096d8:	4b04      	ldr	r3, [pc, #16]	@ (80096ec <HAL_TIM_PWM_MspInit+0x40>)
 80096da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096dc:	4b03      	ldr	r3, [pc, #12]	@ (80096ec <HAL_TIM_PWM_MspInit+0x40>)
 80096de:	2102      	movs	r1, #2
 80096e0:	430a      	orrs	r2, r1
 80096e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80096e4:	46c0      	nop			@ (mov r8, r8)
 80096e6:	46bd      	mov	sp, r7
 80096e8:	b002      	add	sp, #8
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	40021000 	.word	0x40021000
 80096f0:	40000400 	.word	0x40000400

080096f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80096f4:	b590      	push	{r4, r7, lr}
 80096f6:	b08b      	sub	sp, #44	@ 0x2c
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096fc:	2414      	movs	r4, #20
 80096fe:	193b      	adds	r3, r7, r4
 8009700:	0018      	movs	r0, r3
 8009702:	2314      	movs	r3, #20
 8009704:	001a      	movs	r2, r3
 8009706:	2100      	movs	r1, #0
 8009708:	f00e ff3c 	bl	8018584 <memset>
  if(timHandle->Instance==TIM2)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	2380      	movs	r3, #128	@ 0x80
 8009712:	05db      	lsls	r3, r3, #23
 8009714:	429a      	cmp	r2, r3
 8009716:	d123      	bne.n	8009760 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009718:	4b27      	ldr	r3, [pc, #156]	@ (80097b8 <HAL_TIM_MspPostInit+0xc4>)
 800971a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971c:	4b26      	ldr	r3, [pc, #152]	@ (80097b8 <HAL_TIM_MspPostInit+0xc4>)
 800971e:	2101      	movs	r1, #1
 8009720:	430a      	orrs	r2, r1
 8009722:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009724:	4b24      	ldr	r3, [pc, #144]	@ (80097b8 <HAL_TIM_MspPostInit+0xc4>)
 8009726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009728:	2201      	movs	r2, #1
 800972a:	4013      	ands	r3, r2
 800972c:	613b      	str	r3, [r7, #16]
 800972e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8009730:	0021      	movs	r1, r4
 8009732:	187b      	adds	r3, r7, r1
 8009734:	220d      	movs	r2, #13
 8009736:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009738:	187b      	adds	r3, r7, r1
 800973a:	2202      	movs	r2, #2
 800973c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800973e:	187b      	adds	r3, r7, r1
 8009740:	2200      	movs	r2, #0
 8009742:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009744:	187b      	adds	r3, r7, r1
 8009746:	2200      	movs	r2, #0
 8009748:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800974a:	187b      	adds	r3, r7, r1
 800974c:	2202      	movs	r2, #2
 800974e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009750:	187a      	adds	r2, r7, r1
 8009752:	23a0      	movs	r3, #160	@ 0xa0
 8009754:	05db      	lsls	r3, r3, #23
 8009756:	0011      	movs	r1, r2
 8009758:	0018      	movs	r0, r3
 800975a:	f001 fefb 	bl	800b554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800975e:	e027      	b.n	80097b0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a15      	ldr	r2, [pc, #84]	@ (80097bc <HAL_TIM_MspPostInit+0xc8>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d122      	bne.n	80097b0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800976a:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <HAL_TIM_MspPostInit+0xc4>)
 800976c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800976e:	4b12      	ldr	r3, [pc, #72]	@ (80097b8 <HAL_TIM_MspPostInit+0xc4>)
 8009770:	2104      	movs	r1, #4
 8009772:	430a      	orrs	r2, r1
 8009774:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009776:	4b10      	ldr	r3, [pc, #64]	@ (80097b8 <HAL_TIM_MspPostInit+0xc4>)
 8009778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977a:	2204      	movs	r2, #4
 800977c:	4013      	ands	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8009782:	2114      	movs	r1, #20
 8009784:	187b      	adds	r3, r7, r1
 8009786:	22e0      	movs	r2, #224	@ 0xe0
 8009788:	0052      	lsls	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800978c:	187b      	adds	r3, r7, r1
 800978e:	2202      	movs	r2, #2
 8009790:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009792:	187b      	adds	r3, r7, r1
 8009794:	2200      	movs	r2, #0
 8009796:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009798:	187b      	adds	r3, r7, r1
 800979a:	2200      	movs	r2, #0
 800979c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800979e:	187b      	adds	r3, r7, r1
 80097a0:	2202      	movs	r2, #2
 80097a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097a4:	187b      	adds	r3, r7, r1
 80097a6:	4a06      	ldr	r2, [pc, #24]	@ (80097c0 <HAL_TIM_MspPostInit+0xcc>)
 80097a8:	0019      	movs	r1, r3
 80097aa:	0010      	movs	r0, r2
 80097ac:	f001 fed2 	bl	800b554 <HAL_GPIO_Init>
}
 80097b0:	46c0      	nop			@ (mov r8, r8)
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b00b      	add	sp, #44	@ 0x2c
 80097b6:	bd90      	pop	{r4, r7, pc}
 80097b8:	40021000 	.word	0x40021000
 80097bc:	40000400 	.word	0x40000400
 80097c0:	50000800 	.word	0x50000800

080097c4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80097c8:	4b17      	ldr	r3, [pc, #92]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 80097ca:	4a18      	ldr	r2, [pc, #96]	@ (800982c <MX_LPUART1_UART_Init+0x68>)
 80097cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80097ce:	4b16      	ldr	r3, [pc, #88]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 80097d0:	22e1      	movs	r2, #225	@ 0xe1
 80097d2:	0252      	lsls	r2, r2, #9
 80097d4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80097d6:	4b14      	ldr	r3, [pc, #80]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 80097d8:	2200      	movs	r2, #0
 80097da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80097dc:	4b12      	ldr	r3, [pc, #72]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 80097de:	2200      	movs	r2, #0
 80097e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80097e2:	4b11      	ldr	r3, [pc, #68]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80097e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 80097ea:	220c      	movs	r2, #12
 80097ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80097f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80097fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 80097fc:	2218      	movs	r2, #24
 80097fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8009800:	4b09      	ldr	r3, [pc, #36]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 8009802:	2280      	movs	r2, #128	@ 0x80
 8009804:	0212      	lsls	r2, r2, #8
 8009806:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8009808:	4b07      	ldr	r3, [pc, #28]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 800980a:	2280      	movs	r2, #128	@ 0x80
 800980c:	0152      	lsls	r2, r2, #5
 800980e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009810:	4b05      	ldr	r3, [pc, #20]	@ (8009828 <MX_LPUART1_UART_Init+0x64>)
 8009812:	0018      	movs	r0, r3
 8009814:	f008 f890 	bl	8011938 <HAL_UART_Init>
 8009818:	1e03      	subs	r3, r0, #0
 800981a:	d001      	beq.n	8009820 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800981c:	f7fc ff50 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009820:	46c0      	nop			@ (mov r8, r8)
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	46c0      	nop			@ (mov r8, r8)
 8009828:	20002a44 	.word	0x20002a44
 800982c:	40004800 	.word	0x40004800

08009830 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009834:	4b16      	ldr	r3, [pc, #88]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 8009836:	4a17      	ldr	r2, [pc, #92]	@ (8009894 <MX_USART1_UART_Init+0x64>)
 8009838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800983a:	4b15      	ldr	r3, [pc, #84]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 800983c:	22e1      	movs	r2, #225	@ 0xe1
 800983e:	0252      	lsls	r2, r2, #9
 8009840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009842:	4b13      	ldr	r3, [pc, #76]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 8009844:	2200      	movs	r2, #0
 8009846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009848:	4b11      	ldr	r3, [pc, #68]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 800984a:	2200      	movs	r2, #0
 800984c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800984e:	4b10      	ldr	r3, [pc, #64]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 8009850:	2200      	movs	r2, #0
 8009852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009854:	4b0e      	ldr	r3, [pc, #56]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 8009856:	220c      	movs	r2, #12
 8009858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800985a:	4b0d      	ldr	r3, [pc, #52]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 800985c:	2200      	movs	r2, #0
 800985e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009860:	4b0b      	ldr	r3, [pc, #44]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 8009862:	2200      	movs	r2, #0
 8009864:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009866:	4b0a      	ldr	r3, [pc, #40]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 8009868:	2200      	movs	r2, #0
 800986a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800986c:	4b08      	ldr	r3, [pc, #32]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 800986e:	2208      	movs	r2, #8
 8009870:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8009872:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 8009874:	2280      	movs	r2, #128	@ 0x80
 8009876:	0212      	lsls	r2, r2, #8
 8009878:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800987a:	4b05      	ldr	r3, [pc, #20]	@ (8009890 <MX_USART1_UART_Init+0x60>)
 800987c:	0018      	movs	r0, r3
 800987e:	f008 f85b 	bl	8011938 <HAL_UART_Init>
 8009882:	1e03      	subs	r3, r0, #0
 8009884:	d001      	beq.n	800988a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8009886:	f7fc ff1b 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800988a:	46c0      	nop			@ (mov r8, r8)
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20002afc 	.word	0x20002afc
 8009894:	40013800 	.word	0x40013800

08009898 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800989c:	4b14      	ldr	r3, [pc, #80]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 800989e:	4a15      	ldr	r2, [pc, #84]	@ (80098f4 <MX_USART4_UART_Init+0x5c>)
 80098a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80098a2:	4b13      	ldr	r3, [pc, #76]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098a4:	22e1      	movs	r2, #225	@ 0xe1
 80098a6:	0252      	lsls	r2, r2, #9
 80098a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80098aa:	4b11      	ldr	r3, [pc, #68]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80098b0:	4b0f      	ldr	r3, [pc, #60]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80098b6:	4b0e      	ldr	r3, [pc, #56]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80098bc:	4b0c      	ldr	r3, [pc, #48]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098be:	220c      	movs	r2, #12
 80098c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098c2:	4b0b      	ldr	r3, [pc, #44]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80098c8:	4b09      	ldr	r3, [pc, #36]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80098ce:	4b08      	ldr	r3, [pc, #32]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80098d4:	4b06      	ldr	r3, [pc, #24]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80098da:	4b05      	ldr	r3, [pc, #20]	@ (80098f0 <MX_USART4_UART_Init+0x58>)
 80098dc:	0018      	movs	r0, r3
 80098de:	f008 f82b 	bl	8011938 <HAL_UART_Init>
 80098e2:	1e03      	subs	r3, r0, #0
 80098e4:	d001      	beq.n	80098ea <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80098e6:	f7fc feeb 	bl	80066c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80098ea:	46c0      	nop			@ (mov r8, r8)
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20002bb4 	.word	0x20002bb4
 80098f4:	40004c00 	.word	0x40004c00

080098f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80098f8:	b590      	push	{r4, r7, lr}
 80098fa:	b08d      	sub	sp, #52	@ 0x34
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009900:	241c      	movs	r4, #28
 8009902:	193b      	adds	r3, r7, r4
 8009904:	0018      	movs	r0, r3
 8009906:	2314      	movs	r3, #20
 8009908:	001a      	movs	r2, r3
 800990a:	2100      	movs	r1, #0
 800990c:	f00e fe3a 	bl	8018584 <memset>
  if(uartHandle->Instance==LPUART1)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a87      	ldr	r2, [pc, #540]	@ (8009b34 <HAL_UART_MspInit+0x23c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d129      	bne.n	800996e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800991a:	4b87      	ldr	r3, [pc, #540]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 800991c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800991e:	4b86      	ldr	r3, [pc, #536]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 8009920:	2180      	movs	r1, #128	@ 0x80
 8009922:	02c9      	lsls	r1, r1, #11
 8009924:	430a      	orrs	r2, r1
 8009926:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009928:	4b83      	ldr	r3, [pc, #524]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 800992a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800992c:	4b82      	ldr	r3, [pc, #520]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 800992e:	2104      	movs	r1, #4
 8009930:	430a      	orrs	r2, r1
 8009932:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009934:	4b80      	ldr	r3, [pc, #512]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 8009936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009938:	2204      	movs	r2, #4
 800993a:	4013      	ands	r3, r2
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009940:	0021      	movs	r1, r4
 8009942:	187b      	adds	r3, r7, r1
 8009944:	2203      	movs	r2, #3
 8009946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009948:	187b      	adds	r3, r7, r1
 800994a:	2202      	movs	r2, #2
 800994c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800994e:	187b      	adds	r3, r7, r1
 8009950:	2200      	movs	r2, #0
 8009952:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009954:	187b      	adds	r3, r7, r1
 8009956:	2203      	movs	r2, #3
 8009958:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800995a:	187b      	adds	r3, r7, r1
 800995c:	2206      	movs	r2, #6
 800995e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009960:	187b      	adds	r3, r7, r1
 8009962:	4a76      	ldr	r2, [pc, #472]	@ (8009b3c <HAL_UART_MspInit+0x244>)
 8009964:	0019      	movs	r1, r3
 8009966:	0010      	movs	r0, r2
 8009968:	f001 fdf4 	bl	800b554 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800996c:	e0dd      	b.n	8009b2a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a73      	ldr	r2, [pc, #460]	@ (8009b40 <HAL_UART_MspInit+0x248>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d12b      	bne.n	80099d0 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8009978:	4b6f      	ldr	r3, [pc, #444]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 800997a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800997c:	4b6e      	ldr	r3, [pc, #440]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 800997e:	2180      	movs	r1, #128	@ 0x80
 8009980:	01c9      	lsls	r1, r1, #7
 8009982:	430a      	orrs	r2, r1
 8009984:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009986:	4b6c      	ldr	r3, [pc, #432]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 8009988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800998a:	4b6b      	ldr	r3, [pc, #428]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 800998c:	2101      	movs	r1, #1
 800998e:	430a      	orrs	r2, r1
 8009990:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009992:	4b69      	ldr	r3, [pc, #420]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 8009994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009996:	2201      	movs	r2, #1
 8009998:	4013      	ands	r3, r2
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800999e:	211c      	movs	r1, #28
 80099a0:	187b      	adds	r3, r7, r1
 80099a2:	22c0      	movs	r2, #192	@ 0xc0
 80099a4:	00d2      	lsls	r2, r2, #3
 80099a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a8:	187b      	adds	r3, r7, r1
 80099aa:	2202      	movs	r2, #2
 80099ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ae:	187b      	adds	r3, r7, r1
 80099b0:	2200      	movs	r2, #0
 80099b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099b4:	187b      	adds	r3, r7, r1
 80099b6:	2203      	movs	r2, #3
 80099b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80099ba:	187b      	adds	r3, r7, r1
 80099bc:	2204      	movs	r2, #4
 80099be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099c0:	187a      	adds	r2, r7, r1
 80099c2:	23a0      	movs	r3, #160	@ 0xa0
 80099c4:	05db      	lsls	r3, r3, #23
 80099c6:	0011      	movs	r1, r2
 80099c8:	0018      	movs	r0, r3
 80099ca:	f001 fdc3 	bl	800b554 <HAL_GPIO_Init>
}
 80099ce:	e0ac      	b.n	8009b2a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a5b      	ldr	r2, [pc, #364]	@ (8009b44 <HAL_UART_MspInit+0x24c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d000      	beq.n	80099dc <HAL_UART_MspInit+0xe4>
 80099da:	e0a6      	b.n	8009b2a <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 80099dc:	4b56      	ldr	r3, [pc, #344]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 80099de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099e0:	4b55      	ldr	r3, [pc, #340]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 80099e2:	2180      	movs	r1, #128	@ 0x80
 80099e4:	0309      	lsls	r1, r1, #12
 80099e6:	430a      	orrs	r2, r1
 80099e8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099ea:	4b53      	ldr	r3, [pc, #332]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 80099ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ee:	4b52      	ldr	r3, [pc, #328]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 80099f0:	2101      	movs	r1, #1
 80099f2:	430a      	orrs	r2, r1
 80099f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80099f6:	4b50      	ldr	r3, [pc, #320]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 80099f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fa:	2201      	movs	r2, #1
 80099fc:	4013      	ands	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a02:	4b4d      	ldr	r3, [pc, #308]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 8009a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a06:	4b4c      	ldr	r3, [pc, #304]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 8009a08:	2104      	movs	r1, #4
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8009b38 <HAL_UART_MspInit+0x240>)
 8009a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a12:	2204      	movs	r2, #4
 8009a14:	4013      	ands	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
 8009a18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009a1a:	241c      	movs	r4, #28
 8009a1c:	193b      	adds	r3, r7, r4
 8009a1e:	2202      	movs	r2, #2
 8009a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a22:	193b      	adds	r3, r7, r4
 8009a24:	2202      	movs	r2, #2
 8009a26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a28:	193b      	adds	r3, r7, r4
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a2e:	193b      	adds	r3, r7, r4
 8009a30:	2203      	movs	r2, #3
 8009a32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009a34:	193b      	adds	r3, r7, r4
 8009a36:	2206      	movs	r2, #6
 8009a38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a3a:	193a      	adds	r2, r7, r4
 8009a3c:	23a0      	movs	r3, #160	@ 0xa0
 8009a3e:	05db      	lsls	r3, r3, #23
 8009a40:	0011      	movs	r1, r2
 8009a42:	0018      	movs	r0, r3
 8009a44:	f001 fd86 	bl	800b554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009a48:	0021      	movs	r1, r4
 8009a4a:	187b      	adds	r3, r7, r1
 8009a4c:	2280      	movs	r2, #128	@ 0x80
 8009a4e:	00d2      	lsls	r2, r2, #3
 8009a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a52:	187b      	adds	r3, r7, r1
 8009a54:	2202      	movs	r2, #2
 8009a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a58:	187b      	adds	r3, r7, r1
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a5e:	187b      	adds	r3, r7, r1
 8009a60:	2203      	movs	r2, #3
 8009a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009a64:	187b      	adds	r3, r7, r1
 8009a66:	2206      	movs	r2, #6
 8009a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a6a:	187b      	adds	r3, r7, r1
 8009a6c:	4a33      	ldr	r2, [pc, #204]	@ (8009b3c <HAL_UART_MspInit+0x244>)
 8009a6e:	0019      	movs	r1, r3
 8009a70:	0010      	movs	r0, r2
 8009a72:	f001 fd6f 	bl	800b554 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8009a76:	4b34      	ldr	r3, [pc, #208]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009a78:	4a34      	ldr	r2, [pc, #208]	@ (8009b4c <HAL_UART_MspInit+0x254>)
 8009a7a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8009a7c:	4b32      	ldr	r3, [pc, #200]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009a7e:	220c      	movs	r2, #12
 8009a80:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009a82:	4b31      	ldr	r3, [pc, #196]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a88:	4b2f      	ldr	r3, [pc, #188]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009a90:	2280      	movs	r2, #128	@ 0x80
 8009a92:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a94:	4b2c      	ldr	r3, [pc, #176]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8009aa0:	4b29      	ldr	r3, [pc, #164]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009aa6:	4b28      	ldr	r3, [pc, #160]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8009aac:	4b26      	ldr	r3, [pc, #152]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f001 f8d6 	bl	800ac60 <HAL_DMA_Init>
 8009ab4:	1e03      	subs	r3, r0, #0
 8009ab6:	d001      	beq.n	8009abc <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8009ab8:	f7fc fe02 	bl	80066c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a22      	ldr	r2, [pc, #136]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009ac0:	675a      	str	r2, [r3, #116]	@ 0x74
 8009ac2:	4b21      	ldr	r3, [pc, #132]	@ (8009b48 <HAL_UART_MspInit+0x250>)
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8009ac8:	4b21      	ldr	r3, [pc, #132]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009aca:	4a22      	ldr	r2, [pc, #136]	@ (8009b54 <HAL_UART_MspInit+0x25c>)
 8009acc:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8009ace:	4b20      	ldr	r3, [pc, #128]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009ad0:	220c      	movs	r2, #12
 8009ad2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009ad6:	2210      	movs	r2, #16
 8009ad8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ada:	4b1d      	ldr	r3, [pc, #116]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009ae2:	2280      	movs	r2, #128	@ 0x80
 8009ae4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009aec:	4b18      	ldr	r3, [pc, #96]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8009af2:	4b17      	ldr	r3, [pc, #92]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009af8:	4b15      	ldr	r3, [pc, #84]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8009afe:	4b14      	ldr	r3, [pc, #80]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009b00:	0018      	movs	r0, r3
 8009b02:	f001 f8ad 	bl	800ac60 <HAL_DMA_Init>
 8009b06:	1e03      	subs	r3, r0, #0
 8009b08:	d001      	beq.n	8009b0e <HAL_UART_MspInit+0x216>
      Error_Handler();
 8009b0a:	f7fc fdd9 	bl	80066c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a0f      	ldr	r2, [pc, #60]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009b12:	671a      	str	r2, [r3, #112]	@ 0x70
 8009b14:	4b0e      	ldr	r3, [pc, #56]	@ (8009b50 <HAL_UART_MspInit+0x258>)
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	200e      	movs	r0, #14
 8009b20:	f001 f86c 	bl	800abfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8009b24:	200e      	movs	r0, #14
 8009b26:	f001 f87e 	bl	800ac26 <HAL_NVIC_EnableIRQ>
}
 8009b2a:	46c0      	nop			@ (mov r8, r8)
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	b00d      	add	sp, #52	@ 0x34
 8009b30:	bd90      	pop	{r4, r7, pc}
 8009b32:	46c0      	nop			@ (mov r8, r8)
 8009b34:	40004800 	.word	0x40004800
 8009b38:	40021000 	.word	0x40021000
 8009b3c:	50000800 	.word	0x50000800
 8009b40:	40013800 	.word	0x40013800
 8009b44:	40004c00 	.word	0x40004c00
 8009b48:	20002c6c 	.word	0x20002c6c
 8009b4c:	4002006c 	.word	0x4002006c
 8009b50:	20002cb4 	.word	0x20002cb4
 8009b54:	40020080 	.word	0x40020080

08009b58 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 50

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8009b60:	f000 fbd6 	bl	800a310 <HAL_GetTick>
 8009b64:	0003      	movs	r3, r0
 8009b66:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8009b68:	4b1c      	ldr	r3, [pc, #112]	@ (8009bdc <TimestampIsReached+0x84>)
 8009b6a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d307      	bcc.n	8009b84 <TimestampIsReached+0x2c>
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d901      	bls.n	8009b84 <TimestampIsReached+0x2c>
 8009b80:	2201      	movs	r2, #1
 8009b82:	e000      	b.n	8009b86 <TimestampIsReached+0x2e>
 8009b84:	2200      	movs	r2, #0
 8009b86:	230f      	movs	r3, #15
 8009b88:	18fb      	adds	r3, r7, r3
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	781a      	ldrb	r2, [r3, #0]
 8009b8e:	2101      	movs	r1, #1
 8009b90:	400a      	ands	r2, r1
 8009b92:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8009b94:	697a      	ldr	r2, [r7, #20]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d207      	bcs.n	8009bac <TimestampIsReached+0x54>
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d201      	bcs.n	8009bac <TimestampIsReached+0x54>
 8009ba8:	2201      	movs	r2, #1
 8009baa:	e000      	b.n	8009bae <TimestampIsReached+0x56>
 8009bac:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8009bae:	200e      	movs	r0, #14
 8009bb0:	183b      	adds	r3, r7, r0
 8009bb2:	701a      	strb	r2, [r3, #0]
 8009bb4:	781a      	ldrb	r2, [r3, #0]
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	400a      	ands	r2, r1
 8009bba:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8009bbc:	230f      	movs	r3, #15
 8009bbe:	18fb      	adds	r3, r7, r3
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d103      	bne.n	8009bce <TimestampIsReached+0x76>
 8009bc6:	183b      	adds	r3, r7, r0
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e000      	b.n	8009bd4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	b006      	add	sp, #24
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	7fffffff 	.word	0x7fffffff

08009be0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8009be8:	f000 fb92 	bl	800a310 <HAL_GetTick>
 8009bec:	0002      	movs	r2, r0
 8009bee:	4904      	ldr	r1, [pc, #16]	@ (8009c00 <AddTimestamp+0x20>)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	0018      	movs	r0, r3
 8009bf4:	f00e fc22 	bl	801843c <siprintf>
}
 8009bf8:	46c0      	nop			@ (mov r8, r8)
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	0801be04 	.word	0x0801be04

08009c04 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8009c04:	b40c      	push	{r2, r3}
 8009c06:	b590      	push	{r4, r7, lr}
 8009c08:	b093      	sub	sp, #76	@ 0x4c
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	0002      	movs	r2, r0
 8009c0e:	6039      	str	r1, [r7, #0]
 8009c10:	1dfb      	adds	r3, r7, #7
 8009c12:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8009c14:	4b1f      	ldr	r3, [pc, #124]	@ (8009c94 <CreateLine+0x90>)
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	1dfa      	adds	r2, r7, #7
 8009c1a:	7812      	ldrb	r2, [r2, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d832      	bhi.n	8009c86 <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	491d      	ldr	r1, [pc, #116]	@ (8009c98 <CreateLine+0x94>)
 8009c24:	2410      	movs	r4, #16
 8009c26:	193b      	adds	r3, r7, r4
 8009c28:	0018      	movs	r0, r3
 8009c2a:	f00e fc07 	bl	801843c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8009c2e:	4b19      	ldr	r3, [pc, #100]	@ (8009c94 <CreateLine+0x90>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d909      	bls.n	8009c4a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8009c36:	193b      	adds	r3, r7, r4
 8009c38:	0018      	movs	r0, r3
 8009c3a:	f7f6 fa65 	bl	8000108 <strlen>
 8009c3e:	0002      	movs	r2, r0
 8009c40:	193b      	adds	r3, r7, r4
 8009c42:	189b      	adds	r3, r3, r2
 8009c44:	0018      	movs	r0, r3
 8009c46:	f7ff ffcb 	bl	8009be0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8009c4a:	2410      	movs	r4, #16
 8009c4c:	193b      	adds	r3, r7, r4
 8009c4e:	0018      	movs	r0, r3
 8009c50:	f7f6 fa5a 	bl	8000108 <strlen>
 8009c54:	0003      	movs	r3, r0
 8009c56:	647b      	str	r3, [r7, #68]	@ 0x44

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8009c58:	2354      	movs	r3, #84	@ 0x54
 8009c5a:	2208      	movs	r2, #8
 8009c5c:	189b      	adds	r3, r3, r2
 8009c5e:	19db      	adds	r3, r3, r7
 8009c60:	60fb      	str	r3, [r7, #12]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8009c62:	193a      	adds	r2, r7, r4
 8009c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c66:	18d0      	adds	r0, r2, r3
 8009c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c6a:	2232      	movs	r2, #50	@ 0x32
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	0019      	movs	r1, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c74:	f00e fc7a 	bl	801856c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8009c78:	193a      	adds	r2, r7, r4
 8009c7a:	4b08      	ldr	r3, [pc, #32]	@ (8009c9c <CreateLine+0x98>)
 8009c7c:	0011      	movs	r1, r2
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f00e fbcc 	bl	801841c <iprintf>
 8009c84:	e000      	b.n	8009c88 <CreateLine+0x84>
    return;
 8009c86:	46c0      	nop			@ (mov r8, r8)
}
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	b013      	add	sp, #76	@ 0x4c
 8009c8c:	bc90      	pop	{r4, r7}
 8009c8e:	bc08      	pop	{r3}
 8009c90:	b002      	add	sp, #8
 8009c92:	4718      	bx	r3
 8009c94:	20000060 	.word	0x20000060
 8009c98:	0801be10 	.word	0x0801be10
 8009c9c:	0801be14 	.word	0x0801be14

08009ca0 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	4804      	ldr	r0, [pc, #16]	@ (8009cc4 <_write+0x24>)
 8009cb4:	2364      	movs	r3, #100	@ 0x64
 8009cb6:	f007 fea5 	bl	8011a04 <HAL_UART_Transmit>
  return count;
 8009cba:	687b      	ldr	r3, [r7, #4]
}
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	b004      	add	sp, #16
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20002afc 	.word	0x20002afc

08009cc8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	0002      	movs	r2, r0
 8009cd0:	1dfb      	adds	r3, r7, #7
 8009cd2:	701a      	strb	r2, [r3, #0]
 8009cd4:	4b03      	ldr	r3, [pc, #12]	@ (8009ce4 <SetVerboseLevel+0x1c>)
 8009cd6:	1dfa      	adds	r2, r7, #7
 8009cd8:	7812      	ldrb	r2, [r2, #0]
 8009cda:	701a      	strb	r2, [r3, #0]
 8009cdc:	46c0      	nop			@ (mov r8, r8)
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	b002      	add	sp, #8
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	20000060 	.word	0x20000060

08009ce8 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009cec:	f000 fb10 	bl	800a310 <HAL_GetTick>
 8009cf0:	0003      	movs	r3, r0
}
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8009cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8009d3c <BinaryReleaseInfo+0x44>)
 8009d00:	4b0f      	ldr	r3, [pc, #60]	@ (8009d40 <BinaryReleaseInfo+0x48>)
 8009d02:	0019      	movs	r1, r3
 8009d04:	2002      	movs	r0, #2
 8009d06:	f7ff ff7d 	bl	8009c04 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8009d0a:	480e      	ldr	r0, [pc, #56]	@ (8009d44 <BinaryReleaseInfo+0x4c>)
 8009d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8009d48 <BinaryReleaseInfo+0x50>)
 8009d0e:	490c      	ldr	r1, [pc, #48]	@ (8009d40 <BinaryReleaseInfo+0x48>)
 8009d10:	4b0e      	ldr	r3, [pc, #56]	@ (8009d4c <BinaryReleaseInfo+0x54>)
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	0003      	movs	r3, r0
 8009d16:	2002      	movs	r0, #2
 8009d18:	f7ff ff74 	bl	8009c04 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8009d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8009d50 <BinaryReleaseInfo+0x58>)
 8009d1e:	4b08      	ldr	r3, [pc, #32]	@ (8009d40 <BinaryReleaseInfo+0x48>)
 8009d20:	0019      	movs	r1, r3
 8009d22:	2002      	movs	r0, #2
 8009d24:	f7ff ff6e 	bl	8009c04 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8009d28:	4b0a      	ldr	r3, [pc, #40]	@ (8009d54 <BinaryReleaseInfo+0x5c>)
 8009d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8009d58 <BinaryReleaseInfo+0x60>)
 8009d2c:	4904      	ldr	r1, [pc, #16]	@ (8009d40 <BinaryReleaseInfo+0x48>)
 8009d2e:	2002      	movs	r0, #2
 8009d30:	f7ff ff68 	bl	8009c04 <CreateLine>
}
 8009d34:	46c0      	nop			@ (mov r8, r8)
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	46c0      	nop			@ (mov r8, r8)
 8009d3c:	0801be1c 	.word	0x0801be1c
 8009d40:	0801be48 	.word	0x0801be48
 8009d44:	0801be4c 	.word	0x0801be4c
 8009d48:	0801be58 	.word	0x0801be58
 8009d4c:	0801be6c 	.word	0x0801be6c
 8009d50:	0801be78 	.word	0x0801be78
 8009d54:	0801be84 	.word	0x0801be84
 8009d58:	0801be8c 	.word	0x0801be8c

08009d5c <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009d5c:	b590      	push	{r4, r7, lr}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6039      	str	r1, [r7, #0]
 8009d64:	0011      	movs	r1, r2
 8009d66:	1dfb      	adds	r3, r7, #7
 8009d68:	1c02      	adds	r2, r0, #0
 8009d6a:	701a      	strb	r2, [r3, #0]
 8009d6c:	1dbb      	adds	r3, r7, #6
 8009d6e:	1c0a      	adds	r2, r1, #0
 8009d70:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8009d72:	4b0a      	ldr	r3, [pc, #40]	@ (8009d9c <ReadRegister+0x40>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8009d7a:	4b08      	ldr	r3, [pc, #32]	@ (8009d9c <ReadRegister+0x40>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	1dba      	adds	r2, r7, #6
 8009d80:	7814      	ldrb	r4, [r2, #0]
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	1dfa      	adds	r2, r7, #7
 8009d86:	7810      	ldrb	r0, [r2, #0]
 8009d88:	0022      	movs	r2, r4
 8009d8a:	4798      	blx	r3
 8009d8c:	0003      	movs	r3, r0
 8009d8e:	e000      	b.n	8009d92 <ReadRegister+0x36>
	}
	return false;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	0018      	movs	r0, r3
 8009d94:	46bd      	mov	sp, r7
 8009d96:	b003      	add	sp, #12
 8009d98:	bd90      	pop	{r4, r7, pc}
 8009d9a:	46c0      	nop			@ (mov r8, r8)
 8009d9c:	20002cfc 	.word	0x20002cfc

08009da0 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009da0:	b590      	push	{r4, r7, lr}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6039      	str	r1, [r7, #0]
 8009da8:	0011      	movs	r1, r2
 8009daa:	1dfb      	adds	r3, r7, #7
 8009dac:	1c02      	adds	r2, r0, #0
 8009dae:	701a      	strb	r2, [r3, #0]
 8009db0:	1dbb      	adds	r3, r7, #6
 8009db2:	1c0a      	adds	r2, r1, #0
 8009db4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009db6:	4b0a      	ldr	r3, [pc, #40]	@ (8009de0 <WriteRegister+0x40>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8009dbe:	4b08      	ldr	r3, [pc, #32]	@ (8009de0 <WriteRegister+0x40>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	1dba      	adds	r2, r7, #6
 8009dc4:	7814      	ldrb	r4, [r2, #0]
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	1dfa      	adds	r2, r7, #7
 8009dca:	7810      	ldrb	r0, [r2, #0]
 8009dcc:	0022      	movs	r2, r4
 8009dce:	4798      	blx	r3
 8009dd0:	0003      	movs	r3, r0
 8009dd2:	e000      	b.n	8009dd6 <WriteRegister+0x36>
  }
  return false;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	b003      	add	sp, #12
 8009ddc:	bd90      	pop	{r4, r7, pc}
 8009dde:	46c0      	nop			@ (mov r8, r8)
 8009de0:	20002d00 	.word	0x20002d00

08009de4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	000a      	movs	r2, r1
 8009dee:	1cfb      	adds	r3, r7, #3
 8009df0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8009df2:	230f      	movs	r3, #15
 8009df4:	18fb      	adds	r3, r7, r3
 8009df6:	22ff      	movs	r2, #255	@ 0xff
 8009df8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009dfa:	230e      	movs	r3, #14
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	2200      	movs	r2, #0
 8009e00:	701a      	strb	r2, [r3, #0]
 8009e02:	e037      	b.n	8009e74 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009e04:	230e      	movs	r3, #14
 8009e06:	18fb      	adds	r3, r7, r3
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	18d3      	adds	r3, r2, r3
 8009e0e:	7819      	ldrb	r1, [r3, #0]
 8009e10:	220f      	movs	r2, #15
 8009e12:	18bb      	adds	r3, r7, r2
 8009e14:	18ba      	adds	r2, r7, r2
 8009e16:	7812      	ldrb	r2, [r2, #0]
 8009e18:	404a      	eors	r2, r1
 8009e1a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009e1c:	230d      	movs	r3, #13
 8009e1e:	18fb      	adds	r3, r7, r3
 8009e20:	2200      	movs	r2, #0
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	e01b      	b.n	8009e5e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8009e26:	210f      	movs	r1, #15
 8009e28:	187b      	adds	r3, r7, r1
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b25b      	sxtb	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	da09      	bge.n	8009e46 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8009e32:	187b      	adds	r3, r7, r1
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	b25b      	sxtb	r3, r3
 8009e3a:	2231      	movs	r2, #49	@ 0x31
 8009e3c:	4053      	eors	r3, r2
 8009e3e:	b25a      	sxtb	r2, r3
 8009e40:	187b      	adds	r3, r7, r1
 8009e42:	701a      	strb	r2, [r3, #0]
 8009e44:	e005      	b.n	8009e52 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8009e46:	230f      	movs	r3, #15
 8009e48:	18fa      	adds	r2, r7, r3
 8009e4a:	18fb      	adds	r3, r7, r3
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	18db      	adds	r3, r3, r3
 8009e50:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009e52:	210d      	movs	r1, #13
 8009e54:	187b      	adds	r3, r7, r1
 8009e56:	781a      	ldrb	r2, [r3, #0]
 8009e58:	187b      	adds	r3, r7, r1
 8009e5a:	3201      	adds	r2, #1
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	230d      	movs	r3, #13
 8009e60:	18fb      	adds	r3, r7, r3
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b07      	cmp	r3, #7
 8009e66:	d9de      	bls.n	8009e26 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009e68:	210e      	movs	r1, #14
 8009e6a:	187b      	adds	r3, r7, r1
 8009e6c:	781a      	ldrb	r2, [r3, #0]
 8009e6e:	187b      	adds	r3, r7, r1
 8009e70:	3201      	adds	r2, #1
 8009e72:	701a      	strb	r2, [r3, #0]
 8009e74:	230e      	movs	r3, #14
 8009e76:	18fa      	adds	r2, r7, r3
 8009e78:	1cfb      	adds	r3, r7, #3
 8009e7a:	7812      	ldrb	r2, [r2, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d3c0      	bcc.n	8009e04 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8009e82:	230f      	movs	r3, #15
 8009e84:	18fb      	adds	r3, r7, r3
 8009e86:	781b      	ldrb	r3, [r3, #0]
}
 8009e88:	0018      	movs	r0, r3
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	b004      	add	sp, #16
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8009e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec4 <HIDS_Init+0x34>)
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8009ea0:	4b09      	ldr	r3, [pc, #36]	@ (8009ec8 <HIDS_Init+0x38>)
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8009ea6:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <HIDS_Init+0x3c>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	0018      	movs	r0, r3
 8009eac:	f000 f8d0 	bl	800a050 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8009eb0:	4b07      	ldr	r3, [pc, #28]	@ (8009ed0 <HIDS_Init+0x40>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f000 f82b 	bl	8009f10 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8009eba:	46c0      	nop			@ (mov r8, r8)
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	b002      	add	sp, #8
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	46c0      	nop			@ (mov r8, r8)
 8009ec4:	20002cfc 	.word	0x20002cfc
 8009ec8:	20002d00 	.word	0x20002d00
 8009ecc:	20000062 	.word	0x20000062
 8009ed0:	20000061 	.word	0x20000061

08009ed4 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8009ed8:	f7ff ff06 	bl	8009ce8 <GetCurrentHalTicks>
 8009edc:	0002      	movs	r2, r0
 8009ede:	4b08      	ldr	r3, [pc, #32]	@ (8009f00 <HIDS_StartMeasurement+0x2c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	18d2      	adds	r2, r2, r3
 8009ee4:	4b07      	ldr	r3, [pc, #28]	@ (8009f04 <HIDS_StartMeasurement+0x30>)
 8009ee6:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8009ee8:	4b07      	ldr	r3, [pc, #28]	@ (8009f08 <HIDS_StartMeasurement+0x34>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	0019      	movs	r1, r3
 8009eee:	2044      	movs	r0, #68	@ 0x44
 8009ef0:	f7ff ff56 	bl	8009da0 <WriteRegister>
  MeasurementDone = false;
 8009ef4:	4b05      	ldr	r3, [pc, #20]	@ (8009f0c <HIDS_StartMeasurement+0x38>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
}
 8009efa:	46c0      	nop			@ (mov r8, r8)
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20000068 	.word	0x20000068
 8009f04:	20000064 	.word	0x20000064
 8009f08:	20000062 	.word	0x20000062
 8009f0c:	20002d12 	.word	0x20002d12

08009f10 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	0002      	movs	r2, r0
 8009f18:	1dfb      	adds	r3, r7, #7
 8009f1a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8009f1c:	4b03      	ldr	r3, [pc, #12]	@ (8009f2c <HIDS_SetHeaterMode+0x1c>)
 8009f1e:	1dfa      	adds	r2, r7, #7
 8009f20:	7812      	ldrb	r2, [r2, #0]
 8009f22:	701a      	strb	r2, [r3, #0]
}
 8009f24:	46c0      	nop			@ (mov r8, r8)
 8009f26:	46bd      	mov	sp, r7
 8009f28:	b002      	add	sp, #8
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	20000061 	.word	0x20000061

08009f30 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8009f30:	b590      	push	{r4, r7, lr}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	781a      	ldrb	r2, [r3, #0]
 8009f3c:	210c      	movs	r1, #12
 8009f3e:	187b      	adds	r3, r7, r1
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	785a      	ldrb	r2, [r3, #1]
 8009f46:	187b      	adds	r3, r7, r1
 8009f48:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8009f4a:	240f      	movs	r4, #15
 8009f4c:	193b      	adds	r3, r7, r4
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	7892      	ldrb	r2, [r2, #2]
 8009f52:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8009f54:	187b      	adds	r3, r7, r1
 8009f56:	2102      	movs	r1, #2
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f7ff ff43 	bl	8009de4 <CalculateCRC>
 8009f5e:	0003      	movs	r3, r0
 8009f60:	001a      	movs	r2, r3
 8009f62:	193b      	adds	r3, r7, r4
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d007      	beq.n	8009f7a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8009f6a:	4a17      	ldr	r2, [pc, #92]	@ (8009fc8 <CheckCRC+0x98>)
 8009f6c:	4b17      	ldr	r3, [pc, #92]	@ (8009fcc <CheckCRC+0x9c>)
 8009f6e:	0019      	movs	r1, r3
 8009f70:	2001      	movs	r0, #1
 8009f72:	f7ff fe47 	bl	8009c04 <CreateLine>
		return false;
 8009f76:	2300      	movs	r3, #0
 8009f78:	e021      	b.n	8009fbe <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	78da      	ldrb	r2, [r3, #3]
 8009f7e:	2108      	movs	r1, #8
 8009f80:	187b      	adds	r3, r7, r1
 8009f82:	701a      	strb	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	791a      	ldrb	r2, [r3, #4]
 8009f88:	187b      	adds	r3, r7, r1
 8009f8a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8009f8c:	240e      	movs	r4, #14
 8009f8e:	193b      	adds	r3, r7, r4
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	7952      	ldrb	r2, [r2, #5]
 8009f94:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8009f96:	187b      	adds	r3, r7, r1
 8009f98:	2102      	movs	r1, #2
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f7ff ff22 	bl	8009de4 <CalculateCRC>
 8009fa0:	0003      	movs	r3, r0
 8009fa2:	001a      	movs	r2, r3
 8009fa4:	193b      	adds	r3, r7, r4
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d007      	beq.n	8009fbc <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8009fac:	4a08      	ldr	r2, [pc, #32]	@ (8009fd0 <CheckCRC+0xa0>)
 8009fae:	4b07      	ldr	r3, [pc, #28]	@ (8009fcc <CheckCRC+0x9c>)
 8009fb0:	0019      	movs	r1, r3
 8009fb2:	2001      	movs	r0, #1
 8009fb4:	f7ff fe26 	bl	8009c04 <CreateLine>
		return false;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	e000      	b.n	8009fbe <CheckCRC+0x8e>
	}
	return true;
 8009fbc:	2301      	movs	r3, #1
}
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	b005      	add	sp, #20
 8009fc4:	bd90      	pop	{r4, r7, pc}
 8009fc6:	46c0      	nop			@ (mov r8, r8)
 8009fc8:	0801bec8 	.word	0x0801bec8
 8009fcc:	0801bef0 	.word	0x0801bef0
 8009fd0:	0801bef4 	.word	0x0801bef4

08009fd4 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8009fda:	1dbb      	adds	r3, r7, #6
 8009fdc:	2289      	movs	r2, #137	@ 0x89
 8009fde:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8009fe0:	1dbb      	adds	r3, r7, #6
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	0019      	movs	r1, r3
 8009fe6:	2044      	movs	r0, #68	@ 0x44
 8009fe8:	f7ff feda 	bl	8009da0 <WriteRegister>
	HAL_Delay(30);
 8009fec:	201e      	movs	r0, #30
 8009fee:	f000 f999 	bl	800a324 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8009ff2:	4b14      	ldr	r3, [pc, #80]	@ (800a044 <HIDS_DeviceConnected+0x70>)
 8009ff4:	2206      	movs	r2, #6
 8009ff6:	0019      	movs	r1, r3
 8009ff8:	2044      	movs	r0, #68	@ 0x44
 8009ffa:	f7ff feaf 	bl	8009d5c <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009ffe:	1dfb      	adds	r3, r7, #7
 800a000:	2200      	movs	r2, #0
 800a002:	701a      	strb	r2, [r3, #0]
 800a004:	e011      	b.n	800a02a <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800a006:	1dfb      	adds	r3, r7, #7
 800a008:	7818      	ldrb	r0, [r3, #0]
 800a00a:	1dfb      	adds	r3, r7, #7
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	4a0d      	ldr	r2, [pc, #52]	@ (800a044 <HIDS_DeviceConnected+0x70>)
 800a010:	5cd3      	ldrb	r3, [r2, r3]
 800a012:	4a0d      	ldr	r2, [pc, #52]	@ (800a048 <HIDS_DeviceConnected+0x74>)
 800a014:	490d      	ldr	r1, [pc, #52]	@ (800a04c <HIDS_DeviceConnected+0x78>)
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	0003      	movs	r3, r0
 800a01a:	2002      	movs	r0, #2
 800a01c:	f7ff fdf2 	bl	8009c04 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800a020:	1dfb      	adds	r3, r7, #7
 800a022:	781a      	ldrb	r2, [r3, #0]
 800a024:	1dfb      	adds	r3, r7, #7
 800a026:	3201      	adds	r2, #1
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	1dfb      	adds	r3, r7, #7
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	2b05      	cmp	r3, #5
 800a030:	d9e9      	bls.n	800a006 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800a032:	4b04      	ldr	r3, [pc, #16]	@ (800a044 <HIDS_DeviceConnected+0x70>)
 800a034:	0018      	movs	r0, r3
 800a036:	f7ff ff7b 	bl	8009f30 <CheckCRC>
 800a03a:	0003      	movs	r3, r0
}
 800a03c:	0018      	movs	r0, r3
 800a03e:	46bd      	mov	sp, r7
 800a040:	b002      	add	sp, #8
 800a042:	bd80      	pop	{r7, pc}
 800a044:	20002d04 	.word	0x20002d04
 800a048:	0801bf20 	.word	0x0801bf20
 800a04c:	0801bec4 	.word	0x0801bec4

0800a050 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	0002      	movs	r2, r0
 800a058:	1dfb      	adds	r3, r7, #7
 800a05a:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800a05c:	4b03      	ldr	r3, [pc, #12]	@ (800a06c <HIDS_SetMeasurementMode+0x1c>)
 800a05e:	1dfa      	adds	r2, r7, #7
 800a060:	7812      	ldrb	r2, [r2, #0]
 800a062:	701a      	strb	r2, [r3, #0]
}
 800a064:	46c0      	nop			@ (mov r8, r8)
 800a066:	46bd      	mov	sp, r7
 800a068:	b002      	add	sp, #8
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20000062 	.word	0x20000062

0800a070 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800a074:	4b04      	ldr	r3, [pc, #16]	@ (800a088 <HIDS_MeasurementReady+0x18>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	0018      	movs	r0, r3
 800a07a:	f7ff fd6d 	bl	8009b58 <TimestampIsReached>
 800a07e:	0003      	movs	r3, r0
}
 800a080:	0018      	movs	r0, r3
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	46c0      	nop			@ (mov r8, r8)
 800a088:	20000064 	.word	0x20000064

0800a08c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800a08c:	b590      	push	{r4, r7, lr}
 800a08e:	b089      	sub	sp, #36	@ 0x24
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800a096:	4b4e      	ldr	r3, [pc, #312]	@ (800a1d0 <HIDS_GetMeasurementValues+0x144>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <HIDS_GetMeasurementValues+0x16>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e091      	b.n	800a1c6 <HIDS_GetMeasurementValues+0x13a>
  if(!HIDS_MeasurementReady()) return false;
 800a0a2:	f7ff ffe5 	bl	800a070 <HIDS_MeasurementReady>
 800a0a6:	0003      	movs	r3, r0
 800a0a8:	001a      	movs	r2, r3
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4053      	eors	r3, r2
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <HIDS_GetMeasurementValues+0x2c>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	e086      	b.n	800a1c6 <HIDS_GetMeasurementValues+0x13a>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 800a0b8:	4b46      	ldr	r3, [pc, #280]	@ (800a1d4 <HIDS_GetMeasurementValues+0x148>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	4b46      	ldr	r3, [pc, #280]	@ (800a1d8 <HIDS_GetMeasurementValues+0x14c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	0019      	movs	r1, r3
 800a0c2:	0010      	movs	r0, r2
 800a0c4:	f7f6 f83c 	bl	8000140 <__udivsi3>
 800a0c8:	0003      	movs	r3, r0
 800a0ca:	61bb      	str	r3, [r7, #24]
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800a0cc:	2317      	movs	r3, #23
 800a0ce:	18fc      	adds	r4, r7, r3
 800a0d0:	4b42      	ldr	r3, [pc, #264]	@ (800a1dc <HIDS_GetMeasurementValues+0x150>)
 800a0d2:	2206      	movs	r2, #6
 800a0d4:	0019      	movs	r1, r3
 800a0d6:	2044      	movs	r0, #68	@ 0x44
 800a0d8:	f7ff fe40 	bl	8009d5c <ReadRegister>
 800a0dc:	0003      	movs	r3, r0
 800a0de:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800a0e0:	4b3e      	ldr	r3, [pc, #248]	@ (800a1dc <HIDS_GetMeasurementValues+0x150>)
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f7ff ff24 	bl	8009f30 <CheckCRC>
 800a0e8:	0003      	movs	r3, r0
 800a0ea:	001a      	movs	r2, r3
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	4053      	eors	r3, r2
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d011      	beq.n	800a11a <HIDS_GetMeasurementValues+0x8e>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800a0f6:	231f      	movs	r3, #31
 800a0f8:	18fb      	adds	r3, r7, r3
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	701a      	strb	r2, [r3, #0]
 800a0fe:	e005      	b.n	800a10c <HIDS_GetMeasurementValues+0x80>
 800a100:	211f      	movs	r1, #31
 800a102:	187b      	adds	r3, r7, r1
 800a104:	781a      	ldrb	r2, [r3, #0]
 800a106:	187b      	adds	r3, r7, r1
 800a108:	3201      	adds	r2, #1
 800a10a:	701a      	strb	r2, [r3, #0]
 800a10c:	231f      	movs	r3, #31
 800a10e:	18fb      	adds	r3, r7, r3
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b05      	cmp	r3, #5
 800a114:	d9f4      	bls.n	800a100 <HIDS_GetMeasurementValues+0x74>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800a116:	2300      	movs	r3, #0
 800a118:	e055      	b.n	800a1c6 <HIDS_GetMeasurementValues+0x13a>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800a11a:	4b30      	ldr	r3, [pc, #192]	@ (800a1dc <HIDS_GetMeasurementValues+0x150>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	021b      	lsls	r3, r3, #8
 800a120:	4a2e      	ldr	r2, [pc, #184]	@ (800a1dc <HIDS_GetMeasurementValues+0x150>)
 800a122:	7852      	ldrb	r2, [r2, #1]
 800a124:	4313      	orrs	r3, r2
 800a126:	22af      	movs	r2, #175	@ 0xaf
 800a128:	4353      	muls	r3, r2
 800a12a:	0018      	movs	r0, r3
 800a12c:	f7f9 f8c6 	bl	80032bc <__aeabi_i2d>
 800a130:	2200      	movs	r2, #0
 800a132:	4b2b      	ldr	r3, [pc, #172]	@ (800a1e0 <HIDS_GetMeasurementValues+0x154>)
 800a134:	f7f7 fdbc 	bl	8001cb0 <__aeabi_ddiv>
 800a138:	0002      	movs	r2, r0
 800a13a:	000b      	movs	r3, r1
 800a13c:	0010      	movs	r0, r2
 800a13e:	0019      	movs	r1, r3
 800a140:	f7f9 f956 	bl	80033f0 <__aeabi_d2f>
 800a144:	1c03      	adds	r3, r0, #0
 800a146:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800a148:	4926      	ldr	r1, [pc, #152]	@ (800a1e4 <HIDS_GetMeasurementValues+0x158>)
 800a14a:	6938      	ldr	r0, [r7, #16]
 800a14c:	f7f6 ffe4 	bl	8001118 <__aeabi_fsub>
 800a150:	1c03      	adds	r3, r0, #0
 800a152:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800a154:	4b21      	ldr	r3, [pc, #132]	@ (800a1dc <HIDS_GetMeasurementValues+0x150>)
 800a156:	78db      	ldrb	r3, [r3, #3]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	4a20      	ldr	r2, [pc, #128]	@ (800a1dc <HIDS_GetMeasurementValues+0x150>)
 800a15c:	7912      	ldrb	r2, [r2, #4]
 800a15e:	431a      	orrs	r2, r3
 800a160:	0013      	movs	r3, r2
 800a162:	015b      	lsls	r3, r3, #5
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	189b      	adds	r3, r3, r2
 800a16a:	0018      	movs	r0, r3
 800a16c:	f7f9 f8a6 	bl	80032bc <__aeabi_i2d>
 800a170:	2200      	movs	r2, #0
 800a172:	4b1b      	ldr	r3, [pc, #108]	@ (800a1e0 <HIDS_GetMeasurementValues+0x154>)
 800a174:	f7f7 fd9c 	bl	8001cb0 <__aeabi_ddiv>
 800a178:	0002      	movs	r2, r0
 800a17a:	000b      	movs	r3, r1
 800a17c:	0010      	movs	r0, r2
 800a17e:	0019      	movs	r1, r3
 800a180:	f7f9 f936 	bl	80033f0 <__aeabi_d2f>
 800a184:	1c03      	adds	r3, r0, #0
 800a186:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800a188:	4917      	ldr	r1, [pc, #92]	@ (800a1e8 <HIDS_GetMeasurementValues+0x15c>)
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7f6 ffc4 	bl	8001118 <__aeabi_fsub>
 800a190:	1c03      	adds	r3, r0, #0
 800a192:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	0011      	movs	r1, r2
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	f7fe fd1c 	bl	8008be4 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	1c11      	adds	r1, r2, #0
 800a1b2:	1c18      	adds	r0, r3, #0
 800a1b4:	f7f9 fa84 	bl	80036c0 <ESP_GetHT>

   measurements = 0;
 800a1b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a1ec <HIDS_GetMeasurementValues+0x160>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800a1be:	4b04      	ldr	r3, [pc, #16]	@ (800a1d0 <HIDS_GetMeasurementValues+0x144>)
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800a1c4:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800a1c6:	0018      	movs	r0, r3
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	b009      	add	sp, #36	@ 0x24
 800a1cc:	bd90      	pop	{r4, r7, pc}
 800a1ce:	46c0      	nop			@ (mov r8, r8)
 800a1d0:	20002d12 	.word	0x20002d12
 800a1d4:	2000006c 	.word	0x2000006c
 800a1d8:	20000068 	.word	0x20000068
 800a1dc:	20002d0c 	.word	0x20002d0c
 800a1e0:	40efffe0 	.word	0x40efffe0
 800a1e4:	42340000 	.word	0x42340000
 800a1e8:	40c00000 	.word	0x40c00000
 800a1ec:	20002d14 	.word	0x20002d14

0800a1f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800a1f0:	480d      	ldr	r0, [pc, #52]	@ (800a228 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800a1f2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800a1f4:	f7ff f962 	bl	80094bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a1f8:	480c      	ldr	r0, [pc, #48]	@ (800a22c <LoopForever+0x6>)
  ldr r1, =_edata
 800a1fa:	490d      	ldr	r1, [pc, #52]	@ (800a230 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a1fc:	4a0d      	ldr	r2, [pc, #52]	@ (800a234 <LoopForever+0xe>)
  movs r3, #0
 800a1fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a200:	e002      	b.n	800a208 <LoopCopyDataInit>

0800a202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a206:	3304      	adds	r3, #4

0800a208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a20a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a20c:	d3f9      	bcc.n	800a202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a20e:	4a0a      	ldr	r2, [pc, #40]	@ (800a238 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a210:	4c0a      	ldr	r4, [pc, #40]	@ (800a23c <LoopForever+0x16>)
  movs r3, #0
 800a212:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a214:	e001      	b.n	800a21a <LoopFillZerobss>

0800a216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a218:	3204      	adds	r2, #4

0800a21a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a21a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a21c:	d3fb      	bcc.n	800a216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a21e:	f00e fa49 	bl	80186b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a222:	f7fc f90d 	bl	8006440 <main>

0800a226 <LoopForever>:

LoopForever:
    b LoopForever
 800a226:	e7fe      	b.n	800a226 <LoopForever>
   ldr   r0, =_estack
 800a228:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800a22c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a230:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 800a234:	0801c6a8 	.word	0x0801c6a8
  ldr r2, =_sbss
 800a238:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 800a23c:	2000411c 	.word	0x2000411c

0800a240 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a240:	e7fe      	b.n	800a240 <ADC1_COMP_IRQHandler>
	...

0800a244 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a24a:	1dfb      	adds	r3, r7, #7
 800a24c:	2200      	movs	r2, #0
 800a24e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800a250:	4b0b      	ldr	r3, [pc, #44]	@ (800a280 <HAL_Init+0x3c>)
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	4b0a      	ldr	r3, [pc, #40]	@ (800a280 <HAL_Init+0x3c>)
 800a256:	2140      	movs	r1, #64	@ 0x40
 800a258:	430a      	orrs	r2, r1
 800a25a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a25c:	2003      	movs	r0, #3
 800a25e:	f000 f811 	bl	800a284 <HAL_InitTick>
 800a262:	1e03      	subs	r3, r0, #0
 800a264:	d003      	beq.n	800a26e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800a266:	1dfb      	adds	r3, r7, #7
 800a268:	2201      	movs	r2, #1
 800a26a:	701a      	strb	r2, [r3, #0]
 800a26c:	e001      	b.n	800a272 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a26e:	f7fe fffb 	bl	8009268 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a272:	1dfb      	adds	r3, r7, #7
 800a274:	781b      	ldrb	r3, [r3, #0]
}
 800a276:	0018      	movs	r0, r3
 800a278:	46bd      	mov	sp, r7
 800a27a:	b002      	add	sp, #8
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	46c0      	nop			@ (mov r8, r8)
 800a280:	40022000 	.word	0x40022000

0800a284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a284:	b590      	push	{r4, r7, lr}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a28c:	4b14      	ldr	r3, [pc, #80]	@ (800a2e0 <HAL_InitTick+0x5c>)
 800a28e:	681c      	ldr	r4, [r3, #0]
 800a290:	4b14      	ldr	r3, [pc, #80]	@ (800a2e4 <HAL_InitTick+0x60>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	0019      	movs	r1, r3
 800a296:	23fa      	movs	r3, #250	@ 0xfa
 800a298:	0098      	lsls	r0, r3, #2
 800a29a:	f7f5 ff51 	bl	8000140 <__udivsi3>
 800a29e:	0003      	movs	r3, r0
 800a2a0:	0019      	movs	r1, r3
 800a2a2:	0020      	movs	r0, r4
 800a2a4:	f7f5 ff4c 	bl	8000140 <__udivsi3>
 800a2a8:	0003      	movs	r3, r0
 800a2aa:	0018      	movs	r0, r3
 800a2ac:	f000 fccb 	bl	800ac46 <HAL_SYSTICK_Config>
 800a2b0:	1e03      	subs	r3, r0, #0
 800a2b2:	d001      	beq.n	800a2b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e00f      	b.n	800a2d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d80b      	bhi.n	800a2d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	425b      	negs	r3, r3
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	f000 fc98 	bl	800abfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a2cc:	4b06      	ldr	r3, [pc, #24]	@ (800a2e8 <HAL_InitTick+0x64>)
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e000      	b.n	800a2d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
}
 800a2d8:	0018      	movs	r0, r3
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b003      	add	sp, #12
 800a2de:	bd90      	pop	{r4, r7, pc}
 800a2e0:	2000005c 	.word	0x2000005c
 800a2e4:	20000074 	.word	0x20000074
 800a2e8:	20000070 	.word	0x20000070

0800a2ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a2f0:	4b05      	ldr	r3, [pc, #20]	@ (800a308 <HAL_IncTick+0x1c>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	001a      	movs	r2, r3
 800a2f6:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <HAL_IncTick+0x20>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	18d2      	adds	r2, r2, r3
 800a2fc:	4b03      	ldr	r3, [pc, #12]	@ (800a30c <HAL_IncTick+0x20>)
 800a2fe:	601a      	str	r2, [r3, #0]
}
 800a300:	46c0      	nop			@ (mov r8, r8)
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	46c0      	nop			@ (mov r8, r8)
 800a308:	20000074 	.word	0x20000074
 800a30c:	20002d18 	.word	0x20002d18

0800a310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  return uwTick;
 800a314:	4b02      	ldr	r3, [pc, #8]	@ (800a320 <HAL_GetTick+0x10>)
 800a316:	681b      	ldr	r3, [r3, #0]
}
 800a318:	0018      	movs	r0, r3
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	46c0      	nop			@ (mov r8, r8)
 800a320:	20002d18 	.word	0x20002d18

0800a324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a32c:	f7ff fff0 	bl	800a310 <HAL_GetTick>
 800a330:	0003      	movs	r3, r0
 800a332:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3301      	adds	r3, #1
 800a33c:	d005      	beq.n	800a34a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a33e:	4b0a      	ldr	r3, [pc, #40]	@ (800a368 <HAL_Delay+0x44>)
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	001a      	movs	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	189b      	adds	r3, r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a34a:	46c0      	nop			@ (mov r8, r8)
 800a34c:	f7ff ffe0 	bl	800a310 <HAL_GetTick>
 800a350:	0002      	movs	r2, r0
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d8f7      	bhi.n	800a34c <HAL_Delay+0x28>
  {
  }
}
 800a35c:	46c0      	nop			@ (mov r8, r8)
 800a35e:	46c0      	nop			@ (mov r8, r8)
 800a360:	46bd      	mov	sp, r7
 800a362:	b004      	add	sp, #16
 800a364:	bd80      	pop	{r7, pc}
 800a366:	46c0      	nop			@ (mov r8, r8)
 800a368:	20000074 	.word	0x20000074

0800a36c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800a370:	4b02      	ldr	r3, [pc, #8]	@ (800a37c <HAL_GetUIDw0+0x10>)
 800a372:	681b      	ldr	r3, [r3, #0]
}
 800a374:	0018      	movs	r0, r3
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	46c0      	nop			@ (mov r8, r8)
 800a37c:	1ff80050 	.word	0x1ff80050

0800a380 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800a384:	4b02      	ldr	r3, [pc, #8]	@ (800a390 <HAL_GetUIDw1+0x10>)
 800a386:	681b      	ldr	r3, [r3, #0]
}
 800a388:	0018      	movs	r0, r3
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	46c0      	nop			@ (mov r8, r8)
 800a390:	1ff80054 	.word	0x1ff80054

0800a394 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800a398:	4b02      	ldr	r3, [pc, #8]	@ (800a3a4 <HAL_GetUIDw2+0x10>)
 800a39a:	681b      	ldr	r3, [r3, #0]
}
 800a39c:	0018      	movs	r0, r3
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	46c0      	nop			@ (mov r8, r8)
 800a3a4:	1ff80064 	.word	0x1ff80064

0800a3a8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e159      	b.n	800a66e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10a      	bne.n	800a3d8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2250      	movs	r2, #80	@ 0x50
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f7fb fb58 	bl	8005a88 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3dc:	2210      	movs	r2, #16
 800a3de:	4013      	ands	r3, r2
 800a3e0:	2b10      	cmp	r3, #16
 800a3e2:	d005      	beq.n	800a3f0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	2204      	movs	r2, #4
 800a3ec:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800a3ee:	d00b      	beq.n	800a408 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3f4:	2210      	movs	r2, #16
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2250      	movs	r2, #80	@ 0x50
 800a400:	2100      	movs	r1, #0
 800a402:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e132      	b.n	800a66e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a40c:	4a9a      	ldr	r2, [pc, #616]	@ (800a678 <HAL_ADC_Init+0x2d0>)
 800a40e:	4013      	ands	r3, r2
 800a410:	2202      	movs	r2, #2
 800a412:	431a      	orrs	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	2203      	movs	r2, #3
 800a420:	4013      	ands	r3, r2
 800a422:	2b01      	cmp	r3, #1
 800a424:	d108      	bne.n	800a438 <HAL_ADC_Init+0x90>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2201      	movs	r2, #1
 800a42e:	4013      	ands	r3, r2
 800a430:	2b01      	cmp	r3, #1
 800a432:	d101      	bne.n	800a438 <HAL_ADC_Init+0x90>
 800a434:	2301      	movs	r3, #1
 800a436:	e000      	b.n	800a43a <HAL_ADC_Init+0x92>
 800a438:	2300      	movs	r3, #0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d149      	bne.n	800a4d2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	23c0      	movs	r3, #192	@ 0xc0
 800a444:	061b      	lsls	r3, r3, #24
 800a446:	429a      	cmp	r2, r3
 800a448:	d00b      	beq.n	800a462 <HAL_ADC_Init+0xba>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	2380      	movs	r3, #128	@ 0x80
 800a450:	05db      	lsls	r3, r3, #23
 800a452:	429a      	cmp	r2, r3
 800a454:	d005      	beq.n	800a462 <HAL_ADC_Init+0xba>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	2380      	movs	r3, #128	@ 0x80
 800a45c:	061b      	lsls	r3, r3, #24
 800a45e:	429a      	cmp	r2, r3
 800a460:	d111      	bne.n	800a486 <HAL_ADC_Init+0xde>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	691a      	ldr	r2, [r3, #16]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	0092      	lsls	r2, r2, #2
 800a46e:	0892      	lsrs	r2, r2, #2
 800a470:	611a      	str	r2, [r3, #16]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6919      	ldr	r1, [r3, #16]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	611a      	str	r2, [r3, #16]
 800a484:	e014      	b.n	800a4b0 <HAL_ADC_Init+0x108>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	691a      	ldr	r2, [r3, #16]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	0092      	lsls	r2, r2, #2
 800a492:	0892      	lsrs	r2, r2, #2
 800a494:	611a      	str	r2, [r3, #16]
 800a496:	4b79      	ldr	r3, [pc, #484]	@ (800a67c <HAL_ADC_Init+0x2d4>)
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	4b78      	ldr	r3, [pc, #480]	@ (800a67c <HAL_ADC_Init+0x2d4>)
 800a49c:	4978      	ldr	r1, [pc, #480]	@ (800a680 <HAL_ADC_Init+0x2d8>)
 800a49e:	400a      	ands	r2, r1
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	4b76      	ldr	r3, [pc, #472]	@ (800a67c <HAL_ADC_Init+0x2d4>)
 800a4a4:	6819      	ldr	r1, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	4b74      	ldr	r3, [pc, #464]	@ (800a67c <HAL_ADC_Init+0x2d4>)
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68da      	ldr	r2, [r3, #12]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2118      	movs	r1, #24
 800a4bc:	438a      	bics	r2, r1
 800a4be:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68d9      	ldr	r1, [r3, #12]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689a      	ldr	r2, [r3, #8]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800a4d2:	4b6a      	ldr	r3, [pc, #424]	@ (800a67c <HAL_ADC_Init+0x2d4>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	4b69      	ldr	r3, [pc, #420]	@ (800a67c <HAL_ADC_Init+0x2d4>)
 800a4d8:	496a      	ldr	r1, [pc, #424]	@ (800a684 <HAL_ADC_Init+0x2dc>)
 800a4da:	400a      	ands	r2, r1
 800a4dc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800a4de:	4b67      	ldr	r3, [pc, #412]	@ (800a67c <HAL_ADC_Init+0x2d4>)
 800a4e0:	6819      	ldr	r1, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4e6:	065a      	lsls	r2, r3, #25
 800a4e8:	4b64      	ldr	r3, [pc, #400]	@ (800a67c <HAL_ADC_Init+0x2d4>)
 800a4ea:	430a      	orrs	r2, r1
 800a4ec:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689a      	ldr	r2, [r3, #8]
 800a4f4:	2380      	movs	r3, #128	@ 0x80
 800a4f6:	055b      	lsls	r3, r3, #21
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	d108      	bne.n	800a50e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689a      	ldr	r2, [r3, #8]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2180      	movs	r1, #128	@ 0x80
 800a508:	0549      	lsls	r1, r1, #21
 800a50a:	430a      	orrs	r2, r1
 800a50c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	495b      	ldr	r1, [pc, #364]	@ (800a688 <HAL_ADC_Init+0x2e0>)
 800a51a:	400a      	ands	r2, r1
 800a51c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68d9      	ldr	r1, [r3, #12]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d101      	bne.n	800a534 <HAL_ADC_Init+0x18c>
 800a530:	2304      	movs	r3, #4
 800a532:	e000      	b.n	800a536 <HAL_ADC_Init+0x18e>
 800a534:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a536:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2020      	movs	r0, #32
 800a53c:	5c1b      	ldrb	r3, [r3, r0]
 800a53e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a540:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	202c      	movs	r0, #44	@ 0x2c
 800a546:	5c1b      	ldrb	r3, [r3, r0]
 800a548:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a54a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a550:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800a558:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a560:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a56e:	23c2      	movs	r3, #194	@ 0xc2
 800a570:	33ff      	adds	r3, #255	@ 0xff
 800a572:	429a      	cmp	r2, r3
 800a574:	d00b      	beq.n	800a58e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68d9      	ldr	r1, [r3, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a584:	431a      	orrs	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2221      	movs	r2, #33	@ 0x21
 800a592:	5c9b      	ldrb	r3, [r3, r2]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d11a      	bne.n	800a5ce <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2220      	movs	r2, #32
 800a59c:	5c9b      	ldrb	r3, [r3, r2]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d109      	bne.n	800a5b6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2180      	movs	r1, #128	@ 0x80
 800a5ae:	0249      	lsls	r1, r1, #9
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	60da      	str	r2, [r3, #12]
 800a5b4:	e00b      	b.n	800a5ce <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	431a      	orrs	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d11f      	bne.n	800a616 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	691a      	ldr	r2, [r3, #16]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	492a      	ldr	r1, [pc, #168]	@ (800a68c <HAL_ADC_Init+0x2e4>)
 800a5e2:	400a      	ands	r2, r1
 800a5e4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6919      	ldr	r1, [r3, #16]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a5f4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800a5fa:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	691a      	ldr	r2, [r3, #16]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2101      	movs	r1, #1
 800a610:	430a      	orrs	r2, r1
 800a612:	611a      	str	r2, [r3, #16]
 800a614:	e00e      	b.n	800a634 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	2201      	movs	r2, #1
 800a61e:	4013      	ands	r3, r2
 800a620:	2b01      	cmp	r3, #1
 800a622:	d107      	bne.n	800a634 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	691a      	ldr	r2, [r3, #16]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2101      	movs	r1, #1
 800a630:	438a      	bics	r2, r1
 800a632:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	695a      	ldr	r2, [r3, #20]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2107      	movs	r1, #7
 800a640:	438a      	bics	r2, r1
 800a642:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6959      	ldr	r1, [r3, #20]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a660:	2203      	movs	r2, #3
 800a662:	4393      	bics	r3, r2
 800a664:	2201      	movs	r2, #1
 800a666:	431a      	orrs	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	0018      	movs	r0, r3
 800a670:	46bd      	mov	sp, r7
 800a672:	b002      	add	sp, #8
 800a674:	bd80      	pop	{r7, pc}
 800a676:	46c0      	nop			@ (mov r8, r8)
 800a678:	fffffefd 	.word	0xfffffefd
 800a67c:	40012708 	.word	0x40012708
 800a680:	ffc3ffff 	.word	0xffc3ffff
 800a684:	fdffffff 	.word	0xfdffffff
 800a688:	fffe0219 	.word	0xfffe0219
 800a68c:	fffffc03 	.word	0xfffffc03

0800a690 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a690:	b590      	push	{r4, r7, lr}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a698:	230f      	movs	r3, #15
 800a69a:	18fb      	adds	r3, r7, r3
 800a69c:	2200      	movs	r2, #0
 800a69e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	2204      	movs	r2, #4
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	d138      	bne.n	800a71e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2250      	movs	r2, #80	@ 0x50
 800a6b0:	5c9b      	ldrb	r3, [r3, r2]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d101      	bne.n	800a6ba <HAL_ADC_Start+0x2a>
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	e038      	b.n	800a72c <HAL_ADC_Start+0x9c>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2250      	movs	r2, #80	@ 0x50
 800a6be:	2101      	movs	r1, #1
 800a6c0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d007      	beq.n	800a6da <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800a6ca:	230f      	movs	r3, #15
 800a6cc:	18fc      	adds	r4, r7, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	f000 f95f 	bl	800a994 <ADC_Enable>
 800a6d6:	0003      	movs	r3, r0
 800a6d8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a6da:	230f      	movs	r3, #15
 800a6dc:	18fb      	adds	r3, r7, r3
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d120      	bne.n	800a726 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6e8:	4a12      	ldr	r2, [pc, #72]	@ (800a734 <HAL_ADC_Start+0xa4>)
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2280      	movs	r2, #128	@ 0x80
 800a6ee:	0052      	lsls	r2, r2, #1
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2250      	movs	r2, #80	@ 0x50
 800a700:	2100      	movs	r1, #0
 800a702:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	221c      	movs	r2, #28
 800a70a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2104      	movs	r1, #4
 800a718:	430a      	orrs	r2, r1
 800a71a:	609a      	str	r2, [r3, #8]
 800a71c:	e003      	b.n	800a726 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a71e:	230f      	movs	r3, #15
 800a720:	18fb      	adds	r3, r7, r3
 800a722:	2202      	movs	r2, #2
 800a724:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a726:	230f      	movs	r3, #15
 800a728:	18fb      	adds	r3, r7, r3
 800a72a:	781b      	ldrb	r3, [r3, #0]
}
 800a72c:	0018      	movs	r0, r3
 800a72e:	46bd      	mov	sp, r7
 800a730:	b005      	add	sp, #20
 800a732:	bd90      	pop	{r4, r7, pc}
 800a734:	fffff0fe 	.word	0xfffff0fe

0800a738 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800a746:	2300      	movs	r3, #0
 800a748:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	2b08      	cmp	r3, #8
 800a750:	d102      	bne.n	800a758 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800a752:	2308      	movs	r3, #8
 800a754:	60fb      	str	r3, [r7, #12]
 800a756:	e014      	b.n	800a782 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	2201      	movs	r2, #1
 800a760:	4013      	ands	r3, r2
 800a762:	2b01      	cmp	r3, #1
 800a764:	d10b      	bne.n	800a77e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a76a:	2220      	movs	r2, #32
 800a76c:	431a      	orrs	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2250      	movs	r2, #80	@ 0x50
 800a776:	2100      	movs	r1, #0
 800a778:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e072      	b.n	800a864 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800a77e:	230c      	movs	r3, #12
 800a780:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a782:	f7ff fdc5 	bl	800a310 <HAL_GetTick>
 800a786:	0003      	movs	r3, r0
 800a788:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a78a:	e01f      	b.n	800a7cc <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	3301      	adds	r3, #1
 800a790:	d01c      	beq.n	800a7cc <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d007      	beq.n	800a7a8 <HAL_ADC_PollForConversion+0x70>
 800a798:	f7ff fdba 	bl	800a310 <HAL_GetTick>
 800a79c:	0002      	movs	r2, r0
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d211      	bcs.n	800a7cc <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	d10b      	bne.n	800a7cc <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7b8:	2204      	movs	r2, #4
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2250      	movs	r2, #80	@ 0x50
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e04b      	b.n	800a864 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	d0d9      	beq.n	800a78c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7dc:	2280      	movs	r2, #128	@ 0x80
 800a7de:	0092      	lsls	r2, r2, #2
 800a7e0:	431a      	orrs	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68da      	ldr	r2, [r3, #12]
 800a7ec:	23c0      	movs	r3, #192	@ 0xc0
 800a7ee:	011b      	lsls	r3, r3, #4
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	d12e      	bne.n	800a852 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d129      	bne.n	800a852 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2208      	movs	r2, #8
 800a806:	4013      	ands	r3, r2
 800a808:	2b08      	cmp	r3, #8
 800a80a:	d122      	bne.n	800a852 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	2204      	movs	r2, #4
 800a814:	4013      	ands	r3, r2
 800a816:	d110      	bne.n	800a83a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	210c      	movs	r1, #12
 800a824:	438a      	bics	r2, r1
 800a826:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a82c:	4a0f      	ldr	r2, [pc, #60]	@ (800a86c <HAL_ADC_PollForConversion+0x134>)
 800a82e:	4013      	ands	r3, r2
 800a830:	2201      	movs	r2, #1
 800a832:	431a      	orrs	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	655a      	str	r2, [r3, #84]	@ 0x54
 800a838:	e00b      	b.n	800a852 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a83e:	2220      	movs	r2, #32
 800a840:	431a      	orrs	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a84a:	2201      	movs	r2, #1
 800a84c:	431a      	orrs	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d103      	bne.n	800a862 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	220c      	movs	r2, #12
 800a860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	0018      	movs	r0, r3
 800a866:	46bd      	mov	sp, r7
 800a868:	b004      	add	sp, #16
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	fffffefe 	.word	0xfffffefe

0800a870 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a87e:	0018      	movs	r0, r3
 800a880:	46bd      	mov	sp, r7
 800a882:	b002      	add	sp, #8
 800a884:	bd80      	pop	{r7, pc}
	...

0800a888 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2250      	movs	r2, #80	@ 0x50
 800a896:	5c9b      	ldrb	r3, [r3, r2]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d101      	bne.n	800a8a0 <HAL_ADC_ConfigChannel+0x18>
 800a89c:	2302      	movs	r3, #2
 800a89e:	e06c      	b.n	800a97a <HAL_ADC_ConfigChannel+0xf2>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2250      	movs	r2, #80	@ 0x50
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	2204      	movs	r2, #4
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	d00b      	beq.n	800a8cc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2250      	movs	r2, #80	@ 0x50
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e056      	b.n	800a97a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	4a2c      	ldr	r2, [pc, #176]	@ (800a984 <HAL_ADC_ConfigChannel+0xfc>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d028      	beq.n	800a928 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	035b      	lsls	r3, r3, #13
 800a8e2:	0b5a      	lsrs	r2, r3, #13
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	2380      	movs	r3, #128	@ 0x80
 800a8f2:	02db      	lsls	r3, r3, #11
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	d009      	beq.n	800a90c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800a8f8:	4b23      	ldr	r3, [pc, #140]	@ (800a988 <HAL_ADC_ConfigChannel+0x100>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	4b22      	ldr	r3, [pc, #136]	@ (800a988 <HAL_ADC_ConfigChannel+0x100>)
 800a8fe:	2180      	movs	r1, #128	@ 0x80
 800a900:	0409      	lsls	r1, r1, #16
 800a902:	430a      	orrs	r2, r1
 800a904:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800a906:	200a      	movs	r0, #10
 800a908:	f000 f8ac 	bl	800aa64 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	2380      	movs	r3, #128	@ 0x80
 800a912:	029b      	lsls	r3, r3, #10
 800a914:	4013      	ands	r3, r2
 800a916:	d02b      	beq.n	800a970 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800a918:	4b1b      	ldr	r3, [pc, #108]	@ (800a988 <HAL_ADC_ConfigChannel+0x100>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	4b1a      	ldr	r3, [pc, #104]	@ (800a988 <HAL_ADC_ConfigChannel+0x100>)
 800a91e:	2180      	movs	r1, #128	@ 0x80
 800a920:	03c9      	lsls	r1, r1, #15
 800a922:	430a      	orrs	r2, r1
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	e023      	b.n	800a970 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	035b      	lsls	r3, r3, #13
 800a934:	0b5b      	lsrs	r3, r3, #13
 800a936:	43d9      	mvns	r1, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	400a      	ands	r2, r1
 800a93e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	2380      	movs	r3, #128	@ 0x80
 800a946:	02db      	lsls	r3, r3, #11
 800a948:	4013      	ands	r3, r2
 800a94a:	d005      	beq.n	800a958 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800a94c:	4b0e      	ldr	r3, [pc, #56]	@ (800a988 <HAL_ADC_ConfigChannel+0x100>)
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	4b0d      	ldr	r3, [pc, #52]	@ (800a988 <HAL_ADC_ConfigChannel+0x100>)
 800a952:	490e      	ldr	r1, [pc, #56]	@ (800a98c <HAL_ADC_ConfigChannel+0x104>)
 800a954:	400a      	ands	r2, r1
 800a956:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	2380      	movs	r3, #128	@ 0x80
 800a95e:	029b      	lsls	r3, r3, #10
 800a960:	4013      	ands	r3, r2
 800a962:	d005      	beq.n	800a970 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800a964:	4b08      	ldr	r3, [pc, #32]	@ (800a988 <HAL_ADC_ConfigChannel+0x100>)
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	4b07      	ldr	r3, [pc, #28]	@ (800a988 <HAL_ADC_ConfigChannel+0x100>)
 800a96a:	4909      	ldr	r1, [pc, #36]	@ (800a990 <HAL_ADC_ConfigChannel+0x108>)
 800a96c:	400a      	ands	r2, r1
 800a96e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2250      	movs	r2, #80	@ 0x50
 800a974:	2100      	movs	r1, #0
 800a976:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	0018      	movs	r0, r3
 800a97c:	46bd      	mov	sp, r7
 800a97e:	b002      	add	sp, #8
 800a980:	bd80      	pop	{r7, pc}
 800a982:	46c0      	nop			@ (mov r8, r8)
 800a984:	00001001 	.word	0x00001001
 800a988:	40012708 	.word	0x40012708
 800a98c:	ff7fffff 	.word	0xff7fffff
 800a990:	ffbfffff 	.word	0xffbfffff

0800a994 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	2203      	movs	r2, #3
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d108      	bne.n	800a9c0 <ADC_Enable+0x2c>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d101      	bne.n	800a9c0 <ADC_Enable+0x2c>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e000      	b.n	800a9c2 <ADC_Enable+0x2e>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d146      	bne.n	800aa54 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	4a24      	ldr	r2, [pc, #144]	@ (800aa60 <ADC_Enable+0xcc>)
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	d00d      	beq.n	800a9ee <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9d6:	2210      	movs	r2, #16
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	431a      	orrs	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e033      	b.n	800aa56 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	689a      	ldr	r2, [r3, #8]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800a9fe:	2001      	movs	r0, #1
 800aa00:	f000 f830 	bl	800aa64 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800aa04:	f7ff fc84 	bl	800a310 <HAL_GetTick>
 800aa08:	0003      	movs	r3, r0
 800aa0a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800aa0c:	e01b      	b.n	800aa46 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800aa0e:	f7ff fc7f 	bl	800a310 <HAL_GetTick>
 800aa12:	0002      	movs	r2, r0
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	2b0a      	cmp	r3, #10
 800aa1a:	d914      	bls.n	800aa46 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2201      	movs	r2, #1
 800aa24:	4013      	ands	r3, r2
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d00d      	beq.n	800aa46 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa2e:	2210      	movs	r2, #16
 800aa30:	431a      	orrs	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e007      	b.n	800aa56 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	4013      	ands	r3, r2
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d1dc      	bne.n	800aa0e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	0018      	movs	r0, r3
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	b004      	add	sp, #16
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	46c0      	nop			@ (mov r8, r8)
 800aa60:	80000017 	.word	0x80000017

0800aa64 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800aa6c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa9c <ADC_DelayMicroSecond+0x38>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	490b      	ldr	r1, [pc, #44]	@ (800aaa0 <ADC_DelayMicroSecond+0x3c>)
 800aa72:	0018      	movs	r0, r3
 800aa74:	f7f5 fb64 	bl	8000140 <__udivsi3>
 800aa78:	0003      	movs	r3, r0
 800aa7a:	001a      	movs	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4353      	muls	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800aa82:	e002      	b.n	800aa8a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1f9      	bne.n	800aa84 <ADC_DelayMicroSecond+0x20>
  }
}
 800aa90:	46c0      	nop			@ (mov r8, r8)
 800aa92:	46c0      	nop			@ (mov r8, r8)
 800aa94:	46bd      	mov	sp, r7
 800aa96:	b004      	add	sp, #16
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	46c0      	nop			@ (mov r8, r8)
 800aa9c:	2000005c 	.word	0x2000005c
 800aaa0:	000f4240 	.word	0x000f4240

0800aaa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	0002      	movs	r2, r0
 800aaac:	1dfb      	adds	r3, r7, #7
 800aaae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aab0:	1dfb      	adds	r3, r7, #7
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b7f      	cmp	r3, #127	@ 0x7f
 800aab6:	d809      	bhi.n	800aacc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aab8:	1dfb      	adds	r3, r7, #7
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	001a      	movs	r2, r3
 800aabe:	231f      	movs	r3, #31
 800aac0:	401a      	ands	r2, r3
 800aac2:	4b04      	ldr	r3, [pc, #16]	@ (800aad4 <__NVIC_EnableIRQ+0x30>)
 800aac4:	2101      	movs	r1, #1
 800aac6:	4091      	lsls	r1, r2
 800aac8:	000a      	movs	r2, r1
 800aaca:	601a      	str	r2, [r3, #0]
  }
}
 800aacc:	46c0      	nop			@ (mov r8, r8)
 800aace:	46bd      	mov	sp, r7
 800aad0:	b002      	add	sp, #8
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	e000e100 	.word	0xe000e100

0800aad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aad8:	b590      	push	{r4, r7, lr}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	0002      	movs	r2, r0
 800aae0:	6039      	str	r1, [r7, #0]
 800aae2:	1dfb      	adds	r3, r7, #7
 800aae4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aae6:	1dfb      	adds	r3, r7, #7
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	2b7f      	cmp	r3, #127	@ 0x7f
 800aaec:	d828      	bhi.n	800ab40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aaee:	4a2f      	ldr	r2, [pc, #188]	@ (800abac <__NVIC_SetPriority+0xd4>)
 800aaf0:	1dfb      	adds	r3, r7, #7
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	b25b      	sxtb	r3, r3
 800aaf6:	089b      	lsrs	r3, r3, #2
 800aaf8:	33c0      	adds	r3, #192	@ 0xc0
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	589b      	ldr	r3, [r3, r2]
 800aafe:	1dfa      	adds	r2, r7, #7
 800ab00:	7812      	ldrb	r2, [r2, #0]
 800ab02:	0011      	movs	r1, r2
 800ab04:	2203      	movs	r2, #3
 800ab06:	400a      	ands	r2, r1
 800ab08:	00d2      	lsls	r2, r2, #3
 800ab0a:	21ff      	movs	r1, #255	@ 0xff
 800ab0c:	4091      	lsls	r1, r2
 800ab0e:	000a      	movs	r2, r1
 800ab10:	43d2      	mvns	r2, r2
 800ab12:	401a      	ands	r2, r3
 800ab14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	019b      	lsls	r3, r3, #6
 800ab1a:	22ff      	movs	r2, #255	@ 0xff
 800ab1c:	401a      	ands	r2, r3
 800ab1e:	1dfb      	adds	r3, r7, #7
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	0018      	movs	r0, r3
 800ab24:	2303      	movs	r3, #3
 800ab26:	4003      	ands	r3, r0
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab2c:	481f      	ldr	r0, [pc, #124]	@ (800abac <__NVIC_SetPriority+0xd4>)
 800ab2e:	1dfb      	adds	r3, r7, #7
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	b25b      	sxtb	r3, r3
 800ab34:	089b      	lsrs	r3, r3, #2
 800ab36:	430a      	orrs	r2, r1
 800ab38:	33c0      	adds	r3, #192	@ 0xc0
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800ab3e:	e031      	b.n	800aba4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab40:	4a1b      	ldr	r2, [pc, #108]	@ (800abb0 <__NVIC_SetPriority+0xd8>)
 800ab42:	1dfb      	adds	r3, r7, #7
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	0019      	movs	r1, r3
 800ab48:	230f      	movs	r3, #15
 800ab4a:	400b      	ands	r3, r1
 800ab4c:	3b08      	subs	r3, #8
 800ab4e:	089b      	lsrs	r3, r3, #2
 800ab50:	3306      	adds	r3, #6
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	18d3      	adds	r3, r2, r3
 800ab56:	3304      	adds	r3, #4
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	1dfa      	adds	r2, r7, #7
 800ab5c:	7812      	ldrb	r2, [r2, #0]
 800ab5e:	0011      	movs	r1, r2
 800ab60:	2203      	movs	r2, #3
 800ab62:	400a      	ands	r2, r1
 800ab64:	00d2      	lsls	r2, r2, #3
 800ab66:	21ff      	movs	r1, #255	@ 0xff
 800ab68:	4091      	lsls	r1, r2
 800ab6a:	000a      	movs	r2, r1
 800ab6c:	43d2      	mvns	r2, r2
 800ab6e:	401a      	ands	r2, r3
 800ab70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	019b      	lsls	r3, r3, #6
 800ab76:	22ff      	movs	r2, #255	@ 0xff
 800ab78:	401a      	ands	r2, r3
 800ab7a:	1dfb      	adds	r3, r7, #7
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	0018      	movs	r0, r3
 800ab80:	2303      	movs	r3, #3
 800ab82:	4003      	ands	r3, r0
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab88:	4809      	ldr	r0, [pc, #36]	@ (800abb0 <__NVIC_SetPriority+0xd8>)
 800ab8a:	1dfb      	adds	r3, r7, #7
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	001c      	movs	r4, r3
 800ab90:	230f      	movs	r3, #15
 800ab92:	4023      	ands	r3, r4
 800ab94:	3b08      	subs	r3, #8
 800ab96:	089b      	lsrs	r3, r3, #2
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	3306      	adds	r3, #6
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	18c3      	adds	r3, r0, r3
 800aba0:	3304      	adds	r3, #4
 800aba2:	601a      	str	r2, [r3, #0]
}
 800aba4:	46c0      	nop			@ (mov r8, r8)
 800aba6:	46bd      	mov	sp, r7
 800aba8:	b003      	add	sp, #12
 800abaa:	bd90      	pop	{r4, r7, pc}
 800abac:	e000e100 	.word	0xe000e100
 800abb0:	e000ed00 	.word	0xe000ed00

0800abb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	1e5a      	subs	r2, r3, #1
 800abc0:	2380      	movs	r3, #128	@ 0x80
 800abc2:	045b      	lsls	r3, r3, #17
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d301      	bcc.n	800abcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800abc8:	2301      	movs	r3, #1
 800abca:	e010      	b.n	800abee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800abcc:	4b0a      	ldr	r3, [pc, #40]	@ (800abf8 <SysTick_Config+0x44>)
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	3a01      	subs	r2, #1
 800abd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800abd4:	2301      	movs	r3, #1
 800abd6:	425b      	negs	r3, r3
 800abd8:	2103      	movs	r1, #3
 800abda:	0018      	movs	r0, r3
 800abdc:	f7ff ff7c 	bl	800aad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800abe0:	4b05      	ldr	r3, [pc, #20]	@ (800abf8 <SysTick_Config+0x44>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800abe6:	4b04      	ldr	r3, [pc, #16]	@ (800abf8 <SysTick_Config+0x44>)
 800abe8:	2207      	movs	r2, #7
 800abea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800abec:	2300      	movs	r3, #0
}
 800abee:	0018      	movs	r0, r3
 800abf0:	46bd      	mov	sp, r7
 800abf2:	b002      	add	sp, #8
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	46c0      	nop			@ (mov r8, r8)
 800abf8:	e000e010 	.word	0xe000e010

0800abfc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60b9      	str	r1, [r7, #8]
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	210f      	movs	r1, #15
 800ac08:	187b      	adds	r3, r7, r1
 800ac0a:	1c02      	adds	r2, r0, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	187b      	adds	r3, r7, r1
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	b25b      	sxtb	r3, r3
 800ac16:	0011      	movs	r1, r2
 800ac18:	0018      	movs	r0, r3
 800ac1a:	f7ff ff5d 	bl	800aad8 <__NVIC_SetPriority>
}
 800ac1e:	46c0      	nop			@ (mov r8, r8)
 800ac20:	46bd      	mov	sp, r7
 800ac22:	b004      	add	sp, #16
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	0002      	movs	r2, r0
 800ac2e:	1dfb      	adds	r3, r7, #7
 800ac30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ac32:	1dfb      	adds	r3, r7, #7
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	b25b      	sxtb	r3, r3
 800ac38:	0018      	movs	r0, r3
 800ac3a:	f7ff ff33 	bl	800aaa4 <__NVIC_EnableIRQ>
}
 800ac3e:	46c0      	nop			@ (mov r8, r8)
 800ac40:	46bd      	mov	sp, r7
 800ac42:	b002      	add	sp, #8
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	0018      	movs	r0, r3
 800ac52:	f7ff ffaf 	bl	800abb4 <SysTick_Config>
 800ac56:	0003      	movs	r3, r0
}
 800ac58:	0018      	movs	r0, r3
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	b002      	add	sp, #8
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e061      	b.n	800ad36 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a32      	ldr	r2, [pc, #200]	@ (800ad40 <HAL_DMA_Init+0xe0>)
 800ac78:	4694      	mov	ip, r2
 800ac7a:	4463      	add	r3, ip
 800ac7c:	2114      	movs	r1, #20
 800ac7e:	0018      	movs	r0, r3
 800ac80:	f7f5 fa5e 	bl	8000140 <__udivsi3>
 800ac84:	0003      	movs	r3, r0
 800ac86:	009a      	lsls	r2, r3, #2
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a2d      	ldr	r2, [pc, #180]	@ (800ad44 <HAL_DMA_Init+0xe4>)
 800ac90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2225      	movs	r2, #37	@ 0x25
 800ac96:	2102      	movs	r1, #2
 800ac98:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	4a28      	ldr	r2, [pc, #160]	@ (800ad48 <HAL_DMA_Init+0xe8>)
 800aca6:	4013      	ands	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800acb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800acbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800acca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	2380      	movs	r3, #128	@ 0x80
 800ace6:	01db      	lsls	r3, r3, #7
 800ace8:	429a      	cmp	r2, r3
 800acea:	d018      	beq.n	800ad1e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800acec:	4b17      	ldr	r3, [pc, #92]	@ (800ad4c <HAL_DMA_Init+0xec>)
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acf4:	211c      	movs	r1, #28
 800acf6:	400b      	ands	r3, r1
 800acf8:	210f      	movs	r1, #15
 800acfa:	4099      	lsls	r1, r3
 800acfc:	000b      	movs	r3, r1
 800acfe:	43d9      	mvns	r1, r3
 800ad00:	4b12      	ldr	r3, [pc, #72]	@ (800ad4c <HAL_DMA_Init+0xec>)
 800ad02:	400a      	ands	r2, r1
 800ad04:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ad06:	4b11      	ldr	r3, [pc, #68]	@ (800ad4c <HAL_DMA_Init+0xec>)
 800ad08:	6819      	ldr	r1, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad12:	201c      	movs	r0, #28
 800ad14:	4003      	ands	r3, r0
 800ad16:	409a      	lsls	r2, r3
 800ad18:	4b0c      	ldr	r3, [pc, #48]	@ (800ad4c <HAL_DMA_Init+0xec>)
 800ad1a:	430a      	orrs	r2, r1
 800ad1c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2225      	movs	r2, #37	@ 0x25
 800ad28:	2101      	movs	r1, #1
 800ad2a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2224      	movs	r2, #36	@ 0x24
 800ad30:	2100      	movs	r1, #0
 800ad32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	0018      	movs	r0, r3
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	b004      	add	sp, #16
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	46c0      	nop			@ (mov r8, r8)
 800ad40:	bffdfff8 	.word	0xbffdfff8
 800ad44:	40020000 	.word	0x40020000
 800ad48:	ffff800f 	.word	0xffff800f
 800ad4c:	400200a8 	.word	0x400200a8

0800ad50 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e04a      	b.n	800adf8 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	438a      	bics	r2, r1
 800ad70:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a22      	ldr	r2, [pc, #136]	@ (800ae00 <HAL_DMA_DeInit+0xb0>)
 800ad78:	4694      	mov	ip, r2
 800ad7a:	4463      	add	r3, ip
 800ad7c:	2114      	movs	r1, #20
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f7f5 f9de 	bl	8000140 <__udivsi3>
 800ad84:	0003      	movs	r3, r0
 800ad86:	009a      	lsls	r2, r3, #2
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a1d      	ldr	r2, [pc, #116]	@ (800ae04 <HAL_DMA_DeInit+0xb4>)
 800ad90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad9e:	221c      	movs	r2, #28
 800ada0:	401a      	ands	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada6:	2101      	movs	r1, #1
 800ada8:	4091      	lsls	r1, r2
 800adaa:	000a      	movs	r2, r1
 800adac:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800adae:	4b16      	ldr	r3, [pc, #88]	@ (800ae08 <HAL_DMA_DeInit+0xb8>)
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb6:	211c      	movs	r1, #28
 800adb8:	400b      	ands	r3, r1
 800adba:	210f      	movs	r1, #15
 800adbc:	4099      	lsls	r1, r3
 800adbe:	000b      	movs	r3, r1
 800adc0:	43d9      	mvns	r1, r3
 800adc2:	4b11      	ldr	r3, [pc, #68]	@ (800ae08 <HAL_DMA_DeInit+0xb8>)
 800adc4:	400a      	ands	r2, r1
 800adc6:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2225      	movs	r2, #37	@ 0x25
 800adea:	2100      	movs	r1, #0
 800adec:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2224      	movs	r2, #36	@ 0x24
 800adf2:	2100      	movs	r1, #0
 800adf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	0018      	movs	r0, r3
 800adfa:	46bd      	mov	sp, r7
 800adfc:	b002      	add	sp, #8
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	bffdfff8 	.word	0xbffdfff8
 800ae04:	40020000 	.word	0x40020000
 800ae08:	400200a8 	.word	0x400200a8

0800ae0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
 800ae18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae1a:	2317      	movs	r3, #23
 800ae1c:	18fb      	adds	r3, r7, r3
 800ae1e:	2200      	movs	r2, #0
 800ae20:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2224      	movs	r2, #36	@ 0x24
 800ae26:	5c9b      	ldrb	r3, [r3, r2]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_DMA_Start_IT+0x24>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e04f      	b.n	800aed0 <HAL_DMA_Start_IT+0xc4>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2224      	movs	r2, #36	@ 0x24
 800ae34:	2101      	movs	r1, #1
 800ae36:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2225      	movs	r2, #37	@ 0x25
 800ae3c:	5c9b      	ldrb	r3, [r3, r2]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d13a      	bne.n	800aeba <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2225      	movs	r2, #37	@ 0x25
 800ae48:	2102      	movs	r1, #2
 800ae4a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	438a      	bics	r2, r1
 800ae60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	68b9      	ldr	r1, [r7, #8]
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f976 	bl	800b15a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d008      	beq.n	800ae88 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	210e      	movs	r1, #14
 800ae82:	430a      	orrs	r2, r1
 800ae84:	601a      	str	r2, [r3, #0]
 800ae86:	e00f      	b.n	800aea8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2104      	movs	r1, #4
 800ae94:	438a      	bics	r2, r1
 800ae96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	210a      	movs	r1, #10
 800aea4:	430a      	orrs	r2, r1
 800aea6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	601a      	str	r2, [r3, #0]
 800aeb8:	e007      	b.n	800aeca <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2224      	movs	r2, #36	@ 0x24
 800aebe:	2100      	movs	r1, #0
 800aec0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800aec2:	2317      	movs	r3, #23
 800aec4:	18fb      	adds	r3, r7, r3
 800aec6:	2202      	movs	r2, #2
 800aec8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800aeca:	2317      	movs	r3, #23
 800aecc:	18fb      	adds	r3, r7, r3
 800aece:	781b      	ldrb	r3, [r3, #0]
}
 800aed0:	0018      	movs	r0, r3
 800aed2:	46bd      	mov	sp, r7
 800aed4:	b006      	add	sp, #24
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aee0:	230f      	movs	r3, #15
 800aee2:	18fb      	adds	r3, r7, r3
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2225      	movs	r2, #37	@ 0x25
 800aeec:	5c9b      	ldrb	r3, [r3, r2]
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d008      	beq.n	800af06 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2204      	movs	r2, #4
 800aef8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2224      	movs	r2, #36	@ 0x24
 800aefe:	2100      	movs	r1, #0
 800af00:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e024      	b.n	800af50 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	210e      	movs	r1, #14
 800af12:	438a      	bics	r2, r1
 800af14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2101      	movs	r1, #1
 800af22:	438a      	bics	r2, r1
 800af24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af2a:	221c      	movs	r2, #28
 800af2c:	401a      	ands	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af32:	2101      	movs	r1, #1
 800af34:	4091      	lsls	r1, r2
 800af36:	000a      	movs	r2, r1
 800af38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2225      	movs	r2, #37	@ 0x25
 800af3e:	2101      	movs	r1, #1
 800af40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2224      	movs	r2, #36	@ 0x24
 800af46:	2100      	movs	r1, #0
 800af48:	5499      	strb	r1, [r3, r2]

    return status;
 800af4a:	230f      	movs	r3, #15
 800af4c:	18fb      	adds	r3, r7, r3
 800af4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af50:	0018      	movs	r0, r3
 800af52:	46bd      	mov	sp, r7
 800af54:	b004      	add	sp, #16
 800af56:	bd80      	pop	{r7, pc}

0800af58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af60:	210f      	movs	r1, #15
 800af62:	187b      	adds	r3, r7, r1
 800af64:	2200      	movs	r2, #0
 800af66:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2225      	movs	r2, #37	@ 0x25
 800af6c:	5c9b      	ldrb	r3, [r3, r2]
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	d006      	beq.n	800af82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2204      	movs	r2, #4
 800af78:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800af7a:	187b      	adds	r3, r7, r1
 800af7c:	2201      	movs	r2, #1
 800af7e:	701a      	strb	r2, [r3, #0]
 800af80:	e02a      	b.n	800afd8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	210e      	movs	r1, #14
 800af8e:	438a      	bics	r2, r1
 800af90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2101      	movs	r1, #1
 800af9e:	438a      	bics	r2, r1
 800afa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afa6:	221c      	movs	r2, #28
 800afa8:	401a      	ands	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afae:	2101      	movs	r1, #1
 800afb0:	4091      	lsls	r1, r2
 800afb2:	000a      	movs	r2, r1
 800afb4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2225      	movs	r2, #37	@ 0x25
 800afba:	2101      	movs	r1, #1
 800afbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2224      	movs	r2, #36	@ 0x24
 800afc2:	2100      	movs	r1, #0
 800afc4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d004      	beq.n	800afd8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	0010      	movs	r0, r2
 800afd6:	4798      	blx	r3
    }
  }
  return status;
 800afd8:	230f      	movs	r3, #15
 800afda:	18fb      	adds	r3, r7, r3
 800afdc:	781b      	ldrb	r3, [r3, #0]
}
 800afde:	0018      	movs	r0, r3
 800afe0:	46bd      	mov	sp, r7
 800afe2:	b004      	add	sp, #16
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b084      	sub	sp, #16
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b002:	221c      	movs	r2, #28
 800b004:	4013      	ands	r3, r2
 800b006:	2204      	movs	r2, #4
 800b008:	409a      	lsls	r2, r3
 800b00a:	0013      	movs	r3, r2
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	4013      	ands	r3, r2
 800b010:	d026      	beq.n	800b060 <HAL_DMA_IRQHandler+0x7a>
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2204      	movs	r2, #4
 800b016:	4013      	ands	r3, r2
 800b018:	d022      	beq.n	800b060 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2220      	movs	r2, #32
 800b022:	4013      	ands	r3, r2
 800b024:	d107      	bne.n	800b036 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2104      	movs	r1, #4
 800b032:	438a      	bics	r2, r1
 800b034:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b03a:	221c      	movs	r2, #28
 800b03c:	401a      	ands	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b042:	2104      	movs	r1, #4
 800b044:	4091      	lsls	r1, r2
 800b046:	000a      	movs	r2, r1
 800b048:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d100      	bne.n	800b054 <HAL_DMA_IRQHandler+0x6e>
 800b052:	e071      	b.n	800b138 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	0010      	movs	r0, r2
 800b05c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800b05e:	e06b      	b.n	800b138 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b064:	221c      	movs	r2, #28
 800b066:	4013      	ands	r3, r2
 800b068:	2202      	movs	r2, #2
 800b06a:	409a      	lsls	r2, r3
 800b06c:	0013      	movs	r3, r2
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	4013      	ands	r3, r2
 800b072:	d02d      	beq.n	800b0d0 <HAL_DMA_IRQHandler+0xea>
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2202      	movs	r2, #2
 800b078:	4013      	ands	r3, r2
 800b07a:	d029      	beq.n	800b0d0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2220      	movs	r2, #32
 800b084:	4013      	ands	r3, r2
 800b086:	d10b      	bne.n	800b0a0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	210a      	movs	r1, #10
 800b094:	438a      	bics	r2, r1
 800b096:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2225      	movs	r2, #37	@ 0x25
 800b09c:	2101      	movs	r1, #1
 800b09e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0a4:	221c      	movs	r2, #28
 800b0a6:	401a      	ands	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ac:	2102      	movs	r1, #2
 800b0ae:	4091      	lsls	r1, r2
 800b0b0:	000a      	movs	r2, r1
 800b0b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2224      	movs	r2, #36	@ 0x24
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d039      	beq.n	800b138 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	0010      	movs	r0, r2
 800b0cc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800b0ce:	e033      	b.n	800b138 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d4:	221c      	movs	r2, #28
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	2208      	movs	r2, #8
 800b0da:	409a      	lsls	r2, r3
 800b0dc:	0013      	movs	r3, r2
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	d02a      	beq.n	800b13a <HAL_DMA_IRQHandler+0x154>
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2208      	movs	r2, #8
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	d026      	beq.n	800b13a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	210e      	movs	r1, #14
 800b0f8:	438a      	bics	r2, r1
 800b0fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b100:	221c      	movs	r2, #28
 800b102:	401a      	ands	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b108:	2101      	movs	r1, #1
 800b10a:	4091      	lsls	r1, r2
 800b10c:	000a      	movs	r2, r1
 800b10e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2225      	movs	r2, #37	@ 0x25
 800b11a:	2101      	movs	r1, #1
 800b11c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2224      	movs	r2, #36	@ 0x24
 800b122:	2100      	movs	r1, #0
 800b124:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d005      	beq.n	800b13a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	0010      	movs	r0, r2
 800b136:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b138:	46c0      	nop			@ (mov r8, r8)
 800b13a:	46c0      	nop			@ (mov r8, r8)
}
 800b13c:	46bd      	mov	sp, r7
 800b13e:	b004      	add	sp, #16
 800b140:	bd80      	pop	{r7, pc}

0800b142 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b082      	sub	sp, #8
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2225      	movs	r2, #37	@ 0x25
 800b14e:	5c9b      	ldrb	r3, [r3, r2]
 800b150:	b2db      	uxtb	r3, r3
}
 800b152:	0018      	movs	r0, r3
 800b154:	46bd      	mov	sp, r7
 800b156:	b002      	add	sp, #8
 800b158:	bd80      	pop	{r7, pc}

0800b15a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	607a      	str	r2, [r7, #4]
 800b166:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b16c:	221c      	movs	r2, #28
 800b16e:	401a      	ands	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b174:	2101      	movs	r1, #1
 800b176:	4091      	lsls	r1, r2
 800b178:	000a      	movs	r2, r1
 800b17a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	2b10      	cmp	r3, #16
 800b18a:	d108      	bne.n	800b19e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b19c:	e007      	b.n	800b1ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	60da      	str	r2, [r3, #12]
}
 800b1ae:	46c0      	nop			@ (mov r8, r8)
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	b004      	add	sp, #16
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800b1c0:	f7ff f8a6 	bl	800a310 <HAL_GetTick>
 800b1c4:	0003      	movs	r3, r0
 800b1c6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b1c8:	e00f      	b.n	800b1ea <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	d00c      	beq.n	800b1ea <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <FLASH_WaitForLastOperation+0x2e>
 800b1d6:	f7ff f89b 	bl	800a310 <HAL_GetTick>
 800b1da:	0002      	movs	r2, r0
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d201      	bcs.n	800b1ea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e052      	b.n	800b290 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b1ea:	4b2b      	ldr	r3, [pc, #172]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d0e9      	beq.n	800b1ca <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b1f6:	4b28      	ldr	r3, [pc, #160]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b1f8:	699b      	ldr	r3, [r3, #24]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d102      	bne.n	800b208 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b202:	4b25      	ldr	r3, [pc, #148]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b204:	2202      	movs	r2, #2
 800b206:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b208:	4b23      	ldr	r3, [pc, #140]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b20a:	699a      	ldr	r2, [r3, #24]
 800b20c:	2380      	movs	r3, #128	@ 0x80
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	401a      	ands	r2, r3
 800b212:	2380      	movs	r3, #128	@ 0x80
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	429a      	cmp	r2, r3
 800b218:	d035      	beq.n	800b286 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b21a:	4b1f      	ldr	r3, [pc, #124]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b21c:	699a      	ldr	r2, [r3, #24]
 800b21e:	2380      	movs	r3, #128	@ 0x80
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b224:	2380      	movs	r3, #128	@ 0x80
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	429a      	cmp	r2, r3
 800b22a:	d02c      	beq.n	800b286 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b22c:	4b1a      	ldr	r3, [pc, #104]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b22e:	699a      	ldr	r2, [r3, #24]
 800b230:	2380      	movs	r3, #128	@ 0x80
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b236:	2380      	movs	r3, #128	@ 0x80
 800b238:	00db      	lsls	r3, r3, #3
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d023      	beq.n	800b286 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b23e:	4b16      	ldr	r3, [pc, #88]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b240:	699a      	ldr	r2, [r3, #24]
 800b242:	2380      	movs	r3, #128	@ 0x80
 800b244:	011b      	lsls	r3, r3, #4
 800b246:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b248:	2380      	movs	r3, #128	@ 0x80
 800b24a:	011b      	lsls	r3, r3, #4
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d01a      	beq.n	800b286 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b250:	4b11      	ldr	r3, [pc, #68]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b252:	699a      	ldr	r2, [r3, #24]
 800b254:	2380      	movs	r3, #128	@ 0x80
 800b256:	019b      	lsls	r3, r3, #6
 800b258:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b25a:	2380      	movs	r3, #128	@ 0x80
 800b25c:	019b      	lsls	r3, r3, #6
 800b25e:	429a      	cmp	r2, r3
 800b260:	d011      	beq.n	800b286 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b262:	4b0d      	ldr	r3, [pc, #52]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b264:	699a      	ldr	r2, [r3, #24]
 800b266:	2380      	movs	r3, #128	@ 0x80
 800b268:	029b      	lsls	r3, r3, #10
 800b26a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b26c:	2380      	movs	r3, #128	@ 0x80
 800b26e:	029b      	lsls	r3, r3, #10
 800b270:	429a      	cmp	r2, r3
 800b272:	d008      	beq.n	800b286 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800b274:	4b08      	ldr	r3, [pc, #32]	@ (800b298 <FLASH_WaitForLastOperation+0xe0>)
 800b276:	699a      	ldr	r2, [r3, #24]
 800b278:	2380      	movs	r3, #128	@ 0x80
 800b27a:	025b      	lsls	r3, r3, #9
 800b27c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b27e:	2380      	movs	r3, #128	@ 0x80
 800b280:	025b      	lsls	r3, r3, #9
 800b282:	429a      	cmp	r2, r3
 800b284:	d103      	bne.n	800b28e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800b286:	f000 f809 	bl	800b29c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e000      	b.n	800b290 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	0018      	movs	r0, r3
 800b292:	46bd      	mov	sp, r7
 800b294:	b004      	add	sp, #16
 800b296:	bd80      	pop	{r7, pc}
 800b298:	40022000 	.word	0x40022000

0800b29c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800b2a6:	4b49      	ldr	r3, [pc, #292]	@ (800b3cc <FLASH_SetErrorCode+0x130>)
 800b2a8:	699a      	ldr	r2, [r3, #24]
 800b2aa:	2380      	movs	r3, #128	@ 0x80
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	401a      	ands	r2, r3
 800b2b0:	2380      	movs	r3, #128	@ 0x80
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d10a      	bne.n	800b2ce <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b2b8:	4b45      	ldr	r3, [pc, #276]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	2202      	movs	r2, #2
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	4b43      	ldr	r3, [pc, #268]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b2c2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2280      	movs	r2, #128	@ 0x80
 800b2c8:	0052      	lsls	r2, r2, #1
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800b2ce:	4b3f      	ldr	r3, [pc, #252]	@ (800b3cc <FLASH_SetErrorCode+0x130>)
 800b2d0:	699a      	ldr	r2, [r3, #24]
 800b2d2:	2380      	movs	r3, #128	@ 0x80
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	401a      	ands	r2, r3
 800b2d8:	2380      	movs	r3, #128	@ 0x80
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d10a      	bne.n	800b2f6 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b2e0:	4b3b      	ldr	r3, [pc, #236]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	4b39      	ldr	r3, [pc, #228]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b2ea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2280      	movs	r2, #128	@ 0x80
 800b2f0:	0092      	lsls	r2, r2, #2
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800b2f6:	4b35      	ldr	r3, [pc, #212]	@ (800b3cc <FLASH_SetErrorCode+0x130>)
 800b2f8:	699a      	ldr	r2, [r3, #24]
 800b2fa:	2380      	movs	r3, #128	@ 0x80
 800b2fc:	00db      	lsls	r3, r3, #3
 800b2fe:	401a      	ands	r2, r3
 800b300:	2380      	movs	r3, #128	@ 0x80
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	429a      	cmp	r2, r3
 800b306:	d10a      	bne.n	800b31e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800b308:	4b31      	ldr	r3, [pc, #196]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b30a:	695b      	ldr	r3, [r3, #20]
 800b30c:	2208      	movs	r2, #8
 800b30e:	431a      	orrs	r2, r3
 800b310:	4b2f      	ldr	r3, [pc, #188]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b312:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2280      	movs	r2, #128	@ 0x80
 800b318:	00d2      	lsls	r2, r2, #3
 800b31a:	4313      	orrs	r3, r2
 800b31c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800b31e:	4b2b      	ldr	r3, [pc, #172]	@ (800b3cc <FLASH_SetErrorCode+0x130>)
 800b320:	699a      	ldr	r2, [r3, #24]
 800b322:	2380      	movs	r3, #128	@ 0x80
 800b324:	011b      	lsls	r3, r3, #4
 800b326:	401a      	ands	r2, r3
 800b328:	2380      	movs	r3, #128	@ 0x80
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d10a      	bne.n	800b346 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800b330:	4b27      	ldr	r3, [pc, #156]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	2204      	movs	r2, #4
 800b336:	431a      	orrs	r2, r3
 800b338:	4b25      	ldr	r3, [pc, #148]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b33a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2280      	movs	r2, #128	@ 0x80
 800b340:	0112      	lsls	r2, r2, #4
 800b342:	4313      	orrs	r3, r2
 800b344:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800b346:	4b21      	ldr	r3, [pc, #132]	@ (800b3cc <FLASH_SetErrorCode+0x130>)
 800b348:	699a      	ldr	r2, [r3, #24]
 800b34a:	2380      	movs	r3, #128	@ 0x80
 800b34c:	019b      	lsls	r3, r3, #6
 800b34e:	401a      	ands	r2, r3
 800b350:	2380      	movs	r3, #128	@ 0x80
 800b352:	019b      	lsls	r3, r3, #6
 800b354:	429a      	cmp	r2, r3
 800b356:	d10a      	bne.n	800b36e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800b358:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	2210      	movs	r2, #16
 800b35e:	431a      	orrs	r2, r3
 800b360:	4b1b      	ldr	r3, [pc, #108]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b362:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2280      	movs	r2, #128	@ 0x80
 800b368:	0192      	lsls	r2, r2, #6
 800b36a:	4313      	orrs	r3, r2
 800b36c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800b36e:	4b17      	ldr	r3, [pc, #92]	@ (800b3cc <FLASH_SetErrorCode+0x130>)
 800b370:	699a      	ldr	r2, [r3, #24]
 800b372:	2380      	movs	r3, #128	@ 0x80
 800b374:	029b      	lsls	r3, r3, #10
 800b376:	401a      	ands	r2, r3
 800b378:	2380      	movs	r3, #128	@ 0x80
 800b37a:	029b      	lsls	r3, r3, #10
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d109      	bne.n	800b394 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800b380:	4b13      	ldr	r3, [pc, #76]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	2220      	movs	r2, #32
 800b386:	431a      	orrs	r2, r3
 800b388:	4b11      	ldr	r3, [pc, #68]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b38a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2220      	movs	r2, #32
 800b390:	4313      	orrs	r3, r2
 800b392:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800b394:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <FLASH_SetErrorCode+0x130>)
 800b396:	699a      	ldr	r2, [r3, #24]
 800b398:	2380      	movs	r3, #128	@ 0x80
 800b39a:	025b      	lsls	r3, r3, #9
 800b39c:	401a      	ands	r2, r3
 800b39e:	2380      	movs	r3, #128	@ 0x80
 800b3a0:	025b      	lsls	r3, r3, #9
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d10a      	bne.n	800b3bc <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800b3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	2240      	movs	r2, #64	@ 0x40
 800b3ac:	431a      	orrs	r2, r3
 800b3ae:	4b08      	ldr	r3, [pc, #32]	@ (800b3d0 <FLASH_SetErrorCode+0x134>)
 800b3b0:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2280      	movs	r2, #128	@ 0x80
 800b3b6:	0252      	lsls	r2, r2, #9
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b3bc:	4b03      	ldr	r3, [pc, #12]	@ (800b3cc <FLASH_SetErrorCode+0x130>)
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	619a      	str	r2, [r3, #24]
}  
 800b3c2:	46c0      	nop			@ (mov r8, r8)
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	b002      	add	sp, #8
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	46c0      	nop			@ (mov r8, r8)
 800b3cc:	40022000 	.word	0x40022000
 800b3d0:	20002d1c 	.word	0x20002d1c

0800b3d4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b3da:	4b12      	ldr	r3, [pc, #72]	@ (800b424 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	d019      	beq.n	800b418 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b3e8:	607b      	str	r3, [r7, #4]
  return(result);
 800b3ea:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800b3ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3ee:	b672      	cpsid	i
}
 800b3f0:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800b3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b424 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b3f4:	4a0c      	ldr	r2, [pc, #48]	@ (800b428 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800b3f6:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b424 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b3fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b42c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800b3fc:	60da      	str	r2, [r3, #12]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	f383 8810 	msr	PRIMASK, r3
}
 800b408:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b40a:	4b06      	ldr	r3, [pc, #24]	@ (800b424 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	4013      	ands	r3, r2
 800b412:	d001      	beq.n	800b418 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e000      	b.n	800b41a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800b418:	2300      	movs	r3, #0
}
 800b41a:	0018      	movs	r0, r3
 800b41c:	46bd      	mov	sp, r7
 800b41e:	b004      	add	sp, #16
 800b420:	bd80      	pop	{r7, pc}
 800b422:	46c0      	nop			@ (mov r8, r8)
 800b424:	40022000 	.word	0x40022000
 800b428:	89abcdef 	.word	0x89abcdef
 800b42c:	02030405 	.word	0x02030405

0800b430 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800b434:	4b04      	ldr	r3, [pc, #16]	@ (800b448 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	4b03      	ldr	r3, [pc, #12]	@ (800b448 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b43a:	2101      	movs	r1, #1
 800b43c:	430a      	orrs	r2, r1
 800b43e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	0018      	movs	r0, r3
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	40022000 	.word	0x40022000

0800b44c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800b44c:	b5b0      	push	{r4, r5, r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b454:	250f      	movs	r5, #15
 800b456:	197b      	adds	r3, r7, r5
 800b458:	2200      	movs	r2, #0
 800b45a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b45c:	197c      	adds	r4, r7, r5
 800b45e:	4b0f      	ldr	r3, [pc, #60]	@ (800b49c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b460:	0018      	movs	r0, r3
 800b462:	f7ff fea9 	bl	800b1b8 <FLASH_WaitForLastOperation>
 800b466:	0003      	movs	r3, r0
 800b468:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b46a:	0029      	movs	r1, r5
 800b46c:	187b      	adds	r3, r7, r1
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10c      	bne.n	800b48e <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b474:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a0 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800b476:	2200      	movs	r2, #0
 800b478:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b480:	187c      	adds	r4, r7, r1
 800b482:	4b06      	ldr	r3, [pc, #24]	@ (800b49c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b484:	0018      	movs	r0, r3
 800b486:	f7ff fe97 	bl	800b1b8 <FLASH_WaitForLastOperation>
 800b48a:	0003      	movs	r3, r0
 800b48c:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800b48e:	230f      	movs	r3, #15
 800b490:	18fb      	adds	r3, r7, r3
 800b492:	781b      	ldrb	r3, [r3, #0]
}  
 800b494:	0018      	movs	r0, r3
 800b496:	46bd      	mov	sp, r7
 800b498:	b004      	add	sp, #16
 800b49a:	bdb0      	pop	{r4, r5, r7, pc}
 800b49c:	0000c350 	.word	0x0000c350
 800b4a0:	20002d1c 	.word	0x20002d1c

0800b4a4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800b4a4:	b5b0      	push	{r4, r5, r7, lr}
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b4b0:	2317      	movs	r3, #23
 800b4b2:	18fb      	adds	r3, r7, r3
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b4b8:	4b24      	ldr	r3, [pc, #144]	@ (800b54c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b4ba:	7c1b      	ldrb	r3, [r3, #16]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d101      	bne.n	800b4c4 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	e03e      	b.n	800b542 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800b4c4:	4b21      	ldr	r3, [pc, #132]	@ (800b54c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b4ca:	2517      	movs	r5, #23
 800b4cc:	197c      	adds	r4, r7, r5
 800b4ce:	4b20      	ldr	r3, [pc, #128]	@ (800b550 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	f7ff fe71 	bl	800b1b8 <FLASH_WaitForLastOperation>
 800b4d6:	0003      	movs	r3, r0
 800b4d8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b4da:	197b      	adds	r3, r7, r5
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d129      	bne.n	800b536 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b4e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b54c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d103      	bne.n	800b4f6 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	e013      	b.n	800b51e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d104      	bne.n	800b506 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	b292      	uxth	r2, r2
 800b502:	801a      	strh	r2, [r3, #0]
 800b504:	e00b      	b.n	800b51e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d104      	bne.n	800b516 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	e003      	b.n	800b51e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800b516:	2317      	movs	r3, #23
 800b518:	18fb      	adds	r3, r7, r3
 800b51a:	2201      	movs	r2, #1
 800b51c:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b51e:	2217      	movs	r2, #23
 800b520:	18bb      	adds	r3, r7, r2
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d106      	bne.n	800b536 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b528:	18bc      	adds	r4, r7, r2
 800b52a:	4b09      	ldr	r3, [pc, #36]	@ (800b550 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b52c:	0018      	movs	r0, r3
 800b52e:	f7ff fe43 	bl	800b1b8 <FLASH_WaitForLastOperation>
 800b532:	0003      	movs	r3, r0
 800b534:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b536:	4b05      	ldr	r3, [pc, #20]	@ (800b54c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b538:	2200      	movs	r2, #0
 800b53a:	741a      	strb	r2, [r3, #16]

  return status;
 800b53c:	2317      	movs	r3, #23
 800b53e:	18fb      	adds	r3, r7, r3
 800b540:	781b      	ldrb	r3, [r3, #0]
}
 800b542:	0018      	movs	r0, r3
 800b544:	46bd      	mov	sp, r7
 800b546:	b006      	add	sp, #24
 800b548:	bdb0      	pop	{r4, r5, r7, pc}
 800b54a:	46c0      	nop			@ (mov r8, r8)
 800b54c:	20002d1c 	.word	0x20002d1c
 800b550:	0000c350 	.word	0x0000c350

0800b554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b562:	2300      	movs	r3, #0
 800b564:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800b566:	2300      	movs	r3, #0
 800b568:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800b56a:	e155      	b.n	800b818 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2101      	movs	r1, #1
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	4091      	lsls	r1, r2
 800b576:	000a      	movs	r2, r1
 800b578:	4013      	ands	r3, r2
 800b57a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d100      	bne.n	800b584 <HAL_GPIO_Init+0x30>
 800b582:	e146      	b.n	800b812 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	2203      	movs	r2, #3
 800b58a:	4013      	ands	r3, r2
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d005      	beq.n	800b59c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	2203      	movs	r2, #3
 800b596:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d130      	bne.n	800b5fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	2203      	movs	r2, #3
 800b5a8:	409a      	lsls	r2, r3
 800b5aa:	0013      	movs	r3, r2
 800b5ac:	43da      	mvns	r2, r3
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	409a      	lsls	r2, r3
 800b5be:	0013      	movs	r3, r2
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	409a      	lsls	r2, r3
 800b5d8:	0013      	movs	r3, r2
 800b5da:	43da      	mvns	r2, r3
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	4013      	ands	r3, r2
 800b5e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	091b      	lsrs	r3, r3, #4
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	401a      	ands	r2, r3
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	409a      	lsls	r2, r3
 800b5f0:	0013      	movs	r3, r2
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	2203      	movs	r2, #3
 800b604:	4013      	ands	r3, r2
 800b606:	2b03      	cmp	r3, #3
 800b608:	d017      	beq.n	800b63a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	005b      	lsls	r3, r3, #1
 800b614:	2203      	movs	r2, #3
 800b616:	409a      	lsls	r2, r3
 800b618:	0013      	movs	r3, r2
 800b61a:	43da      	mvns	r2, r3
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	4013      	ands	r3, r2
 800b620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	689a      	ldr	r2, [r3, #8]
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	005b      	lsls	r3, r3, #1
 800b62a:	409a      	lsls	r2, r3
 800b62c:	0013      	movs	r3, r2
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	4313      	orrs	r3, r2
 800b632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	2203      	movs	r2, #3
 800b640:	4013      	ands	r3, r2
 800b642:	2b02      	cmp	r3, #2
 800b644:	d123      	bne.n	800b68e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	08da      	lsrs	r2, r3, #3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3208      	adds	r2, #8
 800b64e:	0092      	lsls	r2, r2, #2
 800b650:	58d3      	ldr	r3, [r2, r3]
 800b652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	2207      	movs	r2, #7
 800b658:	4013      	ands	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	220f      	movs	r2, #15
 800b65e:	409a      	lsls	r2, r3
 800b660:	0013      	movs	r3, r2
 800b662:	43da      	mvns	r2, r3
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	4013      	ands	r3, r2
 800b668:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	691a      	ldr	r2, [r3, #16]
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2107      	movs	r1, #7
 800b672:	400b      	ands	r3, r1
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	409a      	lsls	r2, r3
 800b678:	0013      	movs	r3, r2
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	08da      	lsrs	r2, r3, #3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3208      	adds	r2, #8
 800b688:	0092      	lsls	r2, r2, #2
 800b68a:	6939      	ldr	r1, [r7, #16]
 800b68c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	2203      	movs	r2, #3
 800b69a:	409a      	lsls	r2, r3
 800b69c:	0013      	movs	r3, r2
 800b69e:	43da      	mvns	r2, r3
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	2203      	movs	r2, #3
 800b6ac:	401a      	ands	r2, r3
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	005b      	lsls	r3, r3, #1
 800b6b2:	409a      	lsls	r2, r3
 800b6b4:	0013      	movs	r3, r2
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	23c0      	movs	r3, #192	@ 0xc0
 800b6c8:	029b      	lsls	r3, r3, #10
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	d100      	bne.n	800b6d0 <HAL_GPIO_Init+0x17c>
 800b6ce:	e0a0      	b.n	800b812 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b6d0:	4b57      	ldr	r3, [pc, #348]	@ (800b830 <HAL_GPIO_Init+0x2dc>)
 800b6d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6d4:	4b56      	ldr	r3, [pc, #344]	@ (800b830 <HAL_GPIO_Init+0x2dc>)
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	430a      	orrs	r2, r1
 800b6da:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800b6dc:	4a55      	ldr	r2, [pc, #340]	@ (800b834 <HAL_GPIO_Init+0x2e0>)
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	089b      	lsrs	r3, r3, #2
 800b6e2:	3302      	adds	r3, #2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	589b      	ldr	r3, [r3, r2]
 800b6e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2203      	movs	r2, #3
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	220f      	movs	r2, #15
 800b6f4:	409a      	lsls	r2, r3
 800b6f6:	0013      	movs	r3, r2
 800b6f8:	43da      	mvns	r2, r3
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	23a0      	movs	r3, #160	@ 0xa0
 800b704:	05db      	lsls	r3, r3, #23
 800b706:	429a      	cmp	r2, r3
 800b708:	d01f      	beq.n	800b74a <HAL_GPIO_Init+0x1f6>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a4a      	ldr	r2, [pc, #296]	@ (800b838 <HAL_GPIO_Init+0x2e4>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d019      	beq.n	800b746 <HAL_GPIO_Init+0x1f2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a49      	ldr	r2, [pc, #292]	@ (800b83c <HAL_GPIO_Init+0x2e8>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d013      	beq.n	800b742 <HAL_GPIO_Init+0x1ee>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a48      	ldr	r2, [pc, #288]	@ (800b840 <HAL_GPIO_Init+0x2ec>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d00d      	beq.n	800b73e <HAL_GPIO_Init+0x1ea>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a47      	ldr	r2, [pc, #284]	@ (800b844 <HAL_GPIO_Init+0x2f0>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d007      	beq.n	800b73a <HAL_GPIO_Init+0x1e6>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a46      	ldr	r2, [pc, #280]	@ (800b848 <HAL_GPIO_Init+0x2f4>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d101      	bne.n	800b736 <HAL_GPIO_Init+0x1e2>
 800b732:	2305      	movs	r3, #5
 800b734:	e00a      	b.n	800b74c <HAL_GPIO_Init+0x1f8>
 800b736:	2306      	movs	r3, #6
 800b738:	e008      	b.n	800b74c <HAL_GPIO_Init+0x1f8>
 800b73a:	2304      	movs	r3, #4
 800b73c:	e006      	b.n	800b74c <HAL_GPIO_Init+0x1f8>
 800b73e:	2303      	movs	r3, #3
 800b740:	e004      	b.n	800b74c <HAL_GPIO_Init+0x1f8>
 800b742:	2302      	movs	r3, #2
 800b744:	e002      	b.n	800b74c <HAL_GPIO_Init+0x1f8>
 800b746:	2301      	movs	r3, #1
 800b748:	e000      	b.n	800b74c <HAL_GPIO_Init+0x1f8>
 800b74a:	2300      	movs	r3, #0
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	2103      	movs	r1, #3
 800b750:	400a      	ands	r2, r1
 800b752:	0092      	lsls	r2, r2, #2
 800b754:	4093      	lsls	r3, r2
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	4313      	orrs	r3, r2
 800b75a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b75c:	4935      	ldr	r1, [pc, #212]	@ (800b834 <HAL_GPIO_Init+0x2e0>)
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	089b      	lsrs	r3, r3, #2
 800b762:	3302      	adds	r3, #2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b76a:	4b38      	ldr	r3, [pc, #224]	@ (800b84c <HAL_GPIO_Init+0x2f8>)
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	43da      	mvns	r2, r3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	4013      	ands	r3, r2
 800b778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	685a      	ldr	r2, [r3, #4]
 800b77e:	2380      	movs	r3, #128	@ 0x80
 800b780:	035b      	lsls	r3, r3, #13
 800b782:	4013      	ands	r3, r2
 800b784:	d003      	beq.n	800b78e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b78e:	4b2f      	ldr	r3, [pc, #188]	@ (800b84c <HAL_GPIO_Init+0x2f8>)
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b794:	4b2d      	ldr	r3, [pc, #180]	@ (800b84c <HAL_GPIO_Init+0x2f8>)
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	43da      	mvns	r2, r3
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	2380      	movs	r3, #128	@ 0x80
 800b7aa:	039b      	lsls	r3, r3, #14
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	d003      	beq.n	800b7b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b7b8:	4b24      	ldr	r3, [pc, #144]	@ (800b84c <HAL_GPIO_Init+0x2f8>)
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800b7be:	4b23      	ldr	r3, [pc, #140]	@ (800b84c <HAL_GPIO_Init+0x2f8>)
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	43da      	mvns	r2, r3
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	685a      	ldr	r2, [r3, #4]
 800b7d2:	2380      	movs	r3, #128	@ 0x80
 800b7d4:	029b      	lsls	r3, r3, #10
 800b7d6:	4013      	ands	r3, r2
 800b7d8:	d003      	beq.n	800b7e2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b7e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b84c <HAL_GPIO_Init+0x2f8>)
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b7e8:	4b18      	ldr	r3, [pc, #96]	@ (800b84c <HAL_GPIO_Init+0x2f8>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	43da      	mvns	r2, r3
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	2380      	movs	r3, #128	@ 0x80
 800b7fe:	025b      	lsls	r3, r3, #9
 800b800:	4013      	ands	r3, r2
 800b802:	d003      	beq.n	800b80c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4313      	orrs	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b80c:	4b0f      	ldr	r3, [pc, #60]	@ (800b84c <HAL_GPIO_Init+0x2f8>)
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	3301      	adds	r3, #1
 800b816:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	40da      	lsrs	r2, r3
 800b820:	1e13      	subs	r3, r2, #0
 800b822:	d000      	beq.n	800b826 <HAL_GPIO_Init+0x2d2>
 800b824:	e6a2      	b.n	800b56c <HAL_GPIO_Init+0x18>
  }
}
 800b826:	46c0      	nop			@ (mov r8, r8)
 800b828:	46c0      	nop			@ (mov r8, r8)
 800b82a:	46bd      	mov	sp, r7
 800b82c:	b006      	add	sp, #24
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	40021000 	.word	0x40021000
 800b834:	40010000 	.word	0x40010000
 800b838:	50000400 	.word	0x50000400
 800b83c:	50000800 	.word	0x50000800
 800b840:	50000c00 	.word	0x50000c00
 800b844:	50001000 	.word	0x50001000
 800b848:	50001c00 	.word	0x50001c00
 800b84c:	40010400 	.word	0x40010400

0800b850 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b85e:	2300      	movs	r3, #0
 800b860:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800b862:	2300      	movs	r3, #0
 800b864:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b866:	e0bc      	b.n	800b9e2 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b868:	2201      	movs	r2, #1
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	409a      	lsls	r2, r3
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	4013      	ands	r3, r2
 800b872:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d100      	bne.n	800b87c <HAL_GPIO_DeInit+0x2c>
 800b87a:	e0af      	b.n	800b9dc <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800b87c:	4a5e      	ldr	r2, [pc, #376]	@ (800b9f8 <HAL_GPIO_DeInit+0x1a8>)
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	089b      	lsrs	r3, r3, #2
 800b882:	3302      	adds	r3, #2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	589b      	ldr	r3, [r3, r2]
 800b888:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2203      	movs	r2, #3
 800b88e:	4013      	ands	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	220f      	movs	r2, #15
 800b894:	409a      	lsls	r2, r3
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4013      	ands	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	23a0      	movs	r3, #160	@ 0xa0
 800b8a0:	05db      	lsls	r3, r3, #23
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d01f      	beq.n	800b8e6 <HAL_GPIO_DeInit+0x96>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a54      	ldr	r2, [pc, #336]	@ (800b9fc <HAL_GPIO_DeInit+0x1ac>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d019      	beq.n	800b8e2 <HAL_GPIO_DeInit+0x92>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a53      	ldr	r2, [pc, #332]	@ (800ba00 <HAL_GPIO_DeInit+0x1b0>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d013      	beq.n	800b8de <HAL_GPIO_DeInit+0x8e>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a52      	ldr	r2, [pc, #328]	@ (800ba04 <HAL_GPIO_DeInit+0x1b4>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d00d      	beq.n	800b8da <HAL_GPIO_DeInit+0x8a>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a51      	ldr	r2, [pc, #324]	@ (800ba08 <HAL_GPIO_DeInit+0x1b8>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d007      	beq.n	800b8d6 <HAL_GPIO_DeInit+0x86>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a50      	ldr	r2, [pc, #320]	@ (800ba0c <HAL_GPIO_DeInit+0x1bc>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d101      	bne.n	800b8d2 <HAL_GPIO_DeInit+0x82>
 800b8ce:	2305      	movs	r3, #5
 800b8d0:	e00a      	b.n	800b8e8 <HAL_GPIO_DeInit+0x98>
 800b8d2:	2306      	movs	r3, #6
 800b8d4:	e008      	b.n	800b8e8 <HAL_GPIO_DeInit+0x98>
 800b8d6:	2304      	movs	r3, #4
 800b8d8:	e006      	b.n	800b8e8 <HAL_GPIO_DeInit+0x98>
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e004      	b.n	800b8e8 <HAL_GPIO_DeInit+0x98>
 800b8de:	2302      	movs	r3, #2
 800b8e0:	e002      	b.n	800b8e8 <HAL_GPIO_DeInit+0x98>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e000      	b.n	800b8e8 <HAL_GPIO_DeInit+0x98>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	2103      	movs	r1, #3
 800b8ec:	400a      	ands	r2, r1
 800b8ee:	0092      	lsls	r2, r2, #2
 800b8f0:	4093      	lsls	r3, r2
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d132      	bne.n	800b95e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b8f8:	4b45      	ldr	r3, [pc, #276]	@ (800ba10 <HAL_GPIO_DeInit+0x1c0>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	43d9      	mvns	r1, r3
 800b900:	4b43      	ldr	r3, [pc, #268]	@ (800ba10 <HAL_GPIO_DeInit+0x1c0>)
 800b902:	400a      	ands	r2, r1
 800b904:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b906:	4b42      	ldr	r3, [pc, #264]	@ (800ba10 <HAL_GPIO_DeInit+0x1c0>)
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	43d9      	mvns	r1, r3
 800b90e:	4b40      	ldr	r3, [pc, #256]	@ (800ba10 <HAL_GPIO_DeInit+0x1c0>)
 800b910:	400a      	ands	r2, r1
 800b912:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b914:	4b3e      	ldr	r3, [pc, #248]	@ (800ba10 <HAL_GPIO_DeInit+0x1c0>)
 800b916:	68da      	ldr	r2, [r3, #12]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	43d9      	mvns	r1, r3
 800b91c:	4b3c      	ldr	r3, [pc, #240]	@ (800ba10 <HAL_GPIO_DeInit+0x1c0>)
 800b91e:	400a      	ands	r2, r1
 800b920:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b922:	4b3b      	ldr	r3, [pc, #236]	@ (800ba10 <HAL_GPIO_DeInit+0x1c0>)
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	43d9      	mvns	r1, r3
 800b92a:	4b39      	ldr	r3, [pc, #228]	@ (800ba10 <HAL_GPIO_DeInit+0x1c0>)
 800b92c:	400a      	ands	r2, r1
 800b92e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2203      	movs	r2, #3
 800b934:	4013      	ands	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	220f      	movs	r2, #15
 800b93a:	409a      	lsls	r2, r3
 800b93c:	0013      	movs	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b940:	4a2d      	ldr	r2, [pc, #180]	@ (800b9f8 <HAL_GPIO_DeInit+0x1a8>)
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	089b      	lsrs	r3, r3, #2
 800b946:	3302      	adds	r3, #2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	589a      	ldr	r2, [r3, r2]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	43d9      	mvns	r1, r3
 800b950:	4829      	ldr	r0, [pc, #164]	@ (800b9f8 <HAL_GPIO_DeInit+0x1a8>)
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	089b      	lsrs	r3, r3, #2
 800b956:	400a      	ands	r2, r1
 800b958:	3302      	adds	r3, #2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	2103      	movs	r1, #3
 800b968:	4099      	lsls	r1, r3
 800b96a:	000b      	movs	r3, r1
 800b96c:	431a      	orrs	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	08da      	lsrs	r2, r3, #3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	3208      	adds	r2, #8
 800b97a:	0092      	lsls	r2, r2, #2
 800b97c:	58d3      	ldr	r3, [r2, r3]
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	2107      	movs	r1, #7
 800b982:	400a      	ands	r2, r1
 800b984:	0092      	lsls	r2, r2, #2
 800b986:	210f      	movs	r1, #15
 800b988:	4091      	lsls	r1, r2
 800b98a:	000a      	movs	r2, r1
 800b98c:	43d1      	mvns	r1, r2
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	08d2      	lsrs	r2, r2, #3
 800b992:	4019      	ands	r1, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3208      	adds	r2, #8
 800b998:	0092      	lsls	r2, r2, #2
 800b99a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	0052      	lsls	r2, r2, #1
 800b9a4:	2103      	movs	r1, #3
 800b9a6:	4091      	lsls	r1, r2
 800b9a8:	000a      	movs	r2, r1
 800b9aa:	43d2      	mvns	r2, r2
 800b9ac:	401a      	ands	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	2101      	movs	r1, #1
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	4091      	lsls	r1, r2
 800b9bc:	000a      	movs	r2, r1
 800b9be:	43d2      	mvns	r2, r2
 800b9c0:	401a      	ands	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	0052      	lsls	r2, r2, #1
 800b9ce:	2103      	movs	r1, #3
 800b9d0:	4091      	lsls	r1, r2
 800b9d2:	000a      	movs	r2, r1
 800b9d4:	43d2      	mvns	r2, r2
 800b9d6:	401a      	ands	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	609a      	str	r2, [r3, #8]
    }
    position++;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	40da      	lsrs	r2, r3
 800b9e8:	1e13      	subs	r3, r2, #0
 800b9ea:	d000      	beq.n	800b9ee <HAL_GPIO_DeInit+0x19e>
 800b9ec:	e73c      	b.n	800b868 <HAL_GPIO_DeInit+0x18>
  }
}
 800b9ee:	46c0      	nop			@ (mov r8, r8)
 800b9f0:	46c0      	nop			@ (mov r8, r8)
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	b006      	add	sp, #24
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	40010000 	.word	0x40010000
 800b9fc:	50000400 	.word	0x50000400
 800ba00:	50000800 	.word	0x50000800
 800ba04:	50000c00 	.word	0x50000c00
 800ba08:	50001000 	.word	0x50001000
 800ba0c:	50001c00 	.word	0x50001c00
 800ba10:	40010400 	.word	0x40010400

0800ba14 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	000a      	movs	r2, r1
 800ba1e:	1cbb      	adds	r3, r7, #2
 800ba20:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	1cba      	adds	r2, r7, #2
 800ba28:	8812      	ldrh	r2, [r2, #0]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	d004      	beq.n	800ba38 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800ba2e:	230f      	movs	r3, #15
 800ba30:	18fb      	adds	r3, r7, r3
 800ba32:	2201      	movs	r2, #1
 800ba34:	701a      	strb	r2, [r3, #0]
 800ba36:	e003      	b.n	800ba40 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ba38:	230f      	movs	r3, #15
 800ba3a:	18fb      	adds	r3, r7, r3
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800ba40:	230f      	movs	r3, #15
 800ba42:	18fb      	adds	r3, r7, r3
 800ba44:	781b      	ldrb	r3, [r3, #0]
}
 800ba46:	0018      	movs	r0, r3
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	b004      	add	sp, #16
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	0008      	movs	r0, r1
 800ba58:	0011      	movs	r1, r2
 800ba5a:	1cbb      	adds	r3, r7, #2
 800ba5c:	1c02      	adds	r2, r0, #0
 800ba5e:	801a      	strh	r2, [r3, #0]
 800ba60:	1c7b      	adds	r3, r7, #1
 800ba62:	1c0a      	adds	r2, r1, #0
 800ba64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ba66:	1c7b      	adds	r3, r7, #1
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d004      	beq.n	800ba78 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ba6e:	1cbb      	adds	r3, r7, #2
 800ba70:	881a      	ldrh	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800ba76:	e003      	b.n	800ba80 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800ba78:	1cbb      	adds	r3, r7, #2
 800ba7a:	881a      	ldrh	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ba80:	46c0      	nop			@ (mov r8, r8)
 800ba82:	46bd      	mov	sp, r7
 800ba84:	b002      	add	sp, #8
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e082      	b.n	800bba0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2241      	movs	r2, #65	@ 0x41
 800ba9e:	5c9b      	ldrb	r3, [r3, r2]
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d107      	bne.n	800bab6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2240      	movs	r2, #64	@ 0x40
 800baaa:	2100      	movs	r1, #0
 800baac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	0018      	movs	r0, r3
 800bab2:	f7fa fae3 	bl	800607c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2241      	movs	r2, #65	@ 0x41
 800baba:	2124      	movs	r1, #36	@ 0x24
 800babc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2101      	movs	r1, #1
 800baca:	438a      	bics	r2, r1
 800bacc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4934      	ldr	r1, [pc, #208]	@ (800bba8 <HAL_I2C_Init+0x120>)
 800bad8:	400a      	ands	r2, r1
 800bada:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	689a      	ldr	r2, [r3, #8]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4931      	ldr	r1, [pc, #196]	@ (800bbac <HAL_I2C_Init+0x124>)
 800bae8:	400a      	ands	r2, r1
 800baea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d108      	bne.n	800bb06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2180      	movs	r1, #128	@ 0x80
 800bafe:	0209      	lsls	r1, r1, #8
 800bb00:	430a      	orrs	r2, r1
 800bb02:	609a      	str	r2, [r3, #8]
 800bb04:	e007      	b.n	800bb16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	689a      	ldr	r2, [r3, #8]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2184      	movs	r1, #132	@ 0x84
 800bb10:	0209      	lsls	r1, r1, #8
 800bb12:	430a      	orrs	r2, r1
 800bb14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d104      	bne.n	800bb28 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2280      	movs	r2, #128	@ 0x80
 800bb24:	0112      	lsls	r2, r2, #4
 800bb26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	491f      	ldr	r1, [pc, #124]	@ (800bbb0 <HAL_I2C_Init+0x128>)
 800bb34:	430a      	orrs	r2, r1
 800bb36:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68da      	ldr	r2, [r3, #12]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	491a      	ldr	r1, [pc, #104]	@ (800bbac <HAL_I2C_Init+0x124>)
 800bb44:	400a      	ands	r2, r1
 800bb46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	691a      	ldr	r2, [r3, #16]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	431a      	orrs	r2, r3
 800bb52:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	69d9      	ldr	r1, [r3, #28]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1a      	ldr	r2, [r3, #32]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	430a      	orrs	r2, r1
 800bb70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2241      	movs	r2, #65	@ 0x41
 800bb8c:	2120      	movs	r1, #32
 800bb8e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2242      	movs	r2, #66	@ 0x42
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	0018      	movs	r0, r3
 800bba2:	46bd      	mov	sp, r7
 800bba4:	b002      	add	sp, #8
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	f0ffffff 	.word	0xf0ffffff
 800bbac:	ffff7fff 	.word	0xffff7fff
 800bbb0:	02008000 	.word	0x02008000

0800bbb4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800bbb4:	b5b0      	push	{r4, r5, r7, lr}
 800bbb6:	b088      	sub	sp, #32
 800bbb8:	af02      	add	r7, sp, #8
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	0008      	movs	r0, r1
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	0019      	movs	r1, r3
 800bbc2:	230a      	movs	r3, #10
 800bbc4:	18fb      	adds	r3, r7, r3
 800bbc6:	1c02      	adds	r2, r0, #0
 800bbc8:	801a      	strh	r2, [r3, #0]
 800bbca:	2308      	movs	r3, #8
 800bbcc:	18fb      	adds	r3, r7, r3
 800bbce:	1c0a      	adds	r2, r1, #0
 800bbd0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2241      	movs	r2, #65	@ 0x41
 800bbd6:	5c9b      	ldrb	r3, [r3, r2]
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b20      	cmp	r3, #32
 800bbdc:	d000      	beq.n	800bbe0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800bbde:	e0dd      	b.n	800bd9c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	699a      	ldr	r2, [r3, #24]
 800bbe6:	2380      	movs	r3, #128	@ 0x80
 800bbe8:	021b      	lsls	r3, r3, #8
 800bbea:	401a      	ands	r2, r3
 800bbec:	2380      	movs	r3, #128	@ 0x80
 800bbee:	021b      	lsls	r3, r3, #8
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d101      	bne.n	800bbf8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	e0d2      	b.n	800bd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2240      	movs	r2, #64	@ 0x40
 800bbfc:	5c9b      	ldrb	r3, [r3, r2]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d101      	bne.n	800bc06 <HAL_I2C_Master_Transmit_DMA+0x52>
 800bc02:	2302      	movs	r3, #2
 800bc04:	e0cb      	b.n	800bd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2240      	movs	r2, #64	@ 0x40
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2241      	movs	r2, #65	@ 0x41
 800bc12:	2121      	movs	r1, #33	@ 0x21
 800bc14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2242      	movs	r2, #66	@ 0x42
 800bc1a:	2110      	movs	r1, #16
 800bc1c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2208      	movs	r2, #8
 800bc2e:	18ba      	adds	r2, r7, r2
 800bc30:	8812      	ldrh	r2, [r2, #0]
 800bc32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	4a5c      	ldr	r2, [pc, #368]	@ (800bda8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800bc38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4a5b      	ldr	r2, [pc, #364]	@ (800bdac <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800bc3e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	2bff      	cmp	r3, #255	@ 0xff
 800bc48:	d906      	bls.n	800bc58 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	22ff      	movs	r2, #255	@ 0xff
 800bc4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800bc50:	2380      	movs	r3, #128	@ 0x80
 800bc52:	045b      	lsls	r3, r3, #17
 800bc54:	617b      	str	r3, [r7, #20]
 800bc56:	e007      	b.n	800bc68 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bc62:	2380      	movs	r3, #128	@ 0x80
 800bc64:	049b      	lsls	r3, r3, #18
 800bc66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d100      	bne.n	800bc72 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800bc70:	e078      	b.n	800bd64 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d023      	beq.n	800bcc2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc7e:	4a4c      	ldr	r2, [pc, #304]	@ (800bdb0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800bc80:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc86:	4a4b      	ldr	r2, [pc, #300]	@ (800bdb4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800bc88:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc8e:	2200      	movs	r2, #0
 800bc90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc96:	2200      	movs	r2, #0
 800bc98:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3328      	adds	r3, #40	@ 0x28
 800bca6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800bcac:	2513      	movs	r5, #19
 800bcae:	197c      	adds	r4, r7, r5
 800bcb0:	f7ff f8ac 	bl	800ae0c <HAL_DMA_Start_IT>
 800bcb4:	0003      	movs	r3, r0
 800bcb6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bcb8:	197b      	adds	r3, r7, r5
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d13d      	bne.n	800bd3c <HAL_I2C_Master_Transmit_DMA+0x188>
 800bcc0:	e013      	b.n	800bcea <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2241      	movs	r2, #65	@ 0x41
 800bcc6:	2120      	movs	r1, #32
 800bcc8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2242      	movs	r2, #66	@ 0x42
 800bcce:	2100      	movs	r1, #0
 800bcd0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcd6:	2280      	movs	r2, #128	@ 0x80
 800bcd8:	431a      	orrs	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2240      	movs	r2, #64	@ 0x40
 800bce2:	2100      	movs	r1, #0
 800bce4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e059      	b.n	800bd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	697c      	ldr	r4, [r7, #20]
 800bcf2:	230a      	movs	r3, #10
 800bcf4:	18fb      	adds	r3, r7, r3
 800bcf6:	8819      	ldrh	r1, [r3, #0]
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	4b2f      	ldr	r3, [pc, #188]	@ (800bdb8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	0023      	movs	r3, r4
 800bd00:	f001 fd0e 	bl	800d720 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2240      	movs	r2, #64	@ 0x40
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2110      	movs	r1, #16
 800bd22:	0018      	movs	r0, r3
 800bd24:	f001 fd36 	bl	800d794 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2180      	movs	r1, #128	@ 0x80
 800bd34:	01c9      	lsls	r1, r1, #7
 800bd36:	430a      	orrs	r2, r1
 800bd38:	601a      	str	r2, [r3, #0]
 800bd3a:	e02d      	b.n	800bd98 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2241      	movs	r2, #65	@ 0x41
 800bd40:	2120      	movs	r1, #32
 800bd42:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2242      	movs	r2, #66	@ 0x42
 800bd48:	2100      	movs	r1, #0
 800bd4a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd50:	2210      	movs	r2, #16
 800bd52:	431a      	orrs	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2240      	movs	r2, #64	@ 0x40
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e01c      	b.n	800bd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	4a15      	ldr	r2, [pc, #84]	@ (800bdbc <HAL_I2C_Master_Transmit_DMA+0x208>)
 800bd68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	2380      	movs	r3, #128	@ 0x80
 800bd72:	049c      	lsls	r4, r3, #18
 800bd74:	230a      	movs	r3, #10
 800bd76:	18fb      	adds	r3, r7, r3
 800bd78:	8819      	ldrh	r1, [r3, #0]
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bdb8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	0023      	movs	r3, r4
 800bd82:	f001 fccd 	bl	800d720 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2240      	movs	r2, #64	@ 0x40
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2101      	movs	r1, #1
 800bd92:	0018      	movs	r0, r3
 800bd94:	f001 fcfe 	bl	800d794 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	e000      	b.n	800bd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bd9c:	2302      	movs	r3, #2
  }
}
 800bd9e:	0018      	movs	r0, r3
 800bda0:	46bd      	mov	sp, r7
 800bda2:	b006      	add	sp, #24
 800bda4:	bdb0      	pop	{r4, r5, r7, pc}
 800bda6:	46c0      	nop			@ (mov r8, r8)
 800bda8:	ffff0000 	.word	0xffff0000
 800bdac:	0800c5b9 	.word	0x0800c5b9
 800bdb0:	0800d571 	.word	0x0800d571
 800bdb4:	0800d6b1 	.word	0x0800d6b1
 800bdb8:	80002000 	.word	0x80002000
 800bdbc:	0800c165 	.word	0x0800c165

0800bdc0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800bdc0:	b5b0      	push	{r4, r5, r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af02      	add	r7, sp, #8
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	0008      	movs	r0, r1
 800bdca:	607a      	str	r2, [r7, #4]
 800bdcc:	0019      	movs	r1, r3
 800bdce:	230a      	movs	r3, #10
 800bdd0:	18fb      	adds	r3, r7, r3
 800bdd2:	1c02      	adds	r2, r0, #0
 800bdd4:	801a      	strh	r2, [r3, #0]
 800bdd6:	2308      	movs	r3, #8
 800bdd8:	18fb      	adds	r3, r7, r3
 800bdda:	1c0a      	adds	r2, r1, #0
 800bddc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2241      	movs	r2, #65	@ 0x41
 800bde2:	5c9b      	ldrb	r3, [r3, r2]
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b20      	cmp	r3, #32
 800bde8:	d000      	beq.n	800bdec <HAL_I2C_Master_Receive_DMA+0x2c>
 800bdea:	e0dd      	b.n	800bfa8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	699a      	ldr	r2, [r3, #24]
 800bdf2:	2380      	movs	r3, #128	@ 0x80
 800bdf4:	021b      	lsls	r3, r3, #8
 800bdf6:	401a      	ands	r2, r3
 800bdf8:	2380      	movs	r3, #128	@ 0x80
 800bdfa:	021b      	lsls	r3, r3, #8
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d101      	bne.n	800be04 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800be00:	2302      	movs	r3, #2
 800be02:	e0d2      	b.n	800bfaa <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2240      	movs	r2, #64	@ 0x40
 800be08:	5c9b      	ldrb	r3, [r3, r2]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d101      	bne.n	800be12 <HAL_I2C_Master_Receive_DMA+0x52>
 800be0e:	2302      	movs	r3, #2
 800be10:	e0cb      	b.n	800bfaa <HAL_I2C_Master_Receive_DMA+0x1ea>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2240      	movs	r2, #64	@ 0x40
 800be16:	2101      	movs	r1, #1
 800be18:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2241      	movs	r2, #65	@ 0x41
 800be1e:	2122      	movs	r1, #34	@ 0x22
 800be20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2242      	movs	r2, #66	@ 0x42
 800be26:	2110      	movs	r1, #16
 800be28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2208      	movs	r2, #8
 800be3a:	18ba      	adds	r2, r7, r2
 800be3c:	8812      	ldrh	r2, [r2, #0]
 800be3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4a5c      	ldr	r2, [pc, #368]	@ (800bfb4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800be44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	4a5b      	ldr	r2, [pc, #364]	@ (800bfb8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800be4a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be50:	b29b      	uxth	r3, r3
 800be52:	2bff      	cmp	r3, #255	@ 0xff
 800be54:	d906      	bls.n	800be64 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	22ff      	movs	r2, #255	@ 0xff
 800be5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800be5c:	2380      	movs	r3, #128	@ 0x80
 800be5e:	045b      	lsls	r3, r3, #17
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	e007      	b.n	800be74 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be68:	b29a      	uxth	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800be6e:	2380      	movs	r3, #128	@ 0x80
 800be70:	049b      	lsls	r3, r3, #18
 800be72:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d100      	bne.n	800be7e <HAL_I2C_Master_Receive_DMA+0xbe>
 800be7c:	e078      	b.n	800bf70 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be82:	2b00      	cmp	r3, #0
 800be84:	d023      	beq.n	800bece <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be8a:	4a4c      	ldr	r2, [pc, #304]	@ (800bfbc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800be8c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be92:	4a4b      	ldr	r2, [pc, #300]	@ (800bfc0 <HAL_I2C_Master_Receive_DMA+0x200>)
 800be94:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be9a:	2200      	movs	r2, #0
 800be9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bea2:	2200      	movs	r2, #0
 800bea4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	3324      	adds	r3, #36	@ 0x24
 800beb0:	0019      	movs	r1, r3
 800beb2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800beb8:	2513      	movs	r5, #19
 800beba:	197c      	adds	r4, r7, r5
 800bebc:	f7fe ffa6 	bl	800ae0c <HAL_DMA_Start_IT>
 800bec0:	0003      	movs	r3, r0
 800bec2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bec4:	197b      	adds	r3, r7, r5
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d13d      	bne.n	800bf48 <HAL_I2C_Master_Receive_DMA+0x188>
 800becc:	e013      	b.n	800bef6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2241      	movs	r2, #65	@ 0x41
 800bed2:	2120      	movs	r1, #32
 800bed4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2242      	movs	r2, #66	@ 0x42
 800beda:	2100      	movs	r1, #0
 800bedc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bee2:	2280      	movs	r2, #128	@ 0x80
 800bee4:	431a      	orrs	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2240      	movs	r2, #64	@ 0x40
 800beee:	2100      	movs	r1, #0
 800bef0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e059      	b.n	800bfaa <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800befa:	b2da      	uxtb	r2, r3
 800befc:	697c      	ldr	r4, [r7, #20]
 800befe:	230a      	movs	r3, #10
 800bf00:	18fb      	adds	r3, r7, r3
 800bf02:	8819      	ldrh	r1, [r3, #0]
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	4b2f      	ldr	r3, [pc, #188]	@ (800bfc4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	0023      	movs	r3, r4
 800bf0c:	f001 fc08 	bl	800d720 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2240      	movs	r2, #64	@ 0x40
 800bf26:	2100      	movs	r1, #0
 800bf28:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2110      	movs	r1, #16
 800bf2e:	0018      	movs	r0, r3
 800bf30:	f001 fc30 	bl	800d794 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2180      	movs	r1, #128	@ 0x80
 800bf40:	0209      	lsls	r1, r1, #8
 800bf42:	430a      	orrs	r2, r1
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	e02d      	b.n	800bfa4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2241      	movs	r2, #65	@ 0x41
 800bf4c:	2120      	movs	r1, #32
 800bf4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2242      	movs	r2, #66	@ 0x42
 800bf54:	2100      	movs	r1, #0
 800bf56:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf5c:	2210      	movs	r2, #16
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2240      	movs	r2, #64	@ 0x40
 800bf68:	2100      	movs	r1, #0
 800bf6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e01c      	b.n	800bfaa <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	4a15      	ldr	r2, [pc, #84]	@ (800bfc8 <HAL_I2C_Master_Receive_DMA+0x208>)
 800bf74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	2380      	movs	r3, #128	@ 0x80
 800bf7e:	049c      	lsls	r4, r3, #18
 800bf80:	230a      	movs	r3, #10
 800bf82:	18fb      	adds	r3, r7, r3
 800bf84:	8819      	ldrh	r1, [r3, #0]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	4b0e      	ldr	r3, [pc, #56]	@ (800bfc4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	0023      	movs	r3, r4
 800bf8e:	f001 fbc7 	bl	800d720 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2240      	movs	r2, #64	@ 0x40
 800bf96:	2100      	movs	r1, #0
 800bf98:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	0018      	movs	r0, r3
 800bfa0:	f001 fbf8 	bl	800d794 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e000      	b.n	800bfaa <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bfa8:	2302      	movs	r3, #2
  }
}
 800bfaa:	0018      	movs	r0, r3
 800bfac:	46bd      	mov	sp, r7
 800bfae:	b006      	add	sp, #24
 800bfb0:	bdb0      	pop	{r4, r5, r7, pc}
 800bfb2:	46c0      	nop			@ (mov r8, r8)
 800bfb4:	ffff0000 	.word	0xffff0000
 800bfb8:	0800c5b9 	.word	0x0800c5b9
 800bfbc:	0800d611 	.word	0x0800d611
 800bfc0:	0800d6b1 	.word	0x0800d6b1
 800bfc4:	80002400 	.word	0x80002400
 800bfc8:	0800c165 	.word	0x0800c165

0800bfcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	68f9      	ldr	r1, [r7, #12]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	4798      	blx	r3
  }
}
 800bff8:	46c0      	nop			@ (mov r8, r8)
 800bffa:	46bd      	mov	sp, r7
 800bffc:	b004      	add	sp, #16
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c018:	697a      	ldr	r2, [r7, #20]
 800c01a:	2380      	movs	r3, #128	@ 0x80
 800c01c:	005b      	lsls	r3, r3, #1
 800c01e:	4013      	ands	r3, r2
 800c020:	d00e      	beq.n	800c040 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2280      	movs	r2, #128	@ 0x80
 800c026:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c028:	d00a      	beq.n	800c040 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c02e:	2201      	movs	r2, #1
 800c030:	431a      	orrs	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2280      	movs	r2, #128	@ 0x80
 800c03c:	0052      	lsls	r2, r2, #1
 800c03e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	2380      	movs	r3, #128	@ 0x80
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	4013      	ands	r3, r2
 800c048:	d00e      	beq.n	800c068 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2280      	movs	r2, #128	@ 0x80
 800c04e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c050:	d00a      	beq.n	800c068 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c056:	2208      	movs	r2, #8
 800c058:	431a      	orrs	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2280      	movs	r2, #128	@ 0x80
 800c064:	00d2      	lsls	r2, r2, #3
 800c066:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	2380      	movs	r3, #128	@ 0x80
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	4013      	ands	r3, r2
 800c070:	d00e      	beq.n	800c090 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2280      	movs	r2, #128	@ 0x80
 800c076:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c078:	d00a      	beq.n	800c090 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c07e:	2202      	movs	r2, #2
 800c080:	431a      	orrs	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2280      	movs	r2, #128	@ 0x80
 800c08c:	0092      	lsls	r2, r2, #2
 800c08e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c094:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	220b      	movs	r2, #11
 800c09a:	4013      	ands	r3, r2
 800c09c:	d005      	beq.n	800c0aa <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	0011      	movs	r1, r2
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	f001 f915 	bl	800d2d4 <I2C_ITError>
  }
}
 800c0aa:	46c0      	nop			@ (mov r8, r8)
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	b006      	add	sp, #24
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c0ba:	46c0      	nop			@ (mov r8, r8)
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	b002      	add	sp, #8
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b082      	sub	sp, #8
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c0ca:	46c0      	nop			@ (mov r8, r8)
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	b002      	add	sp, #8
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c0da:	46c0      	nop			@ (mov r8, r8)
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	b002      	add	sp, #8
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c0ea:	46c0      	nop			@ (mov r8, r8)
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	b002      	add	sp, #8
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	0008      	movs	r0, r1
 800c0fc:	0011      	movs	r1, r2
 800c0fe:	1cfb      	adds	r3, r7, #3
 800c100:	1c02      	adds	r2, r0, #0
 800c102:	701a      	strb	r2, [r3, #0]
 800c104:	003b      	movs	r3, r7
 800c106:	1c0a      	adds	r2, r1, #0
 800c108:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c10a:	46c0      	nop			@ (mov r8, r8)
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b002      	add	sp, #8
 800c110:	bd80      	pop	{r7, pc}

0800c112 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b082      	sub	sp, #8
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c11a:	46c0      	nop			@ (mov r8, r8)
 800c11c:	46bd      	mov	sp, r7
 800c11e:	b002      	add	sp, #8
 800c120:	bd80      	pop	{r7, pc}

0800c122 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b082      	sub	sp, #8
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c12a:	46c0      	nop			@ (mov r8, r8)
 800c12c:	46bd      	mov	sp, r7
 800c12e:	b002      	add	sp, #8
 800c130:	bd80      	pop	{r7, pc}

0800c132 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b082      	sub	sp, #8
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c13a:	46c0      	nop			@ (mov r8, r8)
 800c13c:	46bd      	mov	sp, r7
 800c13e:	b002      	add	sp, #8
 800c140:	bd80      	pop	{r7, pc}

0800c142 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b082      	sub	sp, #8
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c14a:	46c0      	nop			@ (mov r8, r8)
 800c14c:	46bd      	mov	sp, r7
 800c14e:	b002      	add	sp, #8
 800c150:	bd80      	pop	{r7, pc}

0800c152 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b082      	sub	sp, #8
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c15a:	46c0      	nop			@ (mov r8, r8)
 800c15c:	46bd      	mov	sp, r7
 800c15e:	b002      	add	sp, #8
 800c160:	bd80      	pop	{r7, pc}
	...

0800c164 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c164:	b590      	push	{r4, r7, lr}
 800c166:	b089      	sub	sp, #36	@ 0x24
 800c168:	af02      	add	r7, sp, #8
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2240      	movs	r2, #64	@ 0x40
 800c178:	5c9b      	ldrb	r3, [r3, r2]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d101      	bne.n	800c182 <I2C_Master_ISR_IT+0x1e>
 800c17e:	2302      	movs	r3, #2
 800c180:	e113      	b.n	800c3aa <I2C_Master_ISR_IT+0x246>
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2240      	movs	r2, #64	@ 0x40
 800c186:	2101      	movs	r1, #1
 800c188:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2210      	movs	r2, #16
 800c18e:	4013      	ands	r3, r2
 800c190:	d012      	beq.n	800c1b8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2210      	movs	r2, #16
 800c196:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c198:	d00e      	beq.n	800c1b8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2210      	movs	r2, #16
 800c1a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1a6:	2204      	movs	r2, #4
 800c1a8:	431a      	orrs	r2, r3
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	f001 f9ba 	bl	800d52a <I2C_Flush_TXDR>
 800c1b6:	e0e5      	b.n	800c384 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	2204      	movs	r2, #4
 800c1bc:	4013      	ands	r3, r2
 800c1be:	d021      	beq.n	800c204 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2204      	movs	r2, #4
 800c1c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c1c6:	d01d      	beq.n	800c204 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2204      	movs	r2, #4
 800c1cc:	4393      	bics	r3, r2
 800c1ce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1da:	b2d2      	uxtb	r2, r2
 800c1dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c202:	e0bf      	b.n	800c384 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	2202      	movs	r2, #2
 800c208:	4013      	ands	r3, r2
 800c20a:	d01c      	beq.n	800c246 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2202      	movs	r2, #2
 800c210:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c212:	d018      	beq.n	800c246 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c218:	781a      	ldrb	r2, [r3, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c224:	1c5a      	adds	r2, r3, #1
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c22e:	3b01      	subs	r3, #1
 800c230:	b29a      	uxth	r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	3b01      	subs	r3, #1
 800c23e:	b29a      	uxth	r2, r3
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c244:	e09e      	b.n	800c384 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	2280      	movs	r2, #128	@ 0x80
 800c24a:	4013      	ands	r3, r2
 800c24c:	d100      	bne.n	800c250 <I2C_Master_ISR_IT+0xec>
 800c24e:	e069      	b.n	800c324 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2240      	movs	r2, #64	@ 0x40
 800c254:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c256:	d065      	beq.n	800c324 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d04a      	beq.n	800c2f8 <I2C_Master_ISR_IT+0x194>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c266:	2b00      	cmp	r3, #0
 800c268:	d146      	bne.n	800c2f8 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	b29a      	uxth	r2, r3
 800c272:	2112      	movs	r1, #18
 800c274:	187b      	adds	r3, r7, r1
 800c276:	0592      	lsls	r2, r2, #22
 800c278:	0d92      	lsrs	r2, r2, #22
 800c27a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c280:	b29b      	uxth	r3, r3
 800c282:	2bff      	cmp	r3, #255	@ 0xff
 800c284:	d910      	bls.n	800c2a8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	22ff      	movs	r2, #255	@ 0xff
 800c28a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c290:	b2da      	uxtb	r2, r3
 800c292:	2380      	movs	r3, #128	@ 0x80
 800c294:	045c      	lsls	r4, r3, #17
 800c296:	187b      	adds	r3, r7, r1
 800c298:	8819      	ldrh	r1, [r3, #0]
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	2300      	movs	r3, #0
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	0023      	movs	r3, r4
 800c2a2:	f001 fa3d 	bl	800d720 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2a6:	e03c      	b.n	800c322 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b6:	4a3f      	ldr	r2, [pc, #252]	@ (800c3b4 <I2C_Master_ISR_IT+0x250>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d00e      	beq.n	800c2da <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2c0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c2c6:	2312      	movs	r3, #18
 800c2c8:	18fb      	adds	r3, r7, r3
 800c2ca:	8819      	ldrh	r1, [r3, #0]
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	0023      	movs	r3, r4
 800c2d4:	f001 fa24 	bl	800d720 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2d8:	e023      	b.n	800c322 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	2380      	movs	r3, #128	@ 0x80
 800c2e2:	049c      	lsls	r4, r3, #18
 800c2e4:	2312      	movs	r3, #18
 800c2e6:	18fb      	adds	r3, r7, r3
 800c2e8:	8819      	ldrh	r1, [r3, #0]
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	0023      	movs	r3, r4
 800c2f2:	f001 fa15 	bl	800d720 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2f6:	e014      	b.n	800c322 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	2380      	movs	r3, #128	@ 0x80
 800c300:	049b      	lsls	r3, r3, #18
 800c302:	401a      	ands	r2, r3
 800c304:	2380      	movs	r3, #128	@ 0x80
 800c306:	049b      	lsls	r3, r3, #18
 800c308:	429a      	cmp	r2, r3
 800c30a:	d004      	beq.n	800c316 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	0018      	movs	r0, r3
 800c310:	f000 fcf4 	bl	800ccfc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c314:	e036      	b.n	800c384 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2140      	movs	r1, #64	@ 0x40
 800c31a:	0018      	movs	r0, r3
 800c31c:	f000 ffda 	bl	800d2d4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c320:	e030      	b.n	800c384 <I2C_Master_ISR_IT+0x220>
 800c322:	e02f      	b.n	800c384 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	2240      	movs	r2, #64	@ 0x40
 800c328:	4013      	ands	r3, r2
 800c32a:	d02b      	beq.n	800c384 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2240      	movs	r2, #64	@ 0x40
 800c330:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c332:	d027      	beq.n	800c384 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c338:	b29b      	uxth	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d11d      	bne.n	800c37a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	2380      	movs	r3, #128	@ 0x80
 800c346:	049b      	lsls	r3, r3, #18
 800c348:	401a      	ands	r2, r3
 800c34a:	2380      	movs	r3, #128	@ 0x80
 800c34c:	049b      	lsls	r3, r3, #18
 800c34e:	429a      	cmp	r2, r3
 800c350:	d018      	beq.n	800c384 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c356:	4a17      	ldr	r2, [pc, #92]	@ (800c3b4 <I2C_Master_ISR_IT+0x250>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d109      	bne.n	800c370 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2180      	movs	r1, #128	@ 0x80
 800c368:	01c9      	lsls	r1, r1, #7
 800c36a:	430a      	orrs	r2, r1
 800c36c:	605a      	str	r2, [r3, #4]
 800c36e:	e009      	b.n	800c384 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	0018      	movs	r0, r3
 800c374:	f000 fcc2 	bl	800ccfc <I2C_ITMasterSeqCplt>
 800c378:	e004      	b.n	800c384 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2140      	movs	r1, #64	@ 0x40
 800c37e:	0018      	movs	r0, r3
 800c380:	f000 ffa8 	bl	800d2d4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	2220      	movs	r2, #32
 800c388:	4013      	ands	r3, r2
 800c38a:	d009      	beq.n	800c3a0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2220      	movs	r2, #32
 800c390:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c392:	d005      	beq.n	800c3a0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	0011      	movs	r1, r2
 800c39a:	0018      	movs	r0, r3
 800c39c:	f000 fd54 	bl	800ce48 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2240      	movs	r2, #64	@ 0x40
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	b007      	add	sp, #28
 800c3b0:	bd90      	pop	{r4, r7, pc}
 800c3b2:	46c0      	nop			@ (mov r8, r8)
 800c3b4:	ffff0000 	.word	0xffff0000

0800c3b8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2240      	movs	r2, #64	@ 0x40
 800c3d2:	5c9b      	ldrb	r3, [r3, r2]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d101      	bne.n	800c3dc <I2C_Slave_ISR_IT+0x24>
 800c3d8:	2302      	movs	r3, #2
 800c3da:	e0e6      	b.n	800c5aa <I2C_Slave_ISR_IT+0x1f2>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2240      	movs	r2, #64	@ 0x40
 800c3e0:	2101      	movs	r1, #1
 800c3e2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	2220      	movs	r2, #32
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	d009      	beq.n	800c400 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2220      	movs	r2, #32
 800c3f0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3f2:	d005      	beq.n	800c400 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	0011      	movs	r1, r2
 800c3fa:	0018      	movs	r0, r3
 800c3fc:	f000 fdf2 	bl	800cfe4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	2210      	movs	r2, #16
 800c404:	4013      	ands	r3, r2
 800c406:	d052      	beq.n	800c4ae <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2210      	movs	r2, #16
 800c40c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c40e:	d04e      	beq.n	800c4ae <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c414:	b29b      	uxth	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d12d      	bne.n	800c476 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2241      	movs	r2, #65	@ 0x41
 800c41e:	5c9b      	ldrb	r3, [r3, r2]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2b28      	cmp	r3, #40	@ 0x28
 800c424:	d10b      	bne.n	800c43e <I2C_Slave_ISR_IT+0x86>
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	2380      	movs	r3, #128	@ 0x80
 800c42a:	049b      	lsls	r3, r3, #18
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d106      	bne.n	800c43e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	0011      	movs	r1, r2
 800c436:	0018      	movs	r0, r3
 800c438:	f000 fef4 	bl	800d224 <I2C_ITListenCplt>
 800c43c:	e036      	b.n	800c4ac <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2241      	movs	r2, #65	@ 0x41
 800c442:	5c9b      	ldrb	r3, [r3, r2]
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b29      	cmp	r3, #41	@ 0x29
 800c448:	d110      	bne.n	800c46c <I2C_Slave_ISR_IT+0xb4>
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	4a59      	ldr	r2, [pc, #356]	@ (800c5b4 <I2C_Slave_ISR_IT+0x1fc>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d00c      	beq.n	800c46c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2210      	movs	r2, #16
 800c458:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	0018      	movs	r0, r3
 800c45e:	f001 f864 	bl	800d52a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	0018      	movs	r0, r3
 800c466:	f000 fc8b 	bl	800cd80 <I2C_ITSlaveSeqCplt>
 800c46a:	e01f      	b.n	800c4ac <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2210      	movs	r2, #16
 800c472:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c474:	e091      	b.n	800c59a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2210      	movs	r2, #16
 800c47c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c482:	2204      	movs	r2, #4
 800c484:	431a      	orrs	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d005      	beq.n	800c49c <I2C_Slave_ISR_IT+0xe4>
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	2380      	movs	r3, #128	@ 0x80
 800c494:	045b      	lsls	r3, r3, #17
 800c496:	429a      	cmp	r2, r3
 800c498:	d000      	beq.n	800c49c <I2C_Slave_ISR_IT+0xe4>
 800c49a:	e07e      	b.n	800c59a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	0011      	movs	r1, r2
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	f000 ff15 	bl	800d2d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c4aa:	e076      	b.n	800c59a <I2C_Slave_ISR_IT+0x1e2>
 800c4ac:	e075      	b.n	800c59a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	2204      	movs	r2, #4
 800c4b2:	4013      	ands	r3, r2
 800c4b4:	d02f      	beq.n	800c516 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2204      	movs	r2, #4
 800c4ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c4bc:	d02b      	beq.n	800c516 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d018      	beq.n	800c4fa <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d2:	b2d2      	uxtb	r2, r2
 800c4d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4da:	1c5a      	adds	r2, r3, #1
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	2b00      	cmp	r3, #0
 800c502:	d14c      	bne.n	800c59e <I2C_Slave_ISR_IT+0x1e6>
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	4a2b      	ldr	r2, [pc, #172]	@ (800c5b4 <I2C_Slave_ISR_IT+0x1fc>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d048      	beq.n	800c59e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	0018      	movs	r0, r3
 800c510:	f000 fc36 	bl	800cd80 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c514:	e043      	b.n	800c59e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	2208      	movs	r2, #8
 800c51a:	4013      	ands	r3, r2
 800c51c:	d00a      	beq.n	800c534 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2208      	movs	r2, #8
 800c522:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c524:	d006      	beq.n	800c534 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	0011      	movs	r1, r2
 800c52c:	0018      	movs	r0, r3
 800c52e:	f000 fb41 	bl	800cbb4 <I2C_ITAddrCplt>
 800c532:	e035      	b.n	800c5a0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	2202      	movs	r2, #2
 800c538:	4013      	ands	r3, r2
 800c53a:	d031      	beq.n	800c5a0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2202      	movs	r2, #2
 800c540:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c542:	d02d      	beq.n	800c5a0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c548:	b29b      	uxth	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d018      	beq.n	800c580 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c552:	781a      	ldrb	r2, [r3, #0]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c568:	b29b      	uxth	r3, r3
 800c56a:	3b01      	subs	r3, #1
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c576:	3b01      	subs	r3, #1
 800c578:	b29a      	uxth	r2, r3
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c57e:	e00f      	b.n	800c5a0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	2380      	movs	r3, #128	@ 0x80
 800c584:	045b      	lsls	r3, r3, #17
 800c586:	429a      	cmp	r2, r3
 800c588:	d002      	beq.n	800c590 <I2C_Slave_ISR_IT+0x1d8>
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d107      	bne.n	800c5a0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	0018      	movs	r0, r3
 800c594:	f000 fbf4 	bl	800cd80 <I2C_ITSlaveSeqCplt>
 800c598:	e002      	b.n	800c5a0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800c59a:	46c0      	nop			@ (mov r8, r8)
 800c59c:	e000      	b.n	800c5a0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800c59e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2240      	movs	r2, #64	@ 0x40
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	0018      	movs	r0, r3
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	b006      	add	sp, #24
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	46c0      	nop			@ (mov r8, r8)
 800c5b4:	ffff0000 	.word	0xffff0000

0800c5b8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c5b8:	b590      	push	{r4, r7, lr}
 800c5ba:	b089      	sub	sp, #36	@ 0x24
 800c5bc:	af02      	add	r7, sp, #8
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2240      	movs	r2, #64	@ 0x40
 800c5c8:	5c9b      	ldrb	r3, [r3, r2]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d101      	bne.n	800c5d2 <I2C_Master_ISR_DMA+0x1a>
 800c5ce:	2302      	movs	r3, #2
 800c5d0:	e0e7      	b.n	800c7a2 <I2C_Master_ISR_DMA+0x1ea>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2240      	movs	r2, #64	@ 0x40
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	2210      	movs	r2, #16
 800c5de:	4013      	ands	r3, r2
 800c5e0:	d017      	beq.n	800c612 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2210      	movs	r2, #16
 800c5e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c5e8:	d013      	beq.n	800c612 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2210      	movs	r2, #16
 800c5f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f6:	2204      	movs	r2, #4
 800c5f8:	431a      	orrs	r2, r3
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2120      	movs	r1, #32
 800c602:	0018      	movs	r0, r3
 800c604:	f001 f8c6 	bl	800d794 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	0018      	movs	r0, r3
 800c60c:	f000 ff8d 	bl	800d52a <I2C_Flush_TXDR>
 800c610:	e0c2      	b.n	800c798 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2280      	movs	r2, #128	@ 0x80
 800c616:	4013      	ands	r3, r2
 800c618:	d100      	bne.n	800c61c <I2C_Master_ISR_DMA+0x64>
 800c61a:	e07c      	b.n	800c716 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2240      	movs	r2, #64	@ 0x40
 800c620:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c622:	d100      	bne.n	800c626 <I2C_Master_ISR_DMA+0x6e>
 800c624:	e077      	b.n	800c716 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2140      	movs	r1, #64	@ 0x40
 800c632:	438a      	bics	r2, r1
 800c634:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d055      	beq.n	800c6ec <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	b29a      	uxth	r2, r3
 800c648:	2312      	movs	r3, #18
 800c64a:	18fb      	adds	r3, r7, r3
 800c64c:	0592      	lsls	r2, r2, #22
 800c64e:	0d92      	lsrs	r2, r2, #22
 800c650:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c656:	b29b      	uxth	r3, r3
 800c658:	2bff      	cmp	r3, #255	@ 0xff
 800c65a:	d906      	bls.n	800c66a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	22ff      	movs	r2, #255	@ 0xff
 800c660:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800c662:	2380      	movs	r3, #128	@ 0x80
 800c664:	045b      	lsls	r3, r3, #17
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	e010      	b.n	800c68c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c66e:	b29a      	uxth	r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c678:	4a4c      	ldr	r2, [pc, #304]	@ (800c7ac <I2C_Master_ISR_DMA+0x1f4>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d003      	beq.n	800c686 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c682:	617b      	str	r3, [r7, #20]
 800c684:	e002      	b.n	800c68c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c686:	2380      	movs	r3, #128	@ 0x80
 800c688:	049b      	lsls	r3, r3, #18
 800c68a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c690:	b2da      	uxtb	r2, r3
 800c692:	697c      	ldr	r4, [r7, #20]
 800c694:	2312      	movs	r3, #18
 800c696:	18fb      	adds	r3, r7, r3
 800c698:	8819      	ldrh	r1, [r3, #0]
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	2300      	movs	r3, #0
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	0023      	movs	r3, r4
 800c6a2:	f001 f83d 	bl	800d720 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2241      	movs	r2, #65	@ 0x41
 800c6bc:	5c9b      	ldrb	r3, [r3, r2]
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	2b22      	cmp	r3, #34	@ 0x22
 800c6c2:	d109      	bne.n	800c6d8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2180      	movs	r1, #128	@ 0x80
 800c6d0:	0209      	lsls	r1, r1, #8
 800c6d2:	430a      	orrs	r2, r1
 800c6d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c6d6:	e05f      	b.n	800c798 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2180      	movs	r1, #128	@ 0x80
 800c6e4:	01c9      	lsls	r1, r1, #7
 800c6e6:	430a      	orrs	r2, r1
 800c6e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c6ea:	e055      	b.n	800c798 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	2380      	movs	r3, #128	@ 0x80
 800c6f4:	049b      	lsls	r3, r3, #18
 800c6f6:	401a      	ands	r2, r3
 800c6f8:	2380      	movs	r3, #128	@ 0x80
 800c6fa:	049b      	lsls	r3, r3, #18
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d004      	beq.n	800c70a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	0018      	movs	r0, r3
 800c704:	f000 fafa 	bl	800ccfc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c708:	e046      	b.n	800c798 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2140      	movs	r1, #64	@ 0x40
 800c70e:	0018      	movs	r0, r3
 800c710:	f000 fde0 	bl	800d2d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c714:	e040      	b.n	800c798 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2240      	movs	r2, #64	@ 0x40
 800c71a:	4013      	ands	r3, r2
 800c71c:	d02c      	beq.n	800c778 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2240      	movs	r2, #64	@ 0x40
 800c722:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c724:	d028      	beq.n	800c778 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d11d      	bne.n	800c76c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	2380      	movs	r3, #128	@ 0x80
 800c738:	049b      	lsls	r3, r3, #18
 800c73a:	401a      	ands	r2, r3
 800c73c:	2380      	movs	r3, #128	@ 0x80
 800c73e:	049b      	lsls	r3, r3, #18
 800c740:	429a      	cmp	r2, r3
 800c742:	d028      	beq.n	800c796 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c748:	4a18      	ldr	r2, [pc, #96]	@ (800c7ac <I2C_Master_ISR_DMA+0x1f4>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d109      	bne.n	800c762 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2180      	movs	r1, #128	@ 0x80
 800c75a:	01c9      	lsls	r1, r1, #7
 800c75c:	430a      	orrs	r2, r1
 800c75e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c760:	e019      	b.n	800c796 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	0018      	movs	r0, r3
 800c766:	f000 fac9 	bl	800ccfc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c76a:	e014      	b.n	800c796 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2140      	movs	r1, #64	@ 0x40
 800c770:	0018      	movs	r0, r3
 800c772:	f000 fdaf 	bl	800d2d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c776:	e00e      	b.n	800c796 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2220      	movs	r2, #32
 800c77c:	4013      	ands	r3, r2
 800c77e:	d00b      	beq.n	800c798 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2220      	movs	r2, #32
 800c784:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c786:	d007      	beq.n	800c798 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	0011      	movs	r1, r2
 800c78e:	0018      	movs	r0, r3
 800c790:	f000 fb5a 	bl	800ce48 <I2C_ITMasterCplt>
 800c794:	e000      	b.n	800c798 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800c796:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2240      	movs	r2, #64	@ 0x40
 800c79c:	2100      	movs	r1, #0
 800c79e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	0018      	movs	r0, r3
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	b007      	add	sp, #28
 800c7a8:	bd90      	pop	{r4, r7, pc}
 800c7aa:	46c0      	nop			@ (mov r8, r8)
 800c7ac:	ffff0000 	.word	0xffff0000

0800c7b0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c7b0:	b590      	push	{r4, r7, lr}
 800c7b2:	b089      	sub	sp, #36	@ 0x24
 800c7b4:	af02      	add	r7, sp, #8
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c7bc:	4b88      	ldr	r3, [pc, #544]	@ (800c9e0 <I2C_Mem_ISR_DMA+0x230>)
 800c7be:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2240      	movs	r2, #64	@ 0x40
 800c7c4:	5c9b      	ldrb	r3, [r3, r2]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d101      	bne.n	800c7ce <I2C_Mem_ISR_DMA+0x1e>
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	e104      	b.n	800c9d8 <I2C_Mem_ISR_DMA+0x228>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2240      	movs	r2, #64	@ 0x40
 800c7d2:	2101      	movs	r1, #1
 800c7d4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2210      	movs	r2, #16
 800c7da:	4013      	ands	r3, r2
 800c7dc:	d017      	beq.n	800c80e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2210      	movs	r2, #16
 800c7e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c7e4:	d013      	beq.n	800c80e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2210      	movs	r2, #16
 800c7ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7f2:	2204      	movs	r2, #4
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2120      	movs	r1, #32
 800c7fe:	0018      	movs	r0, r3
 800c800:	f000 ffc8 	bl	800d794 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	0018      	movs	r0, r3
 800c808:	f000 fe8f 	bl	800d52a <I2C_Flush_TXDR>
 800c80c:	e0df      	b.n	800c9ce <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	2202      	movs	r2, #2
 800c812:	4013      	ands	r3, r2
 800c814:	d00d      	beq.n	800c832 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2202      	movs	r2, #2
 800c81a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c81c:	d009      	beq.n	800c832 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c826:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2201      	movs	r2, #1
 800c82c:	4252      	negs	r2, r2
 800c82e:	651a      	str	r2, [r3, #80]	@ 0x50
 800c830:	e0cd      	b.n	800c9ce <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2280      	movs	r2, #128	@ 0x80
 800c836:	4013      	ands	r3, r2
 800c838:	d05e      	beq.n	800c8f8 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2240      	movs	r2, #64	@ 0x40
 800c83e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c840:	d05a      	beq.n	800c8f8 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2110      	movs	r1, #16
 800c846:	0018      	movs	r0, r3
 800c848:	f000 ffa4 	bl	800d794 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c850:	b29b      	uxth	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d04a      	beq.n	800c8ec <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	2bff      	cmp	r3, #255	@ 0xff
 800c85e:	d910      	bls.n	800c882 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	22ff      	movs	r2, #255	@ 0xff
 800c864:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c86a:	b299      	uxth	r1, r3
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c870:	b2da      	uxtb	r2, r3
 800c872:	2380      	movs	r3, #128	@ 0x80
 800c874:	045b      	lsls	r3, r3, #17
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	2400      	movs	r4, #0
 800c87a:	9400      	str	r4, [sp, #0]
 800c87c:	f000 ff50 	bl	800d720 <I2C_TransferConfig>
 800c880:	e011      	b.n	800c8a6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c886:	b29a      	uxth	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c890:	b299      	uxth	r1, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c896:	b2da      	uxtb	r2, r3
 800c898:	2380      	movs	r3, #128	@ 0x80
 800c89a:	049b      	lsls	r3, r3, #18
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	2400      	movs	r4, #0
 800c8a0:	9400      	str	r4, [sp, #0]
 800c8a2:	f000 ff3d 	bl	800d720 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2241      	movs	r2, #65	@ 0x41
 800c8bc:	5c9b      	ldrb	r3, [r3, r2]
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b22      	cmp	r3, #34	@ 0x22
 800c8c2:	d109      	bne.n	800c8d8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2180      	movs	r1, #128	@ 0x80
 800c8d0:	0209      	lsls	r1, r1, #8
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c8d6:	e07a      	b.n	800c9ce <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2180      	movs	r1, #128	@ 0x80
 800c8e4:	01c9      	lsls	r1, r1, #7
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c8ea:	e070      	b.n	800c9ce <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2140      	movs	r1, #64	@ 0x40
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	f000 fcef 	bl	800d2d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c8f6:	e06a      	b.n	800c9ce <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2240      	movs	r2, #64	@ 0x40
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	d058      	beq.n	800c9b2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2240      	movs	r2, #64	@ 0x40
 800c904:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c906:	d054      	beq.n	800c9b2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2241      	movs	r2, #65	@ 0x41
 800c90c:	5c9b      	ldrb	r3, [r3, r2]
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b22      	cmp	r3, #34	@ 0x22
 800c912:	d101      	bne.n	800c918 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800c914:	4b33      	ldr	r3, [pc, #204]	@ (800c9e4 <I2C_Mem_ISR_DMA+0x234>)
 800c916:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	2bff      	cmp	r3, #255	@ 0xff
 800c920:	d911      	bls.n	800c946 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	22ff      	movs	r2, #255	@ 0xff
 800c926:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c92c:	b299      	uxth	r1, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c932:	b2da      	uxtb	r2, r3
 800c934:	2380      	movs	r3, #128	@ 0x80
 800c936:	045c      	lsls	r4, r3, #17
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	0023      	movs	r3, r4
 800c940:	f000 feee 	bl	800d720 <I2C_TransferConfig>
 800c944:	e012      	b.n	800c96c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c954:	b299      	uxth	r1, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	2380      	movs	r3, #128	@ 0x80
 800c95e:	049c      	lsls	r4, r3, #18
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	0023      	movs	r3, r4
 800c968:	f000 feda 	bl	800d720 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c970:	b29a      	uxth	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	b29a      	uxth	r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2241      	movs	r2, #65	@ 0x41
 800c982:	5c9b      	ldrb	r3, [r3, r2]
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b22      	cmp	r3, #34	@ 0x22
 800c988:	d109      	bne.n	800c99e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2180      	movs	r1, #128	@ 0x80
 800c996:	0209      	lsls	r1, r1, #8
 800c998:	430a      	orrs	r2, r1
 800c99a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c99c:	e017      	b.n	800c9ce <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2180      	movs	r1, #128	@ 0x80
 800c9aa:	01c9      	lsls	r1, r1, #7
 800c9ac:	430a      	orrs	r2, r1
 800c9ae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c9b0:	e00d      	b.n	800c9ce <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2220      	movs	r2, #32
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	d009      	beq.n	800c9ce <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2220      	movs	r2, #32
 800c9be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c9c0:	d005      	beq.n	800c9ce <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	0011      	movs	r1, r2
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	f000 fa3d 	bl	800ce48 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2240      	movs	r2, #64	@ 0x40
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	0018      	movs	r0, r3
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	b007      	add	sp, #28
 800c9de:	bd90      	pop	{r4, r7, pc}
 800c9e0:	80002000 	.word	0x80002000
 800c9e4:	80002400 	.word	0x80002400

0800c9e8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b088      	sub	sp, #32
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2240      	movs	r2, #64	@ 0x40
 800ca02:	5c9b      	ldrb	r3, [r3, r2]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d101      	bne.n	800ca0c <I2C_Slave_ISR_DMA+0x24>
 800ca08:	2302      	movs	r3, #2
 800ca0a:	e0cd      	b.n	800cba8 <I2C_Slave_ISR_DMA+0x1c0>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2240      	movs	r2, #64	@ 0x40
 800ca10:	2101      	movs	r1, #1
 800ca12:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	2220      	movs	r2, #32
 800ca18:	4013      	ands	r3, r2
 800ca1a:	d009      	beq.n	800ca30 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2220      	movs	r2, #32
 800ca20:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ca22:	d005      	beq.n	800ca30 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	0011      	movs	r1, r2
 800ca2a:	0018      	movs	r0, r3
 800ca2c:	f000 fada 	bl	800cfe4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2210      	movs	r2, #16
 800ca34:	4013      	ands	r3, r2
 800ca36:	d100      	bne.n	800ca3a <I2C_Slave_ISR_DMA+0x52>
 800ca38:	e0a3      	b.n	800cb82 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2210      	movs	r2, #16
 800ca3e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ca40:	d100      	bne.n	800ca44 <I2C_Slave_ISR_DMA+0x5c>
 800ca42:	e09e      	b.n	800cb82 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	2380      	movs	r3, #128	@ 0x80
 800ca48:	01db      	lsls	r3, r3, #7
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	d105      	bne.n	800ca5a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	2380      	movs	r3, #128	@ 0x80
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ca56:	d100      	bne.n	800ca5a <I2C_Slave_ISR_DMA+0x72>
 800ca58:	e08c      	b.n	800cb74 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00c      	beq.n	800ca7c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	2380      	movs	r3, #128	@ 0x80
 800ca66:	021b      	lsls	r3, r3, #8
 800ca68:	4013      	ands	r3, r2
 800ca6a:	d007      	beq.n	800ca7c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00c      	beq.n	800ca9e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	2380      	movs	r3, #128	@ 0x80
 800ca88:	01db      	lsls	r3, r3, #7
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	d007      	beq.n	800ca9e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d101      	bne.n	800ca9e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d12d      	bne.n	800cb00 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2241      	movs	r2, #65	@ 0x41
 800caa8:	5c9b      	ldrb	r3, [r3, r2]
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b28      	cmp	r3, #40	@ 0x28
 800caae:	d10b      	bne.n	800cac8 <I2C_Slave_ISR_DMA+0xe0>
 800cab0:	69ba      	ldr	r2, [r7, #24]
 800cab2:	2380      	movs	r3, #128	@ 0x80
 800cab4:	049b      	lsls	r3, r3, #18
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d106      	bne.n	800cac8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	0011      	movs	r1, r2
 800cac0:	0018      	movs	r0, r3
 800cac2:	f000 fbaf 	bl	800d224 <I2C_ITListenCplt>
 800cac6:	e054      	b.n	800cb72 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2241      	movs	r2, #65	@ 0x41
 800cacc:	5c9b      	ldrb	r3, [r3, r2]
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b29      	cmp	r3, #41	@ 0x29
 800cad2:	d110      	bne.n	800caf6 <I2C_Slave_ISR_DMA+0x10e>
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	4a36      	ldr	r2, [pc, #216]	@ (800cbb0 <I2C_Slave_ISR_DMA+0x1c8>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d00c      	beq.n	800caf6 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2210      	movs	r2, #16
 800cae2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	0018      	movs	r0, r3
 800cae8:	f000 fd1f 	bl	800d52a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	0018      	movs	r0, r3
 800caf0:	f000 f946 	bl	800cd80 <I2C_ITSlaveSeqCplt>
 800caf4:	e03d      	b.n	800cb72 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2210      	movs	r2, #16
 800cafc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800cafe:	e03e      	b.n	800cb7e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2210      	movs	r2, #16
 800cb06:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb0c:	2204      	movs	r2, #4
 800cb0e:	431a      	orrs	r2, r3
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800cb14:	2317      	movs	r3, #23
 800cb16:	18fb      	adds	r3, r7, r3
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	2141      	movs	r1, #65	@ 0x41
 800cb1c:	5c52      	ldrb	r2, [r2, r1]
 800cb1e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d004      	beq.n	800cb30 <I2C_Slave_ISR_DMA+0x148>
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	2380      	movs	r3, #128	@ 0x80
 800cb2a:	045b      	lsls	r3, r3, #17
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d126      	bne.n	800cb7e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cb30:	2217      	movs	r2, #23
 800cb32:	18bb      	adds	r3, r7, r2
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b21      	cmp	r3, #33	@ 0x21
 800cb38:	d003      	beq.n	800cb42 <I2C_Slave_ISR_DMA+0x15a>
 800cb3a:	18bb      	adds	r3, r7, r2
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	2b29      	cmp	r3, #41	@ 0x29
 800cb40:	d103      	bne.n	800cb4a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2221      	movs	r2, #33	@ 0x21
 800cb46:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb48:	e00b      	b.n	800cb62 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cb4a:	2217      	movs	r2, #23
 800cb4c:	18bb      	adds	r3, r7, r2
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b22      	cmp	r3, #34	@ 0x22
 800cb52:	d003      	beq.n	800cb5c <I2C_Slave_ISR_DMA+0x174>
 800cb54:	18bb      	adds	r3, r7, r2
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb5a:	d102      	bne.n	800cb62 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2222      	movs	r2, #34	@ 0x22
 800cb60:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	0011      	movs	r1, r2
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	f000 fbb2 	bl	800d2d4 <I2C_ITError>
      if (treatdmanack == 1U)
 800cb70:	e005      	b.n	800cb7e <I2C_Slave_ISR_DMA+0x196>
 800cb72:	e004      	b.n	800cb7e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2210      	movs	r2, #16
 800cb7a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb7c:	e00f      	b.n	800cb9e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800cb7e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb80:	e00d      	b.n	800cb9e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	2208      	movs	r2, #8
 800cb86:	4013      	ands	r3, r2
 800cb88:	d009      	beq.n	800cb9e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2208      	movs	r2, #8
 800cb8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb90:	d005      	beq.n	800cb9e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	0011      	movs	r1, r2
 800cb98:	0018      	movs	r0, r3
 800cb9a:	f000 f80b 	bl	800cbb4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2240      	movs	r2, #64	@ 0x40
 800cba2:	2100      	movs	r1, #0
 800cba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	0018      	movs	r0, r3
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	b008      	add	sp, #32
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	ffff0000 	.word	0xffff0000

0800cbb4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cbb4:	b5b0      	push	{r4, r5, r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2241      	movs	r2, #65	@ 0x41
 800cbc2:	5c9b      	ldrb	r3, [r3, r2]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	001a      	movs	r2, r3
 800cbc8:	2328      	movs	r3, #40	@ 0x28
 800cbca:	4013      	ands	r3, r2
 800cbcc:	2b28      	cmp	r3, #40	@ 0x28
 800cbce:	d000      	beq.n	800cbd2 <I2C_ITAddrCplt+0x1e>
 800cbd0:	e088      	b.n	800cce4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	699b      	ldr	r3, [r3, #24]
 800cbd8:	0c1b      	lsrs	r3, r3, #16
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	250f      	movs	r5, #15
 800cbde:	197b      	adds	r3, r7, r5
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	400a      	ands	r2, r1
 800cbe4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	0c1b      	lsrs	r3, r3, #16
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	200c      	movs	r0, #12
 800cbf2:	183b      	adds	r3, r7, r0
 800cbf4:	21fe      	movs	r1, #254	@ 0xfe
 800cbf6:	400a      	ands	r2, r1
 800cbf8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	240a      	movs	r4, #10
 800cc04:	193b      	adds	r3, r7, r4
 800cc06:	0592      	lsls	r2, r2, #22
 800cc08:	0d92      	lsrs	r2, r2, #22
 800cc0a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	2308      	movs	r3, #8
 800cc16:	18fb      	adds	r3, r7, r3
 800cc18:	21fe      	movs	r1, #254	@ 0xfe
 800cc1a:	400a      	ands	r2, r1
 800cc1c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d148      	bne.n	800ccb8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cc26:	0021      	movs	r1, r4
 800cc28:	187b      	adds	r3, r7, r1
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	09db      	lsrs	r3, r3, #7
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	183b      	adds	r3, r7, r0
 800cc32:	881b      	ldrh	r3, [r3, #0]
 800cc34:	4053      	eors	r3, r2
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	001a      	movs	r2, r3
 800cc3a:	2306      	movs	r3, #6
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	d120      	bne.n	800cc82 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800cc40:	183b      	adds	r3, r7, r0
 800cc42:	187a      	adds	r2, r7, r1
 800cc44:	8812      	ldrh	r2, [r2, #0]
 800cc46:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc4c:	1c5a      	adds	r2, r3, #1
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d14c      	bne.n	800ccf4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2208      	movs	r2, #8
 800cc66:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2240      	movs	r2, #64	@ 0x40
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc70:	183b      	adds	r3, r7, r0
 800cc72:	881a      	ldrh	r2, [r3, #0]
 800cc74:	197b      	adds	r3, r7, r5
 800cc76:	7819      	ldrb	r1, [r3, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	0018      	movs	r0, r3
 800cc7c:	f7ff fa39 	bl	800c0f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cc80:	e038      	b.n	800ccf4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800cc82:	240c      	movs	r4, #12
 800cc84:	193b      	adds	r3, r7, r4
 800cc86:	2208      	movs	r2, #8
 800cc88:	18ba      	adds	r2, r7, r2
 800cc8a:	8812      	ldrh	r2, [r2, #0]
 800cc8c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc8e:	2380      	movs	r3, #128	@ 0x80
 800cc90:	021a      	lsls	r2, r3, #8
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	0011      	movs	r1, r2
 800cc96:	0018      	movs	r0, r3
 800cc98:	f000 fe0a 	bl	800d8b0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2240      	movs	r2, #64	@ 0x40
 800cca0:	2100      	movs	r1, #0
 800cca2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cca4:	193b      	adds	r3, r7, r4
 800cca6:	881a      	ldrh	r2, [r3, #0]
 800cca8:	230f      	movs	r3, #15
 800ccaa:	18fb      	adds	r3, r7, r3
 800ccac:	7819      	ldrb	r1, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	0018      	movs	r0, r3
 800ccb2:	f7ff fa1e 	bl	800c0f2 <HAL_I2C_AddrCallback>
}
 800ccb6:	e01d      	b.n	800ccf4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ccb8:	2380      	movs	r3, #128	@ 0x80
 800ccba:	021a      	lsls	r2, r3, #8
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	0011      	movs	r1, r2
 800ccc0:	0018      	movs	r0, r3
 800ccc2:	f000 fdf5 	bl	800d8b0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2240      	movs	r2, #64	@ 0x40
 800ccca:	2100      	movs	r1, #0
 800cccc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ccce:	230c      	movs	r3, #12
 800ccd0:	18fb      	adds	r3, r7, r3
 800ccd2:	881a      	ldrh	r2, [r3, #0]
 800ccd4:	230f      	movs	r3, #15
 800ccd6:	18fb      	adds	r3, r7, r3
 800ccd8:	7819      	ldrb	r1, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	0018      	movs	r0, r3
 800ccde:	f7ff fa08 	bl	800c0f2 <HAL_I2C_AddrCallback>
}
 800cce2:	e007      	b.n	800ccf4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2208      	movs	r2, #8
 800ccea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2240      	movs	r2, #64	@ 0x40
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	5499      	strb	r1, [r3, r2]
}
 800ccf4:	46c0      	nop			@ (mov r8, r8)
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	b004      	add	sp, #16
 800ccfa:	bdb0      	pop	{r4, r5, r7, pc}

0800ccfc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2242      	movs	r2, #66	@ 0x42
 800cd08:	2100      	movs	r1, #0
 800cd0a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2241      	movs	r2, #65	@ 0x41
 800cd10:	5c9b      	ldrb	r3, [r3, r2]
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	2b21      	cmp	r3, #33	@ 0x21
 800cd16:	d117      	bne.n	800cd48 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2241      	movs	r2, #65	@ 0x41
 800cd1c:	2120      	movs	r1, #32
 800cd1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2211      	movs	r2, #17
 800cd24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2101      	movs	r1, #1
 800cd30:	0018      	movs	r0, r3
 800cd32:	f000 fdbd 	bl	800d8b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2240      	movs	r2, #64	@ 0x40
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	0018      	movs	r0, r3
 800cd42:	f7ff f9b6 	bl	800c0b2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cd46:	e016      	b.n	800cd76 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2241      	movs	r2, #65	@ 0x41
 800cd4c:	2120      	movs	r1, #32
 800cd4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2212      	movs	r2, #18
 800cd54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2102      	movs	r1, #2
 800cd60:	0018      	movs	r0, r3
 800cd62:	f000 fda5 	bl	800d8b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2240      	movs	r2, #64	@ 0x40
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	0018      	movs	r0, r3
 800cd72:	f7ff f9a6 	bl	800c0c2 <HAL_I2C_MasterRxCpltCallback>
}
 800cd76:	46c0      	nop			@ (mov r8, r8)
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	b002      	add	sp, #8
 800cd7c:	bd80      	pop	{r7, pc}
	...

0800cd80 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2242      	movs	r2, #66	@ 0x42
 800cd94:	2100      	movs	r1, #0
 800cd96:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	2380      	movs	r3, #128	@ 0x80
 800cd9c:	01db      	lsls	r3, r3, #7
 800cd9e:	4013      	ands	r3, r2
 800cda0:	d008      	beq.n	800cdb4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4924      	ldr	r1, [pc, #144]	@ (800ce40 <I2C_ITSlaveSeqCplt+0xc0>)
 800cdae:	400a      	ands	r2, r1
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	e00c      	b.n	800cdce <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	2380      	movs	r3, #128	@ 0x80
 800cdb8:	021b      	lsls	r3, r3, #8
 800cdba:	4013      	ands	r3, r2
 800cdbc:	d007      	beq.n	800cdce <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	491e      	ldr	r1, [pc, #120]	@ (800ce44 <I2C_ITSlaveSeqCplt+0xc4>)
 800cdca:	400a      	ands	r2, r1
 800cdcc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2241      	movs	r2, #65	@ 0x41
 800cdd2:	5c9b      	ldrb	r3, [r3, r2]
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	2b29      	cmp	r3, #41	@ 0x29
 800cdd8:	d114      	bne.n	800ce04 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2241      	movs	r2, #65	@ 0x41
 800cdde:	2128      	movs	r1, #40	@ 0x28
 800cde0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2221      	movs	r2, #33	@ 0x21
 800cde6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2101      	movs	r1, #1
 800cdec:	0018      	movs	r0, r3
 800cdee:	f000 fd5f 	bl	800d8b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2240      	movs	r2, #64	@ 0x40
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	0018      	movs	r0, r3
 800cdfe:	f7ff f968 	bl	800c0d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce02:	e019      	b.n	800ce38 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2241      	movs	r2, #65	@ 0x41
 800ce08:	5c9b      	ldrb	r3, [r3, r2]
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce0e:	d113      	bne.n	800ce38 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2241      	movs	r2, #65	@ 0x41
 800ce14:	2128      	movs	r1, #40	@ 0x28
 800ce16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2222      	movs	r2, #34	@ 0x22
 800ce1c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2102      	movs	r1, #2
 800ce22:	0018      	movs	r0, r3
 800ce24:	f000 fd44 	bl	800d8b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2240      	movs	r2, #64	@ 0x40
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	0018      	movs	r0, r3
 800ce34:	f7ff f955 	bl	800c0e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800ce38:	46c0      	nop			@ (mov r8, r8)
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	b004      	add	sp, #16
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	ffffbfff 	.word	0xffffbfff
 800ce44:	ffff7fff 	.word	0xffff7fff

0800ce48 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2220      	movs	r2, #32
 800ce5c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2241      	movs	r2, #65	@ 0x41
 800ce62:	5c9b      	ldrb	r3, [r3, r2]
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b21      	cmp	r3, #33	@ 0x21
 800ce68:	d108      	bne.n	800ce7c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	0018      	movs	r0, r3
 800ce70:	f000 fd1e 	bl	800d8b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2211      	movs	r2, #17
 800ce78:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce7a:	e00d      	b.n	800ce98 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2241      	movs	r2, #65	@ 0x41
 800ce80:	5c9b      	ldrb	r3, [r3, r2]
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	2b22      	cmp	r3, #34	@ 0x22
 800ce86:	d107      	bne.n	800ce98 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2102      	movs	r1, #2
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	f000 fd0f 	bl	800d8b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2212      	movs	r2, #18
 800ce96:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	494e      	ldr	r1, [pc, #312]	@ (800cfdc <I2C_ITMasterCplt+0x194>)
 800cea4:	400a      	ands	r2, r1
 800cea6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a4b      	ldr	r2, [pc, #300]	@ (800cfe0 <I2C_ITMasterCplt+0x198>)
 800ceb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2210      	movs	r2, #16
 800ceb8:	4013      	ands	r3, r2
 800ceba:	d009      	beq.n	800ced0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2210      	movs	r2, #16
 800cec2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cec8:	2204      	movs	r2, #4
 800ceca:	431a      	orrs	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2241      	movs	r2, #65	@ 0x41
 800ced4:	5c9b      	ldrb	r3, [r3, r2]
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	2b60      	cmp	r3, #96	@ 0x60
 800ceda:	d109      	bne.n	800cef0 <I2C_ITMasterCplt+0xa8>
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	2204      	movs	r2, #4
 800cee0:	4013      	ands	r3, r2
 800cee2:	d005      	beq.n	800cef0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ceee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	0018      	movs	r0, r3
 800cef4:	f000 fb19 	bl	800d52a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cefc:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2241      	movs	r2, #65	@ 0x41
 800cf02:	5c9b      	ldrb	r3, [r3, r2]
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b60      	cmp	r3, #96	@ 0x60
 800cf08:	d002      	beq.n	800cf10 <I2C_ITMasterCplt+0xc8>
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d007      	beq.n	800cf20 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	0011      	movs	r1, r2
 800cf18:	0018      	movs	r0, r3
 800cf1a:	f000 f9db 	bl	800d2d4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cf1e:	e058      	b.n	800cfd2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2241      	movs	r2, #65	@ 0x41
 800cf24:	5c9b      	ldrb	r3, [r3, r2]
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b21      	cmp	r3, #33	@ 0x21
 800cf2a:	d126      	bne.n	800cf7a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2241      	movs	r2, #65	@ 0x41
 800cf30:	2120      	movs	r1, #32
 800cf32:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2242      	movs	r2, #66	@ 0x42
 800cf3e:	5c9b      	ldrb	r3, [r3, r2]
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	2b40      	cmp	r3, #64	@ 0x40
 800cf44:	d10c      	bne.n	800cf60 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2242      	movs	r2, #66	@ 0x42
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2240      	movs	r2, #64	@ 0x40
 800cf52:	2100      	movs	r1, #0
 800cf54:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	0018      	movs	r0, r3
 800cf5a:	f7ff f8e2 	bl	800c122 <HAL_I2C_MemTxCpltCallback>
}
 800cf5e:	e038      	b.n	800cfd2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2242      	movs	r2, #66	@ 0x42
 800cf64:	2100      	movs	r1, #0
 800cf66:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2240      	movs	r2, #64	@ 0x40
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	0018      	movs	r0, r3
 800cf74:	f7ff f89d 	bl	800c0b2 <HAL_I2C_MasterTxCpltCallback>
}
 800cf78:	e02b      	b.n	800cfd2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2241      	movs	r2, #65	@ 0x41
 800cf7e:	5c9b      	ldrb	r3, [r3, r2]
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b22      	cmp	r3, #34	@ 0x22
 800cf84:	d125      	bne.n	800cfd2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2241      	movs	r2, #65	@ 0x41
 800cf8a:	2120      	movs	r1, #32
 800cf8c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2242      	movs	r2, #66	@ 0x42
 800cf98:	5c9b      	ldrb	r3, [r3, r2]
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b40      	cmp	r3, #64	@ 0x40
 800cf9e:	d10c      	bne.n	800cfba <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2242      	movs	r2, #66	@ 0x42
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2240      	movs	r2, #64	@ 0x40
 800cfac:	2100      	movs	r1, #0
 800cfae:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	0018      	movs	r0, r3
 800cfb4:	f7ff f8bd 	bl	800c132 <HAL_I2C_MemRxCpltCallback>
}
 800cfb8:	e00b      	b.n	800cfd2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2242      	movs	r2, #66	@ 0x42
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2240      	movs	r2, #64	@ 0x40
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	0018      	movs	r0, r3
 800cfce:	f7ff f878 	bl	800c0c2 <HAL_I2C_MasterRxCpltCallback>
}
 800cfd2:	46c0      	nop			@ (mov r8, r8)
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	b006      	add	sp, #24
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	46c0      	nop			@ (mov r8, r8)
 800cfdc:	fe00e800 	.word	0xfe00e800
 800cfe0:	ffff0000 	.word	0xffff0000

0800cfe4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cffa:	200f      	movs	r0, #15
 800cffc:	183b      	adds	r3, r7, r0
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	2141      	movs	r1, #65	@ 0x41
 800d002:	5c52      	ldrb	r2, [r2, r1]
 800d004:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2220      	movs	r2, #32
 800d00c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d00e:	183b      	adds	r3, r7, r0
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	2b21      	cmp	r3, #33	@ 0x21
 800d014:	d003      	beq.n	800d01e <I2C_ITSlaveCplt+0x3a>
 800d016:	183b      	adds	r3, r7, r0
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b29      	cmp	r3, #41	@ 0x29
 800d01c:	d109      	bne.n	800d032 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800d01e:	4a7b      	ldr	r2, [pc, #492]	@ (800d20c <I2C_ITSlaveCplt+0x228>)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	0011      	movs	r1, r2
 800d024:	0018      	movs	r0, r3
 800d026:	f000 fc43 	bl	800d8b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2221      	movs	r2, #33	@ 0x21
 800d02e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d030:	e011      	b.n	800d056 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d032:	220f      	movs	r2, #15
 800d034:	18bb      	adds	r3, r7, r2
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b22      	cmp	r3, #34	@ 0x22
 800d03a:	d003      	beq.n	800d044 <I2C_ITSlaveCplt+0x60>
 800d03c:	18bb      	adds	r3, r7, r2
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	2b2a      	cmp	r3, #42	@ 0x2a
 800d042:	d108      	bne.n	800d056 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800d044:	4a72      	ldr	r2, [pc, #456]	@ (800d210 <I2C_ITSlaveCplt+0x22c>)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	0011      	movs	r1, r2
 800d04a:	0018      	movs	r0, r3
 800d04c:	f000 fc30 	bl	800d8b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2222      	movs	r2, #34	@ 0x22
 800d054:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2180      	movs	r1, #128	@ 0x80
 800d062:	0209      	lsls	r1, r1, #8
 800d064:	430a      	orrs	r2, r1
 800d066:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4968      	ldr	r1, [pc, #416]	@ (800d214 <I2C_ITSlaveCplt+0x230>)
 800d074:	400a      	ands	r2, r1
 800d076:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	0018      	movs	r0, r3
 800d07c:	f000 fa55 	bl	800d52a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d080:	693a      	ldr	r2, [r7, #16]
 800d082:	2380      	movs	r3, #128	@ 0x80
 800d084:	01db      	lsls	r3, r3, #7
 800d086:	4013      	ands	r3, r2
 800d088:	d013      	beq.n	800d0b2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4960      	ldr	r1, [pc, #384]	@ (800d218 <I2C_ITSlaveCplt+0x234>)
 800d096:	400a      	ands	r2, r1
 800d098:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d01f      	beq.n	800d0e2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d0b0:	e017      	b.n	800d0e2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d0b2:	693a      	ldr	r2, [r7, #16]
 800d0b4:	2380      	movs	r3, #128	@ 0x80
 800d0b6:	021b      	lsls	r3, r3, #8
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	d012      	beq.n	800d0e2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4955      	ldr	r1, [pc, #340]	@ (800d21c <I2C_ITSlaveCplt+0x238>)
 800d0c8:	400a      	ands	r2, r1
 800d0ca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d006      	beq.n	800d0e2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	b29a      	uxth	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	2204      	movs	r2, #4
 800d0e6:	4013      	ands	r3, r2
 800d0e8:	d020      	beq.n	800d12c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2204      	movs	r2, #4
 800d0ee:	4393      	bics	r3, r2
 800d0f0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0fc:	b2d2      	uxtb	r2, r2
 800d0fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00c      	beq.n	800d12c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d116:	3b01      	subs	r3, #1
 800d118:	b29a      	uxth	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d122:	b29b      	uxth	r3, r3
 800d124:	3b01      	subs	r3, #1
 800d126:	b29a      	uxth	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d130:	b29b      	uxth	r3, r3
 800d132:	2b00      	cmp	r3, #0
 800d134:	d005      	beq.n	800d142 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d13a:	2204      	movs	r2, #4
 800d13c:	431a      	orrs	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2242      	movs	r2, #66	@ 0x42
 800d146:	2100      	movs	r1, #0
 800d148:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d154:	2b00      	cmp	r3, #0
 800d156:	d013      	beq.n	800d180 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	0011      	movs	r1, r2
 800d160:	0018      	movs	r0, r3
 800d162:	f000 f8b7 	bl	800d2d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2241      	movs	r2, #65	@ 0x41
 800d16a:	5c9b      	ldrb	r3, [r3, r2]
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2b28      	cmp	r3, #40	@ 0x28
 800d170:	d147      	bne.n	800d202 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d172:	697a      	ldr	r2, [r7, #20]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	0011      	movs	r1, r2
 800d178:	0018      	movs	r0, r3
 800d17a:	f000 f853 	bl	800d224 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d17e:	e040      	b.n	800d202 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d184:	4a26      	ldr	r2, [pc, #152]	@ (800d220 <I2C_ITSlaveCplt+0x23c>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d016      	beq.n	800d1b8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	0018      	movs	r0, r3
 800d18e:	f7ff fdf7 	bl	800cd80 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4a22      	ldr	r2, [pc, #136]	@ (800d220 <I2C_ITSlaveCplt+0x23c>)
 800d196:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2241      	movs	r2, #65	@ 0x41
 800d19c:	2120      	movs	r1, #32
 800d19e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2240      	movs	r2, #64	@ 0x40
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	f7fe ffae 	bl	800c112 <HAL_I2C_ListenCpltCallback>
}
 800d1b6:	e024      	b.n	800d202 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2241      	movs	r2, #65	@ 0x41
 800d1bc:	5c9b      	ldrb	r3, [r3, r2]
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b22      	cmp	r3, #34	@ 0x22
 800d1c2:	d10f      	bne.n	800d1e4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2241      	movs	r2, #65	@ 0x41
 800d1c8:	2120      	movs	r1, #32
 800d1ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2240      	movs	r2, #64	@ 0x40
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	0018      	movs	r0, r3
 800d1de:	f7fe ff80 	bl	800c0e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800d1e2:	e00e      	b.n	800d202 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2241      	movs	r2, #65	@ 0x41
 800d1e8:	2120      	movs	r1, #32
 800d1ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2240      	movs	r2, #64	@ 0x40
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	0018      	movs	r0, r3
 800d1fe:	f7fe ff68 	bl	800c0d2 <HAL_I2C_SlaveTxCpltCallback>
}
 800d202:	46c0      	nop			@ (mov r8, r8)
 800d204:	46bd      	mov	sp, r7
 800d206:	b006      	add	sp, #24
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	46c0      	nop			@ (mov r8, r8)
 800d20c:	00008001 	.word	0x00008001
 800d210:	00008002 	.word	0x00008002
 800d214:	fe00e800 	.word	0xfe00e800
 800d218:	ffffbfff 	.word	0xffffbfff
 800d21c:	ffff7fff 	.word	0xffff7fff
 800d220:	ffff0000 	.word	0xffff0000

0800d224 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4a26      	ldr	r2, [pc, #152]	@ (800d2cc <I2C_ITListenCplt+0xa8>)
 800d232:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2241      	movs	r2, #65	@ 0x41
 800d23e:	2120      	movs	r1, #32
 800d240:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2242      	movs	r2, #66	@ 0x42
 800d246:	2100      	movs	r1, #0
 800d248:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2200      	movs	r2, #0
 800d24e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2204      	movs	r2, #4
 800d254:	4013      	ands	r3, r2
 800d256:	d022      	beq.n	800d29e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d262:	b2d2      	uxtb	r2, r2
 800d264:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d26a:	1c5a      	adds	r2, r3, #1
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d274:	2b00      	cmp	r3, #0
 800d276:	d012      	beq.n	800d29e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d27c:	3b01      	subs	r3, #1
 800d27e:	b29a      	uxth	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d288:	b29b      	uxth	r3, r3
 800d28a:	3b01      	subs	r3, #1
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d296:	2204      	movs	r2, #4
 800d298:	431a      	orrs	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d29e:	4a0c      	ldr	r2, [pc, #48]	@ (800d2d0 <I2C_ITListenCplt+0xac>)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	0011      	movs	r1, r2
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	f000 fb03 	bl	800d8b0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2210      	movs	r2, #16
 800d2b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2240      	movs	r2, #64	@ 0x40
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	0018      	movs	r0, r3
 800d2be:	f7fe ff28 	bl	800c112 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d2c2:	46c0      	nop			@ (mov r8, r8)
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	b002      	add	sp, #8
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	46c0      	nop			@ (mov r8, r8)
 800d2cc:	ffff0000 	.word	0xffff0000
 800d2d0:	00008003 	.word	0x00008003

0800d2d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d2de:	200f      	movs	r0, #15
 800d2e0:	183b      	adds	r3, r7, r0
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	2141      	movs	r1, #65	@ 0x41
 800d2e6:	5c52      	ldrb	r2, [r2, r1]
 800d2e8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2242      	movs	r2, #66	@ 0x42
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a72      	ldr	r2, [pc, #456]	@ (800d4c0 <I2C_ITError+0x1ec>)
 800d2f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	431a      	orrs	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d30a:	183b      	adds	r3, r7, r0
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b28      	cmp	r3, #40	@ 0x28
 800d310:	d007      	beq.n	800d322 <I2C_ITError+0x4e>
 800d312:	183b      	adds	r3, r7, r0
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b29      	cmp	r3, #41	@ 0x29
 800d318:	d003      	beq.n	800d322 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d31a:	183b      	adds	r3, r7, r0
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d320:	d10c      	bne.n	800d33c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2103      	movs	r1, #3
 800d326:	0018      	movs	r0, r3
 800d328:	f000 fac2 	bl	800d8b0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2241      	movs	r2, #65	@ 0x41
 800d330:	2128      	movs	r1, #40	@ 0x28
 800d332:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a63      	ldr	r2, [pc, #396]	@ (800d4c4 <I2C_ITError+0x1f0>)
 800d338:	635a      	str	r2, [r3, #52]	@ 0x34
 800d33a:	e032      	b.n	800d3a2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d33c:	4a62      	ldr	r2, [pc, #392]	@ (800d4c8 <I2C_ITError+0x1f4>)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	0011      	movs	r1, r2
 800d342:	0018      	movs	r0, r3
 800d344:	f000 fab4 	bl	800d8b0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	0018      	movs	r0, r3
 800d34c:	f000 f8ed 	bl	800d52a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2241      	movs	r2, #65	@ 0x41
 800d354:	5c9b      	ldrb	r3, [r3, r2]
 800d356:	b2db      	uxtb	r3, r3
 800d358:	2b60      	cmp	r3, #96	@ 0x60
 800d35a:	d01f      	beq.n	800d39c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2241      	movs	r2, #65	@ 0x41
 800d360:	2120      	movs	r1, #32
 800d362:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	699b      	ldr	r3, [r3, #24]
 800d36a:	2220      	movs	r2, #32
 800d36c:	4013      	ands	r3, r2
 800d36e:	2b20      	cmp	r3, #32
 800d370:	d114      	bne.n	800d39c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	2210      	movs	r2, #16
 800d37a:	4013      	ands	r3, r2
 800d37c:	2b10      	cmp	r3, #16
 800d37e:	d109      	bne.n	800d394 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2210      	movs	r2, #16
 800d386:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d38c:	2204      	movs	r2, #4
 800d38e:	431a      	orrs	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2220      	movs	r2, #32
 800d39a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d03b      	beq.n	800d428 <I2C_ITError+0x154>
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2b11      	cmp	r3, #17
 800d3b4:	d002      	beq.n	800d3bc <I2C_ITError+0xe8>
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2b21      	cmp	r3, #33	@ 0x21
 800d3ba:	d135      	bne.n	800d428 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	2380      	movs	r3, #128	@ 0x80
 800d3c4:	01db      	lsls	r3, r3, #7
 800d3c6:	401a      	ands	r2, r3
 800d3c8:	2380      	movs	r3, #128	@ 0x80
 800d3ca:	01db      	lsls	r3, r3, #7
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d107      	bne.n	800d3e0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	493c      	ldr	r1, [pc, #240]	@ (800d4cc <I2C_ITError+0x1f8>)
 800d3dc:	400a      	ands	r2, r1
 800d3de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3e4:	0018      	movs	r0, r3
 800d3e6:	f7fd feac 	bl	800b142 <HAL_DMA_GetState>
 800d3ea:	0003      	movs	r3, r0
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d016      	beq.n	800d41e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3f4:	4a36      	ldr	r2, [pc, #216]	@ (800d4d0 <I2C_ITError+0x1fc>)
 800d3f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2240      	movs	r2, #64	@ 0x40
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d404:	0018      	movs	r0, r3
 800d406:	f7fd fda7 	bl	800af58 <HAL_DMA_Abort_IT>
 800d40a:	1e03      	subs	r3, r0, #0
 800d40c:	d051      	beq.n	800d4b2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d412:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d418:	0018      	movs	r0, r3
 800d41a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d41c:	e049      	b.n	800d4b2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	0018      	movs	r0, r3
 800d422:	f000 f859 	bl	800d4d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d426:	e044      	b.n	800d4b2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d03b      	beq.n	800d4a8 <I2C_ITError+0x1d4>
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	2b12      	cmp	r3, #18
 800d434:	d002      	beq.n	800d43c <I2C_ITError+0x168>
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	2b22      	cmp	r3, #34	@ 0x22
 800d43a:	d135      	bne.n	800d4a8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	2380      	movs	r3, #128	@ 0x80
 800d444:	021b      	lsls	r3, r3, #8
 800d446:	401a      	ands	r2, r3
 800d448:	2380      	movs	r3, #128	@ 0x80
 800d44a:	021b      	lsls	r3, r3, #8
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d107      	bne.n	800d460 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	491e      	ldr	r1, [pc, #120]	@ (800d4d4 <I2C_ITError+0x200>)
 800d45c:	400a      	ands	r2, r1
 800d45e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d464:	0018      	movs	r0, r3
 800d466:	f7fd fe6c 	bl	800b142 <HAL_DMA_GetState>
 800d46a:	0003      	movs	r3, r0
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d016      	beq.n	800d49e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d474:	4a16      	ldr	r2, [pc, #88]	@ (800d4d0 <I2C_ITError+0x1fc>)
 800d476:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2240      	movs	r2, #64	@ 0x40
 800d47c:	2100      	movs	r1, #0
 800d47e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d484:	0018      	movs	r0, r3
 800d486:	f7fd fd67 	bl	800af58 <HAL_DMA_Abort_IT>
 800d48a:	1e03      	subs	r3, r0, #0
 800d48c:	d013      	beq.n	800d4b6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d498:	0018      	movs	r0, r3
 800d49a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d49c:	e00b      	b.n	800d4b6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	f000 f819 	bl	800d4d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d4a6:	e006      	b.n	800d4b6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	0018      	movs	r0, r3
 800d4ac:	f000 f814 	bl	800d4d8 <I2C_TreatErrorCallback>
  }
}
 800d4b0:	e002      	b.n	800d4b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d4b2:	46c0      	nop			@ (mov r8, r8)
 800d4b4:	e000      	b.n	800d4b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d4b6:	46c0      	nop			@ (mov r8, r8)
}
 800d4b8:	46c0      	nop			@ (mov r8, r8)
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	b004      	add	sp, #16
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	ffff0000 	.word	0xffff0000
 800d4c4:	0800c3b9 	.word	0x0800c3b9
 800d4c8:	00008003 	.word	0x00008003
 800d4cc:	ffffbfff 	.word	0xffffbfff
 800d4d0:	0800d6e3 	.word	0x0800d6e3
 800d4d4:	ffff7fff 	.word	0xffff7fff

0800d4d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2241      	movs	r2, #65	@ 0x41
 800d4e4:	5c9b      	ldrb	r3, [r3, r2]
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	2b60      	cmp	r3, #96	@ 0x60
 800d4ea:	d10f      	bne.n	800d50c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2241      	movs	r2, #65	@ 0x41
 800d4f0:	2120      	movs	r1, #32
 800d4f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2240      	movs	r2, #64	@ 0x40
 800d4fe:	2100      	movs	r1, #0
 800d500:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	0018      	movs	r0, r3
 800d506:	f7fe fe24 	bl	800c152 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d50a:	e00a      	b.n	800d522 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2240      	movs	r2, #64	@ 0x40
 800d516:	2100      	movs	r1, #0
 800d518:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	0018      	movs	r0, r3
 800d51e:	f7fe fe10 	bl	800c142 <HAL_I2C_ErrorCallback>
}
 800d522:	46c0      	nop			@ (mov r8, r8)
 800d524:	46bd      	mov	sp, r7
 800d526:	b002      	add	sp, #8
 800d528:	bd80      	pop	{r7, pc}

0800d52a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b082      	sub	sp, #8
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	699b      	ldr	r3, [r3, #24]
 800d538:	2202      	movs	r2, #2
 800d53a:	4013      	ands	r3, r2
 800d53c:	2b02      	cmp	r3, #2
 800d53e:	d103      	bne.n	800d548 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2200      	movs	r2, #0
 800d546:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	2201      	movs	r2, #1
 800d550:	4013      	ands	r3, r2
 800d552:	2b01      	cmp	r3, #1
 800d554:	d007      	beq.n	800d566 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	699a      	ldr	r2, [r3, #24]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2101      	movs	r1, #1
 800d562:	430a      	orrs	r2, r1
 800d564:	619a      	str	r2, [r3, #24]
  }
}
 800d566:	46c0      	nop			@ (mov r8, r8)
 800d568:	46bd      	mov	sp, r7
 800d56a:	b002      	add	sp, #8
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d57c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4920      	ldr	r1, [pc, #128]	@ (800d60c <I2C_DMAMasterTransmitCplt+0x9c>)
 800d58a:	400a      	ands	r2, r1
 800d58c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d592:	b29b      	uxth	r3, r3
 800d594:	2b00      	cmp	r3, #0
 800d596:	d105      	bne.n	800d5a4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2120      	movs	r1, #32
 800d59c:	0018      	movs	r0, r3
 800d59e:	f000 f8f9 	bl	800d794 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d5a2:	e02e      	b.n	800d602 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d5ac:	189a      	adds	r2, r3, r2
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	2bff      	cmp	r3, #255	@ 0xff
 800d5ba:	d903      	bls.n	800d5c4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	22ff      	movs	r2, #255	@ 0xff
 800d5c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d5c2:	e004      	b.n	800d5ce <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d6:	0019      	movs	r1, r3
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3328      	adds	r3, #40	@ 0x28
 800d5de:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d5e4:	f7fd fc12 	bl	800ae0c <HAL_DMA_Start_IT>
 800d5e8:	1e03      	subs	r3, r0, #0
 800d5ea:	d005      	beq.n	800d5f8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2110      	movs	r1, #16
 800d5f0:	0018      	movs	r0, r3
 800d5f2:	f7ff fe6f 	bl	800d2d4 <I2C_ITError>
}
 800d5f6:	e004      	b.n	800d602 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2140      	movs	r1, #64	@ 0x40
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	f000 f8c9 	bl	800d794 <I2C_Enable_IRQ>
}
 800d602:	46c0      	nop			@ (mov r8, r8)
 800d604:	46bd      	mov	sp, r7
 800d606:	b004      	add	sp, #16
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	46c0      	nop			@ (mov r8, r8)
 800d60c:	ffffbfff 	.word	0xffffbfff

0800d610 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d61c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4920      	ldr	r1, [pc, #128]	@ (800d6ac <I2C_DMAMasterReceiveCplt+0x9c>)
 800d62a:	400a      	ands	r2, r1
 800d62c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d632:	b29b      	uxth	r3, r3
 800d634:	2b00      	cmp	r3, #0
 800d636:	d105      	bne.n	800d644 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2120      	movs	r1, #32
 800d63c:	0018      	movs	r0, r3
 800d63e:	f000 f8a9 	bl	800d794 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d642:	e02e      	b.n	800d6a2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d64c:	189a      	adds	r2, r3, r2
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d656:	b29b      	uxth	r3, r3
 800d658:	2bff      	cmp	r3, #255	@ 0xff
 800d65a:	d903      	bls.n	800d664 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	22ff      	movs	r2, #255	@ 0xff
 800d660:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d662:	e004      	b.n	800d66e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d668:	b29a      	uxth	r2, r3
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	3324      	adds	r3, #36	@ 0x24
 800d678:	0019      	movs	r1, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d67e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d684:	f7fd fbc2 	bl	800ae0c <HAL_DMA_Start_IT>
 800d688:	1e03      	subs	r3, r0, #0
 800d68a:	d005      	beq.n	800d698 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2110      	movs	r1, #16
 800d690:	0018      	movs	r0, r3
 800d692:	f7ff fe1f 	bl	800d2d4 <I2C_ITError>
}
 800d696:	e004      	b.n	800d6a2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2140      	movs	r1, #64	@ 0x40
 800d69c:	0018      	movs	r0, r3
 800d69e:	f000 f879 	bl	800d794 <I2C_Enable_IRQ>
}
 800d6a2:	46c0      	nop			@ (mov r8, r8)
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	b004      	add	sp, #16
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	46c0      	nop			@ (mov r8, r8)
 800d6ac:	ffff7fff 	.word	0xffff7fff

0800d6b0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6bc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	685a      	ldr	r2, [r3, #4]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2180      	movs	r1, #128	@ 0x80
 800d6ca:	0209      	lsls	r1, r1, #8
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2110      	movs	r1, #16
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	f7ff fdfd 	bl	800d2d4 <I2C_ITError>
}
 800d6da:	46c0      	nop			@ (mov r8, r8)
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	b004      	add	sp, #16
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b084      	sub	sp, #16
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d003      	beq.n	800d700 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d70c:	2200      	movs	r2, #0
 800d70e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	0018      	movs	r0, r3
 800d714:	f7ff fee0 	bl	800d4d8 <I2C_TreatErrorCallback>
}
 800d718:	46c0      	nop			@ (mov r8, r8)
 800d71a:	46bd      	mov	sp, r7
 800d71c:	b004      	add	sp, #16
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d720:	b590      	push	{r4, r7, lr}
 800d722:	b087      	sub	sp, #28
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	0008      	movs	r0, r1
 800d72a:	0011      	movs	r1, r2
 800d72c:	607b      	str	r3, [r7, #4]
 800d72e:	240a      	movs	r4, #10
 800d730:	193b      	adds	r3, r7, r4
 800d732:	1c02      	adds	r2, r0, #0
 800d734:	801a      	strh	r2, [r3, #0]
 800d736:	2009      	movs	r0, #9
 800d738:	183b      	adds	r3, r7, r0
 800d73a:	1c0a      	adds	r2, r1, #0
 800d73c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d73e:	193b      	adds	r3, r7, r4
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	059b      	lsls	r3, r3, #22
 800d744:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d746:	183b      	adds	r3, r7, r0
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	0419      	lsls	r1, r3, #16
 800d74c:	23ff      	movs	r3, #255	@ 0xff
 800d74e:	041b      	lsls	r3, r3, #16
 800d750:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d752:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75a:	4313      	orrs	r3, r2
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	085b      	lsrs	r3, r3, #1
 800d760:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d76a:	0d51      	lsrs	r1, r2, #21
 800d76c:	2280      	movs	r2, #128	@ 0x80
 800d76e:	00d2      	lsls	r2, r2, #3
 800d770:	400a      	ands	r2, r1
 800d772:	4907      	ldr	r1, [pc, #28]	@ (800d790 <I2C_TransferConfig+0x70>)
 800d774:	430a      	orrs	r2, r1
 800d776:	43d2      	mvns	r2, r2
 800d778:	401a      	ands	r2, r3
 800d77a:	0011      	movs	r1, r2
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	430a      	orrs	r2, r1
 800d784:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d786:	46c0      	nop			@ (mov r8, r8)
 800d788:	46bd      	mov	sp, r7
 800d78a:	b007      	add	sp, #28
 800d78c:	bd90      	pop	{r4, r7, pc}
 800d78e:	46c0      	nop			@ (mov r8, r8)
 800d790:	03ff63ff 	.word	0x03ff63ff

0800d794 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	000a      	movs	r2, r1
 800d79e:	1cbb      	adds	r3, r7, #2
 800d7a0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7aa:	4b3e      	ldr	r3, [pc, #248]	@ (800d8a4 <I2C_Enable_IRQ+0x110>)
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d035      	beq.n	800d81c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d7b4:	4b3c      	ldr	r3, [pc, #240]	@ (800d8a8 <I2C_Enable_IRQ+0x114>)
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d030      	beq.n	800d81c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d7be:	4b3b      	ldr	r3, [pc, #236]	@ (800d8ac <I2C_Enable_IRQ+0x118>)
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d02b      	beq.n	800d81c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d7c4:	1cbb      	adds	r3, r7, #2
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	5e9b      	ldrsh	r3, [r3, r2]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	da03      	bge.n	800d7d6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	22b8      	movs	r2, #184	@ 0xb8
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d7d6:	1cbb      	adds	r3, r7, #2
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	4013      	ands	r3, r2
 800d7de:	d003      	beq.n	800d7e8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	22f2      	movs	r2, #242	@ 0xf2
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d7e8:	1cbb      	adds	r3, r7, #2
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	d003      	beq.n	800d7fa <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	22f4      	movs	r2, #244	@ 0xf4
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d7fa:	1cbb      	adds	r3, r7, #2
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	2b10      	cmp	r3, #16
 800d800:	d103      	bne.n	800d80a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2290      	movs	r2, #144	@ 0x90
 800d806:	4313      	orrs	r3, r2
 800d808:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d80a:	1cbb      	adds	r3, r7, #2
 800d80c:	881b      	ldrh	r3, [r3, #0]
 800d80e:	2b20      	cmp	r3, #32
 800d810:	d13c      	bne.n	800d88c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2220      	movs	r2, #32
 800d816:	4313      	orrs	r3, r2
 800d818:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d81a:	e037      	b.n	800d88c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d81c:	1cbb      	adds	r3, r7, #2
 800d81e:	2200      	movs	r2, #0
 800d820:	5e9b      	ldrsh	r3, [r3, r2]
 800d822:	2b00      	cmp	r3, #0
 800d824:	da03      	bge.n	800d82e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	22b8      	movs	r2, #184	@ 0xb8
 800d82a:	4313      	orrs	r3, r2
 800d82c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d82e:	1cbb      	adds	r3, r7, #2
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	2201      	movs	r2, #1
 800d834:	4013      	ands	r3, r2
 800d836:	d003      	beq.n	800d840 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	22f2      	movs	r2, #242	@ 0xf2
 800d83c:	4313      	orrs	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d840:	1cbb      	adds	r3, r7, #2
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	2202      	movs	r2, #2
 800d846:	4013      	ands	r3, r2
 800d848:	d003      	beq.n	800d852 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	22f4      	movs	r2, #244	@ 0xf4
 800d84e:	4313      	orrs	r3, r2
 800d850:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d852:	1cbb      	adds	r3, r7, #2
 800d854:	881b      	ldrh	r3, [r3, #0]
 800d856:	2b10      	cmp	r3, #16
 800d858:	d103      	bne.n	800d862 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2290      	movs	r2, #144	@ 0x90
 800d85e:	4313      	orrs	r3, r2
 800d860:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d862:	1cbb      	adds	r3, r7, #2
 800d864:	881b      	ldrh	r3, [r3, #0]
 800d866:	2b20      	cmp	r3, #32
 800d868:	d103      	bne.n	800d872 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2260      	movs	r2, #96	@ 0x60
 800d86e:	4313      	orrs	r3, r2
 800d870:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d876:	4b0d      	ldr	r3, [pc, #52]	@ (800d8ac <I2C_Enable_IRQ+0x118>)
 800d878:	429a      	cmp	r2, r3
 800d87a:	d007      	beq.n	800d88c <I2C_Enable_IRQ+0xf8>
 800d87c:	1cbb      	adds	r3, r7, #2
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	2b40      	cmp	r3, #64	@ 0x40
 800d882:	d103      	bne.n	800d88c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2240      	movs	r2, #64	@ 0x40
 800d888:	4313      	orrs	r3, r2
 800d88a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6819      	ldr	r1, [r3, #0]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	430a      	orrs	r2, r1
 800d89a:	601a      	str	r2, [r3, #0]
}
 800d89c:	46c0      	nop			@ (mov r8, r8)
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	b004      	add	sp, #16
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	0800c5b9 	.word	0x0800c5b9
 800d8a8:	0800c9e9 	.word	0x0800c9e9
 800d8ac:	0800c7b1 	.word	0x0800c7b1

0800d8b0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	000a      	movs	r2, r1
 800d8ba:	1cbb      	adds	r3, r7, #2
 800d8bc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d8c2:	1cbb      	adds	r3, r7, #2
 800d8c4:	881b      	ldrh	r3, [r3, #0]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	d010      	beq.n	800d8ee <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2242      	movs	r2, #66	@ 0x42
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2241      	movs	r2, #65	@ 0x41
 800d8d8:	5c9b      	ldrb	r3, [r3, r2]
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	001a      	movs	r2, r3
 800d8de:	2328      	movs	r3, #40	@ 0x28
 800d8e0:	4013      	ands	r3, r2
 800d8e2:	2b28      	cmp	r3, #40	@ 0x28
 800d8e4:	d003      	beq.n	800d8ee <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	22b0      	movs	r2, #176	@ 0xb0
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d8ee:	1cbb      	adds	r3, r7, #2
 800d8f0:	881b      	ldrh	r3, [r3, #0]
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	4013      	ands	r3, r2
 800d8f6:	d010      	beq.n	800d91a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2244      	movs	r2, #68	@ 0x44
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2241      	movs	r2, #65	@ 0x41
 800d904:	5c9b      	ldrb	r3, [r3, r2]
 800d906:	b2db      	uxtb	r3, r3
 800d908:	001a      	movs	r2, r3
 800d90a:	2328      	movs	r3, #40	@ 0x28
 800d90c:	4013      	ands	r3, r2
 800d90e:	2b28      	cmp	r3, #40	@ 0x28
 800d910:	d003      	beq.n	800d91a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	22b0      	movs	r2, #176	@ 0xb0
 800d916:	4313      	orrs	r3, r2
 800d918:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d91a:	1cbb      	adds	r3, r7, #2
 800d91c:	2200      	movs	r2, #0
 800d91e:	5e9b      	ldrsh	r3, [r3, r2]
 800d920:	2b00      	cmp	r3, #0
 800d922:	da03      	bge.n	800d92c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	22b8      	movs	r2, #184	@ 0xb8
 800d928:	4313      	orrs	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d92c:	1cbb      	adds	r3, r7, #2
 800d92e:	881b      	ldrh	r3, [r3, #0]
 800d930:	2b10      	cmp	r3, #16
 800d932:	d103      	bne.n	800d93c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2290      	movs	r2, #144	@ 0x90
 800d938:	4313      	orrs	r3, r2
 800d93a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d93c:	1cbb      	adds	r3, r7, #2
 800d93e:	881b      	ldrh	r3, [r3, #0]
 800d940:	2b20      	cmp	r3, #32
 800d942:	d103      	bne.n	800d94c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2220      	movs	r2, #32
 800d948:	4313      	orrs	r3, r2
 800d94a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d94c:	1cbb      	adds	r3, r7, #2
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	2b40      	cmp	r3, #64	@ 0x40
 800d952:	d103      	bne.n	800d95c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2240      	movs	r2, #64	@ 0x40
 800d958:	4313      	orrs	r3, r2
 800d95a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	43d9      	mvns	r1, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	400a      	ands	r2, r1
 800d96c:	601a      	str	r2, [r3, #0]
}
 800d96e:	46c0      	nop			@ (mov r8, r8)
 800d970:	46bd      	mov	sp, r7
 800d972:	b004      	add	sp, #16
 800d974:	bd80      	pop	{r7, pc}
	...

0800d978 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2241      	movs	r2, #65	@ 0x41
 800d986:	5c9b      	ldrb	r3, [r3, r2]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	2b20      	cmp	r3, #32
 800d98c:	d138      	bne.n	800da00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2240      	movs	r2, #64	@ 0x40
 800d992:	5c9b      	ldrb	r3, [r3, r2]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d101      	bne.n	800d99c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d998:	2302      	movs	r3, #2
 800d99a:	e032      	b.n	800da02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2240      	movs	r2, #64	@ 0x40
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2241      	movs	r2, #65	@ 0x41
 800d9a8:	2124      	movs	r1, #36	@ 0x24
 800d9aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2101      	movs	r1, #1
 800d9b8:	438a      	bics	r2, r1
 800d9ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4911      	ldr	r1, [pc, #68]	@ (800da0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d9c8:	400a      	ands	r2, r1
 800d9ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	6819      	ldr	r1, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	683a      	ldr	r2, [r7, #0]
 800d9d8:	430a      	orrs	r2, r1
 800d9da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2101      	movs	r1, #1
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2241      	movs	r2, #65	@ 0x41
 800d9f0:	2120      	movs	r1, #32
 800d9f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2240      	movs	r2, #64	@ 0x40
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	e000      	b.n	800da02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800da00:	2302      	movs	r3, #2
  }
}
 800da02:	0018      	movs	r0, r3
 800da04:	46bd      	mov	sp, r7
 800da06:	b002      	add	sp, #8
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	46c0      	nop			@ (mov r8, r8)
 800da0c:	ffffefff 	.word	0xffffefff

0800da10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2241      	movs	r2, #65	@ 0x41
 800da1e:	5c9b      	ldrb	r3, [r3, r2]
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b20      	cmp	r3, #32
 800da24:	d139      	bne.n	800da9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2240      	movs	r2, #64	@ 0x40
 800da2a:	5c9b      	ldrb	r3, [r3, r2]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d101      	bne.n	800da34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800da30:	2302      	movs	r3, #2
 800da32:	e033      	b.n	800da9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2240      	movs	r2, #64	@ 0x40
 800da38:	2101      	movs	r1, #1
 800da3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2241      	movs	r2, #65	@ 0x41
 800da40:	2124      	movs	r1, #36	@ 0x24
 800da42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2101      	movs	r1, #1
 800da50:	438a      	bics	r2, r1
 800da52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	4a11      	ldr	r2, [pc, #68]	@ (800daa4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800da60:	4013      	ands	r3, r2
 800da62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	021b      	lsls	r3, r3, #8
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	68fa      	ldr	r2, [r7, #12]
 800da74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2101      	movs	r1, #1
 800da82:	430a      	orrs	r2, r1
 800da84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2241      	movs	r2, #65	@ 0x41
 800da8a:	2120      	movs	r1, #32
 800da8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2240      	movs	r2, #64	@ 0x40
 800da92:	2100      	movs	r1, #0
 800da94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800da96:	2300      	movs	r3, #0
 800da98:	e000      	b.n	800da9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800da9a:	2302      	movs	r3, #2
  }
}
 800da9c:	0018      	movs	r0, r3
 800da9e:	46bd      	mov	sp, r7
 800daa0:	b004      	add	sp, #16
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	fffff0ff 	.word	0xfffff0ff

0800daa8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b088      	sub	sp, #32
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800dab6:	2301      	movs	r3, #1
 800dab8:	e0e1      	b.n	800dc7e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2235      	movs	r2, #53	@ 0x35
 800dabe:	5c9b      	ldrb	r3, [r3, r2]
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d107      	bne.n	800dad6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2234      	movs	r2, #52	@ 0x34
 800daca:	2100      	movs	r1, #0
 800dacc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	0018      	movs	r0, r3
 800dad2:	f7f8 fbd5 	bl	8006280 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2235      	movs	r2, #53	@ 0x35
 800dada:	2102      	movs	r1, #2
 800dadc:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69da      	ldr	r2, [r3, #28]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4967      	ldr	r1, [pc, #412]	@ (800dc88 <HAL_I2S_Init+0x1e0>)
 800daea:	400a      	ands	r2, r1
 800daec:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2202      	movs	r2, #2
 800daf4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	695b      	ldr	r3, [r3, #20]
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d073      	beq.n	800dbe6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d102      	bne.n	800db0c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800db06:	2310      	movs	r3, #16
 800db08:	617b      	str	r3, [r7, #20]
 800db0a:	e001      	b.n	800db10 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800db0c:	2320      	movs	r3, #32
 800db0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	2b20      	cmp	r3, #32
 800db16:	d802      	bhi.n	800db1e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	005b      	lsls	r3, r3, #1
 800db1c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800db1e:	f002 fe8d 	bl	801083c <HAL_RCC_GetSysClockFreq>
 800db22:	0003      	movs	r3, r0
 800db24:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	691a      	ldr	r2, [r3, #16]
 800db2a:	2380      	movs	r3, #128	@ 0x80
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	429a      	cmp	r2, r3
 800db30:	d131      	bne.n	800db96 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d016      	beq.n	800db68 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	0019      	movs	r1, r3
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f7f2 fafd 	bl	8000140 <__udivsi3>
 800db46:	0003      	movs	r3, r0
 800db48:	001a      	movs	r2, r3
 800db4a:	0013      	movs	r3, r2
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	189b      	adds	r3, r3, r2
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	001a      	movs	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	695b      	ldr	r3, [r3, #20]
 800db58:	0019      	movs	r1, r3
 800db5a:	0010      	movs	r0, r2
 800db5c:	f7f2 faf0 	bl	8000140 <__udivsi3>
 800db60:	0003      	movs	r3, r0
 800db62:	3305      	adds	r3, #5
 800db64:	613b      	str	r3, [r7, #16]
 800db66:	e02a      	b.n	800dbbe <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	0019      	movs	r1, r3
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f7f2 fae6 	bl	8000140 <__udivsi3>
 800db74:	0003      	movs	r3, r0
 800db76:	001a      	movs	r2, r3
 800db78:	0013      	movs	r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	189b      	adds	r3, r3, r2
 800db7e:	005b      	lsls	r3, r3, #1
 800db80:	001a      	movs	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	695b      	ldr	r3, [r3, #20]
 800db86:	0019      	movs	r1, r3
 800db88:	0010      	movs	r0, r2
 800db8a:	f7f2 fad9 	bl	8000140 <__udivsi3>
 800db8e:	0003      	movs	r3, r0
 800db90:	3305      	adds	r3, #5
 800db92:	613b      	str	r3, [r7, #16]
 800db94:	e013      	b.n	800dbbe <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800db96:	6979      	ldr	r1, [r7, #20]
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7f2 fad1 	bl	8000140 <__udivsi3>
 800db9e:	0003      	movs	r3, r0
 800dba0:	001a      	movs	r2, r3
 800dba2:	0013      	movs	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	189b      	adds	r3, r3, r2
 800dba8:	005b      	lsls	r3, r3, #1
 800dbaa:	001a      	movs	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	695b      	ldr	r3, [r3, #20]
 800dbb0:	0019      	movs	r1, r3
 800dbb2:	0010      	movs	r0, r2
 800dbb4:	f7f2 fac4 	bl	8000140 <__udivsi3>
 800dbb8:	0003      	movs	r3, r0
 800dbba:	3305      	adds	r3, #5
 800dbbc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	210a      	movs	r1, #10
 800dbc2:	0018      	movs	r0, r3
 800dbc4:	f7f2 fabc 	bl	8000140 <__udivsi3>
 800dbc8:	0003      	movs	r3, r0
 800dbca:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	1ad3      	subs	r3, r2, r3
 800dbda:	085b      	lsrs	r3, r3, #1
 800dbdc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	021b      	lsls	r3, r3, #8
 800dbe2:	61bb      	str	r3, [r7, #24]
 800dbe4:	e003      	b.n	800dbee <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800dbe6:	2302      	movs	r3, #2
 800dbe8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800dbea:	2300      	movs	r3, #0
 800dbec:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d902      	bls.n	800dbfa <HAL_I2S_Init+0x152>
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	2bff      	cmp	r3, #255	@ 0xff
 800dbf8:	d907      	bls.n	800dc0a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbfe:	2210      	movs	r2, #16
 800dc00:	431a      	orrs	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800dc06:	2301      	movs	r3, #1
 800dc08:	e039      	b.n	800dc7e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	691a      	ldr	r2, [r3, #16]
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	431a      	orrs	r2, r3
 800dc12:	0011      	movs	r1, r2
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	69fa      	ldr	r2, [r7, #28]
 800dc1a:	430a      	orrs	r2, r1
 800dc1c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	69db      	ldr	r3, [r3, #28]
 800dc24:	4a18      	ldr	r2, [pc, #96]	@ (800dc88 <HAL_I2S_Init+0x1e0>)
 800dc26:	401a      	ands	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6859      	ldr	r1, [r3, #4]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	4319      	orrs	r1, r3
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	4319      	orrs	r1, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	430b      	orrs	r3, r1
 800dc3e:	431a      	orrs	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2180      	movs	r1, #128	@ 0x80
 800dc46:	0109      	lsls	r1, r1, #4
 800dc48:	430a      	orrs	r2, r1
 800dc4a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	2b30      	cmp	r3, #48	@ 0x30
 800dc52:	d003      	beq.n	800dc5c <HAL_I2S_Init+0x1b4>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	2bb0      	cmp	r3, #176	@ 0xb0
 800dc5a:	d108      	bne.n	800dc6e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	69da      	ldr	r2, [r3, #28]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2180      	movs	r1, #128	@ 0x80
 800dc68:	0149      	lsls	r1, r1, #5
 800dc6a:	430a      	orrs	r2, r1
 800dc6c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2235      	movs	r2, #53	@ 0x35
 800dc78:	2101      	movs	r1, #1
 800dc7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	0018      	movs	r0, r3
 800dc80:	46bd      	mov	sp, r7
 800dc82:	b008      	add	sp, #32
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	46c0      	nop			@ (mov r8, r8)
 800dc88:	fffff040 	.word	0xfffff040

0800dc8c <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d101      	bne.n	800dc9e <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e01b      	b.n	800dcd6 <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2235      	movs	r2, #53	@ 0x35
 800dca2:	2102      	movs	r1, #2
 800dca4:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	69da      	ldr	r2, [r3, #28]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	490b      	ldr	r1, [pc, #44]	@ (800dce0 <HAL_I2S_DeInit+0x54>)
 800dcb2:	400a      	ands	r2, r1
 800dcb4:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	0018      	movs	r0, r3
 800dcba:	f7f8 fb55 	bl	8006368 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2235      	movs	r2, #53	@ 0x35
 800dcc8:	2100      	movs	r1, #0
 800dcca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2234      	movs	r2, #52	@ 0x34
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	0018      	movs	r0, r3
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	b002      	add	sp, #8
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	46c0      	nop			@ (mov r8, r8)
 800dce0:	fffffbff 	.word	0xfffffbff

0800dce4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	1dbb      	adds	r3, r7, #6
 800dcf0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d003      	beq.n	800dd00 <HAL_I2S_Receive_DMA+0x1c>
 800dcf8:	1dbb      	adds	r3, r7, #6
 800dcfa:	881b      	ldrh	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d101      	bne.n	800dd04 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	e0a6      	b.n	800de52 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2234      	movs	r2, #52	@ 0x34
 800dd08:	5c9b      	ldrb	r3, [r3, r2]
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d101      	bne.n	800dd14 <HAL_I2S_Receive_DMA+0x30>
 800dd10:	2302      	movs	r3, #2
 800dd12:	e09e      	b.n	800de52 <HAL_I2S_Receive_DMA+0x16e>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2234      	movs	r2, #52	@ 0x34
 800dd18:	2101      	movs	r1, #1
 800dd1a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2235      	movs	r2, #53	@ 0x35
 800dd20:	5c9b      	ldrb	r3, [r3, r2]
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d005      	beq.n	800dd34 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2234      	movs	r2, #52	@ 0x34
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800dd30:	2302      	movs	r3, #2
 800dd32:	e08e      	b.n	800de52 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2235      	movs	r2, #53	@ 0x35
 800dd38:	2104      	movs	r1, #4
 800dd3a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	69db      	ldr	r3, [r3, #28]
 800dd4e:	2207      	movs	r2, #7
 800dd50:	4013      	ands	r3, r2
 800dd52:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2b03      	cmp	r3, #3
 800dd58:	d002      	beq.n	800dd60 <HAL_I2S_Receive_DMA+0x7c>
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2b05      	cmp	r3, #5
 800dd5e:	d10c      	bne.n	800dd7a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800dd60:	1dbb      	adds	r3, r7, #6
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	18db      	adds	r3, r3, r3
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800dd6c:	1dbb      	adds	r3, r7, #6
 800dd6e:	881b      	ldrh	r3, [r3, #0]
 800dd70:	18db      	adds	r3, r3, r3
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dd78:	e007      	b.n	800dd8a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	1dba      	adds	r2, r7, #6
 800dd7e:	8812      	ldrh	r2, [r2, #0]
 800dd80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	1dba      	adds	r2, r7, #6
 800dd86:	8812      	ldrh	r2, [r2, #0]
 800dd88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd8e:	4a33      	ldr	r2, [pc, #204]	@ (800de5c <HAL_I2S_Receive_DMA+0x178>)
 800dd90:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd96:	4a32      	ldr	r2, [pc, #200]	@ (800de60 <HAL_I2S_Receive_DMA+0x17c>)
 800dd98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd9e:	4a31      	ldr	r2, [pc, #196]	@ (800de64 <HAL_I2S_Receive_DMA+0x180>)
 800dda0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	69da      	ldr	r2, [r3, #28]
 800dda8:	23c0      	movs	r3, #192	@ 0xc0
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	401a      	ands	r2, r3
 800ddae:	23c0      	movs	r3, #192	@ 0xc0
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d10a      	bne.n	800ddcc <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	613b      	str	r3, [r7, #16]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	613b      	str	r3, [r7, #16]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	613b      	str	r3, [r7, #16]
 800ddca:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	330c      	adds	r3, #12
 800ddd6:	0019      	movs	r1, r3
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dddc:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dde2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800dde4:	f7fd f812 	bl	800ae0c <HAL_DMA_Start_IT>
 800dde8:	1e03      	subs	r3, r0, #0
 800ddea:	d00f      	beq.n	800de0c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddf0:	2208      	movs	r2, #8
 800ddf2:	431a      	orrs	r2, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2235      	movs	r2, #53	@ 0x35
 800ddfc:	2101      	movs	r1, #1
 800ddfe:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2234      	movs	r2, #52	@ 0x34
 800de04:	2100      	movs	r1, #0
 800de06:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800de08:	2301      	movs	r3, #1
 800de0a:	e022      	b.n	800de52 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	69da      	ldr	r2, [r3, #28]
 800de12:	2380      	movs	r3, #128	@ 0x80
 800de14:	00db      	lsls	r3, r3, #3
 800de16:	4013      	ands	r3, r2
 800de18:	d108      	bne.n	800de2c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	69da      	ldr	r2, [r3, #28]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2180      	movs	r1, #128	@ 0x80
 800de26:	00c9      	lsls	r1, r1, #3
 800de28:	430a      	orrs	r2, r1
 800de2a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	4013      	ands	r3, r2
 800de36:	d107      	bne.n	800de48 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	685a      	ldr	r2, [r3, #4]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2101      	movs	r1, #1
 800de44:	430a      	orrs	r2, r1
 800de46:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2234      	movs	r2, #52	@ 0x34
 800de4c:	2100      	movs	r1, #0
 800de4e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800de50:	2300      	movs	r3, #0
}
 800de52:	0018      	movs	r0, r3
 800de54:	46bd      	mov	sp, r7
 800de56:	b006      	add	sp, #24
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	46c0      	nop			@ (mov r8, r8)
 800de5c:	0800e065 	.word	0x0800e065
 800de60:	0800e021 	.word	0x0800e021
 800de64:	0800e083 	.word	0x0800e083

0800de68 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de70:	2317      	movs	r3, #23
 800de72:	18fb      	adds	r3, r7, r3
 800de74:	2200      	movs	r2, #0
 800de76:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	685a      	ldr	r2, [r3, #4]
 800de7c:	2380      	movs	r3, #128	@ 0x80
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	429a      	cmp	r2, r3
 800de82:	d003      	beq.n	800de8c <HAL_I2S_DMAStop+0x24>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d158      	bne.n	800df3e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de90:	2b00      	cmp	r3, #0
 800de92:	d010      	beq.n	800deb6 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de98:	0018      	movs	r0, r3
 800de9a:	f7fd f81d 	bl	800aed8 <HAL_DMA_Abort>
 800de9e:	1e03      	subs	r3, r0, #0
 800dea0:	d009      	beq.n	800deb6 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dea6:	2208      	movs	r2, #8
 800dea8:	431a      	orrs	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800deae:	2317      	movs	r3, #23
 800deb0:	18fb      	adds	r3, r7, r3
 800deb2:	2201      	movs	r2, #1
 800deb4:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	2364      	movs	r3, #100	@ 0x64
 800deba:	2201      	movs	r2, #1
 800debc:	2102      	movs	r1, #2
 800debe:	f000 f907 	bl	800e0d0 <I2S_WaitFlagStateUntilTimeout>
 800dec2:	1e03      	subs	r3, r0, #0
 800dec4:	d00d      	beq.n	800dee2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800deca:	2201      	movs	r2, #1
 800decc:	431a      	orrs	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2235      	movs	r2, #53	@ 0x35
 800ded6:	2101      	movs	r1, #1
 800ded8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800deda:	2317      	movs	r3, #23
 800dedc:	18fb      	adds	r3, r7, r3
 800dede:	2201      	movs	r2, #1
 800dee0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	2364      	movs	r3, #100	@ 0x64
 800dee6:	2200      	movs	r2, #0
 800dee8:	2180      	movs	r1, #128	@ 0x80
 800deea:	f000 f8f1 	bl	800e0d0 <I2S_WaitFlagStateUntilTimeout>
 800deee:	1e03      	subs	r3, r0, #0
 800def0:	d00d      	beq.n	800df0e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800def6:	2201      	movs	r2, #1
 800def8:	431a      	orrs	r2, r3
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2235      	movs	r2, #53	@ 0x35
 800df02:	2101      	movs	r1, #1
 800df04:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800df06:	2317      	movs	r3, #23
 800df08:	18fb      	adds	r3, r7, r3
 800df0a:	2201      	movs	r2, #1
 800df0c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	69da      	ldr	r2, [r3, #28]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4938      	ldr	r1, [pc, #224]	@ (800dffc <HAL_I2S_DMAStop+0x194>)
 800df1a:	400a      	ands	r2, r1
 800df1c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800df1e:	2300      	movs	r3, #0
 800df20:	613b      	str	r3, [r7, #16]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	613b      	str	r3, [r7, #16]
 800df2a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	685a      	ldr	r2, [r3, #4]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2102      	movs	r1, #2
 800df38:	438a      	bics	r2, r1
 800df3a:	605a      	str	r2, [r3, #4]
 800df3c:	e053      	b.n	800dfe6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	23c0      	movs	r3, #192	@ 0xc0
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	429a      	cmp	r2, r3
 800df48:	d005      	beq.n	800df56 <HAL_I2S_DMAStop+0xee>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	685a      	ldr	r2, [r3, #4]
 800df4e:	2380      	movs	r3, #128	@ 0x80
 800df50:	005b      	lsls	r3, r3, #1
 800df52:	429a      	cmp	r2, r3
 800df54:	d147      	bne.n	800dfe6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d010      	beq.n	800df80 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df62:	0018      	movs	r0, r3
 800df64:	f7fc ffb8 	bl	800aed8 <HAL_DMA_Abort>
 800df68:	1e03      	subs	r3, r0, #0
 800df6a:	d009      	beq.n	800df80 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df70:	2208      	movs	r2, #8
 800df72:	431a      	orrs	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800df78:	2317      	movs	r3, #23
 800df7a:	18fb      	adds	r3, r7, r3
 800df7c:	2201      	movs	r2, #1
 800df7e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	69da      	ldr	r2, [r3, #28]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	491c      	ldr	r1, [pc, #112]	@ (800dffc <HAL_I2S_DMAStop+0x194>)
 800df8c:	400a      	ands	r2, r1
 800df8e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800df90:	2300      	movs	r3, #0
 800df92:	60fb      	str	r3, [r7, #12]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	60fb      	str	r3, [r7, #12]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	60fb      	str	r3, [r7, #12]
 800dfa4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	685a      	ldr	r2, [r3, #4]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2101      	movs	r1, #1
 800dfb2:	438a      	bics	r2, r1
 800dfb4:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	685a      	ldr	r2, [r3, #4]
 800dfba:	2380      	movs	r3, #128	@ 0x80
 800dfbc:	005b      	lsls	r3, r3, #1
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d10e      	bne.n	800dfe0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfc6:	2240      	movs	r2, #64	@ 0x40
 800dfc8:	431a      	orrs	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2235      	movs	r2, #53	@ 0x35
 800dfd2:	2101      	movs	r1, #1
 800dfd4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800dfd6:	2317      	movs	r3, #23
 800dfd8:	18fb      	adds	r3, r7, r3
 800dfda:	2201      	movs	r2, #1
 800dfdc:	701a      	strb	r2, [r3, #0]
 800dfde:	e002      	b.n	800dfe6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2235      	movs	r2, #53	@ 0x35
 800dfea:	2101      	movs	r1, #1
 800dfec:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800dfee:	2317      	movs	r3, #23
 800dff0:	18fb      	adds	r3, r7, r3
 800dff2:	781b      	ldrb	r3, [r3, #0]
}
 800dff4:	0018      	movs	r0, r3
 800dff6:	46bd      	mov	sp, r7
 800dff8:	b006      	add	sp, #24
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	fffffbff 	.word	0xfffffbff

0800e000 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e008:	46c0      	nop			@ (mov r8, r8)
 800e00a:	46bd      	mov	sp, r7
 800e00c:	b002      	add	sp, #8
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800e018:	46c0      	nop			@ (mov r8, r8)
 800e01a:	46bd      	mov	sp, r7
 800e01c:	b002      	add	sp, #8
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e02c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	69db      	ldr	r3, [r3, #28]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10e      	bne.n	800e054 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2101      	movs	r1, #1
 800e042:	438a      	bics	r2, r1
 800e044:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2200      	movs	r2, #0
 800e04a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2235      	movs	r2, #53	@ 0x35
 800e050:	2101      	movs	r1, #1
 800e052:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	0018      	movs	r0, r3
 800e058:	f7f9 f9b6 	bl	80073c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800e05c:	46c0      	nop			@ (mov r8, r8)
 800e05e:	46bd      	mov	sp, r7
 800e060:	b004      	add	sp, #16
 800e062:	bd80      	pop	{r7, pc}

0800e064 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e070:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	0018      	movs	r0, r3
 800e076:	f7ff ffc3 	bl	800e000 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800e07a:	46c0      	nop			@ (mov r8, r8)
 800e07c:	46bd      	mov	sp, r7
 800e07e:	b004      	add	sp, #16
 800e080:	bd80      	pop	{r7, pc}

0800e082 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e08e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	685a      	ldr	r2, [r3, #4]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2103      	movs	r1, #3
 800e09c:	438a      	bics	r2, r1
 800e09e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2235      	movs	r2, #53	@ 0x35
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0b8:	2208      	movs	r2, #8
 800e0ba:	431a      	orrs	r2, r3
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	0018      	movs	r0, r3
 800e0c4:	f7ff ffa4 	bl	800e010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800e0c8:	46c0      	nop			@ (mov r8, r8)
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	b004      	add	sp, #16
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	1dfb      	adds	r3, r7, #7
 800e0de:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800e0e0:	f7fc f916 	bl	800a310 <HAL_GetTick>
 800e0e4:	0003      	movs	r3, r0
 800e0e6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800e0e8:	e017      	b.n	800e11a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	d014      	beq.n	800e11a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800e0f0:	f7fc f90e 	bl	800a310 <HAL_GetTick>
 800e0f4:	0002      	movs	r2, r0
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	1ad3      	subs	r3, r2, r3
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d902      	bls.n	800e106 <I2S_WaitFlagStateUntilTimeout+0x36>
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d109      	bne.n	800e11a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2235      	movs	r2, #53	@ 0x35
 800e10a:	2101      	movs	r1, #1
 800e10c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2234      	movs	r2, #52	@ 0x34
 800e112:	2100      	movs	r1, #0
 800e114:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e116:	2303      	movs	r3, #3
 800e118:	e00f      	b.n	800e13a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	4013      	ands	r3, r2
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	425a      	negs	r2, r3
 800e12a:	4153      	adcs	r3, r2
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	001a      	movs	r2, r3
 800e130:	1dfb      	adds	r3, r7, #7
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	429a      	cmp	r2, r3
 800e136:	d1d8      	bne.n	800e0ea <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800e138:	2300      	movs	r3, #0
}
 800e13a:	0018      	movs	r0, r3
 800e13c:	46bd      	mov	sp, r7
 800e13e:	b006      	add	sp, #24
 800e140:	bd80      	pop	{r7, pc}
	...

0800e144 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e146:	b08b      	sub	sp, #44	@ 0x2c
 800e148:	af06      	add	r7, sp, #24
 800e14a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	e0f0      	b.n	800e338 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a79      	ldr	r2, [pc, #484]	@ (800e340 <HAL_PCD_Init+0x1fc>)
 800e15a:	5c9b      	ldrb	r3, [r3, r2]
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d108      	bne.n	800e174 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	23aa      	movs	r3, #170	@ 0xaa
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	2100      	movs	r1, #0
 800e16a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	0018      	movs	r0, r3
 800e170:	f009 f8d8 	bl	8017324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a72      	ldr	r2, [pc, #456]	@ (800e340 <HAL_PCD_Init+0x1fc>)
 800e178:	2103      	movs	r1, #3
 800e17a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	0018      	movs	r0, r3
 800e182:	f005 f88b 	bl	801329c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e186:	230f      	movs	r3, #15
 800e188:	18fb      	adds	r3, r7, r3
 800e18a:	2200      	movs	r2, #0
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	e049      	b.n	800e224 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e190:	200f      	movs	r0, #15
 800e192:	183b      	adds	r3, r7, r0
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	6879      	ldr	r1, [r7, #4]
 800e198:	1c5a      	adds	r2, r3, #1
 800e19a:	0013      	movs	r3, r2
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	189b      	adds	r3, r3, r2
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	18cb      	adds	r3, r1, r3
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e1aa:	183b      	adds	r3, r7, r0
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	6879      	ldr	r1, [r7, #4]
 800e1b0:	1c5a      	adds	r2, r3, #1
 800e1b2:	0013      	movs	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	189b      	adds	r3, r3, r2
 800e1b8:	00db      	lsls	r3, r3, #3
 800e1ba:	183a      	adds	r2, r7, r0
 800e1bc:	7812      	ldrb	r2, [r2, #0]
 800e1be:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e1c0:	183b      	adds	r3, r7, r0
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	6879      	ldr	r1, [r7, #4]
 800e1c6:	1c5a      	adds	r2, r3, #1
 800e1c8:	0013      	movs	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	189b      	adds	r3, r3, r2
 800e1ce:	00db      	lsls	r3, r3, #3
 800e1d0:	18cb      	adds	r3, r1, r3
 800e1d2:	3303      	adds	r3, #3
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e1d8:	183b      	adds	r3, r7, r0
 800e1da:	781a      	ldrb	r2, [r3, #0]
 800e1dc:	6879      	ldr	r1, [r7, #4]
 800e1de:	0013      	movs	r3, r2
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	189b      	adds	r3, r3, r2
 800e1e4:	00db      	lsls	r3, r3, #3
 800e1e6:	18cb      	adds	r3, r1, r3
 800e1e8:	3338      	adds	r3, #56	@ 0x38
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e1ee:	183b      	adds	r3, r7, r0
 800e1f0:	781a      	ldrb	r2, [r3, #0]
 800e1f2:	6879      	ldr	r1, [r7, #4]
 800e1f4:	0013      	movs	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	189b      	adds	r3, r3, r2
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	18cb      	adds	r3, r1, r3
 800e1fe:	333c      	adds	r3, #60	@ 0x3c
 800e200:	2200      	movs	r2, #0
 800e202:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e204:	183b      	adds	r3, r7, r0
 800e206:	781a      	ldrb	r2, [r3, #0]
 800e208:	6879      	ldr	r1, [r7, #4]
 800e20a:	0013      	movs	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	189b      	adds	r3, r3, r2
 800e210:	00db      	lsls	r3, r3, #3
 800e212:	18cb      	adds	r3, r1, r3
 800e214:	3340      	adds	r3, #64	@ 0x40
 800e216:	2200      	movs	r2, #0
 800e218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e21a:	183b      	adds	r3, r7, r0
 800e21c:	781a      	ldrb	r2, [r3, #0]
 800e21e:	183b      	adds	r3, r7, r0
 800e220:	3201      	adds	r2, #1
 800e222:	701a      	strb	r2, [r3, #0]
 800e224:	210f      	movs	r1, #15
 800e226:	187b      	adds	r3, r7, r1
 800e228:	781a      	ldrb	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d3ae      	bcc.n	800e190 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e232:	187b      	adds	r3, r7, r1
 800e234:	2200      	movs	r2, #0
 800e236:	701a      	strb	r2, [r3, #0]
 800e238:	e056      	b.n	800e2e8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e23a:	240f      	movs	r4, #15
 800e23c:	193b      	adds	r3, r7, r4
 800e23e:	781a      	ldrb	r2, [r3, #0]
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	236a      	movs	r3, #106	@ 0x6a
 800e244:	33ff      	adds	r3, #255	@ 0xff
 800e246:	0019      	movs	r1, r3
 800e248:	0013      	movs	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	189b      	adds	r3, r3, r2
 800e24e:	00db      	lsls	r3, r3, #3
 800e250:	18c3      	adds	r3, r0, r3
 800e252:	185b      	adds	r3, r3, r1
 800e254:	2200      	movs	r2, #0
 800e256:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e258:	193b      	adds	r3, r7, r4
 800e25a:	781a      	ldrb	r2, [r3, #0]
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	23b4      	movs	r3, #180	@ 0xb4
 800e260:	0059      	lsls	r1, r3, #1
 800e262:	0013      	movs	r3, r2
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	189b      	adds	r3, r3, r2
 800e268:	00db      	lsls	r3, r3, #3
 800e26a:	18c3      	adds	r3, r0, r3
 800e26c:	185b      	adds	r3, r3, r1
 800e26e:	193a      	adds	r2, r7, r4
 800e270:	7812      	ldrb	r2, [r2, #0]
 800e272:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e274:	193b      	adds	r3, r7, r4
 800e276:	781a      	ldrb	r2, [r3, #0]
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	236c      	movs	r3, #108	@ 0x6c
 800e27c:	33ff      	adds	r3, #255	@ 0xff
 800e27e:	0019      	movs	r1, r3
 800e280:	0013      	movs	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	189b      	adds	r3, r3, r2
 800e286:	00db      	lsls	r3, r3, #3
 800e288:	18c3      	adds	r3, r0, r3
 800e28a:	185b      	adds	r3, r3, r1
 800e28c:	2200      	movs	r2, #0
 800e28e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e290:	193b      	adds	r3, r7, r4
 800e292:	781a      	ldrb	r2, [r3, #0]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	23bc      	movs	r3, #188	@ 0xbc
 800e298:	0059      	lsls	r1, r3, #1
 800e29a:	0013      	movs	r3, r2
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	189b      	adds	r3, r3, r2
 800e2a0:	00db      	lsls	r3, r3, #3
 800e2a2:	18c3      	adds	r3, r0, r3
 800e2a4:	185b      	adds	r3, r3, r1
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e2aa:	193b      	adds	r3, r7, r4
 800e2ac:	781a      	ldrb	r2, [r3, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	23be      	movs	r3, #190	@ 0xbe
 800e2b2:	0059      	lsls	r1, r3, #1
 800e2b4:	0013      	movs	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	189b      	adds	r3, r3, r2
 800e2ba:	00db      	lsls	r3, r3, #3
 800e2bc:	18c3      	adds	r3, r0, r3
 800e2be:	185b      	adds	r3, r3, r1
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e2c4:	193b      	adds	r3, r7, r4
 800e2c6:	781a      	ldrb	r2, [r3, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	23c0      	movs	r3, #192	@ 0xc0
 800e2cc:	0059      	lsls	r1, r3, #1
 800e2ce:	0013      	movs	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	189b      	adds	r3, r3, r2
 800e2d4:	00db      	lsls	r3, r3, #3
 800e2d6:	18c3      	adds	r3, r0, r3
 800e2d8:	185b      	adds	r3, r3, r1
 800e2da:	2200      	movs	r2, #0
 800e2dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e2de:	193b      	adds	r3, r7, r4
 800e2e0:	781a      	ldrb	r2, [r3, #0]
 800e2e2:	193b      	adds	r3, r7, r4
 800e2e4:	3201      	adds	r2, #1
 800e2e6:	701a      	strb	r2, [r3, #0]
 800e2e8:	230f      	movs	r3, #15
 800e2ea:	18fb      	adds	r3, r7, r3
 800e2ec:	781a      	ldrb	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d3a1      	bcc.n	800e23a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6818      	ldr	r0, [r3, #0]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	466a      	mov	r2, sp
 800e2fe:	0011      	movs	r1, r2
 800e300:	001a      	movs	r2, r3
 800e302:	3210      	adds	r2, #16
 800e304:	ca70      	ldmia	r2!, {r4, r5, r6}
 800e306:	c170      	stmia	r1!, {r4, r5, r6}
 800e308:	ca30      	ldmia	r2!, {r4, r5}
 800e30a:	c130      	stmia	r1!, {r4, r5}
 800e30c:	6859      	ldr	r1, [r3, #4]
 800e30e:	689a      	ldr	r2, [r3, #8]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	f004 ffdd 	bl	80132d0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2224      	movs	r2, #36	@ 0x24
 800e31a:	2100      	movs	r1, #0
 800e31c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4a07      	ldr	r2, [pc, #28]	@ (800e340 <HAL_PCD_Init+0x1fc>)
 800e322:	2101      	movs	r1, #1
 800e324:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d103      	bne.n	800e336 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	0018      	movs	r0, r3
 800e332:	f001 fd23 	bl	800fd7c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	0018      	movs	r0, r3
 800e33a:	46bd      	mov	sp, r7
 800e33c:	b005      	add	sp, #20
 800e33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e340:	000002a9 	.word	0x000002a9

0800e344 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	23aa      	movs	r3, #170	@ 0xaa
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	5cd3      	ldrb	r3, [r2, r3]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d101      	bne.n	800e35c <HAL_PCD_Start+0x18>
 800e358:	2302      	movs	r3, #2
 800e35a:	e014      	b.n	800e386 <HAL_PCD_Start+0x42>
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	23aa      	movs	r3, #170	@ 0xaa
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	2101      	movs	r1, #1
 800e364:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	0018      	movs	r0, r3
 800e36c:	f004 ff80 	bl	8013270 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	0018      	movs	r0, r3
 800e376:	f006 ff83 	bl	8015280 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	23aa      	movs	r3, #170	@ 0xaa
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	2100      	movs	r1, #0
 800e382:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	0018      	movs	r0, r3
 800e388:	46bd      	mov	sp, r7
 800e38a:	b002      	add	sp, #8
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	0018      	movs	r0, r3
 800e39e:	f006 ff85 	bl	80152ac <USB_ReadInterrupts>
 800e3a2:	0003      	movs	r3, r0
 800e3a4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	2380      	movs	r3, #128	@ 0x80
 800e3aa:	021b      	lsls	r3, r3, #8
 800e3ac:	4013      	ands	r3, r2
 800e3ae:	d004      	beq.n	800e3ba <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	0018      	movs	r0, r3
 800e3b4:	f000 fb62 	bl	800ea7c <PCD_EP_ISR_Handler>

    return;
 800e3b8:	e11d      	b.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800e3ba:	68fa      	ldr	r2, [r7, #12]
 800e3bc:	2380      	movs	r3, #128	@ 0x80
 800e3be:	00db      	lsls	r3, r3, #3
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	d015      	beq.n	800e3f0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2244      	movs	r2, #68	@ 0x44
 800e3ca:	5a9b      	ldrh	r3, [r3, r2]
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	498a      	ldr	r1, [pc, #552]	@ (800e5fc <HAL_PCD_IRQHandler+0x26c>)
 800e3d4:	400a      	ands	r2, r1
 800e3d6:	b291      	uxth	r1, r2
 800e3d8:	2244      	movs	r2, #68	@ 0x44
 800e3da:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	0018      	movs	r0, r3
 800e3e0:	f009 f823 	bl	801742a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	0018      	movs	r0, r3
 800e3ea:	f000 f915 	bl	800e618 <HAL_PCD_SetAddress>

    return;
 800e3ee:	e102      	b.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	2380      	movs	r3, #128	@ 0x80
 800e3f4:	01db      	lsls	r3, r3, #7
 800e3f6:	4013      	ands	r3, r2
 800e3f8:	d00c      	beq.n	800e414 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2244      	movs	r2, #68	@ 0x44
 800e400:	5a9b      	ldrh	r3, [r3, r2]
 800e402:	b29a      	uxth	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	497d      	ldr	r1, [pc, #500]	@ (800e600 <HAL_PCD_IRQHandler+0x270>)
 800e40a:	400a      	ands	r2, r1
 800e40c:	b291      	uxth	r1, r2
 800e40e:	2244      	movs	r2, #68	@ 0x44
 800e410:	5299      	strh	r1, [r3, r2]

    return;
 800e412:	e0f0      	b.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	2380      	movs	r3, #128	@ 0x80
 800e418:	019b      	lsls	r3, r3, #6
 800e41a:	4013      	ands	r3, r2
 800e41c:	d00c      	beq.n	800e438 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2244      	movs	r2, #68	@ 0x44
 800e424:	5a9b      	ldrh	r3, [r3, r2]
 800e426:	b29a      	uxth	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4975      	ldr	r1, [pc, #468]	@ (800e604 <HAL_PCD_IRQHandler+0x274>)
 800e42e:	400a      	ands	r2, r1
 800e430:	b291      	uxth	r1, r2
 800e432:	2244      	movs	r2, #68	@ 0x44
 800e434:	5299      	strh	r1, [r3, r2]

    return;
 800e436:	e0de      	b.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800e438:	68fa      	ldr	r2, [r7, #12]
 800e43a:	2380      	movs	r3, #128	@ 0x80
 800e43c:	015b      	lsls	r3, r3, #5
 800e43e:	4013      	ands	r3, r2
 800e440:	d038      	beq.n	800e4b4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2240      	movs	r2, #64	@ 0x40
 800e448:	5a9b      	ldrh	r3, [r3, r2]
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2104      	movs	r1, #4
 800e452:	438a      	bics	r2, r1
 800e454:	b291      	uxth	r1, r2
 800e456:	2240      	movs	r2, #64	@ 0x40
 800e458:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2240      	movs	r2, #64	@ 0x40
 800e460:	5a9b      	ldrh	r3, [r3, r2]
 800e462:	b29a      	uxth	r2, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2108      	movs	r1, #8
 800e46a:	438a      	bics	r2, r1
 800e46c:	b291      	uxth	r1, r2
 800e46e:	2240      	movs	r2, #64	@ 0x40
 800e470:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	23b8      	movs	r3, #184	@ 0xb8
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	5cd3      	ldrb	r3, [r2, r3]
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d109      	bne.n	800e492 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	23b8      	movs	r3, #184	@ 0xb8
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	2100      	movs	r1, #0
 800e486:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2100      	movs	r1, #0
 800e48c:	0018      	movs	r0, r3
 800e48e:	f001 fc9f 	bl	800fdd0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	0018      	movs	r0, r3
 800e496:	f009 f809 	bl	80174ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2244      	movs	r2, #68	@ 0x44
 800e4a0:	5a9b      	ldrh	r3, [r3, r2]
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4957      	ldr	r1, [pc, #348]	@ (800e608 <HAL_PCD_IRQHandler+0x278>)
 800e4aa:	400a      	ands	r2, r1
 800e4ac:	b291      	uxth	r1, r2
 800e4ae:	2244      	movs	r2, #68	@ 0x44
 800e4b0:	5299      	strh	r1, [r3, r2]

    return;
 800e4b2:	e0a0      	b.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	2380      	movs	r3, #128	@ 0x80
 800e4b8:	011b      	lsls	r3, r3, #4
 800e4ba:	4013      	ands	r3, r2
 800e4bc:	d028      	beq.n	800e510 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2240      	movs	r2, #64	@ 0x40
 800e4c4:	5a9b      	ldrh	r3, [r3, r2]
 800e4c6:	b29a      	uxth	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2108      	movs	r1, #8
 800e4ce:	430a      	orrs	r2, r1
 800e4d0:	b291      	uxth	r1, r2
 800e4d2:	2240      	movs	r2, #64	@ 0x40
 800e4d4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2244      	movs	r2, #68	@ 0x44
 800e4dc:	5a9b      	ldrh	r3, [r3, r2]
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4949      	ldr	r1, [pc, #292]	@ (800e60c <HAL_PCD_IRQHandler+0x27c>)
 800e4e6:	400a      	ands	r2, r1
 800e4e8:	b291      	uxth	r1, r2
 800e4ea:	2244      	movs	r2, #68	@ 0x44
 800e4ec:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2240      	movs	r2, #64	@ 0x40
 800e4f4:	5a9b      	ldrh	r3, [r3, r2]
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2104      	movs	r1, #4
 800e4fe:	430a      	orrs	r2, r1
 800e500:	b291      	uxth	r1, r2
 800e502:	2240      	movs	r2, #64	@ 0x40
 800e504:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	0018      	movs	r0, r3
 800e50a:	f008 ffb3 	bl	8017474 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e50e:	e072      	b.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2280      	movs	r2, #128	@ 0x80
 800e514:	4013      	ands	r3, r2
 800e516:	d046      	beq.n	800e5a6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2244      	movs	r2, #68	@ 0x44
 800e51e:	5a9b      	ldrh	r3, [r3, r2]
 800e520:	b29a      	uxth	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2180      	movs	r1, #128	@ 0x80
 800e528:	438a      	bics	r2, r1
 800e52a:	b291      	uxth	r1, r2
 800e52c:	2244      	movs	r2, #68	@ 0x44
 800e52e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	23b8      	movs	r3, #184	@ 0xb8
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	5cd3      	ldrb	r3, [r2, r3]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d12f      	bne.n	800e59c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2240      	movs	r2, #64	@ 0x40
 800e542:	5a9b      	ldrh	r3, [r3, r2]
 800e544:	b29a      	uxth	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2104      	movs	r1, #4
 800e54c:	430a      	orrs	r2, r1
 800e54e:	b291      	uxth	r1, r2
 800e550:	2240      	movs	r2, #64	@ 0x40
 800e552:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2240      	movs	r2, #64	@ 0x40
 800e55a:	5a9b      	ldrh	r3, [r3, r2]
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2108      	movs	r1, #8
 800e564:	430a      	orrs	r2, r1
 800e566:	b291      	uxth	r1, r2
 800e568:	2240      	movs	r2, #64	@ 0x40
 800e56a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	23b8      	movs	r3, #184	@ 0xb8
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	2101      	movs	r1, #1
 800e574:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2254      	movs	r2, #84	@ 0x54
 800e57c:	5a9b      	ldrh	r3, [r3, r2]
 800e57e:	b29b      	uxth	r3, r3
 800e580:	089b      	lsrs	r3, r3, #2
 800e582:	223c      	movs	r2, #60	@ 0x3c
 800e584:	4013      	ands	r3, r2
 800e586:	0019      	movs	r1, r3
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	23b9      	movs	r3, #185	@ 0xb9
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2101      	movs	r1, #1
 800e594:	0018      	movs	r0, r3
 800e596:	f001 fc1b 	bl	800fdd0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800e59a:	e02c      	b.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	0018      	movs	r0, r3
 800e5a0:	f008 ff68 	bl	8017474 <HAL_PCD_SuspendCallback>
    return;
 800e5a4:	e027      	b.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	2380      	movs	r3, #128	@ 0x80
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4013      	ands	r3, r2
 800e5ae:	d010      	beq.n	800e5d2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2244      	movs	r2, #68	@ 0x44
 800e5b6:	5a9b      	ldrh	r3, [r3, r2]
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4914      	ldr	r1, [pc, #80]	@ (800e610 <HAL_PCD_IRQHandler+0x280>)
 800e5c0:	400a      	ands	r2, r1
 800e5c2:	b291      	uxth	r1, r2
 800e5c4:	2244      	movs	r2, #68	@ 0x44
 800e5c6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	0018      	movs	r0, r3
 800e5cc:	f008 ff1e 	bl	801740c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e5d0:	e011      	b.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800e5d2:	68fa      	ldr	r2, [r7, #12]
 800e5d4:	2380      	movs	r3, #128	@ 0x80
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	4013      	ands	r3, r2
 800e5da:	d00c      	beq.n	800e5f6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2244      	movs	r2, #68	@ 0x44
 800e5e2:	5a9b      	ldrh	r3, [r3, r2]
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	490a      	ldr	r1, [pc, #40]	@ (800e614 <HAL_PCD_IRQHandler+0x284>)
 800e5ec:	400a      	ands	r2, r1
 800e5ee:	b291      	uxth	r1, r2
 800e5f0:	2244      	movs	r2, #68	@ 0x44
 800e5f2:	5299      	strh	r1, [r3, r2]

    return;
 800e5f4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	b004      	add	sp, #16
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	fffffbff 	.word	0xfffffbff
 800e600:	ffffbfff 	.word	0xffffbfff
 800e604:	ffffdfff 	.word	0xffffdfff
 800e608:	ffffefff 	.word	0xffffefff
 800e60c:	fffff7ff 	.word	0xfffff7ff
 800e610:	fffffdff 	.word	0xfffffdff
 800e614:	fffffeff 	.word	0xfffffeff

0800e618 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	000a      	movs	r2, r1
 800e622:	1cfb      	adds	r3, r7, #3
 800e624:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	23aa      	movs	r3, #170	@ 0xaa
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	5cd3      	ldrb	r3, [r2, r3]
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d101      	bne.n	800e636 <HAL_PCD_SetAddress+0x1e>
 800e632:	2302      	movs	r3, #2
 800e634:	e017      	b.n	800e666 <HAL_PCD_SetAddress+0x4e>
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	23aa      	movs	r3, #170	@ 0xaa
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	2101      	movs	r1, #1
 800e63e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	1cfa      	adds	r2, r7, #3
 800e644:	2124      	movs	r1, #36	@ 0x24
 800e646:	7812      	ldrb	r2, [r2, #0]
 800e648:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	1cfb      	adds	r3, r7, #3
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	0019      	movs	r1, r3
 800e654:	0010      	movs	r0, r2
 800e656:	f006 fdff 	bl	8015258 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	23aa      	movs	r3, #170	@ 0xaa
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	2100      	movs	r1, #0
 800e662:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	0018      	movs	r0, r3
 800e668:	46bd      	mov	sp, r7
 800e66a:	b002      	add	sp, #8
 800e66c:	bd80      	pop	{r7, pc}

0800e66e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e66e:	b590      	push	{r4, r7, lr}
 800e670:	b085      	sub	sp, #20
 800e672:	af00      	add	r7, sp, #0
 800e674:	6078      	str	r0, [r7, #4]
 800e676:	000c      	movs	r4, r1
 800e678:	0010      	movs	r0, r2
 800e67a:	0019      	movs	r1, r3
 800e67c:	1cfb      	adds	r3, r7, #3
 800e67e:	1c22      	adds	r2, r4, #0
 800e680:	701a      	strb	r2, [r3, #0]
 800e682:	003b      	movs	r3, r7
 800e684:	1c02      	adds	r2, r0, #0
 800e686:	801a      	strh	r2, [r3, #0]
 800e688:	1cbb      	adds	r3, r7, #2
 800e68a:	1c0a      	adds	r2, r1, #0
 800e68c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e68e:	230b      	movs	r3, #11
 800e690:	18fb      	adds	r3, r7, r3
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e696:	1cfb      	adds	r3, r7, #3
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	b25b      	sxtb	r3, r3
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	da0f      	bge.n	800e6c0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e6a0:	1cfb      	adds	r3, r7, #3
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	2207      	movs	r2, #7
 800e6a6:	4013      	ands	r3, r2
 800e6a8:	1c5a      	adds	r2, r3, #1
 800e6aa:	0013      	movs	r3, r2
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	189b      	adds	r3, r3, r2
 800e6b0:	00db      	lsls	r3, r3, #3
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	18d3      	adds	r3, r2, r3
 800e6b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	705a      	strb	r2, [r3, #1]
 800e6be:	e00f      	b.n	800e6e0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e6c0:	1cfb      	adds	r3, r7, #3
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	2207      	movs	r2, #7
 800e6c6:	401a      	ands	r2, r3
 800e6c8:	0013      	movs	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	189b      	adds	r3, r3, r2
 800e6ce:	00db      	lsls	r3, r3, #3
 800e6d0:	3369      	adds	r3, #105	@ 0x69
 800e6d2:	33ff      	adds	r3, #255	@ 0xff
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	18d3      	adds	r3, r2, r3
 800e6d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e6e0:	1cfb      	adds	r3, r7, #3
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	2207      	movs	r2, #7
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	b2da      	uxtb	r2, r3
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e6ee:	003b      	movs	r3, r7
 800e6f0:	881a      	ldrh	r2, [r3, #0]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	1cba      	adds	r2, r7, #2
 800e6fa:	7812      	ldrb	r2, [r2, #0]
 800e6fc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e6fe:	1cbb      	adds	r3, r7, #2
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	2b02      	cmp	r3, #2
 800e704:	d102      	bne.n	800e70c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2200      	movs	r2, #0
 800e70a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	23aa      	movs	r3, #170	@ 0xaa
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	5cd3      	ldrb	r3, [r2, r3]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d101      	bne.n	800e71c <HAL_PCD_EP_Open+0xae>
 800e718:	2302      	movs	r3, #2
 800e71a:	e013      	b.n	800e744 <HAL_PCD_EP_Open+0xd6>
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	23aa      	movs	r3, #170	@ 0xaa
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	2101      	movs	r1, #1
 800e724:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	68fa      	ldr	r2, [r7, #12]
 800e72c:	0011      	movs	r1, r2
 800e72e:	0018      	movs	r0, r3
 800e730:	f004 fdf6 	bl	8013320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	23aa      	movs	r3, #170	@ 0xaa
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	2100      	movs	r1, #0
 800e73c:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e73e:	230b      	movs	r3, #11
 800e740:	18fb      	adds	r3, r7, r3
 800e742:	781b      	ldrb	r3, [r3, #0]
}
 800e744:	0018      	movs	r0, r3
 800e746:	46bd      	mov	sp, r7
 800e748:	b005      	add	sp, #20
 800e74a:	bd90      	pop	{r4, r7, pc}

0800e74c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	000a      	movs	r2, r1
 800e756:	1cfb      	adds	r3, r7, #3
 800e758:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e75a:	1cfb      	adds	r3, r7, #3
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	b25b      	sxtb	r3, r3
 800e760:	2b00      	cmp	r3, #0
 800e762:	da0f      	bge.n	800e784 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e764:	1cfb      	adds	r3, r7, #3
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	2207      	movs	r2, #7
 800e76a:	4013      	ands	r3, r2
 800e76c:	1c5a      	adds	r2, r3, #1
 800e76e:	0013      	movs	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	189b      	adds	r3, r3, r2
 800e774:	00db      	lsls	r3, r3, #3
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	18d3      	adds	r3, r2, r3
 800e77a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2201      	movs	r2, #1
 800e780:	705a      	strb	r2, [r3, #1]
 800e782:	e00f      	b.n	800e7a4 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e784:	1cfb      	adds	r3, r7, #3
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	2207      	movs	r2, #7
 800e78a:	401a      	ands	r2, r3
 800e78c:	0013      	movs	r3, r2
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	189b      	adds	r3, r3, r2
 800e792:	00db      	lsls	r3, r3, #3
 800e794:	3369      	adds	r3, #105	@ 0x69
 800e796:	33ff      	adds	r3, #255	@ 0xff
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	18d3      	adds	r3, r2, r3
 800e79c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e7a4:	1cfb      	adds	r3, r7, #3
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	2207      	movs	r2, #7
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	b2da      	uxtb	r2, r3
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	23aa      	movs	r3, #170	@ 0xaa
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	5cd3      	ldrb	r3, [r2, r3]
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d101      	bne.n	800e7c2 <HAL_PCD_EP_Close+0x76>
 800e7be:	2302      	movs	r3, #2
 800e7c0:	e011      	b.n	800e7e6 <HAL_PCD_EP_Close+0x9a>
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	23aa      	movs	r3, #170	@ 0xaa
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68fa      	ldr	r2, [r7, #12]
 800e7d2:	0011      	movs	r1, r2
 800e7d4:	0018      	movs	r0, r3
 800e7d6:	f005 f945 	bl	8013a64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	23aa      	movs	r3, #170	@ 0xaa
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e7e4:	2300      	movs	r3, #0
}
 800e7e6:	0018      	movs	r0, r3
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	b004      	add	sp, #16
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b086      	sub	sp, #24
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	60f8      	str	r0, [r7, #12]
 800e7f6:	607a      	str	r2, [r7, #4]
 800e7f8:	603b      	str	r3, [r7, #0]
 800e7fa:	200b      	movs	r0, #11
 800e7fc:	183b      	adds	r3, r7, r0
 800e7fe:	1c0a      	adds	r2, r1, #0
 800e800:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e802:	0001      	movs	r1, r0
 800e804:	187b      	adds	r3, r7, r1
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	2207      	movs	r2, #7
 800e80a:	401a      	ands	r2, r3
 800e80c:	0013      	movs	r3, r2
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	189b      	adds	r3, r3, r2
 800e812:	00db      	lsls	r3, r3, #3
 800e814:	3369      	adds	r3, #105	@ 0x69
 800e816:	33ff      	adds	r3, #255	@ 0xff
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	18d3      	adds	r3, r2, r3
 800e81c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	2200      	movs	r2, #0
 800e82e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	2200      	movs	r2, #0
 800e834:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e836:	187b      	adds	r3, r7, r1
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	2207      	movs	r2, #7
 800e83c:	4013      	ands	r3, r2
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	697a      	ldr	r2, [r7, #20]
 800e84a:	0011      	movs	r1, r2
 800e84c:	0018      	movs	r0, r3
 800e84e:	f005 fac9 	bl	8013de4 <USB_EPStartXfer>

  return HAL_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	0018      	movs	r0, r3
 800e856:	46bd      	mov	sp, r7
 800e858:	b006      	add	sp, #24
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	000a      	movs	r2, r1
 800e866:	1cfb      	adds	r3, r7, #3
 800e868:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e86a:	1cfb      	adds	r3, r7, #3
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	2207      	movs	r2, #7
 800e870:	401a      	ands	r2, r3
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	23c2      	movs	r3, #194	@ 0xc2
 800e876:	0059      	lsls	r1, r3, #1
 800e878:	0013      	movs	r3, r2
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	189b      	adds	r3, r3, r2
 800e87e:	00db      	lsls	r3, r3, #3
 800e880:	18c3      	adds	r3, r0, r3
 800e882:	185b      	adds	r3, r3, r1
 800e884:	681b      	ldr	r3, [r3, #0]
}
 800e886:	0018      	movs	r0, r3
 800e888:	46bd      	mov	sp, r7
 800e88a:	b002      	add	sp, #8
 800e88c:	bd80      	pop	{r7, pc}

0800e88e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e88e:	b580      	push	{r7, lr}
 800e890:	b086      	sub	sp, #24
 800e892:	af00      	add	r7, sp, #0
 800e894:	60f8      	str	r0, [r7, #12]
 800e896:	607a      	str	r2, [r7, #4]
 800e898:	603b      	str	r3, [r7, #0]
 800e89a:	200b      	movs	r0, #11
 800e89c:	183b      	adds	r3, r7, r0
 800e89e:	1c0a      	adds	r2, r1, #0
 800e8a0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e8a2:	183b      	adds	r3, r7, r0
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	2207      	movs	r2, #7
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	1c5a      	adds	r2, r3, #1
 800e8ac:	0013      	movs	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	189b      	adds	r3, r3, r2
 800e8b2:	00db      	lsls	r3, r3, #3
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	18d3      	adds	r3, r2, r3
 800e8b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	683a      	ldr	r2, [r7, #0]
 800e8c4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	2224      	movs	r2, #36	@ 0x24
 800e8ca:	2101      	movs	r1, #1
 800e8cc:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	683a      	ldr	r2, [r7, #0]
 800e8d2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e8e0:	183b      	adds	r3, r7, r0
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	2207      	movs	r2, #7
 800e8e6:	4013      	ands	r3, r2
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	697a      	ldr	r2, [r7, #20]
 800e8f4:	0011      	movs	r1, r2
 800e8f6:	0018      	movs	r0, r3
 800e8f8:	f005 fa74 	bl	8013de4 <USB_EPStartXfer>

  return HAL_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	0018      	movs	r0, r3
 800e900:	46bd      	mov	sp, r7
 800e902:	b006      	add	sp, #24
 800e904:	bd80      	pop	{r7, pc}

0800e906 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b084      	sub	sp, #16
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	000a      	movs	r2, r1
 800e910:	1cfb      	adds	r3, r7, #3
 800e912:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e914:	1cfb      	adds	r3, r7, #3
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	2207      	movs	r2, #7
 800e91a:	401a      	ands	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	429a      	cmp	r2, r3
 800e922:	d901      	bls.n	800e928 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e924:	2301      	movs	r3, #1
 800e926:	e046      	b.n	800e9b6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e928:	1cfb      	adds	r3, r7, #3
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	b25b      	sxtb	r3, r3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	da0f      	bge.n	800e952 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e932:	1cfb      	adds	r3, r7, #3
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2207      	movs	r2, #7
 800e938:	4013      	ands	r3, r2
 800e93a:	1c5a      	adds	r2, r3, #1
 800e93c:	0013      	movs	r3, r2
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	189b      	adds	r3, r3, r2
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	18d3      	adds	r3, r2, r3
 800e948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2201      	movs	r2, #1
 800e94e:	705a      	strb	r2, [r3, #1]
 800e950:	e00d      	b.n	800e96e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e952:	1cfb      	adds	r3, r7, #3
 800e954:	781a      	ldrb	r2, [r3, #0]
 800e956:	0013      	movs	r3, r2
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	189b      	adds	r3, r3, r2
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	3369      	adds	r3, #105	@ 0x69
 800e960:	33ff      	adds	r3, #255	@ 0xff
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	18d3      	adds	r3, r2, r3
 800e966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2200      	movs	r2, #0
 800e96c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2201      	movs	r2, #1
 800e972:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e974:	1cfb      	adds	r3, r7, #3
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	2207      	movs	r2, #7
 800e97a:	4013      	ands	r3, r2
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	23aa      	movs	r3, #170	@ 0xaa
 800e986:	009b      	lsls	r3, r3, #2
 800e988:	5cd3      	ldrb	r3, [r2, r3]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d101      	bne.n	800e992 <HAL_PCD_EP_SetStall+0x8c>
 800e98e:	2302      	movs	r3, #2
 800e990:	e011      	b.n	800e9b6 <HAL_PCD_EP_SetStall+0xb0>
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	23aa      	movs	r3, #170	@ 0xaa
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	2101      	movs	r1, #1
 800e99a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	68fa      	ldr	r2, [r7, #12]
 800e9a2:	0011      	movs	r1, r2
 800e9a4:	0018      	movs	r0, r3
 800e9a6:	f006 fb55 	bl	8015054 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	23aa      	movs	r3, #170	@ 0xaa
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	0018      	movs	r0, r3
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	b004      	add	sp, #16
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b084      	sub	sp, #16
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	000a      	movs	r2, r1
 800e9c8:	1cfb      	adds	r3, r7, #3
 800e9ca:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e9cc:	1cfb      	adds	r3, r7, #3
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	220f      	movs	r2, #15
 800e9d2:	401a      	ands	r2, r3
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d901      	bls.n	800e9e0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	e048      	b.n	800ea72 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e9e0:	1cfb      	adds	r3, r7, #3
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	b25b      	sxtb	r3, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	da0f      	bge.n	800ea0a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e9ea:	1cfb      	adds	r3, r7, #3
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	2207      	movs	r2, #7
 800e9f0:	4013      	ands	r3, r2
 800e9f2:	1c5a      	adds	r2, r3, #1
 800e9f4:	0013      	movs	r3, r2
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	189b      	adds	r3, r3, r2
 800e9fa:	00db      	lsls	r3, r3, #3
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	18d3      	adds	r3, r2, r3
 800ea00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2201      	movs	r2, #1
 800ea06:	705a      	strb	r2, [r3, #1]
 800ea08:	e00f      	b.n	800ea2a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ea0a:	1cfb      	adds	r3, r7, #3
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	2207      	movs	r2, #7
 800ea10:	401a      	ands	r2, r3
 800ea12:	0013      	movs	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	189b      	adds	r3, r3, r2
 800ea18:	00db      	lsls	r3, r3, #3
 800ea1a:	3369      	adds	r3, #105	@ 0x69
 800ea1c:	33ff      	adds	r3, #255	@ 0xff
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	18d3      	adds	r3, r2, r3
 800ea22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2200      	movs	r2, #0
 800ea28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ea30:	1cfb      	adds	r3, r7, #3
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	2207      	movs	r2, #7
 800ea36:	4013      	ands	r3, r2
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	23aa      	movs	r3, #170	@ 0xaa
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	5cd3      	ldrb	r3, [r2, r3]
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d101      	bne.n	800ea4e <HAL_PCD_EP_ClrStall+0x90>
 800ea4a:	2302      	movs	r3, #2
 800ea4c:	e011      	b.n	800ea72 <HAL_PCD_EP_ClrStall+0xb4>
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	23aa      	movs	r3, #170	@ 0xaa
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	2101      	movs	r1, #1
 800ea56:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	0011      	movs	r1, r2
 800ea60:	0018      	movs	r0, r3
 800ea62:	f006 fb47 	bl	80150f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	23aa      	movs	r3, #170	@ 0xaa
 800ea6a:	009b      	lsls	r3, r3, #2
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	0018      	movs	r0, r3
 800ea74:	46bd      	mov	sp, r7
 800ea76:	b004      	add	sp, #16
 800ea78:	bd80      	pop	{r7, pc}
	...

0800ea7c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800ea7c:	b5b0      	push	{r4, r5, r7, lr}
 800ea7e:	b096      	sub	sp, #88	@ 0x58
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ea84:	f000 fbec 	bl	800f260 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	204e      	movs	r0, #78	@ 0x4e
 800ea8e:	183b      	adds	r3, r7, r0
 800ea90:	2144      	movs	r1, #68	@ 0x44
 800ea92:	5a52      	ldrh	r2, [r2, r1]
 800ea94:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800ea96:	183b      	adds	r3, r7, r0
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	244d      	movs	r4, #77	@ 0x4d
 800ea9e:	193b      	adds	r3, r7, r4
 800eaa0:	210f      	movs	r1, #15
 800eaa2:	400a      	ands	r2, r1
 800eaa4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800eaa6:	193b      	adds	r3, r7, r4
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d000      	beq.n	800eab0 <PCD_EP_ISR_Handler+0x34>
 800eaae:	e18f      	b.n	800edd0 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800eab0:	183b      	adds	r3, r7, r0
 800eab2:	881b      	ldrh	r3, [r3, #0]
 800eab4:	2210      	movs	r2, #16
 800eab6:	4013      	ands	r3, r2
 800eab8:	d155      	bne.n	800eb66 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	881b      	ldrh	r3, [r3, #0]
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	200e      	movs	r0, #14
 800eac4:	183b      	adds	r3, r7, r0
 800eac6:	49bb      	ldr	r1, [pc, #748]	@ (800edb4 <PCD_EP_ISR_Handler+0x338>)
 800eac8:	400a      	ands	r2, r1
 800eaca:	801a      	strh	r2, [r3, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	183a      	adds	r2, r7, r0
 800ead2:	8812      	ldrh	r2, [r2, #0]
 800ead4:	49b8      	ldr	r1, [pc, #736]	@ (800edb8 <PCD_EP_ISR_Handler+0x33c>)
 800ead6:	430a      	orrs	r2, r1
 800ead8:	b292      	uxth	r2, r2
 800eada:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	3328      	adds	r3, #40	@ 0x28
 800eae0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2250      	movs	r2, #80	@ 0x50
 800eae8:	5a9b      	ldrh	r3, [r3, r2]
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	001a      	movs	r2, r3
 800eaee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	18d2      	adds	r2, r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	18d3      	adds	r3, r2, r3
 800eafc:	4aaf      	ldr	r2, [pc, #700]	@ (800edbc <PCD_EP_ISR_Handler+0x340>)
 800eafe:	4694      	mov	ip, r2
 800eb00:	4463      	add	r3, ip
 800eb02:	881b      	ldrh	r3, [r3, #0]
 800eb04:	059b      	lsls	r3, r3, #22
 800eb06:	0d9a      	lsrs	r2, r3, #22
 800eb08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800eb0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb0e:	695a      	ldr	r2, [r3, #20]
 800eb10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb12:	69db      	ldr	r3, [r3, #28]
 800eb14:	18d2      	adds	r2, r2, r3
 800eb16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb18:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	0018      	movs	r0, r3
 800eb20:	f008 fc56 	bl	80173d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2224      	movs	r2, #36	@ 0x24
 800eb28:	5c9b      	ldrb	r3, [r3, r2]
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d101      	bne.n	800eb34 <PCD_EP_ISR_Handler+0xb8>
 800eb30:	f000 fb96 	bl	800f260 <PCD_EP_ISR_Handler+0x7e4>
 800eb34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb36:	699b      	ldr	r3, [r3, #24]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <PCD_EP_ISR_Handler+0xc4>
 800eb3c:	f000 fb90 	bl	800f260 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2224      	movs	r2, #36	@ 0x24
 800eb44:	5c9b      	ldrb	r3, [r3, r2]
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	2280      	movs	r2, #128	@ 0x80
 800eb4a:	4252      	negs	r2, r2
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	0011      	movs	r1, r2
 800eb56:	224c      	movs	r2, #76	@ 0x4c
 800eb58:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2224      	movs	r2, #36	@ 0x24
 800eb5e:	2100      	movs	r1, #0
 800eb60:	5499      	strb	r1, [r3, r2]
 800eb62:	f000 fb7d 	bl	800f260 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	3369      	adds	r3, #105	@ 0x69
 800eb6a:	33ff      	adds	r3, #255	@ 0xff
 800eb6c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	214a      	movs	r1, #74	@ 0x4a
 800eb74:	187b      	adds	r3, r7, r1
 800eb76:	8812      	ldrh	r2, [r2, #0]
 800eb78:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800eb7a:	187b      	adds	r3, r7, r1
 800eb7c:	881a      	ldrh	r2, [r3, #0]
 800eb7e:	2380      	movs	r3, #128	@ 0x80
 800eb80:	011b      	lsls	r3, r3, #4
 800eb82:	4013      	ands	r3, r2
 800eb84:	d037      	beq.n	800ebf6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2250      	movs	r2, #80	@ 0x50
 800eb8c:	5a9b      	ldrh	r3, [r3, r2]
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	001a      	movs	r2, r3
 800eb92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	00db      	lsls	r3, r3, #3
 800eb98:	18d2      	adds	r2, r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	18d3      	adds	r3, r2, r3
 800eba0:	4a87      	ldr	r2, [pc, #540]	@ (800edc0 <PCD_EP_ISR_Handler+0x344>)
 800eba2:	4694      	mov	ip, r2
 800eba4:	4463      	add	r3, ip
 800eba6:	881b      	ldrh	r3, [r3, #0]
 800eba8:	059b      	lsls	r3, r3, #22
 800ebaa:	0d9a      	lsrs	r2, r3, #22
 800ebac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6818      	ldr	r0, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	22ac      	movs	r2, #172	@ 0xac
 800ebb8:	0092      	lsls	r2, r2, #2
 800ebba:	1899      	adds	r1, r3, r2
 800ebbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebbe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800ebc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebc2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	f006 fbc8 	bl	801535a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	2010      	movs	r0, #16
 800ebd4:	183b      	adds	r3, r7, r0
 800ebd6:	497b      	ldr	r1, [pc, #492]	@ (800edc4 <PCD_EP_ISR_Handler+0x348>)
 800ebd8:	400a      	ands	r2, r1
 800ebda:	801a      	strh	r2, [r3, #0]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	183a      	adds	r2, r7, r0
 800ebe2:	8812      	ldrh	r2, [r2, #0]
 800ebe4:	2180      	movs	r1, #128	@ 0x80
 800ebe6:	430a      	orrs	r2, r1
 800ebe8:	b292      	uxth	r2, r2
 800ebea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	0018      	movs	r0, r3
 800ebf0:	f008 fbb8 	bl	8017364 <HAL_PCD_SetupStageCallback>
 800ebf4:	e334      	b.n	800f260 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ebf6:	234a      	movs	r3, #74	@ 0x4a
 800ebf8:	18fb      	adds	r3, r7, r3
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	5e9b      	ldrsh	r3, [r3, r2]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	db00      	blt.n	800ec04 <PCD_EP_ISR_Handler+0x188>
 800ec02:	e32d      	b.n	800f260 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	881b      	ldrh	r3, [r3, #0]
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	201e      	movs	r0, #30
 800ec0e:	183b      	adds	r3, r7, r0
 800ec10:	496c      	ldr	r1, [pc, #432]	@ (800edc4 <PCD_EP_ISR_Handler+0x348>)
 800ec12:	400a      	ands	r2, r1
 800ec14:	801a      	strh	r2, [r3, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	183a      	adds	r2, r7, r0
 800ec1c:	8812      	ldrh	r2, [r2, #0]
 800ec1e:	2180      	movs	r1, #128	@ 0x80
 800ec20:	430a      	orrs	r2, r1
 800ec22:	b292      	uxth	r2, r2
 800ec24:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2250      	movs	r2, #80	@ 0x50
 800ec2c:	5a9b      	ldrh	r3, [r3, r2]
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	001a      	movs	r2, r3
 800ec32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	18d2      	adds	r2, r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	18d3      	adds	r3, r2, r3
 800ec40:	4a5f      	ldr	r2, [pc, #380]	@ (800edc0 <PCD_EP_ISR_Handler+0x344>)
 800ec42:	4694      	mov	ip, r2
 800ec44:	4463      	add	r3, ip
 800ec46:	881b      	ldrh	r3, [r3, #0]
 800ec48:	059b      	lsls	r3, r3, #22
 800ec4a:	0d9a      	lsrs	r2, r3, #22
 800ec4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ec50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d01a      	beq.n	800ec8e <PCD_EP_ISR_Handler+0x212>
 800ec58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec5a:	695b      	ldr	r3, [r3, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d016      	beq.n	800ec8e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6818      	ldr	r0, [r3, #0]
 800ec64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec66:	6959      	ldr	r1, [r3, #20]
 800ec68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ec6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	f006 fb72 	bl	801535a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ec76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec78:	695a      	ldr	r2, [r3, #20]
 800ec7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec7c:	69db      	ldr	r3, [r3, #28]
 800ec7e:	18d2      	adds	r2, r2, r3
 800ec80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2100      	movs	r1, #0
 800ec88:	0018      	movs	r0, r3
 800ec8a:	f008 fb80 	bl	801738e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	214a      	movs	r1, #74	@ 0x4a
 800ec94:	187b      	adds	r3, r7, r1
 800ec96:	8812      	ldrh	r2, [r2, #0]
 800ec98:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ec9a:	187b      	adds	r3, r7, r1
 800ec9c:	881a      	ldrh	r2, [r3, #0]
 800ec9e:	2380      	movs	r3, #128	@ 0x80
 800eca0:	011b      	lsls	r3, r3, #4
 800eca2:	4013      	ands	r3, r2
 800eca4:	d000      	beq.n	800eca8 <PCD_EP_ISR_Handler+0x22c>
 800eca6:	e2db      	b.n	800f260 <PCD_EP_ISR_Handler+0x7e4>
 800eca8:	187b      	adds	r3, r7, r1
 800ecaa:	881a      	ldrh	r2, [r3, #0]
 800ecac:	23c0      	movs	r3, #192	@ 0xc0
 800ecae:	019b      	lsls	r3, r3, #6
 800ecb0:	401a      	ands	r2, r3
 800ecb2:	23c0      	movs	r3, #192	@ 0xc0
 800ecb4:	019b      	lsls	r3, r3, #6
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d100      	bne.n	800ecbc <PCD_EP_ISR_Handler+0x240>
 800ecba:	e2d1      	b.n	800f260 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	61bb      	str	r3, [r7, #24]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2250      	movs	r2, #80	@ 0x50
 800ecc8:	5a9b      	ldrh	r3, [r3, r2]
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	001a      	movs	r2, r3
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	189b      	adds	r3, r3, r2
 800ecd2:	61bb      	str	r3, [r7, #24]
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	4a3a      	ldr	r2, [pc, #232]	@ (800edc0 <PCD_EP_ISR_Handler+0x344>)
 800ecd8:	4694      	mov	ip, r2
 800ecda:	4463      	add	r3, ip
 800ecdc:	617b      	str	r3, [r7, #20]
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	059b      	lsls	r3, r3, #22
 800ece6:	0d9b      	lsrs	r3, r3, #22
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	801a      	strh	r2, [r3, #0]
 800ecee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	2b3e      	cmp	r3, #62	@ 0x3e
 800ecf4:	d91a      	bls.n	800ed2c <PCD_EP_ISR_Handler+0x2b0>
 800ecf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecf8:	691b      	ldr	r3, [r3, #16]
 800ecfa:	095b      	lsrs	r3, r3, #5
 800ecfc:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	221f      	movs	r2, #31
 800ed04:	4013      	ands	r3, r2
 800ed06:	d102      	bne.n	800ed0e <PCD_EP_ISR_Handler+0x292>
 800ed08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	029b      	lsls	r3, r3, #10
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	4a25      	ldr	r2, [pc, #148]	@ (800edb8 <PCD_EP_ISR_Handler+0x33c>)
 800ed22:	4313      	orrs	r3, r2
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	801a      	strh	r2, [r3, #0]
 800ed2a:	e023      	b.n	800ed74 <PCD_EP_ISR_Handler+0x2f8>
 800ed2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d108      	bne.n	800ed46 <PCD_EP_ISR_Handler+0x2ca>
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	881b      	ldrh	r3, [r3, #0]
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	4a1f      	ldr	r2, [pc, #124]	@ (800edb8 <PCD_EP_ISR_Handler+0x33c>)
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	801a      	strh	r2, [r3, #0]
 800ed44:	e016      	b.n	800ed74 <PCD_EP_ISR_Handler+0x2f8>
 800ed46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	085b      	lsrs	r3, r3, #1
 800ed4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed50:	691b      	ldr	r3, [r3, #16]
 800ed52:	2201      	movs	r2, #1
 800ed54:	4013      	ands	r3, r2
 800ed56:	d002      	beq.n	800ed5e <PCD_EP_ISR_Handler+0x2e2>
 800ed58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	881b      	ldrh	r3, [r3, #0]
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	029b      	lsls	r3, r3, #10
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	881b      	ldrh	r3, [r3, #0]
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	2012      	movs	r0, #18
 800ed7e:	183b      	adds	r3, r7, r0
 800ed80:	4911      	ldr	r1, [pc, #68]	@ (800edc8 <PCD_EP_ISR_Handler+0x34c>)
 800ed82:	400a      	ands	r2, r1
 800ed84:	801a      	strh	r2, [r3, #0]
 800ed86:	183b      	adds	r3, r7, r0
 800ed88:	183a      	adds	r2, r7, r0
 800ed8a:	8812      	ldrh	r2, [r2, #0]
 800ed8c:	2180      	movs	r1, #128	@ 0x80
 800ed8e:	0149      	lsls	r1, r1, #5
 800ed90:	404a      	eors	r2, r1
 800ed92:	801a      	strh	r2, [r3, #0]
 800ed94:	183b      	adds	r3, r7, r0
 800ed96:	183a      	adds	r2, r7, r0
 800ed98:	8812      	ldrh	r2, [r2, #0]
 800ed9a:	2180      	movs	r1, #128	@ 0x80
 800ed9c:	0189      	lsls	r1, r1, #6
 800ed9e:	404a      	eors	r2, r1
 800eda0:	801a      	strh	r2, [r3, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	183a      	adds	r2, r7, r0
 800eda8:	8812      	ldrh	r2, [r2, #0]
 800edaa:	4908      	ldr	r1, [pc, #32]	@ (800edcc <PCD_EP_ISR_Handler+0x350>)
 800edac:	430a      	orrs	r2, r1
 800edae:	b292      	uxth	r2, r2
 800edb0:	801a      	strh	r2, [r3, #0]
 800edb2:	e255      	b.n	800f260 <PCD_EP_ISR_Handler+0x7e4>
 800edb4:	ffff8f0f 	.word	0xffff8f0f
 800edb8:	ffff8000 	.word	0xffff8000
 800edbc:	00000402 	.word	0x00000402
 800edc0:	00000406 	.word	0x00000406
 800edc4:	00000f8f 	.word	0x00000f8f
 800edc8:	ffffbf8f 	.word	0xffffbf8f
 800edcc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	001a      	movs	r2, r3
 800edd6:	204d      	movs	r0, #77	@ 0x4d
 800edd8:	183b      	adds	r3, r7, r0
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	18d2      	adds	r2, r2, r3
 800ede0:	214a      	movs	r1, #74	@ 0x4a
 800ede2:	187b      	adds	r3, r7, r1
 800ede4:	8812      	ldrh	r2, [r2, #0]
 800ede6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ede8:	187b      	adds	r3, r7, r1
 800edea:	2200      	movs	r2, #0
 800edec:	5e9b      	ldrsh	r3, [r3, r2]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	db00      	blt.n	800edf4 <PCD_EP_ISR_Handler+0x378>
 800edf2:	e0fa      	b.n	800efea <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	001a      	movs	r2, r3
 800edfa:	183b      	adds	r3, r7, r0
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	18d3      	adds	r3, r2, r3
 800ee02:	881b      	ldrh	r3, [r3, #0]
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	2448      	movs	r4, #72	@ 0x48
 800ee08:	193b      	adds	r3, r7, r4
 800ee0a:	49d1      	ldr	r1, [pc, #836]	@ (800f150 <PCD_EP_ISR_Handler+0x6d4>)
 800ee0c:	400a      	ands	r2, r1
 800ee0e:	801a      	strh	r2, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	001a      	movs	r2, r3
 800ee16:	183b      	adds	r3, r7, r0
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	18d3      	adds	r3, r2, r3
 800ee1e:	193a      	adds	r2, r7, r4
 800ee20:	8812      	ldrh	r2, [r2, #0]
 800ee22:	2180      	movs	r1, #128	@ 0x80
 800ee24:	430a      	orrs	r2, r1
 800ee26:	b292      	uxth	r2, r2
 800ee28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ee2a:	183b      	adds	r3, r7, r0
 800ee2c:	781a      	ldrb	r2, [r3, #0]
 800ee2e:	0013      	movs	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	189b      	adds	r3, r3, r2
 800ee34:	00db      	lsls	r3, r3, #3
 800ee36:	3369      	adds	r3, #105	@ 0x69
 800ee38:	33ff      	adds	r3, #255	@ 0xff
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	18d3      	adds	r3, r2, r3
 800ee3e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ee40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee42:	7b1b      	ldrb	r3, [r3, #12]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d125      	bne.n	800ee94 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2250      	movs	r2, #80	@ 0x50
 800ee4e:	5a9b      	ldrh	r3, [r3, r2]
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	001a      	movs	r2, r3
 800ee54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	00db      	lsls	r3, r3, #3
 800ee5a:	18d2      	adds	r2, r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	18d3      	adds	r3, r2, r3
 800ee62:	4abc      	ldr	r2, [pc, #752]	@ (800f154 <PCD_EP_ISR_Handler+0x6d8>)
 800ee64:	4694      	mov	ip, r2
 800ee66:	4463      	add	r3, ip
 800ee68:	881a      	ldrh	r2, [r3, #0]
 800ee6a:	2450      	movs	r4, #80	@ 0x50
 800ee6c:	193b      	adds	r3, r7, r4
 800ee6e:	0592      	lsls	r2, r2, #22
 800ee70:	0d92      	lsrs	r2, r2, #22
 800ee72:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800ee74:	193b      	adds	r3, r7, r4
 800ee76:	881b      	ldrh	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d100      	bne.n	800ee7e <PCD_EP_ISR_Handler+0x402>
 800ee7c:	e08d      	b.n	800ef9a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6818      	ldr	r0, [r3, #0]
 800ee82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee84:	6959      	ldr	r1, [r3, #20]
 800ee86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee88:	88da      	ldrh	r2, [r3, #6]
 800ee8a:	193b      	adds	r3, r7, r4
 800ee8c:	881b      	ldrh	r3, [r3, #0]
 800ee8e:	f006 fa64 	bl	801535a <USB_ReadPMA>
 800ee92:	e082      	b.n	800ef9a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ee94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee96:	78db      	ldrb	r3, [r3, #3]
 800ee98:	2b02      	cmp	r3, #2
 800ee9a:	d10c      	bne.n	800eeb6 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ee9c:	2350      	movs	r3, #80	@ 0x50
 800ee9e:	18fc      	adds	r4, r7, r3
 800eea0:	234a      	movs	r3, #74	@ 0x4a
 800eea2:	18fb      	adds	r3, r7, r3
 800eea4:	881a      	ldrh	r2, [r3, #0]
 800eea6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	0018      	movs	r0, r3
 800eeac:	f000 f9ec 	bl	800f288 <HAL_PCD_EP_DB_Receive>
 800eeb0:	0003      	movs	r3, r0
 800eeb2:	8023      	strh	r3, [r4, #0]
 800eeb4:	e071      	b.n	800ef9a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	001a      	movs	r2, r3
 800eebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	18d3      	adds	r3, r2, r3
 800eec4:	881b      	ldrh	r3, [r3, #0]
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	2052      	movs	r0, #82	@ 0x52
 800eeca:	183b      	adds	r3, r7, r0
 800eecc:	49a2      	ldr	r1, [pc, #648]	@ (800f158 <PCD_EP_ISR_Handler+0x6dc>)
 800eece:	400a      	ands	r2, r1
 800eed0:	801a      	strh	r2, [r3, #0]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	001a      	movs	r2, r3
 800eed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	18d3      	adds	r3, r2, r3
 800eee0:	183a      	adds	r2, r7, r0
 800eee2:	8812      	ldrh	r2, [r2, #0]
 800eee4:	499d      	ldr	r1, [pc, #628]	@ (800f15c <PCD_EP_ISR_Handler+0x6e0>)
 800eee6:	430a      	orrs	r2, r1
 800eee8:	b292      	uxth	r2, r2
 800eeea:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	001a      	movs	r2, r3
 800eef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	18d3      	adds	r3, r2, r3
 800eefa:	881b      	ldrh	r3, [r3, #0]
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	001a      	movs	r2, r3
 800ef00:	2380      	movs	r3, #128	@ 0x80
 800ef02:	01db      	lsls	r3, r3, #7
 800ef04:	4013      	ands	r3, r2
 800ef06:	d024      	beq.n	800ef52 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2250      	movs	r2, #80	@ 0x50
 800ef0e:	5a9b      	ldrh	r3, [r3, r2]
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	001a      	movs	r2, r3
 800ef14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	00db      	lsls	r3, r3, #3
 800ef1a:	18d2      	adds	r2, r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	18d3      	adds	r3, r2, r3
 800ef22:	4a8f      	ldr	r2, [pc, #572]	@ (800f160 <PCD_EP_ISR_Handler+0x6e4>)
 800ef24:	4694      	mov	ip, r2
 800ef26:	4463      	add	r3, ip
 800ef28:	881a      	ldrh	r2, [r3, #0]
 800ef2a:	2450      	movs	r4, #80	@ 0x50
 800ef2c:	193b      	adds	r3, r7, r4
 800ef2e:	0592      	lsls	r2, r2, #22
 800ef30:	0d92      	lsrs	r2, r2, #22
 800ef32:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800ef34:	193b      	adds	r3, r7, r4
 800ef36:	881b      	ldrh	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d02e      	beq.n	800ef9a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6818      	ldr	r0, [r3, #0]
 800ef40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef42:	6959      	ldr	r1, [r3, #20]
 800ef44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef46:	891a      	ldrh	r2, [r3, #8]
 800ef48:	193b      	adds	r3, r7, r4
 800ef4a:	881b      	ldrh	r3, [r3, #0]
 800ef4c:	f006 fa05 	bl	801535a <USB_ReadPMA>
 800ef50:	e023      	b.n	800ef9a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2250      	movs	r2, #80	@ 0x50
 800ef58:	5a9b      	ldrh	r3, [r3, r2]
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	001a      	movs	r2, r3
 800ef5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	00db      	lsls	r3, r3, #3
 800ef64:	18d2      	adds	r2, r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	18d3      	adds	r3, r2, r3
 800ef6c:	4a79      	ldr	r2, [pc, #484]	@ (800f154 <PCD_EP_ISR_Handler+0x6d8>)
 800ef6e:	4694      	mov	ip, r2
 800ef70:	4463      	add	r3, ip
 800ef72:	881a      	ldrh	r2, [r3, #0]
 800ef74:	2450      	movs	r4, #80	@ 0x50
 800ef76:	193b      	adds	r3, r7, r4
 800ef78:	0592      	lsls	r2, r2, #22
 800ef7a:	0d92      	lsrs	r2, r2, #22
 800ef7c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800ef7e:	193b      	adds	r3, r7, r4
 800ef80:	881b      	ldrh	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d009      	beq.n	800ef9a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6818      	ldr	r0, [r3, #0]
 800ef8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef8c:	6959      	ldr	r1, [r3, #20]
 800ef8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef90:	895a      	ldrh	r2, [r3, #10]
 800ef92:	193b      	adds	r3, r7, r4
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	f006 f9e0 	bl	801535a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ef9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef9c:	69da      	ldr	r2, [r3, #28]
 800ef9e:	2150      	movs	r1, #80	@ 0x50
 800efa0:	187b      	adds	r3, r7, r1
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	18d2      	adds	r2, r2, r3
 800efa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efa8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800efaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efac:	695a      	ldr	r2, [r3, #20]
 800efae:	187b      	adds	r3, r7, r1
 800efb0:	881b      	ldrh	r3, [r3, #0]
 800efb2:	18d2      	adds	r2, r2, r3
 800efb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efb6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800efb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d005      	beq.n	800efcc <PCD_EP_ISR_Handler+0x550>
 800efc0:	187b      	adds	r3, r7, r1
 800efc2:	881a      	ldrh	r2, [r3, #0]
 800efc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efc6:	691b      	ldr	r3, [r3, #16]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d207      	bcs.n	800efdc <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800efcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efce:	781a      	ldrb	r2, [r3, #0]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	0011      	movs	r1, r2
 800efd4:	0018      	movs	r0, r3
 800efd6:	f008 f9da 	bl	801738e <HAL_PCD_DataOutStageCallback>
 800efda:	e006      	b.n	800efea <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800efe2:	0011      	movs	r1, r2
 800efe4:	0018      	movs	r0, r3
 800efe6:	f004 fefd 	bl	8013de4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800efea:	244a      	movs	r4, #74	@ 0x4a
 800efec:	193b      	adds	r3, r7, r4
 800efee:	881b      	ldrh	r3, [r3, #0]
 800eff0:	2280      	movs	r2, #128	@ 0x80
 800eff2:	4013      	ands	r3, r2
 800eff4:	d100      	bne.n	800eff8 <PCD_EP_ISR_Handler+0x57c>
 800eff6:	e133      	b.n	800f260 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800eff8:	204d      	movs	r0, #77	@ 0x4d
 800effa:	183b      	adds	r3, r7, r0
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	0013      	movs	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	189b      	adds	r3, r3, r2
 800f006:	00db      	lsls	r3, r3, #3
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	18d3      	adds	r3, r2, r3
 800f00c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	001a      	movs	r2, r3
 800f014:	183b      	adds	r3, r7, r0
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	18d3      	adds	r3, r2, r3
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	b29a      	uxth	r2, r3
 800f020:	2542      	movs	r5, #66	@ 0x42
 800f022:	197b      	adds	r3, r7, r5
 800f024:	494f      	ldr	r1, [pc, #316]	@ (800f164 <PCD_EP_ISR_Handler+0x6e8>)
 800f026:	400a      	ands	r2, r1
 800f028:	801a      	strh	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	001a      	movs	r2, r3
 800f030:	183b      	adds	r3, r7, r0
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	18d3      	adds	r3, r2, r3
 800f038:	197a      	adds	r2, r7, r5
 800f03a:	8812      	ldrh	r2, [r2, #0]
 800f03c:	494a      	ldr	r1, [pc, #296]	@ (800f168 <PCD_EP_ISR_Handler+0x6ec>)
 800f03e:	430a      	orrs	r2, r1
 800f040:	b292      	uxth	r2, r2
 800f042:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800f044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f046:	78db      	ldrb	r3, [r3, #3]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d000      	beq.n	800f04e <PCD_EP_ISR_Handler+0x5d2>
 800f04c:	e0af      	b.n	800f1ae <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800f04e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f050:	2200      	movs	r2, #0
 800f052:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800f054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f056:	7b1b      	ldrb	r3, [r3, #12]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d100      	bne.n	800f05e <PCD_EP_ISR_Handler+0x5e2>
 800f05c:	e09f      	b.n	800f19e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f05e:	193b      	adds	r3, r7, r4
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	2240      	movs	r2, #64	@ 0x40
 800f064:	4013      	ands	r3, r2
 800f066:	d046      	beq.n	800f0f6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f06a:	785b      	ldrb	r3, [r3, #1]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d125      	bne.n	800f0bc <PCD_EP_ISR_Handler+0x640>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	627b      	str	r3, [r7, #36]	@ 0x24
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2250      	movs	r2, #80	@ 0x50
 800f07c:	5a9b      	ldrh	r3, [r3, r2]
 800f07e:	b29b      	uxth	r3, r3
 800f080:	001a      	movs	r2, r3
 800f082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f084:	189b      	adds	r3, r3, r2
 800f086:	627b      	str	r3, [r7, #36]	@ 0x24
 800f088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	00da      	lsls	r2, r3, #3
 800f08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f090:	18d3      	adds	r3, r2, r3
 800f092:	4a33      	ldr	r2, [pc, #204]	@ (800f160 <PCD_EP_ISR_Handler+0x6e4>)
 800f094:	4694      	mov	ip, r2
 800f096:	4463      	add	r3, ip
 800f098:	623b      	str	r3, [r7, #32]
 800f09a:	6a3b      	ldr	r3, [r7, #32]
 800f09c:	881b      	ldrh	r3, [r3, #0]
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	059b      	lsls	r3, r3, #22
 800f0a2:	0d9b      	lsrs	r3, r3, #22
 800f0a4:	b29a      	uxth	r2, r3
 800f0a6:	6a3b      	ldr	r3, [r7, #32]
 800f0a8:	801a      	strh	r2, [r3, #0]
 800f0aa:	6a3b      	ldr	r3, [r7, #32]
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	4a2d      	ldr	r2, [pc, #180]	@ (800f168 <PCD_EP_ISR_Handler+0x6ec>)
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	6a3b      	ldr	r3, [r7, #32]
 800f0b8:	801a      	strh	r2, [r3, #0]
 800f0ba:	e070      	b.n	800f19e <PCD_EP_ISR_Handler+0x722>
 800f0bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0be:	785b      	ldrb	r3, [r3, #1]
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d16c      	bne.n	800f19e <PCD_EP_ISR_Handler+0x722>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2250      	movs	r2, #80	@ 0x50
 800f0d0:	5a9b      	ldrh	r3, [r3, r2]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	001a      	movs	r2, r3
 800f0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d8:	189b      	adds	r3, r3, r2
 800f0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	00da      	lsls	r2, r3, #3
 800f0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e4:	18d3      	adds	r3, r2, r3
 800f0e6:	4a1e      	ldr	r2, [pc, #120]	@ (800f160 <PCD_EP_ISR_Handler+0x6e4>)
 800f0e8:	4694      	mov	ip, r2
 800f0ea:	4463      	add	r3, ip
 800f0ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	801a      	strh	r2, [r3, #0]
 800f0f4:	e053      	b.n	800f19e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0fe:	785b      	ldrb	r3, [r3, #1]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d133      	bne.n	800f16c <PCD_EP_ISR_Handler+0x6f0>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	637b      	str	r3, [r7, #52]	@ 0x34
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	2250      	movs	r2, #80	@ 0x50
 800f110:	5a9b      	ldrh	r3, [r3, r2]
 800f112:	b29b      	uxth	r3, r3
 800f114:	001a      	movs	r2, r3
 800f116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f118:	189b      	adds	r3, r3, r2
 800f11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f11c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	00da      	lsls	r2, r3, #3
 800f122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f124:	18d3      	adds	r3, r2, r3
 800f126:	4a0b      	ldr	r2, [pc, #44]	@ (800f154 <PCD_EP_ISR_Handler+0x6d8>)
 800f128:	4694      	mov	ip, r2
 800f12a:	4463      	add	r3, ip
 800f12c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	b29b      	uxth	r3, r3
 800f134:	059b      	lsls	r3, r3, #22
 800f136:	0d9b      	lsrs	r3, r3, #22
 800f138:	b29a      	uxth	r2, r3
 800f13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f13c:	801a      	strh	r2, [r3, #0]
 800f13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f140:	881b      	ldrh	r3, [r3, #0]
 800f142:	b29b      	uxth	r3, r3
 800f144:	4a08      	ldr	r2, [pc, #32]	@ (800f168 <PCD_EP_ISR_Handler+0x6ec>)
 800f146:	4313      	orrs	r3, r2
 800f148:	b29a      	uxth	r2, r3
 800f14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f14c:	801a      	strh	r2, [r3, #0]
 800f14e:	e026      	b.n	800f19e <PCD_EP_ISR_Handler+0x722>
 800f150:	00000f8f 	.word	0x00000f8f
 800f154:	00000406 	.word	0x00000406
 800f158:	ffff8f8f 	.word	0xffff8f8f
 800f15c:	ffff80c0 	.word	0xffff80c0
 800f160:	00000402 	.word	0x00000402
 800f164:	ffff8f0f 	.word	0xffff8f0f
 800f168:	ffff8000 	.word	0xffff8000
 800f16c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f16e:	785b      	ldrb	r3, [r3, #1]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d114      	bne.n	800f19e <PCD_EP_ISR_Handler+0x722>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2250      	movs	r2, #80	@ 0x50
 800f17a:	5a9b      	ldrh	r3, [r3, r2]
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	001a      	movs	r2, r3
 800f180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f182:	189b      	adds	r3, r3, r2
 800f184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	00da      	lsls	r2, r3, #3
 800f18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f18e:	18d3      	adds	r3, r2, r3
 800f190:	4a3b      	ldr	r2, [pc, #236]	@ (800f280 <PCD_EP_ISR_Handler+0x804>)
 800f192:	4694      	mov	ip, r2
 800f194:	4463      	add	r3, ip
 800f196:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f19a:	2200      	movs	r2, #0
 800f19c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1a0:	781a      	ldrb	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	0011      	movs	r1, r2
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	f008 f912 	bl	80173d0 <HAL_PCD_DataInStageCallback>
 800f1ac:	e058      	b.n	800f260 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800f1ae:	234a      	movs	r3, #74	@ 0x4a
 800f1b0:	18fb      	adds	r3, r7, r3
 800f1b2:	881a      	ldrh	r2, [r3, #0]
 800f1b4:	2380      	movs	r3, #128	@ 0x80
 800f1b6:	005b      	lsls	r3, r3, #1
 800f1b8:	4013      	ands	r3, r2
 800f1ba:	d149      	bne.n	800f250 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2250      	movs	r2, #80	@ 0x50
 800f1c2:	5a9b      	ldrh	r3, [r3, r2]
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	001a      	movs	r2, r3
 800f1c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	00db      	lsls	r3, r3, #3
 800f1ce:	18d2      	adds	r2, r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	18d3      	adds	r3, r2, r3
 800f1d6:	4a2b      	ldr	r2, [pc, #172]	@ (800f284 <PCD_EP_ISR_Handler+0x808>)
 800f1d8:	4694      	mov	ip, r2
 800f1da:	4463      	add	r3, ip
 800f1dc:	881a      	ldrh	r2, [r3, #0]
 800f1de:	2140      	movs	r1, #64	@ 0x40
 800f1e0:	187b      	adds	r3, r7, r1
 800f1e2:	0592      	lsls	r2, r2, #22
 800f1e4:	0d92      	lsrs	r2, r2, #22
 800f1e6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800f1e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1ea:	699a      	ldr	r2, [r3, #24]
 800f1ec:	187b      	adds	r3, r7, r1
 800f1ee:	881b      	ldrh	r3, [r3, #0]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d907      	bls.n	800f204 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800f1f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1f6:	699a      	ldr	r2, [r3, #24]
 800f1f8:	187b      	adds	r3, r7, r1
 800f1fa:	881b      	ldrh	r3, [r3, #0]
 800f1fc:	1ad2      	subs	r2, r2, r3
 800f1fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f200:	619a      	str	r2, [r3, #24]
 800f202:	e002      	b.n	800f20a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800f204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f206:	2200      	movs	r2, #0
 800f208:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800f20a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f20c:	699b      	ldr	r3, [r3, #24]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d107      	bne.n	800f222 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f214:	781a      	ldrb	r2, [r3, #0]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	0011      	movs	r1, r2
 800f21a:	0018      	movs	r0, r3
 800f21c:	f008 f8d8 	bl	80173d0 <HAL_PCD_DataInStageCallback>
 800f220:	e01e      	b.n	800f260 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800f222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f224:	695a      	ldr	r2, [r3, #20]
 800f226:	2140      	movs	r1, #64	@ 0x40
 800f228:	187b      	adds	r3, r7, r1
 800f22a:	881b      	ldrh	r3, [r3, #0]
 800f22c:	18d2      	adds	r2, r2, r3
 800f22e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f230:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800f232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f234:	69da      	ldr	r2, [r3, #28]
 800f236:	187b      	adds	r3, r7, r1
 800f238:	881b      	ldrh	r3, [r3, #0]
 800f23a:	18d2      	adds	r2, r2, r3
 800f23c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f23e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f246:	0011      	movs	r1, r2
 800f248:	0018      	movs	r0, r3
 800f24a:	f004 fdcb 	bl	8013de4 <USB_EPStartXfer>
 800f24e:	e007      	b.n	800f260 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800f250:	234a      	movs	r3, #74	@ 0x4a
 800f252:	18fb      	adds	r3, r7, r3
 800f254:	881a      	ldrh	r2, [r3, #0]
 800f256:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	0018      	movs	r0, r3
 800f25c:	f000 f930 	bl	800f4c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2244      	movs	r2, #68	@ 0x44
 800f266:	5a9b      	ldrh	r3, [r3, r2]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	b21b      	sxth	r3, r3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	da01      	bge.n	800f274 <PCD_EP_ISR_Handler+0x7f8>
 800f270:	f7ff fc0a 	bl	800ea88 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800f274:	2300      	movs	r3, #0
}
 800f276:	0018      	movs	r0, r3
 800f278:	46bd      	mov	sp, r7
 800f27a:	b016      	add	sp, #88	@ 0x58
 800f27c:	bdb0      	pop	{r4, r5, r7, pc}
 800f27e:	46c0      	nop			@ (mov r8, r8)
 800f280:	00000406 	.word	0x00000406
 800f284:	00000402 	.word	0x00000402

0800f288 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f288:	b590      	push	{r4, r7, lr}
 800f28a:	b089      	sub	sp, #36	@ 0x24
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	1dbb      	adds	r3, r7, #6
 800f294:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f296:	1dbb      	adds	r3, r7, #6
 800f298:	881a      	ldrh	r2, [r3, #0]
 800f29a:	2380      	movs	r3, #128	@ 0x80
 800f29c:	01db      	lsls	r3, r3, #7
 800f29e:	4013      	ands	r3, r2
 800f2a0:	d100      	bne.n	800f2a4 <HAL_PCD_EP_DB_Receive+0x1c>
 800f2a2:	e07d      	b.n	800f3a0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2250      	movs	r2, #80	@ 0x50
 800f2aa:	5a9b      	ldrh	r3, [r3, r2]
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	001a      	movs	r2, r3
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	00db      	lsls	r3, r3, #3
 800f2b6:	18d2      	adds	r2, r2, r3
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	18d3      	adds	r3, r2, r3
 800f2be:	4a7a      	ldr	r2, [pc, #488]	@ (800f4a8 <HAL_PCD_EP_DB_Receive+0x220>)
 800f2c0:	4694      	mov	ip, r2
 800f2c2:	4463      	add	r3, ip
 800f2c4:	881a      	ldrh	r2, [r3, #0]
 800f2c6:	211a      	movs	r1, #26
 800f2c8:	187b      	adds	r3, r7, r1
 800f2ca:	0592      	lsls	r2, r2, #22
 800f2cc:	0d92      	lsrs	r2, r2, #22
 800f2ce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	699a      	ldr	r2, [r3, #24]
 800f2d4:	187b      	adds	r3, r7, r1
 800f2d6:	881b      	ldrh	r3, [r3, #0]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d307      	bcc.n	800f2ec <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	699a      	ldr	r2, [r3, #24]
 800f2e0:	187b      	adds	r3, r7, r1
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	1ad2      	subs	r2, r2, r3
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	619a      	str	r2, [r3, #24]
 800f2ea:	e002      	b.n	800f2f2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	699b      	ldr	r3, [r3, #24]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d121      	bne.n	800f33e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	001a      	movs	r2, r3
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	18d3      	adds	r3, r2, r3
 800f308:	881b      	ldrh	r3, [r3, #0]
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	2018      	movs	r0, #24
 800f30e:	183b      	adds	r3, r7, r0
 800f310:	4966      	ldr	r1, [pc, #408]	@ (800f4ac <HAL_PCD_EP_DB_Receive+0x224>)
 800f312:	400a      	ands	r2, r1
 800f314:	801a      	strh	r2, [r3, #0]
 800f316:	183b      	adds	r3, r7, r0
 800f318:	183a      	adds	r2, r7, r0
 800f31a:	8812      	ldrh	r2, [r2, #0]
 800f31c:	2180      	movs	r1, #128	@ 0x80
 800f31e:	0189      	lsls	r1, r1, #6
 800f320:	404a      	eors	r2, r1
 800f322:	801a      	strh	r2, [r3, #0]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	001a      	movs	r2, r3
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	18d3      	adds	r3, r2, r3
 800f332:	183a      	adds	r2, r7, r0
 800f334:	8812      	ldrh	r2, [r2, #0]
 800f336:	495e      	ldr	r1, [pc, #376]	@ (800f4b0 <HAL_PCD_EP_DB_Receive+0x228>)
 800f338:	430a      	orrs	r2, r1
 800f33a:	b292      	uxth	r2, r2
 800f33c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f33e:	1dbb      	adds	r3, r7, #6
 800f340:	881b      	ldrh	r3, [r3, #0]
 800f342:	2240      	movs	r2, #64	@ 0x40
 800f344:	4013      	ands	r3, r2
 800f346:	d01a      	beq.n	800f37e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	001a      	movs	r2, r3
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	18d3      	adds	r3, r2, r3
 800f356:	881b      	ldrh	r3, [r3, #0]
 800f358:	b29a      	uxth	r2, r3
 800f35a:	2016      	movs	r0, #22
 800f35c:	183b      	adds	r3, r7, r0
 800f35e:	4955      	ldr	r1, [pc, #340]	@ (800f4b4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800f360:	400a      	ands	r2, r1
 800f362:	801a      	strh	r2, [r3, #0]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	001a      	movs	r2, r3
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	18d3      	adds	r3, r2, r3
 800f372:	183a      	adds	r2, r7, r0
 800f374:	8812      	ldrh	r2, [r2, #0]
 800f376:	4950      	ldr	r1, [pc, #320]	@ (800f4b8 <HAL_PCD_EP_DB_Receive+0x230>)
 800f378:	430a      	orrs	r2, r1
 800f37a:	b292      	uxth	r2, r2
 800f37c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f37e:	241a      	movs	r4, #26
 800f380:	193b      	adds	r3, r7, r4
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d100      	bne.n	800f38a <HAL_PCD_EP_DB_Receive+0x102>
 800f388:	e086      	b.n	800f498 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6818      	ldr	r0, [r3, #0]
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	6959      	ldr	r1, [r3, #20]
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	891a      	ldrh	r2, [r3, #8]
 800f396:	193b      	adds	r3, r7, r4
 800f398:	881b      	ldrh	r3, [r3, #0]
 800f39a:	f005 ffde 	bl	801535a <USB_ReadPMA>
 800f39e:	e07b      	b.n	800f498 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2250      	movs	r2, #80	@ 0x50
 800f3a6:	5a9b      	ldrh	r3, [r3, r2]
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	001a      	movs	r2, r3
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	00db      	lsls	r3, r3, #3
 800f3b2:	18d2      	adds	r2, r2, r3
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	18d3      	adds	r3, r2, r3
 800f3ba:	4a40      	ldr	r2, [pc, #256]	@ (800f4bc <HAL_PCD_EP_DB_Receive+0x234>)
 800f3bc:	4694      	mov	ip, r2
 800f3be:	4463      	add	r3, ip
 800f3c0:	881a      	ldrh	r2, [r3, #0]
 800f3c2:	211a      	movs	r1, #26
 800f3c4:	187b      	adds	r3, r7, r1
 800f3c6:	0592      	lsls	r2, r2, #22
 800f3c8:	0d92      	lsrs	r2, r2, #22
 800f3ca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	699a      	ldr	r2, [r3, #24]
 800f3d0:	187b      	adds	r3, r7, r1
 800f3d2:	881b      	ldrh	r3, [r3, #0]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d307      	bcc.n	800f3e8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	699a      	ldr	r2, [r3, #24]
 800f3dc:	187b      	adds	r3, r7, r1
 800f3de:	881b      	ldrh	r3, [r3, #0]
 800f3e0:	1ad2      	subs	r2, r2, r3
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	619a      	str	r2, [r3, #24]
 800f3e6:	e002      	b.n	800f3ee <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	699b      	ldr	r3, [r3, #24]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d121      	bne.n	800f43a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	001a      	movs	r2, r3
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	18d3      	adds	r3, r2, r3
 800f404:	881b      	ldrh	r3, [r3, #0]
 800f406:	b29a      	uxth	r2, r3
 800f408:	201e      	movs	r0, #30
 800f40a:	183b      	adds	r3, r7, r0
 800f40c:	4927      	ldr	r1, [pc, #156]	@ (800f4ac <HAL_PCD_EP_DB_Receive+0x224>)
 800f40e:	400a      	ands	r2, r1
 800f410:	801a      	strh	r2, [r3, #0]
 800f412:	183b      	adds	r3, r7, r0
 800f414:	183a      	adds	r2, r7, r0
 800f416:	8812      	ldrh	r2, [r2, #0]
 800f418:	2180      	movs	r1, #128	@ 0x80
 800f41a:	0189      	lsls	r1, r1, #6
 800f41c:	404a      	eors	r2, r1
 800f41e:	801a      	strh	r2, [r3, #0]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	001a      	movs	r2, r3
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	18d3      	adds	r3, r2, r3
 800f42e:	183a      	adds	r2, r7, r0
 800f430:	8812      	ldrh	r2, [r2, #0]
 800f432:	491f      	ldr	r1, [pc, #124]	@ (800f4b0 <HAL_PCD_EP_DB_Receive+0x228>)
 800f434:	430a      	orrs	r2, r1
 800f436:	b292      	uxth	r2, r2
 800f438:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800f43a:	1dbb      	adds	r3, r7, #6
 800f43c:	881b      	ldrh	r3, [r3, #0]
 800f43e:	2240      	movs	r2, #64	@ 0x40
 800f440:	4013      	ands	r3, r2
 800f442:	d11a      	bne.n	800f47a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	001a      	movs	r2, r3
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	18d3      	adds	r3, r2, r3
 800f452:	881b      	ldrh	r3, [r3, #0]
 800f454:	b29a      	uxth	r2, r3
 800f456:	201c      	movs	r0, #28
 800f458:	183b      	adds	r3, r7, r0
 800f45a:	4916      	ldr	r1, [pc, #88]	@ (800f4b4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800f45c:	400a      	ands	r2, r1
 800f45e:	801a      	strh	r2, [r3, #0]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	001a      	movs	r2, r3
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	18d3      	adds	r3, r2, r3
 800f46e:	183a      	adds	r2, r7, r0
 800f470:	8812      	ldrh	r2, [r2, #0]
 800f472:	4911      	ldr	r1, [pc, #68]	@ (800f4b8 <HAL_PCD_EP_DB_Receive+0x230>)
 800f474:	430a      	orrs	r2, r1
 800f476:	b292      	uxth	r2, r2
 800f478:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f47a:	241a      	movs	r4, #26
 800f47c:	193b      	adds	r3, r7, r4
 800f47e:	881b      	ldrh	r3, [r3, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d009      	beq.n	800f498 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6818      	ldr	r0, [r3, #0]
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	6959      	ldr	r1, [r3, #20]
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	895a      	ldrh	r2, [r3, #10]
 800f490:	193b      	adds	r3, r7, r4
 800f492:	881b      	ldrh	r3, [r3, #0]
 800f494:	f005 ff61 	bl	801535a <USB_ReadPMA>
    }
  }

  return count;
 800f498:	231a      	movs	r3, #26
 800f49a:	18fb      	adds	r3, r7, r3
 800f49c:	881b      	ldrh	r3, [r3, #0]
}
 800f49e:	0018      	movs	r0, r3
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	b009      	add	sp, #36	@ 0x24
 800f4a4:	bd90      	pop	{r4, r7, pc}
 800f4a6:	46c0      	nop			@ (mov r8, r8)
 800f4a8:	00000402 	.word	0x00000402
 800f4ac:	ffffbf8f 	.word	0xffffbf8f
 800f4b0:	ffff8080 	.word	0xffff8080
 800f4b4:	ffff8f8f 	.word	0xffff8f8f
 800f4b8:	ffff80c0 	.word	0xffff80c0
 800f4bc:	00000406 	.word	0x00000406

0800f4c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b0a4      	sub	sp, #144	@ 0x90
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	1dbb      	adds	r3, r7, #6
 800f4cc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f4ce:	1dbb      	adds	r3, r7, #6
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	2240      	movs	r2, #64	@ 0x40
 800f4d4:	4013      	ands	r3, r2
 800f4d6:	d100      	bne.n	800f4da <HAL_PCD_EP_DB_Transmit+0x1a>
 800f4d8:	e1e4      	b.n	800f8a4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2250      	movs	r2, #80	@ 0x50
 800f4e0:	5a9b      	ldrh	r3, [r3, r2]
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	001a      	movs	r2, r3
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	00db      	lsls	r3, r3, #3
 800f4ec:	18d2      	adds	r2, r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	18d3      	adds	r3, r2, r3
 800f4f4:	4ad0      	ldr	r2, [pc, #832]	@ (800f838 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f4f6:	4694      	mov	ip, r2
 800f4f8:	4463      	add	r3, ip
 800f4fa:	881a      	ldrh	r2, [r3, #0]
 800f4fc:	2186      	movs	r1, #134	@ 0x86
 800f4fe:	187b      	adds	r3, r7, r1
 800f500:	0592      	lsls	r2, r2, #22
 800f502:	0d92      	lsrs	r2, r2, #22
 800f504:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	699a      	ldr	r2, [r3, #24]
 800f50a:	187b      	adds	r3, r7, r1
 800f50c:	881b      	ldrh	r3, [r3, #0]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d907      	bls.n	800f522 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	699a      	ldr	r2, [r3, #24]
 800f516:	187b      	adds	r3, r7, r1
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	1ad2      	subs	r2, r2, r3
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	619a      	str	r2, [r3, #24]
 800f520:	e002      	b.n	800f528 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	2200      	movs	r2, #0
 800f526:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	699b      	ldr	r3, [r3, #24]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d000      	beq.n	800f532 <HAL_PCD_EP_DB_Transmit+0x72>
 800f530:	e0b5      	b.n	800f69e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	785b      	ldrb	r3, [r3, #1]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d125      	bne.n	800f586 <HAL_PCD_EP_DB_Transmit+0xc6>
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2250      	movs	r2, #80	@ 0x50
 800f546:	5a9b      	ldrh	r3, [r3, r2]
 800f548:	b29b      	uxth	r3, r3
 800f54a:	001a      	movs	r2, r3
 800f54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f54e:	189b      	adds	r3, r3, r2
 800f550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	00da      	lsls	r2, r3, #3
 800f558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f55a:	18d3      	adds	r3, r2, r3
 800f55c:	4ab6      	ldr	r2, [pc, #728]	@ (800f838 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f55e:	4694      	mov	ip, r2
 800f560:	4463      	add	r3, ip
 800f562:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f566:	881b      	ldrh	r3, [r3, #0]
 800f568:	b29b      	uxth	r3, r3
 800f56a:	059b      	lsls	r3, r3, #22
 800f56c:	0d9b      	lsrs	r3, r3, #22
 800f56e:	b29a      	uxth	r2, r3
 800f570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f572:	801a      	strh	r2, [r3, #0]
 800f574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f576:	881b      	ldrh	r3, [r3, #0]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	4ab0      	ldr	r2, [pc, #704]	@ (800f83c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f57c:	4313      	orrs	r3, r2
 800f57e:	b29a      	uxth	r2, r3
 800f580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f582:	801a      	strh	r2, [r3, #0]
 800f584:	e01b      	b.n	800f5be <HAL_PCD_EP_DB_Transmit+0xfe>
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	785b      	ldrb	r3, [r3, #1]
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d117      	bne.n	800f5be <HAL_PCD_EP_DB_Transmit+0xfe>
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	637b      	str	r3, [r7, #52]	@ 0x34
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2250      	movs	r2, #80	@ 0x50
 800f59a:	5a9b      	ldrh	r3, [r3, r2]
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	001a      	movs	r2, r3
 800f5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5a2:	189b      	adds	r3, r3, r2
 800f5a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	00da      	lsls	r2, r3, #3
 800f5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5ae:	18d3      	adds	r3, r2, r3
 800f5b0:	4aa1      	ldr	r2, [pc, #644]	@ (800f838 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f5b2:	4694      	mov	ip, r2
 800f5b4:	4463      	add	r3, ip
 800f5b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	785b      	ldrb	r3, [r3, #1]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d125      	bne.n	800f618 <HAL_PCD_EP_DB_Transmit+0x158>
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	61fb      	str	r3, [r7, #28]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2250      	movs	r2, #80	@ 0x50
 800f5d8:	5a9b      	ldrh	r3, [r3, r2]
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	001a      	movs	r2, r3
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	189b      	adds	r3, r3, r2
 800f5e2:	61fb      	str	r3, [r7, #28]
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	00da      	lsls	r2, r3, #3
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	18d3      	adds	r3, r2, r3
 800f5ee:	4a94      	ldr	r2, [pc, #592]	@ (800f840 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f5f0:	4694      	mov	ip, r2
 800f5f2:	4463      	add	r3, ip
 800f5f4:	61bb      	str	r3, [r7, #24]
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	881b      	ldrh	r3, [r3, #0]
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	059b      	lsls	r3, r3, #22
 800f5fe:	0d9b      	lsrs	r3, r3, #22
 800f600:	b29a      	uxth	r2, r3
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	801a      	strh	r2, [r3, #0]
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	4a8b      	ldr	r2, [pc, #556]	@ (800f83c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f60e:	4313      	orrs	r3, r2
 800f610:	b29a      	uxth	r2, r3
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	801a      	strh	r2, [r3, #0]
 800f616:	e018      	b.n	800f64a <HAL_PCD_EP_DB_Transmit+0x18a>
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	785b      	ldrb	r3, [r3, #1]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d114      	bne.n	800f64a <HAL_PCD_EP_DB_Transmit+0x18a>
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2250      	movs	r2, #80	@ 0x50
 800f626:	5a9b      	ldrh	r3, [r3, r2]
 800f628:	b29b      	uxth	r3, r3
 800f62a:	001a      	movs	r2, r3
 800f62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62e:	189b      	adds	r3, r3, r2
 800f630:	627b      	str	r3, [r7, #36]	@ 0x24
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	00da      	lsls	r2, r3, #3
 800f638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f63a:	18d3      	adds	r3, r2, r3
 800f63c:	4a80      	ldr	r2, [pc, #512]	@ (800f840 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f63e:	4694      	mov	ip, r2
 800f640:	4463      	add	r3, ip
 800f642:	623b      	str	r3, [r7, #32]
 800f644:	6a3b      	ldr	r3, [r7, #32]
 800f646:	2200      	movs	r2, #0
 800f648:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	781a      	ldrb	r2, [r3, #0]
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	0011      	movs	r1, r2
 800f652:	0018      	movs	r0, r3
 800f654:	f007 febc 	bl	80173d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f658:	1dbb      	adds	r3, r7, #6
 800f65a:	881a      	ldrh	r2, [r3, #0]
 800f65c:	2380      	movs	r3, #128	@ 0x80
 800f65e:	01db      	lsls	r3, r3, #7
 800f660:	4013      	ands	r3, r2
 800f662:	d100      	bne.n	800f666 <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f664:	e309      	b.n	800fc7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	001a      	movs	r2, r3
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	18d3      	adds	r3, r2, r3
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	b29a      	uxth	r2, r3
 800f678:	2016      	movs	r0, #22
 800f67a:	183b      	adds	r3, r7, r0
 800f67c:	4971      	ldr	r1, [pc, #452]	@ (800f844 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f67e:	400a      	ands	r2, r1
 800f680:	801a      	strh	r2, [r3, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	001a      	movs	r2, r3
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	009b      	lsls	r3, r3, #2
 800f68e:	18d3      	adds	r3, r2, r3
 800f690:	183a      	adds	r2, r7, r0
 800f692:	8812      	ldrh	r2, [r2, #0]
 800f694:	496c      	ldr	r1, [pc, #432]	@ (800f848 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f696:	430a      	orrs	r2, r1
 800f698:	b292      	uxth	r2, r2
 800f69a:	801a      	strh	r2, [r3, #0]
 800f69c:	e2ed      	b.n	800fc7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f69e:	1dbb      	adds	r3, r7, #6
 800f6a0:	881a      	ldrh	r2, [r3, #0]
 800f6a2:	2380      	movs	r3, #128	@ 0x80
 800f6a4:	01db      	lsls	r3, r3, #7
 800f6a6:	4013      	ands	r3, r2
 800f6a8:	d01a      	beq.n	800f6e0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	001a      	movs	r2, r3
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	009b      	lsls	r3, r3, #2
 800f6b6:	18d3      	adds	r3, r2, r3
 800f6b8:	881b      	ldrh	r3, [r3, #0]
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	208a      	movs	r0, #138	@ 0x8a
 800f6be:	183b      	adds	r3, r7, r0
 800f6c0:	4960      	ldr	r1, [pc, #384]	@ (800f844 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f6c2:	400a      	ands	r2, r1
 800f6c4:	801a      	strh	r2, [r3, #0]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	001a      	movs	r2, r3
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	18d3      	adds	r3, r2, r3
 800f6d4:	183a      	adds	r2, r7, r0
 800f6d6:	8812      	ldrh	r2, [r2, #0]
 800f6d8:	495b      	ldr	r1, [pc, #364]	@ (800f848 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f6da:	430a      	orrs	r2, r1
 800f6dc:	b292      	uxth	r2, r2
 800f6de:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	2224      	movs	r2, #36	@ 0x24
 800f6e4:	5c9b      	ldrb	r3, [r3, r2]
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d000      	beq.n	800f6ec <HAL_PCD_EP_DB_Transmit+0x22c>
 800f6ea:	e2c6      	b.n	800fc7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	695a      	ldr	r2, [r3, #20]
 800f6f0:	2186      	movs	r1, #134	@ 0x86
 800f6f2:	187b      	adds	r3, r7, r1
 800f6f4:	881b      	ldrh	r3, [r3, #0]
 800f6f6:	18d2      	adds	r2, r2, r3
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	69da      	ldr	r2, [r3, #28]
 800f700:	187b      	adds	r3, r7, r1
 800f702:	881b      	ldrh	r3, [r3, #0]
 800f704:	18d2      	adds	r2, r2, r3
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	6a1a      	ldr	r2, [r3, #32]
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	691b      	ldr	r3, [r3, #16]
 800f712:	429a      	cmp	r2, r3
 800f714:	d30c      	bcc.n	800f730 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	691b      	ldr	r3, [r3, #16]
 800f71a:	218c      	movs	r1, #140	@ 0x8c
 800f71c:	187a      	adds	r2, r7, r1
 800f71e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	6a1a      	ldr	r2, [r3, #32]
 800f724:	187b      	adds	r3, r7, r1
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	1ad2      	subs	r2, r2, r3
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	621a      	str	r2, [r3, #32]
 800f72e:	e01a      	b.n	800f766 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	6a1b      	ldr	r3, [r3, #32]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d10a      	bne.n	800f74e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800f738:	2386      	movs	r3, #134	@ 0x86
 800f73a:	18fb      	adds	r3, r7, r3
 800f73c:	881b      	ldrh	r3, [r3, #0]
 800f73e:	228c      	movs	r2, #140	@ 0x8c
 800f740:	18ba      	adds	r2, r7, r2
 800f742:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2224      	movs	r2, #36	@ 0x24
 800f748:	2100      	movs	r1, #0
 800f74a:	5499      	strb	r1, [r3, r2]
 800f74c:	e00b      	b.n	800f766 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	2224      	movs	r2, #36	@ 0x24
 800f752:	2100      	movs	r1, #0
 800f754:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	6a1b      	ldr	r3, [r3, #32]
 800f75a:	228c      	movs	r2, #140	@ 0x8c
 800f75c:	18ba      	adds	r2, r7, r2
 800f75e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	2200      	movs	r2, #0
 800f764:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	785b      	ldrb	r3, [r3, #1]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d000      	beq.n	800f770 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800f76e:	e06d      	b.n	800f84c <HAL_PCD_EP_DB_Transmit+0x38c>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2250      	movs	r2, #80	@ 0x50
 800f77c:	5a9b      	ldrh	r3, [r3, r2]
 800f77e:	b29b      	uxth	r3, r3
 800f780:	001a      	movs	r2, r3
 800f782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f784:	189b      	adds	r3, r3, r2
 800f786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	00da      	lsls	r2, r3, #3
 800f78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f790:	18d3      	adds	r3, r2, r3
 800f792:	4a29      	ldr	r2, [pc, #164]	@ (800f838 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f794:	4694      	mov	ip, r2
 800f796:	4463      	add	r3, ip
 800f798:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79c:	881b      	ldrh	r3, [r3, #0]
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	059b      	lsls	r3, r3, #22
 800f7a2:	0d9b      	lsrs	r3, r3, #22
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7a8:	801a      	strh	r2, [r3, #0]
 800f7aa:	228c      	movs	r2, #140	@ 0x8c
 800f7ac:	18bb      	adds	r3, r7, r2
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800f7b2:	d91a      	bls.n	800f7ea <HAL_PCD_EP_DB_Transmit+0x32a>
 800f7b4:	18bb      	adds	r3, r7, r2
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	095b      	lsrs	r3, r3, #5
 800f7ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7bc:	18bb      	adds	r3, r7, r2
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	221f      	movs	r2, #31
 800f7c2:	4013      	ands	r3, r2
 800f7c4:	d102      	bne.n	800f7cc <HAL_PCD_EP_DB_Transmit+0x30c>
 800f7c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ce:	881b      	ldrh	r3, [r3, #0]
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	029b      	lsls	r3, r3, #10
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	4a17      	ldr	r2, [pc, #92]	@ (800f83c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e6:	801a      	strh	r2, [r3, #0]
 800f7e8:	e04f      	b.n	800f88a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f7ea:	238c      	movs	r3, #140	@ 0x8c
 800f7ec:	18fb      	adds	r3, r7, r3
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d108      	bne.n	800f806 <HAL_PCD_EP_DB_Transmit+0x346>
 800f7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f6:	881b      	ldrh	r3, [r3, #0]
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	4a10      	ldr	r2, [pc, #64]	@ (800f83c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f802:	801a      	strh	r2, [r3, #0]
 800f804:	e041      	b.n	800f88a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f806:	228c      	movs	r2, #140	@ 0x8c
 800f808:	18bb      	adds	r3, r7, r2
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	085b      	lsrs	r3, r3, #1
 800f80e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f810:	18bb      	adds	r3, r7, r2
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2201      	movs	r2, #1
 800f816:	4013      	ands	r3, r2
 800f818:	d002      	beq.n	800f820 <HAL_PCD_EP_DB_Transmit+0x360>
 800f81a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f81c:	3301      	adds	r3, #1
 800f81e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f822:	881b      	ldrh	r3, [r3, #0]
 800f824:	b29a      	uxth	r2, r3
 800f826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f828:	b29b      	uxth	r3, r3
 800f82a:	029b      	lsls	r3, r3, #10
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	4313      	orrs	r3, r2
 800f830:	b29a      	uxth	r2, r3
 800f832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f834:	801a      	strh	r2, [r3, #0]
 800f836:	e028      	b.n	800f88a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f838:	00000402 	.word	0x00000402
 800f83c:	ffff8000 	.word	0xffff8000
 800f840:	00000406 	.word	0x00000406
 800f844:	ffff8f8f 	.word	0xffff8f8f
 800f848:	ffffc080 	.word	0xffffc080
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	785b      	ldrb	r3, [r3, #1]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d11a      	bne.n	800f88a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	647b      	str	r3, [r7, #68]	@ 0x44
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2250      	movs	r2, #80	@ 0x50
 800f860:	5a9b      	ldrh	r3, [r3, r2]
 800f862:	b29b      	uxth	r3, r3
 800f864:	001a      	movs	r2, r3
 800f866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f868:	189b      	adds	r3, r3, r2
 800f86a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	00da      	lsls	r2, r3, #3
 800f872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f874:	18d3      	adds	r3, r2, r3
 800f876:	4adb      	ldr	r2, [pc, #876]	@ (800fbe4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f878:	4694      	mov	ip, r2
 800f87a:	4463      	add	r3, ip
 800f87c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f87e:	238c      	movs	r3, #140	@ 0x8c
 800f880:	18fb      	adds	r3, r7, r3
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	b29a      	uxth	r2, r3
 800f886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f888:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	6818      	ldr	r0, [r3, #0]
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	6959      	ldr	r1, [r3, #20]
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	891a      	ldrh	r2, [r3, #8]
 800f896:	238c      	movs	r3, #140	@ 0x8c
 800f898:	18fb      	adds	r3, r7, r3
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	f005 fd13 	bl	80152c8 <USB_WritePMA>
 800f8a2:	e1ea      	b.n	800fc7a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2250      	movs	r2, #80	@ 0x50
 800f8aa:	5a9b      	ldrh	r3, [r3, r2]
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	001a      	movs	r2, r3
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	00db      	lsls	r3, r3, #3
 800f8b6:	18d2      	adds	r2, r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	18d3      	adds	r3, r2, r3
 800f8be:	4aca      	ldr	r2, [pc, #808]	@ (800fbe8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f8c0:	4694      	mov	ip, r2
 800f8c2:	4463      	add	r3, ip
 800f8c4:	881a      	ldrh	r2, [r3, #0]
 800f8c6:	2186      	movs	r1, #134	@ 0x86
 800f8c8:	187b      	adds	r3, r7, r1
 800f8ca:	0592      	lsls	r2, r2, #22
 800f8cc:	0d92      	lsrs	r2, r2, #22
 800f8ce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	699a      	ldr	r2, [r3, #24]
 800f8d4:	187b      	adds	r3, r7, r1
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d307      	bcc.n	800f8ec <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	699a      	ldr	r2, [r3, #24]
 800f8e0:	187b      	adds	r3, r7, r1
 800f8e2:	881b      	ldrh	r3, [r3, #0]
 800f8e4:	1ad2      	subs	r2, r2, r3
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	619a      	str	r2, [r3, #24]
 800f8ea:	e002      	b.n	800f8f2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	699b      	ldr	r3, [r3, #24]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d000      	beq.n	800f8fc <HAL_PCD_EP_DB_Transmit+0x43c>
 800f8fa:	e0bb      	b.n	800fa74 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	785b      	ldrb	r3, [r3, #1]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d125      	bne.n	800f950 <HAL_PCD_EP_DB_Transmit+0x490>
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2250      	movs	r2, #80	@ 0x50
 800f910:	5a9b      	ldrh	r3, [r3, r2]
 800f912:	b29b      	uxth	r3, r3
 800f914:	001a      	movs	r2, r3
 800f916:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f918:	189b      	adds	r3, r3, r2
 800f91a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	00da      	lsls	r2, r3, #3
 800f922:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f924:	18d3      	adds	r3, r2, r3
 800f926:	4aaf      	ldr	r2, [pc, #700]	@ (800fbe4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f928:	4694      	mov	ip, r2
 800f92a:	4463      	add	r3, ip
 800f92c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f92e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f930:	881b      	ldrh	r3, [r3, #0]
 800f932:	b29b      	uxth	r3, r3
 800f934:	059b      	lsls	r3, r3, #22
 800f936:	0d9b      	lsrs	r3, r3, #22
 800f938:	b29a      	uxth	r2, r3
 800f93a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f93c:	801a      	strh	r2, [r3, #0]
 800f93e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f940:	881b      	ldrh	r3, [r3, #0]
 800f942:	b29b      	uxth	r3, r3
 800f944:	4aa9      	ldr	r2, [pc, #676]	@ (800fbec <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f946:	4313      	orrs	r3, r2
 800f948:	b29a      	uxth	r2, r3
 800f94a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f94c:	801a      	strh	r2, [r3, #0]
 800f94e:	e01b      	b.n	800f988 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	785b      	ldrb	r3, [r3, #1]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d117      	bne.n	800f988 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	667b      	str	r3, [r7, #100]	@ 0x64
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2250      	movs	r2, #80	@ 0x50
 800f964:	5a9b      	ldrh	r3, [r3, r2]
 800f966:	b29b      	uxth	r3, r3
 800f968:	001a      	movs	r2, r3
 800f96a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f96c:	189b      	adds	r3, r3, r2
 800f96e:	667b      	str	r3, [r7, #100]	@ 0x64
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	00da      	lsls	r2, r3, #3
 800f976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f978:	18d3      	adds	r3, r2, r3
 800f97a:	4a9a      	ldr	r2, [pc, #616]	@ (800fbe4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f97c:	4694      	mov	ip, r2
 800f97e:	4463      	add	r3, ip
 800f980:	663b      	str	r3, [r7, #96]	@ 0x60
 800f982:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f984:	2200      	movs	r2, #0
 800f986:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	677b      	str	r3, [r7, #116]	@ 0x74
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	785b      	ldrb	r3, [r3, #1]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d12b      	bne.n	800f9ee <HAL_PCD_EP_DB_Transmit+0x52e>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2250      	movs	r2, #80	@ 0x50
 800f9a2:	5a9b      	ldrh	r3, [r3, r2]
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	001a      	movs	r2, r3
 800f9a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9aa:	189b      	adds	r3, r3, r2
 800f9ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	00da      	lsls	r2, r3, #3
 800f9b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9b6:	18d3      	adds	r3, r2, r3
 800f9b8:	4a8b      	ldr	r2, [pc, #556]	@ (800fbe8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f9ba:	4694      	mov	ip, r2
 800f9bc:	4463      	add	r3, ip
 800f9be:	2180      	movs	r1, #128	@ 0x80
 800f9c0:	187a      	adds	r2, r7, r1
 800f9c2:	6013      	str	r3, [r2, #0]
 800f9c4:	187b      	adds	r3, r7, r1
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	881b      	ldrh	r3, [r3, #0]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	059b      	lsls	r3, r3, #22
 800f9ce:	0d9b      	lsrs	r3, r3, #22
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	187b      	adds	r3, r7, r1
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	801a      	strh	r2, [r3, #0]
 800f9d8:	187b      	adds	r3, r7, r1
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	881b      	ldrh	r3, [r3, #0]
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	4a82      	ldr	r2, [pc, #520]	@ (800fbec <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	187b      	adds	r3, r7, r1
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	801a      	strh	r2, [r3, #0]
 800f9ec:	e018      	b.n	800fa20 <HAL_PCD_EP_DB_Transmit+0x560>
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	785b      	ldrb	r3, [r3, #1]
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d114      	bne.n	800fa20 <HAL_PCD_EP_DB_Transmit+0x560>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2250      	movs	r2, #80	@ 0x50
 800f9fc:	5a9b      	ldrh	r3, [r3, r2]
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	001a      	movs	r2, r3
 800fa02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fa04:	189b      	adds	r3, r3, r2
 800fa06:	677b      	str	r3, [r7, #116]	@ 0x74
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	00da      	lsls	r2, r3, #3
 800fa0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fa10:	18d3      	adds	r3, r2, r3
 800fa12:	4a75      	ldr	r2, [pc, #468]	@ (800fbe8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800fa14:	4694      	mov	ip, r2
 800fa16:	4463      	add	r3, ip
 800fa18:	673b      	str	r3, [r7, #112]	@ 0x70
 800fa1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	781a      	ldrb	r2, [r3, #0]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	0011      	movs	r1, r2
 800fa28:	0018      	movs	r0, r3
 800fa2a:	f007 fcd1 	bl	80173d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800fa2e:	1dbb      	adds	r3, r7, #6
 800fa30:	881a      	ldrh	r2, [r3, #0]
 800fa32:	2380      	movs	r3, #128	@ 0x80
 800fa34:	01db      	lsls	r3, r3, #7
 800fa36:	4013      	ands	r3, r2
 800fa38:	d000      	beq.n	800fa3c <HAL_PCD_EP_DB_Transmit+0x57c>
 800fa3a:	e11e      	b.n	800fc7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	001a      	movs	r2, r3
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	18d3      	adds	r3, r2, r3
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	2088      	movs	r0, #136	@ 0x88
 800fa50:	183b      	adds	r3, r7, r0
 800fa52:	4967      	ldr	r1, [pc, #412]	@ (800fbf0 <HAL_PCD_EP_DB_Transmit+0x730>)
 800fa54:	400a      	ands	r2, r1
 800fa56:	801a      	strh	r2, [r3, #0]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	001a      	movs	r2, r3
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	18d3      	adds	r3, r2, r3
 800fa66:	183a      	adds	r2, r7, r0
 800fa68:	8812      	ldrh	r2, [r2, #0]
 800fa6a:	4962      	ldr	r1, [pc, #392]	@ (800fbf4 <HAL_PCD_EP_DB_Transmit+0x734>)
 800fa6c:	430a      	orrs	r2, r1
 800fa6e:	b292      	uxth	r2, r2
 800fa70:	801a      	strh	r2, [r3, #0]
 800fa72:	e102      	b.n	800fc7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800fa74:	1dbb      	adds	r3, r7, #6
 800fa76:	881a      	ldrh	r2, [r3, #0]
 800fa78:	2380      	movs	r3, #128	@ 0x80
 800fa7a:	01db      	lsls	r3, r3, #7
 800fa7c:	4013      	ands	r3, r2
 800fa7e:	d11a      	bne.n	800fab6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	001a      	movs	r2, r3
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	18d3      	adds	r3, r2, r3
 800fa8e:	881b      	ldrh	r3, [r3, #0]
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	204e      	movs	r0, #78	@ 0x4e
 800fa94:	183b      	adds	r3, r7, r0
 800fa96:	4956      	ldr	r1, [pc, #344]	@ (800fbf0 <HAL_PCD_EP_DB_Transmit+0x730>)
 800fa98:	400a      	ands	r2, r1
 800fa9a:	801a      	strh	r2, [r3, #0]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	001a      	movs	r2, r3
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	18d3      	adds	r3, r2, r3
 800faaa:	183a      	adds	r2, r7, r0
 800faac:	8812      	ldrh	r2, [r2, #0]
 800faae:	4951      	ldr	r1, [pc, #324]	@ (800fbf4 <HAL_PCD_EP_DB_Transmit+0x734>)
 800fab0:	430a      	orrs	r2, r1
 800fab2:	b292      	uxth	r2, r2
 800fab4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	2224      	movs	r2, #36	@ 0x24
 800faba:	5c9b      	ldrb	r3, [r3, r2]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d000      	beq.n	800fac2 <HAL_PCD_EP_DB_Transmit+0x602>
 800fac0:	e0db      	b.n	800fc7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	695a      	ldr	r2, [r3, #20]
 800fac6:	2186      	movs	r1, #134	@ 0x86
 800fac8:	187b      	adds	r3, r7, r1
 800faca:	881b      	ldrh	r3, [r3, #0]
 800facc:	18d2      	adds	r2, r2, r3
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	69da      	ldr	r2, [r3, #28]
 800fad6:	187b      	adds	r3, r7, r1
 800fad8:	881b      	ldrh	r3, [r3, #0]
 800fada:	18d2      	adds	r2, r2, r3
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	6a1a      	ldr	r2, [r3, #32]
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	691b      	ldr	r3, [r3, #16]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d30c      	bcc.n	800fb06 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	691b      	ldr	r3, [r3, #16]
 800faf0:	218c      	movs	r1, #140	@ 0x8c
 800faf2:	187a      	adds	r2, r7, r1
 800faf4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	6a1a      	ldr	r2, [r3, #32]
 800fafa:	187b      	adds	r3, r7, r1
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	1ad2      	subs	r2, r2, r3
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	621a      	str	r2, [r3, #32]
 800fb04:	e01a      	b.n	800fb3c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	6a1b      	ldr	r3, [r3, #32]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d10a      	bne.n	800fb24 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800fb0e:	2386      	movs	r3, #134	@ 0x86
 800fb10:	18fb      	adds	r3, r7, r3
 800fb12:	881b      	ldrh	r3, [r3, #0]
 800fb14:	228c      	movs	r2, #140	@ 0x8c
 800fb16:	18ba      	adds	r2, r7, r2
 800fb18:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	2224      	movs	r2, #36	@ 0x24
 800fb1e:	2100      	movs	r1, #0
 800fb20:	5499      	strb	r1, [r3, r2]
 800fb22:	e00b      	b.n	800fb3c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	6a1b      	ldr	r3, [r3, #32]
 800fb28:	228c      	movs	r2, #140	@ 0x8c
 800fb2a:	18ba      	adds	r2, r7, r2
 800fb2c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	2200      	movs	r2, #0
 800fb32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2224      	movs	r2, #36	@ 0x24
 800fb38:	2100      	movs	r1, #0
 800fb3a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	657b      	str	r3, [r7, #84]	@ 0x54
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	785b      	ldrb	r3, [r3, #1]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d000      	beq.n	800fb4c <HAL_PCD_EP_DB_Transmit+0x68c>
 800fb4a:	e06e      	b.n	800fc2a <HAL_PCD_EP_DB_Transmit+0x76a>
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2250      	movs	r2, #80	@ 0x50
 800fb58:	5a9b      	ldrh	r3, [r3, r2]
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	001a      	movs	r2, r3
 800fb5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb60:	189b      	adds	r3, r3, r2
 800fb62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	00da      	lsls	r2, r3, #3
 800fb6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb6c:	18d3      	adds	r3, r2, r3
 800fb6e:	4a1e      	ldr	r2, [pc, #120]	@ (800fbe8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800fb70:	4694      	mov	ip, r2
 800fb72:	4463      	add	r3, ip
 800fb74:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fb76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	059b      	lsls	r3, r3, #22
 800fb7e:	0d9b      	lsrs	r3, r3, #22
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb84:	801a      	strh	r2, [r3, #0]
 800fb86:	228c      	movs	r2, #140	@ 0x8c
 800fb88:	18bb      	adds	r3, r7, r2
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b3e      	cmp	r3, #62	@ 0x3e
 800fb8e:	d91a      	bls.n	800fbc6 <HAL_PCD_EP_DB_Transmit+0x706>
 800fb90:	18bb      	adds	r3, r7, r2
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	095b      	lsrs	r3, r3, #5
 800fb96:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb98:	18bb      	adds	r3, r7, r2
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	221f      	movs	r2, #31
 800fb9e:	4013      	ands	r3, r2
 800fba0:	d102      	bne.n	800fba8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800fba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fba4:	3b01      	subs	r3, #1
 800fba6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fba8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	029b      	lsls	r3, r3, #10
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	4a0c      	ldr	r2, [pc, #48]	@ (800fbec <HAL_PCD_EP_DB_Transmit+0x72c>)
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	b29a      	uxth	r2, r3
 800fbc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbc2:	801a      	strh	r2, [r3, #0]
 800fbc4:	e04d      	b.n	800fc62 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fbc6:	238c      	movs	r3, #140	@ 0x8c
 800fbc8:	18fb      	adds	r3, r7, r3
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d113      	bne.n	800fbf8 <HAL_PCD_EP_DB_Transmit+0x738>
 800fbd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbd2:	881b      	ldrh	r3, [r3, #0]
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	4a05      	ldr	r2, [pc, #20]	@ (800fbec <HAL_PCD_EP_DB_Transmit+0x72c>)
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	b29a      	uxth	r2, r3
 800fbdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbde:	801a      	strh	r2, [r3, #0]
 800fbe0:	e03f      	b.n	800fc62 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fbe2:	46c0      	nop			@ (mov r8, r8)
 800fbe4:	00000402 	.word	0x00000402
 800fbe8:	00000406 	.word	0x00000406
 800fbec:	ffff8000 	.word	0xffff8000
 800fbf0:	ffff8f8f 	.word	0xffff8f8f
 800fbf4:	ffffc080 	.word	0xffffc080
 800fbf8:	228c      	movs	r2, #140	@ 0x8c
 800fbfa:	18bb      	adds	r3, r7, r2
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	085b      	lsrs	r3, r3, #1
 800fc00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fc02:	18bb      	adds	r3, r7, r2
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2201      	movs	r2, #1
 800fc08:	4013      	ands	r3, r2
 800fc0a:	d002      	beq.n	800fc12 <HAL_PCD_EP_DB_Transmit+0x752>
 800fc0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc0e:	3301      	adds	r3, #1
 800fc10:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fc12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc14:	881b      	ldrh	r3, [r3, #0]
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	029b      	lsls	r3, r3, #10
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	4313      	orrs	r3, r2
 800fc22:	b29a      	uxth	r2, r3
 800fc24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc26:	801a      	strh	r2, [r3, #0]
 800fc28:	e01b      	b.n	800fc62 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	785b      	ldrb	r3, [r3, #1]
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d117      	bne.n	800fc62 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2250      	movs	r2, #80	@ 0x50
 800fc38:	5a9b      	ldrh	r3, [r3, r2]
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	001a      	movs	r2, r3
 800fc3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc40:	189b      	adds	r3, r3, r2
 800fc42:	657b      	str	r3, [r7, #84]	@ 0x54
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	00da      	lsls	r2, r3, #3
 800fc4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc4c:	18d3      	adds	r3, r2, r3
 800fc4e:	4a21      	ldr	r2, [pc, #132]	@ (800fcd4 <HAL_PCD_EP_DB_Transmit+0x814>)
 800fc50:	4694      	mov	ip, r2
 800fc52:	4463      	add	r3, ip
 800fc54:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc56:	238c      	movs	r3, #140	@ 0x8c
 800fc58:	18fb      	adds	r3, r7, r3
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc60:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6818      	ldr	r0, [r3, #0]
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	6959      	ldr	r1, [r3, #20]
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	895a      	ldrh	r2, [r3, #10]
 800fc6e:	238c      	movs	r3, #140	@ 0x8c
 800fc70:	18fb      	adds	r3, r7, r3
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	f005 fb27 	bl	80152c8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	001a      	movs	r2, r3
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	18d3      	adds	r3, r2, r3
 800fc88:	881b      	ldrh	r3, [r3, #0]
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	2014      	movs	r0, #20
 800fc8e:	183b      	adds	r3, r7, r0
 800fc90:	4911      	ldr	r1, [pc, #68]	@ (800fcd8 <HAL_PCD_EP_DB_Transmit+0x818>)
 800fc92:	400a      	ands	r2, r1
 800fc94:	801a      	strh	r2, [r3, #0]
 800fc96:	183b      	adds	r3, r7, r0
 800fc98:	183a      	adds	r2, r7, r0
 800fc9a:	8812      	ldrh	r2, [r2, #0]
 800fc9c:	2110      	movs	r1, #16
 800fc9e:	404a      	eors	r2, r1
 800fca0:	801a      	strh	r2, [r3, #0]
 800fca2:	183b      	adds	r3, r7, r0
 800fca4:	183a      	adds	r2, r7, r0
 800fca6:	8812      	ldrh	r2, [r2, #0]
 800fca8:	2120      	movs	r1, #32
 800fcaa:	404a      	eors	r2, r1
 800fcac:	801a      	strh	r2, [r3, #0]
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	001a      	movs	r2, r3
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	18d3      	adds	r3, r2, r3
 800fcbc:	183a      	adds	r2, r7, r0
 800fcbe:	8812      	ldrh	r2, [r2, #0]
 800fcc0:	4906      	ldr	r1, [pc, #24]	@ (800fcdc <HAL_PCD_EP_DB_Transmit+0x81c>)
 800fcc2:	430a      	orrs	r2, r1
 800fcc4:	b292      	uxth	r2, r2
 800fcc6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	0018      	movs	r0, r3
 800fccc:	46bd      	mov	sp, r7
 800fcce:	b024      	add	sp, #144	@ 0x90
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	46c0      	nop			@ (mov r8, r8)
 800fcd4:	00000406 	.word	0x00000406
 800fcd8:	ffff8fbf 	.word	0xffff8fbf
 800fcdc:	ffff8080 	.word	0xffff8080

0800fce0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800fce0:	b590      	push	{r4, r7, lr}
 800fce2:	b087      	sub	sp, #28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	0008      	movs	r0, r1
 800fcea:	0011      	movs	r1, r2
 800fcec:	607b      	str	r3, [r7, #4]
 800fcee:	240a      	movs	r4, #10
 800fcf0:	193b      	adds	r3, r7, r4
 800fcf2:	1c02      	adds	r2, r0, #0
 800fcf4:	801a      	strh	r2, [r3, #0]
 800fcf6:	2308      	movs	r3, #8
 800fcf8:	18fb      	adds	r3, r7, r3
 800fcfa:	1c0a      	adds	r2, r1, #0
 800fcfc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800fcfe:	0021      	movs	r1, r4
 800fd00:	187b      	adds	r3, r7, r1
 800fd02:	881b      	ldrh	r3, [r3, #0]
 800fd04:	2280      	movs	r2, #128	@ 0x80
 800fd06:	4013      	ands	r3, r2
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00c      	beq.n	800fd28 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fd0e:	187b      	adds	r3, r7, r1
 800fd10:	881b      	ldrh	r3, [r3, #0]
 800fd12:	2207      	movs	r2, #7
 800fd14:	4013      	ands	r3, r2
 800fd16:	1c5a      	adds	r2, r3, #1
 800fd18:	0013      	movs	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	189b      	adds	r3, r3, r2
 800fd1e:	00db      	lsls	r3, r3, #3
 800fd20:	68fa      	ldr	r2, [r7, #12]
 800fd22:	18d3      	adds	r3, r2, r3
 800fd24:	617b      	str	r3, [r7, #20]
 800fd26:	e00b      	b.n	800fd40 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fd28:	230a      	movs	r3, #10
 800fd2a:	18fb      	adds	r3, r7, r3
 800fd2c:	881a      	ldrh	r2, [r3, #0]
 800fd2e:	0013      	movs	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	189b      	adds	r3, r3, r2
 800fd34:	00db      	lsls	r3, r3, #3
 800fd36:	3369      	adds	r3, #105	@ 0x69
 800fd38:	33ff      	adds	r3, #255	@ 0xff
 800fd3a:	68fa      	ldr	r2, [r7, #12]
 800fd3c:	18d3      	adds	r3, r2, r3
 800fd3e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800fd40:	2308      	movs	r3, #8
 800fd42:	18fb      	adds	r3, r7, r3
 800fd44:	881b      	ldrh	r3, [r3, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d107      	bne.n	800fd5a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	b29a      	uxth	r2, r3
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	80da      	strh	r2, [r3, #6]
 800fd58:	e00b      	b.n	800fd72 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	b29a      	uxth	r2, r3
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	0c1b      	lsrs	r3, r3, #16
 800fd6c:	b29a      	uxth	r2, r3
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	0018      	movs	r0, r3
 800fd76:	46bd      	mov	sp, r7
 800fd78:	b007      	add	sp, #28
 800fd7a:	bd90      	pop	{r4, r7, pc}

0800fd7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	23ba      	movs	r3, #186	@ 0xba
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	2101      	movs	r1, #1
 800fd92:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	23b8      	movs	r3, #184	@ 0xb8
 800fd98:	009b      	lsls	r3, r3, #2
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2254      	movs	r2, #84	@ 0x54
 800fda2:	5a9b      	ldrh	r3, [r3, r2]
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	2201      	movs	r2, #1
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	b299      	uxth	r1, r3
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2254      	movs	r2, #84	@ 0x54
 800fdb0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2254      	movs	r2, #84	@ 0x54
 800fdb6:	5a9b      	ldrh	r3, [r3, r2]
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	2202      	movs	r2, #2
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	b299      	uxth	r1, r3
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2254      	movs	r2, #84	@ 0x54
 800fdc4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	0018      	movs	r0, r3
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	b004      	add	sp, #16
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	000a      	movs	r2, r1
 800fdda:	1cfb      	adds	r3, r7, #3
 800fddc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800fdde:	46c0      	nop			@ (mov r8, r8)
 800fde0:	46bd      	mov	sp, r7
 800fde2:	b002      	add	sp, #8
 800fde4:	bd80      	pop	{r7, pc}
	...

0800fde8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800fdec:	4b04      	ldr	r3, [pc, #16]	@ (800fe00 <HAL_PWR_EnableBkUpAccess+0x18>)
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	4b03      	ldr	r3, [pc, #12]	@ (800fe00 <HAL_PWR_EnableBkUpAccess+0x18>)
 800fdf2:	2180      	movs	r1, #128	@ 0x80
 800fdf4:	0049      	lsls	r1, r1, #1
 800fdf6:	430a      	orrs	r2, r1
 800fdf8:	601a      	str	r2, [r3, #0]
}
 800fdfa:	46c0      	nop			@ (mov r8, r8)
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	40007000 	.word	0x40007000

0800fe04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fe04:	b5b0      	push	{r4, r5, r7, lr}
 800fe06:	b08a      	sub	sp, #40	@ 0x28
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d102      	bne.n	800fe18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800fe12:	2301      	movs	r3, #1
 800fe14:	f000 fbbf 	bl	8010596 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fe18:	4bc9      	ldr	r3, [pc, #804]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	220c      	movs	r2, #12
 800fe1e:	4013      	ands	r3, r2
 800fe20:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fe22:	4bc7      	ldr	r3, [pc, #796]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fe24:	68da      	ldr	r2, [r3, #12]
 800fe26:	2380      	movs	r3, #128	@ 0x80
 800fe28:	025b      	lsls	r3, r3, #9
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2201      	movs	r2, #1
 800fe34:	4013      	ands	r3, r2
 800fe36:	d100      	bne.n	800fe3a <HAL_RCC_OscConfig+0x36>
 800fe38:	e07e      	b.n	800ff38 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	2b08      	cmp	r3, #8
 800fe3e:	d007      	beq.n	800fe50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fe40:	69fb      	ldr	r3, [r7, #28]
 800fe42:	2b0c      	cmp	r3, #12
 800fe44:	d112      	bne.n	800fe6c <HAL_RCC_OscConfig+0x68>
 800fe46:	69ba      	ldr	r2, [r7, #24]
 800fe48:	2380      	movs	r3, #128	@ 0x80
 800fe4a:	025b      	lsls	r3, r3, #9
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d10d      	bne.n	800fe6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe50:	4bbb      	ldr	r3, [pc, #748]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	2380      	movs	r3, #128	@ 0x80
 800fe56:	029b      	lsls	r3, r3, #10
 800fe58:	4013      	ands	r3, r2
 800fe5a:	d100      	bne.n	800fe5e <HAL_RCC_OscConfig+0x5a>
 800fe5c:	e06b      	b.n	800ff36 <HAL_RCC_OscConfig+0x132>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d167      	bne.n	800ff36 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800fe66:	2301      	movs	r3, #1
 800fe68:	f000 fb95 	bl	8010596 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	685a      	ldr	r2, [r3, #4]
 800fe70:	2380      	movs	r3, #128	@ 0x80
 800fe72:	025b      	lsls	r3, r3, #9
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d107      	bne.n	800fe88 <HAL_RCC_OscConfig+0x84>
 800fe78:	4bb1      	ldr	r3, [pc, #708]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fe7a:	681a      	ldr	r2, [r3, #0]
 800fe7c:	4bb0      	ldr	r3, [pc, #704]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fe7e:	2180      	movs	r1, #128	@ 0x80
 800fe80:	0249      	lsls	r1, r1, #9
 800fe82:	430a      	orrs	r2, r1
 800fe84:	601a      	str	r2, [r3, #0]
 800fe86:	e027      	b.n	800fed8 <HAL_RCC_OscConfig+0xd4>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	685a      	ldr	r2, [r3, #4]
 800fe8c:	23a0      	movs	r3, #160	@ 0xa0
 800fe8e:	02db      	lsls	r3, r3, #11
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d10e      	bne.n	800feb2 <HAL_RCC_OscConfig+0xae>
 800fe94:	4baa      	ldr	r3, [pc, #680]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	4ba9      	ldr	r3, [pc, #676]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fe9a:	2180      	movs	r1, #128	@ 0x80
 800fe9c:	02c9      	lsls	r1, r1, #11
 800fe9e:	430a      	orrs	r2, r1
 800fea0:	601a      	str	r2, [r3, #0]
 800fea2:	4ba7      	ldr	r3, [pc, #668]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	4ba6      	ldr	r3, [pc, #664]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fea8:	2180      	movs	r1, #128	@ 0x80
 800feaa:	0249      	lsls	r1, r1, #9
 800feac:	430a      	orrs	r2, r1
 800feae:	601a      	str	r2, [r3, #0]
 800feb0:	e012      	b.n	800fed8 <HAL_RCC_OscConfig+0xd4>
 800feb2:	4ba3      	ldr	r3, [pc, #652]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	4ba2      	ldr	r3, [pc, #648]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800feb8:	49a2      	ldr	r1, [pc, #648]	@ (8010144 <HAL_RCC_OscConfig+0x340>)
 800feba:	400a      	ands	r2, r1
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	4ba0      	ldr	r3, [pc, #640]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	2380      	movs	r3, #128	@ 0x80
 800fec4:	025b      	lsls	r3, r3, #9
 800fec6:	4013      	ands	r3, r2
 800fec8:	60fb      	str	r3, [r7, #12]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	4b9c      	ldr	r3, [pc, #624]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	4b9b      	ldr	r3, [pc, #620]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fed2:	499d      	ldr	r1, [pc, #628]	@ (8010148 <HAL_RCC_OscConfig+0x344>)
 800fed4:	400a      	ands	r2, r1
 800fed6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d015      	beq.n	800ff0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fee0:	f7fa fa16 	bl	800a310 <HAL_GetTick>
 800fee4:	0003      	movs	r3, r0
 800fee6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fee8:	e009      	b.n	800fefe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800feea:	f7fa fa11 	bl	800a310 <HAL_GetTick>
 800feee:	0002      	movs	r2, r0
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	1ad3      	subs	r3, r2, r3
 800fef4:	2b64      	cmp	r3, #100	@ 0x64
 800fef6:	d902      	bls.n	800fefe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800fef8:	2303      	movs	r3, #3
 800fefa:	f000 fb4c 	bl	8010596 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fefe:	4b90      	ldr	r3, [pc, #576]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	2380      	movs	r3, #128	@ 0x80
 800ff04:	029b      	lsls	r3, r3, #10
 800ff06:	4013      	ands	r3, r2
 800ff08:	d0ef      	beq.n	800feea <HAL_RCC_OscConfig+0xe6>
 800ff0a:	e015      	b.n	800ff38 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff0c:	f7fa fa00 	bl	800a310 <HAL_GetTick>
 800ff10:	0003      	movs	r3, r0
 800ff12:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ff14:	e008      	b.n	800ff28 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ff16:	f7fa f9fb 	bl	800a310 <HAL_GetTick>
 800ff1a:	0002      	movs	r2, r0
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	1ad3      	subs	r3, r2, r3
 800ff20:	2b64      	cmp	r3, #100	@ 0x64
 800ff22:	d901      	bls.n	800ff28 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800ff24:	2303      	movs	r3, #3
 800ff26:	e336      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ff28:	4b85      	ldr	r3, [pc, #532]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	2380      	movs	r3, #128	@ 0x80
 800ff2e:	029b      	lsls	r3, r3, #10
 800ff30:	4013      	ands	r3, r2
 800ff32:	d1f0      	bne.n	800ff16 <HAL_RCC_OscConfig+0x112>
 800ff34:	e000      	b.n	800ff38 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ff36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	4013      	ands	r3, r2
 800ff40:	d100      	bne.n	800ff44 <HAL_RCC_OscConfig+0x140>
 800ff42:	e099      	b.n	8010078 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff4c:	2220      	movs	r2, #32
 800ff4e:	4013      	ands	r3, r2
 800ff50:	d009      	beq.n	800ff66 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800ff52:	4b7b      	ldr	r3, [pc, #492]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	4b7a      	ldr	r3, [pc, #488]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ff58:	2120      	movs	r1, #32
 800ff5a:	430a      	orrs	r2, r1
 800ff5c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800ff5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff60:	2220      	movs	r2, #32
 800ff62:	4393      	bics	r3, r2
 800ff64:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	2b04      	cmp	r3, #4
 800ff6a:	d005      	beq.n	800ff78 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	2b0c      	cmp	r3, #12
 800ff70:	d13e      	bne.n	800fff0 <HAL_RCC_OscConfig+0x1ec>
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d13b      	bne.n	800fff0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800ff78:	4b71      	ldr	r3, [pc, #452]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2204      	movs	r2, #4
 800ff7e:	4013      	ands	r3, r2
 800ff80:	d004      	beq.n	800ff8c <HAL_RCC_OscConfig+0x188>
 800ff82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d101      	bne.n	800ff8c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e304      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff8c:	4b6c      	ldr	r3, [pc, #432]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	4a6e      	ldr	r2, [pc, #440]	@ (801014c <HAL_RCC_OscConfig+0x348>)
 800ff92:	4013      	ands	r3, r2
 800ff94:	0019      	movs	r1, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	691b      	ldr	r3, [r3, #16]
 800ff9a:	021a      	lsls	r2, r3, #8
 800ff9c:	4b68      	ldr	r3, [pc, #416]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ff9e:	430a      	orrs	r2, r1
 800ffa0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ffa2:	4b67      	ldr	r3, [pc, #412]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2209      	movs	r2, #9
 800ffa8:	4393      	bics	r3, r2
 800ffaa:	0019      	movs	r1, r3
 800ffac:	4b64      	ldr	r3, [pc, #400]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ffae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffb0:	430a      	orrs	r2, r1
 800ffb2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ffb4:	f000 fc42 	bl	801083c <HAL_RCC_GetSysClockFreq>
 800ffb8:	0001      	movs	r1, r0
 800ffba:	4b61      	ldr	r3, [pc, #388]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	091b      	lsrs	r3, r3, #4
 800ffc0:	220f      	movs	r2, #15
 800ffc2:	4013      	ands	r3, r2
 800ffc4:	4a62      	ldr	r2, [pc, #392]	@ (8010150 <HAL_RCC_OscConfig+0x34c>)
 800ffc6:	5cd3      	ldrb	r3, [r2, r3]
 800ffc8:	000a      	movs	r2, r1
 800ffca:	40da      	lsrs	r2, r3
 800ffcc:	4b61      	ldr	r3, [pc, #388]	@ (8010154 <HAL_RCC_OscConfig+0x350>)
 800ffce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800ffd0:	4b61      	ldr	r3, [pc, #388]	@ (8010158 <HAL_RCC_OscConfig+0x354>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2513      	movs	r5, #19
 800ffd6:	197c      	adds	r4, r7, r5
 800ffd8:	0018      	movs	r0, r3
 800ffda:	f7fa f953 	bl	800a284 <HAL_InitTick>
 800ffde:	0003      	movs	r3, r0
 800ffe0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800ffe2:	197b      	adds	r3, r7, r5
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d046      	beq.n	8010078 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800ffea:	197b      	adds	r3, r7, r5
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	e2d2      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800fff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d027      	beq.n	8010046 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800fff6:	4b52      	ldr	r3, [pc, #328]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2209      	movs	r2, #9
 800fffc:	4393      	bics	r3, r2
 800fffe:	0019      	movs	r1, r3
 8010000:	4b4f      	ldr	r3, [pc, #316]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 8010002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010004:	430a      	orrs	r2, r1
 8010006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010008:	f7fa f982 	bl	800a310 <HAL_GetTick>
 801000c:	0003      	movs	r3, r0
 801000e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010010:	e008      	b.n	8010024 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010012:	f7fa f97d 	bl	800a310 <HAL_GetTick>
 8010016:	0002      	movs	r2, r0
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	1ad3      	subs	r3, r2, r3
 801001c:	2b02      	cmp	r3, #2
 801001e:	d901      	bls.n	8010024 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8010020:	2303      	movs	r3, #3
 8010022:	e2b8      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010024:	4b46      	ldr	r3, [pc, #280]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2204      	movs	r2, #4
 801002a:	4013      	ands	r3, r2
 801002c:	d0f1      	beq.n	8010012 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801002e:	4b44      	ldr	r3, [pc, #272]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	4a46      	ldr	r2, [pc, #280]	@ (801014c <HAL_RCC_OscConfig+0x348>)
 8010034:	4013      	ands	r3, r2
 8010036:	0019      	movs	r1, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	691b      	ldr	r3, [r3, #16]
 801003c:	021a      	lsls	r2, r3, #8
 801003e:	4b40      	ldr	r3, [pc, #256]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 8010040:	430a      	orrs	r2, r1
 8010042:	605a      	str	r2, [r3, #4]
 8010044:	e018      	b.n	8010078 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010046:	4b3e      	ldr	r3, [pc, #248]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	4b3d      	ldr	r3, [pc, #244]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 801004c:	2101      	movs	r1, #1
 801004e:	438a      	bics	r2, r1
 8010050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010052:	f7fa f95d 	bl	800a310 <HAL_GetTick>
 8010056:	0003      	movs	r3, r0
 8010058:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801005a:	e008      	b.n	801006e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801005c:	f7fa f958 	bl	800a310 <HAL_GetTick>
 8010060:	0002      	movs	r2, r0
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	2b02      	cmp	r3, #2
 8010068:	d901      	bls.n	801006e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801006a:	2303      	movs	r3, #3
 801006c:	e293      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801006e:	4b34      	ldr	r3, [pc, #208]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	2204      	movs	r2, #4
 8010074:	4013      	ands	r3, r2
 8010076:	d1f1      	bne.n	801005c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2210      	movs	r2, #16
 801007e:	4013      	ands	r3, r2
 8010080:	d100      	bne.n	8010084 <HAL_RCC_OscConfig+0x280>
 8010082:	e0a2      	b.n	80101ca <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d140      	bne.n	801010c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801008a:	4b2d      	ldr	r3, [pc, #180]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	2380      	movs	r3, #128	@ 0x80
 8010090:	009b      	lsls	r3, r3, #2
 8010092:	4013      	ands	r3, r2
 8010094:	d005      	beq.n	80100a2 <HAL_RCC_OscConfig+0x29e>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	69db      	ldr	r3, [r3, #28]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d101      	bne.n	80100a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801009e:	2301      	movs	r3, #1
 80100a0:	e279      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80100a2:	4b27      	ldr	r3, [pc, #156]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	4a2d      	ldr	r2, [pc, #180]	@ (801015c <HAL_RCC_OscConfig+0x358>)
 80100a8:	4013      	ands	r3, r2
 80100aa:	0019      	movs	r1, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100b0:	4b23      	ldr	r3, [pc, #140]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 80100b2:	430a      	orrs	r2, r1
 80100b4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80100b6:	4b22      	ldr	r3, [pc, #136]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	021b      	lsls	r3, r3, #8
 80100bc:	0a19      	lsrs	r1, r3, #8
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6a1b      	ldr	r3, [r3, #32]
 80100c2:	061a      	lsls	r2, r3, #24
 80100c4:	4b1e      	ldr	r3, [pc, #120]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 80100c6:	430a      	orrs	r2, r1
 80100c8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ce:	0b5b      	lsrs	r3, r3, #13
 80100d0:	3301      	adds	r3, #1
 80100d2:	2280      	movs	r2, #128	@ 0x80
 80100d4:	0212      	lsls	r2, r2, #8
 80100d6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80100d8:	4b19      	ldr	r3, [pc, #100]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	091b      	lsrs	r3, r3, #4
 80100de:	210f      	movs	r1, #15
 80100e0:	400b      	ands	r3, r1
 80100e2:	491b      	ldr	r1, [pc, #108]	@ (8010150 <HAL_RCC_OscConfig+0x34c>)
 80100e4:	5ccb      	ldrb	r3, [r1, r3]
 80100e6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80100e8:	4b1a      	ldr	r3, [pc, #104]	@ (8010154 <HAL_RCC_OscConfig+0x350>)
 80100ea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80100ec:	4b1a      	ldr	r3, [pc, #104]	@ (8010158 <HAL_RCC_OscConfig+0x354>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2513      	movs	r5, #19
 80100f2:	197c      	adds	r4, r7, r5
 80100f4:	0018      	movs	r0, r3
 80100f6:	f7fa f8c5 	bl	800a284 <HAL_InitTick>
 80100fa:	0003      	movs	r3, r0
 80100fc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80100fe:	197b      	adds	r3, r7, r5
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d061      	beq.n	80101ca <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8010106:	197b      	adds	r3, r7, r5
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	e244      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	69db      	ldr	r3, [r3, #28]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d040      	beq.n	8010196 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010114:	4b0a      	ldr	r3, [pc, #40]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	4b09      	ldr	r3, [pc, #36]	@ (8010140 <HAL_RCC_OscConfig+0x33c>)
 801011a:	2180      	movs	r1, #128	@ 0x80
 801011c:	0049      	lsls	r1, r1, #1
 801011e:	430a      	orrs	r2, r1
 8010120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010122:	f7fa f8f5 	bl	800a310 <HAL_GetTick>
 8010126:	0003      	movs	r3, r0
 8010128:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801012a:	e019      	b.n	8010160 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801012c:	f7fa f8f0 	bl	800a310 <HAL_GetTick>
 8010130:	0002      	movs	r2, r0
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	1ad3      	subs	r3, r2, r3
 8010136:	2b02      	cmp	r3, #2
 8010138:	d912      	bls.n	8010160 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801013a:	2303      	movs	r3, #3
 801013c:	e22b      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
 801013e:	46c0      	nop			@ (mov r8, r8)
 8010140:	40021000 	.word	0x40021000
 8010144:	fffeffff 	.word	0xfffeffff
 8010148:	fffbffff 	.word	0xfffbffff
 801014c:	ffffe0ff 	.word	0xffffe0ff
 8010150:	0801c1b4 	.word	0x0801c1b4
 8010154:	2000005c 	.word	0x2000005c
 8010158:	20000070 	.word	0x20000070
 801015c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010160:	4bca      	ldr	r3, [pc, #808]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010162:	681a      	ldr	r2, [r3, #0]
 8010164:	2380      	movs	r3, #128	@ 0x80
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	4013      	ands	r3, r2
 801016a:	d0df      	beq.n	801012c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801016c:	4bc7      	ldr	r3, [pc, #796]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	4ac7      	ldr	r2, [pc, #796]	@ (8010490 <HAL_RCC_OscConfig+0x68c>)
 8010172:	4013      	ands	r3, r2
 8010174:	0019      	movs	r1, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801017a:	4bc4      	ldr	r3, [pc, #784]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 801017c:	430a      	orrs	r2, r1
 801017e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010180:	4bc2      	ldr	r3, [pc, #776]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	021b      	lsls	r3, r3, #8
 8010186:	0a19      	lsrs	r1, r3, #8
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6a1b      	ldr	r3, [r3, #32]
 801018c:	061a      	lsls	r2, r3, #24
 801018e:	4bbf      	ldr	r3, [pc, #764]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010190:	430a      	orrs	r2, r1
 8010192:	605a      	str	r2, [r3, #4]
 8010194:	e019      	b.n	80101ca <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010196:	4bbd      	ldr	r3, [pc, #756]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	4bbc      	ldr	r3, [pc, #752]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 801019c:	49bd      	ldr	r1, [pc, #756]	@ (8010494 <HAL_RCC_OscConfig+0x690>)
 801019e:	400a      	ands	r2, r1
 80101a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80101a2:	f7fa f8b5 	bl	800a310 <HAL_GetTick>
 80101a6:	0003      	movs	r3, r0
 80101a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80101aa:	e008      	b.n	80101be <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80101ac:	f7fa f8b0 	bl	800a310 <HAL_GetTick>
 80101b0:	0002      	movs	r2, r0
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	1ad3      	subs	r3, r2, r3
 80101b6:	2b02      	cmp	r3, #2
 80101b8:	d901      	bls.n	80101be <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80101ba:	2303      	movs	r3, #3
 80101bc:	e1eb      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80101be:	4bb3      	ldr	r3, [pc, #716]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	2380      	movs	r3, #128	@ 0x80
 80101c4:	009b      	lsls	r3, r3, #2
 80101c6:	4013      	ands	r3, r2
 80101c8:	d1f0      	bne.n	80101ac <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	2208      	movs	r2, #8
 80101d0:	4013      	ands	r3, r2
 80101d2:	d036      	beq.n	8010242 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	695b      	ldr	r3, [r3, #20]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d019      	beq.n	8010210 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80101dc:	4bab      	ldr	r3, [pc, #684]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80101de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101e0:	4baa      	ldr	r3, [pc, #680]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80101e2:	2101      	movs	r1, #1
 80101e4:	430a      	orrs	r2, r1
 80101e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80101e8:	f7fa f892 	bl	800a310 <HAL_GetTick>
 80101ec:	0003      	movs	r3, r0
 80101ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80101f0:	e008      	b.n	8010204 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80101f2:	f7fa f88d 	bl	800a310 <HAL_GetTick>
 80101f6:	0002      	movs	r2, r0
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	1ad3      	subs	r3, r2, r3
 80101fc:	2b02      	cmp	r3, #2
 80101fe:	d901      	bls.n	8010204 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8010200:	2303      	movs	r3, #3
 8010202:	e1c8      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010204:	4ba1      	ldr	r3, [pc, #644]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010208:	2202      	movs	r2, #2
 801020a:	4013      	ands	r3, r2
 801020c:	d0f1      	beq.n	80101f2 <HAL_RCC_OscConfig+0x3ee>
 801020e:	e018      	b.n	8010242 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010210:	4b9e      	ldr	r3, [pc, #632]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010212:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010214:	4b9d      	ldr	r3, [pc, #628]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010216:	2101      	movs	r1, #1
 8010218:	438a      	bics	r2, r1
 801021a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801021c:	f7fa f878 	bl	800a310 <HAL_GetTick>
 8010220:	0003      	movs	r3, r0
 8010222:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010224:	e008      	b.n	8010238 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010226:	f7fa f873 	bl	800a310 <HAL_GetTick>
 801022a:	0002      	movs	r2, r0
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	1ad3      	subs	r3, r2, r3
 8010230:	2b02      	cmp	r3, #2
 8010232:	d901      	bls.n	8010238 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8010234:	2303      	movs	r3, #3
 8010236:	e1ae      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010238:	4b94      	ldr	r3, [pc, #592]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 801023a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801023c:	2202      	movs	r2, #2
 801023e:	4013      	ands	r3, r2
 8010240:	d1f1      	bne.n	8010226 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2204      	movs	r2, #4
 8010248:	4013      	ands	r3, r2
 801024a:	d100      	bne.n	801024e <HAL_RCC_OscConfig+0x44a>
 801024c:	e0ae      	b.n	80103ac <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801024e:	2023      	movs	r0, #35	@ 0x23
 8010250:	183b      	adds	r3, r7, r0
 8010252:	2200      	movs	r2, #0
 8010254:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010256:	4b8d      	ldr	r3, [pc, #564]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801025a:	2380      	movs	r3, #128	@ 0x80
 801025c:	055b      	lsls	r3, r3, #21
 801025e:	4013      	ands	r3, r2
 8010260:	d109      	bne.n	8010276 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010262:	4b8a      	ldr	r3, [pc, #552]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010266:	4b89      	ldr	r3, [pc, #548]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010268:	2180      	movs	r1, #128	@ 0x80
 801026a:	0549      	lsls	r1, r1, #21
 801026c:	430a      	orrs	r2, r1
 801026e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8010270:	183b      	adds	r3, r7, r0
 8010272:	2201      	movs	r2, #1
 8010274:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010276:	4b88      	ldr	r3, [pc, #544]	@ (8010498 <HAL_RCC_OscConfig+0x694>)
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	2380      	movs	r3, #128	@ 0x80
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	4013      	ands	r3, r2
 8010280:	d11a      	bne.n	80102b8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010282:	4b85      	ldr	r3, [pc, #532]	@ (8010498 <HAL_RCC_OscConfig+0x694>)
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	4b84      	ldr	r3, [pc, #528]	@ (8010498 <HAL_RCC_OscConfig+0x694>)
 8010288:	2180      	movs	r1, #128	@ 0x80
 801028a:	0049      	lsls	r1, r1, #1
 801028c:	430a      	orrs	r2, r1
 801028e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010290:	f7fa f83e 	bl	800a310 <HAL_GetTick>
 8010294:	0003      	movs	r3, r0
 8010296:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010298:	e008      	b.n	80102ac <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801029a:	f7fa f839 	bl	800a310 <HAL_GetTick>
 801029e:	0002      	movs	r2, r0
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	1ad3      	subs	r3, r2, r3
 80102a4:	2b64      	cmp	r3, #100	@ 0x64
 80102a6:	d901      	bls.n	80102ac <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80102a8:	2303      	movs	r3, #3
 80102aa:	e174      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80102ac:	4b7a      	ldr	r3, [pc, #488]	@ (8010498 <HAL_RCC_OscConfig+0x694>)
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	2380      	movs	r3, #128	@ 0x80
 80102b2:	005b      	lsls	r3, r3, #1
 80102b4:	4013      	ands	r3, r2
 80102b6:	d0f0      	beq.n	801029a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	689a      	ldr	r2, [r3, #8]
 80102bc:	2380      	movs	r3, #128	@ 0x80
 80102be:	005b      	lsls	r3, r3, #1
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d107      	bne.n	80102d4 <HAL_RCC_OscConfig+0x4d0>
 80102c4:	4b71      	ldr	r3, [pc, #452]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80102c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102c8:	4b70      	ldr	r3, [pc, #448]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80102ca:	2180      	movs	r1, #128	@ 0x80
 80102cc:	0049      	lsls	r1, r1, #1
 80102ce:	430a      	orrs	r2, r1
 80102d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80102d2:	e031      	b.n	8010338 <HAL_RCC_OscConfig+0x534>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	689b      	ldr	r3, [r3, #8]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d10c      	bne.n	80102f6 <HAL_RCC_OscConfig+0x4f2>
 80102dc:	4b6b      	ldr	r3, [pc, #428]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80102de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102e0:	4b6a      	ldr	r3, [pc, #424]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80102e2:	496c      	ldr	r1, [pc, #432]	@ (8010494 <HAL_RCC_OscConfig+0x690>)
 80102e4:	400a      	ands	r2, r1
 80102e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80102e8:	4b68      	ldr	r3, [pc, #416]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80102ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102ec:	4b67      	ldr	r3, [pc, #412]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80102ee:	496b      	ldr	r1, [pc, #428]	@ (801049c <HAL_RCC_OscConfig+0x698>)
 80102f0:	400a      	ands	r2, r1
 80102f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80102f4:	e020      	b.n	8010338 <HAL_RCC_OscConfig+0x534>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	689a      	ldr	r2, [r3, #8]
 80102fa:	23a0      	movs	r3, #160	@ 0xa0
 80102fc:	00db      	lsls	r3, r3, #3
 80102fe:	429a      	cmp	r2, r3
 8010300:	d10e      	bne.n	8010320 <HAL_RCC_OscConfig+0x51c>
 8010302:	4b62      	ldr	r3, [pc, #392]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010304:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010306:	4b61      	ldr	r3, [pc, #388]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010308:	2180      	movs	r1, #128	@ 0x80
 801030a:	00c9      	lsls	r1, r1, #3
 801030c:	430a      	orrs	r2, r1
 801030e:	651a      	str	r2, [r3, #80]	@ 0x50
 8010310:	4b5e      	ldr	r3, [pc, #376]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010314:	4b5d      	ldr	r3, [pc, #372]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010316:	2180      	movs	r1, #128	@ 0x80
 8010318:	0049      	lsls	r1, r1, #1
 801031a:	430a      	orrs	r2, r1
 801031c:	651a      	str	r2, [r3, #80]	@ 0x50
 801031e:	e00b      	b.n	8010338 <HAL_RCC_OscConfig+0x534>
 8010320:	4b5a      	ldr	r3, [pc, #360]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010322:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010324:	4b59      	ldr	r3, [pc, #356]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010326:	495b      	ldr	r1, [pc, #364]	@ (8010494 <HAL_RCC_OscConfig+0x690>)
 8010328:	400a      	ands	r2, r1
 801032a:	651a      	str	r2, [r3, #80]	@ 0x50
 801032c:	4b57      	ldr	r3, [pc, #348]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 801032e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010330:	4b56      	ldr	r3, [pc, #344]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010332:	495a      	ldr	r1, [pc, #360]	@ (801049c <HAL_RCC_OscConfig+0x698>)
 8010334:	400a      	ands	r2, r1
 8010336:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d015      	beq.n	801036c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010340:	f7f9 ffe6 	bl	800a310 <HAL_GetTick>
 8010344:	0003      	movs	r3, r0
 8010346:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010348:	e009      	b.n	801035e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801034a:	f7f9 ffe1 	bl	800a310 <HAL_GetTick>
 801034e:	0002      	movs	r2, r0
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	4a52      	ldr	r2, [pc, #328]	@ (80104a0 <HAL_RCC_OscConfig+0x69c>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d901      	bls.n	801035e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801035a:	2303      	movs	r3, #3
 801035c:	e11b      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801035e:	4b4b      	ldr	r3, [pc, #300]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010362:	2380      	movs	r3, #128	@ 0x80
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4013      	ands	r3, r2
 8010368:	d0ef      	beq.n	801034a <HAL_RCC_OscConfig+0x546>
 801036a:	e014      	b.n	8010396 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801036c:	f7f9 ffd0 	bl	800a310 <HAL_GetTick>
 8010370:	0003      	movs	r3, r0
 8010372:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010374:	e009      	b.n	801038a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010376:	f7f9 ffcb 	bl	800a310 <HAL_GetTick>
 801037a:	0002      	movs	r2, r0
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	4a47      	ldr	r2, [pc, #284]	@ (80104a0 <HAL_RCC_OscConfig+0x69c>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d901      	bls.n	801038a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8010386:	2303      	movs	r3, #3
 8010388:	e105      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801038a:	4b40      	ldr	r3, [pc, #256]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 801038c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801038e:	2380      	movs	r3, #128	@ 0x80
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	4013      	ands	r3, r2
 8010394:	d1ef      	bne.n	8010376 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8010396:	2323      	movs	r3, #35	@ 0x23
 8010398:	18fb      	adds	r3, r7, r3
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	2b01      	cmp	r3, #1
 801039e:	d105      	bne.n	80103ac <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80103a0:	4b3a      	ldr	r3, [pc, #232]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80103a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103a4:	4b39      	ldr	r3, [pc, #228]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80103a6:	493f      	ldr	r1, [pc, #252]	@ (80104a4 <HAL_RCC_OscConfig+0x6a0>)
 80103a8:	400a      	ands	r2, r1
 80103aa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2220      	movs	r2, #32
 80103b2:	4013      	ands	r3, r2
 80103b4:	d049      	beq.n	801044a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	699b      	ldr	r3, [r3, #24]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d026      	beq.n	801040c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80103be:	4b33      	ldr	r3, [pc, #204]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80103c0:	689a      	ldr	r2, [r3, #8]
 80103c2:	4b32      	ldr	r3, [pc, #200]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80103c4:	2101      	movs	r1, #1
 80103c6:	430a      	orrs	r2, r1
 80103c8:	609a      	str	r2, [r3, #8]
 80103ca:	4b30      	ldr	r3, [pc, #192]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80103cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103ce:	4b2f      	ldr	r3, [pc, #188]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 80103d0:	2101      	movs	r1, #1
 80103d2:	430a      	orrs	r2, r1
 80103d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80103d6:	4b34      	ldr	r3, [pc, #208]	@ (80104a8 <HAL_RCC_OscConfig+0x6a4>)
 80103d8:	6a1a      	ldr	r2, [r3, #32]
 80103da:	4b33      	ldr	r3, [pc, #204]	@ (80104a8 <HAL_RCC_OscConfig+0x6a4>)
 80103dc:	2180      	movs	r1, #128	@ 0x80
 80103de:	0189      	lsls	r1, r1, #6
 80103e0:	430a      	orrs	r2, r1
 80103e2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80103e4:	f7f9 ff94 	bl	800a310 <HAL_GetTick>
 80103e8:	0003      	movs	r3, r0
 80103ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80103ec:	e008      	b.n	8010400 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80103ee:	f7f9 ff8f 	bl	800a310 <HAL_GetTick>
 80103f2:	0002      	movs	r2, r0
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	1ad3      	subs	r3, r2, r3
 80103f8:	2b02      	cmp	r3, #2
 80103fa:	d901      	bls.n	8010400 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80103fc:	2303      	movs	r3, #3
 80103fe:	e0ca      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010400:	4b22      	ldr	r3, [pc, #136]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	2202      	movs	r2, #2
 8010406:	4013      	ands	r3, r2
 8010408:	d0f1      	beq.n	80103ee <HAL_RCC_OscConfig+0x5ea>
 801040a:	e01e      	b.n	801044a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801040c:	4b1f      	ldr	r3, [pc, #124]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 801040e:	689a      	ldr	r2, [r3, #8]
 8010410:	4b1e      	ldr	r3, [pc, #120]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010412:	2101      	movs	r1, #1
 8010414:	438a      	bics	r2, r1
 8010416:	609a      	str	r2, [r3, #8]
 8010418:	4b23      	ldr	r3, [pc, #140]	@ (80104a8 <HAL_RCC_OscConfig+0x6a4>)
 801041a:	6a1a      	ldr	r2, [r3, #32]
 801041c:	4b22      	ldr	r3, [pc, #136]	@ (80104a8 <HAL_RCC_OscConfig+0x6a4>)
 801041e:	4923      	ldr	r1, [pc, #140]	@ (80104ac <HAL_RCC_OscConfig+0x6a8>)
 8010420:	400a      	ands	r2, r1
 8010422:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010424:	f7f9 ff74 	bl	800a310 <HAL_GetTick>
 8010428:	0003      	movs	r3, r0
 801042a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801042c:	e008      	b.n	8010440 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801042e:	f7f9 ff6f 	bl	800a310 <HAL_GetTick>
 8010432:	0002      	movs	r2, r0
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	2b02      	cmp	r3, #2
 801043a:	d901      	bls.n	8010440 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801043c:	2303      	movs	r3, #3
 801043e:	e0aa      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010440:	4b12      	ldr	r3, [pc, #72]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	2202      	movs	r2, #2
 8010446:	4013      	ands	r3, r2
 8010448:	d1f1      	bne.n	801042e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801044e:	2b00      	cmp	r3, #0
 8010450:	d100      	bne.n	8010454 <HAL_RCC_OscConfig+0x650>
 8010452:	e09f      	b.n	8010594 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	2b0c      	cmp	r3, #12
 8010458:	d100      	bne.n	801045c <HAL_RCC_OscConfig+0x658>
 801045a:	e078      	b.n	801054e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010460:	2b02      	cmp	r3, #2
 8010462:	d159      	bne.n	8010518 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010464:	4b09      	ldr	r3, [pc, #36]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	4b08      	ldr	r3, [pc, #32]	@ (801048c <HAL_RCC_OscConfig+0x688>)
 801046a:	4911      	ldr	r1, [pc, #68]	@ (80104b0 <HAL_RCC_OscConfig+0x6ac>)
 801046c:	400a      	ands	r2, r1
 801046e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010470:	f7f9 ff4e 	bl	800a310 <HAL_GetTick>
 8010474:	0003      	movs	r3, r0
 8010476:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010478:	e01c      	b.n	80104b4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801047a:	f7f9 ff49 	bl	800a310 <HAL_GetTick>
 801047e:	0002      	movs	r2, r0
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	2b02      	cmp	r3, #2
 8010486:	d915      	bls.n	80104b4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8010488:	2303      	movs	r3, #3
 801048a:	e084      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
 801048c:	40021000 	.word	0x40021000
 8010490:	ffff1fff 	.word	0xffff1fff
 8010494:	fffffeff 	.word	0xfffffeff
 8010498:	40007000 	.word	0x40007000
 801049c:	fffffbff 	.word	0xfffffbff
 80104a0:	00001388 	.word	0x00001388
 80104a4:	efffffff 	.word	0xefffffff
 80104a8:	40010000 	.word	0x40010000
 80104ac:	ffffdfff 	.word	0xffffdfff
 80104b0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80104b4:	4b3a      	ldr	r3, [pc, #232]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	2380      	movs	r3, #128	@ 0x80
 80104ba:	049b      	lsls	r3, r3, #18
 80104bc:	4013      	ands	r3, r2
 80104be:	d1dc      	bne.n	801047a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80104c0:	4b37      	ldr	r3, [pc, #220]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	4a37      	ldr	r2, [pc, #220]	@ (80105a4 <HAL_RCC_OscConfig+0x7a0>)
 80104c6:	4013      	ands	r3, r2
 80104c8:	0019      	movs	r1, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104d2:	431a      	orrs	r2, r3
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104d8:	431a      	orrs	r2, r3
 80104da:	4b31      	ldr	r3, [pc, #196]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 80104dc:	430a      	orrs	r2, r1
 80104de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80104e0:	4b2f      	ldr	r3, [pc, #188]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	4b2e      	ldr	r3, [pc, #184]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 80104e6:	2180      	movs	r1, #128	@ 0x80
 80104e8:	0449      	lsls	r1, r1, #17
 80104ea:	430a      	orrs	r2, r1
 80104ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104ee:	f7f9 ff0f 	bl	800a310 <HAL_GetTick>
 80104f2:	0003      	movs	r3, r0
 80104f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80104f6:	e008      	b.n	801050a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104f8:	f7f9 ff0a 	bl	800a310 <HAL_GetTick>
 80104fc:	0002      	movs	r2, r0
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	2b02      	cmp	r3, #2
 8010504:	d901      	bls.n	801050a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8010506:	2303      	movs	r3, #3
 8010508:	e045      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801050a:	4b25      	ldr	r3, [pc, #148]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	2380      	movs	r3, #128	@ 0x80
 8010510:	049b      	lsls	r3, r3, #18
 8010512:	4013      	ands	r3, r2
 8010514:	d0f0      	beq.n	80104f8 <HAL_RCC_OscConfig+0x6f4>
 8010516:	e03d      	b.n	8010594 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010518:	4b21      	ldr	r3, [pc, #132]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	4b20      	ldr	r3, [pc, #128]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 801051e:	4922      	ldr	r1, [pc, #136]	@ (80105a8 <HAL_RCC_OscConfig+0x7a4>)
 8010520:	400a      	ands	r2, r1
 8010522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010524:	f7f9 fef4 	bl	800a310 <HAL_GetTick>
 8010528:	0003      	movs	r3, r0
 801052a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801052c:	e008      	b.n	8010540 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801052e:	f7f9 feef 	bl	800a310 <HAL_GetTick>
 8010532:	0002      	movs	r2, r0
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	1ad3      	subs	r3, r2, r3
 8010538:	2b02      	cmp	r3, #2
 801053a:	d901      	bls.n	8010540 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801053c:	2303      	movs	r3, #3
 801053e:	e02a      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010540:	4b17      	ldr	r3, [pc, #92]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	2380      	movs	r3, #128	@ 0x80
 8010546:	049b      	lsls	r3, r3, #18
 8010548:	4013      	ands	r3, r2
 801054a:	d1f0      	bne.n	801052e <HAL_RCC_OscConfig+0x72a>
 801054c:	e022      	b.n	8010594 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010552:	2b01      	cmp	r3, #1
 8010554:	d101      	bne.n	801055a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8010556:	2301      	movs	r3, #1
 8010558:	e01d      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801055a:	4b11      	ldr	r3, [pc, #68]	@ (80105a0 <HAL_RCC_OscConfig+0x79c>)
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010560:	69ba      	ldr	r2, [r7, #24]
 8010562:	2380      	movs	r3, #128	@ 0x80
 8010564:	025b      	lsls	r3, r3, #9
 8010566:	401a      	ands	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801056c:	429a      	cmp	r2, r3
 801056e:	d10f      	bne.n	8010590 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8010570:	69ba      	ldr	r2, [r7, #24]
 8010572:	23f0      	movs	r3, #240	@ 0xf0
 8010574:	039b      	lsls	r3, r3, #14
 8010576:	401a      	ands	r2, r3
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801057c:	429a      	cmp	r2, r3
 801057e:	d107      	bne.n	8010590 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8010580:	69ba      	ldr	r2, [r7, #24]
 8010582:	23c0      	movs	r3, #192	@ 0xc0
 8010584:	041b      	lsls	r3, r3, #16
 8010586:	401a      	ands	r2, r3
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801058c:	429a      	cmp	r2, r3
 801058e:	d001      	beq.n	8010594 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8010590:	2301      	movs	r3, #1
 8010592:	e000      	b.n	8010596 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8010594:	2300      	movs	r3, #0
}
 8010596:	0018      	movs	r0, r3
 8010598:	46bd      	mov	sp, r7
 801059a:	b00a      	add	sp, #40	@ 0x28
 801059c:	bdb0      	pop	{r4, r5, r7, pc}
 801059e:	46c0      	nop			@ (mov r8, r8)
 80105a0:	40021000 	.word	0x40021000
 80105a4:	ff02ffff 	.word	0xff02ffff
 80105a8:	feffffff 	.word	0xfeffffff

080105ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80105ac:	b5b0      	push	{r4, r5, r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d101      	bne.n	80105c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80105bc:	2301      	movs	r3, #1
 80105be:	e128      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80105c0:	4b96      	ldr	r3, [pc, #600]	@ (801081c <HAL_RCC_ClockConfig+0x270>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2201      	movs	r2, #1
 80105c6:	4013      	ands	r3, r2
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d91e      	bls.n	801060c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80105ce:	4b93      	ldr	r3, [pc, #588]	@ (801081c <HAL_RCC_ClockConfig+0x270>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	2201      	movs	r2, #1
 80105d4:	4393      	bics	r3, r2
 80105d6:	0019      	movs	r1, r3
 80105d8:	4b90      	ldr	r3, [pc, #576]	@ (801081c <HAL_RCC_ClockConfig+0x270>)
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	430a      	orrs	r2, r1
 80105de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80105e0:	f7f9 fe96 	bl	800a310 <HAL_GetTick>
 80105e4:	0003      	movs	r3, r0
 80105e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80105e8:	e009      	b.n	80105fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80105ea:	f7f9 fe91 	bl	800a310 <HAL_GetTick>
 80105ee:	0002      	movs	r2, r0
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	1ad3      	subs	r3, r2, r3
 80105f4:	4a8a      	ldr	r2, [pc, #552]	@ (8010820 <HAL_RCC_ClockConfig+0x274>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d901      	bls.n	80105fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80105fa:	2303      	movs	r3, #3
 80105fc:	e109      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80105fe:	4b87      	ldr	r3, [pc, #540]	@ (801081c <HAL_RCC_ClockConfig+0x270>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	2201      	movs	r2, #1
 8010604:	4013      	ands	r3, r2
 8010606:	683a      	ldr	r2, [r7, #0]
 8010608:	429a      	cmp	r2, r3
 801060a:	d1ee      	bne.n	80105ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	2202      	movs	r2, #2
 8010612:	4013      	ands	r3, r2
 8010614:	d009      	beq.n	801062a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010616:	4b83      	ldr	r3, [pc, #524]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	22f0      	movs	r2, #240	@ 0xf0
 801061c:	4393      	bics	r3, r2
 801061e:	0019      	movs	r1, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	689a      	ldr	r2, [r3, #8]
 8010624:	4b7f      	ldr	r3, [pc, #508]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 8010626:	430a      	orrs	r2, r1
 8010628:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	2201      	movs	r2, #1
 8010630:	4013      	ands	r3, r2
 8010632:	d100      	bne.n	8010636 <HAL_RCC_ClockConfig+0x8a>
 8010634:	e089      	b.n	801074a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	2b02      	cmp	r3, #2
 801063c:	d107      	bne.n	801064e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801063e:	4b79      	ldr	r3, [pc, #484]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	2380      	movs	r3, #128	@ 0x80
 8010644:	029b      	lsls	r3, r3, #10
 8010646:	4013      	ands	r3, r2
 8010648:	d120      	bne.n	801068c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801064a:	2301      	movs	r3, #1
 801064c:	e0e1      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	2b03      	cmp	r3, #3
 8010654:	d107      	bne.n	8010666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010656:	4b73      	ldr	r3, [pc, #460]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	2380      	movs	r3, #128	@ 0x80
 801065c:	049b      	lsls	r3, r3, #18
 801065e:	4013      	ands	r3, r2
 8010660:	d114      	bne.n	801068c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010662:	2301      	movs	r3, #1
 8010664:	e0d5      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	2b01      	cmp	r3, #1
 801066c:	d106      	bne.n	801067c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801066e:	4b6d      	ldr	r3, [pc, #436]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2204      	movs	r2, #4
 8010674:	4013      	ands	r3, r2
 8010676:	d109      	bne.n	801068c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010678:	2301      	movs	r3, #1
 801067a:	e0ca      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801067c:	4b69      	ldr	r3, [pc, #420]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	2380      	movs	r3, #128	@ 0x80
 8010682:	009b      	lsls	r3, r3, #2
 8010684:	4013      	ands	r3, r2
 8010686:	d101      	bne.n	801068c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010688:	2301      	movs	r3, #1
 801068a:	e0c2      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801068c:	4b65      	ldr	r3, [pc, #404]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	2203      	movs	r2, #3
 8010692:	4393      	bics	r3, r2
 8010694:	0019      	movs	r1, r3
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	685a      	ldr	r2, [r3, #4]
 801069a:	4b62      	ldr	r3, [pc, #392]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 801069c:	430a      	orrs	r2, r1
 801069e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80106a0:	f7f9 fe36 	bl	800a310 <HAL_GetTick>
 80106a4:	0003      	movs	r3, r0
 80106a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	2b02      	cmp	r3, #2
 80106ae:	d111      	bne.n	80106d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80106b0:	e009      	b.n	80106c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80106b2:	f7f9 fe2d 	bl	800a310 <HAL_GetTick>
 80106b6:	0002      	movs	r2, r0
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	1ad3      	subs	r3, r2, r3
 80106bc:	4a58      	ldr	r2, [pc, #352]	@ (8010820 <HAL_RCC_ClockConfig+0x274>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d901      	bls.n	80106c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80106c2:	2303      	movs	r3, #3
 80106c4:	e0a5      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80106c6:	4b57      	ldr	r3, [pc, #348]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 80106c8:	68db      	ldr	r3, [r3, #12]
 80106ca:	220c      	movs	r2, #12
 80106cc:	4013      	ands	r3, r2
 80106ce:	2b08      	cmp	r3, #8
 80106d0:	d1ef      	bne.n	80106b2 <HAL_RCC_ClockConfig+0x106>
 80106d2:	e03a      	b.n	801074a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	2b03      	cmp	r3, #3
 80106da:	d111      	bne.n	8010700 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80106dc:	e009      	b.n	80106f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80106de:	f7f9 fe17 	bl	800a310 <HAL_GetTick>
 80106e2:	0002      	movs	r2, r0
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	4a4d      	ldr	r2, [pc, #308]	@ (8010820 <HAL_RCC_ClockConfig+0x274>)
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d901      	bls.n	80106f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80106ee:	2303      	movs	r3, #3
 80106f0:	e08f      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80106f2:	4b4c      	ldr	r3, [pc, #304]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	220c      	movs	r2, #12
 80106f8:	4013      	ands	r3, r2
 80106fa:	2b0c      	cmp	r3, #12
 80106fc:	d1ef      	bne.n	80106de <HAL_RCC_ClockConfig+0x132>
 80106fe:	e024      	b.n	801074a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	2b01      	cmp	r3, #1
 8010706:	d11b      	bne.n	8010740 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010708:	e009      	b.n	801071e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801070a:	f7f9 fe01 	bl	800a310 <HAL_GetTick>
 801070e:	0002      	movs	r2, r0
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	1ad3      	subs	r3, r2, r3
 8010714:	4a42      	ldr	r2, [pc, #264]	@ (8010820 <HAL_RCC_ClockConfig+0x274>)
 8010716:	4293      	cmp	r3, r2
 8010718:	d901      	bls.n	801071e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801071a:	2303      	movs	r3, #3
 801071c:	e079      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801071e:	4b41      	ldr	r3, [pc, #260]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	220c      	movs	r2, #12
 8010724:	4013      	ands	r3, r2
 8010726:	2b04      	cmp	r3, #4
 8010728:	d1ef      	bne.n	801070a <HAL_RCC_ClockConfig+0x15e>
 801072a:	e00e      	b.n	801074a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801072c:	f7f9 fdf0 	bl	800a310 <HAL_GetTick>
 8010730:	0002      	movs	r2, r0
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	4a3a      	ldr	r2, [pc, #232]	@ (8010820 <HAL_RCC_ClockConfig+0x274>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d901      	bls.n	8010740 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801073c:	2303      	movs	r3, #3
 801073e:	e068      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8010740:	4b38      	ldr	r3, [pc, #224]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 8010742:	68db      	ldr	r3, [r3, #12]
 8010744:	220c      	movs	r2, #12
 8010746:	4013      	ands	r3, r2
 8010748:	d1f0      	bne.n	801072c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801074a:	4b34      	ldr	r3, [pc, #208]	@ (801081c <HAL_RCC_ClockConfig+0x270>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2201      	movs	r2, #1
 8010750:	4013      	ands	r3, r2
 8010752:	683a      	ldr	r2, [r7, #0]
 8010754:	429a      	cmp	r2, r3
 8010756:	d21e      	bcs.n	8010796 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010758:	4b30      	ldr	r3, [pc, #192]	@ (801081c <HAL_RCC_ClockConfig+0x270>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2201      	movs	r2, #1
 801075e:	4393      	bics	r3, r2
 8010760:	0019      	movs	r1, r3
 8010762:	4b2e      	ldr	r3, [pc, #184]	@ (801081c <HAL_RCC_ClockConfig+0x270>)
 8010764:	683a      	ldr	r2, [r7, #0]
 8010766:	430a      	orrs	r2, r1
 8010768:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801076a:	f7f9 fdd1 	bl	800a310 <HAL_GetTick>
 801076e:	0003      	movs	r3, r0
 8010770:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010772:	e009      	b.n	8010788 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010774:	f7f9 fdcc 	bl	800a310 <HAL_GetTick>
 8010778:	0002      	movs	r2, r0
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	4a28      	ldr	r2, [pc, #160]	@ (8010820 <HAL_RCC_ClockConfig+0x274>)
 8010780:	4293      	cmp	r3, r2
 8010782:	d901      	bls.n	8010788 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8010784:	2303      	movs	r3, #3
 8010786:	e044      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010788:	4b24      	ldr	r3, [pc, #144]	@ (801081c <HAL_RCC_ClockConfig+0x270>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2201      	movs	r2, #1
 801078e:	4013      	ands	r3, r2
 8010790:	683a      	ldr	r2, [r7, #0]
 8010792:	429a      	cmp	r2, r3
 8010794:	d1ee      	bne.n	8010774 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2204      	movs	r2, #4
 801079c:	4013      	ands	r3, r2
 801079e:	d009      	beq.n	80107b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80107a0:	4b20      	ldr	r3, [pc, #128]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 80107a2:	68db      	ldr	r3, [r3, #12]
 80107a4:	4a20      	ldr	r2, [pc, #128]	@ (8010828 <HAL_RCC_ClockConfig+0x27c>)
 80107a6:	4013      	ands	r3, r2
 80107a8:	0019      	movs	r1, r3
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	68da      	ldr	r2, [r3, #12]
 80107ae:	4b1d      	ldr	r3, [pc, #116]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 80107b0:	430a      	orrs	r2, r1
 80107b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2208      	movs	r2, #8
 80107ba:	4013      	ands	r3, r2
 80107bc:	d00a      	beq.n	80107d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80107be:	4b19      	ldr	r3, [pc, #100]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 80107c0:	68db      	ldr	r3, [r3, #12]
 80107c2:	4a1a      	ldr	r2, [pc, #104]	@ (801082c <HAL_RCC_ClockConfig+0x280>)
 80107c4:	4013      	ands	r3, r2
 80107c6:	0019      	movs	r1, r3
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	691b      	ldr	r3, [r3, #16]
 80107cc:	00da      	lsls	r2, r3, #3
 80107ce:	4b15      	ldr	r3, [pc, #84]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 80107d0:	430a      	orrs	r2, r1
 80107d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80107d4:	f000 f832 	bl	801083c <HAL_RCC_GetSysClockFreq>
 80107d8:	0001      	movs	r1, r0
 80107da:	4b12      	ldr	r3, [pc, #72]	@ (8010824 <HAL_RCC_ClockConfig+0x278>)
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	091b      	lsrs	r3, r3, #4
 80107e0:	220f      	movs	r2, #15
 80107e2:	4013      	ands	r3, r2
 80107e4:	4a12      	ldr	r2, [pc, #72]	@ (8010830 <HAL_RCC_ClockConfig+0x284>)
 80107e6:	5cd3      	ldrb	r3, [r2, r3]
 80107e8:	000a      	movs	r2, r1
 80107ea:	40da      	lsrs	r2, r3
 80107ec:	4b11      	ldr	r3, [pc, #68]	@ (8010834 <HAL_RCC_ClockConfig+0x288>)
 80107ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80107f0:	4b11      	ldr	r3, [pc, #68]	@ (8010838 <HAL_RCC_ClockConfig+0x28c>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	250b      	movs	r5, #11
 80107f6:	197c      	adds	r4, r7, r5
 80107f8:	0018      	movs	r0, r3
 80107fa:	f7f9 fd43 	bl	800a284 <HAL_InitTick>
 80107fe:	0003      	movs	r3, r0
 8010800:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8010802:	197b      	adds	r3, r7, r5
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d002      	beq.n	8010810 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801080a:	197b      	adds	r3, r7, r5
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	e000      	b.n	8010812 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8010810:	2300      	movs	r3, #0
}
 8010812:	0018      	movs	r0, r3
 8010814:	46bd      	mov	sp, r7
 8010816:	b004      	add	sp, #16
 8010818:	bdb0      	pop	{r4, r5, r7, pc}
 801081a:	46c0      	nop			@ (mov r8, r8)
 801081c:	40022000 	.word	0x40022000
 8010820:	00001388 	.word	0x00001388
 8010824:	40021000 	.word	0x40021000
 8010828:	fffff8ff 	.word	0xfffff8ff
 801082c:	ffffc7ff 	.word	0xffffc7ff
 8010830:	0801c1b4 	.word	0x0801c1b4
 8010834:	2000005c 	.word	0x2000005c
 8010838:	20000070 	.word	0x20000070

0801083c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801083c:	b5b0      	push	{r4, r5, r7, lr}
 801083e:	b08e      	sub	sp, #56	@ 0x38
 8010840:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8010842:	4b4c      	ldr	r3, [pc, #304]	@ (8010974 <HAL_RCC_GetSysClockFreq+0x138>)
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801084a:	230c      	movs	r3, #12
 801084c:	4013      	ands	r3, r2
 801084e:	2b0c      	cmp	r3, #12
 8010850:	d014      	beq.n	801087c <HAL_RCC_GetSysClockFreq+0x40>
 8010852:	d900      	bls.n	8010856 <HAL_RCC_GetSysClockFreq+0x1a>
 8010854:	e07b      	b.n	801094e <HAL_RCC_GetSysClockFreq+0x112>
 8010856:	2b04      	cmp	r3, #4
 8010858:	d002      	beq.n	8010860 <HAL_RCC_GetSysClockFreq+0x24>
 801085a:	2b08      	cmp	r3, #8
 801085c:	d00b      	beq.n	8010876 <HAL_RCC_GetSysClockFreq+0x3a>
 801085e:	e076      	b.n	801094e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010860:	4b44      	ldr	r3, [pc, #272]	@ (8010974 <HAL_RCC_GetSysClockFreq+0x138>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	2210      	movs	r2, #16
 8010866:	4013      	ands	r3, r2
 8010868:	d002      	beq.n	8010870 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801086a:	4b43      	ldr	r3, [pc, #268]	@ (8010978 <HAL_RCC_GetSysClockFreq+0x13c>)
 801086c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801086e:	e07c      	b.n	801096a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8010870:	4b42      	ldr	r3, [pc, #264]	@ (801097c <HAL_RCC_GetSysClockFreq+0x140>)
 8010872:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010874:	e079      	b.n	801096a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010876:	4b42      	ldr	r3, [pc, #264]	@ (8010980 <HAL_RCC_GetSysClockFreq+0x144>)
 8010878:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801087a:	e076      	b.n	801096a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801087c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801087e:	0c9a      	lsrs	r2, r3, #18
 8010880:	230f      	movs	r3, #15
 8010882:	401a      	ands	r2, r3
 8010884:	4b3f      	ldr	r3, [pc, #252]	@ (8010984 <HAL_RCC_GetSysClockFreq+0x148>)
 8010886:	5c9b      	ldrb	r3, [r3, r2]
 8010888:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801088a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088c:	0d9a      	lsrs	r2, r3, #22
 801088e:	2303      	movs	r3, #3
 8010890:	4013      	ands	r3, r2
 8010892:	3301      	adds	r3, #1
 8010894:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010896:	4b37      	ldr	r3, [pc, #220]	@ (8010974 <HAL_RCC_GetSysClockFreq+0x138>)
 8010898:	68da      	ldr	r2, [r3, #12]
 801089a:	2380      	movs	r3, #128	@ 0x80
 801089c:	025b      	lsls	r3, r3, #9
 801089e:	4013      	ands	r3, r2
 80108a0:	d01a      	beq.n	80108d8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80108a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a4:	61bb      	str	r3, [r7, #24]
 80108a6:	2300      	movs	r3, #0
 80108a8:	61fb      	str	r3, [r7, #28]
 80108aa:	4a35      	ldr	r2, [pc, #212]	@ (8010980 <HAL_RCC_GetSysClockFreq+0x144>)
 80108ac:	2300      	movs	r3, #0
 80108ae:	69b8      	ldr	r0, [r7, #24]
 80108b0:	69f9      	ldr	r1, [r7, #28]
 80108b2:	f7ef fe53 	bl	800055c <__aeabi_lmul>
 80108b6:	0002      	movs	r2, r0
 80108b8:	000b      	movs	r3, r1
 80108ba:	0010      	movs	r0, r2
 80108bc:	0019      	movs	r1, r3
 80108be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108c0:	613b      	str	r3, [r7, #16]
 80108c2:	2300      	movs	r3, #0
 80108c4:	617b      	str	r3, [r7, #20]
 80108c6:	693a      	ldr	r2, [r7, #16]
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	f7ef fe27 	bl	800051c <__aeabi_uldivmod>
 80108ce:	0002      	movs	r2, r0
 80108d0:	000b      	movs	r3, r1
 80108d2:	0013      	movs	r3, r2
 80108d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80108d6:	e037      	b.n	8010948 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80108d8:	4b26      	ldr	r3, [pc, #152]	@ (8010974 <HAL_RCC_GetSysClockFreq+0x138>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2210      	movs	r2, #16
 80108de:	4013      	ands	r3, r2
 80108e0:	d01a      	beq.n	8010918 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80108e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e4:	60bb      	str	r3, [r7, #8]
 80108e6:	2300      	movs	r3, #0
 80108e8:	60fb      	str	r3, [r7, #12]
 80108ea:	4a23      	ldr	r2, [pc, #140]	@ (8010978 <HAL_RCC_GetSysClockFreq+0x13c>)
 80108ec:	2300      	movs	r3, #0
 80108ee:	68b8      	ldr	r0, [r7, #8]
 80108f0:	68f9      	ldr	r1, [r7, #12]
 80108f2:	f7ef fe33 	bl	800055c <__aeabi_lmul>
 80108f6:	0002      	movs	r2, r0
 80108f8:	000b      	movs	r3, r1
 80108fa:	0010      	movs	r0, r2
 80108fc:	0019      	movs	r1, r3
 80108fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010900:	603b      	str	r3, [r7, #0]
 8010902:	2300      	movs	r3, #0
 8010904:	607b      	str	r3, [r7, #4]
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f7ef fe07 	bl	800051c <__aeabi_uldivmod>
 801090e:	0002      	movs	r2, r0
 8010910:	000b      	movs	r3, r1
 8010912:	0013      	movs	r3, r2
 8010914:	637b      	str	r3, [r7, #52]	@ 0x34
 8010916:	e017      	b.n	8010948 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801091a:	0018      	movs	r0, r3
 801091c:	2300      	movs	r3, #0
 801091e:	0019      	movs	r1, r3
 8010920:	4a16      	ldr	r2, [pc, #88]	@ (801097c <HAL_RCC_GetSysClockFreq+0x140>)
 8010922:	2300      	movs	r3, #0
 8010924:	f7ef fe1a 	bl	800055c <__aeabi_lmul>
 8010928:	0002      	movs	r2, r0
 801092a:	000b      	movs	r3, r1
 801092c:	0010      	movs	r0, r2
 801092e:	0019      	movs	r1, r3
 8010930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010932:	001c      	movs	r4, r3
 8010934:	2300      	movs	r3, #0
 8010936:	001d      	movs	r5, r3
 8010938:	0022      	movs	r2, r4
 801093a:	002b      	movs	r3, r5
 801093c:	f7ef fdee 	bl	800051c <__aeabi_uldivmod>
 8010940:	0002      	movs	r2, r0
 8010942:	000b      	movs	r3, r1
 8010944:	0013      	movs	r3, r2
 8010946:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8010948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801094a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801094c:	e00d      	b.n	801096a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801094e:	4b09      	ldr	r3, [pc, #36]	@ (8010974 <HAL_RCC_GetSysClockFreq+0x138>)
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	0b5b      	lsrs	r3, r3, #13
 8010954:	2207      	movs	r2, #7
 8010956:	4013      	ands	r3, r2
 8010958:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801095a:	6a3b      	ldr	r3, [r7, #32]
 801095c:	3301      	adds	r3, #1
 801095e:	2280      	movs	r2, #128	@ 0x80
 8010960:	0212      	lsls	r2, r2, #8
 8010962:	409a      	lsls	r2, r3
 8010964:	0013      	movs	r3, r2
 8010966:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010968:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801096a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801096c:	0018      	movs	r0, r3
 801096e:	46bd      	mov	sp, r7
 8010970:	b00e      	add	sp, #56	@ 0x38
 8010972:	bdb0      	pop	{r4, r5, r7, pc}
 8010974:	40021000 	.word	0x40021000
 8010978:	003d0900 	.word	0x003d0900
 801097c:	00f42400 	.word	0x00f42400
 8010980:	007a1200 	.word	0x007a1200
 8010984:	0801c1cc 	.word	0x0801c1cc

08010988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801098c:	4b02      	ldr	r3, [pc, #8]	@ (8010998 <HAL_RCC_GetHCLKFreq+0x10>)
 801098e:	681b      	ldr	r3, [r3, #0]
}
 8010990:	0018      	movs	r0, r3
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	46c0      	nop			@ (mov r8, r8)
 8010998:	2000005c 	.word	0x2000005c

0801099c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80109a0:	f7ff fff2 	bl	8010988 <HAL_RCC_GetHCLKFreq>
 80109a4:	0001      	movs	r1, r0
 80109a6:	4b06      	ldr	r3, [pc, #24]	@ (80109c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	0a1b      	lsrs	r3, r3, #8
 80109ac:	2207      	movs	r2, #7
 80109ae:	4013      	ands	r3, r2
 80109b0:	4a04      	ldr	r2, [pc, #16]	@ (80109c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80109b2:	5cd3      	ldrb	r3, [r2, r3]
 80109b4:	40d9      	lsrs	r1, r3
 80109b6:	000b      	movs	r3, r1
}
 80109b8:	0018      	movs	r0, r3
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	46c0      	nop			@ (mov r8, r8)
 80109c0:	40021000 	.word	0x40021000
 80109c4:	0801c1c4 	.word	0x0801c1c4

080109c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80109cc:	f7ff ffdc 	bl	8010988 <HAL_RCC_GetHCLKFreq>
 80109d0:	0001      	movs	r1, r0
 80109d2:	4b06      	ldr	r3, [pc, #24]	@ (80109ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80109d4:	68db      	ldr	r3, [r3, #12]
 80109d6:	0adb      	lsrs	r3, r3, #11
 80109d8:	2207      	movs	r2, #7
 80109da:	4013      	ands	r3, r2
 80109dc:	4a04      	ldr	r2, [pc, #16]	@ (80109f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80109de:	5cd3      	ldrb	r3, [r2, r3]
 80109e0:	40d9      	lsrs	r1, r3
 80109e2:	000b      	movs	r3, r1
}
 80109e4:	0018      	movs	r0, r3
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	46c0      	nop			@ (mov r8, r8)
 80109ec:	40021000 	.word	0x40021000
 80109f0:	0801c1c4 	.word	0x0801c1c4

080109f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b086      	sub	sp, #24
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80109fc:	2017      	movs	r0, #23
 80109fe:	183b      	adds	r3, r7, r0
 8010a00:	2200      	movs	r2, #0
 8010a02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2220      	movs	r2, #32
 8010a0a:	4013      	ands	r3, r2
 8010a0c:	d100      	bne.n	8010a10 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8010a0e:	e0c7      	b.n	8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010a10:	4b9b      	ldr	r3, [pc, #620]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010a14:	2380      	movs	r3, #128	@ 0x80
 8010a16:	055b      	lsls	r3, r3, #21
 8010a18:	4013      	ands	r3, r2
 8010a1a:	d109      	bne.n	8010a30 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010a1c:	4b98      	ldr	r3, [pc, #608]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010a20:	4b97      	ldr	r3, [pc, #604]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a22:	2180      	movs	r1, #128	@ 0x80
 8010a24:	0549      	lsls	r1, r1, #21
 8010a26:	430a      	orrs	r2, r1
 8010a28:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8010a2a:	183b      	adds	r3, r7, r0
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010a30:	4b94      	ldr	r3, [pc, #592]	@ (8010c84 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	2380      	movs	r3, #128	@ 0x80
 8010a36:	005b      	lsls	r3, r3, #1
 8010a38:	4013      	ands	r3, r2
 8010a3a:	d11a      	bne.n	8010a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010a3c:	4b91      	ldr	r3, [pc, #580]	@ (8010c84 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	4b90      	ldr	r3, [pc, #576]	@ (8010c84 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010a42:	2180      	movs	r1, #128	@ 0x80
 8010a44:	0049      	lsls	r1, r1, #1
 8010a46:	430a      	orrs	r2, r1
 8010a48:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010a4a:	f7f9 fc61 	bl	800a310 <HAL_GetTick>
 8010a4e:	0003      	movs	r3, r0
 8010a50:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010a52:	e008      	b.n	8010a66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010a54:	f7f9 fc5c 	bl	800a310 <HAL_GetTick>
 8010a58:	0002      	movs	r2, r0
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	1ad3      	subs	r3, r2, r3
 8010a5e:	2b64      	cmp	r3, #100	@ 0x64
 8010a60:	d901      	bls.n	8010a66 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8010a62:	2303      	movs	r3, #3
 8010a64:	e107      	b.n	8010c76 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010a66:	4b87      	ldr	r3, [pc, #540]	@ (8010c84 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	2380      	movs	r3, #128	@ 0x80
 8010a6c:	005b      	lsls	r3, r3, #1
 8010a6e:	4013      	ands	r3, r2
 8010a70:	d0f0      	beq.n	8010a54 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8010a72:	4b83      	ldr	r3, [pc, #524]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	23c0      	movs	r3, #192	@ 0xc0
 8010a78:	039b      	lsls	r3, r3, #14
 8010a7a:	4013      	ands	r3, r2
 8010a7c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	23c0      	movs	r3, #192	@ 0xc0
 8010a84:	039b      	lsls	r3, r3, #14
 8010a86:	4013      	ands	r3, r2
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d013      	beq.n	8010ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	685a      	ldr	r2, [r3, #4]
 8010a92:	23c0      	movs	r3, #192	@ 0xc0
 8010a94:	029b      	lsls	r3, r3, #10
 8010a96:	401a      	ands	r2, r3
 8010a98:	23c0      	movs	r3, #192	@ 0xc0
 8010a9a:	029b      	lsls	r3, r3, #10
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d10a      	bne.n	8010ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010aa0:	4b77      	ldr	r3, [pc, #476]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	2380      	movs	r3, #128	@ 0x80
 8010aa6:	029b      	lsls	r3, r3, #10
 8010aa8:	401a      	ands	r2, r3
 8010aaa:	2380      	movs	r3, #128	@ 0x80
 8010aac:	029b      	lsls	r3, r3, #10
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d101      	bne.n	8010ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e0df      	b.n	8010c76 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8010ab6:	4b72      	ldr	r3, [pc, #456]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010ab8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010aba:	23c0      	movs	r3, #192	@ 0xc0
 8010abc:	029b      	lsls	r3, r3, #10
 8010abe:	4013      	ands	r3, r2
 8010ac0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d03b      	beq.n	8010b40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	685a      	ldr	r2, [r3, #4]
 8010acc:	23c0      	movs	r3, #192	@ 0xc0
 8010ace:	029b      	lsls	r3, r3, #10
 8010ad0:	4013      	ands	r3, r2
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d033      	beq.n	8010b40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	2220      	movs	r2, #32
 8010ade:	4013      	ands	r3, r2
 8010ae0:	d02e      	beq.n	8010b40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8010ae2:	4b67      	ldr	r3, [pc, #412]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ae6:	4a68      	ldr	r2, [pc, #416]	@ (8010c88 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8010ae8:	4013      	ands	r3, r2
 8010aea:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8010aec:	4b64      	ldr	r3, [pc, #400]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010aee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010af0:	4b63      	ldr	r3, [pc, #396]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010af2:	2180      	movs	r1, #128	@ 0x80
 8010af4:	0309      	lsls	r1, r1, #12
 8010af6:	430a      	orrs	r2, r1
 8010af8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010afa:	4b61      	ldr	r3, [pc, #388]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010afc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010afe:	4b60      	ldr	r3, [pc, #384]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b00:	4962      	ldr	r1, [pc, #392]	@ (8010c8c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8010b02:	400a      	ands	r2, r1
 8010b04:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8010b06:	4b5e      	ldr	r3, [pc, #376]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b08:	68fa      	ldr	r2, [r7, #12]
 8010b0a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	2380      	movs	r3, #128	@ 0x80
 8010b10:	005b      	lsls	r3, r3, #1
 8010b12:	4013      	ands	r3, r2
 8010b14:	d014      	beq.n	8010b40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010b16:	f7f9 fbfb 	bl	800a310 <HAL_GetTick>
 8010b1a:	0003      	movs	r3, r0
 8010b1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010b1e:	e009      	b.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b20:	f7f9 fbf6 	bl	800a310 <HAL_GetTick>
 8010b24:	0002      	movs	r2, r0
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	4a59      	ldr	r2, [pc, #356]	@ (8010c90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d901      	bls.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8010b30:	2303      	movs	r3, #3
 8010b32:	e0a0      	b.n	8010c76 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010b34:	4b52      	ldr	r3, [pc, #328]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010b38:	2380      	movs	r3, #128	@ 0x80
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	4013      	ands	r3, r2
 8010b3e:	d0ef      	beq.n	8010b20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	2220      	movs	r2, #32
 8010b46:	4013      	ands	r3, r2
 8010b48:	d01f      	beq.n	8010b8a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	685a      	ldr	r2, [r3, #4]
 8010b4e:	23c0      	movs	r3, #192	@ 0xc0
 8010b50:	029b      	lsls	r3, r3, #10
 8010b52:	401a      	ands	r2, r3
 8010b54:	23c0      	movs	r3, #192	@ 0xc0
 8010b56:	029b      	lsls	r3, r3, #10
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d10c      	bne.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8010b5c:	4b48      	ldr	r3, [pc, #288]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a4c      	ldr	r2, [pc, #304]	@ (8010c94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8010b62:	4013      	ands	r3, r2
 8010b64:	0019      	movs	r1, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	685a      	ldr	r2, [r3, #4]
 8010b6a:	23c0      	movs	r3, #192	@ 0xc0
 8010b6c:	039b      	lsls	r3, r3, #14
 8010b6e:	401a      	ands	r2, r3
 8010b70:	4b43      	ldr	r3, [pc, #268]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b72:	430a      	orrs	r2, r1
 8010b74:	601a      	str	r2, [r3, #0]
 8010b76:	4b42      	ldr	r3, [pc, #264]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	685a      	ldr	r2, [r3, #4]
 8010b7e:	23c0      	movs	r3, #192	@ 0xc0
 8010b80:	029b      	lsls	r3, r3, #10
 8010b82:	401a      	ands	r2, r3
 8010b84:	4b3e      	ldr	r3, [pc, #248]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b86:	430a      	orrs	r2, r1
 8010b88:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8010b8a:	2317      	movs	r3, #23
 8010b8c:	18fb      	adds	r3, r7, r3
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d105      	bne.n	8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010b94:	4b3a      	ldr	r3, [pc, #232]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b98:	4b39      	ldr	r3, [pc, #228]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b9a:	493f      	ldr	r1, [pc, #252]	@ (8010c98 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8010b9c:	400a      	ands	r2, r1
 8010b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	4013      	ands	r3, r2
 8010ba8:	d009      	beq.n	8010bbe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010baa:	4b35      	ldr	r3, [pc, #212]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bae:	2203      	movs	r2, #3
 8010bb0:	4393      	bics	r3, r2
 8010bb2:	0019      	movs	r1, r3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	689a      	ldr	r2, [r3, #8]
 8010bb8:	4b31      	ldr	r3, [pc, #196]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bba:	430a      	orrs	r2, r1
 8010bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	2202      	movs	r2, #2
 8010bc4:	4013      	ands	r3, r2
 8010bc6:	d009      	beq.n	8010bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bcc:	220c      	movs	r2, #12
 8010bce:	4393      	bics	r3, r2
 8010bd0:	0019      	movs	r1, r3
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	68da      	ldr	r2, [r3, #12]
 8010bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bd8:	430a      	orrs	r2, r1
 8010bda:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	2204      	movs	r2, #4
 8010be2:	4013      	ands	r3, r2
 8010be4:	d009      	beq.n	8010bfa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010be6:	4b26      	ldr	r3, [pc, #152]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bea:	4a2c      	ldr	r2, [pc, #176]	@ (8010c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8010bec:	4013      	ands	r3, r2
 8010bee:	0019      	movs	r1, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	691a      	ldr	r2, [r3, #16]
 8010bf4:	4b22      	ldr	r3, [pc, #136]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bf6:	430a      	orrs	r2, r1
 8010bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2208      	movs	r2, #8
 8010c00:	4013      	ands	r3, r2
 8010c02:	d009      	beq.n	8010c18 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010c04:	4b1e      	ldr	r3, [pc, #120]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c08:	4a25      	ldr	r2, [pc, #148]	@ (8010ca0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8010c0a:	4013      	ands	r3, r2
 8010c0c:	0019      	movs	r1, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	695a      	ldr	r2, [r3, #20]
 8010c12:	4b1b      	ldr	r3, [pc, #108]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c14:	430a      	orrs	r2, r1
 8010c16:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	2380      	movs	r3, #128	@ 0x80
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	4013      	ands	r3, r2
 8010c22:	d009      	beq.n	8010c38 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010c24:	4b16      	ldr	r3, [pc, #88]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c28:	4a17      	ldr	r2, [pc, #92]	@ (8010c88 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8010c2a:	4013      	ands	r3, r2
 8010c2c:	0019      	movs	r1, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	699a      	ldr	r2, [r3, #24]
 8010c32:	4b13      	ldr	r3, [pc, #76]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c34:	430a      	orrs	r2, r1
 8010c36:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2240      	movs	r2, #64	@ 0x40
 8010c3e:	4013      	ands	r3, r2
 8010c40:	d009      	beq.n	8010c56 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010c42:	4b0f      	ldr	r3, [pc, #60]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c46:	4a17      	ldr	r2, [pc, #92]	@ (8010ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8010c48:	4013      	ands	r3, r2
 8010c4a:	0019      	movs	r1, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6a1a      	ldr	r2, [r3, #32]
 8010c50:	4b0b      	ldr	r3, [pc, #44]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c52:	430a      	orrs	r2, r1
 8010c54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2280      	movs	r2, #128	@ 0x80
 8010c5c:	4013      	ands	r3, r2
 8010c5e:	d009      	beq.n	8010c74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8010c60:	4b07      	ldr	r3, [pc, #28]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c64:	4a10      	ldr	r2, [pc, #64]	@ (8010ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8010c66:	4013      	ands	r3, r2
 8010c68:	0019      	movs	r1, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	69da      	ldr	r2, [r3, #28]
 8010c6e:	4b04      	ldr	r3, [pc, #16]	@ (8010c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c70:	430a      	orrs	r2, r1
 8010c72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010c74:	2300      	movs	r3, #0
}
 8010c76:	0018      	movs	r0, r3
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	b006      	add	sp, #24
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	46c0      	nop			@ (mov r8, r8)
 8010c80:	40021000 	.word	0x40021000
 8010c84:	40007000 	.word	0x40007000
 8010c88:	fffcffff 	.word	0xfffcffff
 8010c8c:	fff7ffff 	.word	0xfff7ffff
 8010c90:	00001388 	.word	0x00001388
 8010c94:	ffcfffff 	.word	0xffcfffff
 8010c98:	efffffff 	.word	0xefffffff
 8010c9c:	fffff3ff 	.word	0xfffff3ff
 8010ca0:	ffffcfff 	.word	0xffffcfff
 8010ca4:	fbffffff 	.word	0xfbffffff
 8010ca8:	fff3ffff 	.word	0xfff3ffff

08010cac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010cac:	b5b0      	push	{r4, r5, r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010cb4:	230f      	movs	r3, #15
 8010cb6:	18fb      	adds	r3, r7, r3
 8010cb8:	2201      	movs	r2, #1
 8010cba:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d101      	bne.n	8010cc6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e088      	b.n	8010dd8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2221      	movs	r2, #33	@ 0x21
 8010cca:	5c9b      	ldrb	r3, [r3, r2]
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d107      	bne.n	8010ce2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2220      	movs	r2, #32
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	0018      	movs	r0, r3
 8010cde:	f7f6 fc43 	bl	8007568 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2221      	movs	r2, #33	@ 0x21
 8010ce6:	2102      	movs	r1, #2
 8010ce8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	2210      	movs	r2, #16
 8010cf2:	4013      	ands	r3, r2
 8010cf4:	2b10      	cmp	r3, #16
 8010cf6:	d05f      	beq.n	8010db8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	22ca      	movs	r2, #202	@ 0xca
 8010cfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	2253      	movs	r2, #83	@ 0x53
 8010d06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010d08:	250f      	movs	r5, #15
 8010d0a:	197c      	adds	r4, r7, r5
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	0018      	movs	r0, r3
 8010d10:	f000 f93a 	bl	8010f88 <RTC_EnterInitMode>
 8010d14:	0003      	movs	r3, r0
 8010d16:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8010d18:	0028      	movs	r0, r5
 8010d1a:	183b      	adds	r3, r7, r0
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d12c      	bne.n	8010d7c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	689a      	ldr	r2, [r3, #8]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	492c      	ldr	r1, [pc, #176]	@ (8010de0 <HAL_RTC_Init+0x134>)
 8010d2e:	400a      	ands	r2, r1
 8010d30:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	6899      	ldr	r1, [r3, #8]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	685a      	ldr	r2, [r3, #4]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	691b      	ldr	r3, [r3, #16]
 8010d40:	431a      	orrs	r2, r3
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	699b      	ldr	r3, [r3, #24]
 8010d46:	431a      	orrs	r2, r3
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	430a      	orrs	r2, r1
 8010d4e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	68d2      	ldr	r2, [r2, #12]
 8010d58:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	6919      	ldr	r1, [r3, #16]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	041a      	lsls	r2, r3, #16
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	430a      	orrs	r2, r1
 8010d6c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010d6e:	183c      	adds	r4, r7, r0
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	0018      	movs	r0, r3
 8010d74:	f000 f94c 	bl	8011010 <RTC_ExitInitMode>
 8010d78:	0003      	movs	r3, r0
 8010d7a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8010d7c:	230f      	movs	r3, #15
 8010d7e:	18fb      	adds	r3, r7, r3
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d113      	bne.n	8010dae <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2103      	movs	r1, #3
 8010d92:	438a      	bics	r2, r1
 8010d94:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	69da      	ldr	r2, [r3, #28]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	695b      	ldr	r3, [r3, #20]
 8010da4:	431a      	orrs	r2, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	430a      	orrs	r2, r1
 8010dac:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	22ff      	movs	r2, #255	@ 0xff
 8010db4:	625a      	str	r2, [r3, #36]	@ 0x24
 8010db6:	e003      	b.n	8010dc0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8010db8:	230f      	movs	r3, #15
 8010dba:	18fb      	adds	r3, r7, r3
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8010dc0:	230f      	movs	r3, #15
 8010dc2:	18fb      	adds	r3, r7, r3
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d103      	bne.n	8010dd2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2221      	movs	r2, #33	@ 0x21
 8010dce:	2101      	movs	r1, #1
 8010dd0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8010dd2:	230f      	movs	r3, #15
 8010dd4:	18fb      	adds	r3, r7, r3
 8010dd6:	781b      	ldrb	r3, [r3, #0]
}
 8010dd8:	0018      	movs	r0, r3
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	b004      	add	sp, #16
 8010dde:	bdb0      	pop	{r4, r5, r7, pc}
 8010de0:	ff8fffbf 	.word	0xff8fffbf

08010de4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010de4:	b5b0      	push	{r4, r5, r7, lr}
 8010de6:	b086      	sub	sp, #24
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8010df0:	2300      	movs	r3, #0
 8010df2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2220      	movs	r2, #32
 8010df8:	5c9b      	ldrb	r3, [r3, r2]
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d101      	bne.n	8010e02 <HAL_RTC_SetTime+0x1e>
 8010dfe:	2302      	movs	r3, #2
 8010e00:	e092      	b.n	8010f28 <HAL_RTC_SetTime+0x144>
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2220      	movs	r2, #32
 8010e06:	2101      	movs	r1, #1
 8010e08:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2221      	movs	r2, #33	@ 0x21
 8010e0e:	2102      	movs	r1, #2
 8010e10:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d125      	bne.n	8010e64 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	689b      	ldr	r3, [r3, #8]
 8010e1e:	2240      	movs	r2, #64	@ 0x40
 8010e20:	4013      	ands	r3, r2
 8010e22:	d102      	bne.n	8010e2a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	2200      	movs	r2, #0
 8010e28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	0018      	movs	r0, r3
 8010e30:	f000 f918 	bl	8011064 <RTC_ByteToBcd2>
 8010e34:	0003      	movs	r3, r0
 8010e36:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	785b      	ldrb	r3, [r3, #1]
 8010e3c:	0018      	movs	r0, r3
 8010e3e:	f000 f911 	bl	8011064 <RTC_ByteToBcd2>
 8010e42:	0003      	movs	r3, r0
 8010e44:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010e46:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	789b      	ldrb	r3, [r3, #2]
 8010e4c:	0018      	movs	r0, r3
 8010e4e:	f000 f909 	bl	8011064 <RTC_ByteToBcd2>
 8010e52:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010e54:	0022      	movs	r2, r4
 8010e56:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	78db      	ldrb	r3, [r3, #3]
 8010e5c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	617b      	str	r3, [r7, #20]
 8010e62:	e017      	b.n	8010e94 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	689b      	ldr	r3, [r3, #8]
 8010e6a:	2240      	movs	r2, #64	@ 0x40
 8010e6c:	4013      	ands	r3, r2
 8010e6e:	d102      	bne.n	8010e76 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2200      	movs	r2, #0
 8010e74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	785b      	ldrb	r3, [r3, #1]
 8010e80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010e82:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8010e84:	68ba      	ldr	r2, [r7, #8]
 8010e86:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010e88:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	78db      	ldrb	r3, [r3, #3]
 8010e8e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010e90:	4313      	orrs	r3, r2
 8010e92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	22ca      	movs	r2, #202	@ 0xca
 8010e9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2253      	movs	r2, #83	@ 0x53
 8010ea2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010ea4:	2513      	movs	r5, #19
 8010ea6:	197c      	adds	r4, r7, r5
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	0018      	movs	r0, r3
 8010eac:	f000 f86c 	bl	8010f88 <RTC_EnterInitMode>
 8010eb0:	0003      	movs	r3, r0
 8010eb2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8010eb4:	0028      	movs	r0, r5
 8010eb6:	183b      	adds	r3, r7, r0
 8010eb8:	781b      	ldrb	r3, [r3, #0]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d120      	bne.n	8010f00 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	697a      	ldr	r2, [r7, #20]
 8010ec4:	491a      	ldr	r1, [pc, #104]	@ (8010f30 <HAL_RTC_SetTime+0x14c>)
 8010ec6:	400a      	ands	r2, r1
 8010ec8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	689a      	ldr	r2, [r3, #8]
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4917      	ldr	r1, [pc, #92]	@ (8010f34 <HAL_RTC_SetTime+0x150>)
 8010ed6:	400a      	ands	r2, r1
 8010ed8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	6899      	ldr	r1, [r3, #8]
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	68da      	ldr	r2, [r3, #12]
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	691b      	ldr	r3, [r3, #16]
 8010ee8:	431a      	orrs	r2, r3
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	430a      	orrs	r2, r1
 8010ef0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010ef2:	183c      	adds	r4, r7, r0
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	0018      	movs	r0, r3
 8010ef8:	f000 f88a 	bl	8011010 <RTC_ExitInitMode>
 8010efc:	0003      	movs	r3, r0
 8010efe:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8010f00:	2313      	movs	r3, #19
 8010f02:	18fb      	adds	r3, r7, r3
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d103      	bne.n	8010f12 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2221      	movs	r2, #33	@ 0x21
 8010f0e:	2101      	movs	r1, #1
 8010f10:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	22ff      	movs	r2, #255	@ 0xff
 8010f18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2220      	movs	r2, #32
 8010f1e:	2100      	movs	r1, #0
 8010f20:	5499      	strb	r1, [r3, r2]

  return status;
 8010f22:	2313      	movs	r3, #19
 8010f24:	18fb      	adds	r3, r7, r3
 8010f26:	781b      	ldrb	r3, [r3, #0]
}
 8010f28:	0018      	movs	r0, r3
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	b006      	add	sp, #24
 8010f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8010f30:	007f7f7f 	.word	0x007f7f7f
 8010f34:	fffbffff 	.word	0xfffbffff

08010f38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010f40:	2300      	movs	r3, #0
 8010f42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	4a0e      	ldr	r2, [pc, #56]	@ (8010f84 <HAL_RTC_WaitForSynchro+0x4c>)
 8010f4a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010f4c:	f7f9 f9e0 	bl	800a310 <HAL_GetTick>
 8010f50:	0003      	movs	r3, r0
 8010f52:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010f54:	e00a      	b.n	8010f6c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010f56:	f7f9 f9db 	bl	800a310 <HAL_GetTick>
 8010f5a:	0002      	movs	r2, r0
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	1ad2      	subs	r2, r2, r3
 8010f60:	23fa      	movs	r3, #250	@ 0xfa
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d901      	bls.n	8010f6c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010f68:	2303      	movs	r3, #3
 8010f6a:	e006      	b.n	8010f7a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	2220      	movs	r2, #32
 8010f74:	4013      	ands	r3, r2
 8010f76:	d0ee      	beq.n	8010f56 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8010f78:	2300      	movs	r3, #0
}
 8010f7a:	0018      	movs	r0, r3
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	b004      	add	sp, #16
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	46c0      	nop			@ (mov r8, r8)
 8010f84:	0001ff5f 	.word	0x0001ff5f

08010f88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b084      	sub	sp, #16
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010f90:	2300      	movs	r3, #0
 8010f92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010f94:	230f      	movs	r3, #15
 8010f96:	18fb      	adds	r3, r7, r3
 8010f98:	2200      	movs	r2, #0
 8010f9a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	2240      	movs	r2, #64	@ 0x40
 8010fa4:	4013      	ands	r3, r2
 8010fa6:	d12c      	bne.n	8011002 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	68da      	ldr	r2, [r3, #12]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2180      	movs	r1, #128	@ 0x80
 8010fb4:	430a      	orrs	r2, r1
 8010fb6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010fb8:	f7f9 f9aa 	bl	800a310 <HAL_GetTick>
 8010fbc:	0003      	movs	r3, r0
 8010fbe:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010fc0:	e014      	b.n	8010fec <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010fc2:	f7f9 f9a5 	bl	800a310 <HAL_GetTick>
 8010fc6:	0002      	movs	r2, r0
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	1ad2      	subs	r2, r2, r3
 8010fcc:	200f      	movs	r0, #15
 8010fce:	183b      	adds	r3, r7, r0
 8010fd0:	1839      	adds	r1, r7, r0
 8010fd2:	7809      	ldrb	r1, [r1, #0]
 8010fd4:	7019      	strb	r1, [r3, #0]
 8010fd6:	23fa      	movs	r3, #250	@ 0xfa
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d906      	bls.n	8010fec <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2221      	movs	r2, #33	@ 0x21
 8010fe2:	2104      	movs	r1, #4
 8010fe4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8010fe6:	183b      	adds	r3, r7, r0
 8010fe8:	2201      	movs	r2, #1
 8010fea:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	2240      	movs	r2, #64	@ 0x40
 8010ff4:	4013      	ands	r3, r2
 8010ff6:	d104      	bne.n	8011002 <RTC_EnterInitMode+0x7a>
 8010ff8:	230f      	movs	r3, #15
 8010ffa:	18fb      	adds	r3, r7, r3
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d1df      	bne.n	8010fc2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8011002:	230f      	movs	r3, #15
 8011004:	18fb      	adds	r3, r7, r3
 8011006:	781b      	ldrb	r3, [r3, #0]
}
 8011008:	0018      	movs	r0, r3
 801100a:	46bd      	mov	sp, r7
 801100c:	b004      	add	sp, #16
 801100e:	bd80      	pop	{r7, pc}

08011010 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011010:	b590      	push	{r4, r7, lr}
 8011012:	b085      	sub	sp, #20
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011018:	240f      	movs	r4, #15
 801101a:	193b      	adds	r3, r7, r4
 801101c:	2200      	movs	r2, #0
 801101e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	68da      	ldr	r2, [r3, #12]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2180      	movs	r1, #128	@ 0x80
 801102c:	438a      	bics	r2, r1
 801102e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	689b      	ldr	r3, [r3, #8]
 8011036:	2220      	movs	r2, #32
 8011038:	4013      	ands	r3, r2
 801103a:	d10c      	bne.n	8011056 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	0018      	movs	r0, r3
 8011040:	f7ff ff7a 	bl	8010f38 <HAL_RTC_WaitForSynchro>
 8011044:	1e03      	subs	r3, r0, #0
 8011046:	d006      	beq.n	8011056 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2221      	movs	r2, #33	@ 0x21
 801104c:	2104      	movs	r1, #4
 801104e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8011050:	193b      	adds	r3, r7, r4
 8011052:	2201      	movs	r2, #1
 8011054:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8011056:	230f      	movs	r3, #15
 8011058:	18fb      	adds	r3, r7, r3
 801105a:	781b      	ldrb	r3, [r3, #0]
}
 801105c:	0018      	movs	r0, r3
 801105e:	46bd      	mov	sp, r7
 8011060:	b005      	add	sp, #20
 8011062:	bd90      	pop	{r4, r7, pc}

08011064 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	0002      	movs	r2, r0
 801106c:	1dfb      	adds	r3, r7, #7
 801106e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8011070:	2300      	movs	r3, #0
 8011072:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8011074:	e007      	b.n	8011086 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	3301      	adds	r3, #1
 801107a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801107c:	1dfb      	adds	r3, r7, #7
 801107e:	1dfa      	adds	r2, r7, #7
 8011080:	7812      	ldrb	r2, [r2, #0]
 8011082:	3a0a      	subs	r2, #10
 8011084:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8011086:	1dfb      	adds	r3, r7, #7
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b09      	cmp	r3, #9
 801108c:	d8f3      	bhi.n	8011076 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	b2db      	uxtb	r3, r3
 8011092:	011b      	lsls	r3, r3, #4
 8011094:	b2da      	uxtb	r2, r3
 8011096:	1dfb      	adds	r3, r7, #7
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	4313      	orrs	r3, r2
 801109c:	b2db      	uxtb	r3, r3
}
 801109e:	0018      	movs	r0, r3
 80110a0:	46bd      	mov	sp, r7
 80110a2:	b004      	add	sp, #16
 80110a4:	bd80      	pop	{r7, pc}
	...

080110a8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80110b4:	2300      	movs	r3, #0
 80110b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2220      	movs	r2, #32
 80110bc:	5c9b      	ldrb	r3, [r3, r2]
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d101      	bne.n	80110c6 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 80110c2:	2302      	movs	r3, #2
 80110c4:	e096      	b.n	80111f4 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	2220      	movs	r2, #32
 80110ca:	2101      	movs	r1, #1
 80110cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2221      	movs	r2, #33	@ 0x21
 80110d2:	2102      	movs	r1, #2
 80110d4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	22ca      	movs	r2, #202	@ 0xca
 80110dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	2253      	movs	r2, #83	@ 0x53
 80110e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	689a      	ldr	r2, [r3, #8]
 80110ec:	2380      	movs	r3, #128	@ 0x80
 80110ee:	00db      	lsls	r3, r3, #3
 80110f0:	4013      	ands	r3, r2
 80110f2:	d021      	beq.n	8011138 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 80110f4:	f7f9 f90c 	bl	800a310 <HAL_GetTick>
 80110f8:	0003      	movs	r3, r0
 80110fa:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80110fc:	e016      	b.n	801112c <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80110fe:	f7f9 f907 	bl	800a310 <HAL_GetTick>
 8011102:	0002      	movs	r2, r0
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	1ad2      	subs	r2, r2, r3
 8011108:	23fa      	movs	r3, #250	@ 0xfa
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	429a      	cmp	r2, r3
 801110e:	d90d      	bls.n	801112c <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	22ff      	movs	r2, #255	@ 0xff
 8011116:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2221      	movs	r2, #33	@ 0x21
 801111c:	2103      	movs	r1, #3
 801111e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	2220      	movs	r2, #32
 8011124:	2100      	movs	r1, #0
 8011126:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011128:	2303      	movs	r3, #3
 801112a:	e063      	b.n	80111f4 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	68db      	ldr	r3, [r3, #12]
 8011132:	2204      	movs	r2, #4
 8011134:	4013      	ands	r3, r2
 8011136:	d1e2      	bne.n	80110fe <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	689a      	ldr	r2, [r3, #8]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	492e      	ldr	r1, [pc, #184]	@ (80111fc <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8011144:	400a      	ands	r2, r1
 8011146:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	22ff      	movs	r2, #255	@ 0xff
 8011150:	401a      	ands	r2, r3
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	492a      	ldr	r1, [pc, #168]	@ (8011200 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8011158:	430a      	orrs	r2, r1
 801115a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801115c:	f7f9 f8d8 	bl	800a310 <HAL_GetTick>
 8011160:	0003      	movs	r3, r0
 8011162:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8011164:	e016      	b.n	8011194 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011166:	f7f9 f8d3 	bl	800a310 <HAL_GetTick>
 801116a:	0002      	movs	r2, r0
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	1ad2      	subs	r2, r2, r3
 8011170:	23fa      	movs	r3, #250	@ 0xfa
 8011172:	009b      	lsls	r3, r3, #2
 8011174:	429a      	cmp	r2, r3
 8011176:	d90d      	bls.n	8011194 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	22ff      	movs	r2, #255	@ 0xff
 801117e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2221      	movs	r2, #33	@ 0x21
 8011184:	2103      	movs	r1, #3
 8011186:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2220      	movs	r2, #32
 801118c:	2100      	movs	r1, #0
 801118e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8011190:	2303      	movs	r3, #3
 8011192:	e02f      	b.n	80111f4 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	2204      	movs	r2, #4
 801119c:	4013      	ands	r3, r2
 801119e:	d0e2      	beq.n	8011166 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	689a      	ldr	r2, [r3, #8]
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	2107      	movs	r1, #7
 80111ac:	438a      	bics	r2, r1
 80111ae:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	6899      	ldr	r1, [r3, #8]
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	687a      	ldr	r2, [r7, #4]
 80111bc:	430a      	orrs	r2, r1
 80111be:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	68ba      	ldr	r2, [r7, #8]
 80111c6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	689a      	ldr	r2, [r3, #8]
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2180      	movs	r1, #128	@ 0x80
 80111d4:	00c9      	lsls	r1, r1, #3
 80111d6:	430a      	orrs	r2, r1
 80111d8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	22ff      	movs	r2, #255	@ 0xff
 80111e0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2221      	movs	r2, #33	@ 0x21
 80111e6:	2101      	movs	r1, #1
 80111e8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2220      	movs	r2, #32
 80111ee:	2100      	movs	r1, #0
 80111f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80111f2:	2300      	movs	r3, #0
}
 80111f4:	0018      	movs	r0, r3
 80111f6:	46bd      	mov	sp, r7
 80111f8:	b006      	add	sp, #24
 80111fa:	bd80      	pop	{r7, pc}
 80111fc:	fffffbff 	.word	0xfffffbff
 8011200:	fffffb7f 	.word	0xfffffb7f

08011204 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d101      	bne.n	8011216 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e032      	b.n	801127c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2239      	movs	r2, #57	@ 0x39
 801121a:	5c9b      	ldrb	r3, [r3, r2]
 801121c:	b2db      	uxtb	r3, r3
 801121e:	2b00      	cmp	r3, #0
 8011220:	d107      	bne.n	8011232 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2238      	movs	r2, #56	@ 0x38
 8011226:	2100      	movs	r1, #0
 8011228:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	0018      	movs	r0, r3
 801122e:	f7f8 fa3d 	bl	80096ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2239      	movs	r2, #57	@ 0x39
 8011236:	2102      	movs	r1, #2
 8011238:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681a      	ldr	r2, [r3, #0]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	3304      	adds	r3, #4
 8011242:	0019      	movs	r1, r3
 8011244:	0010      	movs	r0, r2
 8011246:	f000 f975 	bl	8011534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	223e      	movs	r2, #62	@ 0x3e
 801124e:	2101      	movs	r1, #1
 8011250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	223a      	movs	r2, #58	@ 0x3a
 8011256:	2101      	movs	r1, #1
 8011258:	5499      	strb	r1, [r3, r2]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	223b      	movs	r2, #59	@ 0x3b
 801125e:	2101      	movs	r1, #1
 8011260:	5499      	strb	r1, [r3, r2]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	223c      	movs	r2, #60	@ 0x3c
 8011266:	2101      	movs	r1, #1
 8011268:	5499      	strb	r1, [r3, r2]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	223d      	movs	r2, #61	@ 0x3d
 801126e:	2101      	movs	r1, #1
 8011270:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2239      	movs	r2, #57	@ 0x39
 8011276:	2101      	movs	r1, #1
 8011278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801127a:	2300      	movs	r3, #0
}
 801127c:	0018      	movs	r0, r3
 801127e:	46bd      	mov	sp, r7
 8011280:	b002      	add	sp, #8
 8011282:	bd80      	pop	{r7, pc}

08011284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d108      	bne.n	80112a6 <HAL_TIM_PWM_Start+0x22>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	223a      	movs	r2, #58	@ 0x3a
 8011298:	5c9b      	ldrb	r3, [r3, r2]
 801129a:	b2db      	uxtb	r3, r3
 801129c:	3b01      	subs	r3, #1
 801129e:	1e5a      	subs	r2, r3, #1
 80112a0:	4193      	sbcs	r3, r2
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	e01f      	b.n	80112e6 <HAL_TIM_PWM_Start+0x62>
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	2b04      	cmp	r3, #4
 80112aa:	d108      	bne.n	80112be <HAL_TIM_PWM_Start+0x3a>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	223b      	movs	r2, #59	@ 0x3b
 80112b0:	5c9b      	ldrb	r3, [r3, r2]
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	3b01      	subs	r3, #1
 80112b6:	1e5a      	subs	r2, r3, #1
 80112b8:	4193      	sbcs	r3, r2
 80112ba:	b2db      	uxtb	r3, r3
 80112bc:	e013      	b.n	80112e6 <HAL_TIM_PWM_Start+0x62>
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	2b08      	cmp	r3, #8
 80112c2:	d108      	bne.n	80112d6 <HAL_TIM_PWM_Start+0x52>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	223c      	movs	r2, #60	@ 0x3c
 80112c8:	5c9b      	ldrb	r3, [r3, r2]
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	3b01      	subs	r3, #1
 80112ce:	1e5a      	subs	r2, r3, #1
 80112d0:	4193      	sbcs	r3, r2
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	e007      	b.n	80112e6 <HAL_TIM_PWM_Start+0x62>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	223d      	movs	r2, #61	@ 0x3d
 80112da:	5c9b      	ldrb	r3, [r3, r2]
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	3b01      	subs	r3, #1
 80112e0:	1e5a      	subs	r2, r3, #1
 80112e2:	4193      	sbcs	r3, r2
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d001      	beq.n	80112ee <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80112ea:	2301      	movs	r3, #1
 80112ec:	e052      	b.n	8011394 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d104      	bne.n	80112fe <HAL_TIM_PWM_Start+0x7a>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	223a      	movs	r2, #58	@ 0x3a
 80112f8:	2102      	movs	r1, #2
 80112fa:	5499      	strb	r1, [r3, r2]
 80112fc:	e013      	b.n	8011326 <HAL_TIM_PWM_Start+0xa2>
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	2b04      	cmp	r3, #4
 8011302:	d104      	bne.n	801130e <HAL_TIM_PWM_Start+0x8a>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	223b      	movs	r2, #59	@ 0x3b
 8011308:	2102      	movs	r1, #2
 801130a:	5499      	strb	r1, [r3, r2]
 801130c:	e00b      	b.n	8011326 <HAL_TIM_PWM_Start+0xa2>
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	2b08      	cmp	r3, #8
 8011312:	d104      	bne.n	801131e <HAL_TIM_PWM_Start+0x9a>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	223c      	movs	r2, #60	@ 0x3c
 8011318:	2102      	movs	r1, #2
 801131a:	5499      	strb	r1, [r3, r2]
 801131c:	e003      	b.n	8011326 <HAL_TIM_PWM_Start+0xa2>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	223d      	movs	r2, #61	@ 0x3d
 8011322:	2102      	movs	r1, #2
 8011324:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	6839      	ldr	r1, [r7, #0]
 801132c:	2201      	movs	r2, #1
 801132e:	0018      	movs	r0, r3
 8011330:	f000 fa62 	bl	80117f8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681a      	ldr	r2, [r3, #0]
 8011338:	2380      	movs	r3, #128	@ 0x80
 801133a:	05db      	lsls	r3, r3, #23
 801133c:	429a      	cmp	r2, r3
 801133e:	d00e      	beq.n	801135e <HAL_TIM_PWM_Start+0xda>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	4a15      	ldr	r2, [pc, #84]	@ (801139c <HAL_TIM_PWM_Start+0x118>)
 8011346:	4293      	cmp	r3, r2
 8011348:	d009      	beq.n	801135e <HAL_TIM_PWM_Start+0xda>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	4a14      	ldr	r2, [pc, #80]	@ (80113a0 <HAL_TIM_PWM_Start+0x11c>)
 8011350:	4293      	cmp	r3, r2
 8011352:	d004      	beq.n	801135e <HAL_TIM_PWM_Start+0xda>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	4a12      	ldr	r2, [pc, #72]	@ (80113a4 <HAL_TIM_PWM_Start+0x120>)
 801135a:	4293      	cmp	r3, r2
 801135c:	d111      	bne.n	8011382 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	689b      	ldr	r3, [r3, #8]
 8011364:	2207      	movs	r2, #7
 8011366:	4013      	ands	r3, r2
 8011368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2b06      	cmp	r3, #6
 801136e:	d010      	beq.n	8011392 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	2101      	movs	r1, #1
 801137c:	430a      	orrs	r2, r1
 801137e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011380:	e007      	b.n	8011392 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2101      	movs	r1, #1
 801138e:	430a      	orrs	r2, r1
 8011390:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011392:	2300      	movs	r3, #0
}
 8011394:	0018      	movs	r0, r3
 8011396:	46bd      	mov	sp, r7
 8011398:	b004      	add	sp, #16
 801139a:	bd80      	pop	{r7, pc}
 801139c:	40000400 	.word	0x40000400
 80113a0:	40010800 	.word	0x40010800
 80113a4:	40011400 	.word	0x40011400

080113a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80113b4:	2317      	movs	r3, #23
 80113b6:	18fb      	adds	r3, r7, r3
 80113b8:	2200      	movs	r2, #0
 80113ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2238      	movs	r2, #56	@ 0x38
 80113c0:	5c9b      	ldrb	r3, [r3, r2]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d101      	bne.n	80113ca <HAL_TIM_PWM_ConfigChannel+0x22>
 80113c6:	2302      	movs	r3, #2
 80113c8:	e0ad      	b.n	8011526 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2238      	movs	r2, #56	@ 0x38
 80113ce:	2101      	movs	r1, #1
 80113d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2b0c      	cmp	r3, #12
 80113d6:	d100      	bne.n	80113da <HAL_TIM_PWM_ConfigChannel+0x32>
 80113d8:	e076      	b.n	80114c8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2b0c      	cmp	r3, #12
 80113de:	d900      	bls.n	80113e2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80113e0:	e095      	b.n	801150e <HAL_TIM_PWM_ConfigChannel+0x166>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2b08      	cmp	r3, #8
 80113e6:	d04e      	beq.n	8011486 <HAL_TIM_PWM_ConfigChannel+0xde>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b08      	cmp	r3, #8
 80113ec:	d900      	bls.n	80113f0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80113ee:	e08e      	b.n	801150e <HAL_TIM_PWM_ConfigChannel+0x166>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d003      	beq.n	80113fe <HAL_TIM_PWM_ConfigChannel+0x56>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2b04      	cmp	r3, #4
 80113fa:	d021      	beq.n	8011440 <HAL_TIM_PWM_ConfigChannel+0x98>
 80113fc:	e087      	b.n	801150e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	68ba      	ldr	r2, [r7, #8]
 8011404:	0011      	movs	r1, r2
 8011406:	0018      	movs	r0, r3
 8011408:	f000 f8f2 	bl	80115f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	699a      	ldr	r2, [r3, #24]
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	2108      	movs	r1, #8
 8011418:	430a      	orrs	r2, r1
 801141a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	699a      	ldr	r2, [r3, #24]
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2104      	movs	r1, #4
 8011428:	438a      	bics	r2, r1
 801142a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6999      	ldr	r1, [r3, #24]
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	68da      	ldr	r2, [r3, #12]
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	430a      	orrs	r2, r1
 801143c:	619a      	str	r2, [r3, #24]
      break;
 801143e:	e06b      	b.n	8011518 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	68ba      	ldr	r2, [r7, #8]
 8011446:	0011      	movs	r1, r2
 8011448:	0018      	movs	r0, r3
 801144a:	f000 f90d 	bl	8011668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	699a      	ldr	r2, [r3, #24]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2180      	movs	r1, #128	@ 0x80
 801145a:	0109      	lsls	r1, r1, #4
 801145c:	430a      	orrs	r2, r1
 801145e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	699a      	ldr	r2, [r3, #24]
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4931      	ldr	r1, [pc, #196]	@ (8011530 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801146c:	400a      	ands	r2, r1
 801146e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	6999      	ldr	r1, [r3, #24]
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	021a      	lsls	r2, r3, #8
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	430a      	orrs	r2, r1
 8011482:	619a      	str	r2, [r3, #24]
      break;
 8011484:	e048      	b.n	8011518 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	68ba      	ldr	r2, [r7, #8]
 801148c:	0011      	movs	r1, r2
 801148e:	0018      	movs	r0, r3
 8011490:	f000 f92c 	bl	80116ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	69da      	ldr	r2, [r3, #28]
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2108      	movs	r1, #8
 80114a0:	430a      	orrs	r2, r1
 80114a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	69da      	ldr	r2, [r3, #28]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2104      	movs	r1, #4
 80114b0:	438a      	bics	r2, r1
 80114b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	69d9      	ldr	r1, [r3, #28]
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	68da      	ldr	r2, [r3, #12]
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	430a      	orrs	r2, r1
 80114c4:	61da      	str	r2, [r3, #28]
      break;
 80114c6:	e027      	b.n	8011518 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	68ba      	ldr	r2, [r7, #8]
 80114ce:	0011      	movs	r1, r2
 80114d0:	0018      	movs	r0, r3
 80114d2:	f000 f94b 	bl	801176c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	69da      	ldr	r2, [r3, #28]
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2180      	movs	r1, #128	@ 0x80
 80114e2:	0109      	lsls	r1, r1, #4
 80114e4:	430a      	orrs	r2, r1
 80114e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	69da      	ldr	r2, [r3, #28]
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	490f      	ldr	r1, [pc, #60]	@ (8011530 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80114f4:	400a      	ands	r2, r1
 80114f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	69d9      	ldr	r1, [r3, #28]
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	021a      	lsls	r2, r3, #8
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	430a      	orrs	r2, r1
 801150a:	61da      	str	r2, [r3, #28]
      break;
 801150c:	e004      	b.n	8011518 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801150e:	2317      	movs	r3, #23
 8011510:	18fb      	adds	r3, r7, r3
 8011512:	2201      	movs	r2, #1
 8011514:	701a      	strb	r2, [r3, #0]
      break;
 8011516:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2238      	movs	r2, #56	@ 0x38
 801151c:	2100      	movs	r1, #0
 801151e:	5499      	strb	r1, [r3, r2]

  return status;
 8011520:	2317      	movs	r3, #23
 8011522:	18fb      	adds	r3, r7, r3
 8011524:	781b      	ldrb	r3, [r3, #0]
}
 8011526:	0018      	movs	r0, r3
 8011528:	46bd      	mov	sp, r7
 801152a:	b006      	add	sp, #24
 801152c:	bd80      	pop	{r7, pc}
 801152e:	46c0      	nop			@ (mov r8, r8)
 8011530:	fffffbff 	.word	0xfffffbff

08011534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	2380      	movs	r3, #128	@ 0x80
 8011548:	05db      	lsls	r3, r3, #23
 801154a:	429a      	cmp	r2, r3
 801154c:	d00b      	beq.n	8011566 <TIM_Base_SetConfig+0x32>
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	4a23      	ldr	r2, [pc, #140]	@ (80115e0 <TIM_Base_SetConfig+0xac>)
 8011552:	4293      	cmp	r3, r2
 8011554:	d007      	beq.n	8011566 <TIM_Base_SetConfig+0x32>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4a22      	ldr	r2, [pc, #136]	@ (80115e4 <TIM_Base_SetConfig+0xb0>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d003      	beq.n	8011566 <TIM_Base_SetConfig+0x32>
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4a21      	ldr	r2, [pc, #132]	@ (80115e8 <TIM_Base_SetConfig+0xb4>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d108      	bne.n	8011578 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2270      	movs	r2, #112	@ 0x70
 801156a:	4393      	bics	r3, r2
 801156c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	4313      	orrs	r3, r2
 8011576:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011578:	687a      	ldr	r2, [r7, #4]
 801157a:	2380      	movs	r3, #128	@ 0x80
 801157c:	05db      	lsls	r3, r3, #23
 801157e:	429a      	cmp	r2, r3
 8011580:	d00b      	beq.n	801159a <TIM_Base_SetConfig+0x66>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	4a16      	ldr	r2, [pc, #88]	@ (80115e0 <TIM_Base_SetConfig+0xac>)
 8011586:	4293      	cmp	r3, r2
 8011588:	d007      	beq.n	801159a <TIM_Base_SetConfig+0x66>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4a15      	ldr	r2, [pc, #84]	@ (80115e4 <TIM_Base_SetConfig+0xb0>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d003      	beq.n	801159a <TIM_Base_SetConfig+0x66>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	4a14      	ldr	r2, [pc, #80]	@ (80115e8 <TIM_Base_SetConfig+0xb4>)
 8011596:	4293      	cmp	r3, r2
 8011598:	d108      	bne.n	80115ac <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	4a13      	ldr	r2, [pc, #76]	@ (80115ec <TIM_Base_SetConfig+0xb8>)
 801159e:	4013      	ands	r3, r2
 80115a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	68fa      	ldr	r2, [r7, #12]
 80115a8:	4313      	orrs	r3, r2
 80115aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2280      	movs	r2, #128	@ 0x80
 80115b0:	4393      	bics	r3, r2
 80115b2:	001a      	movs	r2, r3
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	4313      	orrs	r3, r2
 80115ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	68fa      	ldr	r2, [r7, #12]
 80115c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	689a      	ldr	r2, [r3, #8]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	681a      	ldr	r2, [r3, #0]
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2201      	movs	r2, #1
 80115d6:	615a      	str	r2, [r3, #20]
}
 80115d8:	46c0      	nop			@ (mov r8, r8)
 80115da:	46bd      	mov	sp, r7
 80115dc:	b004      	add	sp, #16
 80115de:	bd80      	pop	{r7, pc}
 80115e0:	40000400 	.word	0x40000400
 80115e4:	40010800 	.word	0x40010800
 80115e8:	40011400 	.word	0x40011400
 80115ec:	fffffcff 	.word	0xfffffcff

080115f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b086      	sub	sp, #24
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6a1b      	ldr	r3, [r3, #32]
 80115fe:	2201      	movs	r2, #1
 8011600:	4393      	bics	r3, r2
 8011602:	001a      	movs	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6a1b      	ldr	r3, [r3, #32]
 801160c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	699b      	ldr	r3, [r3, #24]
 8011618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2270      	movs	r2, #112	@ 0x70
 801161e:	4393      	bics	r3, r2
 8011620:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2203      	movs	r2, #3
 8011626:	4393      	bics	r3, r2
 8011628:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	4313      	orrs	r3, r2
 8011632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	2202      	movs	r2, #2
 8011638:	4393      	bics	r3, r2
 801163a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	689b      	ldr	r3, [r3, #8]
 8011640:	697a      	ldr	r2, [r7, #20]
 8011642:	4313      	orrs	r3, r2
 8011644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	693a      	ldr	r2, [r7, #16]
 801164a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	68fa      	ldr	r2, [r7, #12]
 8011650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	685a      	ldr	r2, [r3, #4]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	697a      	ldr	r2, [r7, #20]
 801165e:	621a      	str	r2, [r3, #32]
}
 8011660:	46c0      	nop			@ (mov r8, r8)
 8011662:	46bd      	mov	sp, r7
 8011664:	b006      	add	sp, #24
 8011666:	bd80      	pop	{r7, pc}

08011668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6a1b      	ldr	r3, [r3, #32]
 8011676:	2210      	movs	r2, #16
 8011678:	4393      	bics	r3, r2
 801167a:	001a      	movs	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6a1b      	ldr	r3, [r3, #32]
 8011684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	699b      	ldr	r3, [r3, #24]
 8011690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	4a13      	ldr	r2, [pc, #76]	@ (80116e4 <TIM_OC2_SetConfig+0x7c>)
 8011696:	4013      	ands	r3, r2
 8011698:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	4a12      	ldr	r2, [pc, #72]	@ (80116e8 <TIM_OC2_SetConfig+0x80>)
 801169e:	4013      	ands	r3, r2
 80116a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	021b      	lsls	r3, r3, #8
 80116a8:	68fa      	ldr	r2, [r7, #12]
 80116aa:	4313      	orrs	r3, r2
 80116ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	2220      	movs	r2, #32
 80116b2:	4393      	bics	r3, r2
 80116b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	011b      	lsls	r3, r3, #4
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	4313      	orrs	r3, r2
 80116c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	693a      	ldr	r2, [r7, #16]
 80116c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	68fa      	ldr	r2, [r7, #12]
 80116cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	685a      	ldr	r2, [r3, #4]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	697a      	ldr	r2, [r7, #20]
 80116da:	621a      	str	r2, [r3, #32]
}
 80116dc:	46c0      	nop			@ (mov r8, r8)
 80116de:	46bd      	mov	sp, r7
 80116e0:	b006      	add	sp, #24
 80116e2:	bd80      	pop	{r7, pc}
 80116e4:	ffff8fff 	.word	0xffff8fff
 80116e8:	fffffcff 	.word	0xfffffcff

080116ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b086      	sub	sp, #24
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6a1b      	ldr	r3, [r3, #32]
 80116fa:	4a1a      	ldr	r2, [pc, #104]	@ (8011764 <TIM_OC3_SetConfig+0x78>)
 80116fc:	401a      	ands	r2, r3
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6a1b      	ldr	r3, [r3, #32]
 8011706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	69db      	ldr	r3, [r3, #28]
 8011712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2270      	movs	r2, #112	@ 0x70
 8011718:	4393      	bics	r3, r2
 801171a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	2203      	movs	r2, #3
 8011720:	4393      	bics	r3, r2
 8011722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	68fa      	ldr	r2, [r7, #12]
 801172a:	4313      	orrs	r3, r2
 801172c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	4a0d      	ldr	r2, [pc, #52]	@ (8011768 <TIM_OC3_SetConfig+0x7c>)
 8011732:	4013      	ands	r3, r2
 8011734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	021b      	lsls	r3, r3, #8
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	4313      	orrs	r3, r2
 8011740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	693a      	ldr	r2, [r7, #16]
 8011746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	685a      	ldr	r2, [r3, #4]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	697a      	ldr	r2, [r7, #20]
 801175a:	621a      	str	r2, [r3, #32]
}
 801175c:	46c0      	nop			@ (mov r8, r8)
 801175e:	46bd      	mov	sp, r7
 8011760:	b006      	add	sp, #24
 8011762:	bd80      	pop	{r7, pc}
 8011764:	fffffeff 	.word	0xfffffeff
 8011768:	fffffdff 	.word	0xfffffdff

0801176c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b086      	sub	sp, #24
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6a1b      	ldr	r3, [r3, #32]
 801177a:	4a1b      	ldr	r2, [pc, #108]	@ (80117e8 <TIM_OC4_SetConfig+0x7c>)
 801177c:	401a      	ands	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6a1b      	ldr	r3, [r3, #32]
 8011786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	69db      	ldr	r3, [r3, #28]
 8011792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	4a15      	ldr	r2, [pc, #84]	@ (80117ec <TIM_OC4_SetConfig+0x80>)
 8011798:	4013      	ands	r3, r2
 801179a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	4a14      	ldr	r2, [pc, #80]	@ (80117f0 <TIM_OC4_SetConfig+0x84>)
 80117a0:	4013      	ands	r3, r2
 80117a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	021b      	lsls	r3, r3, #8
 80117aa:	68fa      	ldr	r2, [r7, #12]
 80117ac:	4313      	orrs	r3, r2
 80117ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	4a10      	ldr	r2, [pc, #64]	@ (80117f4 <TIM_OC4_SetConfig+0x88>)
 80117b4:	4013      	ands	r3, r2
 80117b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	689b      	ldr	r3, [r3, #8]
 80117bc:	031b      	lsls	r3, r3, #12
 80117be:	697a      	ldr	r2, [r7, #20]
 80117c0:	4313      	orrs	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	693a      	ldr	r2, [r7, #16]
 80117c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	68fa      	ldr	r2, [r7, #12]
 80117ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	697a      	ldr	r2, [r7, #20]
 80117dc:	621a      	str	r2, [r3, #32]
}
 80117de:	46c0      	nop			@ (mov r8, r8)
 80117e0:	46bd      	mov	sp, r7
 80117e2:	b006      	add	sp, #24
 80117e4:	bd80      	pop	{r7, pc}
 80117e6:	46c0      	nop			@ (mov r8, r8)
 80117e8:	ffffefff 	.word	0xffffefff
 80117ec:	ffff8fff 	.word	0xffff8fff
 80117f0:	fffffcff 	.word	0xfffffcff
 80117f4:	ffffdfff 	.word	0xffffdfff

080117f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b086      	sub	sp, #24
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	221f      	movs	r2, #31
 8011808:	4013      	ands	r3, r2
 801180a:	2201      	movs	r2, #1
 801180c:	409a      	lsls	r2, r3
 801180e:	0013      	movs	r3, r2
 8011810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6a1b      	ldr	r3, [r3, #32]
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	43d2      	mvns	r2, r2
 801181a:	401a      	ands	r2, r3
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	6a1a      	ldr	r2, [r3, #32]
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	211f      	movs	r1, #31
 8011828:	400b      	ands	r3, r1
 801182a:	6879      	ldr	r1, [r7, #4]
 801182c:	4099      	lsls	r1, r3
 801182e:	000b      	movs	r3, r1
 8011830:	431a      	orrs	r2, r3
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	621a      	str	r2, [r3, #32]
}
 8011836:	46c0      	nop			@ (mov r8, r8)
 8011838:	46bd      	mov	sp, r7
 801183a:	b006      	add	sp, #24
 801183c:	bd80      	pop	{r7, pc}
	...

08011840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b084      	sub	sp, #16
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2238      	movs	r2, #56	@ 0x38
 801184e:	5c9b      	ldrb	r3, [r3, r2]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d101      	bne.n	8011858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011854:	2302      	movs	r3, #2
 8011856:	e047      	b.n	80118e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2238      	movs	r2, #56	@ 0x38
 801185c:	2101      	movs	r1, #1
 801185e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2239      	movs	r2, #57	@ 0x39
 8011864:	2102      	movs	r1, #2
 8011866:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	689b      	ldr	r3, [r3, #8]
 8011876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	2270      	movs	r2, #112	@ 0x70
 801187c:	4393      	bics	r3, r2
 801187e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	68fa      	ldr	r2, [r7, #12]
 8011886:	4313      	orrs	r3, r2
 8011888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	68fa      	ldr	r2, [r7, #12]
 8011890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681a      	ldr	r2, [r3, #0]
 8011896:	2380      	movs	r3, #128	@ 0x80
 8011898:	05db      	lsls	r3, r3, #23
 801189a:	429a      	cmp	r2, r3
 801189c:	d00e      	beq.n	80118bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	4a13      	ldr	r2, [pc, #76]	@ (80118f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d009      	beq.n	80118bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4a11      	ldr	r2, [pc, #68]	@ (80118f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d004      	beq.n	80118bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	4a10      	ldr	r2, [pc, #64]	@ (80118f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d10c      	bne.n	80118d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	2280      	movs	r2, #128	@ 0x80
 80118c0:	4393      	bics	r3, r2
 80118c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	68ba      	ldr	r2, [r7, #8]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	68ba      	ldr	r2, [r7, #8]
 80118d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2239      	movs	r2, #57	@ 0x39
 80118da:	2101      	movs	r1, #1
 80118dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2238      	movs	r2, #56	@ 0x38
 80118e2:	2100      	movs	r1, #0
 80118e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80118e6:	2300      	movs	r3, #0
}
 80118e8:	0018      	movs	r0, r3
 80118ea:	46bd      	mov	sp, r7
 80118ec:	b004      	add	sp, #16
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	40000400 	.word	0x40000400
 80118f4:	40010800 	.word	0x40010800
 80118f8:	40011400 	.word	0x40011400

080118fc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2238      	movs	r2, #56	@ 0x38
 801190a:	5c9b      	ldrb	r3, [r3, r2]
 801190c:	2b01      	cmp	r3, #1
 801190e:	d101      	bne.n	8011914 <HAL_TIMEx_RemapConfig+0x18>
 8011910:	2302      	movs	r3, #2
 8011912:	e00c      	b.n	801192e <HAL_TIMEx_RemapConfig+0x32>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2238      	movs	r2, #56	@ 0x38
 8011918:	2101      	movs	r1, #1
 801191a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	683a      	ldr	r2, [r7, #0]
 8011922:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2238      	movs	r2, #56	@ 0x38
 8011928:	2100      	movs	r1, #0
 801192a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801192c:	2300      	movs	r3, #0
}
 801192e:	0018      	movs	r0, r3
 8011930:	46bd      	mov	sp, r7
 8011932:	b002      	add	sp, #8
 8011934:	bd80      	pop	{r7, pc}
	...

08011938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d101      	bne.n	801194a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011946:	2301      	movs	r3, #1
 8011948:	e053      	b.n	80119f2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801194e:	2b00      	cmp	r3, #0
 8011950:	d116      	bne.n	8011980 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2278      	movs	r2, #120	@ 0x78
 8011956:	2100      	movs	r1, #0
 8011958:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	0018      	movs	r0, r3
 801195e:	f000 fd07 	bl	8012370 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	22b0      	movs	r2, #176	@ 0xb0
 8011966:	589b      	ldr	r3, [r3, r2]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d103      	bne.n	8011974 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	21b0      	movs	r1, #176	@ 0xb0
 8011970:	4a22      	ldr	r2, [pc, #136]	@ (80119fc <HAL_UART_Init+0xc4>)
 8011972:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	22b0      	movs	r2, #176	@ 0xb0
 8011978:	589b      	ldr	r3, [r3, r2]
 801197a:	687a      	ldr	r2, [r7, #4]
 801197c:	0010      	movs	r0, r2
 801197e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2224      	movs	r2, #36	@ 0x24
 8011984:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2101      	movs	r1, #1
 8011992:	438a      	bics	r2, r1
 8011994:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	0018      	movs	r0, r3
 801199a:	f000 fd2d 	bl	80123f8 <UART_SetConfig>
 801199e:	0003      	movs	r3, r0
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d101      	bne.n	80119a8 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80119a4:	2301      	movs	r3, #1
 80119a6:	e024      	b.n	80119f2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d003      	beq.n	80119b8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	0018      	movs	r0, r3
 80119b4:	f000 ffbe 	bl	8012934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	685a      	ldr	r2, [r3, #4]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	490f      	ldr	r1, [pc, #60]	@ (8011a00 <HAL_UART_Init+0xc8>)
 80119c4:	400a      	ands	r2, r1
 80119c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	689a      	ldr	r2, [r3, #8]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	212a      	movs	r1, #42	@ 0x2a
 80119d4:	438a      	bics	r2, r1
 80119d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2101      	movs	r1, #1
 80119e4:	430a      	orrs	r2, r1
 80119e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	0018      	movs	r0, r3
 80119ec:	f001 f856 	bl	8012a9c <UART_CheckIdleState>
 80119f0:	0003      	movs	r3, r0
}
 80119f2:	0018      	movs	r0, r3
 80119f4:	46bd      	mov	sp, r7
 80119f6:	b002      	add	sp, #8
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	46c0      	nop			@ (mov r8, r8)
 80119fc:	080098f9 	.word	0x080098f9
 8011a00:	ffffb7ff 	.word	0xffffb7ff

08011a04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b08a      	sub	sp, #40	@ 0x28
 8011a08:	af02      	add	r7, sp, #8
 8011a0a:	60f8      	str	r0, [r7, #12]
 8011a0c:	60b9      	str	r1, [r7, #8]
 8011a0e:	603b      	str	r3, [r7, #0]
 8011a10:	1dbb      	adds	r3, r7, #6
 8011a12:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a18:	2b20      	cmp	r3, #32
 8011a1a:	d000      	beq.n	8011a1e <HAL_UART_Transmit+0x1a>
 8011a1c:	e08c      	b.n	8011b38 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d003      	beq.n	8011a2c <HAL_UART_Transmit+0x28>
 8011a24:	1dbb      	adds	r3, r7, #6
 8011a26:	881b      	ldrh	r3, [r3, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d101      	bne.n	8011a30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	e084      	b.n	8011b3a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	689a      	ldr	r2, [r3, #8]
 8011a34:	2380      	movs	r3, #128	@ 0x80
 8011a36:	015b      	lsls	r3, r3, #5
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d109      	bne.n	8011a50 <HAL_UART_Transmit+0x4c>
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	691b      	ldr	r3, [r3, #16]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d105      	bne.n	8011a50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	2201      	movs	r2, #1
 8011a48:	4013      	ands	r3, r2
 8011a4a:	d001      	beq.n	8011a50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	e074      	b.n	8011b3a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	2284      	movs	r2, #132	@ 0x84
 8011a54:	2100      	movs	r1, #0
 8011a56:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	2221      	movs	r2, #33	@ 0x21
 8011a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011a5e:	f7f8 fc57 	bl	800a310 <HAL_GetTick>
 8011a62:	0003      	movs	r3, r0
 8011a64:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	1dba      	adds	r2, r7, #6
 8011a6a:	2150      	movs	r1, #80	@ 0x50
 8011a6c:	8812      	ldrh	r2, [r2, #0]
 8011a6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	1dba      	adds	r2, r7, #6
 8011a74:	2152      	movs	r1, #82	@ 0x52
 8011a76:	8812      	ldrh	r2, [r2, #0]
 8011a78:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	689a      	ldr	r2, [r3, #8]
 8011a7e:	2380      	movs	r3, #128	@ 0x80
 8011a80:	015b      	lsls	r3, r3, #5
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d108      	bne.n	8011a98 <HAL_UART_Transmit+0x94>
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	691b      	ldr	r3, [r3, #16]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d104      	bne.n	8011a98 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	61bb      	str	r3, [r7, #24]
 8011a96:	e003      	b.n	8011aa0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011aa0:	e02f      	b.n	8011b02 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011aa2:	697a      	ldr	r2, [r7, #20]
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	9300      	str	r3, [sp, #0]
 8011aaa:	0013      	movs	r3, r2
 8011aac:	2200      	movs	r2, #0
 8011aae:	2180      	movs	r1, #128	@ 0x80
 8011ab0:	f001 f89c 	bl	8012bec <UART_WaitOnFlagUntilTimeout>
 8011ab4:	1e03      	subs	r3, r0, #0
 8011ab6:	d004      	beq.n	8011ac2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2220      	movs	r2, #32
 8011abc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8011abe:	2303      	movs	r3, #3
 8011ac0:	e03b      	b.n	8011b3a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10b      	bne.n	8011ae0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011ac8:	69bb      	ldr	r3, [r7, #24]
 8011aca:	881b      	ldrh	r3, [r3, #0]
 8011acc:	001a      	movs	r2, r3
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	05d2      	lsls	r2, r2, #23
 8011ad4:	0dd2      	lsrs	r2, r2, #23
 8011ad6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	3302      	adds	r3, #2
 8011adc:	61bb      	str	r3, [r7, #24]
 8011ade:	e007      	b.n	8011af0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	781a      	ldrb	r2, [r3, #0]
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011aea:	69fb      	ldr	r3, [r7, #28]
 8011aec:	3301      	adds	r3, #1
 8011aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	2252      	movs	r2, #82	@ 0x52
 8011af4:	5a9b      	ldrh	r3, [r3, r2]
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	3b01      	subs	r3, #1
 8011afa:	b299      	uxth	r1, r3
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2252      	movs	r2, #82	@ 0x52
 8011b00:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	2252      	movs	r2, #82	@ 0x52
 8011b06:	5a9b      	ldrh	r3, [r3, r2]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1c9      	bne.n	8011aa2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011b0e:	697a      	ldr	r2, [r7, #20]
 8011b10:	68f8      	ldr	r0, [r7, #12]
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	9300      	str	r3, [sp, #0]
 8011b16:	0013      	movs	r3, r2
 8011b18:	2200      	movs	r2, #0
 8011b1a:	2140      	movs	r1, #64	@ 0x40
 8011b1c:	f001 f866 	bl	8012bec <UART_WaitOnFlagUntilTimeout>
 8011b20:	1e03      	subs	r3, r0, #0
 8011b22:	d004      	beq.n	8011b2e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2220      	movs	r2, #32
 8011b28:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8011b2a:	2303      	movs	r3, #3
 8011b2c:	e005      	b.n	8011b3a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2220      	movs	r2, #32
 8011b32:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	e000      	b.n	8011b3a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8011b38:	2302      	movs	r3, #2
  }
}
 8011b3a:	0018      	movs	r0, r3
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	b008      	add	sp, #32
 8011b40:	bd80      	pop	{r7, pc}
	...

08011b44 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b088      	sub	sp, #32
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	1dbb      	adds	r3, r7, #6
 8011b50:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011b56:	2b20      	cmp	r3, #32
 8011b58:	d000      	beq.n	8011b5c <HAL_UART_Transmit_DMA+0x18>
 8011b5a:	e077      	b.n	8011c4c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d003      	beq.n	8011b6a <HAL_UART_Transmit_DMA+0x26>
 8011b62:	1dbb      	adds	r3, r7, #6
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d101      	bne.n	8011b6e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	e06f      	b.n	8011c4e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	689a      	ldr	r2, [r3, #8]
 8011b72:	2380      	movs	r3, #128	@ 0x80
 8011b74:	015b      	lsls	r3, r3, #5
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d109      	bne.n	8011b8e <HAL_UART_Transmit_DMA+0x4a>
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	691b      	ldr	r3, [r3, #16]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d105      	bne.n	8011b8e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	2201      	movs	r2, #1
 8011b86:	4013      	ands	r3, r2
 8011b88:	d001      	beq.n	8011b8e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	e05f      	b.n	8011c4e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	1dba      	adds	r2, r7, #6
 8011b98:	2150      	movs	r1, #80	@ 0x50
 8011b9a:	8812      	ldrh	r2, [r2, #0]
 8011b9c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	1dba      	adds	r2, r7, #6
 8011ba2:	2152      	movs	r1, #82	@ 0x52
 8011ba4:	8812      	ldrh	r2, [r2, #0]
 8011ba6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2284      	movs	r2, #132	@ 0x84
 8011bac:	2100      	movs	r1, #0
 8011bae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2221      	movs	r2, #33	@ 0x21
 8011bb4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d027      	beq.n	8011c0e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011bc2:	4a25      	ldr	r2, [pc, #148]	@ (8011c58 <HAL_UART_Transmit_DMA+0x114>)
 8011bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011bca:	4a24      	ldr	r2, [pc, #144]	@ (8011c5c <HAL_UART_Transmit_DMA+0x118>)
 8011bcc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011bd2:	4a23      	ldr	r2, [pc, #140]	@ (8011c60 <HAL_UART_Transmit_DMA+0x11c>)
 8011bd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011bda:	2200      	movs	r2, #0
 8011bdc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011be6:	0019      	movs	r1, r3
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	3328      	adds	r3, #40	@ 0x28
 8011bee:	001a      	movs	r2, r3
 8011bf0:	1dbb      	adds	r3, r7, #6
 8011bf2:	881b      	ldrh	r3, [r3, #0]
 8011bf4:	f7f9 f90a 	bl	800ae0c <HAL_DMA_Start_IT>
 8011bf8:	1e03      	subs	r3, r0, #0
 8011bfa:	d008      	beq.n	8011c0e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2284      	movs	r2, #132	@ 0x84
 8011c00:	2110      	movs	r1, #16
 8011c02:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2220      	movs	r2, #32
 8011c08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e01f      	b.n	8011c4e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2240      	movs	r2, #64	@ 0x40
 8011c14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c16:	f3ef 8310 	mrs	r3, PRIMASK
 8011c1a:	613b      	str	r3, [r7, #16]
  return(result);
 8011c1c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011c1e:	61fb      	str	r3, [r7, #28]
 8011c20:	2301      	movs	r3, #1
 8011c22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	f383 8810 	msr	PRIMASK, r3
}
 8011c2a:	46c0      	nop			@ (mov r8, r8)
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	689a      	ldr	r2, [r3, #8]
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	2180      	movs	r1, #128	@ 0x80
 8011c38:	430a      	orrs	r2, r1
 8011c3a:	609a      	str	r2, [r3, #8]
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c40:	69bb      	ldr	r3, [r7, #24]
 8011c42:	f383 8810 	msr	PRIMASK, r3
}
 8011c46:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	e000      	b.n	8011c4e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8011c4c:	2302      	movs	r3, #2
  }
}
 8011c4e:	0018      	movs	r0, r3
 8011c50:	46bd      	mov	sp, r7
 8011c52:	b008      	add	sp, #32
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	46c0      	nop			@ (mov r8, r8)
 8011c58:	08012f11 	.word	0x08012f11
 8011c5c:	08012fad 	.word	0x08012fad
 8011c60:	0801314d 	.word	0x0801314d

08011c64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b088      	sub	sp, #32
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	1dbb      	adds	r3, r7, #6
 8011c70:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2280      	movs	r2, #128	@ 0x80
 8011c76:	589b      	ldr	r3, [r3, r2]
 8011c78:	2b20      	cmp	r3, #32
 8011c7a:	d14a      	bne.n	8011d12 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d003      	beq.n	8011c8a <HAL_UART_Receive_DMA+0x26>
 8011c82:	1dbb      	adds	r3, r7, #6
 8011c84:	881b      	ldrh	r3, [r3, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d101      	bne.n	8011c8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e042      	b.n	8011d14 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	689a      	ldr	r2, [r3, #8]
 8011c92:	2380      	movs	r3, #128	@ 0x80
 8011c94:	015b      	lsls	r3, r3, #5
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d109      	bne.n	8011cae <HAL_UART_Receive_DMA+0x4a>
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	691b      	ldr	r3, [r3, #16]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d105      	bne.n	8011cae <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	4013      	ands	r3, r2
 8011ca8:	d001      	beq.n	8011cae <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011caa:	2301      	movs	r3, #1
 8011cac:	e032      	b.n	8011d14 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4a18      	ldr	r2, [pc, #96]	@ (8011d1c <HAL_UART_Receive_DMA+0xb8>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d020      	beq.n	8011d00 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	685a      	ldr	r2, [r3, #4]
 8011cc4:	2380      	movs	r3, #128	@ 0x80
 8011cc6:	041b      	lsls	r3, r3, #16
 8011cc8:	4013      	ands	r3, r2
 8011cca:	d019      	beq.n	8011d00 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8011cd0:	613b      	str	r3, [r7, #16]
  return(result);
 8011cd2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011cd4:	61fb      	str	r3, [r7, #28]
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	f383 8810 	msr	PRIMASK, r3
}
 8011ce0:	46c0      	nop			@ (mov r8, r8)
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2180      	movs	r1, #128	@ 0x80
 8011cee:	04c9      	lsls	r1, r1, #19
 8011cf0:	430a      	orrs	r2, r1
 8011cf2:	601a      	str	r2, [r3, #0]
 8011cf4:	69fb      	ldr	r3, [r7, #28]
 8011cf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cf8:	69bb      	ldr	r3, [r7, #24]
 8011cfa:	f383 8810 	msr	PRIMASK, r3
}
 8011cfe:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011d00:	1dbb      	adds	r3, r7, #6
 8011d02:	881a      	ldrh	r2, [r3, #0]
 8011d04:	68b9      	ldr	r1, [r7, #8]
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	0018      	movs	r0, r3
 8011d0a:	f000 ffd9 	bl	8012cc0 <UART_Start_Receive_DMA>
 8011d0e:	0003      	movs	r3, r0
 8011d10:	e000      	b.n	8011d14 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8011d12:	2302      	movs	r3, #2
  }
}
 8011d14:	0018      	movs	r0, r3
 8011d16:	46bd      	mov	sp, r7
 8011d18:	b008      	add	sp, #32
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	40004800 	.word	0x40004800

08011d20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011d20:	b590      	push	{r4, r7, lr}
 8011d22:	b0ab      	sub	sp, #172	@ 0xac
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	69db      	ldr	r3, [r3, #28]
 8011d2e:	22a4      	movs	r2, #164	@ 0xa4
 8011d30:	18b9      	adds	r1, r7, r2
 8011d32:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	20a0      	movs	r0, #160	@ 0xa0
 8011d3c:	1839      	adds	r1, r7, r0
 8011d3e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	689b      	ldr	r3, [r3, #8]
 8011d46:	219c      	movs	r1, #156	@ 0x9c
 8011d48:	1879      	adds	r1, r7, r1
 8011d4a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011d4c:	0011      	movs	r1, r2
 8011d4e:	18bb      	adds	r3, r7, r2
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	4a9c      	ldr	r2, [pc, #624]	@ (8011fc4 <HAL_UART_IRQHandler+0x2a4>)
 8011d54:	4013      	ands	r3, r2
 8011d56:	2298      	movs	r2, #152	@ 0x98
 8011d58:	18bc      	adds	r4, r7, r2
 8011d5a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8011d5c:	18bb      	adds	r3, r7, r2
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d114      	bne.n	8011d8e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011d64:	187b      	adds	r3, r7, r1
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	2220      	movs	r2, #32
 8011d6a:	4013      	ands	r3, r2
 8011d6c:	d00f      	beq.n	8011d8e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011d6e:	183b      	adds	r3, r7, r0
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2220      	movs	r2, #32
 8011d74:	4013      	ands	r3, r2
 8011d76:	d00a      	beq.n	8011d8e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d100      	bne.n	8011d82 <HAL_UART_IRQHandler+0x62>
 8011d80:	e2aa      	b.n	80122d8 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	0010      	movs	r0, r2
 8011d8a:	4798      	blx	r3
      }
      return;
 8011d8c:	e2a4      	b.n	80122d8 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011d8e:	2398      	movs	r3, #152	@ 0x98
 8011d90:	18fb      	adds	r3, r7, r3
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d100      	bne.n	8011d9a <HAL_UART_IRQHandler+0x7a>
 8011d98:	e11a      	b.n	8011fd0 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011d9a:	239c      	movs	r3, #156	@ 0x9c
 8011d9c:	18fb      	adds	r3, r7, r3
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2201      	movs	r2, #1
 8011da2:	4013      	ands	r3, r2
 8011da4:	d106      	bne.n	8011db4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011da6:	23a0      	movs	r3, #160	@ 0xa0
 8011da8:	18fb      	adds	r3, r7, r3
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	4a86      	ldr	r2, [pc, #536]	@ (8011fc8 <HAL_UART_IRQHandler+0x2a8>)
 8011dae:	4013      	ands	r3, r2
 8011db0:	d100      	bne.n	8011db4 <HAL_UART_IRQHandler+0x94>
 8011db2:	e10d      	b.n	8011fd0 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011db4:	23a4      	movs	r3, #164	@ 0xa4
 8011db6:	18fb      	adds	r3, r7, r3
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	2201      	movs	r2, #1
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	d012      	beq.n	8011de6 <HAL_UART_IRQHandler+0xc6>
 8011dc0:	23a0      	movs	r3, #160	@ 0xa0
 8011dc2:	18fb      	adds	r3, r7, r3
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	2380      	movs	r3, #128	@ 0x80
 8011dc8:	005b      	lsls	r3, r3, #1
 8011dca:	4013      	ands	r3, r2
 8011dcc:	d00b      	beq.n	8011de6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2284      	movs	r2, #132	@ 0x84
 8011dda:	589b      	ldr	r3, [r3, r2]
 8011ddc:	2201      	movs	r2, #1
 8011dde:	431a      	orrs	r2, r3
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2184      	movs	r1, #132	@ 0x84
 8011de4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011de6:	23a4      	movs	r3, #164	@ 0xa4
 8011de8:	18fb      	adds	r3, r7, r3
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2202      	movs	r2, #2
 8011dee:	4013      	ands	r3, r2
 8011df0:	d011      	beq.n	8011e16 <HAL_UART_IRQHandler+0xf6>
 8011df2:	239c      	movs	r3, #156	@ 0x9c
 8011df4:	18fb      	adds	r3, r7, r3
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	2201      	movs	r2, #1
 8011dfa:	4013      	ands	r3, r2
 8011dfc:	d00b      	beq.n	8011e16 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2202      	movs	r2, #2
 8011e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2284      	movs	r2, #132	@ 0x84
 8011e0a:	589b      	ldr	r3, [r3, r2]
 8011e0c:	2204      	movs	r2, #4
 8011e0e:	431a      	orrs	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2184      	movs	r1, #132	@ 0x84
 8011e14:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e16:	23a4      	movs	r3, #164	@ 0xa4
 8011e18:	18fb      	adds	r3, r7, r3
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2204      	movs	r2, #4
 8011e1e:	4013      	ands	r3, r2
 8011e20:	d011      	beq.n	8011e46 <HAL_UART_IRQHandler+0x126>
 8011e22:	239c      	movs	r3, #156	@ 0x9c
 8011e24:	18fb      	adds	r3, r7, r3
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2201      	movs	r2, #1
 8011e2a:	4013      	ands	r3, r2
 8011e2c:	d00b      	beq.n	8011e46 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2204      	movs	r2, #4
 8011e34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2284      	movs	r2, #132	@ 0x84
 8011e3a:	589b      	ldr	r3, [r3, r2]
 8011e3c:	2202      	movs	r2, #2
 8011e3e:	431a      	orrs	r2, r3
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2184      	movs	r1, #132	@ 0x84
 8011e44:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011e46:	23a4      	movs	r3, #164	@ 0xa4
 8011e48:	18fb      	adds	r3, r7, r3
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	2208      	movs	r2, #8
 8011e4e:	4013      	ands	r3, r2
 8011e50:	d017      	beq.n	8011e82 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011e52:	23a0      	movs	r3, #160	@ 0xa0
 8011e54:	18fb      	adds	r3, r7, r3
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	2220      	movs	r2, #32
 8011e5a:	4013      	ands	r3, r2
 8011e5c:	d105      	bne.n	8011e6a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8011e5e:	239c      	movs	r3, #156	@ 0x9c
 8011e60:	18fb      	adds	r3, r7, r3
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	2201      	movs	r2, #1
 8011e66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011e68:	d00b      	beq.n	8011e82 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	2208      	movs	r2, #8
 8011e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2284      	movs	r2, #132	@ 0x84
 8011e76:	589b      	ldr	r3, [r3, r2]
 8011e78:	2208      	movs	r2, #8
 8011e7a:	431a      	orrs	r2, r3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2184      	movs	r1, #132	@ 0x84
 8011e80:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011e82:	23a4      	movs	r3, #164	@ 0xa4
 8011e84:	18fb      	adds	r3, r7, r3
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	2380      	movs	r3, #128	@ 0x80
 8011e8a:	011b      	lsls	r3, r3, #4
 8011e8c:	4013      	ands	r3, r2
 8011e8e:	d013      	beq.n	8011eb8 <HAL_UART_IRQHandler+0x198>
 8011e90:	23a0      	movs	r3, #160	@ 0xa0
 8011e92:	18fb      	adds	r3, r7, r3
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	2380      	movs	r3, #128	@ 0x80
 8011e98:	04db      	lsls	r3, r3, #19
 8011e9a:	4013      	ands	r3, r2
 8011e9c:	d00c      	beq.n	8011eb8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	2280      	movs	r2, #128	@ 0x80
 8011ea4:	0112      	lsls	r2, r2, #4
 8011ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2284      	movs	r2, #132	@ 0x84
 8011eac:	589b      	ldr	r3, [r3, r2]
 8011eae:	2220      	movs	r2, #32
 8011eb0:	431a      	orrs	r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2184      	movs	r1, #132	@ 0x84
 8011eb6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2284      	movs	r2, #132	@ 0x84
 8011ebc:	589b      	ldr	r3, [r3, r2]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d100      	bne.n	8011ec4 <HAL_UART_IRQHandler+0x1a4>
 8011ec2:	e20b      	b.n	80122dc <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011ec4:	23a4      	movs	r3, #164	@ 0xa4
 8011ec6:	18fb      	adds	r3, r7, r3
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2220      	movs	r2, #32
 8011ecc:	4013      	ands	r3, r2
 8011ece:	d00e      	beq.n	8011eee <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011ed0:	23a0      	movs	r3, #160	@ 0xa0
 8011ed2:	18fb      	adds	r3, r7, r3
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2220      	movs	r2, #32
 8011ed8:	4013      	ands	r3, r2
 8011eda:	d008      	beq.n	8011eee <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d004      	beq.n	8011eee <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	0010      	movs	r0, r2
 8011eec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2284      	movs	r2, #132	@ 0x84
 8011ef2:	589b      	ldr	r3, [r3, r2]
 8011ef4:	2194      	movs	r1, #148	@ 0x94
 8011ef6:	187a      	adds	r2, r7, r1
 8011ef8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	689b      	ldr	r3, [r3, #8]
 8011f00:	2240      	movs	r2, #64	@ 0x40
 8011f02:	4013      	ands	r3, r2
 8011f04:	2b40      	cmp	r3, #64	@ 0x40
 8011f06:	d004      	beq.n	8011f12 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011f08:	187b      	adds	r3, r7, r1
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2228      	movs	r2, #40	@ 0x28
 8011f0e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011f10:	d04b      	beq.n	8011faa <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	0018      	movs	r0, r3
 8011f16:	f000 ff97 	bl	8012e48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	689b      	ldr	r3, [r3, #8]
 8011f20:	2240      	movs	r2, #64	@ 0x40
 8011f22:	4013      	ands	r3, r2
 8011f24:	2b40      	cmp	r3, #64	@ 0x40
 8011f26:	d139      	bne.n	8011f9c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f28:	f3ef 8310 	mrs	r3, PRIMASK
 8011f2c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8011f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f30:	2090      	movs	r0, #144	@ 0x90
 8011f32:	183a      	adds	r2, r7, r0
 8011f34:	6013      	str	r3, [r2, #0]
 8011f36:	2301      	movs	r3, #1
 8011f38:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f3c:	f383 8810 	msr	PRIMASK, r3
}
 8011f40:	46c0      	nop			@ (mov r8, r8)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	689a      	ldr	r2, [r3, #8]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	2140      	movs	r1, #64	@ 0x40
 8011f4e:	438a      	bics	r2, r1
 8011f50:	609a      	str	r2, [r3, #8]
 8011f52:	183b      	adds	r3, r7, r0
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f5a:	f383 8810 	msr	PRIMASK, r3
}
 8011f5e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d012      	beq.n	8011f8e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f6c:	4a17      	ldr	r2, [pc, #92]	@ (8011fcc <HAL_UART_IRQHandler+0x2ac>)
 8011f6e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f74:	0018      	movs	r0, r3
 8011f76:	f7f8 ffef 	bl	800af58 <HAL_DMA_Abort_IT>
 8011f7a:	1e03      	subs	r3, r0, #0
 8011f7c:	d020      	beq.n	8011fc0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f88:	0018      	movs	r0, r3
 8011f8a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f8c:	e018      	b.n	8011fc0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2298      	movs	r2, #152	@ 0x98
 8011f92:	589b      	ldr	r3, [r3, r2]
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	0010      	movs	r0, r2
 8011f98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f9a:	e011      	b.n	8011fc0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2298      	movs	r2, #152	@ 0x98
 8011fa0:	589b      	ldr	r3, [r3, r2]
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	0010      	movs	r0, r2
 8011fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011fa8:	e00a      	b.n	8011fc0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2298      	movs	r2, #152	@ 0x98
 8011fae:	589b      	ldr	r3, [r3, r2]
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	0010      	movs	r0, r2
 8011fb4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2284      	movs	r2, #132	@ 0x84
 8011fba:	2100      	movs	r1, #0
 8011fbc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8011fbe:	e18d      	b.n	80122dc <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011fc0:	46c0      	nop			@ (mov r8, r8)
    return;
 8011fc2:	e18b      	b.n	80122dc <HAL_UART_IRQHandler+0x5bc>
 8011fc4:	0000080f 	.word	0x0000080f
 8011fc8:	04000120 	.word	0x04000120
 8011fcc:	080131d5 	.word	0x080131d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d000      	beq.n	8011fda <HAL_UART_IRQHandler+0x2ba>
 8011fd8:	e13d      	b.n	8012256 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011fda:	23a4      	movs	r3, #164	@ 0xa4
 8011fdc:	18fb      	adds	r3, r7, r3
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	2210      	movs	r2, #16
 8011fe2:	4013      	ands	r3, r2
 8011fe4:	d100      	bne.n	8011fe8 <HAL_UART_IRQHandler+0x2c8>
 8011fe6:	e136      	b.n	8012256 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011fe8:	23a0      	movs	r3, #160	@ 0xa0
 8011fea:	18fb      	adds	r3, r7, r3
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2210      	movs	r2, #16
 8011ff0:	4013      	ands	r3, r2
 8011ff2:	d100      	bne.n	8011ff6 <HAL_UART_IRQHandler+0x2d6>
 8011ff4:	e12f      	b.n	8012256 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	2210      	movs	r2, #16
 8011ffc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	2240      	movs	r2, #64	@ 0x40
 8012006:	4013      	ands	r3, r2
 8012008:	2b40      	cmp	r3, #64	@ 0x40
 801200a:	d000      	beq.n	801200e <HAL_UART_IRQHandler+0x2ee>
 801200c:	e0a2      	b.n	8012154 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	685a      	ldr	r2, [r3, #4]
 8012016:	217e      	movs	r1, #126	@ 0x7e
 8012018:	187b      	adds	r3, r7, r1
 801201a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801201c:	187b      	adds	r3, r7, r1
 801201e:	881b      	ldrh	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d100      	bne.n	8012026 <HAL_UART_IRQHandler+0x306>
 8012024:	e15c      	b.n	80122e0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2258      	movs	r2, #88	@ 0x58
 801202a:	5a9b      	ldrh	r3, [r3, r2]
 801202c:	187a      	adds	r2, r7, r1
 801202e:	8812      	ldrh	r2, [r2, #0]
 8012030:	429a      	cmp	r2, r3
 8012032:	d300      	bcc.n	8012036 <HAL_UART_IRQHandler+0x316>
 8012034:	e154      	b.n	80122e0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	187a      	adds	r2, r7, r1
 801203a:	215a      	movs	r1, #90	@ 0x5a
 801203c:	8812      	ldrh	r2, [r2, #0]
 801203e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	2220      	movs	r2, #32
 801204a:	4013      	ands	r3, r2
 801204c:	d16f      	bne.n	801212e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801204e:	f3ef 8310 	mrs	r3, PRIMASK
 8012052:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8012054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012056:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012058:	2301      	movs	r3, #1
 801205a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801205c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801205e:	f383 8810 	msr	PRIMASK, r3
}
 8012062:	46c0      	nop			@ (mov r8, r8)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	49a0      	ldr	r1, [pc, #640]	@ (80122f0 <HAL_UART_IRQHandler+0x5d0>)
 8012070:	400a      	ands	r2, r1
 8012072:	601a      	str	r2, [r3, #0]
 8012074:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012076:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801207a:	f383 8810 	msr	PRIMASK, r3
}
 801207e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012080:	f3ef 8310 	mrs	r3, PRIMASK
 8012084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8012086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012088:	677b      	str	r3, [r7, #116]	@ 0x74
 801208a:	2301      	movs	r3, #1
 801208c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801208e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012090:	f383 8810 	msr	PRIMASK, r3
}
 8012094:	46c0      	nop			@ (mov r8, r8)
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	689a      	ldr	r2, [r3, #8]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2101      	movs	r1, #1
 80120a2:	438a      	bics	r2, r1
 80120a4:	609a      	str	r2, [r3, #8]
 80120a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80120a8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120ac:	f383 8810 	msr	PRIMASK, r3
}
 80120b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120b2:	f3ef 8310 	mrs	r3, PRIMASK
 80120b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80120b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80120ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80120bc:	2301      	movs	r3, #1
 80120be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120c2:	f383 8810 	msr	PRIMASK, r3
}
 80120c6:	46c0      	nop			@ (mov r8, r8)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	689a      	ldr	r2, [r3, #8]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	2140      	movs	r1, #64	@ 0x40
 80120d4:	438a      	bics	r2, r1
 80120d6:	609a      	str	r2, [r3, #8]
 80120d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80120da:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120de:	f383 8810 	msr	PRIMASK, r3
}
 80120e2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2280      	movs	r2, #128	@ 0x80
 80120e8:	2120      	movs	r1, #32
 80120ea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2200      	movs	r2, #0
 80120f0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120f2:	f3ef 8310 	mrs	r3, PRIMASK
 80120f6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80120f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80120fc:	2301      	movs	r3, #1
 80120fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012100:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012102:	f383 8810 	msr	PRIMASK, r3
}
 8012106:	46c0      	nop			@ (mov r8, r8)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	681a      	ldr	r2, [r3, #0]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2110      	movs	r1, #16
 8012114:	438a      	bics	r2, r1
 8012116:	601a      	str	r2, [r3, #0]
 8012118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801211a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801211c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801211e:	f383 8810 	msr	PRIMASK, r3
}
 8012122:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012128:	0018      	movs	r0, r3
 801212a:	f7f8 fed5 	bl	800aed8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2202      	movs	r2, #2
 8012132:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	22ac      	movs	r2, #172	@ 0xac
 8012138:	589b      	ldr	r3, [r3, r2]
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	2158      	movs	r1, #88	@ 0x58
 801213e:	5a51      	ldrh	r1, [r2, r1]
 8012140:	687a      	ldr	r2, [r7, #4]
 8012142:	205a      	movs	r0, #90	@ 0x5a
 8012144:	5a12      	ldrh	r2, [r2, r0]
 8012146:	b292      	uxth	r2, r2
 8012148:	1a8a      	subs	r2, r1, r2
 801214a:	b291      	uxth	r1, r2
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	0010      	movs	r0, r2
 8012150:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012152:	e0c5      	b.n	80122e0 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2258      	movs	r2, #88	@ 0x58
 8012158:	5a99      	ldrh	r1, [r3, r2]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	225a      	movs	r2, #90	@ 0x5a
 801215e:	5a9b      	ldrh	r3, [r3, r2]
 8012160:	b29a      	uxth	r2, r3
 8012162:	208e      	movs	r0, #142	@ 0x8e
 8012164:	183b      	adds	r3, r7, r0
 8012166:	1a8a      	subs	r2, r1, r2
 8012168:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	225a      	movs	r2, #90	@ 0x5a
 801216e:	5a9b      	ldrh	r3, [r3, r2]
 8012170:	b29b      	uxth	r3, r3
 8012172:	2b00      	cmp	r3, #0
 8012174:	d100      	bne.n	8012178 <HAL_UART_IRQHandler+0x458>
 8012176:	e0b5      	b.n	80122e4 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8012178:	183b      	adds	r3, r7, r0
 801217a:	881b      	ldrh	r3, [r3, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d100      	bne.n	8012182 <HAL_UART_IRQHandler+0x462>
 8012180:	e0b0      	b.n	80122e4 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012182:	f3ef 8310 	mrs	r3, PRIMASK
 8012186:	60fb      	str	r3, [r7, #12]
  return(result);
 8012188:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801218a:	2488      	movs	r4, #136	@ 0x88
 801218c:	193a      	adds	r2, r7, r4
 801218e:	6013      	str	r3, [r2, #0]
 8012190:	2301      	movs	r3, #1
 8012192:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	f383 8810 	msr	PRIMASK, r3
}
 801219a:	46c0      	nop			@ (mov r8, r8)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	4953      	ldr	r1, [pc, #332]	@ (80122f4 <HAL_UART_IRQHandler+0x5d4>)
 80121a8:	400a      	ands	r2, r1
 80121aa:	601a      	str	r2, [r3, #0]
 80121ac:	193b      	adds	r3, r7, r4
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	f383 8810 	msr	PRIMASK, r3
}
 80121b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121ba:	f3ef 8310 	mrs	r3, PRIMASK
 80121be:	61bb      	str	r3, [r7, #24]
  return(result);
 80121c0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121c2:	2484      	movs	r4, #132	@ 0x84
 80121c4:	193a      	adds	r2, r7, r4
 80121c6:	6013      	str	r3, [r2, #0]
 80121c8:	2301      	movs	r3, #1
 80121ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	f383 8810 	msr	PRIMASK, r3
}
 80121d2:	46c0      	nop			@ (mov r8, r8)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	689a      	ldr	r2, [r3, #8]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	2101      	movs	r1, #1
 80121e0:	438a      	bics	r2, r1
 80121e2:	609a      	str	r2, [r3, #8]
 80121e4:	193b      	adds	r3, r7, r4
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121ea:	6a3b      	ldr	r3, [r7, #32]
 80121ec:	f383 8810 	msr	PRIMASK, r3
}
 80121f0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2280      	movs	r2, #128	@ 0x80
 80121f6:	2120      	movs	r1, #32
 80121f8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2200      	movs	r2, #0
 80121fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2200      	movs	r2, #0
 8012204:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012206:	f3ef 8310 	mrs	r3, PRIMASK
 801220a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801220e:	2480      	movs	r4, #128	@ 0x80
 8012210:	193a      	adds	r2, r7, r4
 8012212:	6013      	str	r3, [r2, #0]
 8012214:	2301      	movs	r3, #1
 8012216:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801221a:	f383 8810 	msr	PRIMASK, r3
}
 801221e:	46c0      	nop			@ (mov r8, r8)
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2110      	movs	r1, #16
 801222c:	438a      	bics	r2, r1
 801222e:	601a      	str	r2, [r3, #0]
 8012230:	193b      	adds	r3, r7, r4
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012238:	f383 8810 	msr	PRIMASK, r3
}
 801223c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2202      	movs	r2, #2
 8012242:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	22ac      	movs	r2, #172	@ 0xac
 8012248:	589b      	ldr	r3, [r3, r2]
 801224a:	183a      	adds	r2, r7, r0
 801224c:	8811      	ldrh	r1, [r2, #0]
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	0010      	movs	r0, r2
 8012252:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012254:	e046      	b.n	80122e4 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012256:	23a4      	movs	r3, #164	@ 0xa4
 8012258:	18fb      	adds	r3, r7, r3
 801225a:	681a      	ldr	r2, [r3, #0]
 801225c:	2380      	movs	r3, #128	@ 0x80
 801225e:	035b      	lsls	r3, r3, #13
 8012260:	4013      	ands	r3, r2
 8012262:	d012      	beq.n	801228a <HAL_UART_IRQHandler+0x56a>
 8012264:	239c      	movs	r3, #156	@ 0x9c
 8012266:	18fb      	adds	r3, r7, r3
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	2380      	movs	r3, #128	@ 0x80
 801226c:	03db      	lsls	r3, r3, #15
 801226e:	4013      	ands	r3, r2
 8012270:	d00b      	beq.n	801228a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2280      	movs	r2, #128	@ 0x80
 8012278:	0352      	lsls	r2, r2, #13
 801227a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	22a8      	movs	r2, #168	@ 0xa8
 8012280:	589b      	ldr	r3, [r3, r2]
 8012282:	687a      	ldr	r2, [r7, #4]
 8012284:	0010      	movs	r0, r2
 8012286:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012288:	e02f      	b.n	80122ea <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801228a:	23a4      	movs	r3, #164	@ 0xa4
 801228c:	18fb      	adds	r3, r7, r3
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2280      	movs	r2, #128	@ 0x80
 8012292:	4013      	ands	r3, r2
 8012294:	d00f      	beq.n	80122b6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8012296:	23a0      	movs	r3, #160	@ 0xa0
 8012298:	18fb      	adds	r3, r7, r3
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2280      	movs	r2, #128	@ 0x80
 801229e:	4013      	ands	r3, r2
 80122a0:	d009      	beq.n	80122b6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d01e      	beq.n	80122e8 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	0010      	movs	r0, r2
 80122b2:	4798      	blx	r3
    }
    return;
 80122b4:	e018      	b.n	80122e8 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80122b6:	23a4      	movs	r3, #164	@ 0xa4
 80122b8:	18fb      	adds	r3, r7, r3
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2240      	movs	r2, #64	@ 0x40
 80122be:	4013      	ands	r3, r2
 80122c0:	d013      	beq.n	80122ea <HAL_UART_IRQHandler+0x5ca>
 80122c2:	23a0      	movs	r3, #160	@ 0xa0
 80122c4:	18fb      	adds	r3, r7, r3
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	2240      	movs	r2, #64	@ 0x40
 80122ca:	4013      	ands	r3, r2
 80122cc:	d00d      	beq.n	80122ea <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	0018      	movs	r0, r3
 80122d2:	f000 ff98 	bl	8013206 <UART_EndTransmit_IT>
    return;
 80122d6:	e008      	b.n	80122ea <HAL_UART_IRQHandler+0x5ca>
      return;
 80122d8:	46c0      	nop			@ (mov r8, r8)
 80122da:	e006      	b.n	80122ea <HAL_UART_IRQHandler+0x5ca>
    return;
 80122dc:	46c0      	nop			@ (mov r8, r8)
 80122de:	e004      	b.n	80122ea <HAL_UART_IRQHandler+0x5ca>
      return;
 80122e0:	46c0      	nop			@ (mov r8, r8)
 80122e2:	e002      	b.n	80122ea <HAL_UART_IRQHandler+0x5ca>
      return;
 80122e4:	46c0      	nop			@ (mov r8, r8)
 80122e6:	e000      	b.n	80122ea <HAL_UART_IRQHandler+0x5ca>
    return;
 80122e8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80122ea:	46bd      	mov	sp, r7
 80122ec:	b02b      	add	sp, #172	@ 0xac
 80122ee:	bd90      	pop	{r4, r7, pc}
 80122f0:	fffffeff 	.word	0xfffffeff
 80122f4:	fffffedf 	.word	0xfffffedf

080122f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012300:	46c0      	nop			@ (mov r8, r8)
 8012302:	46bd      	mov	sp, r7
 8012304:	b002      	add	sp, #8
 8012306:	bd80      	pop	{r7, pc}

08012308 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8012310:	46c0      	nop			@ (mov r8, r8)
 8012312:	46bd      	mov	sp, r7
 8012314:	b002      	add	sp, #8
 8012316:	bd80      	pop	{r7, pc}

08012318 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012320:	46c0      	nop			@ (mov r8, r8)
 8012322:	46bd      	mov	sp, r7
 8012324:	b002      	add	sp, #8
 8012326:	bd80      	pop	{r7, pc}

08012328 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8012330:	46c0      	nop			@ (mov r8, r8)
 8012332:	46bd      	mov	sp, r7
 8012334:	b002      	add	sp, #8
 8012336:	bd80      	pop	{r7, pc}

08012338 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8012340:	46c0      	nop			@ (mov r8, r8)
 8012342:	46bd      	mov	sp, r7
 8012344:	b002      	add	sp, #8
 8012346:	bd80      	pop	{r7, pc}

08012348 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8012350:	46c0      	nop			@ (mov r8, r8)
 8012352:	46bd      	mov	sp, r7
 8012354:	b002      	add	sp, #8
 8012356:	bd80      	pop	{r7, pc}

08012358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	000a      	movs	r2, r1
 8012362:	1cbb      	adds	r3, r7, #2
 8012364:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012366:	46c0      	nop			@ (mov r8, r8)
 8012368:	46bd      	mov	sp, r7
 801236a:	b002      	add	sp, #8
 801236c:	bd80      	pop	{r7, pc}
	...

08012370 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2188      	movs	r1, #136	@ 0x88
 801237c:	4a14      	ldr	r2, [pc, #80]	@ (80123d0 <UART_InitCallbacksToDefault+0x60>)
 801237e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	218c      	movs	r1, #140	@ 0x8c
 8012384:	4a13      	ldr	r2, [pc, #76]	@ (80123d4 <UART_InitCallbacksToDefault+0x64>)
 8012386:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2190      	movs	r1, #144	@ 0x90
 801238c:	4a12      	ldr	r2, [pc, #72]	@ (80123d8 <UART_InitCallbacksToDefault+0x68>)
 801238e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2194      	movs	r1, #148	@ 0x94
 8012394:	4a11      	ldr	r2, [pc, #68]	@ (80123dc <UART_InitCallbacksToDefault+0x6c>)
 8012396:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2198      	movs	r1, #152	@ 0x98
 801239c:	4a10      	ldr	r2, [pc, #64]	@ (80123e0 <UART_InitCallbacksToDefault+0x70>)
 801239e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	219c      	movs	r1, #156	@ 0x9c
 80123a4:	4a0f      	ldr	r2, [pc, #60]	@ (80123e4 <UART_InitCallbacksToDefault+0x74>)
 80123a6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	21a0      	movs	r1, #160	@ 0xa0
 80123ac:	4a0e      	ldr	r2, [pc, #56]	@ (80123e8 <UART_InitCallbacksToDefault+0x78>)
 80123ae:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	21a4      	movs	r1, #164	@ 0xa4
 80123b4:	4a0d      	ldr	r2, [pc, #52]	@ (80123ec <UART_InitCallbacksToDefault+0x7c>)
 80123b6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	21a8      	movs	r1, #168	@ 0xa8
 80123bc:	4a0c      	ldr	r2, [pc, #48]	@ (80123f0 <UART_InitCallbacksToDefault+0x80>)
 80123be:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	21ac      	movs	r1, #172	@ 0xac
 80123c4:	4a0b      	ldr	r2, [pc, #44]	@ (80123f4 <UART_InitCallbacksToDefault+0x84>)
 80123c6:	505a      	str	r2, [r3, r1]

}
 80123c8:	46c0      	nop			@ (mov r8, r8)
 80123ca:	46bd      	mov	sp, r7
 80123cc:	b002      	add	sp, #8
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	08012309 	.word	0x08012309
 80123d4:	080122f9 	.word	0x080122f9
 80123d8:	08012319 	.word	0x08012319
 80123dc:	08003861 	.word	0x08003861
 80123e0:	0800389d 	.word	0x0800389d
 80123e4:	08012329 	.word	0x08012329
 80123e8:	08012339 	.word	0x08012339
 80123ec:	08012349 	.word	0x08012349
 80123f0:	08013261 	.word	0x08013261
 80123f4:	08012359 	.word	0x08012359

080123f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80123f8:	b5b0      	push	{r4, r5, r7, lr}
 80123fa:	b08e      	sub	sp, #56	@ 0x38
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012400:	231a      	movs	r3, #26
 8012402:	2218      	movs	r2, #24
 8012404:	189b      	adds	r3, r3, r2
 8012406:	19db      	adds	r3, r3, r7
 8012408:	2200      	movs	r2, #0
 801240a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	689a      	ldr	r2, [r3, #8]
 8012410:	69fb      	ldr	r3, [r7, #28]
 8012412:	691b      	ldr	r3, [r3, #16]
 8012414:	431a      	orrs	r2, r3
 8012416:	69fb      	ldr	r3, [r7, #28]
 8012418:	695b      	ldr	r3, [r3, #20]
 801241a:	431a      	orrs	r2, r3
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	69db      	ldr	r3, [r3, #28]
 8012420:	4313      	orrs	r3, r2
 8012422:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	4ac3      	ldr	r2, [pc, #780]	@ (8012738 <UART_SetConfig+0x340>)
 801242c:	4013      	ands	r3, r2
 801242e:	0019      	movs	r1, r3
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012436:	430a      	orrs	r2, r1
 8012438:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	685b      	ldr	r3, [r3, #4]
 8012440:	4abe      	ldr	r2, [pc, #760]	@ (801273c <UART_SetConfig+0x344>)
 8012442:	4013      	ands	r3, r2
 8012444:	0019      	movs	r1, r3
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	68da      	ldr	r2, [r3, #12]
 801244a:	69fb      	ldr	r3, [r7, #28]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	430a      	orrs	r2, r1
 8012450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012452:	69fb      	ldr	r3, [r7, #28]
 8012454:	699b      	ldr	r3, [r3, #24]
 8012456:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	4ab8      	ldr	r2, [pc, #736]	@ (8012740 <UART_SetConfig+0x348>)
 801245e:	4293      	cmp	r3, r2
 8012460:	d004      	beq.n	801246c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	6a1b      	ldr	r3, [r3, #32]
 8012466:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012468:	4313      	orrs	r3, r2
 801246a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	689b      	ldr	r3, [r3, #8]
 8012472:	4ab4      	ldr	r2, [pc, #720]	@ (8012744 <UART_SetConfig+0x34c>)
 8012474:	4013      	ands	r3, r2
 8012476:	0019      	movs	r1, r3
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801247e:	430a      	orrs	r2, r1
 8012480:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	4ab0      	ldr	r2, [pc, #704]	@ (8012748 <UART_SetConfig+0x350>)
 8012488:	4293      	cmp	r3, r2
 801248a:	d131      	bne.n	80124f0 <UART_SetConfig+0xf8>
 801248c:	4baf      	ldr	r3, [pc, #700]	@ (801274c <UART_SetConfig+0x354>)
 801248e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012490:	2203      	movs	r2, #3
 8012492:	4013      	ands	r3, r2
 8012494:	2b03      	cmp	r3, #3
 8012496:	d01d      	beq.n	80124d4 <UART_SetConfig+0xdc>
 8012498:	d823      	bhi.n	80124e2 <UART_SetConfig+0xea>
 801249a:	2b02      	cmp	r3, #2
 801249c:	d00c      	beq.n	80124b8 <UART_SetConfig+0xc0>
 801249e:	d820      	bhi.n	80124e2 <UART_SetConfig+0xea>
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d002      	beq.n	80124aa <UART_SetConfig+0xb2>
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d00e      	beq.n	80124c6 <UART_SetConfig+0xce>
 80124a8:	e01b      	b.n	80124e2 <UART_SetConfig+0xea>
 80124aa:	231b      	movs	r3, #27
 80124ac:	2218      	movs	r2, #24
 80124ae:	189b      	adds	r3, r3, r2
 80124b0:	19db      	adds	r3, r3, r7
 80124b2:	2201      	movs	r2, #1
 80124b4:	701a      	strb	r2, [r3, #0]
 80124b6:	e0b4      	b.n	8012622 <UART_SetConfig+0x22a>
 80124b8:	231b      	movs	r3, #27
 80124ba:	2218      	movs	r2, #24
 80124bc:	189b      	adds	r3, r3, r2
 80124be:	19db      	adds	r3, r3, r7
 80124c0:	2202      	movs	r2, #2
 80124c2:	701a      	strb	r2, [r3, #0]
 80124c4:	e0ad      	b.n	8012622 <UART_SetConfig+0x22a>
 80124c6:	231b      	movs	r3, #27
 80124c8:	2218      	movs	r2, #24
 80124ca:	189b      	adds	r3, r3, r2
 80124cc:	19db      	adds	r3, r3, r7
 80124ce:	2204      	movs	r2, #4
 80124d0:	701a      	strb	r2, [r3, #0]
 80124d2:	e0a6      	b.n	8012622 <UART_SetConfig+0x22a>
 80124d4:	231b      	movs	r3, #27
 80124d6:	2218      	movs	r2, #24
 80124d8:	189b      	adds	r3, r3, r2
 80124da:	19db      	adds	r3, r3, r7
 80124dc:	2208      	movs	r2, #8
 80124de:	701a      	strb	r2, [r3, #0]
 80124e0:	e09f      	b.n	8012622 <UART_SetConfig+0x22a>
 80124e2:	231b      	movs	r3, #27
 80124e4:	2218      	movs	r2, #24
 80124e6:	189b      	adds	r3, r3, r2
 80124e8:	19db      	adds	r3, r3, r7
 80124ea:	2210      	movs	r2, #16
 80124ec:	701a      	strb	r2, [r3, #0]
 80124ee:	e098      	b.n	8012622 <UART_SetConfig+0x22a>
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	4a96      	ldr	r2, [pc, #600]	@ (8012750 <UART_SetConfig+0x358>)
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d131      	bne.n	801255e <UART_SetConfig+0x166>
 80124fa:	4b94      	ldr	r3, [pc, #592]	@ (801274c <UART_SetConfig+0x354>)
 80124fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124fe:	220c      	movs	r2, #12
 8012500:	4013      	ands	r3, r2
 8012502:	2b0c      	cmp	r3, #12
 8012504:	d01d      	beq.n	8012542 <UART_SetConfig+0x14a>
 8012506:	d823      	bhi.n	8012550 <UART_SetConfig+0x158>
 8012508:	2b08      	cmp	r3, #8
 801250a:	d00c      	beq.n	8012526 <UART_SetConfig+0x12e>
 801250c:	d820      	bhi.n	8012550 <UART_SetConfig+0x158>
 801250e:	2b00      	cmp	r3, #0
 8012510:	d002      	beq.n	8012518 <UART_SetConfig+0x120>
 8012512:	2b04      	cmp	r3, #4
 8012514:	d00e      	beq.n	8012534 <UART_SetConfig+0x13c>
 8012516:	e01b      	b.n	8012550 <UART_SetConfig+0x158>
 8012518:	231b      	movs	r3, #27
 801251a:	2218      	movs	r2, #24
 801251c:	189b      	adds	r3, r3, r2
 801251e:	19db      	adds	r3, r3, r7
 8012520:	2200      	movs	r2, #0
 8012522:	701a      	strb	r2, [r3, #0]
 8012524:	e07d      	b.n	8012622 <UART_SetConfig+0x22a>
 8012526:	231b      	movs	r3, #27
 8012528:	2218      	movs	r2, #24
 801252a:	189b      	adds	r3, r3, r2
 801252c:	19db      	adds	r3, r3, r7
 801252e:	2202      	movs	r2, #2
 8012530:	701a      	strb	r2, [r3, #0]
 8012532:	e076      	b.n	8012622 <UART_SetConfig+0x22a>
 8012534:	231b      	movs	r3, #27
 8012536:	2218      	movs	r2, #24
 8012538:	189b      	adds	r3, r3, r2
 801253a:	19db      	adds	r3, r3, r7
 801253c:	2204      	movs	r2, #4
 801253e:	701a      	strb	r2, [r3, #0]
 8012540:	e06f      	b.n	8012622 <UART_SetConfig+0x22a>
 8012542:	231b      	movs	r3, #27
 8012544:	2218      	movs	r2, #24
 8012546:	189b      	adds	r3, r3, r2
 8012548:	19db      	adds	r3, r3, r7
 801254a:	2208      	movs	r2, #8
 801254c:	701a      	strb	r2, [r3, #0]
 801254e:	e068      	b.n	8012622 <UART_SetConfig+0x22a>
 8012550:	231b      	movs	r3, #27
 8012552:	2218      	movs	r2, #24
 8012554:	189b      	adds	r3, r3, r2
 8012556:	19db      	adds	r3, r3, r7
 8012558:	2210      	movs	r2, #16
 801255a:	701a      	strb	r2, [r3, #0]
 801255c:	e061      	b.n	8012622 <UART_SetConfig+0x22a>
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	4a7c      	ldr	r2, [pc, #496]	@ (8012754 <UART_SetConfig+0x35c>)
 8012564:	4293      	cmp	r3, r2
 8012566:	d106      	bne.n	8012576 <UART_SetConfig+0x17e>
 8012568:	231b      	movs	r3, #27
 801256a:	2218      	movs	r2, #24
 801256c:	189b      	adds	r3, r3, r2
 801256e:	19db      	adds	r3, r3, r7
 8012570:	2200      	movs	r2, #0
 8012572:	701a      	strb	r2, [r3, #0]
 8012574:	e055      	b.n	8012622 <UART_SetConfig+0x22a>
 8012576:	69fb      	ldr	r3, [r7, #28]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	4a77      	ldr	r2, [pc, #476]	@ (8012758 <UART_SetConfig+0x360>)
 801257c:	4293      	cmp	r3, r2
 801257e:	d106      	bne.n	801258e <UART_SetConfig+0x196>
 8012580:	231b      	movs	r3, #27
 8012582:	2218      	movs	r2, #24
 8012584:	189b      	adds	r3, r3, r2
 8012586:	19db      	adds	r3, r3, r7
 8012588:	2200      	movs	r2, #0
 801258a:	701a      	strb	r2, [r3, #0]
 801258c:	e049      	b.n	8012622 <UART_SetConfig+0x22a>
 801258e:	69fb      	ldr	r3, [r7, #28]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	4a6b      	ldr	r2, [pc, #428]	@ (8012740 <UART_SetConfig+0x348>)
 8012594:	4293      	cmp	r3, r2
 8012596:	d13e      	bne.n	8012616 <UART_SetConfig+0x21e>
 8012598:	4b6c      	ldr	r3, [pc, #432]	@ (801274c <UART_SetConfig+0x354>)
 801259a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801259c:	23c0      	movs	r3, #192	@ 0xc0
 801259e:	011b      	lsls	r3, r3, #4
 80125a0:	4013      	ands	r3, r2
 80125a2:	22c0      	movs	r2, #192	@ 0xc0
 80125a4:	0112      	lsls	r2, r2, #4
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d027      	beq.n	80125fa <UART_SetConfig+0x202>
 80125aa:	22c0      	movs	r2, #192	@ 0xc0
 80125ac:	0112      	lsls	r2, r2, #4
 80125ae:	4293      	cmp	r3, r2
 80125b0:	d82a      	bhi.n	8012608 <UART_SetConfig+0x210>
 80125b2:	2280      	movs	r2, #128	@ 0x80
 80125b4:	0112      	lsls	r2, r2, #4
 80125b6:	4293      	cmp	r3, r2
 80125b8:	d011      	beq.n	80125de <UART_SetConfig+0x1e6>
 80125ba:	2280      	movs	r2, #128	@ 0x80
 80125bc:	0112      	lsls	r2, r2, #4
 80125be:	4293      	cmp	r3, r2
 80125c0:	d822      	bhi.n	8012608 <UART_SetConfig+0x210>
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d004      	beq.n	80125d0 <UART_SetConfig+0x1d8>
 80125c6:	2280      	movs	r2, #128	@ 0x80
 80125c8:	00d2      	lsls	r2, r2, #3
 80125ca:	4293      	cmp	r3, r2
 80125cc:	d00e      	beq.n	80125ec <UART_SetConfig+0x1f4>
 80125ce:	e01b      	b.n	8012608 <UART_SetConfig+0x210>
 80125d0:	231b      	movs	r3, #27
 80125d2:	2218      	movs	r2, #24
 80125d4:	189b      	adds	r3, r3, r2
 80125d6:	19db      	adds	r3, r3, r7
 80125d8:	2200      	movs	r2, #0
 80125da:	701a      	strb	r2, [r3, #0]
 80125dc:	e021      	b.n	8012622 <UART_SetConfig+0x22a>
 80125de:	231b      	movs	r3, #27
 80125e0:	2218      	movs	r2, #24
 80125e2:	189b      	adds	r3, r3, r2
 80125e4:	19db      	adds	r3, r3, r7
 80125e6:	2202      	movs	r2, #2
 80125e8:	701a      	strb	r2, [r3, #0]
 80125ea:	e01a      	b.n	8012622 <UART_SetConfig+0x22a>
 80125ec:	231b      	movs	r3, #27
 80125ee:	2218      	movs	r2, #24
 80125f0:	189b      	adds	r3, r3, r2
 80125f2:	19db      	adds	r3, r3, r7
 80125f4:	2204      	movs	r2, #4
 80125f6:	701a      	strb	r2, [r3, #0]
 80125f8:	e013      	b.n	8012622 <UART_SetConfig+0x22a>
 80125fa:	231b      	movs	r3, #27
 80125fc:	2218      	movs	r2, #24
 80125fe:	189b      	adds	r3, r3, r2
 8012600:	19db      	adds	r3, r3, r7
 8012602:	2208      	movs	r2, #8
 8012604:	701a      	strb	r2, [r3, #0]
 8012606:	e00c      	b.n	8012622 <UART_SetConfig+0x22a>
 8012608:	231b      	movs	r3, #27
 801260a:	2218      	movs	r2, #24
 801260c:	189b      	adds	r3, r3, r2
 801260e:	19db      	adds	r3, r3, r7
 8012610:	2210      	movs	r2, #16
 8012612:	701a      	strb	r2, [r3, #0]
 8012614:	e005      	b.n	8012622 <UART_SetConfig+0x22a>
 8012616:	231b      	movs	r3, #27
 8012618:	2218      	movs	r2, #24
 801261a:	189b      	adds	r3, r3, r2
 801261c:	19db      	adds	r3, r3, r7
 801261e:	2210      	movs	r2, #16
 8012620:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012622:	69fb      	ldr	r3, [r7, #28]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	4a46      	ldr	r2, [pc, #280]	@ (8012740 <UART_SetConfig+0x348>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d000      	beq.n	801262e <UART_SetConfig+0x236>
 801262c:	e09a      	b.n	8012764 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801262e:	231b      	movs	r3, #27
 8012630:	2218      	movs	r2, #24
 8012632:	189b      	adds	r3, r3, r2
 8012634:	19db      	adds	r3, r3, r7
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	2b08      	cmp	r3, #8
 801263a:	d01d      	beq.n	8012678 <UART_SetConfig+0x280>
 801263c:	dc20      	bgt.n	8012680 <UART_SetConfig+0x288>
 801263e:	2b04      	cmp	r3, #4
 8012640:	d015      	beq.n	801266e <UART_SetConfig+0x276>
 8012642:	dc1d      	bgt.n	8012680 <UART_SetConfig+0x288>
 8012644:	2b00      	cmp	r3, #0
 8012646:	d002      	beq.n	801264e <UART_SetConfig+0x256>
 8012648:	2b02      	cmp	r3, #2
 801264a:	d005      	beq.n	8012658 <UART_SetConfig+0x260>
 801264c:	e018      	b.n	8012680 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801264e:	f7fe f9a5 	bl	801099c <HAL_RCC_GetPCLK1Freq>
 8012652:	0003      	movs	r3, r0
 8012654:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012656:	e01c      	b.n	8012692 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012658:	4b3c      	ldr	r3, [pc, #240]	@ (801274c <UART_SetConfig+0x354>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2210      	movs	r2, #16
 801265e:	4013      	ands	r3, r2
 8012660:	d002      	beq.n	8012668 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8012662:	4b3e      	ldr	r3, [pc, #248]	@ (801275c <UART_SetConfig+0x364>)
 8012664:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012666:	e014      	b.n	8012692 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8012668:	4b3d      	ldr	r3, [pc, #244]	@ (8012760 <UART_SetConfig+0x368>)
 801266a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801266c:	e011      	b.n	8012692 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801266e:	f7fe f8e5 	bl	801083c <HAL_RCC_GetSysClockFreq>
 8012672:	0003      	movs	r3, r0
 8012674:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012676:	e00c      	b.n	8012692 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012678:	2380      	movs	r3, #128	@ 0x80
 801267a:	021b      	lsls	r3, r3, #8
 801267c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801267e:	e008      	b.n	8012692 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8012680:	2300      	movs	r3, #0
 8012682:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012684:	231a      	movs	r3, #26
 8012686:	2218      	movs	r2, #24
 8012688:	189b      	adds	r3, r3, r2
 801268a:	19db      	adds	r3, r3, r7
 801268c:	2201      	movs	r2, #1
 801268e:	701a      	strb	r2, [r3, #0]
        break;
 8012690:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012694:	2b00      	cmp	r3, #0
 8012696:	d100      	bne.n	801269a <UART_SetConfig+0x2a2>
 8012698:	e133      	b.n	8012902 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801269a:	69fb      	ldr	r3, [r7, #28]
 801269c:	685a      	ldr	r2, [r3, #4]
 801269e:	0013      	movs	r3, r2
 80126a0:	005b      	lsls	r3, r3, #1
 80126a2:	189b      	adds	r3, r3, r2
 80126a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d305      	bcc.n	80126b6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80126b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d906      	bls.n	80126c4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80126b6:	231a      	movs	r3, #26
 80126b8:	2218      	movs	r2, #24
 80126ba:	189b      	adds	r3, r3, r2
 80126bc:	19db      	adds	r3, r3, r7
 80126be:	2201      	movs	r2, #1
 80126c0:	701a      	strb	r2, [r3, #0]
 80126c2:	e11e      	b.n	8012902 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80126c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126c6:	613b      	str	r3, [r7, #16]
 80126c8:	2300      	movs	r3, #0
 80126ca:	617b      	str	r3, [r7, #20]
 80126cc:	6939      	ldr	r1, [r7, #16]
 80126ce:	697a      	ldr	r2, [r7, #20]
 80126d0:	000b      	movs	r3, r1
 80126d2:	0e1b      	lsrs	r3, r3, #24
 80126d4:	0010      	movs	r0, r2
 80126d6:	0205      	lsls	r5, r0, #8
 80126d8:	431d      	orrs	r5, r3
 80126da:	000b      	movs	r3, r1
 80126dc:	021c      	lsls	r4, r3, #8
 80126de:	69fb      	ldr	r3, [r7, #28]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	085b      	lsrs	r3, r3, #1
 80126e4:	60bb      	str	r3, [r7, #8]
 80126e6:	2300      	movs	r3, #0
 80126e8:	60fb      	str	r3, [r7, #12]
 80126ea:	68b8      	ldr	r0, [r7, #8]
 80126ec:	68f9      	ldr	r1, [r7, #12]
 80126ee:	1900      	adds	r0, r0, r4
 80126f0:	4169      	adcs	r1, r5
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	603b      	str	r3, [r7, #0]
 80126f8:	2300      	movs	r3, #0
 80126fa:	607b      	str	r3, [r7, #4]
 80126fc:	683a      	ldr	r2, [r7, #0]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f7ed ff0c 	bl	800051c <__aeabi_uldivmod>
 8012704:	0002      	movs	r2, r0
 8012706:	000b      	movs	r3, r1
 8012708:	0013      	movs	r3, r2
 801270a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801270c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801270e:	23c0      	movs	r3, #192	@ 0xc0
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	429a      	cmp	r2, r3
 8012714:	d309      	bcc.n	801272a <UART_SetConfig+0x332>
 8012716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012718:	2380      	movs	r3, #128	@ 0x80
 801271a:	035b      	lsls	r3, r3, #13
 801271c:	429a      	cmp	r2, r3
 801271e:	d204      	bcs.n	801272a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8012720:	69fb      	ldr	r3, [r7, #28]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012726:	60da      	str	r2, [r3, #12]
 8012728:	e0eb      	b.n	8012902 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801272a:	231a      	movs	r3, #26
 801272c:	2218      	movs	r2, #24
 801272e:	189b      	adds	r3, r3, r2
 8012730:	19db      	adds	r3, r3, r7
 8012732:	2201      	movs	r2, #1
 8012734:	701a      	strb	r2, [r3, #0]
 8012736:	e0e4      	b.n	8012902 <UART_SetConfig+0x50a>
 8012738:	efff69f3 	.word	0xefff69f3
 801273c:	ffffcfff 	.word	0xffffcfff
 8012740:	40004800 	.word	0x40004800
 8012744:	fffff4ff 	.word	0xfffff4ff
 8012748:	40013800 	.word	0x40013800
 801274c:	40021000 	.word	0x40021000
 8012750:	40004400 	.word	0x40004400
 8012754:	40004c00 	.word	0x40004c00
 8012758:	40005000 	.word	0x40005000
 801275c:	003d0900 	.word	0x003d0900
 8012760:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	69da      	ldr	r2, [r3, #28]
 8012768:	2380      	movs	r3, #128	@ 0x80
 801276a:	021b      	lsls	r3, r3, #8
 801276c:	429a      	cmp	r2, r3
 801276e:	d000      	beq.n	8012772 <UART_SetConfig+0x37a>
 8012770:	e070      	b.n	8012854 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8012772:	231b      	movs	r3, #27
 8012774:	2218      	movs	r2, #24
 8012776:	189b      	adds	r3, r3, r2
 8012778:	19db      	adds	r3, r3, r7
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	2b08      	cmp	r3, #8
 801277e:	d822      	bhi.n	80127c6 <UART_SetConfig+0x3ce>
 8012780:	009a      	lsls	r2, r3, #2
 8012782:	4b67      	ldr	r3, [pc, #412]	@ (8012920 <UART_SetConfig+0x528>)
 8012784:	18d3      	adds	r3, r2, r3
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801278a:	f7fe f907 	bl	801099c <HAL_RCC_GetPCLK1Freq>
 801278e:	0003      	movs	r3, r0
 8012790:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012792:	e021      	b.n	80127d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012794:	f7fe f918 	bl	80109c8 <HAL_RCC_GetPCLK2Freq>
 8012798:	0003      	movs	r3, r0
 801279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801279c:	e01c      	b.n	80127d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801279e:	4b61      	ldr	r3, [pc, #388]	@ (8012924 <UART_SetConfig+0x52c>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2210      	movs	r2, #16
 80127a4:	4013      	ands	r3, r2
 80127a6:	d002      	beq.n	80127ae <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80127a8:	4b5f      	ldr	r3, [pc, #380]	@ (8012928 <UART_SetConfig+0x530>)
 80127aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80127ac:	e014      	b.n	80127d8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80127ae:	4b5f      	ldr	r3, [pc, #380]	@ (801292c <UART_SetConfig+0x534>)
 80127b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80127b2:	e011      	b.n	80127d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80127b4:	f7fe f842 	bl	801083c <HAL_RCC_GetSysClockFreq>
 80127b8:	0003      	movs	r3, r0
 80127ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80127bc:	e00c      	b.n	80127d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80127be:	2380      	movs	r3, #128	@ 0x80
 80127c0:	021b      	lsls	r3, r3, #8
 80127c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80127c4:	e008      	b.n	80127d8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80127c6:	2300      	movs	r3, #0
 80127c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80127ca:	231a      	movs	r3, #26
 80127cc:	2218      	movs	r2, #24
 80127ce:	189b      	adds	r3, r3, r2
 80127d0:	19db      	adds	r3, r3, r7
 80127d2:	2201      	movs	r2, #1
 80127d4:	701a      	strb	r2, [r3, #0]
        break;
 80127d6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80127d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d100      	bne.n	80127e0 <UART_SetConfig+0x3e8>
 80127de:	e090      	b.n	8012902 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80127e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127e2:	005a      	lsls	r2, r3, #1
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	085b      	lsrs	r3, r3, #1
 80127ea:	18d2      	adds	r2, r2, r3
 80127ec:	69fb      	ldr	r3, [r7, #28]
 80127ee:	685b      	ldr	r3, [r3, #4]
 80127f0:	0019      	movs	r1, r3
 80127f2:	0010      	movs	r0, r2
 80127f4:	f7ed fca4 	bl	8000140 <__udivsi3>
 80127f8:	0003      	movs	r3, r0
 80127fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80127fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127fe:	2b0f      	cmp	r3, #15
 8012800:	d921      	bls.n	8012846 <UART_SetConfig+0x44e>
 8012802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012804:	2380      	movs	r3, #128	@ 0x80
 8012806:	025b      	lsls	r3, r3, #9
 8012808:	429a      	cmp	r2, r3
 801280a:	d21c      	bcs.n	8012846 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801280e:	b29a      	uxth	r2, r3
 8012810:	200e      	movs	r0, #14
 8012812:	2418      	movs	r4, #24
 8012814:	1903      	adds	r3, r0, r4
 8012816:	19db      	adds	r3, r3, r7
 8012818:	210f      	movs	r1, #15
 801281a:	438a      	bics	r2, r1
 801281c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801281e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012820:	085b      	lsrs	r3, r3, #1
 8012822:	b29b      	uxth	r3, r3
 8012824:	2207      	movs	r2, #7
 8012826:	4013      	ands	r3, r2
 8012828:	b299      	uxth	r1, r3
 801282a:	1903      	adds	r3, r0, r4
 801282c:	19db      	adds	r3, r3, r7
 801282e:	1902      	adds	r2, r0, r4
 8012830:	19d2      	adds	r2, r2, r7
 8012832:	8812      	ldrh	r2, [r2, #0]
 8012834:	430a      	orrs	r2, r1
 8012836:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	1902      	adds	r2, r0, r4
 801283e:	19d2      	adds	r2, r2, r7
 8012840:	8812      	ldrh	r2, [r2, #0]
 8012842:	60da      	str	r2, [r3, #12]
 8012844:	e05d      	b.n	8012902 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8012846:	231a      	movs	r3, #26
 8012848:	2218      	movs	r2, #24
 801284a:	189b      	adds	r3, r3, r2
 801284c:	19db      	adds	r3, r3, r7
 801284e:	2201      	movs	r2, #1
 8012850:	701a      	strb	r2, [r3, #0]
 8012852:	e056      	b.n	8012902 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012854:	231b      	movs	r3, #27
 8012856:	2218      	movs	r2, #24
 8012858:	189b      	adds	r3, r3, r2
 801285a:	19db      	adds	r3, r3, r7
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	2b08      	cmp	r3, #8
 8012860:	d822      	bhi.n	80128a8 <UART_SetConfig+0x4b0>
 8012862:	009a      	lsls	r2, r3, #2
 8012864:	4b32      	ldr	r3, [pc, #200]	@ (8012930 <UART_SetConfig+0x538>)
 8012866:	18d3      	adds	r3, r2, r3
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801286c:	f7fe f896 	bl	801099c <HAL_RCC_GetPCLK1Freq>
 8012870:	0003      	movs	r3, r0
 8012872:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012874:	e021      	b.n	80128ba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012876:	f7fe f8a7 	bl	80109c8 <HAL_RCC_GetPCLK2Freq>
 801287a:	0003      	movs	r3, r0
 801287c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801287e:	e01c      	b.n	80128ba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012880:	4b28      	ldr	r3, [pc, #160]	@ (8012924 <UART_SetConfig+0x52c>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2210      	movs	r2, #16
 8012886:	4013      	ands	r3, r2
 8012888:	d002      	beq.n	8012890 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801288a:	4b27      	ldr	r3, [pc, #156]	@ (8012928 <UART_SetConfig+0x530>)
 801288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801288e:	e014      	b.n	80128ba <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8012890:	4b26      	ldr	r3, [pc, #152]	@ (801292c <UART_SetConfig+0x534>)
 8012892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012894:	e011      	b.n	80128ba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012896:	f7fd ffd1 	bl	801083c <HAL_RCC_GetSysClockFreq>
 801289a:	0003      	movs	r3, r0
 801289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801289e:	e00c      	b.n	80128ba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80128a0:	2380      	movs	r3, #128	@ 0x80
 80128a2:	021b      	lsls	r3, r3, #8
 80128a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80128a6:	e008      	b.n	80128ba <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80128a8:	2300      	movs	r3, #0
 80128aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80128ac:	231a      	movs	r3, #26
 80128ae:	2218      	movs	r2, #24
 80128b0:	189b      	adds	r3, r3, r2
 80128b2:	19db      	adds	r3, r3, r7
 80128b4:	2201      	movs	r2, #1
 80128b6:	701a      	strb	r2, [r3, #0]
        break;
 80128b8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80128ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d020      	beq.n	8012902 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	085a      	lsrs	r2, r3, #1
 80128c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128c8:	18d2      	adds	r2, r2, r3
 80128ca:	69fb      	ldr	r3, [r7, #28]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	0019      	movs	r1, r3
 80128d0:	0010      	movs	r0, r2
 80128d2:	f7ed fc35 	bl	8000140 <__udivsi3>
 80128d6:	0003      	movs	r3, r0
 80128d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80128da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128dc:	2b0f      	cmp	r3, #15
 80128de:	d90a      	bls.n	80128f6 <UART_SetConfig+0x4fe>
 80128e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128e2:	2380      	movs	r3, #128	@ 0x80
 80128e4:	025b      	lsls	r3, r3, #9
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d205      	bcs.n	80128f6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80128ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	60da      	str	r2, [r3, #12]
 80128f4:	e005      	b.n	8012902 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80128f6:	231a      	movs	r3, #26
 80128f8:	2218      	movs	r2, #24
 80128fa:	189b      	adds	r3, r3, r2
 80128fc:	19db      	adds	r3, r3, r7
 80128fe:	2201      	movs	r2, #1
 8012900:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	2200      	movs	r2, #0
 8012906:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	2200      	movs	r2, #0
 801290c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801290e:	231a      	movs	r3, #26
 8012910:	2218      	movs	r2, #24
 8012912:	189b      	adds	r3, r3, r2
 8012914:	19db      	adds	r3, r3, r7
 8012916:	781b      	ldrb	r3, [r3, #0]
}
 8012918:	0018      	movs	r0, r3
 801291a:	46bd      	mov	sp, r7
 801291c:	b00e      	add	sp, #56	@ 0x38
 801291e:	bdb0      	pop	{r4, r5, r7, pc}
 8012920:	0801c1d8 	.word	0x0801c1d8
 8012924:	40021000 	.word	0x40021000
 8012928:	003d0900 	.word	0x003d0900
 801292c:	00f42400 	.word	0x00f42400
 8012930:	0801c1fc 	.word	0x0801c1fc

08012934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012940:	2201      	movs	r2, #1
 8012942:	4013      	ands	r3, r2
 8012944:	d00b      	beq.n	801295e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	4a4a      	ldr	r2, [pc, #296]	@ (8012a78 <UART_AdvFeatureConfig+0x144>)
 801294e:	4013      	ands	r3, r2
 8012950:	0019      	movs	r1, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	430a      	orrs	r2, r1
 801295c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012962:	2202      	movs	r2, #2
 8012964:	4013      	ands	r3, r2
 8012966:	d00b      	beq.n	8012980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	4a43      	ldr	r2, [pc, #268]	@ (8012a7c <UART_AdvFeatureConfig+0x148>)
 8012970:	4013      	ands	r3, r2
 8012972:	0019      	movs	r1, r3
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	430a      	orrs	r2, r1
 801297e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012984:	2204      	movs	r2, #4
 8012986:	4013      	ands	r3, r2
 8012988:	d00b      	beq.n	80129a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	4a3b      	ldr	r2, [pc, #236]	@ (8012a80 <UART_AdvFeatureConfig+0x14c>)
 8012992:	4013      	ands	r3, r2
 8012994:	0019      	movs	r1, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	430a      	orrs	r2, r1
 80129a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129a6:	2208      	movs	r2, #8
 80129a8:	4013      	ands	r3, r2
 80129aa:	d00b      	beq.n	80129c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	4a34      	ldr	r2, [pc, #208]	@ (8012a84 <UART_AdvFeatureConfig+0x150>)
 80129b4:	4013      	ands	r3, r2
 80129b6:	0019      	movs	r1, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	430a      	orrs	r2, r1
 80129c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129c8:	2210      	movs	r2, #16
 80129ca:	4013      	ands	r3, r2
 80129cc:	d00b      	beq.n	80129e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	689b      	ldr	r3, [r3, #8]
 80129d4:	4a2c      	ldr	r2, [pc, #176]	@ (8012a88 <UART_AdvFeatureConfig+0x154>)
 80129d6:	4013      	ands	r3, r2
 80129d8:	0019      	movs	r1, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	430a      	orrs	r2, r1
 80129e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129ea:	2220      	movs	r2, #32
 80129ec:	4013      	ands	r3, r2
 80129ee:	d00b      	beq.n	8012a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	689b      	ldr	r3, [r3, #8]
 80129f6:	4a25      	ldr	r2, [pc, #148]	@ (8012a8c <UART_AdvFeatureConfig+0x158>)
 80129f8:	4013      	ands	r3, r2
 80129fa:	0019      	movs	r1, r3
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	430a      	orrs	r2, r1
 8012a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a0c:	2240      	movs	r2, #64	@ 0x40
 8012a0e:	4013      	ands	r3, r2
 8012a10:	d01d      	beq.n	8012a4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	4a1d      	ldr	r2, [pc, #116]	@ (8012a90 <UART_AdvFeatureConfig+0x15c>)
 8012a1a:	4013      	ands	r3, r2
 8012a1c:	0019      	movs	r1, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	430a      	orrs	r2, r1
 8012a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a2e:	2380      	movs	r3, #128	@ 0x80
 8012a30:	035b      	lsls	r3, r3, #13
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d10b      	bne.n	8012a4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	4a15      	ldr	r2, [pc, #84]	@ (8012a94 <UART_AdvFeatureConfig+0x160>)
 8012a3e:	4013      	ands	r3, r2
 8012a40:	0019      	movs	r1, r3
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	430a      	orrs	r2, r1
 8012a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a52:	2280      	movs	r2, #128	@ 0x80
 8012a54:	4013      	ands	r3, r2
 8012a56:	d00b      	beq.n	8012a70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	685b      	ldr	r3, [r3, #4]
 8012a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8012a98 <UART_AdvFeatureConfig+0x164>)
 8012a60:	4013      	ands	r3, r2
 8012a62:	0019      	movs	r1, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	430a      	orrs	r2, r1
 8012a6e:	605a      	str	r2, [r3, #4]
  }
}
 8012a70:	46c0      	nop			@ (mov r8, r8)
 8012a72:	46bd      	mov	sp, r7
 8012a74:	b002      	add	sp, #8
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	fffdffff 	.word	0xfffdffff
 8012a7c:	fffeffff 	.word	0xfffeffff
 8012a80:	fffbffff 	.word	0xfffbffff
 8012a84:	ffff7fff 	.word	0xffff7fff
 8012a88:	ffffefff 	.word	0xffffefff
 8012a8c:	ffffdfff 	.word	0xffffdfff
 8012a90:	ffefffff 	.word	0xffefffff
 8012a94:	ff9fffff 	.word	0xff9fffff
 8012a98:	fff7ffff 	.word	0xfff7ffff

08012a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b092      	sub	sp, #72	@ 0x48
 8012aa0:	af02      	add	r7, sp, #8
 8012aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2284      	movs	r2, #132	@ 0x84
 8012aa8:	2100      	movs	r1, #0
 8012aaa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012aac:	f7f7 fc30 	bl	800a310 <HAL_GetTick>
 8012ab0:	0003      	movs	r3, r0
 8012ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2208      	movs	r2, #8
 8012abc:	4013      	ands	r3, r2
 8012abe:	2b08      	cmp	r3, #8
 8012ac0:	d12c      	bne.n	8012b1c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ac4:	2280      	movs	r2, #128	@ 0x80
 8012ac6:	0391      	lsls	r1, r2, #14
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	4a46      	ldr	r2, [pc, #280]	@ (8012be4 <UART_CheckIdleState+0x148>)
 8012acc:	9200      	str	r2, [sp, #0]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f000 f88c 	bl	8012bec <UART_WaitOnFlagUntilTimeout>
 8012ad4:	1e03      	subs	r3, r0, #0
 8012ad6:	d021      	beq.n	8012b1c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8012adc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8012ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ae8:	f383 8810 	msr	PRIMASK, r3
}
 8012aec:	46c0      	nop			@ (mov r8, r8)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2180      	movs	r1, #128	@ 0x80
 8012afa:	438a      	bics	r2, r1
 8012afc:	601a      	str	r2, [r3, #0]
 8012afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b04:	f383 8810 	msr	PRIMASK, r3
}
 8012b08:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2220      	movs	r2, #32
 8012b0e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2278      	movs	r2, #120	@ 0x78
 8012b14:	2100      	movs	r1, #0
 8012b16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012b18:	2303      	movs	r3, #3
 8012b1a:	e05f      	b.n	8012bdc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	2204      	movs	r2, #4
 8012b24:	4013      	ands	r3, r2
 8012b26:	2b04      	cmp	r3, #4
 8012b28:	d146      	bne.n	8012bb8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b2c:	2280      	movs	r2, #128	@ 0x80
 8012b2e:	03d1      	lsls	r1, r2, #15
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	4a2c      	ldr	r2, [pc, #176]	@ (8012be4 <UART_CheckIdleState+0x148>)
 8012b34:	9200      	str	r2, [sp, #0]
 8012b36:	2200      	movs	r2, #0
 8012b38:	f000 f858 	bl	8012bec <UART_WaitOnFlagUntilTimeout>
 8012b3c:	1e03      	subs	r3, r0, #0
 8012b3e:	d03b      	beq.n	8012bb8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b40:	f3ef 8310 	mrs	r3, PRIMASK
 8012b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b46:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	f383 8810 	msr	PRIMASK, r3
}
 8012b54:	46c0      	nop			@ (mov r8, r8)
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	681a      	ldr	r2, [r3, #0]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	4921      	ldr	r1, [pc, #132]	@ (8012be8 <UART_CheckIdleState+0x14c>)
 8012b62:	400a      	ands	r2, r1
 8012b64:	601a      	str	r2, [r3, #0]
 8012b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	f383 8810 	msr	PRIMASK, r3
}
 8012b70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b72:	f3ef 8310 	mrs	r3, PRIMASK
 8012b76:	61bb      	str	r3, [r7, #24]
  return(result);
 8012b78:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	f383 8810 	msr	PRIMASK, r3
}
 8012b86:	46c0      	nop			@ (mov r8, r8)
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	689a      	ldr	r2, [r3, #8]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2101      	movs	r1, #1
 8012b94:	438a      	bics	r2, r1
 8012b96:	609a      	str	r2, [r3, #8]
 8012b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b9c:	6a3b      	ldr	r3, [r7, #32]
 8012b9e:	f383 8810 	msr	PRIMASK, r3
}
 8012ba2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2280      	movs	r2, #128	@ 0x80
 8012ba8:	2120      	movs	r1, #32
 8012baa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2278      	movs	r2, #120	@ 0x78
 8012bb0:	2100      	movs	r1, #0
 8012bb2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012bb4:	2303      	movs	r3, #3
 8012bb6:	e011      	b.n	8012bdc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2220      	movs	r2, #32
 8012bbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2280      	movs	r2, #128	@ 0x80
 8012bc2:	2120      	movs	r1, #32
 8012bc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2278      	movs	r2, #120	@ 0x78
 8012bd6:	2100      	movs	r1, #0
 8012bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012bda:	2300      	movs	r3, #0
}
 8012bdc:	0018      	movs	r0, r3
 8012bde:	46bd      	mov	sp, r7
 8012be0:	b010      	add	sp, #64	@ 0x40
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	01ffffff 	.word	0x01ffffff
 8012be8:	fffffedf 	.word	0xfffffedf

08012bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b084      	sub	sp, #16
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	60f8      	str	r0, [r7, #12]
 8012bf4:	60b9      	str	r1, [r7, #8]
 8012bf6:	603b      	str	r3, [r7, #0]
 8012bf8:	1dfb      	adds	r3, r7, #7
 8012bfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012bfc:	e04b      	b.n	8012c96 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	3301      	adds	r3, #1
 8012c02:	d048      	beq.n	8012c96 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012c04:	f7f7 fb84 	bl	800a310 <HAL_GetTick>
 8012c08:	0002      	movs	r2, r0
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	1ad3      	subs	r3, r2, r3
 8012c0e:	69ba      	ldr	r2, [r7, #24]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d302      	bcc.n	8012c1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d101      	bne.n	8012c1e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8012c1a:	2303      	movs	r3, #3
 8012c1c:	e04b      	b.n	8012cb6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2204      	movs	r2, #4
 8012c26:	4013      	ands	r3, r2
 8012c28:	d035      	beq.n	8012c96 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	69db      	ldr	r3, [r3, #28]
 8012c30:	2208      	movs	r2, #8
 8012c32:	4013      	ands	r3, r2
 8012c34:	2b08      	cmp	r3, #8
 8012c36:	d111      	bne.n	8012c5c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2208      	movs	r2, #8
 8012c3e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	0018      	movs	r0, r3
 8012c44:	f000 f900 	bl	8012e48 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	2284      	movs	r2, #132	@ 0x84
 8012c4c:	2108      	movs	r1, #8
 8012c4e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	2278      	movs	r2, #120	@ 0x78
 8012c54:	2100      	movs	r1, #0
 8012c56:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	e02c      	b.n	8012cb6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	69da      	ldr	r2, [r3, #28]
 8012c62:	2380      	movs	r3, #128	@ 0x80
 8012c64:	011b      	lsls	r3, r3, #4
 8012c66:	401a      	ands	r2, r3
 8012c68:	2380      	movs	r3, #128	@ 0x80
 8012c6a:	011b      	lsls	r3, r3, #4
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	d112      	bne.n	8012c96 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2280      	movs	r2, #128	@ 0x80
 8012c76:	0112      	lsls	r2, r2, #4
 8012c78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	0018      	movs	r0, r3
 8012c7e:	f000 f8e3 	bl	8012e48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	2284      	movs	r2, #132	@ 0x84
 8012c86:	2120      	movs	r1, #32
 8012c88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2278      	movs	r2, #120	@ 0x78
 8012c8e:	2100      	movs	r1, #0
 8012c90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8012c92:	2303      	movs	r3, #3
 8012c94:	e00f      	b.n	8012cb6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	69db      	ldr	r3, [r3, #28]
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	4013      	ands	r3, r2
 8012ca0:	68ba      	ldr	r2, [r7, #8]
 8012ca2:	1ad3      	subs	r3, r2, r3
 8012ca4:	425a      	negs	r2, r3
 8012ca6:	4153      	adcs	r3, r2
 8012ca8:	b2db      	uxtb	r3, r3
 8012caa:	001a      	movs	r2, r3
 8012cac:	1dfb      	adds	r3, r7, #7
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d0a4      	beq.n	8012bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012cb4:	2300      	movs	r3, #0
}
 8012cb6:	0018      	movs	r0, r3
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	b004      	add	sp, #16
 8012cbc:	bd80      	pop	{r7, pc}
	...

08012cc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b090      	sub	sp, #64	@ 0x40
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	60f8      	str	r0, [r7, #12]
 8012cc8:	60b9      	str	r1, [r7, #8]
 8012cca:	1dbb      	adds	r3, r7, #6
 8012ccc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	68ba      	ldr	r2, [r7, #8]
 8012cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	1dba      	adds	r2, r7, #6
 8012cd8:	2158      	movs	r1, #88	@ 0x58
 8012cda:	8812      	ldrh	r2, [r2, #0]
 8012cdc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2284      	movs	r2, #132	@ 0x84
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	2280      	movs	r2, #128	@ 0x80
 8012cea:	2122      	movs	r1, #34	@ 0x22
 8012cec:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d028      	beq.n	8012d48 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012cfa:	4a3e      	ldr	r2, [pc, #248]	@ (8012df4 <UART_Start_Receive_DMA+0x134>)
 8012cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d02:	4a3d      	ldr	r2, [pc, #244]	@ (8012df8 <UART_Start_Receive_DMA+0x138>)
 8012d04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8012dfc <UART_Start_Receive_DMA+0x13c>)
 8012d0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d12:	2200      	movs	r2, #0
 8012d14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	3324      	adds	r3, #36	@ 0x24
 8012d20:	0019      	movs	r1, r3
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d26:	001a      	movs	r2, r3
 8012d28:	1dbb      	adds	r3, r7, #6
 8012d2a:	881b      	ldrh	r3, [r3, #0]
 8012d2c:	f7f8 f86e 	bl	800ae0c <HAL_DMA_Start_IT>
 8012d30:	1e03      	subs	r3, r0, #0
 8012d32:	d009      	beq.n	8012d48 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	2284      	movs	r2, #132	@ 0x84
 8012d38:	2110      	movs	r1, #16
 8012d3a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	2280      	movs	r2, #128	@ 0x80
 8012d40:	2120      	movs	r1, #32
 8012d42:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8012d44:	2301      	movs	r3, #1
 8012d46:	e050      	b.n	8012dea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	691b      	ldr	r3, [r3, #16]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d019      	beq.n	8012d84 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d50:	f3ef 8310 	mrs	r3, PRIMASK
 8012d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8012d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d60:	f383 8810 	msr	PRIMASK, r3
}
 8012d64:	46c0      	nop			@ (mov r8, r8)
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	681a      	ldr	r2, [r3, #0]
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	2180      	movs	r1, #128	@ 0x80
 8012d72:	0049      	lsls	r1, r1, #1
 8012d74:	430a      	orrs	r2, r1
 8012d76:	601a      	str	r2, [r3, #0]
 8012d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d7e:	f383 8810 	msr	PRIMASK, r3
}
 8012d82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d84:	f3ef 8310 	mrs	r3, PRIMASK
 8012d88:	613b      	str	r3, [r7, #16]
  return(result);
 8012d8a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012d8e:	2301      	movs	r3, #1
 8012d90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	f383 8810 	msr	PRIMASK, r3
}
 8012d98:	46c0      	nop			@ (mov r8, r8)
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	689a      	ldr	r2, [r3, #8]
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	2101      	movs	r1, #1
 8012da6:	430a      	orrs	r2, r1
 8012da8:	609a      	str	r2, [r3, #8]
 8012daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dae:	69bb      	ldr	r3, [r7, #24]
 8012db0:	f383 8810 	msr	PRIMASK, r3
}
 8012db4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012db6:	f3ef 8310 	mrs	r3, PRIMASK
 8012dba:	61fb      	str	r3, [r7, #28]
  return(result);
 8012dbc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dc4:	6a3b      	ldr	r3, [r7, #32]
 8012dc6:	f383 8810 	msr	PRIMASK, r3
}
 8012dca:	46c0      	nop			@ (mov r8, r8)
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	689a      	ldr	r2, [r3, #8]
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	2140      	movs	r1, #64	@ 0x40
 8012dd8:	430a      	orrs	r2, r1
 8012dda:	609a      	str	r2, [r3, #8]
 8012ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dde:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de2:	f383 8810 	msr	PRIMASK, r3
}
 8012de6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8012de8:	2300      	movs	r3, #0
}
 8012dea:	0018      	movs	r0, r3
 8012dec:	46bd      	mov	sp, r7
 8012dee:	b010      	add	sp, #64	@ 0x40
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	46c0      	nop			@ (mov r8, r8)
 8012df4:	08012fd1 	.word	0x08012fd1
 8012df8:	08013105 	.word	0x08013105
 8012dfc:	0801314d 	.word	0x0801314d

08012e00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b086      	sub	sp, #24
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e08:	f3ef 8310 	mrs	r3, PRIMASK
 8012e0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8012e0e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012e10:	617b      	str	r3, [r7, #20]
 8012e12:	2301      	movs	r3, #1
 8012e14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	f383 8810 	msr	PRIMASK, r3
}
 8012e1c:	46c0      	nop			@ (mov r8, r8)
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	21c0      	movs	r1, #192	@ 0xc0
 8012e2a:	438a      	bics	r2, r1
 8012e2c:	601a      	str	r2, [r3, #0]
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	f383 8810 	msr	PRIMASK, r3
}
 8012e38:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2220      	movs	r2, #32
 8012e3e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8012e40:	46c0      	nop			@ (mov r8, r8)
 8012e42:	46bd      	mov	sp, r7
 8012e44:	b006      	add	sp, #24
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b08e      	sub	sp, #56	@ 0x38
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e50:	f3ef 8310 	mrs	r3, PRIMASK
 8012e54:	617b      	str	r3, [r7, #20]
  return(result);
 8012e56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	f383 8810 	msr	PRIMASK, r3
}
 8012e64:	46c0      	nop			@ (mov r8, r8)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	4926      	ldr	r1, [pc, #152]	@ (8012f0c <UART_EndRxTransfer+0xc4>)
 8012e72:	400a      	ands	r2, r1
 8012e74:	601a      	str	r2, [r3, #0]
 8012e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e7a:	69fb      	ldr	r3, [r7, #28]
 8012e7c:	f383 8810 	msr	PRIMASK, r3
}
 8012e80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e82:	f3ef 8310 	mrs	r3, PRIMASK
 8012e86:	623b      	str	r3, [r7, #32]
  return(result);
 8012e88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e92:	f383 8810 	msr	PRIMASK, r3
}
 8012e96:	46c0      	nop			@ (mov r8, r8)
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	689a      	ldr	r2, [r3, #8]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	2101      	movs	r1, #1
 8012ea4:	438a      	bics	r2, r1
 8012ea6:	609a      	str	r2, [r3, #8]
 8012ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eae:	f383 8810 	msr	PRIMASK, r3
}
 8012eb2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d118      	bne.n	8012eee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8012ec0:	60bb      	str	r3, [r7, #8]
  return(result);
 8012ec2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	f383 8810 	msr	PRIMASK, r3
}
 8012ed0:	46c0      	nop			@ (mov r8, r8)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	2110      	movs	r1, #16
 8012ede:	438a      	bics	r2, r1
 8012ee0:	601a      	str	r2, [r3, #0]
 8012ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	f383 8810 	msr	PRIMASK, r3
}
 8012eec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2280      	movs	r2, #128	@ 0x80
 8012ef2:	2120      	movs	r1, #32
 8012ef4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2200      	movs	r2, #0
 8012f00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012f02:	46c0      	nop			@ (mov r8, r8)
 8012f04:	46bd      	mov	sp, r7
 8012f06:	b00e      	add	sp, #56	@ 0x38
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	46c0      	nop			@ (mov r8, r8)
 8012f0c:	fffffedf 	.word	0xfffffedf

08012f10 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b08c      	sub	sp, #48	@ 0x30
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	2220      	movs	r2, #32
 8012f26:	4013      	ands	r3, r2
 8012f28:	d135      	bne.n	8012f96 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8012f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f2c:	2252      	movs	r2, #82	@ 0x52
 8012f2e:	2100      	movs	r1, #0
 8012f30:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f32:	f3ef 8310 	mrs	r3, PRIMASK
 8012f36:	60fb      	str	r3, [r7, #12]
  return(result);
 8012f38:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	f383 8810 	msr	PRIMASK, r3
}
 8012f46:	46c0      	nop			@ (mov r8, r8)
 8012f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	689a      	ldr	r2, [r3, #8]
 8012f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	2180      	movs	r1, #128	@ 0x80
 8012f54:	438a      	bics	r2, r1
 8012f56:	609a      	str	r2, [r3, #8]
 8012f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	f383 8810 	msr	PRIMASK, r3
}
 8012f62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f64:	f3ef 8310 	mrs	r3, PRIMASK
 8012f68:	61bb      	str	r3, [r7, #24]
  return(result);
 8012f6a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f6e:	2301      	movs	r3, #1
 8012f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f72:	69fb      	ldr	r3, [r7, #28]
 8012f74:	f383 8810 	msr	PRIMASK, r3
}
 8012f78:	46c0      	nop			@ (mov r8, r8)
 8012f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	681a      	ldr	r2, [r3, #0]
 8012f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	2140      	movs	r1, #64	@ 0x40
 8012f86:	430a      	orrs	r2, r1
 8012f88:	601a      	str	r2, [r3, #0]
 8012f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f8e:	6a3b      	ldr	r3, [r7, #32]
 8012f90:	f383 8810 	msr	PRIMASK, r3
}
 8012f94:	e006      	b.n	8012fa4 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8012f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f98:	228c      	movs	r2, #140	@ 0x8c
 8012f9a:	589b      	ldr	r3, [r3, r2]
 8012f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f9e:	0010      	movs	r0, r2
 8012fa0:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012fa2:	46c0      	nop			@ (mov r8, r8)
 8012fa4:	46c0      	nop			@ (mov r8, r8)
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	b00c      	add	sp, #48	@ 0x30
 8012faa:	bd80      	pop	{r7, pc}

08012fac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b084      	sub	sp, #16
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fb8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	2288      	movs	r2, #136	@ 0x88
 8012fbe:	589b      	ldr	r3, [r3, r2]
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	0010      	movs	r0, r2
 8012fc4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012fc6:	46c0      	nop			@ (mov r8, r8)
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	b004      	add	sp, #16
 8012fcc:	bd80      	pop	{r7, pc}
	...

08012fd0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b094      	sub	sp, #80	@ 0x50
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	2220      	movs	r2, #32
 8012fe6:	4013      	ands	r3, r2
 8012fe8:	d16f      	bne.n	80130ca <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8012fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fec:	225a      	movs	r2, #90	@ 0x5a
 8012fee:	2100      	movs	r1, #0
 8012ff0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8012ff6:	61bb      	str	r3, [r7, #24]
  return(result);
 8012ff8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	f383 8810 	msr	PRIMASK, r3
}
 8013006:	46c0      	nop			@ (mov r8, r8)
 8013008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	681a      	ldr	r2, [r3, #0]
 801300e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	493b      	ldr	r1, [pc, #236]	@ (8013100 <UART_DMAReceiveCplt+0x130>)
 8013014:	400a      	ands	r2, r1
 8013016:	601a      	str	r2, [r3, #0]
 8013018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801301a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801301c:	6a3b      	ldr	r3, [r7, #32]
 801301e:	f383 8810 	msr	PRIMASK, r3
}
 8013022:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013024:	f3ef 8310 	mrs	r3, PRIMASK
 8013028:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801302c:	647b      	str	r3, [r7, #68]	@ 0x44
 801302e:	2301      	movs	r3, #1
 8013030:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013034:	f383 8810 	msr	PRIMASK, r3
}
 8013038:	46c0      	nop			@ (mov r8, r8)
 801303a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	689a      	ldr	r2, [r3, #8]
 8013040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2101      	movs	r1, #1
 8013046:	438a      	bics	r2, r1
 8013048:	609a      	str	r2, [r3, #8]
 801304a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013050:	f383 8810 	msr	PRIMASK, r3
}
 8013054:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013056:	f3ef 8310 	mrs	r3, PRIMASK
 801305a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801305e:	643b      	str	r3, [r7, #64]	@ 0x40
 8013060:	2301      	movs	r3, #1
 8013062:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013066:	f383 8810 	msr	PRIMASK, r3
}
 801306a:	46c0      	nop			@ (mov r8, r8)
 801306c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	689a      	ldr	r2, [r3, #8]
 8013072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	2140      	movs	r1, #64	@ 0x40
 8013078:	438a      	bics	r2, r1
 801307a:	609a      	str	r2, [r3, #8]
 801307c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801307e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013082:	f383 8810 	msr	PRIMASK, r3
}
 8013086:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801308a:	2280      	movs	r2, #128	@ 0x80
 801308c:	2120      	movs	r1, #32
 801308e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013094:	2b01      	cmp	r3, #1
 8013096:	d118      	bne.n	80130ca <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013098:	f3ef 8310 	mrs	r3, PRIMASK
 801309c:	60fb      	str	r3, [r7, #12]
  return(result);
 801309e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80130a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80130a2:	2301      	movs	r3, #1
 80130a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	f383 8810 	msr	PRIMASK, r3
}
 80130ac:	46c0      	nop			@ (mov r8, r8)
 80130ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	681a      	ldr	r2, [r3, #0]
 80130b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2110      	movs	r1, #16
 80130ba:	438a      	bics	r2, r1
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	f383 8810 	msr	PRIMASK, r3
}
 80130c8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80130ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130cc:	2200      	movs	r2, #0
 80130ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80130d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d109      	bne.n	80130ec <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80130d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130da:	22ac      	movs	r2, #172	@ 0xac
 80130dc:	589b      	ldr	r3, [r3, r2]
 80130de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80130e0:	2158      	movs	r1, #88	@ 0x58
 80130e2:	5a51      	ldrh	r1, [r2, r1]
 80130e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80130e6:	0010      	movs	r0, r2
 80130e8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80130ea:	e005      	b.n	80130f8 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80130ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130ee:	2294      	movs	r2, #148	@ 0x94
 80130f0:	589b      	ldr	r3, [r3, r2]
 80130f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80130f4:	0010      	movs	r0, r2
 80130f6:	4798      	blx	r3
}
 80130f8:	46c0      	nop			@ (mov r8, r8)
 80130fa:	46bd      	mov	sp, r7
 80130fc:	b014      	add	sp, #80	@ 0x50
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	fffffeff 	.word	0xfffffeff

08013104 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013110:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2201      	movs	r2, #1
 8013116:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801311c:	2b01      	cmp	r3, #1
 801311e:	d10b      	bne.n	8013138 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	22ac      	movs	r2, #172	@ 0xac
 8013124:	589b      	ldr	r3, [r3, r2]
 8013126:	68fa      	ldr	r2, [r7, #12]
 8013128:	2158      	movs	r1, #88	@ 0x58
 801312a:	5a52      	ldrh	r2, [r2, r1]
 801312c:	0852      	lsrs	r2, r2, #1
 801312e:	b291      	uxth	r1, r2
 8013130:	68fa      	ldr	r2, [r7, #12]
 8013132:	0010      	movs	r0, r2
 8013134:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013136:	e005      	b.n	8013144 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2290      	movs	r2, #144	@ 0x90
 801313c:	589b      	ldr	r3, [r3, r2]
 801313e:	68fa      	ldr	r2, [r7, #12]
 8013140:	0010      	movs	r0, r2
 8013142:	4798      	blx	r3
}
 8013144:	46c0      	nop			@ (mov r8, r8)
 8013146:	46bd      	mov	sp, r7
 8013148:	b004      	add	sp, #16
 801314a:	bd80      	pop	{r7, pc}

0801314c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b086      	sub	sp, #24
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013158:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801315e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	2280      	movs	r2, #128	@ 0x80
 8013164:	589b      	ldr	r3, [r3, r2]
 8013166:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	689b      	ldr	r3, [r3, #8]
 801316e:	2280      	movs	r2, #128	@ 0x80
 8013170:	4013      	ands	r3, r2
 8013172:	2b80      	cmp	r3, #128	@ 0x80
 8013174:	d10a      	bne.n	801318c <UART_DMAError+0x40>
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	2b21      	cmp	r3, #33	@ 0x21
 801317a:	d107      	bne.n	801318c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	2252      	movs	r2, #82	@ 0x52
 8013180:	2100      	movs	r1, #0
 8013182:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	0018      	movs	r0, r3
 8013188:	f7ff fe3a 	bl	8012e00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	689b      	ldr	r3, [r3, #8]
 8013192:	2240      	movs	r2, #64	@ 0x40
 8013194:	4013      	ands	r3, r2
 8013196:	2b40      	cmp	r3, #64	@ 0x40
 8013198:	d10a      	bne.n	80131b0 <UART_DMAError+0x64>
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2b22      	cmp	r3, #34	@ 0x22
 801319e:	d107      	bne.n	80131b0 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	225a      	movs	r2, #90	@ 0x5a
 80131a4:	2100      	movs	r1, #0
 80131a6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	0018      	movs	r0, r3
 80131ac:	f7ff fe4c 	bl	8012e48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	2284      	movs	r2, #132	@ 0x84
 80131b4:	589b      	ldr	r3, [r3, r2]
 80131b6:	2210      	movs	r2, #16
 80131b8:	431a      	orrs	r2, r3
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	2184      	movs	r1, #132	@ 0x84
 80131be:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	2298      	movs	r2, #152	@ 0x98
 80131c4:	589b      	ldr	r3, [r3, r2]
 80131c6:	697a      	ldr	r2, [r7, #20]
 80131c8:	0010      	movs	r0, r2
 80131ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80131cc:	46c0      	nop			@ (mov r8, r8)
 80131ce:	46bd      	mov	sp, r7
 80131d0:	b006      	add	sp, #24
 80131d2:	bd80      	pop	{r7, pc}

080131d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b084      	sub	sp, #16
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	225a      	movs	r2, #90	@ 0x5a
 80131e6:	2100      	movs	r1, #0
 80131e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2252      	movs	r2, #82	@ 0x52
 80131ee:	2100      	movs	r1, #0
 80131f0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	2298      	movs	r2, #152	@ 0x98
 80131f6:	589b      	ldr	r3, [r3, r2]
 80131f8:	68fa      	ldr	r2, [r7, #12]
 80131fa:	0010      	movs	r0, r2
 80131fc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80131fe:	46c0      	nop			@ (mov r8, r8)
 8013200:	46bd      	mov	sp, r7
 8013202:	b004      	add	sp, #16
 8013204:	bd80      	pop	{r7, pc}

08013206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b086      	sub	sp, #24
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801320e:	f3ef 8310 	mrs	r3, PRIMASK
 8013212:	60bb      	str	r3, [r7, #8]
  return(result);
 8013214:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013216:	617b      	str	r3, [r7, #20]
 8013218:	2301      	movs	r3, #1
 801321a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	f383 8810 	msr	PRIMASK, r3
}
 8013222:	46c0      	nop			@ (mov r8, r8)
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2140      	movs	r1, #64	@ 0x40
 8013230:	438a      	bics	r2, r1
 8013232:	601a      	str	r2, [r3, #0]
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	f383 8810 	msr	PRIMASK, r3
}
 801323e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2220      	movs	r2, #32
 8013244:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2200      	movs	r2, #0
 801324a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	228c      	movs	r2, #140	@ 0x8c
 8013250:	589b      	ldr	r3, [r3, r2]
 8013252:	687a      	ldr	r2, [r7, #4]
 8013254:	0010      	movs	r0, r2
 8013256:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013258:	46c0      	nop			@ (mov r8, r8)
 801325a:	46bd      	mov	sp, r7
 801325c:	b006      	add	sp, #24
 801325e:	bd80      	pop	{r7, pc}

08013260 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013268:	46c0      	nop			@ (mov r8, r8)
 801326a:	46bd      	mov	sp, r7
 801326c:	b002      	add	sp, #8
 801326e:	bd80      	pop	{r7, pc}

08013270 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2244      	movs	r2, #68	@ 0x44
 801327c:	2100      	movs	r1, #0
 801327e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013280:	4b05      	ldr	r3, [pc, #20]	@ (8013298 <USB_EnableGlobalInt+0x28>)
 8013282:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	b299      	uxth	r1, r3
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2240      	movs	r2, #64	@ 0x40
 801328c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801328e:	2300      	movs	r3, #0
}
 8013290:	0018      	movs	r0, r3
 8013292:	46bd      	mov	sp, r7
 8013294:	b004      	add	sp, #16
 8013296:	bd80      	pop	{r7, pc}
 8013298:	0000bf80 	.word	0x0000bf80

0801329c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80132a4:	4b09      	ldr	r3, [pc, #36]	@ (80132cc <USB_DisableGlobalInt+0x30>)
 80132a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2240      	movs	r2, #64	@ 0x40
 80132ac:	5a9b      	ldrh	r3, [r3, r2]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	68fa      	ldr	r2, [r7, #12]
 80132b2:	b292      	uxth	r2, r2
 80132b4:	43d2      	mvns	r2, r2
 80132b6:	b292      	uxth	r2, r2
 80132b8:	4013      	ands	r3, r2
 80132ba:	b299      	uxth	r1, r3
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2240      	movs	r2, #64	@ 0x40
 80132c0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80132c2:	2300      	movs	r3, #0
}
 80132c4:	0018      	movs	r0, r3
 80132c6:	46bd      	mov	sp, r7
 80132c8:	b004      	add	sp, #16
 80132ca:	bd80      	pop	{r7, pc}
 80132cc:	0000bf80 	.word	0x0000bf80

080132d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80132d0:	b084      	sub	sp, #16
 80132d2:	b590      	push	{r4, r7, lr}
 80132d4:	b083      	sub	sp, #12
 80132d6:	af00      	add	r7, sp, #0
 80132d8:	6078      	str	r0, [r7, #4]
 80132da:	2004      	movs	r0, #4
 80132dc:	2410      	movs	r4, #16
 80132de:	1900      	adds	r0, r0, r4
 80132e0:	2408      	movs	r4, #8
 80132e2:	46a4      	mov	ip, r4
 80132e4:	44bc      	add	ip, r7
 80132e6:	4460      	add	r0, ip
 80132e8:	6001      	str	r1, [r0, #0]
 80132ea:	6042      	str	r2, [r0, #4]
 80132ec:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2240      	movs	r2, #64	@ 0x40
 80132f2:	2101      	movs	r1, #1
 80132f4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2240      	movs	r2, #64	@ 0x40
 80132fa:	2100      	movs	r1, #0
 80132fc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2244      	movs	r2, #68	@ 0x44
 8013302:	2100      	movs	r1, #0
 8013304:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2250      	movs	r2, #80	@ 0x50
 801330a:	2100      	movs	r1, #0
 801330c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801330e:	2300      	movs	r3, #0
}
 8013310:	0018      	movs	r0, r3
 8013312:	46bd      	mov	sp, r7
 8013314:	b003      	add	sp, #12
 8013316:	bc90      	pop	{r4, r7}
 8013318:	bc08      	pop	{r3}
 801331a:	b004      	add	sp, #16
 801331c:	4718      	bx	r3
	...

08013320 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b09c      	sub	sp, #112	@ 0x70
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801332a:	236f      	movs	r3, #111	@ 0x6f
 801332c:	18fb      	adds	r3, r7, r3
 801332e:	2200      	movs	r2, #0
 8013330:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	18d3      	adds	r3, r2, r3
 801333c:	881b      	ldrh	r3, [r3, #0]
 801333e:	b29a      	uxth	r2, r3
 8013340:	236c      	movs	r3, #108	@ 0x6c
 8013342:	18fb      	adds	r3, r7, r3
 8013344:	49a3      	ldr	r1, [pc, #652]	@ (80135d4 <USB_ActivateEndpoint+0x2b4>)
 8013346:	400a      	ands	r2, r1
 8013348:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	78db      	ldrb	r3, [r3, #3]
 801334e:	2b03      	cmp	r3, #3
 8013350:	d017      	beq.n	8013382 <USB_ActivateEndpoint+0x62>
 8013352:	dc28      	bgt.n	80133a6 <USB_ActivateEndpoint+0x86>
 8013354:	2b02      	cmp	r3, #2
 8013356:	d00e      	beq.n	8013376 <USB_ActivateEndpoint+0x56>
 8013358:	dc25      	bgt.n	80133a6 <USB_ActivateEndpoint+0x86>
 801335a:	2b00      	cmp	r3, #0
 801335c:	d002      	beq.n	8013364 <USB_ActivateEndpoint+0x44>
 801335e:	2b01      	cmp	r3, #1
 8013360:	d018      	beq.n	8013394 <USB_ActivateEndpoint+0x74>
 8013362:	e020      	b.n	80133a6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8013364:	226c      	movs	r2, #108	@ 0x6c
 8013366:	18bb      	adds	r3, r7, r2
 8013368:	18ba      	adds	r2, r7, r2
 801336a:	8812      	ldrh	r2, [r2, #0]
 801336c:	2180      	movs	r1, #128	@ 0x80
 801336e:	0089      	lsls	r1, r1, #2
 8013370:	430a      	orrs	r2, r1
 8013372:	801a      	strh	r2, [r3, #0]
      break;
 8013374:	e01c      	b.n	80133b0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8013376:	226c      	movs	r2, #108	@ 0x6c
 8013378:	18bb      	adds	r3, r7, r2
 801337a:	18ba      	adds	r2, r7, r2
 801337c:	8812      	ldrh	r2, [r2, #0]
 801337e:	801a      	strh	r2, [r3, #0]
      break;
 8013380:	e016      	b.n	80133b0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8013382:	226c      	movs	r2, #108	@ 0x6c
 8013384:	18bb      	adds	r3, r7, r2
 8013386:	18ba      	adds	r2, r7, r2
 8013388:	8812      	ldrh	r2, [r2, #0]
 801338a:	21c0      	movs	r1, #192	@ 0xc0
 801338c:	00c9      	lsls	r1, r1, #3
 801338e:	430a      	orrs	r2, r1
 8013390:	801a      	strh	r2, [r3, #0]
      break;
 8013392:	e00d      	b.n	80133b0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8013394:	226c      	movs	r2, #108	@ 0x6c
 8013396:	18bb      	adds	r3, r7, r2
 8013398:	18ba      	adds	r2, r7, r2
 801339a:	8812      	ldrh	r2, [r2, #0]
 801339c:	2180      	movs	r1, #128	@ 0x80
 801339e:	00c9      	lsls	r1, r1, #3
 80133a0:	430a      	orrs	r2, r1
 80133a2:	801a      	strh	r2, [r3, #0]
      break;
 80133a4:	e004      	b.n	80133b0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80133a6:	236f      	movs	r3, #111	@ 0x6f
 80133a8:	18fb      	adds	r3, r7, r3
 80133aa:	2201      	movs	r2, #1
 80133ac:	701a      	strb	r2, [r3, #0]
      break;
 80133ae:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80133b0:	687a      	ldr	r2, [r7, #4]
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	009b      	lsls	r3, r3, #2
 80133b8:	18d3      	adds	r3, r2, r3
 80133ba:	226c      	movs	r2, #108	@ 0x6c
 80133bc:	18ba      	adds	r2, r7, r2
 80133be:	8812      	ldrh	r2, [r2, #0]
 80133c0:	4985      	ldr	r1, [pc, #532]	@ (80135d8 <USB_ActivateEndpoint+0x2b8>)
 80133c2:	430a      	orrs	r2, r1
 80133c4:	b292      	uxth	r2, r2
 80133c6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	009b      	lsls	r3, r3, #2
 80133d0:	18d3      	adds	r3, r2, r3
 80133d2:	881b      	ldrh	r3, [r3, #0]
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	b21b      	sxth	r3, r3
 80133d8:	4a80      	ldr	r2, [pc, #512]	@ (80135dc <USB_ActivateEndpoint+0x2bc>)
 80133da:	4013      	ands	r3, r2
 80133dc:	b21a      	sxth	r2, r3
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	b21b      	sxth	r3, r3
 80133e4:	4313      	orrs	r3, r2
 80133e6:	b21a      	sxth	r2, r3
 80133e8:	2166      	movs	r1, #102	@ 0x66
 80133ea:	187b      	adds	r3, r7, r1
 80133ec:	801a      	strh	r2, [r3, #0]
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	009b      	lsls	r3, r3, #2
 80133f6:	18d3      	adds	r3, r2, r3
 80133f8:	187a      	adds	r2, r7, r1
 80133fa:	8812      	ldrh	r2, [r2, #0]
 80133fc:	4976      	ldr	r1, [pc, #472]	@ (80135d8 <USB_ActivateEndpoint+0x2b8>)
 80133fe:	430a      	orrs	r2, r1
 8013400:	b292      	uxth	r2, r2
 8013402:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	7b1b      	ldrb	r3, [r3, #12]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d000      	beq.n	801340e <USB_ActivateEndpoint+0xee>
 801340c:	e178      	b.n	8013700 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	785b      	ldrb	r3, [r3, #1]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d100      	bne.n	8013418 <USB_ActivateEndpoint+0xf8>
 8013416:	e07a      	b.n	801350e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	61bb      	str	r3, [r7, #24]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2250      	movs	r2, #80	@ 0x50
 8013420:	5a9b      	ldrh	r3, [r3, r2]
 8013422:	b29b      	uxth	r3, r3
 8013424:	001a      	movs	r2, r3
 8013426:	69bb      	ldr	r3, [r7, #24]
 8013428:	189b      	adds	r3, r3, r2
 801342a:	61bb      	str	r3, [r7, #24]
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	00da      	lsls	r2, r3, #3
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	18d3      	adds	r3, r2, r3
 8013436:	2280      	movs	r2, #128	@ 0x80
 8013438:	00d2      	lsls	r2, r2, #3
 801343a:	4694      	mov	ip, r2
 801343c:	4463      	add	r3, ip
 801343e:	617b      	str	r3, [r7, #20]
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	88db      	ldrh	r3, [r3, #6]
 8013444:	085b      	lsrs	r3, r3, #1
 8013446:	b29b      	uxth	r3, r3
 8013448:	18db      	adds	r3, r3, r3
 801344a:	b29a      	uxth	r2, r3
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013450:	687a      	ldr	r2, [r7, #4]
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	009b      	lsls	r3, r3, #2
 8013458:	18d2      	adds	r2, r2, r3
 801345a:	2112      	movs	r1, #18
 801345c:	187b      	adds	r3, r7, r1
 801345e:	8812      	ldrh	r2, [r2, #0]
 8013460:	801a      	strh	r2, [r3, #0]
 8013462:	187b      	adds	r3, r7, r1
 8013464:	881b      	ldrh	r3, [r3, #0]
 8013466:	2240      	movs	r2, #64	@ 0x40
 8013468:	4013      	ands	r3, r2
 801346a:	d016      	beq.n	801349a <USB_ActivateEndpoint+0x17a>
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	009b      	lsls	r3, r3, #2
 8013474:	18d3      	adds	r3, r2, r3
 8013476:	881b      	ldrh	r3, [r3, #0]
 8013478:	b29a      	uxth	r2, r3
 801347a:	2010      	movs	r0, #16
 801347c:	183b      	adds	r3, r7, r0
 801347e:	4957      	ldr	r1, [pc, #348]	@ (80135dc <USB_ActivateEndpoint+0x2bc>)
 8013480:	400a      	ands	r2, r1
 8013482:	801a      	strh	r2, [r3, #0]
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	009b      	lsls	r3, r3, #2
 801348c:	18d3      	adds	r3, r2, r3
 801348e:	183a      	adds	r2, r7, r0
 8013490:	8812      	ldrh	r2, [r2, #0]
 8013492:	4953      	ldr	r1, [pc, #332]	@ (80135e0 <USB_ActivateEndpoint+0x2c0>)
 8013494:	430a      	orrs	r2, r1
 8013496:	b292      	uxth	r2, r2
 8013498:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	78db      	ldrb	r3, [r3, #3]
 801349e:	2b01      	cmp	r3, #1
 80134a0:	d01d      	beq.n	80134de <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	18d3      	adds	r3, r2, r3
 80134ac:	881b      	ldrh	r3, [r3, #0]
 80134ae:	b29a      	uxth	r2, r3
 80134b0:	200c      	movs	r0, #12
 80134b2:	183b      	adds	r3, r7, r0
 80134b4:	494b      	ldr	r1, [pc, #300]	@ (80135e4 <USB_ActivateEndpoint+0x2c4>)
 80134b6:	400a      	ands	r2, r1
 80134b8:	801a      	strh	r2, [r3, #0]
 80134ba:	183b      	adds	r3, r7, r0
 80134bc:	183a      	adds	r2, r7, r0
 80134be:	8812      	ldrh	r2, [r2, #0]
 80134c0:	2120      	movs	r1, #32
 80134c2:	404a      	eors	r2, r1
 80134c4:	801a      	strh	r2, [r3, #0]
 80134c6:	687a      	ldr	r2, [r7, #4]
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	18d3      	adds	r3, r2, r3
 80134d0:	183a      	adds	r2, r7, r0
 80134d2:	8812      	ldrh	r2, [r2, #0]
 80134d4:	4940      	ldr	r1, [pc, #256]	@ (80135d8 <USB_ActivateEndpoint+0x2b8>)
 80134d6:	430a      	orrs	r2, r1
 80134d8:	b292      	uxth	r2, r2
 80134da:	801a      	strh	r2, [r3, #0]
 80134dc:	e2b4      	b.n	8013a48 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	18d3      	adds	r3, r2, r3
 80134e8:	881b      	ldrh	r3, [r3, #0]
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	200e      	movs	r0, #14
 80134ee:	183b      	adds	r3, r7, r0
 80134f0:	493c      	ldr	r1, [pc, #240]	@ (80135e4 <USB_ActivateEndpoint+0x2c4>)
 80134f2:	400a      	ands	r2, r1
 80134f4:	801a      	strh	r2, [r3, #0]
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	18d3      	adds	r3, r2, r3
 8013500:	183a      	adds	r2, r7, r0
 8013502:	8812      	ldrh	r2, [r2, #0]
 8013504:	4934      	ldr	r1, [pc, #208]	@ (80135d8 <USB_ActivateEndpoint+0x2b8>)
 8013506:	430a      	orrs	r2, r1
 8013508:	b292      	uxth	r2, r2
 801350a:	801a      	strh	r2, [r3, #0]
 801350c:	e29c      	b.n	8013a48 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	633b      	str	r3, [r7, #48]	@ 0x30
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2250      	movs	r2, #80	@ 0x50
 8013516:	5a9b      	ldrh	r3, [r3, r2]
 8013518:	b29b      	uxth	r3, r3
 801351a:	001a      	movs	r2, r3
 801351c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801351e:	189b      	adds	r3, r3, r2
 8013520:	633b      	str	r3, [r7, #48]	@ 0x30
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	00da      	lsls	r2, r3, #3
 8013528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801352a:	18d3      	adds	r3, r2, r3
 801352c:	4a2e      	ldr	r2, [pc, #184]	@ (80135e8 <USB_ActivateEndpoint+0x2c8>)
 801352e:	4694      	mov	ip, r2
 8013530:	4463      	add	r3, ip
 8013532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	88db      	ldrh	r3, [r3, #6]
 8013538:	085b      	lsrs	r3, r3, #1
 801353a:	b29b      	uxth	r3, r3
 801353c:	18db      	adds	r3, r3, r3
 801353e:	b29a      	uxth	r2, r3
 8013540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013542:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2250      	movs	r2, #80	@ 0x50
 801354c:	5a9b      	ldrh	r3, [r3, r2]
 801354e:	b29b      	uxth	r3, r3
 8013550:	001a      	movs	r2, r3
 8013552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013554:	189b      	adds	r3, r3, r2
 8013556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	00da      	lsls	r2, r3, #3
 801355e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013560:	18d3      	adds	r3, r2, r3
 8013562:	4a22      	ldr	r2, [pc, #136]	@ (80135ec <USB_ActivateEndpoint+0x2cc>)
 8013564:	4694      	mov	ip, r2
 8013566:	4463      	add	r3, ip
 8013568:	627b      	str	r3, [r7, #36]	@ 0x24
 801356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801356c:	881b      	ldrh	r3, [r3, #0]
 801356e:	b29b      	uxth	r3, r3
 8013570:	059b      	lsls	r3, r3, #22
 8013572:	0d9b      	lsrs	r3, r3, #22
 8013574:	b29a      	uxth	r2, r3
 8013576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013578:	801a      	strh	r2, [r3, #0]
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	691b      	ldr	r3, [r3, #16]
 801357e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013580:	d91a      	bls.n	80135b8 <USB_ActivateEndpoint+0x298>
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	691b      	ldr	r3, [r3, #16]
 8013586:	095b      	lsrs	r3, r3, #5
 8013588:	66bb      	str	r3, [r7, #104]	@ 0x68
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	691b      	ldr	r3, [r3, #16]
 801358e:	221f      	movs	r2, #31
 8013590:	4013      	ands	r3, r2
 8013592:	d102      	bne.n	801359a <USB_ActivateEndpoint+0x27a>
 8013594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013596:	3b01      	subs	r3, #1
 8013598:	66bb      	str	r3, [r7, #104]	@ 0x68
 801359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801359c:	881b      	ldrh	r3, [r3, #0]
 801359e:	b29a      	uxth	r2, r3
 80135a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	029b      	lsls	r3, r3, #10
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	4313      	orrs	r3, r2
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	4a10      	ldr	r2, [pc, #64]	@ (80135f0 <USB_ActivateEndpoint+0x2d0>)
 80135ae:	4313      	orrs	r3, r2
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b4:	801a      	strh	r2, [r3, #0]
 80135b6:	e034      	b.n	8013622 <USB_ActivateEndpoint+0x302>
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	691b      	ldr	r3, [r3, #16]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d119      	bne.n	80135f4 <USB_ActivateEndpoint+0x2d4>
 80135c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c2:	881b      	ldrh	r3, [r3, #0]
 80135c4:	b29b      	uxth	r3, r3
 80135c6:	4a0a      	ldr	r2, [pc, #40]	@ (80135f0 <USB_ActivateEndpoint+0x2d0>)
 80135c8:	4313      	orrs	r3, r2
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ce:	801a      	strh	r2, [r3, #0]
 80135d0:	e027      	b.n	8013622 <USB_ActivateEndpoint+0x302>
 80135d2:	46c0      	nop			@ (mov r8, r8)
 80135d4:	ffff898f 	.word	0xffff898f
 80135d8:	ffff8080 	.word	0xffff8080
 80135dc:	ffff8f8f 	.word	0xffff8f8f
 80135e0:	ffff80c0 	.word	0xffff80c0
 80135e4:	ffff8fbf 	.word	0xffff8fbf
 80135e8:	00000404 	.word	0x00000404
 80135ec:	00000406 	.word	0x00000406
 80135f0:	ffff8000 	.word	0xffff8000
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	691b      	ldr	r3, [r3, #16]
 80135f8:	085b      	lsrs	r3, r3, #1
 80135fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	691b      	ldr	r3, [r3, #16]
 8013600:	2201      	movs	r2, #1
 8013602:	4013      	ands	r3, r2
 8013604:	d002      	beq.n	801360c <USB_ActivateEndpoint+0x2ec>
 8013606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013608:	3301      	adds	r3, #1
 801360a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801360e:	881b      	ldrh	r3, [r3, #0]
 8013610:	b29a      	uxth	r2, r3
 8013612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013614:	b29b      	uxth	r3, r3
 8013616:	029b      	lsls	r3, r3, #10
 8013618:	b29b      	uxth	r3, r3
 801361a:	4313      	orrs	r3, r2
 801361c:	b29a      	uxth	r2, r3
 801361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013620:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	781b      	ldrb	r3, [r3, #0]
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	18d2      	adds	r2, r2, r3
 801362c:	2122      	movs	r1, #34	@ 0x22
 801362e:	187b      	adds	r3, r7, r1
 8013630:	8812      	ldrh	r2, [r2, #0]
 8013632:	801a      	strh	r2, [r3, #0]
 8013634:	187b      	adds	r3, r7, r1
 8013636:	881a      	ldrh	r2, [r3, #0]
 8013638:	2380      	movs	r3, #128	@ 0x80
 801363a:	01db      	lsls	r3, r3, #7
 801363c:	4013      	ands	r3, r2
 801363e:	d016      	beq.n	801366e <USB_ActivateEndpoint+0x34e>
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	009b      	lsls	r3, r3, #2
 8013648:	18d3      	adds	r3, r2, r3
 801364a:	881b      	ldrh	r3, [r3, #0]
 801364c:	b29a      	uxth	r2, r3
 801364e:	2020      	movs	r0, #32
 8013650:	183b      	adds	r3, r7, r0
 8013652:	49dd      	ldr	r1, [pc, #884]	@ (80139c8 <USB_ActivateEndpoint+0x6a8>)
 8013654:	400a      	ands	r2, r1
 8013656:	801a      	strh	r2, [r3, #0]
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	009b      	lsls	r3, r3, #2
 8013660:	18d3      	adds	r3, r2, r3
 8013662:	183a      	adds	r2, r7, r0
 8013664:	8812      	ldrh	r2, [r2, #0]
 8013666:	49d9      	ldr	r1, [pc, #868]	@ (80139cc <USB_ActivateEndpoint+0x6ac>)
 8013668:	430a      	orrs	r2, r1
 801366a:	b292      	uxth	r2, r2
 801366c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d125      	bne.n	80136c2 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	009b      	lsls	r3, r3, #2
 801367e:	18d3      	adds	r3, r2, r3
 8013680:	881b      	ldrh	r3, [r3, #0]
 8013682:	b29a      	uxth	r2, r3
 8013684:	201c      	movs	r0, #28
 8013686:	183b      	adds	r3, r7, r0
 8013688:	49d1      	ldr	r1, [pc, #836]	@ (80139d0 <USB_ActivateEndpoint+0x6b0>)
 801368a:	400a      	ands	r2, r1
 801368c:	801a      	strh	r2, [r3, #0]
 801368e:	183b      	adds	r3, r7, r0
 8013690:	183a      	adds	r2, r7, r0
 8013692:	8812      	ldrh	r2, [r2, #0]
 8013694:	2180      	movs	r1, #128	@ 0x80
 8013696:	0149      	lsls	r1, r1, #5
 8013698:	404a      	eors	r2, r1
 801369a:	801a      	strh	r2, [r3, #0]
 801369c:	183b      	adds	r3, r7, r0
 801369e:	183a      	adds	r2, r7, r0
 80136a0:	8812      	ldrh	r2, [r2, #0]
 80136a2:	2180      	movs	r1, #128	@ 0x80
 80136a4:	0189      	lsls	r1, r1, #6
 80136a6:	404a      	eors	r2, r1
 80136a8:	801a      	strh	r2, [r3, #0]
 80136aa:	687a      	ldr	r2, [r7, #4]
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	781b      	ldrb	r3, [r3, #0]
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	18d3      	adds	r3, r2, r3
 80136b4:	183a      	adds	r2, r7, r0
 80136b6:	8812      	ldrh	r2, [r2, #0]
 80136b8:	49c6      	ldr	r1, [pc, #792]	@ (80139d4 <USB_ActivateEndpoint+0x6b4>)
 80136ba:	430a      	orrs	r2, r1
 80136bc:	b292      	uxth	r2, r2
 80136be:	801a      	strh	r2, [r3, #0]
 80136c0:	e1c2      	b.n	8013a48 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	009b      	lsls	r3, r3, #2
 80136ca:	18d3      	adds	r3, r2, r3
 80136cc:	881b      	ldrh	r3, [r3, #0]
 80136ce:	b29a      	uxth	r2, r3
 80136d0:	201e      	movs	r0, #30
 80136d2:	183b      	adds	r3, r7, r0
 80136d4:	49be      	ldr	r1, [pc, #760]	@ (80139d0 <USB_ActivateEndpoint+0x6b0>)
 80136d6:	400a      	ands	r2, r1
 80136d8:	801a      	strh	r2, [r3, #0]
 80136da:	183b      	adds	r3, r7, r0
 80136dc:	183a      	adds	r2, r7, r0
 80136de:	8812      	ldrh	r2, [r2, #0]
 80136e0:	2180      	movs	r1, #128	@ 0x80
 80136e2:	0189      	lsls	r1, r1, #6
 80136e4:	404a      	eors	r2, r1
 80136e6:	801a      	strh	r2, [r3, #0]
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	009b      	lsls	r3, r3, #2
 80136f0:	18d3      	adds	r3, r2, r3
 80136f2:	183a      	adds	r2, r7, r0
 80136f4:	8812      	ldrh	r2, [r2, #0]
 80136f6:	49b7      	ldr	r1, [pc, #732]	@ (80139d4 <USB_ActivateEndpoint+0x6b4>)
 80136f8:	430a      	orrs	r2, r1
 80136fa:	b292      	uxth	r2, r2
 80136fc:	801a      	strh	r2, [r3, #0]
 80136fe:	e1a3      	b.n	8013a48 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	78db      	ldrb	r3, [r3, #3]
 8013704:	2b02      	cmp	r3, #2
 8013706:	d117      	bne.n	8013738 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	18d3      	adds	r3, r2, r3
 8013712:	881b      	ldrh	r3, [r3, #0]
 8013714:	b29a      	uxth	r2, r3
 8013716:	2062      	movs	r0, #98	@ 0x62
 8013718:	183b      	adds	r3, r7, r0
 801371a:	49ab      	ldr	r1, [pc, #684]	@ (80139c8 <USB_ActivateEndpoint+0x6a8>)
 801371c:	400a      	ands	r2, r1
 801371e:	801a      	strh	r2, [r3, #0]
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	18d3      	adds	r3, r2, r3
 801372a:	183a      	adds	r2, r7, r0
 801372c:	8812      	ldrh	r2, [r2, #0]
 801372e:	49aa      	ldr	r1, [pc, #680]	@ (80139d8 <USB_ActivateEndpoint+0x6b8>)
 8013730:	430a      	orrs	r2, r1
 8013732:	b292      	uxth	r2, r2
 8013734:	801a      	strh	r2, [r3, #0]
 8013736:	e016      	b.n	8013766 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	781b      	ldrb	r3, [r3, #0]
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	18d3      	adds	r3, r2, r3
 8013742:	881b      	ldrh	r3, [r3, #0]
 8013744:	b29a      	uxth	r2, r3
 8013746:	2064      	movs	r0, #100	@ 0x64
 8013748:	183b      	adds	r3, r7, r0
 801374a:	49a4      	ldr	r1, [pc, #656]	@ (80139dc <USB_ActivateEndpoint+0x6bc>)
 801374c:	400a      	ands	r2, r1
 801374e:	801a      	strh	r2, [r3, #0]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	009b      	lsls	r3, r3, #2
 8013758:	18d3      	adds	r3, r2, r3
 801375a:	183a      	adds	r2, r7, r0
 801375c:	8812      	ldrh	r2, [r2, #0]
 801375e:	499d      	ldr	r1, [pc, #628]	@ (80139d4 <USB_ActivateEndpoint+0x6b4>)
 8013760:	430a      	orrs	r2, r1
 8013762:	b292      	uxth	r2, r2
 8013764:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2250      	movs	r2, #80	@ 0x50
 801376e:	5a9b      	ldrh	r3, [r3, r2]
 8013770:	b29b      	uxth	r3, r3
 8013772:	001a      	movs	r2, r3
 8013774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013776:	189b      	adds	r3, r3, r2
 8013778:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	781b      	ldrb	r3, [r3, #0]
 801377e:	00da      	lsls	r2, r3, #3
 8013780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013782:	18d3      	adds	r3, r2, r3
 8013784:	2280      	movs	r2, #128	@ 0x80
 8013786:	00d2      	lsls	r2, r2, #3
 8013788:	4694      	mov	ip, r2
 801378a:	4463      	add	r3, ip
 801378c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	891b      	ldrh	r3, [r3, #8]
 8013792:	085b      	lsrs	r3, r3, #1
 8013794:	b29b      	uxth	r3, r3
 8013796:	18db      	adds	r3, r3, r3
 8013798:	b29a      	uxth	r2, r3
 801379a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801379c:	801a      	strh	r2, [r3, #0]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2250      	movs	r2, #80	@ 0x50
 80137a6:	5a9b      	ldrh	r3, [r3, r2]
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	001a      	movs	r2, r3
 80137ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137ae:	189b      	adds	r3, r3, r2
 80137b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	781b      	ldrb	r3, [r3, #0]
 80137b6:	00da      	lsls	r2, r3, #3
 80137b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137ba:	18d3      	adds	r3, r2, r3
 80137bc:	4a88      	ldr	r2, [pc, #544]	@ (80139e0 <USB_ActivateEndpoint+0x6c0>)
 80137be:	4694      	mov	ip, r2
 80137c0:	4463      	add	r3, ip
 80137c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	895b      	ldrh	r3, [r3, #10]
 80137c8:	085b      	lsrs	r3, r3, #1
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	18db      	adds	r3, r3, r3
 80137ce:	b29a      	uxth	r2, r3
 80137d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80137d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	785b      	ldrb	r3, [r3, #1]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d000      	beq.n	80137de <USB_ActivateEndpoint+0x4be>
 80137dc:	e087      	b.n	80138ee <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	18d2      	adds	r2, r2, r3
 80137e8:	2140      	movs	r1, #64	@ 0x40
 80137ea:	187b      	adds	r3, r7, r1
 80137ec:	8812      	ldrh	r2, [r2, #0]
 80137ee:	801a      	strh	r2, [r3, #0]
 80137f0:	187b      	adds	r3, r7, r1
 80137f2:	881a      	ldrh	r2, [r3, #0]
 80137f4:	2380      	movs	r3, #128	@ 0x80
 80137f6:	01db      	lsls	r3, r3, #7
 80137f8:	4013      	ands	r3, r2
 80137fa:	d016      	beq.n	801382a <USB_ActivateEndpoint+0x50a>
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	009b      	lsls	r3, r3, #2
 8013804:	18d3      	adds	r3, r2, r3
 8013806:	881b      	ldrh	r3, [r3, #0]
 8013808:	b29a      	uxth	r2, r3
 801380a:	203e      	movs	r0, #62	@ 0x3e
 801380c:	183b      	adds	r3, r7, r0
 801380e:	496e      	ldr	r1, [pc, #440]	@ (80139c8 <USB_ActivateEndpoint+0x6a8>)
 8013810:	400a      	ands	r2, r1
 8013812:	801a      	strh	r2, [r3, #0]
 8013814:	687a      	ldr	r2, [r7, #4]
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	009b      	lsls	r3, r3, #2
 801381c:	18d3      	adds	r3, r2, r3
 801381e:	183a      	adds	r2, r7, r0
 8013820:	8812      	ldrh	r2, [r2, #0]
 8013822:	496a      	ldr	r1, [pc, #424]	@ (80139cc <USB_ActivateEndpoint+0x6ac>)
 8013824:	430a      	orrs	r2, r1
 8013826:	b292      	uxth	r2, r2
 8013828:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	009b      	lsls	r3, r3, #2
 8013832:	18d2      	adds	r2, r2, r3
 8013834:	213c      	movs	r1, #60	@ 0x3c
 8013836:	187b      	adds	r3, r7, r1
 8013838:	8812      	ldrh	r2, [r2, #0]
 801383a:	801a      	strh	r2, [r3, #0]
 801383c:	187b      	adds	r3, r7, r1
 801383e:	881b      	ldrh	r3, [r3, #0]
 8013840:	2240      	movs	r2, #64	@ 0x40
 8013842:	4013      	ands	r3, r2
 8013844:	d016      	beq.n	8013874 <USB_ActivateEndpoint+0x554>
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	18d3      	adds	r3, r2, r3
 8013850:	881b      	ldrh	r3, [r3, #0]
 8013852:	b29a      	uxth	r2, r3
 8013854:	203a      	movs	r0, #58	@ 0x3a
 8013856:	183b      	adds	r3, r7, r0
 8013858:	495b      	ldr	r1, [pc, #364]	@ (80139c8 <USB_ActivateEndpoint+0x6a8>)
 801385a:	400a      	ands	r2, r1
 801385c:	801a      	strh	r2, [r3, #0]
 801385e:	687a      	ldr	r2, [r7, #4]
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	009b      	lsls	r3, r3, #2
 8013866:	18d3      	adds	r3, r2, r3
 8013868:	183a      	adds	r2, r7, r0
 801386a:	8812      	ldrh	r2, [r2, #0]
 801386c:	495d      	ldr	r1, [pc, #372]	@ (80139e4 <USB_ActivateEndpoint+0x6c4>)
 801386e:	430a      	orrs	r2, r1
 8013870:	b292      	uxth	r2, r2
 8013872:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	18d3      	adds	r3, r2, r3
 801387e:	881b      	ldrh	r3, [r3, #0]
 8013880:	b29a      	uxth	r2, r3
 8013882:	2038      	movs	r0, #56	@ 0x38
 8013884:	183b      	adds	r3, r7, r0
 8013886:	4952      	ldr	r1, [pc, #328]	@ (80139d0 <USB_ActivateEndpoint+0x6b0>)
 8013888:	400a      	ands	r2, r1
 801388a:	801a      	strh	r2, [r3, #0]
 801388c:	183b      	adds	r3, r7, r0
 801388e:	183a      	adds	r2, r7, r0
 8013890:	8812      	ldrh	r2, [r2, #0]
 8013892:	2180      	movs	r1, #128	@ 0x80
 8013894:	0149      	lsls	r1, r1, #5
 8013896:	404a      	eors	r2, r1
 8013898:	801a      	strh	r2, [r3, #0]
 801389a:	183b      	adds	r3, r7, r0
 801389c:	183a      	adds	r2, r7, r0
 801389e:	8812      	ldrh	r2, [r2, #0]
 80138a0:	2180      	movs	r1, #128	@ 0x80
 80138a2:	0189      	lsls	r1, r1, #6
 80138a4:	404a      	eors	r2, r1
 80138a6:	801a      	strh	r2, [r3, #0]
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	009b      	lsls	r3, r3, #2
 80138b0:	18d3      	adds	r3, r2, r3
 80138b2:	183a      	adds	r2, r7, r0
 80138b4:	8812      	ldrh	r2, [r2, #0]
 80138b6:	4947      	ldr	r1, [pc, #284]	@ (80139d4 <USB_ActivateEndpoint+0x6b4>)
 80138b8:	430a      	orrs	r2, r1
 80138ba:	b292      	uxth	r2, r2
 80138bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80138be:	687a      	ldr	r2, [r7, #4]
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	009b      	lsls	r3, r3, #2
 80138c6:	18d3      	adds	r3, r2, r3
 80138c8:	881b      	ldrh	r3, [r3, #0]
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	2036      	movs	r0, #54	@ 0x36
 80138ce:	183b      	adds	r3, r7, r0
 80138d0:	4945      	ldr	r1, [pc, #276]	@ (80139e8 <USB_ActivateEndpoint+0x6c8>)
 80138d2:	400a      	ands	r2, r1
 80138d4:	801a      	strh	r2, [r3, #0]
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	009b      	lsls	r3, r3, #2
 80138de:	18d3      	adds	r3, r2, r3
 80138e0:	183a      	adds	r2, r7, r0
 80138e2:	8812      	ldrh	r2, [r2, #0]
 80138e4:	493b      	ldr	r1, [pc, #236]	@ (80139d4 <USB_ActivateEndpoint+0x6b4>)
 80138e6:	430a      	orrs	r2, r1
 80138e8:	b292      	uxth	r2, r2
 80138ea:	801a      	strh	r2, [r3, #0]
 80138ec:	e0ac      	b.n	8013a48 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	009b      	lsls	r3, r3, #2
 80138f6:	18d2      	adds	r2, r2, r3
 80138f8:	214e      	movs	r1, #78	@ 0x4e
 80138fa:	187b      	adds	r3, r7, r1
 80138fc:	8812      	ldrh	r2, [r2, #0]
 80138fe:	801a      	strh	r2, [r3, #0]
 8013900:	187b      	adds	r3, r7, r1
 8013902:	881a      	ldrh	r2, [r3, #0]
 8013904:	2380      	movs	r3, #128	@ 0x80
 8013906:	01db      	lsls	r3, r3, #7
 8013908:	4013      	ands	r3, r2
 801390a:	d016      	beq.n	801393a <USB_ActivateEndpoint+0x61a>
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	18d3      	adds	r3, r2, r3
 8013916:	881b      	ldrh	r3, [r3, #0]
 8013918:	b29a      	uxth	r2, r3
 801391a:	204c      	movs	r0, #76	@ 0x4c
 801391c:	183b      	adds	r3, r7, r0
 801391e:	492a      	ldr	r1, [pc, #168]	@ (80139c8 <USB_ActivateEndpoint+0x6a8>)
 8013920:	400a      	ands	r2, r1
 8013922:	801a      	strh	r2, [r3, #0]
 8013924:	687a      	ldr	r2, [r7, #4]
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	18d3      	adds	r3, r2, r3
 801392e:	183a      	adds	r2, r7, r0
 8013930:	8812      	ldrh	r2, [r2, #0]
 8013932:	4926      	ldr	r1, [pc, #152]	@ (80139cc <USB_ActivateEndpoint+0x6ac>)
 8013934:	430a      	orrs	r2, r1
 8013936:	b292      	uxth	r2, r2
 8013938:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801393a:	687a      	ldr	r2, [r7, #4]
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	18d2      	adds	r2, r2, r3
 8013944:	214a      	movs	r1, #74	@ 0x4a
 8013946:	187b      	adds	r3, r7, r1
 8013948:	8812      	ldrh	r2, [r2, #0]
 801394a:	801a      	strh	r2, [r3, #0]
 801394c:	187b      	adds	r3, r7, r1
 801394e:	881b      	ldrh	r3, [r3, #0]
 8013950:	2240      	movs	r2, #64	@ 0x40
 8013952:	4013      	ands	r3, r2
 8013954:	d016      	beq.n	8013984 <USB_ActivateEndpoint+0x664>
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	009b      	lsls	r3, r3, #2
 801395e:	18d3      	adds	r3, r2, r3
 8013960:	881b      	ldrh	r3, [r3, #0]
 8013962:	b29a      	uxth	r2, r3
 8013964:	2048      	movs	r0, #72	@ 0x48
 8013966:	183b      	adds	r3, r7, r0
 8013968:	4917      	ldr	r1, [pc, #92]	@ (80139c8 <USB_ActivateEndpoint+0x6a8>)
 801396a:	400a      	ands	r2, r1
 801396c:	801a      	strh	r2, [r3, #0]
 801396e:	687a      	ldr	r2, [r7, #4]
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	009b      	lsls	r3, r3, #2
 8013976:	18d3      	adds	r3, r2, r3
 8013978:	183a      	adds	r2, r7, r0
 801397a:	8812      	ldrh	r2, [r2, #0]
 801397c:	4919      	ldr	r1, [pc, #100]	@ (80139e4 <USB_ActivateEndpoint+0x6c4>)
 801397e:	430a      	orrs	r2, r1
 8013980:	b292      	uxth	r2, r2
 8013982:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	78db      	ldrb	r3, [r3, #3]
 8013988:	2b01      	cmp	r3, #1
 801398a:	d02f      	beq.n	80139ec <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	18d3      	adds	r3, r2, r3
 8013996:	881b      	ldrh	r3, [r3, #0]
 8013998:	b29a      	uxth	r2, r3
 801399a:	2044      	movs	r0, #68	@ 0x44
 801399c:	183b      	adds	r3, r7, r0
 801399e:	4912      	ldr	r1, [pc, #72]	@ (80139e8 <USB_ActivateEndpoint+0x6c8>)
 80139a0:	400a      	ands	r2, r1
 80139a2:	801a      	strh	r2, [r3, #0]
 80139a4:	183b      	adds	r3, r7, r0
 80139a6:	183a      	adds	r2, r7, r0
 80139a8:	8812      	ldrh	r2, [r2, #0]
 80139aa:	2120      	movs	r1, #32
 80139ac:	404a      	eors	r2, r1
 80139ae:	801a      	strh	r2, [r3, #0]
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	18d3      	adds	r3, r2, r3
 80139ba:	183a      	adds	r2, r7, r0
 80139bc:	8812      	ldrh	r2, [r2, #0]
 80139be:	4905      	ldr	r1, [pc, #20]	@ (80139d4 <USB_ActivateEndpoint+0x6b4>)
 80139c0:	430a      	orrs	r2, r1
 80139c2:	b292      	uxth	r2, r2
 80139c4:	801a      	strh	r2, [r3, #0]
 80139c6:	e028      	b.n	8013a1a <USB_ActivateEndpoint+0x6fa>
 80139c8:	ffff8f8f 	.word	0xffff8f8f
 80139cc:	ffffc080 	.word	0xffffc080
 80139d0:	ffffbf8f 	.word	0xffffbf8f
 80139d4:	ffff8080 	.word	0xffff8080
 80139d8:	ffff8180 	.word	0xffff8180
 80139dc:	ffff8e8f 	.word	0xffff8e8f
 80139e0:	00000404 	.word	0x00000404
 80139e4:	ffff80c0 	.word	0xffff80c0
 80139e8:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80139ec:	687a      	ldr	r2, [r7, #4]
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	18d3      	adds	r3, r2, r3
 80139f6:	881b      	ldrh	r3, [r3, #0]
 80139f8:	b29a      	uxth	r2, r3
 80139fa:	2046      	movs	r0, #70	@ 0x46
 80139fc:	183b      	adds	r3, r7, r0
 80139fe:	4916      	ldr	r1, [pc, #88]	@ (8013a58 <USB_ActivateEndpoint+0x738>)
 8013a00:	400a      	ands	r2, r1
 8013a02:	801a      	strh	r2, [r3, #0]
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	009b      	lsls	r3, r3, #2
 8013a0c:	18d3      	adds	r3, r2, r3
 8013a0e:	183a      	adds	r2, r7, r0
 8013a10:	8812      	ldrh	r2, [r2, #0]
 8013a12:	4912      	ldr	r1, [pc, #72]	@ (8013a5c <USB_ActivateEndpoint+0x73c>)
 8013a14:	430a      	orrs	r2, r1
 8013a16:	b292      	uxth	r2, r2
 8013a18:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013a1a:	687a      	ldr	r2, [r7, #4]
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	781b      	ldrb	r3, [r3, #0]
 8013a20:	009b      	lsls	r3, r3, #2
 8013a22:	18d3      	adds	r3, r2, r3
 8013a24:	881b      	ldrh	r3, [r3, #0]
 8013a26:	b29a      	uxth	r2, r3
 8013a28:	2042      	movs	r0, #66	@ 0x42
 8013a2a:	183b      	adds	r3, r7, r0
 8013a2c:	490c      	ldr	r1, [pc, #48]	@ (8013a60 <USB_ActivateEndpoint+0x740>)
 8013a2e:	400a      	ands	r2, r1
 8013a30:	801a      	strh	r2, [r3, #0]
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	009b      	lsls	r3, r3, #2
 8013a3a:	18d3      	adds	r3, r2, r3
 8013a3c:	183a      	adds	r2, r7, r0
 8013a3e:	8812      	ldrh	r2, [r2, #0]
 8013a40:	4906      	ldr	r1, [pc, #24]	@ (8013a5c <USB_ActivateEndpoint+0x73c>)
 8013a42:	430a      	orrs	r2, r1
 8013a44:	b292      	uxth	r2, r2
 8013a46:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8013a48:	236f      	movs	r3, #111	@ 0x6f
 8013a4a:	18fb      	adds	r3, r7, r3
 8013a4c:	781b      	ldrb	r3, [r3, #0]
}
 8013a4e:	0018      	movs	r0, r3
 8013a50:	46bd      	mov	sp, r7
 8013a52:	b01c      	add	sp, #112	@ 0x70
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	46c0      	nop			@ (mov r8, r8)
 8013a58:	ffff8fbf 	.word	0xffff8fbf
 8013a5c:	ffff8080 	.word	0xffff8080
 8013a60:	ffffbf8f 	.word	0xffffbf8f

08013a64 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b08c      	sub	sp, #48	@ 0x30
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	7b1b      	ldrb	r3, [r3, #12]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d000      	beq.n	8013a78 <USB_DeactivateEndpoint+0x14>
 8013a76:	e07e      	b.n	8013b76 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	785b      	ldrb	r3, [r3, #1]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d03c      	beq.n	8013afa <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	009b      	lsls	r3, r3, #2
 8013a88:	18d2      	adds	r2, r2, r3
 8013a8a:	210c      	movs	r1, #12
 8013a8c:	187b      	adds	r3, r7, r1
 8013a8e:	8812      	ldrh	r2, [r2, #0]
 8013a90:	801a      	strh	r2, [r3, #0]
 8013a92:	187b      	adds	r3, r7, r1
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	2240      	movs	r2, #64	@ 0x40
 8013a98:	4013      	ands	r3, r2
 8013a9a:	d016      	beq.n	8013aca <USB_DeactivateEndpoint+0x66>
 8013a9c:	687a      	ldr	r2, [r7, #4]
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	18d3      	adds	r3, r2, r3
 8013aa6:	881b      	ldrh	r3, [r3, #0]
 8013aa8:	b29a      	uxth	r2, r3
 8013aaa:	200a      	movs	r0, #10
 8013aac:	183b      	adds	r3, r7, r0
 8013aae:	49c7      	ldr	r1, [pc, #796]	@ (8013dcc <USB_DeactivateEndpoint+0x368>)
 8013ab0:	400a      	ands	r2, r1
 8013ab2:	801a      	strh	r2, [r3, #0]
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	009b      	lsls	r3, r3, #2
 8013abc:	18d3      	adds	r3, r2, r3
 8013abe:	183a      	adds	r2, r7, r0
 8013ac0:	8812      	ldrh	r2, [r2, #0]
 8013ac2:	49c3      	ldr	r1, [pc, #780]	@ (8013dd0 <USB_DeactivateEndpoint+0x36c>)
 8013ac4:	430a      	orrs	r2, r1
 8013ac6:	b292      	uxth	r2, r2
 8013ac8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013aca:	687a      	ldr	r2, [r7, #4]
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	009b      	lsls	r3, r3, #2
 8013ad2:	18d3      	adds	r3, r2, r3
 8013ad4:	881b      	ldrh	r3, [r3, #0]
 8013ad6:	b29a      	uxth	r2, r3
 8013ad8:	2008      	movs	r0, #8
 8013ada:	183b      	adds	r3, r7, r0
 8013adc:	49bd      	ldr	r1, [pc, #756]	@ (8013dd4 <USB_DeactivateEndpoint+0x370>)
 8013ade:	400a      	ands	r2, r1
 8013ae0:	801a      	strh	r2, [r3, #0]
 8013ae2:	687a      	ldr	r2, [r7, #4]
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	781b      	ldrb	r3, [r3, #0]
 8013ae8:	009b      	lsls	r3, r3, #2
 8013aea:	18d3      	adds	r3, r2, r3
 8013aec:	183a      	adds	r2, r7, r0
 8013aee:	8812      	ldrh	r2, [r2, #0]
 8013af0:	49b9      	ldr	r1, [pc, #740]	@ (8013dd8 <USB_DeactivateEndpoint+0x374>)
 8013af2:	430a      	orrs	r2, r1
 8013af4:	b292      	uxth	r2, r2
 8013af6:	801a      	strh	r2, [r3, #0]
 8013af8:	e163      	b.n	8013dc2 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013afa:	687a      	ldr	r2, [r7, #4]
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	781b      	ldrb	r3, [r3, #0]
 8013b00:	009b      	lsls	r3, r3, #2
 8013b02:	18d2      	adds	r2, r2, r3
 8013b04:	2112      	movs	r1, #18
 8013b06:	187b      	adds	r3, r7, r1
 8013b08:	8812      	ldrh	r2, [r2, #0]
 8013b0a:	801a      	strh	r2, [r3, #0]
 8013b0c:	187b      	adds	r3, r7, r1
 8013b0e:	881a      	ldrh	r2, [r3, #0]
 8013b10:	2380      	movs	r3, #128	@ 0x80
 8013b12:	01db      	lsls	r3, r3, #7
 8013b14:	4013      	ands	r3, r2
 8013b16:	d016      	beq.n	8013b46 <USB_DeactivateEndpoint+0xe2>
 8013b18:	687a      	ldr	r2, [r7, #4]
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	009b      	lsls	r3, r3, #2
 8013b20:	18d3      	adds	r3, r2, r3
 8013b22:	881b      	ldrh	r3, [r3, #0]
 8013b24:	b29a      	uxth	r2, r3
 8013b26:	2010      	movs	r0, #16
 8013b28:	183b      	adds	r3, r7, r0
 8013b2a:	49a8      	ldr	r1, [pc, #672]	@ (8013dcc <USB_DeactivateEndpoint+0x368>)
 8013b2c:	400a      	ands	r2, r1
 8013b2e:	801a      	strh	r2, [r3, #0]
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	18d3      	adds	r3, r2, r3
 8013b3a:	183a      	adds	r2, r7, r0
 8013b3c:	8812      	ldrh	r2, [r2, #0]
 8013b3e:	49a7      	ldr	r1, [pc, #668]	@ (8013ddc <USB_DeactivateEndpoint+0x378>)
 8013b40:	430a      	orrs	r2, r1
 8013b42:	b292      	uxth	r2, r2
 8013b44:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	18d3      	adds	r3, r2, r3
 8013b50:	881b      	ldrh	r3, [r3, #0]
 8013b52:	b29a      	uxth	r2, r3
 8013b54:	200e      	movs	r0, #14
 8013b56:	183b      	adds	r3, r7, r0
 8013b58:	49a1      	ldr	r1, [pc, #644]	@ (8013de0 <USB_DeactivateEndpoint+0x37c>)
 8013b5a:	400a      	ands	r2, r1
 8013b5c:	801a      	strh	r2, [r3, #0]
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	18d3      	adds	r3, r2, r3
 8013b68:	183a      	adds	r2, r7, r0
 8013b6a:	8812      	ldrh	r2, [r2, #0]
 8013b6c:	499a      	ldr	r1, [pc, #616]	@ (8013dd8 <USB_DeactivateEndpoint+0x374>)
 8013b6e:	430a      	orrs	r2, r1
 8013b70:	b292      	uxth	r2, r2
 8013b72:	801a      	strh	r2, [r3, #0]
 8013b74:	e125      	b.n	8013dc2 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	785b      	ldrb	r3, [r3, #1]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d000      	beq.n	8013b80 <USB_DeactivateEndpoint+0x11c>
 8013b7e:	e090      	b.n	8013ca2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	009b      	lsls	r3, r3, #2
 8013b88:	18d2      	adds	r2, r2, r3
 8013b8a:	2120      	movs	r1, #32
 8013b8c:	187b      	adds	r3, r7, r1
 8013b8e:	8812      	ldrh	r2, [r2, #0]
 8013b90:	801a      	strh	r2, [r3, #0]
 8013b92:	187b      	adds	r3, r7, r1
 8013b94:	881a      	ldrh	r2, [r3, #0]
 8013b96:	2380      	movs	r3, #128	@ 0x80
 8013b98:	01db      	lsls	r3, r3, #7
 8013b9a:	4013      	ands	r3, r2
 8013b9c:	d016      	beq.n	8013bcc <USB_DeactivateEndpoint+0x168>
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	781b      	ldrb	r3, [r3, #0]
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	18d3      	adds	r3, r2, r3
 8013ba8:	881b      	ldrh	r3, [r3, #0]
 8013baa:	b29a      	uxth	r2, r3
 8013bac:	201e      	movs	r0, #30
 8013bae:	183b      	adds	r3, r7, r0
 8013bb0:	4986      	ldr	r1, [pc, #536]	@ (8013dcc <USB_DeactivateEndpoint+0x368>)
 8013bb2:	400a      	ands	r2, r1
 8013bb4:	801a      	strh	r2, [r3, #0]
 8013bb6:	687a      	ldr	r2, [r7, #4]
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	18d3      	adds	r3, r2, r3
 8013bc0:	183a      	adds	r2, r7, r0
 8013bc2:	8812      	ldrh	r2, [r2, #0]
 8013bc4:	4985      	ldr	r1, [pc, #532]	@ (8013ddc <USB_DeactivateEndpoint+0x378>)
 8013bc6:	430a      	orrs	r2, r1
 8013bc8:	b292      	uxth	r2, r2
 8013bca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013bcc:	687a      	ldr	r2, [r7, #4]
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	781b      	ldrb	r3, [r3, #0]
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	18d2      	adds	r2, r2, r3
 8013bd6:	211c      	movs	r1, #28
 8013bd8:	187b      	adds	r3, r7, r1
 8013bda:	8812      	ldrh	r2, [r2, #0]
 8013bdc:	801a      	strh	r2, [r3, #0]
 8013bde:	187b      	adds	r3, r7, r1
 8013be0:	881b      	ldrh	r3, [r3, #0]
 8013be2:	2240      	movs	r2, #64	@ 0x40
 8013be4:	4013      	ands	r3, r2
 8013be6:	d016      	beq.n	8013c16 <USB_DeactivateEndpoint+0x1b2>
 8013be8:	687a      	ldr	r2, [r7, #4]
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	009b      	lsls	r3, r3, #2
 8013bf0:	18d3      	adds	r3, r2, r3
 8013bf2:	881b      	ldrh	r3, [r3, #0]
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	201a      	movs	r0, #26
 8013bf8:	183b      	adds	r3, r7, r0
 8013bfa:	4974      	ldr	r1, [pc, #464]	@ (8013dcc <USB_DeactivateEndpoint+0x368>)
 8013bfc:	400a      	ands	r2, r1
 8013bfe:	801a      	strh	r2, [r3, #0]
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	18d3      	adds	r3, r2, r3
 8013c0a:	183a      	adds	r2, r7, r0
 8013c0c:	8812      	ldrh	r2, [r2, #0]
 8013c0e:	4970      	ldr	r1, [pc, #448]	@ (8013dd0 <USB_DeactivateEndpoint+0x36c>)
 8013c10:	430a      	orrs	r2, r1
 8013c12:	b292      	uxth	r2, r2
 8013c14:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	18d3      	adds	r3, r2, r3
 8013c20:	881b      	ldrh	r3, [r3, #0]
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	2018      	movs	r0, #24
 8013c26:	183b      	adds	r3, r7, r0
 8013c28:	4968      	ldr	r1, [pc, #416]	@ (8013dcc <USB_DeactivateEndpoint+0x368>)
 8013c2a:	400a      	ands	r2, r1
 8013c2c:	801a      	strh	r2, [r3, #0]
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	009b      	lsls	r3, r3, #2
 8013c36:	18d3      	adds	r3, r2, r3
 8013c38:	183a      	adds	r2, r7, r0
 8013c3a:	8812      	ldrh	r2, [r2, #0]
 8013c3c:	4964      	ldr	r1, [pc, #400]	@ (8013dd0 <USB_DeactivateEndpoint+0x36c>)
 8013c3e:	430a      	orrs	r2, r1
 8013c40:	b292      	uxth	r2, r2
 8013c42:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	18d3      	adds	r3, r2, r3
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	b29a      	uxth	r2, r3
 8013c52:	2016      	movs	r0, #22
 8013c54:	183b      	adds	r3, r7, r0
 8013c56:	4962      	ldr	r1, [pc, #392]	@ (8013de0 <USB_DeactivateEndpoint+0x37c>)
 8013c58:	400a      	ands	r2, r1
 8013c5a:	801a      	strh	r2, [r3, #0]
 8013c5c:	687a      	ldr	r2, [r7, #4]
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	009b      	lsls	r3, r3, #2
 8013c64:	18d3      	adds	r3, r2, r3
 8013c66:	183a      	adds	r2, r7, r0
 8013c68:	8812      	ldrh	r2, [r2, #0]
 8013c6a:	495b      	ldr	r1, [pc, #364]	@ (8013dd8 <USB_DeactivateEndpoint+0x374>)
 8013c6c:	430a      	orrs	r2, r1
 8013c6e:	b292      	uxth	r2, r2
 8013c70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	009b      	lsls	r3, r3, #2
 8013c7a:	18d3      	adds	r3, r2, r3
 8013c7c:	881b      	ldrh	r3, [r3, #0]
 8013c7e:	b29a      	uxth	r2, r3
 8013c80:	2014      	movs	r0, #20
 8013c82:	183b      	adds	r3, r7, r0
 8013c84:	4953      	ldr	r1, [pc, #332]	@ (8013dd4 <USB_DeactivateEndpoint+0x370>)
 8013c86:	400a      	ands	r2, r1
 8013c88:	801a      	strh	r2, [r3, #0]
 8013c8a:	687a      	ldr	r2, [r7, #4]
 8013c8c:	683b      	ldr	r3, [r7, #0]
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	009b      	lsls	r3, r3, #2
 8013c92:	18d3      	adds	r3, r2, r3
 8013c94:	183a      	adds	r2, r7, r0
 8013c96:	8812      	ldrh	r2, [r2, #0]
 8013c98:	494f      	ldr	r1, [pc, #316]	@ (8013dd8 <USB_DeactivateEndpoint+0x374>)
 8013c9a:	430a      	orrs	r2, r1
 8013c9c:	b292      	uxth	r2, r2
 8013c9e:	801a      	strh	r2, [r3, #0]
 8013ca0:	e08f      	b.n	8013dc2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013ca2:	687a      	ldr	r2, [r7, #4]
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	009b      	lsls	r3, r3, #2
 8013caa:	18d2      	adds	r2, r2, r3
 8013cac:	212e      	movs	r1, #46	@ 0x2e
 8013cae:	187b      	adds	r3, r7, r1
 8013cb0:	8812      	ldrh	r2, [r2, #0]
 8013cb2:	801a      	strh	r2, [r3, #0]
 8013cb4:	187b      	adds	r3, r7, r1
 8013cb6:	881a      	ldrh	r2, [r3, #0]
 8013cb8:	2380      	movs	r3, #128	@ 0x80
 8013cba:	01db      	lsls	r3, r3, #7
 8013cbc:	4013      	ands	r3, r2
 8013cbe:	d016      	beq.n	8013cee <USB_DeactivateEndpoint+0x28a>
 8013cc0:	687a      	ldr	r2, [r7, #4]
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	781b      	ldrb	r3, [r3, #0]
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	18d3      	adds	r3, r2, r3
 8013cca:	881b      	ldrh	r3, [r3, #0]
 8013ccc:	b29a      	uxth	r2, r3
 8013cce:	202c      	movs	r0, #44	@ 0x2c
 8013cd0:	183b      	adds	r3, r7, r0
 8013cd2:	493e      	ldr	r1, [pc, #248]	@ (8013dcc <USB_DeactivateEndpoint+0x368>)
 8013cd4:	400a      	ands	r2, r1
 8013cd6:	801a      	strh	r2, [r3, #0]
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	009b      	lsls	r3, r3, #2
 8013ce0:	18d3      	adds	r3, r2, r3
 8013ce2:	183a      	adds	r2, r7, r0
 8013ce4:	8812      	ldrh	r2, [r2, #0]
 8013ce6:	493d      	ldr	r1, [pc, #244]	@ (8013ddc <USB_DeactivateEndpoint+0x378>)
 8013ce8:	430a      	orrs	r2, r1
 8013cea:	b292      	uxth	r2, r2
 8013cec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013cee:	687a      	ldr	r2, [r7, #4]
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	781b      	ldrb	r3, [r3, #0]
 8013cf4:	009b      	lsls	r3, r3, #2
 8013cf6:	18d2      	adds	r2, r2, r3
 8013cf8:	212a      	movs	r1, #42	@ 0x2a
 8013cfa:	187b      	adds	r3, r7, r1
 8013cfc:	8812      	ldrh	r2, [r2, #0]
 8013cfe:	801a      	strh	r2, [r3, #0]
 8013d00:	187b      	adds	r3, r7, r1
 8013d02:	881b      	ldrh	r3, [r3, #0]
 8013d04:	2240      	movs	r2, #64	@ 0x40
 8013d06:	4013      	ands	r3, r2
 8013d08:	d016      	beq.n	8013d38 <USB_DeactivateEndpoint+0x2d4>
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	18d3      	adds	r3, r2, r3
 8013d14:	881b      	ldrh	r3, [r3, #0]
 8013d16:	b29a      	uxth	r2, r3
 8013d18:	2028      	movs	r0, #40	@ 0x28
 8013d1a:	183b      	adds	r3, r7, r0
 8013d1c:	492b      	ldr	r1, [pc, #172]	@ (8013dcc <USB_DeactivateEndpoint+0x368>)
 8013d1e:	400a      	ands	r2, r1
 8013d20:	801a      	strh	r2, [r3, #0]
 8013d22:	687a      	ldr	r2, [r7, #4]
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	009b      	lsls	r3, r3, #2
 8013d2a:	18d3      	adds	r3, r2, r3
 8013d2c:	183a      	adds	r2, r7, r0
 8013d2e:	8812      	ldrh	r2, [r2, #0]
 8013d30:	4927      	ldr	r1, [pc, #156]	@ (8013dd0 <USB_DeactivateEndpoint+0x36c>)
 8013d32:	430a      	orrs	r2, r1
 8013d34:	b292      	uxth	r2, r2
 8013d36:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013d38:	687a      	ldr	r2, [r7, #4]
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	009b      	lsls	r3, r3, #2
 8013d40:	18d3      	adds	r3, r2, r3
 8013d42:	881b      	ldrh	r3, [r3, #0]
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	2026      	movs	r0, #38	@ 0x26
 8013d48:	183b      	adds	r3, r7, r0
 8013d4a:	4920      	ldr	r1, [pc, #128]	@ (8013dcc <USB_DeactivateEndpoint+0x368>)
 8013d4c:	400a      	ands	r2, r1
 8013d4e:	801a      	strh	r2, [r3, #0]
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	781b      	ldrb	r3, [r3, #0]
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	18d3      	adds	r3, r2, r3
 8013d5a:	183a      	adds	r2, r7, r0
 8013d5c:	8812      	ldrh	r2, [r2, #0]
 8013d5e:	491f      	ldr	r1, [pc, #124]	@ (8013ddc <USB_DeactivateEndpoint+0x378>)
 8013d60:	430a      	orrs	r2, r1
 8013d62:	b292      	uxth	r2, r2
 8013d64:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	009b      	lsls	r3, r3, #2
 8013d6e:	18d3      	adds	r3, r2, r3
 8013d70:	881b      	ldrh	r3, [r3, #0]
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	2024      	movs	r0, #36	@ 0x24
 8013d76:	183b      	adds	r3, r7, r0
 8013d78:	4916      	ldr	r1, [pc, #88]	@ (8013dd4 <USB_DeactivateEndpoint+0x370>)
 8013d7a:	400a      	ands	r2, r1
 8013d7c:	801a      	strh	r2, [r3, #0]
 8013d7e:	687a      	ldr	r2, [r7, #4]
 8013d80:	683b      	ldr	r3, [r7, #0]
 8013d82:	781b      	ldrb	r3, [r3, #0]
 8013d84:	009b      	lsls	r3, r3, #2
 8013d86:	18d3      	adds	r3, r2, r3
 8013d88:	183a      	adds	r2, r7, r0
 8013d8a:	8812      	ldrh	r2, [r2, #0]
 8013d8c:	4912      	ldr	r1, [pc, #72]	@ (8013dd8 <USB_DeactivateEndpoint+0x374>)
 8013d8e:	430a      	orrs	r2, r1
 8013d90:	b292      	uxth	r2, r2
 8013d92:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	009b      	lsls	r3, r3, #2
 8013d9c:	18d3      	adds	r3, r2, r3
 8013d9e:	881b      	ldrh	r3, [r3, #0]
 8013da0:	b29a      	uxth	r2, r3
 8013da2:	2022      	movs	r0, #34	@ 0x22
 8013da4:	183b      	adds	r3, r7, r0
 8013da6:	490e      	ldr	r1, [pc, #56]	@ (8013de0 <USB_DeactivateEndpoint+0x37c>)
 8013da8:	400a      	ands	r2, r1
 8013daa:	801a      	strh	r2, [r3, #0]
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	009b      	lsls	r3, r3, #2
 8013db4:	18d3      	adds	r3, r2, r3
 8013db6:	183a      	adds	r2, r7, r0
 8013db8:	8812      	ldrh	r2, [r2, #0]
 8013dba:	4907      	ldr	r1, [pc, #28]	@ (8013dd8 <USB_DeactivateEndpoint+0x374>)
 8013dbc:	430a      	orrs	r2, r1
 8013dbe:	b292      	uxth	r2, r2
 8013dc0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8013dc2:	2300      	movs	r3, #0
}
 8013dc4:	0018      	movs	r0, r3
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	b00c      	add	sp, #48	@ 0x30
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	ffff8f8f 	.word	0xffff8f8f
 8013dd0:	ffff80c0 	.word	0xffff80c0
 8013dd4:	ffff8fbf 	.word	0xffff8fbf
 8013dd8:	ffff8080 	.word	0xffff8080
 8013ddc:	ffffc080 	.word	0xffffc080
 8013de0:	ffffbf8f 	.word	0xffffbf8f

08013de4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013de4:	b590      	push	{r4, r7, lr}
 8013de6:	b0c3      	sub	sp, #268	@ 0x10c
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	785b      	ldrb	r3, [r3, #1]
 8013df2:	2b01      	cmp	r3, #1
 8013df4:	d001      	beq.n	8013dfa <USB_EPStartXfer+0x16>
 8013df6:	f000 fd2d 	bl	8014854 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	699a      	ldr	r2, [r3, #24]
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	691b      	ldr	r3, [r3, #16]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d905      	bls.n	8013e12 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	691b      	ldr	r3, [r3, #16]
 8013e0a:	1d7a      	adds	r2, r7, #5
 8013e0c:	32ff      	adds	r2, #255	@ 0xff
 8013e0e:	6013      	str	r3, [r2, #0]
 8013e10:	e004      	b.n	8013e1c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	699b      	ldr	r3, [r3, #24]
 8013e16:	1d7a      	adds	r2, r7, #5
 8013e18:	32ff      	adds	r2, #255	@ 0xff
 8013e1a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	7b1b      	ldrb	r3, [r3, #12]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d125      	bne.n	8013e70 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	6959      	ldr	r1, [r3, #20]
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	88da      	ldrh	r2, [r3, #6]
 8013e2c:	1d7b      	adds	r3, r7, #5
 8013e2e:	33ff      	adds	r3, #255	@ 0xff
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	b29b      	uxth	r3, r3
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f001 fa47 	bl	80152c8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	613b      	str	r3, [r7, #16]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2250      	movs	r2, #80	@ 0x50
 8013e42:	5a9b      	ldrh	r3, [r3, r2]
 8013e44:	b29b      	uxth	r3, r3
 8013e46:	001a      	movs	r2, r3
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	189b      	adds	r3, r3, r2
 8013e4c:	613b      	str	r3, [r7, #16]
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	00da      	lsls	r2, r3, #3
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	18d3      	adds	r3, r2, r3
 8013e58:	4ad7      	ldr	r2, [pc, #860]	@ (80141b8 <USB_EPStartXfer+0x3d4>)
 8013e5a:	4694      	mov	ip, r2
 8013e5c:	4463      	add	r3, ip
 8013e5e:	60fb      	str	r3, [r7, #12]
 8013e60:	1d7b      	adds	r3, r7, #5
 8013e62:	33ff      	adds	r3, #255	@ 0xff
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	801a      	strh	r2, [r3, #0]
 8013e6c:	f000 fccd 	bl	801480a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	78db      	ldrb	r3, [r3, #3]
 8013e74:	2b02      	cmp	r3, #2
 8013e76:	d000      	beq.n	8013e7a <USB_EPStartXfer+0x96>
 8013e78:	e362      	b.n	8014540 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	6a1a      	ldr	r2, [r3, #32]
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	691b      	ldr	r3, [r3, #16]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d800      	bhi.n	8013e88 <USB_EPStartXfer+0xa4>
 8013e86:	e309      	b.n	801449c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013e88:	687a      	ldr	r2, [r7, #4]
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	009b      	lsls	r3, r3, #2
 8013e90:	18d3      	adds	r3, r2, r3
 8013e92:	881b      	ldrh	r3, [r3, #0]
 8013e94:	b29a      	uxth	r2, r3
 8013e96:	2056      	movs	r0, #86	@ 0x56
 8013e98:	183b      	adds	r3, r7, r0
 8013e9a:	49c8      	ldr	r1, [pc, #800]	@ (80141bc <USB_EPStartXfer+0x3d8>)
 8013e9c:	400a      	ands	r2, r1
 8013e9e:	801a      	strh	r2, [r3, #0]
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	009b      	lsls	r3, r3, #2
 8013ea8:	18d3      	adds	r3, r2, r3
 8013eaa:	183a      	adds	r2, r7, r0
 8013eac:	8812      	ldrh	r2, [r2, #0]
 8013eae:	49c4      	ldr	r1, [pc, #784]	@ (80141c0 <USB_EPStartXfer+0x3dc>)
 8013eb0:	430a      	orrs	r2, r1
 8013eb2:	b292      	uxth	r2, r2
 8013eb4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	6a1a      	ldr	r2, [r3, #32]
 8013eba:	1d7b      	adds	r3, r7, #5
 8013ebc:	33ff      	adds	r3, #255	@ 0xff
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	1ad2      	subs	r2, r2, r3
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	18d3      	adds	r3, r2, r3
 8013ed0:	881b      	ldrh	r3, [r3, #0]
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	001a      	movs	r2, r3
 8013ed6:	2340      	movs	r3, #64	@ 0x40
 8013ed8:	4013      	ands	r3, r2
 8013eda:	d100      	bne.n	8013ede <USB_EPStartXfer+0xfa>
 8013edc:	e176      	b.n	80141cc <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	785b      	ldrb	r3, [r3, #1]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d000      	beq.n	8013eec <USB_EPStartXfer+0x108>
 8013eea:	e074      	b.n	8013fd6 <USB_EPStartXfer+0x1f2>
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2250      	movs	r2, #80	@ 0x50
 8013ef4:	5a9b      	ldrh	r3, [r3, r2]
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	001a      	movs	r2, r3
 8013efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013efc:	189b      	adds	r3, r3, r2
 8013efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	00da      	lsls	r2, r3, #3
 8013f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f08:	18d3      	adds	r3, r2, r3
 8013f0a:	4aae      	ldr	r2, [pc, #696]	@ (80141c4 <USB_EPStartXfer+0x3e0>)
 8013f0c:	4694      	mov	ip, r2
 8013f0e:	4463      	add	r3, ip
 8013f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f14:	881b      	ldrh	r3, [r3, #0]
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	059b      	lsls	r3, r3, #22
 8013f1a:	0d9b      	lsrs	r3, r3, #22
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f20:	801a      	strh	r2, [r3, #0]
 8013f22:	1d7b      	adds	r3, r7, #5
 8013f24:	33ff      	adds	r3, #255	@ 0xff
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2b3e      	cmp	r3, #62	@ 0x3e
 8013f2a:	d924      	bls.n	8013f76 <USB_EPStartXfer+0x192>
 8013f2c:	1d7b      	adds	r3, r7, #5
 8013f2e:	33ff      	adds	r3, #255	@ 0xff
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	095b      	lsrs	r3, r3, #5
 8013f34:	1c7a      	adds	r2, r7, #1
 8013f36:	32ff      	adds	r2, #255	@ 0xff
 8013f38:	6013      	str	r3, [r2, #0]
 8013f3a:	1d7b      	adds	r3, r7, #5
 8013f3c:	33ff      	adds	r3, #255	@ 0xff
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	221f      	movs	r2, #31
 8013f42:	4013      	ands	r3, r2
 8013f44:	d106      	bne.n	8013f54 <USB_EPStartXfer+0x170>
 8013f46:	1c7b      	adds	r3, r7, #1
 8013f48:	33ff      	adds	r3, #255	@ 0xff
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3b01      	subs	r3, #1
 8013f4e:	1c7a      	adds	r2, r7, #1
 8013f50:	32ff      	adds	r2, #255	@ 0xff
 8013f52:	6013      	str	r3, [r2, #0]
 8013f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f56:	881b      	ldrh	r3, [r3, #0]
 8013f58:	b29a      	uxth	r2, r3
 8013f5a:	1c7b      	adds	r3, r7, #1
 8013f5c:	33ff      	adds	r3, #255	@ 0xff
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	029b      	lsls	r3, r3, #10
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	4313      	orrs	r3, r2
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	4a97      	ldr	r2, [pc, #604]	@ (80141c8 <USB_EPStartXfer+0x3e4>)
 8013f6c:	4313      	orrs	r3, r2
 8013f6e:	b29a      	uxth	r2, r3
 8013f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f72:	801a      	strh	r2, [r3, #0]
 8013f74:	e04a      	b.n	801400c <USB_EPStartXfer+0x228>
 8013f76:	1d7b      	adds	r3, r7, #5
 8013f78:	33ff      	adds	r3, #255	@ 0xff
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d108      	bne.n	8013f92 <USB_EPStartXfer+0x1ae>
 8013f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f82:	881b      	ldrh	r3, [r3, #0]
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	4a90      	ldr	r2, [pc, #576]	@ (80141c8 <USB_EPStartXfer+0x3e4>)
 8013f88:	4313      	orrs	r3, r2
 8013f8a:	b29a      	uxth	r2, r3
 8013f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8e:	801a      	strh	r2, [r3, #0]
 8013f90:	e03c      	b.n	801400c <USB_EPStartXfer+0x228>
 8013f92:	1d7b      	adds	r3, r7, #5
 8013f94:	33ff      	adds	r3, #255	@ 0xff
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	085b      	lsrs	r3, r3, #1
 8013f9a:	1c7a      	adds	r2, r7, #1
 8013f9c:	32ff      	adds	r2, #255	@ 0xff
 8013f9e:	6013      	str	r3, [r2, #0]
 8013fa0:	1d7b      	adds	r3, r7, #5
 8013fa2:	33ff      	adds	r3, #255	@ 0xff
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2201      	movs	r2, #1
 8013fa8:	4013      	ands	r3, r2
 8013faa:	d006      	beq.n	8013fba <USB_EPStartXfer+0x1d6>
 8013fac:	1c7b      	adds	r3, r7, #1
 8013fae:	33ff      	adds	r3, #255	@ 0xff
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	3301      	adds	r3, #1
 8013fb4:	1c7a      	adds	r2, r7, #1
 8013fb6:	32ff      	adds	r2, #255	@ 0xff
 8013fb8:	6013      	str	r3, [r2, #0]
 8013fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fbc:	881b      	ldrh	r3, [r3, #0]
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	1c7b      	adds	r3, r7, #1
 8013fc2:	33ff      	adds	r3, #255	@ 0xff
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	b29b      	uxth	r3, r3
 8013fc8:	029b      	lsls	r3, r3, #10
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	4313      	orrs	r3, r2
 8013fce:	b29a      	uxth	r2, r3
 8013fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fd2:	801a      	strh	r2, [r3, #0]
 8013fd4:	e01a      	b.n	801400c <USB_EPStartXfer+0x228>
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	785b      	ldrb	r3, [r3, #1]
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	d116      	bne.n	801400c <USB_EPStartXfer+0x228>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2250      	movs	r2, #80	@ 0x50
 8013fe2:	5a9b      	ldrh	r3, [r3, r2]
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	001a      	movs	r2, r3
 8013fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fea:	189b      	adds	r3, r3, r2
 8013fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	00da      	lsls	r2, r3, #3
 8013ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ff6:	18d3      	adds	r3, r2, r3
 8013ff8:	4a72      	ldr	r2, [pc, #456]	@ (80141c4 <USB_EPStartXfer+0x3e0>)
 8013ffa:	4694      	mov	ip, r2
 8013ffc:	4463      	add	r3, ip
 8013ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014000:	1d7b      	adds	r3, r7, #5
 8014002:	33ff      	adds	r3, #255	@ 0xff
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	b29a      	uxth	r2, r3
 8014008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801400a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801400c:	2076      	movs	r0, #118	@ 0x76
 801400e:	183b      	adds	r3, r7, r0
 8014010:	683a      	ldr	r2, [r7, #0]
 8014012:	8952      	ldrh	r2, [r2, #10]
 8014014:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	6959      	ldr	r1, [r3, #20]
 801401a:	1d7b      	adds	r3, r7, #5
 801401c:	33ff      	adds	r3, #255	@ 0xff
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	b29c      	uxth	r4, r3
 8014022:	183b      	adds	r3, r7, r0
 8014024:	881a      	ldrh	r2, [r3, #0]
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	0023      	movs	r3, r4
 801402a:	f001 f94d 	bl	80152c8 <USB_WritePMA>
            ep->xfer_buff += len;
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	695a      	ldr	r2, [r3, #20]
 8014032:	1d7b      	adds	r3, r7, #5
 8014034:	33ff      	adds	r3, #255	@ 0xff
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	18d2      	adds	r2, r2, r3
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	6a1a      	ldr	r2, [r3, #32]
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	691b      	ldr	r3, [r3, #16]
 8014046:	429a      	cmp	r2, r3
 8014048:	d908      	bls.n	801405c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	6a1a      	ldr	r2, [r3, #32]
 801404e:	1d7b      	adds	r3, r7, #5
 8014050:	33ff      	adds	r3, #255	@ 0xff
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	1ad2      	subs	r2, r2, r3
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	621a      	str	r2, [r3, #32]
 801405a:	e007      	b.n	801406c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	6a1b      	ldr	r3, [r3, #32]
 8014060:	1d7a      	adds	r2, r7, #5
 8014062:	32ff      	adds	r2, #255	@ 0xff
 8014064:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	2200      	movs	r2, #0
 801406a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	785b      	ldrb	r3, [r3, #1]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d000      	beq.n	8014076 <USB_EPStartXfer+0x292>
 8014074:	e070      	b.n	8014158 <USB_EPStartXfer+0x374>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	61bb      	str	r3, [r7, #24]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2250      	movs	r2, #80	@ 0x50
 801407e:	5a9b      	ldrh	r3, [r3, r2]
 8014080:	b29b      	uxth	r3, r3
 8014082:	001a      	movs	r2, r3
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	189b      	adds	r3, r3, r2
 8014088:	61bb      	str	r3, [r7, #24]
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	00da      	lsls	r2, r3, #3
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	18d3      	adds	r3, r2, r3
 8014094:	4a48      	ldr	r2, [pc, #288]	@ (80141b8 <USB_EPStartXfer+0x3d4>)
 8014096:	4694      	mov	ip, r2
 8014098:	4463      	add	r3, ip
 801409a:	617b      	str	r3, [r7, #20]
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	881b      	ldrh	r3, [r3, #0]
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	059b      	lsls	r3, r3, #22
 80140a4:	0d9b      	lsrs	r3, r3, #22
 80140a6:	b29a      	uxth	r2, r3
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	801a      	strh	r2, [r3, #0]
 80140ac:	1d7b      	adds	r3, r7, #5
 80140ae:	33ff      	adds	r3, #255	@ 0xff
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80140b4:	d922      	bls.n	80140fc <USB_EPStartXfer+0x318>
 80140b6:	1d7b      	adds	r3, r7, #5
 80140b8:	33ff      	adds	r3, #255	@ 0xff
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	095b      	lsrs	r3, r3, #5
 80140be:	21fc      	movs	r1, #252	@ 0xfc
 80140c0:	187a      	adds	r2, r7, r1
 80140c2:	6013      	str	r3, [r2, #0]
 80140c4:	1d7b      	adds	r3, r7, #5
 80140c6:	33ff      	adds	r3, #255	@ 0xff
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	221f      	movs	r2, #31
 80140cc:	4013      	ands	r3, r2
 80140ce:	d104      	bne.n	80140da <USB_EPStartXfer+0x2f6>
 80140d0:	187b      	adds	r3, r7, r1
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	3b01      	subs	r3, #1
 80140d6:	187a      	adds	r2, r7, r1
 80140d8:	6013      	str	r3, [r2, #0]
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	881b      	ldrh	r3, [r3, #0]
 80140de:	b29a      	uxth	r2, r3
 80140e0:	23fc      	movs	r3, #252	@ 0xfc
 80140e2:	18fb      	adds	r3, r7, r3
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	029b      	lsls	r3, r3, #10
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	4313      	orrs	r3, r2
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	4a35      	ldr	r2, [pc, #212]	@ (80141c8 <USB_EPStartXfer+0x3e4>)
 80140f2:	4313      	orrs	r3, r2
 80140f4:	b29a      	uxth	r2, r3
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	801a      	strh	r2, [r3, #0]
 80140fa:	e04a      	b.n	8014192 <USB_EPStartXfer+0x3ae>
 80140fc:	1d7b      	adds	r3, r7, #5
 80140fe:	33ff      	adds	r3, #255	@ 0xff
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d108      	bne.n	8014118 <USB_EPStartXfer+0x334>
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	881b      	ldrh	r3, [r3, #0]
 801410a:	b29b      	uxth	r3, r3
 801410c:	4a2e      	ldr	r2, [pc, #184]	@ (80141c8 <USB_EPStartXfer+0x3e4>)
 801410e:	4313      	orrs	r3, r2
 8014110:	b29a      	uxth	r2, r3
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	801a      	strh	r2, [r3, #0]
 8014116:	e03c      	b.n	8014192 <USB_EPStartXfer+0x3ae>
 8014118:	1d7b      	adds	r3, r7, #5
 801411a:	33ff      	adds	r3, #255	@ 0xff
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	085b      	lsrs	r3, r3, #1
 8014120:	21fc      	movs	r1, #252	@ 0xfc
 8014122:	187a      	adds	r2, r7, r1
 8014124:	6013      	str	r3, [r2, #0]
 8014126:	1d7b      	adds	r3, r7, #5
 8014128:	33ff      	adds	r3, #255	@ 0xff
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2201      	movs	r2, #1
 801412e:	4013      	ands	r3, r2
 8014130:	d004      	beq.n	801413c <USB_EPStartXfer+0x358>
 8014132:	187b      	adds	r3, r7, r1
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	3301      	adds	r3, #1
 8014138:	187a      	adds	r2, r7, r1
 801413a:	6013      	str	r3, [r2, #0]
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	881b      	ldrh	r3, [r3, #0]
 8014140:	b29a      	uxth	r2, r3
 8014142:	23fc      	movs	r3, #252	@ 0xfc
 8014144:	18fb      	adds	r3, r7, r3
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	b29b      	uxth	r3, r3
 801414a:	029b      	lsls	r3, r3, #10
 801414c:	b29b      	uxth	r3, r3
 801414e:	4313      	orrs	r3, r2
 8014150:	b29a      	uxth	r2, r3
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	801a      	strh	r2, [r3, #0]
 8014156:	e01c      	b.n	8014192 <USB_EPStartXfer+0x3ae>
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	785b      	ldrb	r3, [r3, #1]
 801415c:	2b01      	cmp	r3, #1
 801415e:	d118      	bne.n	8014192 <USB_EPStartXfer+0x3ae>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	623b      	str	r3, [r7, #32]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2250      	movs	r2, #80	@ 0x50
 8014168:	5a9b      	ldrh	r3, [r3, r2]
 801416a:	b29b      	uxth	r3, r3
 801416c:	001a      	movs	r2, r3
 801416e:	6a3b      	ldr	r3, [r7, #32]
 8014170:	189b      	adds	r3, r3, r2
 8014172:	623b      	str	r3, [r7, #32]
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	00da      	lsls	r2, r3, #3
 801417a:	6a3b      	ldr	r3, [r7, #32]
 801417c:	18d3      	adds	r3, r2, r3
 801417e:	4a0e      	ldr	r2, [pc, #56]	@ (80141b8 <USB_EPStartXfer+0x3d4>)
 8014180:	4694      	mov	ip, r2
 8014182:	4463      	add	r3, ip
 8014184:	61fb      	str	r3, [r7, #28]
 8014186:	1d7b      	adds	r3, r7, #5
 8014188:	33ff      	adds	r3, #255	@ 0xff
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	b29a      	uxth	r2, r3
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8014192:	2076      	movs	r0, #118	@ 0x76
 8014194:	183b      	adds	r3, r7, r0
 8014196:	683a      	ldr	r2, [r7, #0]
 8014198:	8912      	ldrh	r2, [r2, #8]
 801419a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	6959      	ldr	r1, [r3, #20]
 80141a0:	1d7b      	adds	r3, r7, #5
 80141a2:	33ff      	adds	r3, #255	@ 0xff
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	b29c      	uxth	r4, r3
 80141a8:	183b      	adds	r3, r7, r0
 80141aa:	881a      	ldrh	r2, [r3, #0]
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	0023      	movs	r3, r4
 80141b0:	f001 f88a 	bl	80152c8 <USB_WritePMA>
 80141b4:	e329      	b.n	801480a <USB_EPStartXfer+0xa26>
 80141b6:	46c0      	nop			@ (mov r8, r8)
 80141b8:	00000402 	.word	0x00000402
 80141bc:	ffff8f8f 	.word	0xffff8f8f
 80141c0:	ffff8180 	.word	0xffff8180
 80141c4:	00000406 	.word	0x00000406
 80141c8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	785b      	ldrb	r3, [r3, #1]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d000      	beq.n	80141d6 <USB_EPStartXfer+0x3f2>
 80141d4:	e070      	b.n	80142b8 <USB_EPStartXfer+0x4d4>
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2250      	movs	r2, #80	@ 0x50
 80141de:	5a9b      	ldrh	r3, [r3, r2]
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	001a      	movs	r2, r3
 80141e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80141e6:	189b      	adds	r3, r3, r2
 80141e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	00da      	lsls	r2, r3, #3
 80141f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80141f2:	18d3      	adds	r3, r2, r3
 80141f4:	4acd      	ldr	r2, [pc, #820]	@ (801452c <USB_EPStartXfer+0x748>)
 80141f6:	4694      	mov	ip, r2
 80141f8:	4463      	add	r3, ip
 80141fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80141fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141fe:	881b      	ldrh	r3, [r3, #0]
 8014200:	b29b      	uxth	r3, r3
 8014202:	059b      	lsls	r3, r3, #22
 8014204:	0d9b      	lsrs	r3, r3, #22
 8014206:	b29a      	uxth	r2, r3
 8014208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801420a:	801a      	strh	r2, [r3, #0]
 801420c:	1d7b      	adds	r3, r7, #5
 801420e:	33ff      	adds	r3, #255	@ 0xff
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	2b3e      	cmp	r3, #62	@ 0x3e
 8014214:	d922      	bls.n	801425c <USB_EPStartXfer+0x478>
 8014216:	1d7b      	adds	r3, r7, #5
 8014218:	33ff      	adds	r3, #255	@ 0xff
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	095b      	lsrs	r3, r3, #5
 801421e:	21f8      	movs	r1, #248	@ 0xf8
 8014220:	187a      	adds	r2, r7, r1
 8014222:	6013      	str	r3, [r2, #0]
 8014224:	1d7b      	adds	r3, r7, #5
 8014226:	33ff      	adds	r3, #255	@ 0xff
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	221f      	movs	r2, #31
 801422c:	4013      	ands	r3, r2
 801422e:	d104      	bne.n	801423a <USB_EPStartXfer+0x456>
 8014230:	187b      	adds	r3, r7, r1
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	3b01      	subs	r3, #1
 8014236:	187a      	adds	r2, r7, r1
 8014238:	6013      	str	r3, [r2, #0]
 801423a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	b29a      	uxth	r2, r3
 8014240:	23f8      	movs	r3, #248	@ 0xf8
 8014242:	18fb      	adds	r3, r7, r3
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	b29b      	uxth	r3, r3
 8014248:	029b      	lsls	r3, r3, #10
 801424a:	b29b      	uxth	r3, r3
 801424c:	4313      	orrs	r3, r2
 801424e:	b29b      	uxth	r3, r3
 8014250:	4ab7      	ldr	r2, [pc, #732]	@ (8014530 <USB_EPStartXfer+0x74c>)
 8014252:	4313      	orrs	r3, r2
 8014254:	b29a      	uxth	r2, r3
 8014256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014258:	801a      	strh	r2, [r3, #0]
 801425a:	e04a      	b.n	80142f2 <USB_EPStartXfer+0x50e>
 801425c:	1d7b      	adds	r3, r7, #5
 801425e:	33ff      	adds	r3, #255	@ 0xff
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d108      	bne.n	8014278 <USB_EPStartXfer+0x494>
 8014266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014268:	881b      	ldrh	r3, [r3, #0]
 801426a:	b29b      	uxth	r3, r3
 801426c:	4ab0      	ldr	r2, [pc, #704]	@ (8014530 <USB_EPStartXfer+0x74c>)
 801426e:	4313      	orrs	r3, r2
 8014270:	b29a      	uxth	r2, r3
 8014272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014274:	801a      	strh	r2, [r3, #0]
 8014276:	e03c      	b.n	80142f2 <USB_EPStartXfer+0x50e>
 8014278:	1d7b      	adds	r3, r7, #5
 801427a:	33ff      	adds	r3, #255	@ 0xff
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	085b      	lsrs	r3, r3, #1
 8014280:	21f8      	movs	r1, #248	@ 0xf8
 8014282:	187a      	adds	r2, r7, r1
 8014284:	6013      	str	r3, [r2, #0]
 8014286:	1d7b      	adds	r3, r7, #5
 8014288:	33ff      	adds	r3, #255	@ 0xff
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	2201      	movs	r2, #1
 801428e:	4013      	ands	r3, r2
 8014290:	d004      	beq.n	801429c <USB_EPStartXfer+0x4b8>
 8014292:	187b      	adds	r3, r7, r1
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	3301      	adds	r3, #1
 8014298:	187a      	adds	r2, r7, r1
 801429a:	6013      	str	r3, [r2, #0]
 801429c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801429e:	881b      	ldrh	r3, [r3, #0]
 80142a0:	b29a      	uxth	r2, r3
 80142a2:	23f8      	movs	r3, #248	@ 0xf8
 80142a4:	18fb      	adds	r3, r7, r3
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	b29b      	uxth	r3, r3
 80142aa:	029b      	lsls	r3, r3, #10
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	4313      	orrs	r3, r2
 80142b0:	b29a      	uxth	r2, r3
 80142b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142b4:	801a      	strh	r2, [r3, #0]
 80142b6:	e01c      	b.n	80142f2 <USB_EPStartXfer+0x50e>
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	785b      	ldrb	r3, [r3, #1]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d118      	bne.n	80142f2 <USB_EPStartXfer+0x50e>
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2250      	movs	r2, #80	@ 0x50
 80142c8:	5a9b      	ldrh	r3, [r3, r2]
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	001a      	movs	r2, r3
 80142ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142d0:	189b      	adds	r3, r3, r2
 80142d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	00da      	lsls	r2, r3, #3
 80142da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142dc:	18d3      	adds	r3, r2, r3
 80142de:	4a93      	ldr	r2, [pc, #588]	@ (801452c <USB_EPStartXfer+0x748>)
 80142e0:	4694      	mov	ip, r2
 80142e2:	4463      	add	r3, ip
 80142e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80142e6:	1d7b      	adds	r3, r7, #5
 80142e8:	33ff      	adds	r3, #255	@ 0xff
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	b29a      	uxth	r2, r3
 80142ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80142f2:	2076      	movs	r0, #118	@ 0x76
 80142f4:	183b      	adds	r3, r7, r0
 80142f6:	683a      	ldr	r2, [r7, #0]
 80142f8:	8912      	ldrh	r2, [r2, #8]
 80142fa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80142fc:	683b      	ldr	r3, [r7, #0]
 80142fe:	6959      	ldr	r1, [r3, #20]
 8014300:	1d7b      	adds	r3, r7, #5
 8014302:	33ff      	adds	r3, #255	@ 0xff
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	b29c      	uxth	r4, r3
 8014308:	183b      	adds	r3, r7, r0
 801430a:	881a      	ldrh	r2, [r3, #0]
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	0023      	movs	r3, r4
 8014310:	f000 ffda 	bl	80152c8 <USB_WritePMA>
            ep->xfer_buff += len;
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	695a      	ldr	r2, [r3, #20]
 8014318:	1d7b      	adds	r3, r7, #5
 801431a:	33ff      	adds	r3, #255	@ 0xff
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	18d2      	adds	r2, r2, r3
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	6a1a      	ldr	r2, [r3, #32]
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	691b      	ldr	r3, [r3, #16]
 801432c:	429a      	cmp	r2, r3
 801432e:	d908      	bls.n	8014342 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	6a1a      	ldr	r2, [r3, #32]
 8014334:	1d7b      	adds	r3, r7, #5
 8014336:	33ff      	adds	r3, #255	@ 0xff
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	1ad2      	subs	r2, r2, r3
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	621a      	str	r2, [r3, #32]
 8014340:	e007      	b.n	8014352 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	6a1b      	ldr	r3, [r3, #32]
 8014346:	1d7a      	adds	r2, r7, #5
 8014348:	32ff      	adds	r2, #255	@ 0xff
 801434a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	2200      	movs	r2, #0
 8014350:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	643b      	str	r3, [r7, #64]	@ 0x40
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	785b      	ldrb	r3, [r3, #1]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d000      	beq.n	8014360 <USB_EPStartXfer+0x57c>
 801435e:	e070      	b.n	8014442 <USB_EPStartXfer+0x65e>
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2250      	movs	r2, #80	@ 0x50
 8014368:	5a9b      	ldrh	r3, [r3, r2]
 801436a:	b29b      	uxth	r3, r3
 801436c:	001a      	movs	r2, r3
 801436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014370:	189b      	adds	r3, r3, r2
 8014372:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014374:	683b      	ldr	r3, [r7, #0]
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	00da      	lsls	r2, r3, #3
 801437a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801437c:	18d3      	adds	r3, r2, r3
 801437e:	4a6d      	ldr	r2, [pc, #436]	@ (8014534 <USB_EPStartXfer+0x750>)
 8014380:	4694      	mov	ip, r2
 8014382:	4463      	add	r3, ip
 8014384:	637b      	str	r3, [r7, #52]	@ 0x34
 8014386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014388:	881b      	ldrh	r3, [r3, #0]
 801438a:	b29b      	uxth	r3, r3
 801438c:	059b      	lsls	r3, r3, #22
 801438e:	0d9b      	lsrs	r3, r3, #22
 8014390:	b29a      	uxth	r2, r3
 8014392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014394:	801a      	strh	r2, [r3, #0]
 8014396:	1d7b      	adds	r3, r7, #5
 8014398:	33ff      	adds	r3, #255	@ 0xff
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	2b3e      	cmp	r3, #62	@ 0x3e
 801439e:	d922      	bls.n	80143e6 <USB_EPStartXfer+0x602>
 80143a0:	1d7b      	adds	r3, r7, #5
 80143a2:	33ff      	adds	r3, #255	@ 0xff
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	095b      	lsrs	r3, r3, #5
 80143a8:	21f4      	movs	r1, #244	@ 0xf4
 80143aa:	187a      	adds	r2, r7, r1
 80143ac:	6013      	str	r3, [r2, #0]
 80143ae:	1d7b      	adds	r3, r7, #5
 80143b0:	33ff      	adds	r3, #255	@ 0xff
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	221f      	movs	r2, #31
 80143b6:	4013      	ands	r3, r2
 80143b8:	d104      	bne.n	80143c4 <USB_EPStartXfer+0x5e0>
 80143ba:	187b      	adds	r3, r7, r1
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	3b01      	subs	r3, #1
 80143c0:	187a      	adds	r2, r7, r1
 80143c2:	6013      	str	r3, [r2, #0]
 80143c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143c6:	881b      	ldrh	r3, [r3, #0]
 80143c8:	b29a      	uxth	r2, r3
 80143ca:	23f4      	movs	r3, #244	@ 0xf4
 80143cc:	18fb      	adds	r3, r7, r3
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	029b      	lsls	r3, r3, #10
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	4313      	orrs	r3, r2
 80143d8:	b29b      	uxth	r3, r3
 80143da:	4a55      	ldr	r2, [pc, #340]	@ (8014530 <USB_EPStartXfer+0x74c>)
 80143dc:	4313      	orrs	r3, r2
 80143de:	b29a      	uxth	r2, r3
 80143e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143e2:	801a      	strh	r2, [r3, #0]
 80143e4:	e048      	b.n	8014478 <USB_EPStartXfer+0x694>
 80143e6:	1d7b      	adds	r3, r7, #5
 80143e8:	33ff      	adds	r3, #255	@ 0xff
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d108      	bne.n	8014402 <USB_EPStartXfer+0x61e>
 80143f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143f2:	881b      	ldrh	r3, [r3, #0]
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	4a4e      	ldr	r2, [pc, #312]	@ (8014530 <USB_EPStartXfer+0x74c>)
 80143f8:	4313      	orrs	r3, r2
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143fe:	801a      	strh	r2, [r3, #0]
 8014400:	e03a      	b.n	8014478 <USB_EPStartXfer+0x694>
 8014402:	1d7b      	adds	r3, r7, #5
 8014404:	33ff      	adds	r3, #255	@ 0xff
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	085b      	lsrs	r3, r3, #1
 801440a:	21f4      	movs	r1, #244	@ 0xf4
 801440c:	187a      	adds	r2, r7, r1
 801440e:	6013      	str	r3, [r2, #0]
 8014410:	1d7b      	adds	r3, r7, #5
 8014412:	33ff      	adds	r3, #255	@ 0xff
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	2201      	movs	r2, #1
 8014418:	4013      	ands	r3, r2
 801441a:	d004      	beq.n	8014426 <USB_EPStartXfer+0x642>
 801441c:	187b      	adds	r3, r7, r1
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	3301      	adds	r3, #1
 8014422:	187a      	adds	r2, r7, r1
 8014424:	6013      	str	r3, [r2, #0]
 8014426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014428:	881b      	ldrh	r3, [r3, #0]
 801442a:	b29a      	uxth	r2, r3
 801442c:	23f4      	movs	r3, #244	@ 0xf4
 801442e:	18fb      	adds	r3, r7, r3
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	b29b      	uxth	r3, r3
 8014434:	029b      	lsls	r3, r3, #10
 8014436:	b29b      	uxth	r3, r3
 8014438:	4313      	orrs	r3, r2
 801443a:	b29a      	uxth	r2, r3
 801443c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801443e:	801a      	strh	r2, [r3, #0]
 8014440:	e01a      	b.n	8014478 <USB_EPStartXfer+0x694>
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	785b      	ldrb	r3, [r3, #1]
 8014446:	2b01      	cmp	r3, #1
 8014448:	d116      	bne.n	8014478 <USB_EPStartXfer+0x694>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2250      	movs	r2, #80	@ 0x50
 801444e:	5a9b      	ldrh	r3, [r3, r2]
 8014450:	b29b      	uxth	r3, r3
 8014452:	001a      	movs	r2, r3
 8014454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014456:	189b      	adds	r3, r3, r2
 8014458:	643b      	str	r3, [r7, #64]	@ 0x40
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	781b      	ldrb	r3, [r3, #0]
 801445e:	00da      	lsls	r2, r3, #3
 8014460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014462:	18d3      	adds	r3, r2, r3
 8014464:	4a33      	ldr	r2, [pc, #204]	@ (8014534 <USB_EPStartXfer+0x750>)
 8014466:	4694      	mov	ip, r2
 8014468:	4463      	add	r3, ip
 801446a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801446c:	1d7b      	adds	r3, r7, #5
 801446e:	33ff      	adds	r3, #255	@ 0xff
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	b29a      	uxth	r2, r3
 8014474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014476:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8014478:	2076      	movs	r0, #118	@ 0x76
 801447a:	183b      	adds	r3, r7, r0
 801447c:	683a      	ldr	r2, [r7, #0]
 801447e:	8952      	ldrh	r2, [r2, #10]
 8014480:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	6959      	ldr	r1, [r3, #20]
 8014486:	1d7b      	adds	r3, r7, #5
 8014488:	33ff      	adds	r3, #255	@ 0xff
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	b29c      	uxth	r4, r3
 801448e:	183b      	adds	r3, r7, r0
 8014490:	881a      	ldrh	r2, [r3, #0]
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	0023      	movs	r3, r4
 8014496:	f000 ff17 	bl	80152c8 <USB_WritePMA>
 801449a:	e1b6      	b.n	801480a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	6a1b      	ldr	r3, [r3, #32]
 80144a0:	1d7a      	adds	r2, r7, #5
 80144a2:	32ff      	adds	r2, #255	@ 0xff
 80144a4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	009b      	lsls	r3, r3, #2
 80144ae:	18d3      	adds	r3, r2, r3
 80144b0:	881b      	ldrh	r3, [r3, #0]
 80144b2:	b29a      	uxth	r2, r3
 80144b4:	2062      	movs	r0, #98	@ 0x62
 80144b6:	183b      	adds	r3, r7, r0
 80144b8:	491f      	ldr	r1, [pc, #124]	@ (8014538 <USB_EPStartXfer+0x754>)
 80144ba:	400a      	ands	r2, r1
 80144bc:	801a      	strh	r2, [r3, #0]
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	009b      	lsls	r3, r3, #2
 80144c6:	18d3      	adds	r3, r2, r3
 80144c8:	183a      	adds	r2, r7, r0
 80144ca:	8812      	ldrh	r2, [r2, #0]
 80144cc:	491b      	ldr	r1, [pc, #108]	@ (801453c <USB_EPStartXfer+0x758>)
 80144ce:	430a      	orrs	r2, r1
 80144d0:	b292      	uxth	r2, r2
 80144d2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2250      	movs	r2, #80	@ 0x50
 80144dc:	5a9b      	ldrh	r3, [r3, r2]
 80144de:	b29b      	uxth	r3, r3
 80144e0:	001a      	movs	r2, r3
 80144e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80144e4:	189b      	adds	r3, r3, r2
 80144e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	00da      	lsls	r2, r3, #3
 80144ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80144f0:	18d3      	adds	r3, r2, r3
 80144f2:	4a0e      	ldr	r2, [pc, #56]	@ (801452c <USB_EPStartXfer+0x748>)
 80144f4:	4694      	mov	ip, r2
 80144f6:	4463      	add	r3, ip
 80144f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80144fa:	1d7b      	adds	r3, r7, #5
 80144fc:	33ff      	adds	r3, #255	@ 0xff
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	b29a      	uxth	r2, r3
 8014502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014504:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014506:	2076      	movs	r0, #118	@ 0x76
 8014508:	183b      	adds	r3, r7, r0
 801450a:	683a      	ldr	r2, [r7, #0]
 801450c:	8912      	ldrh	r2, [r2, #8]
 801450e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014510:	683b      	ldr	r3, [r7, #0]
 8014512:	6959      	ldr	r1, [r3, #20]
 8014514:	1d7b      	adds	r3, r7, #5
 8014516:	33ff      	adds	r3, #255	@ 0xff
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	b29c      	uxth	r4, r3
 801451c:	183b      	adds	r3, r7, r0
 801451e:	881a      	ldrh	r2, [r3, #0]
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	0023      	movs	r3, r4
 8014524:	f000 fed0 	bl	80152c8 <USB_WritePMA>
 8014528:	e16f      	b.n	801480a <USB_EPStartXfer+0xa26>
 801452a:	46c0      	nop			@ (mov r8, r8)
 801452c:	00000402 	.word	0x00000402
 8014530:	ffff8000 	.word	0xffff8000
 8014534:	00000406 	.word	0x00000406
 8014538:	ffff8e8f 	.word	0xffff8e8f
 801453c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	6a1a      	ldr	r2, [r3, #32]
 8014544:	1d7b      	adds	r3, r7, #5
 8014546:	33ff      	adds	r3, #255	@ 0xff
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	1ad2      	subs	r2, r2, r3
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8014550:	687a      	ldr	r2, [r7, #4]
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	781b      	ldrb	r3, [r3, #0]
 8014556:	009b      	lsls	r3, r3, #2
 8014558:	18d3      	adds	r3, r2, r3
 801455a:	881b      	ldrh	r3, [r3, #0]
 801455c:	b29b      	uxth	r3, r3
 801455e:	001a      	movs	r2, r3
 8014560:	2340      	movs	r3, #64	@ 0x40
 8014562:	4013      	ands	r3, r2
 8014564:	d100      	bne.n	8014568 <USB_EPStartXfer+0x784>
 8014566:	e0a4      	b.n	80146b2 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	673b      	str	r3, [r7, #112]	@ 0x70
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	785b      	ldrb	r3, [r3, #1]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d000      	beq.n	8014576 <USB_EPStartXfer+0x792>
 8014574:	e070      	b.n	8014658 <USB_EPStartXfer+0x874>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	66bb      	str	r3, [r7, #104]	@ 0x68
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2250      	movs	r2, #80	@ 0x50
 801457e:	5a9b      	ldrh	r3, [r3, r2]
 8014580:	b29b      	uxth	r3, r3
 8014582:	001a      	movs	r2, r3
 8014584:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014586:	189b      	adds	r3, r3, r2
 8014588:	66bb      	str	r3, [r7, #104]	@ 0x68
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	00da      	lsls	r2, r3, #3
 8014590:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014592:	18d3      	adds	r3, r2, r3
 8014594:	4abc      	ldr	r2, [pc, #752]	@ (8014888 <USB_EPStartXfer+0xaa4>)
 8014596:	4694      	mov	ip, r2
 8014598:	4463      	add	r3, ip
 801459a:	667b      	str	r3, [r7, #100]	@ 0x64
 801459c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801459e:	881b      	ldrh	r3, [r3, #0]
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	059b      	lsls	r3, r3, #22
 80145a4:	0d9b      	lsrs	r3, r3, #22
 80145a6:	b29a      	uxth	r2, r3
 80145a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80145aa:	801a      	strh	r2, [r3, #0]
 80145ac:	1d7b      	adds	r3, r7, #5
 80145ae:	33ff      	adds	r3, #255	@ 0xff
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80145b4:	d922      	bls.n	80145fc <USB_EPStartXfer+0x818>
 80145b6:	1d7b      	adds	r3, r7, #5
 80145b8:	33ff      	adds	r3, #255	@ 0xff
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	095b      	lsrs	r3, r3, #5
 80145be:	21f0      	movs	r1, #240	@ 0xf0
 80145c0:	187a      	adds	r2, r7, r1
 80145c2:	6013      	str	r3, [r2, #0]
 80145c4:	1d7b      	adds	r3, r7, #5
 80145c6:	33ff      	adds	r3, #255	@ 0xff
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	221f      	movs	r2, #31
 80145cc:	4013      	ands	r3, r2
 80145ce:	d104      	bne.n	80145da <USB_EPStartXfer+0x7f6>
 80145d0:	187b      	adds	r3, r7, r1
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	3b01      	subs	r3, #1
 80145d6:	187a      	adds	r2, r7, r1
 80145d8:	6013      	str	r3, [r2, #0]
 80145da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80145dc:	881b      	ldrh	r3, [r3, #0]
 80145de:	b29a      	uxth	r2, r3
 80145e0:	23f0      	movs	r3, #240	@ 0xf0
 80145e2:	18fb      	adds	r3, r7, r3
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	029b      	lsls	r3, r3, #10
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	4313      	orrs	r3, r2
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	4aa6      	ldr	r2, [pc, #664]	@ (801488c <USB_EPStartXfer+0xaa8>)
 80145f2:	4313      	orrs	r3, r2
 80145f4:	b29a      	uxth	r2, r3
 80145f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80145f8:	801a      	strh	r2, [r3, #0]
 80145fa:	e048      	b.n	801468e <USB_EPStartXfer+0x8aa>
 80145fc:	1d7b      	adds	r3, r7, #5
 80145fe:	33ff      	adds	r3, #255	@ 0xff
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d108      	bne.n	8014618 <USB_EPStartXfer+0x834>
 8014606:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014608:	881b      	ldrh	r3, [r3, #0]
 801460a:	b29b      	uxth	r3, r3
 801460c:	4a9f      	ldr	r2, [pc, #636]	@ (801488c <USB_EPStartXfer+0xaa8>)
 801460e:	4313      	orrs	r3, r2
 8014610:	b29a      	uxth	r2, r3
 8014612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014614:	801a      	strh	r2, [r3, #0]
 8014616:	e03a      	b.n	801468e <USB_EPStartXfer+0x8aa>
 8014618:	1d7b      	adds	r3, r7, #5
 801461a:	33ff      	adds	r3, #255	@ 0xff
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	085b      	lsrs	r3, r3, #1
 8014620:	21f0      	movs	r1, #240	@ 0xf0
 8014622:	187a      	adds	r2, r7, r1
 8014624:	6013      	str	r3, [r2, #0]
 8014626:	1d7b      	adds	r3, r7, #5
 8014628:	33ff      	adds	r3, #255	@ 0xff
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2201      	movs	r2, #1
 801462e:	4013      	ands	r3, r2
 8014630:	d004      	beq.n	801463c <USB_EPStartXfer+0x858>
 8014632:	187b      	adds	r3, r7, r1
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	3301      	adds	r3, #1
 8014638:	187a      	adds	r2, r7, r1
 801463a:	6013      	str	r3, [r2, #0]
 801463c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801463e:	881b      	ldrh	r3, [r3, #0]
 8014640:	b29a      	uxth	r2, r3
 8014642:	23f0      	movs	r3, #240	@ 0xf0
 8014644:	18fb      	adds	r3, r7, r3
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	b29b      	uxth	r3, r3
 801464a:	029b      	lsls	r3, r3, #10
 801464c:	b29b      	uxth	r3, r3
 801464e:	4313      	orrs	r3, r2
 8014650:	b29a      	uxth	r2, r3
 8014652:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014654:	801a      	strh	r2, [r3, #0]
 8014656:	e01a      	b.n	801468e <USB_EPStartXfer+0x8aa>
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	785b      	ldrb	r3, [r3, #1]
 801465c:	2b01      	cmp	r3, #1
 801465e:	d116      	bne.n	801468e <USB_EPStartXfer+0x8aa>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2250      	movs	r2, #80	@ 0x50
 8014664:	5a9b      	ldrh	r3, [r3, r2]
 8014666:	b29b      	uxth	r3, r3
 8014668:	001a      	movs	r2, r3
 801466a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801466c:	189b      	adds	r3, r3, r2
 801466e:	673b      	str	r3, [r7, #112]	@ 0x70
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	00da      	lsls	r2, r3, #3
 8014676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014678:	18d3      	adds	r3, r2, r3
 801467a:	4a83      	ldr	r2, [pc, #524]	@ (8014888 <USB_EPStartXfer+0xaa4>)
 801467c:	4694      	mov	ip, r2
 801467e:	4463      	add	r3, ip
 8014680:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014682:	1d7b      	adds	r3, r7, #5
 8014684:	33ff      	adds	r3, #255	@ 0xff
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	b29a      	uxth	r2, r3
 801468a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801468c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801468e:	2076      	movs	r0, #118	@ 0x76
 8014690:	183b      	adds	r3, r7, r0
 8014692:	683a      	ldr	r2, [r7, #0]
 8014694:	8952      	ldrh	r2, [r2, #10]
 8014696:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	6959      	ldr	r1, [r3, #20]
 801469c:	1d7b      	adds	r3, r7, #5
 801469e:	33ff      	adds	r3, #255	@ 0xff
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	b29c      	uxth	r4, r3
 80146a4:	183b      	adds	r3, r7, r0
 80146a6:	881a      	ldrh	r2, [r3, #0]
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	0023      	movs	r3, r4
 80146ac:	f000 fe0c 	bl	80152c8 <USB_WritePMA>
 80146b0:	e0ab      	b.n	801480a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	785b      	ldrb	r3, [r3, #1]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d000      	beq.n	80146bc <USB_EPStartXfer+0x8d8>
 80146ba:	e070      	b.n	801479e <USB_EPStartXfer+0x9ba>
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2250      	movs	r2, #80	@ 0x50
 80146c4:	5a9b      	ldrh	r3, [r3, r2]
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	001a      	movs	r2, r3
 80146ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80146cc:	189b      	adds	r3, r3, r2
 80146ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	00da      	lsls	r2, r3, #3
 80146d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80146d8:	18d3      	adds	r3, r2, r3
 80146da:	4a6d      	ldr	r2, [pc, #436]	@ (8014890 <USB_EPStartXfer+0xaac>)
 80146dc:	4694      	mov	ip, r2
 80146de:	4463      	add	r3, ip
 80146e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80146e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146e4:	881b      	ldrh	r3, [r3, #0]
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	059b      	lsls	r3, r3, #22
 80146ea:	0d9b      	lsrs	r3, r3, #22
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146f0:	801a      	strh	r2, [r3, #0]
 80146f2:	1d7b      	adds	r3, r7, #5
 80146f4:	33ff      	adds	r3, #255	@ 0xff
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80146fa:	d922      	bls.n	8014742 <USB_EPStartXfer+0x95e>
 80146fc:	1d7b      	adds	r3, r7, #5
 80146fe:	33ff      	adds	r3, #255	@ 0xff
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	095b      	lsrs	r3, r3, #5
 8014704:	21ec      	movs	r1, #236	@ 0xec
 8014706:	187a      	adds	r2, r7, r1
 8014708:	6013      	str	r3, [r2, #0]
 801470a:	1d7b      	adds	r3, r7, #5
 801470c:	33ff      	adds	r3, #255	@ 0xff
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	221f      	movs	r2, #31
 8014712:	4013      	ands	r3, r2
 8014714:	d104      	bne.n	8014720 <USB_EPStartXfer+0x93c>
 8014716:	187b      	adds	r3, r7, r1
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	3b01      	subs	r3, #1
 801471c:	187a      	adds	r2, r7, r1
 801471e:	6013      	str	r3, [r2, #0]
 8014720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014722:	881b      	ldrh	r3, [r3, #0]
 8014724:	b29a      	uxth	r2, r3
 8014726:	23ec      	movs	r3, #236	@ 0xec
 8014728:	18fb      	adds	r3, r7, r3
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	b29b      	uxth	r3, r3
 801472e:	029b      	lsls	r3, r3, #10
 8014730:	b29b      	uxth	r3, r3
 8014732:	4313      	orrs	r3, r2
 8014734:	b29b      	uxth	r3, r3
 8014736:	4a55      	ldr	r2, [pc, #340]	@ (801488c <USB_EPStartXfer+0xaa8>)
 8014738:	4313      	orrs	r3, r2
 801473a:	b29a      	uxth	r2, r3
 801473c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801473e:	801a      	strh	r2, [r3, #0]
 8014740:	e052      	b.n	80147e8 <USB_EPStartXfer+0xa04>
 8014742:	1d7b      	adds	r3, r7, #5
 8014744:	33ff      	adds	r3, #255	@ 0xff
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d108      	bne.n	801475e <USB_EPStartXfer+0x97a>
 801474c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801474e:	881b      	ldrh	r3, [r3, #0]
 8014750:	b29b      	uxth	r3, r3
 8014752:	4a4e      	ldr	r2, [pc, #312]	@ (801488c <USB_EPStartXfer+0xaa8>)
 8014754:	4313      	orrs	r3, r2
 8014756:	b29a      	uxth	r2, r3
 8014758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801475a:	801a      	strh	r2, [r3, #0]
 801475c:	e044      	b.n	80147e8 <USB_EPStartXfer+0xa04>
 801475e:	1d7b      	adds	r3, r7, #5
 8014760:	33ff      	adds	r3, #255	@ 0xff
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	085b      	lsrs	r3, r3, #1
 8014766:	21ec      	movs	r1, #236	@ 0xec
 8014768:	187a      	adds	r2, r7, r1
 801476a:	6013      	str	r3, [r2, #0]
 801476c:	1d7b      	adds	r3, r7, #5
 801476e:	33ff      	adds	r3, #255	@ 0xff
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	2201      	movs	r2, #1
 8014774:	4013      	ands	r3, r2
 8014776:	d004      	beq.n	8014782 <USB_EPStartXfer+0x99e>
 8014778:	187b      	adds	r3, r7, r1
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	3301      	adds	r3, #1
 801477e:	187a      	adds	r2, r7, r1
 8014780:	6013      	str	r3, [r2, #0]
 8014782:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014784:	881b      	ldrh	r3, [r3, #0]
 8014786:	b29a      	uxth	r2, r3
 8014788:	23ec      	movs	r3, #236	@ 0xec
 801478a:	18fb      	adds	r3, r7, r3
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	b29b      	uxth	r3, r3
 8014790:	029b      	lsls	r3, r3, #10
 8014792:	b29b      	uxth	r3, r3
 8014794:	4313      	orrs	r3, r2
 8014796:	b29a      	uxth	r2, r3
 8014798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801479a:	801a      	strh	r2, [r3, #0]
 801479c:	e024      	b.n	80147e8 <USB_EPStartXfer+0xa04>
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	785b      	ldrb	r3, [r3, #1]
 80147a2:	2b01      	cmp	r3, #1
 80147a4:	d120      	bne.n	80147e8 <USB_EPStartXfer+0xa04>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2184      	movs	r1, #132	@ 0x84
 80147aa:	187a      	adds	r2, r7, r1
 80147ac:	6013      	str	r3, [r2, #0]
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2250      	movs	r2, #80	@ 0x50
 80147b2:	5a9b      	ldrh	r3, [r3, r2]
 80147b4:	b29b      	uxth	r3, r3
 80147b6:	001a      	movs	r2, r3
 80147b8:	187b      	adds	r3, r7, r1
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	189b      	adds	r3, r3, r2
 80147be:	187a      	adds	r2, r7, r1
 80147c0:	6013      	str	r3, [r2, #0]
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	00da      	lsls	r2, r3, #3
 80147c8:	187b      	adds	r3, r7, r1
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	18d3      	adds	r3, r2, r3
 80147ce:	4a30      	ldr	r2, [pc, #192]	@ (8014890 <USB_EPStartXfer+0xaac>)
 80147d0:	4694      	mov	ip, r2
 80147d2:	4463      	add	r3, ip
 80147d4:	2180      	movs	r1, #128	@ 0x80
 80147d6:	187a      	adds	r2, r7, r1
 80147d8:	6013      	str	r3, [r2, #0]
 80147da:	1d7b      	adds	r3, r7, #5
 80147dc:	33ff      	adds	r3, #255	@ 0xff
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	b29a      	uxth	r2, r3
 80147e2:	187b      	adds	r3, r7, r1
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80147e8:	2076      	movs	r0, #118	@ 0x76
 80147ea:	183b      	adds	r3, r7, r0
 80147ec:	683a      	ldr	r2, [r7, #0]
 80147ee:	8912      	ldrh	r2, [r2, #8]
 80147f0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	6959      	ldr	r1, [r3, #20]
 80147f6:	1d7b      	adds	r3, r7, #5
 80147f8:	33ff      	adds	r3, #255	@ 0xff
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	b29c      	uxth	r4, r3
 80147fe:	183b      	adds	r3, r7, r0
 8014800:	881a      	ldrh	r2, [r3, #0]
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	0023      	movs	r3, r4
 8014806:	f000 fd5f 	bl	80152c8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801480a:	687a      	ldr	r2, [r7, #4]
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	009b      	lsls	r3, r3, #2
 8014812:	18d3      	adds	r3, r2, r3
 8014814:	881b      	ldrh	r3, [r3, #0]
 8014816:	b29a      	uxth	r2, r3
 8014818:	200a      	movs	r0, #10
 801481a:	183b      	adds	r3, r7, r0
 801481c:	491d      	ldr	r1, [pc, #116]	@ (8014894 <USB_EPStartXfer+0xab0>)
 801481e:	400a      	ands	r2, r1
 8014820:	801a      	strh	r2, [r3, #0]
 8014822:	183b      	adds	r3, r7, r0
 8014824:	183a      	adds	r2, r7, r0
 8014826:	8812      	ldrh	r2, [r2, #0]
 8014828:	2110      	movs	r1, #16
 801482a:	404a      	eors	r2, r1
 801482c:	801a      	strh	r2, [r3, #0]
 801482e:	183b      	adds	r3, r7, r0
 8014830:	183a      	adds	r2, r7, r0
 8014832:	8812      	ldrh	r2, [r2, #0]
 8014834:	2120      	movs	r1, #32
 8014836:	404a      	eors	r2, r1
 8014838:	801a      	strh	r2, [r3, #0]
 801483a:	687a      	ldr	r2, [r7, #4]
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	781b      	ldrb	r3, [r3, #0]
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	18d3      	adds	r3, r2, r3
 8014844:	183a      	adds	r2, r7, r0
 8014846:	8812      	ldrh	r2, [r2, #0]
 8014848:	4913      	ldr	r1, [pc, #76]	@ (8014898 <USB_EPStartXfer+0xab4>)
 801484a:	430a      	orrs	r2, r1
 801484c:	b292      	uxth	r2, r2
 801484e:	801a      	strh	r2, [r3, #0]
 8014850:	f000 fbf4 	bl	801503c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	7b1b      	ldrb	r3, [r3, #12]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d000      	beq.n	801485e <USB_EPStartXfer+0xa7a>
 801485c:	e0a9      	b.n	80149b2 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	699a      	ldr	r2, [r3, #24]
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	691b      	ldr	r3, [r3, #16]
 8014866:	429a      	cmp	r2, r3
 8014868:	d918      	bls.n	801489c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	691b      	ldr	r3, [r3, #16]
 801486e:	1d7a      	adds	r2, r7, #5
 8014870:	32ff      	adds	r2, #255	@ 0xff
 8014872:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	699a      	ldr	r2, [r3, #24]
 8014878:	1d7b      	adds	r3, r7, #5
 801487a:	33ff      	adds	r3, #255	@ 0xff
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	1ad2      	subs	r2, r2, r3
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	619a      	str	r2, [r3, #24]
 8014884:	e012      	b.n	80148ac <USB_EPStartXfer+0xac8>
 8014886:	46c0      	nop			@ (mov r8, r8)
 8014888:	00000406 	.word	0x00000406
 801488c:	ffff8000 	.word	0xffff8000
 8014890:	00000402 	.word	0x00000402
 8014894:	ffff8fbf 	.word	0xffff8fbf
 8014898:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	699b      	ldr	r3, [r3, #24]
 80148a0:	1d7a      	adds	r2, r7, #5
 80148a2:	32ff      	adds	r2, #255	@ 0xff
 80148a4:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	2200      	movs	r2, #0
 80148aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2190      	movs	r1, #144	@ 0x90
 80148b0:	187a      	adds	r2, r7, r1
 80148b2:	6013      	str	r3, [r2, #0]
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2250      	movs	r2, #80	@ 0x50
 80148b8:	5a9b      	ldrh	r3, [r3, r2]
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	001a      	movs	r2, r3
 80148be:	187b      	adds	r3, r7, r1
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	189b      	adds	r3, r3, r2
 80148c4:	187a      	adds	r2, r7, r1
 80148c6:	6013      	str	r3, [r2, #0]
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	781b      	ldrb	r3, [r3, #0]
 80148cc:	00da      	lsls	r2, r3, #3
 80148ce:	187b      	adds	r3, r7, r1
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	18d3      	adds	r3, r2, r3
 80148d4:	4acf      	ldr	r2, [pc, #828]	@ (8014c14 <USB_EPStartXfer+0xe30>)
 80148d6:	4694      	mov	ip, r2
 80148d8:	4463      	add	r3, ip
 80148da:	218c      	movs	r1, #140	@ 0x8c
 80148dc:	187a      	adds	r2, r7, r1
 80148de:	6013      	str	r3, [r2, #0]
 80148e0:	187b      	adds	r3, r7, r1
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	881b      	ldrh	r3, [r3, #0]
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	059b      	lsls	r3, r3, #22
 80148ea:	0d9b      	lsrs	r3, r3, #22
 80148ec:	b29a      	uxth	r2, r3
 80148ee:	187b      	adds	r3, r7, r1
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	801a      	strh	r2, [r3, #0]
 80148f4:	1d7b      	adds	r3, r7, #5
 80148f6:	33ff      	adds	r3, #255	@ 0xff
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80148fc:	d925      	bls.n	801494a <USB_EPStartXfer+0xb66>
 80148fe:	1d7b      	adds	r3, r7, #5
 8014900:	33ff      	adds	r3, #255	@ 0xff
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	095b      	lsrs	r3, r3, #5
 8014906:	21e8      	movs	r1, #232	@ 0xe8
 8014908:	187a      	adds	r2, r7, r1
 801490a:	6013      	str	r3, [r2, #0]
 801490c:	1d7b      	adds	r3, r7, #5
 801490e:	33ff      	adds	r3, #255	@ 0xff
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	221f      	movs	r2, #31
 8014914:	4013      	ands	r3, r2
 8014916:	d104      	bne.n	8014922 <USB_EPStartXfer+0xb3e>
 8014918:	187b      	adds	r3, r7, r1
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	3b01      	subs	r3, #1
 801491e:	187a      	adds	r2, r7, r1
 8014920:	6013      	str	r3, [r2, #0]
 8014922:	218c      	movs	r1, #140	@ 0x8c
 8014924:	187b      	adds	r3, r7, r1
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	881b      	ldrh	r3, [r3, #0]
 801492a:	b29a      	uxth	r2, r3
 801492c:	23e8      	movs	r3, #232	@ 0xe8
 801492e:	18fb      	adds	r3, r7, r3
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	b29b      	uxth	r3, r3
 8014934:	029b      	lsls	r3, r3, #10
 8014936:	b29b      	uxth	r3, r3
 8014938:	4313      	orrs	r3, r2
 801493a:	b29b      	uxth	r3, r3
 801493c:	4ab6      	ldr	r2, [pc, #728]	@ (8014c18 <USB_EPStartXfer+0xe34>)
 801493e:	4313      	orrs	r3, r2
 8014940:	b29a      	uxth	r2, r3
 8014942:	187b      	adds	r3, r7, r1
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	801a      	strh	r2, [r3, #0]
 8014948:	e353      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
 801494a:	1d7b      	adds	r3, r7, #5
 801494c:	33ff      	adds	r3, #255	@ 0xff
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d10b      	bne.n	801496c <USB_EPStartXfer+0xb88>
 8014954:	218c      	movs	r1, #140	@ 0x8c
 8014956:	187b      	adds	r3, r7, r1
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	881b      	ldrh	r3, [r3, #0]
 801495c:	b29b      	uxth	r3, r3
 801495e:	4aae      	ldr	r2, [pc, #696]	@ (8014c18 <USB_EPStartXfer+0xe34>)
 8014960:	4313      	orrs	r3, r2
 8014962:	b29a      	uxth	r2, r3
 8014964:	187b      	adds	r3, r7, r1
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	801a      	strh	r2, [r3, #0]
 801496a:	e342      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
 801496c:	1d7b      	adds	r3, r7, #5
 801496e:	33ff      	adds	r3, #255	@ 0xff
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	085b      	lsrs	r3, r3, #1
 8014974:	21e8      	movs	r1, #232	@ 0xe8
 8014976:	187a      	adds	r2, r7, r1
 8014978:	6013      	str	r3, [r2, #0]
 801497a:	1d7b      	adds	r3, r7, #5
 801497c:	33ff      	adds	r3, #255	@ 0xff
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2201      	movs	r2, #1
 8014982:	4013      	ands	r3, r2
 8014984:	d004      	beq.n	8014990 <USB_EPStartXfer+0xbac>
 8014986:	187b      	adds	r3, r7, r1
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	3301      	adds	r3, #1
 801498c:	187a      	adds	r2, r7, r1
 801498e:	6013      	str	r3, [r2, #0]
 8014990:	218c      	movs	r1, #140	@ 0x8c
 8014992:	187b      	adds	r3, r7, r1
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	881b      	ldrh	r3, [r3, #0]
 8014998:	b29a      	uxth	r2, r3
 801499a:	23e8      	movs	r3, #232	@ 0xe8
 801499c:	18fb      	adds	r3, r7, r3
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	029b      	lsls	r3, r3, #10
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	4313      	orrs	r3, r2
 80149a8:	b29a      	uxth	r2, r3
 80149aa:	187b      	adds	r3, r7, r1
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	801a      	strh	r2, [r3, #0]
 80149b0:	e31f      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	78db      	ldrb	r3, [r3, #3]
 80149b6:	2b02      	cmp	r3, #2
 80149b8:	d000      	beq.n	80149bc <USB_EPStartXfer+0xbd8>
 80149ba:	e191      	b.n	8014ce0 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	785b      	ldrb	r3, [r3, #1]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d000      	beq.n	80149c6 <USB_EPStartXfer+0xbe2>
 80149c4:	e07c      	b.n	8014ac0 <USB_EPStartXfer+0xcdc>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	21ac      	movs	r1, #172	@ 0xac
 80149ca:	187a      	adds	r2, r7, r1
 80149cc:	6013      	str	r3, [r2, #0]
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2250      	movs	r2, #80	@ 0x50
 80149d2:	5a9b      	ldrh	r3, [r3, r2]
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	001a      	movs	r2, r3
 80149d8:	187b      	adds	r3, r7, r1
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	189b      	adds	r3, r3, r2
 80149de:	187a      	adds	r2, r7, r1
 80149e0:	6013      	str	r3, [r2, #0]
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	00da      	lsls	r2, r3, #3
 80149e8:	187b      	adds	r3, r7, r1
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	18d3      	adds	r3, r2, r3
 80149ee:	4a8b      	ldr	r2, [pc, #556]	@ (8014c1c <USB_EPStartXfer+0xe38>)
 80149f0:	4694      	mov	ip, r2
 80149f2:	4463      	add	r3, ip
 80149f4:	21a8      	movs	r1, #168	@ 0xa8
 80149f6:	187a      	adds	r2, r7, r1
 80149f8:	6013      	str	r3, [r2, #0]
 80149fa:	187b      	adds	r3, r7, r1
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	881b      	ldrh	r3, [r3, #0]
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	059b      	lsls	r3, r3, #22
 8014a04:	0d9b      	lsrs	r3, r3, #22
 8014a06:	b29a      	uxth	r2, r3
 8014a08:	187b      	adds	r3, r7, r1
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	801a      	strh	r2, [r3, #0]
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	691b      	ldr	r3, [r3, #16]
 8014a12:	2b3e      	cmp	r3, #62	@ 0x3e
 8014a14:	d923      	bls.n	8014a5e <USB_EPStartXfer+0xc7a>
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	691b      	ldr	r3, [r3, #16]
 8014a1a:	095b      	lsrs	r3, r3, #5
 8014a1c:	21e4      	movs	r1, #228	@ 0xe4
 8014a1e:	187a      	adds	r2, r7, r1
 8014a20:	6013      	str	r3, [r2, #0]
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	691b      	ldr	r3, [r3, #16]
 8014a26:	221f      	movs	r2, #31
 8014a28:	4013      	ands	r3, r2
 8014a2a:	d104      	bne.n	8014a36 <USB_EPStartXfer+0xc52>
 8014a2c:	187b      	adds	r3, r7, r1
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	3b01      	subs	r3, #1
 8014a32:	187a      	adds	r2, r7, r1
 8014a34:	6013      	str	r3, [r2, #0]
 8014a36:	21a8      	movs	r1, #168	@ 0xa8
 8014a38:	187b      	adds	r3, r7, r1
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	881b      	ldrh	r3, [r3, #0]
 8014a3e:	b29a      	uxth	r2, r3
 8014a40:	23e4      	movs	r3, #228	@ 0xe4
 8014a42:	18fb      	adds	r3, r7, r3
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	029b      	lsls	r3, r3, #10
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	4313      	orrs	r3, r2
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	4a71      	ldr	r2, [pc, #452]	@ (8014c18 <USB_EPStartXfer+0xe34>)
 8014a52:	4313      	orrs	r3, r2
 8014a54:	b29a      	uxth	r2, r3
 8014a56:	187b      	adds	r3, r7, r1
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	801a      	strh	r2, [r3, #0]
 8014a5c:	e054      	b.n	8014b08 <USB_EPStartXfer+0xd24>
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	691b      	ldr	r3, [r3, #16]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d10b      	bne.n	8014a7e <USB_EPStartXfer+0xc9a>
 8014a66:	21a8      	movs	r1, #168	@ 0xa8
 8014a68:	187b      	adds	r3, r7, r1
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	4a69      	ldr	r2, [pc, #420]	@ (8014c18 <USB_EPStartXfer+0xe34>)
 8014a72:	4313      	orrs	r3, r2
 8014a74:	b29a      	uxth	r2, r3
 8014a76:	187b      	adds	r3, r7, r1
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	801a      	strh	r2, [r3, #0]
 8014a7c:	e044      	b.n	8014b08 <USB_EPStartXfer+0xd24>
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	691b      	ldr	r3, [r3, #16]
 8014a82:	085b      	lsrs	r3, r3, #1
 8014a84:	21e4      	movs	r1, #228	@ 0xe4
 8014a86:	187a      	adds	r2, r7, r1
 8014a88:	6013      	str	r3, [r2, #0]
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	691b      	ldr	r3, [r3, #16]
 8014a8e:	2201      	movs	r2, #1
 8014a90:	4013      	ands	r3, r2
 8014a92:	d004      	beq.n	8014a9e <USB_EPStartXfer+0xcba>
 8014a94:	187b      	adds	r3, r7, r1
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	3301      	adds	r3, #1
 8014a9a:	187a      	adds	r2, r7, r1
 8014a9c:	6013      	str	r3, [r2, #0]
 8014a9e:	21a8      	movs	r1, #168	@ 0xa8
 8014aa0:	187b      	adds	r3, r7, r1
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	881b      	ldrh	r3, [r3, #0]
 8014aa6:	b29a      	uxth	r2, r3
 8014aa8:	23e4      	movs	r3, #228	@ 0xe4
 8014aaa:	18fb      	adds	r3, r7, r3
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	b29b      	uxth	r3, r3
 8014ab0:	029b      	lsls	r3, r3, #10
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	4313      	orrs	r3, r2
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	187b      	adds	r3, r7, r1
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	801a      	strh	r2, [r3, #0]
 8014abe:	e023      	b.n	8014b08 <USB_EPStartXfer+0xd24>
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	785b      	ldrb	r3, [r3, #1]
 8014ac4:	2b01      	cmp	r3, #1
 8014ac6:	d11f      	bne.n	8014b08 <USB_EPStartXfer+0xd24>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	21b4      	movs	r1, #180	@ 0xb4
 8014acc:	187a      	adds	r2, r7, r1
 8014ace:	6013      	str	r3, [r2, #0]
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2250      	movs	r2, #80	@ 0x50
 8014ad4:	5a9b      	ldrh	r3, [r3, r2]
 8014ad6:	b29b      	uxth	r3, r3
 8014ad8:	001a      	movs	r2, r3
 8014ada:	187b      	adds	r3, r7, r1
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	189b      	adds	r3, r3, r2
 8014ae0:	187a      	adds	r2, r7, r1
 8014ae2:	6013      	str	r3, [r2, #0]
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	00da      	lsls	r2, r3, #3
 8014aea:	187b      	adds	r3, r7, r1
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	18d3      	adds	r3, r2, r3
 8014af0:	4a4a      	ldr	r2, [pc, #296]	@ (8014c1c <USB_EPStartXfer+0xe38>)
 8014af2:	4694      	mov	ip, r2
 8014af4:	4463      	add	r3, ip
 8014af6:	21b0      	movs	r1, #176	@ 0xb0
 8014af8:	187a      	adds	r2, r7, r1
 8014afa:	6013      	str	r3, [r2, #0]
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	691b      	ldr	r3, [r3, #16]
 8014b00:	b29a      	uxth	r2, r3
 8014b02:	187b      	adds	r3, r7, r1
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	801a      	strh	r2, [r3, #0]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	22a4      	movs	r2, #164	@ 0xa4
 8014b0c:	18ba      	adds	r2, r7, r2
 8014b0e:	6013      	str	r3, [r2, #0]
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	785b      	ldrb	r3, [r3, #1]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d000      	beq.n	8014b1a <USB_EPStartXfer+0xd36>
 8014b18:	e082      	b.n	8014c20 <USB_EPStartXfer+0xe3c>
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	219c      	movs	r1, #156	@ 0x9c
 8014b1e:	187a      	adds	r2, r7, r1
 8014b20:	6013      	str	r3, [r2, #0]
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2250      	movs	r2, #80	@ 0x50
 8014b26:	5a9b      	ldrh	r3, [r3, r2]
 8014b28:	b29b      	uxth	r3, r3
 8014b2a:	001a      	movs	r2, r3
 8014b2c:	187b      	adds	r3, r7, r1
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	189b      	adds	r3, r3, r2
 8014b32:	187a      	adds	r2, r7, r1
 8014b34:	6013      	str	r3, [r2, #0]
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	781b      	ldrb	r3, [r3, #0]
 8014b3a:	00da      	lsls	r2, r3, #3
 8014b3c:	187b      	adds	r3, r7, r1
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	18d3      	adds	r3, r2, r3
 8014b42:	4a34      	ldr	r2, [pc, #208]	@ (8014c14 <USB_EPStartXfer+0xe30>)
 8014b44:	4694      	mov	ip, r2
 8014b46:	4463      	add	r3, ip
 8014b48:	2198      	movs	r1, #152	@ 0x98
 8014b4a:	187a      	adds	r2, r7, r1
 8014b4c:	6013      	str	r3, [r2, #0]
 8014b4e:	187b      	adds	r3, r7, r1
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	881b      	ldrh	r3, [r3, #0]
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	059b      	lsls	r3, r3, #22
 8014b58:	0d9b      	lsrs	r3, r3, #22
 8014b5a:	b29a      	uxth	r2, r3
 8014b5c:	187b      	adds	r3, r7, r1
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	801a      	strh	r2, [r3, #0]
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	691b      	ldr	r3, [r3, #16]
 8014b66:	2b3e      	cmp	r3, #62	@ 0x3e
 8014b68:	d923      	bls.n	8014bb2 <USB_EPStartXfer+0xdce>
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	691b      	ldr	r3, [r3, #16]
 8014b6e:	095b      	lsrs	r3, r3, #5
 8014b70:	21e0      	movs	r1, #224	@ 0xe0
 8014b72:	187a      	adds	r2, r7, r1
 8014b74:	6013      	str	r3, [r2, #0]
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	691b      	ldr	r3, [r3, #16]
 8014b7a:	221f      	movs	r2, #31
 8014b7c:	4013      	ands	r3, r2
 8014b7e:	d104      	bne.n	8014b8a <USB_EPStartXfer+0xda6>
 8014b80:	187b      	adds	r3, r7, r1
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	3b01      	subs	r3, #1
 8014b86:	187a      	adds	r2, r7, r1
 8014b88:	6013      	str	r3, [r2, #0]
 8014b8a:	2198      	movs	r1, #152	@ 0x98
 8014b8c:	187b      	adds	r3, r7, r1
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	881b      	ldrh	r3, [r3, #0]
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	23e0      	movs	r3, #224	@ 0xe0
 8014b96:	18fb      	adds	r3, r7, r3
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	029b      	lsls	r3, r3, #10
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	4313      	orrs	r3, r2
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8014c18 <USB_EPStartXfer+0xe34>)
 8014ba6:	4313      	orrs	r3, r2
 8014ba8:	b29a      	uxth	r2, r3
 8014baa:	187b      	adds	r3, r7, r1
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	801a      	strh	r2, [r3, #0]
 8014bb0:	e057      	b.n	8014c62 <USB_EPStartXfer+0xe7e>
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	691b      	ldr	r3, [r3, #16]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d10b      	bne.n	8014bd2 <USB_EPStartXfer+0xdee>
 8014bba:	2198      	movs	r1, #152	@ 0x98
 8014bbc:	187b      	adds	r3, r7, r1
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	881b      	ldrh	r3, [r3, #0]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	4a14      	ldr	r2, [pc, #80]	@ (8014c18 <USB_EPStartXfer+0xe34>)
 8014bc6:	4313      	orrs	r3, r2
 8014bc8:	b29a      	uxth	r2, r3
 8014bca:	187b      	adds	r3, r7, r1
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	801a      	strh	r2, [r3, #0]
 8014bd0:	e047      	b.n	8014c62 <USB_EPStartXfer+0xe7e>
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	691b      	ldr	r3, [r3, #16]
 8014bd6:	085b      	lsrs	r3, r3, #1
 8014bd8:	21e0      	movs	r1, #224	@ 0xe0
 8014bda:	187a      	adds	r2, r7, r1
 8014bdc:	6013      	str	r3, [r2, #0]
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	691b      	ldr	r3, [r3, #16]
 8014be2:	2201      	movs	r2, #1
 8014be4:	4013      	ands	r3, r2
 8014be6:	d004      	beq.n	8014bf2 <USB_EPStartXfer+0xe0e>
 8014be8:	187b      	adds	r3, r7, r1
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	3301      	adds	r3, #1
 8014bee:	187a      	adds	r2, r7, r1
 8014bf0:	6013      	str	r3, [r2, #0]
 8014bf2:	2198      	movs	r1, #152	@ 0x98
 8014bf4:	187b      	adds	r3, r7, r1
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	881b      	ldrh	r3, [r3, #0]
 8014bfa:	b29a      	uxth	r2, r3
 8014bfc:	23e0      	movs	r3, #224	@ 0xe0
 8014bfe:	18fb      	adds	r3, r7, r3
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	029b      	lsls	r3, r3, #10
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	4313      	orrs	r3, r2
 8014c0a:	b29a      	uxth	r2, r3
 8014c0c:	187b      	adds	r3, r7, r1
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	801a      	strh	r2, [r3, #0]
 8014c12:	e026      	b.n	8014c62 <USB_EPStartXfer+0xe7e>
 8014c14:	00000406 	.word	0x00000406
 8014c18:	ffff8000 	.word	0xffff8000
 8014c1c:	00000402 	.word	0x00000402
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	785b      	ldrb	r3, [r3, #1]
 8014c24:	2b01      	cmp	r3, #1
 8014c26:	d11c      	bne.n	8014c62 <USB_EPStartXfer+0xe7e>
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	2250      	movs	r2, #80	@ 0x50
 8014c2c:	5a9b      	ldrh	r3, [r3, r2]
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	001a      	movs	r2, r3
 8014c32:	21a4      	movs	r1, #164	@ 0xa4
 8014c34:	187b      	adds	r3, r7, r1
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	189b      	adds	r3, r3, r2
 8014c3a:	187a      	adds	r2, r7, r1
 8014c3c:	6013      	str	r3, [r2, #0]
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	00da      	lsls	r2, r3, #3
 8014c44:	187b      	adds	r3, r7, r1
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	18d3      	adds	r3, r2, r3
 8014c4a:	4ad2      	ldr	r2, [pc, #840]	@ (8014f94 <USB_EPStartXfer+0x11b0>)
 8014c4c:	4694      	mov	ip, r2
 8014c4e:	4463      	add	r3, ip
 8014c50:	21a0      	movs	r1, #160	@ 0xa0
 8014c52:	187a      	adds	r2, r7, r1
 8014c54:	6013      	str	r3, [r2, #0]
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	691b      	ldr	r3, [r3, #16]
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	187b      	adds	r3, r7, r1
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	69db      	ldr	r3, [r3, #28]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d100      	bne.n	8014c6c <USB_EPStartXfer+0xe88>
 8014c6a:	e1c2      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014c6c:	687a      	ldr	r2, [r7, #4]
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	781b      	ldrb	r3, [r3, #0]
 8014c72:	009b      	lsls	r3, r3, #2
 8014c74:	18d2      	adds	r2, r2, r3
 8014c76:	2196      	movs	r1, #150	@ 0x96
 8014c78:	187b      	adds	r3, r7, r1
 8014c7a:	8812      	ldrh	r2, [r2, #0]
 8014c7c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014c7e:	187b      	adds	r3, r7, r1
 8014c80:	881a      	ldrh	r2, [r3, #0]
 8014c82:	2380      	movs	r3, #128	@ 0x80
 8014c84:	01db      	lsls	r3, r3, #7
 8014c86:	4013      	ands	r3, r2
 8014c88:	d004      	beq.n	8014c94 <USB_EPStartXfer+0xeb0>
 8014c8a:	187b      	adds	r3, r7, r1
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	2240      	movs	r2, #64	@ 0x40
 8014c90:	4013      	ands	r3, r2
 8014c92:	d10d      	bne.n	8014cb0 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014c94:	2196      	movs	r1, #150	@ 0x96
 8014c96:	187b      	adds	r3, r7, r1
 8014c98:	881a      	ldrh	r2, [r3, #0]
 8014c9a:	2380      	movs	r3, #128	@ 0x80
 8014c9c:	01db      	lsls	r3, r3, #7
 8014c9e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014ca0:	d000      	beq.n	8014ca4 <USB_EPStartXfer+0xec0>
 8014ca2:	e1a6      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014ca4:	187b      	adds	r3, r7, r1
 8014ca6:	881b      	ldrh	r3, [r3, #0]
 8014ca8:	2240      	movs	r2, #64	@ 0x40
 8014caa:	4013      	ands	r3, r2
 8014cac:	d000      	beq.n	8014cb0 <USB_EPStartXfer+0xecc>
 8014cae:	e1a0      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	009b      	lsls	r3, r3, #2
 8014cb8:	18d3      	adds	r3, r2, r3
 8014cba:	881b      	ldrh	r3, [r3, #0]
 8014cbc:	b29a      	uxth	r2, r3
 8014cbe:	2094      	movs	r0, #148	@ 0x94
 8014cc0:	183b      	adds	r3, r7, r0
 8014cc2:	49b5      	ldr	r1, [pc, #724]	@ (8014f98 <USB_EPStartXfer+0x11b4>)
 8014cc4:	400a      	ands	r2, r1
 8014cc6:	801a      	strh	r2, [r3, #0]
 8014cc8:	687a      	ldr	r2, [r7, #4]
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	18d3      	adds	r3, r2, r3
 8014cd2:	183a      	adds	r2, r7, r0
 8014cd4:	8812      	ldrh	r2, [r2, #0]
 8014cd6:	49b1      	ldr	r1, [pc, #708]	@ (8014f9c <USB_EPStartXfer+0x11b8>)
 8014cd8:	430a      	orrs	r2, r1
 8014cda:	b292      	uxth	r2, r2
 8014cdc:	801a      	strh	r2, [r3, #0]
 8014cde:	e188      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	78db      	ldrb	r3, [r3, #3]
 8014ce4:	2b01      	cmp	r3, #1
 8014ce6:	d000      	beq.n	8014cea <USB_EPStartXfer+0xf06>
 8014ce8:	e181      	b.n	8014fee <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	699a      	ldr	r2, [r3, #24]
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	691b      	ldr	r3, [r3, #16]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d90d      	bls.n	8014d12 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	691b      	ldr	r3, [r3, #16]
 8014cfa:	1d7a      	adds	r2, r7, #5
 8014cfc:	32ff      	adds	r2, #255	@ 0xff
 8014cfe:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	699a      	ldr	r2, [r3, #24]
 8014d04:	1d7b      	adds	r3, r7, #5
 8014d06:	33ff      	adds	r3, #255	@ 0xff
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	1ad2      	subs	r2, r2, r3
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	619a      	str	r2, [r3, #24]
 8014d10:	e007      	b.n	8014d22 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	699b      	ldr	r3, [r3, #24]
 8014d16:	1d7a      	adds	r2, r7, #5
 8014d18:	32ff      	adds	r2, #255	@ 0xff
 8014d1a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	785b      	ldrb	r3, [r3, #1]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d000      	beq.n	8014d2c <USB_EPStartXfer+0xf48>
 8014d2a:	e082      	b.n	8014e32 <USB_EPStartXfer+0x104e>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	21cc      	movs	r1, #204	@ 0xcc
 8014d30:	187a      	adds	r2, r7, r1
 8014d32:	6013      	str	r3, [r2, #0]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2250      	movs	r2, #80	@ 0x50
 8014d38:	5a9b      	ldrh	r3, [r3, r2]
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	001a      	movs	r2, r3
 8014d3e:	187b      	adds	r3, r7, r1
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	189b      	adds	r3, r3, r2
 8014d44:	187a      	adds	r2, r7, r1
 8014d46:	6013      	str	r3, [r2, #0]
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	00da      	lsls	r2, r3, #3
 8014d4e:	187b      	adds	r3, r7, r1
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	18d3      	adds	r3, r2, r3
 8014d54:	4a92      	ldr	r2, [pc, #584]	@ (8014fa0 <USB_EPStartXfer+0x11bc>)
 8014d56:	4694      	mov	ip, r2
 8014d58:	4463      	add	r3, ip
 8014d5a:	21c8      	movs	r1, #200	@ 0xc8
 8014d5c:	187a      	adds	r2, r7, r1
 8014d5e:	6013      	str	r3, [r2, #0]
 8014d60:	187b      	adds	r3, r7, r1
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	881b      	ldrh	r3, [r3, #0]
 8014d66:	b29b      	uxth	r3, r3
 8014d68:	059b      	lsls	r3, r3, #22
 8014d6a:	0d9b      	lsrs	r3, r3, #22
 8014d6c:	b29a      	uxth	r2, r3
 8014d6e:	187b      	adds	r3, r7, r1
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	801a      	strh	r2, [r3, #0]
 8014d74:	1d7b      	adds	r3, r7, #5
 8014d76:	33ff      	adds	r3, #255	@ 0xff
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8014d7c:	d925      	bls.n	8014dca <USB_EPStartXfer+0xfe6>
 8014d7e:	1d7b      	adds	r3, r7, #5
 8014d80:	33ff      	adds	r3, #255	@ 0xff
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	095b      	lsrs	r3, r3, #5
 8014d86:	21dc      	movs	r1, #220	@ 0xdc
 8014d88:	187a      	adds	r2, r7, r1
 8014d8a:	6013      	str	r3, [r2, #0]
 8014d8c:	1d7b      	adds	r3, r7, #5
 8014d8e:	33ff      	adds	r3, #255	@ 0xff
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	221f      	movs	r2, #31
 8014d94:	4013      	ands	r3, r2
 8014d96:	d104      	bne.n	8014da2 <USB_EPStartXfer+0xfbe>
 8014d98:	187b      	adds	r3, r7, r1
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	3b01      	subs	r3, #1
 8014d9e:	187a      	adds	r2, r7, r1
 8014da0:	6013      	str	r3, [r2, #0]
 8014da2:	21c8      	movs	r1, #200	@ 0xc8
 8014da4:	187b      	adds	r3, r7, r1
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	881b      	ldrh	r3, [r3, #0]
 8014daa:	b29a      	uxth	r2, r3
 8014dac:	23dc      	movs	r3, #220	@ 0xdc
 8014dae:	18fb      	adds	r3, r7, r3
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	b29b      	uxth	r3, r3
 8014db4:	029b      	lsls	r3, r3, #10
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	4313      	orrs	r3, r2
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	4a79      	ldr	r2, [pc, #484]	@ (8014fa4 <USB_EPStartXfer+0x11c0>)
 8014dbe:	4313      	orrs	r3, r2
 8014dc0:	b29a      	uxth	r2, r3
 8014dc2:	187b      	adds	r3, r7, r1
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	801a      	strh	r2, [r3, #0]
 8014dc8:	e058      	b.n	8014e7c <USB_EPStartXfer+0x1098>
 8014dca:	1d7b      	adds	r3, r7, #5
 8014dcc:	33ff      	adds	r3, #255	@ 0xff
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d10b      	bne.n	8014dec <USB_EPStartXfer+0x1008>
 8014dd4:	21c8      	movs	r1, #200	@ 0xc8
 8014dd6:	187b      	adds	r3, r7, r1
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	881b      	ldrh	r3, [r3, #0]
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	4a71      	ldr	r2, [pc, #452]	@ (8014fa4 <USB_EPStartXfer+0x11c0>)
 8014de0:	4313      	orrs	r3, r2
 8014de2:	b29a      	uxth	r2, r3
 8014de4:	187b      	adds	r3, r7, r1
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	801a      	strh	r2, [r3, #0]
 8014dea:	e047      	b.n	8014e7c <USB_EPStartXfer+0x1098>
 8014dec:	1d7b      	adds	r3, r7, #5
 8014dee:	33ff      	adds	r3, #255	@ 0xff
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	085b      	lsrs	r3, r3, #1
 8014df4:	21dc      	movs	r1, #220	@ 0xdc
 8014df6:	187a      	adds	r2, r7, r1
 8014df8:	6013      	str	r3, [r2, #0]
 8014dfa:	1d7b      	adds	r3, r7, #5
 8014dfc:	33ff      	adds	r3, #255	@ 0xff
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	2201      	movs	r2, #1
 8014e02:	4013      	ands	r3, r2
 8014e04:	d004      	beq.n	8014e10 <USB_EPStartXfer+0x102c>
 8014e06:	187b      	adds	r3, r7, r1
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	187a      	adds	r2, r7, r1
 8014e0e:	6013      	str	r3, [r2, #0]
 8014e10:	21c8      	movs	r1, #200	@ 0xc8
 8014e12:	187b      	adds	r3, r7, r1
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	881b      	ldrh	r3, [r3, #0]
 8014e18:	b29a      	uxth	r2, r3
 8014e1a:	23dc      	movs	r3, #220	@ 0xdc
 8014e1c:	18fb      	adds	r3, r7, r3
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	029b      	lsls	r3, r3, #10
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	4313      	orrs	r3, r2
 8014e28:	b29a      	uxth	r2, r3
 8014e2a:	187b      	adds	r3, r7, r1
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	801a      	strh	r2, [r3, #0]
 8014e30:	e024      	b.n	8014e7c <USB_EPStartXfer+0x1098>
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	785b      	ldrb	r3, [r3, #1]
 8014e36:	2b01      	cmp	r3, #1
 8014e38:	d120      	bne.n	8014e7c <USB_EPStartXfer+0x1098>
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	21d4      	movs	r1, #212	@ 0xd4
 8014e3e:	187a      	adds	r2, r7, r1
 8014e40:	6013      	str	r3, [r2, #0]
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2250      	movs	r2, #80	@ 0x50
 8014e46:	5a9b      	ldrh	r3, [r3, r2]
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	001a      	movs	r2, r3
 8014e4c:	187b      	adds	r3, r7, r1
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	189b      	adds	r3, r3, r2
 8014e52:	187a      	adds	r2, r7, r1
 8014e54:	6013      	str	r3, [r2, #0]
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	00da      	lsls	r2, r3, #3
 8014e5c:	187b      	adds	r3, r7, r1
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	18d3      	adds	r3, r2, r3
 8014e62:	4a4f      	ldr	r2, [pc, #316]	@ (8014fa0 <USB_EPStartXfer+0x11bc>)
 8014e64:	4694      	mov	ip, r2
 8014e66:	4463      	add	r3, ip
 8014e68:	21d0      	movs	r1, #208	@ 0xd0
 8014e6a:	187a      	adds	r2, r7, r1
 8014e6c:	6013      	str	r3, [r2, #0]
 8014e6e:	1d7b      	adds	r3, r7, #5
 8014e70:	33ff      	adds	r3, #255	@ 0xff
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	b29a      	uxth	r2, r3
 8014e76:	187b      	adds	r3, r7, r1
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	801a      	strh	r2, [r3, #0]
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	22c4      	movs	r2, #196	@ 0xc4
 8014e80:	18ba      	adds	r2, r7, r2
 8014e82:	6013      	str	r3, [r2, #0]
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	785b      	ldrb	r3, [r3, #1]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d000      	beq.n	8014e8e <USB_EPStartXfer+0x10aa>
 8014e8c:	e08c      	b.n	8014fa8 <USB_EPStartXfer+0x11c4>
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	21bc      	movs	r1, #188	@ 0xbc
 8014e92:	187a      	adds	r2, r7, r1
 8014e94:	6013      	str	r3, [r2, #0]
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2250      	movs	r2, #80	@ 0x50
 8014e9a:	5a9b      	ldrh	r3, [r3, r2]
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	001a      	movs	r2, r3
 8014ea0:	187b      	adds	r3, r7, r1
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	189b      	adds	r3, r3, r2
 8014ea6:	187a      	adds	r2, r7, r1
 8014ea8:	6013      	str	r3, [r2, #0]
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	00da      	lsls	r2, r3, #3
 8014eb0:	187b      	adds	r3, r7, r1
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	18d3      	adds	r3, r2, r3
 8014eb6:	4a37      	ldr	r2, [pc, #220]	@ (8014f94 <USB_EPStartXfer+0x11b0>)
 8014eb8:	4694      	mov	ip, r2
 8014eba:	4463      	add	r3, ip
 8014ebc:	21b8      	movs	r1, #184	@ 0xb8
 8014ebe:	187a      	adds	r2, r7, r1
 8014ec0:	6013      	str	r3, [r2, #0]
 8014ec2:	187b      	adds	r3, r7, r1
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	881b      	ldrh	r3, [r3, #0]
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	059b      	lsls	r3, r3, #22
 8014ecc:	0d9b      	lsrs	r3, r3, #22
 8014ece:	b29a      	uxth	r2, r3
 8014ed0:	187b      	adds	r3, r7, r1
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	801a      	strh	r2, [r3, #0]
 8014ed6:	1d7b      	adds	r3, r7, #5
 8014ed8:	33ff      	adds	r3, #255	@ 0xff
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	2b3e      	cmp	r3, #62	@ 0x3e
 8014ede:	d925      	bls.n	8014f2c <USB_EPStartXfer+0x1148>
 8014ee0:	1d7b      	adds	r3, r7, #5
 8014ee2:	33ff      	adds	r3, #255	@ 0xff
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	095b      	lsrs	r3, r3, #5
 8014ee8:	21d8      	movs	r1, #216	@ 0xd8
 8014eea:	187a      	adds	r2, r7, r1
 8014eec:	6013      	str	r3, [r2, #0]
 8014eee:	1d7b      	adds	r3, r7, #5
 8014ef0:	33ff      	adds	r3, #255	@ 0xff
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	221f      	movs	r2, #31
 8014ef6:	4013      	ands	r3, r2
 8014ef8:	d104      	bne.n	8014f04 <USB_EPStartXfer+0x1120>
 8014efa:	187b      	adds	r3, r7, r1
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	3b01      	subs	r3, #1
 8014f00:	187a      	adds	r2, r7, r1
 8014f02:	6013      	str	r3, [r2, #0]
 8014f04:	21b8      	movs	r1, #184	@ 0xb8
 8014f06:	187b      	adds	r3, r7, r1
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	881b      	ldrh	r3, [r3, #0]
 8014f0c:	b29a      	uxth	r2, r3
 8014f0e:	23d8      	movs	r3, #216	@ 0xd8
 8014f10:	18fb      	adds	r3, r7, r3
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	b29b      	uxth	r3, r3
 8014f16:	029b      	lsls	r3, r3, #10
 8014f18:	b29b      	uxth	r3, r3
 8014f1a:	4313      	orrs	r3, r2
 8014f1c:	b29b      	uxth	r3, r3
 8014f1e:	4a21      	ldr	r2, [pc, #132]	@ (8014fa4 <USB_EPStartXfer+0x11c0>)
 8014f20:	4313      	orrs	r3, r2
 8014f22:	b29a      	uxth	r2, r3
 8014f24:	187b      	adds	r3, r7, r1
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	801a      	strh	r2, [r3, #0]
 8014f2a:	e062      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
 8014f2c:	1d7b      	adds	r3, r7, #5
 8014f2e:	33ff      	adds	r3, #255	@ 0xff
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d10b      	bne.n	8014f4e <USB_EPStartXfer+0x116a>
 8014f36:	21b8      	movs	r1, #184	@ 0xb8
 8014f38:	187b      	adds	r3, r7, r1
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	881b      	ldrh	r3, [r3, #0]
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	4a18      	ldr	r2, [pc, #96]	@ (8014fa4 <USB_EPStartXfer+0x11c0>)
 8014f42:	4313      	orrs	r3, r2
 8014f44:	b29a      	uxth	r2, r3
 8014f46:	187b      	adds	r3, r7, r1
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	801a      	strh	r2, [r3, #0]
 8014f4c:	e051      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
 8014f4e:	1d7b      	adds	r3, r7, #5
 8014f50:	33ff      	adds	r3, #255	@ 0xff
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	085b      	lsrs	r3, r3, #1
 8014f56:	21d8      	movs	r1, #216	@ 0xd8
 8014f58:	187a      	adds	r2, r7, r1
 8014f5a:	6013      	str	r3, [r2, #0]
 8014f5c:	1d7b      	adds	r3, r7, #5
 8014f5e:	33ff      	adds	r3, #255	@ 0xff
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	2201      	movs	r2, #1
 8014f64:	4013      	ands	r3, r2
 8014f66:	d004      	beq.n	8014f72 <USB_EPStartXfer+0x118e>
 8014f68:	187b      	adds	r3, r7, r1
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	187a      	adds	r2, r7, r1
 8014f70:	6013      	str	r3, [r2, #0]
 8014f72:	21b8      	movs	r1, #184	@ 0xb8
 8014f74:	187b      	adds	r3, r7, r1
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	881b      	ldrh	r3, [r3, #0]
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	23d8      	movs	r3, #216	@ 0xd8
 8014f7e:	18fb      	adds	r3, r7, r3
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	b29b      	uxth	r3, r3
 8014f84:	029b      	lsls	r3, r3, #10
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	4313      	orrs	r3, r2
 8014f8a:	b29a      	uxth	r2, r3
 8014f8c:	187b      	adds	r3, r7, r1
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	801a      	strh	r2, [r3, #0]
 8014f92:	e02e      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
 8014f94:	00000406 	.word	0x00000406
 8014f98:	ffff8f8f 	.word	0xffff8f8f
 8014f9c:	ffff80c0 	.word	0xffff80c0
 8014fa0:	00000402 	.word	0x00000402
 8014fa4:	ffff8000 	.word	0xffff8000
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	785b      	ldrb	r3, [r3, #1]
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d120      	bne.n	8014ff2 <USB_EPStartXfer+0x120e>
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2250      	movs	r2, #80	@ 0x50
 8014fb4:	5a9b      	ldrh	r3, [r3, r2]
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	001a      	movs	r2, r3
 8014fba:	21c4      	movs	r1, #196	@ 0xc4
 8014fbc:	187b      	adds	r3, r7, r1
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	189b      	adds	r3, r3, r2
 8014fc2:	187a      	adds	r2, r7, r1
 8014fc4:	6013      	str	r3, [r2, #0]
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	00da      	lsls	r2, r3, #3
 8014fcc:	187b      	adds	r3, r7, r1
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	18d3      	adds	r3, r2, r3
 8014fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8015048 <USB_EPStartXfer+0x1264>)
 8014fd4:	4694      	mov	ip, r2
 8014fd6:	4463      	add	r3, ip
 8014fd8:	21c0      	movs	r1, #192	@ 0xc0
 8014fda:	187a      	adds	r2, r7, r1
 8014fdc:	6013      	str	r3, [r2, #0]
 8014fde:	1d7b      	adds	r3, r7, #5
 8014fe0:	33ff      	adds	r3, #255	@ 0xff
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	b29a      	uxth	r2, r3
 8014fe6:	187b      	adds	r3, r7, r1
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	801a      	strh	r2, [r3, #0]
 8014fec:	e001      	b.n	8014ff2 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8014fee:	2301      	movs	r3, #1
 8014ff0:	e025      	b.n	801503e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014ff2:	687a      	ldr	r2, [r7, #4]
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	781b      	ldrb	r3, [r3, #0]
 8014ff8:	009b      	lsls	r3, r3, #2
 8014ffa:	18d3      	adds	r3, r2, r3
 8014ffc:	881b      	ldrh	r3, [r3, #0]
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	208a      	movs	r0, #138	@ 0x8a
 8015002:	183b      	adds	r3, r7, r0
 8015004:	4911      	ldr	r1, [pc, #68]	@ (801504c <USB_EPStartXfer+0x1268>)
 8015006:	400a      	ands	r2, r1
 8015008:	801a      	strh	r2, [r3, #0]
 801500a:	183b      	adds	r3, r7, r0
 801500c:	183a      	adds	r2, r7, r0
 801500e:	8812      	ldrh	r2, [r2, #0]
 8015010:	2180      	movs	r1, #128	@ 0x80
 8015012:	0149      	lsls	r1, r1, #5
 8015014:	404a      	eors	r2, r1
 8015016:	801a      	strh	r2, [r3, #0]
 8015018:	183b      	adds	r3, r7, r0
 801501a:	183a      	adds	r2, r7, r0
 801501c:	8812      	ldrh	r2, [r2, #0]
 801501e:	2180      	movs	r1, #128	@ 0x80
 8015020:	0189      	lsls	r1, r1, #6
 8015022:	404a      	eors	r2, r1
 8015024:	801a      	strh	r2, [r3, #0]
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	781b      	ldrb	r3, [r3, #0]
 801502c:	009b      	lsls	r3, r3, #2
 801502e:	18d3      	adds	r3, r2, r3
 8015030:	183a      	adds	r2, r7, r0
 8015032:	8812      	ldrh	r2, [r2, #0]
 8015034:	4906      	ldr	r1, [pc, #24]	@ (8015050 <USB_EPStartXfer+0x126c>)
 8015036:	430a      	orrs	r2, r1
 8015038:	b292      	uxth	r2, r2
 801503a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801503c:	2300      	movs	r3, #0
}
 801503e:	0018      	movs	r0, r3
 8015040:	46bd      	mov	sp, r7
 8015042:	b043      	add	sp, #268	@ 0x10c
 8015044:	bd90      	pop	{r4, r7, pc}
 8015046:	46c0      	nop			@ (mov r8, r8)
 8015048:	00000406 	.word	0x00000406
 801504c:	ffffbf8f 	.word	0xffffbf8f
 8015050:	ffff8080 	.word	0xffff8080

08015054 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	785b      	ldrb	r3, [r3, #1]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d01d      	beq.n	80150a2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	009b      	lsls	r3, r3, #2
 801506e:	18d3      	adds	r3, r2, r3
 8015070:	881b      	ldrh	r3, [r3, #0]
 8015072:	b29a      	uxth	r2, r3
 8015074:	200c      	movs	r0, #12
 8015076:	183b      	adds	r3, r7, r0
 8015078:	491b      	ldr	r1, [pc, #108]	@ (80150e8 <USB_EPSetStall+0x94>)
 801507a:	400a      	ands	r2, r1
 801507c:	801a      	strh	r2, [r3, #0]
 801507e:	183b      	adds	r3, r7, r0
 8015080:	183a      	adds	r2, r7, r0
 8015082:	8812      	ldrh	r2, [r2, #0]
 8015084:	2110      	movs	r1, #16
 8015086:	404a      	eors	r2, r1
 8015088:	801a      	strh	r2, [r3, #0]
 801508a:	687a      	ldr	r2, [r7, #4]
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	009b      	lsls	r3, r3, #2
 8015092:	18d3      	adds	r3, r2, r3
 8015094:	183a      	adds	r2, r7, r0
 8015096:	8812      	ldrh	r2, [r2, #0]
 8015098:	4914      	ldr	r1, [pc, #80]	@ (80150ec <USB_EPSetStall+0x98>)
 801509a:	430a      	orrs	r2, r1
 801509c:	b292      	uxth	r2, r2
 801509e:	801a      	strh	r2, [r3, #0]
 80150a0:	e01d      	b.n	80150de <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80150a2:	687a      	ldr	r2, [r7, #4]
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	009b      	lsls	r3, r3, #2
 80150aa:	18d3      	adds	r3, r2, r3
 80150ac:	881b      	ldrh	r3, [r3, #0]
 80150ae:	b29a      	uxth	r2, r3
 80150b0:	200e      	movs	r0, #14
 80150b2:	183b      	adds	r3, r7, r0
 80150b4:	490e      	ldr	r1, [pc, #56]	@ (80150f0 <USB_EPSetStall+0x9c>)
 80150b6:	400a      	ands	r2, r1
 80150b8:	801a      	strh	r2, [r3, #0]
 80150ba:	183b      	adds	r3, r7, r0
 80150bc:	183a      	adds	r2, r7, r0
 80150be:	8812      	ldrh	r2, [r2, #0]
 80150c0:	2180      	movs	r1, #128	@ 0x80
 80150c2:	0149      	lsls	r1, r1, #5
 80150c4:	404a      	eors	r2, r1
 80150c6:	801a      	strh	r2, [r3, #0]
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	009b      	lsls	r3, r3, #2
 80150d0:	18d3      	adds	r3, r2, r3
 80150d2:	183a      	adds	r2, r7, r0
 80150d4:	8812      	ldrh	r2, [r2, #0]
 80150d6:	4905      	ldr	r1, [pc, #20]	@ (80150ec <USB_EPSetStall+0x98>)
 80150d8:	430a      	orrs	r2, r1
 80150da:	b292      	uxth	r2, r2
 80150dc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80150de:	2300      	movs	r3, #0
}
 80150e0:	0018      	movs	r0, r3
 80150e2:	46bd      	mov	sp, r7
 80150e4:	b004      	add	sp, #16
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	ffff8fbf 	.word	0xffff8fbf
 80150ec:	ffff8080 	.word	0xffff8080
 80150f0:	ffffbf8f 	.word	0xffffbf8f

080150f4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b086      	sub	sp, #24
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
 80150fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	7b1b      	ldrb	r3, [r3, #12]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d000      	beq.n	8015108 <USB_EPClearStall+0x14>
 8015106:	e095      	b.n	8015234 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	785b      	ldrb	r3, [r3, #1]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d046      	beq.n	801519e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015110:	687a      	ldr	r2, [r7, #4]
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	781b      	ldrb	r3, [r3, #0]
 8015116:	009b      	lsls	r3, r3, #2
 8015118:	18d2      	adds	r2, r2, r3
 801511a:	2110      	movs	r1, #16
 801511c:	187b      	adds	r3, r7, r1
 801511e:	8812      	ldrh	r2, [r2, #0]
 8015120:	801a      	strh	r2, [r3, #0]
 8015122:	187b      	adds	r3, r7, r1
 8015124:	881b      	ldrh	r3, [r3, #0]
 8015126:	2240      	movs	r2, #64	@ 0x40
 8015128:	4013      	ands	r3, r2
 801512a:	d016      	beq.n	801515a <USB_EPClearStall+0x66>
 801512c:	687a      	ldr	r2, [r7, #4]
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	781b      	ldrb	r3, [r3, #0]
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	18d3      	adds	r3, r2, r3
 8015136:	881b      	ldrh	r3, [r3, #0]
 8015138:	b29a      	uxth	r2, r3
 801513a:	200e      	movs	r0, #14
 801513c:	183b      	adds	r3, r7, r0
 801513e:	4940      	ldr	r1, [pc, #256]	@ (8015240 <USB_EPClearStall+0x14c>)
 8015140:	400a      	ands	r2, r1
 8015142:	801a      	strh	r2, [r3, #0]
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	683b      	ldr	r3, [r7, #0]
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	18d3      	adds	r3, r2, r3
 801514e:	183a      	adds	r2, r7, r0
 8015150:	8812      	ldrh	r2, [r2, #0]
 8015152:	493c      	ldr	r1, [pc, #240]	@ (8015244 <USB_EPClearStall+0x150>)
 8015154:	430a      	orrs	r2, r1
 8015156:	b292      	uxth	r2, r2
 8015158:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	78db      	ldrb	r3, [r3, #3]
 801515e:	2b01      	cmp	r3, #1
 8015160:	d068      	beq.n	8015234 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8015162:	687a      	ldr	r2, [r7, #4]
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	18d3      	adds	r3, r2, r3
 801516c:	881b      	ldrh	r3, [r3, #0]
 801516e:	b29a      	uxth	r2, r3
 8015170:	200c      	movs	r0, #12
 8015172:	183b      	adds	r3, r7, r0
 8015174:	4934      	ldr	r1, [pc, #208]	@ (8015248 <USB_EPClearStall+0x154>)
 8015176:	400a      	ands	r2, r1
 8015178:	801a      	strh	r2, [r3, #0]
 801517a:	183b      	adds	r3, r7, r0
 801517c:	183a      	adds	r2, r7, r0
 801517e:	8812      	ldrh	r2, [r2, #0]
 8015180:	2120      	movs	r1, #32
 8015182:	404a      	eors	r2, r1
 8015184:	801a      	strh	r2, [r3, #0]
 8015186:	687a      	ldr	r2, [r7, #4]
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	781b      	ldrb	r3, [r3, #0]
 801518c:	009b      	lsls	r3, r3, #2
 801518e:	18d3      	adds	r3, r2, r3
 8015190:	183a      	adds	r2, r7, r0
 8015192:	8812      	ldrh	r2, [r2, #0]
 8015194:	492d      	ldr	r1, [pc, #180]	@ (801524c <USB_EPClearStall+0x158>)
 8015196:	430a      	orrs	r2, r1
 8015198:	b292      	uxth	r2, r2
 801519a:	801a      	strh	r2, [r3, #0]
 801519c:	e04a      	b.n	8015234 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	781b      	ldrb	r3, [r3, #0]
 80151a4:	009b      	lsls	r3, r3, #2
 80151a6:	18d2      	adds	r2, r2, r3
 80151a8:	2116      	movs	r1, #22
 80151aa:	187b      	adds	r3, r7, r1
 80151ac:	8812      	ldrh	r2, [r2, #0]
 80151ae:	801a      	strh	r2, [r3, #0]
 80151b0:	187b      	adds	r3, r7, r1
 80151b2:	881a      	ldrh	r2, [r3, #0]
 80151b4:	2380      	movs	r3, #128	@ 0x80
 80151b6:	01db      	lsls	r3, r3, #7
 80151b8:	4013      	ands	r3, r2
 80151ba:	d016      	beq.n	80151ea <USB_EPClearStall+0xf6>
 80151bc:	687a      	ldr	r2, [r7, #4]
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	18d3      	adds	r3, r2, r3
 80151c6:	881b      	ldrh	r3, [r3, #0]
 80151c8:	b29a      	uxth	r2, r3
 80151ca:	2014      	movs	r0, #20
 80151cc:	183b      	adds	r3, r7, r0
 80151ce:	491c      	ldr	r1, [pc, #112]	@ (8015240 <USB_EPClearStall+0x14c>)
 80151d0:	400a      	ands	r2, r1
 80151d2:	801a      	strh	r2, [r3, #0]
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	009b      	lsls	r3, r3, #2
 80151dc:	18d3      	adds	r3, r2, r3
 80151de:	183a      	adds	r2, r7, r0
 80151e0:	8812      	ldrh	r2, [r2, #0]
 80151e2:	491b      	ldr	r1, [pc, #108]	@ (8015250 <USB_EPClearStall+0x15c>)
 80151e4:	430a      	orrs	r2, r1
 80151e6:	b292      	uxth	r2, r2
 80151e8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80151ea:	687a      	ldr	r2, [r7, #4]
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	781b      	ldrb	r3, [r3, #0]
 80151f0:	009b      	lsls	r3, r3, #2
 80151f2:	18d3      	adds	r3, r2, r3
 80151f4:	881b      	ldrh	r3, [r3, #0]
 80151f6:	b29a      	uxth	r2, r3
 80151f8:	2012      	movs	r0, #18
 80151fa:	183b      	adds	r3, r7, r0
 80151fc:	4915      	ldr	r1, [pc, #84]	@ (8015254 <USB_EPClearStall+0x160>)
 80151fe:	400a      	ands	r2, r1
 8015200:	801a      	strh	r2, [r3, #0]
 8015202:	183b      	adds	r3, r7, r0
 8015204:	183a      	adds	r2, r7, r0
 8015206:	8812      	ldrh	r2, [r2, #0]
 8015208:	2180      	movs	r1, #128	@ 0x80
 801520a:	0149      	lsls	r1, r1, #5
 801520c:	404a      	eors	r2, r1
 801520e:	801a      	strh	r2, [r3, #0]
 8015210:	183b      	adds	r3, r7, r0
 8015212:	183a      	adds	r2, r7, r0
 8015214:	8812      	ldrh	r2, [r2, #0]
 8015216:	2180      	movs	r1, #128	@ 0x80
 8015218:	0189      	lsls	r1, r1, #6
 801521a:	404a      	eors	r2, r1
 801521c:	801a      	strh	r2, [r3, #0]
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	009b      	lsls	r3, r3, #2
 8015226:	18d3      	adds	r3, r2, r3
 8015228:	183a      	adds	r2, r7, r0
 801522a:	8812      	ldrh	r2, [r2, #0]
 801522c:	4907      	ldr	r1, [pc, #28]	@ (801524c <USB_EPClearStall+0x158>)
 801522e:	430a      	orrs	r2, r1
 8015230:	b292      	uxth	r2, r2
 8015232:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8015234:	2300      	movs	r3, #0
}
 8015236:	0018      	movs	r0, r3
 8015238:	46bd      	mov	sp, r7
 801523a:	b006      	add	sp, #24
 801523c:	bd80      	pop	{r7, pc}
 801523e:	46c0      	nop			@ (mov r8, r8)
 8015240:	ffff8f8f 	.word	0xffff8f8f
 8015244:	ffff80c0 	.word	0xffff80c0
 8015248:	ffff8fbf 	.word	0xffff8fbf
 801524c:	ffff8080 	.word	0xffff8080
 8015250:	ffffc080 	.word	0xffffc080
 8015254:	ffffbf8f 	.word	0xffffbf8f

08015258 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	000a      	movs	r2, r1
 8015262:	1cfb      	adds	r3, r7, #3
 8015264:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8015266:	1cfb      	adds	r3, r7, #3
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d103      	bne.n	8015276 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	224c      	movs	r2, #76	@ 0x4c
 8015272:	2180      	movs	r1, #128	@ 0x80
 8015274:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8015276:	2300      	movs	r3, #0
}
 8015278:	0018      	movs	r0, r3
 801527a:	46bd      	mov	sp, r7
 801527c:	b002      	add	sp, #8
 801527e:	bd80      	pop	{r7, pc}

08015280 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b082      	sub	sp, #8
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	2258      	movs	r2, #88	@ 0x58
 801528c:	5a9b      	ldrh	r3, [r3, r2]
 801528e:	b29b      	uxth	r3, r3
 8015290:	4a05      	ldr	r2, [pc, #20]	@ (80152a8 <USB_DevConnect+0x28>)
 8015292:	4313      	orrs	r3, r2
 8015294:	b299      	uxth	r1, r3
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	2258      	movs	r2, #88	@ 0x58
 801529a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801529c:	2300      	movs	r3, #0
}
 801529e:	0018      	movs	r0, r3
 80152a0:	46bd      	mov	sp, r7
 80152a2:	b002      	add	sp, #8
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	46c0      	nop			@ (mov r8, r8)
 80152a8:	ffff8000 	.word	0xffff8000

080152ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b084      	sub	sp, #16
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2244      	movs	r2, #68	@ 0x44
 80152b8:	5a9b      	ldrh	r3, [r3, r2]
 80152ba:	b29b      	uxth	r3, r3
 80152bc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80152be:	68fb      	ldr	r3, [r7, #12]
}
 80152c0:	0018      	movs	r0, r3
 80152c2:	46bd      	mov	sp, r7
 80152c4:	b004      	add	sp, #16
 80152c6:	bd80      	pop	{r7, pc}

080152c8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b08a      	sub	sp, #40	@ 0x28
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	60f8      	str	r0, [r7, #12]
 80152d0:	60b9      	str	r1, [r7, #8]
 80152d2:	0019      	movs	r1, r3
 80152d4:	1dbb      	adds	r3, r7, #6
 80152d6:	801a      	strh	r2, [r3, #0]
 80152d8:	1d3b      	adds	r3, r7, #4
 80152da:	1c0a      	adds	r2, r1, #0
 80152dc:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80152de:	1d3b      	adds	r3, r7, #4
 80152e0:	881b      	ldrh	r3, [r3, #0]
 80152e2:	3301      	adds	r3, #1
 80152e4:	085b      	lsrs	r3, r3, #1
 80152e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80152f0:	1dbb      	adds	r3, r7, #6
 80152f2:	881a      	ldrh	r2, [r3, #0]
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	18d3      	adds	r3, r2, r3
 80152f8:	2280      	movs	r2, #128	@ 0x80
 80152fa:	00d2      	lsls	r2, r2, #3
 80152fc:	4694      	mov	ip, r2
 80152fe:	4463      	add	r3, ip
 8015300:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8015302:	69bb      	ldr	r3, [r7, #24]
 8015304:	627b      	str	r3, [r7, #36]	@ 0x24
 8015306:	e020      	b.n	801534a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8015308:	69fb      	ldr	r3, [r7, #28]
 801530a:	781a      	ldrb	r2, [r3, #0]
 801530c:	2112      	movs	r1, #18
 801530e:	187b      	adds	r3, r7, r1
 8015310:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	3301      	adds	r3, #1
 8015316:	781b      	ldrb	r3, [r3, #0]
 8015318:	021b      	lsls	r3, r3, #8
 801531a:	b21a      	sxth	r2, r3
 801531c:	187b      	adds	r3, r7, r1
 801531e:	2000      	movs	r0, #0
 8015320:	5e1b      	ldrsh	r3, [r3, r0]
 8015322:	4313      	orrs	r3, r2
 8015324:	b21a      	sxth	r2, r3
 8015326:	187b      	adds	r3, r7, r1
 8015328:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801532a:	6a3b      	ldr	r3, [r7, #32]
 801532c:	187a      	adds	r2, r7, r1
 801532e:	8812      	ldrh	r2, [r2, #0]
 8015330:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8015332:	6a3b      	ldr	r3, [r7, #32]
 8015334:	3302      	adds	r3, #2
 8015336:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	3301      	adds	r3, #1
 801533c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801533e:	69fb      	ldr	r3, [r7, #28]
 8015340:	3301      	adds	r3, #1
 8015342:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8015344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015346:	3b01      	subs	r3, #1
 8015348:	627b      	str	r3, [r7, #36]	@ 0x24
 801534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801534c:	2b00      	cmp	r3, #0
 801534e:	d1db      	bne.n	8015308 <USB_WritePMA+0x40>
  }
}
 8015350:	46c0      	nop			@ (mov r8, r8)
 8015352:	46c0      	nop			@ (mov r8, r8)
 8015354:	46bd      	mov	sp, r7
 8015356:	b00a      	add	sp, #40	@ 0x28
 8015358:	bd80      	pop	{r7, pc}

0801535a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801535a:	b580      	push	{r7, lr}
 801535c:	b08a      	sub	sp, #40	@ 0x28
 801535e:	af00      	add	r7, sp, #0
 8015360:	60f8      	str	r0, [r7, #12]
 8015362:	60b9      	str	r1, [r7, #8]
 8015364:	0019      	movs	r1, r3
 8015366:	1dbb      	adds	r3, r7, #6
 8015368:	801a      	strh	r2, [r3, #0]
 801536a:	1d3b      	adds	r3, r7, #4
 801536c:	1c0a      	adds	r2, r1, #0
 801536e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8015370:	1d3b      	adds	r3, r7, #4
 8015372:	881b      	ldrh	r3, [r3, #0]
 8015374:	085b      	lsrs	r3, r3, #1
 8015376:	b29b      	uxth	r3, r3
 8015378:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8015382:	1dbb      	adds	r3, r7, #6
 8015384:	881a      	ldrh	r2, [r3, #0]
 8015386:	697b      	ldr	r3, [r7, #20]
 8015388:	18d3      	adds	r3, r2, r3
 801538a:	2280      	movs	r2, #128	@ 0x80
 801538c:	00d2      	lsls	r2, r2, #3
 801538e:	4694      	mov	ip, r2
 8015390:	4463      	add	r3, ip
 8015392:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8015394:	69bb      	ldr	r3, [r7, #24]
 8015396:	627b      	str	r3, [r7, #36]	@ 0x24
 8015398:	e018      	b.n	80153cc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801539a:	6a3b      	ldr	r3, [r7, #32]
 801539c:	881b      	ldrh	r3, [r3, #0]
 801539e:	b29b      	uxth	r3, r3
 80153a0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80153a2:	6a3b      	ldr	r3, [r7, #32]
 80153a4:	3302      	adds	r3, #2
 80153a6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	b2da      	uxtb	r2, r3
 80153ac:	69fb      	ldr	r3, [r7, #28]
 80153ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80153b0:	69fb      	ldr	r3, [r7, #28]
 80153b2:	3301      	adds	r3, #1
 80153b4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	0a1b      	lsrs	r3, r3, #8
 80153ba:	b2da      	uxtb	r2, r3
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80153c0:	69fb      	ldr	r3, [r7, #28]
 80153c2:	3301      	adds	r3, #1
 80153c4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80153c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153c8:	3b01      	subs	r3, #1
 80153ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80153cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d1e3      	bne.n	801539a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80153d2:	1d3b      	adds	r3, r7, #4
 80153d4:	881b      	ldrh	r3, [r3, #0]
 80153d6:	2201      	movs	r2, #1
 80153d8:	4013      	ands	r3, r2
 80153da:	b29b      	uxth	r3, r3
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d007      	beq.n	80153f0 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80153e0:	6a3b      	ldr	r3, [r7, #32]
 80153e2:	881b      	ldrh	r3, [r3, #0]
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	b2da      	uxtb	r2, r3
 80153ec:	69fb      	ldr	r3, [r7, #28]
 80153ee:	701a      	strb	r2, [r3, #0]
  }
}
 80153f0:	46c0      	nop			@ (mov r8, r8)
 80153f2:	46bd      	mov	sp, r7
 80153f4:	b00a      	add	sp, #40	@ 0x28
 80153f6:	bd80      	pop	{r7, pc}

080153f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b084      	sub	sp, #16
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	000a      	movs	r2, r1
 8015402:	1cfb      	adds	r3, r7, #3
 8015404:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8015406:	230f      	movs	r3, #15
 8015408:	18fb      	adds	r3, r7, r3
 801540a:	2200      	movs	r2, #0
 801540c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	7c1b      	ldrb	r3, [r3, #16]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d116      	bne.n	8015444 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015416:	2380      	movs	r3, #128	@ 0x80
 8015418:	009b      	lsls	r3, r3, #2
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	2202      	movs	r2, #2
 801541e:	2181      	movs	r1, #129	@ 0x81
 8015420:	f002 f8eb 	bl	80175fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2201      	movs	r2, #1
 8015428:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801542a:	2380      	movs	r3, #128	@ 0x80
 801542c:	009b      	lsls	r3, r3, #2
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	2202      	movs	r2, #2
 8015432:	2101      	movs	r1, #1
 8015434:	f002 f8e1 	bl	80175fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015438:	687a      	ldr	r2, [r7, #4]
 801543a:	23b6      	movs	r3, #182	@ 0xb6
 801543c:	005b      	lsls	r3, r3, #1
 801543e:	2101      	movs	r1, #1
 8015440:	50d1      	str	r1, [r2, r3]
 8015442:	e013      	b.n	801546c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	2340      	movs	r3, #64	@ 0x40
 8015448:	2202      	movs	r2, #2
 801544a:	2181      	movs	r1, #129	@ 0x81
 801544c:	f002 f8d5 	bl	80175fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2201      	movs	r2, #1
 8015454:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015456:	6878      	ldr	r0, [r7, #4]
 8015458:	2340      	movs	r3, #64	@ 0x40
 801545a:	2202      	movs	r2, #2
 801545c:	2101      	movs	r1, #1
 801545e:	f002 f8cc 	bl	80175fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015462:	687a      	ldr	r2, [r7, #4]
 8015464:	23b6      	movs	r3, #182	@ 0xb6
 8015466:	005b      	lsls	r3, r3, #1
 8015468:	2101      	movs	r1, #1
 801546a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	2308      	movs	r3, #8
 8015470:	2203      	movs	r2, #3
 8015472:	2182      	movs	r1, #130	@ 0x82
 8015474:	f002 f8c1 	bl	80175fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2201      	movs	r2, #1
 801547c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801547e:	2387      	movs	r3, #135	@ 0x87
 8015480:	009b      	lsls	r3, r3, #2
 8015482:	0018      	movs	r0, r3
 8015484:	f002 fa52 	bl	801792c <USBD_static_malloc>
 8015488:	0001      	movs	r1, r0
 801548a:	687a      	ldr	r2, [r7, #4]
 801548c:	23ae      	movs	r3, #174	@ 0xae
 801548e:	009b      	lsls	r3, r3, #2
 8015490:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8015492:	687a      	ldr	r2, [r7, #4]
 8015494:	23ae      	movs	r3, #174	@ 0xae
 8015496:	009b      	lsls	r3, r3, #2
 8015498:	58d3      	ldr	r3, [r2, r3]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d104      	bne.n	80154a8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801549e:	230f      	movs	r3, #15
 80154a0:	18fb      	adds	r3, r7, r3
 80154a2:	2201      	movs	r2, #1
 80154a4:	701a      	strb	r2, [r3, #0]
 80154a6:	e02c      	b.n	8015502 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80154a8:	687a      	ldr	r2, [r7, #4]
 80154aa:	23ae      	movs	r3, #174	@ 0xae
 80154ac:	009b      	lsls	r3, r3, #2
 80154ae:	58d3      	ldr	r3, [r2, r3]
 80154b0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80154b2:	687a      	ldr	r2, [r7, #4]
 80154b4:	23af      	movs	r3, #175	@ 0xaf
 80154b6:	009b      	lsls	r3, r3, #2
 80154b8:	58d3      	ldr	r3, [r2, r3]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80154be:	68ba      	ldr	r2, [r7, #8]
 80154c0:	2385      	movs	r3, #133	@ 0x85
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	2100      	movs	r1, #0
 80154c6:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80154c8:	68ba      	ldr	r2, [r7, #8]
 80154ca:	2386      	movs	r3, #134	@ 0x86
 80154cc:	009b      	lsls	r3, r3, #2
 80154ce:	2100      	movs	r1, #0
 80154d0:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	7c1b      	ldrb	r3, [r3, #16]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d10a      	bne.n	80154f0 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80154da:	68ba      	ldr	r2, [r7, #8]
 80154dc:	2381      	movs	r3, #129	@ 0x81
 80154de:	009b      	lsls	r3, r3, #2
 80154e0:	58d2      	ldr	r2, [r2, r3]
 80154e2:	2380      	movs	r3, #128	@ 0x80
 80154e4:	009b      	lsls	r3, r3, #2
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	2101      	movs	r1, #1
 80154ea:	f002 f9d1 	bl	8017890 <USBD_LL_PrepareReceive>
 80154ee:	e008      	b.n	8015502 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80154f0:	68ba      	ldr	r2, [r7, #8]
 80154f2:	2381      	movs	r3, #129	@ 0x81
 80154f4:	009b      	lsls	r3, r3, #2
 80154f6:	58d2      	ldr	r2, [r2, r3]
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	2340      	movs	r3, #64	@ 0x40
 80154fc:	2101      	movs	r1, #1
 80154fe:	f002 f9c7 	bl	8017890 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8015502:	230f      	movs	r3, #15
 8015504:	18fb      	adds	r3, r7, r3
 8015506:	781b      	ldrb	r3, [r3, #0]
}
 8015508:	0018      	movs	r0, r3
 801550a:	46bd      	mov	sp, r7
 801550c:	b004      	add	sp, #16
 801550e:	bd80      	pop	{r7, pc}

08015510 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	000a      	movs	r2, r1
 801551a:	1cfb      	adds	r3, r7, #3
 801551c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801551e:	230f      	movs	r3, #15
 8015520:	18fb      	adds	r3, r7, r3
 8015522:	2200      	movs	r2, #0
 8015524:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2181      	movs	r1, #129	@ 0x81
 801552a:	0018      	movs	r0, r3
 801552c:	f002 f89c 	bl	8017668 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2200      	movs	r2, #0
 8015534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2101      	movs	r1, #1
 801553a:	0018      	movs	r0, r3
 801553c:	f002 f894 	bl	8017668 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8015540:	687a      	ldr	r2, [r7, #4]
 8015542:	23b6      	movs	r3, #182	@ 0xb6
 8015544:	005b      	lsls	r3, r3, #1
 8015546:	2100      	movs	r1, #0
 8015548:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2182      	movs	r1, #130	@ 0x82
 801554e:	0018      	movs	r0, r3
 8015550:	f002 f88a 	bl	8017668 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2200      	movs	r2, #0
 8015558:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	23ae      	movs	r3, #174	@ 0xae
 801555e:	009b      	lsls	r3, r3, #2
 8015560:	58d3      	ldr	r3, [r2, r3]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d011      	beq.n	801558a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8015566:	687a      	ldr	r2, [r7, #4]
 8015568:	23af      	movs	r3, #175	@ 0xaf
 801556a:	009b      	lsls	r3, r3, #2
 801556c:	58d3      	ldr	r3, [r2, r3]
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8015572:	687a      	ldr	r2, [r7, #4]
 8015574:	23ae      	movs	r3, #174	@ 0xae
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	58d3      	ldr	r3, [r2, r3]
 801557a:	0018      	movs	r0, r3
 801557c:	f002 f9e2 	bl	8017944 <USBD_static_free>
    pdev->pClassData = NULL;
 8015580:	687a      	ldr	r2, [r7, #4]
 8015582:	23ae      	movs	r3, #174	@ 0xae
 8015584:	009b      	lsls	r3, r3, #2
 8015586:	2100      	movs	r1, #0
 8015588:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801558a:	230f      	movs	r3, #15
 801558c:	18fb      	adds	r3, r7, r3
 801558e:	781b      	ldrb	r3, [r3, #0]
}
 8015590:	0018      	movs	r0, r3
 8015592:	46bd      	mov	sp, r7
 8015594:	b004      	add	sp, #16
 8015596:	bd80      	pop	{r7, pc}

08015598 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b086      	sub	sp, #24
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80155a2:	687a      	ldr	r2, [r7, #4]
 80155a4:	23ae      	movs	r3, #174	@ 0xae
 80155a6:	009b      	lsls	r3, r3, #2
 80155a8:	58d3      	ldr	r3, [r2, r3]
 80155aa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80155ac:	230f      	movs	r3, #15
 80155ae:	18fb      	adds	r3, r7, r3
 80155b0:	2200      	movs	r2, #0
 80155b2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80155b4:	230c      	movs	r3, #12
 80155b6:	18fb      	adds	r3, r7, r3
 80155b8:	2200      	movs	r2, #0
 80155ba:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80155bc:	2317      	movs	r3, #23
 80155be:	18fb      	adds	r3, r7, r3
 80155c0:	2200      	movs	r2, #0
 80155c2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	001a      	movs	r2, r3
 80155ca:	2360      	movs	r3, #96	@ 0x60
 80155cc:	4013      	ands	r3, r2
 80155ce:	d03d      	beq.n	801564c <USBD_CDC_Setup+0xb4>
 80155d0:	2b20      	cmp	r3, #32
 80155d2:	d000      	beq.n	80155d6 <USBD_CDC_Setup+0x3e>
 80155d4:	e094      	b.n	8015700 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	88db      	ldrh	r3, [r3, #6]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d02b      	beq.n	8015636 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	b25b      	sxtb	r3, r3
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	da12      	bge.n	801560e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80155e8:	687a      	ldr	r2, [r7, #4]
 80155ea:	23af      	movs	r3, #175	@ 0xaf
 80155ec:	009b      	lsls	r3, r3, #2
 80155ee:	58d3      	ldr	r3, [r2, r3]
 80155f0:	689b      	ldr	r3, [r3, #8]
 80155f2:	683a      	ldr	r2, [r7, #0]
 80155f4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80155f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80155f8:	683a      	ldr	r2, [r7, #0]
 80155fa:	88d2      	ldrh	r2, [r2, #6]
 80155fc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80155fe:	6939      	ldr	r1, [r7, #16]
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	88da      	ldrh	r2, [r3, #6]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	0018      	movs	r0, r3
 8015608:	f001 fbaf 	bl	8016d6a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801560c:	e083      	b.n	8015716 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	7859      	ldrb	r1, [r3, #1]
 8015612:	693a      	ldr	r2, [r7, #16]
 8015614:	2380      	movs	r3, #128	@ 0x80
 8015616:	009b      	lsls	r3, r3, #2
 8015618:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	88db      	ldrh	r3, [r3, #6]
 801561e:	b2d9      	uxtb	r1, r3
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	4a40      	ldr	r2, [pc, #256]	@ (8015724 <USBD_CDC_Setup+0x18c>)
 8015624:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8015626:	6939      	ldr	r1, [r7, #16]
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	88da      	ldrh	r2, [r3, #6]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	0018      	movs	r0, r3
 8015630:	f001 fbce 	bl	8016dd0 <USBD_CtlPrepareRx>
      break;
 8015634:	e06f      	b.n	8015716 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015636:	687a      	ldr	r2, [r7, #4]
 8015638:	23af      	movs	r3, #175	@ 0xaf
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	58d3      	ldr	r3, [r2, r3]
 801563e:	689b      	ldr	r3, [r3, #8]
 8015640:	683a      	ldr	r2, [r7, #0]
 8015642:	7850      	ldrb	r0, [r2, #1]
 8015644:	6839      	ldr	r1, [r7, #0]
 8015646:	2200      	movs	r2, #0
 8015648:	4798      	blx	r3
      break;
 801564a:	e064      	b.n	8015716 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	785b      	ldrb	r3, [r3, #1]
 8015650:	2b0b      	cmp	r3, #11
 8015652:	d037      	beq.n	80156c4 <USBD_CDC_Setup+0x12c>
 8015654:	dc47      	bgt.n	80156e6 <USBD_CDC_Setup+0x14e>
 8015656:	2b00      	cmp	r3, #0
 8015658:	d002      	beq.n	8015660 <USBD_CDC_Setup+0xc8>
 801565a:	2b0a      	cmp	r3, #10
 801565c:	d019      	beq.n	8015692 <USBD_CDC_Setup+0xfa>
 801565e:	e042      	b.n	80156e6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015660:	687a      	ldr	r2, [r7, #4]
 8015662:	23a7      	movs	r3, #167	@ 0xa7
 8015664:	009b      	lsls	r3, r3, #2
 8015666:	5cd3      	ldrb	r3, [r2, r3]
 8015668:	2b03      	cmp	r3, #3
 801566a:	d107      	bne.n	801567c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801566c:	230c      	movs	r3, #12
 801566e:	18f9      	adds	r1, r7, r3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2202      	movs	r2, #2
 8015674:	0018      	movs	r0, r3
 8015676:	f001 fb78 	bl	8016d6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801567a:	e040      	b.n	80156fe <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801567c:	683a      	ldr	r2, [r7, #0]
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	0011      	movs	r1, r2
 8015682:	0018      	movs	r0, r3
 8015684:	f001 faf3 	bl	8016c6e <USBD_CtlError>
            ret = USBD_FAIL;
 8015688:	2317      	movs	r3, #23
 801568a:	18fb      	adds	r3, r7, r3
 801568c:	2202      	movs	r2, #2
 801568e:	701a      	strb	r2, [r3, #0]
          break;
 8015690:	e035      	b.n	80156fe <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015692:	687a      	ldr	r2, [r7, #4]
 8015694:	23a7      	movs	r3, #167	@ 0xa7
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	5cd3      	ldrb	r3, [r2, r3]
 801569a:	2b03      	cmp	r3, #3
 801569c:	d107      	bne.n	80156ae <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801569e:	230f      	movs	r3, #15
 80156a0:	18f9      	adds	r1, r7, r3
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2201      	movs	r2, #1
 80156a6:	0018      	movs	r0, r3
 80156a8:	f001 fb5f 	bl	8016d6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80156ac:	e027      	b.n	80156fe <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80156ae:	683a      	ldr	r2, [r7, #0]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	0011      	movs	r1, r2
 80156b4:	0018      	movs	r0, r3
 80156b6:	f001 fada 	bl	8016c6e <USBD_CtlError>
            ret = USBD_FAIL;
 80156ba:	2317      	movs	r3, #23
 80156bc:	18fb      	adds	r3, r7, r3
 80156be:	2202      	movs	r2, #2
 80156c0:	701a      	strb	r2, [r3, #0]
          break;
 80156c2:	e01c      	b.n	80156fe <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	23a7      	movs	r3, #167	@ 0xa7
 80156c8:	009b      	lsls	r3, r3, #2
 80156ca:	5cd3      	ldrb	r3, [r2, r3]
 80156cc:	2b03      	cmp	r3, #3
 80156ce:	d015      	beq.n	80156fc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80156d0:	683a      	ldr	r2, [r7, #0]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	0011      	movs	r1, r2
 80156d6:	0018      	movs	r0, r3
 80156d8:	f001 fac9 	bl	8016c6e <USBD_CtlError>
            ret = USBD_FAIL;
 80156dc:	2317      	movs	r3, #23
 80156de:	18fb      	adds	r3, r7, r3
 80156e0:	2202      	movs	r2, #2
 80156e2:	701a      	strb	r2, [r3, #0]
          }
          break;
 80156e4:	e00a      	b.n	80156fc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80156e6:	683a      	ldr	r2, [r7, #0]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	0011      	movs	r1, r2
 80156ec:	0018      	movs	r0, r3
 80156ee:	f001 fabe 	bl	8016c6e <USBD_CtlError>
          ret = USBD_FAIL;
 80156f2:	2317      	movs	r3, #23
 80156f4:	18fb      	adds	r3, r7, r3
 80156f6:	2202      	movs	r2, #2
 80156f8:	701a      	strb	r2, [r3, #0]
          break;
 80156fa:	e000      	b.n	80156fe <USBD_CDC_Setup+0x166>
          break;
 80156fc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80156fe:	e00a      	b.n	8015716 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8015700:	683a      	ldr	r2, [r7, #0]
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	0011      	movs	r1, r2
 8015706:	0018      	movs	r0, r3
 8015708:	f001 fab1 	bl	8016c6e <USBD_CtlError>
      ret = USBD_FAIL;
 801570c:	2317      	movs	r3, #23
 801570e:	18fb      	adds	r3, r7, r3
 8015710:	2202      	movs	r2, #2
 8015712:	701a      	strb	r2, [r3, #0]
      break;
 8015714:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015716:	2317      	movs	r3, #23
 8015718:	18fb      	adds	r3, r7, r3
 801571a:	781b      	ldrb	r3, [r3, #0]
}
 801571c:	0018      	movs	r0, r3
 801571e:	46bd      	mov	sp, r7
 8015720:	b006      	add	sp, #24
 8015722:	bd80      	pop	{r7, pc}
 8015724:	00000201 	.word	0x00000201

08015728 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b084      	sub	sp, #16
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	000a      	movs	r2, r1
 8015732:	1cfb      	adds	r3, r7, #3
 8015734:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015736:	687a      	ldr	r2, [r7, #4]
 8015738:	23ae      	movs	r3, #174	@ 0xae
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	58d3      	ldr	r3, [r2, r3]
 801573e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8015740:	687a      	ldr	r2, [r7, #4]
 8015742:	23b0      	movs	r3, #176	@ 0xb0
 8015744:	009b      	lsls	r3, r3, #2
 8015746:	58d3      	ldr	r3, [r2, r3]
 8015748:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	23ae      	movs	r3, #174	@ 0xae
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	58d3      	ldr	r3, [r2, r3]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d03e      	beq.n	80157d4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8015756:	1cfb      	adds	r3, r7, #3
 8015758:	781a      	ldrb	r2, [r3, #0]
 801575a:	6879      	ldr	r1, [r7, #4]
 801575c:	0013      	movs	r3, r2
 801575e:	009b      	lsls	r3, r3, #2
 8015760:	189b      	adds	r3, r3, r2
 8015762:	009b      	lsls	r3, r3, #2
 8015764:	18cb      	adds	r3, r1, r3
 8015766:	331c      	adds	r3, #28
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d02b      	beq.n	80157c6 <USBD_CDC_DataIn+0x9e>
 801576e:	1cfb      	adds	r3, r7, #3
 8015770:	781a      	ldrb	r2, [r3, #0]
 8015772:	6879      	ldr	r1, [r7, #4]
 8015774:	0013      	movs	r3, r2
 8015776:	009b      	lsls	r3, r3, #2
 8015778:	189b      	adds	r3, r3, r2
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	18cb      	adds	r3, r1, r3
 801577e:	331c      	adds	r3, #28
 8015780:	6818      	ldr	r0, [r3, #0]
 8015782:	1cfb      	adds	r3, r7, #3
 8015784:	781a      	ldrb	r2, [r3, #0]
 8015786:	68b9      	ldr	r1, [r7, #8]
 8015788:	0013      	movs	r3, r2
 801578a:	009b      	lsls	r3, r3, #2
 801578c:	189b      	adds	r3, r3, r2
 801578e:	00db      	lsls	r3, r3, #3
 8015790:	18cb      	adds	r3, r1, r3
 8015792:	3338      	adds	r3, #56	@ 0x38
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	0019      	movs	r1, r3
 8015798:	f7ea fd58 	bl	800024c <__aeabi_uidivmod>
 801579c:	1e0b      	subs	r3, r1, #0
 801579e:	d112      	bne.n	80157c6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80157a0:	1cfb      	adds	r3, r7, #3
 80157a2:	781a      	ldrb	r2, [r3, #0]
 80157a4:	6879      	ldr	r1, [r7, #4]
 80157a6:	0013      	movs	r3, r2
 80157a8:	009b      	lsls	r3, r3, #2
 80157aa:	189b      	adds	r3, r3, r2
 80157ac:	009b      	lsls	r3, r3, #2
 80157ae:	18cb      	adds	r3, r1, r3
 80157b0:	331c      	adds	r3, #28
 80157b2:	2200      	movs	r2, #0
 80157b4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80157b6:	1cfb      	adds	r3, r7, #3
 80157b8:	7819      	ldrb	r1, [r3, #0]
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	2300      	movs	r3, #0
 80157be:	2200      	movs	r2, #0
 80157c0:	f002 f82f 	bl	8017822 <USBD_LL_Transmit>
 80157c4:	e004      	b.n	80157d0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80157c6:	68fa      	ldr	r2, [r7, #12]
 80157c8:	2385      	movs	r3, #133	@ 0x85
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	2100      	movs	r1, #0
 80157ce:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80157d0:	2300      	movs	r3, #0
 80157d2:	e000      	b.n	80157d6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80157d4:	2302      	movs	r3, #2
  }
}
 80157d6:	0018      	movs	r0, r3
 80157d8:	46bd      	mov	sp, r7
 80157da:	b004      	add	sp, #16
 80157dc:	bd80      	pop	{r7, pc}

080157de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80157de:	b580      	push	{r7, lr}
 80157e0:	b084      	sub	sp, #16
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	6078      	str	r0, [r7, #4]
 80157e6:	000a      	movs	r2, r1
 80157e8:	1cfb      	adds	r3, r7, #3
 80157ea:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80157ec:	687a      	ldr	r2, [r7, #4]
 80157ee:	23ae      	movs	r3, #174	@ 0xae
 80157f0:	009b      	lsls	r3, r3, #2
 80157f2:	58d3      	ldr	r3, [r2, r3]
 80157f4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80157f6:	1cfb      	adds	r3, r7, #3
 80157f8:	781a      	ldrb	r2, [r3, #0]
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	0011      	movs	r1, r2
 80157fe:	0018      	movs	r0, r3
 8015800:	f002 f87d 	bl	80178fe <USBD_LL_GetRxDataSize>
 8015804:	0001      	movs	r1, r0
 8015806:	68fa      	ldr	r2, [r7, #12]
 8015808:	2383      	movs	r3, #131	@ 0x83
 801580a:	009b      	lsls	r3, r3, #2
 801580c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	23ae      	movs	r3, #174	@ 0xae
 8015812:	009b      	lsls	r3, r3, #2
 8015814:	58d3      	ldr	r3, [r2, r3]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d011      	beq.n	801583e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801581a:	687a      	ldr	r2, [r7, #4]
 801581c:	23af      	movs	r3, #175	@ 0xaf
 801581e:	009b      	lsls	r3, r3, #2
 8015820:	58d3      	ldr	r3, [r2, r3]
 8015822:	68da      	ldr	r2, [r3, #12]
 8015824:	68f9      	ldr	r1, [r7, #12]
 8015826:	2381      	movs	r3, #129	@ 0x81
 8015828:	009b      	lsls	r3, r3, #2
 801582a:	58c8      	ldr	r0, [r1, r3]
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	2183      	movs	r1, #131	@ 0x83
 8015830:	0089      	lsls	r1, r1, #2
 8015832:	468c      	mov	ip, r1
 8015834:	4463      	add	r3, ip
 8015836:	0019      	movs	r1, r3
 8015838:	4790      	blx	r2

    return USBD_OK;
 801583a:	2300      	movs	r3, #0
 801583c:	e000      	b.n	8015840 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801583e:	2302      	movs	r3, #2
  }
}
 8015840:	0018      	movs	r0, r3
 8015842:	46bd      	mov	sp, r7
 8015844:	b004      	add	sp, #16
 8015846:	bd80      	pop	{r7, pc}

08015848 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015848:	b590      	push	{r4, r7, lr}
 801584a:	b085      	sub	sp, #20
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015850:	687a      	ldr	r2, [r7, #4]
 8015852:	23ae      	movs	r3, #174	@ 0xae
 8015854:	009b      	lsls	r3, r3, #2
 8015856:	58d3      	ldr	r3, [r2, r3]
 8015858:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801585a:	687a      	ldr	r2, [r7, #4]
 801585c:	23af      	movs	r3, #175	@ 0xaf
 801585e:	009b      	lsls	r3, r3, #2
 8015860:	58d3      	ldr	r3, [r2, r3]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d018      	beq.n	8015898 <USBD_CDC_EP0_RxReady+0x50>
 8015866:	68fa      	ldr	r2, [r7, #12]
 8015868:	2380      	movs	r3, #128	@ 0x80
 801586a:	009b      	lsls	r3, r3, #2
 801586c:	5cd3      	ldrb	r3, [r2, r3]
 801586e:	2bff      	cmp	r3, #255	@ 0xff
 8015870:	d012      	beq.n	8015898 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	23af      	movs	r3, #175	@ 0xaf
 8015876:	009b      	lsls	r3, r3, #2
 8015878:	58d3      	ldr	r3, [r2, r3]
 801587a:	689b      	ldr	r3, [r3, #8]
 801587c:	68f9      	ldr	r1, [r7, #12]
 801587e:	2280      	movs	r2, #128	@ 0x80
 8015880:	0092      	lsls	r2, r2, #2
 8015882:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8015884:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8015886:	68fa      	ldr	r2, [r7, #12]
 8015888:	4c06      	ldr	r4, [pc, #24]	@ (80158a4 <USBD_CDC_EP0_RxReady+0x5c>)
 801588a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801588c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801588e:	68fa      	ldr	r2, [r7, #12]
 8015890:	2380      	movs	r3, #128	@ 0x80
 8015892:	009b      	lsls	r3, r3, #2
 8015894:	21ff      	movs	r1, #255	@ 0xff
 8015896:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8015898:	2300      	movs	r3, #0
}
 801589a:	0018      	movs	r0, r3
 801589c:	46bd      	mov	sp, r7
 801589e:	b005      	add	sp, #20
 80158a0:	bd90      	pop	{r4, r7, pc}
 80158a2:	46c0      	nop			@ (mov r8, r8)
 80158a4:	00000201 	.word	0x00000201

080158a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2243      	movs	r2, #67	@ 0x43
 80158b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80158b6:	4b02      	ldr	r3, [pc, #8]	@ (80158c0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80158b8:	0018      	movs	r0, r3
 80158ba:	46bd      	mov	sp, r7
 80158bc:	b002      	add	sp, #8
 80158be:	bd80      	pop	{r7, pc}
 80158c0:	20000100 	.word	0x20000100

080158c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	2243      	movs	r2, #67	@ 0x43
 80158d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80158d2:	4b02      	ldr	r3, [pc, #8]	@ (80158dc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80158d4:	0018      	movs	r0, r3
 80158d6:	46bd      	mov	sp, r7
 80158d8:	b002      	add	sp, #8
 80158da:	bd80      	pop	{r7, pc}
 80158dc:	200000bc 	.word	0x200000bc

080158e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2243      	movs	r2, #67	@ 0x43
 80158ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80158ee:	4b02      	ldr	r3, [pc, #8]	@ (80158f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80158f0:	0018      	movs	r0, r3
 80158f2:	46bd      	mov	sp, r7
 80158f4:	b002      	add	sp, #8
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	20000144 	.word	0x20000144

080158fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	220a      	movs	r2, #10
 8015908:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801590a:	4b02      	ldr	r3, [pc, #8]	@ (8015914 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801590c:	0018      	movs	r0, r3
 801590e:	46bd      	mov	sp, r7
 8015910:	b002      	add	sp, #8
 8015912:	bd80      	pop	{r7, pc}
 8015914:	20000078 	.word	0x20000078

08015918 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b084      	sub	sp, #16
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
 8015920:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8015922:	200f      	movs	r0, #15
 8015924:	183b      	adds	r3, r7, r0
 8015926:	2202      	movs	r2, #2
 8015928:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d007      	beq.n	8015940 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8015930:	687a      	ldr	r2, [r7, #4]
 8015932:	23af      	movs	r3, #175	@ 0xaf
 8015934:	009b      	lsls	r3, r3, #2
 8015936:	6839      	ldr	r1, [r7, #0]
 8015938:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801593a:	183b      	adds	r3, r7, r0
 801593c:	2200      	movs	r2, #0
 801593e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8015940:	230f      	movs	r3, #15
 8015942:	18fb      	adds	r3, r7, r3
 8015944:	781b      	ldrb	r3, [r3, #0]
}
 8015946:	0018      	movs	r0, r3
 8015948:	46bd      	mov	sp, r7
 801594a:	b004      	add	sp, #16
 801594c:	bd80      	pop	{r7, pc}

0801594e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801594e:	b580      	push	{r7, lr}
 8015950:	b086      	sub	sp, #24
 8015952:	af00      	add	r7, sp, #0
 8015954:	60f8      	str	r0, [r7, #12]
 8015956:	60b9      	str	r1, [r7, #8]
 8015958:	1dbb      	adds	r3, r7, #6
 801595a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801595c:	68fa      	ldr	r2, [r7, #12]
 801595e:	23ae      	movs	r3, #174	@ 0xae
 8015960:	009b      	lsls	r3, r3, #2
 8015962:	58d3      	ldr	r3, [r2, r3]
 8015964:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8015966:	697a      	ldr	r2, [r7, #20]
 8015968:	2382      	movs	r3, #130	@ 0x82
 801596a:	009b      	lsls	r3, r3, #2
 801596c:	68b9      	ldr	r1, [r7, #8]
 801596e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8015970:	1dbb      	adds	r3, r7, #6
 8015972:	8819      	ldrh	r1, [r3, #0]
 8015974:	697a      	ldr	r2, [r7, #20]
 8015976:	2384      	movs	r3, #132	@ 0x84
 8015978:	009b      	lsls	r3, r3, #2
 801597a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801597c:	2300      	movs	r3, #0
}
 801597e:	0018      	movs	r0, r3
 8015980:	46bd      	mov	sp, r7
 8015982:	b006      	add	sp, #24
 8015984:	bd80      	pop	{r7, pc}

08015986 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8015986:	b580      	push	{r7, lr}
 8015988:	b084      	sub	sp, #16
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
 801598e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	23ae      	movs	r3, #174	@ 0xae
 8015994:	009b      	lsls	r3, r3, #2
 8015996:	58d3      	ldr	r3, [r2, r3]
 8015998:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801599a:	68fa      	ldr	r2, [r7, #12]
 801599c:	2381      	movs	r3, #129	@ 0x81
 801599e:	009b      	lsls	r3, r3, #2
 80159a0:	6839      	ldr	r1, [r7, #0]
 80159a2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80159a4:	2300      	movs	r3, #0
}
 80159a6:	0018      	movs	r0, r3
 80159a8:	46bd      	mov	sp, r7
 80159aa:	b004      	add	sp, #16
 80159ac:	bd80      	pop	{r7, pc}

080159ae <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80159ae:	b580      	push	{r7, lr}
 80159b0:	b084      	sub	sp, #16
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80159b6:	687a      	ldr	r2, [r7, #4]
 80159b8:	23ae      	movs	r3, #174	@ 0xae
 80159ba:	009b      	lsls	r3, r3, #2
 80159bc:	58d3      	ldr	r3, [r2, r3]
 80159be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	23ae      	movs	r3, #174	@ 0xae
 80159c4:	009b      	lsls	r3, r3, #2
 80159c6:	58d3      	ldr	r3, [r2, r3]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d022      	beq.n	8015a12 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80159cc:	68fa      	ldr	r2, [r7, #12]
 80159ce:	2385      	movs	r3, #133	@ 0x85
 80159d0:	009b      	lsls	r3, r3, #2
 80159d2:	58d3      	ldr	r3, [r2, r3]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d11a      	bne.n	8015a0e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80159d8:	68fa      	ldr	r2, [r7, #12]
 80159da:	2385      	movs	r3, #133	@ 0x85
 80159dc:	009b      	lsls	r3, r3, #2
 80159de:	2101      	movs	r1, #1
 80159e0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80159e2:	68fa      	ldr	r2, [r7, #12]
 80159e4:	2384      	movs	r3, #132	@ 0x84
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	58d2      	ldr	r2, [r2, r3]
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80159ee:	68fa      	ldr	r2, [r7, #12]
 80159f0:	2382      	movs	r3, #130	@ 0x82
 80159f2:	009b      	lsls	r3, r3, #2
 80159f4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80159f6:	68fa      	ldr	r2, [r7, #12]
 80159f8:	2384      	movs	r3, #132	@ 0x84
 80159fa:	009b      	lsls	r3, r3, #2
 80159fc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80159fe:	b29b      	uxth	r3, r3
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	000a      	movs	r2, r1
 8015a04:	2181      	movs	r1, #129	@ 0x81
 8015a06:	f001 ff0c 	bl	8017822 <USBD_LL_Transmit>

      return USBD_OK;
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	e002      	b.n	8015a14 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8015a0e:	2301      	movs	r3, #1
 8015a10:	e000      	b.n	8015a14 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8015a12:	2302      	movs	r3, #2
  }
}
 8015a14:	0018      	movs	r0, r3
 8015a16:	46bd      	mov	sp, r7
 8015a18:	b004      	add	sp, #16
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015a24:	687a      	ldr	r2, [r7, #4]
 8015a26:	23ae      	movs	r3, #174	@ 0xae
 8015a28:	009b      	lsls	r3, r3, #2
 8015a2a:	58d3      	ldr	r3, [r2, r3]
 8015a2c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8015a2e:	687a      	ldr	r2, [r7, #4]
 8015a30:	23ae      	movs	r3, #174	@ 0xae
 8015a32:	009b      	lsls	r3, r3, #2
 8015a34:	58d3      	ldr	r3, [r2, r3]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d019      	beq.n	8015a6e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	7c1b      	ldrb	r3, [r3, #16]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d10a      	bne.n	8015a58 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015a42:	68fa      	ldr	r2, [r7, #12]
 8015a44:	2381      	movs	r3, #129	@ 0x81
 8015a46:	009b      	lsls	r3, r3, #2
 8015a48:	58d2      	ldr	r2, [r2, r3]
 8015a4a:	2380      	movs	r3, #128	@ 0x80
 8015a4c:	009b      	lsls	r3, r3, #2
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	2101      	movs	r1, #1
 8015a52:	f001 ff1d 	bl	8017890 <USBD_LL_PrepareReceive>
 8015a56:	e008      	b.n	8015a6a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015a58:	68fa      	ldr	r2, [r7, #12]
 8015a5a:	2381      	movs	r3, #129	@ 0x81
 8015a5c:	009b      	lsls	r3, r3, #2
 8015a5e:	58d2      	ldr	r2, [r2, r3]
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	2340      	movs	r3, #64	@ 0x40
 8015a64:	2101      	movs	r1, #1
 8015a66:	f001 ff13 	bl	8017890 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	e000      	b.n	8015a70 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8015a6e:	2302      	movs	r3, #2
  }
}
 8015a70:	0018      	movs	r0, r3
 8015a72:	46bd      	mov	sp, r7
 8015a74:	b004      	add	sp, #16
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b084      	sub	sp, #16
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	60f8      	str	r0, [r7, #12]
 8015a80:	60b9      	str	r1, [r7, #8]
 8015a82:	1dfb      	adds	r3, r7, #7
 8015a84:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d101      	bne.n	8015a90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015a8c:	2302      	movs	r3, #2
 8015a8e:	e020      	b.n	8015ad2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8015a90:	68fa      	ldr	r2, [r7, #12]
 8015a92:	23ad      	movs	r3, #173	@ 0xad
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	58d3      	ldr	r3, [r2, r3]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d004      	beq.n	8015aa6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8015a9c:	68fa      	ldr	r2, [r7, #12]
 8015a9e:	23ad      	movs	r3, #173	@ 0xad
 8015aa0:	009b      	lsls	r3, r3, #2
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d004      	beq.n	8015ab6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015aac:	68fa      	ldr	r2, [r7, #12]
 8015aae:	23ac      	movs	r3, #172	@ 0xac
 8015ab0:	009b      	lsls	r3, r3, #2
 8015ab2:	68b9      	ldr	r1, [r7, #8]
 8015ab4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ab6:	68fa      	ldr	r2, [r7, #12]
 8015ab8:	23a7      	movs	r3, #167	@ 0xa7
 8015aba:	009b      	lsls	r3, r3, #2
 8015abc:	2101      	movs	r1, #1
 8015abe:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	1dfa      	adds	r2, r7, #7
 8015ac4:	7812      	ldrb	r2, [r2, #0]
 8015ac6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	0018      	movs	r0, r3
 8015acc:	f001 fd0c 	bl	80174e8 <USBD_LL_Init>

  return USBD_OK;
 8015ad0:	2300      	movs	r3, #0
}
 8015ad2:	0018      	movs	r0, r3
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	b004      	add	sp, #16
 8015ad8:	bd80      	pop	{r7, pc}

08015ada <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015ada:	b580      	push	{r7, lr}
 8015adc:	b084      	sub	sp, #16
 8015ade:	af00      	add	r7, sp, #0
 8015ae0:	6078      	str	r0, [r7, #4]
 8015ae2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8015ae4:	200f      	movs	r0, #15
 8015ae6:	183b      	adds	r3, r7, r0
 8015ae8:	2200      	movs	r2, #0
 8015aea:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d008      	beq.n	8015b04 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8015af2:	687a      	ldr	r2, [r7, #4]
 8015af4:	23ad      	movs	r3, #173	@ 0xad
 8015af6:	009b      	lsls	r3, r3, #2
 8015af8:	6839      	ldr	r1, [r7, #0]
 8015afa:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8015afc:	183b      	adds	r3, r7, r0
 8015afe:	2200      	movs	r2, #0
 8015b00:	701a      	strb	r2, [r3, #0]
 8015b02:	e003      	b.n	8015b0c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8015b04:	230f      	movs	r3, #15
 8015b06:	18fb      	adds	r3, r7, r3
 8015b08:	2202      	movs	r2, #2
 8015b0a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8015b0c:	230f      	movs	r3, #15
 8015b0e:	18fb      	adds	r3, r7, r3
 8015b10:	781b      	ldrb	r3, [r3, #0]
}
 8015b12:	0018      	movs	r0, r3
 8015b14:	46bd      	mov	sp, r7
 8015b16:	b004      	add	sp, #16
 8015b18:	bd80      	pop	{r7, pc}

08015b1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015b1a:	b580      	push	{r7, lr}
 8015b1c:	b082      	sub	sp, #8
 8015b1e:	af00      	add	r7, sp, #0
 8015b20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	0018      	movs	r0, r3
 8015b26:	f001 fd43 	bl	80175b0 <USBD_LL_Start>

  return USBD_OK;
 8015b2a:	2300      	movs	r3, #0
}
 8015b2c:	0018      	movs	r0, r3
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	b002      	add	sp, #8
 8015b32:	bd80      	pop	{r7, pc}

08015b34 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b082      	sub	sp, #8
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015b3c:	2300      	movs	r3, #0
}
 8015b3e:	0018      	movs	r0, r3
 8015b40:	46bd      	mov	sp, r7
 8015b42:	b002      	add	sp, #8
 8015b44:	bd80      	pop	{r7, pc}

08015b46 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015b46:	b590      	push	{r4, r7, lr}
 8015b48:	b085      	sub	sp, #20
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	6078      	str	r0, [r7, #4]
 8015b4e:	000a      	movs	r2, r1
 8015b50:	1cfb      	adds	r3, r7, #3
 8015b52:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015b54:	240f      	movs	r4, #15
 8015b56:	193b      	adds	r3, r7, r4
 8015b58:	2202      	movs	r2, #2
 8015b5a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8015b5c:	687a      	ldr	r2, [r7, #4]
 8015b5e:	23ad      	movs	r3, #173	@ 0xad
 8015b60:	009b      	lsls	r3, r3, #2
 8015b62:	58d3      	ldr	r3, [r2, r3]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d00e      	beq.n	8015b86 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8015b68:	687a      	ldr	r2, [r7, #4]
 8015b6a:	23ad      	movs	r3, #173	@ 0xad
 8015b6c:	009b      	lsls	r3, r3, #2
 8015b6e:	58d3      	ldr	r3, [r2, r3]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	1cfa      	adds	r2, r7, #3
 8015b74:	7811      	ldrb	r1, [r2, #0]
 8015b76:	687a      	ldr	r2, [r7, #4]
 8015b78:	0010      	movs	r0, r2
 8015b7a:	4798      	blx	r3
 8015b7c:	1e03      	subs	r3, r0, #0
 8015b7e:	d102      	bne.n	8015b86 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8015b80:	193b      	adds	r3, r7, r4
 8015b82:	2200      	movs	r2, #0
 8015b84:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8015b86:	230f      	movs	r3, #15
 8015b88:	18fb      	adds	r3, r7, r3
 8015b8a:	781b      	ldrb	r3, [r3, #0]
}
 8015b8c:	0018      	movs	r0, r3
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	b005      	add	sp, #20
 8015b92:	bd90      	pop	{r4, r7, pc}

08015b94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	000a      	movs	r2, r1
 8015b9e:	1cfb      	adds	r3, r7, #3
 8015ba0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8015ba2:	687a      	ldr	r2, [r7, #4]
 8015ba4:	23ad      	movs	r3, #173	@ 0xad
 8015ba6:	009b      	lsls	r3, r3, #2
 8015ba8:	58d3      	ldr	r3, [r2, r3]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	1cfa      	adds	r2, r7, #3
 8015bae:	7811      	ldrb	r1, [r2, #0]
 8015bb0:	687a      	ldr	r2, [r7, #4]
 8015bb2:	0010      	movs	r0, r2
 8015bb4:	4798      	blx	r3

  return USBD_OK;
 8015bb6:	2300      	movs	r3, #0
}
 8015bb8:	0018      	movs	r0, r3
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	b002      	add	sp, #8
 8015bbe:	bd80      	pop	{r7, pc}

08015bc0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b082      	sub	sp, #8
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
 8015bc8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	22aa      	movs	r2, #170	@ 0xaa
 8015bce:	0092      	lsls	r2, r2, #2
 8015bd0:	4694      	mov	ip, r2
 8015bd2:	4463      	add	r3, ip
 8015bd4:	683a      	ldr	r2, [r7, #0]
 8015bd6:	0011      	movs	r1, r2
 8015bd8:	0018      	movs	r0, r3
 8015bda:	f001 f810 	bl	8016bfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015bde:	687a      	ldr	r2, [r7, #4]
 8015be0:	23a5      	movs	r3, #165	@ 0xa5
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	2101      	movs	r1, #1
 8015be6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	4a23      	ldr	r2, [pc, #140]	@ (8015c78 <USBD_LL_SetupStage+0xb8>)
 8015bec:	5a9b      	ldrh	r3, [r3, r2]
 8015bee:	0019      	movs	r1, r3
 8015bf0:	687a      	ldr	r2, [r7, #4]
 8015bf2:	23a6      	movs	r3, #166	@ 0xa6
 8015bf4:	009b      	lsls	r3, r3, #2
 8015bf6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8015bf8:	687a      	ldr	r2, [r7, #4]
 8015bfa:	23aa      	movs	r3, #170	@ 0xaa
 8015bfc:	009b      	lsls	r3, r3, #2
 8015bfe:	5cd3      	ldrb	r3, [r2, r3]
 8015c00:	001a      	movs	r2, r3
 8015c02:	231f      	movs	r3, #31
 8015c04:	4013      	ands	r3, r2
 8015c06:	2b02      	cmp	r3, #2
 8015c08:	d019      	beq.n	8015c3e <USBD_LL_SetupStage+0x7e>
 8015c0a:	d822      	bhi.n	8015c52 <USBD_LL_SetupStage+0x92>
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d002      	beq.n	8015c16 <USBD_LL_SetupStage+0x56>
 8015c10:	2b01      	cmp	r3, #1
 8015c12:	d00a      	beq.n	8015c2a <USBD_LL_SetupStage+0x6a>
 8015c14:	e01d      	b.n	8015c52 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	22aa      	movs	r2, #170	@ 0xaa
 8015c1a:	0092      	lsls	r2, r2, #2
 8015c1c:	189a      	adds	r2, r3, r2
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	0011      	movs	r1, r2
 8015c22:	0018      	movs	r0, r3
 8015c24:	f000 fa10 	bl	8016048 <USBD_StdDevReq>
      break;
 8015c28:	e020      	b.n	8015c6c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	22aa      	movs	r2, #170	@ 0xaa
 8015c2e:	0092      	lsls	r2, r2, #2
 8015c30:	189a      	adds	r2, r3, r2
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	0011      	movs	r1, r2
 8015c36:	0018      	movs	r0, r3
 8015c38:	f000 fa78 	bl	801612c <USBD_StdItfReq>
      break;
 8015c3c:	e016      	b.n	8015c6c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	22aa      	movs	r2, #170	@ 0xaa
 8015c42:	0092      	lsls	r2, r2, #2
 8015c44:	189a      	adds	r2, r3, r2
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	0011      	movs	r1, r2
 8015c4a:	0018      	movs	r0, r3
 8015c4c:	f000 fac5 	bl	80161da <USBD_StdEPReq>
      break;
 8015c50:	e00c      	b.n	8015c6c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015c52:	687a      	ldr	r2, [r7, #4]
 8015c54:	23aa      	movs	r3, #170	@ 0xaa
 8015c56:	009b      	lsls	r3, r3, #2
 8015c58:	5cd3      	ldrb	r3, [r2, r3]
 8015c5a:	227f      	movs	r2, #127	@ 0x7f
 8015c5c:	4393      	bics	r3, r2
 8015c5e:	b2da      	uxtb	r2, r3
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	0011      	movs	r1, r2
 8015c64:	0018      	movs	r0, r3
 8015c66:	f001 fd2a 	bl	80176be <USBD_LL_StallEP>
      break;
 8015c6a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015c6c:	2300      	movs	r3, #0
}
 8015c6e:	0018      	movs	r0, r3
 8015c70:	46bd      	mov	sp, r7
 8015c72:	b002      	add	sp, #8
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	46c0      	nop			@ (mov r8, r8)
 8015c78:	000002ae 	.word	0x000002ae

08015c7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b086      	sub	sp, #24
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	60f8      	str	r0, [r7, #12]
 8015c84:	607a      	str	r2, [r7, #4]
 8015c86:	200b      	movs	r0, #11
 8015c88:	183b      	adds	r3, r7, r0
 8015c8a:	1c0a      	adds	r2, r1, #0
 8015c8c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015c8e:	183b      	adds	r3, r7, r0
 8015c90:	781b      	ldrb	r3, [r3, #0]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d154      	bne.n	8015d40 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	3355      	adds	r3, #85	@ 0x55
 8015c9a:	33ff      	adds	r3, #255	@ 0xff
 8015c9c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015c9e:	68fa      	ldr	r2, [r7, #12]
 8015ca0:	23a5      	movs	r3, #165	@ 0xa5
 8015ca2:	009b      	lsls	r3, r3, #2
 8015ca4:	58d3      	ldr	r3, [r2, r3]
 8015ca6:	2b03      	cmp	r3, #3
 8015ca8:	d139      	bne.n	8015d1e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	68da      	ldr	r2, [r3, #12]
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	691b      	ldr	r3, [r3, #16]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d919      	bls.n	8015cea <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	68da      	ldr	r2, [r3, #12]
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	691b      	ldr	r3, [r3, #16]
 8015cbe:	1ad2      	subs	r2, r2, r3
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015cc4:	697b      	ldr	r3, [r7, #20]
 8015cc6:	68da      	ldr	r2, [r3, #12]
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d203      	bcs.n	8015cd8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8015cd4:	b29b      	uxth	r3, r3
 8015cd6:	e002      	b.n	8015cde <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015cd8:	697b      	ldr	r3, [r7, #20]
 8015cda:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015cdc:	b29b      	uxth	r3, r3
 8015cde:	6879      	ldr	r1, [r7, #4]
 8015ce0:	68f8      	ldr	r0, [r7, #12]
 8015ce2:	001a      	movs	r2, r3
 8015ce4:	f001 f898 	bl	8016e18 <USBD_CtlContinueRx>
 8015ce8:	e045      	b.n	8015d76 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015cea:	68fa      	ldr	r2, [r7, #12]
 8015cec:	23ad      	movs	r3, #173	@ 0xad
 8015cee:	009b      	lsls	r3, r3, #2
 8015cf0:	58d3      	ldr	r3, [r2, r3]
 8015cf2:	691b      	ldr	r3, [r3, #16]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d00d      	beq.n	8015d14 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015cf8:	68fa      	ldr	r2, [r7, #12]
 8015cfa:	23a7      	movs	r3, #167	@ 0xa7
 8015cfc:	009b      	lsls	r3, r3, #2
 8015cfe:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015d00:	2b03      	cmp	r3, #3
 8015d02:	d107      	bne.n	8015d14 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015d04:	68fa      	ldr	r2, [r7, #12]
 8015d06:	23ad      	movs	r3, #173	@ 0xad
 8015d08:	009b      	lsls	r3, r3, #2
 8015d0a:	58d3      	ldr	r3, [r2, r3]
 8015d0c:	691b      	ldr	r3, [r3, #16]
 8015d0e:	68fa      	ldr	r2, [r7, #12]
 8015d10:	0010      	movs	r0, r2
 8015d12:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	0018      	movs	r0, r3
 8015d18:	f001 f891 	bl	8016e3e <USBD_CtlSendStatus>
 8015d1c:	e02b      	b.n	8015d76 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8015d1e:	68fa      	ldr	r2, [r7, #12]
 8015d20:	23a5      	movs	r3, #165	@ 0xa5
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	58d3      	ldr	r3, [r2, r3]
 8015d26:	2b05      	cmp	r3, #5
 8015d28:	d125      	bne.n	8015d76 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8015d2a:	68fa      	ldr	r2, [r7, #12]
 8015d2c:	23a5      	movs	r3, #165	@ 0xa5
 8015d2e:	009b      	lsls	r3, r3, #2
 8015d30:	2100      	movs	r1, #0
 8015d32:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	2100      	movs	r1, #0
 8015d38:	0018      	movs	r0, r3
 8015d3a:	f001 fcc0 	bl	80176be <USBD_LL_StallEP>
 8015d3e:	e01a      	b.n	8015d76 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015d40:	68fa      	ldr	r2, [r7, #12]
 8015d42:	23ad      	movs	r3, #173	@ 0xad
 8015d44:	009b      	lsls	r3, r3, #2
 8015d46:	58d3      	ldr	r3, [r2, r3]
 8015d48:	699b      	ldr	r3, [r3, #24]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d011      	beq.n	8015d72 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015d4e:	68fa      	ldr	r2, [r7, #12]
 8015d50:	23a7      	movs	r3, #167	@ 0xa7
 8015d52:	009b      	lsls	r3, r3, #2
 8015d54:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8015d56:	2b03      	cmp	r3, #3
 8015d58:	d10b      	bne.n	8015d72 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8015d5a:	68fa      	ldr	r2, [r7, #12]
 8015d5c:	23ad      	movs	r3, #173	@ 0xad
 8015d5e:	009b      	lsls	r3, r3, #2
 8015d60:	58d3      	ldr	r3, [r2, r3]
 8015d62:	699b      	ldr	r3, [r3, #24]
 8015d64:	220b      	movs	r2, #11
 8015d66:	18ba      	adds	r2, r7, r2
 8015d68:	7811      	ldrb	r1, [r2, #0]
 8015d6a:	68fa      	ldr	r2, [r7, #12]
 8015d6c:	0010      	movs	r0, r2
 8015d6e:	4798      	blx	r3
 8015d70:	e001      	b.n	8015d76 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015d72:	2302      	movs	r3, #2
 8015d74:	e000      	b.n	8015d78 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8015d76:	2300      	movs	r3, #0
}
 8015d78:	0018      	movs	r0, r3
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	b006      	add	sp, #24
 8015d7e:	bd80      	pop	{r7, pc}

08015d80 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b086      	sub	sp, #24
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	60f8      	str	r0, [r7, #12]
 8015d88:	607a      	str	r2, [r7, #4]
 8015d8a:	200b      	movs	r0, #11
 8015d8c:	183b      	adds	r3, r7, r0
 8015d8e:	1c0a      	adds	r2, r1, #0
 8015d90:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015d92:	183b      	adds	r3, r7, r0
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d000      	beq.n	8015d9c <USBD_LL_DataInStage+0x1c>
 8015d9a:	e08e      	b.n	8015eba <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	3314      	adds	r3, #20
 8015da0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015da2:	68fa      	ldr	r2, [r7, #12]
 8015da4:	23a5      	movs	r3, #165	@ 0xa5
 8015da6:	009b      	lsls	r3, r3, #2
 8015da8:	58d3      	ldr	r3, [r2, r3]
 8015daa:	2b02      	cmp	r3, #2
 8015dac:	d164      	bne.n	8015e78 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	68da      	ldr	r2, [r3, #12]
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	691b      	ldr	r3, [r3, #16]
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d915      	bls.n	8015de6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	68da      	ldr	r2, [r3, #12]
 8015dbe:	697b      	ldr	r3, [r7, #20]
 8015dc0:	691b      	ldr	r3, [r3, #16]
 8015dc2:	1ad2      	subs	r2, r2, r3
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	68db      	ldr	r3, [r3, #12]
 8015dcc:	b29a      	uxth	r2, r3
 8015dce:	6879      	ldr	r1, [r7, #4]
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	0018      	movs	r0, r3
 8015dd4:	f000 ffe9 	bl	8016daa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015dd8:	68f8      	ldr	r0, [r7, #12]
 8015dda:	2300      	movs	r3, #0
 8015ddc:	2200      	movs	r2, #0
 8015dde:	2100      	movs	r1, #0
 8015de0:	f001 fd56 	bl	8017890 <USBD_LL_PrepareReceive>
 8015de4:	e059      	b.n	8015e9a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015de6:	697b      	ldr	r3, [r7, #20]
 8015de8:	689a      	ldr	r2, [r3, #8]
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	691b      	ldr	r3, [r3, #16]
 8015dee:	0019      	movs	r1, r3
 8015df0:	0010      	movs	r0, r2
 8015df2:	f7ea fa2b 	bl	800024c <__aeabi_uidivmod>
 8015df6:	1e0b      	subs	r3, r1, #0
 8015df8:	d11f      	bne.n	8015e3a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	689a      	ldr	r2, [r3, #8]
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d319      	bcc.n	8015e3a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	689a      	ldr	r2, [r3, #8]
 8015e0a:	68f9      	ldr	r1, [r7, #12]
 8015e0c:	23a6      	movs	r3, #166	@ 0xa6
 8015e0e:	009b      	lsls	r3, r3, #2
 8015e10:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d211      	bcs.n	8015e3a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	2200      	movs	r2, #0
 8015e1a:	2100      	movs	r1, #0
 8015e1c:	0018      	movs	r0, r3
 8015e1e:	f000 ffc4 	bl	8016daa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015e22:	68fa      	ldr	r2, [r7, #12]
 8015e24:	23a6      	movs	r3, #166	@ 0xa6
 8015e26:	009b      	lsls	r3, r3, #2
 8015e28:	2100      	movs	r1, #0
 8015e2a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e2c:	68f8      	ldr	r0, [r7, #12]
 8015e2e:	2300      	movs	r3, #0
 8015e30:	2200      	movs	r2, #0
 8015e32:	2100      	movs	r1, #0
 8015e34:	f001 fd2c 	bl	8017890 <USBD_LL_PrepareReceive>
 8015e38:	e02f      	b.n	8015e9a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015e3a:	68fa      	ldr	r2, [r7, #12]
 8015e3c:	23ad      	movs	r3, #173	@ 0xad
 8015e3e:	009b      	lsls	r3, r3, #2
 8015e40:	58d3      	ldr	r3, [r2, r3]
 8015e42:	68db      	ldr	r3, [r3, #12]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d00d      	beq.n	8015e64 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015e48:	68fa      	ldr	r2, [r7, #12]
 8015e4a:	23a7      	movs	r3, #167	@ 0xa7
 8015e4c:	009b      	lsls	r3, r3, #2
 8015e4e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015e50:	2b03      	cmp	r3, #3
 8015e52:	d107      	bne.n	8015e64 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015e54:	68fa      	ldr	r2, [r7, #12]
 8015e56:	23ad      	movs	r3, #173	@ 0xad
 8015e58:	009b      	lsls	r3, r3, #2
 8015e5a:	58d3      	ldr	r3, [r2, r3]
 8015e5c:	68db      	ldr	r3, [r3, #12]
 8015e5e:	68fa      	ldr	r2, [r7, #12]
 8015e60:	0010      	movs	r0, r2
 8015e62:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2180      	movs	r1, #128	@ 0x80
 8015e68:	0018      	movs	r0, r3
 8015e6a:	f001 fc28 	bl	80176be <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	0018      	movs	r0, r3
 8015e72:	f000 fff8 	bl	8016e66 <USBD_CtlReceiveStatus>
 8015e76:	e010      	b.n	8015e9a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015e78:	68fa      	ldr	r2, [r7, #12]
 8015e7a:	23a5      	movs	r3, #165	@ 0xa5
 8015e7c:	009b      	lsls	r3, r3, #2
 8015e7e:	58d3      	ldr	r3, [r2, r3]
 8015e80:	2b04      	cmp	r3, #4
 8015e82:	d005      	beq.n	8015e90 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8015e84:	68fa      	ldr	r2, [r7, #12]
 8015e86:	23a5      	movs	r3, #165	@ 0xa5
 8015e88:	009b      	lsls	r3, r3, #2
 8015e8a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d104      	bne.n	8015e9a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	2180      	movs	r1, #128	@ 0x80
 8015e94:	0018      	movs	r0, r3
 8015e96:	f001 fc12 	bl	80176be <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8015e9a:	68fa      	ldr	r2, [r7, #12]
 8015e9c:	23a8      	movs	r3, #168	@ 0xa8
 8015e9e:	009b      	lsls	r3, r3, #2
 8015ea0:	5cd3      	ldrb	r3, [r2, r3]
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d124      	bne.n	8015ef0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	0018      	movs	r0, r3
 8015eaa:	f7ff fe43 	bl	8015b34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015eae:	68fa      	ldr	r2, [r7, #12]
 8015eb0:	23a8      	movs	r3, #168	@ 0xa8
 8015eb2:	009b      	lsls	r3, r3, #2
 8015eb4:	2100      	movs	r1, #0
 8015eb6:	54d1      	strb	r1, [r2, r3]
 8015eb8:	e01a      	b.n	8015ef0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015eba:	68fa      	ldr	r2, [r7, #12]
 8015ebc:	23ad      	movs	r3, #173	@ 0xad
 8015ebe:	009b      	lsls	r3, r3, #2
 8015ec0:	58d3      	ldr	r3, [r2, r3]
 8015ec2:	695b      	ldr	r3, [r3, #20]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d011      	beq.n	8015eec <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015ec8:	68fa      	ldr	r2, [r7, #12]
 8015eca:	23a7      	movs	r3, #167	@ 0xa7
 8015ecc:	009b      	lsls	r3, r3, #2
 8015ece:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8015ed0:	2b03      	cmp	r3, #3
 8015ed2:	d10b      	bne.n	8015eec <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8015ed4:	68fa      	ldr	r2, [r7, #12]
 8015ed6:	23ad      	movs	r3, #173	@ 0xad
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	58d3      	ldr	r3, [r2, r3]
 8015edc:	695b      	ldr	r3, [r3, #20]
 8015ede:	220b      	movs	r2, #11
 8015ee0:	18ba      	adds	r2, r7, r2
 8015ee2:	7811      	ldrb	r1, [r2, #0]
 8015ee4:	68fa      	ldr	r2, [r7, #12]
 8015ee6:	0010      	movs	r0, r2
 8015ee8:	4798      	blx	r3
 8015eea:	e001      	b.n	8015ef0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015eec:	2302      	movs	r3, #2
 8015eee:	e000      	b.n	8015ef2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8015ef0:	2300      	movs	r3, #0
}
 8015ef2:	0018      	movs	r0, r3
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	b006      	add	sp, #24
 8015ef8:	bd80      	pop	{r7, pc}

08015efa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015efa:	b580      	push	{r7, lr}
 8015efc:	b082      	sub	sp, #8
 8015efe:	af00      	add	r7, sp, #0
 8015f00:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	2340      	movs	r3, #64	@ 0x40
 8015f06:	2200      	movs	r2, #0
 8015f08:	2100      	movs	r1, #0
 8015f0a:	f001 fb76 	bl	80175fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	23ac      	movs	r3, #172	@ 0xac
 8015f12:	005b      	lsls	r3, r3, #1
 8015f14:	2101      	movs	r1, #1
 8015f16:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015f18:	687a      	ldr	r2, [r7, #4]
 8015f1a:	23b2      	movs	r3, #178	@ 0xb2
 8015f1c:	005b      	lsls	r3, r3, #1
 8015f1e:	2140      	movs	r1, #64	@ 0x40
 8015f20:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	2340      	movs	r3, #64	@ 0x40
 8015f26:	2200      	movs	r2, #0
 8015f28:	2180      	movs	r1, #128	@ 0x80
 8015f2a:	f001 fb66 	bl	80175fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2201      	movs	r2, #1
 8015f32:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2240      	movs	r2, #64	@ 0x40
 8015f38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f3a:	687a      	ldr	r2, [r7, #4]
 8015f3c:	23a7      	movs	r3, #167	@ 0xa7
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	2101      	movs	r1, #1
 8015f42:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8015f44:	687a      	ldr	r2, [r7, #4]
 8015f46:	23a5      	movs	r3, #165	@ 0xa5
 8015f48:	009b      	lsls	r3, r3, #2
 8015f4a:	2100      	movs	r1, #0
 8015f4c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2200      	movs	r2, #0
 8015f52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	23a9      	movs	r3, #169	@ 0xa9
 8015f58:	009b      	lsls	r3, r3, #2
 8015f5a:	2100      	movs	r1, #0
 8015f5c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	23ae      	movs	r3, #174	@ 0xae
 8015f62:	009b      	lsls	r3, r3, #2
 8015f64:	58d3      	ldr	r3, [r2, r3]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d00a      	beq.n	8015f80 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015f6a:	687a      	ldr	r2, [r7, #4]
 8015f6c:	23ad      	movs	r3, #173	@ 0xad
 8015f6e:	009b      	lsls	r3, r3, #2
 8015f70:	58d3      	ldr	r3, [r2, r3]
 8015f72:	685a      	ldr	r2, [r3, #4]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	b2d9      	uxtb	r1, r3
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	0018      	movs	r0, r3
 8015f7e:	4790      	blx	r2
  }

  return USBD_OK;
 8015f80:	2300      	movs	r3, #0
}
 8015f82:	0018      	movs	r0, r3
 8015f84:	46bd      	mov	sp, r7
 8015f86:	b002      	add	sp, #8
 8015f88:	bd80      	pop	{r7, pc}

08015f8a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015f8a:	b580      	push	{r7, lr}
 8015f8c:	b082      	sub	sp, #8
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	6078      	str	r0, [r7, #4]
 8015f92:	000a      	movs	r2, r1
 8015f94:	1cfb      	adds	r3, r7, #3
 8015f96:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	1cfa      	adds	r2, r7, #3
 8015f9c:	7812      	ldrb	r2, [r2, #0]
 8015f9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015fa0:	2300      	movs	r3, #0
}
 8015fa2:	0018      	movs	r0, r3
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	b002      	add	sp, #8
 8015fa8:	bd80      	pop	{r7, pc}
	...

08015fac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	23a7      	movs	r3, #167	@ 0xa7
 8015fb8:	009b      	lsls	r3, r3, #2
 8015fba:	5cd1      	ldrb	r1, [r2, r3]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	4a06      	ldr	r2, [pc, #24]	@ (8015fd8 <USBD_LL_Suspend+0x2c>)
 8015fc0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	23a7      	movs	r3, #167	@ 0xa7
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	2104      	movs	r1, #4
 8015fca:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8015fcc:	2300      	movs	r3, #0
}
 8015fce:	0018      	movs	r0, r3
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	b002      	add	sp, #8
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	46c0      	nop			@ (mov r8, r8)
 8015fd8:	0000029d 	.word	0x0000029d

08015fdc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b082      	sub	sp, #8
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015fe4:	687a      	ldr	r2, [r7, #4]
 8015fe6:	23a7      	movs	r3, #167	@ 0xa7
 8015fe8:	009b      	lsls	r3, r3, #2
 8015fea:	5cd3      	ldrb	r3, [r2, r3]
 8015fec:	2b04      	cmp	r3, #4
 8015fee:	d106      	bne.n	8015ffe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	4a05      	ldr	r2, [pc, #20]	@ (8016008 <USBD_LL_Resume+0x2c>)
 8015ff4:	5c99      	ldrb	r1, [r3, r2]
 8015ff6:	687a      	ldr	r2, [r7, #4]
 8015ff8:	23a7      	movs	r3, #167	@ 0xa7
 8015ffa:	009b      	lsls	r3, r3, #2
 8015ffc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8015ffe:	2300      	movs	r3, #0
}
 8016000:	0018      	movs	r0, r3
 8016002:	46bd      	mov	sp, r7
 8016004:	b002      	add	sp, #8
 8016006:	bd80      	pop	{r7, pc}
 8016008:	0000029d 	.word	0x0000029d

0801600c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016014:	687a      	ldr	r2, [r7, #4]
 8016016:	23a7      	movs	r3, #167	@ 0xa7
 8016018:	009b      	lsls	r3, r3, #2
 801601a:	5cd3      	ldrb	r3, [r2, r3]
 801601c:	2b03      	cmp	r3, #3
 801601e:	d10e      	bne.n	801603e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8016020:	687a      	ldr	r2, [r7, #4]
 8016022:	23ad      	movs	r3, #173	@ 0xad
 8016024:	009b      	lsls	r3, r3, #2
 8016026:	58d3      	ldr	r3, [r2, r3]
 8016028:	69db      	ldr	r3, [r3, #28]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d007      	beq.n	801603e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801602e:	687a      	ldr	r2, [r7, #4]
 8016030:	23ad      	movs	r3, #173	@ 0xad
 8016032:	009b      	lsls	r3, r3, #2
 8016034:	58d3      	ldr	r3, [r2, r3]
 8016036:	69db      	ldr	r3, [r3, #28]
 8016038:	687a      	ldr	r2, [r7, #4]
 801603a:	0010      	movs	r0, r2
 801603c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801603e:	2300      	movs	r3, #0
}
 8016040:	0018      	movs	r0, r3
 8016042:	46bd      	mov	sp, r7
 8016044:	b002      	add	sp, #8
 8016046:	bd80      	pop	{r7, pc}

08016048 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b084      	sub	sp, #16
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
 8016050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016052:	230f      	movs	r3, #15
 8016054:	18fb      	adds	r3, r7, r3
 8016056:	2200      	movs	r2, #0
 8016058:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	001a      	movs	r2, r3
 8016060:	2360      	movs	r3, #96	@ 0x60
 8016062:	4013      	ands	r3, r2
 8016064:	2b40      	cmp	r3, #64	@ 0x40
 8016066:	d004      	beq.n	8016072 <USBD_StdDevReq+0x2a>
 8016068:	d84f      	bhi.n	801610a <USBD_StdDevReq+0xc2>
 801606a:	2b00      	cmp	r3, #0
 801606c:	d00b      	beq.n	8016086 <USBD_StdDevReq+0x3e>
 801606e:	2b20      	cmp	r3, #32
 8016070:	d14b      	bne.n	801610a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8016072:	687a      	ldr	r2, [r7, #4]
 8016074:	23ad      	movs	r3, #173	@ 0xad
 8016076:	009b      	lsls	r3, r3, #2
 8016078:	58d3      	ldr	r3, [r2, r3]
 801607a:	689b      	ldr	r3, [r3, #8]
 801607c:	6839      	ldr	r1, [r7, #0]
 801607e:	687a      	ldr	r2, [r7, #4]
 8016080:	0010      	movs	r0, r2
 8016082:	4798      	blx	r3
      break;
 8016084:	e048      	b.n	8016118 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	785b      	ldrb	r3, [r3, #1]
 801608a:	2b09      	cmp	r3, #9
 801608c:	d835      	bhi.n	80160fa <USBD_StdDevReq+0xb2>
 801608e:	009a      	lsls	r2, r3, #2
 8016090:	4b25      	ldr	r3, [pc, #148]	@ (8016128 <USBD_StdDevReq+0xe0>)
 8016092:	18d3      	adds	r3, r2, r3
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016098:	683a      	ldr	r2, [r7, #0]
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	0011      	movs	r1, r2
 801609e:	0018      	movs	r0, r3
 80160a0:	f000 fa52 	bl	8016548 <USBD_GetDescriptor>
          break;
 80160a4:	e030      	b.n	8016108 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80160a6:	683a      	ldr	r2, [r7, #0]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	0011      	movs	r1, r2
 80160ac:	0018      	movs	r0, r3
 80160ae:	f000 fbfd 	bl	80168ac <USBD_SetAddress>
          break;
 80160b2:	e029      	b.n	8016108 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80160b4:	683a      	ldr	r2, [r7, #0]
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	0011      	movs	r1, r2
 80160ba:	0018      	movs	r0, r3
 80160bc:	f000 fc4a 	bl	8016954 <USBD_SetConfig>
          break;
 80160c0:	e022      	b.n	8016108 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80160c2:	683a      	ldr	r2, [r7, #0]
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	0011      	movs	r1, r2
 80160c8:	0018      	movs	r0, r3
 80160ca:	f000 fce7 	bl	8016a9c <USBD_GetConfig>
          break;
 80160ce:	e01b      	b.n	8016108 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80160d0:	683a      	ldr	r2, [r7, #0]
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	0011      	movs	r1, r2
 80160d6:	0018      	movs	r0, r3
 80160d8:	f000 fd1b 	bl	8016b12 <USBD_GetStatus>
          break;
 80160dc:	e014      	b.n	8016108 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80160de:	683a      	ldr	r2, [r7, #0]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	0011      	movs	r1, r2
 80160e4:	0018      	movs	r0, r3
 80160e6:	f000 fd4e 	bl	8016b86 <USBD_SetFeature>
          break;
 80160ea:	e00d      	b.n	8016108 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80160ec:	683a      	ldr	r2, [r7, #0]
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	0011      	movs	r1, r2
 80160f2:	0018      	movs	r0, r3
 80160f4:	f000 fd5d 	bl	8016bb2 <USBD_ClrFeature>
          break;
 80160f8:	e006      	b.n	8016108 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80160fa:	683a      	ldr	r2, [r7, #0]
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	0011      	movs	r1, r2
 8016100:	0018      	movs	r0, r3
 8016102:	f000 fdb4 	bl	8016c6e <USBD_CtlError>
          break;
 8016106:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8016108:	e006      	b.n	8016118 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801610a:	683a      	ldr	r2, [r7, #0]
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	0011      	movs	r1, r2
 8016110:	0018      	movs	r0, r3
 8016112:	f000 fdac 	bl	8016c6e <USBD_CtlError>
      break;
 8016116:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8016118:	230f      	movs	r3, #15
 801611a:	18fb      	adds	r3, r7, r3
 801611c:	781b      	ldrb	r3, [r3, #0]
}
 801611e:	0018      	movs	r0, r3
 8016120:	46bd      	mov	sp, r7
 8016122:	b004      	add	sp, #16
 8016124:	bd80      	pop	{r7, pc}
 8016126:	46c0      	nop			@ (mov r8, r8)
 8016128:	0801c220 	.word	0x0801c220

0801612c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801612c:	b5b0      	push	{r4, r5, r7, lr}
 801612e:	b084      	sub	sp, #16
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
 8016134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016136:	230f      	movs	r3, #15
 8016138:	18fb      	adds	r3, r7, r3
 801613a:	2200      	movs	r2, #0
 801613c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	001a      	movs	r2, r3
 8016144:	2360      	movs	r3, #96	@ 0x60
 8016146:	4013      	ands	r3, r2
 8016148:	2b40      	cmp	r3, #64	@ 0x40
 801614a:	d004      	beq.n	8016156 <USBD_StdItfReq+0x2a>
 801614c:	d839      	bhi.n	80161c2 <USBD_StdItfReq+0x96>
 801614e:	2b00      	cmp	r3, #0
 8016150:	d001      	beq.n	8016156 <USBD_StdItfReq+0x2a>
 8016152:	2b20      	cmp	r3, #32
 8016154:	d135      	bne.n	80161c2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016156:	687a      	ldr	r2, [r7, #4]
 8016158:	23a7      	movs	r3, #167	@ 0xa7
 801615a:	009b      	lsls	r3, r3, #2
 801615c:	5cd3      	ldrb	r3, [r2, r3]
 801615e:	3b01      	subs	r3, #1
 8016160:	2b02      	cmp	r3, #2
 8016162:	d825      	bhi.n	80161b0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	889b      	ldrh	r3, [r3, #4]
 8016168:	b2db      	uxtb	r3, r3
 801616a:	2b01      	cmp	r3, #1
 801616c:	d819      	bhi.n	80161a2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	23ad      	movs	r3, #173	@ 0xad
 8016172:	009b      	lsls	r3, r3, #2
 8016174:	58d3      	ldr	r3, [r2, r3]
 8016176:	689b      	ldr	r3, [r3, #8]
 8016178:	250f      	movs	r5, #15
 801617a:	197c      	adds	r4, r7, r5
 801617c:	6839      	ldr	r1, [r7, #0]
 801617e:	687a      	ldr	r2, [r7, #4]
 8016180:	0010      	movs	r0, r2
 8016182:	4798      	blx	r3
 8016184:	0003      	movs	r3, r0
 8016186:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	88db      	ldrh	r3, [r3, #6]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d116      	bne.n	80161be <USBD_StdItfReq+0x92>
 8016190:	197b      	adds	r3, r7, r5
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d112      	bne.n	80161be <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	0018      	movs	r0, r3
 801619c:	f000 fe4f 	bl	8016e3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80161a0:	e00d      	b.n	80161be <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80161a2:	683a      	ldr	r2, [r7, #0]
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	0011      	movs	r1, r2
 80161a8:	0018      	movs	r0, r3
 80161aa:	f000 fd60 	bl	8016c6e <USBD_CtlError>
          break;
 80161ae:	e006      	b.n	80161be <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80161b0:	683a      	ldr	r2, [r7, #0]
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	0011      	movs	r1, r2
 80161b6:	0018      	movs	r0, r3
 80161b8:	f000 fd59 	bl	8016c6e <USBD_CtlError>
          break;
 80161bc:	e000      	b.n	80161c0 <USBD_StdItfReq+0x94>
          break;
 80161be:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80161c0:	e006      	b.n	80161d0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80161c2:	683a      	ldr	r2, [r7, #0]
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	0011      	movs	r1, r2
 80161c8:	0018      	movs	r0, r3
 80161ca:	f000 fd50 	bl	8016c6e <USBD_CtlError>
      break;
 80161ce:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80161d0:	2300      	movs	r3, #0
}
 80161d2:	0018      	movs	r0, r3
 80161d4:	46bd      	mov	sp, r7
 80161d6:	b004      	add	sp, #16
 80161d8:	bdb0      	pop	{r4, r5, r7, pc}

080161da <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80161da:	b5b0      	push	{r4, r5, r7, lr}
 80161dc:	b084      	sub	sp, #16
 80161de:	af00      	add	r7, sp, #0
 80161e0:	6078      	str	r0, [r7, #4]
 80161e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80161e4:	230f      	movs	r3, #15
 80161e6:	18fb      	adds	r3, r7, r3
 80161e8:	2200      	movs	r2, #0
 80161ea:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80161ec:	683b      	ldr	r3, [r7, #0]
 80161ee:	889a      	ldrh	r2, [r3, #4]
 80161f0:	230e      	movs	r3, #14
 80161f2:	18fb      	adds	r3, r7, r3
 80161f4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	781b      	ldrb	r3, [r3, #0]
 80161fa:	001a      	movs	r2, r3
 80161fc:	2360      	movs	r3, #96	@ 0x60
 80161fe:	4013      	ands	r3, r2
 8016200:	2b40      	cmp	r3, #64	@ 0x40
 8016202:	d006      	beq.n	8016212 <USBD_StdEPReq+0x38>
 8016204:	d900      	bls.n	8016208 <USBD_StdEPReq+0x2e>
 8016206:	e190      	b.n	801652a <USBD_StdEPReq+0x350>
 8016208:	2b00      	cmp	r3, #0
 801620a:	d00c      	beq.n	8016226 <USBD_StdEPReq+0x4c>
 801620c:	2b20      	cmp	r3, #32
 801620e:	d000      	beq.n	8016212 <USBD_StdEPReq+0x38>
 8016210:	e18b      	b.n	801652a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8016212:	687a      	ldr	r2, [r7, #4]
 8016214:	23ad      	movs	r3, #173	@ 0xad
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	58d3      	ldr	r3, [r2, r3]
 801621a:	689b      	ldr	r3, [r3, #8]
 801621c:	6839      	ldr	r1, [r7, #0]
 801621e:	687a      	ldr	r2, [r7, #4]
 8016220:	0010      	movs	r0, r2
 8016222:	4798      	blx	r3
      break;
 8016224:	e188      	b.n	8016538 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	781b      	ldrb	r3, [r3, #0]
 801622a:	001a      	movs	r2, r3
 801622c:	2360      	movs	r3, #96	@ 0x60
 801622e:	4013      	ands	r3, r2
 8016230:	2b20      	cmp	r3, #32
 8016232:	d10f      	bne.n	8016254 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016234:	687a      	ldr	r2, [r7, #4]
 8016236:	23ad      	movs	r3, #173	@ 0xad
 8016238:	009b      	lsls	r3, r3, #2
 801623a:	58d3      	ldr	r3, [r2, r3]
 801623c:	689b      	ldr	r3, [r3, #8]
 801623e:	250f      	movs	r5, #15
 8016240:	197c      	adds	r4, r7, r5
 8016242:	6839      	ldr	r1, [r7, #0]
 8016244:	687a      	ldr	r2, [r7, #4]
 8016246:	0010      	movs	r0, r2
 8016248:	4798      	blx	r3
 801624a:	0003      	movs	r3, r0
 801624c:	7023      	strb	r3, [r4, #0]

        return ret;
 801624e:	197b      	adds	r3, r7, r5
 8016250:	781b      	ldrb	r3, [r3, #0]
 8016252:	e174      	b.n	801653e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8016254:	683b      	ldr	r3, [r7, #0]
 8016256:	785b      	ldrb	r3, [r3, #1]
 8016258:	2b03      	cmp	r3, #3
 801625a:	d007      	beq.n	801626c <USBD_StdEPReq+0x92>
 801625c:	dd00      	ble.n	8016260 <USBD_StdEPReq+0x86>
 801625e:	e15c      	b.n	801651a <USBD_StdEPReq+0x340>
 8016260:	2b00      	cmp	r3, #0
 8016262:	d100      	bne.n	8016266 <USBD_StdEPReq+0x8c>
 8016264:	e092      	b.n	801638c <USBD_StdEPReq+0x1b2>
 8016266:	2b01      	cmp	r3, #1
 8016268:	d04b      	beq.n	8016302 <USBD_StdEPReq+0x128>
 801626a:	e156      	b.n	801651a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801626c:	687a      	ldr	r2, [r7, #4]
 801626e:	23a7      	movs	r3, #167	@ 0xa7
 8016270:	009b      	lsls	r3, r3, #2
 8016272:	5cd3      	ldrb	r3, [r2, r3]
 8016274:	2b02      	cmp	r3, #2
 8016276:	d002      	beq.n	801627e <USBD_StdEPReq+0xa4>
 8016278:	2b03      	cmp	r3, #3
 801627a:	d01d      	beq.n	80162b8 <USBD_StdEPReq+0xde>
 801627c:	e039      	b.n	80162f2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801627e:	220e      	movs	r2, #14
 8016280:	18bb      	adds	r3, r7, r2
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d010      	beq.n	80162aa <USBD_StdEPReq+0xd0>
 8016288:	18bb      	adds	r3, r7, r2
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	2b80      	cmp	r3, #128	@ 0x80
 801628e:	d00c      	beq.n	80162aa <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8016290:	18bb      	adds	r3, r7, r2
 8016292:	781a      	ldrb	r2, [r3, #0]
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	0011      	movs	r1, r2
 8016298:	0018      	movs	r0, r3
 801629a:	f001 fa10 	bl	80176be <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2180      	movs	r1, #128	@ 0x80
 80162a2:	0018      	movs	r0, r3
 80162a4:	f001 fa0b 	bl	80176be <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80162a8:	e02a      	b.n	8016300 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80162aa:	683a      	ldr	r2, [r7, #0]
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	0011      	movs	r1, r2
 80162b0:	0018      	movs	r0, r3
 80162b2:	f000 fcdc 	bl	8016c6e <USBD_CtlError>
              break;
 80162b6:	e023      	b.n	8016300 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	885b      	ldrh	r3, [r3, #2]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d113      	bne.n	80162e8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80162c0:	220e      	movs	r2, #14
 80162c2:	18bb      	adds	r3, r7, r2
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d00e      	beq.n	80162e8 <USBD_StdEPReq+0x10e>
 80162ca:	18bb      	adds	r3, r7, r2
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	2b80      	cmp	r3, #128	@ 0x80
 80162d0:	d00a      	beq.n	80162e8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80162d2:	683b      	ldr	r3, [r7, #0]
 80162d4:	88db      	ldrh	r3, [r3, #6]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d106      	bne.n	80162e8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80162da:	18bb      	adds	r3, r7, r2
 80162dc:	781a      	ldrb	r2, [r3, #0]
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	0011      	movs	r1, r2
 80162e2:	0018      	movs	r0, r3
 80162e4:	f001 f9eb 	bl	80176be <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	0018      	movs	r0, r3
 80162ec:	f000 fda7 	bl	8016e3e <USBD_CtlSendStatus>

              break;
 80162f0:	e006      	b.n	8016300 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80162f2:	683a      	ldr	r2, [r7, #0]
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	0011      	movs	r1, r2
 80162f8:	0018      	movs	r0, r3
 80162fa:	f000 fcb8 	bl	8016c6e <USBD_CtlError>
              break;
 80162fe:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8016300:	e112      	b.n	8016528 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	23a7      	movs	r3, #167	@ 0xa7
 8016306:	009b      	lsls	r3, r3, #2
 8016308:	5cd3      	ldrb	r3, [r2, r3]
 801630a:	2b02      	cmp	r3, #2
 801630c:	d002      	beq.n	8016314 <USBD_StdEPReq+0x13a>
 801630e:	2b03      	cmp	r3, #3
 8016310:	d01d      	beq.n	801634e <USBD_StdEPReq+0x174>
 8016312:	e032      	b.n	801637a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016314:	220e      	movs	r2, #14
 8016316:	18bb      	adds	r3, r7, r2
 8016318:	781b      	ldrb	r3, [r3, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d010      	beq.n	8016340 <USBD_StdEPReq+0x166>
 801631e:	18bb      	adds	r3, r7, r2
 8016320:	781b      	ldrb	r3, [r3, #0]
 8016322:	2b80      	cmp	r3, #128	@ 0x80
 8016324:	d00c      	beq.n	8016340 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8016326:	18bb      	adds	r3, r7, r2
 8016328:	781a      	ldrb	r2, [r3, #0]
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	0011      	movs	r1, r2
 801632e:	0018      	movs	r0, r3
 8016330:	f001 f9c5 	bl	80176be <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	2180      	movs	r1, #128	@ 0x80
 8016338:	0018      	movs	r0, r3
 801633a:	f001 f9c0 	bl	80176be <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801633e:	e024      	b.n	801638a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8016340:	683a      	ldr	r2, [r7, #0]
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	0011      	movs	r1, r2
 8016346:	0018      	movs	r0, r3
 8016348:	f000 fc91 	bl	8016c6e <USBD_CtlError>
              break;
 801634c:	e01d      	b.n	801638a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	885b      	ldrh	r3, [r3, #2]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d118      	bne.n	8016388 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016356:	210e      	movs	r1, #14
 8016358:	187b      	adds	r3, r7, r1
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	227f      	movs	r2, #127	@ 0x7f
 801635e:	4013      	ands	r3, r2
 8016360:	d006      	beq.n	8016370 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8016362:	187b      	adds	r3, r7, r1
 8016364:	781a      	ldrb	r2, [r3, #0]
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	0011      	movs	r1, r2
 801636a:	0018      	movs	r0, r3
 801636c:	f001 f9d2 	bl	8017714 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	0018      	movs	r0, r3
 8016374:	f000 fd63 	bl	8016e3e <USBD_CtlSendStatus>
              }
              break;
 8016378:	e006      	b.n	8016388 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801637a:	683a      	ldr	r2, [r7, #0]
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	0011      	movs	r1, r2
 8016380:	0018      	movs	r0, r3
 8016382:	f000 fc74 	bl	8016c6e <USBD_CtlError>
              break;
 8016386:	e000      	b.n	801638a <USBD_StdEPReq+0x1b0>
              break;
 8016388:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801638a:	e0cd      	b.n	8016528 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801638c:	687a      	ldr	r2, [r7, #4]
 801638e:	23a7      	movs	r3, #167	@ 0xa7
 8016390:	009b      	lsls	r3, r3, #2
 8016392:	5cd3      	ldrb	r3, [r2, r3]
 8016394:	2b02      	cmp	r3, #2
 8016396:	d002      	beq.n	801639e <USBD_StdEPReq+0x1c4>
 8016398:	2b03      	cmp	r3, #3
 801639a:	d03c      	beq.n	8016416 <USBD_StdEPReq+0x23c>
 801639c:	e0b5      	b.n	801650a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801639e:	220e      	movs	r2, #14
 80163a0:	18bb      	adds	r3, r7, r2
 80163a2:	781b      	ldrb	r3, [r3, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d00a      	beq.n	80163be <USBD_StdEPReq+0x1e4>
 80163a8:	18bb      	adds	r3, r7, r2
 80163aa:	781b      	ldrb	r3, [r3, #0]
 80163ac:	2b80      	cmp	r3, #128	@ 0x80
 80163ae:	d006      	beq.n	80163be <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80163b0:	683a      	ldr	r2, [r7, #0]
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	0011      	movs	r1, r2
 80163b6:	0018      	movs	r0, r3
 80163b8:	f000 fc59 	bl	8016c6e <USBD_CtlError>
                break;
 80163bc:	e0ac      	b.n	8016518 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163be:	220e      	movs	r2, #14
 80163c0:	18bb      	adds	r3, r7, r2
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	b25b      	sxtb	r3, r3
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	da0c      	bge.n	80163e4 <USBD_StdEPReq+0x20a>
 80163ca:	18bb      	adds	r3, r7, r2
 80163cc:	781b      	ldrb	r3, [r3, #0]
 80163ce:	227f      	movs	r2, #127	@ 0x7f
 80163d0:	401a      	ands	r2, r3
 80163d2:	0013      	movs	r3, r2
 80163d4:	009b      	lsls	r3, r3, #2
 80163d6:	189b      	adds	r3, r3, r2
 80163d8:	009b      	lsls	r3, r3, #2
 80163da:	3310      	adds	r3, #16
 80163dc:	687a      	ldr	r2, [r7, #4]
 80163de:	18d3      	adds	r3, r2, r3
 80163e0:	3304      	adds	r3, #4
 80163e2:	e00d      	b.n	8016400 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80163e4:	230e      	movs	r3, #14
 80163e6:	18fb      	adds	r3, r7, r3
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	227f      	movs	r2, #127	@ 0x7f
 80163ec:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163ee:	0013      	movs	r3, r2
 80163f0:	009b      	lsls	r3, r3, #2
 80163f2:	189b      	adds	r3, r3, r2
 80163f4:	009b      	lsls	r3, r3, #2
 80163f6:	3351      	adds	r3, #81	@ 0x51
 80163f8:	33ff      	adds	r3, #255	@ 0xff
 80163fa:	687a      	ldr	r2, [r7, #4]
 80163fc:	18d3      	adds	r3, r2, r3
 80163fe:	3304      	adds	r3, #4
 8016400:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	2200      	movs	r2, #0
 8016406:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8016408:	68b9      	ldr	r1, [r7, #8]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	2202      	movs	r2, #2
 801640e:	0018      	movs	r0, r3
 8016410:	f000 fcab 	bl	8016d6a <USBD_CtlSendData>
              break;
 8016414:	e080      	b.n	8016518 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016416:	220e      	movs	r2, #14
 8016418:	18bb      	adds	r3, r7, r2
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	b25b      	sxtb	r3, r3
 801641e:	2b00      	cmp	r3, #0
 8016420:	da14      	bge.n	801644c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016422:	18bb      	adds	r3, r7, r2
 8016424:	781b      	ldrb	r3, [r3, #0]
 8016426:	220f      	movs	r2, #15
 8016428:	401a      	ands	r2, r3
 801642a:	6879      	ldr	r1, [r7, #4]
 801642c:	0013      	movs	r3, r2
 801642e:	009b      	lsls	r3, r3, #2
 8016430:	189b      	adds	r3, r3, r2
 8016432:	009b      	lsls	r3, r3, #2
 8016434:	18cb      	adds	r3, r1, r3
 8016436:	3318      	adds	r3, #24
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d11e      	bne.n	801647c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801643e:	683a      	ldr	r2, [r7, #0]
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	0011      	movs	r1, r2
 8016444:	0018      	movs	r0, r3
 8016446:	f000 fc12 	bl	8016c6e <USBD_CtlError>
                  break;
 801644a:	e065      	b.n	8016518 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801644c:	230e      	movs	r3, #14
 801644e:	18fb      	adds	r3, r7, r3
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	220f      	movs	r2, #15
 8016454:	401a      	ands	r2, r3
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	23ac      	movs	r3, #172	@ 0xac
 801645a:	0059      	lsls	r1, r3, #1
 801645c:	0013      	movs	r3, r2
 801645e:	009b      	lsls	r3, r3, #2
 8016460:	189b      	adds	r3, r3, r2
 8016462:	009b      	lsls	r3, r3, #2
 8016464:	18c3      	adds	r3, r0, r3
 8016466:	185b      	adds	r3, r3, r1
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d106      	bne.n	801647c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801646e:	683a      	ldr	r2, [r7, #0]
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	0011      	movs	r1, r2
 8016474:	0018      	movs	r0, r3
 8016476:	f000 fbfa 	bl	8016c6e <USBD_CtlError>
                  break;
 801647a:	e04d      	b.n	8016518 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801647c:	220e      	movs	r2, #14
 801647e:	18bb      	adds	r3, r7, r2
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	b25b      	sxtb	r3, r3
 8016484:	2b00      	cmp	r3, #0
 8016486:	da0c      	bge.n	80164a2 <USBD_StdEPReq+0x2c8>
 8016488:	18bb      	adds	r3, r7, r2
 801648a:	781b      	ldrb	r3, [r3, #0]
 801648c:	227f      	movs	r2, #127	@ 0x7f
 801648e:	401a      	ands	r2, r3
 8016490:	0013      	movs	r3, r2
 8016492:	009b      	lsls	r3, r3, #2
 8016494:	189b      	adds	r3, r3, r2
 8016496:	009b      	lsls	r3, r3, #2
 8016498:	3310      	adds	r3, #16
 801649a:	687a      	ldr	r2, [r7, #4]
 801649c:	18d3      	adds	r3, r2, r3
 801649e:	3304      	adds	r3, #4
 80164a0:	e00d      	b.n	80164be <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80164a2:	230e      	movs	r3, #14
 80164a4:	18fb      	adds	r3, r7, r3
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	227f      	movs	r2, #127	@ 0x7f
 80164aa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80164ac:	0013      	movs	r3, r2
 80164ae:	009b      	lsls	r3, r3, #2
 80164b0:	189b      	adds	r3, r3, r2
 80164b2:	009b      	lsls	r3, r3, #2
 80164b4:	3351      	adds	r3, #81	@ 0x51
 80164b6:	33ff      	adds	r3, #255	@ 0xff
 80164b8:	687a      	ldr	r2, [r7, #4]
 80164ba:	18d3      	adds	r3, r2, r3
 80164bc:	3304      	adds	r3, #4
 80164be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80164c0:	220e      	movs	r2, #14
 80164c2:	18bb      	adds	r3, r7, r2
 80164c4:	781b      	ldrb	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d003      	beq.n	80164d2 <USBD_StdEPReq+0x2f8>
 80164ca:	18bb      	adds	r3, r7, r2
 80164cc:	781b      	ldrb	r3, [r3, #0]
 80164ce:	2b80      	cmp	r3, #128	@ 0x80
 80164d0:	d103      	bne.n	80164da <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	2200      	movs	r2, #0
 80164d6:	601a      	str	r2, [r3, #0]
 80164d8:	e010      	b.n	80164fc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80164da:	230e      	movs	r3, #14
 80164dc:	18fb      	adds	r3, r7, r3
 80164de:	781a      	ldrb	r2, [r3, #0]
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	0011      	movs	r1, r2
 80164e4:	0018      	movs	r0, r3
 80164e6:	f001 f940 	bl	801776a <USBD_LL_IsStallEP>
 80164ea:	1e03      	subs	r3, r0, #0
 80164ec:	d003      	beq.n	80164f6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	2201      	movs	r2, #1
 80164f2:	601a      	str	r2, [r3, #0]
 80164f4:	e002      	b.n	80164fc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	2200      	movs	r2, #0
 80164fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80164fc:	68b9      	ldr	r1, [r7, #8]
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2202      	movs	r2, #2
 8016502:	0018      	movs	r0, r3
 8016504:	f000 fc31 	bl	8016d6a <USBD_CtlSendData>
              break;
 8016508:	e006      	b.n	8016518 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801650a:	683a      	ldr	r2, [r7, #0]
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	0011      	movs	r1, r2
 8016510:	0018      	movs	r0, r3
 8016512:	f000 fbac 	bl	8016c6e <USBD_CtlError>
              break;
 8016516:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8016518:	e006      	b.n	8016528 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801651a:	683a      	ldr	r2, [r7, #0]
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	0011      	movs	r1, r2
 8016520:	0018      	movs	r0, r3
 8016522:	f000 fba4 	bl	8016c6e <USBD_CtlError>
          break;
 8016526:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8016528:	e006      	b.n	8016538 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801652a:	683a      	ldr	r2, [r7, #0]
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	0011      	movs	r1, r2
 8016530:	0018      	movs	r0, r3
 8016532:	f000 fb9c 	bl	8016c6e <USBD_CtlError>
      break;
 8016536:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8016538:	230f      	movs	r3, #15
 801653a:	18fb      	adds	r3, r7, r3
 801653c:	781b      	ldrb	r3, [r3, #0]
}
 801653e:	0018      	movs	r0, r3
 8016540:	46bd      	mov	sp, r7
 8016542:	b004      	add	sp, #16
 8016544:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016548 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b084      	sub	sp, #16
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016552:	2308      	movs	r3, #8
 8016554:	18fb      	adds	r3, r7, r3
 8016556:	2200      	movs	r2, #0
 8016558:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801655a:	2300      	movs	r3, #0
 801655c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801655e:	230b      	movs	r3, #11
 8016560:	18fb      	adds	r3, r7, r3
 8016562:	2200      	movs	r2, #0
 8016564:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	885b      	ldrh	r3, [r3, #2]
 801656a:	0a1b      	lsrs	r3, r3, #8
 801656c:	b29b      	uxth	r3, r3
 801656e:	2b07      	cmp	r3, #7
 8016570:	d900      	bls.n	8016574 <USBD_GetDescriptor+0x2c>
 8016572:	e159      	b.n	8016828 <USBD_GetDescriptor+0x2e0>
 8016574:	009a      	lsls	r2, r3, #2
 8016576:	4bcb      	ldr	r3, [pc, #812]	@ (80168a4 <USBD_GetDescriptor+0x35c>)
 8016578:	18d3      	adds	r3, r2, r3
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801657e:	687a      	ldr	r2, [r7, #4]
 8016580:	23ac      	movs	r3, #172	@ 0xac
 8016582:	009b      	lsls	r3, r3, #2
 8016584:	58d3      	ldr	r3, [r2, r3]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	687a      	ldr	r2, [r7, #4]
 801658a:	7c12      	ldrb	r2, [r2, #16]
 801658c:	2108      	movs	r1, #8
 801658e:	1879      	adds	r1, r7, r1
 8016590:	0010      	movs	r0, r2
 8016592:	4798      	blx	r3
 8016594:	0003      	movs	r3, r0
 8016596:	60fb      	str	r3, [r7, #12]
      break;
 8016598:	e153      	b.n	8016842 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	7c1b      	ldrb	r3, [r3, #16]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d10f      	bne.n	80165c2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80165a2:	687a      	ldr	r2, [r7, #4]
 80165a4:	23ad      	movs	r3, #173	@ 0xad
 80165a6:	009b      	lsls	r3, r3, #2
 80165a8:	58d3      	ldr	r3, [r2, r3]
 80165aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165ac:	2208      	movs	r2, #8
 80165ae:	18ba      	adds	r2, r7, r2
 80165b0:	0010      	movs	r0, r2
 80165b2:	4798      	blx	r3
 80165b4:	0003      	movs	r3, r0
 80165b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	3301      	adds	r3, #1
 80165bc:	2202      	movs	r2, #2
 80165be:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80165c0:	e13f      	b.n	8016842 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	23ad      	movs	r3, #173	@ 0xad
 80165c6:	009b      	lsls	r3, r3, #2
 80165c8:	58d3      	ldr	r3, [r2, r3]
 80165ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165cc:	2208      	movs	r2, #8
 80165ce:	18ba      	adds	r2, r7, r2
 80165d0:	0010      	movs	r0, r2
 80165d2:	4798      	blx	r3
 80165d4:	0003      	movs	r3, r0
 80165d6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	3301      	adds	r3, #1
 80165dc:	2202      	movs	r2, #2
 80165de:	701a      	strb	r2, [r3, #0]
      break;
 80165e0:	e12f      	b.n	8016842 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	885b      	ldrh	r3, [r3, #2]
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	2b05      	cmp	r3, #5
 80165ea:	d900      	bls.n	80165ee <USBD_GetDescriptor+0xa6>
 80165ec:	e0d0      	b.n	8016790 <USBD_GetDescriptor+0x248>
 80165ee:	009a      	lsls	r2, r3, #2
 80165f0:	4bad      	ldr	r3, [pc, #692]	@ (80168a8 <USBD_GetDescriptor+0x360>)
 80165f2:	18d3      	adds	r3, r2, r3
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80165f8:	687a      	ldr	r2, [r7, #4]
 80165fa:	23ac      	movs	r3, #172	@ 0xac
 80165fc:	009b      	lsls	r3, r3, #2
 80165fe:	58d3      	ldr	r3, [r2, r3]
 8016600:	685b      	ldr	r3, [r3, #4]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d00d      	beq.n	8016622 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016606:	687a      	ldr	r2, [r7, #4]
 8016608:	23ac      	movs	r3, #172	@ 0xac
 801660a:	009b      	lsls	r3, r3, #2
 801660c:	58d3      	ldr	r3, [r2, r3]
 801660e:	685b      	ldr	r3, [r3, #4]
 8016610:	687a      	ldr	r2, [r7, #4]
 8016612:	7c12      	ldrb	r2, [r2, #16]
 8016614:	2108      	movs	r1, #8
 8016616:	1879      	adds	r1, r7, r1
 8016618:	0010      	movs	r0, r2
 801661a:	4798      	blx	r3
 801661c:	0003      	movs	r3, r0
 801661e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016620:	e0c3      	b.n	80167aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016622:	683a      	ldr	r2, [r7, #0]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	0011      	movs	r1, r2
 8016628:	0018      	movs	r0, r3
 801662a:	f000 fb20 	bl	8016c6e <USBD_CtlError>
            err++;
 801662e:	210b      	movs	r1, #11
 8016630:	187b      	adds	r3, r7, r1
 8016632:	781a      	ldrb	r2, [r3, #0]
 8016634:	187b      	adds	r3, r7, r1
 8016636:	3201      	adds	r2, #1
 8016638:	701a      	strb	r2, [r3, #0]
          break;
 801663a:	e0b6      	b.n	80167aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801663c:	687a      	ldr	r2, [r7, #4]
 801663e:	23ac      	movs	r3, #172	@ 0xac
 8016640:	009b      	lsls	r3, r3, #2
 8016642:	58d3      	ldr	r3, [r2, r3]
 8016644:	689b      	ldr	r3, [r3, #8]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d00d      	beq.n	8016666 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801664a:	687a      	ldr	r2, [r7, #4]
 801664c:	23ac      	movs	r3, #172	@ 0xac
 801664e:	009b      	lsls	r3, r3, #2
 8016650:	58d3      	ldr	r3, [r2, r3]
 8016652:	689b      	ldr	r3, [r3, #8]
 8016654:	687a      	ldr	r2, [r7, #4]
 8016656:	7c12      	ldrb	r2, [r2, #16]
 8016658:	2108      	movs	r1, #8
 801665a:	1879      	adds	r1, r7, r1
 801665c:	0010      	movs	r0, r2
 801665e:	4798      	blx	r3
 8016660:	0003      	movs	r3, r0
 8016662:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016664:	e0a1      	b.n	80167aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016666:	683a      	ldr	r2, [r7, #0]
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	0011      	movs	r1, r2
 801666c:	0018      	movs	r0, r3
 801666e:	f000 fafe 	bl	8016c6e <USBD_CtlError>
            err++;
 8016672:	210b      	movs	r1, #11
 8016674:	187b      	adds	r3, r7, r1
 8016676:	781a      	ldrb	r2, [r3, #0]
 8016678:	187b      	adds	r3, r7, r1
 801667a:	3201      	adds	r2, #1
 801667c:	701a      	strb	r2, [r3, #0]
          break;
 801667e:	e094      	b.n	80167aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016680:	687a      	ldr	r2, [r7, #4]
 8016682:	23ac      	movs	r3, #172	@ 0xac
 8016684:	009b      	lsls	r3, r3, #2
 8016686:	58d3      	ldr	r3, [r2, r3]
 8016688:	68db      	ldr	r3, [r3, #12]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d00d      	beq.n	80166aa <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801668e:	687a      	ldr	r2, [r7, #4]
 8016690:	23ac      	movs	r3, #172	@ 0xac
 8016692:	009b      	lsls	r3, r3, #2
 8016694:	58d3      	ldr	r3, [r2, r3]
 8016696:	68db      	ldr	r3, [r3, #12]
 8016698:	687a      	ldr	r2, [r7, #4]
 801669a:	7c12      	ldrb	r2, [r2, #16]
 801669c:	2108      	movs	r1, #8
 801669e:	1879      	adds	r1, r7, r1
 80166a0:	0010      	movs	r0, r2
 80166a2:	4798      	blx	r3
 80166a4:	0003      	movs	r3, r0
 80166a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80166a8:	e07f      	b.n	80167aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80166aa:	683a      	ldr	r2, [r7, #0]
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	0011      	movs	r1, r2
 80166b0:	0018      	movs	r0, r3
 80166b2:	f000 fadc 	bl	8016c6e <USBD_CtlError>
            err++;
 80166b6:	210b      	movs	r1, #11
 80166b8:	187b      	adds	r3, r7, r1
 80166ba:	781a      	ldrb	r2, [r3, #0]
 80166bc:	187b      	adds	r3, r7, r1
 80166be:	3201      	adds	r2, #1
 80166c0:	701a      	strb	r2, [r3, #0]
          break;
 80166c2:	e072      	b.n	80167aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80166c4:	687a      	ldr	r2, [r7, #4]
 80166c6:	23ac      	movs	r3, #172	@ 0xac
 80166c8:	009b      	lsls	r3, r3, #2
 80166ca:	58d3      	ldr	r3, [r2, r3]
 80166cc:	691b      	ldr	r3, [r3, #16]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d00d      	beq.n	80166ee <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80166d2:	687a      	ldr	r2, [r7, #4]
 80166d4:	23ac      	movs	r3, #172	@ 0xac
 80166d6:	009b      	lsls	r3, r3, #2
 80166d8:	58d3      	ldr	r3, [r2, r3]
 80166da:	691b      	ldr	r3, [r3, #16]
 80166dc:	687a      	ldr	r2, [r7, #4]
 80166de:	7c12      	ldrb	r2, [r2, #16]
 80166e0:	2108      	movs	r1, #8
 80166e2:	1879      	adds	r1, r7, r1
 80166e4:	0010      	movs	r0, r2
 80166e6:	4798      	blx	r3
 80166e8:	0003      	movs	r3, r0
 80166ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80166ec:	e05d      	b.n	80167aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80166ee:	683a      	ldr	r2, [r7, #0]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	0011      	movs	r1, r2
 80166f4:	0018      	movs	r0, r3
 80166f6:	f000 faba 	bl	8016c6e <USBD_CtlError>
            err++;
 80166fa:	210b      	movs	r1, #11
 80166fc:	187b      	adds	r3, r7, r1
 80166fe:	781a      	ldrb	r2, [r3, #0]
 8016700:	187b      	adds	r3, r7, r1
 8016702:	3201      	adds	r2, #1
 8016704:	701a      	strb	r2, [r3, #0]
          break;
 8016706:	e050      	b.n	80167aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	23ac      	movs	r3, #172	@ 0xac
 801670c:	009b      	lsls	r3, r3, #2
 801670e:	58d3      	ldr	r3, [r2, r3]
 8016710:	695b      	ldr	r3, [r3, #20]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d00d      	beq.n	8016732 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016716:	687a      	ldr	r2, [r7, #4]
 8016718:	23ac      	movs	r3, #172	@ 0xac
 801671a:	009b      	lsls	r3, r3, #2
 801671c:	58d3      	ldr	r3, [r2, r3]
 801671e:	695b      	ldr	r3, [r3, #20]
 8016720:	687a      	ldr	r2, [r7, #4]
 8016722:	7c12      	ldrb	r2, [r2, #16]
 8016724:	2108      	movs	r1, #8
 8016726:	1879      	adds	r1, r7, r1
 8016728:	0010      	movs	r0, r2
 801672a:	4798      	blx	r3
 801672c:	0003      	movs	r3, r0
 801672e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016730:	e03b      	b.n	80167aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016732:	683a      	ldr	r2, [r7, #0]
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	0011      	movs	r1, r2
 8016738:	0018      	movs	r0, r3
 801673a:	f000 fa98 	bl	8016c6e <USBD_CtlError>
            err++;
 801673e:	210b      	movs	r1, #11
 8016740:	187b      	adds	r3, r7, r1
 8016742:	781a      	ldrb	r2, [r3, #0]
 8016744:	187b      	adds	r3, r7, r1
 8016746:	3201      	adds	r2, #1
 8016748:	701a      	strb	r2, [r3, #0]
          break;
 801674a:	e02e      	b.n	80167aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	23ac      	movs	r3, #172	@ 0xac
 8016750:	009b      	lsls	r3, r3, #2
 8016752:	58d3      	ldr	r3, [r2, r3]
 8016754:	699b      	ldr	r3, [r3, #24]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d00d      	beq.n	8016776 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801675a:	687a      	ldr	r2, [r7, #4]
 801675c:	23ac      	movs	r3, #172	@ 0xac
 801675e:	009b      	lsls	r3, r3, #2
 8016760:	58d3      	ldr	r3, [r2, r3]
 8016762:	699b      	ldr	r3, [r3, #24]
 8016764:	687a      	ldr	r2, [r7, #4]
 8016766:	7c12      	ldrb	r2, [r2, #16]
 8016768:	2108      	movs	r1, #8
 801676a:	1879      	adds	r1, r7, r1
 801676c:	0010      	movs	r0, r2
 801676e:	4798      	blx	r3
 8016770:	0003      	movs	r3, r0
 8016772:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016774:	e019      	b.n	80167aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016776:	683a      	ldr	r2, [r7, #0]
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	0011      	movs	r1, r2
 801677c:	0018      	movs	r0, r3
 801677e:	f000 fa76 	bl	8016c6e <USBD_CtlError>
            err++;
 8016782:	210b      	movs	r1, #11
 8016784:	187b      	adds	r3, r7, r1
 8016786:	781a      	ldrb	r2, [r3, #0]
 8016788:	187b      	adds	r3, r7, r1
 801678a:	3201      	adds	r2, #1
 801678c:	701a      	strb	r2, [r3, #0]
          break;
 801678e:	e00c      	b.n	80167aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8016790:	683a      	ldr	r2, [r7, #0]
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	0011      	movs	r1, r2
 8016796:	0018      	movs	r0, r3
 8016798:	f000 fa69 	bl	8016c6e <USBD_CtlError>
          err++;
 801679c:	210b      	movs	r1, #11
 801679e:	187b      	adds	r3, r7, r1
 80167a0:	781a      	ldrb	r2, [r3, #0]
 80167a2:	187b      	adds	r3, r7, r1
 80167a4:	3201      	adds	r2, #1
 80167a6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80167a8:	e04b      	b.n	8016842 <USBD_GetDescriptor+0x2fa>
 80167aa:	e04a      	b.n	8016842 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	7c1b      	ldrb	r3, [r3, #16]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d10b      	bne.n	80167cc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	23ad      	movs	r3, #173	@ 0xad
 80167b8:	009b      	lsls	r3, r3, #2
 80167ba:	58d3      	ldr	r3, [r2, r3]
 80167bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80167be:	2208      	movs	r2, #8
 80167c0:	18ba      	adds	r2, r7, r2
 80167c2:	0010      	movs	r0, r2
 80167c4:	4798      	blx	r3
 80167c6:	0003      	movs	r3, r0
 80167c8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80167ca:	e03a      	b.n	8016842 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80167cc:	683a      	ldr	r2, [r7, #0]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	0011      	movs	r1, r2
 80167d2:	0018      	movs	r0, r3
 80167d4:	f000 fa4b 	bl	8016c6e <USBD_CtlError>
        err++;
 80167d8:	210b      	movs	r1, #11
 80167da:	187b      	adds	r3, r7, r1
 80167dc:	781a      	ldrb	r2, [r3, #0]
 80167de:	187b      	adds	r3, r7, r1
 80167e0:	3201      	adds	r2, #1
 80167e2:	701a      	strb	r2, [r3, #0]
      break;
 80167e4:	e02d      	b.n	8016842 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	7c1b      	ldrb	r3, [r3, #16]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d10f      	bne.n	801680e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80167ee:	687a      	ldr	r2, [r7, #4]
 80167f0:	23ad      	movs	r3, #173	@ 0xad
 80167f2:	009b      	lsls	r3, r3, #2
 80167f4:	58d3      	ldr	r3, [r2, r3]
 80167f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80167f8:	2208      	movs	r2, #8
 80167fa:	18ba      	adds	r2, r7, r2
 80167fc:	0010      	movs	r0, r2
 80167fe:	4798      	blx	r3
 8016800:	0003      	movs	r3, r0
 8016802:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	3301      	adds	r3, #1
 8016808:	2207      	movs	r2, #7
 801680a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801680c:	e019      	b.n	8016842 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801680e:	683a      	ldr	r2, [r7, #0]
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	0011      	movs	r1, r2
 8016814:	0018      	movs	r0, r3
 8016816:	f000 fa2a 	bl	8016c6e <USBD_CtlError>
        err++;
 801681a:	210b      	movs	r1, #11
 801681c:	187b      	adds	r3, r7, r1
 801681e:	781a      	ldrb	r2, [r3, #0]
 8016820:	187b      	adds	r3, r7, r1
 8016822:	3201      	adds	r2, #1
 8016824:	701a      	strb	r2, [r3, #0]
      break;
 8016826:	e00c      	b.n	8016842 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8016828:	683a      	ldr	r2, [r7, #0]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	0011      	movs	r1, r2
 801682e:	0018      	movs	r0, r3
 8016830:	f000 fa1d 	bl	8016c6e <USBD_CtlError>
      err++;
 8016834:	210b      	movs	r1, #11
 8016836:	187b      	adds	r3, r7, r1
 8016838:	781a      	ldrb	r2, [r3, #0]
 801683a:	187b      	adds	r3, r7, r1
 801683c:	3201      	adds	r2, #1
 801683e:	701a      	strb	r2, [r3, #0]
      break;
 8016840:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8016842:	230b      	movs	r3, #11
 8016844:	18fb      	adds	r3, r7, r3
 8016846:	781b      	ldrb	r3, [r3, #0]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d127      	bne.n	801689c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801684c:	2108      	movs	r1, #8
 801684e:	187b      	adds	r3, r7, r1
 8016850:	881b      	ldrh	r3, [r3, #0]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d019      	beq.n	801688a <USBD_GetDescriptor+0x342>
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	88db      	ldrh	r3, [r3, #6]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d015      	beq.n	801688a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	88da      	ldrh	r2, [r3, #6]
 8016862:	187b      	adds	r3, r7, r1
 8016864:	881b      	ldrh	r3, [r3, #0]
 8016866:	1c18      	adds	r0, r3, #0
 8016868:	1c11      	adds	r1, r2, #0
 801686a:	b28a      	uxth	r2, r1
 801686c:	b283      	uxth	r3, r0
 801686e:	429a      	cmp	r2, r3
 8016870:	d900      	bls.n	8016874 <USBD_GetDescriptor+0x32c>
 8016872:	1c01      	adds	r1, r0, #0
 8016874:	b28a      	uxth	r2, r1
 8016876:	2108      	movs	r1, #8
 8016878:	187b      	adds	r3, r7, r1
 801687a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801687c:	187b      	adds	r3, r7, r1
 801687e:	881a      	ldrh	r2, [r3, #0]
 8016880:	68f9      	ldr	r1, [r7, #12]
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	0018      	movs	r0, r3
 8016886:	f000 fa70 	bl	8016d6a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	88db      	ldrh	r3, [r3, #6]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d105      	bne.n	801689e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	0018      	movs	r0, r3
 8016896:	f000 fad2 	bl	8016e3e <USBD_CtlSendStatus>
 801689a:	e000      	b.n	801689e <USBD_GetDescriptor+0x356>
    return;
 801689c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801689e:	46bd      	mov	sp, r7
 80168a0:	b004      	add	sp, #16
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	0801c248 	.word	0x0801c248
 80168a8:	0801c268 	.word	0x0801c268

080168ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80168ac:	b590      	push	{r4, r7, lr}
 80168ae:	b085      	sub	sp, #20
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	889b      	ldrh	r3, [r3, #4]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d13d      	bne.n	801693a <USBD_SetAddress+0x8e>
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	88db      	ldrh	r3, [r3, #6]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d139      	bne.n	801693a <USBD_SetAddress+0x8e>
 80168c6:	683b      	ldr	r3, [r7, #0]
 80168c8:	885b      	ldrh	r3, [r3, #2]
 80168ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80168cc:	d835      	bhi.n	801693a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	885b      	ldrh	r3, [r3, #2]
 80168d2:	b2da      	uxtb	r2, r3
 80168d4:	230f      	movs	r3, #15
 80168d6:	18fb      	adds	r3, r7, r3
 80168d8:	217f      	movs	r1, #127	@ 0x7f
 80168da:	400a      	ands	r2, r1
 80168dc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168de:	687a      	ldr	r2, [r7, #4]
 80168e0:	23a7      	movs	r3, #167	@ 0xa7
 80168e2:	009b      	lsls	r3, r3, #2
 80168e4:	5cd3      	ldrb	r3, [r2, r3]
 80168e6:	2b03      	cmp	r3, #3
 80168e8:	d106      	bne.n	80168f8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80168ea:	683a      	ldr	r2, [r7, #0]
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	0011      	movs	r1, r2
 80168f0:	0018      	movs	r0, r3
 80168f2:	f000 f9bc 	bl	8016c6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168f6:	e027      	b.n	8016948 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	240f      	movs	r4, #15
 80168fc:	193a      	adds	r2, r7, r4
 80168fe:	4914      	ldr	r1, [pc, #80]	@ (8016950 <USBD_SetAddress+0xa4>)
 8016900:	7812      	ldrb	r2, [r2, #0]
 8016902:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016904:	193b      	adds	r3, r7, r4
 8016906:	781a      	ldrb	r2, [r3, #0]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	0011      	movs	r1, r2
 801690c:	0018      	movs	r0, r3
 801690e:	f000 ff5d 	bl	80177cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	0018      	movs	r0, r3
 8016916:	f000 fa92 	bl	8016e3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801691a:	193b      	adds	r3, r7, r4
 801691c:	781b      	ldrb	r3, [r3, #0]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d005      	beq.n	801692e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016922:	687a      	ldr	r2, [r7, #4]
 8016924:	23a7      	movs	r3, #167	@ 0xa7
 8016926:	009b      	lsls	r3, r3, #2
 8016928:	2102      	movs	r1, #2
 801692a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801692c:	e00c      	b.n	8016948 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801692e:	687a      	ldr	r2, [r7, #4]
 8016930:	23a7      	movs	r3, #167	@ 0xa7
 8016932:	009b      	lsls	r3, r3, #2
 8016934:	2101      	movs	r1, #1
 8016936:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016938:	e006      	b.n	8016948 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801693a:	683a      	ldr	r2, [r7, #0]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	0011      	movs	r1, r2
 8016940:	0018      	movs	r0, r3
 8016942:	f000 f994 	bl	8016c6e <USBD_CtlError>
  }
}
 8016946:	46c0      	nop			@ (mov r8, r8)
 8016948:	46c0      	nop			@ (mov r8, r8)
 801694a:	46bd      	mov	sp, r7
 801694c:	b005      	add	sp, #20
 801694e:	bd90      	pop	{r4, r7, pc}
 8016950:	0000029e 	.word	0x0000029e

08016954 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
 801695c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	885b      	ldrh	r3, [r3, #2]
 8016962:	b2da      	uxtb	r2, r3
 8016964:	4b4c      	ldr	r3, [pc, #304]	@ (8016a98 <USBD_SetConfig+0x144>)
 8016966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016968:	4b4b      	ldr	r3, [pc, #300]	@ (8016a98 <USBD_SetConfig+0x144>)
 801696a:	781b      	ldrb	r3, [r3, #0]
 801696c:	2b01      	cmp	r3, #1
 801696e:	d906      	bls.n	801697e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8016970:	683a      	ldr	r2, [r7, #0]
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	0011      	movs	r1, r2
 8016976:	0018      	movs	r0, r3
 8016978:	f000 f979 	bl	8016c6e <USBD_CtlError>
 801697c:	e088      	b.n	8016a90 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	23a7      	movs	r3, #167	@ 0xa7
 8016982:	009b      	lsls	r3, r3, #2
 8016984:	5cd3      	ldrb	r3, [r2, r3]
 8016986:	2b02      	cmp	r3, #2
 8016988:	d002      	beq.n	8016990 <USBD_SetConfig+0x3c>
 801698a:	2b03      	cmp	r3, #3
 801698c:	d029      	beq.n	80169e2 <USBD_SetConfig+0x8e>
 801698e:	e071      	b.n	8016a74 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8016990:	4b41      	ldr	r3, [pc, #260]	@ (8016a98 <USBD_SetConfig+0x144>)
 8016992:	781b      	ldrb	r3, [r3, #0]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d01f      	beq.n	80169d8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8016998:	4b3f      	ldr	r3, [pc, #252]	@ (8016a98 <USBD_SetConfig+0x144>)
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	001a      	movs	r2, r3
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80169a2:	687a      	ldr	r2, [r7, #4]
 80169a4:	23a7      	movs	r3, #167	@ 0xa7
 80169a6:	009b      	lsls	r3, r3, #2
 80169a8:	2103      	movs	r1, #3
 80169aa:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80169ac:	4b3a      	ldr	r3, [pc, #232]	@ (8016a98 <USBD_SetConfig+0x144>)
 80169ae:	781a      	ldrb	r2, [r3, #0]
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	0011      	movs	r1, r2
 80169b4:	0018      	movs	r0, r3
 80169b6:	f7ff f8c6 	bl	8015b46 <USBD_SetClassConfig>
 80169ba:	0003      	movs	r3, r0
 80169bc:	2b02      	cmp	r3, #2
 80169be:	d106      	bne.n	80169ce <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80169c0:	683a      	ldr	r2, [r7, #0]
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	0011      	movs	r1, r2
 80169c6:	0018      	movs	r0, r3
 80169c8:	f000 f951 	bl	8016c6e <USBD_CtlError>
            return;
 80169cc:	e060      	b.n	8016a90 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	0018      	movs	r0, r3
 80169d2:	f000 fa34 	bl	8016e3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80169d6:	e05b      	b.n	8016a90 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	0018      	movs	r0, r3
 80169dc:	f000 fa2f 	bl	8016e3e <USBD_CtlSendStatus>
        break;
 80169e0:	e056      	b.n	8016a90 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80169e2:	4b2d      	ldr	r3, [pc, #180]	@ (8016a98 <USBD_SetConfig+0x144>)
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d115      	bne.n	8016a16 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80169ea:	687a      	ldr	r2, [r7, #4]
 80169ec:	23a7      	movs	r3, #167	@ 0xa7
 80169ee:	009b      	lsls	r3, r3, #2
 80169f0:	2102      	movs	r1, #2
 80169f2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80169f4:	4b28      	ldr	r3, [pc, #160]	@ (8016a98 <USBD_SetConfig+0x144>)
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	001a      	movs	r2, r3
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80169fe:	4b26      	ldr	r3, [pc, #152]	@ (8016a98 <USBD_SetConfig+0x144>)
 8016a00:	781a      	ldrb	r2, [r3, #0]
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	0011      	movs	r1, r2
 8016a06:	0018      	movs	r0, r3
 8016a08:	f7ff f8c4 	bl	8015b94 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	0018      	movs	r0, r3
 8016a10:	f000 fa15 	bl	8016e3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8016a14:	e03c      	b.n	8016a90 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8016a16:	4b20      	ldr	r3, [pc, #128]	@ (8016a98 <USBD_SetConfig+0x144>)
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	001a      	movs	r2, r3
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	685b      	ldr	r3, [r3, #4]
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d022      	beq.n	8016a6a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	685b      	ldr	r3, [r3, #4]
 8016a28:	b2da      	uxtb	r2, r3
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	0011      	movs	r1, r2
 8016a2e:	0018      	movs	r0, r3
 8016a30:	f7ff f8b0 	bl	8015b94 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8016a34:	4b18      	ldr	r3, [pc, #96]	@ (8016a98 <USBD_SetConfig+0x144>)
 8016a36:	781b      	ldrb	r3, [r3, #0]
 8016a38:	001a      	movs	r2, r3
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8016a3e:	4b16      	ldr	r3, [pc, #88]	@ (8016a98 <USBD_SetConfig+0x144>)
 8016a40:	781a      	ldrb	r2, [r3, #0]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	0011      	movs	r1, r2
 8016a46:	0018      	movs	r0, r3
 8016a48:	f7ff f87d 	bl	8015b46 <USBD_SetClassConfig>
 8016a4c:	0003      	movs	r3, r0
 8016a4e:	2b02      	cmp	r3, #2
 8016a50:	d106      	bne.n	8016a60 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8016a52:	683a      	ldr	r2, [r7, #0]
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	0011      	movs	r1, r2
 8016a58:	0018      	movs	r0, r3
 8016a5a:	f000 f908 	bl	8016c6e <USBD_CtlError>
            return;
 8016a5e:	e017      	b.n	8016a90 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	0018      	movs	r0, r3
 8016a64:	f000 f9eb 	bl	8016e3e <USBD_CtlSendStatus>
        break;
 8016a68:	e012      	b.n	8016a90 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	0018      	movs	r0, r3
 8016a6e:	f000 f9e6 	bl	8016e3e <USBD_CtlSendStatus>
        break;
 8016a72:	e00d      	b.n	8016a90 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8016a74:	683a      	ldr	r2, [r7, #0]
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	0011      	movs	r1, r2
 8016a7a:	0018      	movs	r0, r3
 8016a7c:	f000 f8f7 	bl	8016c6e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8016a80:	4b05      	ldr	r3, [pc, #20]	@ (8016a98 <USBD_SetConfig+0x144>)
 8016a82:	781a      	ldrb	r2, [r3, #0]
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	0011      	movs	r1, r2
 8016a88:	0018      	movs	r0, r3
 8016a8a:	f7ff f883 	bl	8015b94 <USBD_ClrClassConfig>
        break;
 8016a8e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8016a90:	46bd      	mov	sp, r7
 8016a92:	b002      	add	sp, #8
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	46c0      	nop			@ (mov r8, r8)
 8016a98:	20002d34 	.word	0x20002d34

08016a9c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	88db      	ldrh	r3, [r3, #6]
 8016aaa:	2b01      	cmp	r3, #1
 8016aac:	d006      	beq.n	8016abc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8016aae:	683a      	ldr	r2, [r7, #0]
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	0011      	movs	r1, r2
 8016ab4:	0018      	movs	r0, r3
 8016ab6:	f000 f8da 	bl	8016c6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016aba:	e026      	b.n	8016b0a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8016abc:	687a      	ldr	r2, [r7, #4]
 8016abe:	23a7      	movs	r3, #167	@ 0xa7
 8016ac0:	009b      	lsls	r3, r3, #2
 8016ac2:	5cd3      	ldrb	r3, [r2, r3]
 8016ac4:	2b02      	cmp	r3, #2
 8016ac6:	dc02      	bgt.n	8016ace <USBD_GetConfig+0x32>
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	dc03      	bgt.n	8016ad4 <USBD_GetConfig+0x38>
 8016acc:	e016      	b.n	8016afc <USBD_GetConfig+0x60>
 8016ace:	2b03      	cmp	r3, #3
 8016ad0:	d00c      	beq.n	8016aec <USBD_GetConfig+0x50>
 8016ad2:	e013      	b.n	8016afc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	3308      	adds	r3, #8
 8016ade:	0019      	movs	r1, r3
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2201      	movs	r2, #1
 8016ae4:	0018      	movs	r0, r3
 8016ae6:	f000 f940 	bl	8016d6a <USBD_CtlSendData>
        break;
 8016aea:	e00e      	b.n	8016b0a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	1d19      	adds	r1, r3, #4
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2201      	movs	r2, #1
 8016af4:	0018      	movs	r0, r3
 8016af6:	f000 f938 	bl	8016d6a <USBD_CtlSendData>
        break;
 8016afa:	e006      	b.n	8016b0a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8016afc:	683a      	ldr	r2, [r7, #0]
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	0011      	movs	r1, r2
 8016b02:	0018      	movs	r0, r3
 8016b04:	f000 f8b3 	bl	8016c6e <USBD_CtlError>
        break;
 8016b08:	46c0      	nop			@ (mov r8, r8)
}
 8016b0a:	46c0      	nop			@ (mov r8, r8)
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	b002      	add	sp, #8
 8016b10:	bd80      	pop	{r7, pc}

08016b12 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b12:	b580      	push	{r7, lr}
 8016b14:	b082      	sub	sp, #8
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	6078      	str	r0, [r7, #4]
 8016b1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016b1c:	687a      	ldr	r2, [r7, #4]
 8016b1e:	23a7      	movs	r3, #167	@ 0xa7
 8016b20:	009b      	lsls	r3, r3, #2
 8016b22:	5cd3      	ldrb	r3, [r2, r3]
 8016b24:	3b01      	subs	r3, #1
 8016b26:	2b02      	cmp	r3, #2
 8016b28:	d822      	bhi.n	8016b70 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016b2a:	683b      	ldr	r3, [r7, #0]
 8016b2c:	88db      	ldrh	r3, [r3, #6]
 8016b2e:	2b02      	cmp	r3, #2
 8016b30:	d006      	beq.n	8016b40 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8016b32:	683a      	ldr	r2, [r7, #0]
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	0011      	movs	r1, r2
 8016b38:	0018      	movs	r0, r3
 8016b3a:	f000 f898 	bl	8016c6e <USBD_CtlError>
        break;
 8016b3e:	e01e      	b.n	8016b7e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2201      	movs	r2, #1
 8016b44:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	23a9      	movs	r3, #169	@ 0xa9
 8016b4a:	009b      	lsls	r3, r3, #2
 8016b4c:	58d3      	ldr	r3, [r2, r3]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d005      	beq.n	8016b5e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	2202      	movs	r2, #2
 8016b58:	431a      	orrs	r2, r3
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	330c      	adds	r3, #12
 8016b62:	0019      	movs	r1, r3
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2202      	movs	r2, #2
 8016b68:	0018      	movs	r0, r3
 8016b6a:	f000 f8fe 	bl	8016d6a <USBD_CtlSendData>
      break;
 8016b6e:	e006      	b.n	8016b7e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8016b70:	683a      	ldr	r2, [r7, #0]
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	0011      	movs	r1, r2
 8016b76:	0018      	movs	r0, r3
 8016b78:	f000 f879 	bl	8016c6e <USBD_CtlError>
      break;
 8016b7c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016b7e:	46c0      	nop			@ (mov r8, r8)
 8016b80:	46bd      	mov	sp, r7
 8016b82:	b002      	add	sp, #8
 8016b84:	bd80      	pop	{r7, pc}

08016b86 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016b86:	b580      	push	{r7, lr}
 8016b88:	b082      	sub	sp, #8
 8016b8a:	af00      	add	r7, sp, #0
 8016b8c:	6078      	str	r0, [r7, #4]
 8016b8e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	885b      	ldrh	r3, [r3, #2]
 8016b94:	2b01      	cmp	r3, #1
 8016b96:	d108      	bne.n	8016baa <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8016b98:	687a      	ldr	r2, [r7, #4]
 8016b9a:	23a9      	movs	r3, #169	@ 0xa9
 8016b9c:	009b      	lsls	r3, r3, #2
 8016b9e:	2101      	movs	r1, #1
 8016ba0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	0018      	movs	r0, r3
 8016ba6:	f000 f94a 	bl	8016e3e <USBD_CtlSendStatus>
  }
}
 8016baa:	46c0      	nop			@ (mov r8, r8)
 8016bac:	46bd      	mov	sp, r7
 8016bae:	b002      	add	sp, #8
 8016bb0:	bd80      	pop	{r7, pc}

08016bb2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016bb2:	b580      	push	{r7, lr}
 8016bb4:	b082      	sub	sp, #8
 8016bb6:	af00      	add	r7, sp, #0
 8016bb8:	6078      	str	r0, [r7, #4]
 8016bba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016bbc:	687a      	ldr	r2, [r7, #4]
 8016bbe:	23a7      	movs	r3, #167	@ 0xa7
 8016bc0:	009b      	lsls	r3, r3, #2
 8016bc2:	5cd3      	ldrb	r3, [r2, r3]
 8016bc4:	3b01      	subs	r3, #1
 8016bc6:	2b02      	cmp	r3, #2
 8016bc8:	d80d      	bhi.n	8016be6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016bca:	683b      	ldr	r3, [r7, #0]
 8016bcc:	885b      	ldrh	r3, [r3, #2]
 8016bce:	2b01      	cmp	r3, #1
 8016bd0:	d110      	bne.n	8016bf4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8016bd2:	687a      	ldr	r2, [r7, #4]
 8016bd4:	23a9      	movs	r3, #169	@ 0xa9
 8016bd6:	009b      	lsls	r3, r3, #2
 8016bd8:	2100      	movs	r1, #0
 8016bda:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	0018      	movs	r0, r3
 8016be0:	f000 f92d 	bl	8016e3e <USBD_CtlSendStatus>
      }
      break;
 8016be4:	e006      	b.n	8016bf4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8016be6:	683a      	ldr	r2, [r7, #0]
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	0011      	movs	r1, r2
 8016bec:	0018      	movs	r0, r3
 8016bee:	f000 f83e 	bl	8016c6e <USBD_CtlError>
      break;
 8016bf2:	e000      	b.n	8016bf6 <USBD_ClrFeature+0x44>
      break;
 8016bf4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016bf6:	46c0      	nop			@ (mov r8, r8)
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	b002      	add	sp, #8
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b082      	sub	sp, #8
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
 8016c06:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	781a      	ldrb	r2, [r3, #0]
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	785a      	ldrb	r2, [r3, #1]
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	3302      	adds	r3, #2
 8016c1c:	781b      	ldrb	r3, [r3, #0]
 8016c1e:	001a      	movs	r2, r3
 8016c20:	683b      	ldr	r3, [r7, #0]
 8016c22:	3303      	adds	r3, #3
 8016c24:	781b      	ldrb	r3, [r3, #0]
 8016c26:	021b      	lsls	r3, r3, #8
 8016c28:	b29b      	uxth	r3, r3
 8016c2a:	18d3      	adds	r3, r2, r3
 8016c2c:	b29a      	uxth	r2, r3
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	3304      	adds	r3, #4
 8016c36:	781b      	ldrb	r3, [r3, #0]
 8016c38:	001a      	movs	r2, r3
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	3305      	adds	r3, #5
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	021b      	lsls	r3, r3, #8
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	18d3      	adds	r3, r2, r3
 8016c46:	b29a      	uxth	r2, r3
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8016c4c:	683b      	ldr	r3, [r7, #0]
 8016c4e:	3306      	adds	r3, #6
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	001a      	movs	r2, r3
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	3307      	adds	r3, #7
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	021b      	lsls	r3, r3, #8
 8016c5c:	b29b      	uxth	r3, r3
 8016c5e:	18d3      	adds	r3, r2, r3
 8016c60:	b29a      	uxth	r2, r3
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	80da      	strh	r2, [r3, #6]

}
 8016c66:	46c0      	nop			@ (mov r8, r8)
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	b002      	add	sp, #8
 8016c6c:	bd80      	pop	{r7, pc}

08016c6e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8016c6e:	b580      	push	{r7, lr}
 8016c70:	b082      	sub	sp, #8
 8016c72:	af00      	add	r7, sp, #0
 8016c74:	6078      	str	r0, [r7, #4]
 8016c76:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2180      	movs	r1, #128	@ 0x80
 8016c7c:	0018      	movs	r0, r3
 8016c7e:	f000 fd1e 	bl	80176be <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	2100      	movs	r1, #0
 8016c86:	0018      	movs	r0, r3
 8016c88:	f000 fd19 	bl	80176be <USBD_LL_StallEP>
}
 8016c8c:	46c0      	nop			@ (mov r8, r8)
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	b002      	add	sp, #8
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016c94:	b590      	push	{r4, r7, lr}
 8016c96:	b087      	sub	sp, #28
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	60f8      	str	r0, [r7, #12]
 8016c9c:	60b9      	str	r1, [r7, #8]
 8016c9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016ca0:	2417      	movs	r4, #23
 8016ca2:	193b      	adds	r3, r7, r4
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d03c      	beq.n	8016d28 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	0018      	movs	r0, r3
 8016cb2:	f000 f83d 	bl	8016d30 <USBD_GetLen>
 8016cb6:	0003      	movs	r3, r0
 8016cb8:	3301      	adds	r3, #1
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	18db      	adds	r3, r3, r3
 8016cbe:	b29a      	uxth	r2, r3
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8016cc4:	193b      	adds	r3, r7, r4
 8016cc6:	781b      	ldrb	r3, [r3, #0]
 8016cc8:	193a      	adds	r2, r7, r4
 8016cca:	1c59      	adds	r1, r3, #1
 8016ccc:	7011      	strb	r1, [r2, #0]
 8016cce:	001a      	movs	r2, r3
 8016cd0:	68bb      	ldr	r3, [r7, #8]
 8016cd2:	189b      	adds	r3, r3, r2
 8016cd4:	687a      	ldr	r2, [r7, #4]
 8016cd6:	7812      	ldrb	r2, [r2, #0]
 8016cd8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8016cda:	193b      	adds	r3, r7, r4
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	193a      	adds	r2, r7, r4
 8016ce0:	1c59      	adds	r1, r3, #1
 8016ce2:	7011      	strb	r1, [r2, #0]
 8016ce4:	001a      	movs	r2, r3
 8016ce6:	68bb      	ldr	r3, [r7, #8]
 8016ce8:	189b      	adds	r3, r3, r2
 8016cea:	2203      	movs	r2, #3
 8016cec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8016cee:	e017      	b.n	8016d20 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	1c5a      	adds	r2, r3, #1
 8016cf4:	60fa      	str	r2, [r7, #12]
 8016cf6:	2417      	movs	r4, #23
 8016cf8:	193a      	adds	r2, r7, r4
 8016cfa:	7812      	ldrb	r2, [r2, #0]
 8016cfc:	1939      	adds	r1, r7, r4
 8016cfe:	1c50      	adds	r0, r2, #1
 8016d00:	7008      	strb	r0, [r1, #0]
 8016d02:	0011      	movs	r1, r2
 8016d04:	68ba      	ldr	r2, [r7, #8]
 8016d06:	1852      	adds	r2, r2, r1
 8016d08:	781b      	ldrb	r3, [r3, #0]
 8016d0a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8016d0c:	193b      	adds	r3, r7, r4
 8016d0e:	781b      	ldrb	r3, [r3, #0]
 8016d10:	193a      	adds	r2, r7, r4
 8016d12:	1c59      	adds	r1, r3, #1
 8016d14:	7011      	strb	r1, [r2, #0]
 8016d16:	001a      	movs	r2, r3
 8016d18:	68bb      	ldr	r3, [r7, #8]
 8016d1a:	189b      	adds	r3, r3, r2
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	781b      	ldrb	r3, [r3, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d1e3      	bne.n	8016cf0 <USBD_GetString+0x5c>
    }
  }
}
 8016d28:	46c0      	nop			@ (mov r8, r8)
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	b007      	add	sp, #28
 8016d2e:	bd90      	pop	{r4, r7, pc}

08016d30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b084      	sub	sp, #16
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016d38:	230f      	movs	r3, #15
 8016d3a:	18fb      	adds	r3, r7, r3
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8016d40:	e008      	b.n	8016d54 <USBD_GetLen+0x24>
  {
    len++;
 8016d42:	210f      	movs	r1, #15
 8016d44:	187b      	adds	r3, r7, r1
 8016d46:	781a      	ldrb	r2, [r3, #0]
 8016d48:	187b      	adds	r3, r7, r1
 8016d4a:	3201      	adds	r2, #1
 8016d4c:	701a      	strb	r2, [r3, #0]
    buf++;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	3301      	adds	r3, #1
 8016d52:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	781b      	ldrb	r3, [r3, #0]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d1f2      	bne.n	8016d42 <USBD_GetLen+0x12>
  }

  return len;
 8016d5c:	230f      	movs	r3, #15
 8016d5e:	18fb      	adds	r3, r7, r3
 8016d60:	781b      	ldrb	r3, [r3, #0]
}
 8016d62:	0018      	movs	r0, r3
 8016d64:	46bd      	mov	sp, r7
 8016d66:	b004      	add	sp, #16
 8016d68:	bd80      	pop	{r7, pc}

08016d6a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8016d6a:	b580      	push	{r7, lr}
 8016d6c:	b084      	sub	sp, #16
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	60f8      	str	r0, [r7, #12]
 8016d72:	60b9      	str	r1, [r7, #8]
 8016d74:	1dbb      	adds	r3, r7, #6
 8016d76:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016d78:	68fa      	ldr	r2, [r7, #12]
 8016d7a:	23a5      	movs	r3, #165	@ 0xa5
 8016d7c:	009b      	lsls	r3, r3, #2
 8016d7e:	2102      	movs	r1, #2
 8016d80:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8016d82:	1dbb      	adds	r3, r7, #6
 8016d84:	881a      	ldrh	r2, [r3, #0]
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8016d8a:	1dbb      	adds	r3, r7, #6
 8016d8c:	881a      	ldrh	r2, [r3, #0]
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016d92:	1dbb      	adds	r3, r7, #6
 8016d94:	881b      	ldrh	r3, [r3, #0]
 8016d96:	68ba      	ldr	r2, [r7, #8]
 8016d98:	68f8      	ldr	r0, [r7, #12]
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	f000 fd41 	bl	8017822 <USBD_LL_Transmit>

  return USBD_OK;
 8016da0:	2300      	movs	r3, #0
}
 8016da2:	0018      	movs	r0, r3
 8016da4:	46bd      	mov	sp, r7
 8016da6:	b004      	add	sp, #16
 8016da8:	bd80      	pop	{r7, pc}

08016daa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8016daa:	b580      	push	{r7, lr}
 8016dac:	b084      	sub	sp, #16
 8016dae:	af00      	add	r7, sp, #0
 8016db0:	60f8      	str	r0, [r7, #12]
 8016db2:	60b9      	str	r1, [r7, #8]
 8016db4:	1dbb      	adds	r3, r7, #6
 8016db6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016db8:	1dbb      	adds	r3, r7, #6
 8016dba:	881b      	ldrh	r3, [r3, #0]
 8016dbc:	68ba      	ldr	r2, [r7, #8]
 8016dbe:	68f8      	ldr	r0, [r7, #12]
 8016dc0:	2100      	movs	r1, #0
 8016dc2:	f000 fd2e 	bl	8017822 <USBD_LL_Transmit>

  return USBD_OK;
 8016dc6:	2300      	movs	r3, #0
}
 8016dc8:	0018      	movs	r0, r3
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	b004      	add	sp, #16
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	1dbb      	adds	r3, r7, #6
 8016ddc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016dde:	68fa      	ldr	r2, [r7, #12]
 8016de0:	23a5      	movs	r3, #165	@ 0xa5
 8016de2:	009b      	lsls	r3, r3, #2
 8016de4:	2103      	movs	r1, #3
 8016de6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8016de8:	1dbb      	adds	r3, r7, #6
 8016dea:	8819      	ldrh	r1, [r3, #0]
 8016dec:	68fa      	ldr	r2, [r7, #12]
 8016dee:	23ae      	movs	r3, #174	@ 0xae
 8016df0:	005b      	lsls	r3, r3, #1
 8016df2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8016df4:	1dbb      	adds	r3, r7, #6
 8016df6:	8819      	ldrh	r1, [r3, #0]
 8016df8:	68fa      	ldr	r2, [r7, #12]
 8016dfa:	23b0      	movs	r3, #176	@ 0xb0
 8016dfc:	005b      	lsls	r3, r3, #1
 8016dfe:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016e00:	1dbb      	adds	r3, r7, #6
 8016e02:	881b      	ldrh	r3, [r3, #0]
 8016e04:	68ba      	ldr	r2, [r7, #8]
 8016e06:	68f8      	ldr	r0, [r7, #12]
 8016e08:	2100      	movs	r1, #0
 8016e0a:	f000 fd41 	bl	8017890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e0e:	2300      	movs	r3, #0
}
 8016e10:	0018      	movs	r0, r3
 8016e12:	46bd      	mov	sp, r7
 8016e14:	b004      	add	sp, #16
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b084      	sub	sp, #16
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	60b9      	str	r1, [r7, #8]
 8016e22:	1dbb      	adds	r3, r7, #6
 8016e24:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016e26:	1dbb      	adds	r3, r7, #6
 8016e28:	881b      	ldrh	r3, [r3, #0]
 8016e2a:	68ba      	ldr	r2, [r7, #8]
 8016e2c:	68f8      	ldr	r0, [r7, #12]
 8016e2e:	2100      	movs	r1, #0
 8016e30:	f000 fd2e 	bl	8017890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e34:	2300      	movs	r3, #0
}
 8016e36:	0018      	movs	r0, r3
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	b004      	add	sp, #16
 8016e3c:	bd80      	pop	{r7, pc}

08016e3e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016e3e:	b580      	push	{r7, lr}
 8016e40:	b082      	sub	sp, #8
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016e46:	687a      	ldr	r2, [r7, #4]
 8016e48:	23a5      	movs	r3, #165	@ 0xa5
 8016e4a:	009b      	lsls	r3, r3, #2
 8016e4c:	2104      	movs	r1, #4
 8016e4e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	2300      	movs	r3, #0
 8016e54:	2200      	movs	r2, #0
 8016e56:	2100      	movs	r1, #0
 8016e58:	f000 fce3 	bl	8017822 <USBD_LL_Transmit>

  return USBD_OK;
 8016e5c:	2300      	movs	r3, #0
}
 8016e5e:	0018      	movs	r0, r3
 8016e60:	46bd      	mov	sp, r7
 8016e62:	b002      	add	sp, #8
 8016e64:	bd80      	pop	{r7, pc}

08016e66 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016e66:	b580      	push	{r7, lr}
 8016e68:	b082      	sub	sp, #8
 8016e6a:	af00      	add	r7, sp, #0
 8016e6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016e6e:	687a      	ldr	r2, [r7, #4]
 8016e70:	23a5      	movs	r3, #165	@ 0xa5
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	2105      	movs	r1, #5
 8016e76:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016e78:	6878      	ldr	r0, [r7, #4]
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	2100      	movs	r1, #0
 8016e80:	f000 fd06 	bl	8017890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e84:	2300      	movs	r3, #0
}
 8016e86:	0018      	movs	r0, r3
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	b002      	add	sp, #8
 8016e8c:	bd80      	pop	{r7, pc}
	...

08016e90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016e94:	4914      	ldr	r1, [pc, #80]	@ (8016ee8 <MX_USB_DEVICE_Init+0x58>)
 8016e96:	4b15      	ldr	r3, [pc, #84]	@ (8016eec <MX_USB_DEVICE_Init+0x5c>)
 8016e98:	2200      	movs	r2, #0
 8016e9a:	0018      	movs	r0, r3
 8016e9c:	f7fe fdec 	bl	8015a78 <USBD_Init>
 8016ea0:	1e03      	subs	r3, r0, #0
 8016ea2:	d001      	beq.n	8016ea8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016ea4:	f7ef fc0c 	bl	80066c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016ea8:	4a11      	ldr	r2, [pc, #68]	@ (8016ef0 <MX_USB_DEVICE_Init+0x60>)
 8016eaa:	4b10      	ldr	r3, [pc, #64]	@ (8016eec <MX_USB_DEVICE_Init+0x5c>)
 8016eac:	0011      	movs	r1, r2
 8016eae:	0018      	movs	r0, r3
 8016eb0:	f7fe fe13 	bl	8015ada <USBD_RegisterClass>
 8016eb4:	1e03      	subs	r3, r0, #0
 8016eb6:	d001      	beq.n	8016ebc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8016eb8:	f7ef fc02 	bl	80066c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8016ef4 <MX_USB_DEVICE_Init+0x64>)
 8016ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8016eec <MX_USB_DEVICE_Init+0x5c>)
 8016ec0:	0011      	movs	r1, r2
 8016ec2:	0018      	movs	r0, r3
 8016ec4:	f7fe fd28 	bl	8015918 <USBD_CDC_RegisterInterface>
 8016ec8:	1e03      	subs	r3, r0, #0
 8016eca:	d001      	beq.n	8016ed0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8016ecc:	f7ef fbf8 	bl	80066c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016ed0:	4b06      	ldr	r3, [pc, #24]	@ (8016eec <MX_USB_DEVICE_Init+0x5c>)
 8016ed2:	0018      	movs	r0, r3
 8016ed4:	f7fe fe21 	bl	8015b1a <USBD_Start>
 8016ed8:	1e03      	subs	r3, r0, #0
 8016eda:	d001      	beq.n	8016ee0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8016edc:	f7ef fbf0 	bl	80066c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016ee0:	46c0      	nop			@ (mov r8, r8)
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd80      	pop	{r7, pc}
 8016ee6:	46c0      	nop			@ (mov r8, r8)
 8016ee8:	20000198 	.word	0x20000198
 8016eec:	20002d38 	.word	0x20002d38
 8016ef0:	20000084 	.word	0x20000084
 8016ef4:	20000188 	.word	0x20000188

08016ef8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016efc:	4907      	ldr	r1, [pc, #28]	@ (8016f1c <CDC_Init_FS+0x24>)
 8016efe:	4b08      	ldr	r3, [pc, #32]	@ (8016f20 <CDC_Init_FS+0x28>)
 8016f00:	2200      	movs	r2, #0
 8016f02:	0018      	movs	r0, r3
 8016f04:	f7fe fd23 	bl	801594e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016f08:	4a06      	ldr	r2, [pc, #24]	@ (8016f24 <CDC_Init_FS+0x2c>)
 8016f0a:	4b05      	ldr	r3, [pc, #20]	@ (8016f20 <CDC_Init_FS+0x28>)
 8016f0c:	0011      	movs	r1, r2
 8016f0e:	0018      	movs	r0, r3
 8016f10:	f7fe fd39 	bl	8015986 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016f14:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016f16:	0018      	movs	r0, r3
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}
 8016f1c:	200034bc 	.word	0x200034bc
 8016f20:	20002d38 	.word	0x20002d38
 8016f24:	200030bc 	.word	0x200030bc

08016f28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016f2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016f2e:	0018      	movs	r0, r3
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}

08016f34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b082      	sub	sp, #8
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6039      	str	r1, [r7, #0]
 8016f3c:	0011      	movs	r1, r2
 8016f3e:	1dfb      	adds	r3, r7, #7
 8016f40:	1c02      	adds	r2, r0, #0
 8016f42:	701a      	strb	r2, [r3, #0]
 8016f44:	1d3b      	adds	r3, r7, #4
 8016f46:	1c0a      	adds	r2, r1, #0
 8016f48:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016f4a:	1dfb      	adds	r3, r7, #7
 8016f4c:	781b      	ldrb	r3, [r3, #0]
 8016f4e:	2b23      	cmp	r3, #35	@ 0x23
 8016f50:	d804      	bhi.n	8016f5c <CDC_Control_FS+0x28>
 8016f52:	009a      	lsls	r2, r3, #2
 8016f54:	4b04      	ldr	r3, [pc, #16]	@ (8016f68 <CDC_Control_FS+0x34>)
 8016f56:	18d3      	adds	r3, r2, r3
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016f5c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8016f5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016f60:	0018      	movs	r0, r3
 8016f62:	46bd      	mov	sp, r7
 8016f64:	b002      	add	sp, #8
 8016f66:	bd80      	pop	{r7, pc}
 8016f68:	0801c280 	.word	0x0801c280

08016f6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8016f76:	4b12      	ldr	r3, [pc, #72]	@ (8016fc0 <CDC_Receive_FS+0x54>)
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d013      	beq.n	8016fa6 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	b29a      	uxth	r2, r3
 8016f84:	2301      	movs	r3, #1
 8016f86:	425b      	negs	r3, r3
 8016f88:	6879      	ldr	r1, [r7, #4]
 8016f8a:	480e      	ldr	r0, [pc, #56]	@ (8016fc4 <CDC_Receive_FS+0x58>)
 8016f8c:	f7fa fd3a 	bl	8011a04 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016f90:	687a      	ldr	r2, [r7, #4]
 8016f92:	4b0d      	ldr	r3, [pc, #52]	@ (8016fc8 <CDC_Receive_FS+0x5c>)
 8016f94:	0011      	movs	r1, r2
 8016f96:	0018      	movs	r0, r3
 8016f98:	f7fe fcf5 	bl	8015986 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8016fc8 <CDC_Receive_FS+0x5c>)
 8016f9e:	0018      	movs	r0, r3
 8016fa0:	f7fe fd3c 	bl	8015a1c <USBD_CDC_ReceivePacket>
 8016fa4:	e006      	b.n	8016fb4 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	681a      	ldr	r2, [r3, #0]
 8016faa:	4b08      	ldr	r3, [pc, #32]	@ (8016fcc <CDC_Receive_FS+0x60>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	18d2      	adds	r2, r2, r3
 8016fb0:	4b06      	ldr	r3, [pc, #24]	@ (8016fcc <CDC_Receive_FS+0x60>)
 8016fb2:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8016fb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016fb6:	0018      	movs	r0, r3
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	b002      	add	sp, #8
 8016fbc:	bd80      	pop	{r7, pc}
 8016fbe:	46c0      	nop			@ (mov r8, r8)
 8016fc0:	20002ffc 	.word	0x20002ffc
 8016fc4:	20003000 	.word	0x20003000
 8016fc8:	20002d38 	.word	0x20002d38
 8016fcc:	200030b8 	.word	0x200030b8

08016fd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016fd0:	b5b0      	push	{r4, r5, r7, lr}
 8016fd2:	b084      	sub	sp, #16
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	000a      	movs	r2, r1
 8016fda:	1cbb      	adds	r3, r7, #2
 8016fdc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8016fde:	230f      	movs	r3, #15
 8016fe0:	18fb      	adds	r3, r7, r3
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016fe6:	4a11      	ldr	r2, [pc, #68]	@ (801702c <CDC_Transmit_FS+0x5c>)
 8016fe8:	23ae      	movs	r3, #174	@ 0xae
 8016fea:	009b      	lsls	r3, r3, #2
 8016fec:	58d3      	ldr	r3, [r2, r3]
 8016fee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016ff0:	68ba      	ldr	r2, [r7, #8]
 8016ff2:	2385      	movs	r3, #133	@ 0x85
 8016ff4:	009b      	lsls	r3, r3, #2
 8016ff6:	58d3      	ldr	r3, [r2, r3]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d001      	beq.n	8017000 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	e010      	b.n	8017022 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017000:	1cbb      	adds	r3, r7, #2
 8017002:	881a      	ldrh	r2, [r3, #0]
 8017004:	6879      	ldr	r1, [r7, #4]
 8017006:	4b09      	ldr	r3, [pc, #36]	@ (801702c <CDC_Transmit_FS+0x5c>)
 8017008:	0018      	movs	r0, r3
 801700a:	f7fe fca0 	bl	801594e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801700e:	250f      	movs	r5, #15
 8017010:	197c      	adds	r4, r7, r5
 8017012:	4b06      	ldr	r3, [pc, #24]	@ (801702c <CDC_Transmit_FS+0x5c>)
 8017014:	0018      	movs	r0, r3
 8017016:	f7fe fcca 	bl	80159ae <USBD_CDC_TransmitPacket>
 801701a:	0003      	movs	r3, r0
 801701c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801701e:	197b      	adds	r3, r7, r5
 8017020:	781b      	ldrb	r3, [r3, #0]
}
 8017022:	0018      	movs	r0, r3
 8017024:	46bd      	mov	sp, r7
 8017026:	b004      	add	sp, #16
 8017028:	bdb0      	pop	{r4, r5, r7, pc}
 801702a:	46c0      	nop			@ (mov r8, r8)
 801702c:	20002d38 	.word	0x20002d38

08017030 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8017030:	b580      	push	{r7, lr}
 8017032:	af00      	add	r7, sp, #0
  ESPProg = true;
 8017034:	4b02      	ldr	r3, [pc, #8]	@ (8017040 <EnableESPProg+0x10>)
 8017036:	2201      	movs	r2, #1
 8017038:	701a      	strb	r2, [r3, #0]
}
 801703a:	46c0      	nop			@ (mov r8, r8)
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}
 8017040:	20002ffc 	.word	0x20002ffc

08017044 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8017048:	4b01      	ldr	r3, [pc, #4]	@ (8017050 <GetUsbRxPointer+0xc>)
}
 801704a:	0018      	movs	r0, r3
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}
 8017050:	200030bc 	.word	0x200030bc

08017054 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8017058:	4b07      	ldr	r3, [pc, #28]	@ (8017078 <ResetUsbRxDataSize+0x24>)
 801705a:	2200      	movs	r2, #0
 801705c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801705e:	4a07      	ldr	r2, [pc, #28]	@ (801707c <ResetUsbRxDataSize+0x28>)
 8017060:	4b07      	ldr	r3, [pc, #28]	@ (8017080 <ResetUsbRxDataSize+0x2c>)
 8017062:	0011      	movs	r1, r2
 8017064:	0018      	movs	r0, r3
 8017066:	f7fe fc8e 	bl	8015986 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801706a:	4b05      	ldr	r3, [pc, #20]	@ (8017080 <ResetUsbRxDataSize+0x2c>)
 801706c:	0018      	movs	r0, r3
 801706e:	f7fe fcd5 	bl	8015a1c <USBD_CDC_ReceivePacket>
}
 8017072:	46c0      	nop			@ (mov r8, r8)
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}
 8017078:	200030b8 	.word	0x200030b8
 801707c:	200030bc 	.word	0x200030bc
 8017080:	20002d38 	.word	0x20002d38

08017084 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8017084:	b580      	push	{r7, lr}
 8017086:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8017088:	4b02      	ldr	r3, [pc, #8]	@ (8017094 <GetUsbRxDataSize+0x10>)
 801708a:	681b      	ldr	r3, [r3, #0]
}
 801708c:	0018      	movs	r0, r3
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}
 8017092:	46c0      	nop			@ (mov r8, r8)
 8017094:	200030b8 	.word	0x200030b8

08017098 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b082      	sub	sp, #8
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 80170a0:	687a      	ldr	r2, [r7, #4]
 80170a2:	4b07      	ldr	r3, [pc, #28]	@ (80170c0 <GetUsbRxNextChunk+0x28>)
 80170a4:	18d2      	adds	r2, r2, r3
 80170a6:	4b07      	ldr	r3, [pc, #28]	@ (80170c4 <GetUsbRxNextChunk+0x2c>)
 80170a8:	0011      	movs	r1, r2
 80170aa:	0018      	movs	r0, r3
 80170ac:	f7fe fc6b 	bl	8015986 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80170b0:	4b04      	ldr	r3, [pc, #16]	@ (80170c4 <GetUsbRxNextChunk+0x2c>)
 80170b2:	0018      	movs	r0, r3
 80170b4:	f7fe fcb2 	bl	8015a1c <USBD_CDC_ReceivePacket>
}
 80170b8:	46c0      	nop			@ (mov r8, r8)
 80170ba:	46bd      	mov	sp, r7
 80170bc:	b002      	add	sp, #8
 80170be:	bd80      	pop	{r7, pc}
 80170c0:	200030bc 	.word	0x200030bc
 80170c4:	20002d38 	.word	0x20002d38

080170c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b082      	sub	sp, #8
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	0002      	movs	r2, r0
 80170d0:	6039      	str	r1, [r7, #0]
 80170d2:	1dfb      	adds	r3, r7, #7
 80170d4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80170d6:	683b      	ldr	r3, [r7, #0]
 80170d8:	2212      	movs	r2, #18
 80170da:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80170dc:	4b02      	ldr	r3, [pc, #8]	@ (80170e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80170de:	0018      	movs	r0, r3
 80170e0:	46bd      	mov	sp, r7
 80170e2:	b002      	add	sp, #8
 80170e4:	bd80      	pop	{r7, pc}
 80170e6:	46c0      	nop			@ (mov r8, r8)
 80170e8:	200001b4 	.word	0x200001b4

080170ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b082      	sub	sp, #8
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	0002      	movs	r2, r0
 80170f4:	6039      	str	r1, [r7, #0]
 80170f6:	1dfb      	adds	r3, r7, #7
 80170f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	2204      	movs	r2, #4
 80170fe:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017100:	4b02      	ldr	r3, [pc, #8]	@ (801710c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017102:	0018      	movs	r0, r3
 8017104:	46bd      	mov	sp, r7
 8017106:	b002      	add	sp, #8
 8017108:	bd80      	pop	{r7, pc}
 801710a:	46c0      	nop			@ (mov r8, r8)
 801710c:	200001c8 	.word	0x200001c8

08017110 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b082      	sub	sp, #8
 8017114:	af00      	add	r7, sp, #0
 8017116:	0002      	movs	r2, r0
 8017118:	6039      	str	r1, [r7, #0]
 801711a:	1dfb      	adds	r3, r7, #7
 801711c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801711e:	1dfb      	adds	r3, r7, #7
 8017120:	781b      	ldrb	r3, [r3, #0]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d106      	bne.n	8017134 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017126:	683a      	ldr	r2, [r7, #0]
 8017128:	4908      	ldr	r1, [pc, #32]	@ (801714c <USBD_FS_ProductStrDescriptor+0x3c>)
 801712a:	4b09      	ldr	r3, [pc, #36]	@ (8017150 <USBD_FS_ProductStrDescriptor+0x40>)
 801712c:	0018      	movs	r0, r3
 801712e:	f7ff fdb1 	bl	8016c94 <USBD_GetString>
 8017132:	e005      	b.n	8017140 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017134:	683a      	ldr	r2, [r7, #0]
 8017136:	4905      	ldr	r1, [pc, #20]	@ (801714c <USBD_FS_ProductStrDescriptor+0x3c>)
 8017138:	4b05      	ldr	r3, [pc, #20]	@ (8017150 <USBD_FS_ProductStrDescriptor+0x40>)
 801713a:	0018      	movs	r0, r3
 801713c:	f7ff fdaa 	bl	8016c94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017140:	4b02      	ldr	r3, [pc, #8]	@ (801714c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8017142:	0018      	movs	r0, r3
 8017144:	46bd      	mov	sp, r7
 8017146:	b002      	add	sp, #8
 8017148:	bd80      	pop	{r7, pc}
 801714a:	46c0      	nop			@ (mov r8, r8)
 801714c:	200038bc 	.word	0x200038bc
 8017150:	0801bf40 	.word	0x0801bf40

08017154 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b082      	sub	sp, #8
 8017158:	af00      	add	r7, sp, #0
 801715a:	0002      	movs	r2, r0
 801715c:	6039      	str	r1, [r7, #0]
 801715e:	1dfb      	adds	r3, r7, #7
 8017160:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017162:	683a      	ldr	r2, [r7, #0]
 8017164:	4904      	ldr	r1, [pc, #16]	@ (8017178 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017166:	4b05      	ldr	r3, [pc, #20]	@ (801717c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8017168:	0018      	movs	r0, r3
 801716a:	f7ff fd93 	bl	8016c94 <USBD_GetString>
  return USBD_StrDesc;
 801716e:	4b02      	ldr	r3, [pc, #8]	@ (8017178 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8017170:	0018      	movs	r0, r3
 8017172:	46bd      	mov	sp, r7
 8017174:	b002      	add	sp, #8
 8017176:	bd80      	pop	{r7, pc}
 8017178:	200038bc 	.word	0x200038bc
 801717c:	0801bf58 	.word	0x0801bf58

08017180 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	0002      	movs	r2, r0
 8017188:	6039      	str	r1, [r7, #0]
 801718a:	1dfb      	adds	r3, r7, #7
 801718c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	221a      	movs	r2, #26
 8017192:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017194:	f000 f84c 	bl	8017230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017198:	4b02      	ldr	r3, [pc, #8]	@ (80171a4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801719a:	0018      	movs	r0, r3
 801719c:	46bd      	mov	sp, r7
 801719e:	b002      	add	sp, #8
 80171a0:	bd80      	pop	{r7, pc}
 80171a2:	46c0      	nop			@ (mov r8, r8)
 80171a4:	200001cc 	.word	0x200001cc

080171a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b082      	sub	sp, #8
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	0002      	movs	r2, r0
 80171b0:	6039      	str	r1, [r7, #0]
 80171b2:	1dfb      	adds	r3, r7, #7
 80171b4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80171b6:	1dfb      	adds	r3, r7, #7
 80171b8:	781b      	ldrb	r3, [r3, #0]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d106      	bne.n	80171cc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80171be:	683a      	ldr	r2, [r7, #0]
 80171c0:	4908      	ldr	r1, [pc, #32]	@ (80171e4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80171c2:	4b09      	ldr	r3, [pc, #36]	@ (80171e8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80171c4:	0018      	movs	r0, r3
 80171c6:	f7ff fd65 	bl	8016c94 <USBD_GetString>
 80171ca:	e005      	b.n	80171d8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80171cc:	683a      	ldr	r2, [r7, #0]
 80171ce:	4905      	ldr	r1, [pc, #20]	@ (80171e4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80171d0:	4b05      	ldr	r3, [pc, #20]	@ (80171e8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80171d2:	0018      	movs	r0, r3
 80171d4:	f7ff fd5e 	bl	8016c94 <USBD_GetString>
  }
  return USBD_StrDesc;
 80171d8:	4b02      	ldr	r3, [pc, #8]	@ (80171e4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80171da:	0018      	movs	r0, r3
 80171dc:	46bd      	mov	sp, r7
 80171de:	b002      	add	sp, #8
 80171e0:	bd80      	pop	{r7, pc}
 80171e2:	46c0      	nop			@ (mov r8, r8)
 80171e4:	200038bc 	.word	0x200038bc
 80171e8:	0801bf6c 	.word	0x0801bf6c

080171ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b082      	sub	sp, #8
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	0002      	movs	r2, r0
 80171f4:	6039      	str	r1, [r7, #0]
 80171f6:	1dfb      	adds	r3, r7, #7
 80171f8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80171fa:	1dfb      	adds	r3, r7, #7
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d106      	bne.n	8017210 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017202:	683a      	ldr	r2, [r7, #0]
 8017204:	4908      	ldr	r1, [pc, #32]	@ (8017228 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8017206:	4b09      	ldr	r3, [pc, #36]	@ (801722c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8017208:	0018      	movs	r0, r3
 801720a:	f7ff fd43 	bl	8016c94 <USBD_GetString>
 801720e:	e005      	b.n	801721c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017210:	683a      	ldr	r2, [r7, #0]
 8017212:	4905      	ldr	r1, [pc, #20]	@ (8017228 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8017214:	4b05      	ldr	r3, [pc, #20]	@ (801722c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8017216:	0018      	movs	r0, r3
 8017218:	f7ff fd3c 	bl	8016c94 <USBD_GetString>
  }
  return USBD_StrDesc;
 801721c:	4b02      	ldr	r3, [pc, #8]	@ (8017228 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801721e:	0018      	movs	r0, r3
 8017220:	46bd      	mov	sp, r7
 8017222:	b002      	add	sp, #8
 8017224:	bd80      	pop	{r7, pc}
 8017226:	46c0      	nop			@ (mov r8, r8)
 8017228:	200038bc 	.word	0x200038bc
 801722c:	0801bf78 	.word	0x0801bf78

08017230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b084      	sub	sp, #16
 8017234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017236:	4b10      	ldr	r3, [pc, #64]	@ (8017278 <Get_SerialNum+0x48>)
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801723c:	4b0f      	ldr	r3, [pc, #60]	@ (801727c <Get_SerialNum+0x4c>)
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017242:	4b0f      	ldr	r3, [pc, #60]	@ (8017280 <Get_SerialNum+0x50>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017248:	68fa      	ldr	r2, [r7, #12]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	18d3      	adds	r3, r2, r3
 801724e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d00b      	beq.n	801726e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017256:	490b      	ldr	r1, [pc, #44]	@ (8017284 <Get_SerialNum+0x54>)
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	2208      	movs	r2, #8
 801725c:	0018      	movs	r0, r3
 801725e:	f000 f815 	bl	801728c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017262:	4909      	ldr	r1, [pc, #36]	@ (8017288 <Get_SerialNum+0x58>)
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	2204      	movs	r2, #4
 8017268:	0018      	movs	r0, r3
 801726a:	f000 f80f 	bl	801728c <IntToUnicode>
  }
}
 801726e:	46c0      	nop			@ (mov r8, r8)
 8017270:	46bd      	mov	sp, r7
 8017272:	b004      	add	sp, #16
 8017274:	bd80      	pop	{r7, pc}
 8017276:	46c0      	nop			@ (mov r8, r8)
 8017278:	1ff80050 	.word	0x1ff80050
 801727c:	1ff80054 	.word	0x1ff80054
 8017280:	1ff80058 	.word	0x1ff80058
 8017284:	200001ce 	.word	0x200001ce
 8017288:	200001de 	.word	0x200001de

0801728c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af00      	add	r7, sp, #0
 8017292:	60f8      	str	r0, [r7, #12]
 8017294:	60b9      	str	r1, [r7, #8]
 8017296:	1dfb      	adds	r3, r7, #7
 8017298:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801729a:	2117      	movs	r1, #23
 801729c:	187b      	adds	r3, r7, r1
 801729e:	2200      	movs	r2, #0
 80172a0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80172a2:	187b      	adds	r3, r7, r1
 80172a4:	2200      	movs	r2, #0
 80172a6:	701a      	strb	r2, [r3, #0]
 80172a8:	e02f      	b.n	801730a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	0f1b      	lsrs	r3, r3, #28
 80172ae:	2b09      	cmp	r3, #9
 80172b0:	d80d      	bhi.n	80172ce <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	0f1b      	lsrs	r3, r3, #28
 80172b6:	b2da      	uxtb	r2, r3
 80172b8:	2317      	movs	r3, #23
 80172ba:	18fb      	adds	r3, r7, r3
 80172bc:	781b      	ldrb	r3, [r3, #0]
 80172be:	005b      	lsls	r3, r3, #1
 80172c0:	0019      	movs	r1, r3
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	185b      	adds	r3, r3, r1
 80172c6:	3230      	adds	r2, #48	@ 0x30
 80172c8:	b2d2      	uxtb	r2, r2
 80172ca:	701a      	strb	r2, [r3, #0]
 80172cc:	e00c      	b.n	80172e8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	0f1b      	lsrs	r3, r3, #28
 80172d2:	b2da      	uxtb	r2, r3
 80172d4:	2317      	movs	r3, #23
 80172d6:	18fb      	adds	r3, r7, r3
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	005b      	lsls	r3, r3, #1
 80172dc:	0019      	movs	r1, r3
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	185b      	adds	r3, r3, r1
 80172e2:	3237      	adds	r2, #55	@ 0x37
 80172e4:	b2d2      	uxtb	r2, r2
 80172e6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	011b      	lsls	r3, r3, #4
 80172ec:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80172ee:	2117      	movs	r1, #23
 80172f0:	187b      	adds	r3, r7, r1
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	005b      	lsls	r3, r3, #1
 80172f6:	3301      	adds	r3, #1
 80172f8:	68ba      	ldr	r2, [r7, #8]
 80172fa:	18d3      	adds	r3, r2, r3
 80172fc:	2200      	movs	r2, #0
 80172fe:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017300:	187b      	adds	r3, r7, r1
 8017302:	781a      	ldrb	r2, [r3, #0]
 8017304:	187b      	adds	r3, r7, r1
 8017306:	3201      	adds	r2, #1
 8017308:	701a      	strb	r2, [r3, #0]
 801730a:	2317      	movs	r3, #23
 801730c:	18fa      	adds	r2, r7, r3
 801730e:	1dfb      	adds	r3, r7, #7
 8017310:	7812      	ldrb	r2, [r2, #0]
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	429a      	cmp	r2, r3
 8017316:	d3c8      	bcc.n	80172aa <IntToUnicode+0x1e>
  }
}
 8017318:	46c0      	nop			@ (mov r8, r8)
 801731a:	46c0      	nop			@ (mov r8, r8)
 801731c:	46bd      	mov	sp, r7
 801731e:	b006      	add	sp, #24
 8017320:	bd80      	pop	{r7, pc}
	...

08017324 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b082      	sub	sp, #8
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	4a0a      	ldr	r2, [pc, #40]	@ (801735c <HAL_PCD_MspInit+0x38>)
 8017332:	4293      	cmp	r3, r2
 8017334:	d10e      	bne.n	8017354 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8017336:	4b0a      	ldr	r3, [pc, #40]	@ (8017360 <HAL_PCD_MspInit+0x3c>)
 8017338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801733a:	4b09      	ldr	r3, [pc, #36]	@ (8017360 <HAL_PCD_MspInit+0x3c>)
 801733c:	2180      	movs	r1, #128	@ 0x80
 801733e:	0409      	lsls	r1, r1, #16
 8017340:	430a      	orrs	r2, r1
 8017342:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8017344:	2200      	movs	r2, #0
 8017346:	2100      	movs	r1, #0
 8017348:	201f      	movs	r0, #31
 801734a:	f7f3 fc57 	bl	800abfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801734e:	201f      	movs	r0, #31
 8017350:	f7f3 fc69 	bl	800ac26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8017354:	46c0      	nop			@ (mov r8, r8)
 8017356:	46bd      	mov	sp, r7
 8017358:	b002      	add	sp, #8
 801735a:	bd80      	pop	{r7, pc}
 801735c:	40005c00 	.word	0x40005c00
 8017360:	40021000 	.word	0x40021000

08017364 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801736c:	687a      	ldr	r2, [r7, #4]
 801736e:	23bc      	movs	r3, #188	@ 0xbc
 8017370:	009b      	lsls	r3, r3, #2
 8017372:	58d2      	ldr	r2, [r2, r3]
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	21ac      	movs	r1, #172	@ 0xac
 8017378:	0089      	lsls	r1, r1, #2
 801737a:	468c      	mov	ip, r1
 801737c:	4463      	add	r3, ip
 801737e:	0019      	movs	r1, r3
 8017380:	0010      	movs	r0, r2
 8017382:	f7fe fc1d 	bl	8015bc0 <USBD_LL_SetupStage>
}
 8017386:	46c0      	nop			@ (mov r8, r8)
 8017388:	46bd      	mov	sp, r7
 801738a:	b002      	add	sp, #8
 801738c:	bd80      	pop	{r7, pc}

0801738e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801738e:	b590      	push	{r4, r7, lr}
 8017390:	b083      	sub	sp, #12
 8017392:	af00      	add	r7, sp, #0
 8017394:	6078      	str	r0, [r7, #4]
 8017396:	000a      	movs	r2, r1
 8017398:	1cfb      	adds	r3, r7, #3
 801739a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801739c:	687a      	ldr	r2, [r7, #4]
 801739e:	23bc      	movs	r3, #188	@ 0xbc
 80173a0:	009b      	lsls	r3, r3, #2
 80173a2:	58d4      	ldr	r4, [r2, r3]
 80173a4:	1cfb      	adds	r3, r7, #3
 80173a6:	781a      	ldrb	r2, [r3, #0]
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	23be      	movs	r3, #190	@ 0xbe
 80173ac:	0059      	lsls	r1, r3, #1
 80173ae:	0013      	movs	r3, r2
 80173b0:	009b      	lsls	r3, r3, #2
 80173b2:	189b      	adds	r3, r3, r2
 80173b4:	00db      	lsls	r3, r3, #3
 80173b6:	18c3      	adds	r3, r0, r3
 80173b8:	185b      	adds	r3, r3, r1
 80173ba:	681a      	ldr	r2, [r3, #0]
 80173bc:	1cfb      	adds	r3, r7, #3
 80173be:	781b      	ldrb	r3, [r3, #0]
 80173c0:	0019      	movs	r1, r3
 80173c2:	0020      	movs	r0, r4
 80173c4:	f7fe fc5a 	bl	8015c7c <USBD_LL_DataOutStage>
}
 80173c8:	46c0      	nop			@ (mov r8, r8)
 80173ca:	46bd      	mov	sp, r7
 80173cc:	b003      	add	sp, #12
 80173ce:	bd90      	pop	{r4, r7, pc}

080173d0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	000a      	movs	r2, r1
 80173da:	1cfb      	adds	r3, r7, #3
 80173dc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80173de:	687a      	ldr	r2, [r7, #4]
 80173e0:	23bc      	movs	r3, #188	@ 0xbc
 80173e2:	009b      	lsls	r3, r3, #2
 80173e4:	58d0      	ldr	r0, [r2, r3]
 80173e6:	1cfb      	adds	r3, r7, #3
 80173e8:	781a      	ldrb	r2, [r3, #0]
 80173ea:	6879      	ldr	r1, [r7, #4]
 80173ec:	0013      	movs	r3, r2
 80173ee:	009b      	lsls	r3, r3, #2
 80173f0:	189b      	adds	r3, r3, r2
 80173f2:	00db      	lsls	r3, r3, #3
 80173f4:	18cb      	adds	r3, r1, r3
 80173f6:	333c      	adds	r3, #60	@ 0x3c
 80173f8:	681a      	ldr	r2, [r3, #0]
 80173fa:	1cfb      	adds	r3, r7, #3
 80173fc:	781b      	ldrb	r3, [r3, #0]
 80173fe:	0019      	movs	r1, r3
 8017400:	f7fe fcbe 	bl	8015d80 <USBD_LL_DataInStage>
}
 8017404:	46c0      	nop			@ (mov r8, r8)
 8017406:	46bd      	mov	sp, r7
 8017408:	b002      	add	sp, #8
 801740a:	bd80      	pop	{r7, pc}

0801740c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b082      	sub	sp, #8
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017414:	687a      	ldr	r2, [r7, #4]
 8017416:	23bc      	movs	r3, #188	@ 0xbc
 8017418:	009b      	lsls	r3, r3, #2
 801741a:	58d3      	ldr	r3, [r2, r3]
 801741c:	0018      	movs	r0, r3
 801741e:	f7fe fdf5 	bl	801600c <USBD_LL_SOF>
}
 8017422:	46c0      	nop			@ (mov r8, r8)
 8017424:	46bd      	mov	sp, r7
 8017426:	b002      	add	sp, #8
 8017428:	bd80      	pop	{r7, pc}

0801742a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801742a:	b580      	push	{r7, lr}
 801742c:	b084      	sub	sp, #16
 801742e:	af00      	add	r7, sp, #0
 8017430:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017432:	230f      	movs	r3, #15
 8017434:	18fb      	adds	r3, r7, r3
 8017436:	2201      	movs	r2, #1
 8017438:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	689b      	ldr	r3, [r3, #8]
 801743e:	2b02      	cmp	r3, #2
 8017440:	d001      	beq.n	8017446 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8017442:	f7ef f93d 	bl	80066c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017446:	687a      	ldr	r2, [r7, #4]
 8017448:	23bc      	movs	r3, #188	@ 0xbc
 801744a:	009b      	lsls	r3, r3, #2
 801744c:	58d2      	ldr	r2, [r2, r3]
 801744e:	230f      	movs	r3, #15
 8017450:	18fb      	adds	r3, r7, r3
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	0019      	movs	r1, r3
 8017456:	0010      	movs	r0, r2
 8017458:	f7fe fd97 	bl	8015f8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801745c:	687a      	ldr	r2, [r7, #4]
 801745e:	23bc      	movs	r3, #188	@ 0xbc
 8017460:	009b      	lsls	r3, r3, #2
 8017462:	58d3      	ldr	r3, [r2, r3]
 8017464:	0018      	movs	r0, r3
 8017466:	f7fe fd48 	bl	8015efa <USBD_LL_Reset>
}
 801746a:	46c0      	nop			@ (mov r8, r8)
 801746c:	46bd      	mov	sp, r7
 801746e:	b004      	add	sp, #16
 8017470:	bd80      	pop	{r7, pc}
	...

08017474 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b082      	sub	sp, #8
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801747c:	687a      	ldr	r2, [r7, #4]
 801747e:	23bc      	movs	r3, #188	@ 0xbc
 8017480:	009b      	lsls	r3, r3, #2
 8017482:	58d3      	ldr	r3, [r2, r3]
 8017484:	0018      	movs	r0, r3
 8017486:	f7fe fd91 	bl	8015fac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	699b      	ldr	r3, [r3, #24]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d005      	beq.n	801749e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017492:	4b05      	ldr	r3, [pc, #20]	@ (80174a8 <HAL_PCD_SuspendCallback+0x34>)
 8017494:	691a      	ldr	r2, [r3, #16]
 8017496:	4b04      	ldr	r3, [pc, #16]	@ (80174a8 <HAL_PCD_SuspendCallback+0x34>)
 8017498:	2106      	movs	r1, #6
 801749a:	430a      	orrs	r2, r1
 801749c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801749e:	46c0      	nop			@ (mov r8, r8)
 80174a0:	46bd      	mov	sp, r7
 80174a2:	b002      	add	sp, #8
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	46c0      	nop			@ (mov r8, r8)
 80174a8:	e000ed00 	.word	0xe000ed00

080174ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b082      	sub	sp, #8
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	699b      	ldr	r3, [r3, #24]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d007      	beq.n	80174cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80174bc:	4b09      	ldr	r3, [pc, #36]	@ (80174e4 <HAL_PCD_ResumeCallback+0x38>)
 80174be:	691a      	ldr	r2, [r3, #16]
 80174c0:	4b08      	ldr	r3, [pc, #32]	@ (80174e4 <HAL_PCD_ResumeCallback+0x38>)
 80174c2:	2106      	movs	r1, #6
 80174c4:	438a      	bics	r2, r1
 80174c6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80174c8:	f000 fa44 	bl	8017954 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80174cc:	687a      	ldr	r2, [r7, #4]
 80174ce:	23bc      	movs	r3, #188	@ 0xbc
 80174d0:	009b      	lsls	r3, r3, #2
 80174d2:	58d3      	ldr	r3, [r2, r3]
 80174d4:	0018      	movs	r0, r3
 80174d6:	f7fe fd81 	bl	8015fdc <USBD_LL_Resume>
}
 80174da:	46c0      	nop			@ (mov r8, r8)
 80174dc:	46bd      	mov	sp, r7
 80174de:	b002      	add	sp, #8
 80174e0:	bd80      	pop	{r7, pc}
 80174e2:	46c0      	nop			@ (mov r8, r8)
 80174e4:	e000ed00 	.word	0xe000ed00

080174e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80174f0:	4a2d      	ldr	r2, [pc, #180]	@ (80175a8 <USBD_LL_Init+0xc0>)
 80174f2:	23bc      	movs	r3, #188	@ 0xbc
 80174f4:	009b      	lsls	r3, r3, #2
 80174f6:	6879      	ldr	r1, [r7, #4]
 80174f8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80174fa:	687a      	ldr	r2, [r7, #4]
 80174fc:	23b0      	movs	r3, #176	@ 0xb0
 80174fe:	009b      	lsls	r3, r3, #2
 8017500:	4929      	ldr	r1, [pc, #164]	@ (80175a8 <USBD_LL_Init+0xc0>)
 8017502:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8017504:	4b28      	ldr	r3, [pc, #160]	@ (80175a8 <USBD_LL_Init+0xc0>)
 8017506:	4a29      	ldr	r2, [pc, #164]	@ (80175ac <USBD_LL_Init+0xc4>)
 8017508:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801750a:	4b27      	ldr	r3, [pc, #156]	@ (80175a8 <USBD_LL_Init+0xc0>)
 801750c:	2208      	movs	r2, #8
 801750e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017510:	4b25      	ldr	r3, [pc, #148]	@ (80175a8 <USBD_LL_Init+0xc0>)
 8017512:	2202      	movs	r2, #2
 8017514:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017516:	4b24      	ldr	r3, [pc, #144]	@ (80175a8 <USBD_LL_Init+0xc0>)
 8017518:	2202      	movs	r2, #2
 801751a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801751c:	4b22      	ldr	r3, [pc, #136]	@ (80175a8 <USBD_LL_Init+0xc0>)
 801751e:	2200      	movs	r2, #0
 8017520:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017522:	4b21      	ldr	r3, [pc, #132]	@ (80175a8 <USBD_LL_Init+0xc0>)
 8017524:	2200      	movs	r2, #0
 8017526:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017528:	4b1f      	ldr	r3, [pc, #124]	@ (80175a8 <USBD_LL_Init+0xc0>)
 801752a:	2200      	movs	r2, #0
 801752c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801752e:	4b1e      	ldr	r3, [pc, #120]	@ (80175a8 <USBD_LL_Init+0xc0>)
 8017530:	0018      	movs	r0, r3
 8017532:	f7f6 fe07 	bl	800e144 <HAL_PCD_Init>
 8017536:	1e03      	subs	r3, r0, #0
 8017538:	d001      	beq.n	801753e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801753a:	f7ef f8c1 	bl	80066c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801753e:	687a      	ldr	r2, [r7, #4]
 8017540:	23b0      	movs	r3, #176	@ 0xb0
 8017542:	009b      	lsls	r3, r3, #2
 8017544:	58d0      	ldr	r0, [r2, r3]
 8017546:	2318      	movs	r3, #24
 8017548:	2200      	movs	r2, #0
 801754a:	2100      	movs	r1, #0
 801754c:	f7f8 fbc8 	bl	800fce0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017550:	687a      	ldr	r2, [r7, #4]
 8017552:	23b0      	movs	r3, #176	@ 0xb0
 8017554:	009b      	lsls	r3, r3, #2
 8017556:	58d0      	ldr	r0, [r2, r3]
 8017558:	2358      	movs	r3, #88	@ 0x58
 801755a:	2200      	movs	r2, #0
 801755c:	2180      	movs	r1, #128	@ 0x80
 801755e:	f7f8 fbbf 	bl	800fce0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8017562:	687a      	ldr	r2, [r7, #4]
 8017564:	23b0      	movs	r3, #176	@ 0xb0
 8017566:	009b      	lsls	r3, r3, #2
 8017568:	58d0      	ldr	r0, [r2, r3]
 801756a:	23c0      	movs	r3, #192	@ 0xc0
 801756c:	2200      	movs	r2, #0
 801756e:	2181      	movs	r1, #129	@ 0x81
 8017570:	f7f8 fbb6 	bl	800fce0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8017574:	687a      	ldr	r2, [r7, #4]
 8017576:	23b0      	movs	r3, #176	@ 0xb0
 8017578:	009b      	lsls	r3, r3, #2
 801757a:	58d0      	ldr	r0, [r2, r3]
 801757c:	2388      	movs	r3, #136	@ 0x88
 801757e:	005b      	lsls	r3, r3, #1
 8017580:	2200      	movs	r2, #0
 8017582:	2101      	movs	r1, #1
 8017584:	f7f8 fbac 	bl	800fce0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8017588:	687a      	ldr	r2, [r7, #4]
 801758a:	23b0      	movs	r3, #176	@ 0xb0
 801758c:	009b      	lsls	r3, r3, #2
 801758e:	58d0      	ldr	r0, [r2, r3]
 8017590:	2380      	movs	r3, #128	@ 0x80
 8017592:	005b      	lsls	r3, r3, #1
 8017594:	2200      	movs	r2, #0
 8017596:	2182      	movs	r1, #130	@ 0x82
 8017598:	f7f8 fba2 	bl	800fce0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801759c:	2300      	movs	r3, #0
}
 801759e:	0018      	movs	r0, r3
 80175a0:	46bd      	mov	sp, r7
 80175a2:	b002      	add	sp, #8
 80175a4:	bd80      	pop	{r7, pc}
 80175a6:	46c0      	nop			@ (mov r8, r8)
 80175a8:	20003abc 	.word	0x20003abc
 80175ac:	40005c00 	.word	0x40005c00

080175b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80175b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175b2:	b085      	sub	sp, #20
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175b8:	210f      	movs	r1, #15
 80175ba:	187b      	adds	r3, r7, r1
 80175bc:	2200      	movs	r2, #0
 80175be:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175c0:	260e      	movs	r6, #14
 80175c2:	19bb      	adds	r3, r7, r6
 80175c4:	2200      	movs	r2, #0
 80175c6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80175c8:	687a      	ldr	r2, [r7, #4]
 80175ca:	23b0      	movs	r3, #176	@ 0xb0
 80175cc:	009b      	lsls	r3, r3, #2
 80175ce:	58d3      	ldr	r3, [r2, r3]
 80175d0:	000d      	movs	r5, r1
 80175d2:	187c      	adds	r4, r7, r1
 80175d4:	0018      	movs	r0, r3
 80175d6:	f7f6 feb5 	bl	800e344 <HAL_PCD_Start>
 80175da:	0003      	movs	r3, r0
 80175dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175de:	19bc      	adds	r4, r7, r6
 80175e0:	197b      	adds	r3, r7, r5
 80175e2:	781b      	ldrb	r3, [r3, #0]
 80175e4:	0018      	movs	r0, r3
 80175e6:	f000 f9bc 	bl	8017962 <USBD_Get_USB_Status>
 80175ea:	0003      	movs	r3, r0
 80175ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80175ee:	19bb      	adds	r3, r7, r6
 80175f0:	781b      	ldrb	r3, [r3, #0]
}
 80175f2:	0018      	movs	r0, r3
 80175f4:	46bd      	mov	sp, r7
 80175f6:	b005      	add	sp, #20
 80175f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80175fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175fc:	b085      	sub	sp, #20
 80175fe:	af00      	add	r7, sp, #0
 8017600:	6078      	str	r0, [r7, #4]
 8017602:	000c      	movs	r4, r1
 8017604:	0010      	movs	r0, r2
 8017606:	0019      	movs	r1, r3
 8017608:	1cfb      	adds	r3, r7, #3
 801760a:	1c22      	adds	r2, r4, #0
 801760c:	701a      	strb	r2, [r3, #0]
 801760e:	1cbb      	adds	r3, r7, #2
 8017610:	1c02      	adds	r2, r0, #0
 8017612:	701a      	strb	r2, [r3, #0]
 8017614:	003b      	movs	r3, r7
 8017616:	1c0a      	adds	r2, r1, #0
 8017618:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801761a:	260f      	movs	r6, #15
 801761c:	19bb      	adds	r3, r7, r6
 801761e:	2200      	movs	r2, #0
 8017620:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017622:	250e      	movs	r5, #14
 8017624:	197b      	adds	r3, r7, r5
 8017626:	2200      	movs	r2, #0
 8017628:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801762a:	687a      	ldr	r2, [r7, #4]
 801762c:	23b0      	movs	r3, #176	@ 0xb0
 801762e:	009b      	lsls	r3, r3, #2
 8017630:	58d0      	ldr	r0, [r2, r3]
 8017632:	19bc      	adds	r4, r7, r6
 8017634:	1cbb      	adds	r3, r7, #2
 8017636:	781d      	ldrb	r5, [r3, #0]
 8017638:	003b      	movs	r3, r7
 801763a:	881a      	ldrh	r2, [r3, #0]
 801763c:	1cfb      	adds	r3, r7, #3
 801763e:	7819      	ldrb	r1, [r3, #0]
 8017640:	002b      	movs	r3, r5
 8017642:	f7f7 f814 	bl	800e66e <HAL_PCD_EP_Open>
 8017646:	0003      	movs	r3, r0
 8017648:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801764a:	250e      	movs	r5, #14
 801764c:	197c      	adds	r4, r7, r5
 801764e:	19bb      	adds	r3, r7, r6
 8017650:	781b      	ldrb	r3, [r3, #0]
 8017652:	0018      	movs	r0, r3
 8017654:	f000 f985 	bl	8017962 <USBD_Get_USB_Status>
 8017658:	0003      	movs	r3, r0
 801765a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801765c:	197b      	adds	r3, r7, r5
 801765e:	781b      	ldrb	r3, [r3, #0]
}
 8017660:	0018      	movs	r0, r3
 8017662:	46bd      	mov	sp, r7
 8017664:	b005      	add	sp, #20
 8017666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017668 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801766a:	b085      	sub	sp, #20
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
 8017670:	000a      	movs	r2, r1
 8017672:	1cfb      	adds	r3, r7, #3
 8017674:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017676:	210f      	movs	r1, #15
 8017678:	187b      	adds	r3, r7, r1
 801767a:	2200      	movs	r2, #0
 801767c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801767e:	260e      	movs	r6, #14
 8017680:	19bb      	adds	r3, r7, r6
 8017682:	2200      	movs	r2, #0
 8017684:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017686:	687a      	ldr	r2, [r7, #4]
 8017688:	23b0      	movs	r3, #176	@ 0xb0
 801768a:	009b      	lsls	r3, r3, #2
 801768c:	58d2      	ldr	r2, [r2, r3]
 801768e:	000d      	movs	r5, r1
 8017690:	187c      	adds	r4, r7, r1
 8017692:	1cfb      	adds	r3, r7, #3
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	0019      	movs	r1, r3
 8017698:	0010      	movs	r0, r2
 801769a:	f7f7 f857 	bl	800e74c <HAL_PCD_EP_Close>
 801769e:	0003      	movs	r3, r0
 80176a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176a2:	19bc      	adds	r4, r7, r6
 80176a4:	197b      	adds	r3, r7, r5
 80176a6:	781b      	ldrb	r3, [r3, #0]
 80176a8:	0018      	movs	r0, r3
 80176aa:	f000 f95a 	bl	8017962 <USBD_Get_USB_Status>
 80176ae:	0003      	movs	r3, r0
 80176b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80176b2:	19bb      	adds	r3, r7, r6
 80176b4:	781b      	ldrb	r3, [r3, #0]
}
 80176b6:	0018      	movs	r0, r3
 80176b8:	46bd      	mov	sp, r7
 80176ba:	b005      	add	sp, #20
 80176bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176be <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80176be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176c0:	b085      	sub	sp, #20
 80176c2:	af00      	add	r7, sp, #0
 80176c4:	6078      	str	r0, [r7, #4]
 80176c6:	000a      	movs	r2, r1
 80176c8:	1cfb      	adds	r3, r7, #3
 80176ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176cc:	210f      	movs	r1, #15
 80176ce:	187b      	adds	r3, r7, r1
 80176d0:	2200      	movs	r2, #0
 80176d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176d4:	260e      	movs	r6, #14
 80176d6:	19bb      	adds	r3, r7, r6
 80176d8:	2200      	movs	r2, #0
 80176da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80176dc:	687a      	ldr	r2, [r7, #4]
 80176de:	23b0      	movs	r3, #176	@ 0xb0
 80176e0:	009b      	lsls	r3, r3, #2
 80176e2:	58d2      	ldr	r2, [r2, r3]
 80176e4:	000d      	movs	r5, r1
 80176e6:	187c      	adds	r4, r7, r1
 80176e8:	1cfb      	adds	r3, r7, #3
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	0019      	movs	r1, r3
 80176ee:	0010      	movs	r0, r2
 80176f0:	f7f7 f909 	bl	800e906 <HAL_PCD_EP_SetStall>
 80176f4:	0003      	movs	r3, r0
 80176f6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176f8:	19bc      	adds	r4, r7, r6
 80176fa:	197b      	adds	r3, r7, r5
 80176fc:	781b      	ldrb	r3, [r3, #0]
 80176fe:	0018      	movs	r0, r3
 8017700:	f000 f92f 	bl	8017962 <USBD_Get_USB_Status>
 8017704:	0003      	movs	r3, r0
 8017706:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017708:	19bb      	adds	r3, r7, r6
 801770a:	781b      	ldrb	r3, [r3, #0]
}
 801770c:	0018      	movs	r0, r3
 801770e:	46bd      	mov	sp, r7
 8017710:	b005      	add	sp, #20
 8017712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017714 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017716:	b085      	sub	sp, #20
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
 801771c:	000a      	movs	r2, r1
 801771e:	1cfb      	adds	r3, r7, #3
 8017720:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017722:	210f      	movs	r1, #15
 8017724:	187b      	adds	r3, r7, r1
 8017726:	2200      	movs	r2, #0
 8017728:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801772a:	260e      	movs	r6, #14
 801772c:	19bb      	adds	r3, r7, r6
 801772e:	2200      	movs	r2, #0
 8017730:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017732:	687a      	ldr	r2, [r7, #4]
 8017734:	23b0      	movs	r3, #176	@ 0xb0
 8017736:	009b      	lsls	r3, r3, #2
 8017738:	58d2      	ldr	r2, [r2, r3]
 801773a:	000d      	movs	r5, r1
 801773c:	187c      	adds	r4, r7, r1
 801773e:	1cfb      	adds	r3, r7, #3
 8017740:	781b      	ldrb	r3, [r3, #0]
 8017742:	0019      	movs	r1, r3
 8017744:	0010      	movs	r0, r2
 8017746:	f7f7 f93a 	bl	800e9be <HAL_PCD_EP_ClrStall>
 801774a:	0003      	movs	r3, r0
 801774c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801774e:	19bc      	adds	r4, r7, r6
 8017750:	197b      	adds	r3, r7, r5
 8017752:	781b      	ldrb	r3, [r3, #0]
 8017754:	0018      	movs	r0, r3
 8017756:	f000 f904 	bl	8017962 <USBD_Get_USB_Status>
 801775a:	0003      	movs	r3, r0
 801775c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801775e:	19bb      	adds	r3, r7, r6
 8017760:	781b      	ldrb	r3, [r3, #0]
}
 8017762:	0018      	movs	r0, r3
 8017764:	46bd      	mov	sp, r7
 8017766:	b005      	add	sp, #20
 8017768:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801776a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801776a:	b580      	push	{r7, lr}
 801776c:	b084      	sub	sp, #16
 801776e:	af00      	add	r7, sp, #0
 8017770:	6078      	str	r0, [r7, #4]
 8017772:	000a      	movs	r2, r1
 8017774:	1cfb      	adds	r3, r7, #3
 8017776:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017778:	687a      	ldr	r2, [r7, #4]
 801777a:	23b0      	movs	r3, #176	@ 0xb0
 801777c:	009b      	lsls	r3, r3, #2
 801777e:	58d3      	ldr	r3, [r2, r3]
 8017780:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017782:	1cfb      	adds	r3, r7, #3
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	b25b      	sxtb	r3, r3
 8017788:	2b00      	cmp	r3, #0
 801778a:	da0d      	bge.n	80177a8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801778c:	1cfb      	adds	r3, r7, #3
 801778e:	781b      	ldrb	r3, [r3, #0]
 8017790:	227f      	movs	r2, #127	@ 0x7f
 8017792:	4013      	ands	r3, r2
 8017794:	68f9      	ldr	r1, [r7, #12]
 8017796:	1c5a      	adds	r2, r3, #1
 8017798:	0013      	movs	r3, r2
 801779a:	009b      	lsls	r3, r3, #2
 801779c:	189b      	adds	r3, r3, r2
 801779e:	00db      	lsls	r3, r3, #3
 80177a0:	18cb      	adds	r3, r1, r3
 80177a2:	3302      	adds	r3, #2
 80177a4:	781b      	ldrb	r3, [r3, #0]
 80177a6:	e00d      	b.n	80177c4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80177a8:	1cfb      	adds	r3, r7, #3
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	227f      	movs	r2, #127	@ 0x7f
 80177ae:	401a      	ands	r2, r3
 80177b0:	68f8      	ldr	r0, [r7, #12]
 80177b2:	23b5      	movs	r3, #181	@ 0xb5
 80177b4:	0059      	lsls	r1, r3, #1
 80177b6:	0013      	movs	r3, r2
 80177b8:	009b      	lsls	r3, r3, #2
 80177ba:	189b      	adds	r3, r3, r2
 80177bc:	00db      	lsls	r3, r3, #3
 80177be:	18c3      	adds	r3, r0, r3
 80177c0:	185b      	adds	r3, r3, r1
 80177c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80177c4:	0018      	movs	r0, r3
 80177c6:	46bd      	mov	sp, r7
 80177c8:	b004      	add	sp, #16
 80177ca:	bd80      	pop	{r7, pc}

080177cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80177cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177ce:	b085      	sub	sp, #20
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	000a      	movs	r2, r1
 80177d6:	1cfb      	adds	r3, r7, #3
 80177d8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177da:	210f      	movs	r1, #15
 80177dc:	187b      	adds	r3, r7, r1
 80177de:	2200      	movs	r2, #0
 80177e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177e2:	260e      	movs	r6, #14
 80177e4:	19bb      	adds	r3, r7, r6
 80177e6:	2200      	movs	r2, #0
 80177e8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80177ea:	687a      	ldr	r2, [r7, #4]
 80177ec:	23b0      	movs	r3, #176	@ 0xb0
 80177ee:	009b      	lsls	r3, r3, #2
 80177f0:	58d2      	ldr	r2, [r2, r3]
 80177f2:	000d      	movs	r5, r1
 80177f4:	187c      	adds	r4, r7, r1
 80177f6:	1cfb      	adds	r3, r7, #3
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	0019      	movs	r1, r3
 80177fc:	0010      	movs	r0, r2
 80177fe:	f7f6 ff0b 	bl	800e618 <HAL_PCD_SetAddress>
 8017802:	0003      	movs	r3, r0
 8017804:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017806:	19bc      	adds	r4, r7, r6
 8017808:	197b      	adds	r3, r7, r5
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	0018      	movs	r0, r3
 801780e:	f000 f8a8 	bl	8017962 <USBD_Get_USB_Status>
 8017812:	0003      	movs	r3, r0
 8017814:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017816:	19bb      	adds	r3, r7, r6
 8017818:	781b      	ldrb	r3, [r3, #0]
}
 801781a:	0018      	movs	r0, r3
 801781c:	46bd      	mov	sp, r7
 801781e:	b005      	add	sp, #20
 8017820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017822 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017824:	b087      	sub	sp, #28
 8017826:	af00      	add	r7, sp, #0
 8017828:	60f8      	str	r0, [r7, #12]
 801782a:	0008      	movs	r0, r1
 801782c:	607a      	str	r2, [r7, #4]
 801782e:	0019      	movs	r1, r3
 8017830:	230b      	movs	r3, #11
 8017832:	18fb      	adds	r3, r7, r3
 8017834:	1c02      	adds	r2, r0, #0
 8017836:	701a      	strb	r2, [r3, #0]
 8017838:	2408      	movs	r4, #8
 801783a:	193b      	adds	r3, r7, r4
 801783c:	1c0a      	adds	r2, r1, #0
 801783e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017840:	2117      	movs	r1, #23
 8017842:	187b      	adds	r3, r7, r1
 8017844:	2200      	movs	r2, #0
 8017846:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017848:	2516      	movs	r5, #22
 801784a:	197b      	adds	r3, r7, r5
 801784c:	2200      	movs	r2, #0
 801784e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017850:	68fa      	ldr	r2, [r7, #12]
 8017852:	23b0      	movs	r3, #176	@ 0xb0
 8017854:	009b      	lsls	r3, r3, #2
 8017856:	58d0      	ldr	r0, [r2, r3]
 8017858:	193b      	adds	r3, r7, r4
 801785a:	881d      	ldrh	r5, [r3, #0]
 801785c:	000e      	movs	r6, r1
 801785e:	187c      	adds	r4, r7, r1
 8017860:	687a      	ldr	r2, [r7, #4]
 8017862:	230b      	movs	r3, #11
 8017864:	18fb      	adds	r3, r7, r3
 8017866:	7819      	ldrb	r1, [r3, #0]
 8017868:	002b      	movs	r3, r5
 801786a:	f7f7 f810 	bl	800e88e <HAL_PCD_EP_Transmit>
 801786e:	0003      	movs	r3, r0
 8017870:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017872:	2516      	movs	r5, #22
 8017874:	197c      	adds	r4, r7, r5
 8017876:	19bb      	adds	r3, r7, r6
 8017878:	781b      	ldrb	r3, [r3, #0]
 801787a:	0018      	movs	r0, r3
 801787c:	f000 f871 	bl	8017962 <USBD_Get_USB_Status>
 8017880:	0003      	movs	r3, r0
 8017882:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017884:	197b      	adds	r3, r7, r5
 8017886:	781b      	ldrb	r3, [r3, #0]
}
 8017888:	0018      	movs	r0, r3
 801788a:	46bd      	mov	sp, r7
 801788c:	b007      	add	sp, #28
 801788e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017890 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017892:	b087      	sub	sp, #28
 8017894:	af00      	add	r7, sp, #0
 8017896:	60f8      	str	r0, [r7, #12]
 8017898:	0008      	movs	r0, r1
 801789a:	607a      	str	r2, [r7, #4]
 801789c:	0019      	movs	r1, r3
 801789e:	230b      	movs	r3, #11
 80178a0:	18fb      	adds	r3, r7, r3
 80178a2:	1c02      	adds	r2, r0, #0
 80178a4:	701a      	strb	r2, [r3, #0]
 80178a6:	2408      	movs	r4, #8
 80178a8:	193b      	adds	r3, r7, r4
 80178aa:	1c0a      	adds	r2, r1, #0
 80178ac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178ae:	2117      	movs	r1, #23
 80178b0:	187b      	adds	r3, r7, r1
 80178b2:	2200      	movs	r2, #0
 80178b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178b6:	2516      	movs	r5, #22
 80178b8:	197b      	adds	r3, r7, r5
 80178ba:	2200      	movs	r2, #0
 80178bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80178be:	68fa      	ldr	r2, [r7, #12]
 80178c0:	23b0      	movs	r3, #176	@ 0xb0
 80178c2:	009b      	lsls	r3, r3, #2
 80178c4:	58d0      	ldr	r0, [r2, r3]
 80178c6:	193b      	adds	r3, r7, r4
 80178c8:	881d      	ldrh	r5, [r3, #0]
 80178ca:	000e      	movs	r6, r1
 80178cc:	187c      	adds	r4, r7, r1
 80178ce:	687a      	ldr	r2, [r7, #4]
 80178d0:	230b      	movs	r3, #11
 80178d2:	18fb      	adds	r3, r7, r3
 80178d4:	7819      	ldrb	r1, [r3, #0]
 80178d6:	002b      	movs	r3, r5
 80178d8:	f7f6 ff89 	bl	800e7ee <HAL_PCD_EP_Receive>
 80178dc:	0003      	movs	r3, r0
 80178de:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178e0:	2516      	movs	r5, #22
 80178e2:	197c      	adds	r4, r7, r5
 80178e4:	19bb      	adds	r3, r7, r6
 80178e6:	781b      	ldrb	r3, [r3, #0]
 80178e8:	0018      	movs	r0, r3
 80178ea:	f000 f83a 	bl	8017962 <USBD_Get_USB_Status>
 80178ee:	0003      	movs	r3, r0
 80178f0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80178f2:	197b      	adds	r3, r7, r5
 80178f4:	781b      	ldrb	r3, [r3, #0]
}
 80178f6:	0018      	movs	r0, r3
 80178f8:	46bd      	mov	sp, r7
 80178fa:	b007      	add	sp, #28
 80178fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080178fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80178fe:	b580      	push	{r7, lr}
 8017900:	b082      	sub	sp, #8
 8017902:	af00      	add	r7, sp, #0
 8017904:	6078      	str	r0, [r7, #4]
 8017906:	000a      	movs	r2, r1
 8017908:	1cfb      	adds	r3, r7, #3
 801790a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801790c:	687a      	ldr	r2, [r7, #4]
 801790e:	23b0      	movs	r3, #176	@ 0xb0
 8017910:	009b      	lsls	r3, r3, #2
 8017912:	58d2      	ldr	r2, [r2, r3]
 8017914:	1cfb      	adds	r3, r7, #3
 8017916:	781b      	ldrb	r3, [r3, #0]
 8017918:	0019      	movs	r1, r3
 801791a:	0010      	movs	r0, r2
 801791c:	f7f6 ff9e 	bl	800e85c <HAL_PCD_EP_GetRxCount>
 8017920:	0003      	movs	r3, r0
}
 8017922:	0018      	movs	r0, r3
 8017924:	46bd      	mov	sp, r7
 8017926:	b002      	add	sp, #8
 8017928:	bd80      	pop	{r7, pc}
	...

0801792c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b082      	sub	sp, #8
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017934:	4b02      	ldr	r3, [pc, #8]	@ (8017940 <USBD_static_malloc+0x14>)
}
 8017936:	0018      	movs	r0, r3
 8017938:	46bd      	mov	sp, r7
 801793a:	b002      	add	sp, #8
 801793c:	bd80      	pop	{r7, pc}
 801793e:	46c0      	nop			@ (mov r8, r8)
 8017940:	20003db0 	.word	0x20003db0

08017944 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017944:	b580      	push	{r7, lr}
 8017946:	b082      	sub	sp, #8
 8017948:	af00      	add	r7, sp, #0
 801794a:	6078      	str	r0, [r7, #4]

}
 801794c:	46c0      	nop			@ (mov r8, r8)
 801794e:	46bd      	mov	sp, r7
 8017950:	b002      	add	sp, #8
 8017952:	bd80      	pop	{r7, pc}

08017954 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017958:	f7ee fe2c 	bl	80065b4 <SystemClock_Config>
}
 801795c:	46c0      	nop			@ (mov r8, r8)
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}

08017962 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017962:	b580      	push	{r7, lr}
 8017964:	b084      	sub	sp, #16
 8017966:	af00      	add	r7, sp, #0
 8017968:	0002      	movs	r2, r0
 801796a:	1dfb      	adds	r3, r7, #7
 801796c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801796e:	230f      	movs	r3, #15
 8017970:	18fb      	adds	r3, r7, r3
 8017972:	2200      	movs	r2, #0
 8017974:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8017976:	1dfb      	adds	r3, r7, #7
 8017978:	781b      	ldrb	r3, [r3, #0]
 801797a:	2b03      	cmp	r3, #3
 801797c:	d017      	beq.n	80179ae <USBD_Get_USB_Status+0x4c>
 801797e:	dc1b      	bgt.n	80179b8 <USBD_Get_USB_Status+0x56>
 8017980:	2b02      	cmp	r3, #2
 8017982:	d00f      	beq.n	80179a4 <USBD_Get_USB_Status+0x42>
 8017984:	dc18      	bgt.n	80179b8 <USBD_Get_USB_Status+0x56>
 8017986:	2b00      	cmp	r3, #0
 8017988:	d002      	beq.n	8017990 <USBD_Get_USB_Status+0x2e>
 801798a:	2b01      	cmp	r3, #1
 801798c:	d005      	beq.n	801799a <USBD_Get_USB_Status+0x38>
 801798e:	e013      	b.n	80179b8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017990:	230f      	movs	r3, #15
 8017992:	18fb      	adds	r3, r7, r3
 8017994:	2200      	movs	r2, #0
 8017996:	701a      	strb	r2, [r3, #0]
    break;
 8017998:	e013      	b.n	80179c2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801799a:	230f      	movs	r3, #15
 801799c:	18fb      	adds	r3, r7, r3
 801799e:	2202      	movs	r2, #2
 80179a0:	701a      	strb	r2, [r3, #0]
    break;
 80179a2:	e00e      	b.n	80179c2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80179a4:	230f      	movs	r3, #15
 80179a6:	18fb      	adds	r3, r7, r3
 80179a8:	2201      	movs	r2, #1
 80179aa:	701a      	strb	r2, [r3, #0]
    break;
 80179ac:	e009      	b.n	80179c2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80179ae:	230f      	movs	r3, #15
 80179b0:	18fb      	adds	r3, r7, r3
 80179b2:	2202      	movs	r2, #2
 80179b4:	701a      	strb	r2, [r3, #0]
    break;
 80179b6:	e004      	b.n	80179c2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80179b8:	230f      	movs	r3, #15
 80179ba:	18fb      	adds	r3, r7, r3
 80179bc:	2202      	movs	r2, #2
 80179be:	701a      	strb	r2, [r3, #0]
    break;
 80179c0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80179c2:	230f      	movs	r3, #15
 80179c4:	18fb      	adds	r3, r7, r3
 80179c6:	781b      	ldrb	r3, [r3, #0]
}
 80179c8:	0018      	movs	r0, r3
 80179ca:	46bd      	mov	sp, r7
 80179cc:	b004      	add	sp, #16
 80179ce:	bd80      	pop	{r7, pc}

080179d0 <__cvt>:
 80179d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179d2:	001f      	movs	r7, r3
 80179d4:	2300      	movs	r3, #0
 80179d6:	0016      	movs	r6, r2
 80179d8:	b08b      	sub	sp, #44	@ 0x2c
 80179da:	429f      	cmp	r7, r3
 80179dc:	da04      	bge.n	80179e8 <__cvt+0x18>
 80179de:	2180      	movs	r1, #128	@ 0x80
 80179e0:	0609      	lsls	r1, r1, #24
 80179e2:	187b      	adds	r3, r7, r1
 80179e4:	001f      	movs	r7, r3
 80179e6:	232d      	movs	r3, #45	@ 0x2d
 80179e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80179ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80179ec:	7013      	strb	r3, [r2, #0]
 80179ee:	2320      	movs	r3, #32
 80179f0:	2203      	movs	r2, #3
 80179f2:	439d      	bics	r5, r3
 80179f4:	2d46      	cmp	r5, #70	@ 0x46
 80179f6:	d007      	beq.n	8017a08 <__cvt+0x38>
 80179f8:	002b      	movs	r3, r5
 80179fa:	3b45      	subs	r3, #69	@ 0x45
 80179fc:	4259      	negs	r1, r3
 80179fe:	414b      	adcs	r3, r1
 8017a00:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017a02:	3a01      	subs	r2, #1
 8017a04:	18cb      	adds	r3, r1, r3
 8017a06:	9310      	str	r3, [sp, #64]	@ 0x40
 8017a08:	ab09      	add	r3, sp, #36	@ 0x24
 8017a0a:	9304      	str	r3, [sp, #16]
 8017a0c:	ab08      	add	r3, sp, #32
 8017a0e:	9303      	str	r3, [sp, #12]
 8017a10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017a12:	9200      	str	r2, [sp, #0]
 8017a14:	9302      	str	r3, [sp, #8]
 8017a16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017a18:	0032      	movs	r2, r6
 8017a1a:	9301      	str	r3, [sp, #4]
 8017a1c:	003b      	movs	r3, r7
 8017a1e:	f000 ff13 	bl	8018848 <_dtoa_r>
 8017a22:	0004      	movs	r4, r0
 8017a24:	2d47      	cmp	r5, #71	@ 0x47
 8017a26:	d11b      	bne.n	8017a60 <__cvt+0x90>
 8017a28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017a2a:	07db      	lsls	r3, r3, #31
 8017a2c:	d511      	bpl.n	8017a52 <__cvt+0x82>
 8017a2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017a30:	18c3      	adds	r3, r0, r3
 8017a32:	9307      	str	r3, [sp, #28]
 8017a34:	2200      	movs	r2, #0
 8017a36:	2300      	movs	r3, #0
 8017a38:	0030      	movs	r0, r6
 8017a3a:	0039      	movs	r1, r7
 8017a3c:	f7e8 fd06 	bl	800044c <__aeabi_dcmpeq>
 8017a40:	2800      	cmp	r0, #0
 8017a42:	d001      	beq.n	8017a48 <__cvt+0x78>
 8017a44:	9b07      	ldr	r3, [sp, #28]
 8017a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a48:	2230      	movs	r2, #48	@ 0x30
 8017a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a4c:	9907      	ldr	r1, [sp, #28]
 8017a4e:	428b      	cmp	r3, r1
 8017a50:	d320      	bcc.n	8017a94 <__cvt+0xc4>
 8017a52:	0020      	movs	r0, r4
 8017a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a56:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017a58:	1b1b      	subs	r3, r3, r4
 8017a5a:	6013      	str	r3, [r2, #0]
 8017a5c:	b00b      	add	sp, #44	@ 0x2c
 8017a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017a62:	18c3      	adds	r3, r0, r3
 8017a64:	9307      	str	r3, [sp, #28]
 8017a66:	2d46      	cmp	r5, #70	@ 0x46
 8017a68:	d1e4      	bne.n	8017a34 <__cvt+0x64>
 8017a6a:	7803      	ldrb	r3, [r0, #0]
 8017a6c:	2b30      	cmp	r3, #48	@ 0x30
 8017a6e:	d10c      	bne.n	8017a8a <__cvt+0xba>
 8017a70:	2200      	movs	r2, #0
 8017a72:	2300      	movs	r3, #0
 8017a74:	0030      	movs	r0, r6
 8017a76:	0039      	movs	r1, r7
 8017a78:	f7e8 fce8 	bl	800044c <__aeabi_dcmpeq>
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	d104      	bne.n	8017a8a <__cvt+0xba>
 8017a80:	2301      	movs	r3, #1
 8017a82:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017a84:	1a9b      	subs	r3, r3, r2
 8017a86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017a88:	6013      	str	r3, [r2, #0]
 8017a8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017a8c:	9a07      	ldr	r2, [sp, #28]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	18d3      	adds	r3, r2, r3
 8017a92:	e7ce      	b.n	8017a32 <__cvt+0x62>
 8017a94:	1c59      	adds	r1, r3, #1
 8017a96:	9109      	str	r1, [sp, #36]	@ 0x24
 8017a98:	701a      	strb	r2, [r3, #0]
 8017a9a:	e7d6      	b.n	8017a4a <__cvt+0x7a>

08017a9c <__exponent>:
 8017a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a9e:	232b      	movs	r3, #43	@ 0x2b
 8017aa0:	0005      	movs	r5, r0
 8017aa2:	000c      	movs	r4, r1
 8017aa4:	b085      	sub	sp, #20
 8017aa6:	7002      	strb	r2, [r0, #0]
 8017aa8:	2900      	cmp	r1, #0
 8017aaa:	da01      	bge.n	8017ab0 <__exponent+0x14>
 8017aac:	424c      	negs	r4, r1
 8017aae:	3302      	adds	r3, #2
 8017ab0:	706b      	strb	r3, [r5, #1]
 8017ab2:	2c09      	cmp	r4, #9
 8017ab4:	dd2c      	ble.n	8017b10 <__exponent+0x74>
 8017ab6:	ab02      	add	r3, sp, #8
 8017ab8:	1dde      	adds	r6, r3, #7
 8017aba:	0020      	movs	r0, r4
 8017abc:	210a      	movs	r1, #10
 8017abe:	f7e8 fcaf 	bl	8000420 <__aeabi_idivmod>
 8017ac2:	0037      	movs	r7, r6
 8017ac4:	3130      	adds	r1, #48	@ 0x30
 8017ac6:	3e01      	subs	r6, #1
 8017ac8:	0020      	movs	r0, r4
 8017aca:	7031      	strb	r1, [r6, #0]
 8017acc:	210a      	movs	r1, #10
 8017ace:	9401      	str	r4, [sp, #4]
 8017ad0:	f7e8 fbc0 	bl	8000254 <__divsi3>
 8017ad4:	9b01      	ldr	r3, [sp, #4]
 8017ad6:	0004      	movs	r4, r0
 8017ad8:	2b63      	cmp	r3, #99	@ 0x63
 8017ada:	dcee      	bgt.n	8017aba <__exponent+0x1e>
 8017adc:	1eba      	subs	r2, r7, #2
 8017ade:	1ca8      	adds	r0, r5, #2
 8017ae0:	0001      	movs	r1, r0
 8017ae2:	0013      	movs	r3, r2
 8017ae4:	3430      	adds	r4, #48	@ 0x30
 8017ae6:	7014      	strb	r4, [r2, #0]
 8017ae8:	ac02      	add	r4, sp, #8
 8017aea:	3407      	adds	r4, #7
 8017aec:	429c      	cmp	r4, r3
 8017aee:	d80a      	bhi.n	8017b06 <__exponent+0x6a>
 8017af0:	2300      	movs	r3, #0
 8017af2:	42a2      	cmp	r2, r4
 8017af4:	d803      	bhi.n	8017afe <__exponent+0x62>
 8017af6:	3309      	adds	r3, #9
 8017af8:	aa02      	add	r2, sp, #8
 8017afa:	189b      	adds	r3, r3, r2
 8017afc:	1bdb      	subs	r3, r3, r7
 8017afe:	18c0      	adds	r0, r0, r3
 8017b00:	1b40      	subs	r0, r0, r5
 8017b02:	b005      	add	sp, #20
 8017b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b06:	781c      	ldrb	r4, [r3, #0]
 8017b08:	3301      	adds	r3, #1
 8017b0a:	700c      	strb	r4, [r1, #0]
 8017b0c:	3101      	adds	r1, #1
 8017b0e:	e7eb      	b.n	8017ae8 <__exponent+0x4c>
 8017b10:	2330      	movs	r3, #48	@ 0x30
 8017b12:	18e4      	adds	r4, r4, r3
 8017b14:	70ab      	strb	r3, [r5, #2]
 8017b16:	1d28      	adds	r0, r5, #4
 8017b18:	70ec      	strb	r4, [r5, #3]
 8017b1a:	e7f1      	b.n	8017b00 <__exponent+0x64>

08017b1c <_printf_float>:
 8017b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b1e:	b097      	sub	sp, #92	@ 0x5c
 8017b20:	000d      	movs	r5, r1
 8017b22:	920a      	str	r2, [sp, #40]	@ 0x28
 8017b24:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017b26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017b28:	9009      	str	r0, [sp, #36]	@ 0x24
 8017b2a:	f000 fd6b 	bl	8018604 <_localeconv_r>
 8017b2e:	6803      	ldr	r3, [r0, #0]
 8017b30:	0018      	movs	r0, r3
 8017b32:	930d      	str	r3, [sp, #52]	@ 0x34
 8017b34:	f7e8 fae8 	bl	8000108 <strlen>
 8017b38:	2300      	movs	r3, #0
 8017b3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017b3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8017b3e:	7e2b      	ldrb	r3, [r5, #24]
 8017b40:	2207      	movs	r2, #7
 8017b42:	930c      	str	r3, [sp, #48]	@ 0x30
 8017b44:	682b      	ldr	r3, [r5, #0]
 8017b46:	930e      	str	r3, [sp, #56]	@ 0x38
 8017b48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017b4a:	6823      	ldr	r3, [r4, #0]
 8017b4c:	05c9      	lsls	r1, r1, #23
 8017b4e:	d545      	bpl.n	8017bdc <_printf_float+0xc0>
 8017b50:	189b      	adds	r3, r3, r2
 8017b52:	4393      	bics	r3, r2
 8017b54:	001a      	movs	r2, r3
 8017b56:	3208      	adds	r2, #8
 8017b58:	6022      	str	r2, [r4, #0]
 8017b5a:	2201      	movs	r2, #1
 8017b5c:	681e      	ldr	r6, [r3, #0]
 8017b5e:	685f      	ldr	r7, [r3, #4]
 8017b60:	007b      	lsls	r3, r7, #1
 8017b62:	085b      	lsrs	r3, r3, #1
 8017b64:	9311      	str	r3, [sp, #68]	@ 0x44
 8017b66:	9610      	str	r6, [sp, #64]	@ 0x40
 8017b68:	64ae      	str	r6, [r5, #72]	@ 0x48
 8017b6a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8017b6c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017b6e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017b70:	4ba7      	ldr	r3, [pc, #668]	@ (8017e10 <_printf_float+0x2f4>)
 8017b72:	4252      	negs	r2, r2
 8017b74:	f7eb fb44 	bl	8003200 <__aeabi_dcmpun>
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	d131      	bne.n	8017be0 <_printf_float+0xc4>
 8017b7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017b7e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017b80:	2201      	movs	r2, #1
 8017b82:	4ba3      	ldr	r3, [pc, #652]	@ (8017e10 <_printf_float+0x2f4>)
 8017b84:	4252      	negs	r2, r2
 8017b86:	f7e8 fc71 	bl	800046c <__aeabi_dcmple>
 8017b8a:	2800      	cmp	r0, #0
 8017b8c:	d128      	bne.n	8017be0 <_printf_float+0xc4>
 8017b8e:	2200      	movs	r2, #0
 8017b90:	2300      	movs	r3, #0
 8017b92:	0030      	movs	r0, r6
 8017b94:	0039      	movs	r1, r7
 8017b96:	f7e8 fc5f 	bl	8000458 <__aeabi_dcmplt>
 8017b9a:	2800      	cmp	r0, #0
 8017b9c:	d003      	beq.n	8017ba6 <_printf_float+0x8a>
 8017b9e:	002b      	movs	r3, r5
 8017ba0:	222d      	movs	r2, #45	@ 0x2d
 8017ba2:	3343      	adds	r3, #67	@ 0x43
 8017ba4:	701a      	strb	r2, [r3, #0]
 8017ba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ba8:	4f9a      	ldr	r7, [pc, #616]	@ (8017e14 <_printf_float+0x2f8>)
 8017baa:	2b47      	cmp	r3, #71	@ 0x47
 8017bac:	d900      	bls.n	8017bb0 <_printf_float+0x94>
 8017bae:	4f9a      	ldr	r7, [pc, #616]	@ (8017e18 <_printf_float+0x2fc>)
 8017bb0:	2303      	movs	r3, #3
 8017bb2:	2400      	movs	r4, #0
 8017bb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017bb6:	612b      	str	r3, [r5, #16]
 8017bb8:	3301      	adds	r3, #1
 8017bba:	439a      	bics	r2, r3
 8017bbc:	602a      	str	r2, [r5, #0]
 8017bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017bc0:	0029      	movs	r1, r5
 8017bc2:	9300      	str	r3, [sp, #0]
 8017bc4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017bc8:	aa15      	add	r2, sp, #84	@ 0x54
 8017bca:	f000 f9e5 	bl	8017f98 <_printf_common>
 8017bce:	3001      	adds	r0, #1
 8017bd0:	d000      	beq.n	8017bd4 <_printf_float+0xb8>
 8017bd2:	e09f      	b.n	8017d14 <_printf_float+0x1f8>
 8017bd4:	2001      	movs	r0, #1
 8017bd6:	4240      	negs	r0, r0
 8017bd8:	b017      	add	sp, #92	@ 0x5c
 8017bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bdc:	3307      	adds	r3, #7
 8017bde:	e7b8      	b.n	8017b52 <_printf_float+0x36>
 8017be0:	0032      	movs	r2, r6
 8017be2:	003b      	movs	r3, r7
 8017be4:	0030      	movs	r0, r6
 8017be6:	0039      	movs	r1, r7
 8017be8:	f7eb fb0a 	bl	8003200 <__aeabi_dcmpun>
 8017bec:	2800      	cmp	r0, #0
 8017bee:	d00b      	beq.n	8017c08 <_printf_float+0xec>
 8017bf0:	2f00      	cmp	r7, #0
 8017bf2:	da03      	bge.n	8017bfc <_printf_float+0xe0>
 8017bf4:	002b      	movs	r3, r5
 8017bf6:	222d      	movs	r2, #45	@ 0x2d
 8017bf8:	3343      	adds	r3, #67	@ 0x43
 8017bfa:	701a      	strb	r2, [r3, #0]
 8017bfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017bfe:	4f87      	ldr	r7, [pc, #540]	@ (8017e1c <_printf_float+0x300>)
 8017c00:	2b47      	cmp	r3, #71	@ 0x47
 8017c02:	d9d5      	bls.n	8017bb0 <_printf_float+0x94>
 8017c04:	4f86      	ldr	r7, [pc, #536]	@ (8017e20 <_printf_float+0x304>)
 8017c06:	e7d3      	b.n	8017bb0 <_printf_float+0x94>
 8017c08:	2220      	movs	r2, #32
 8017c0a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017c0c:	686b      	ldr	r3, [r5, #4]
 8017c0e:	4394      	bics	r4, r2
 8017c10:	1c5a      	adds	r2, r3, #1
 8017c12:	d146      	bne.n	8017ca2 <_printf_float+0x186>
 8017c14:	3307      	adds	r3, #7
 8017c16:	606b      	str	r3, [r5, #4]
 8017c18:	2380      	movs	r3, #128	@ 0x80
 8017c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017c1c:	00db      	lsls	r3, r3, #3
 8017c1e:	4313      	orrs	r3, r2
 8017c20:	2200      	movs	r2, #0
 8017c22:	602b      	str	r3, [r5, #0]
 8017c24:	9206      	str	r2, [sp, #24]
 8017c26:	aa14      	add	r2, sp, #80	@ 0x50
 8017c28:	9205      	str	r2, [sp, #20]
 8017c2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017c2c:	a90a      	add	r1, sp, #40	@ 0x28
 8017c2e:	9204      	str	r2, [sp, #16]
 8017c30:	aa13      	add	r2, sp, #76	@ 0x4c
 8017c32:	9203      	str	r2, [sp, #12]
 8017c34:	2223      	movs	r2, #35	@ 0x23
 8017c36:	1852      	adds	r2, r2, r1
 8017c38:	9202      	str	r2, [sp, #8]
 8017c3a:	9301      	str	r3, [sp, #4]
 8017c3c:	686b      	ldr	r3, [r5, #4]
 8017c3e:	0032      	movs	r2, r6
 8017c40:	9300      	str	r3, [sp, #0]
 8017c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c44:	003b      	movs	r3, r7
 8017c46:	f7ff fec3 	bl	80179d0 <__cvt>
 8017c4a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017c4c:	0007      	movs	r7, r0
 8017c4e:	2c47      	cmp	r4, #71	@ 0x47
 8017c50:	d12d      	bne.n	8017cae <_printf_float+0x192>
 8017c52:	1cd3      	adds	r3, r2, #3
 8017c54:	db02      	blt.n	8017c5c <_printf_float+0x140>
 8017c56:	686b      	ldr	r3, [r5, #4]
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	dd48      	ble.n	8017cee <_printf_float+0x1d2>
 8017c5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017c5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017c60:	3b02      	subs	r3, #2
 8017c62:	b2db      	uxtb	r3, r3
 8017c64:	930c      	str	r3, [sp, #48]	@ 0x30
 8017c66:	0028      	movs	r0, r5
 8017c68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017c6a:	3901      	subs	r1, #1
 8017c6c:	3050      	adds	r0, #80	@ 0x50
 8017c6e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017c70:	f7ff ff14 	bl	8017a9c <__exponent>
 8017c74:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017c76:	0004      	movs	r4, r0
 8017c78:	1813      	adds	r3, r2, r0
 8017c7a:	612b      	str	r3, [r5, #16]
 8017c7c:	2a01      	cmp	r2, #1
 8017c7e:	dc02      	bgt.n	8017c86 <_printf_float+0x16a>
 8017c80:	682a      	ldr	r2, [r5, #0]
 8017c82:	07d2      	lsls	r2, r2, #31
 8017c84:	d501      	bpl.n	8017c8a <_printf_float+0x16e>
 8017c86:	3301      	adds	r3, #1
 8017c88:	612b      	str	r3, [r5, #16]
 8017c8a:	2323      	movs	r3, #35	@ 0x23
 8017c8c:	aa0a      	add	r2, sp, #40	@ 0x28
 8017c8e:	189b      	adds	r3, r3, r2
 8017c90:	781b      	ldrb	r3, [r3, #0]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d100      	bne.n	8017c98 <_printf_float+0x17c>
 8017c96:	e792      	b.n	8017bbe <_printf_float+0xa2>
 8017c98:	002b      	movs	r3, r5
 8017c9a:	222d      	movs	r2, #45	@ 0x2d
 8017c9c:	3343      	adds	r3, #67	@ 0x43
 8017c9e:	701a      	strb	r2, [r3, #0]
 8017ca0:	e78d      	b.n	8017bbe <_printf_float+0xa2>
 8017ca2:	2c47      	cmp	r4, #71	@ 0x47
 8017ca4:	d1b8      	bne.n	8017c18 <_printf_float+0xfc>
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d1b6      	bne.n	8017c18 <_printf_float+0xfc>
 8017caa:	3301      	adds	r3, #1
 8017cac:	e7b3      	b.n	8017c16 <_printf_float+0xfa>
 8017cae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017cb0:	0011      	movs	r1, r2
 8017cb2:	2b65      	cmp	r3, #101	@ 0x65
 8017cb4:	d9d7      	bls.n	8017c66 <_printf_float+0x14a>
 8017cb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017cb8:	2b66      	cmp	r3, #102	@ 0x66
 8017cba:	d11a      	bne.n	8017cf2 <_printf_float+0x1d6>
 8017cbc:	686b      	ldr	r3, [r5, #4]
 8017cbe:	2a00      	cmp	r2, #0
 8017cc0:	dd09      	ble.n	8017cd6 <_printf_float+0x1ba>
 8017cc2:	612a      	str	r2, [r5, #16]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d102      	bne.n	8017cce <_printf_float+0x1b2>
 8017cc8:	6829      	ldr	r1, [r5, #0]
 8017cca:	07c9      	lsls	r1, r1, #31
 8017ccc:	d50b      	bpl.n	8017ce6 <_printf_float+0x1ca>
 8017cce:	3301      	adds	r3, #1
 8017cd0:	189b      	adds	r3, r3, r2
 8017cd2:	612b      	str	r3, [r5, #16]
 8017cd4:	e007      	b.n	8017ce6 <_printf_float+0x1ca>
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d103      	bne.n	8017ce2 <_printf_float+0x1c6>
 8017cda:	2201      	movs	r2, #1
 8017cdc:	6829      	ldr	r1, [r5, #0]
 8017cde:	4211      	tst	r1, r2
 8017ce0:	d000      	beq.n	8017ce4 <_printf_float+0x1c8>
 8017ce2:	1c9a      	adds	r2, r3, #2
 8017ce4:	612a      	str	r2, [r5, #16]
 8017ce6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017ce8:	2400      	movs	r4, #0
 8017cea:	65ab      	str	r3, [r5, #88]	@ 0x58
 8017cec:	e7cd      	b.n	8017c8a <_printf_float+0x16e>
 8017cee:	2367      	movs	r3, #103	@ 0x67
 8017cf0:	930c      	str	r3, [sp, #48]	@ 0x30
 8017cf2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017cf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017cf6:	4299      	cmp	r1, r3
 8017cf8:	db06      	blt.n	8017d08 <_printf_float+0x1ec>
 8017cfa:	682b      	ldr	r3, [r5, #0]
 8017cfc:	6129      	str	r1, [r5, #16]
 8017cfe:	07db      	lsls	r3, r3, #31
 8017d00:	d5f1      	bpl.n	8017ce6 <_printf_float+0x1ca>
 8017d02:	3101      	adds	r1, #1
 8017d04:	6129      	str	r1, [r5, #16]
 8017d06:	e7ee      	b.n	8017ce6 <_printf_float+0x1ca>
 8017d08:	2201      	movs	r2, #1
 8017d0a:	2900      	cmp	r1, #0
 8017d0c:	dce0      	bgt.n	8017cd0 <_printf_float+0x1b4>
 8017d0e:	1892      	adds	r2, r2, r2
 8017d10:	1a52      	subs	r2, r2, r1
 8017d12:	e7dd      	b.n	8017cd0 <_printf_float+0x1b4>
 8017d14:	682a      	ldr	r2, [r5, #0]
 8017d16:	0553      	lsls	r3, r2, #21
 8017d18:	d408      	bmi.n	8017d2c <_printf_float+0x210>
 8017d1a:	692b      	ldr	r3, [r5, #16]
 8017d1c:	003a      	movs	r2, r7
 8017d1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d22:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017d24:	47a0      	blx	r4
 8017d26:	3001      	adds	r0, #1
 8017d28:	d129      	bne.n	8017d7e <_printf_float+0x262>
 8017d2a:	e753      	b.n	8017bd4 <_printf_float+0xb8>
 8017d2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d2e:	2b65      	cmp	r3, #101	@ 0x65
 8017d30:	d800      	bhi.n	8017d34 <_printf_float+0x218>
 8017d32:	e0da      	b.n	8017eea <_printf_float+0x3ce>
 8017d34:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017d36:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017d38:	2200      	movs	r2, #0
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	f7e8 fb86 	bl	800044c <__aeabi_dcmpeq>
 8017d40:	2800      	cmp	r0, #0
 8017d42:	d033      	beq.n	8017dac <_printf_float+0x290>
 8017d44:	2301      	movs	r3, #1
 8017d46:	4a37      	ldr	r2, [pc, #220]	@ (8017e24 <_printf_float+0x308>)
 8017d48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d4c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017d4e:	47a0      	blx	r4
 8017d50:	3001      	adds	r0, #1
 8017d52:	d100      	bne.n	8017d56 <_printf_float+0x23a>
 8017d54:	e73e      	b.n	8017bd4 <_printf_float+0xb8>
 8017d56:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017d58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d5a:	42b3      	cmp	r3, r6
 8017d5c:	db02      	blt.n	8017d64 <_printf_float+0x248>
 8017d5e:	682b      	ldr	r3, [r5, #0]
 8017d60:	07db      	lsls	r3, r3, #31
 8017d62:	d50c      	bpl.n	8017d7e <_printf_float+0x262>
 8017d64:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017d66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017d6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d6e:	47a0      	blx	r4
 8017d70:	2400      	movs	r4, #0
 8017d72:	3001      	adds	r0, #1
 8017d74:	d100      	bne.n	8017d78 <_printf_float+0x25c>
 8017d76:	e72d      	b.n	8017bd4 <_printf_float+0xb8>
 8017d78:	1e73      	subs	r3, r6, #1
 8017d7a:	42a3      	cmp	r3, r4
 8017d7c:	dc0a      	bgt.n	8017d94 <_printf_float+0x278>
 8017d7e:	682b      	ldr	r3, [r5, #0]
 8017d80:	079b      	lsls	r3, r3, #30
 8017d82:	d500      	bpl.n	8017d86 <_printf_float+0x26a>
 8017d84:	e105      	b.n	8017f92 <_printf_float+0x476>
 8017d86:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017d88:	68e8      	ldr	r0, [r5, #12]
 8017d8a:	4298      	cmp	r0, r3
 8017d8c:	db00      	blt.n	8017d90 <_printf_float+0x274>
 8017d8e:	e723      	b.n	8017bd8 <_printf_float+0xbc>
 8017d90:	0018      	movs	r0, r3
 8017d92:	e721      	b.n	8017bd8 <_printf_float+0xbc>
 8017d94:	002a      	movs	r2, r5
 8017d96:	2301      	movs	r3, #1
 8017d98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d9c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017d9e:	321a      	adds	r2, #26
 8017da0:	47b8      	blx	r7
 8017da2:	3001      	adds	r0, #1
 8017da4:	d100      	bne.n	8017da8 <_printf_float+0x28c>
 8017da6:	e715      	b.n	8017bd4 <_printf_float+0xb8>
 8017da8:	3401      	adds	r4, #1
 8017daa:	e7e5      	b.n	8017d78 <_printf_float+0x25c>
 8017dac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	dc3a      	bgt.n	8017e28 <_printf_float+0x30c>
 8017db2:	2301      	movs	r3, #1
 8017db4:	4a1b      	ldr	r2, [pc, #108]	@ (8017e24 <_printf_float+0x308>)
 8017db6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017db8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017dba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017dbc:	47a0      	blx	r4
 8017dbe:	3001      	adds	r0, #1
 8017dc0:	d100      	bne.n	8017dc4 <_printf_float+0x2a8>
 8017dc2:	e707      	b.n	8017bd4 <_printf_float+0xb8>
 8017dc4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017dc6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017dc8:	4333      	orrs	r3, r6
 8017dca:	d102      	bne.n	8017dd2 <_printf_float+0x2b6>
 8017dcc:	682b      	ldr	r3, [r5, #0]
 8017dce:	07db      	lsls	r3, r3, #31
 8017dd0:	d5d5      	bpl.n	8017d7e <_printf_float+0x262>
 8017dd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017dd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017dd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017dd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017dda:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017ddc:	47a0      	blx	r4
 8017dde:	2300      	movs	r3, #0
 8017de0:	3001      	adds	r0, #1
 8017de2:	d100      	bne.n	8017de6 <_printf_float+0x2ca>
 8017de4:	e6f6      	b.n	8017bd4 <_printf_float+0xb8>
 8017de6:	930c      	str	r3, [sp, #48]	@ 0x30
 8017de8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017dea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017dec:	425b      	negs	r3, r3
 8017dee:	4293      	cmp	r3, r2
 8017df0:	dc01      	bgt.n	8017df6 <_printf_float+0x2da>
 8017df2:	0033      	movs	r3, r6
 8017df4:	e792      	b.n	8017d1c <_printf_float+0x200>
 8017df6:	002a      	movs	r2, r5
 8017df8:	2301      	movs	r3, #1
 8017dfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017dfc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017dfe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017e00:	321a      	adds	r2, #26
 8017e02:	47a0      	blx	r4
 8017e04:	3001      	adds	r0, #1
 8017e06:	d100      	bne.n	8017e0a <_printf_float+0x2ee>
 8017e08:	e6e4      	b.n	8017bd4 <_printf_float+0xb8>
 8017e0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	e7ea      	b.n	8017de6 <_printf_float+0x2ca>
 8017e10:	7fefffff 	.word	0x7fefffff
 8017e14:	0801c310 	.word	0x0801c310
 8017e18:	0801c314 	.word	0x0801c314
 8017e1c:	0801c318 	.word	0x0801c318
 8017e20:	0801c31c 	.word	0x0801c31c
 8017e24:	0801c320 	.word	0x0801c320
 8017e28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017e2a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017e2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8017e2e:	429e      	cmp	r6, r3
 8017e30:	dd00      	ble.n	8017e34 <_printf_float+0x318>
 8017e32:	001e      	movs	r6, r3
 8017e34:	2e00      	cmp	r6, #0
 8017e36:	dc31      	bgt.n	8017e9c <_printf_float+0x380>
 8017e38:	43f3      	mvns	r3, r6
 8017e3a:	2400      	movs	r4, #0
 8017e3c:	17db      	asrs	r3, r3, #31
 8017e3e:	4033      	ands	r3, r6
 8017e40:	930e      	str	r3, [sp, #56]	@ 0x38
 8017e42:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017e44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e46:	1af3      	subs	r3, r6, r3
 8017e48:	42a3      	cmp	r3, r4
 8017e4a:	dc30      	bgt.n	8017eae <_printf_float+0x392>
 8017e4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017e4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017e50:	429a      	cmp	r2, r3
 8017e52:	dc38      	bgt.n	8017ec6 <_printf_float+0x3aa>
 8017e54:	682b      	ldr	r3, [r5, #0]
 8017e56:	07db      	lsls	r3, r3, #31
 8017e58:	d435      	bmi.n	8017ec6 <_printf_float+0x3aa>
 8017e5a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017e5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017e60:	1b9b      	subs	r3, r3, r6
 8017e62:	1b14      	subs	r4, r2, r4
 8017e64:	429c      	cmp	r4, r3
 8017e66:	dd00      	ble.n	8017e6a <_printf_float+0x34e>
 8017e68:	001c      	movs	r4, r3
 8017e6a:	2c00      	cmp	r4, #0
 8017e6c:	dc34      	bgt.n	8017ed8 <_printf_float+0x3bc>
 8017e6e:	43e3      	mvns	r3, r4
 8017e70:	2600      	movs	r6, #0
 8017e72:	17db      	asrs	r3, r3, #31
 8017e74:	401c      	ands	r4, r3
 8017e76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017e78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017e7a:	1ad3      	subs	r3, r2, r3
 8017e7c:	1b1b      	subs	r3, r3, r4
 8017e7e:	42b3      	cmp	r3, r6
 8017e80:	dc00      	bgt.n	8017e84 <_printf_float+0x368>
 8017e82:	e77c      	b.n	8017d7e <_printf_float+0x262>
 8017e84:	002a      	movs	r2, r5
 8017e86:	2301      	movs	r3, #1
 8017e88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017e8e:	321a      	adds	r2, #26
 8017e90:	47b8      	blx	r7
 8017e92:	3001      	adds	r0, #1
 8017e94:	d100      	bne.n	8017e98 <_printf_float+0x37c>
 8017e96:	e69d      	b.n	8017bd4 <_printf_float+0xb8>
 8017e98:	3601      	adds	r6, #1
 8017e9a:	e7ec      	b.n	8017e76 <_printf_float+0x35a>
 8017e9c:	0033      	movs	r3, r6
 8017e9e:	003a      	movs	r2, r7
 8017ea0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ea4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017ea6:	47a0      	blx	r4
 8017ea8:	3001      	adds	r0, #1
 8017eaa:	d1c5      	bne.n	8017e38 <_printf_float+0x31c>
 8017eac:	e692      	b.n	8017bd4 <_printf_float+0xb8>
 8017eae:	002a      	movs	r2, r5
 8017eb0:	2301      	movs	r3, #1
 8017eb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017eb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017eb6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017eb8:	321a      	adds	r2, #26
 8017eba:	47b0      	blx	r6
 8017ebc:	3001      	adds	r0, #1
 8017ebe:	d100      	bne.n	8017ec2 <_printf_float+0x3a6>
 8017ec0:	e688      	b.n	8017bd4 <_printf_float+0xb8>
 8017ec2:	3401      	adds	r4, #1
 8017ec4:	e7bd      	b.n	8017e42 <_printf_float+0x326>
 8017ec6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ec8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017eca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ecc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ece:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017ed0:	47a0      	blx	r4
 8017ed2:	3001      	adds	r0, #1
 8017ed4:	d1c1      	bne.n	8017e5a <_printf_float+0x33e>
 8017ed6:	e67d      	b.n	8017bd4 <_printf_float+0xb8>
 8017ed8:	19ba      	adds	r2, r7, r6
 8017eda:	0023      	movs	r3, r4
 8017edc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ee0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017ee2:	47b0      	blx	r6
 8017ee4:	3001      	adds	r0, #1
 8017ee6:	d1c2      	bne.n	8017e6e <_printf_float+0x352>
 8017ee8:	e674      	b.n	8017bd4 <_printf_float+0xb8>
 8017eea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017eec:	930c      	str	r3, [sp, #48]	@ 0x30
 8017eee:	2b01      	cmp	r3, #1
 8017ef0:	dc02      	bgt.n	8017ef8 <_printf_float+0x3dc>
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	421a      	tst	r2, r3
 8017ef6:	d039      	beq.n	8017f6c <_printf_float+0x450>
 8017ef8:	2301      	movs	r3, #1
 8017efa:	003a      	movs	r2, r7
 8017efc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017f02:	47b0      	blx	r6
 8017f04:	3001      	adds	r0, #1
 8017f06:	d100      	bne.n	8017f0a <_printf_float+0x3ee>
 8017f08:	e664      	b.n	8017bd4 <_printf_float+0xb8>
 8017f0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017f0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f12:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017f14:	47b0      	blx	r6
 8017f16:	3001      	adds	r0, #1
 8017f18:	d100      	bne.n	8017f1c <_printf_float+0x400>
 8017f1a:	e65b      	b.n	8017bd4 <_printf_float+0xb8>
 8017f1c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017f1e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017f20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f22:	2200      	movs	r2, #0
 8017f24:	3b01      	subs	r3, #1
 8017f26:	930c      	str	r3, [sp, #48]	@ 0x30
 8017f28:	2300      	movs	r3, #0
 8017f2a:	f7e8 fa8f 	bl	800044c <__aeabi_dcmpeq>
 8017f2e:	2800      	cmp	r0, #0
 8017f30:	d11a      	bne.n	8017f68 <_printf_float+0x44c>
 8017f32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f34:	1c7a      	adds	r2, r7, #1
 8017f36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f3a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017f3c:	47b0      	blx	r6
 8017f3e:	3001      	adds	r0, #1
 8017f40:	d10e      	bne.n	8017f60 <_printf_float+0x444>
 8017f42:	e647      	b.n	8017bd4 <_printf_float+0xb8>
 8017f44:	002a      	movs	r2, r5
 8017f46:	2301      	movs	r3, #1
 8017f48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f4c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017f4e:	321a      	adds	r2, #26
 8017f50:	47b8      	blx	r7
 8017f52:	3001      	adds	r0, #1
 8017f54:	d100      	bne.n	8017f58 <_printf_float+0x43c>
 8017f56:	e63d      	b.n	8017bd4 <_printf_float+0xb8>
 8017f58:	3601      	adds	r6, #1
 8017f5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f5c:	429e      	cmp	r6, r3
 8017f5e:	dbf1      	blt.n	8017f44 <_printf_float+0x428>
 8017f60:	002a      	movs	r2, r5
 8017f62:	0023      	movs	r3, r4
 8017f64:	3250      	adds	r2, #80	@ 0x50
 8017f66:	e6da      	b.n	8017d1e <_printf_float+0x202>
 8017f68:	2600      	movs	r6, #0
 8017f6a:	e7f6      	b.n	8017f5a <_printf_float+0x43e>
 8017f6c:	003a      	movs	r2, r7
 8017f6e:	e7e2      	b.n	8017f36 <_printf_float+0x41a>
 8017f70:	002a      	movs	r2, r5
 8017f72:	2301      	movs	r3, #1
 8017f74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f78:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017f7a:	3219      	adds	r2, #25
 8017f7c:	47b0      	blx	r6
 8017f7e:	3001      	adds	r0, #1
 8017f80:	d100      	bne.n	8017f84 <_printf_float+0x468>
 8017f82:	e627      	b.n	8017bd4 <_printf_float+0xb8>
 8017f84:	3401      	adds	r4, #1
 8017f86:	68eb      	ldr	r3, [r5, #12]
 8017f88:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017f8a:	1a9b      	subs	r3, r3, r2
 8017f8c:	42a3      	cmp	r3, r4
 8017f8e:	dcef      	bgt.n	8017f70 <_printf_float+0x454>
 8017f90:	e6f9      	b.n	8017d86 <_printf_float+0x26a>
 8017f92:	2400      	movs	r4, #0
 8017f94:	e7f7      	b.n	8017f86 <_printf_float+0x46a>
 8017f96:	46c0      	nop			@ (mov r8, r8)

08017f98 <_printf_common>:
 8017f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f9a:	0016      	movs	r6, r2
 8017f9c:	9301      	str	r3, [sp, #4]
 8017f9e:	688a      	ldr	r2, [r1, #8]
 8017fa0:	690b      	ldr	r3, [r1, #16]
 8017fa2:	000c      	movs	r4, r1
 8017fa4:	9000      	str	r0, [sp, #0]
 8017fa6:	4293      	cmp	r3, r2
 8017fa8:	da00      	bge.n	8017fac <_printf_common+0x14>
 8017faa:	0013      	movs	r3, r2
 8017fac:	0022      	movs	r2, r4
 8017fae:	6033      	str	r3, [r6, #0]
 8017fb0:	3243      	adds	r2, #67	@ 0x43
 8017fb2:	7812      	ldrb	r2, [r2, #0]
 8017fb4:	2a00      	cmp	r2, #0
 8017fb6:	d001      	beq.n	8017fbc <_printf_common+0x24>
 8017fb8:	3301      	adds	r3, #1
 8017fba:	6033      	str	r3, [r6, #0]
 8017fbc:	6823      	ldr	r3, [r4, #0]
 8017fbe:	069b      	lsls	r3, r3, #26
 8017fc0:	d502      	bpl.n	8017fc8 <_printf_common+0x30>
 8017fc2:	6833      	ldr	r3, [r6, #0]
 8017fc4:	3302      	adds	r3, #2
 8017fc6:	6033      	str	r3, [r6, #0]
 8017fc8:	6822      	ldr	r2, [r4, #0]
 8017fca:	2306      	movs	r3, #6
 8017fcc:	0015      	movs	r5, r2
 8017fce:	401d      	ands	r5, r3
 8017fd0:	421a      	tst	r2, r3
 8017fd2:	d027      	beq.n	8018024 <_printf_common+0x8c>
 8017fd4:	0023      	movs	r3, r4
 8017fd6:	3343      	adds	r3, #67	@ 0x43
 8017fd8:	781b      	ldrb	r3, [r3, #0]
 8017fda:	1e5a      	subs	r2, r3, #1
 8017fdc:	4193      	sbcs	r3, r2
 8017fde:	6822      	ldr	r2, [r4, #0]
 8017fe0:	0692      	lsls	r2, r2, #26
 8017fe2:	d430      	bmi.n	8018046 <_printf_common+0xae>
 8017fe4:	0022      	movs	r2, r4
 8017fe6:	9901      	ldr	r1, [sp, #4]
 8017fe8:	9800      	ldr	r0, [sp, #0]
 8017fea:	9d08      	ldr	r5, [sp, #32]
 8017fec:	3243      	adds	r2, #67	@ 0x43
 8017fee:	47a8      	blx	r5
 8017ff0:	3001      	adds	r0, #1
 8017ff2:	d025      	beq.n	8018040 <_printf_common+0xa8>
 8017ff4:	2206      	movs	r2, #6
 8017ff6:	6823      	ldr	r3, [r4, #0]
 8017ff8:	2500      	movs	r5, #0
 8017ffa:	4013      	ands	r3, r2
 8017ffc:	2b04      	cmp	r3, #4
 8017ffe:	d105      	bne.n	801800c <_printf_common+0x74>
 8018000:	6833      	ldr	r3, [r6, #0]
 8018002:	68e5      	ldr	r5, [r4, #12]
 8018004:	1aed      	subs	r5, r5, r3
 8018006:	43eb      	mvns	r3, r5
 8018008:	17db      	asrs	r3, r3, #31
 801800a:	401d      	ands	r5, r3
 801800c:	68a3      	ldr	r3, [r4, #8]
 801800e:	6922      	ldr	r2, [r4, #16]
 8018010:	4293      	cmp	r3, r2
 8018012:	dd01      	ble.n	8018018 <_printf_common+0x80>
 8018014:	1a9b      	subs	r3, r3, r2
 8018016:	18ed      	adds	r5, r5, r3
 8018018:	2600      	movs	r6, #0
 801801a:	42b5      	cmp	r5, r6
 801801c:	d120      	bne.n	8018060 <_printf_common+0xc8>
 801801e:	2000      	movs	r0, #0
 8018020:	e010      	b.n	8018044 <_printf_common+0xac>
 8018022:	3501      	adds	r5, #1
 8018024:	68e3      	ldr	r3, [r4, #12]
 8018026:	6832      	ldr	r2, [r6, #0]
 8018028:	1a9b      	subs	r3, r3, r2
 801802a:	42ab      	cmp	r3, r5
 801802c:	ddd2      	ble.n	8017fd4 <_printf_common+0x3c>
 801802e:	0022      	movs	r2, r4
 8018030:	2301      	movs	r3, #1
 8018032:	9901      	ldr	r1, [sp, #4]
 8018034:	9800      	ldr	r0, [sp, #0]
 8018036:	9f08      	ldr	r7, [sp, #32]
 8018038:	3219      	adds	r2, #25
 801803a:	47b8      	blx	r7
 801803c:	3001      	adds	r0, #1
 801803e:	d1f0      	bne.n	8018022 <_printf_common+0x8a>
 8018040:	2001      	movs	r0, #1
 8018042:	4240      	negs	r0, r0
 8018044:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018046:	2030      	movs	r0, #48	@ 0x30
 8018048:	18e1      	adds	r1, r4, r3
 801804a:	3143      	adds	r1, #67	@ 0x43
 801804c:	7008      	strb	r0, [r1, #0]
 801804e:	0021      	movs	r1, r4
 8018050:	1c5a      	adds	r2, r3, #1
 8018052:	3145      	adds	r1, #69	@ 0x45
 8018054:	7809      	ldrb	r1, [r1, #0]
 8018056:	18a2      	adds	r2, r4, r2
 8018058:	3243      	adds	r2, #67	@ 0x43
 801805a:	3302      	adds	r3, #2
 801805c:	7011      	strb	r1, [r2, #0]
 801805e:	e7c1      	b.n	8017fe4 <_printf_common+0x4c>
 8018060:	0022      	movs	r2, r4
 8018062:	2301      	movs	r3, #1
 8018064:	9901      	ldr	r1, [sp, #4]
 8018066:	9800      	ldr	r0, [sp, #0]
 8018068:	9f08      	ldr	r7, [sp, #32]
 801806a:	321a      	adds	r2, #26
 801806c:	47b8      	blx	r7
 801806e:	3001      	adds	r0, #1
 8018070:	d0e6      	beq.n	8018040 <_printf_common+0xa8>
 8018072:	3601      	adds	r6, #1
 8018074:	e7d1      	b.n	801801a <_printf_common+0x82>
	...

08018078 <_printf_i>:
 8018078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801807a:	b08b      	sub	sp, #44	@ 0x2c
 801807c:	9206      	str	r2, [sp, #24]
 801807e:	000a      	movs	r2, r1
 8018080:	3243      	adds	r2, #67	@ 0x43
 8018082:	9307      	str	r3, [sp, #28]
 8018084:	9005      	str	r0, [sp, #20]
 8018086:	9203      	str	r2, [sp, #12]
 8018088:	7e0a      	ldrb	r2, [r1, #24]
 801808a:	000c      	movs	r4, r1
 801808c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801808e:	2a78      	cmp	r2, #120	@ 0x78
 8018090:	d809      	bhi.n	80180a6 <_printf_i+0x2e>
 8018092:	2a62      	cmp	r2, #98	@ 0x62
 8018094:	d80b      	bhi.n	80180ae <_printf_i+0x36>
 8018096:	2a00      	cmp	r2, #0
 8018098:	d100      	bne.n	801809c <_printf_i+0x24>
 801809a:	e0bc      	b.n	8018216 <_printf_i+0x19e>
 801809c:	497b      	ldr	r1, [pc, #492]	@ (801828c <_printf_i+0x214>)
 801809e:	9104      	str	r1, [sp, #16]
 80180a0:	2a58      	cmp	r2, #88	@ 0x58
 80180a2:	d100      	bne.n	80180a6 <_printf_i+0x2e>
 80180a4:	e090      	b.n	80181c8 <_printf_i+0x150>
 80180a6:	0025      	movs	r5, r4
 80180a8:	3542      	adds	r5, #66	@ 0x42
 80180aa:	702a      	strb	r2, [r5, #0]
 80180ac:	e022      	b.n	80180f4 <_printf_i+0x7c>
 80180ae:	0010      	movs	r0, r2
 80180b0:	3863      	subs	r0, #99	@ 0x63
 80180b2:	2815      	cmp	r0, #21
 80180b4:	d8f7      	bhi.n	80180a6 <_printf_i+0x2e>
 80180b6:	f7e8 f839 	bl	800012c <__gnu_thumb1_case_shi>
 80180ba:	0016      	.short	0x0016
 80180bc:	fff6001f 	.word	0xfff6001f
 80180c0:	fff6fff6 	.word	0xfff6fff6
 80180c4:	001ffff6 	.word	0x001ffff6
 80180c8:	fff6fff6 	.word	0xfff6fff6
 80180cc:	fff6fff6 	.word	0xfff6fff6
 80180d0:	003600a1 	.word	0x003600a1
 80180d4:	fff60080 	.word	0xfff60080
 80180d8:	00b2fff6 	.word	0x00b2fff6
 80180dc:	0036fff6 	.word	0x0036fff6
 80180e0:	fff6fff6 	.word	0xfff6fff6
 80180e4:	0084      	.short	0x0084
 80180e6:	0025      	movs	r5, r4
 80180e8:	681a      	ldr	r2, [r3, #0]
 80180ea:	3542      	adds	r5, #66	@ 0x42
 80180ec:	1d11      	adds	r1, r2, #4
 80180ee:	6019      	str	r1, [r3, #0]
 80180f0:	6813      	ldr	r3, [r2, #0]
 80180f2:	702b      	strb	r3, [r5, #0]
 80180f4:	2301      	movs	r3, #1
 80180f6:	e0a0      	b.n	801823a <_printf_i+0x1c2>
 80180f8:	6818      	ldr	r0, [r3, #0]
 80180fa:	6809      	ldr	r1, [r1, #0]
 80180fc:	1d02      	adds	r2, r0, #4
 80180fe:	060d      	lsls	r5, r1, #24
 8018100:	d50b      	bpl.n	801811a <_printf_i+0xa2>
 8018102:	6806      	ldr	r6, [r0, #0]
 8018104:	601a      	str	r2, [r3, #0]
 8018106:	2e00      	cmp	r6, #0
 8018108:	da03      	bge.n	8018112 <_printf_i+0x9a>
 801810a:	232d      	movs	r3, #45	@ 0x2d
 801810c:	9a03      	ldr	r2, [sp, #12]
 801810e:	4276      	negs	r6, r6
 8018110:	7013      	strb	r3, [r2, #0]
 8018112:	4b5e      	ldr	r3, [pc, #376]	@ (801828c <_printf_i+0x214>)
 8018114:	270a      	movs	r7, #10
 8018116:	9304      	str	r3, [sp, #16]
 8018118:	e018      	b.n	801814c <_printf_i+0xd4>
 801811a:	6806      	ldr	r6, [r0, #0]
 801811c:	601a      	str	r2, [r3, #0]
 801811e:	0649      	lsls	r1, r1, #25
 8018120:	d5f1      	bpl.n	8018106 <_printf_i+0x8e>
 8018122:	b236      	sxth	r6, r6
 8018124:	e7ef      	b.n	8018106 <_printf_i+0x8e>
 8018126:	6808      	ldr	r0, [r1, #0]
 8018128:	6819      	ldr	r1, [r3, #0]
 801812a:	c940      	ldmia	r1!, {r6}
 801812c:	0605      	lsls	r5, r0, #24
 801812e:	d402      	bmi.n	8018136 <_printf_i+0xbe>
 8018130:	0640      	lsls	r0, r0, #25
 8018132:	d500      	bpl.n	8018136 <_printf_i+0xbe>
 8018134:	b2b6      	uxth	r6, r6
 8018136:	6019      	str	r1, [r3, #0]
 8018138:	4b54      	ldr	r3, [pc, #336]	@ (801828c <_printf_i+0x214>)
 801813a:	270a      	movs	r7, #10
 801813c:	9304      	str	r3, [sp, #16]
 801813e:	2a6f      	cmp	r2, #111	@ 0x6f
 8018140:	d100      	bne.n	8018144 <_printf_i+0xcc>
 8018142:	3f02      	subs	r7, #2
 8018144:	0023      	movs	r3, r4
 8018146:	2200      	movs	r2, #0
 8018148:	3343      	adds	r3, #67	@ 0x43
 801814a:	701a      	strb	r2, [r3, #0]
 801814c:	6863      	ldr	r3, [r4, #4]
 801814e:	60a3      	str	r3, [r4, #8]
 8018150:	2b00      	cmp	r3, #0
 8018152:	db03      	blt.n	801815c <_printf_i+0xe4>
 8018154:	2104      	movs	r1, #4
 8018156:	6822      	ldr	r2, [r4, #0]
 8018158:	438a      	bics	r2, r1
 801815a:	6022      	str	r2, [r4, #0]
 801815c:	2e00      	cmp	r6, #0
 801815e:	d102      	bne.n	8018166 <_printf_i+0xee>
 8018160:	9d03      	ldr	r5, [sp, #12]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d00c      	beq.n	8018180 <_printf_i+0x108>
 8018166:	9d03      	ldr	r5, [sp, #12]
 8018168:	0030      	movs	r0, r6
 801816a:	0039      	movs	r1, r7
 801816c:	f7e8 f86e 	bl	800024c <__aeabi_uidivmod>
 8018170:	9b04      	ldr	r3, [sp, #16]
 8018172:	3d01      	subs	r5, #1
 8018174:	5c5b      	ldrb	r3, [r3, r1]
 8018176:	702b      	strb	r3, [r5, #0]
 8018178:	0033      	movs	r3, r6
 801817a:	0006      	movs	r6, r0
 801817c:	429f      	cmp	r7, r3
 801817e:	d9f3      	bls.n	8018168 <_printf_i+0xf0>
 8018180:	2f08      	cmp	r7, #8
 8018182:	d109      	bne.n	8018198 <_printf_i+0x120>
 8018184:	6823      	ldr	r3, [r4, #0]
 8018186:	07db      	lsls	r3, r3, #31
 8018188:	d506      	bpl.n	8018198 <_printf_i+0x120>
 801818a:	6862      	ldr	r2, [r4, #4]
 801818c:	6923      	ldr	r3, [r4, #16]
 801818e:	429a      	cmp	r2, r3
 8018190:	dc02      	bgt.n	8018198 <_printf_i+0x120>
 8018192:	2330      	movs	r3, #48	@ 0x30
 8018194:	3d01      	subs	r5, #1
 8018196:	702b      	strb	r3, [r5, #0]
 8018198:	9b03      	ldr	r3, [sp, #12]
 801819a:	1b5b      	subs	r3, r3, r5
 801819c:	6123      	str	r3, [r4, #16]
 801819e:	9b07      	ldr	r3, [sp, #28]
 80181a0:	0021      	movs	r1, r4
 80181a2:	9300      	str	r3, [sp, #0]
 80181a4:	9805      	ldr	r0, [sp, #20]
 80181a6:	9b06      	ldr	r3, [sp, #24]
 80181a8:	aa09      	add	r2, sp, #36	@ 0x24
 80181aa:	f7ff fef5 	bl	8017f98 <_printf_common>
 80181ae:	3001      	adds	r0, #1
 80181b0:	d148      	bne.n	8018244 <_printf_i+0x1cc>
 80181b2:	2001      	movs	r0, #1
 80181b4:	4240      	negs	r0, r0
 80181b6:	b00b      	add	sp, #44	@ 0x2c
 80181b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181ba:	2220      	movs	r2, #32
 80181bc:	6809      	ldr	r1, [r1, #0]
 80181be:	430a      	orrs	r2, r1
 80181c0:	6022      	str	r2, [r4, #0]
 80181c2:	2278      	movs	r2, #120	@ 0x78
 80181c4:	4932      	ldr	r1, [pc, #200]	@ (8018290 <_printf_i+0x218>)
 80181c6:	9104      	str	r1, [sp, #16]
 80181c8:	0021      	movs	r1, r4
 80181ca:	3145      	adds	r1, #69	@ 0x45
 80181cc:	700a      	strb	r2, [r1, #0]
 80181ce:	6819      	ldr	r1, [r3, #0]
 80181d0:	6822      	ldr	r2, [r4, #0]
 80181d2:	c940      	ldmia	r1!, {r6}
 80181d4:	0610      	lsls	r0, r2, #24
 80181d6:	d402      	bmi.n	80181de <_printf_i+0x166>
 80181d8:	0650      	lsls	r0, r2, #25
 80181da:	d500      	bpl.n	80181de <_printf_i+0x166>
 80181dc:	b2b6      	uxth	r6, r6
 80181de:	6019      	str	r1, [r3, #0]
 80181e0:	07d3      	lsls	r3, r2, #31
 80181e2:	d502      	bpl.n	80181ea <_printf_i+0x172>
 80181e4:	2320      	movs	r3, #32
 80181e6:	4313      	orrs	r3, r2
 80181e8:	6023      	str	r3, [r4, #0]
 80181ea:	2e00      	cmp	r6, #0
 80181ec:	d001      	beq.n	80181f2 <_printf_i+0x17a>
 80181ee:	2710      	movs	r7, #16
 80181f0:	e7a8      	b.n	8018144 <_printf_i+0xcc>
 80181f2:	2220      	movs	r2, #32
 80181f4:	6823      	ldr	r3, [r4, #0]
 80181f6:	4393      	bics	r3, r2
 80181f8:	6023      	str	r3, [r4, #0]
 80181fa:	e7f8      	b.n	80181ee <_printf_i+0x176>
 80181fc:	681a      	ldr	r2, [r3, #0]
 80181fe:	680d      	ldr	r5, [r1, #0]
 8018200:	1d10      	adds	r0, r2, #4
 8018202:	6949      	ldr	r1, [r1, #20]
 8018204:	6018      	str	r0, [r3, #0]
 8018206:	6813      	ldr	r3, [r2, #0]
 8018208:	062e      	lsls	r6, r5, #24
 801820a:	d501      	bpl.n	8018210 <_printf_i+0x198>
 801820c:	6019      	str	r1, [r3, #0]
 801820e:	e002      	b.n	8018216 <_printf_i+0x19e>
 8018210:	066d      	lsls	r5, r5, #25
 8018212:	d5fb      	bpl.n	801820c <_printf_i+0x194>
 8018214:	8019      	strh	r1, [r3, #0]
 8018216:	2300      	movs	r3, #0
 8018218:	9d03      	ldr	r5, [sp, #12]
 801821a:	6123      	str	r3, [r4, #16]
 801821c:	e7bf      	b.n	801819e <_printf_i+0x126>
 801821e:	681a      	ldr	r2, [r3, #0]
 8018220:	1d11      	adds	r1, r2, #4
 8018222:	6019      	str	r1, [r3, #0]
 8018224:	6815      	ldr	r5, [r2, #0]
 8018226:	2100      	movs	r1, #0
 8018228:	0028      	movs	r0, r5
 801822a:	6862      	ldr	r2, [r4, #4]
 801822c:	f000 fa69 	bl	8018702 <memchr>
 8018230:	2800      	cmp	r0, #0
 8018232:	d001      	beq.n	8018238 <_printf_i+0x1c0>
 8018234:	1b40      	subs	r0, r0, r5
 8018236:	6060      	str	r0, [r4, #4]
 8018238:	6863      	ldr	r3, [r4, #4]
 801823a:	6123      	str	r3, [r4, #16]
 801823c:	2300      	movs	r3, #0
 801823e:	9a03      	ldr	r2, [sp, #12]
 8018240:	7013      	strb	r3, [r2, #0]
 8018242:	e7ac      	b.n	801819e <_printf_i+0x126>
 8018244:	002a      	movs	r2, r5
 8018246:	6923      	ldr	r3, [r4, #16]
 8018248:	9906      	ldr	r1, [sp, #24]
 801824a:	9805      	ldr	r0, [sp, #20]
 801824c:	9d07      	ldr	r5, [sp, #28]
 801824e:	47a8      	blx	r5
 8018250:	3001      	adds	r0, #1
 8018252:	d0ae      	beq.n	80181b2 <_printf_i+0x13a>
 8018254:	6823      	ldr	r3, [r4, #0]
 8018256:	079b      	lsls	r3, r3, #30
 8018258:	d415      	bmi.n	8018286 <_printf_i+0x20e>
 801825a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801825c:	68e0      	ldr	r0, [r4, #12]
 801825e:	4298      	cmp	r0, r3
 8018260:	daa9      	bge.n	80181b6 <_printf_i+0x13e>
 8018262:	0018      	movs	r0, r3
 8018264:	e7a7      	b.n	80181b6 <_printf_i+0x13e>
 8018266:	0022      	movs	r2, r4
 8018268:	2301      	movs	r3, #1
 801826a:	9906      	ldr	r1, [sp, #24]
 801826c:	9805      	ldr	r0, [sp, #20]
 801826e:	9e07      	ldr	r6, [sp, #28]
 8018270:	3219      	adds	r2, #25
 8018272:	47b0      	blx	r6
 8018274:	3001      	adds	r0, #1
 8018276:	d09c      	beq.n	80181b2 <_printf_i+0x13a>
 8018278:	3501      	adds	r5, #1
 801827a:	68e3      	ldr	r3, [r4, #12]
 801827c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801827e:	1a9b      	subs	r3, r3, r2
 8018280:	42ab      	cmp	r3, r5
 8018282:	dcf0      	bgt.n	8018266 <_printf_i+0x1ee>
 8018284:	e7e9      	b.n	801825a <_printf_i+0x1e2>
 8018286:	2500      	movs	r5, #0
 8018288:	e7f7      	b.n	801827a <_printf_i+0x202>
 801828a:	46c0      	nop			@ (mov r8, r8)
 801828c:	0801c322 	.word	0x0801c322
 8018290:	0801c333 	.word	0x0801c333

08018294 <std>:
 8018294:	2300      	movs	r3, #0
 8018296:	b510      	push	{r4, lr}
 8018298:	0004      	movs	r4, r0
 801829a:	6003      	str	r3, [r0, #0]
 801829c:	6043      	str	r3, [r0, #4]
 801829e:	6083      	str	r3, [r0, #8]
 80182a0:	8181      	strh	r1, [r0, #12]
 80182a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80182a4:	81c2      	strh	r2, [r0, #14]
 80182a6:	6103      	str	r3, [r0, #16]
 80182a8:	6143      	str	r3, [r0, #20]
 80182aa:	6183      	str	r3, [r0, #24]
 80182ac:	0019      	movs	r1, r3
 80182ae:	2208      	movs	r2, #8
 80182b0:	305c      	adds	r0, #92	@ 0x5c
 80182b2:	f000 f967 	bl	8018584 <memset>
 80182b6:	4b0b      	ldr	r3, [pc, #44]	@ (80182e4 <std+0x50>)
 80182b8:	6224      	str	r4, [r4, #32]
 80182ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80182bc:	4b0a      	ldr	r3, [pc, #40]	@ (80182e8 <std+0x54>)
 80182be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80182c0:	4b0a      	ldr	r3, [pc, #40]	@ (80182ec <std+0x58>)
 80182c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80182c4:	4b0a      	ldr	r3, [pc, #40]	@ (80182f0 <std+0x5c>)
 80182c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80182c8:	4b0a      	ldr	r3, [pc, #40]	@ (80182f4 <std+0x60>)
 80182ca:	429c      	cmp	r4, r3
 80182cc:	d005      	beq.n	80182da <std+0x46>
 80182ce:	4b0a      	ldr	r3, [pc, #40]	@ (80182f8 <std+0x64>)
 80182d0:	429c      	cmp	r4, r3
 80182d2:	d002      	beq.n	80182da <std+0x46>
 80182d4:	4b09      	ldr	r3, [pc, #36]	@ (80182fc <std+0x68>)
 80182d6:	429c      	cmp	r4, r3
 80182d8:	d103      	bne.n	80182e2 <std+0x4e>
 80182da:	0020      	movs	r0, r4
 80182dc:	3058      	adds	r0, #88	@ 0x58
 80182de:	f000 fa0d 	bl	80186fc <__retarget_lock_init_recursive>
 80182e2:	bd10      	pop	{r4, pc}
 80182e4:	0801847d 	.word	0x0801847d
 80182e8:	080184a5 	.word	0x080184a5
 80182ec:	080184dd 	.word	0x080184dd
 80182f0:	08018509 	.word	0x08018509
 80182f4:	20003fd0 	.word	0x20003fd0
 80182f8:	20004038 	.word	0x20004038
 80182fc:	200040a0 	.word	0x200040a0

08018300 <stdio_exit_handler>:
 8018300:	b510      	push	{r4, lr}
 8018302:	4a03      	ldr	r2, [pc, #12]	@ (8018310 <stdio_exit_handler+0x10>)
 8018304:	4903      	ldr	r1, [pc, #12]	@ (8018314 <stdio_exit_handler+0x14>)
 8018306:	4804      	ldr	r0, [pc, #16]	@ (8018318 <stdio_exit_handler+0x18>)
 8018308:	f000 f86c 	bl	80183e4 <_fwalk_sglue>
 801830c:	bd10      	pop	{r4, pc}
 801830e:	46c0      	nop			@ (mov r8, r8)
 8018310:	200001e8 	.word	0x200001e8
 8018314:	0801a3d5 	.word	0x0801a3d5
 8018318:	200001f8 	.word	0x200001f8

0801831c <cleanup_stdio>:
 801831c:	6841      	ldr	r1, [r0, #4]
 801831e:	4b0b      	ldr	r3, [pc, #44]	@ (801834c <cleanup_stdio+0x30>)
 8018320:	b510      	push	{r4, lr}
 8018322:	0004      	movs	r4, r0
 8018324:	4299      	cmp	r1, r3
 8018326:	d001      	beq.n	801832c <cleanup_stdio+0x10>
 8018328:	f002 f854 	bl	801a3d4 <_fflush_r>
 801832c:	68a1      	ldr	r1, [r4, #8]
 801832e:	4b08      	ldr	r3, [pc, #32]	@ (8018350 <cleanup_stdio+0x34>)
 8018330:	4299      	cmp	r1, r3
 8018332:	d002      	beq.n	801833a <cleanup_stdio+0x1e>
 8018334:	0020      	movs	r0, r4
 8018336:	f002 f84d 	bl	801a3d4 <_fflush_r>
 801833a:	68e1      	ldr	r1, [r4, #12]
 801833c:	4b05      	ldr	r3, [pc, #20]	@ (8018354 <cleanup_stdio+0x38>)
 801833e:	4299      	cmp	r1, r3
 8018340:	d002      	beq.n	8018348 <cleanup_stdio+0x2c>
 8018342:	0020      	movs	r0, r4
 8018344:	f002 f846 	bl	801a3d4 <_fflush_r>
 8018348:	bd10      	pop	{r4, pc}
 801834a:	46c0      	nop			@ (mov r8, r8)
 801834c:	20003fd0 	.word	0x20003fd0
 8018350:	20004038 	.word	0x20004038
 8018354:	200040a0 	.word	0x200040a0

08018358 <global_stdio_init.part.0>:
 8018358:	b510      	push	{r4, lr}
 801835a:	4b09      	ldr	r3, [pc, #36]	@ (8018380 <global_stdio_init.part.0+0x28>)
 801835c:	4a09      	ldr	r2, [pc, #36]	@ (8018384 <global_stdio_init.part.0+0x2c>)
 801835e:	2104      	movs	r1, #4
 8018360:	601a      	str	r2, [r3, #0]
 8018362:	4809      	ldr	r0, [pc, #36]	@ (8018388 <global_stdio_init.part.0+0x30>)
 8018364:	2200      	movs	r2, #0
 8018366:	f7ff ff95 	bl	8018294 <std>
 801836a:	2201      	movs	r2, #1
 801836c:	2109      	movs	r1, #9
 801836e:	4807      	ldr	r0, [pc, #28]	@ (801838c <global_stdio_init.part.0+0x34>)
 8018370:	f7ff ff90 	bl	8018294 <std>
 8018374:	2202      	movs	r2, #2
 8018376:	2112      	movs	r1, #18
 8018378:	4805      	ldr	r0, [pc, #20]	@ (8018390 <global_stdio_init.part.0+0x38>)
 801837a:	f7ff ff8b 	bl	8018294 <std>
 801837e:	bd10      	pop	{r4, pc}
 8018380:	20004108 	.word	0x20004108
 8018384:	08018301 	.word	0x08018301
 8018388:	20003fd0 	.word	0x20003fd0
 801838c:	20004038 	.word	0x20004038
 8018390:	200040a0 	.word	0x200040a0

08018394 <__sfp_lock_acquire>:
 8018394:	b510      	push	{r4, lr}
 8018396:	4802      	ldr	r0, [pc, #8]	@ (80183a0 <__sfp_lock_acquire+0xc>)
 8018398:	f000 f9b1 	bl	80186fe <__retarget_lock_acquire_recursive>
 801839c:	bd10      	pop	{r4, pc}
 801839e:	46c0      	nop			@ (mov r8, r8)
 80183a0:	20004111 	.word	0x20004111

080183a4 <__sfp_lock_release>:
 80183a4:	b510      	push	{r4, lr}
 80183a6:	4802      	ldr	r0, [pc, #8]	@ (80183b0 <__sfp_lock_release+0xc>)
 80183a8:	f000 f9aa 	bl	8018700 <__retarget_lock_release_recursive>
 80183ac:	bd10      	pop	{r4, pc}
 80183ae:	46c0      	nop			@ (mov r8, r8)
 80183b0:	20004111 	.word	0x20004111

080183b4 <__sinit>:
 80183b4:	b510      	push	{r4, lr}
 80183b6:	0004      	movs	r4, r0
 80183b8:	f7ff ffec 	bl	8018394 <__sfp_lock_acquire>
 80183bc:	6a23      	ldr	r3, [r4, #32]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d002      	beq.n	80183c8 <__sinit+0x14>
 80183c2:	f7ff ffef 	bl	80183a4 <__sfp_lock_release>
 80183c6:	bd10      	pop	{r4, pc}
 80183c8:	4b04      	ldr	r3, [pc, #16]	@ (80183dc <__sinit+0x28>)
 80183ca:	6223      	str	r3, [r4, #32]
 80183cc:	4b04      	ldr	r3, [pc, #16]	@ (80183e0 <__sinit+0x2c>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d1f6      	bne.n	80183c2 <__sinit+0xe>
 80183d4:	f7ff ffc0 	bl	8018358 <global_stdio_init.part.0>
 80183d8:	e7f3      	b.n	80183c2 <__sinit+0xe>
 80183da:	46c0      	nop			@ (mov r8, r8)
 80183dc:	0801831d 	.word	0x0801831d
 80183e0:	20004108 	.word	0x20004108

080183e4 <_fwalk_sglue>:
 80183e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183e6:	0014      	movs	r4, r2
 80183e8:	2600      	movs	r6, #0
 80183ea:	9000      	str	r0, [sp, #0]
 80183ec:	9101      	str	r1, [sp, #4]
 80183ee:	68a5      	ldr	r5, [r4, #8]
 80183f0:	6867      	ldr	r7, [r4, #4]
 80183f2:	3f01      	subs	r7, #1
 80183f4:	d504      	bpl.n	8018400 <_fwalk_sglue+0x1c>
 80183f6:	6824      	ldr	r4, [r4, #0]
 80183f8:	2c00      	cmp	r4, #0
 80183fa:	d1f8      	bne.n	80183ee <_fwalk_sglue+0xa>
 80183fc:	0030      	movs	r0, r6
 80183fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018400:	89ab      	ldrh	r3, [r5, #12]
 8018402:	2b01      	cmp	r3, #1
 8018404:	d908      	bls.n	8018418 <_fwalk_sglue+0x34>
 8018406:	220e      	movs	r2, #14
 8018408:	5eab      	ldrsh	r3, [r5, r2]
 801840a:	3301      	adds	r3, #1
 801840c:	d004      	beq.n	8018418 <_fwalk_sglue+0x34>
 801840e:	0029      	movs	r1, r5
 8018410:	9800      	ldr	r0, [sp, #0]
 8018412:	9b01      	ldr	r3, [sp, #4]
 8018414:	4798      	blx	r3
 8018416:	4306      	orrs	r6, r0
 8018418:	3568      	adds	r5, #104	@ 0x68
 801841a:	e7ea      	b.n	80183f2 <_fwalk_sglue+0xe>

0801841c <iprintf>:
 801841c:	b40f      	push	{r0, r1, r2, r3}
 801841e:	b507      	push	{r0, r1, r2, lr}
 8018420:	4905      	ldr	r1, [pc, #20]	@ (8018438 <iprintf+0x1c>)
 8018422:	ab04      	add	r3, sp, #16
 8018424:	6808      	ldr	r0, [r1, #0]
 8018426:	cb04      	ldmia	r3!, {r2}
 8018428:	6881      	ldr	r1, [r0, #8]
 801842a:	9301      	str	r3, [sp, #4]
 801842c:	f001 fe30 	bl	801a090 <_vfiprintf_r>
 8018430:	b003      	add	sp, #12
 8018432:	bc08      	pop	{r3}
 8018434:	b004      	add	sp, #16
 8018436:	4718      	bx	r3
 8018438:	200001f4 	.word	0x200001f4

0801843c <siprintf>:
 801843c:	b40e      	push	{r1, r2, r3}
 801843e:	b500      	push	{lr}
 8018440:	490b      	ldr	r1, [pc, #44]	@ (8018470 <siprintf+0x34>)
 8018442:	b09c      	sub	sp, #112	@ 0x70
 8018444:	ab1d      	add	r3, sp, #116	@ 0x74
 8018446:	9002      	str	r0, [sp, #8]
 8018448:	9006      	str	r0, [sp, #24]
 801844a:	9107      	str	r1, [sp, #28]
 801844c:	9104      	str	r1, [sp, #16]
 801844e:	4809      	ldr	r0, [pc, #36]	@ (8018474 <siprintf+0x38>)
 8018450:	4909      	ldr	r1, [pc, #36]	@ (8018478 <siprintf+0x3c>)
 8018452:	cb04      	ldmia	r3!, {r2}
 8018454:	9105      	str	r1, [sp, #20]
 8018456:	6800      	ldr	r0, [r0, #0]
 8018458:	a902      	add	r1, sp, #8
 801845a:	9301      	str	r3, [sp, #4]
 801845c:	f001 fcf2 	bl	8019e44 <_svfiprintf_r>
 8018460:	2200      	movs	r2, #0
 8018462:	9b02      	ldr	r3, [sp, #8]
 8018464:	701a      	strb	r2, [r3, #0]
 8018466:	b01c      	add	sp, #112	@ 0x70
 8018468:	bc08      	pop	{r3}
 801846a:	b003      	add	sp, #12
 801846c:	4718      	bx	r3
 801846e:	46c0      	nop			@ (mov r8, r8)
 8018470:	7fffffff 	.word	0x7fffffff
 8018474:	200001f4 	.word	0x200001f4
 8018478:	ffff0208 	.word	0xffff0208

0801847c <__sread>:
 801847c:	b570      	push	{r4, r5, r6, lr}
 801847e:	000c      	movs	r4, r1
 8018480:	250e      	movs	r5, #14
 8018482:	5f49      	ldrsh	r1, [r1, r5]
 8018484:	f000 f8e8 	bl	8018658 <_read_r>
 8018488:	2800      	cmp	r0, #0
 801848a:	db03      	blt.n	8018494 <__sread+0x18>
 801848c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801848e:	181b      	adds	r3, r3, r0
 8018490:	6563      	str	r3, [r4, #84]	@ 0x54
 8018492:	bd70      	pop	{r4, r5, r6, pc}
 8018494:	89a3      	ldrh	r3, [r4, #12]
 8018496:	4a02      	ldr	r2, [pc, #8]	@ (80184a0 <__sread+0x24>)
 8018498:	4013      	ands	r3, r2
 801849a:	81a3      	strh	r3, [r4, #12]
 801849c:	e7f9      	b.n	8018492 <__sread+0x16>
 801849e:	46c0      	nop			@ (mov r8, r8)
 80184a0:	ffffefff 	.word	0xffffefff

080184a4 <__swrite>:
 80184a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184a6:	001f      	movs	r7, r3
 80184a8:	898b      	ldrh	r3, [r1, #12]
 80184aa:	0005      	movs	r5, r0
 80184ac:	000c      	movs	r4, r1
 80184ae:	0016      	movs	r6, r2
 80184b0:	05db      	lsls	r3, r3, #23
 80184b2:	d505      	bpl.n	80184c0 <__swrite+0x1c>
 80184b4:	230e      	movs	r3, #14
 80184b6:	5ec9      	ldrsh	r1, [r1, r3]
 80184b8:	2200      	movs	r2, #0
 80184ba:	2302      	movs	r3, #2
 80184bc:	f000 f8b8 	bl	8018630 <_lseek_r>
 80184c0:	89a3      	ldrh	r3, [r4, #12]
 80184c2:	4a05      	ldr	r2, [pc, #20]	@ (80184d8 <__swrite+0x34>)
 80184c4:	0028      	movs	r0, r5
 80184c6:	4013      	ands	r3, r2
 80184c8:	81a3      	strh	r3, [r4, #12]
 80184ca:	0032      	movs	r2, r6
 80184cc:	230e      	movs	r3, #14
 80184ce:	5ee1      	ldrsh	r1, [r4, r3]
 80184d0:	003b      	movs	r3, r7
 80184d2:	f000 f8d5 	bl	8018680 <_write_r>
 80184d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184d8:	ffffefff 	.word	0xffffefff

080184dc <__sseek>:
 80184dc:	b570      	push	{r4, r5, r6, lr}
 80184de:	000c      	movs	r4, r1
 80184e0:	250e      	movs	r5, #14
 80184e2:	5f49      	ldrsh	r1, [r1, r5]
 80184e4:	f000 f8a4 	bl	8018630 <_lseek_r>
 80184e8:	89a3      	ldrh	r3, [r4, #12]
 80184ea:	1c42      	adds	r2, r0, #1
 80184ec:	d103      	bne.n	80184f6 <__sseek+0x1a>
 80184ee:	4a05      	ldr	r2, [pc, #20]	@ (8018504 <__sseek+0x28>)
 80184f0:	4013      	ands	r3, r2
 80184f2:	81a3      	strh	r3, [r4, #12]
 80184f4:	bd70      	pop	{r4, r5, r6, pc}
 80184f6:	2280      	movs	r2, #128	@ 0x80
 80184f8:	0152      	lsls	r2, r2, #5
 80184fa:	4313      	orrs	r3, r2
 80184fc:	81a3      	strh	r3, [r4, #12]
 80184fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8018500:	e7f8      	b.n	80184f4 <__sseek+0x18>
 8018502:	46c0      	nop			@ (mov r8, r8)
 8018504:	ffffefff 	.word	0xffffefff

08018508 <__sclose>:
 8018508:	b510      	push	{r4, lr}
 801850a:	230e      	movs	r3, #14
 801850c:	5ec9      	ldrsh	r1, [r1, r3]
 801850e:	f000 f87d 	bl	801860c <_close_r>
 8018512:	bd10      	pop	{r4, pc}

08018514 <_vsniprintf_r>:
 8018514:	b530      	push	{r4, r5, lr}
 8018516:	0014      	movs	r4, r2
 8018518:	0005      	movs	r5, r0
 801851a:	001a      	movs	r2, r3
 801851c:	b09b      	sub	sp, #108	@ 0x6c
 801851e:	2c00      	cmp	r4, #0
 8018520:	da05      	bge.n	801852e <_vsniprintf_r+0x1a>
 8018522:	238b      	movs	r3, #139	@ 0x8b
 8018524:	6003      	str	r3, [r0, #0]
 8018526:	2001      	movs	r0, #1
 8018528:	4240      	negs	r0, r0
 801852a:	b01b      	add	sp, #108	@ 0x6c
 801852c:	bd30      	pop	{r4, r5, pc}
 801852e:	2382      	movs	r3, #130	@ 0x82
 8018530:	4668      	mov	r0, sp
 8018532:	009b      	lsls	r3, r3, #2
 8018534:	8183      	strh	r3, [r0, #12]
 8018536:	2300      	movs	r3, #0
 8018538:	9100      	str	r1, [sp, #0]
 801853a:	9104      	str	r1, [sp, #16]
 801853c:	429c      	cmp	r4, r3
 801853e:	d000      	beq.n	8018542 <_vsniprintf_r+0x2e>
 8018540:	1e63      	subs	r3, r4, #1
 8018542:	9302      	str	r3, [sp, #8]
 8018544:	9305      	str	r3, [sp, #20]
 8018546:	2301      	movs	r3, #1
 8018548:	4669      	mov	r1, sp
 801854a:	425b      	negs	r3, r3
 801854c:	81cb      	strh	r3, [r1, #14]
 801854e:	0028      	movs	r0, r5
 8018550:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018552:	f001 fc77 	bl	8019e44 <_svfiprintf_r>
 8018556:	1c43      	adds	r3, r0, #1
 8018558:	da01      	bge.n	801855e <_vsniprintf_r+0x4a>
 801855a:	238b      	movs	r3, #139	@ 0x8b
 801855c:	602b      	str	r3, [r5, #0]
 801855e:	2c00      	cmp	r4, #0
 8018560:	d0e3      	beq.n	801852a <_vsniprintf_r+0x16>
 8018562:	2200      	movs	r2, #0
 8018564:	9b00      	ldr	r3, [sp, #0]
 8018566:	701a      	strb	r2, [r3, #0]
 8018568:	e7df      	b.n	801852a <_vsniprintf_r+0x16>
	...

0801856c <vsniprintf>:
 801856c:	b513      	push	{r0, r1, r4, lr}
 801856e:	4c04      	ldr	r4, [pc, #16]	@ (8018580 <vsniprintf+0x14>)
 8018570:	9300      	str	r3, [sp, #0]
 8018572:	0013      	movs	r3, r2
 8018574:	000a      	movs	r2, r1
 8018576:	0001      	movs	r1, r0
 8018578:	6820      	ldr	r0, [r4, #0]
 801857a:	f7ff ffcb 	bl	8018514 <_vsniprintf_r>
 801857e:	bd16      	pop	{r1, r2, r4, pc}
 8018580:	200001f4 	.word	0x200001f4

08018584 <memset>:
 8018584:	0003      	movs	r3, r0
 8018586:	1882      	adds	r2, r0, r2
 8018588:	4293      	cmp	r3, r2
 801858a:	d100      	bne.n	801858e <memset+0xa>
 801858c:	4770      	bx	lr
 801858e:	7019      	strb	r1, [r3, #0]
 8018590:	3301      	adds	r3, #1
 8018592:	e7f9      	b.n	8018588 <memset+0x4>

08018594 <strchr>:
 8018594:	b2c9      	uxtb	r1, r1
 8018596:	7803      	ldrb	r3, [r0, #0]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d004      	beq.n	80185a6 <strchr+0x12>
 801859c:	428b      	cmp	r3, r1
 801859e:	d100      	bne.n	80185a2 <strchr+0xe>
 80185a0:	4770      	bx	lr
 80185a2:	3001      	adds	r0, #1
 80185a4:	e7f7      	b.n	8018596 <strchr+0x2>
 80185a6:	424b      	negs	r3, r1
 80185a8:	4159      	adcs	r1, r3
 80185aa:	4249      	negs	r1, r1
 80185ac:	4008      	ands	r0, r1
 80185ae:	e7f7      	b.n	80185a0 <strchr+0xc>

080185b0 <strncpy>:
 80185b0:	0003      	movs	r3, r0
 80185b2:	b530      	push	{r4, r5, lr}
 80185b4:	001d      	movs	r5, r3
 80185b6:	2a00      	cmp	r2, #0
 80185b8:	d006      	beq.n	80185c8 <strncpy+0x18>
 80185ba:	780c      	ldrb	r4, [r1, #0]
 80185bc:	3a01      	subs	r2, #1
 80185be:	3301      	adds	r3, #1
 80185c0:	702c      	strb	r4, [r5, #0]
 80185c2:	3101      	adds	r1, #1
 80185c4:	2c00      	cmp	r4, #0
 80185c6:	d1f5      	bne.n	80185b4 <strncpy+0x4>
 80185c8:	2100      	movs	r1, #0
 80185ca:	189a      	adds	r2, r3, r2
 80185cc:	4293      	cmp	r3, r2
 80185ce:	d100      	bne.n	80185d2 <strncpy+0x22>
 80185d0:	bd30      	pop	{r4, r5, pc}
 80185d2:	7019      	strb	r1, [r3, #0]
 80185d4:	3301      	adds	r3, #1
 80185d6:	e7f9      	b.n	80185cc <strncpy+0x1c>

080185d8 <strstr>:
 80185d8:	780a      	ldrb	r2, [r1, #0]
 80185da:	b530      	push	{r4, r5, lr}
 80185dc:	2a00      	cmp	r2, #0
 80185de:	d10c      	bne.n	80185fa <strstr+0x22>
 80185e0:	bd30      	pop	{r4, r5, pc}
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d108      	bne.n	80185f8 <strstr+0x20>
 80185e6:	2301      	movs	r3, #1
 80185e8:	5ccc      	ldrb	r4, [r1, r3]
 80185ea:	2c00      	cmp	r4, #0
 80185ec:	d0f8      	beq.n	80185e0 <strstr+0x8>
 80185ee:	5cc5      	ldrb	r5, [r0, r3]
 80185f0:	42a5      	cmp	r5, r4
 80185f2:	d101      	bne.n	80185f8 <strstr+0x20>
 80185f4:	3301      	adds	r3, #1
 80185f6:	e7f7      	b.n	80185e8 <strstr+0x10>
 80185f8:	3001      	adds	r0, #1
 80185fa:	7803      	ldrb	r3, [r0, #0]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d1f0      	bne.n	80185e2 <strstr+0xa>
 8018600:	0018      	movs	r0, r3
 8018602:	e7ed      	b.n	80185e0 <strstr+0x8>

08018604 <_localeconv_r>:
 8018604:	4800      	ldr	r0, [pc, #0]	@ (8018608 <_localeconv_r+0x4>)
 8018606:	4770      	bx	lr
 8018608:	20000334 	.word	0x20000334

0801860c <_close_r>:
 801860c:	2300      	movs	r3, #0
 801860e:	b570      	push	{r4, r5, r6, lr}
 8018610:	4d06      	ldr	r5, [pc, #24]	@ (801862c <_close_r+0x20>)
 8018612:	0004      	movs	r4, r0
 8018614:	0008      	movs	r0, r1
 8018616:	602b      	str	r3, [r5, #0]
 8018618:	f7f0 feee 	bl	80093f8 <_close>
 801861c:	1c43      	adds	r3, r0, #1
 801861e:	d103      	bne.n	8018628 <_close_r+0x1c>
 8018620:	682b      	ldr	r3, [r5, #0]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d000      	beq.n	8018628 <_close_r+0x1c>
 8018626:	6023      	str	r3, [r4, #0]
 8018628:	bd70      	pop	{r4, r5, r6, pc}
 801862a:	46c0      	nop			@ (mov r8, r8)
 801862c:	2000410c 	.word	0x2000410c

08018630 <_lseek_r>:
 8018630:	b570      	push	{r4, r5, r6, lr}
 8018632:	0004      	movs	r4, r0
 8018634:	0008      	movs	r0, r1
 8018636:	0011      	movs	r1, r2
 8018638:	001a      	movs	r2, r3
 801863a:	2300      	movs	r3, #0
 801863c:	4d05      	ldr	r5, [pc, #20]	@ (8018654 <_lseek_r+0x24>)
 801863e:	602b      	str	r3, [r5, #0]
 8018640:	f7f0 fefb 	bl	800943a <_lseek>
 8018644:	1c43      	adds	r3, r0, #1
 8018646:	d103      	bne.n	8018650 <_lseek_r+0x20>
 8018648:	682b      	ldr	r3, [r5, #0]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d000      	beq.n	8018650 <_lseek_r+0x20>
 801864e:	6023      	str	r3, [r4, #0]
 8018650:	bd70      	pop	{r4, r5, r6, pc}
 8018652:	46c0      	nop			@ (mov r8, r8)
 8018654:	2000410c 	.word	0x2000410c

08018658 <_read_r>:
 8018658:	b570      	push	{r4, r5, r6, lr}
 801865a:	0004      	movs	r4, r0
 801865c:	0008      	movs	r0, r1
 801865e:	0011      	movs	r1, r2
 8018660:	001a      	movs	r2, r3
 8018662:	2300      	movs	r3, #0
 8018664:	4d05      	ldr	r5, [pc, #20]	@ (801867c <_read_r+0x24>)
 8018666:	602b      	str	r3, [r5, #0]
 8018668:	f7f0 fea9 	bl	80093be <_read>
 801866c:	1c43      	adds	r3, r0, #1
 801866e:	d103      	bne.n	8018678 <_read_r+0x20>
 8018670:	682b      	ldr	r3, [r5, #0]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d000      	beq.n	8018678 <_read_r+0x20>
 8018676:	6023      	str	r3, [r4, #0]
 8018678:	bd70      	pop	{r4, r5, r6, pc}
 801867a:	46c0      	nop			@ (mov r8, r8)
 801867c:	2000410c 	.word	0x2000410c

08018680 <_write_r>:
 8018680:	b570      	push	{r4, r5, r6, lr}
 8018682:	0004      	movs	r4, r0
 8018684:	0008      	movs	r0, r1
 8018686:	0011      	movs	r1, r2
 8018688:	001a      	movs	r2, r3
 801868a:	2300      	movs	r3, #0
 801868c:	4d05      	ldr	r5, [pc, #20]	@ (80186a4 <_write_r+0x24>)
 801868e:	602b      	str	r3, [r5, #0]
 8018690:	f7f1 fb06 	bl	8009ca0 <_write>
 8018694:	1c43      	adds	r3, r0, #1
 8018696:	d103      	bne.n	80186a0 <_write_r+0x20>
 8018698:	682b      	ldr	r3, [r5, #0]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d000      	beq.n	80186a0 <_write_r+0x20>
 801869e:	6023      	str	r3, [r4, #0]
 80186a0:	bd70      	pop	{r4, r5, r6, pc}
 80186a2:	46c0      	nop			@ (mov r8, r8)
 80186a4:	2000410c 	.word	0x2000410c

080186a8 <__errno>:
 80186a8:	4b01      	ldr	r3, [pc, #4]	@ (80186b0 <__errno+0x8>)
 80186aa:	6818      	ldr	r0, [r3, #0]
 80186ac:	4770      	bx	lr
 80186ae:	46c0      	nop			@ (mov r8, r8)
 80186b0:	200001f4 	.word	0x200001f4

080186b4 <__libc_init_array>:
 80186b4:	b570      	push	{r4, r5, r6, lr}
 80186b6:	2600      	movs	r6, #0
 80186b8:	4c0c      	ldr	r4, [pc, #48]	@ (80186ec <__libc_init_array+0x38>)
 80186ba:	4d0d      	ldr	r5, [pc, #52]	@ (80186f0 <__libc_init_array+0x3c>)
 80186bc:	1b64      	subs	r4, r4, r5
 80186be:	10a4      	asrs	r4, r4, #2
 80186c0:	42a6      	cmp	r6, r4
 80186c2:	d109      	bne.n	80186d8 <__libc_init_array+0x24>
 80186c4:	2600      	movs	r6, #0
 80186c6:	f002 fe57 	bl	801b378 <_init>
 80186ca:	4c0a      	ldr	r4, [pc, #40]	@ (80186f4 <__libc_init_array+0x40>)
 80186cc:	4d0a      	ldr	r5, [pc, #40]	@ (80186f8 <__libc_init_array+0x44>)
 80186ce:	1b64      	subs	r4, r4, r5
 80186d0:	10a4      	asrs	r4, r4, #2
 80186d2:	42a6      	cmp	r6, r4
 80186d4:	d105      	bne.n	80186e2 <__libc_init_array+0x2e>
 80186d6:	bd70      	pop	{r4, r5, r6, pc}
 80186d8:	00b3      	lsls	r3, r6, #2
 80186da:	58eb      	ldr	r3, [r5, r3]
 80186dc:	4798      	blx	r3
 80186de:	3601      	adds	r6, #1
 80186e0:	e7ee      	b.n	80186c0 <__libc_init_array+0xc>
 80186e2:	00b3      	lsls	r3, r6, #2
 80186e4:	58eb      	ldr	r3, [r5, r3]
 80186e6:	4798      	blx	r3
 80186e8:	3601      	adds	r6, #1
 80186ea:	e7f2      	b.n	80186d2 <__libc_init_array+0x1e>
 80186ec:	0801c6a0 	.word	0x0801c6a0
 80186f0:	0801c6a0 	.word	0x0801c6a0
 80186f4:	0801c6a4 	.word	0x0801c6a4
 80186f8:	0801c6a0 	.word	0x0801c6a0

080186fc <__retarget_lock_init_recursive>:
 80186fc:	4770      	bx	lr

080186fe <__retarget_lock_acquire_recursive>:
 80186fe:	4770      	bx	lr

08018700 <__retarget_lock_release_recursive>:
 8018700:	4770      	bx	lr

08018702 <memchr>:
 8018702:	b2c9      	uxtb	r1, r1
 8018704:	1882      	adds	r2, r0, r2
 8018706:	4290      	cmp	r0, r2
 8018708:	d101      	bne.n	801870e <memchr+0xc>
 801870a:	2000      	movs	r0, #0
 801870c:	4770      	bx	lr
 801870e:	7803      	ldrb	r3, [r0, #0]
 8018710:	428b      	cmp	r3, r1
 8018712:	d0fb      	beq.n	801870c <memchr+0xa>
 8018714:	3001      	adds	r0, #1
 8018716:	e7f6      	b.n	8018706 <memchr+0x4>

08018718 <memcpy>:
 8018718:	2300      	movs	r3, #0
 801871a:	b510      	push	{r4, lr}
 801871c:	429a      	cmp	r2, r3
 801871e:	d100      	bne.n	8018722 <memcpy+0xa>
 8018720:	bd10      	pop	{r4, pc}
 8018722:	5ccc      	ldrb	r4, [r1, r3]
 8018724:	54c4      	strb	r4, [r0, r3]
 8018726:	3301      	adds	r3, #1
 8018728:	e7f8      	b.n	801871c <memcpy+0x4>

0801872a <quorem>:
 801872a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801872c:	6902      	ldr	r2, [r0, #16]
 801872e:	690f      	ldr	r7, [r1, #16]
 8018730:	b087      	sub	sp, #28
 8018732:	0006      	movs	r6, r0
 8018734:	000b      	movs	r3, r1
 8018736:	2000      	movs	r0, #0
 8018738:	9102      	str	r1, [sp, #8]
 801873a:	42ba      	cmp	r2, r7
 801873c:	db6d      	blt.n	801881a <quorem+0xf0>
 801873e:	3f01      	subs	r7, #1
 8018740:	00bc      	lsls	r4, r7, #2
 8018742:	3314      	adds	r3, #20
 8018744:	9305      	str	r3, [sp, #20]
 8018746:	191b      	adds	r3, r3, r4
 8018748:	9303      	str	r3, [sp, #12]
 801874a:	0033      	movs	r3, r6
 801874c:	3314      	adds	r3, #20
 801874e:	191c      	adds	r4, r3, r4
 8018750:	9301      	str	r3, [sp, #4]
 8018752:	6823      	ldr	r3, [r4, #0]
 8018754:	9304      	str	r3, [sp, #16]
 8018756:	9b03      	ldr	r3, [sp, #12]
 8018758:	9804      	ldr	r0, [sp, #16]
 801875a:	681d      	ldr	r5, [r3, #0]
 801875c:	3501      	adds	r5, #1
 801875e:	0029      	movs	r1, r5
 8018760:	f7e7 fcee 	bl	8000140 <__udivsi3>
 8018764:	9b04      	ldr	r3, [sp, #16]
 8018766:	9000      	str	r0, [sp, #0]
 8018768:	42ab      	cmp	r3, r5
 801876a:	d32b      	bcc.n	80187c4 <quorem+0x9a>
 801876c:	9b05      	ldr	r3, [sp, #20]
 801876e:	9d01      	ldr	r5, [sp, #4]
 8018770:	469c      	mov	ip, r3
 8018772:	2300      	movs	r3, #0
 8018774:	9305      	str	r3, [sp, #20]
 8018776:	9304      	str	r3, [sp, #16]
 8018778:	4662      	mov	r2, ip
 801877a:	ca08      	ldmia	r2!, {r3}
 801877c:	6828      	ldr	r0, [r5, #0]
 801877e:	4694      	mov	ip, r2
 8018780:	9a00      	ldr	r2, [sp, #0]
 8018782:	b299      	uxth	r1, r3
 8018784:	4351      	muls	r1, r2
 8018786:	9a05      	ldr	r2, [sp, #20]
 8018788:	0c1b      	lsrs	r3, r3, #16
 801878a:	1889      	adds	r1, r1, r2
 801878c:	9a00      	ldr	r2, [sp, #0]
 801878e:	4353      	muls	r3, r2
 8018790:	0c0a      	lsrs	r2, r1, #16
 8018792:	189b      	adds	r3, r3, r2
 8018794:	0c1a      	lsrs	r2, r3, #16
 8018796:	b289      	uxth	r1, r1
 8018798:	9205      	str	r2, [sp, #20]
 801879a:	b282      	uxth	r2, r0
 801879c:	1a52      	subs	r2, r2, r1
 801879e:	9904      	ldr	r1, [sp, #16]
 80187a0:	0c00      	lsrs	r0, r0, #16
 80187a2:	1852      	adds	r2, r2, r1
 80187a4:	b29b      	uxth	r3, r3
 80187a6:	1411      	asrs	r1, r2, #16
 80187a8:	1ac3      	subs	r3, r0, r3
 80187aa:	185b      	adds	r3, r3, r1
 80187ac:	1419      	asrs	r1, r3, #16
 80187ae:	b292      	uxth	r2, r2
 80187b0:	041b      	lsls	r3, r3, #16
 80187b2:	431a      	orrs	r2, r3
 80187b4:	9b03      	ldr	r3, [sp, #12]
 80187b6:	9104      	str	r1, [sp, #16]
 80187b8:	c504      	stmia	r5!, {r2}
 80187ba:	4563      	cmp	r3, ip
 80187bc:	d2dc      	bcs.n	8018778 <quorem+0x4e>
 80187be:	6823      	ldr	r3, [r4, #0]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d030      	beq.n	8018826 <quorem+0xfc>
 80187c4:	0030      	movs	r0, r6
 80187c6:	9902      	ldr	r1, [sp, #8]
 80187c8:	f001 f9c6 	bl	8019b58 <__mcmp>
 80187cc:	2800      	cmp	r0, #0
 80187ce:	db23      	blt.n	8018818 <quorem+0xee>
 80187d0:	0034      	movs	r4, r6
 80187d2:	2500      	movs	r5, #0
 80187d4:	9902      	ldr	r1, [sp, #8]
 80187d6:	3414      	adds	r4, #20
 80187d8:	3114      	adds	r1, #20
 80187da:	6823      	ldr	r3, [r4, #0]
 80187dc:	c901      	ldmia	r1!, {r0}
 80187de:	9302      	str	r3, [sp, #8]
 80187e0:	466b      	mov	r3, sp
 80187e2:	891b      	ldrh	r3, [r3, #8]
 80187e4:	b282      	uxth	r2, r0
 80187e6:	1a9a      	subs	r2, r3, r2
 80187e8:	9b02      	ldr	r3, [sp, #8]
 80187ea:	1952      	adds	r2, r2, r5
 80187ec:	0c00      	lsrs	r0, r0, #16
 80187ee:	0c1b      	lsrs	r3, r3, #16
 80187f0:	1a1b      	subs	r3, r3, r0
 80187f2:	1410      	asrs	r0, r2, #16
 80187f4:	181b      	adds	r3, r3, r0
 80187f6:	141d      	asrs	r5, r3, #16
 80187f8:	b292      	uxth	r2, r2
 80187fa:	041b      	lsls	r3, r3, #16
 80187fc:	431a      	orrs	r2, r3
 80187fe:	9b03      	ldr	r3, [sp, #12]
 8018800:	c404      	stmia	r4!, {r2}
 8018802:	428b      	cmp	r3, r1
 8018804:	d2e9      	bcs.n	80187da <quorem+0xb0>
 8018806:	9a01      	ldr	r2, [sp, #4]
 8018808:	00bb      	lsls	r3, r7, #2
 801880a:	18d3      	adds	r3, r2, r3
 801880c:	681a      	ldr	r2, [r3, #0]
 801880e:	2a00      	cmp	r2, #0
 8018810:	d013      	beq.n	801883a <quorem+0x110>
 8018812:	9b00      	ldr	r3, [sp, #0]
 8018814:	3301      	adds	r3, #1
 8018816:	9300      	str	r3, [sp, #0]
 8018818:	9800      	ldr	r0, [sp, #0]
 801881a:	b007      	add	sp, #28
 801881c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801881e:	6823      	ldr	r3, [r4, #0]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d104      	bne.n	801882e <quorem+0x104>
 8018824:	3f01      	subs	r7, #1
 8018826:	9b01      	ldr	r3, [sp, #4]
 8018828:	3c04      	subs	r4, #4
 801882a:	42a3      	cmp	r3, r4
 801882c:	d3f7      	bcc.n	801881e <quorem+0xf4>
 801882e:	6137      	str	r7, [r6, #16]
 8018830:	e7c8      	b.n	80187c4 <quorem+0x9a>
 8018832:	681a      	ldr	r2, [r3, #0]
 8018834:	2a00      	cmp	r2, #0
 8018836:	d104      	bne.n	8018842 <quorem+0x118>
 8018838:	3f01      	subs	r7, #1
 801883a:	9a01      	ldr	r2, [sp, #4]
 801883c:	3b04      	subs	r3, #4
 801883e:	429a      	cmp	r2, r3
 8018840:	d3f7      	bcc.n	8018832 <quorem+0x108>
 8018842:	6137      	str	r7, [r6, #16]
 8018844:	e7e5      	b.n	8018812 <quorem+0xe8>
	...

08018848 <_dtoa_r>:
 8018848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801884a:	0014      	movs	r4, r2
 801884c:	001d      	movs	r5, r3
 801884e:	69c6      	ldr	r6, [r0, #28]
 8018850:	b09d      	sub	sp, #116	@ 0x74
 8018852:	940a      	str	r4, [sp, #40]	@ 0x28
 8018854:	950b      	str	r5, [sp, #44]	@ 0x2c
 8018856:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8018858:	9003      	str	r0, [sp, #12]
 801885a:	2e00      	cmp	r6, #0
 801885c:	d10f      	bne.n	801887e <_dtoa_r+0x36>
 801885e:	2010      	movs	r0, #16
 8018860:	f000 fe30 	bl	80194c4 <malloc>
 8018864:	9b03      	ldr	r3, [sp, #12]
 8018866:	1e02      	subs	r2, r0, #0
 8018868:	61d8      	str	r0, [r3, #28]
 801886a:	d104      	bne.n	8018876 <_dtoa_r+0x2e>
 801886c:	21ef      	movs	r1, #239	@ 0xef
 801886e:	4bc7      	ldr	r3, [pc, #796]	@ (8018b8c <_dtoa_r+0x344>)
 8018870:	48c7      	ldr	r0, [pc, #796]	@ (8018b90 <_dtoa_r+0x348>)
 8018872:	f001 fea1 	bl	801a5b8 <__assert_func>
 8018876:	6046      	str	r6, [r0, #4]
 8018878:	6086      	str	r6, [r0, #8]
 801887a:	6006      	str	r6, [r0, #0]
 801887c:	60c6      	str	r6, [r0, #12]
 801887e:	9b03      	ldr	r3, [sp, #12]
 8018880:	69db      	ldr	r3, [r3, #28]
 8018882:	6819      	ldr	r1, [r3, #0]
 8018884:	2900      	cmp	r1, #0
 8018886:	d00b      	beq.n	80188a0 <_dtoa_r+0x58>
 8018888:	685a      	ldr	r2, [r3, #4]
 801888a:	2301      	movs	r3, #1
 801888c:	4093      	lsls	r3, r2
 801888e:	604a      	str	r2, [r1, #4]
 8018890:	608b      	str	r3, [r1, #8]
 8018892:	9803      	ldr	r0, [sp, #12]
 8018894:	f000 ff16 	bl	80196c4 <_Bfree>
 8018898:	2200      	movs	r2, #0
 801889a:	9b03      	ldr	r3, [sp, #12]
 801889c:	69db      	ldr	r3, [r3, #28]
 801889e:	601a      	str	r2, [r3, #0]
 80188a0:	2d00      	cmp	r5, #0
 80188a2:	da1e      	bge.n	80188e2 <_dtoa_r+0x9a>
 80188a4:	2301      	movs	r3, #1
 80188a6:	603b      	str	r3, [r7, #0]
 80188a8:	006b      	lsls	r3, r5, #1
 80188aa:	085b      	lsrs	r3, r3, #1
 80188ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80188ae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80188b0:	4bb8      	ldr	r3, [pc, #736]	@ (8018b94 <_dtoa_r+0x34c>)
 80188b2:	4ab8      	ldr	r2, [pc, #736]	@ (8018b94 <_dtoa_r+0x34c>)
 80188b4:	403b      	ands	r3, r7
 80188b6:	4293      	cmp	r3, r2
 80188b8:	d116      	bne.n	80188e8 <_dtoa_r+0xa0>
 80188ba:	4bb7      	ldr	r3, [pc, #732]	@ (8018b98 <_dtoa_r+0x350>)
 80188bc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80188be:	6013      	str	r3, [r2, #0]
 80188c0:	033b      	lsls	r3, r7, #12
 80188c2:	0b1b      	lsrs	r3, r3, #12
 80188c4:	4323      	orrs	r3, r4
 80188c6:	d101      	bne.n	80188cc <_dtoa_r+0x84>
 80188c8:	f000 fd83 	bl	80193d2 <_dtoa_r+0xb8a>
 80188cc:	4bb3      	ldr	r3, [pc, #716]	@ (8018b9c <_dtoa_r+0x354>)
 80188ce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80188d0:	9308      	str	r3, [sp, #32]
 80188d2:	2a00      	cmp	r2, #0
 80188d4:	d002      	beq.n	80188dc <_dtoa_r+0x94>
 80188d6:	4bb2      	ldr	r3, [pc, #712]	@ (8018ba0 <_dtoa_r+0x358>)
 80188d8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80188da:	6013      	str	r3, [r2, #0]
 80188dc:	9808      	ldr	r0, [sp, #32]
 80188de:	b01d      	add	sp, #116	@ 0x74
 80188e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188e2:	2300      	movs	r3, #0
 80188e4:	603b      	str	r3, [r7, #0]
 80188e6:	e7e2      	b.n	80188ae <_dtoa_r+0x66>
 80188e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80188ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80188ec:	9212      	str	r2, [sp, #72]	@ 0x48
 80188ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80188f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80188f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80188f4:	2200      	movs	r2, #0
 80188f6:	2300      	movs	r3, #0
 80188f8:	f7e7 fda8 	bl	800044c <__aeabi_dcmpeq>
 80188fc:	1e06      	subs	r6, r0, #0
 80188fe:	d00b      	beq.n	8018918 <_dtoa_r+0xd0>
 8018900:	2301      	movs	r3, #1
 8018902:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018904:	6013      	str	r3, [r2, #0]
 8018906:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018908:	2b00      	cmp	r3, #0
 801890a:	d002      	beq.n	8018912 <_dtoa_r+0xca>
 801890c:	4ba5      	ldr	r3, [pc, #660]	@ (8018ba4 <_dtoa_r+0x35c>)
 801890e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018910:	6013      	str	r3, [r2, #0]
 8018912:	4ba5      	ldr	r3, [pc, #660]	@ (8018ba8 <_dtoa_r+0x360>)
 8018914:	9308      	str	r3, [sp, #32]
 8018916:	e7e1      	b.n	80188dc <_dtoa_r+0x94>
 8018918:	ab1a      	add	r3, sp, #104	@ 0x68
 801891a:	9301      	str	r3, [sp, #4]
 801891c:	ab1b      	add	r3, sp, #108	@ 0x6c
 801891e:	9300      	str	r3, [sp, #0]
 8018920:	9803      	ldr	r0, [sp, #12]
 8018922:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018924:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018926:	f001 f9cd 	bl	8019cc4 <__d2b>
 801892a:	007a      	lsls	r2, r7, #1
 801892c:	9005      	str	r0, [sp, #20]
 801892e:	0d52      	lsrs	r2, r2, #21
 8018930:	d100      	bne.n	8018934 <_dtoa_r+0xec>
 8018932:	e07b      	b.n	8018a2c <_dtoa_r+0x1e4>
 8018934:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018936:	9618      	str	r6, [sp, #96]	@ 0x60
 8018938:	0319      	lsls	r1, r3, #12
 801893a:	4b9c      	ldr	r3, [pc, #624]	@ (8018bac <_dtoa_r+0x364>)
 801893c:	0b09      	lsrs	r1, r1, #12
 801893e:	430b      	orrs	r3, r1
 8018940:	499b      	ldr	r1, [pc, #620]	@ (8018bb0 <_dtoa_r+0x368>)
 8018942:	1857      	adds	r7, r2, r1
 8018944:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018946:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018948:	0019      	movs	r1, r3
 801894a:	2200      	movs	r2, #0
 801894c:	4b99      	ldr	r3, [pc, #612]	@ (8018bb4 <_dtoa_r+0x36c>)
 801894e:	f7ea f8bb 	bl	8002ac8 <__aeabi_dsub>
 8018952:	4a99      	ldr	r2, [pc, #612]	@ (8018bb8 <_dtoa_r+0x370>)
 8018954:	4b99      	ldr	r3, [pc, #612]	@ (8018bbc <_dtoa_r+0x374>)
 8018956:	f7e9 fdef 	bl	8002538 <__aeabi_dmul>
 801895a:	4a99      	ldr	r2, [pc, #612]	@ (8018bc0 <_dtoa_r+0x378>)
 801895c:	4b99      	ldr	r3, [pc, #612]	@ (8018bc4 <_dtoa_r+0x37c>)
 801895e:	f7e8 fe43 	bl	80015e8 <__aeabi_dadd>
 8018962:	0004      	movs	r4, r0
 8018964:	0038      	movs	r0, r7
 8018966:	000d      	movs	r5, r1
 8018968:	f7ea fca8 	bl	80032bc <__aeabi_i2d>
 801896c:	4a96      	ldr	r2, [pc, #600]	@ (8018bc8 <_dtoa_r+0x380>)
 801896e:	4b97      	ldr	r3, [pc, #604]	@ (8018bcc <_dtoa_r+0x384>)
 8018970:	f7e9 fde2 	bl	8002538 <__aeabi_dmul>
 8018974:	0002      	movs	r2, r0
 8018976:	000b      	movs	r3, r1
 8018978:	0020      	movs	r0, r4
 801897a:	0029      	movs	r1, r5
 801897c:	f7e8 fe34 	bl	80015e8 <__aeabi_dadd>
 8018980:	0004      	movs	r4, r0
 8018982:	000d      	movs	r5, r1
 8018984:	f7ea fc5e 	bl	8003244 <__aeabi_d2iz>
 8018988:	2200      	movs	r2, #0
 801898a:	9004      	str	r0, [sp, #16]
 801898c:	2300      	movs	r3, #0
 801898e:	0020      	movs	r0, r4
 8018990:	0029      	movs	r1, r5
 8018992:	f7e7 fd61 	bl	8000458 <__aeabi_dcmplt>
 8018996:	2800      	cmp	r0, #0
 8018998:	d00b      	beq.n	80189b2 <_dtoa_r+0x16a>
 801899a:	9804      	ldr	r0, [sp, #16]
 801899c:	f7ea fc8e 	bl	80032bc <__aeabi_i2d>
 80189a0:	002b      	movs	r3, r5
 80189a2:	0022      	movs	r2, r4
 80189a4:	f7e7 fd52 	bl	800044c <__aeabi_dcmpeq>
 80189a8:	4243      	negs	r3, r0
 80189aa:	4158      	adcs	r0, r3
 80189ac:	9b04      	ldr	r3, [sp, #16]
 80189ae:	1a1b      	subs	r3, r3, r0
 80189b0:	9304      	str	r3, [sp, #16]
 80189b2:	2301      	movs	r3, #1
 80189b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80189b6:	9b04      	ldr	r3, [sp, #16]
 80189b8:	2b16      	cmp	r3, #22
 80189ba:	d810      	bhi.n	80189de <_dtoa_r+0x196>
 80189bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80189be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80189c0:	9a04      	ldr	r2, [sp, #16]
 80189c2:	4b83      	ldr	r3, [pc, #524]	@ (8018bd0 <_dtoa_r+0x388>)
 80189c4:	00d2      	lsls	r2, r2, #3
 80189c6:	189b      	adds	r3, r3, r2
 80189c8:	681a      	ldr	r2, [r3, #0]
 80189ca:	685b      	ldr	r3, [r3, #4]
 80189cc:	f7e7 fd44 	bl	8000458 <__aeabi_dcmplt>
 80189d0:	2800      	cmp	r0, #0
 80189d2:	d047      	beq.n	8018a64 <_dtoa_r+0x21c>
 80189d4:	9b04      	ldr	r3, [sp, #16]
 80189d6:	3b01      	subs	r3, #1
 80189d8:	9304      	str	r3, [sp, #16]
 80189da:	2300      	movs	r3, #0
 80189dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80189de:	2200      	movs	r2, #0
 80189e0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80189e2:	9206      	str	r2, [sp, #24]
 80189e4:	1bdb      	subs	r3, r3, r7
 80189e6:	1e5a      	subs	r2, r3, #1
 80189e8:	d53e      	bpl.n	8018a68 <_dtoa_r+0x220>
 80189ea:	2201      	movs	r2, #1
 80189ec:	1ad3      	subs	r3, r2, r3
 80189ee:	9306      	str	r3, [sp, #24]
 80189f0:	2300      	movs	r3, #0
 80189f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80189f4:	9b04      	ldr	r3, [sp, #16]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	db38      	blt.n	8018a6c <_dtoa_r+0x224>
 80189fa:	9a04      	ldr	r2, [sp, #16]
 80189fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80189fe:	4694      	mov	ip, r2
 8018a00:	4463      	add	r3, ip
 8018a02:	930d      	str	r3, [sp, #52]	@ 0x34
 8018a04:	2300      	movs	r3, #0
 8018a06:	9214      	str	r2, [sp, #80]	@ 0x50
 8018a08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018a0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018a0c:	2401      	movs	r4, #1
 8018a0e:	2b09      	cmp	r3, #9
 8018a10:	d867      	bhi.n	8018ae2 <_dtoa_r+0x29a>
 8018a12:	2b05      	cmp	r3, #5
 8018a14:	dd02      	ble.n	8018a1c <_dtoa_r+0x1d4>
 8018a16:	2400      	movs	r4, #0
 8018a18:	3b04      	subs	r3, #4
 8018a1a:	9322      	str	r3, [sp, #136]	@ 0x88
 8018a1c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018a1e:	1e98      	subs	r0, r3, #2
 8018a20:	2803      	cmp	r0, #3
 8018a22:	d867      	bhi.n	8018af4 <_dtoa_r+0x2ac>
 8018a24:	f7e7 fb78 	bl	8000118 <__gnu_thumb1_case_uqi>
 8018a28:	5b383a2b 	.word	0x5b383a2b
 8018a2c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018a2e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018a30:	18f6      	adds	r6, r6, r3
 8018a32:	4b68      	ldr	r3, [pc, #416]	@ (8018bd4 <_dtoa_r+0x38c>)
 8018a34:	18f2      	adds	r2, r6, r3
 8018a36:	2a20      	cmp	r2, #32
 8018a38:	dd0f      	ble.n	8018a5a <_dtoa_r+0x212>
 8018a3a:	2340      	movs	r3, #64	@ 0x40
 8018a3c:	1a9b      	subs	r3, r3, r2
 8018a3e:	409f      	lsls	r7, r3
 8018a40:	4b65      	ldr	r3, [pc, #404]	@ (8018bd8 <_dtoa_r+0x390>)
 8018a42:	0038      	movs	r0, r7
 8018a44:	18f3      	adds	r3, r6, r3
 8018a46:	40dc      	lsrs	r4, r3
 8018a48:	4320      	orrs	r0, r4
 8018a4a:	f7ea fc65 	bl	8003318 <__aeabi_ui2d>
 8018a4e:	2201      	movs	r2, #1
 8018a50:	4b62      	ldr	r3, [pc, #392]	@ (8018bdc <_dtoa_r+0x394>)
 8018a52:	1e77      	subs	r7, r6, #1
 8018a54:	18cb      	adds	r3, r1, r3
 8018a56:	9218      	str	r2, [sp, #96]	@ 0x60
 8018a58:	e776      	b.n	8018948 <_dtoa_r+0x100>
 8018a5a:	2320      	movs	r3, #32
 8018a5c:	0020      	movs	r0, r4
 8018a5e:	1a9b      	subs	r3, r3, r2
 8018a60:	4098      	lsls	r0, r3
 8018a62:	e7f2      	b.n	8018a4a <_dtoa_r+0x202>
 8018a64:	9015      	str	r0, [sp, #84]	@ 0x54
 8018a66:	e7ba      	b.n	80189de <_dtoa_r+0x196>
 8018a68:	920d      	str	r2, [sp, #52]	@ 0x34
 8018a6a:	e7c3      	b.n	80189f4 <_dtoa_r+0x1ac>
 8018a6c:	9b06      	ldr	r3, [sp, #24]
 8018a6e:	9a04      	ldr	r2, [sp, #16]
 8018a70:	1a9b      	subs	r3, r3, r2
 8018a72:	9306      	str	r3, [sp, #24]
 8018a74:	4253      	negs	r3, r2
 8018a76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018a78:	2300      	movs	r3, #0
 8018a7a:	9314      	str	r3, [sp, #80]	@ 0x50
 8018a7c:	e7c5      	b.n	8018a0a <_dtoa_r+0x1c2>
 8018a7e:	2300      	movs	r3, #0
 8018a80:	9310      	str	r3, [sp, #64]	@ 0x40
 8018a82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018a84:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	dc13      	bgt.n	8018ab4 <_dtoa_r+0x26c>
 8018a8c:	2301      	movs	r3, #1
 8018a8e:	001a      	movs	r2, r3
 8018a90:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a94:	9223      	str	r2, [sp, #140]	@ 0x8c
 8018a96:	e00d      	b.n	8018ab4 <_dtoa_r+0x26c>
 8018a98:	2301      	movs	r3, #1
 8018a9a:	e7f1      	b.n	8018a80 <_dtoa_r+0x238>
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018aa0:	9310      	str	r3, [sp, #64]	@ 0x40
 8018aa2:	4694      	mov	ip, r2
 8018aa4:	9b04      	ldr	r3, [sp, #16]
 8018aa6:	4463      	add	r3, ip
 8018aa8:	930e      	str	r3, [sp, #56]	@ 0x38
 8018aaa:	3301      	adds	r3, #1
 8018aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	dc00      	bgt.n	8018ab4 <_dtoa_r+0x26c>
 8018ab2:	2301      	movs	r3, #1
 8018ab4:	9a03      	ldr	r2, [sp, #12]
 8018ab6:	2100      	movs	r1, #0
 8018ab8:	69d0      	ldr	r0, [r2, #28]
 8018aba:	2204      	movs	r2, #4
 8018abc:	0015      	movs	r5, r2
 8018abe:	3514      	adds	r5, #20
 8018ac0:	429d      	cmp	r5, r3
 8018ac2:	d91b      	bls.n	8018afc <_dtoa_r+0x2b4>
 8018ac4:	6041      	str	r1, [r0, #4]
 8018ac6:	9803      	ldr	r0, [sp, #12]
 8018ac8:	f000 fdb8 	bl	801963c <_Balloc>
 8018acc:	9008      	str	r0, [sp, #32]
 8018ace:	2800      	cmp	r0, #0
 8018ad0:	d117      	bne.n	8018b02 <_dtoa_r+0x2ba>
 8018ad2:	21b0      	movs	r1, #176	@ 0xb0
 8018ad4:	4b42      	ldr	r3, [pc, #264]	@ (8018be0 <_dtoa_r+0x398>)
 8018ad6:	482e      	ldr	r0, [pc, #184]	@ (8018b90 <_dtoa_r+0x348>)
 8018ad8:	9a08      	ldr	r2, [sp, #32]
 8018ada:	31ff      	adds	r1, #255	@ 0xff
 8018adc:	e6c9      	b.n	8018872 <_dtoa_r+0x2a>
 8018ade:	2301      	movs	r3, #1
 8018ae0:	e7dd      	b.n	8018a9e <_dtoa_r+0x256>
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	9410      	str	r4, [sp, #64]	@ 0x40
 8018ae6:	9322      	str	r3, [sp, #136]	@ 0x88
 8018ae8:	3b01      	subs	r3, #1
 8018aea:	930e      	str	r3, [sp, #56]	@ 0x38
 8018aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8018aee:	2200      	movs	r2, #0
 8018af0:	3313      	adds	r3, #19
 8018af2:	e7cf      	b.n	8018a94 <_dtoa_r+0x24c>
 8018af4:	2301      	movs	r3, #1
 8018af6:	9310      	str	r3, [sp, #64]	@ 0x40
 8018af8:	3b02      	subs	r3, #2
 8018afa:	e7f6      	b.n	8018aea <_dtoa_r+0x2a2>
 8018afc:	3101      	adds	r1, #1
 8018afe:	0052      	lsls	r2, r2, #1
 8018b00:	e7dc      	b.n	8018abc <_dtoa_r+0x274>
 8018b02:	9b03      	ldr	r3, [sp, #12]
 8018b04:	9a08      	ldr	r2, [sp, #32]
 8018b06:	69db      	ldr	r3, [r3, #28]
 8018b08:	601a      	str	r2, [r3, #0]
 8018b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b0c:	2b0e      	cmp	r3, #14
 8018b0e:	d900      	bls.n	8018b12 <_dtoa_r+0x2ca>
 8018b10:	e0d9      	b.n	8018cc6 <_dtoa_r+0x47e>
 8018b12:	2c00      	cmp	r4, #0
 8018b14:	d100      	bne.n	8018b18 <_dtoa_r+0x2d0>
 8018b16:	e0d6      	b.n	8018cc6 <_dtoa_r+0x47e>
 8018b18:	9b04      	ldr	r3, [sp, #16]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	dd64      	ble.n	8018be8 <_dtoa_r+0x3a0>
 8018b1e:	210f      	movs	r1, #15
 8018b20:	9a04      	ldr	r2, [sp, #16]
 8018b22:	4b2b      	ldr	r3, [pc, #172]	@ (8018bd0 <_dtoa_r+0x388>)
 8018b24:	400a      	ands	r2, r1
 8018b26:	00d2      	lsls	r2, r2, #3
 8018b28:	189b      	adds	r3, r3, r2
 8018b2a:	681e      	ldr	r6, [r3, #0]
 8018b2c:	685f      	ldr	r7, [r3, #4]
 8018b2e:	9b04      	ldr	r3, [sp, #16]
 8018b30:	2402      	movs	r4, #2
 8018b32:	111d      	asrs	r5, r3, #4
 8018b34:	05db      	lsls	r3, r3, #23
 8018b36:	d50a      	bpl.n	8018b4e <_dtoa_r+0x306>
 8018b38:	4b2a      	ldr	r3, [pc, #168]	@ (8018be4 <_dtoa_r+0x39c>)
 8018b3a:	400d      	ands	r5, r1
 8018b3c:	6a1a      	ldr	r2, [r3, #32]
 8018b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b40:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018b42:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018b44:	f7e9 f8b4 	bl	8001cb0 <__aeabi_ddiv>
 8018b48:	900a      	str	r0, [sp, #40]	@ 0x28
 8018b4a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018b4c:	3401      	adds	r4, #1
 8018b4e:	4b25      	ldr	r3, [pc, #148]	@ (8018be4 <_dtoa_r+0x39c>)
 8018b50:	930c      	str	r3, [sp, #48]	@ 0x30
 8018b52:	2d00      	cmp	r5, #0
 8018b54:	d108      	bne.n	8018b68 <_dtoa_r+0x320>
 8018b56:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018b58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018b5a:	0032      	movs	r2, r6
 8018b5c:	003b      	movs	r3, r7
 8018b5e:	f7e9 f8a7 	bl	8001cb0 <__aeabi_ddiv>
 8018b62:	900a      	str	r0, [sp, #40]	@ 0x28
 8018b64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018b66:	e05a      	b.n	8018c1e <_dtoa_r+0x3d6>
 8018b68:	2301      	movs	r3, #1
 8018b6a:	421d      	tst	r5, r3
 8018b6c:	d009      	beq.n	8018b82 <_dtoa_r+0x33a>
 8018b6e:	18e4      	adds	r4, r4, r3
 8018b70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b72:	0030      	movs	r0, r6
 8018b74:	681a      	ldr	r2, [r3, #0]
 8018b76:	685b      	ldr	r3, [r3, #4]
 8018b78:	0039      	movs	r1, r7
 8018b7a:	f7e9 fcdd 	bl	8002538 <__aeabi_dmul>
 8018b7e:	0006      	movs	r6, r0
 8018b80:	000f      	movs	r7, r1
 8018b82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b84:	106d      	asrs	r5, r5, #1
 8018b86:	3308      	adds	r3, #8
 8018b88:	e7e2      	b.n	8018b50 <_dtoa_r+0x308>
 8018b8a:	46c0      	nop			@ (mov r8, r8)
 8018b8c:	0801c351 	.word	0x0801c351
 8018b90:	0801c368 	.word	0x0801c368
 8018b94:	7ff00000 	.word	0x7ff00000
 8018b98:	0000270f 	.word	0x0000270f
 8018b9c:	0801c34d 	.word	0x0801c34d
 8018ba0:	0801c350 	.word	0x0801c350
 8018ba4:	0801c321 	.word	0x0801c321
 8018ba8:	0801c320 	.word	0x0801c320
 8018bac:	3ff00000 	.word	0x3ff00000
 8018bb0:	fffffc01 	.word	0xfffffc01
 8018bb4:	3ff80000 	.word	0x3ff80000
 8018bb8:	636f4361 	.word	0x636f4361
 8018bbc:	3fd287a7 	.word	0x3fd287a7
 8018bc0:	8b60c8b3 	.word	0x8b60c8b3
 8018bc4:	3fc68a28 	.word	0x3fc68a28
 8018bc8:	509f79fb 	.word	0x509f79fb
 8018bcc:	3fd34413 	.word	0x3fd34413
 8018bd0:	0801c460 	.word	0x0801c460
 8018bd4:	00000432 	.word	0x00000432
 8018bd8:	00000412 	.word	0x00000412
 8018bdc:	fe100000 	.word	0xfe100000
 8018be0:	0801c3c0 	.word	0x0801c3c0
 8018be4:	0801c438 	.word	0x0801c438
 8018be8:	9b04      	ldr	r3, [sp, #16]
 8018bea:	2402      	movs	r4, #2
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d016      	beq.n	8018c1e <_dtoa_r+0x3d6>
 8018bf0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018bf2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018bf4:	220f      	movs	r2, #15
 8018bf6:	425d      	negs	r5, r3
 8018bf8:	402a      	ands	r2, r5
 8018bfa:	4bd7      	ldr	r3, [pc, #860]	@ (8018f58 <_dtoa_r+0x710>)
 8018bfc:	00d2      	lsls	r2, r2, #3
 8018bfe:	189b      	adds	r3, r3, r2
 8018c00:	681a      	ldr	r2, [r3, #0]
 8018c02:	685b      	ldr	r3, [r3, #4]
 8018c04:	f7e9 fc98 	bl	8002538 <__aeabi_dmul>
 8018c08:	2701      	movs	r7, #1
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8018c0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018c10:	4ed2      	ldr	r6, [pc, #840]	@ (8018f5c <_dtoa_r+0x714>)
 8018c12:	112d      	asrs	r5, r5, #4
 8018c14:	2d00      	cmp	r5, #0
 8018c16:	d000      	beq.n	8018c1a <_dtoa_r+0x3d2>
 8018c18:	e0ba      	b.n	8018d90 <_dtoa_r+0x548>
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d1a1      	bne.n	8018b62 <_dtoa_r+0x31a>
 8018c1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018c20:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018c22:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d100      	bne.n	8018c2a <_dtoa_r+0x3e2>
 8018c28:	e0bd      	b.n	8018da6 <_dtoa_r+0x55e>
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	0030      	movs	r0, r6
 8018c2e:	0039      	movs	r1, r7
 8018c30:	4bcb      	ldr	r3, [pc, #812]	@ (8018f60 <_dtoa_r+0x718>)
 8018c32:	f7e7 fc11 	bl	8000458 <__aeabi_dcmplt>
 8018c36:	2800      	cmp	r0, #0
 8018c38:	d100      	bne.n	8018c3c <_dtoa_r+0x3f4>
 8018c3a:	e0b4      	b.n	8018da6 <_dtoa_r+0x55e>
 8018c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d100      	bne.n	8018c44 <_dtoa_r+0x3fc>
 8018c42:	e0b0      	b.n	8018da6 <_dtoa_r+0x55e>
 8018c44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	dd39      	ble.n	8018cbe <_dtoa_r+0x476>
 8018c4a:	9b04      	ldr	r3, [sp, #16]
 8018c4c:	2200      	movs	r2, #0
 8018c4e:	3b01      	subs	r3, #1
 8018c50:	930c      	str	r3, [sp, #48]	@ 0x30
 8018c52:	0030      	movs	r0, r6
 8018c54:	4bc3      	ldr	r3, [pc, #780]	@ (8018f64 <_dtoa_r+0x71c>)
 8018c56:	0039      	movs	r1, r7
 8018c58:	f7e9 fc6e 	bl	8002538 <__aeabi_dmul>
 8018c5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8018c5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018c60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c62:	3401      	adds	r4, #1
 8018c64:	0020      	movs	r0, r4
 8018c66:	9311      	str	r3, [sp, #68]	@ 0x44
 8018c68:	f7ea fb28 	bl	80032bc <__aeabi_i2d>
 8018c6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018c6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018c70:	f7e9 fc62 	bl	8002538 <__aeabi_dmul>
 8018c74:	4bbc      	ldr	r3, [pc, #752]	@ (8018f68 <_dtoa_r+0x720>)
 8018c76:	2200      	movs	r2, #0
 8018c78:	f7e8 fcb6 	bl	80015e8 <__aeabi_dadd>
 8018c7c:	4bbb      	ldr	r3, [pc, #748]	@ (8018f6c <_dtoa_r+0x724>)
 8018c7e:	0006      	movs	r6, r0
 8018c80:	18cf      	adds	r7, r1, r3
 8018c82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d000      	beq.n	8018c8a <_dtoa_r+0x442>
 8018c88:	e091      	b.n	8018dae <_dtoa_r+0x566>
 8018c8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018c8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018c8e:	2200      	movs	r2, #0
 8018c90:	4bb7      	ldr	r3, [pc, #732]	@ (8018f70 <_dtoa_r+0x728>)
 8018c92:	f7e9 ff19 	bl	8002ac8 <__aeabi_dsub>
 8018c96:	0032      	movs	r2, r6
 8018c98:	003b      	movs	r3, r7
 8018c9a:	0004      	movs	r4, r0
 8018c9c:	000d      	movs	r5, r1
 8018c9e:	f7e7 fbef 	bl	8000480 <__aeabi_dcmpgt>
 8018ca2:	2800      	cmp	r0, #0
 8018ca4:	d000      	beq.n	8018ca8 <_dtoa_r+0x460>
 8018ca6:	e29d      	b.n	80191e4 <_dtoa_r+0x99c>
 8018ca8:	2180      	movs	r1, #128	@ 0x80
 8018caa:	0609      	lsls	r1, r1, #24
 8018cac:	187b      	adds	r3, r7, r1
 8018cae:	0032      	movs	r2, r6
 8018cb0:	0020      	movs	r0, r4
 8018cb2:	0029      	movs	r1, r5
 8018cb4:	f7e7 fbd0 	bl	8000458 <__aeabi_dcmplt>
 8018cb8:	2800      	cmp	r0, #0
 8018cba:	d000      	beq.n	8018cbe <_dtoa_r+0x476>
 8018cbc:	e130      	b.n	8018f20 <_dtoa_r+0x6d8>
 8018cbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018cc0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018cc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8018cc4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018cc6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	da00      	bge.n	8018cce <_dtoa_r+0x486>
 8018ccc:	e177      	b.n	8018fbe <_dtoa_r+0x776>
 8018cce:	9a04      	ldr	r2, [sp, #16]
 8018cd0:	2a0e      	cmp	r2, #14
 8018cd2:	dd00      	ble.n	8018cd6 <_dtoa_r+0x48e>
 8018cd4:	e173      	b.n	8018fbe <_dtoa_r+0x776>
 8018cd6:	4ba0      	ldr	r3, [pc, #640]	@ (8018f58 <_dtoa_r+0x710>)
 8018cd8:	00d2      	lsls	r2, r2, #3
 8018cda:	189b      	adds	r3, r3, r2
 8018cdc:	685c      	ldr	r4, [r3, #4]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	9306      	str	r3, [sp, #24]
 8018ce2:	9407      	str	r4, [sp, #28]
 8018ce4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	da03      	bge.n	8018cf2 <_dtoa_r+0x4aa>
 8018cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	dc00      	bgt.n	8018cf2 <_dtoa_r+0x4aa>
 8018cf0:	e106      	b.n	8018f00 <_dtoa_r+0x6b8>
 8018cf2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018cf4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cf8:	9d08      	ldr	r5, [sp, #32]
 8018cfa:	3b01      	subs	r3, #1
 8018cfc:	195b      	adds	r3, r3, r5
 8018cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d00:	9a06      	ldr	r2, [sp, #24]
 8018d02:	9b07      	ldr	r3, [sp, #28]
 8018d04:	0030      	movs	r0, r6
 8018d06:	0039      	movs	r1, r7
 8018d08:	f7e8 ffd2 	bl	8001cb0 <__aeabi_ddiv>
 8018d0c:	f7ea fa9a 	bl	8003244 <__aeabi_d2iz>
 8018d10:	9009      	str	r0, [sp, #36]	@ 0x24
 8018d12:	f7ea fad3 	bl	80032bc <__aeabi_i2d>
 8018d16:	9a06      	ldr	r2, [sp, #24]
 8018d18:	9b07      	ldr	r3, [sp, #28]
 8018d1a:	f7e9 fc0d 	bl	8002538 <__aeabi_dmul>
 8018d1e:	0002      	movs	r2, r0
 8018d20:	000b      	movs	r3, r1
 8018d22:	0030      	movs	r0, r6
 8018d24:	0039      	movs	r1, r7
 8018d26:	f7e9 fecf 	bl	8002ac8 <__aeabi_dsub>
 8018d2a:	002b      	movs	r3, r5
 8018d2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d2e:	3501      	adds	r5, #1
 8018d30:	3230      	adds	r2, #48	@ 0x30
 8018d32:	701a      	strb	r2, [r3, #0]
 8018d34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018d36:	002c      	movs	r4, r5
 8018d38:	429a      	cmp	r2, r3
 8018d3a:	d000      	beq.n	8018d3e <_dtoa_r+0x4f6>
 8018d3c:	e131      	b.n	8018fa2 <_dtoa_r+0x75a>
 8018d3e:	0002      	movs	r2, r0
 8018d40:	000b      	movs	r3, r1
 8018d42:	f7e8 fc51 	bl	80015e8 <__aeabi_dadd>
 8018d46:	9a06      	ldr	r2, [sp, #24]
 8018d48:	9b07      	ldr	r3, [sp, #28]
 8018d4a:	0006      	movs	r6, r0
 8018d4c:	000f      	movs	r7, r1
 8018d4e:	f7e7 fb97 	bl	8000480 <__aeabi_dcmpgt>
 8018d52:	2800      	cmp	r0, #0
 8018d54:	d000      	beq.n	8018d58 <_dtoa_r+0x510>
 8018d56:	e10f      	b.n	8018f78 <_dtoa_r+0x730>
 8018d58:	9a06      	ldr	r2, [sp, #24]
 8018d5a:	9b07      	ldr	r3, [sp, #28]
 8018d5c:	0030      	movs	r0, r6
 8018d5e:	0039      	movs	r1, r7
 8018d60:	f7e7 fb74 	bl	800044c <__aeabi_dcmpeq>
 8018d64:	2800      	cmp	r0, #0
 8018d66:	d003      	beq.n	8018d70 <_dtoa_r+0x528>
 8018d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d6a:	07dd      	lsls	r5, r3, #31
 8018d6c:	d500      	bpl.n	8018d70 <_dtoa_r+0x528>
 8018d6e:	e103      	b.n	8018f78 <_dtoa_r+0x730>
 8018d70:	9905      	ldr	r1, [sp, #20]
 8018d72:	9803      	ldr	r0, [sp, #12]
 8018d74:	f000 fca6 	bl	80196c4 <_Bfree>
 8018d78:	2300      	movs	r3, #0
 8018d7a:	7023      	strb	r3, [r4, #0]
 8018d7c:	9b04      	ldr	r3, [sp, #16]
 8018d7e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018d80:	3301      	adds	r3, #1
 8018d82:	6013      	str	r3, [r2, #0]
 8018d84:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d100      	bne.n	8018d8c <_dtoa_r+0x544>
 8018d8a:	e5a7      	b.n	80188dc <_dtoa_r+0x94>
 8018d8c:	601c      	str	r4, [r3, #0]
 8018d8e:	e5a5      	b.n	80188dc <_dtoa_r+0x94>
 8018d90:	423d      	tst	r5, r7
 8018d92:	d005      	beq.n	8018da0 <_dtoa_r+0x558>
 8018d94:	6832      	ldr	r2, [r6, #0]
 8018d96:	6873      	ldr	r3, [r6, #4]
 8018d98:	f7e9 fbce 	bl	8002538 <__aeabi_dmul>
 8018d9c:	003b      	movs	r3, r7
 8018d9e:	3401      	adds	r4, #1
 8018da0:	106d      	asrs	r5, r5, #1
 8018da2:	3608      	adds	r6, #8
 8018da4:	e736      	b.n	8018c14 <_dtoa_r+0x3cc>
 8018da6:	9b04      	ldr	r3, [sp, #16]
 8018da8:	930c      	str	r3, [sp, #48]	@ 0x30
 8018daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018dac:	e75a      	b.n	8018c64 <_dtoa_r+0x41c>
 8018dae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018db0:	4b69      	ldr	r3, [pc, #420]	@ (8018f58 <_dtoa_r+0x710>)
 8018db2:	3a01      	subs	r2, #1
 8018db4:	00d2      	lsls	r2, r2, #3
 8018db6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018db8:	189b      	adds	r3, r3, r2
 8018dba:	681a      	ldr	r2, [r3, #0]
 8018dbc:	685b      	ldr	r3, [r3, #4]
 8018dbe:	2900      	cmp	r1, #0
 8018dc0:	d04c      	beq.n	8018e5c <_dtoa_r+0x614>
 8018dc2:	2000      	movs	r0, #0
 8018dc4:	496b      	ldr	r1, [pc, #428]	@ (8018f74 <_dtoa_r+0x72c>)
 8018dc6:	f7e8 ff73 	bl	8001cb0 <__aeabi_ddiv>
 8018dca:	0032      	movs	r2, r6
 8018dcc:	003b      	movs	r3, r7
 8018dce:	f7e9 fe7b 	bl	8002ac8 <__aeabi_dsub>
 8018dd2:	9a08      	ldr	r2, [sp, #32]
 8018dd4:	0006      	movs	r6, r0
 8018dd6:	4694      	mov	ip, r2
 8018dd8:	000f      	movs	r7, r1
 8018dda:	9b08      	ldr	r3, [sp, #32]
 8018ddc:	9316      	str	r3, [sp, #88]	@ 0x58
 8018dde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018de0:	4463      	add	r3, ip
 8018de2:	9311      	str	r3, [sp, #68]	@ 0x44
 8018de4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018de6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018de8:	f7ea fa2c 	bl	8003244 <__aeabi_d2iz>
 8018dec:	0005      	movs	r5, r0
 8018dee:	f7ea fa65 	bl	80032bc <__aeabi_i2d>
 8018df2:	0002      	movs	r2, r0
 8018df4:	000b      	movs	r3, r1
 8018df6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018df8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018dfa:	f7e9 fe65 	bl	8002ac8 <__aeabi_dsub>
 8018dfe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018e00:	3530      	adds	r5, #48	@ 0x30
 8018e02:	1c5c      	adds	r4, r3, #1
 8018e04:	701d      	strb	r5, [r3, #0]
 8018e06:	0032      	movs	r2, r6
 8018e08:	003b      	movs	r3, r7
 8018e0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8018e0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018e0e:	f7e7 fb23 	bl	8000458 <__aeabi_dcmplt>
 8018e12:	2800      	cmp	r0, #0
 8018e14:	d16a      	bne.n	8018eec <_dtoa_r+0x6a4>
 8018e16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e1a:	2000      	movs	r0, #0
 8018e1c:	4950      	ldr	r1, [pc, #320]	@ (8018f60 <_dtoa_r+0x718>)
 8018e1e:	f7e9 fe53 	bl	8002ac8 <__aeabi_dsub>
 8018e22:	0032      	movs	r2, r6
 8018e24:	003b      	movs	r3, r7
 8018e26:	f7e7 fb17 	bl	8000458 <__aeabi_dcmplt>
 8018e2a:	2800      	cmp	r0, #0
 8018e2c:	d000      	beq.n	8018e30 <_dtoa_r+0x5e8>
 8018e2e:	e0a5      	b.n	8018f7c <_dtoa_r+0x734>
 8018e30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018e32:	42a3      	cmp	r3, r4
 8018e34:	d100      	bne.n	8018e38 <_dtoa_r+0x5f0>
 8018e36:	e742      	b.n	8018cbe <_dtoa_r+0x476>
 8018e38:	2200      	movs	r2, #0
 8018e3a:	0030      	movs	r0, r6
 8018e3c:	0039      	movs	r1, r7
 8018e3e:	4b49      	ldr	r3, [pc, #292]	@ (8018f64 <_dtoa_r+0x71c>)
 8018e40:	f7e9 fb7a 	bl	8002538 <__aeabi_dmul>
 8018e44:	2200      	movs	r2, #0
 8018e46:	0006      	movs	r6, r0
 8018e48:	000f      	movs	r7, r1
 8018e4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018e4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018e4e:	4b45      	ldr	r3, [pc, #276]	@ (8018f64 <_dtoa_r+0x71c>)
 8018e50:	f7e9 fb72 	bl	8002538 <__aeabi_dmul>
 8018e54:	9416      	str	r4, [sp, #88]	@ 0x58
 8018e56:	900a      	str	r0, [sp, #40]	@ 0x28
 8018e58:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018e5a:	e7c3      	b.n	8018de4 <_dtoa_r+0x59c>
 8018e5c:	0030      	movs	r0, r6
 8018e5e:	0039      	movs	r1, r7
 8018e60:	f7e9 fb6a 	bl	8002538 <__aeabi_dmul>
 8018e64:	9d08      	ldr	r5, [sp, #32]
 8018e66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018e68:	002b      	movs	r3, r5
 8018e6a:	4694      	mov	ip, r2
 8018e6c:	9016      	str	r0, [sp, #88]	@ 0x58
 8018e6e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018e70:	4463      	add	r3, ip
 8018e72:	9319      	str	r3, [sp, #100]	@ 0x64
 8018e74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018e76:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018e78:	f7ea f9e4 	bl	8003244 <__aeabi_d2iz>
 8018e7c:	0004      	movs	r4, r0
 8018e7e:	f7ea fa1d 	bl	80032bc <__aeabi_i2d>
 8018e82:	000b      	movs	r3, r1
 8018e84:	0002      	movs	r2, r0
 8018e86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018e8a:	f7e9 fe1d 	bl	8002ac8 <__aeabi_dsub>
 8018e8e:	3430      	adds	r4, #48	@ 0x30
 8018e90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018e92:	702c      	strb	r4, [r5, #0]
 8018e94:	3501      	adds	r5, #1
 8018e96:	0006      	movs	r6, r0
 8018e98:	000f      	movs	r7, r1
 8018e9a:	42ab      	cmp	r3, r5
 8018e9c:	d129      	bne.n	8018ef2 <_dtoa_r+0x6aa>
 8018e9e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8018ea0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018ea2:	9b08      	ldr	r3, [sp, #32]
 8018ea4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018ea6:	469c      	mov	ip, r3
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	4b32      	ldr	r3, [pc, #200]	@ (8018f74 <_dtoa_r+0x72c>)
 8018eac:	4464      	add	r4, ip
 8018eae:	f7e8 fb9b 	bl	80015e8 <__aeabi_dadd>
 8018eb2:	0002      	movs	r2, r0
 8018eb4:	000b      	movs	r3, r1
 8018eb6:	0030      	movs	r0, r6
 8018eb8:	0039      	movs	r1, r7
 8018eba:	f7e7 fae1 	bl	8000480 <__aeabi_dcmpgt>
 8018ebe:	2800      	cmp	r0, #0
 8018ec0:	d15c      	bne.n	8018f7c <_dtoa_r+0x734>
 8018ec2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018ec4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018ec6:	2000      	movs	r0, #0
 8018ec8:	492a      	ldr	r1, [pc, #168]	@ (8018f74 <_dtoa_r+0x72c>)
 8018eca:	f7e9 fdfd 	bl	8002ac8 <__aeabi_dsub>
 8018ece:	0002      	movs	r2, r0
 8018ed0:	000b      	movs	r3, r1
 8018ed2:	0030      	movs	r0, r6
 8018ed4:	0039      	movs	r1, r7
 8018ed6:	f7e7 fabf 	bl	8000458 <__aeabi_dcmplt>
 8018eda:	2800      	cmp	r0, #0
 8018edc:	d100      	bne.n	8018ee0 <_dtoa_r+0x698>
 8018ede:	e6ee      	b.n	8018cbe <_dtoa_r+0x476>
 8018ee0:	0023      	movs	r3, r4
 8018ee2:	3c01      	subs	r4, #1
 8018ee4:	7822      	ldrb	r2, [r4, #0]
 8018ee6:	2a30      	cmp	r2, #48	@ 0x30
 8018ee8:	d0fa      	beq.n	8018ee0 <_dtoa_r+0x698>
 8018eea:	001c      	movs	r4, r3
 8018eec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018eee:	9304      	str	r3, [sp, #16]
 8018ef0:	e73e      	b.n	8018d70 <_dtoa_r+0x528>
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8018f64 <_dtoa_r+0x71c>)
 8018ef6:	f7e9 fb1f 	bl	8002538 <__aeabi_dmul>
 8018efa:	900a      	str	r0, [sp, #40]	@ 0x28
 8018efc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018efe:	e7b9      	b.n	8018e74 <_dtoa_r+0x62c>
 8018f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d10c      	bne.n	8018f20 <_dtoa_r+0x6d8>
 8018f06:	9806      	ldr	r0, [sp, #24]
 8018f08:	9907      	ldr	r1, [sp, #28]
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	4b18      	ldr	r3, [pc, #96]	@ (8018f70 <_dtoa_r+0x728>)
 8018f0e:	f7e9 fb13 	bl	8002538 <__aeabi_dmul>
 8018f12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018f14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018f16:	f7e7 fabd 	bl	8000494 <__aeabi_dcmpge>
 8018f1a:	2800      	cmp	r0, #0
 8018f1c:	d100      	bne.n	8018f20 <_dtoa_r+0x6d8>
 8018f1e:	e164      	b.n	80191ea <_dtoa_r+0x9a2>
 8018f20:	2600      	movs	r6, #0
 8018f22:	0037      	movs	r7, r6
 8018f24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018f26:	9c08      	ldr	r4, [sp, #32]
 8018f28:	43db      	mvns	r3, r3
 8018f2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	9304      	str	r3, [sp, #16]
 8018f30:	0031      	movs	r1, r6
 8018f32:	9803      	ldr	r0, [sp, #12]
 8018f34:	f000 fbc6 	bl	80196c4 <_Bfree>
 8018f38:	2f00      	cmp	r7, #0
 8018f3a:	d0d7      	beq.n	8018eec <_dtoa_r+0x6a4>
 8018f3c:	9b04      	ldr	r3, [sp, #16]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d005      	beq.n	8018f4e <_dtoa_r+0x706>
 8018f42:	42bb      	cmp	r3, r7
 8018f44:	d003      	beq.n	8018f4e <_dtoa_r+0x706>
 8018f46:	0019      	movs	r1, r3
 8018f48:	9803      	ldr	r0, [sp, #12]
 8018f4a:	f000 fbbb 	bl	80196c4 <_Bfree>
 8018f4e:	0039      	movs	r1, r7
 8018f50:	9803      	ldr	r0, [sp, #12]
 8018f52:	f000 fbb7 	bl	80196c4 <_Bfree>
 8018f56:	e7c9      	b.n	8018eec <_dtoa_r+0x6a4>
 8018f58:	0801c460 	.word	0x0801c460
 8018f5c:	0801c438 	.word	0x0801c438
 8018f60:	3ff00000 	.word	0x3ff00000
 8018f64:	40240000 	.word	0x40240000
 8018f68:	401c0000 	.word	0x401c0000
 8018f6c:	fcc00000 	.word	0xfcc00000
 8018f70:	40140000 	.word	0x40140000
 8018f74:	3fe00000 	.word	0x3fe00000
 8018f78:	9b04      	ldr	r3, [sp, #16]
 8018f7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8018f7c:	0023      	movs	r3, r4
 8018f7e:	001c      	movs	r4, r3
 8018f80:	3b01      	subs	r3, #1
 8018f82:	781a      	ldrb	r2, [r3, #0]
 8018f84:	2a39      	cmp	r2, #57	@ 0x39
 8018f86:	d108      	bne.n	8018f9a <_dtoa_r+0x752>
 8018f88:	9a08      	ldr	r2, [sp, #32]
 8018f8a:	429a      	cmp	r2, r3
 8018f8c:	d1f7      	bne.n	8018f7e <_dtoa_r+0x736>
 8018f8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018f90:	9908      	ldr	r1, [sp, #32]
 8018f92:	3201      	adds	r2, #1
 8018f94:	920c      	str	r2, [sp, #48]	@ 0x30
 8018f96:	2230      	movs	r2, #48	@ 0x30
 8018f98:	700a      	strb	r2, [r1, #0]
 8018f9a:	781a      	ldrb	r2, [r3, #0]
 8018f9c:	3201      	adds	r2, #1
 8018f9e:	701a      	strb	r2, [r3, #0]
 8018fa0:	e7a4      	b.n	8018eec <_dtoa_r+0x6a4>
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	4bc6      	ldr	r3, [pc, #792]	@ (80192c0 <_dtoa_r+0xa78>)
 8018fa6:	f7e9 fac7 	bl	8002538 <__aeabi_dmul>
 8018faa:	2200      	movs	r2, #0
 8018fac:	2300      	movs	r3, #0
 8018fae:	0006      	movs	r6, r0
 8018fb0:	000f      	movs	r7, r1
 8018fb2:	f7e7 fa4b 	bl	800044c <__aeabi_dcmpeq>
 8018fb6:	2800      	cmp	r0, #0
 8018fb8:	d100      	bne.n	8018fbc <_dtoa_r+0x774>
 8018fba:	e6a1      	b.n	8018d00 <_dtoa_r+0x4b8>
 8018fbc:	e6d8      	b.n	8018d70 <_dtoa_r+0x528>
 8018fbe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018fc0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018fc2:	9c06      	ldr	r4, [sp, #24]
 8018fc4:	2f00      	cmp	r7, #0
 8018fc6:	d014      	beq.n	8018ff2 <_dtoa_r+0x7aa>
 8018fc8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018fca:	2a01      	cmp	r2, #1
 8018fcc:	dd00      	ble.n	8018fd0 <_dtoa_r+0x788>
 8018fce:	e0c8      	b.n	8019162 <_dtoa_r+0x91a>
 8018fd0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018fd2:	2a00      	cmp	r2, #0
 8018fd4:	d100      	bne.n	8018fd8 <_dtoa_r+0x790>
 8018fd6:	e0be      	b.n	8019156 <_dtoa_r+0x90e>
 8018fd8:	4aba      	ldr	r2, [pc, #744]	@ (80192c4 <_dtoa_r+0xa7c>)
 8018fda:	189b      	adds	r3, r3, r2
 8018fdc:	9a06      	ldr	r2, [sp, #24]
 8018fde:	2101      	movs	r1, #1
 8018fe0:	18d2      	adds	r2, r2, r3
 8018fe2:	9206      	str	r2, [sp, #24]
 8018fe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018fe6:	9803      	ldr	r0, [sp, #12]
 8018fe8:	18d3      	adds	r3, r2, r3
 8018fea:	930d      	str	r3, [sp, #52]	@ 0x34
 8018fec:	f000 fc22 	bl	8019834 <__i2b>
 8018ff0:	0007      	movs	r7, r0
 8018ff2:	2c00      	cmp	r4, #0
 8018ff4:	d00e      	beq.n	8019014 <_dtoa_r+0x7cc>
 8018ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	dd0b      	ble.n	8019014 <_dtoa_r+0x7cc>
 8018ffc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018ffe:	0023      	movs	r3, r4
 8019000:	4294      	cmp	r4, r2
 8019002:	dd00      	ble.n	8019006 <_dtoa_r+0x7be>
 8019004:	0013      	movs	r3, r2
 8019006:	9a06      	ldr	r2, [sp, #24]
 8019008:	1ae4      	subs	r4, r4, r3
 801900a:	1ad2      	subs	r2, r2, r3
 801900c:	9206      	str	r2, [sp, #24]
 801900e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019010:	1ad3      	subs	r3, r2, r3
 8019012:	930d      	str	r3, [sp, #52]	@ 0x34
 8019014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019016:	2b00      	cmp	r3, #0
 8019018:	d01f      	beq.n	801905a <_dtoa_r+0x812>
 801901a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801901c:	2b00      	cmp	r3, #0
 801901e:	d100      	bne.n	8019022 <_dtoa_r+0x7da>
 8019020:	e0b5      	b.n	801918e <_dtoa_r+0x946>
 8019022:	2d00      	cmp	r5, #0
 8019024:	d010      	beq.n	8019048 <_dtoa_r+0x800>
 8019026:	0039      	movs	r1, r7
 8019028:	002a      	movs	r2, r5
 801902a:	9803      	ldr	r0, [sp, #12]
 801902c:	f000 fccc 	bl	80199c8 <__pow5mult>
 8019030:	9a05      	ldr	r2, [sp, #20]
 8019032:	0001      	movs	r1, r0
 8019034:	0007      	movs	r7, r0
 8019036:	9803      	ldr	r0, [sp, #12]
 8019038:	f000 fc14 	bl	8019864 <__multiply>
 801903c:	0006      	movs	r6, r0
 801903e:	9905      	ldr	r1, [sp, #20]
 8019040:	9803      	ldr	r0, [sp, #12]
 8019042:	f000 fb3f 	bl	80196c4 <_Bfree>
 8019046:	9605      	str	r6, [sp, #20]
 8019048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801904a:	1b5a      	subs	r2, r3, r5
 801904c:	42ab      	cmp	r3, r5
 801904e:	d004      	beq.n	801905a <_dtoa_r+0x812>
 8019050:	9905      	ldr	r1, [sp, #20]
 8019052:	9803      	ldr	r0, [sp, #12]
 8019054:	f000 fcb8 	bl	80199c8 <__pow5mult>
 8019058:	9005      	str	r0, [sp, #20]
 801905a:	2101      	movs	r1, #1
 801905c:	9803      	ldr	r0, [sp, #12]
 801905e:	f000 fbe9 	bl	8019834 <__i2b>
 8019062:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019064:	0006      	movs	r6, r0
 8019066:	2b00      	cmp	r3, #0
 8019068:	d100      	bne.n	801906c <_dtoa_r+0x824>
 801906a:	e1bc      	b.n	80193e6 <_dtoa_r+0xb9e>
 801906c:	001a      	movs	r2, r3
 801906e:	0001      	movs	r1, r0
 8019070:	9803      	ldr	r0, [sp, #12]
 8019072:	f000 fca9 	bl	80199c8 <__pow5mult>
 8019076:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019078:	0006      	movs	r6, r0
 801907a:	2500      	movs	r5, #0
 801907c:	2b01      	cmp	r3, #1
 801907e:	dc16      	bgt.n	80190ae <_dtoa_r+0x866>
 8019080:	2500      	movs	r5, #0
 8019082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019084:	42ab      	cmp	r3, r5
 8019086:	d10e      	bne.n	80190a6 <_dtoa_r+0x85e>
 8019088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801908a:	031b      	lsls	r3, r3, #12
 801908c:	42ab      	cmp	r3, r5
 801908e:	d10a      	bne.n	80190a6 <_dtoa_r+0x85e>
 8019090:	4b8d      	ldr	r3, [pc, #564]	@ (80192c8 <_dtoa_r+0xa80>)
 8019092:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019094:	4213      	tst	r3, r2
 8019096:	d006      	beq.n	80190a6 <_dtoa_r+0x85e>
 8019098:	9b06      	ldr	r3, [sp, #24]
 801909a:	3501      	adds	r5, #1
 801909c:	3301      	adds	r3, #1
 801909e:	9306      	str	r3, [sp, #24]
 80190a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190a2:	3301      	adds	r3, #1
 80190a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80190a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80190a8:	2001      	movs	r0, #1
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d008      	beq.n	80190c0 <_dtoa_r+0x878>
 80190ae:	6933      	ldr	r3, [r6, #16]
 80190b0:	3303      	adds	r3, #3
 80190b2:	009b      	lsls	r3, r3, #2
 80190b4:	18f3      	adds	r3, r6, r3
 80190b6:	6858      	ldr	r0, [r3, #4]
 80190b8:	f000 fb6c 	bl	8019794 <__hi0bits>
 80190bc:	2320      	movs	r3, #32
 80190be:	1a18      	subs	r0, r3, r0
 80190c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190c2:	1818      	adds	r0, r3, r0
 80190c4:	0002      	movs	r2, r0
 80190c6:	231f      	movs	r3, #31
 80190c8:	401a      	ands	r2, r3
 80190ca:	4218      	tst	r0, r3
 80190cc:	d065      	beq.n	801919a <_dtoa_r+0x952>
 80190ce:	3301      	adds	r3, #1
 80190d0:	1a9b      	subs	r3, r3, r2
 80190d2:	2b04      	cmp	r3, #4
 80190d4:	dd5d      	ble.n	8019192 <_dtoa_r+0x94a>
 80190d6:	231c      	movs	r3, #28
 80190d8:	1a9b      	subs	r3, r3, r2
 80190da:	9a06      	ldr	r2, [sp, #24]
 80190dc:	18e4      	adds	r4, r4, r3
 80190de:	18d2      	adds	r2, r2, r3
 80190e0:	9206      	str	r2, [sp, #24]
 80190e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190e4:	18d3      	adds	r3, r2, r3
 80190e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80190e8:	9b06      	ldr	r3, [sp, #24]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	dd05      	ble.n	80190fa <_dtoa_r+0x8b2>
 80190ee:	001a      	movs	r2, r3
 80190f0:	9905      	ldr	r1, [sp, #20]
 80190f2:	9803      	ldr	r0, [sp, #12]
 80190f4:	f000 fcc4 	bl	8019a80 <__lshift>
 80190f8:	9005      	str	r0, [sp, #20]
 80190fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	dd05      	ble.n	801910c <_dtoa_r+0x8c4>
 8019100:	0031      	movs	r1, r6
 8019102:	001a      	movs	r2, r3
 8019104:	9803      	ldr	r0, [sp, #12]
 8019106:	f000 fcbb 	bl	8019a80 <__lshift>
 801910a:	0006      	movs	r6, r0
 801910c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801910e:	2b00      	cmp	r3, #0
 8019110:	d045      	beq.n	801919e <_dtoa_r+0x956>
 8019112:	0031      	movs	r1, r6
 8019114:	9805      	ldr	r0, [sp, #20]
 8019116:	f000 fd1f 	bl	8019b58 <__mcmp>
 801911a:	2800      	cmp	r0, #0
 801911c:	da3f      	bge.n	801919e <_dtoa_r+0x956>
 801911e:	9b04      	ldr	r3, [sp, #16]
 8019120:	220a      	movs	r2, #10
 8019122:	3b01      	subs	r3, #1
 8019124:	930c      	str	r3, [sp, #48]	@ 0x30
 8019126:	9905      	ldr	r1, [sp, #20]
 8019128:	2300      	movs	r3, #0
 801912a:	9803      	ldr	r0, [sp, #12]
 801912c:	f000 faee 	bl	801970c <__multadd>
 8019130:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019132:	9005      	str	r0, [sp, #20]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d100      	bne.n	801913a <_dtoa_r+0x8f2>
 8019138:	e15c      	b.n	80193f4 <_dtoa_r+0xbac>
 801913a:	2300      	movs	r3, #0
 801913c:	0039      	movs	r1, r7
 801913e:	220a      	movs	r2, #10
 8019140:	9803      	ldr	r0, [sp, #12]
 8019142:	f000 fae3 	bl	801970c <__multadd>
 8019146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019148:	0007      	movs	r7, r0
 801914a:	2b00      	cmp	r3, #0
 801914c:	dc55      	bgt.n	80191fa <_dtoa_r+0x9b2>
 801914e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019150:	2b02      	cmp	r3, #2
 8019152:	dc2d      	bgt.n	80191b0 <_dtoa_r+0x968>
 8019154:	e051      	b.n	80191fa <_dtoa_r+0x9b2>
 8019156:	2336      	movs	r3, #54	@ 0x36
 8019158:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801915a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801915c:	9c06      	ldr	r4, [sp, #24]
 801915e:	1a9b      	subs	r3, r3, r2
 8019160:	e73c      	b.n	8018fdc <_dtoa_r+0x794>
 8019162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019164:	1e5d      	subs	r5, r3, #1
 8019166:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019168:	42ab      	cmp	r3, r5
 801916a:	db08      	blt.n	801917e <_dtoa_r+0x936>
 801916c:	1b5d      	subs	r5, r3, r5
 801916e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019170:	9c06      	ldr	r4, [sp, #24]
 8019172:	2b00      	cmp	r3, #0
 8019174:	db00      	blt.n	8019178 <_dtoa_r+0x930>
 8019176:	e731      	b.n	8018fdc <_dtoa_r+0x794>
 8019178:	1ae4      	subs	r4, r4, r3
 801917a:	2300      	movs	r3, #0
 801917c:	e72e      	b.n	8018fdc <_dtoa_r+0x794>
 801917e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019180:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019182:	1aeb      	subs	r3, r5, r3
 8019184:	18d3      	adds	r3, r2, r3
 8019186:	950f      	str	r5, [sp, #60]	@ 0x3c
 8019188:	9314      	str	r3, [sp, #80]	@ 0x50
 801918a:	2500      	movs	r5, #0
 801918c:	e7ef      	b.n	801916e <_dtoa_r+0x926>
 801918e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019190:	e75e      	b.n	8019050 <_dtoa_r+0x808>
 8019192:	2b04      	cmp	r3, #4
 8019194:	d0a8      	beq.n	80190e8 <_dtoa_r+0x8a0>
 8019196:	331c      	adds	r3, #28
 8019198:	e79f      	b.n	80190da <_dtoa_r+0x892>
 801919a:	0013      	movs	r3, r2
 801919c:	e7fb      	b.n	8019196 <_dtoa_r+0x94e>
 801919e:	9b04      	ldr	r3, [sp, #16]
 80191a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80191a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	dc23      	bgt.n	80191f2 <_dtoa_r+0x9aa>
 80191aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80191ac:	2b02      	cmp	r3, #2
 80191ae:	dd20      	ble.n	80191f2 <_dtoa_r+0x9aa>
 80191b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d000      	beq.n	80191b8 <_dtoa_r+0x970>
 80191b6:	e6b5      	b.n	8018f24 <_dtoa_r+0x6dc>
 80191b8:	0031      	movs	r1, r6
 80191ba:	2205      	movs	r2, #5
 80191bc:	9803      	ldr	r0, [sp, #12]
 80191be:	f000 faa5 	bl	801970c <__multadd>
 80191c2:	0006      	movs	r6, r0
 80191c4:	0001      	movs	r1, r0
 80191c6:	9805      	ldr	r0, [sp, #20]
 80191c8:	f000 fcc6 	bl	8019b58 <__mcmp>
 80191cc:	2800      	cmp	r0, #0
 80191ce:	dc00      	bgt.n	80191d2 <_dtoa_r+0x98a>
 80191d0:	e6a8      	b.n	8018f24 <_dtoa_r+0x6dc>
 80191d2:	9b08      	ldr	r3, [sp, #32]
 80191d4:	9a08      	ldr	r2, [sp, #32]
 80191d6:	1c5c      	adds	r4, r3, #1
 80191d8:	2331      	movs	r3, #49	@ 0x31
 80191da:	7013      	strb	r3, [r2, #0]
 80191dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80191de:	3301      	adds	r3, #1
 80191e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80191e2:	e6a3      	b.n	8018f2c <_dtoa_r+0x6e4>
 80191e4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80191e6:	0037      	movs	r7, r6
 80191e8:	e7f3      	b.n	80191d2 <_dtoa_r+0x98a>
 80191ea:	9b04      	ldr	r3, [sp, #16]
 80191ec:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80191ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80191f0:	e7f9      	b.n	80191e6 <_dtoa_r+0x99e>
 80191f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d100      	bne.n	80191fa <_dtoa_r+0x9b2>
 80191f8:	e100      	b.n	80193fc <_dtoa_r+0xbb4>
 80191fa:	2c00      	cmp	r4, #0
 80191fc:	dd05      	ble.n	801920a <_dtoa_r+0x9c2>
 80191fe:	0039      	movs	r1, r7
 8019200:	0022      	movs	r2, r4
 8019202:	9803      	ldr	r0, [sp, #12]
 8019204:	f000 fc3c 	bl	8019a80 <__lshift>
 8019208:	0007      	movs	r7, r0
 801920a:	0038      	movs	r0, r7
 801920c:	2d00      	cmp	r5, #0
 801920e:	d018      	beq.n	8019242 <_dtoa_r+0x9fa>
 8019210:	6879      	ldr	r1, [r7, #4]
 8019212:	9803      	ldr	r0, [sp, #12]
 8019214:	f000 fa12 	bl	801963c <_Balloc>
 8019218:	1e04      	subs	r4, r0, #0
 801921a:	d105      	bne.n	8019228 <_dtoa_r+0x9e0>
 801921c:	0022      	movs	r2, r4
 801921e:	4b2b      	ldr	r3, [pc, #172]	@ (80192cc <_dtoa_r+0xa84>)
 8019220:	482b      	ldr	r0, [pc, #172]	@ (80192d0 <_dtoa_r+0xa88>)
 8019222:	492c      	ldr	r1, [pc, #176]	@ (80192d4 <_dtoa_r+0xa8c>)
 8019224:	f7ff fb25 	bl	8018872 <_dtoa_r+0x2a>
 8019228:	0039      	movs	r1, r7
 801922a:	693a      	ldr	r2, [r7, #16]
 801922c:	310c      	adds	r1, #12
 801922e:	3202      	adds	r2, #2
 8019230:	0092      	lsls	r2, r2, #2
 8019232:	300c      	adds	r0, #12
 8019234:	f7ff fa70 	bl	8018718 <memcpy>
 8019238:	2201      	movs	r2, #1
 801923a:	0021      	movs	r1, r4
 801923c:	9803      	ldr	r0, [sp, #12]
 801923e:	f000 fc1f 	bl	8019a80 <__lshift>
 8019242:	9b08      	ldr	r3, [sp, #32]
 8019244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019246:	9306      	str	r3, [sp, #24]
 8019248:	3b01      	subs	r3, #1
 801924a:	189b      	adds	r3, r3, r2
 801924c:	2201      	movs	r2, #1
 801924e:	9704      	str	r7, [sp, #16]
 8019250:	0007      	movs	r7, r0
 8019252:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019256:	4013      	ands	r3, r2
 8019258:	930e      	str	r3, [sp, #56]	@ 0x38
 801925a:	0031      	movs	r1, r6
 801925c:	9805      	ldr	r0, [sp, #20]
 801925e:	f7ff fa64 	bl	801872a <quorem>
 8019262:	9904      	ldr	r1, [sp, #16]
 8019264:	0005      	movs	r5, r0
 8019266:	900a      	str	r0, [sp, #40]	@ 0x28
 8019268:	9805      	ldr	r0, [sp, #20]
 801926a:	f000 fc75 	bl	8019b58 <__mcmp>
 801926e:	003a      	movs	r2, r7
 8019270:	900d      	str	r0, [sp, #52]	@ 0x34
 8019272:	0031      	movs	r1, r6
 8019274:	9803      	ldr	r0, [sp, #12]
 8019276:	f000 fc8b 	bl	8019b90 <__mdiff>
 801927a:	2201      	movs	r2, #1
 801927c:	68c3      	ldr	r3, [r0, #12]
 801927e:	0004      	movs	r4, r0
 8019280:	3530      	adds	r5, #48	@ 0x30
 8019282:	9209      	str	r2, [sp, #36]	@ 0x24
 8019284:	2b00      	cmp	r3, #0
 8019286:	d104      	bne.n	8019292 <_dtoa_r+0xa4a>
 8019288:	0001      	movs	r1, r0
 801928a:	9805      	ldr	r0, [sp, #20]
 801928c:	f000 fc64 	bl	8019b58 <__mcmp>
 8019290:	9009      	str	r0, [sp, #36]	@ 0x24
 8019292:	0021      	movs	r1, r4
 8019294:	9803      	ldr	r0, [sp, #12]
 8019296:	f000 fa15 	bl	80196c4 <_Bfree>
 801929a:	9b06      	ldr	r3, [sp, #24]
 801929c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801929e:	1c5c      	adds	r4, r3, #1
 80192a0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80192a2:	4313      	orrs	r3, r2
 80192a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80192a6:	4313      	orrs	r3, r2
 80192a8:	d116      	bne.n	80192d8 <_dtoa_r+0xa90>
 80192aa:	2d39      	cmp	r5, #57	@ 0x39
 80192ac:	d02f      	beq.n	801930e <_dtoa_r+0xac6>
 80192ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	dd01      	ble.n	80192b8 <_dtoa_r+0xa70>
 80192b4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80192b6:	3531      	adds	r5, #49	@ 0x31
 80192b8:	9b06      	ldr	r3, [sp, #24]
 80192ba:	701d      	strb	r5, [r3, #0]
 80192bc:	e638      	b.n	8018f30 <_dtoa_r+0x6e8>
 80192be:	46c0      	nop			@ (mov r8, r8)
 80192c0:	40240000 	.word	0x40240000
 80192c4:	00000433 	.word	0x00000433
 80192c8:	7ff00000 	.word	0x7ff00000
 80192cc:	0801c3c0 	.word	0x0801c3c0
 80192d0:	0801c368 	.word	0x0801c368
 80192d4:	000002ef 	.word	0x000002ef
 80192d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80192da:	2b00      	cmp	r3, #0
 80192dc:	db04      	blt.n	80192e8 <_dtoa_r+0xaa0>
 80192de:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80192e0:	4313      	orrs	r3, r2
 80192e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80192e4:	4313      	orrs	r3, r2
 80192e6:	d11e      	bne.n	8019326 <_dtoa_r+0xade>
 80192e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	dde4      	ble.n	80192b8 <_dtoa_r+0xa70>
 80192ee:	9905      	ldr	r1, [sp, #20]
 80192f0:	2201      	movs	r2, #1
 80192f2:	9803      	ldr	r0, [sp, #12]
 80192f4:	f000 fbc4 	bl	8019a80 <__lshift>
 80192f8:	0031      	movs	r1, r6
 80192fa:	9005      	str	r0, [sp, #20]
 80192fc:	f000 fc2c 	bl	8019b58 <__mcmp>
 8019300:	2800      	cmp	r0, #0
 8019302:	dc02      	bgt.n	801930a <_dtoa_r+0xac2>
 8019304:	d1d8      	bne.n	80192b8 <_dtoa_r+0xa70>
 8019306:	07eb      	lsls	r3, r5, #31
 8019308:	d5d6      	bpl.n	80192b8 <_dtoa_r+0xa70>
 801930a:	2d39      	cmp	r5, #57	@ 0x39
 801930c:	d1d2      	bne.n	80192b4 <_dtoa_r+0xa6c>
 801930e:	2339      	movs	r3, #57	@ 0x39
 8019310:	9a06      	ldr	r2, [sp, #24]
 8019312:	7013      	strb	r3, [r2, #0]
 8019314:	0023      	movs	r3, r4
 8019316:	001c      	movs	r4, r3
 8019318:	3b01      	subs	r3, #1
 801931a:	781a      	ldrb	r2, [r3, #0]
 801931c:	2a39      	cmp	r2, #57	@ 0x39
 801931e:	d04f      	beq.n	80193c0 <_dtoa_r+0xb78>
 8019320:	3201      	adds	r2, #1
 8019322:	701a      	strb	r2, [r3, #0]
 8019324:	e604      	b.n	8018f30 <_dtoa_r+0x6e8>
 8019326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019328:	2b00      	cmp	r3, #0
 801932a:	dd03      	ble.n	8019334 <_dtoa_r+0xaec>
 801932c:	2d39      	cmp	r5, #57	@ 0x39
 801932e:	d0ee      	beq.n	801930e <_dtoa_r+0xac6>
 8019330:	3501      	adds	r5, #1
 8019332:	e7c1      	b.n	80192b8 <_dtoa_r+0xa70>
 8019334:	9b06      	ldr	r3, [sp, #24]
 8019336:	9a06      	ldr	r2, [sp, #24]
 8019338:	701d      	strb	r5, [r3, #0]
 801933a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801933c:	4293      	cmp	r3, r2
 801933e:	d02a      	beq.n	8019396 <_dtoa_r+0xb4e>
 8019340:	2300      	movs	r3, #0
 8019342:	220a      	movs	r2, #10
 8019344:	9905      	ldr	r1, [sp, #20]
 8019346:	9803      	ldr	r0, [sp, #12]
 8019348:	f000 f9e0 	bl	801970c <__multadd>
 801934c:	9b04      	ldr	r3, [sp, #16]
 801934e:	9005      	str	r0, [sp, #20]
 8019350:	42bb      	cmp	r3, r7
 8019352:	d109      	bne.n	8019368 <_dtoa_r+0xb20>
 8019354:	2300      	movs	r3, #0
 8019356:	220a      	movs	r2, #10
 8019358:	9904      	ldr	r1, [sp, #16]
 801935a:	9803      	ldr	r0, [sp, #12]
 801935c:	f000 f9d6 	bl	801970c <__multadd>
 8019360:	9004      	str	r0, [sp, #16]
 8019362:	0007      	movs	r7, r0
 8019364:	9406      	str	r4, [sp, #24]
 8019366:	e778      	b.n	801925a <_dtoa_r+0xa12>
 8019368:	9904      	ldr	r1, [sp, #16]
 801936a:	2300      	movs	r3, #0
 801936c:	220a      	movs	r2, #10
 801936e:	9803      	ldr	r0, [sp, #12]
 8019370:	f000 f9cc 	bl	801970c <__multadd>
 8019374:	2300      	movs	r3, #0
 8019376:	9004      	str	r0, [sp, #16]
 8019378:	220a      	movs	r2, #10
 801937a:	0039      	movs	r1, r7
 801937c:	9803      	ldr	r0, [sp, #12]
 801937e:	f000 f9c5 	bl	801970c <__multadd>
 8019382:	e7ee      	b.n	8019362 <_dtoa_r+0xb1a>
 8019384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019386:	2401      	movs	r4, #1
 8019388:	2b00      	cmp	r3, #0
 801938a:	dd00      	ble.n	801938e <_dtoa_r+0xb46>
 801938c:	001c      	movs	r4, r3
 801938e:	9b08      	ldr	r3, [sp, #32]
 8019390:	191c      	adds	r4, r3, r4
 8019392:	2300      	movs	r3, #0
 8019394:	9304      	str	r3, [sp, #16]
 8019396:	9905      	ldr	r1, [sp, #20]
 8019398:	2201      	movs	r2, #1
 801939a:	9803      	ldr	r0, [sp, #12]
 801939c:	f000 fb70 	bl	8019a80 <__lshift>
 80193a0:	0031      	movs	r1, r6
 80193a2:	9005      	str	r0, [sp, #20]
 80193a4:	f000 fbd8 	bl	8019b58 <__mcmp>
 80193a8:	2800      	cmp	r0, #0
 80193aa:	dcb3      	bgt.n	8019314 <_dtoa_r+0xacc>
 80193ac:	d101      	bne.n	80193b2 <_dtoa_r+0xb6a>
 80193ae:	07ed      	lsls	r5, r5, #31
 80193b0:	d4b0      	bmi.n	8019314 <_dtoa_r+0xacc>
 80193b2:	0023      	movs	r3, r4
 80193b4:	001c      	movs	r4, r3
 80193b6:	3b01      	subs	r3, #1
 80193b8:	781a      	ldrb	r2, [r3, #0]
 80193ba:	2a30      	cmp	r2, #48	@ 0x30
 80193bc:	d0fa      	beq.n	80193b4 <_dtoa_r+0xb6c>
 80193be:	e5b7      	b.n	8018f30 <_dtoa_r+0x6e8>
 80193c0:	9a08      	ldr	r2, [sp, #32]
 80193c2:	429a      	cmp	r2, r3
 80193c4:	d1a7      	bne.n	8019316 <_dtoa_r+0xace>
 80193c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80193c8:	3301      	adds	r3, #1
 80193ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80193cc:	2331      	movs	r3, #49	@ 0x31
 80193ce:	7013      	strb	r3, [r2, #0]
 80193d0:	e5ae      	b.n	8018f30 <_dtoa_r+0x6e8>
 80193d2:	4b15      	ldr	r3, [pc, #84]	@ (8019428 <_dtoa_r+0xbe0>)
 80193d4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80193d6:	9308      	str	r3, [sp, #32]
 80193d8:	4b14      	ldr	r3, [pc, #80]	@ (801942c <_dtoa_r+0xbe4>)
 80193da:	2a00      	cmp	r2, #0
 80193dc:	d001      	beq.n	80193e2 <_dtoa_r+0xb9a>
 80193de:	f7ff fa7b 	bl	80188d8 <_dtoa_r+0x90>
 80193e2:	f7ff fa7b 	bl	80188dc <_dtoa_r+0x94>
 80193e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80193e8:	2b01      	cmp	r3, #1
 80193ea:	dc00      	bgt.n	80193ee <_dtoa_r+0xba6>
 80193ec:	e648      	b.n	8019080 <_dtoa_r+0x838>
 80193ee:	2001      	movs	r0, #1
 80193f0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80193f2:	e665      	b.n	80190c0 <_dtoa_r+0x878>
 80193f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	dc00      	bgt.n	80193fc <_dtoa_r+0xbb4>
 80193fa:	e6d6      	b.n	80191aa <_dtoa_r+0x962>
 80193fc:	2400      	movs	r4, #0
 80193fe:	0031      	movs	r1, r6
 8019400:	9805      	ldr	r0, [sp, #20]
 8019402:	f7ff f992 	bl	801872a <quorem>
 8019406:	9b08      	ldr	r3, [sp, #32]
 8019408:	3030      	adds	r0, #48	@ 0x30
 801940a:	5518      	strb	r0, [r3, r4]
 801940c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801940e:	3401      	adds	r4, #1
 8019410:	0005      	movs	r5, r0
 8019412:	429c      	cmp	r4, r3
 8019414:	dab6      	bge.n	8019384 <_dtoa_r+0xb3c>
 8019416:	2300      	movs	r3, #0
 8019418:	220a      	movs	r2, #10
 801941a:	9905      	ldr	r1, [sp, #20]
 801941c:	9803      	ldr	r0, [sp, #12]
 801941e:	f000 f975 	bl	801970c <__multadd>
 8019422:	9005      	str	r0, [sp, #20]
 8019424:	e7eb      	b.n	80193fe <_dtoa_r+0xbb6>
 8019426:	46c0      	nop			@ (mov r8, r8)
 8019428:	0801c344 	.word	0x0801c344
 801942c:	0801c34c 	.word	0x0801c34c

08019430 <_free_r>:
 8019430:	b570      	push	{r4, r5, r6, lr}
 8019432:	0005      	movs	r5, r0
 8019434:	1e0c      	subs	r4, r1, #0
 8019436:	d010      	beq.n	801945a <_free_r+0x2a>
 8019438:	3c04      	subs	r4, #4
 801943a:	6823      	ldr	r3, [r4, #0]
 801943c:	2b00      	cmp	r3, #0
 801943e:	da00      	bge.n	8019442 <_free_r+0x12>
 8019440:	18e4      	adds	r4, r4, r3
 8019442:	0028      	movs	r0, r5
 8019444:	f000 f8ea 	bl	801961c <__malloc_lock>
 8019448:	4a1d      	ldr	r2, [pc, #116]	@ (80194c0 <_free_r+0x90>)
 801944a:	6813      	ldr	r3, [r2, #0]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d105      	bne.n	801945c <_free_r+0x2c>
 8019450:	6063      	str	r3, [r4, #4]
 8019452:	6014      	str	r4, [r2, #0]
 8019454:	0028      	movs	r0, r5
 8019456:	f000 f8e9 	bl	801962c <__malloc_unlock>
 801945a:	bd70      	pop	{r4, r5, r6, pc}
 801945c:	42a3      	cmp	r3, r4
 801945e:	d908      	bls.n	8019472 <_free_r+0x42>
 8019460:	6820      	ldr	r0, [r4, #0]
 8019462:	1821      	adds	r1, r4, r0
 8019464:	428b      	cmp	r3, r1
 8019466:	d1f3      	bne.n	8019450 <_free_r+0x20>
 8019468:	6819      	ldr	r1, [r3, #0]
 801946a:	685b      	ldr	r3, [r3, #4]
 801946c:	1809      	adds	r1, r1, r0
 801946e:	6021      	str	r1, [r4, #0]
 8019470:	e7ee      	b.n	8019450 <_free_r+0x20>
 8019472:	001a      	movs	r2, r3
 8019474:	685b      	ldr	r3, [r3, #4]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d001      	beq.n	801947e <_free_r+0x4e>
 801947a:	42a3      	cmp	r3, r4
 801947c:	d9f9      	bls.n	8019472 <_free_r+0x42>
 801947e:	6811      	ldr	r1, [r2, #0]
 8019480:	1850      	adds	r0, r2, r1
 8019482:	42a0      	cmp	r0, r4
 8019484:	d10b      	bne.n	801949e <_free_r+0x6e>
 8019486:	6820      	ldr	r0, [r4, #0]
 8019488:	1809      	adds	r1, r1, r0
 801948a:	1850      	adds	r0, r2, r1
 801948c:	6011      	str	r1, [r2, #0]
 801948e:	4283      	cmp	r3, r0
 8019490:	d1e0      	bne.n	8019454 <_free_r+0x24>
 8019492:	6818      	ldr	r0, [r3, #0]
 8019494:	685b      	ldr	r3, [r3, #4]
 8019496:	1841      	adds	r1, r0, r1
 8019498:	6011      	str	r1, [r2, #0]
 801949a:	6053      	str	r3, [r2, #4]
 801949c:	e7da      	b.n	8019454 <_free_r+0x24>
 801949e:	42a0      	cmp	r0, r4
 80194a0:	d902      	bls.n	80194a8 <_free_r+0x78>
 80194a2:	230c      	movs	r3, #12
 80194a4:	602b      	str	r3, [r5, #0]
 80194a6:	e7d5      	b.n	8019454 <_free_r+0x24>
 80194a8:	6820      	ldr	r0, [r4, #0]
 80194aa:	1821      	adds	r1, r4, r0
 80194ac:	428b      	cmp	r3, r1
 80194ae:	d103      	bne.n	80194b8 <_free_r+0x88>
 80194b0:	6819      	ldr	r1, [r3, #0]
 80194b2:	685b      	ldr	r3, [r3, #4]
 80194b4:	1809      	adds	r1, r1, r0
 80194b6:	6021      	str	r1, [r4, #0]
 80194b8:	6063      	str	r3, [r4, #4]
 80194ba:	6054      	str	r4, [r2, #4]
 80194bc:	e7ca      	b.n	8019454 <_free_r+0x24>
 80194be:	46c0      	nop			@ (mov r8, r8)
 80194c0:	20004118 	.word	0x20004118

080194c4 <malloc>:
 80194c4:	b510      	push	{r4, lr}
 80194c6:	4b03      	ldr	r3, [pc, #12]	@ (80194d4 <malloc+0x10>)
 80194c8:	0001      	movs	r1, r0
 80194ca:	6818      	ldr	r0, [r3, #0]
 80194cc:	f000 f826 	bl	801951c <_malloc_r>
 80194d0:	bd10      	pop	{r4, pc}
 80194d2:	46c0      	nop			@ (mov r8, r8)
 80194d4:	200001f4 	.word	0x200001f4

080194d8 <sbrk_aligned>:
 80194d8:	b570      	push	{r4, r5, r6, lr}
 80194da:	4e0f      	ldr	r6, [pc, #60]	@ (8019518 <sbrk_aligned+0x40>)
 80194dc:	000d      	movs	r5, r1
 80194de:	6831      	ldr	r1, [r6, #0]
 80194e0:	0004      	movs	r4, r0
 80194e2:	2900      	cmp	r1, #0
 80194e4:	d102      	bne.n	80194ec <sbrk_aligned+0x14>
 80194e6:	f001 f855 	bl	801a594 <_sbrk_r>
 80194ea:	6030      	str	r0, [r6, #0]
 80194ec:	0029      	movs	r1, r5
 80194ee:	0020      	movs	r0, r4
 80194f0:	f001 f850 	bl	801a594 <_sbrk_r>
 80194f4:	1c43      	adds	r3, r0, #1
 80194f6:	d103      	bne.n	8019500 <sbrk_aligned+0x28>
 80194f8:	2501      	movs	r5, #1
 80194fa:	426d      	negs	r5, r5
 80194fc:	0028      	movs	r0, r5
 80194fe:	bd70      	pop	{r4, r5, r6, pc}
 8019500:	2303      	movs	r3, #3
 8019502:	1cc5      	adds	r5, r0, #3
 8019504:	439d      	bics	r5, r3
 8019506:	42a8      	cmp	r0, r5
 8019508:	d0f8      	beq.n	80194fc <sbrk_aligned+0x24>
 801950a:	1a29      	subs	r1, r5, r0
 801950c:	0020      	movs	r0, r4
 801950e:	f001 f841 	bl	801a594 <_sbrk_r>
 8019512:	3001      	adds	r0, #1
 8019514:	d1f2      	bne.n	80194fc <sbrk_aligned+0x24>
 8019516:	e7ef      	b.n	80194f8 <sbrk_aligned+0x20>
 8019518:	20004114 	.word	0x20004114

0801951c <_malloc_r>:
 801951c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801951e:	2203      	movs	r2, #3
 8019520:	1ccb      	adds	r3, r1, #3
 8019522:	4393      	bics	r3, r2
 8019524:	3308      	adds	r3, #8
 8019526:	0005      	movs	r5, r0
 8019528:	001f      	movs	r7, r3
 801952a:	2b0c      	cmp	r3, #12
 801952c:	d234      	bcs.n	8019598 <_malloc_r+0x7c>
 801952e:	270c      	movs	r7, #12
 8019530:	42b9      	cmp	r1, r7
 8019532:	d833      	bhi.n	801959c <_malloc_r+0x80>
 8019534:	0028      	movs	r0, r5
 8019536:	f000 f871 	bl	801961c <__malloc_lock>
 801953a:	4e37      	ldr	r6, [pc, #220]	@ (8019618 <_malloc_r+0xfc>)
 801953c:	6833      	ldr	r3, [r6, #0]
 801953e:	001c      	movs	r4, r3
 8019540:	2c00      	cmp	r4, #0
 8019542:	d12f      	bne.n	80195a4 <_malloc_r+0x88>
 8019544:	0039      	movs	r1, r7
 8019546:	0028      	movs	r0, r5
 8019548:	f7ff ffc6 	bl	80194d8 <sbrk_aligned>
 801954c:	0004      	movs	r4, r0
 801954e:	1c43      	adds	r3, r0, #1
 8019550:	d15f      	bne.n	8019612 <_malloc_r+0xf6>
 8019552:	6834      	ldr	r4, [r6, #0]
 8019554:	9400      	str	r4, [sp, #0]
 8019556:	9b00      	ldr	r3, [sp, #0]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d14a      	bne.n	80195f2 <_malloc_r+0xd6>
 801955c:	2c00      	cmp	r4, #0
 801955e:	d052      	beq.n	8019606 <_malloc_r+0xea>
 8019560:	6823      	ldr	r3, [r4, #0]
 8019562:	0028      	movs	r0, r5
 8019564:	18e3      	adds	r3, r4, r3
 8019566:	9900      	ldr	r1, [sp, #0]
 8019568:	9301      	str	r3, [sp, #4]
 801956a:	f001 f813 	bl	801a594 <_sbrk_r>
 801956e:	9b01      	ldr	r3, [sp, #4]
 8019570:	4283      	cmp	r3, r0
 8019572:	d148      	bne.n	8019606 <_malloc_r+0xea>
 8019574:	6823      	ldr	r3, [r4, #0]
 8019576:	0028      	movs	r0, r5
 8019578:	1aff      	subs	r7, r7, r3
 801957a:	0039      	movs	r1, r7
 801957c:	f7ff ffac 	bl	80194d8 <sbrk_aligned>
 8019580:	3001      	adds	r0, #1
 8019582:	d040      	beq.n	8019606 <_malloc_r+0xea>
 8019584:	6823      	ldr	r3, [r4, #0]
 8019586:	19db      	adds	r3, r3, r7
 8019588:	6023      	str	r3, [r4, #0]
 801958a:	6833      	ldr	r3, [r6, #0]
 801958c:	685a      	ldr	r2, [r3, #4]
 801958e:	2a00      	cmp	r2, #0
 8019590:	d133      	bne.n	80195fa <_malloc_r+0xde>
 8019592:	9b00      	ldr	r3, [sp, #0]
 8019594:	6033      	str	r3, [r6, #0]
 8019596:	e019      	b.n	80195cc <_malloc_r+0xb0>
 8019598:	2b00      	cmp	r3, #0
 801959a:	dac9      	bge.n	8019530 <_malloc_r+0x14>
 801959c:	230c      	movs	r3, #12
 801959e:	602b      	str	r3, [r5, #0]
 80195a0:	2000      	movs	r0, #0
 80195a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80195a4:	6821      	ldr	r1, [r4, #0]
 80195a6:	1bc9      	subs	r1, r1, r7
 80195a8:	d420      	bmi.n	80195ec <_malloc_r+0xd0>
 80195aa:	290b      	cmp	r1, #11
 80195ac:	d90a      	bls.n	80195c4 <_malloc_r+0xa8>
 80195ae:	19e2      	adds	r2, r4, r7
 80195b0:	6027      	str	r7, [r4, #0]
 80195b2:	42a3      	cmp	r3, r4
 80195b4:	d104      	bne.n	80195c0 <_malloc_r+0xa4>
 80195b6:	6032      	str	r2, [r6, #0]
 80195b8:	6863      	ldr	r3, [r4, #4]
 80195ba:	6011      	str	r1, [r2, #0]
 80195bc:	6053      	str	r3, [r2, #4]
 80195be:	e005      	b.n	80195cc <_malloc_r+0xb0>
 80195c0:	605a      	str	r2, [r3, #4]
 80195c2:	e7f9      	b.n	80195b8 <_malloc_r+0x9c>
 80195c4:	6862      	ldr	r2, [r4, #4]
 80195c6:	42a3      	cmp	r3, r4
 80195c8:	d10e      	bne.n	80195e8 <_malloc_r+0xcc>
 80195ca:	6032      	str	r2, [r6, #0]
 80195cc:	0028      	movs	r0, r5
 80195ce:	f000 f82d 	bl	801962c <__malloc_unlock>
 80195d2:	0020      	movs	r0, r4
 80195d4:	2207      	movs	r2, #7
 80195d6:	300b      	adds	r0, #11
 80195d8:	1d23      	adds	r3, r4, #4
 80195da:	4390      	bics	r0, r2
 80195dc:	1ac2      	subs	r2, r0, r3
 80195de:	4298      	cmp	r0, r3
 80195e0:	d0df      	beq.n	80195a2 <_malloc_r+0x86>
 80195e2:	1a1b      	subs	r3, r3, r0
 80195e4:	50a3      	str	r3, [r4, r2]
 80195e6:	e7dc      	b.n	80195a2 <_malloc_r+0x86>
 80195e8:	605a      	str	r2, [r3, #4]
 80195ea:	e7ef      	b.n	80195cc <_malloc_r+0xb0>
 80195ec:	0023      	movs	r3, r4
 80195ee:	6864      	ldr	r4, [r4, #4]
 80195f0:	e7a6      	b.n	8019540 <_malloc_r+0x24>
 80195f2:	9c00      	ldr	r4, [sp, #0]
 80195f4:	6863      	ldr	r3, [r4, #4]
 80195f6:	9300      	str	r3, [sp, #0]
 80195f8:	e7ad      	b.n	8019556 <_malloc_r+0x3a>
 80195fa:	001a      	movs	r2, r3
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	42a3      	cmp	r3, r4
 8019600:	d1fb      	bne.n	80195fa <_malloc_r+0xde>
 8019602:	2300      	movs	r3, #0
 8019604:	e7da      	b.n	80195bc <_malloc_r+0xa0>
 8019606:	230c      	movs	r3, #12
 8019608:	0028      	movs	r0, r5
 801960a:	602b      	str	r3, [r5, #0]
 801960c:	f000 f80e 	bl	801962c <__malloc_unlock>
 8019610:	e7c6      	b.n	80195a0 <_malloc_r+0x84>
 8019612:	6007      	str	r7, [r0, #0]
 8019614:	e7da      	b.n	80195cc <_malloc_r+0xb0>
 8019616:	46c0      	nop			@ (mov r8, r8)
 8019618:	20004118 	.word	0x20004118

0801961c <__malloc_lock>:
 801961c:	b510      	push	{r4, lr}
 801961e:	4802      	ldr	r0, [pc, #8]	@ (8019628 <__malloc_lock+0xc>)
 8019620:	f7ff f86d 	bl	80186fe <__retarget_lock_acquire_recursive>
 8019624:	bd10      	pop	{r4, pc}
 8019626:	46c0      	nop			@ (mov r8, r8)
 8019628:	20004110 	.word	0x20004110

0801962c <__malloc_unlock>:
 801962c:	b510      	push	{r4, lr}
 801962e:	4802      	ldr	r0, [pc, #8]	@ (8019638 <__malloc_unlock+0xc>)
 8019630:	f7ff f866 	bl	8018700 <__retarget_lock_release_recursive>
 8019634:	bd10      	pop	{r4, pc}
 8019636:	46c0      	nop			@ (mov r8, r8)
 8019638:	20004110 	.word	0x20004110

0801963c <_Balloc>:
 801963c:	b570      	push	{r4, r5, r6, lr}
 801963e:	69c5      	ldr	r5, [r0, #28]
 8019640:	0006      	movs	r6, r0
 8019642:	000c      	movs	r4, r1
 8019644:	2d00      	cmp	r5, #0
 8019646:	d10e      	bne.n	8019666 <_Balloc+0x2a>
 8019648:	2010      	movs	r0, #16
 801964a:	f7ff ff3b 	bl	80194c4 <malloc>
 801964e:	1e02      	subs	r2, r0, #0
 8019650:	61f0      	str	r0, [r6, #28]
 8019652:	d104      	bne.n	801965e <_Balloc+0x22>
 8019654:	216b      	movs	r1, #107	@ 0x6b
 8019656:	4b19      	ldr	r3, [pc, #100]	@ (80196bc <_Balloc+0x80>)
 8019658:	4819      	ldr	r0, [pc, #100]	@ (80196c0 <_Balloc+0x84>)
 801965a:	f000 ffad 	bl	801a5b8 <__assert_func>
 801965e:	6045      	str	r5, [r0, #4]
 8019660:	6085      	str	r5, [r0, #8]
 8019662:	6005      	str	r5, [r0, #0]
 8019664:	60c5      	str	r5, [r0, #12]
 8019666:	69f5      	ldr	r5, [r6, #28]
 8019668:	68eb      	ldr	r3, [r5, #12]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d013      	beq.n	8019696 <_Balloc+0x5a>
 801966e:	69f3      	ldr	r3, [r6, #28]
 8019670:	00a2      	lsls	r2, r4, #2
 8019672:	68db      	ldr	r3, [r3, #12]
 8019674:	189b      	adds	r3, r3, r2
 8019676:	6818      	ldr	r0, [r3, #0]
 8019678:	2800      	cmp	r0, #0
 801967a:	d118      	bne.n	80196ae <_Balloc+0x72>
 801967c:	2101      	movs	r1, #1
 801967e:	000d      	movs	r5, r1
 8019680:	40a5      	lsls	r5, r4
 8019682:	1d6a      	adds	r2, r5, #5
 8019684:	0030      	movs	r0, r6
 8019686:	0092      	lsls	r2, r2, #2
 8019688:	f000 ffb4 	bl	801a5f4 <_calloc_r>
 801968c:	2800      	cmp	r0, #0
 801968e:	d00c      	beq.n	80196aa <_Balloc+0x6e>
 8019690:	6044      	str	r4, [r0, #4]
 8019692:	6085      	str	r5, [r0, #8]
 8019694:	e00d      	b.n	80196b2 <_Balloc+0x76>
 8019696:	2221      	movs	r2, #33	@ 0x21
 8019698:	2104      	movs	r1, #4
 801969a:	0030      	movs	r0, r6
 801969c:	f000 ffaa 	bl	801a5f4 <_calloc_r>
 80196a0:	69f3      	ldr	r3, [r6, #28]
 80196a2:	60e8      	str	r0, [r5, #12]
 80196a4:	68db      	ldr	r3, [r3, #12]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d1e1      	bne.n	801966e <_Balloc+0x32>
 80196aa:	2000      	movs	r0, #0
 80196ac:	bd70      	pop	{r4, r5, r6, pc}
 80196ae:	6802      	ldr	r2, [r0, #0]
 80196b0:	601a      	str	r2, [r3, #0]
 80196b2:	2300      	movs	r3, #0
 80196b4:	6103      	str	r3, [r0, #16]
 80196b6:	60c3      	str	r3, [r0, #12]
 80196b8:	e7f8      	b.n	80196ac <_Balloc+0x70>
 80196ba:	46c0      	nop			@ (mov r8, r8)
 80196bc:	0801c351 	.word	0x0801c351
 80196c0:	0801c3d1 	.word	0x0801c3d1

080196c4 <_Bfree>:
 80196c4:	b570      	push	{r4, r5, r6, lr}
 80196c6:	69c6      	ldr	r6, [r0, #28]
 80196c8:	0005      	movs	r5, r0
 80196ca:	000c      	movs	r4, r1
 80196cc:	2e00      	cmp	r6, #0
 80196ce:	d10e      	bne.n	80196ee <_Bfree+0x2a>
 80196d0:	2010      	movs	r0, #16
 80196d2:	f7ff fef7 	bl	80194c4 <malloc>
 80196d6:	1e02      	subs	r2, r0, #0
 80196d8:	61e8      	str	r0, [r5, #28]
 80196da:	d104      	bne.n	80196e6 <_Bfree+0x22>
 80196dc:	218f      	movs	r1, #143	@ 0x8f
 80196de:	4b09      	ldr	r3, [pc, #36]	@ (8019704 <_Bfree+0x40>)
 80196e0:	4809      	ldr	r0, [pc, #36]	@ (8019708 <_Bfree+0x44>)
 80196e2:	f000 ff69 	bl	801a5b8 <__assert_func>
 80196e6:	6046      	str	r6, [r0, #4]
 80196e8:	6086      	str	r6, [r0, #8]
 80196ea:	6006      	str	r6, [r0, #0]
 80196ec:	60c6      	str	r6, [r0, #12]
 80196ee:	2c00      	cmp	r4, #0
 80196f0:	d007      	beq.n	8019702 <_Bfree+0x3e>
 80196f2:	69eb      	ldr	r3, [r5, #28]
 80196f4:	6862      	ldr	r2, [r4, #4]
 80196f6:	68db      	ldr	r3, [r3, #12]
 80196f8:	0092      	lsls	r2, r2, #2
 80196fa:	189b      	adds	r3, r3, r2
 80196fc:	681a      	ldr	r2, [r3, #0]
 80196fe:	6022      	str	r2, [r4, #0]
 8019700:	601c      	str	r4, [r3, #0]
 8019702:	bd70      	pop	{r4, r5, r6, pc}
 8019704:	0801c351 	.word	0x0801c351
 8019708:	0801c3d1 	.word	0x0801c3d1

0801970c <__multadd>:
 801970c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801970e:	000f      	movs	r7, r1
 8019710:	9001      	str	r0, [sp, #4]
 8019712:	000c      	movs	r4, r1
 8019714:	001e      	movs	r6, r3
 8019716:	2000      	movs	r0, #0
 8019718:	690d      	ldr	r5, [r1, #16]
 801971a:	3714      	adds	r7, #20
 801971c:	683b      	ldr	r3, [r7, #0]
 801971e:	3001      	adds	r0, #1
 8019720:	b299      	uxth	r1, r3
 8019722:	4351      	muls	r1, r2
 8019724:	0c1b      	lsrs	r3, r3, #16
 8019726:	4353      	muls	r3, r2
 8019728:	1989      	adds	r1, r1, r6
 801972a:	0c0e      	lsrs	r6, r1, #16
 801972c:	199b      	adds	r3, r3, r6
 801972e:	0c1e      	lsrs	r6, r3, #16
 8019730:	b289      	uxth	r1, r1
 8019732:	041b      	lsls	r3, r3, #16
 8019734:	185b      	adds	r3, r3, r1
 8019736:	c708      	stmia	r7!, {r3}
 8019738:	4285      	cmp	r5, r0
 801973a:	dcef      	bgt.n	801971c <__multadd+0x10>
 801973c:	2e00      	cmp	r6, #0
 801973e:	d022      	beq.n	8019786 <__multadd+0x7a>
 8019740:	68a3      	ldr	r3, [r4, #8]
 8019742:	42ab      	cmp	r3, r5
 8019744:	dc19      	bgt.n	801977a <__multadd+0x6e>
 8019746:	6861      	ldr	r1, [r4, #4]
 8019748:	9801      	ldr	r0, [sp, #4]
 801974a:	3101      	adds	r1, #1
 801974c:	f7ff ff76 	bl	801963c <_Balloc>
 8019750:	1e07      	subs	r7, r0, #0
 8019752:	d105      	bne.n	8019760 <__multadd+0x54>
 8019754:	003a      	movs	r2, r7
 8019756:	21ba      	movs	r1, #186	@ 0xba
 8019758:	4b0c      	ldr	r3, [pc, #48]	@ (801978c <__multadd+0x80>)
 801975a:	480d      	ldr	r0, [pc, #52]	@ (8019790 <__multadd+0x84>)
 801975c:	f000 ff2c 	bl	801a5b8 <__assert_func>
 8019760:	0021      	movs	r1, r4
 8019762:	6922      	ldr	r2, [r4, #16]
 8019764:	310c      	adds	r1, #12
 8019766:	3202      	adds	r2, #2
 8019768:	0092      	lsls	r2, r2, #2
 801976a:	300c      	adds	r0, #12
 801976c:	f7fe ffd4 	bl	8018718 <memcpy>
 8019770:	0021      	movs	r1, r4
 8019772:	9801      	ldr	r0, [sp, #4]
 8019774:	f7ff ffa6 	bl	80196c4 <_Bfree>
 8019778:	003c      	movs	r4, r7
 801977a:	1d2b      	adds	r3, r5, #4
 801977c:	009b      	lsls	r3, r3, #2
 801977e:	18e3      	adds	r3, r4, r3
 8019780:	3501      	adds	r5, #1
 8019782:	605e      	str	r6, [r3, #4]
 8019784:	6125      	str	r5, [r4, #16]
 8019786:	0020      	movs	r0, r4
 8019788:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801978a:	46c0      	nop			@ (mov r8, r8)
 801978c:	0801c3c0 	.word	0x0801c3c0
 8019790:	0801c3d1 	.word	0x0801c3d1

08019794 <__hi0bits>:
 8019794:	2280      	movs	r2, #128	@ 0x80
 8019796:	0003      	movs	r3, r0
 8019798:	0252      	lsls	r2, r2, #9
 801979a:	2000      	movs	r0, #0
 801979c:	4293      	cmp	r3, r2
 801979e:	d201      	bcs.n	80197a4 <__hi0bits+0x10>
 80197a0:	041b      	lsls	r3, r3, #16
 80197a2:	3010      	adds	r0, #16
 80197a4:	2280      	movs	r2, #128	@ 0x80
 80197a6:	0452      	lsls	r2, r2, #17
 80197a8:	4293      	cmp	r3, r2
 80197aa:	d201      	bcs.n	80197b0 <__hi0bits+0x1c>
 80197ac:	3008      	adds	r0, #8
 80197ae:	021b      	lsls	r3, r3, #8
 80197b0:	2280      	movs	r2, #128	@ 0x80
 80197b2:	0552      	lsls	r2, r2, #21
 80197b4:	4293      	cmp	r3, r2
 80197b6:	d201      	bcs.n	80197bc <__hi0bits+0x28>
 80197b8:	3004      	adds	r0, #4
 80197ba:	011b      	lsls	r3, r3, #4
 80197bc:	2280      	movs	r2, #128	@ 0x80
 80197be:	05d2      	lsls	r2, r2, #23
 80197c0:	4293      	cmp	r3, r2
 80197c2:	d201      	bcs.n	80197c8 <__hi0bits+0x34>
 80197c4:	3002      	adds	r0, #2
 80197c6:	009b      	lsls	r3, r3, #2
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	db03      	blt.n	80197d4 <__hi0bits+0x40>
 80197cc:	3001      	adds	r0, #1
 80197ce:	4213      	tst	r3, r2
 80197d0:	d100      	bne.n	80197d4 <__hi0bits+0x40>
 80197d2:	2020      	movs	r0, #32
 80197d4:	4770      	bx	lr

080197d6 <__lo0bits>:
 80197d6:	6803      	ldr	r3, [r0, #0]
 80197d8:	0001      	movs	r1, r0
 80197da:	2207      	movs	r2, #7
 80197dc:	0018      	movs	r0, r3
 80197de:	4010      	ands	r0, r2
 80197e0:	4213      	tst	r3, r2
 80197e2:	d00d      	beq.n	8019800 <__lo0bits+0x2a>
 80197e4:	3a06      	subs	r2, #6
 80197e6:	2000      	movs	r0, #0
 80197e8:	4213      	tst	r3, r2
 80197ea:	d105      	bne.n	80197f8 <__lo0bits+0x22>
 80197ec:	3002      	adds	r0, #2
 80197ee:	4203      	tst	r3, r0
 80197f0:	d003      	beq.n	80197fa <__lo0bits+0x24>
 80197f2:	40d3      	lsrs	r3, r2
 80197f4:	0010      	movs	r0, r2
 80197f6:	600b      	str	r3, [r1, #0]
 80197f8:	4770      	bx	lr
 80197fa:	089b      	lsrs	r3, r3, #2
 80197fc:	600b      	str	r3, [r1, #0]
 80197fe:	e7fb      	b.n	80197f8 <__lo0bits+0x22>
 8019800:	b29a      	uxth	r2, r3
 8019802:	2a00      	cmp	r2, #0
 8019804:	d101      	bne.n	801980a <__lo0bits+0x34>
 8019806:	2010      	movs	r0, #16
 8019808:	0c1b      	lsrs	r3, r3, #16
 801980a:	b2da      	uxtb	r2, r3
 801980c:	2a00      	cmp	r2, #0
 801980e:	d101      	bne.n	8019814 <__lo0bits+0x3e>
 8019810:	3008      	adds	r0, #8
 8019812:	0a1b      	lsrs	r3, r3, #8
 8019814:	071a      	lsls	r2, r3, #28
 8019816:	d101      	bne.n	801981c <__lo0bits+0x46>
 8019818:	3004      	adds	r0, #4
 801981a:	091b      	lsrs	r3, r3, #4
 801981c:	079a      	lsls	r2, r3, #30
 801981e:	d101      	bne.n	8019824 <__lo0bits+0x4e>
 8019820:	3002      	adds	r0, #2
 8019822:	089b      	lsrs	r3, r3, #2
 8019824:	07da      	lsls	r2, r3, #31
 8019826:	d4e9      	bmi.n	80197fc <__lo0bits+0x26>
 8019828:	3001      	adds	r0, #1
 801982a:	085b      	lsrs	r3, r3, #1
 801982c:	d1e6      	bne.n	80197fc <__lo0bits+0x26>
 801982e:	2020      	movs	r0, #32
 8019830:	e7e2      	b.n	80197f8 <__lo0bits+0x22>
	...

08019834 <__i2b>:
 8019834:	b510      	push	{r4, lr}
 8019836:	000c      	movs	r4, r1
 8019838:	2101      	movs	r1, #1
 801983a:	f7ff feff 	bl	801963c <_Balloc>
 801983e:	2800      	cmp	r0, #0
 8019840:	d107      	bne.n	8019852 <__i2b+0x1e>
 8019842:	2146      	movs	r1, #70	@ 0x46
 8019844:	4c05      	ldr	r4, [pc, #20]	@ (801985c <__i2b+0x28>)
 8019846:	0002      	movs	r2, r0
 8019848:	4b05      	ldr	r3, [pc, #20]	@ (8019860 <__i2b+0x2c>)
 801984a:	0020      	movs	r0, r4
 801984c:	31ff      	adds	r1, #255	@ 0xff
 801984e:	f000 feb3 	bl	801a5b8 <__assert_func>
 8019852:	2301      	movs	r3, #1
 8019854:	6144      	str	r4, [r0, #20]
 8019856:	6103      	str	r3, [r0, #16]
 8019858:	bd10      	pop	{r4, pc}
 801985a:	46c0      	nop			@ (mov r8, r8)
 801985c:	0801c3d1 	.word	0x0801c3d1
 8019860:	0801c3c0 	.word	0x0801c3c0

08019864 <__multiply>:
 8019864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019866:	0014      	movs	r4, r2
 8019868:	690a      	ldr	r2, [r1, #16]
 801986a:	6923      	ldr	r3, [r4, #16]
 801986c:	000d      	movs	r5, r1
 801986e:	b08b      	sub	sp, #44	@ 0x2c
 8019870:	429a      	cmp	r2, r3
 8019872:	db02      	blt.n	801987a <__multiply+0x16>
 8019874:	0023      	movs	r3, r4
 8019876:	000c      	movs	r4, r1
 8019878:	001d      	movs	r5, r3
 801987a:	6927      	ldr	r7, [r4, #16]
 801987c:	692e      	ldr	r6, [r5, #16]
 801987e:	6861      	ldr	r1, [r4, #4]
 8019880:	19bb      	adds	r3, r7, r6
 8019882:	9303      	str	r3, [sp, #12]
 8019884:	68a3      	ldr	r3, [r4, #8]
 8019886:	19ba      	adds	r2, r7, r6
 8019888:	4293      	cmp	r3, r2
 801988a:	da00      	bge.n	801988e <__multiply+0x2a>
 801988c:	3101      	adds	r1, #1
 801988e:	f7ff fed5 	bl	801963c <_Balloc>
 8019892:	9002      	str	r0, [sp, #8]
 8019894:	2800      	cmp	r0, #0
 8019896:	d106      	bne.n	80198a6 <__multiply+0x42>
 8019898:	21b1      	movs	r1, #177	@ 0xb1
 801989a:	4b49      	ldr	r3, [pc, #292]	@ (80199c0 <__multiply+0x15c>)
 801989c:	4849      	ldr	r0, [pc, #292]	@ (80199c4 <__multiply+0x160>)
 801989e:	9a02      	ldr	r2, [sp, #8]
 80198a0:	0049      	lsls	r1, r1, #1
 80198a2:	f000 fe89 	bl	801a5b8 <__assert_func>
 80198a6:	9b02      	ldr	r3, [sp, #8]
 80198a8:	2200      	movs	r2, #0
 80198aa:	3314      	adds	r3, #20
 80198ac:	469c      	mov	ip, r3
 80198ae:	19bb      	adds	r3, r7, r6
 80198b0:	009b      	lsls	r3, r3, #2
 80198b2:	4463      	add	r3, ip
 80198b4:	9304      	str	r3, [sp, #16]
 80198b6:	4663      	mov	r3, ip
 80198b8:	9904      	ldr	r1, [sp, #16]
 80198ba:	428b      	cmp	r3, r1
 80198bc:	d32a      	bcc.n	8019914 <__multiply+0xb0>
 80198be:	0023      	movs	r3, r4
 80198c0:	00bf      	lsls	r7, r7, #2
 80198c2:	3314      	adds	r3, #20
 80198c4:	3514      	adds	r5, #20
 80198c6:	9308      	str	r3, [sp, #32]
 80198c8:	00b6      	lsls	r6, r6, #2
 80198ca:	19db      	adds	r3, r3, r7
 80198cc:	9305      	str	r3, [sp, #20]
 80198ce:	19ab      	adds	r3, r5, r6
 80198d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80198d2:	2304      	movs	r3, #4
 80198d4:	9306      	str	r3, [sp, #24]
 80198d6:	0023      	movs	r3, r4
 80198d8:	9a05      	ldr	r2, [sp, #20]
 80198da:	3315      	adds	r3, #21
 80198dc:	9501      	str	r5, [sp, #4]
 80198de:	429a      	cmp	r2, r3
 80198e0:	d305      	bcc.n	80198ee <__multiply+0x8a>
 80198e2:	1b13      	subs	r3, r2, r4
 80198e4:	3b15      	subs	r3, #21
 80198e6:	089b      	lsrs	r3, r3, #2
 80198e8:	3301      	adds	r3, #1
 80198ea:	009b      	lsls	r3, r3, #2
 80198ec:	9306      	str	r3, [sp, #24]
 80198ee:	9b01      	ldr	r3, [sp, #4]
 80198f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80198f2:	4293      	cmp	r3, r2
 80198f4:	d310      	bcc.n	8019918 <__multiply+0xb4>
 80198f6:	9b03      	ldr	r3, [sp, #12]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	dd05      	ble.n	8019908 <__multiply+0xa4>
 80198fc:	9b04      	ldr	r3, [sp, #16]
 80198fe:	3b04      	subs	r3, #4
 8019900:	9304      	str	r3, [sp, #16]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	2b00      	cmp	r3, #0
 8019906:	d056      	beq.n	80199b6 <__multiply+0x152>
 8019908:	9b02      	ldr	r3, [sp, #8]
 801990a:	9a03      	ldr	r2, [sp, #12]
 801990c:	0018      	movs	r0, r3
 801990e:	611a      	str	r2, [r3, #16]
 8019910:	b00b      	add	sp, #44	@ 0x2c
 8019912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019914:	c304      	stmia	r3!, {r2}
 8019916:	e7cf      	b.n	80198b8 <__multiply+0x54>
 8019918:	9b01      	ldr	r3, [sp, #4]
 801991a:	6818      	ldr	r0, [r3, #0]
 801991c:	b280      	uxth	r0, r0
 801991e:	2800      	cmp	r0, #0
 8019920:	d01e      	beq.n	8019960 <__multiply+0xfc>
 8019922:	4667      	mov	r7, ip
 8019924:	2500      	movs	r5, #0
 8019926:	9e08      	ldr	r6, [sp, #32]
 8019928:	ce02      	ldmia	r6!, {r1}
 801992a:	683b      	ldr	r3, [r7, #0]
 801992c:	9307      	str	r3, [sp, #28]
 801992e:	b28b      	uxth	r3, r1
 8019930:	4343      	muls	r3, r0
 8019932:	001a      	movs	r2, r3
 8019934:	466b      	mov	r3, sp
 8019936:	0c09      	lsrs	r1, r1, #16
 8019938:	8b9b      	ldrh	r3, [r3, #28]
 801993a:	4341      	muls	r1, r0
 801993c:	18d3      	adds	r3, r2, r3
 801993e:	9a07      	ldr	r2, [sp, #28]
 8019940:	195b      	adds	r3, r3, r5
 8019942:	0c12      	lsrs	r2, r2, #16
 8019944:	1889      	adds	r1, r1, r2
 8019946:	0c1a      	lsrs	r2, r3, #16
 8019948:	188a      	adds	r2, r1, r2
 801994a:	b29b      	uxth	r3, r3
 801994c:	0c15      	lsrs	r5, r2, #16
 801994e:	0412      	lsls	r2, r2, #16
 8019950:	431a      	orrs	r2, r3
 8019952:	9b05      	ldr	r3, [sp, #20]
 8019954:	c704      	stmia	r7!, {r2}
 8019956:	42b3      	cmp	r3, r6
 8019958:	d8e6      	bhi.n	8019928 <__multiply+0xc4>
 801995a:	4663      	mov	r3, ip
 801995c:	9a06      	ldr	r2, [sp, #24]
 801995e:	509d      	str	r5, [r3, r2]
 8019960:	9b01      	ldr	r3, [sp, #4]
 8019962:	6818      	ldr	r0, [r3, #0]
 8019964:	0c00      	lsrs	r0, r0, #16
 8019966:	d020      	beq.n	80199aa <__multiply+0x146>
 8019968:	4663      	mov	r3, ip
 801996a:	0025      	movs	r5, r4
 801996c:	4661      	mov	r1, ip
 801996e:	2700      	movs	r7, #0
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	3514      	adds	r5, #20
 8019974:	682a      	ldr	r2, [r5, #0]
 8019976:	680e      	ldr	r6, [r1, #0]
 8019978:	b292      	uxth	r2, r2
 801997a:	4342      	muls	r2, r0
 801997c:	0c36      	lsrs	r6, r6, #16
 801997e:	1992      	adds	r2, r2, r6
 8019980:	19d2      	adds	r2, r2, r7
 8019982:	0416      	lsls	r6, r2, #16
 8019984:	b29b      	uxth	r3, r3
 8019986:	431e      	orrs	r6, r3
 8019988:	600e      	str	r6, [r1, #0]
 801998a:	cd40      	ldmia	r5!, {r6}
 801998c:	684b      	ldr	r3, [r1, #4]
 801998e:	0c36      	lsrs	r6, r6, #16
 8019990:	4346      	muls	r6, r0
 8019992:	b29b      	uxth	r3, r3
 8019994:	0c12      	lsrs	r2, r2, #16
 8019996:	18f3      	adds	r3, r6, r3
 8019998:	189b      	adds	r3, r3, r2
 801999a:	9a05      	ldr	r2, [sp, #20]
 801999c:	0c1f      	lsrs	r7, r3, #16
 801999e:	3104      	adds	r1, #4
 80199a0:	42aa      	cmp	r2, r5
 80199a2:	d8e7      	bhi.n	8019974 <__multiply+0x110>
 80199a4:	4662      	mov	r2, ip
 80199a6:	9906      	ldr	r1, [sp, #24]
 80199a8:	5053      	str	r3, [r2, r1]
 80199aa:	9b01      	ldr	r3, [sp, #4]
 80199ac:	3304      	adds	r3, #4
 80199ae:	9301      	str	r3, [sp, #4]
 80199b0:	2304      	movs	r3, #4
 80199b2:	449c      	add	ip, r3
 80199b4:	e79b      	b.n	80198ee <__multiply+0x8a>
 80199b6:	9b03      	ldr	r3, [sp, #12]
 80199b8:	3b01      	subs	r3, #1
 80199ba:	9303      	str	r3, [sp, #12]
 80199bc:	e79b      	b.n	80198f6 <__multiply+0x92>
 80199be:	46c0      	nop			@ (mov r8, r8)
 80199c0:	0801c3c0 	.word	0x0801c3c0
 80199c4:	0801c3d1 	.word	0x0801c3d1

080199c8 <__pow5mult>:
 80199c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199ca:	2303      	movs	r3, #3
 80199cc:	0015      	movs	r5, r2
 80199ce:	0007      	movs	r7, r0
 80199d0:	000e      	movs	r6, r1
 80199d2:	401a      	ands	r2, r3
 80199d4:	421d      	tst	r5, r3
 80199d6:	d008      	beq.n	80199ea <__pow5mult+0x22>
 80199d8:	4925      	ldr	r1, [pc, #148]	@ (8019a70 <__pow5mult+0xa8>)
 80199da:	3a01      	subs	r2, #1
 80199dc:	0092      	lsls	r2, r2, #2
 80199de:	5852      	ldr	r2, [r2, r1]
 80199e0:	2300      	movs	r3, #0
 80199e2:	0031      	movs	r1, r6
 80199e4:	f7ff fe92 	bl	801970c <__multadd>
 80199e8:	0006      	movs	r6, r0
 80199ea:	10ad      	asrs	r5, r5, #2
 80199ec:	d03d      	beq.n	8019a6a <__pow5mult+0xa2>
 80199ee:	69fc      	ldr	r4, [r7, #28]
 80199f0:	2c00      	cmp	r4, #0
 80199f2:	d10f      	bne.n	8019a14 <__pow5mult+0x4c>
 80199f4:	2010      	movs	r0, #16
 80199f6:	f7ff fd65 	bl	80194c4 <malloc>
 80199fa:	1e02      	subs	r2, r0, #0
 80199fc:	61f8      	str	r0, [r7, #28]
 80199fe:	d105      	bne.n	8019a0c <__pow5mult+0x44>
 8019a00:	21b4      	movs	r1, #180	@ 0xb4
 8019a02:	4b1c      	ldr	r3, [pc, #112]	@ (8019a74 <__pow5mult+0xac>)
 8019a04:	481c      	ldr	r0, [pc, #112]	@ (8019a78 <__pow5mult+0xb0>)
 8019a06:	31ff      	adds	r1, #255	@ 0xff
 8019a08:	f000 fdd6 	bl	801a5b8 <__assert_func>
 8019a0c:	6044      	str	r4, [r0, #4]
 8019a0e:	6084      	str	r4, [r0, #8]
 8019a10:	6004      	str	r4, [r0, #0]
 8019a12:	60c4      	str	r4, [r0, #12]
 8019a14:	69fb      	ldr	r3, [r7, #28]
 8019a16:	689c      	ldr	r4, [r3, #8]
 8019a18:	9301      	str	r3, [sp, #4]
 8019a1a:	2c00      	cmp	r4, #0
 8019a1c:	d108      	bne.n	8019a30 <__pow5mult+0x68>
 8019a1e:	0038      	movs	r0, r7
 8019a20:	4916      	ldr	r1, [pc, #88]	@ (8019a7c <__pow5mult+0xb4>)
 8019a22:	f7ff ff07 	bl	8019834 <__i2b>
 8019a26:	9b01      	ldr	r3, [sp, #4]
 8019a28:	0004      	movs	r4, r0
 8019a2a:	6098      	str	r0, [r3, #8]
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	6003      	str	r3, [r0, #0]
 8019a30:	2301      	movs	r3, #1
 8019a32:	421d      	tst	r5, r3
 8019a34:	d00a      	beq.n	8019a4c <__pow5mult+0x84>
 8019a36:	0031      	movs	r1, r6
 8019a38:	0022      	movs	r2, r4
 8019a3a:	0038      	movs	r0, r7
 8019a3c:	f7ff ff12 	bl	8019864 <__multiply>
 8019a40:	0031      	movs	r1, r6
 8019a42:	9001      	str	r0, [sp, #4]
 8019a44:	0038      	movs	r0, r7
 8019a46:	f7ff fe3d 	bl	80196c4 <_Bfree>
 8019a4a:	9e01      	ldr	r6, [sp, #4]
 8019a4c:	106d      	asrs	r5, r5, #1
 8019a4e:	d00c      	beq.n	8019a6a <__pow5mult+0xa2>
 8019a50:	6820      	ldr	r0, [r4, #0]
 8019a52:	2800      	cmp	r0, #0
 8019a54:	d107      	bne.n	8019a66 <__pow5mult+0x9e>
 8019a56:	0022      	movs	r2, r4
 8019a58:	0021      	movs	r1, r4
 8019a5a:	0038      	movs	r0, r7
 8019a5c:	f7ff ff02 	bl	8019864 <__multiply>
 8019a60:	2300      	movs	r3, #0
 8019a62:	6020      	str	r0, [r4, #0]
 8019a64:	6003      	str	r3, [r0, #0]
 8019a66:	0004      	movs	r4, r0
 8019a68:	e7e2      	b.n	8019a30 <__pow5mult+0x68>
 8019a6a:	0030      	movs	r0, r6
 8019a6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019a6e:	46c0      	nop			@ (mov r8, r8)
 8019a70:	0801c42c 	.word	0x0801c42c
 8019a74:	0801c351 	.word	0x0801c351
 8019a78:	0801c3d1 	.word	0x0801c3d1
 8019a7c:	00000271 	.word	0x00000271

08019a80 <__lshift>:
 8019a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a82:	000c      	movs	r4, r1
 8019a84:	0016      	movs	r6, r2
 8019a86:	6923      	ldr	r3, [r4, #16]
 8019a88:	1157      	asrs	r7, r2, #5
 8019a8a:	b085      	sub	sp, #20
 8019a8c:	18fb      	adds	r3, r7, r3
 8019a8e:	9301      	str	r3, [sp, #4]
 8019a90:	3301      	adds	r3, #1
 8019a92:	9300      	str	r3, [sp, #0]
 8019a94:	6849      	ldr	r1, [r1, #4]
 8019a96:	68a3      	ldr	r3, [r4, #8]
 8019a98:	9002      	str	r0, [sp, #8]
 8019a9a:	9a00      	ldr	r2, [sp, #0]
 8019a9c:	4293      	cmp	r3, r2
 8019a9e:	db10      	blt.n	8019ac2 <__lshift+0x42>
 8019aa0:	9802      	ldr	r0, [sp, #8]
 8019aa2:	f7ff fdcb 	bl	801963c <_Balloc>
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	0001      	movs	r1, r0
 8019aaa:	0005      	movs	r5, r0
 8019aac:	001a      	movs	r2, r3
 8019aae:	3114      	adds	r1, #20
 8019ab0:	4298      	cmp	r0, r3
 8019ab2:	d10c      	bne.n	8019ace <__lshift+0x4e>
 8019ab4:	21ef      	movs	r1, #239	@ 0xef
 8019ab6:	002a      	movs	r2, r5
 8019ab8:	4b25      	ldr	r3, [pc, #148]	@ (8019b50 <__lshift+0xd0>)
 8019aba:	4826      	ldr	r0, [pc, #152]	@ (8019b54 <__lshift+0xd4>)
 8019abc:	0049      	lsls	r1, r1, #1
 8019abe:	f000 fd7b 	bl	801a5b8 <__assert_func>
 8019ac2:	3101      	adds	r1, #1
 8019ac4:	005b      	lsls	r3, r3, #1
 8019ac6:	e7e8      	b.n	8019a9a <__lshift+0x1a>
 8019ac8:	0098      	lsls	r0, r3, #2
 8019aca:	500a      	str	r2, [r1, r0]
 8019acc:	3301      	adds	r3, #1
 8019ace:	42bb      	cmp	r3, r7
 8019ad0:	dbfa      	blt.n	8019ac8 <__lshift+0x48>
 8019ad2:	43fb      	mvns	r3, r7
 8019ad4:	17db      	asrs	r3, r3, #31
 8019ad6:	401f      	ands	r7, r3
 8019ad8:	00bf      	lsls	r7, r7, #2
 8019ada:	0023      	movs	r3, r4
 8019adc:	201f      	movs	r0, #31
 8019ade:	19c9      	adds	r1, r1, r7
 8019ae0:	0037      	movs	r7, r6
 8019ae2:	6922      	ldr	r2, [r4, #16]
 8019ae4:	3314      	adds	r3, #20
 8019ae6:	0092      	lsls	r2, r2, #2
 8019ae8:	189a      	adds	r2, r3, r2
 8019aea:	4007      	ands	r7, r0
 8019aec:	4206      	tst	r6, r0
 8019aee:	d029      	beq.n	8019b44 <__lshift+0xc4>
 8019af0:	3001      	adds	r0, #1
 8019af2:	1bc0      	subs	r0, r0, r7
 8019af4:	9003      	str	r0, [sp, #12]
 8019af6:	468c      	mov	ip, r1
 8019af8:	2000      	movs	r0, #0
 8019afa:	681e      	ldr	r6, [r3, #0]
 8019afc:	40be      	lsls	r6, r7
 8019afe:	4306      	orrs	r6, r0
 8019b00:	4660      	mov	r0, ip
 8019b02:	c040      	stmia	r0!, {r6}
 8019b04:	4684      	mov	ip, r0
 8019b06:	9e03      	ldr	r6, [sp, #12]
 8019b08:	cb01      	ldmia	r3!, {r0}
 8019b0a:	40f0      	lsrs	r0, r6
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	d8f4      	bhi.n	8019afa <__lshift+0x7a>
 8019b10:	0026      	movs	r6, r4
 8019b12:	3615      	adds	r6, #21
 8019b14:	2304      	movs	r3, #4
 8019b16:	42b2      	cmp	r2, r6
 8019b18:	d304      	bcc.n	8019b24 <__lshift+0xa4>
 8019b1a:	1b13      	subs	r3, r2, r4
 8019b1c:	3b15      	subs	r3, #21
 8019b1e:	089b      	lsrs	r3, r3, #2
 8019b20:	3301      	adds	r3, #1
 8019b22:	009b      	lsls	r3, r3, #2
 8019b24:	50c8      	str	r0, [r1, r3]
 8019b26:	2800      	cmp	r0, #0
 8019b28:	d002      	beq.n	8019b30 <__lshift+0xb0>
 8019b2a:	9b01      	ldr	r3, [sp, #4]
 8019b2c:	3302      	adds	r3, #2
 8019b2e:	9300      	str	r3, [sp, #0]
 8019b30:	9b00      	ldr	r3, [sp, #0]
 8019b32:	9802      	ldr	r0, [sp, #8]
 8019b34:	3b01      	subs	r3, #1
 8019b36:	0021      	movs	r1, r4
 8019b38:	612b      	str	r3, [r5, #16]
 8019b3a:	f7ff fdc3 	bl	80196c4 <_Bfree>
 8019b3e:	0028      	movs	r0, r5
 8019b40:	b005      	add	sp, #20
 8019b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b44:	cb01      	ldmia	r3!, {r0}
 8019b46:	c101      	stmia	r1!, {r0}
 8019b48:	429a      	cmp	r2, r3
 8019b4a:	d8fb      	bhi.n	8019b44 <__lshift+0xc4>
 8019b4c:	e7f0      	b.n	8019b30 <__lshift+0xb0>
 8019b4e:	46c0      	nop			@ (mov r8, r8)
 8019b50:	0801c3c0 	.word	0x0801c3c0
 8019b54:	0801c3d1 	.word	0x0801c3d1

08019b58 <__mcmp>:
 8019b58:	b530      	push	{r4, r5, lr}
 8019b5a:	690b      	ldr	r3, [r1, #16]
 8019b5c:	6904      	ldr	r4, [r0, #16]
 8019b5e:	0002      	movs	r2, r0
 8019b60:	1ae0      	subs	r0, r4, r3
 8019b62:	429c      	cmp	r4, r3
 8019b64:	d10f      	bne.n	8019b86 <__mcmp+0x2e>
 8019b66:	3214      	adds	r2, #20
 8019b68:	009b      	lsls	r3, r3, #2
 8019b6a:	3114      	adds	r1, #20
 8019b6c:	0014      	movs	r4, r2
 8019b6e:	18c9      	adds	r1, r1, r3
 8019b70:	18d2      	adds	r2, r2, r3
 8019b72:	3a04      	subs	r2, #4
 8019b74:	3904      	subs	r1, #4
 8019b76:	6815      	ldr	r5, [r2, #0]
 8019b78:	680b      	ldr	r3, [r1, #0]
 8019b7a:	429d      	cmp	r5, r3
 8019b7c:	d004      	beq.n	8019b88 <__mcmp+0x30>
 8019b7e:	2001      	movs	r0, #1
 8019b80:	429d      	cmp	r5, r3
 8019b82:	d200      	bcs.n	8019b86 <__mcmp+0x2e>
 8019b84:	3802      	subs	r0, #2
 8019b86:	bd30      	pop	{r4, r5, pc}
 8019b88:	4294      	cmp	r4, r2
 8019b8a:	d3f2      	bcc.n	8019b72 <__mcmp+0x1a>
 8019b8c:	e7fb      	b.n	8019b86 <__mcmp+0x2e>
	...

08019b90 <__mdiff>:
 8019b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b92:	000c      	movs	r4, r1
 8019b94:	b087      	sub	sp, #28
 8019b96:	9000      	str	r0, [sp, #0]
 8019b98:	0011      	movs	r1, r2
 8019b9a:	0020      	movs	r0, r4
 8019b9c:	0017      	movs	r7, r2
 8019b9e:	f7ff ffdb 	bl	8019b58 <__mcmp>
 8019ba2:	1e05      	subs	r5, r0, #0
 8019ba4:	d110      	bne.n	8019bc8 <__mdiff+0x38>
 8019ba6:	0001      	movs	r1, r0
 8019ba8:	9800      	ldr	r0, [sp, #0]
 8019baa:	f7ff fd47 	bl	801963c <_Balloc>
 8019bae:	1e02      	subs	r2, r0, #0
 8019bb0:	d104      	bne.n	8019bbc <__mdiff+0x2c>
 8019bb2:	4b40      	ldr	r3, [pc, #256]	@ (8019cb4 <__mdiff+0x124>)
 8019bb4:	4840      	ldr	r0, [pc, #256]	@ (8019cb8 <__mdiff+0x128>)
 8019bb6:	4941      	ldr	r1, [pc, #260]	@ (8019cbc <__mdiff+0x12c>)
 8019bb8:	f000 fcfe 	bl	801a5b8 <__assert_func>
 8019bbc:	2301      	movs	r3, #1
 8019bbe:	6145      	str	r5, [r0, #20]
 8019bc0:	6103      	str	r3, [r0, #16]
 8019bc2:	0010      	movs	r0, r2
 8019bc4:	b007      	add	sp, #28
 8019bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bc8:	2600      	movs	r6, #0
 8019bca:	42b0      	cmp	r0, r6
 8019bcc:	da03      	bge.n	8019bd6 <__mdiff+0x46>
 8019bce:	0023      	movs	r3, r4
 8019bd0:	003c      	movs	r4, r7
 8019bd2:	001f      	movs	r7, r3
 8019bd4:	3601      	adds	r6, #1
 8019bd6:	6861      	ldr	r1, [r4, #4]
 8019bd8:	9800      	ldr	r0, [sp, #0]
 8019bda:	f7ff fd2f 	bl	801963c <_Balloc>
 8019bde:	1e02      	subs	r2, r0, #0
 8019be0:	d103      	bne.n	8019bea <__mdiff+0x5a>
 8019be2:	4b34      	ldr	r3, [pc, #208]	@ (8019cb4 <__mdiff+0x124>)
 8019be4:	4834      	ldr	r0, [pc, #208]	@ (8019cb8 <__mdiff+0x128>)
 8019be6:	4936      	ldr	r1, [pc, #216]	@ (8019cc0 <__mdiff+0x130>)
 8019be8:	e7e6      	b.n	8019bb8 <__mdiff+0x28>
 8019bea:	6923      	ldr	r3, [r4, #16]
 8019bec:	3414      	adds	r4, #20
 8019bee:	9300      	str	r3, [sp, #0]
 8019bf0:	009b      	lsls	r3, r3, #2
 8019bf2:	18e3      	adds	r3, r4, r3
 8019bf4:	0021      	movs	r1, r4
 8019bf6:	9401      	str	r4, [sp, #4]
 8019bf8:	003c      	movs	r4, r7
 8019bfa:	9302      	str	r3, [sp, #8]
 8019bfc:	693b      	ldr	r3, [r7, #16]
 8019bfe:	3414      	adds	r4, #20
 8019c00:	009b      	lsls	r3, r3, #2
 8019c02:	18e3      	adds	r3, r4, r3
 8019c04:	9303      	str	r3, [sp, #12]
 8019c06:	0003      	movs	r3, r0
 8019c08:	60c6      	str	r6, [r0, #12]
 8019c0a:	468c      	mov	ip, r1
 8019c0c:	2000      	movs	r0, #0
 8019c0e:	3314      	adds	r3, #20
 8019c10:	9304      	str	r3, [sp, #16]
 8019c12:	9305      	str	r3, [sp, #20]
 8019c14:	4663      	mov	r3, ip
 8019c16:	cb20      	ldmia	r3!, {r5}
 8019c18:	b2a9      	uxth	r1, r5
 8019c1a:	000e      	movs	r6, r1
 8019c1c:	469c      	mov	ip, r3
 8019c1e:	cc08      	ldmia	r4!, {r3}
 8019c20:	0c2d      	lsrs	r5, r5, #16
 8019c22:	b299      	uxth	r1, r3
 8019c24:	1a71      	subs	r1, r6, r1
 8019c26:	1809      	adds	r1, r1, r0
 8019c28:	0c1b      	lsrs	r3, r3, #16
 8019c2a:	1408      	asrs	r0, r1, #16
 8019c2c:	1aeb      	subs	r3, r5, r3
 8019c2e:	181b      	adds	r3, r3, r0
 8019c30:	1418      	asrs	r0, r3, #16
 8019c32:	b289      	uxth	r1, r1
 8019c34:	041b      	lsls	r3, r3, #16
 8019c36:	4319      	orrs	r1, r3
 8019c38:	9b05      	ldr	r3, [sp, #20]
 8019c3a:	c302      	stmia	r3!, {r1}
 8019c3c:	9305      	str	r3, [sp, #20]
 8019c3e:	9b03      	ldr	r3, [sp, #12]
 8019c40:	42a3      	cmp	r3, r4
 8019c42:	d8e7      	bhi.n	8019c14 <__mdiff+0x84>
 8019c44:	0039      	movs	r1, r7
 8019c46:	9c03      	ldr	r4, [sp, #12]
 8019c48:	3115      	adds	r1, #21
 8019c4a:	2304      	movs	r3, #4
 8019c4c:	428c      	cmp	r4, r1
 8019c4e:	d304      	bcc.n	8019c5a <__mdiff+0xca>
 8019c50:	1be3      	subs	r3, r4, r7
 8019c52:	3b15      	subs	r3, #21
 8019c54:	089b      	lsrs	r3, r3, #2
 8019c56:	3301      	adds	r3, #1
 8019c58:	009b      	lsls	r3, r3, #2
 8019c5a:	9901      	ldr	r1, [sp, #4]
 8019c5c:	18cd      	adds	r5, r1, r3
 8019c5e:	9904      	ldr	r1, [sp, #16]
 8019c60:	002e      	movs	r6, r5
 8019c62:	18cb      	adds	r3, r1, r3
 8019c64:	001f      	movs	r7, r3
 8019c66:	9902      	ldr	r1, [sp, #8]
 8019c68:	428e      	cmp	r6, r1
 8019c6a:	d311      	bcc.n	8019c90 <__mdiff+0x100>
 8019c6c:	9c02      	ldr	r4, [sp, #8]
 8019c6e:	1ee9      	subs	r1, r5, #3
 8019c70:	2000      	movs	r0, #0
 8019c72:	428c      	cmp	r4, r1
 8019c74:	d304      	bcc.n	8019c80 <__mdiff+0xf0>
 8019c76:	0021      	movs	r1, r4
 8019c78:	3103      	adds	r1, #3
 8019c7a:	1b49      	subs	r1, r1, r5
 8019c7c:	0889      	lsrs	r1, r1, #2
 8019c7e:	0088      	lsls	r0, r1, #2
 8019c80:	181b      	adds	r3, r3, r0
 8019c82:	3b04      	subs	r3, #4
 8019c84:	6819      	ldr	r1, [r3, #0]
 8019c86:	2900      	cmp	r1, #0
 8019c88:	d010      	beq.n	8019cac <__mdiff+0x11c>
 8019c8a:	9b00      	ldr	r3, [sp, #0]
 8019c8c:	6113      	str	r3, [r2, #16]
 8019c8e:	e798      	b.n	8019bc2 <__mdiff+0x32>
 8019c90:	4684      	mov	ip, r0
 8019c92:	ce02      	ldmia	r6!, {r1}
 8019c94:	b288      	uxth	r0, r1
 8019c96:	4460      	add	r0, ip
 8019c98:	1400      	asrs	r0, r0, #16
 8019c9a:	0c0c      	lsrs	r4, r1, #16
 8019c9c:	1904      	adds	r4, r0, r4
 8019c9e:	4461      	add	r1, ip
 8019ca0:	1420      	asrs	r0, r4, #16
 8019ca2:	b289      	uxth	r1, r1
 8019ca4:	0424      	lsls	r4, r4, #16
 8019ca6:	4321      	orrs	r1, r4
 8019ca8:	c702      	stmia	r7!, {r1}
 8019caa:	e7dc      	b.n	8019c66 <__mdiff+0xd6>
 8019cac:	9900      	ldr	r1, [sp, #0]
 8019cae:	3901      	subs	r1, #1
 8019cb0:	9100      	str	r1, [sp, #0]
 8019cb2:	e7e6      	b.n	8019c82 <__mdiff+0xf2>
 8019cb4:	0801c3c0 	.word	0x0801c3c0
 8019cb8:	0801c3d1 	.word	0x0801c3d1
 8019cbc:	00000237 	.word	0x00000237
 8019cc0:	00000245 	.word	0x00000245

08019cc4 <__d2b>:
 8019cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019cc6:	2101      	movs	r1, #1
 8019cc8:	0016      	movs	r6, r2
 8019cca:	001f      	movs	r7, r3
 8019ccc:	f7ff fcb6 	bl	801963c <_Balloc>
 8019cd0:	1e04      	subs	r4, r0, #0
 8019cd2:	d105      	bne.n	8019ce0 <__d2b+0x1c>
 8019cd4:	0022      	movs	r2, r4
 8019cd6:	4b25      	ldr	r3, [pc, #148]	@ (8019d6c <__d2b+0xa8>)
 8019cd8:	4825      	ldr	r0, [pc, #148]	@ (8019d70 <__d2b+0xac>)
 8019cda:	4926      	ldr	r1, [pc, #152]	@ (8019d74 <__d2b+0xb0>)
 8019cdc:	f000 fc6c 	bl	801a5b8 <__assert_func>
 8019ce0:	033b      	lsls	r3, r7, #12
 8019ce2:	007d      	lsls	r5, r7, #1
 8019ce4:	0b1b      	lsrs	r3, r3, #12
 8019ce6:	0d6d      	lsrs	r5, r5, #21
 8019ce8:	d002      	beq.n	8019cf0 <__d2b+0x2c>
 8019cea:	2280      	movs	r2, #128	@ 0x80
 8019cec:	0352      	lsls	r2, r2, #13
 8019cee:	4313      	orrs	r3, r2
 8019cf0:	9301      	str	r3, [sp, #4]
 8019cf2:	2e00      	cmp	r6, #0
 8019cf4:	d025      	beq.n	8019d42 <__d2b+0x7e>
 8019cf6:	4668      	mov	r0, sp
 8019cf8:	9600      	str	r6, [sp, #0]
 8019cfa:	f7ff fd6c 	bl	80197d6 <__lo0bits>
 8019cfe:	9b01      	ldr	r3, [sp, #4]
 8019d00:	9900      	ldr	r1, [sp, #0]
 8019d02:	2800      	cmp	r0, #0
 8019d04:	d01b      	beq.n	8019d3e <__d2b+0x7a>
 8019d06:	2220      	movs	r2, #32
 8019d08:	001e      	movs	r6, r3
 8019d0a:	1a12      	subs	r2, r2, r0
 8019d0c:	4096      	lsls	r6, r2
 8019d0e:	0032      	movs	r2, r6
 8019d10:	40c3      	lsrs	r3, r0
 8019d12:	430a      	orrs	r2, r1
 8019d14:	6162      	str	r2, [r4, #20]
 8019d16:	9301      	str	r3, [sp, #4]
 8019d18:	9e01      	ldr	r6, [sp, #4]
 8019d1a:	61a6      	str	r6, [r4, #24]
 8019d1c:	1e73      	subs	r3, r6, #1
 8019d1e:	419e      	sbcs	r6, r3
 8019d20:	3601      	adds	r6, #1
 8019d22:	6126      	str	r6, [r4, #16]
 8019d24:	2d00      	cmp	r5, #0
 8019d26:	d014      	beq.n	8019d52 <__d2b+0x8e>
 8019d28:	2635      	movs	r6, #53	@ 0x35
 8019d2a:	4b13      	ldr	r3, [pc, #76]	@ (8019d78 <__d2b+0xb4>)
 8019d2c:	18ed      	adds	r5, r5, r3
 8019d2e:	9b08      	ldr	r3, [sp, #32]
 8019d30:	182d      	adds	r5, r5, r0
 8019d32:	601d      	str	r5, [r3, #0]
 8019d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d36:	1a36      	subs	r6, r6, r0
 8019d38:	601e      	str	r6, [r3, #0]
 8019d3a:	0020      	movs	r0, r4
 8019d3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019d3e:	6161      	str	r1, [r4, #20]
 8019d40:	e7ea      	b.n	8019d18 <__d2b+0x54>
 8019d42:	a801      	add	r0, sp, #4
 8019d44:	f7ff fd47 	bl	80197d6 <__lo0bits>
 8019d48:	9b01      	ldr	r3, [sp, #4]
 8019d4a:	2601      	movs	r6, #1
 8019d4c:	6163      	str	r3, [r4, #20]
 8019d4e:	3020      	adds	r0, #32
 8019d50:	e7e7      	b.n	8019d22 <__d2b+0x5e>
 8019d52:	4b0a      	ldr	r3, [pc, #40]	@ (8019d7c <__d2b+0xb8>)
 8019d54:	18c0      	adds	r0, r0, r3
 8019d56:	9b08      	ldr	r3, [sp, #32]
 8019d58:	6018      	str	r0, [r3, #0]
 8019d5a:	4b09      	ldr	r3, [pc, #36]	@ (8019d80 <__d2b+0xbc>)
 8019d5c:	18f3      	adds	r3, r6, r3
 8019d5e:	009b      	lsls	r3, r3, #2
 8019d60:	18e3      	adds	r3, r4, r3
 8019d62:	6958      	ldr	r0, [r3, #20]
 8019d64:	f7ff fd16 	bl	8019794 <__hi0bits>
 8019d68:	0176      	lsls	r6, r6, #5
 8019d6a:	e7e3      	b.n	8019d34 <__d2b+0x70>
 8019d6c:	0801c3c0 	.word	0x0801c3c0
 8019d70:	0801c3d1 	.word	0x0801c3d1
 8019d74:	0000030f 	.word	0x0000030f
 8019d78:	fffffbcd 	.word	0xfffffbcd
 8019d7c:	fffffbce 	.word	0xfffffbce
 8019d80:	3fffffff 	.word	0x3fffffff

08019d84 <__ssputs_r>:
 8019d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d86:	688e      	ldr	r6, [r1, #8]
 8019d88:	b085      	sub	sp, #20
 8019d8a:	001f      	movs	r7, r3
 8019d8c:	000c      	movs	r4, r1
 8019d8e:	680b      	ldr	r3, [r1, #0]
 8019d90:	9002      	str	r0, [sp, #8]
 8019d92:	9203      	str	r2, [sp, #12]
 8019d94:	42be      	cmp	r6, r7
 8019d96:	d830      	bhi.n	8019dfa <__ssputs_r+0x76>
 8019d98:	210c      	movs	r1, #12
 8019d9a:	5e62      	ldrsh	r2, [r4, r1]
 8019d9c:	2190      	movs	r1, #144	@ 0x90
 8019d9e:	00c9      	lsls	r1, r1, #3
 8019da0:	420a      	tst	r2, r1
 8019da2:	d028      	beq.n	8019df6 <__ssputs_r+0x72>
 8019da4:	2003      	movs	r0, #3
 8019da6:	6921      	ldr	r1, [r4, #16]
 8019da8:	1a5b      	subs	r3, r3, r1
 8019daa:	9301      	str	r3, [sp, #4]
 8019dac:	6963      	ldr	r3, [r4, #20]
 8019dae:	4343      	muls	r3, r0
 8019db0:	9801      	ldr	r0, [sp, #4]
 8019db2:	0fdd      	lsrs	r5, r3, #31
 8019db4:	18ed      	adds	r5, r5, r3
 8019db6:	1c7b      	adds	r3, r7, #1
 8019db8:	181b      	adds	r3, r3, r0
 8019dba:	106d      	asrs	r5, r5, #1
 8019dbc:	42ab      	cmp	r3, r5
 8019dbe:	d900      	bls.n	8019dc2 <__ssputs_r+0x3e>
 8019dc0:	001d      	movs	r5, r3
 8019dc2:	0552      	lsls	r2, r2, #21
 8019dc4:	d528      	bpl.n	8019e18 <__ssputs_r+0x94>
 8019dc6:	0029      	movs	r1, r5
 8019dc8:	9802      	ldr	r0, [sp, #8]
 8019dca:	f7ff fba7 	bl	801951c <_malloc_r>
 8019dce:	1e06      	subs	r6, r0, #0
 8019dd0:	d02c      	beq.n	8019e2c <__ssputs_r+0xa8>
 8019dd2:	9a01      	ldr	r2, [sp, #4]
 8019dd4:	6921      	ldr	r1, [r4, #16]
 8019dd6:	f7fe fc9f 	bl	8018718 <memcpy>
 8019dda:	89a2      	ldrh	r2, [r4, #12]
 8019ddc:	4b18      	ldr	r3, [pc, #96]	@ (8019e40 <__ssputs_r+0xbc>)
 8019dde:	401a      	ands	r2, r3
 8019de0:	2380      	movs	r3, #128	@ 0x80
 8019de2:	4313      	orrs	r3, r2
 8019de4:	81a3      	strh	r3, [r4, #12]
 8019de6:	9b01      	ldr	r3, [sp, #4]
 8019de8:	6126      	str	r6, [r4, #16]
 8019dea:	18f6      	adds	r6, r6, r3
 8019dec:	6026      	str	r6, [r4, #0]
 8019dee:	003e      	movs	r6, r7
 8019df0:	6165      	str	r5, [r4, #20]
 8019df2:	1aed      	subs	r5, r5, r3
 8019df4:	60a5      	str	r5, [r4, #8]
 8019df6:	42be      	cmp	r6, r7
 8019df8:	d900      	bls.n	8019dfc <__ssputs_r+0x78>
 8019dfa:	003e      	movs	r6, r7
 8019dfc:	0032      	movs	r2, r6
 8019dfe:	9903      	ldr	r1, [sp, #12]
 8019e00:	6820      	ldr	r0, [r4, #0]
 8019e02:	f000 fbb3 	bl	801a56c <memmove>
 8019e06:	2000      	movs	r0, #0
 8019e08:	68a3      	ldr	r3, [r4, #8]
 8019e0a:	1b9b      	subs	r3, r3, r6
 8019e0c:	60a3      	str	r3, [r4, #8]
 8019e0e:	6823      	ldr	r3, [r4, #0]
 8019e10:	199b      	adds	r3, r3, r6
 8019e12:	6023      	str	r3, [r4, #0]
 8019e14:	b005      	add	sp, #20
 8019e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e18:	002a      	movs	r2, r5
 8019e1a:	9802      	ldr	r0, [sp, #8]
 8019e1c:	f000 fc29 	bl	801a672 <_realloc_r>
 8019e20:	1e06      	subs	r6, r0, #0
 8019e22:	d1e0      	bne.n	8019de6 <__ssputs_r+0x62>
 8019e24:	6921      	ldr	r1, [r4, #16]
 8019e26:	9802      	ldr	r0, [sp, #8]
 8019e28:	f7ff fb02 	bl	8019430 <_free_r>
 8019e2c:	230c      	movs	r3, #12
 8019e2e:	2001      	movs	r0, #1
 8019e30:	9a02      	ldr	r2, [sp, #8]
 8019e32:	4240      	negs	r0, r0
 8019e34:	6013      	str	r3, [r2, #0]
 8019e36:	89a2      	ldrh	r2, [r4, #12]
 8019e38:	3334      	adds	r3, #52	@ 0x34
 8019e3a:	4313      	orrs	r3, r2
 8019e3c:	81a3      	strh	r3, [r4, #12]
 8019e3e:	e7e9      	b.n	8019e14 <__ssputs_r+0x90>
 8019e40:	fffffb7f 	.word	0xfffffb7f

08019e44 <_svfiprintf_r>:
 8019e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e46:	b0a1      	sub	sp, #132	@ 0x84
 8019e48:	9003      	str	r0, [sp, #12]
 8019e4a:	001d      	movs	r5, r3
 8019e4c:	898b      	ldrh	r3, [r1, #12]
 8019e4e:	000f      	movs	r7, r1
 8019e50:	0016      	movs	r6, r2
 8019e52:	061b      	lsls	r3, r3, #24
 8019e54:	d511      	bpl.n	8019e7a <_svfiprintf_r+0x36>
 8019e56:	690b      	ldr	r3, [r1, #16]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d10e      	bne.n	8019e7a <_svfiprintf_r+0x36>
 8019e5c:	2140      	movs	r1, #64	@ 0x40
 8019e5e:	f7ff fb5d 	bl	801951c <_malloc_r>
 8019e62:	6038      	str	r0, [r7, #0]
 8019e64:	6138      	str	r0, [r7, #16]
 8019e66:	2800      	cmp	r0, #0
 8019e68:	d105      	bne.n	8019e76 <_svfiprintf_r+0x32>
 8019e6a:	230c      	movs	r3, #12
 8019e6c:	9a03      	ldr	r2, [sp, #12]
 8019e6e:	6013      	str	r3, [r2, #0]
 8019e70:	2001      	movs	r0, #1
 8019e72:	4240      	negs	r0, r0
 8019e74:	e0cf      	b.n	801a016 <_svfiprintf_r+0x1d2>
 8019e76:	2340      	movs	r3, #64	@ 0x40
 8019e78:	617b      	str	r3, [r7, #20]
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	ac08      	add	r4, sp, #32
 8019e7e:	6163      	str	r3, [r4, #20]
 8019e80:	3320      	adds	r3, #32
 8019e82:	7663      	strb	r3, [r4, #25]
 8019e84:	3310      	adds	r3, #16
 8019e86:	76a3      	strb	r3, [r4, #26]
 8019e88:	9507      	str	r5, [sp, #28]
 8019e8a:	0035      	movs	r5, r6
 8019e8c:	782b      	ldrb	r3, [r5, #0]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d001      	beq.n	8019e96 <_svfiprintf_r+0x52>
 8019e92:	2b25      	cmp	r3, #37	@ 0x25
 8019e94:	d148      	bne.n	8019f28 <_svfiprintf_r+0xe4>
 8019e96:	1bab      	subs	r3, r5, r6
 8019e98:	9305      	str	r3, [sp, #20]
 8019e9a:	42b5      	cmp	r5, r6
 8019e9c:	d00b      	beq.n	8019eb6 <_svfiprintf_r+0x72>
 8019e9e:	0032      	movs	r2, r6
 8019ea0:	0039      	movs	r1, r7
 8019ea2:	9803      	ldr	r0, [sp, #12]
 8019ea4:	f7ff ff6e 	bl	8019d84 <__ssputs_r>
 8019ea8:	3001      	adds	r0, #1
 8019eaa:	d100      	bne.n	8019eae <_svfiprintf_r+0x6a>
 8019eac:	e0ae      	b.n	801a00c <_svfiprintf_r+0x1c8>
 8019eae:	6963      	ldr	r3, [r4, #20]
 8019eb0:	9a05      	ldr	r2, [sp, #20]
 8019eb2:	189b      	adds	r3, r3, r2
 8019eb4:	6163      	str	r3, [r4, #20]
 8019eb6:	782b      	ldrb	r3, [r5, #0]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d100      	bne.n	8019ebe <_svfiprintf_r+0x7a>
 8019ebc:	e0a6      	b.n	801a00c <_svfiprintf_r+0x1c8>
 8019ebe:	2201      	movs	r2, #1
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	4252      	negs	r2, r2
 8019ec4:	6062      	str	r2, [r4, #4]
 8019ec6:	a904      	add	r1, sp, #16
 8019ec8:	3254      	adds	r2, #84	@ 0x54
 8019eca:	1852      	adds	r2, r2, r1
 8019ecc:	1c6e      	adds	r6, r5, #1
 8019ece:	6023      	str	r3, [r4, #0]
 8019ed0:	60e3      	str	r3, [r4, #12]
 8019ed2:	60a3      	str	r3, [r4, #8]
 8019ed4:	7013      	strb	r3, [r2, #0]
 8019ed6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019ed8:	4b54      	ldr	r3, [pc, #336]	@ (801a02c <_svfiprintf_r+0x1e8>)
 8019eda:	2205      	movs	r2, #5
 8019edc:	0018      	movs	r0, r3
 8019ede:	7831      	ldrb	r1, [r6, #0]
 8019ee0:	9305      	str	r3, [sp, #20]
 8019ee2:	f7fe fc0e 	bl	8018702 <memchr>
 8019ee6:	1c75      	adds	r5, r6, #1
 8019ee8:	2800      	cmp	r0, #0
 8019eea:	d11f      	bne.n	8019f2c <_svfiprintf_r+0xe8>
 8019eec:	6822      	ldr	r2, [r4, #0]
 8019eee:	06d3      	lsls	r3, r2, #27
 8019ef0:	d504      	bpl.n	8019efc <_svfiprintf_r+0xb8>
 8019ef2:	2353      	movs	r3, #83	@ 0x53
 8019ef4:	a904      	add	r1, sp, #16
 8019ef6:	185b      	adds	r3, r3, r1
 8019ef8:	2120      	movs	r1, #32
 8019efa:	7019      	strb	r1, [r3, #0]
 8019efc:	0713      	lsls	r3, r2, #28
 8019efe:	d504      	bpl.n	8019f0a <_svfiprintf_r+0xc6>
 8019f00:	2353      	movs	r3, #83	@ 0x53
 8019f02:	a904      	add	r1, sp, #16
 8019f04:	185b      	adds	r3, r3, r1
 8019f06:	212b      	movs	r1, #43	@ 0x2b
 8019f08:	7019      	strb	r1, [r3, #0]
 8019f0a:	7833      	ldrb	r3, [r6, #0]
 8019f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f0e:	d016      	beq.n	8019f3e <_svfiprintf_r+0xfa>
 8019f10:	0035      	movs	r5, r6
 8019f12:	2100      	movs	r1, #0
 8019f14:	200a      	movs	r0, #10
 8019f16:	68e3      	ldr	r3, [r4, #12]
 8019f18:	782a      	ldrb	r2, [r5, #0]
 8019f1a:	1c6e      	adds	r6, r5, #1
 8019f1c:	3a30      	subs	r2, #48	@ 0x30
 8019f1e:	2a09      	cmp	r2, #9
 8019f20:	d950      	bls.n	8019fc4 <_svfiprintf_r+0x180>
 8019f22:	2900      	cmp	r1, #0
 8019f24:	d111      	bne.n	8019f4a <_svfiprintf_r+0x106>
 8019f26:	e017      	b.n	8019f58 <_svfiprintf_r+0x114>
 8019f28:	3501      	adds	r5, #1
 8019f2a:	e7af      	b.n	8019e8c <_svfiprintf_r+0x48>
 8019f2c:	9b05      	ldr	r3, [sp, #20]
 8019f2e:	6822      	ldr	r2, [r4, #0]
 8019f30:	1ac0      	subs	r0, r0, r3
 8019f32:	2301      	movs	r3, #1
 8019f34:	4083      	lsls	r3, r0
 8019f36:	4313      	orrs	r3, r2
 8019f38:	002e      	movs	r6, r5
 8019f3a:	6023      	str	r3, [r4, #0]
 8019f3c:	e7cc      	b.n	8019ed8 <_svfiprintf_r+0x94>
 8019f3e:	9b07      	ldr	r3, [sp, #28]
 8019f40:	1d19      	adds	r1, r3, #4
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	9107      	str	r1, [sp, #28]
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	db01      	blt.n	8019f4e <_svfiprintf_r+0x10a>
 8019f4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019f4c:	e004      	b.n	8019f58 <_svfiprintf_r+0x114>
 8019f4e:	425b      	negs	r3, r3
 8019f50:	60e3      	str	r3, [r4, #12]
 8019f52:	2302      	movs	r3, #2
 8019f54:	4313      	orrs	r3, r2
 8019f56:	6023      	str	r3, [r4, #0]
 8019f58:	782b      	ldrb	r3, [r5, #0]
 8019f5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8019f5c:	d10c      	bne.n	8019f78 <_svfiprintf_r+0x134>
 8019f5e:	786b      	ldrb	r3, [r5, #1]
 8019f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f62:	d134      	bne.n	8019fce <_svfiprintf_r+0x18a>
 8019f64:	9b07      	ldr	r3, [sp, #28]
 8019f66:	3502      	adds	r5, #2
 8019f68:	1d1a      	adds	r2, r3, #4
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	9207      	str	r2, [sp, #28]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	da01      	bge.n	8019f76 <_svfiprintf_r+0x132>
 8019f72:	2301      	movs	r3, #1
 8019f74:	425b      	negs	r3, r3
 8019f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f78:	4e2d      	ldr	r6, [pc, #180]	@ (801a030 <_svfiprintf_r+0x1ec>)
 8019f7a:	2203      	movs	r2, #3
 8019f7c:	0030      	movs	r0, r6
 8019f7e:	7829      	ldrb	r1, [r5, #0]
 8019f80:	f7fe fbbf 	bl	8018702 <memchr>
 8019f84:	2800      	cmp	r0, #0
 8019f86:	d006      	beq.n	8019f96 <_svfiprintf_r+0x152>
 8019f88:	2340      	movs	r3, #64	@ 0x40
 8019f8a:	1b80      	subs	r0, r0, r6
 8019f8c:	4083      	lsls	r3, r0
 8019f8e:	6822      	ldr	r2, [r4, #0]
 8019f90:	3501      	adds	r5, #1
 8019f92:	4313      	orrs	r3, r2
 8019f94:	6023      	str	r3, [r4, #0]
 8019f96:	7829      	ldrb	r1, [r5, #0]
 8019f98:	2206      	movs	r2, #6
 8019f9a:	4826      	ldr	r0, [pc, #152]	@ (801a034 <_svfiprintf_r+0x1f0>)
 8019f9c:	1c6e      	adds	r6, r5, #1
 8019f9e:	7621      	strb	r1, [r4, #24]
 8019fa0:	f7fe fbaf 	bl	8018702 <memchr>
 8019fa4:	2800      	cmp	r0, #0
 8019fa6:	d038      	beq.n	801a01a <_svfiprintf_r+0x1d6>
 8019fa8:	4b23      	ldr	r3, [pc, #140]	@ (801a038 <_svfiprintf_r+0x1f4>)
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d122      	bne.n	8019ff4 <_svfiprintf_r+0x1b0>
 8019fae:	2207      	movs	r2, #7
 8019fb0:	9b07      	ldr	r3, [sp, #28]
 8019fb2:	3307      	adds	r3, #7
 8019fb4:	4393      	bics	r3, r2
 8019fb6:	3308      	adds	r3, #8
 8019fb8:	9307      	str	r3, [sp, #28]
 8019fba:	6963      	ldr	r3, [r4, #20]
 8019fbc:	9a04      	ldr	r2, [sp, #16]
 8019fbe:	189b      	adds	r3, r3, r2
 8019fc0:	6163      	str	r3, [r4, #20]
 8019fc2:	e762      	b.n	8019e8a <_svfiprintf_r+0x46>
 8019fc4:	4343      	muls	r3, r0
 8019fc6:	0035      	movs	r5, r6
 8019fc8:	2101      	movs	r1, #1
 8019fca:	189b      	adds	r3, r3, r2
 8019fcc:	e7a4      	b.n	8019f18 <_svfiprintf_r+0xd4>
 8019fce:	2300      	movs	r3, #0
 8019fd0:	200a      	movs	r0, #10
 8019fd2:	0019      	movs	r1, r3
 8019fd4:	3501      	adds	r5, #1
 8019fd6:	6063      	str	r3, [r4, #4]
 8019fd8:	782a      	ldrb	r2, [r5, #0]
 8019fda:	1c6e      	adds	r6, r5, #1
 8019fdc:	3a30      	subs	r2, #48	@ 0x30
 8019fde:	2a09      	cmp	r2, #9
 8019fe0:	d903      	bls.n	8019fea <_svfiprintf_r+0x1a6>
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d0c8      	beq.n	8019f78 <_svfiprintf_r+0x134>
 8019fe6:	9109      	str	r1, [sp, #36]	@ 0x24
 8019fe8:	e7c6      	b.n	8019f78 <_svfiprintf_r+0x134>
 8019fea:	4341      	muls	r1, r0
 8019fec:	0035      	movs	r5, r6
 8019fee:	2301      	movs	r3, #1
 8019ff0:	1889      	adds	r1, r1, r2
 8019ff2:	e7f1      	b.n	8019fd8 <_svfiprintf_r+0x194>
 8019ff4:	aa07      	add	r2, sp, #28
 8019ff6:	9200      	str	r2, [sp, #0]
 8019ff8:	0021      	movs	r1, r4
 8019ffa:	003a      	movs	r2, r7
 8019ffc:	4b0f      	ldr	r3, [pc, #60]	@ (801a03c <_svfiprintf_r+0x1f8>)
 8019ffe:	9803      	ldr	r0, [sp, #12]
 801a000:	f7fd fd8c 	bl	8017b1c <_printf_float>
 801a004:	9004      	str	r0, [sp, #16]
 801a006:	9b04      	ldr	r3, [sp, #16]
 801a008:	3301      	adds	r3, #1
 801a00a:	d1d6      	bne.n	8019fba <_svfiprintf_r+0x176>
 801a00c:	89bb      	ldrh	r3, [r7, #12]
 801a00e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a010:	065b      	lsls	r3, r3, #25
 801a012:	d500      	bpl.n	801a016 <_svfiprintf_r+0x1d2>
 801a014:	e72c      	b.n	8019e70 <_svfiprintf_r+0x2c>
 801a016:	b021      	add	sp, #132	@ 0x84
 801a018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a01a:	aa07      	add	r2, sp, #28
 801a01c:	9200      	str	r2, [sp, #0]
 801a01e:	0021      	movs	r1, r4
 801a020:	003a      	movs	r2, r7
 801a022:	4b06      	ldr	r3, [pc, #24]	@ (801a03c <_svfiprintf_r+0x1f8>)
 801a024:	9803      	ldr	r0, [sp, #12]
 801a026:	f7fe f827 	bl	8018078 <_printf_i>
 801a02a:	e7eb      	b.n	801a004 <_svfiprintf_r+0x1c0>
 801a02c:	0801c528 	.word	0x0801c528
 801a030:	0801c52e 	.word	0x0801c52e
 801a034:	0801c532 	.word	0x0801c532
 801a038:	08017b1d 	.word	0x08017b1d
 801a03c:	08019d85 	.word	0x08019d85

0801a040 <__sfputc_r>:
 801a040:	6893      	ldr	r3, [r2, #8]
 801a042:	b510      	push	{r4, lr}
 801a044:	3b01      	subs	r3, #1
 801a046:	6093      	str	r3, [r2, #8]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	da04      	bge.n	801a056 <__sfputc_r+0x16>
 801a04c:	6994      	ldr	r4, [r2, #24]
 801a04e:	42a3      	cmp	r3, r4
 801a050:	db07      	blt.n	801a062 <__sfputc_r+0x22>
 801a052:	290a      	cmp	r1, #10
 801a054:	d005      	beq.n	801a062 <__sfputc_r+0x22>
 801a056:	6813      	ldr	r3, [r2, #0]
 801a058:	1c58      	adds	r0, r3, #1
 801a05a:	6010      	str	r0, [r2, #0]
 801a05c:	7019      	strb	r1, [r3, #0]
 801a05e:	0008      	movs	r0, r1
 801a060:	bd10      	pop	{r4, pc}
 801a062:	f000 f9e2 	bl	801a42a <__swbuf_r>
 801a066:	0001      	movs	r1, r0
 801a068:	e7f9      	b.n	801a05e <__sfputc_r+0x1e>

0801a06a <__sfputs_r>:
 801a06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a06c:	0006      	movs	r6, r0
 801a06e:	000f      	movs	r7, r1
 801a070:	0014      	movs	r4, r2
 801a072:	18d5      	adds	r5, r2, r3
 801a074:	42ac      	cmp	r4, r5
 801a076:	d101      	bne.n	801a07c <__sfputs_r+0x12>
 801a078:	2000      	movs	r0, #0
 801a07a:	e007      	b.n	801a08c <__sfputs_r+0x22>
 801a07c:	7821      	ldrb	r1, [r4, #0]
 801a07e:	003a      	movs	r2, r7
 801a080:	0030      	movs	r0, r6
 801a082:	f7ff ffdd 	bl	801a040 <__sfputc_r>
 801a086:	3401      	adds	r4, #1
 801a088:	1c43      	adds	r3, r0, #1
 801a08a:	d1f3      	bne.n	801a074 <__sfputs_r+0xa>
 801a08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a090 <_vfiprintf_r>:
 801a090:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a092:	b0a1      	sub	sp, #132	@ 0x84
 801a094:	000f      	movs	r7, r1
 801a096:	0015      	movs	r5, r2
 801a098:	001e      	movs	r6, r3
 801a09a:	9003      	str	r0, [sp, #12]
 801a09c:	2800      	cmp	r0, #0
 801a09e:	d004      	beq.n	801a0aa <_vfiprintf_r+0x1a>
 801a0a0:	6a03      	ldr	r3, [r0, #32]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d101      	bne.n	801a0aa <_vfiprintf_r+0x1a>
 801a0a6:	f7fe f985 	bl	80183b4 <__sinit>
 801a0aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0ac:	07db      	lsls	r3, r3, #31
 801a0ae:	d405      	bmi.n	801a0bc <_vfiprintf_r+0x2c>
 801a0b0:	89bb      	ldrh	r3, [r7, #12]
 801a0b2:	059b      	lsls	r3, r3, #22
 801a0b4:	d402      	bmi.n	801a0bc <_vfiprintf_r+0x2c>
 801a0b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a0b8:	f7fe fb21 	bl	80186fe <__retarget_lock_acquire_recursive>
 801a0bc:	89bb      	ldrh	r3, [r7, #12]
 801a0be:	071b      	lsls	r3, r3, #28
 801a0c0:	d502      	bpl.n	801a0c8 <_vfiprintf_r+0x38>
 801a0c2:	693b      	ldr	r3, [r7, #16]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d113      	bne.n	801a0f0 <_vfiprintf_r+0x60>
 801a0c8:	0039      	movs	r1, r7
 801a0ca:	9803      	ldr	r0, [sp, #12]
 801a0cc:	f000 f9f0 	bl	801a4b0 <__swsetup_r>
 801a0d0:	2800      	cmp	r0, #0
 801a0d2:	d00d      	beq.n	801a0f0 <_vfiprintf_r+0x60>
 801a0d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0d6:	07db      	lsls	r3, r3, #31
 801a0d8:	d503      	bpl.n	801a0e2 <_vfiprintf_r+0x52>
 801a0da:	2001      	movs	r0, #1
 801a0dc:	4240      	negs	r0, r0
 801a0de:	b021      	add	sp, #132	@ 0x84
 801a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0e2:	89bb      	ldrh	r3, [r7, #12]
 801a0e4:	059b      	lsls	r3, r3, #22
 801a0e6:	d4f8      	bmi.n	801a0da <_vfiprintf_r+0x4a>
 801a0e8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a0ea:	f7fe fb09 	bl	8018700 <__retarget_lock_release_recursive>
 801a0ee:	e7f4      	b.n	801a0da <_vfiprintf_r+0x4a>
 801a0f0:	2300      	movs	r3, #0
 801a0f2:	ac08      	add	r4, sp, #32
 801a0f4:	6163      	str	r3, [r4, #20]
 801a0f6:	3320      	adds	r3, #32
 801a0f8:	7663      	strb	r3, [r4, #25]
 801a0fa:	3310      	adds	r3, #16
 801a0fc:	76a3      	strb	r3, [r4, #26]
 801a0fe:	9607      	str	r6, [sp, #28]
 801a100:	002e      	movs	r6, r5
 801a102:	7833      	ldrb	r3, [r6, #0]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d001      	beq.n	801a10c <_vfiprintf_r+0x7c>
 801a108:	2b25      	cmp	r3, #37	@ 0x25
 801a10a:	d148      	bne.n	801a19e <_vfiprintf_r+0x10e>
 801a10c:	1b73      	subs	r3, r6, r5
 801a10e:	9305      	str	r3, [sp, #20]
 801a110:	42ae      	cmp	r6, r5
 801a112:	d00b      	beq.n	801a12c <_vfiprintf_r+0x9c>
 801a114:	002a      	movs	r2, r5
 801a116:	0039      	movs	r1, r7
 801a118:	9803      	ldr	r0, [sp, #12]
 801a11a:	f7ff ffa6 	bl	801a06a <__sfputs_r>
 801a11e:	3001      	adds	r0, #1
 801a120:	d100      	bne.n	801a124 <_vfiprintf_r+0x94>
 801a122:	e0ae      	b.n	801a282 <_vfiprintf_r+0x1f2>
 801a124:	6963      	ldr	r3, [r4, #20]
 801a126:	9a05      	ldr	r2, [sp, #20]
 801a128:	189b      	adds	r3, r3, r2
 801a12a:	6163      	str	r3, [r4, #20]
 801a12c:	7833      	ldrb	r3, [r6, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d100      	bne.n	801a134 <_vfiprintf_r+0xa4>
 801a132:	e0a6      	b.n	801a282 <_vfiprintf_r+0x1f2>
 801a134:	2201      	movs	r2, #1
 801a136:	2300      	movs	r3, #0
 801a138:	4252      	negs	r2, r2
 801a13a:	6062      	str	r2, [r4, #4]
 801a13c:	a904      	add	r1, sp, #16
 801a13e:	3254      	adds	r2, #84	@ 0x54
 801a140:	1852      	adds	r2, r2, r1
 801a142:	1c75      	adds	r5, r6, #1
 801a144:	6023      	str	r3, [r4, #0]
 801a146:	60e3      	str	r3, [r4, #12]
 801a148:	60a3      	str	r3, [r4, #8]
 801a14a:	7013      	strb	r3, [r2, #0]
 801a14c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801a14e:	4b59      	ldr	r3, [pc, #356]	@ (801a2b4 <_vfiprintf_r+0x224>)
 801a150:	2205      	movs	r2, #5
 801a152:	0018      	movs	r0, r3
 801a154:	7829      	ldrb	r1, [r5, #0]
 801a156:	9305      	str	r3, [sp, #20]
 801a158:	f7fe fad3 	bl	8018702 <memchr>
 801a15c:	1c6e      	adds	r6, r5, #1
 801a15e:	2800      	cmp	r0, #0
 801a160:	d11f      	bne.n	801a1a2 <_vfiprintf_r+0x112>
 801a162:	6822      	ldr	r2, [r4, #0]
 801a164:	06d3      	lsls	r3, r2, #27
 801a166:	d504      	bpl.n	801a172 <_vfiprintf_r+0xe2>
 801a168:	2353      	movs	r3, #83	@ 0x53
 801a16a:	a904      	add	r1, sp, #16
 801a16c:	185b      	adds	r3, r3, r1
 801a16e:	2120      	movs	r1, #32
 801a170:	7019      	strb	r1, [r3, #0]
 801a172:	0713      	lsls	r3, r2, #28
 801a174:	d504      	bpl.n	801a180 <_vfiprintf_r+0xf0>
 801a176:	2353      	movs	r3, #83	@ 0x53
 801a178:	a904      	add	r1, sp, #16
 801a17a:	185b      	adds	r3, r3, r1
 801a17c:	212b      	movs	r1, #43	@ 0x2b
 801a17e:	7019      	strb	r1, [r3, #0]
 801a180:	782b      	ldrb	r3, [r5, #0]
 801a182:	2b2a      	cmp	r3, #42	@ 0x2a
 801a184:	d016      	beq.n	801a1b4 <_vfiprintf_r+0x124>
 801a186:	002e      	movs	r6, r5
 801a188:	2100      	movs	r1, #0
 801a18a:	200a      	movs	r0, #10
 801a18c:	68e3      	ldr	r3, [r4, #12]
 801a18e:	7832      	ldrb	r2, [r6, #0]
 801a190:	1c75      	adds	r5, r6, #1
 801a192:	3a30      	subs	r2, #48	@ 0x30
 801a194:	2a09      	cmp	r2, #9
 801a196:	d950      	bls.n	801a23a <_vfiprintf_r+0x1aa>
 801a198:	2900      	cmp	r1, #0
 801a19a:	d111      	bne.n	801a1c0 <_vfiprintf_r+0x130>
 801a19c:	e017      	b.n	801a1ce <_vfiprintf_r+0x13e>
 801a19e:	3601      	adds	r6, #1
 801a1a0:	e7af      	b.n	801a102 <_vfiprintf_r+0x72>
 801a1a2:	9b05      	ldr	r3, [sp, #20]
 801a1a4:	6822      	ldr	r2, [r4, #0]
 801a1a6:	1ac0      	subs	r0, r0, r3
 801a1a8:	2301      	movs	r3, #1
 801a1aa:	4083      	lsls	r3, r0
 801a1ac:	4313      	orrs	r3, r2
 801a1ae:	0035      	movs	r5, r6
 801a1b0:	6023      	str	r3, [r4, #0]
 801a1b2:	e7cc      	b.n	801a14e <_vfiprintf_r+0xbe>
 801a1b4:	9b07      	ldr	r3, [sp, #28]
 801a1b6:	1d19      	adds	r1, r3, #4
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	9107      	str	r1, [sp, #28]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	db01      	blt.n	801a1c4 <_vfiprintf_r+0x134>
 801a1c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a1c2:	e004      	b.n	801a1ce <_vfiprintf_r+0x13e>
 801a1c4:	425b      	negs	r3, r3
 801a1c6:	60e3      	str	r3, [r4, #12]
 801a1c8:	2302      	movs	r3, #2
 801a1ca:	4313      	orrs	r3, r2
 801a1cc:	6023      	str	r3, [r4, #0]
 801a1ce:	7833      	ldrb	r3, [r6, #0]
 801a1d0:	2b2e      	cmp	r3, #46	@ 0x2e
 801a1d2:	d10c      	bne.n	801a1ee <_vfiprintf_r+0x15e>
 801a1d4:	7873      	ldrb	r3, [r6, #1]
 801a1d6:	2b2a      	cmp	r3, #42	@ 0x2a
 801a1d8:	d134      	bne.n	801a244 <_vfiprintf_r+0x1b4>
 801a1da:	9b07      	ldr	r3, [sp, #28]
 801a1dc:	3602      	adds	r6, #2
 801a1de:	1d1a      	adds	r2, r3, #4
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	9207      	str	r2, [sp, #28]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	da01      	bge.n	801a1ec <_vfiprintf_r+0x15c>
 801a1e8:	2301      	movs	r3, #1
 801a1ea:	425b      	negs	r3, r3
 801a1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801a1ee:	4d32      	ldr	r5, [pc, #200]	@ (801a2b8 <_vfiprintf_r+0x228>)
 801a1f0:	2203      	movs	r2, #3
 801a1f2:	0028      	movs	r0, r5
 801a1f4:	7831      	ldrb	r1, [r6, #0]
 801a1f6:	f7fe fa84 	bl	8018702 <memchr>
 801a1fa:	2800      	cmp	r0, #0
 801a1fc:	d006      	beq.n	801a20c <_vfiprintf_r+0x17c>
 801a1fe:	2340      	movs	r3, #64	@ 0x40
 801a200:	1b40      	subs	r0, r0, r5
 801a202:	4083      	lsls	r3, r0
 801a204:	6822      	ldr	r2, [r4, #0]
 801a206:	3601      	adds	r6, #1
 801a208:	4313      	orrs	r3, r2
 801a20a:	6023      	str	r3, [r4, #0]
 801a20c:	7831      	ldrb	r1, [r6, #0]
 801a20e:	2206      	movs	r2, #6
 801a210:	482a      	ldr	r0, [pc, #168]	@ (801a2bc <_vfiprintf_r+0x22c>)
 801a212:	1c75      	adds	r5, r6, #1
 801a214:	7621      	strb	r1, [r4, #24]
 801a216:	f7fe fa74 	bl	8018702 <memchr>
 801a21a:	2800      	cmp	r0, #0
 801a21c:	d040      	beq.n	801a2a0 <_vfiprintf_r+0x210>
 801a21e:	4b28      	ldr	r3, [pc, #160]	@ (801a2c0 <_vfiprintf_r+0x230>)
 801a220:	2b00      	cmp	r3, #0
 801a222:	d122      	bne.n	801a26a <_vfiprintf_r+0x1da>
 801a224:	2207      	movs	r2, #7
 801a226:	9b07      	ldr	r3, [sp, #28]
 801a228:	3307      	adds	r3, #7
 801a22a:	4393      	bics	r3, r2
 801a22c:	3308      	adds	r3, #8
 801a22e:	9307      	str	r3, [sp, #28]
 801a230:	6963      	ldr	r3, [r4, #20]
 801a232:	9a04      	ldr	r2, [sp, #16]
 801a234:	189b      	adds	r3, r3, r2
 801a236:	6163      	str	r3, [r4, #20]
 801a238:	e762      	b.n	801a100 <_vfiprintf_r+0x70>
 801a23a:	4343      	muls	r3, r0
 801a23c:	002e      	movs	r6, r5
 801a23e:	2101      	movs	r1, #1
 801a240:	189b      	adds	r3, r3, r2
 801a242:	e7a4      	b.n	801a18e <_vfiprintf_r+0xfe>
 801a244:	2300      	movs	r3, #0
 801a246:	200a      	movs	r0, #10
 801a248:	0019      	movs	r1, r3
 801a24a:	3601      	adds	r6, #1
 801a24c:	6063      	str	r3, [r4, #4]
 801a24e:	7832      	ldrb	r2, [r6, #0]
 801a250:	1c75      	adds	r5, r6, #1
 801a252:	3a30      	subs	r2, #48	@ 0x30
 801a254:	2a09      	cmp	r2, #9
 801a256:	d903      	bls.n	801a260 <_vfiprintf_r+0x1d0>
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d0c8      	beq.n	801a1ee <_vfiprintf_r+0x15e>
 801a25c:	9109      	str	r1, [sp, #36]	@ 0x24
 801a25e:	e7c6      	b.n	801a1ee <_vfiprintf_r+0x15e>
 801a260:	4341      	muls	r1, r0
 801a262:	002e      	movs	r6, r5
 801a264:	2301      	movs	r3, #1
 801a266:	1889      	adds	r1, r1, r2
 801a268:	e7f1      	b.n	801a24e <_vfiprintf_r+0x1be>
 801a26a:	aa07      	add	r2, sp, #28
 801a26c:	9200      	str	r2, [sp, #0]
 801a26e:	0021      	movs	r1, r4
 801a270:	003a      	movs	r2, r7
 801a272:	4b14      	ldr	r3, [pc, #80]	@ (801a2c4 <_vfiprintf_r+0x234>)
 801a274:	9803      	ldr	r0, [sp, #12]
 801a276:	f7fd fc51 	bl	8017b1c <_printf_float>
 801a27a:	9004      	str	r0, [sp, #16]
 801a27c:	9b04      	ldr	r3, [sp, #16]
 801a27e:	3301      	adds	r3, #1
 801a280:	d1d6      	bne.n	801a230 <_vfiprintf_r+0x1a0>
 801a282:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a284:	07db      	lsls	r3, r3, #31
 801a286:	d405      	bmi.n	801a294 <_vfiprintf_r+0x204>
 801a288:	89bb      	ldrh	r3, [r7, #12]
 801a28a:	059b      	lsls	r3, r3, #22
 801a28c:	d402      	bmi.n	801a294 <_vfiprintf_r+0x204>
 801a28e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a290:	f7fe fa36 	bl	8018700 <__retarget_lock_release_recursive>
 801a294:	89bb      	ldrh	r3, [r7, #12]
 801a296:	065b      	lsls	r3, r3, #25
 801a298:	d500      	bpl.n	801a29c <_vfiprintf_r+0x20c>
 801a29a:	e71e      	b.n	801a0da <_vfiprintf_r+0x4a>
 801a29c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a29e:	e71e      	b.n	801a0de <_vfiprintf_r+0x4e>
 801a2a0:	aa07      	add	r2, sp, #28
 801a2a2:	9200      	str	r2, [sp, #0]
 801a2a4:	0021      	movs	r1, r4
 801a2a6:	003a      	movs	r2, r7
 801a2a8:	4b06      	ldr	r3, [pc, #24]	@ (801a2c4 <_vfiprintf_r+0x234>)
 801a2aa:	9803      	ldr	r0, [sp, #12]
 801a2ac:	f7fd fee4 	bl	8018078 <_printf_i>
 801a2b0:	e7e3      	b.n	801a27a <_vfiprintf_r+0x1ea>
 801a2b2:	46c0      	nop			@ (mov r8, r8)
 801a2b4:	0801c528 	.word	0x0801c528
 801a2b8:	0801c52e 	.word	0x0801c52e
 801a2bc:	0801c532 	.word	0x0801c532
 801a2c0:	08017b1d 	.word	0x08017b1d
 801a2c4:	0801a06b 	.word	0x0801a06b

0801a2c8 <__sflush_r>:
 801a2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a2ca:	220c      	movs	r2, #12
 801a2cc:	5e8b      	ldrsh	r3, [r1, r2]
 801a2ce:	0005      	movs	r5, r0
 801a2d0:	000c      	movs	r4, r1
 801a2d2:	071a      	lsls	r2, r3, #28
 801a2d4:	d456      	bmi.n	801a384 <__sflush_r+0xbc>
 801a2d6:	684a      	ldr	r2, [r1, #4]
 801a2d8:	2a00      	cmp	r2, #0
 801a2da:	dc02      	bgt.n	801a2e2 <__sflush_r+0x1a>
 801a2dc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801a2de:	2a00      	cmp	r2, #0
 801a2e0:	dd4e      	ble.n	801a380 <__sflush_r+0xb8>
 801a2e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801a2e4:	2f00      	cmp	r7, #0
 801a2e6:	d04b      	beq.n	801a380 <__sflush_r+0xb8>
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	2080      	movs	r0, #128	@ 0x80
 801a2ec:	682e      	ldr	r6, [r5, #0]
 801a2ee:	602a      	str	r2, [r5, #0]
 801a2f0:	001a      	movs	r2, r3
 801a2f2:	0140      	lsls	r0, r0, #5
 801a2f4:	6a21      	ldr	r1, [r4, #32]
 801a2f6:	4002      	ands	r2, r0
 801a2f8:	4203      	tst	r3, r0
 801a2fa:	d033      	beq.n	801a364 <__sflush_r+0x9c>
 801a2fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a2fe:	89a3      	ldrh	r3, [r4, #12]
 801a300:	075b      	lsls	r3, r3, #29
 801a302:	d506      	bpl.n	801a312 <__sflush_r+0x4a>
 801a304:	6863      	ldr	r3, [r4, #4]
 801a306:	1ad2      	subs	r2, r2, r3
 801a308:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d001      	beq.n	801a312 <__sflush_r+0x4a>
 801a30e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a310:	1ad2      	subs	r2, r2, r3
 801a312:	2300      	movs	r3, #0
 801a314:	0028      	movs	r0, r5
 801a316:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801a318:	6a21      	ldr	r1, [r4, #32]
 801a31a:	47b8      	blx	r7
 801a31c:	89a2      	ldrh	r2, [r4, #12]
 801a31e:	1c43      	adds	r3, r0, #1
 801a320:	d106      	bne.n	801a330 <__sflush_r+0x68>
 801a322:	6829      	ldr	r1, [r5, #0]
 801a324:	291d      	cmp	r1, #29
 801a326:	d846      	bhi.n	801a3b6 <__sflush_r+0xee>
 801a328:	4b29      	ldr	r3, [pc, #164]	@ (801a3d0 <__sflush_r+0x108>)
 801a32a:	410b      	asrs	r3, r1
 801a32c:	07db      	lsls	r3, r3, #31
 801a32e:	d442      	bmi.n	801a3b6 <__sflush_r+0xee>
 801a330:	2300      	movs	r3, #0
 801a332:	6063      	str	r3, [r4, #4]
 801a334:	6923      	ldr	r3, [r4, #16]
 801a336:	6023      	str	r3, [r4, #0]
 801a338:	04d2      	lsls	r2, r2, #19
 801a33a:	d505      	bpl.n	801a348 <__sflush_r+0x80>
 801a33c:	1c43      	adds	r3, r0, #1
 801a33e:	d102      	bne.n	801a346 <__sflush_r+0x7e>
 801a340:	682b      	ldr	r3, [r5, #0]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d100      	bne.n	801a348 <__sflush_r+0x80>
 801a346:	6560      	str	r0, [r4, #84]	@ 0x54
 801a348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a34a:	602e      	str	r6, [r5, #0]
 801a34c:	2900      	cmp	r1, #0
 801a34e:	d017      	beq.n	801a380 <__sflush_r+0xb8>
 801a350:	0023      	movs	r3, r4
 801a352:	3344      	adds	r3, #68	@ 0x44
 801a354:	4299      	cmp	r1, r3
 801a356:	d002      	beq.n	801a35e <__sflush_r+0x96>
 801a358:	0028      	movs	r0, r5
 801a35a:	f7ff f869 	bl	8019430 <_free_r>
 801a35e:	2300      	movs	r3, #0
 801a360:	6363      	str	r3, [r4, #52]	@ 0x34
 801a362:	e00d      	b.n	801a380 <__sflush_r+0xb8>
 801a364:	2301      	movs	r3, #1
 801a366:	0028      	movs	r0, r5
 801a368:	47b8      	blx	r7
 801a36a:	0002      	movs	r2, r0
 801a36c:	1c43      	adds	r3, r0, #1
 801a36e:	d1c6      	bne.n	801a2fe <__sflush_r+0x36>
 801a370:	682b      	ldr	r3, [r5, #0]
 801a372:	2b00      	cmp	r3, #0
 801a374:	d0c3      	beq.n	801a2fe <__sflush_r+0x36>
 801a376:	2b1d      	cmp	r3, #29
 801a378:	d001      	beq.n	801a37e <__sflush_r+0xb6>
 801a37a:	2b16      	cmp	r3, #22
 801a37c:	d11a      	bne.n	801a3b4 <__sflush_r+0xec>
 801a37e:	602e      	str	r6, [r5, #0]
 801a380:	2000      	movs	r0, #0
 801a382:	e01e      	b.n	801a3c2 <__sflush_r+0xfa>
 801a384:	690e      	ldr	r6, [r1, #16]
 801a386:	2e00      	cmp	r6, #0
 801a388:	d0fa      	beq.n	801a380 <__sflush_r+0xb8>
 801a38a:	680f      	ldr	r7, [r1, #0]
 801a38c:	600e      	str	r6, [r1, #0]
 801a38e:	1bba      	subs	r2, r7, r6
 801a390:	9201      	str	r2, [sp, #4]
 801a392:	2200      	movs	r2, #0
 801a394:	079b      	lsls	r3, r3, #30
 801a396:	d100      	bne.n	801a39a <__sflush_r+0xd2>
 801a398:	694a      	ldr	r2, [r1, #20]
 801a39a:	60a2      	str	r2, [r4, #8]
 801a39c:	9b01      	ldr	r3, [sp, #4]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	ddee      	ble.n	801a380 <__sflush_r+0xb8>
 801a3a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a3a4:	0032      	movs	r2, r6
 801a3a6:	001f      	movs	r7, r3
 801a3a8:	0028      	movs	r0, r5
 801a3aa:	9b01      	ldr	r3, [sp, #4]
 801a3ac:	6a21      	ldr	r1, [r4, #32]
 801a3ae:	47b8      	blx	r7
 801a3b0:	2800      	cmp	r0, #0
 801a3b2:	dc07      	bgt.n	801a3c4 <__sflush_r+0xfc>
 801a3b4:	89a2      	ldrh	r2, [r4, #12]
 801a3b6:	2340      	movs	r3, #64	@ 0x40
 801a3b8:	2001      	movs	r0, #1
 801a3ba:	4313      	orrs	r3, r2
 801a3bc:	b21b      	sxth	r3, r3
 801a3be:	81a3      	strh	r3, [r4, #12]
 801a3c0:	4240      	negs	r0, r0
 801a3c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a3c4:	9b01      	ldr	r3, [sp, #4]
 801a3c6:	1836      	adds	r6, r6, r0
 801a3c8:	1a1b      	subs	r3, r3, r0
 801a3ca:	9301      	str	r3, [sp, #4]
 801a3cc:	e7e6      	b.n	801a39c <__sflush_r+0xd4>
 801a3ce:	46c0      	nop			@ (mov r8, r8)
 801a3d0:	dfbffffe 	.word	0xdfbffffe

0801a3d4 <_fflush_r>:
 801a3d4:	690b      	ldr	r3, [r1, #16]
 801a3d6:	b570      	push	{r4, r5, r6, lr}
 801a3d8:	0005      	movs	r5, r0
 801a3da:	000c      	movs	r4, r1
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d102      	bne.n	801a3e6 <_fflush_r+0x12>
 801a3e0:	2500      	movs	r5, #0
 801a3e2:	0028      	movs	r0, r5
 801a3e4:	bd70      	pop	{r4, r5, r6, pc}
 801a3e6:	2800      	cmp	r0, #0
 801a3e8:	d004      	beq.n	801a3f4 <_fflush_r+0x20>
 801a3ea:	6a03      	ldr	r3, [r0, #32]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d101      	bne.n	801a3f4 <_fflush_r+0x20>
 801a3f0:	f7fd ffe0 	bl	80183b4 <__sinit>
 801a3f4:	220c      	movs	r2, #12
 801a3f6:	5ea3      	ldrsh	r3, [r4, r2]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d0f1      	beq.n	801a3e0 <_fflush_r+0xc>
 801a3fc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a3fe:	07d2      	lsls	r2, r2, #31
 801a400:	d404      	bmi.n	801a40c <_fflush_r+0x38>
 801a402:	059b      	lsls	r3, r3, #22
 801a404:	d402      	bmi.n	801a40c <_fflush_r+0x38>
 801a406:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a408:	f7fe f979 	bl	80186fe <__retarget_lock_acquire_recursive>
 801a40c:	0028      	movs	r0, r5
 801a40e:	0021      	movs	r1, r4
 801a410:	f7ff ff5a 	bl	801a2c8 <__sflush_r>
 801a414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a416:	0005      	movs	r5, r0
 801a418:	07db      	lsls	r3, r3, #31
 801a41a:	d4e2      	bmi.n	801a3e2 <_fflush_r+0xe>
 801a41c:	89a3      	ldrh	r3, [r4, #12]
 801a41e:	059b      	lsls	r3, r3, #22
 801a420:	d4df      	bmi.n	801a3e2 <_fflush_r+0xe>
 801a422:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a424:	f7fe f96c 	bl	8018700 <__retarget_lock_release_recursive>
 801a428:	e7db      	b.n	801a3e2 <_fflush_r+0xe>

0801a42a <__swbuf_r>:
 801a42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a42c:	0006      	movs	r6, r0
 801a42e:	000d      	movs	r5, r1
 801a430:	0014      	movs	r4, r2
 801a432:	2800      	cmp	r0, #0
 801a434:	d004      	beq.n	801a440 <__swbuf_r+0x16>
 801a436:	6a03      	ldr	r3, [r0, #32]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d101      	bne.n	801a440 <__swbuf_r+0x16>
 801a43c:	f7fd ffba 	bl	80183b4 <__sinit>
 801a440:	69a3      	ldr	r3, [r4, #24]
 801a442:	60a3      	str	r3, [r4, #8]
 801a444:	89a3      	ldrh	r3, [r4, #12]
 801a446:	071b      	lsls	r3, r3, #28
 801a448:	d502      	bpl.n	801a450 <__swbuf_r+0x26>
 801a44a:	6923      	ldr	r3, [r4, #16]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d109      	bne.n	801a464 <__swbuf_r+0x3a>
 801a450:	0021      	movs	r1, r4
 801a452:	0030      	movs	r0, r6
 801a454:	f000 f82c 	bl	801a4b0 <__swsetup_r>
 801a458:	2800      	cmp	r0, #0
 801a45a:	d003      	beq.n	801a464 <__swbuf_r+0x3a>
 801a45c:	2501      	movs	r5, #1
 801a45e:	426d      	negs	r5, r5
 801a460:	0028      	movs	r0, r5
 801a462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a464:	6923      	ldr	r3, [r4, #16]
 801a466:	6820      	ldr	r0, [r4, #0]
 801a468:	b2ef      	uxtb	r7, r5
 801a46a:	1ac0      	subs	r0, r0, r3
 801a46c:	6963      	ldr	r3, [r4, #20]
 801a46e:	b2ed      	uxtb	r5, r5
 801a470:	4283      	cmp	r3, r0
 801a472:	dc05      	bgt.n	801a480 <__swbuf_r+0x56>
 801a474:	0021      	movs	r1, r4
 801a476:	0030      	movs	r0, r6
 801a478:	f7ff ffac 	bl	801a3d4 <_fflush_r>
 801a47c:	2800      	cmp	r0, #0
 801a47e:	d1ed      	bne.n	801a45c <__swbuf_r+0x32>
 801a480:	68a3      	ldr	r3, [r4, #8]
 801a482:	3001      	adds	r0, #1
 801a484:	3b01      	subs	r3, #1
 801a486:	60a3      	str	r3, [r4, #8]
 801a488:	6823      	ldr	r3, [r4, #0]
 801a48a:	1c5a      	adds	r2, r3, #1
 801a48c:	6022      	str	r2, [r4, #0]
 801a48e:	701f      	strb	r7, [r3, #0]
 801a490:	6963      	ldr	r3, [r4, #20]
 801a492:	4283      	cmp	r3, r0
 801a494:	d004      	beq.n	801a4a0 <__swbuf_r+0x76>
 801a496:	89a3      	ldrh	r3, [r4, #12]
 801a498:	07db      	lsls	r3, r3, #31
 801a49a:	d5e1      	bpl.n	801a460 <__swbuf_r+0x36>
 801a49c:	2d0a      	cmp	r5, #10
 801a49e:	d1df      	bne.n	801a460 <__swbuf_r+0x36>
 801a4a0:	0021      	movs	r1, r4
 801a4a2:	0030      	movs	r0, r6
 801a4a4:	f7ff ff96 	bl	801a3d4 <_fflush_r>
 801a4a8:	2800      	cmp	r0, #0
 801a4aa:	d0d9      	beq.n	801a460 <__swbuf_r+0x36>
 801a4ac:	e7d6      	b.n	801a45c <__swbuf_r+0x32>
	...

0801a4b0 <__swsetup_r>:
 801a4b0:	4b2d      	ldr	r3, [pc, #180]	@ (801a568 <__swsetup_r+0xb8>)
 801a4b2:	b570      	push	{r4, r5, r6, lr}
 801a4b4:	0005      	movs	r5, r0
 801a4b6:	6818      	ldr	r0, [r3, #0]
 801a4b8:	000c      	movs	r4, r1
 801a4ba:	2800      	cmp	r0, #0
 801a4bc:	d004      	beq.n	801a4c8 <__swsetup_r+0x18>
 801a4be:	6a03      	ldr	r3, [r0, #32]
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d101      	bne.n	801a4c8 <__swsetup_r+0x18>
 801a4c4:	f7fd ff76 	bl	80183b4 <__sinit>
 801a4c8:	230c      	movs	r3, #12
 801a4ca:	5ee2      	ldrsh	r2, [r4, r3]
 801a4cc:	0713      	lsls	r3, r2, #28
 801a4ce:	d423      	bmi.n	801a518 <__swsetup_r+0x68>
 801a4d0:	06d3      	lsls	r3, r2, #27
 801a4d2:	d407      	bmi.n	801a4e4 <__swsetup_r+0x34>
 801a4d4:	2309      	movs	r3, #9
 801a4d6:	602b      	str	r3, [r5, #0]
 801a4d8:	2340      	movs	r3, #64	@ 0x40
 801a4da:	2001      	movs	r0, #1
 801a4dc:	4313      	orrs	r3, r2
 801a4de:	81a3      	strh	r3, [r4, #12]
 801a4e0:	4240      	negs	r0, r0
 801a4e2:	e03a      	b.n	801a55a <__swsetup_r+0xaa>
 801a4e4:	0752      	lsls	r2, r2, #29
 801a4e6:	d513      	bpl.n	801a510 <__swsetup_r+0x60>
 801a4e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a4ea:	2900      	cmp	r1, #0
 801a4ec:	d008      	beq.n	801a500 <__swsetup_r+0x50>
 801a4ee:	0023      	movs	r3, r4
 801a4f0:	3344      	adds	r3, #68	@ 0x44
 801a4f2:	4299      	cmp	r1, r3
 801a4f4:	d002      	beq.n	801a4fc <__swsetup_r+0x4c>
 801a4f6:	0028      	movs	r0, r5
 801a4f8:	f7fe ff9a 	bl	8019430 <_free_r>
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	6363      	str	r3, [r4, #52]	@ 0x34
 801a500:	2224      	movs	r2, #36	@ 0x24
 801a502:	89a3      	ldrh	r3, [r4, #12]
 801a504:	4393      	bics	r3, r2
 801a506:	81a3      	strh	r3, [r4, #12]
 801a508:	2300      	movs	r3, #0
 801a50a:	6063      	str	r3, [r4, #4]
 801a50c:	6923      	ldr	r3, [r4, #16]
 801a50e:	6023      	str	r3, [r4, #0]
 801a510:	2308      	movs	r3, #8
 801a512:	89a2      	ldrh	r2, [r4, #12]
 801a514:	4313      	orrs	r3, r2
 801a516:	81a3      	strh	r3, [r4, #12]
 801a518:	6923      	ldr	r3, [r4, #16]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d10b      	bne.n	801a536 <__swsetup_r+0x86>
 801a51e:	21a0      	movs	r1, #160	@ 0xa0
 801a520:	2280      	movs	r2, #128	@ 0x80
 801a522:	89a3      	ldrh	r3, [r4, #12]
 801a524:	0089      	lsls	r1, r1, #2
 801a526:	0092      	lsls	r2, r2, #2
 801a528:	400b      	ands	r3, r1
 801a52a:	4293      	cmp	r3, r2
 801a52c:	d003      	beq.n	801a536 <__swsetup_r+0x86>
 801a52e:	0021      	movs	r1, r4
 801a530:	0028      	movs	r0, r5
 801a532:	f000 f915 	bl	801a760 <__smakebuf_r>
 801a536:	230c      	movs	r3, #12
 801a538:	5ee2      	ldrsh	r2, [r4, r3]
 801a53a:	2101      	movs	r1, #1
 801a53c:	0013      	movs	r3, r2
 801a53e:	400b      	ands	r3, r1
 801a540:	420a      	tst	r2, r1
 801a542:	d00b      	beq.n	801a55c <__swsetup_r+0xac>
 801a544:	2300      	movs	r3, #0
 801a546:	60a3      	str	r3, [r4, #8]
 801a548:	6963      	ldr	r3, [r4, #20]
 801a54a:	425b      	negs	r3, r3
 801a54c:	61a3      	str	r3, [r4, #24]
 801a54e:	2000      	movs	r0, #0
 801a550:	6923      	ldr	r3, [r4, #16]
 801a552:	4283      	cmp	r3, r0
 801a554:	d101      	bne.n	801a55a <__swsetup_r+0xaa>
 801a556:	0613      	lsls	r3, r2, #24
 801a558:	d4be      	bmi.n	801a4d8 <__swsetup_r+0x28>
 801a55a:	bd70      	pop	{r4, r5, r6, pc}
 801a55c:	0791      	lsls	r1, r2, #30
 801a55e:	d400      	bmi.n	801a562 <__swsetup_r+0xb2>
 801a560:	6963      	ldr	r3, [r4, #20]
 801a562:	60a3      	str	r3, [r4, #8]
 801a564:	e7f3      	b.n	801a54e <__swsetup_r+0x9e>
 801a566:	46c0      	nop			@ (mov r8, r8)
 801a568:	200001f4 	.word	0x200001f4

0801a56c <memmove>:
 801a56c:	b510      	push	{r4, lr}
 801a56e:	4288      	cmp	r0, r1
 801a570:	d806      	bhi.n	801a580 <memmove+0x14>
 801a572:	2300      	movs	r3, #0
 801a574:	429a      	cmp	r2, r3
 801a576:	d008      	beq.n	801a58a <memmove+0x1e>
 801a578:	5ccc      	ldrb	r4, [r1, r3]
 801a57a:	54c4      	strb	r4, [r0, r3]
 801a57c:	3301      	adds	r3, #1
 801a57e:	e7f9      	b.n	801a574 <memmove+0x8>
 801a580:	188b      	adds	r3, r1, r2
 801a582:	4298      	cmp	r0, r3
 801a584:	d2f5      	bcs.n	801a572 <memmove+0x6>
 801a586:	3a01      	subs	r2, #1
 801a588:	d200      	bcs.n	801a58c <memmove+0x20>
 801a58a:	bd10      	pop	{r4, pc}
 801a58c:	5c8b      	ldrb	r3, [r1, r2]
 801a58e:	5483      	strb	r3, [r0, r2]
 801a590:	e7f9      	b.n	801a586 <memmove+0x1a>
	...

0801a594 <_sbrk_r>:
 801a594:	2300      	movs	r3, #0
 801a596:	b570      	push	{r4, r5, r6, lr}
 801a598:	4d06      	ldr	r5, [pc, #24]	@ (801a5b4 <_sbrk_r+0x20>)
 801a59a:	0004      	movs	r4, r0
 801a59c:	0008      	movs	r0, r1
 801a59e:	602b      	str	r3, [r5, #0]
 801a5a0:	f7ee ff56 	bl	8009450 <_sbrk>
 801a5a4:	1c43      	adds	r3, r0, #1
 801a5a6:	d103      	bne.n	801a5b0 <_sbrk_r+0x1c>
 801a5a8:	682b      	ldr	r3, [r5, #0]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d000      	beq.n	801a5b0 <_sbrk_r+0x1c>
 801a5ae:	6023      	str	r3, [r4, #0]
 801a5b0:	bd70      	pop	{r4, r5, r6, pc}
 801a5b2:	46c0      	nop			@ (mov r8, r8)
 801a5b4:	2000410c 	.word	0x2000410c

0801a5b8 <__assert_func>:
 801a5b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a5ba:	0014      	movs	r4, r2
 801a5bc:	001a      	movs	r2, r3
 801a5be:	4b09      	ldr	r3, [pc, #36]	@ (801a5e4 <__assert_func+0x2c>)
 801a5c0:	0005      	movs	r5, r0
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	000e      	movs	r6, r1
 801a5c6:	68d8      	ldr	r0, [r3, #12]
 801a5c8:	4b07      	ldr	r3, [pc, #28]	@ (801a5e8 <__assert_func+0x30>)
 801a5ca:	2c00      	cmp	r4, #0
 801a5cc:	d101      	bne.n	801a5d2 <__assert_func+0x1a>
 801a5ce:	4b07      	ldr	r3, [pc, #28]	@ (801a5ec <__assert_func+0x34>)
 801a5d0:	001c      	movs	r4, r3
 801a5d2:	4907      	ldr	r1, [pc, #28]	@ (801a5f0 <__assert_func+0x38>)
 801a5d4:	9301      	str	r3, [sp, #4]
 801a5d6:	9402      	str	r4, [sp, #8]
 801a5d8:	002b      	movs	r3, r5
 801a5da:	9600      	str	r6, [sp, #0]
 801a5dc:	f000 f886 	bl	801a6ec <fiprintf>
 801a5e0:	f000 f924 	bl	801a82c <abort>
 801a5e4:	200001f4 	.word	0x200001f4
 801a5e8:	0801c543 	.word	0x0801c543
 801a5ec:	0801c57e 	.word	0x0801c57e
 801a5f0:	0801c550 	.word	0x0801c550

0801a5f4 <_calloc_r>:
 801a5f4:	b570      	push	{r4, r5, r6, lr}
 801a5f6:	0c0b      	lsrs	r3, r1, #16
 801a5f8:	0c15      	lsrs	r5, r2, #16
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d11e      	bne.n	801a63c <_calloc_r+0x48>
 801a5fe:	2d00      	cmp	r5, #0
 801a600:	d10c      	bne.n	801a61c <_calloc_r+0x28>
 801a602:	b289      	uxth	r1, r1
 801a604:	b294      	uxth	r4, r2
 801a606:	434c      	muls	r4, r1
 801a608:	0021      	movs	r1, r4
 801a60a:	f7fe ff87 	bl	801951c <_malloc_r>
 801a60e:	1e05      	subs	r5, r0, #0
 801a610:	d01a      	beq.n	801a648 <_calloc_r+0x54>
 801a612:	0022      	movs	r2, r4
 801a614:	2100      	movs	r1, #0
 801a616:	f7fd ffb5 	bl	8018584 <memset>
 801a61a:	e016      	b.n	801a64a <_calloc_r+0x56>
 801a61c:	1c2b      	adds	r3, r5, #0
 801a61e:	1c0c      	adds	r4, r1, #0
 801a620:	b289      	uxth	r1, r1
 801a622:	b292      	uxth	r2, r2
 801a624:	434a      	muls	r2, r1
 801a626:	b29b      	uxth	r3, r3
 801a628:	b2a1      	uxth	r1, r4
 801a62a:	4359      	muls	r1, r3
 801a62c:	0c14      	lsrs	r4, r2, #16
 801a62e:	190c      	adds	r4, r1, r4
 801a630:	0c23      	lsrs	r3, r4, #16
 801a632:	d107      	bne.n	801a644 <_calloc_r+0x50>
 801a634:	0424      	lsls	r4, r4, #16
 801a636:	b292      	uxth	r2, r2
 801a638:	4314      	orrs	r4, r2
 801a63a:	e7e5      	b.n	801a608 <_calloc_r+0x14>
 801a63c:	2d00      	cmp	r5, #0
 801a63e:	d101      	bne.n	801a644 <_calloc_r+0x50>
 801a640:	1c14      	adds	r4, r2, #0
 801a642:	e7ed      	b.n	801a620 <_calloc_r+0x2c>
 801a644:	230c      	movs	r3, #12
 801a646:	6003      	str	r3, [r0, #0]
 801a648:	2500      	movs	r5, #0
 801a64a:	0028      	movs	r0, r5
 801a64c:	bd70      	pop	{r4, r5, r6, pc}

0801a64e <__ascii_mbtowc>:
 801a64e:	b082      	sub	sp, #8
 801a650:	2900      	cmp	r1, #0
 801a652:	d100      	bne.n	801a656 <__ascii_mbtowc+0x8>
 801a654:	a901      	add	r1, sp, #4
 801a656:	1e10      	subs	r0, r2, #0
 801a658:	d006      	beq.n	801a668 <__ascii_mbtowc+0x1a>
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d006      	beq.n	801a66c <__ascii_mbtowc+0x1e>
 801a65e:	7813      	ldrb	r3, [r2, #0]
 801a660:	600b      	str	r3, [r1, #0]
 801a662:	7810      	ldrb	r0, [r2, #0]
 801a664:	1e43      	subs	r3, r0, #1
 801a666:	4198      	sbcs	r0, r3
 801a668:	b002      	add	sp, #8
 801a66a:	4770      	bx	lr
 801a66c:	2002      	movs	r0, #2
 801a66e:	4240      	negs	r0, r0
 801a670:	e7fa      	b.n	801a668 <__ascii_mbtowc+0x1a>

0801a672 <_realloc_r>:
 801a672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a674:	0006      	movs	r6, r0
 801a676:	000c      	movs	r4, r1
 801a678:	0015      	movs	r5, r2
 801a67a:	2900      	cmp	r1, #0
 801a67c:	d105      	bne.n	801a68a <_realloc_r+0x18>
 801a67e:	0011      	movs	r1, r2
 801a680:	f7fe ff4c 	bl	801951c <_malloc_r>
 801a684:	0004      	movs	r4, r0
 801a686:	0020      	movs	r0, r4
 801a688:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a68a:	2a00      	cmp	r2, #0
 801a68c:	d103      	bne.n	801a696 <_realloc_r+0x24>
 801a68e:	f7fe fecf 	bl	8019430 <_free_r>
 801a692:	2400      	movs	r4, #0
 801a694:	e7f7      	b.n	801a686 <_realloc_r+0x14>
 801a696:	f000 f8d0 	bl	801a83a <_malloc_usable_size_r>
 801a69a:	0007      	movs	r7, r0
 801a69c:	4285      	cmp	r5, r0
 801a69e:	d802      	bhi.n	801a6a6 <_realloc_r+0x34>
 801a6a0:	0843      	lsrs	r3, r0, #1
 801a6a2:	42ab      	cmp	r3, r5
 801a6a4:	d3ef      	bcc.n	801a686 <_realloc_r+0x14>
 801a6a6:	0029      	movs	r1, r5
 801a6a8:	0030      	movs	r0, r6
 801a6aa:	f7fe ff37 	bl	801951c <_malloc_r>
 801a6ae:	9001      	str	r0, [sp, #4]
 801a6b0:	2800      	cmp	r0, #0
 801a6b2:	d0ee      	beq.n	801a692 <_realloc_r+0x20>
 801a6b4:	002a      	movs	r2, r5
 801a6b6:	42bd      	cmp	r5, r7
 801a6b8:	d900      	bls.n	801a6bc <_realloc_r+0x4a>
 801a6ba:	003a      	movs	r2, r7
 801a6bc:	0021      	movs	r1, r4
 801a6be:	9801      	ldr	r0, [sp, #4]
 801a6c0:	f7fe f82a 	bl	8018718 <memcpy>
 801a6c4:	0021      	movs	r1, r4
 801a6c6:	0030      	movs	r0, r6
 801a6c8:	f7fe feb2 	bl	8019430 <_free_r>
 801a6cc:	9c01      	ldr	r4, [sp, #4]
 801a6ce:	e7da      	b.n	801a686 <_realloc_r+0x14>

0801a6d0 <__ascii_wctomb>:
 801a6d0:	0003      	movs	r3, r0
 801a6d2:	1e08      	subs	r0, r1, #0
 801a6d4:	d005      	beq.n	801a6e2 <__ascii_wctomb+0x12>
 801a6d6:	2aff      	cmp	r2, #255	@ 0xff
 801a6d8:	d904      	bls.n	801a6e4 <__ascii_wctomb+0x14>
 801a6da:	228a      	movs	r2, #138	@ 0x8a
 801a6dc:	2001      	movs	r0, #1
 801a6de:	601a      	str	r2, [r3, #0]
 801a6e0:	4240      	negs	r0, r0
 801a6e2:	4770      	bx	lr
 801a6e4:	2001      	movs	r0, #1
 801a6e6:	700a      	strb	r2, [r1, #0]
 801a6e8:	e7fb      	b.n	801a6e2 <__ascii_wctomb+0x12>
	...

0801a6ec <fiprintf>:
 801a6ec:	b40e      	push	{r1, r2, r3}
 801a6ee:	b517      	push	{r0, r1, r2, r4, lr}
 801a6f0:	4c05      	ldr	r4, [pc, #20]	@ (801a708 <fiprintf+0x1c>)
 801a6f2:	ab05      	add	r3, sp, #20
 801a6f4:	cb04      	ldmia	r3!, {r2}
 801a6f6:	0001      	movs	r1, r0
 801a6f8:	6820      	ldr	r0, [r4, #0]
 801a6fa:	9301      	str	r3, [sp, #4]
 801a6fc:	f7ff fcc8 	bl	801a090 <_vfiprintf_r>
 801a700:	bc1e      	pop	{r1, r2, r3, r4}
 801a702:	bc08      	pop	{r3}
 801a704:	b003      	add	sp, #12
 801a706:	4718      	bx	r3
 801a708:	200001f4 	.word	0x200001f4

0801a70c <__swhatbuf_r>:
 801a70c:	b570      	push	{r4, r5, r6, lr}
 801a70e:	000e      	movs	r6, r1
 801a710:	001d      	movs	r5, r3
 801a712:	230e      	movs	r3, #14
 801a714:	5ec9      	ldrsh	r1, [r1, r3]
 801a716:	0014      	movs	r4, r2
 801a718:	b096      	sub	sp, #88	@ 0x58
 801a71a:	2900      	cmp	r1, #0
 801a71c:	da0c      	bge.n	801a738 <__swhatbuf_r+0x2c>
 801a71e:	89b2      	ldrh	r2, [r6, #12]
 801a720:	2380      	movs	r3, #128	@ 0x80
 801a722:	0011      	movs	r1, r2
 801a724:	4019      	ands	r1, r3
 801a726:	421a      	tst	r2, r3
 801a728:	d114      	bne.n	801a754 <__swhatbuf_r+0x48>
 801a72a:	2380      	movs	r3, #128	@ 0x80
 801a72c:	00db      	lsls	r3, r3, #3
 801a72e:	2000      	movs	r0, #0
 801a730:	6029      	str	r1, [r5, #0]
 801a732:	6023      	str	r3, [r4, #0]
 801a734:	b016      	add	sp, #88	@ 0x58
 801a736:	bd70      	pop	{r4, r5, r6, pc}
 801a738:	466a      	mov	r2, sp
 801a73a:	f000 f853 	bl	801a7e4 <_fstat_r>
 801a73e:	2800      	cmp	r0, #0
 801a740:	dbed      	blt.n	801a71e <__swhatbuf_r+0x12>
 801a742:	23f0      	movs	r3, #240	@ 0xf0
 801a744:	9901      	ldr	r1, [sp, #4]
 801a746:	021b      	lsls	r3, r3, #8
 801a748:	4019      	ands	r1, r3
 801a74a:	4b04      	ldr	r3, [pc, #16]	@ (801a75c <__swhatbuf_r+0x50>)
 801a74c:	18c9      	adds	r1, r1, r3
 801a74e:	424b      	negs	r3, r1
 801a750:	4159      	adcs	r1, r3
 801a752:	e7ea      	b.n	801a72a <__swhatbuf_r+0x1e>
 801a754:	2100      	movs	r1, #0
 801a756:	2340      	movs	r3, #64	@ 0x40
 801a758:	e7e9      	b.n	801a72e <__swhatbuf_r+0x22>
 801a75a:	46c0      	nop			@ (mov r8, r8)
 801a75c:	ffffe000 	.word	0xffffe000

0801a760 <__smakebuf_r>:
 801a760:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a762:	2602      	movs	r6, #2
 801a764:	898b      	ldrh	r3, [r1, #12]
 801a766:	0005      	movs	r5, r0
 801a768:	000c      	movs	r4, r1
 801a76a:	b085      	sub	sp, #20
 801a76c:	4233      	tst	r3, r6
 801a76e:	d007      	beq.n	801a780 <__smakebuf_r+0x20>
 801a770:	0023      	movs	r3, r4
 801a772:	3347      	adds	r3, #71	@ 0x47
 801a774:	6023      	str	r3, [r4, #0]
 801a776:	6123      	str	r3, [r4, #16]
 801a778:	2301      	movs	r3, #1
 801a77a:	6163      	str	r3, [r4, #20]
 801a77c:	b005      	add	sp, #20
 801a77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a780:	ab03      	add	r3, sp, #12
 801a782:	aa02      	add	r2, sp, #8
 801a784:	f7ff ffc2 	bl	801a70c <__swhatbuf_r>
 801a788:	9f02      	ldr	r7, [sp, #8]
 801a78a:	9001      	str	r0, [sp, #4]
 801a78c:	0039      	movs	r1, r7
 801a78e:	0028      	movs	r0, r5
 801a790:	f7fe fec4 	bl	801951c <_malloc_r>
 801a794:	2800      	cmp	r0, #0
 801a796:	d108      	bne.n	801a7aa <__smakebuf_r+0x4a>
 801a798:	220c      	movs	r2, #12
 801a79a:	5ea3      	ldrsh	r3, [r4, r2]
 801a79c:	059a      	lsls	r2, r3, #22
 801a79e:	d4ed      	bmi.n	801a77c <__smakebuf_r+0x1c>
 801a7a0:	2203      	movs	r2, #3
 801a7a2:	4393      	bics	r3, r2
 801a7a4:	431e      	orrs	r6, r3
 801a7a6:	81a6      	strh	r6, [r4, #12]
 801a7a8:	e7e2      	b.n	801a770 <__smakebuf_r+0x10>
 801a7aa:	2380      	movs	r3, #128	@ 0x80
 801a7ac:	89a2      	ldrh	r2, [r4, #12]
 801a7ae:	6020      	str	r0, [r4, #0]
 801a7b0:	4313      	orrs	r3, r2
 801a7b2:	81a3      	strh	r3, [r4, #12]
 801a7b4:	9b03      	ldr	r3, [sp, #12]
 801a7b6:	6120      	str	r0, [r4, #16]
 801a7b8:	6167      	str	r7, [r4, #20]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d00c      	beq.n	801a7d8 <__smakebuf_r+0x78>
 801a7be:	0028      	movs	r0, r5
 801a7c0:	230e      	movs	r3, #14
 801a7c2:	5ee1      	ldrsh	r1, [r4, r3]
 801a7c4:	f000 f820 	bl	801a808 <_isatty_r>
 801a7c8:	2800      	cmp	r0, #0
 801a7ca:	d005      	beq.n	801a7d8 <__smakebuf_r+0x78>
 801a7cc:	2303      	movs	r3, #3
 801a7ce:	89a2      	ldrh	r2, [r4, #12]
 801a7d0:	439a      	bics	r2, r3
 801a7d2:	3b02      	subs	r3, #2
 801a7d4:	4313      	orrs	r3, r2
 801a7d6:	81a3      	strh	r3, [r4, #12]
 801a7d8:	89a3      	ldrh	r3, [r4, #12]
 801a7da:	9a01      	ldr	r2, [sp, #4]
 801a7dc:	4313      	orrs	r3, r2
 801a7de:	81a3      	strh	r3, [r4, #12]
 801a7e0:	e7cc      	b.n	801a77c <__smakebuf_r+0x1c>
	...

0801a7e4 <_fstat_r>:
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	b570      	push	{r4, r5, r6, lr}
 801a7e8:	4d06      	ldr	r5, [pc, #24]	@ (801a804 <_fstat_r+0x20>)
 801a7ea:	0004      	movs	r4, r0
 801a7ec:	0008      	movs	r0, r1
 801a7ee:	0011      	movs	r1, r2
 801a7f0:	602b      	str	r3, [r5, #0]
 801a7f2:	f7ee fe0b 	bl	800940c <_fstat>
 801a7f6:	1c43      	adds	r3, r0, #1
 801a7f8:	d103      	bne.n	801a802 <_fstat_r+0x1e>
 801a7fa:	682b      	ldr	r3, [r5, #0]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d000      	beq.n	801a802 <_fstat_r+0x1e>
 801a800:	6023      	str	r3, [r4, #0]
 801a802:	bd70      	pop	{r4, r5, r6, pc}
 801a804:	2000410c 	.word	0x2000410c

0801a808 <_isatty_r>:
 801a808:	2300      	movs	r3, #0
 801a80a:	b570      	push	{r4, r5, r6, lr}
 801a80c:	4d06      	ldr	r5, [pc, #24]	@ (801a828 <_isatty_r+0x20>)
 801a80e:	0004      	movs	r4, r0
 801a810:	0008      	movs	r0, r1
 801a812:	602b      	str	r3, [r5, #0]
 801a814:	f7ee fe08 	bl	8009428 <_isatty>
 801a818:	1c43      	adds	r3, r0, #1
 801a81a:	d103      	bne.n	801a824 <_isatty_r+0x1c>
 801a81c:	682b      	ldr	r3, [r5, #0]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d000      	beq.n	801a824 <_isatty_r+0x1c>
 801a822:	6023      	str	r3, [r4, #0]
 801a824:	bd70      	pop	{r4, r5, r6, pc}
 801a826:	46c0      	nop			@ (mov r8, r8)
 801a828:	2000410c 	.word	0x2000410c

0801a82c <abort>:
 801a82c:	2006      	movs	r0, #6
 801a82e:	b510      	push	{r4, lr}
 801a830:	f000 f834 	bl	801a89c <raise>
 801a834:	2001      	movs	r0, #1
 801a836:	f7ee fdb5 	bl	80093a4 <_exit>

0801a83a <_malloc_usable_size_r>:
 801a83a:	1f0b      	subs	r3, r1, #4
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	1f18      	subs	r0, r3, #4
 801a840:	2b00      	cmp	r3, #0
 801a842:	da01      	bge.n	801a848 <_malloc_usable_size_r+0xe>
 801a844:	580b      	ldr	r3, [r1, r0]
 801a846:	18c0      	adds	r0, r0, r3
 801a848:	4770      	bx	lr

0801a84a <_raise_r>:
 801a84a:	b570      	push	{r4, r5, r6, lr}
 801a84c:	0004      	movs	r4, r0
 801a84e:	000d      	movs	r5, r1
 801a850:	291f      	cmp	r1, #31
 801a852:	d904      	bls.n	801a85e <_raise_r+0x14>
 801a854:	2316      	movs	r3, #22
 801a856:	6003      	str	r3, [r0, #0]
 801a858:	2001      	movs	r0, #1
 801a85a:	4240      	negs	r0, r0
 801a85c:	bd70      	pop	{r4, r5, r6, pc}
 801a85e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a860:	2b00      	cmp	r3, #0
 801a862:	d004      	beq.n	801a86e <_raise_r+0x24>
 801a864:	008a      	lsls	r2, r1, #2
 801a866:	189b      	adds	r3, r3, r2
 801a868:	681a      	ldr	r2, [r3, #0]
 801a86a:	2a00      	cmp	r2, #0
 801a86c:	d108      	bne.n	801a880 <_raise_r+0x36>
 801a86e:	0020      	movs	r0, r4
 801a870:	f000 f830 	bl	801a8d4 <_getpid_r>
 801a874:	002a      	movs	r2, r5
 801a876:	0001      	movs	r1, r0
 801a878:	0020      	movs	r0, r4
 801a87a:	f000 f819 	bl	801a8b0 <_kill_r>
 801a87e:	e7ed      	b.n	801a85c <_raise_r+0x12>
 801a880:	2a01      	cmp	r2, #1
 801a882:	d009      	beq.n	801a898 <_raise_r+0x4e>
 801a884:	1c51      	adds	r1, r2, #1
 801a886:	d103      	bne.n	801a890 <_raise_r+0x46>
 801a888:	2316      	movs	r3, #22
 801a88a:	6003      	str	r3, [r0, #0]
 801a88c:	2001      	movs	r0, #1
 801a88e:	e7e5      	b.n	801a85c <_raise_r+0x12>
 801a890:	2100      	movs	r1, #0
 801a892:	0028      	movs	r0, r5
 801a894:	6019      	str	r1, [r3, #0]
 801a896:	4790      	blx	r2
 801a898:	2000      	movs	r0, #0
 801a89a:	e7df      	b.n	801a85c <_raise_r+0x12>

0801a89c <raise>:
 801a89c:	b510      	push	{r4, lr}
 801a89e:	4b03      	ldr	r3, [pc, #12]	@ (801a8ac <raise+0x10>)
 801a8a0:	0001      	movs	r1, r0
 801a8a2:	6818      	ldr	r0, [r3, #0]
 801a8a4:	f7ff ffd1 	bl	801a84a <_raise_r>
 801a8a8:	bd10      	pop	{r4, pc}
 801a8aa:	46c0      	nop			@ (mov r8, r8)
 801a8ac:	200001f4 	.word	0x200001f4

0801a8b0 <_kill_r>:
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	b570      	push	{r4, r5, r6, lr}
 801a8b4:	4d06      	ldr	r5, [pc, #24]	@ (801a8d0 <_kill_r+0x20>)
 801a8b6:	0004      	movs	r4, r0
 801a8b8:	0008      	movs	r0, r1
 801a8ba:	0011      	movs	r1, r2
 801a8bc:	602b      	str	r3, [r5, #0]
 801a8be:	f7ee fd61 	bl	8009384 <_kill>
 801a8c2:	1c43      	adds	r3, r0, #1
 801a8c4:	d103      	bne.n	801a8ce <_kill_r+0x1e>
 801a8c6:	682b      	ldr	r3, [r5, #0]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d000      	beq.n	801a8ce <_kill_r+0x1e>
 801a8cc:	6023      	str	r3, [r4, #0]
 801a8ce:	bd70      	pop	{r4, r5, r6, pc}
 801a8d0:	2000410c 	.word	0x2000410c

0801a8d4 <_getpid_r>:
 801a8d4:	b510      	push	{r4, lr}
 801a8d6:	f7ee fd4f 	bl	8009378 <_getpid>
 801a8da:	bd10      	pop	{r4, pc}

0801a8dc <log10>:
 801a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8de:	0004      	movs	r4, r0
 801a8e0:	000d      	movs	r5, r1
 801a8e2:	f000 fa0b 	bl	801acfc <__ieee754_log10>
 801a8e6:	0022      	movs	r2, r4
 801a8e8:	0006      	movs	r6, r0
 801a8ea:	000f      	movs	r7, r1
 801a8ec:	002b      	movs	r3, r5
 801a8ee:	0020      	movs	r0, r4
 801a8f0:	0029      	movs	r1, r5
 801a8f2:	f7e8 fc85 	bl	8003200 <__aeabi_dcmpun>
 801a8f6:	2800      	cmp	r0, #0
 801a8f8:	d115      	bne.n	801a926 <log10+0x4a>
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	0020      	movs	r0, r4
 801a900:	0029      	movs	r1, r5
 801a902:	f7e5 fdb3 	bl	800046c <__aeabi_dcmple>
 801a906:	2800      	cmp	r0, #0
 801a908:	d00d      	beq.n	801a926 <log10+0x4a>
 801a90a:	2200      	movs	r2, #0
 801a90c:	2300      	movs	r3, #0
 801a90e:	0020      	movs	r0, r4
 801a910:	0029      	movs	r1, r5
 801a912:	f7e5 fd9b 	bl	800044c <__aeabi_dcmpeq>
 801a916:	2800      	cmp	r0, #0
 801a918:	d008      	beq.n	801a92c <log10+0x50>
 801a91a:	f7fd fec5 	bl	80186a8 <__errno>
 801a91e:	2322      	movs	r3, #34	@ 0x22
 801a920:	2600      	movs	r6, #0
 801a922:	4f07      	ldr	r7, [pc, #28]	@ (801a940 <log10+0x64>)
 801a924:	6003      	str	r3, [r0, #0]
 801a926:	0030      	movs	r0, r6
 801a928:	0039      	movs	r1, r7
 801a92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a92c:	f7fd febc 	bl	80186a8 <__errno>
 801a930:	2321      	movs	r3, #33	@ 0x21
 801a932:	6003      	str	r3, [r0, #0]
 801a934:	4803      	ldr	r0, [pc, #12]	@ (801a944 <log10+0x68>)
 801a936:	f000 f871 	bl	801aa1c <nan>
 801a93a:	0006      	movs	r6, r0
 801a93c:	000f      	movs	r7, r1
 801a93e:	e7f2      	b.n	801a926 <log10+0x4a>
 801a940:	fff00000 	.word	0xfff00000
 801a944:	0801c57e 	.word	0x0801c57e

0801a948 <sqrt>:
 801a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a94a:	0004      	movs	r4, r0
 801a94c:	000d      	movs	r5, r1
 801a94e:	f000 f875 	bl	801aa3c <__ieee754_sqrt>
 801a952:	0022      	movs	r2, r4
 801a954:	0006      	movs	r6, r0
 801a956:	000f      	movs	r7, r1
 801a958:	002b      	movs	r3, r5
 801a95a:	0020      	movs	r0, r4
 801a95c:	0029      	movs	r1, r5
 801a95e:	f7e8 fc4f 	bl	8003200 <__aeabi_dcmpun>
 801a962:	2800      	cmp	r0, #0
 801a964:	d113      	bne.n	801a98e <sqrt+0x46>
 801a966:	2200      	movs	r2, #0
 801a968:	2300      	movs	r3, #0
 801a96a:	0020      	movs	r0, r4
 801a96c:	0029      	movs	r1, r5
 801a96e:	f7e5 fd73 	bl	8000458 <__aeabi_dcmplt>
 801a972:	2800      	cmp	r0, #0
 801a974:	d00b      	beq.n	801a98e <sqrt+0x46>
 801a976:	f7fd fe97 	bl	80186a8 <__errno>
 801a97a:	2321      	movs	r3, #33	@ 0x21
 801a97c:	2200      	movs	r2, #0
 801a97e:	6003      	str	r3, [r0, #0]
 801a980:	2300      	movs	r3, #0
 801a982:	0010      	movs	r0, r2
 801a984:	0019      	movs	r1, r3
 801a986:	f7e7 f993 	bl	8001cb0 <__aeabi_ddiv>
 801a98a:	0006      	movs	r6, r0
 801a98c:	000f      	movs	r7, r1
 801a98e:	0030      	movs	r0, r6
 801a990:	0039      	movs	r1, r7
 801a992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a994 <expf>:
 801a994:	b570      	push	{r4, r5, r6, lr}
 801a996:	1c04      	adds	r4, r0, #0
 801a998:	f000 fa2a 	bl	801adf0 <__ieee754_expf>
 801a99c:	1c05      	adds	r5, r0, #0
 801a99e:	1c20      	adds	r0, r4, #0
 801a9a0:	f000 f842 	bl	801aa28 <finitef>
 801a9a4:	2800      	cmp	r0, #0
 801a9a6:	d00b      	beq.n	801a9c0 <expf+0x2c>
 801a9a8:	490c      	ldr	r1, [pc, #48]	@ (801a9dc <expf+0x48>)
 801a9aa:	1c20      	adds	r0, r4, #0
 801a9ac:	f7e5 fda2 	bl	80004f4 <__aeabi_fcmpgt>
 801a9b0:	2800      	cmp	r0, #0
 801a9b2:	d007      	beq.n	801a9c4 <expf+0x30>
 801a9b4:	f7fd fe78 	bl	80186a8 <__errno>
 801a9b8:	25ff      	movs	r5, #255	@ 0xff
 801a9ba:	2322      	movs	r3, #34	@ 0x22
 801a9bc:	05ed      	lsls	r5, r5, #23
 801a9be:	6003      	str	r3, [r0, #0]
 801a9c0:	1c28      	adds	r0, r5, #0
 801a9c2:	bd70      	pop	{r4, r5, r6, pc}
 801a9c4:	4906      	ldr	r1, [pc, #24]	@ (801a9e0 <expf+0x4c>)
 801a9c6:	1c20      	adds	r0, r4, #0
 801a9c8:	f7e5 fd80 	bl	80004cc <__aeabi_fcmplt>
 801a9cc:	2800      	cmp	r0, #0
 801a9ce:	d0f7      	beq.n	801a9c0 <expf+0x2c>
 801a9d0:	f7fd fe6a 	bl	80186a8 <__errno>
 801a9d4:	2322      	movs	r3, #34	@ 0x22
 801a9d6:	2500      	movs	r5, #0
 801a9d8:	6003      	str	r3, [r0, #0]
 801a9da:	e7f1      	b.n	801a9c0 <expf+0x2c>
 801a9dc:	42b17217 	.word	0x42b17217
 801a9e0:	c2cff1b5 	.word	0xc2cff1b5

0801a9e4 <sqrtf>:
 801a9e4:	b570      	push	{r4, r5, r6, lr}
 801a9e6:	1c05      	adds	r5, r0, #0
 801a9e8:	f000 f910 	bl	801ac0c <__ieee754_sqrtf>
 801a9ec:	1c29      	adds	r1, r5, #0
 801a9ee:	1c04      	adds	r4, r0, #0
 801a9f0:	1c28      	adds	r0, r5, #0
 801a9f2:	f7e6 fd35 	bl	8001460 <__aeabi_fcmpun>
 801a9f6:	2800      	cmp	r0, #0
 801a9f8:	d10e      	bne.n	801aa18 <sqrtf+0x34>
 801a9fa:	2100      	movs	r1, #0
 801a9fc:	1c28      	adds	r0, r5, #0
 801a9fe:	f7e5 fd65 	bl	80004cc <__aeabi_fcmplt>
 801aa02:	2800      	cmp	r0, #0
 801aa04:	d008      	beq.n	801aa18 <sqrtf+0x34>
 801aa06:	f7fd fe4f 	bl	80186a8 <__errno>
 801aa0a:	2321      	movs	r3, #33	@ 0x21
 801aa0c:	2100      	movs	r1, #0
 801aa0e:	6003      	str	r3, [r0, #0]
 801aa10:	1c08      	adds	r0, r1, #0
 801aa12:	f7e6 f85d 	bl	8000ad0 <__aeabi_fdiv>
 801aa16:	1c04      	adds	r4, r0, #0
 801aa18:	1c20      	adds	r0, r4, #0
 801aa1a:	bd70      	pop	{r4, r5, r6, pc}

0801aa1c <nan>:
 801aa1c:	2000      	movs	r0, #0
 801aa1e:	4901      	ldr	r1, [pc, #4]	@ (801aa24 <nan+0x8>)
 801aa20:	4770      	bx	lr
 801aa22:	46c0      	nop			@ (mov r8, r8)
 801aa24:	7ff80000 	.word	0x7ff80000

0801aa28 <finitef>:
 801aa28:	22ff      	movs	r2, #255	@ 0xff
 801aa2a:	0043      	lsls	r3, r0, #1
 801aa2c:	085b      	lsrs	r3, r3, #1
 801aa2e:	2001      	movs	r0, #1
 801aa30:	05d2      	lsls	r2, r2, #23
 801aa32:	4293      	cmp	r3, r2
 801aa34:	db00      	blt.n	801aa38 <finitef+0x10>
 801aa36:	2000      	movs	r0, #0
 801aa38:	4770      	bx	lr
	...

0801aa3c <__ieee754_sqrt>:
 801aa3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa3e:	000a      	movs	r2, r1
 801aa40:	000d      	movs	r5, r1
 801aa42:	496d      	ldr	r1, [pc, #436]	@ (801abf8 <__ieee754_sqrt+0x1bc>)
 801aa44:	0004      	movs	r4, r0
 801aa46:	0003      	movs	r3, r0
 801aa48:	0008      	movs	r0, r1
 801aa4a:	b087      	sub	sp, #28
 801aa4c:	4028      	ands	r0, r5
 801aa4e:	4288      	cmp	r0, r1
 801aa50:	d111      	bne.n	801aa76 <__ieee754_sqrt+0x3a>
 801aa52:	0022      	movs	r2, r4
 801aa54:	002b      	movs	r3, r5
 801aa56:	0020      	movs	r0, r4
 801aa58:	0029      	movs	r1, r5
 801aa5a:	f7e7 fd6d 	bl	8002538 <__aeabi_dmul>
 801aa5e:	0002      	movs	r2, r0
 801aa60:	000b      	movs	r3, r1
 801aa62:	0020      	movs	r0, r4
 801aa64:	0029      	movs	r1, r5
 801aa66:	f7e6 fdbf 	bl	80015e8 <__aeabi_dadd>
 801aa6a:	0004      	movs	r4, r0
 801aa6c:	000d      	movs	r5, r1
 801aa6e:	0020      	movs	r0, r4
 801aa70:	0029      	movs	r1, r5
 801aa72:	b007      	add	sp, #28
 801aa74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa76:	2d00      	cmp	r5, #0
 801aa78:	dc11      	bgt.n	801aa9e <__ieee754_sqrt+0x62>
 801aa7a:	0069      	lsls	r1, r5, #1
 801aa7c:	0849      	lsrs	r1, r1, #1
 801aa7e:	4321      	orrs	r1, r4
 801aa80:	d0f5      	beq.n	801aa6e <__ieee754_sqrt+0x32>
 801aa82:	2000      	movs	r0, #0
 801aa84:	4285      	cmp	r5, r0
 801aa86:	d010      	beq.n	801aaaa <__ieee754_sqrt+0x6e>
 801aa88:	0022      	movs	r2, r4
 801aa8a:	002b      	movs	r3, r5
 801aa8c:	0020      	movs	r0, r4
 801aa8e:	0029      	movs	r1, r5
 801aa90:	f7e8 f81a 	bl	8002ac8 <__aeabi_dsub>
 801aa94:	0002      	movs	r2, r0
 801aa96:	000b      	movs	r3, r1
 801aa98:	f7e7 f90a 	bl	8001cb0 <__aeabi_ddiv>
 801aa9c:	e7e5      	b.n	801aa6a <__ieee754_sqrt+0x2e>
 801aa9e:	1528      	asrs	r0, r5, #20
 801aaa0:	d115      	bne.n	801aace <__ieee754_sqrt+0x92>
 801aaa2:	2480      	movs	r4, #128	@ 0x80
 801aaa4:	2100      	movs	r1, #0
 801aaa6:	0364      	lsls	r4, r4, #13
 801aaa8:	e007      	b.n	801aaba <__ieee754_sqrt+0x7e>
 801aaaa:	0ada      	lsrs	r2, r3, #11
 801aaac:	3815      	subs	r0, #21
 801aaae:	055b      	lsls	r3, r3, #21
 801aab0:	2a00      	cmp	r2, #0
 801aab2:	d0fa      	beq.n	801aaaa <__ieee754_sqrt+0x6e>
 801aab4:	e7f5      	b.n	801aaa2 <__ieee754_sqrt+0x66>
 801aab6:	0052      	lsls	r2, r2, #1
 801aab8:	3101      	adds	r1, #1
 801aaba:	4222      	tst	r2, r4
 801aabc:	d0fb      	beq.n	801aab6 <__ieee754_sqrt+0x7a>
 801aabe:	1e4c      	subs	r4, r1, #1
 801aac0:	1b00      	subs	r0, r0, r4
 801aac2:	2420      	movs	r4, #32
 801aac4:	001d      	movs	r5, r3
 801aac6:	1a64      	subs	r4, r4, r1
 801aac8:	40e5      	lsrs	r5, r4
 801aaca:	408b      	lsls	r3, r1
 801aacc:	432a      	orrs	r2, r5
 801aace:	494b      	ldr	r1, [pc, #300]	@ (801abfc <__ieee754_sqrt+0x1c0>)
 801aad0:	0312      	lsls	r2, r2, #12
 801aad2:	1844      	adds	r4, r0, r1
 801aad4:	2180      	movs	r1, #128	@ 0x80
 801aad6:	0b12      	lsrs	r2, r2, #12
 801aad8:	0349      	lsls	r1, r1, #13
 801aada:	4311      	orrs	r1, r2
 801aadc:	07c0      	lsls	r0, r0, #31
 801aade:	d403      	bmi.n	801aae8 <__ieee754_sqrt+0xac>
 801aae0:	0fda      	lsrs	r2, r3, #31
 801aae2:	0049      	lsls	r1, r1, #1
 801aae4:	1851      	adds	r1, r2, r1
 801aae6:	005b      	lsls	r3, r3, #1
 801aae8:	2500      	movs	r5, #0
 801aaea:	1062      	asrs	r2, r4, #1
 801aaec:	0049      	lsls	r1, r1, #1
 801aaee:	2480      	movs	r4, #128	@ 0x80
 801aaf0:	9205      	str	r2, [sp, #20]
 801aaf2:	0fda      	lsrs	r2, r3, #31
 801aaf4:	1852      	adds	r2, r2, r1
 801aaf6:	2016      	movs	r0, #22
 801aaf8:	0029      	movs	r1, r5
 801aafa:	005b      	lsls	r3, r3, #1
 801aafc:	03a4      	lsls	r4, r4, #14
 801aafe:	190e      	adds	r6, r1, r4
 801ab00:	4296      	cmp	r6, r2
 801ab02:	dc02      	bgt.n	801ab0a <__ieee754_sqrt+0xce>
 801ab04:	1931      	adds	r1, r6, r4
 801ab06:	1b92      	subs	r2, r2, r6
 801ab08:	192d      	adds	r5, r5, r4
 801ab0a:	0fde      	lsrs	r6, r3, #31
 801ab0c:	0052      	lsls	r2, r2, #1
 801ab0e:	3801      	subs	r0, #1
 801ab10:	1992      	adds	r2, r2, r6
 801ab12:	005b      	lsls	r3, r3, #1
 801ab14:	0864      	lsrs	r4, r4, #1
 801ab16:	2800      	cmp	r0, #0
 801ab18:	d1f1      	bne.n	801aafe <__ieee754_sqrt+0xc2>
 801ab1a:	2620      	movs	r6, #32
 801ab1c:	2780      	movs	r7, #128	@ 0x80
 801ab1e:	0004      	movs	r4, r0
 801ab20:	9604      	str	r6, [sp, #16]
 801ab22:	063f      	lsls	r7, r7, #24
 801ab24:	19c6      	adds	r6, r0, r7
 801ab26:	46b4      	mov	ip, r6
 801ab28:	4291      	cmp	r1, r2
 801ab2a:	db02      	blt.n	801ab32 <__ieee754_sqrt+0xf6>
 801ab2c:	d114      	bne.n	801ab58 <__ieee754_sqrt+0x11c>
 801ab2e:	429e      	cmp	r6, r3
 801ab30:	d812      	bhi.n	801ab58 <__ieee754_sqrt+0x11c>
 801ab32:	4660      	mov	r0, ip
 801ab34:	4666      	mov	r6, ip
 801ab36:	19c0      	adds	r0, r0, r7
 801ab38:	9100      	str	r1, [sp, #0]
 801ab3a:	2e00      	cmp	r6, #0
 801ab3c:	da03      	bge.n	801ab46 <__ieee754_sqrt+0x10a>
 801ab3e:	43c6      	mvns	r6, r0
 801ab40:	0ff6      	lsrs	r6, r6, #31
 801ab42:	198e      	adds	r6, r1, r6
 801ab44:	9600      	str	r6, [sp, #0]
 801ab46:	1a52      	subs	r2, r2, r1
 801ab48:	4563      	cmp	r3, ip
 801ab4a:	4189      	sbcs	r1, r1
 801ab4c:	4249      	negs	r1, r1
 801ab4e:	1a52      	subs	r2, r2, r1
 801ab50:	4661      	mov	r1, ip
 801ab52:	1a5b      	subs	r3, r3, r1
 801ab54:	9900      	ldr	r1, [sp, #0]
 801ab56:	19e4      	adds	r4, r4, r7
 801ab58:	0fde      	lsrs	r6, r3, #31
 801ab5a:	0052      	lsls	r2, r2, #1
 801ab5c:	1992      	adds	r2, r2, r6
 801ab5e:	9e04      	ldr	r6, [sp, #16]
 801ab60:	005b      	lsls	r3, r3, #1
 801ab62:	3e01      	subs	r6, #1
 801ab64:	087f      	lsrs	r7, r7, #1
 801ab66:	9604      	str	r6, [sp, #16]
 801ab68:	2e00      	cmp	r6, #0
 801ab6a:	d1db      	bne.n	801ab24 <__ieee754_sqrt+0xe8>
 801ab6c:	431a      	orrs	r2, r3
 801ab6e:	d01f      	beq.n	801abb0 <__ieee754_sqrt+0x174>
 801ab70:	4e23      	ldr	r6, [pc, #140]	@ (801ac00 <__ieee754_sqrt+0x1c4>)
 801ab72:	4f24      	ldr	r7, [pc, #144]	@ (801ac04 <__ieee754_sqrt+0x1c8>)
 801ab74:	6830      	ldr	r0, [r6, #0]
 801ab76:	6871      	ldr	r1, [r6, #4]
 801ab78:	683a      	ldr	r2, [r7, #0]
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	9200      	str	r2, [sp, #0]
 801ab7e:	9301      	str	r3, [sp, #4]
 801ab80:	6832      	ldr	r2, [r6, #0]
 801ab82:	6873      	ldr	r3, [r6, #4]
 801ab84:	9202      	str	r2, [sp, #8]
 801ab86:	9303      	str	r3, [sp, #12]
 801ab88:	9a00      	ldr	r2, [sp, #0]
 801ab8a:	9b01      	ldr	r3, [sp, #4]
 801ab8c:	f7e7 ff9c 	bl	8002ac8 <__aeabi_dsub>
 801ab90:	0002      	movs	r2, r0
 801ab92:	000b      	movs	r3, r1
 801ab94:	9802      	ldr	r0, [sp, #8]
 801ab96:	9903      	ldr	r1, [sp, #12]
 801ab98:	f7e5 fc68 	bl	800046c <__aeabi_dcmple>
 801ab9c:	2800      	cmp	r0, #0
 801ab9e:	d007      	beq.n	801abb0 <__ieee754_sqrt+0x174>
 801aba0:	6830      	ldr	r0, [r6, #0]
 801aba2:	6871      	ldr	r1, [r6, #4]
 801aba4:	683a      	ldr	r2, [r7, #0]
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	1c67      	adds	r7, r4, #1
 801abaa:	d10f      	bne.n	801abcc <__ieee754_sqrt+0x190>
 801abac:	9c04      	ldr	r4, [sp, #16]
 801abae:	3501      	adds	r5, #1
 801abb0:	4b15      	ldr	r3, [pc, #84]	@ (801ac08 <__ieee754_sqrt+0x1cc>)
 801abb2:	106a      	asrs	r2, r5, #1
 801abb4:	18d2      	adds	r2, r2, r3
 801abb6:	0863      	lsrs	r3, r4, #1
 801abb8:	07ed      	lsls	r5, r5, #31
 801abba:	d502      	bpl.n	801abc2 <__ieee754_sqrt+0x186>
 801abbc:	2180      	movs	r1, #128	@ 0x80
 801abbe:	0609      	lsls	r1, r1, #24
 801abc0:	430b      	orrs	r3, r1
 801abc2:	9905      	ldr	r1, [sp, #20]
 801abc4:	001c      	movs	r4, r3
 801abc6:	0509      	lsls	r1, r1, #20
 801abc8:	188d      	adds	r5, r1, r2
 801abca:	e750      	b.n	801aa6e <__ieee754_sqrt+0x32>
 801abcc:	f7e6 fd0c 	bl	80015e8 <__aeabi_dadd>
 801abd0:	6877      	ldr	r7, [r6, #4]
 801abd2:	6836      	ldr	r6, [r6, #0]
 801abd4:	0002      	movs	r2, r0
 801abd6:	000b      	movs	r3, r1
 801abd8:	0030      	movs	r0, r6
 801abda:	0039      	movs	r1, r7
 801abdc:	f7e5 fc3c 	bl	8000458 <__aeabi_dcmplt>
 801abe0:	2800      	cmp	r0, #0
 801abe2:	d004      	beq.n	801abee <__ieee754_sqrt+0x1b2>
 801abe4:	3402      	adds	r4, #2
 801abe6:	4263      	negs	r3, r4
 801abe8:	4163      	adcs	r3, r4
 801abea:	18ed      	adds	r5, r5, r3
 801abec:	e7e0      	b.n	801abb0 <__ieee754_sqrt+0x174>
 801abee:	2301      	movs	r3, #1
 801abf0:	3401      	adds	r4, #1
 801abf2:	439c      	bics	r4, r3
 801abf4:	e7dc      	b.n	801abb0 <__ieee754_sqrt+0x174>
 801abf6:	46c0      	nop			@ (mov r8, r8)
 801abf8:	7ff00000 	.word	0x7ff00000
 801abfc:	fffffc01 	.word	0xfffffc01
 801ac00:	200003b8 	.word	0x200003b8
 801ac04:	200003b0 	.word	0x200003b0
 801ac08:	3fe00000 	.word	0x3fe00000

0801ac0c <__ieee754_sqrtf>:
 801ac0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac0e:	0003      	movs	r3, r0
 801ac10:	0042      	lsls	r2, r0, #1
 801ac12:	1c04      	adds	r4, r0, #0
 801ac14:	20ff      	movs	r0, #255	@ 0xff
 801ac16:	0852      	lsrs	r2, r2, #1
 801ac18:	05c0      	lsls	r0, r0, #23
 801ac1a:	4282      	cmp	r2, r0
 801ac1c:	d30a      	bcc.n	801ac34 <__ieee754_sqrtf+0x28>
 801ac1e:	1c21      	adds	r1, r4, #0
 801ac20:	1c20      	adds	r0, r4, #0
 801ac22:	f7e6 f93b 	bl	8000e9c <__aeabi_fmul>
 801ac26:	1c01      	adds	r1, r0, #0
 801ac28:	1c20      	adds	r0, r4, #0
 801ac2a:	f7e5 fdc7 	bl	80007bc <__aeabi_fadd>
 801ac2e:	1c04      	adds	r4, r0, #0
 801ac30:	1c20      	adds	r0, r4, #0
 801ac32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ac34:	2a00      	cmp	r2, #0
 801ac36:	d0fb      	beq.n	801ac30 <__ieee754_sqrtf+0x24>
 801ac38:	2c00      	cmp	r4, #0
 801ac3a:	da07      	bge.n	801ac4c <__ieee754_sqrtf+0x40>
 801ac3c:	1c21      	adds	r1, r4, #0
 801ac3e:	1c20      	adds	r0, r4, #0
 801ac40:	f7e6 fa6a 	bl	8001118 <__aeabi_fsub>
 801ac44:	1c01      	adds	r1, r0, #0
 801ac46:	f7e5 ff43 	bl	8000ad0 <__aeabi_fdiv>
 801ac4a:	e7f0      	b.n	801ac2e <__ieee754_sqrtf+0x22>
 801ac4c:	0022      	movs	r2, r4
 801ac4e:	15e1      	asrs	r1, r4, #23
 801ac50:	4002      	ands	r2, r0
 801ac52:	4204      	tst	r4, r0
 801ac54:	d046      	beq.n	801ace4 <__ieee754_sqrtf+0xd8>
 801ac56:	2280      	movs	r2, #128	@ 0x80
 801ac58:	000f      	movs	r7, r1
 801ac5a:	025b      	lsls	r3, r3, #9
 801ac5c:	0a5b      	lsrs	r3, r3, #9
 801ac5e:	0412      	lsls	r2, r2, #16
 801ac60:	3f7f      	subs	r7, #127	@ 0x7f
 801ac62:	4313      	orrs	r3, r2
 801ac64:	07c9      	lsls	r1, r1, #31
 801ac66:	d400      	bmi.n	801ac6a <__ieee754_sqrtf+0x5e>
 801ac68:	005b      	lsls	r3, r3, #1
 801ac6a:	2400      	movs	r4, #0
 801ac6c:	2180      	movs	r1, #128	@ 0x80
 801ac6e:	2019      	movs	r0, #25
 801ac70:	0026      	movs	r6, r4
 801ac72:	107f      	asrs	r7, r7, #1
 801ac74:	005b      	lsls	r3, r3, #1
 801ac76:	0449      	lsls	r1, r1, #17
 801ac78:	1875      	adds	r5, r6, r1
 801ac7a:	001a      	movs	r2, r3
 801ac7c:	429d      	cmp	r5, r3
 801ac7e:	dc02      	bgt.n	801ac86 <__ieee754_sqrtf+0x7a>
 801ac80:	186e      	adds	r6, r5, r1
 801ac82:	1b5a      	subs	r2, r3, r5
 801ac84:	1864      	adds	r4, r4, r1
 801ac86:	3801      	subs	r0, #1
 801ac88:	0053      	lsls	r3, r2, #1
 801ac8a:	0849      	lsrs	r1, r1, #1
 801ac8c:	2800      	cmp	r0, #0
 801ac8e:	d1f3      	bne.n	801ac78 <__ieee754_sqrtf+0x6c>
 801ac90:	2a00      	cmp	r2, #0
 801ac92:	d019      	beq.n	801acc8 <__ieee754_sqrtf+0xbc>
 801ac94:	4d17      	ldr	r5, [pc, #92]	@ (801acf4 <__ieee754_sqrtf+0xe8>)
 801ac96:	4e18      	ldr	r6, [pc, #96]	@ (801acf8 <__ieee754_sqrtf+0xec>)
 801ac98:	6828      	ldr	r0, [r5, #0]
 801ac9a:	6831      	ldr	r1, [r6, #0]
 801ac9c:	682b      	ldr	r3, [r5, #0]
 801ac9e:	9301      	str	r3, [sp, #4]
 801aca0:	f7e6 fa3a 	bl	8001118 <__aeabi_fsub>
 801aca4:	1c01      	adds	r1, r0, #0
 801aca6:	9801      	ldr	r0, [sp, #4]
 801aca8:	f7e5 fc1a 	bl	80004e0 <__aeabi_fcmple>
 801acac:	2800      	cmp	r0, #0
 801acae:	d00b      	beq.n	801acc8 <__ieee754_sqrtf+0xbc>
 801acb0:	6828      	ldr	r0, [r5, #0]
 801acb2:	6831      	ldr	r1, [r6, #0]
 801acb4:	f7e5 fd82 	bl	80007bc <__aeabi_fadd>
 801acb8:	682d      	ldr	r5, [r5, #0]
 801acba:	1c01      	adds	r1, r0, #0
 801acbc:	1c28      	adds	r0, r5, #0
 801acbe:	f7e5 fc05 	bl	80004cc <__aeabi_fcmplt>
 801acc2:	2800      	cmp	r0, #0
 801acc4:	d011      	beq.n	801acea <__ieee754_sqrtf+0xde>
 801acc6:	3402      	adds	r4, #2
 801acc8:	23fc      	movs	r3, #252	@ 0xfc
 801acca:	1064      	asrs	r4, r4, #1
 801accc:	059b      	lsls	r3, r3, #22
 801acce:	18e3      	adds	r3, r4, r3
 801acd0:	05fc      	lsls	r4, r7, #23
 801acd2:	18e4      	adds	r4, r4, r3
 801acd4:	e7ac      	b.n	801ac30 <__ieee754_sqrtf+0x24>
 801acd6:	005b      	lsls	r3, r3, #1
 801acd8:	3201      	adds	r2, #1
 801acda:	4203      	tst	r3, r0
 801acdc:	d0fb      	beq.n	801acd6 <__ieee754_sqrtf+0xca>
 801acde:	3a01      	subs	r2, #1
 801ace0:	1a89      	subs	r1, r1, r2
 801ace2:	e7b8      	b.n	801ac56 <__ieee754_sqrtf+0x4a>
 801ace4:	2080      	movs	r0, #128	@ 0x80
 801ace6:	0400      	lsls	r0, r0, #16
 801ace8:	e7f7      	b.n	801acda <__ieee754_sqrtf+0xce>
 801acea:	2301      	movs	r3, #1
 801acec:	3401      	adds	r4, #1
 801acee:	439c      	bics	r4, r3
 801acf0:	e7ea      	b.n	801acc8 <__ieee754_sqrtf+0xbc>
 801acf2:	46c0      	nop			@ (mov r8, r8)
 801acf4:	200003c4 	.word	0x200003c4
 801acf8:	200003c0 	.word	0x200003c0

0801acfc <__ieee754_log10>:
 801acfc:	2280      	movs	r2, #128	@ 0x80
 801acfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad00:	000b      	movs	r3, r1
 801ad02:	0004      	movs	r4, r0
 801ad04:	000d      	movs	r5, r1
 801ad06:	b085      	sub	sp, #20
 801ad08:	0352      	lsls	r2, r2, #13
 801ad0a:	4291      	cmp	r1, r2
 801ad0c:	da26      	bge.n	801ad5c <__ieee754_log10+0x60>
 801ad0e:	004a      	lsls	r2, r1, #1
 801ad10:	0852      	lsrs	r2, r2, #1
 801ad12:	4302      	orrs	r2, r0
 801ad14:	d107      	bne.n	801ad26 <__ieee754_log10+0x2a>
 801ad16:	2200      	movs	r2, #0
 801ad18:	2300      	movs	r3, #0
 801ad1a:	2000      	movs	r0, #0
 801ad1c:	4929      	ldr	r1, [pc, #164]	@ (801adc4 <__ieee754_log10+0xc8>)
 801ad1e:	f7e6 ffc7 	bl	8001cb0 <__aeabi_ddiv>
 801ad22:	b005      	add	sp, #20
 801ad24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad26:	2900      	cmp	r1, #0
 801ad28:	da05      	bge.n	801ad36 <__ieee754_log10+0x3a>
 801ad2a:	0002      	movs	r2, r0
 801ad2c:	f7e7 fecc 	bl	8002ac8 <__aeabi_dsub>
 801ad30:	2200      	movs	r2, #0
 801ad32:	2300      	movs	r3, #0
 801ad34:	e7f3      	b.n	801ad1e <__ieee754_log10+0x22>
 801ad36:	2200      	movs	r2, #0
 801ad38:	4b23      	ldr	r3, [pc, #140]	@ (801adc8 <__ieee754_log10+0xcc>)
 801ad3a:	f7e7 fbfd 	bl	8002538 <__aeabi_dmul>
 801ad3e:	2236      	movs	r2, #54	@ 0x36
 801ad40:	0004      	movs	r4, r0
 801ad42:	000d      	movs	r5, r1
 801ad44:	000b      	movs	r3, r1
 801ad46:	4252      	negs	r2, r2
 801ad48:	4920      	ldr	r1, [pc, #128]	@ (801adcc <__ieee754_log10+0xd0>)
 801ad4a:	428b      	cmp	r3, r1
 801ad4c:	dd08      	ble.n	801ad60 <__ieee754_log10+0x64>
 801ad4e:	0022      	movs	r2, r4
 801ad50:	002b      	movs	r3, r5
 801ad52:	0020      	movs	r0, r4
 801ad54:	0029      	movs	r1, r5
 801ad56:	f7e6 fc47 	bl	80015e8 <__aeabi_dadd>
 801ad5a:	e7e2      	b.n	801ad22 <__ieee754_log10+0x26>
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	e7f3      	b.n	801ad48 <__ieee754_log10+0x4c>
 801ad60:	491b      	ldr	r1, [pc, #108]	@ (801add0 <__ieee754_log10+0xd4>)
 801ad62:	1518      	asrs	r0, r3, #20
 801ad64:	1840      	adds	r0, r0, r1
 801ad66:	1880      	adds	r0, r0, r2
 801ad68:	0fc2      	lsrs	r2, r0, #31
 801ad6a:	031b      	lsls	r3, r3, #12
 801ad6c:	0b1b      	lsrs	r3, r3, #12
 801ad6e:	1880      	adds	r0, r0, r2
 801ad70:	9203      	str	r2, [sp, #12]
 801ad72:	9300      	str	r3, [sp, #0]
 801ad74:	f7e8 faa2 	bl	80032bc <__aeabi_i2d>
 801ad78:	9a03      	ldr	r2, [sp, #12]
 801ad7a:	4b16      	ldr	r3, [pc, #88]	@ (801add4 <__ieee754_log10+0xd8>)
 801ad7c:	0006      	movs	r6, r0
 801ad7e:	1a9b      	subs	r3, r3, r2
 801ad80:	9a00      	ldr	r2, [sp, #0]
 801ad82:	051b      	lsls	r3, r3, #20
 801ad84:	431a      	orrs	r2, r3
 801ad86:	0015      	movs	r5, r2
 801ad88:	4b13      	ldr	r3, [pc, #76]	@ (801add8 <__ieee754_log10+0xdc>)
 801ad8a:	4a14      	ldr	r2, [pc, #80]	@ (801addc <__ieee754_log10+0xe0>)
 801ad8c:	000f      	movs	r7, r1
 801ad8e:	f7e7 fbd3 	bl	8002538 <__aeabi_dmul>
 801ad92:	9000      	str	r0, [sp, #0]
 801ad94:	9101      	str	r1, [sp, #4]
 801ad96:	0020      	movs	r0, r4
 801ad98:	0029      	movs	r1, r5
 801ad9a:	f000 f93b 	bl	801b014 <__ieee754_log>
 801ad9e:	4a10      	ldr	r2, [pc, #64]	@ (801ade0 <__ieee754_log10+0xe4>)
 801ada0:	4b10      	ldr	r3, [pc, #64]	@ (801ade4 <__ieee754_log10+0xe8>)
 801ada2:	f7e7 fbc9 	bl	8002538 <__aeabi_dmul>
 801ada6:	9a00      	ldr	r2, [sp, #0]
 801ada8:	9b01      	ldr	r3, [sp, #4]
 801adaa:	f7e6 fc1d 	bl	80015e8 <__aeabi_dadd>
 801adae:	4a0e      	ldr	r2, [pc, #56]	@ (801ade8 <__ieee754_log10+0xec>)
 801adb0:	4b0e      	ldr	r3, [pc, #56]	@ (801adec <__ieee754_log10+0xf0>)
 801adb2:	0004      	movs	r4, r0
 801adb4:	000d      	movs	r5, r1
 801adb6:	0030      	movs	r0, r6
 801adb8:	0039      	movs	r1, r7
 801adba:	f7e7 fbbd 	bl	8002538 <__aeabi_dmul>
 801adbe:	0002      	movs	r2, r0
 801adc0:	000b      	movs	r3, r1
 801adc2:	e7c6      	b.n	801ad52 <__ieee754_log10+0x56>
 801adc4:	c3500000 	.word	0xc3500000
 801adc8:	43500000 	.word	0x43500000
 801adcc:	7fefffff 	.word	0x7fefffff
 801add0:	fffffc01 	.word	0xfffffc01
 801add4:	000003ff 	.word	0x000003ff
 801add8:	3d59fef3 	.word	0x3d59fef3
 801addc:	11f12b36 	.word	0x11f12b36
 801ade0:	1526e50e 	.word	0x1526e50e
 801ade4:	3fdbcb7b 	.word	0x3fdbcb7b
 801ade8:	509f6000 	.word	0x509f6000
 801adec:	3fd34413 	.word	0x3fd34413

0801adf0 <__ieee754_expf>:
 801adf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801adf2:	21ff      	movs	r1, #255	@ 0xff
 801adf4:	0043      	lsls	r3, r0, #1
 801adf6:	1c04      	adds	r4, r0, #0
 801adf8:	085b      	lsrs	r3, r3, #1
 801adfa:	05c9      	lsls	r1, r1, #23
 801adfc:	428b      	cmp	r3, r1
 801adfe:	d904      	bls.n	801ae0a <__ieee754_expf+0x1a>
 801ae00:	1c01      	adds	r1, r0, #0
 801ae02:	1c20      	adds	r0, r4, #0
 801ae04:	f7e5 fcda 	bl	80007bc <__aeabi_fadd>
 801ae08:	e00d      	b.n	801ae26 <__ieee754_expf+0x36>
 801ae0a:	0fc6      	lsrs	r6, r0, #31
 801ae0c:	428b      	cmp	r3, r1
 801ae0e:	d104      	bne.n	801ae1a <__ieee754_expf+0x2a>
 801ae10:	2e00      	cmp	r6, #0
 801ae12:	d000      	beq.n	801ae16 <__ieee754_expf+0x26>
 801ae14:	e0ba      	b.n	801af8c <__ieee754_expf+0x19c>
 801ae16:	1c20      	adds	r0, r4, #0
 801ae18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ae1a:	495d      	ldr	r1, [pc, #372]	@ (801af90 <__ieee754_expf+0x1a0>)
 801ae1c:	4288      	cmp	r0, r1
 801ae1e:	dd04      	ble.n	801ae2a <__ieee754_expf+0x3a>
 801ae20:	2000      	movs	r0, #0
 801ae22:	f000 f8f1 	bl	801b008 <__math_oflowf>
 801ae26:	1c04      	adds	r4, r0, #0
 801ae28:	e7f5      	b.n	801ae16 <__ieee754_expf+0x26>
 801ae2a:	2800      	cmp	r0, #0
 801ae2c:	da06      	bge.n	801ae3c <__ieee754_expf+0x4c>
 801ae2e:	4a59      	ldr	r2, [pc, #356]	@ (801af94 <__ieee754_expf+0x1a4>)
 801ae30:	4293      	cmp	r3, r2
 801ae32:	d903      	bls.n	801ae3c <__ieee754_expf+0x4c>
 801ae34:	2000      	movs	r0, #0
 801ae36:	f000 f8e1 	bl	801affc <__math_uflowf>
 801ae3a:	e7f4      	b.n	801ae26 <__ieee754_expf+0x36>
 801ae3c:	4a56      	ldr	r2, [pc, #344]	@ (801af98 <__ieee754_expf+0x1a8>)
 801ae3e:	4293      	cmp	r3, r2
 801ae40:	d96e      	bls.n	801af20 <__ieee754_expf+0x130>
 801ae42:	4a56      	ldr	r2, [pc, #344]	@ (801af9c <__ieee754_expf+0x1ac>)
 801ae44:	00b5      	lsls	r5, r6, #2
 801ae46:	4293      	cmp	r3, r2
 801ae48:	d84e      	bhi.n	801aee8 <__ieee754_expf+0xf8>
 801ae4a:	4b55      	ldr	r3, [pc, #340]	@ (801afa0 <__ieee754_expf+0x1b0>)
 801ae4c:	1c20      	adds	r0, r4, #0
 801ae4e:	5959      	ldr	r1, [r3, r5]
 801ae50:	f7e6 f962 	bl	8001118 <__aeabi_fsub>
 801ae54:	4b53      	ldr	r3, [pc, #332]	@ (801afa4 <__ieee754_expf+0x1b4>)
 801ae56:	1c07      	adds	r7, r0, #0
 801ae58:	595b      	ldr	r3, [r3, r5]
 801ae5a:	2501      	movs	r5, #1
 801ae5c:	1bad      	subs	r5, r5, r6
 801ae5e:	9300      	str	r3, [sp, #0]
 801ae60:	1bad      	subs	r5, r5, r6
 801ae62:	9900      	ldr	r1, [sp, #0]
 801ae64:	1c38      	adds	r0, r7, #0
 801ae66:	f7e6 f957 	bl	8001118 <__aeabi_fsub>
 801ae6a:	1c04      	adds	r4, r0, #0
 801ae6c:	1c21      	adds	r1, r4, #0
 801ae6e:	1c20      	adds	r0, r4, #0
 801ae70:	f7e6 f814 	bl	8000e9c <__aeabi_fmul>
 801ae74:	494c      	ldr	r1, [pc, #304]	@ (801afa8 <__ieee754_expf+0x1b8>)
 801ae76:	1c06      	adds	r6, r0, #0
 801ae78:	f7e6 f810 	bl	8000e9c <__aeabi_fmul>
 801ae7c:	494b      	ldr	r1, [pc, #300]	@ (801afac <__ieee754_expf+0x1bc>)
 801ae7e:	f7e6 f94b 	bl	8001118 <__aeabi_fsub>
 801ae82:	1c31      	adds	r1, r6, #0
 801ae84:	f7e6 f80a 	bl	8000e9c <__aeabi_fmul>
 801ae88:	4949      	ldr	r1, [pc, #292]	@ (801afb0 <__ieee754_expf+0x1c0>)
 801ae8a:	f7e5 fc97 	bl	80007bc <__aeabi_fadd>
 801ae8e:	1c31      	adds	r1, r6, #0
 801ae90:	f7e6 f804 	bl	8000e9c <__aeabi_fmul>
 801ae94:	4947      	ldr	r1, [pc, #284]	@ (801afb4 <__ieee754_expf+0x1c4>)
 801ae96:	f7e6 f93f 	bl	8001118 <__aeabi_fsub>
 801ae9a:	1c31      	adds	r1, r6, #0
 801ae9c:	f7e5 fffe 	bl	8000e9c <__aeabi_fmul>
 801aea0:	4945      	ldr	r1, [pc, #276]	@ (801afb8 <__ieee754_expf+0x1c8>)
 801aea2:	f7e5 fc8b 	bl	80007bc <__aeabi_fadd>
 801aea6:	1c31      	adds	r1, r6, #0
 801aea8:	f7e5 fff8 	bl	8000e9c <__aeabi_fmul>
 801aeac:	1c01      	adds	r1, r0, #0
 801aeae:	1c20      	adds	r0, r4, #0
 801aeb0:	f7e6 f932 	bl	8001118 <__aeabi_fsub>
 801aeb4:	1c01      	adds	r1, r0, #0
 801aeb6:	1c06      	adds	r6, r0, #0
 801aeb8:	1c20      	adds	r0, r4, #0
 801aeba:	f7e5 ffef 	bl	8000e9c <__aeabi_fmul>
 801aebe:	9001      	str	r0, [sp, #4]
 801aec0:	2d00      	cmp	r5, #0
 801aec2:	d140      	bne.n	801af46 <__ieee754_expf+0x156>
 801aec4:	2180      	movs	r1, #128	@ 0x80
 801aec6:	1c30      	adds	r0, r6, #0
 801aec8:	05c9      	lsls	r1, r1, #23
 801aeca:	f7e6 f925 	bl	8001118 <__aeabi_fsub>
 801aece:	1c01      	adds	r1, r0, #0
 801aed0:	9801      	ldr	r0, [sp, #4]
 801aed2:	f7e5 fdfd 	bl	8000ad0 <__aeabi_fdiv>
 801aed6:	1c21      	adds	r1, r4, #0
 801aed8:	f7e6 f91e 	bl	8001118 <__aeabi_fsub>
 801aedc:	1c01      	adds	r1, r0, #0
 801aede:	20fe      	movs	r0, #254	@ 0xfe
 801aee0:	0580      	lsls	r0, r0, #22
 801aee2:	f7e6 f919 	bl	8001118 <__aeabi_fsub>
 801aee6:	e79e      	b.n	801ae26 <__ieee754_expf+0x36>
 801aee8:	4934      	ldr	r1, [pc, #208]	@ (801afbc <__ieee754_expf+0x1cc>)
 801aeea:	1c20      	adds	r0, r4, #0
 801aeec:	f7e5 ffd6 	bl	8000e9c <__aeabi_fmul>
 801aef0:	4b33      	ldr	r3, [pc, #204]	@ (801afc0 <__ieee754_expf+0x1d0>)
 801aef2:	5959      	ldr	r1, [r3, r5]
 801aef4:	f7e5 fc62 	bl	80007bc <__aeabi_fadd>
 801aef8:	f7e6 fac8 	bl	800148c <__aeabi_f2iz>
 801aefc:	0005      	movs	r5, r0
 801aefe:	f7e6 fae5 	bl	80014cc <__aeabi_i2f>
 801af02:	4930      	ldr	r1, [pc, #192]	@ (801afc4 <__ieee754_expf+0x1d4>)
 801af04:	1c06      	adds	r6, r0, #0
 801af06:	f7e5 ffc9 	bl	8000e9c <__aeabi_fmul>
 801af0a:	1c01      	adds	r1, r0, #0
 801af0c:	1c20      	adds	r0, r4, #0
 801af0e:	f7e6 f903 	bl	8001118 <__aeabi_fsub>
 801af12:	492d      	ldr	r1, [pc, #180]	@ (801afc8 <__ieee754_expf+0x1d8>)
 801af14:	1c07      	adds	r7, r0, #0
 801af16:	1c30      	adds	r0, r6, #0
 801af18:	f7e5 ffc0 	bl	8000e9c <__aeabi_fmul>
 801af1c:	9000      	str	r0, [sp, #0]
 801af1e:	e7a0      	b.n	801ae62 <__ieee754_expf+0x72>
 801af20:	22d0      	movs	r2, #208	@ 0xd0
 801af22:	0592      	lsls	r2, r2, #22
 801af24:	4293      	cmp	r3, r2
 801af26:	d20c      	bcs.n	801af42 <__ieee754_expf+0x152>
 801af28:	4928      	ldr	r1, [pc, #160]	@ (801afcc <__ieee754_expf+0x1dc>)
 801af2a:	1c20      	adds	r0, r4, #0
 801af2c:	f7e5 fc46 	bl	80007bc <__aeabi_fadd>
 801af30:	21fe      	movs	r1, #254	@ 0xfe
 801af32:	0589      	lsls	r1, r1, #22
 801af34:	f7e5 fade 	bl	80004f4 <__aeabi_fcmpgt>
 801af38:	1e05      	subs	r5, r0, #0
 801af3a:	d097      	beq.n	801ae6c <__ieee754_expf+0x7c>
 801af3c:	21fe      	movs	r1, #254	@ 0xfe
 801af3e:	0589      	lsls	r1, r1, #22
 801af40:	e75f      	b.n	801ae02 <__ieee754_expf+0x12>
 801af42:	2500      	movs	r5, #0
 801af44:	e792      	b.n	801ae6c <__ieee754_expf+0x7c>
 801af46:	2080      	movs	r0, #128	@ 0x80
 801af48:	1c31      	adds	r1, r6, #0
 801af4a:	05c0      	lsls	r0, r0, #23
 801af4c:	f7e6 f8e4 	bl	8001118 <__aeabi_fsub>
 801af50:	1c01      	adds	r1, r0, #0
 801af52:	9801      	ldr	r0, [sp, #4]
 801af54:	f7e5 fdbc 	bl	8000ad0 <__aeabi_fdiv>
 801af58:	1c01      	adds	r1, r0, #0
 801af5a:	9800      	ldr	r0, [sp, #0]
 801af5c:	f7e6 f8dc 	bl	8001118 <__aeabi_fsub>
 801af60:	1c39      	adds	r1, r7, #0
 801af62:	f7e6 f8d9 	bl	8001118 <__aeabi_fsub>
 801af66:	1c01      	adds	r1, r0, #0
 801af68:	20fe      	movs	r0, #254	@ 0xfe
 801af6a:	0580      	lsls	r0, r0, #22
 801af6c:	f7e6 f8d4 	bl	8001118 <__aeabi_fsub>
 801af70:	002b      	movs	r3, r5
 801af72:	337d      	adds	r3, #125	@ 0x7d
 801af74:	db02      	blt.n	801af7c <__ieee754_expf+0x18c>
 801af76:	05ec      	lsls	r4, r5, #23
 801af78:	1824      	adds	r4, r4, r0
 801af7a:	e74c      	b.n	801ae16 <__ieee754_expf+0x26>
 801af7c:	21d8      	movs	r1, #216	@ 0xd8
 801af7e:	3564      	adds	r5, #100	@ 0x64
 801af80:	05ed      	lsls	r5, r5, #23
 801af82:	1828      	adds	r0, r5, r0
 801af84:	0509      	lsls	r1, r1, #20
 801af86:	f7e5 ff89 	bl	8000e9c <__aeabi_fmul>
 801af8a:	e74c      	b.n	801ae26 <__ieee754_expf+0x36>
 801af8c:	2400      	movs	r4, #0
 801af8e:	e742      	b.n	801ae16 <__ieee754_expf+0x26>
 801af90:	42b17217 	.word	0x42b17217
 801af94:	42cff1b5 	.word	0x42cff1b5
 801af98:	3eb17218 	.word	0x3eb17218
 801af9c:	3f851591 	.word	0x3f851591
 801afa0:	0801c688 	.word	0x0801c688
 801afa4:	0801c680 	.word	0x0801c680
 801afa8:	3331bb4c 	.word	0x3331bb4c
 801afac:	35ddea0e 	.word	0x35ddea0e
 801afb0:	388ab355 	.word	0x388ab355
 801afb4:	3b360b61 	.word	0x3b360b61
 801afb8:	3e2aaaab 	.word	0x3e2aaaab
 801afbc:	3fb8aa3b 	.word	0x3fb8aa3b
 801afc0:	0801c690 	.word	0x0801c690
 801afc4:	3f317180 	.word	0x3f317180
 801afc8:	3717f7d1 	.word	0x3717f7d1
 801afcc:	7149f2ca 	.word	0x7149f2ca

0801afd0 <with_errnof>:
 801afd0:	b570      	push	{r4, r5, r6, lr}
 801afd2:	000d      	movs	r5, r1
 801afd4:	1c04      	adds	r4, r0, #0
 801afd6:	f7fd fb67 	bl	80186a8 <__errno>
 801afda:	6005      	str	r5, [r0, #0]
 801afdc:	1c20      	adds	r0, r4, #0
 801afde:	bd70      	pop	{r4, r5, r6, pc}

0801afe0 <xflowf>:
 801afe0:	b510      	push	{r4, lr}
 801afe2:	1c0b      	adds	r3, r1, #0
 801afe4:	2800      	cmp	r0, #0
 801afe6:	d002      	beq.n	801afee <xflowf+0xe>
 801afe8:	2380      	movs	r3, #128	@ 0x80
 801afea:	061b      	lsls	r3, r3, #24
 801afec:	18cb      	adds	r3, r1, r3
 801afee:	1c18      	adds	r0, r3, #0
 801aff0:	f7e5 ff54 	bl	8000e9c <__aeabi_fmul>
 801aff4:	2122      	movs	r1, #34	@ 0x22
 801aff6:	f7ff ffeb 	bl	801afd0 <with_errnof>
 801affa:	bd10      	pop	{r4, pc}

0801affc <__math_uflowf>:
 801affc:	2180      	movs	r1, #128	@ 0x80
 801affe:	b510      	push	{r4, lr}
 801b000:	0549      	lsls	r1, r1, #21
 801b002:	f7ff ffed 	bl	801afe0 <xflowf>
 801b006:	bd10      	pop	{r4, pc}

0801b008 <__math_oflowf>:
 801b008:	21e0      	movs	r1, #224	@ 0xe0
 801b00a:	b510      	push	{r4, lr}
 801b00c:	05c9      	lsls	r1, r1, #23
 801b00e:	f7ff ffe7 	bl	801afe0 <xflowf>
 801b012:	bd10      	pop	{r4, pc}

0801b014 <__ieee754_log>:
 801b014:	2380      	movs	r3, #128	@ 0x80
 801b016:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b018:	035b      	lsls	r3, r3, #13
 801b01a:	000e      	movs	r6, r1
 801b01c:	b08d      	sub	sp, #52	@ 0x34
 801b01e:	4299      	cmp	r1, r3
 801b020:	da23      	bge.n	801b06a <__ieee754_log+0x56>
 801b022:	004b      	lsls	r3, r1, #1
 801b024:	085b      	lsrs	r3, r3, #1
 801b026:	4303      	orrs	r3, r0
 801b028:	d107      	bne.n	801b03a <__ieee754_log+0x26>
 801b02a:	2200      	movs	r2, #0
 801b02c:	2300      	movs	r3, #0
 801b02e:	2000      	movs	r0, #0
 801b030:	49b4      	ldr	r1, [pc, #720]	@ (801b304 <__ieee754_log+0x2f0>)
 801b032:	f7e6 fe3d 	bl	8001cb0 <__aeabi_ddiv>
 801b036:	b00d      	add	sp, #52	@ 0x34
 801b038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b03a:	2900      	cmp	r1, #0
 801b03c:	da06      	bge.n	801b04c <__ieee754_log+0x38>
 801b03e:	0002      	movs	r2, r0
 801b040:	000b      	movs	r3, r1
 801b042:	f7e7 fd41 	bl	8002ac8 <__aeabi_dsub>
 801b046:	2200      	movs	r2, #0
 801b048:	2300      	movs	r3, #0
 801b04a:	e7f2      	b.n	801b032 <__ieee754_log+0x1e>
 801b04c:	4bae      	ldr	r3, [pc, #696]	@ (801b308 <__ieee754_log+0x2f4>)
 801b04e:	2200      	movs	r2, #0
 801b050:	f7e7 fa72 	bl	8002538 <__aeabi_dmul>
 801b054:	2336      	movs	r3, #54	@ 0x36
 801b056:	000e      	movs	r6, r1
 801b058:	425b      	negs	r3, r3
 801b05a:	4aac      	ldr	r2, [pc, #688]	@ (801b30c <__ieee754_log+0x2f8>)
 801b05c:	4296      	cmp	r6, r2
 801b05e:	dd06      	ble.n	801b06e <__ieee754_log+0x5a>
 801b060:	0002      	movs	r2, r0
 801b062:	000b      	movs	r3, r1
 801b064:	f7e6 fac0 	bl	80015e8 <__aeabi_dadd>
 801b068:	e7e5      	b.n	801b036 <__ieee754_log+0x22>
 801b06a:	2300      	movs	r3, #0
 801b06c:	e7f5      	b.n	801b05a <__ieee754_log+0x46>
 801b06e:	4ca8      	ldr	r4, [pc, #672]	@ (801b310 <__ieee754_log+0x2fc>)
 801b070:	1532      	asrs	r2, r6, #20
 801b072:	1912      	adds	r2, r2, r4
 801b074:	0336      	lsls	r6, r6, #12
 801b076:	4ca7      	ldr	r4, [pc, #668]	@ (801b314 <__ieee754_log+0x300>)
 801b078:	18d2      	adds	r2, r2, r3
 801b07a:	0b33      	lsrs	r3, r6, #12
 801b07c:	9302      	str	r3, [sp, #8]
 801b07e:	191b      	adds	r3, r3, r4
 801b080:	2480      	movs	r4, #128	@ 0x80
 801b082:	0364      	lsls	r4, r4, #13
 801b084:	4023      	ands	r3, r4
 801b086:	4ca4      	ldr	r4, [pc, #656]	@ (801b318 <__ieee754_log+0x304>)
 801b088:	9d02      	ldr	r5, [sp, #8]
 801b08a:	405c      	eors	r4, r3
 801b08c:	151b      	asrs	r3, r3, #20
 801b08e:	189b      	adds	r3, r3, r2
 801b090:	4325      	orrs	r5, r4
 801b092:	2200      	movs	r2, #0
 801b094:	9300      	str	r3, [sp, #0]
 801b096:	0029      	movs	r1, r5
 801b098:	4b9f      	ldr	r3, [pc, #636]	@ (801b318 <__ieee754_log+0x304>)
 801b09a:	f7e7 fd15 	bl	8002ac8 <__aeabi_dsub>
 801b09e:	9b02      	ldr	r3, [sp, #8]
 801b0a0:	0006      	movs	r6, r0
 801b0a2:	3302      	adds	r3, #2
 801b0a4:	031b      	lsls	r3, r3, #12
 801b0a6:	000f      	movs	r7, r1
 801b0a8:	2200      	movs	r2, #0
 801b0aa:	0b1b      	lsrs	r3, r3, #12
 801b0ac:	2b02      	cmp	r3, #2
 801b0ae:	dc64      	bgt.n	801b17a <__ieee754_log+0x166>
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	f7e5 f9cb 	bl	800044c <__aeabi_dcmpeq>
 801b0b6:	2800      	cmp	r0, #0
 801b0b8:	d019      	beq.n	801b0ee <__ieee754_log+0xda>
 801b0ba:	9b00      	ldr	r3, [sp, #0]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d100      	bne.n	801b0c2 <__ieee754_log+0xae>
 801b0c0:	e11c      	b.n	801b2fc <__ieee754_log+0x2e8>
 801b0c2:	0018      	movs	r0, r3
 801b0c4:	f7e8 f8fa 	bl	80032bc <__aeabi_i2d>
 801b0c8:	4a94      	ldr	r2, [pc, #592]	@ (801b31c <__ieee754_log+0x308>)
 801b0ca:	4b95      	ldr	r3, [pc, #596]	@ (801b320 <__ieee754_log+0x30c>)
 801b0cc:	0004      	movs	r4, r0
 801b0ce:	000d      	movs	r5, r1
 801b0d0:	f7e7 fa32 	bl	8002538 <__aeabi_dmul>
 801b0d4:	4a93      	ldr	r2, [pc, #588]	@ (801b324 <__ieee754_log+0x310>)
 801b0d6:	0006      	movs	r6, r0
 801b0d8:	000f      	movs	r7, r1
 801b0da:	4b93      	ldr	r3, [pc, #588]	@ (801b328 <__ieee754_log+0x314>)
 801b0dc:	0020      	movs	r0, r4
 801b0de:	0029      	movs	r1, r5
 801b0e0:	f7e7 fa2a 	bl	8002538 <__aeabi_dmul>
 801b0e4:	0002      	movs	r2, r0
 801b0e6:	000b      	movs	r3, r1
 801b0e8:	0030      	movs	r0, r6
 801b0ea:	0039      	movs	r1, r7
 801b0ec:	e7ba      	b.n	801b064 <__ieee754_log+0x50>
 801b0ee:	4a8f      	ldr	r2, [pc, #572]	@ (801b32c <__ieee754_log+0x318>)
 801b0f0:	4b8f      	ldr	r3, [pc, #572]	@ (801b330 <__ieee754_log+0x31c>)
 801b0f2:	0030      	movs	r0, r6
 801b0f4:	0039      	movs	r1, r7
 801b0f6:	f7e7 fa1f 	bl	8002538 <__aeabi_dmul>
 801b0fa:	0002      	movs	r2, r0
 801b0fc:	000b      	movs	r3, r1
 801b0fe:	2000      	movs	r0, #0
 801b100:	498c      	ldr	r1, [pc, #560]	@ (801b334 <__ieee754_log+0x320>)
 801b102:	f7e7 fce1 	bl	8002ac8 <__aeabi_dsub>
 801b106:	0032      	movs	r2, r6
 801b108:	0004      	movs	r4, r0
 801b10a:	000d      	movs	r5, r1
 801b10c:	003b      	movs	r3, r7
 801b10e:	0030      	movs	r0, r6
 801b110:	0039      	movs	r1, r7
 801b112:	f7e7 fa11 	bl	8002538 <__aeabi_dmul>
 801b116:	000b      	movs	r3, r1
 801b118:	0002      	movs	r2, r0
 801b11a:	0029      	movs	r1, r5
 801b11c:	0020      	movs	r0, r4
 801b11e:	f7e7 fa0b 	bl	8002538 <__aeabi_dmul>
 801b122:	9b00      	ldr	r3, [sp, #0]
 801b124:	9002      	str	r0, [sp, #8]
 801b126:	9103      	str	r1, [sp, #12]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d106      	bne.n	801b13a <__ieee754_log+0x126>
 801b12c:	0002      	movs	r2, r0
 801b12e:	000b      	movs	r3, r1
 801b130:	0030      	movs	r0, r6
 801b132:	0039      	movs	r1, r7
 801b134:	f7e7 fcc8 	bl	8002ac8 <__aeabi_dsub>
 801b138:	e77d      	b.n	801b036 <__ieee754_log+0x22>
 801b13a:	9800      	ldr	r0, [sp, #0]
 801b13c:	f7e8 f8be 	bl	80032bc <__aeabi_i2d>
 801b140:	4a76      	ldr	r2, [pc, #472]	@ (801b31c <__ieee754_log+0x308>)
 801b142:	4b77      	ldr	r3, [pc, #476]	@ (801b320 <__ieee754_log+0x30c>)
 801b144:	0004      	movs	r4, r0
 801b146:	000d      	movs	r5, r1
 801b148:	f7e7 f9f6 	bl	8002538 <__aeabi_dmul>
 801b14c:	4a75      	ldr	r2, [pc, #468]	@ (801b324 <__ieee754_log+0x310>)
 801b14e:	9000      	str	r0, [sp, #0]
 801b150:	9101      	str	r1, [sp, #4]
 801b152:	4b75      	ldr	r3, [pc, #468]	@ (801b328 <__ieee754_log+0x314>)
 801b154:	0020      	movs	r0, r4
 801b156:	0029      	movs	r1, r5
 801b158:	f7e7 f9ee 	bl	8002538 <__aeabi_dmul>
 801b15c:	0002      	movs	r2, r0
 801b15e:	000b      	movs	r3, r1
 801b160:	9802      	ldr	r0, [sp, #8]
 801b162:	9903      	ldr	r1, [sp, #12]
 801b164:	f7e7 fcb0 	bl	8002ac8 <__aeabi_dsub>
 801b168:	0032      	movs	r2, r6
 801b16a:	003b      	movs	r3, r7
 801b16c:	f7e7 fcac 	bl	8002ac8 <__aeabi_dsub>
 801b170:	0002      	movs	r2, r0
 801b172:	000b      	movs	r3, r1
 801b174:	9800      	ldr	r0, [sp, #0]
 801b176:	9901      	ldr	r1, [sp, #4]
 801b178:	e7dc      	b.n	801b134 <__ieee754_log+0x120>
 801b17a:	2380      	movs	r3, #128	@ 0x80
 801b17c:	05db      	lsls	r3, r3, #23
 801b17e:	f7e6 fa33 	bl	80015e8 <__aeabi_dadd>
 801b182:	0002      	movs	r2, r0
 801b184:	000b      	movs	r3, r1
 801b186:	0030      	movs	r0, r6
 801b188:	0039      	movs	r1, r7
 801b18a:	f7e6 fd91 	bl	8001cb0 <__aeabi_ddiv>
 801b18e:	9004      	str	r0, [sp, #16]
 801b190:	9105      	str	r1, [sp, #20]
 801b192:	9800      	ldr	r0, [sp, #0]
 801b194:	f7e8 f892 	bl	80032bc <__aeabi_i2d>
 801b198:	9a04      	ldr	r2, [sp, #16]
 801b19a:	9b05      	ldr	r3, [sp, #20]
 801b19c:	9006      	str	r0, [sp, #24]
 801b19e:	9107      	str	r1, [sp, #28]
 801b1a0:	0010      	movs	r0, r2
 801b1a2:	0019      	movs	r1, r3
 801b1a4:	f7e7 f9c8 	bl	8002538 <__aeabi_dmul>
 801b1a8:	4a63      	ldr	r2, [pc, #396]	@ (801b338 <__ieee754_log+0x324>)
 801b1aa:	9b02      	ldr	r3, [sp, #8]
 801b1ac:	4694      	mov	ip, r2
 801b1ae:	4463      	add	r3, ip
 801b1b0:	0002      	movs	r2, r0
 801b1b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b1b4:	000b      	movs	r3, r1
 801b1b6:	9008      	str	r0, [sp, #32]
 801b1b8:	9109      	str	r1, [sp, #36]	@ 0x24
 801b1ba:	f7e7 f9bd 	bl	8002538 <__aeabi_dmul>
 801b1be:	0004      	movs	r4, r0
 801b1c0:	000d      	movs	r5, r1
 801b1c2:	4a5e      	ldr	r2, [pc, #376]	@ (801b33c <__ieee754_log+0x328>)
 801b1c4:	4b5e      	ldr	r3, [pc, #376]	@ (801b340 <__ieee754_log+0x32c>)
 801b1c6:	f7e7 f9b7 	bl	8002538 <__aeabi_dmul>
 801b1ca:	4a5e      	ldr	r2, [pc, #376]	@ (801b344 <__ieee754_log+0x330>)
 801b1cc:	4b5e      	ldr	r3, [pc, #376]	@ (801b348 <__ieee754_log+0x334>)
 801b1ce:	f7e6 fa0b 	bl	80015e8 <__aeabi_dadd>
 801b1d2:	0022      	movs	r2, r4
 801b1d4:	002b      	movs	r3, r5
 801b1d6:	f7e7 f9af 	bl	8002538 <__aeabi_dmul>
 801b1da:	4a5c      	ldr	r2, [pc, #368]	@ (801b34c <__ieee754_log+0x338>)
 801b1dc:	4b5c      	ldr	r3, [pc, #368]	@ (801b350 <__ieee754_log+0x33c>)
 801b1de:	f7e6 fa03 	bl	80015e8 <__aeabi_dadd>
 801b1e2:	0022      	movs	r2, r4
 801b1e4:	002b      	movs	r3, r5
 801b1e6:	f7e7 f9a7 	bl	8002538 <__aeabi_dmul>
 801b1ea:	4a5a      	ldr	r2, [pc, #360]	@ (801b354 <__ieee754_log+0x340>)
 801b1ec:	4b5a      	ldr	r3, [pc, #360]	@ (801b358 <__ieee754_log+0x344>)
 801b1ee:	f7e6 f9fb 	bl	80015e8 <__aeabi_dadd>
 801b1f2:	9a08      	ldr	r2, [sp, #32]
 801b1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1f6:	f7e7 f99f 	bl	8002538 <__aeabi_dmul>
 801b1fa:	4a58      	ldr	r2, [pc, #352]	@ (801b35c <__ieee754_log+0x348>)
 801b1fc:	9008      	str	r0, [sp, #32]
 801b1fe:	9109      	str	r1, [sp, #36]	@ 0x24
 801b200:	4b57      	ldr	r3, [pc, #348]	@ (801b360 <__ieee754_log+0x34c>)
 801b202:	0020      	movs	r0, r4
 801b204:	0029      	movs	r1, r5
 801b206:	f7e7 f997 	bl	8002538 <__aeabi_dmul>
 801b20a:	4a56      	ldr	r2, [pc, #344]	@ (801b364 <__ieee754_log+0x350>)
 801b20c:	4b56      	ldr	r3, [pc, #344]	@ (801b368 <__ieee754_log+0x354>)
 801b20e:	f7e6 f9eb 	bl	80015e8 <__aeabi_dadd>
 801b212:	0022      	movs	r2, r4
 801b214:	002b      	movs	r3, r5
 801b216:	f7e7 f98f 	bl	8002538 <__aeabi_dmul>
 801b21a:	4a54      	ldr	r2, [pc, #336]	@ (801b36c <__ieee754_log+0x358>)
 801b21c:	4b54      	ldr	r3, [pc, #336]	@ (801b370 <__ieee754_log+0x35c>)
 801b21e:	f7e6 f9e3 	bl	80015e8 <__aeabi_dadd>
 801b222:	0022      	movs	r2, r4
 801b224:	002b      	movs	r3, r5
 801b226:	f7e7 f987 	bl	8002538 <__aeabi_dmul>
 801b22a:	0002      	movs	r2, r0
 801b22c:	000b      	movs	r3, r1
 801b22e:	9808      	ldr	r0, [sp, #32]
 801b230:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b232:	f7e6 f9d9 	bl	80015e8 <__aeabi_dadd>
 801b236:	9a02      	ldr	r2, [sp, #8]
 801b238:	4b4e      	ldr	r3, [pc, #312]	@ (801b374 <__ieee754_log+0x360>)
 801b23a:	0004      	movs	r4, r0
 801b23c:	1a9b      	subs	r3, r3, r2
 801b23e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b240:	000d      	movs	r5, r1
 801b242:	4313      	orrs	r3, r2
 801b244:	2b00      	cmp	r3, #0
 801b246:	dd34      	ble.n	801b2b2 <__ieee754_log+0x29e>
 801b248:	2200      	movs	r2, #0
 801b24a:	4b3a      	ldr	r3, [pc, #232]	@ (801b334 <__ieee754_log+0x320>)
 801b24c:	0030      	movs	r0, r6
 801b24e:	0039      	movs	r1, r7
 801b250:	f7e7 f972 	bl	8002538 <__aeabi_dmul>
 801b254:	0032      	movs	r2, r6
 801b256:	003b      	movs	r3, r7
 801b258:	f7e7 f96e 	bl	8002538 <__aeabi_dmul>
 801b25c:	0002      	movs	r2, r0
 801b25e:	000b      	movs	r3, r1
 801b260:	9002      	str	r0, [sp, #8]
 801b262:	9103      	str	r1, [sp, #12]
 801b264:	0020      	movs	r0, r4
 801b266:	0029      	movs	r1, r5
 801b268:	f7e6 f9be 	bl	80015e8 <__aeabi_dadd>
 801b26c:	9a04      	ldr	r2, [sp, #16]
 801b26e:	9b05      	ldr	r3, [sp, #20]
 801b270:	f7e7 f962 	bl	8002538 <__aeabi_dmul>
 801b274:	9b00      	ldr	r3, [sp, #0]
 801b276:	0004      	movs	r4, r0
 801b278:	000d      	movs	r5, r1
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d106      	bne.n	801b28c <__ieee754_log+0x278>
 801b27e:	0002      	movs	r2, r0
 801b280:	000b      	movs	r3, r1
 801b282:	9802      	ldr	r0, [sp, #8]
 801b284:	9903      	ldr	r1, [sp, #12]
 801b286:	f7e7 fc1f 	bl	8002ac8 <__aeabi_dsub>
 801b28a:	e74f      	b.n	801b12c <__ieee754_log+0x118>
 801b28c:	4a23      	ldr	r2, [pc, #140]	@ (801b31c <__ieee754_log+0x308>)
 801b28e:	4b24      	ldr	r3, [pc, #144]	@ (801b320 <__ieee754_log+0x30c>)
 801b290:	9806      	ldr	r0, [sp, #24]
 801b292:	9907      	ldr	r1, [sp, #28]
 801b294:	f7e7 f950 	bl	8002538 <__aeabi_dmul>
 801b298:	4a22      	ldr	r2, [pc, #136]	@ (801b324 <__ieee754_log+0x310>)
 801b29a:	9000      	str	r0, [sp, #0]
 801b29c:	9101      	str	r1, [sp, #4]
 801b29e:	9806      	ldr	r0, [sp, #24]
 801b2a0:	9907      	ldr	r1, [sp, #28]
 801b2a2:	4b21      	ldr	r3, [pc, #132]	@ (801b328 <__ieee754_log+0x314>)
 801b2a4:	f7e7 f948 	bl	8002538 <__aeabi_dmul>
 801b2a8:	0022      	movs	r2, r4
 801b2aa:	002b      	movs	r3, r5
 801b2ac:	f7e6 f99c 	bl	80015e8 <__aeabi_dadd>
 801b2b0:	e754      	b.n	801b15c <__ieee754_log+0x148>
 801b2b2:	0002      	movs	r2, r0
 801b2b4:	000b      	movs	r3, r1
 801b2b6:	0030      	movs	r0, r6
 801b2b8:	0039      	movs	r1, r7
 801b2ba:	f7e7 fc05 	bl	8002ac8 <__aeabi_dsub>
 801b2be:	9a04      	ldr	r2, [sp, #16]
 801b2c0:	9b05      	ldr	r3, [sp, #20]
 801b2c2:	f7e7 f939 	bl	8002538 <__aeabi_dmul>
 801b2c6:	9b00      	ldr	r3, [sp, #0]
 801b2c8:	0004      	movs	r4, r0
 801b2ca:	000d      	movs	r5, r1
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d102      	bne.n	801b2d6 <__ieee754_log+0x2c2>
 801b2d0:	0002      	movs	r2, r0
 801b2d2:	000b      	movs	r3, r1
 801b2d4:	e72c      	b.n	801b130 <__ieee754_log+0x11c>
 801b2d6:	4a11      	ldr	r2, [pc, #68]	@ (801b31c <__ieee754_log+0x308>)
 801b2d8:	4b11      	ldr	r3, [pc, #68]	@ (801b320 <__ieee754_log+0x30c>)
 801b2da:	9806      	ldr	r0, [sp, #24]
 801b2dc:	9907      	ldr	r1, [sp, #28]
 801b2de:	f7e7 f92b 	bl	8002538 <__aeabi_dmul>
 801b2e2:	4a10      	ldr	r2, [pc, #64]	@ (801b324 <__ieee754_log+0x310>)
 801b2e4:	9000      	str	r0, [sp, #0]
 801b2e6:	9101      	str	r1, [sp, #4]
 801b2e8:	9806      	ldr	r0, [sp, #24]
 801b2ea:	9907      	ldr	r1, [sp, #28]
 801b2ec:	4b0e      	ldr	r3, [pc, #56]	@ (801b328 <__ieee754_log+0x314>)
 801b2ee:	f7e7 f923 	bl	8002538 <__aeabi_dmul>
 801b2f2:	0002      	movs	r2, r0
 801b2f4:	000b      	movs	r3, r1
 801b2f6:	0020      	movs	r0, r4
 801b2f8:	0029      	movs	r1, r5
 801b2fa:	e733      	b.n	801b164 <__ieee754_log+0x150>
 801b2fc:	2000      	movs	r0, #0
 801b2fe:	2100      	movs	r1, #0
 801b300:	e699      	b.n	801b036 <__ieee754_log+0x22>
 801b302:	46c0      	nop			@ (mov r8, r8)
 801b304:	c3500000 	.word	0xc3500000
 801b308:	43500000 	.word	0x43500000
 801b30c:	7fefffff 	.word	0x7fefffff
 801b310:	fffffc01 	.word	0xfffffc01
 801b314:	00095f64 	.word	0x00095f64
 801b318:	3ff00000 	.word	0x3ff00000
 801b31c:	fee00000 	.word	0xfee00000
 801b320:	3fe62e42 	.word	0x3fe62e42
 801b324:	35793c76 	.word	0x35793c76
 801b328:	3dea39ef 	.word	0x3dea39ef
 801b32c:	55555555 	.word	0x55555555
 801b330:	3fd55555 	.word	0x3fd55555
 801b334:	3fe00000 	.word	0x3fe00000
 801b338:	fff9eb86 	.word	0xfff9eb86
 801b33c:	df3e5244 	.word	0xdf3e5244
 801b340:	3fc2f112 	.word	0x3fc2f112
 801b344:	96cb03de 	.word	0x96cb03de
 801b348:	3fc74664 	.word	0x3fc74664
 801b34c:	94229359 	.word	0x94229359
 801b350:	3fd24924 	.word	0x3fd24924
 801b354:	55555593 	.word	0x55555593
 801b358:	3fe55555 	.word	0x3fe55555
 801b35c:	d078c69f 	.word	0xd078c69f
 801b360:	3fc39a09 	.word	0x3fc39a09
 801b364:	1d8e78af 	.word	0x1d8e78af
 801b368:	3fcc71c5 	.word	0x3fcc71c5
 801b36c:	9997fa04 	.word	0x9997fa04
 801b370:	3fd99999 	.word	0x3fd99999
 801b374:	0006b851 	.word	0x0006b851

0801b378 <_init>:
 801b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b37a:	46c0      	nop			@ (mov r8, r8)
 801b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b37e:	bc08      	pop	{r3}
 801b380:	469e      	mov	lr, r3
 801b382:	4770      	bx	lr

0801b384 <_fini>:
 801b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b386:	46c0      	nop			@ (mov r8, r8)
 801b388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b38a:	bc08      	pop	{r3}
 801b38c:	469e      	mov	lr, r3
 801b38e:	4770      	bx	lr
