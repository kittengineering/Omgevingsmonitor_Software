
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019798  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001098  08019858  08019858  0001a858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8f0  0801a8f0  0001c4a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a8f0  0801a8f0  0001b8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a8f8  0801a8f8  0001c4a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a8f8  0801a8f8  0001b8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a8fc  0801a8fc  0001b8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a8  20000000  0801a900  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f38  200004a8  0801ada8  0001c4a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200043e0  0801ada8  0001d3e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001c4a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b33  00000000  00000000  0001c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ba6  00000000  00000000  00043003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  00049bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001792  00000000  00000000  0004bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dea8  00000000  00000000  0004d242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003029c  00000000  00000000  0006b0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095b7e  00000000  00000000  0009b386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130f04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008388  00000000  00000000  00130f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001392d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004a8 	.word	0x200004a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08019840 	.word	0x08019840

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004ac 	.word	0x200004ac
 8000104:	08019840 	.word	0x08019840

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801a2b0 	.word	0x0801a2b0
 8000d08:	0801a2f0 	.word	0x0801a2f0
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801a32c 	.word	0x0801a32c
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <batteryInit>:
static ADC_HandleTypeDef* ADC_Handler = NULL;
float Charge = 0;
float Solar = 0;
uint16_t Vref = 3;

void batteryInit(ADC_HandleTypeDef* ADC_HANDLER){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  ADC_Handler = ADC_HANDLER;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <batteryInit+0x18>)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	200004c4 	.word	0x200004c4

08003568 <checkCharges>:

void checkCharges(){
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(ADC_Handler);
 800356c:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <checkCharges+0x10c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0018      	movs	r0, r3
 8003572:	f006 f871 	bl	8009658 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 8003576:	4b3f      	ldr	r3, [pc, #252]	@ (8003674 <checkCharges+0x10c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	0018      	movs	r0, r3
 800357e:	f006 f8bf 	bl	8009700 <HAL_ADC_PollForConversion>
  Charge = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 8003582:	4b3c      	ldr	r3, [pc, #240]	@ (8003674 <checkCharges+0x10c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	f006 f956 	bl	8009838 <HAL_ADC_GetValue>
 800358c:	0003      	movs	r3, r0
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd ffe8 	bl	8001564 <__aeabi_ui2f>
 8003594:	1c03      	adds	r3, r0, #0
 8003596:	1c18      	adds	r0, r3, #0
 8003598:	f7ff fee2 	bl	8003360 <__aeabi_f2d>
 800359c:	2200      	movs	r2, #0
 800359e:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <checkCharges+0x110>)
 80035a0:	f7fe fb86 	bl	8001cb0 <__aeabi_ddiv>
 80035a4:	0002      	movs	r2, r0
 80035a6:	000b      	movs	r3, r1
 80035a8:	0014      	movs	r4, r2
 80035aa:	001d      	movs	r5, r3
 80035ac:	4b33      	ldr	r3, [pc, #204]	@ (800367c <checkCharges+0x114>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff fe83 	bl	80032bc <__aeabi_i2d>
 80035b6:	0002      	movs	r2, r0
 80035b8:	000b      	movs	r3, r1
 80035ba:	0020      	movs	r0, r4
 80035bc:	0029      	movs	r1, r5
 80035be:	f7fe ffbb 	bl	8002538 <__aeabi_dmul>
 80035c2:	0002      	movs	r2, r0
 80035c4:	000b      	movs	r3, r1
 80035c6:	0010      	movs	r0, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	0002      	movs	r2, r0
 80035cc:	000b      	movs	r3, r1
 80035ce:	f7fe f80b 	bl	80015e8 <__aeabi_dadd>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0010      	movs	r0, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	f7ff ff09 	bl	80033f0 <__aeabi_d2f>
 80035de:	1c02      	adds	r2, r0, #0
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <checkCharges+0x118>)
 80035e2:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(ADC_Handler);
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <checkCharges+0x10c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f006 f835 	bl	8009658 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 80035ee:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <checkCharges+0x10c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	0018      	movs	r0, r3
 80035f6:	f006 f883 	bl	8009700 <HAL_ADC_PollForConversion>
  Solar = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <checkCharges+0x10c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f006 f91a 	bl	8009838 <HAL_ADC_GetValue>
 8003604:	0003      	movs	r3, r0
 8003606:	0018      	movs	r0, r3
 8003608:	f7fd ffac 	bl	8001564 <__aeabi_ui2f>
 800360c:	1c03      	adds	r3, r0, #0
 800360e:	1c18      	adds	r0, r3, #0
 8003610:	f7ff fea6 	bl	8003360 <__aeabi_f2d>
 8003614:	2200      	movs	r2, #0
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <checkCharges+0x110>)
 8003618:	f7fe fb4a 	bl	8001cb0 <__aeabi_ddiv>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0014      	movs	r4, r2
 8003622:	001d      	movs	r5, r3
 8003624:	4b15      	ldr	r3, [pc, #84]	@ (800367c <checkCharges+0x114>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fe47 	bl	80032bc <__aeabi_i2d>
 800362e:	0002      	movs	r2, r0
 8003630:	000b      	movs	r3, r1
 8003632:	0020      	movs	r0, r4
 8003634:	0029      	movs	r1, r5
 8003636:	f7fe ff7f 	bl	8002538 <__aeabi_dmul>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	0010      	movs	r0, r2
 8003640:	0019      	movs	r1, r3
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	f7fd ffcf 	bl	80015e8 <__aeabi_dadd>
 800364a:	0002      	movs	r2, r0
 800364c:	000b      	movs	r3, r1
 800364e:	0010      	movs	r0, r2
 8003650:	0019      	movs	r1, r3
 8003652:	f7ff fecd 	bl	80033f0 <__aeabi_d2f>
 8003656:	1c02      	adds	r2, r0, #0
 8003658:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <checkCharges+0x11c>)
 800365a:	601a      	str	r2, [r3, #0]
  setCharges(Charge, Solar);
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <checkCharges+0x118>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <checkCharges+0x11c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c19      	adds	r1, r3, #0
 8003666:	1c10      	adds	r0, r2, #0
 8003668:	f000 f80e 	bl	8003688 <setCharges>
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	bdb0      	pop	{r4, r5, r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	200004c4 	.word	0x200004c4
 8003678:	40affe00 	.word	0x40affe00
 800367c:	20000000 	.word	0x20000000
 8003680:	200004c8 	.word	0x200004c8
 8003684:	200004cc 	.word	0x200004cc

08003688 <setCharges>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setCharges(float battery, float solar){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  batteryCharge = battery;
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <setCharges+0x20>)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
  solarCharge = solar;
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <setCharges+0x24>)
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	200005f0 	.word	0x200005f0
 80036ac:	200005f4 	.word	0x200005f4

080036b0 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <setMeasurement+0x2c>)
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <setMeasurement+0x30>)
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <setMeasurement+0x34>)
 80036cc:	1dba      	adds	r2, r7, #6
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	801a      	strh	r2, [r3, #0]
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	200005e8 	.word	0x200005e8
 80036e0:	200005ec 	.word	0x200005ec
 80036e4:	200005f8 	.word	0x200005f8

080036e8 <setMic>:
void setMic(float dB){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  dBC = dB;
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <setMic+0x18>)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b002      	add	sp, #8
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	200005fc 	.word	0x200005fc

08003704 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <ESP_Init+0x20>)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003712:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <ESP_Init+0x24>)
 8003714:	2202      	movs	r2, #2
 8003716:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003718:	f000 f832 	bl	8003780 <ESP_GetUID>
}
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200004d0 	.word	0x200004d0
 8003728:	20000102 	.word	0x20000102

0800372c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800372c:	b5b0      	push	{r4, r5, r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	000a      	movs	r2, r1
 8003736:	1cbb      	adds	r3, r7, #2
 8003738:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800373a:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <ESP_Send+0x48>)
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	250f      	movs	r5, #15
 8003740:	197c      	adds	r4, r7, r5
 8003742:	1cbb      	adds	r3, r7, #2
 8003744:	881a      	ldrh	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0019      	movs	r1, r3
 800374a:	f00c fd3b 	bl	80101c4 <HAL_UART_Transmit_DMA>
 800374e:	0003      	movs	r3, r0
 8003750:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003752:	197b      	adds	r3, r7, r5
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 800375a:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <ESP_Send+0x4c>)
 800375c:	4b07      	ldr	r3, [pc, #28]	@ (800377c <ESP_Send+0x50>)
 800375e:	0019      	movs	r1, r3
 8003760:	2003      	movs	r0, #3
 8003762:	f005 f9c1 	bl	8008ae8 <CreateLine>
    return false;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <ESP_Send+0x40>
  }
  return true;
 800376a:	2301      	movs	r3, #1
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bdb0      	pop	{r4, r5, r7, pc}
 8003774:	200004d0 	.word	0x200004d0
 8003778:	08019858 	.word	0x08019858
 800377c:	08019878 	.word	0x08019878

08003780 <ESP_GetUID>:

void ESP_GetUID(){
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003784:	f005 fdd6 	bl	8009334 <HAL_GetUIDw0>
 8003788:	0002      	movs	r2, r0
 800378a:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <ESP_GetUID+0x34>)
 800378c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800378e:	f005 fddb 	bl	8009348 <HAL_GetUIDw1>
 8003792:	0002      	movs	r2, r0
 8003794:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <ESP_GetUID+0x34>)
 8003796:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003798:	f005 fde0 	bl	800935c <HAL_GetUIDw2>
 800379c:	0002      	movs	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <ESP_GetUID+0x34>)
 80037a0:	609a      	str	r2, [r3, #8]
  Debug("ID read");
 80037a2:	4a05      	ldr	r2, [pc, #20]	@ (80037b8 <ESP_GetUID+0x38>)
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <ESP_GetUID+0x3c>)
 80037a6:	0019      	movs	r1, r3
 80037a8:	2003      	movs	r0, #3
 80037aa:	f005 f99d 	bl	8008ae8 <CreateLine>
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200005dc 	.word	0x200005dc
 80037b8:	0801987c 	.word	0x0801987c
 80037bc:	08019878 	.word	0x08019878

080037c0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	000a      	movs	r2, r1
 80037ca:	1cfb      	adds	r3, r7, #3
 80037cc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80037ce:	4b12      	ldr	r3, [pc, #72]	@ (8003818 <ESP_Receive+0x58>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80037d4:	4b11      	ldr	r3, [pc, #68]	@ (800381c <ESP_Receive+0x5c>)
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	1cfb      	adds	r3, r7, #3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	b29a      	uxth	r2, r3
 80037de:	250f      	movs	r5, #15
 80037e0:	197c      	adds	r4, r7, r5
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0019      	movs	r1, r3
 80037e6:	f00c fd7d 	bl	80102e4 <HAL_UART_Receive_DMA>
 80037ea:	0003      	movs	r3, r0
 80037ec:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037ee:	197b      	adds	r3, r7, r5
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 80037f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <ESP_Receive+0x60>)
 80037f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003824 <ESP_Receive+0x64>)
 80037fa:	0019      	movs	r1, r3
 80037fc:	2003      	movs	r0, #3
 80037fe:	f005 f973 	bl	8008ae8 <CreateLine>
    RxComplete = true;
 8003802:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <ESP_Receive+0x58>)
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
    return false;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <ESP_Receive+0x4e>
  }
  return true;
 800380c:	2301      	movs	r3, #1
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	200004d4 	.word	0x200004d4
 800381c:	200004d0 	.word	0x200004d0
 8003820:	08019884 	.word	0x08019884
 8003824:	08019878 	.word	0x08019878

08003828 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003830:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <HAL_UART_RxCpltCallback+0x2c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d108      	bne.n	800384c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800383a:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <HAL_UART_RxCpltCallback+0x30>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003840:	4a06      	ldr	r2, [pc, #24]	@ (800385c <HAL_UART_RxCpltCallback+0x34>)
 8003842:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <HAL_UART_RxCpltCallback+0x38>)
 8003844:	0019      	movs	r1, r3
 8003846:	2003      	movs	r0, #3
 8003848:	f005 f94e 	bl	8008ae8 <CreateLine>
  }
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200004d0 	.word	0x200004d0
 8003858:	200004d4 	.word	0x200004d4
 800385c:	080198a4 	.word	0x080198a4
 8003860:	08019878 	.word	0x08019878

08003864 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_UART_ErrorCallback+0x20>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	d102      	bne.n	800387c <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 8003876:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <HAL_UART_ErrorCallback+0x24>)
 8003878:	2207      	movs	r2, #7
 800387a:	701a      	strb	r2, [r3, #0]
  }
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200004d0 	.word	0x200004d0
 8003888:	20000102 	.word	0x20000102

0800388c <CreateMessage>:
uint16_t CreateMessage(){
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b085      	sub	sp, #20
 8003890:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 8003892:	1dbb      	adds	r3, r7, #6
 8003894:	2200      	movs	r2, #0
 8003896:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"graden\"", sensorID1, Temperature);
 8003898:	4b42      	ldr	r3, [pc, #264]	@ (80039a4 <CreateMessage+0x118>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	1c18      	adds	r0, r3, #0
 800389e:	f7ff fd5f 	bl	8003360 <__aeabi_f2d>
 80038a2:	0002      	movs	r2, r0
 80038a4:	000b      	movs	r3, r1
 80038a6:	4c40      	ldr	r4, [pc, #256]	@ (80039a8 <CreateMessage+0x11c>)
 80038a8:	4940      	ldr	r1, [pc, #256]	@ (80039ac <CreateMessage+0x120>)
 80038aa:	4841      	ldr	r0, [pc, #260]	@ (80039b0 <CreateMessage+0x124>)
 80038ac:	9200      	str	r2, [sp, #0]
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	0022      	movs	r2, r4
 80038b2:	f013 f835 	bl	8016920 <siprintf>
  messageLength += strlen(messagePart1);
 80038b6:	4b3e      	ldr	r3, [pc, #248]	@ (80039b0 <CreateMessage+0x124>)
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fc fc25 	bl	8000108 <strlen>
 80038be:	0003      	movs	r3, r0
 80038c0:	b299      	uxth	r1, r3
 80038c2:	1dbb      	adds	r3, r7, #6
 80038c4:	1dba      	adds	r2, r7, #6
 80038c6:	8812      	ldrh	r2, [r2, #0]
 80038c8:	188a      	adds	r2, r1, r2
 80038ca:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"%%\"", sensorID2, Humidity);
 80038cc:	4b39      	ldr	r3, [pc, #228]	@ (80039b4 <CreateMessage+0x128>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	1c18      	adds	r0, r3, #0
 80038d2:	f7ff fd45 	bl	8003360 <__aeabi_f2d>
 80038d6:	0002      	movs	r2, r0
 80038d8:	000b      	movs	r3, r1
 80038da:	4c37      	ldr	r4, [pc, #220]	@ (80039b8 <CreateMessage+0x12c>)
 80038dc:	4937      	ldr	r1, [pc, #220]	@ (80039bc <CreateMessage+0x130>)
 80038de:	4838      	ldr	r0, [pc, #224]	@ (80039c0 <CreateMessage+0x134>)
 80038e0:	9200      	str	r2, [sp, #0]
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	0022      	movs	r2, r4
 80038e6:	f013 f81b 	bl	8016920 <siprintf>
  messageLength += strlen(messagePart2);
 80038ea:	4b35      	ldr	r3, [pc, #212]	@ (80039c0 <CreateMessage+0x134>)
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7fc fc0b 	bl	8000108 <strlen>
 80038f2:	0003      	movs	r3, r0
 80038f4:	b299      	uxth	r1, r3
 80038f6:	1dbb      	adds	r3, r7, #6
 80038f8:	1dba      	adds	r2, r7, #6
 80038fa:	8812      	ldrh	r2, [r2, #0]
 80038fc:	188a      	adds	r2, r1, r2
 80038fe:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"dBC\"", sensorID3, dBC);
 8003900:	4b30      	ldr	r3, [pc, #192]	@ (80039c4 <CreateMessage+0x138>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	1c18      	adds	r0, r3, #0
 8003906:	f7ff fd2b 	bl	8003360 <__aeabi_f2d>
 800390a:	0002      	movs	r2, r0
 800390c:	000b      	movs	r3, r1
 800390e:	4c2e      	ldr	r4, [pc, #184]	@ (80039c8 <CreateMessage+0x13c>)
 8003910:	492e      	ldr	r1, [pc, #184]	@ (80039cc <CreateMessage+0x140>)
 8003912:	482f      	ldr	r0, [pc, #188]	@ (80039d0 <CreateMessage+0x144>)
 8003914:	9200      	str	r2, [sp, #0]
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	0022      	movs	r2, r4
 800391a:	f013 f801 	bl	8016920 <siprintf>
  messageLength += strlen(messagePart3);
 800391e:	4b2c      	ldr	r3, [pc, #176]	@ (80039d0 <CreateMessage+0x144>)
 8003920:	0018      	movs	r0, r3
 8003922:	f7fc fbf1 	bl	8000108 <strlen>
 8003926:	0003      	movs	r3, r0
 8003928:	b299      	uxth	r1, r3
 800392a:	1dbb      	adds	r3, r7, #6
 800392c:	1dba      	adds	r2, r7, #6
 800392e:	8812      	ldrh	r2, [r2, #0]
 8003930:	188a      	adds	r2, r1, r2
 8003932:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d, \"unit\": \"VOC index\"", sensorID4, VOCIndex);
 8003934:	4b27      	ldr	r3, [pc, #156]	@ (80039d4 <CreateMessage+0x148>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	4a27      	ldr	r2, [pc, #156]	@ (80039d8 <CreateMessage+0x14c>)
 800393a:	4928      	ldr	r1, [pc, #160]	@ (80039dc <CreateMessage+0x150>)
 800393c:	4828      	ldr	r0, [pc, #160]	@ (80039e0 <CreateMessage+0x154>)
 800393e:	f012 ffef 	bl	8016920 <siprintf>
  messageLength += strlen(messagePart4);
 8003942:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <CreateMessage+0x154>)
 8003944:	0018      	movs	r0, r3
 8003946:	f7fc fbdf 	bl	8000108 <strlen>
 800394a:	0003      	movs	r3, r0
 800394c:	b299      	uxth	r1, r3
 800394e:	1dbb      	adds	r3, r7, #6
 8003950:	1dba      	adds	r2, r7, #6
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	188a      	adds	r2, r1, r2
 8003956:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"Volt\"", sensorID5, batteryCharge);
 8003958:	4b22      	ldr	r3, [pc, #136]	@ (80039e4 <CreateMessage+0x158>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1c18      	adds	r0, r3, #0
 800395e:	f7ff fcff 	bl	8003360 <__aeabi_f2d>
 8003962:	0002      	movs	r2, r0
 8003964:	000b      	movs	r3, r1
 8003966:	4c20      	ldr	r4, [pc, #128]	@ (80039e8 <CreateMessage+0x15c>)
 8003968:	4920      	ldr	r1, [pc, #128]	@ (80039ec <CreateMessage+0x160>)
 800396a:	4821      	ldr	r0, [pc, #132]	@ (80039f0 <CreateMessage+0x164>)
 800396c:	9200      	str	r2, [sp, #0]
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	0022      	movs	r2, r4
 8003972:	f012 ffd5 	bl	8016920 <siprintf>
  messageLength += strlen(messagePart5);
 8003976:	4b1e      	ldr	r3, [pc, #120]	@ (80039f0 <CreateMessage+0x164>)
 8003978:	0018      	movs	r0, r3
 800397a:	f7fc fbc5 	bl	8000108 <strlen>
 800397e:	0003      	movs	r3, r0
 8003980:	b299      	uxth	r1, r3
 8003982:	1dbb      	adds	r3, r7, #6
 8003984:	1dba      	adds	r2, r7, #6
 8003986:	8812      	ldrh	r2, [r2, #0]
 8003988:	188a      	adds	r2, r1, r2
 800398a:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 800398c:	1dbb      	adds	r3, r7, #6
 800398e:	1dba      	adds	r2, r7, #6
 8003990:	8812      	ldrh	r2, [r2, #0]
 8003992:	3214      	adds	r2, #20
 8003994:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003996:	1dbb      	adds	r3, r7, #6
 8003998:	881b      	ldrh	r3, [r3, #0]
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b003      	add	sp, #12
 80039a0:	bd90      	pop	{r4, r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	200005e8 	.word	0x200005e8
 80039a8:	20000064 	.word	0x20000064
 80039ac:	080198b0 	.word	0x080198b0
 80039b0:	20000600 	.word	0x20000600
 80039b4:	200005ec 	.word	0x200005ec
 80039b8:	20000080 	.word	0x20000080
 80039bc:	08019908 	.word	0x08019908
 80039c0:	20000680 	.word	0x20000680
 80039c4:	200005fc 	.word	0x200005fc
 80039c8:	2000009c 	.word	0x2000009c
 80039cc:	0801995c 	.word	0x0801995c
 80039d0:	20000700 	.word	0x20000700
 80039d4:	200005f8 	.word	0x200005f8
 80039d8:	200000b8 	.word	0x200000b8
 80039dc:	080199b4 	.word	0x080199b4
 80039e0:	20000780 	.word	0x20000780
 80039e4:	200005f0 	.word	0x200005f0
 80039e8:	200000d4 	.word	0x200000d4
 80039ec:	08019a0c 	.word	0x08019a0c
 80039f0:	20000800 	.word	0x20000800

080039f4 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	009a      	lsls	r2, r3, #2
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <SetCommandBuffer+0x24>)
 8003a04:	0018      	movs	r0, r3
 8003a06:	f013 f837 	bl	8016a78 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003a0a:	4b04      	ldr	r3, [pc, #16]	@ (8003a1c <SetCommandBuffer+0x28>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000894 	.word	0x20000894
 8003a1c:	20000a94 	.word	0x20000a94

08003a20 <StartProg>:
void StartProg(){
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003a24:	2064      	movs	r0, #100	@ 0x64
 8003a26:	f005 fc61 	bl	80092ec <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003a2a:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <StartProg+0x60>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2101      	movs	r1, #1
 8003a30:	0018      	movs	r0, r3
 8003a32:	f006 fe05 	bl	800a640 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003a36:	2064      	movs	r0, #100	@ 0x64
 8003a38:	f005 fc58 	bl	80092ec <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003a3c:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <StartProg+0x60>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2102      	movs	r1, #2
 8003a42:	0018      	movs	r0, r3
 8003a44:	f006 fdfc 	bl	800a640 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a48:	23fa      	movs	r3, #250	@ 0xfa
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f005 fc4d 	bl	80092ec <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <StartProg+0x60>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	2101      	movs	r1, #1
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f006 fdf1 	bl	800a640 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a5e:	23fa      	movs	r3, #250	@ 0xfa
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	0018      	movs	r0, r3
 8003a64:	f005 fc42 	bl	80092ec <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <StartProg+0x60>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f006 fde6 	bl	800a640 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a74:	2028      	movs	r0, #40	@ 0x28
 8003a76:	f005 fc39 	bl	80092ec <HAL_Delay>
}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	50001c00 	.word	0x50001c00

08003a84 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a86:	46c6      	mov	lr, r8
 8003a88:	b500      	push	{lr}
 8003a8a:	b09a      	sub	sp, #104	@ 0x68
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	61f8      	str	r0, [r7, #28]
 8003a90:	0008      	movs	r0, r1
 8003a92:	0011      	movs	r1, r2
 8003a94:	261a      	movs	r6, #26
 8003a96:	19bb      	adds	r3, r7, r6
 8003a98:	1c02      	adds	r2, r0, #0
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	2319      	movs	r3, #25
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	1c0a      	adds	r2, r1, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	466b      	mov	r3, sp
 8003aa6:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003aa8:	19bb      	adds	r3, r7, r6
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	1e5a      	subs	r2, r3, #1
 8003ab0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	60ba      	str	r2, [r7, #8]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60fa      	str	r2, [r7, #12]
 8003aba:	68b8      	ldr	r0, [r7, #8]
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	0002      	movs	r2, r0
 8003ac0:	0f52      	lsrs	r2, r2, #29
 8003ac2:	000e      	movs	r6, r1
 8003ac4:	00f6      	lsls	r6, r6, #3
 8003ac6:	617e      	str	r6, [r7, #20]
 8003ac8:	697e      	ldr	r6, [r7, #20]
 8003aca:	4316      	orrs	r6, r2
 8003acc:	617e      	str	r6, [r7, #20]
 8003ace:	0002      	movs	r2, r0
 8003ad0:	00d2      	lsls	r2, r2, #3
 8003ad2:	613a      	str	r2, [r7, #16]
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	603a      	str	r2, [r7, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	6838      	ldr	r0, [r7, #0]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	0f52      	lsrs	r2, r2, #29
 8003ae4:	000e      	movs	r6, r1
 8003ae6:	00f5      	lsls	r5, r6, #3
 8003ae8:	4315      	orrs	r5, r2
 8003aea:	0002      	movs	r2, r0
 8003aec:	00d4      	lsls	r4, r2, #3
 8003aee:	3307      	adds	r3, #7
 8003af0:	08db      	lsrs	r3, r3, #3
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	466a      	mov	r2, sp
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	469d      	mov	sp, r3
 8003afa:	466b      	mov	r3, sp
 8003afc:	3300      	adds	r3, #0
 8003afe:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003b00:	234f      	movs	r3, #79	@ 0x4f
 8003b02:	2118      	movs	r1, #24
 8003b04:	185b      	adds	r3, r3, r1
 8003b06:	19db      	adds	r3, r3, r7
 8003b08:	2203      	movs	r2, #3
 8003b0a:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003b0c:	234c      	movs	r3, #76	@ 0x4c
 8003b0e:	185b      	adds	r3, r3, r1
 8003b10:	19db      	adds	r3, r3, r7
 8003b12:	2200      	movs	r2, #0
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	e013      	b.n	8003b40 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003b18:	204c      	movs	r0, #76	@ 0x4c
 8003b1a:	2418      	movs	r4, #24
 8003b1c:	1903      	adds	r3, r0, r4
 8003b1e:	19db      	adds	r3, r3, r7
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	18d2      	adds	r2, r2, r3
 8003b26:	1903      	adds	r3, r0, r4
 8003b28:	19db      	adds	r3, r3, r7
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	7811      	ldrb	r1, [r2, #0]
 8003b2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b30:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003b32:	1903      	adds	r3, r0, r4
 8003b34:	19db      	adds	r3, r3, r7
 8003b36:	881a      	ldrh	r2, [r3, #0]
 8003b38:	1903      	adds	r3, r0, r4
 8003b3a:	19db      	adds	r3, r3, r7
 8003b3c:	3201      	adds	r2, #1
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	234c      	movs	r3, #76	@ 0x4c
 8003b42:	2018      	movs	r0, #24
 8003b44:	181b      	adds	r3, r3, r0
 8003b46:	19da      	adds	r2, r3, r7
 8003b48:	211a      	movs	r1, #26
 8003b4a:	187b      	adds	r3, r7, r1
 8003b4c:	8812      	ldrh	r2, [r2, #0]
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d3e1      	bcc.n	8003b18 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003b5e:	233f      	movs	r3, #63	@ 0x3f
 8003b60:	0006      	movs	r6, r0
 8003b62:	199b      	adds	r3, r3, r6
 8003b64:	19db      	adds	r3, r3, r7
 8003b66:	224e      	movs	r2, #78	@ 0x4e
 8003b68:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003b6a:	2530      	movs	r5, #48	@ 0x30
 8003b6c:	19ab      	adds	r3, r5, r6
 8003b6e:	19db      	adds	r3, r3, r7
 8003b70:	4a60      	ldr	r2, [pc, #384]	@ (8003cf4 <ParseBuffer+0x270>)
 8003b72:	8811      	ldrh	r1, [r2, #0]
 8003b74:	8019      	strh	r1, [r3, #0]
 8003b76:	7892      	ldrb	r2, [r2, #2]
 8003b78:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b7a:	2328      	movs	r3, #40	@ 0x28
 8003b7c:	199b      	adds	r3, r3, r6
 8003b7e:	19db      	adds	r3, r3, r7
 8003b80:	4a5d      	ldr	r2, [pc, #372]	@ (8003cf8 <ParseBuffer+0x274>)
 8003b82:	6811      	ldr	r1, [r2, #0]
 8003b84:	6019      	str	r1, [r3, #0]
 8003b86:	8892      	ldrh	r2, [r2, #4]
 8003b88:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b8a:	2320      	movs	r3, #32
 8003b8c:	199b      	adds	r3, r3, r6
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	4a5a      	ldr	r2, [pc, #360]	@ (8003cfc <ParseBuffer+0x278>)
 8003b92:	6811      	ldr	r1, [r2, #0]
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	8892      	ldrh	r2, [r2, #4]
 8003b98:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003b9a:	231c      	movs	r3, #28
 8003b9c:	199b      	adds	r3, r3, r6
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	223e      	movs	r2, #62	@ 0x3e
 8003ba2:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003ba4:	230c      	movs	r3, #12
 8003ba6:	199b      	adds	r3, r3, r6
 8003ba8:	19db      	adds	r3, r3, r7
 8003baa:	4a55      	ldr	r2, [pc, #340]	@ (8003d00 <ParseBuffer+0x27c>)
 8003bac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bae:	c313      	stmia	r3!, {r0, r1, r4}
 8003bb0:	8811      	ldrh	r1, [r2, #0]
 8003bb2:	8019      	strh	r1, [r3, #0]
 8003bb4:	7892      	ldrb	r2, [r2, #2]
 8003bb6:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003bb8:	2319      	movs	r3, #25
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d108      	bne.n	8003bd4 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003bc2:	19ab      	adds	r3, r5, r6
 8003bc4:	19da      	adds	r2, r3, r7
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f012 ff68 	bl	8016aa0 <strstr>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003bd4:	2319      	movs	r3, #25
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d10a      	bne.n	8003bf4 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003bde:	2320      	movs	r3, #32
 8003be0:	2218      	movs	r2, #24
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	19da      	adds	r2, r3, r7
 8003be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be8:	0011      	movs	r1, r2
 8003bea:	0018      	movs	r0, r3
 8003bec:	f012 ff58 	bl	8016aa0 <strstr>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003bf4:	2319      	movs	r3, #25
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d10a      	bne.n	8003c14 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003bfe:	231c      	movs	r3, #28
 8003c00:	2218      	movs	r2, #24
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	19da      	adds	r2, r3, r7
 8003c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c08:	0011      	movs	r1, r2
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f012 ff48 	bl	8016aa0 <strstr>
 8003c10:	0003      	movs	r3, r0
 8003c12:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003c14:	2328      	movs	r3, #40	@ 0x28
 8003c16:	2418      	movs	r4, #24
 8003c18:	191b      	adds	r3, r3, r4
 8003c1a:	19da      	adds	r2, r3, r7
 8003c1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c1e:	0011      	movs	r1, r2
 8003c20:	0018      	movs	r0, r3
 8003c22:	f012 ff3d 	bl	8016aa0 <strstr>
 8003c26:	0003      	movs	r3, r0
 8003c28:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	191b      	adds	r3, r3, r4
 8003c2e:	19da      	adds	r2, r3, r7
 8003c30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c32:	0011      	movs	r1, r2
 8003c34:	0018      	movs	r0, r3
 8003c36:	f012 ff33 	bl	8016aa0 <strstr>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003c3e:	231a      	movs	r3, #26
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d948      	bls.n	8003cda <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003c48:	213f      	movs	r1, #63	@ 0x3f
 8003c4a:	190b      	adds	r3, r1, r4
 8003c4c:	19db      	adds	r3, r3, r7
 8003c4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003c54:	190b      	adds	r3, r1, r4
 8003c56:	19db      	adds	r3, r3, r7
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c5c:	d104      	bne.n	8003c68 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003c5e:	234f      	movs	r3, #79	@ 0x4f
 8003c60:	191b      	adds	r3, r3, r4
 8003c62:	19db      	adds	r3, r3, r7
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003c68:	233f      	movs	r3, #63	@ 0x3f
 8003c6a:	2218      	movs	r2, #24
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	19db      	adds	r3, r3, r7
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b72      	cmp	r3, #114	@ 0x72
 8003c74:	d104      	bne.n	8003c80 <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003c76:	234f      	movs	r3, #79	@ 0x4f
 8003c78:	189b      	adds	r3, r3, r2
 8003c7a:	19db      	adds	r3, r3, r7
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003c80:	233f      	movs	r3, #63	@ 0x3f
 8003c82:	2218      	movs	r2, #24
 8003c84:	189b      	adds	r3, r3, r2
 8003c86:	19db      	adds	r3, r3, r7
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c8c:	d104      	bne.n	8003c98 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003c8e:	234f      	movs	r3, #79	@ 0x4f
 8003c90:	189b      	adds	r3, r3, r2
 8003c92:	19db      	adds	r3, r3, r7
 8003c94:	2205      	movs	r2, #5
 8003c96:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003c98:	213f      	movs	r1, #63	@ 0x3f
 8003c9a:	2018      	movs	r0, #24
 8003c9c:	180b      	adds	r3, r1, r0
 8003c9e:	19db      	adds	r3, r3, r7
 8003ca0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	188b      	adds	r3, r1, r2
 8003caa:	19db      	adds	r3, r3, r7
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b45      	cmp	r3, #69	@ 0x45
 8003cb0:	d104      	bne.n	8003cbc <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003cb2:	234f      	movs	r3, #79	@ 0x4f
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	19db      	adds	r3, r3, r7
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003cbc:	213f      	movs	r1, #63	@ 0x3f
 8003cbe:	2018      	movs	r0, #24
 8003cc0:	180b      	adds	r3, r1, r0
 8003cc2:	19db      	adds	r3, r3, r7
 8003cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cc6:	7812      	ldrb	r2, [r2, #0]
 8003cc8:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003cca:	180b      	adds	r3, r1, r0
 8003ccc:	19db      	adds	r3, r3, r7
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b57      	cmp	r3, #87	@ 0x57
 8003cd2:	d102      	bne.n	8003cda <ParseBuffer+0x256>
      ConnectionMade = true;
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <ParseBuffer+0x280>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003cda:	234f      	movs	r3, #79	@ 0x4f
 8003cdc:	2218      	movs	r2, #24
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	19db      	adds	r3, r3, r7
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	46c5      	mov	sp, r8

}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b01a      	add	sp, #104	@ 0x68
 8003cec:	bc80      	pop	{r7}
 8003cee:	46b8      	mov	r8, r7
 8003cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	08019a64 	.word	0x08019a64
 8003cf8:	08019a68 	.word	0x08019a68
 8003cfc:	08019a70 	.word	0x08019a70
 8003d00:	08019a78 	.word	0x08019a78
 8003d04:	200005da 	.word	0x200005da

08003d08 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <PollAwake+0x3c>)
 8003d10:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff fe6d 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7fc f9f3 	bl	8000108 <strlen>
 8003d22:	0003      	movs	r3, r0
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0011      	movs	r1, r2
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff fcfe 	bl	800372c <ESP_Send>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d001      	beq.n	8003d38 <PollAwake+0x30>
    return true;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <PollAwake+0x32>
  }
  else{
    return false;
 8003d38:	2300      	movs	r3, #0
  }
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	08019a88 	.word	0x08019a88

08003d48 <RFPower>:
bool RFPower(){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <RFPower+0x3c>)
 8003d50:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff fe4d 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7fc f9d3 	bl	8000108 <strlen>
 8003d62:	0003      	movs	r3, r0
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0011      	movs	r1, r2
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff fcde 	bl	800372c <ESP_Send>
 8003d70:	1e03      	subs	r3, r0, #0
 8003d72:	d001      	beq.n	8003d78 <RFPower+0x30>
    return true;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <RFPower+0x32>
  }
  else{
    return false;
 8003d78:	2300      	movs	r3, #0
  }
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	08019a90 	.word	0x08019a90

08003d88 <CheckRFPower>:
bool CheckRFPower(){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <CheckRFPower+0x3c>)
 8003d90:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7ff fe2d 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7fc f9b3 	bl	8000108 <strlen>
 8003da2:	0003      	movs	r3, r0
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0011      	movs	r1, r2
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7ff fcbe 	bl	800372c <ESP_Send>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d001      	beq.n	8003db8 <CheckRFPower+0x30>
    return true;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <CheckRFPower+0x32>
  }
  else{
    return false;
 8003db8:	2300      	movs	r3, #0
  }
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	08019aa0 	.word	0x08019aa0

08003dc8 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <ATRestore+0x3c>)
 8003dd0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff fe0d 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fc f993 	bl	8000108 <strlen>
 8003de2:	0003      	movs	r3, r0
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7ff fc9e 	bl	800372c <ESP_Send>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <ATRestore+0x30>
    return true;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <ATRestore+0x32>
  }
  else{
    return false;
 8003df8:	2300      	movs	r3, #0
  }
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	08019ab0 	.word	0x08019ab0

08003e08 <CWINIT>:
bool CWINIT(){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <CWINIT+0x3c>)
 8003e10:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7ff fded 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7fc f973 	bl	8000108 <strlen>
 8003e22:	0003      	movs	r3, r0
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0011      	movs	r1, r2
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7ff fc7e 	bl	800372c <ESP_Send>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d001      	beq.n	8003e38 <CWINIT+0x30>
    return true;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <CWINIT+0x32>
  }
  else{
    return false;
 8003e38:	2300      	movs	r3, #0
  }
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	08019ac0 	.word	0x08019ac0

08003e48 <CWMODE1>:
bool CWMODE1(){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <CWMODE1+0x3c>)
 8003e50:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7ff fdcd 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fc f953 	bl	8000108 <strlen>
 8003e62:	0003      	movs	r3, r0
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff fc5e 	bl	800372c <ESP_Send>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d001      	beq.n	8003e78 <CWMODE1+0x30>
    return true;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <CWMODE1+0x32>
  }
  else{
    return false;
 8003e78:	2300      	movs	r3, #0
  }
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	08019ad0 	.word	0x08019ad0

08003e88 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <CWAUTOCONN+0x3c>)
 8003e90:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7ff fdad 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7fc f933 	bl	8000108 <strlen>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0011      	movs	r1, r2
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7ff fc3e 	bl	800372c <ESP_Send>
 8003eb0:	1e03      	subs	r3, r0, #0
 8003eb2:	d001      	beq.n	8003eb8 <CWAUTOCONN+0x30>
    return true;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003eb8:	2300      	movs	r3, #0
  }
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b002      	add	sp, #8
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	08019ae0 	.word	0x08019ae0

08003ec8 <CWJAP>:
bool CWJAP(){
 8003ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eca:	46c6      	mov	lr, r8
 8003ecc:	b500      	push	{lr}
 8003ece:	b0a2      	sub	sp, #136	@ 0x88
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	466b      	mov	r3, sp
 8003ed4:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003ed6:	2618      	movs	r6, #24
 8003ed8:	19bb      	adds	r3, r7, r6
 8003eda:	2264      	movs	r2, #100	@ 0x64
 8003edc:	2100      	movs	r1, #0
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f012 fdc2 	bl	8016a68 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003ee4:	4b35      	ldr	r3, [pc, #212]	@ (8003fbc <CWJAP+0xf4>)
 8003ee6:	4a36      	ldr	r2, [pc, #216]	@ (8003fc0 <CWJAP+0xf8>)
 8003ee8:	4936      	ldr	r1, [pc, #216]	@ (8003fc4 <CWJAP+0xfc>)
 8003eea:	19b8      	adds	r0, r7, r6
 8003eec:	f012 fd18 	bl	8016920 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003ef0:	19bb      	adds	r3, r7, r6
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7fc f908 	bl	8000108 <strlen>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	216f      	movs	r1, #111	@ 0x6f
 8003efc:	0030      	movs	r0, r6
 8003efe:	180b      	adds	r3, r1, r0
 8003f00:	19db      	adds	r3, r3, r7
 8003f02:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003f04:	180b      	adds	r3, r1, r0
 8003f06:	19db      	adds	r3, r3, r7
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	1e5a      	subs	r2, r3, #1
 8003f0e:	2180      	movs	r1, #128	@ 0x80
 8003f10:	1879      	adds	r1, r7, r1
 8003f12:	600a      	str	r2, [r1, #0]
 8003f14:	001a      	movs	r2, r3
 8003f16:	60ba      	str	r2, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60fa      	str	r2, [r7, #12]
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	0002      	movs	r2, r0
 8003f22:	0f52      	lsrs	r2, r2, #29
 8003f24:	000e      	movs	r6, r1
 8003f26:	00f6      	lsls	r6, r6, #3
 8003f28:	617e      	str	r6, [r7, #20]
 8003f2a:	697e      	ldr	r6, [r7, #20]
 8003f2c:	4316      	orrs	r6, r2
 8003f2e:	617e      	str	r6, [r7, #20]
 8003f30:	0002      	movs	r2, r0
 8003f32:	00d2      	lsls	r2, r2, #3
 8003f34:	613a      	str	r2, [r7, #16]
 8003f36:	001a      	movs	r2, r3
 8003f38:	603a      	str	r2, [r7, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	0002      	movs	r2, r0
 8003f44:	0f52      	lsrs	r2, r2, #29
 8003f46:	000e      	movs	r6, r1
 8003f48:	00f5      	lsls	r5, r6, #3
 8003f4a:	4315      	orrs	r5, r2
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	00d4      	lsls	r4, r2, #3
 8003f50:	3307      	adds	r3, #7
 8003f52:	08db      	lsrs	r3, r3, #3
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	466a      	mov	r2, sp
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	469d      	mov	sp, r3
 8003f5c:	466b      	mov	r3, sp
 8003f5e:	3300      	adds	r3, #0
 8003f60:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003f62:	246f      	movs	r4, #111	@ 0x6f
 8003f64:	2518      	movs	r5, #24
 8003f66:	1963      	adds	r3, r4, r5
 8003f68:	19db      	adds	r3, r3, r7
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	001a      	movs	r2, r3
 8003f70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f72:	2100      	movs	r1, #0
 8003f74:	0018      	movs	r0, r3
 8003f76:	f012 fd77 	bl	8016a68 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8003f7a:	1963      	adds	r3, r4, r5
 8003f7c:	19db      	adds	r3, r3, r7
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	1979      	adds	r1, r7, r5
 8003f82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f84:	0018      	movs	r0, r3
 8003f86:	f012 fd77 	bl	8016a78 <strncpy>
  SetCommandBuffer(atCommand);
 8003f8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7ff fd31 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003f92:	1963      	adds	r3, r4, r5
 8003f94:	19db      	adds	r3, r3, r7
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f9c:	0011      	movs	r1, r2
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7ff fbc4 	bl	800372c <ESP_Send>
 8003fa4:	1e03      	subs	r3, r0, #0
 8003fa6:	d001      	beq.n	8003fac <CWJAP+0xe4>
    return true;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <CWJAP+0xe6>
  }
  else{
    return false;
 8003fac:	2300      	movs	r3, #0
 8003fae:	46c5      	mov	sp, r8
  }
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b022      	add	sp, #136	@ 0x88
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	46b8      	mov	r8, r7
 8003fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbc:	20000010 	.word	0x20000010
 8003fc0:	20000004 	.word	0x20000004
 8003fc4:	08019af4 	.word	0x08019af4

08003fc8 <CWMODE3>:
bool CWMODE3(){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <CWMODE3+0x3c>)
 8003fd0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7ff fd0d 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fc f893 	bl	8000108 <strlen>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0011      	movs	r1, r2
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7ff fb9e 	bl	800372c <ESP_Send>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <CWMODE3+0x30>
    return true;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <CWMODE3+0x32>
  }
  else{
    return false;
 8003ff8:	2300      	movs	r3, #0
  }
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b002      	add	sp, #8
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	08019b0c 	.word	0x08019b0c

08004008 <CWSAP>:
bool CWSAP(){
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <CWSAP+0x3c>)
 8004010:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff fced 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f7fc f873 	bl	8000108 <strlen>
 8004022:	0003      	movs	r3, r0
 8004024:	b29a      	uxth	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0011      	movs	r1, r2
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fb7e 	bl	800372c <ESP_Send>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d001      	beq.n	8004038 <CWSAP+0x30>
    return true;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <CWSAP+0x32>
  }
  else{
    return false;
 8004038:	2300      	movs	r3, #0
  }
}
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	08019b1c 	.word	0x08019b1c

08004048 <CIPMUX>:
bool CIPMUX(){
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <CIPMUX+0x3c>)
 8004050:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0018      	movs	r0, r3
 8004056:	f7ff fccd 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f7fc f853 	bl	8000108 <strlen>
 8004062:	0003      	movs	r3, r0
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0011      	movs	r1, r2
 800406a:	0018      	movs	r0, r3
 800406c:	f7ff fb5e 	bl	800372c <ESP_Send>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d001      	beq.n	8004078 <CIPMUX+0x30>
    return true;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <CIPMUX+0x32>
  }
  else{
    return false;
 8004078:	2300      	movs	r3, #0
  }
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	08019b40 	.word	0x08019b40

08004088 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800408e:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <WEBSERVER+0x3c>)
 8004090:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff fcad 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0018      	movs	r0, r3
 800409e:	f7fc f833 	bl	8000108 <strlen>
 80040a2:	0003      	movs	r3, r0
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0011      	movs	r1, r2
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7ff fb3e 	bl	800372c <ESP_Send>
 80040b0:	1e03      	subs	r3, r0, #0
 80040b2:	d001      	beq.n	80040b8 <WEBSERVER+0x30>
    return true;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <WEBSERVER+0x32>
  }
  else{
    return false;
 80040b8:	2300      	movs	r3, #0
  }
}
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b002      	add	sp, #8
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	08019b50 	.word	0x08019b50

080040c8 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80040c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ca:	46c6      	mov	lr, r8
 80040cc:	b500      	push	{lr}
 80040ce:	4c47      	ldr	r4, [pc, #284]	@ (80041ec <HTTPCPOST+0x124>)
 80040d0:	44a5      	add	sp, r4
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	466b      	mov	r3, sp
 80040d6:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 80040d8:	4b45      	ldr	r3, [pc, #276]	@ (80041f0 <HTTPCPOST+0x128>)
 80040da:	2218      	movs	r2, #24
 80040dc:	189b      	adds	r3, r3, r2
 80040de:	19dc      	adds	r4, r3, r7
 80040e0:	f7ff fbd4 	bl	800388c <CreateMessage>
 80040e4:	0003      	movs	r3, r0
 80040e6:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80040e8:	4b41      	ldr	r3, [pc, #260]	@ (80041f0 <HTTPCPOST+0x128>)
 80040ea:	2218      	movs	r2, #24
 80040ec:	189b      	adds	r3, r3, r2
 80040ee:	19db      	adds	r3, r3, r7
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	4a40      	ldr	r2, [pc, #256]	@ (80041f4 <HTTPCPOST+0x12c>)
 80040f4:	4940      	ldr	r1, [pc, #256]	@ (80041f8 <HTTPCPOST+0x130>)
 80040f6:	201c      	movs	r0, #28
 80040f8:	1838      	adds	r0, r7, r0
 80040fa:	f012 fc11 	bl	8016920 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80040fe:	231c      	movs	r3, #28
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	0018      	movs	r0, r3
 8004104:	f7fc f800 	bl	8000108 <strlen>
 8004108:	0002      	movs	r2, r0
 800410a:	4c3c      	ldr	r4, [pc, #240]	@ (80041fc <HTTPCPOST+0x134>)
 800410c:	2318      	movs	r3, #24
 800410e:	18e3      	adds	r3, r4, r3
 8004110:	19db      	adds	r3, r3, r7
 8004112:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004114:	2318      	movs	r3, #24
 8004116:	18e3      	adds	r3, r4, r3
 8004118:	19db      	adds	r3, r3, r7
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	1e5a      	subs	r2, r3, #1
 8004120:	2198      	movs	r1, #152	@ 0x98
 8004122:	0089      	lsls	r1, r1, #2
 8004124:	2018      	movs	r0, #24
 8004126:	1809      	adds	r1, r1, r0
 8004128:	19c9      	adds	r1, r1, r7
 800412a:	600a      	str	r2, [r1, #0]
 800412c:	001a      	movs	r2, r3
 800412e:	0015      	movs	r5, r2
 8004130:	2200      	movs	r2, #0
 8004132:	0016      	movs	r6, r2
 8004134:	0028      	movs	r0, r5
 8004136:	0031      	movs	r1, r6
 8004138:	0002      	movs	r2, r0
 800413a:	0f52      	lsrs	r2, r2, #29
 800413c:	000d      	movs	r5, r1
 800413e:	00ed      	lsls	r5, r5, #3
 8004140:	617d      	str	r5, [r7, #20]
 8004142:	697d      	ldr	r5, [r7, #20]
 8004144:	4315      	orrs	r5, r2
 8004146:	617d      	str	r5, [r7, #20]
 8004148:	0002      	movs	r2, r0
 800414a:	00d2      	lsls	r2, r2, #3
 800414c:	613a      	str	r2, [r7, #16]
 800414e:	001a      	movs	r2, r3
 8004150:	603a      	str	r2, [r7, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	6838      	ldr	r0, [r7, #0]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	0002      	movs	r2, r0
 800415c:	0f52      	lsrs	r2, r2, #29
 800415e:	000d      	movs	r5, r1
 8004160:	00ed      	lsls	r5, r5, #3
 8004162:	60fd      	str	r5, [r7, #12]
 8004164:	68fd      	ldr	r5, [r7, #12]
 8004166:	4315      	orrs	r5, r2
 8004168:	60fd      	str	r5, [r7, #12]
 800416a:	0002      	movs	r2, r0
 800416c:	00d2      	lsls	r2, r2, #3
 800416e:	60ba      	str	r2, [r7, #8]
 8004170:	3307      	adds	r3, #7
 8004172:	08db      	lsrs	r3, r3, #3
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	466a      	mov	r2, sp
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	469d      	mov	sp, r3
 800417c:	466b      	mov	r3, sp
 800417e:	3300      	adds	r3, #0
 8004180:	2597      	movs	r5, #151	@ 0x97
 8004182:	00ad      	lsls	r5, r5, #2
 8004184:	2218      	movs	r2, #24
 8004186:	18aa      	adds	r2, r5, r2
 8004188:	19d2      	adds	r2, r2, r7
 800418a:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 800418c:	2318      	movs	r3, #24
 800418e:	18e3      	adds	r3, r4, r3
 8004190:	19db      	adds	r3, r3, r7
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	231c      	movs	r3, #28
 8004196:	18f9      	adds	r1, r7, r3
 8004198:	2318      	movs	r3, #24
 800419a:	18eb      	adds	r3, r5, r3
 800419c:	19db      	adds	r3, r3, r7
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f012 fc69 	bl	8016a78 <strncpy>
  SetCommandBuffer(atCommand);
 80041a6:	2318      	movs	r3, #24
 80041a8:	18eb      	adds	r3, r5, r3
 80041aa:	19db      	adds	r3, r3, r7
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7ff fc20 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 80041b4:	2318      	movs	r3, #24
 80041b6:	18e3      	adds	r3, r4, r3
 80041b8:	19db      	adds	r3, r3, r7
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	2318      	movs	r3, #24
 80041c0:	18eb      	adds	r3, r5, r3
 80041c2:	19db      	adds	r3, r3, r7
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0011      	movs	r1, r2
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7ff faaf 	bl	800372c <ESP_Send>
 80041ce:	1e03      	subs	r3, r0, #0
 80041d0:	d001      	beq.n	80041d6 <HTTPCPOST+0x10e>
    return true;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HTTPCPOST+0x110>
  }
  else{
    return false;
 80041d6:	2300      	movs	r3, #0
 80041d8:	46c5      	mov	sp, r8
  }
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	23a0      	movs	r3, #160	@ 0xa0
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	449d      	add	sp, r3
 80041e4:	bc80      	pop	{r7}
 80041e6:	46b8      	mov	r8, r7
 80041e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	fffffd80 	.word	0xfffffd80
 80041f0:	00000266 	.word	0x00000266
 80041f4:	20000028 	.word	0x20000028
 80041f8:	08019b68 	.word	0x08019b68
 80041fc:	00000265 	.word	0x00000265

08004200 <SENDDATA>:
bool SENDDATA(){
 8004200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004202:	46c6      	mov	lr, r8
 8004204:	b500      	push	{lr}
 8004206:	4c4c      	ldr	r4, [pc, #304]	@ (8004338 <SENDDATA+0x138>)
 8004208:	44a5      	add	sp, r4
 800420a:	af04      	add	r7, sp, #16
 800420c:	466b      	mov	r3, sp
 800420e:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 8004210:	23a4      	movs	r3, #164	@ 0xa4
 8004212:	009a      	lsls	r2, r3, #2
 8004214:	261c      	movs	r6, #28
 8004216:	19bb      	adds	r3, r7, r6
 8004218:	2100      	movs	r1, #0
 800421a:	0018      	movs	r0, r3
 800421c:	f012 fc24 	bl	8016a68 <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 8004220:	4a46      	ldr	r2, [pc, #280]	@ (800433c <SENDDATA+0x13c>)
 8004222:	4947      	ldr	r1, [pc, #284]	@ (8004340 <SENDDATA+0x140>)
 8004224:	4847      	ldr	r0, [pc, #284]	@ (8004344 <SENDDATA+0x144>)
 8004226:	19be      	adds	r6, r7, r6
 8004228:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <SENDDATA+0x148>)
 800422a:	9302      	str	r3, [sp, #8]
 800422c:	4b47      	ldr	r3, [pc, #284]	@ (800434c <SENDDATA+0x14c>)
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	4b47      	ldr	r3, [pc, #284]	@ (8004350 <SENDDATA+0x150>)
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	0013      	movs	r3, r2
 8004236:	000a      	movs	r2, r1
 8004238:	0001      	movs	r1, r0
 800423a:	0030      	movs	r0, r6
 800423c:	f012 fb70 	bl	8016920 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 8004240:	231c      	movs	r3, #28
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	0018      	movs	r0, r3
 8004246:	f7fb ff5f 	bl	8000108 <strlen>
 800424a:	0002      	movs	r2, r0
 800424c:	4e41      	ldr	r6, [pc, #260]	@ (8004354 <SENDDATA+0x154>)
 800424e:	2018      	movs	r0, #24
 8004250:	1831      	adds	r1, r6, r0
 8004252:	19cb      	adds	r3, r1, r7
 8004254:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 8004256:	1832      	adds	r2, r6, r0
 8004258:	19d3      	adds	r3, r2, r7
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	1e5a      	subs	r2, r3, #1
 8004260:	21a6      	movs	r1, #166	@ 0xa6
 8004262:	0089      	lsls	r1, r1, #2
 8004264:	1809      	adds	r1, r1, r0
 8004266:	19c9      	adds	r1, r1, r7
 8004268:	600a      	str	r2, [r1, #0]
 800426a:	001a      	movs	r2, r3
 800426c:	60ba      	str	r2, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	60fa      	str	r2, [r7, #12]
 8004272:	68b8      	ldr	r0, [r7, #8]
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	0002      	movs	r2, r0
 8004278:	0f52      	lsrs	r2, r2, #29
 800427a:	000e      	movs	r6, r1
 800427c:	00f6      	lsls	r6, r6, #3
 800427e:	617e      	str	r6, [r7, #20]
 8004280:	697e      	ldr	r6, [r7, #20]
 8004282:	4316      	orrs	r6, r2
 8004284:	617e      	str	r6, [r7, #20]
 8004286:	0002      	movs	r2, r0
 8004288:	00d2      	lsls	r2, r2, #3
 800428a:	613a      	str	r2, [r7, #16]
 800428c:	001a      	movs	r2, r3
 800428e:	603a      	str	r2, [r7, #0]
 8004290:	2200      	movs	r2, #0
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	6838      	ldr	r0, [r7, #0]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	0002      	movs	r2, r0
 800429a:	0f52      	lsrs	r2, r2, #29
 800429c:	000e      	movs	r6, r1
 800429e:	00f5      	lsls	r5, r6, #3
 80042a0:	4315      	orrs	r5, r2
 80042a2:	0002      	movs	r2, r0
 80042a4:	00d4      	lsls	r4, r2, #3
 80042a6:	3307      	adds	r3, #7
 80042a8:	08db      	lsrs	r3, r3, #3
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	466a      	mov	r2, sp
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	469d      	mov	sp, r3
 80042b2:	ab04      	add	r3, sp, #16
 80042b4:	3300      	adds	r3, #0
 80042b6:	21a5      	movs	r1, #165	@ 0xa5
 80042b8:	0089      	lsls	r1, r1, #2
 80042ba:	2018      	movs	r0, #24
 80042bc:	180a      	adds	r2, r1, r0
 80042be:	19d2      	adds	r2, r2, r7
 80042c0:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 80042c2:	4e24      	ldr	r6, [pc, #144]	@ (8004354 <SENDDATA+0x154>)
 80042c4:	1832      	adds	r2, r6, r0
 80042c6:	19d3      	adds	r3, r2, r7
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	001a      	movs	r2, r3
 80042ce:	000c      	movs	r4, r1
 80042d0:	0005      	movs	r5, r0
 80042d2:	1821      	adds	r1, r4, r0
 80042d4:	19cb      	adds	r3, r1, r7
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2100      	movs	r1, #0
 80042da:	0018      	movs	r0, r3
 80042dc:	f012 fbc4 	bl	8016a68 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80042e0:	0028      	movs	r0, r5
 80042e2:	1832      	adds	r2, r6, r0
 80042e4:	19d3      	adds	r3, r2, r7
 80042e6:	881a      	ldrh	r2, [r3, #0]
 80042e8:	231c      	movs	r3, #28
 80042ea:	18f9      	adds	r1, r7, r3
 80042ec:	0005      	movs	r5, r0
 80042ee:	1963      	adds	r3, r4, r5
 80042f0:	19db      	adds	r3, r3, r7
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f012 fbbf 	bl	8016a78 <strncpy>
  SetCommandBuffer(atCommand);
 80042fa:	1963      	adds	r3, r4, r5
 80042fc:	19db      	adds	r3, r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0018      	movs	r0, r3
 8004302:	f7ff fb77 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004306:	0028      	movs	r0, r5
 8004308:	1833      	adds	r3, r6, r0
 800430a:	19db      	adds	r3, r3, r7
 800430c:	881a      	ldrh	r2, [r3, #0]
 800430e:	1823      	adds	r3, r4, r0
 8004310:	19db      	adds	r3, r3, r7
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0011      	movs	r1, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7ff fa08 	bl	800372c <ESP_Send>
 800431c:	1e03      	subs	r3, r0, #0
 800431e:	d001      	beq.n	8004324 <SENDDATA+0x124>
    return true;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <SENDDATA+0x126>
  }
  else{
    return false;
 8004324:	2300      	movs	r3, #0
 8004326:	46c5      	mov	sp, r8
  }
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	23ae      	movs	r3, #174	@ 0xae
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	449d      	add	sp, r3
 8004332:	bc80      	pop	{r7}
 8004334:	46b8      	mov	r8, r7
 8004336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004338:	fffffd38 	.word	0xfffffd38
 800433c:	20000680 	.word	0x20000680
 8004340:	20000600 	.word	0x20000600
 8004344:	08019ba0 	.word	0x08019ba0
 8004348:	20000800 	.word	0x20000800
 800434c:	20000780 	.word	0x20000780
 8004350:	20000700 	.word	0x20000700
 8004354:	0000029e 	.word	0x0000029e

08004358 <SLEEP>:
bool SLEEP(){
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <SLEEP+0x3c>)
 8004360:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff fb45 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f7fb fecb 	bl	8000108 <strlen>
 8004372:	0003      	movs	r3, r0
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f7ff f9d6 	bl	800372c <ESP_Send>
 8004380:	1e03      	subs	r3, r0, #0
 8004382:	d001      	beq.n	8004388 <SLEEP+0x30>
    return true;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <SLEEP+0x32>
  }
  else{
    return false;
 8004388:	2300      	movs	r3, #0
  }
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b002      	add	sp, #8
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			@ (mov r8, r8)
 8004394:	08019bc0 	.word	0x08019bc0

08004398 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	0002      	movs	r2, r0
 80043a0:	1dfb      	adds	r3, r7, #7
 80043a2:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80043a4:	4b4c      	ldr	r3, [pc, #304]	@ (80044d8 <DMA_ProcessBuffer+0x140>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	210e      	movs	r1, #14
 80043ae:	187b      	adds	r3, r7, r1
 80043b0:	43d2      	mvns	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 80043b4:	200f      	movs	r0, #15
 80043b6:	183b      	adds	r3, r7, r0
 80043b8:	2203      	movs	r2, #3
 80043ba:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 80043bc:	4b47      	ldr	r3, [pc, #284]	@ (80044dc <DMA_ProcessBuffer+0x144>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	187a      	adds	r2, r7, r1
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d129      	bne.n	800441e <DMA_ProcessBuffer+0x86>
      if(retry >4){
 80043ca:	4b45      	ldr	r3, [pc, #276]	@ (80044e0 <DMA_ProcessBuffer+0x148>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d913      	bls.n	80043fa <DMA_ProcessBuffer+0x62>
        retry = 0;
 80043d2:	4b43      	ldr	r3, [pc, #268]	@ (80044e0 <DMA_ProcessBuffer+0x148>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80043d8:	4b42      	ldr	r3, [pc, #264]	@ (80044e4 <DMA_ProcessBuffer+0x14c>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <DMA_ProcessBuffer+0x58>
 80043e0:	4b41      	ldr	r3, [pc, #260]	@ (80044e8 <DMA_ProcessBuffer+0x150>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <DMA_ProcessBuffer+0x58>
          status = RECEIVE_STATUS_UNPROGGED;
 80043e8:	183b      	adds	r3, r7, r0
 80043ea:	2207      	movs	r2, #7
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e016      	b.n	800441e <DMA_ProcessBuffer+0x86>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80043f0:	230f      	movs	r3, #15
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	2206      	movs	r2, #6
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	e011      	b.n	800441e <DMA_ProcessBuffer+0x86>
        }
      }
     else{
       retry ++;
 80043fa:	4b39      	ldr	r3, [pc, #228]	@ (80044e0 <DMA_ProcessBuffer+0x148>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	3301      	adds	r3, #1
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4b37      	ldr	r3, [pc, #220]	@ (80044e0 <DMA_ProcessBuffer+0x148>)
 8004404:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004406:	f004 ff67 	bl	80092d8 <HAL_GetTick>
 800440a:	0003      	movs	r3, r0
 800440c:	33f5      	adds	r3, #245	@ 0xf5
 800440e:	33ff      	adds	r3, #255	@ 0xff
 8004410:	001a      	movs	r2, r3
 8004412:	4b36      	ldr	r3, [pc, #216]	@ (80044ec <DMA_ProcessBuffer+0x154>)
 8004414:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004416:	230f      	movs	r3, #15
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	2204      	movs	r2, #4
 800441c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 800441e:	4b2f      	ldr	r3, [pc, #188]	@ (80044dc <DMA_ProcessBuffer+0x144>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	210e      	movs	r1, #14
 8004426:	187a      	adds	r2, r7, r1
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d048      	beq.n	80044c0 <DMA_ProcessBuffer+0x128>
      retry = 0;
 800442e:	4b2c      	ldr	r3, [pc, #176]	@ (80044e0 <DMA_ProcessBuffer+0x148>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004434:	4b29      	ldr	r3, [pc, #164]	@ (80044dc <DMA_ProcessBuffer+0x144>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	187a      	adds	r2, r7, r1
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d917      	bls.n	8004472 <DMA_ProcessBuffer+0xda>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004442:	4b26      	ldr	r3, [pc, #152]	@ (80044dc <DMA_ProcessBuffer+0x144>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	001a      	movs	r2, r3
 800444a:	4b29      	ldr	r3, [pc, #164]	@ (80044f0 <DMA_ProcessBuffer+0x158>)
 800444c:	18d0      	adds	r0, r2, r3
 800444e:	187b      	adds	r3, r7, r1
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	4a21      	ldr	r2, [pc, #132]	@ (80044dc <DMA_ProcessBuffer+0x144>)
 8004456:	7812      	ldrb	r2, [r2, #0]
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	b299      	uxth	r1, r3
 800445e:	230f      	movs	r3, #15
 8004460:	18fc      	adds	r4, r7, r3
 8004462:	1dfb      	adds	r3, r7, #7
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	001a      	movs	r2, r3
 8004468:	f7ff fb0c 	bl	8003a84 <ParseBuffer>
 800446c:	0003      	movs	r3, r0
 800446e:	7023      	strb	r3, [r4, #0]
 8004470:	e026      	b.n	80044c0 <DMA_ProcessBuffer+0x128>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004472:	4b1a      	ldr	r3, [pc, #104]	@ (80044dc <DMA_ProcessBuffer+0x144>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	001a      	movs	r2, r3
 800447a:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <DMA_ProcessBuffer+0x158>)
 800447c:	18d0      	adds	r0, r2, r3
 800447e:	4b17      	ldr	r3, [pc, #92]	@ (80044dc <DMA_ProcessBuffer+0x144>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	001a      	movs	r2, r3
 8004486:	23ff      	movs	r3, #255	@ 0xff
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	b299      	uxth	r1, r3
 800448c:	250f      	movs	r5, #15
 800448e:	197c      	adds	r4, r7, r5
 8004490:	1dfb      	adds	r3, r7, #7
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	001a      	movs	r2, r3
 8004496:	f7ff faf5 	bl	8003a84 <ParseBuffer>
 800449a:	0003      	movs	r3, r0
 800449c:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 800449e:	220e      	movs	r2, #14
 80044a0:	18bb      	adds	r3, r7, r2
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00b      	beq.n	80044c0 <DMA_ProcessBuffer+0x128>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80044a8:	18bb      	adds	r3, r7, r2
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b299      	uxth	r1, r3
 80044ae:	197c      	adds	r4, r7, r5
 80044b0:	1dfb      	adds	r3, r7, #7
 80044b2:	781a      	ldrb	r2, [r3, #0]
 80044b4:	4b0e      	ldr	r3, [pc, #56]	@ (80044f0 <DMA_ProcessBuffer+0x158>)
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7ff fae4 	bl	8003a84 <ParseBuffer>
 80044bc:	0003      	movs	r3, r0
 80044be:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 80044c0:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <DMA_ProcessBuffer+0x144>)
 80044c2:	220e      	movs	r2, #14
 80044c4:	18ba      	adds	r2, r7, r2
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	701a      	strb	r2, [r3, #0]
    return status;
 80044ca:	230f      	movs	r3, #15
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	781b      	ldrb	r3, [r3, #0]
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b004      	add	sp, #16
 80044d6:	bdb0      	pop	{r4, r5, r7, pc}
 80044d8:	20002808 	.word	0x20002808
 80044dc:	2000088b 	.word	0x2000088b
 80044e0:	20000890 	.word	0x20000890
 80044e4:	20000a96 	.word	0x20000a96
 80044e8:	20000002 	.word	0x20000002
 80044ec:	2000088c 	.word	0x2000088c
 80044f0:	200004d8 	.word	0x200004d8

080044f4 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	0002      	movs	r2, r0
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	1dbb      	adds	r3, r7, #6
 8004502:	1c0a      	adds	r2, r1, #0
 8004504:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004506:	210f      	movs	r1, #15
 8004508:	187b      	adds	r3, r7, r1
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800450e:	1dbb      	adds	r3, r7, #6
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d105      	bne.n	8004522 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004516:	187b      	adds	r3, r7, r1
 8004518:	1dfa      	adds	r2, r7, #7
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	4251      	negs	r1, r2
 800451e:	414a      	adcs	r2, r1
 8004520:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004522:	1dbb      	adds	r3, r7, #6
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d107      	bne.n	800453a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800452a:	230f      	movs	r3, #15
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	1dfa      	adds	r2, r7, #7
 8004530:	7812      	ldrb	r2, [r2, #0]
 8004532:	3a02      	subs	r2, #2
 8004534:	4251      	negs	r1, r2
 8004536:	414a      	adcs	r2, r1
 8004538:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800453a:	1dbb      	adds	r3, r7, #6
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d107      	bne.n	8004552 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004542:	230f      	movs	r3, #15
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	1dfa      	adds	r2, r7, #7
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	3a05      	subs	r2, #5
 800454c:	4251      	negs	r1, r2
 800454e:	414a      	adcs	r2, r1
 8004550:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004552:	230f      	movs	r3, #15
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	781b      	ldrb	r3, [r3, #0]
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	b004      	add	sp, #16
 800455e:	bd80      	pop	{r7, pc}

08004560 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	0002      	movs	r2, r0
 8004568:	1dfb      	adds	r3, r7, #7
 800456a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 800456c:	230f      	movs	r3, #15
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004574:	1dfb      	adds	r3, r7, #7
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b0e      	cmp	r3, #14
 800457a:	d900      	bls.n	800457e <AT_Send+0x1e>
 800457c:	e136      	b.n	80047ec <AT_Send+0x28c>
 800457e:	009a      	lsls	r2, r3, #2
 8004580:	4b9e      	ldr	r3, [pc, #632]	@ (80047fc <AT_Send+0x29c>)
 8004582:	18d3      	adds	r3, r2, r3
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004588:	4b9d      	ldr	r3, [pc, #628]	@ (8004800 <AT_Send+0x2a0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	0018      	movs	r0, r3
 800458e:	f004 fa55 	bl	8008a3c <TimestampIsReached>
 8004592:	1e03      	subs	r3, r0, #0
 8004594:	d100      	bne.n	8004598 <AT_Send+0x38>
 8004596:	e128      	b.n	80047ea <AT_Send+0x28a>
    ATCommandSend = PollAwake();
 8004598:	230f      	movs	r3, #15
 800459a:	18fc      	adds	r4, r7, r3
 800459c:	f7ff fbb4 	bl	8003d08 <PollAwake>
 80045a0:	0003      	movs	r3, r0
 80045a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80045a4:	f004 fe98 	bl	80092d8 <HAL_GetTick>
 80045a8:	0003      	movs	r3, r0
 80045aa:	3332      	adds	r3, #50	@ 0x32
 80045ac:	001a      	movs	r2, r3
 80045ae:	4b94      	ldr	r3, [pc, #592]	@ (8004800 <AT_Send+0x2a0>)
 80045b0:	601a      	str	r2, [r3, #0]
  }
  break;
 80045b2:	e11a      	b.n	80047ea <AT_Send+0x28a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80045b4:	4a93      	ldr	r2, [pc, #588]	@ (8004804 <AT_Send+0x2a4>)
 80045b6:	4b94      	ldr	r3, [pc, #592]	@ (8004808 <AT_Send+0x2a8>)
 80045b8:	0019      	movs	r1, r3
 80045ba:	2003      	movs	r0, #3
 80045bc:	f004 fa94 	bl	8008ae8 <CreateLine>
    ATCommandSend = RFPower();
 80045c0:	230f      	movs	r3, #15
 80045c2:	18fc      	adds	r4, r7, r3
 80045c4:	f7ff fbc0 	bl	8003d48 <RFPower>
 80045c8:	0003      	movs	r3, r0
 80045ca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045cc:	f004 fe84 	bl	80092d8 <HAL_GetTick>
 80045d0:	0003      	movs	r3, r0
 80045d2:	330a      	adds	r3, #10
 80045d4:	001a      	movs	r2, r3
 80045d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004800 <AT_Send+0x2a0>)
 80045d8:	601a      	str	r2, [r3, #0]
    break;
 80045da:	e107      	b.n	80047ec <AT_Send+0x28c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 80045dc:	4a8b      	ldr	r2, [pc, #556]	@ (800480c <AT_Send+0x2ac>)
 80045de:	4b8a      	ldr	r3, [pc, #552]	@ (8004808 <AT_Send+0x2a8>)
 80045e0:	0019      	movs	r1, r3
 80045e2:	2003      	movs	r0, #3
 80045e4:	f004 fa80 	bl	8008ae8 <CreateLine>
    ATCommandSend = CheckRFPower();
 80045e8:	230f      	movs	r3, #15
 80045ea:	18fc      	adds	r4, r7, r3
 80045ec:	f7ff fbcc 	bl	8003d88 <CheckRFPower>
 80045f0:	0003      	movs	r3, r0
 80045f2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045f4:	f004 fe70 	bl	80092d8 <HAL_GetTick>
 80045f8:	0003      	movs	r3, r0
 80045fa:	330a      	adds	r3, #10
 80045fc:	001a      	movs	r2, r3
 80045fe:	4b80      	ldr	r3, [pc, #512]	@ (8004800 <AT_Send+0x2a0>)
 8004600:	601a      	str	r2, [r3, #0]
    break;
 8004602:	e0f3      	b.n	80047ec <AT_Send+0x28c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004604:	4a82      	ldr	r2, [pc, #520]	@ (8004810 <AT_Send+0x2b0>)
 8004606:	4b80      	ldr	r3, [pc, #512]	@ (8004808 <AT_Send+0x2a8>)
 8004608:	0019      	movs	r1, r3
 800460a:	2003      	movs	r0, #3
 800460c:	f004 fa6c 	bl	8008ae8 <CreateLine>
    ATCommandSend = ATRestore();
 8004610:	230f      	movs	r3, #15
 8004612:	18fc      	adds	r4, r7, r3
 8004614:	f7ff fbd8 	bl	8003dc8 <ATRestore>
 8004618:	0003      	movs	r3, r0
 800461a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800461c:	f004 fe5c 	bl	80092d8 <HAL_GetTick>
 8004620:	0003      	movs	r3, r0
 8004622:	3332      	adds	r3, #50	@ 0x32
 8004624:	001a      	movs	r2, r3
 8004626:	4b76      	ldr	r3, [pc, #472]	@ (8004800 <AT_Send+0x2a0>)
 8004628:	601a      	str	r2, [r3, #0]
    break;
 800462a:	e0df      	b.n	80047ec <AT_Send+0x28c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 800462c:	4a79      	ldr	r2, [pc, #484]	@ (8004814 <AT_Send+0x2b4>)
 800462e:	4b76      	ldr	r3, [pc, #472]	@ (8004808 <AT_Send+0x2a8>)
 8004630:	0019      	movs	r1, r3
 8004632:	2003      	movs	r0, #3
 8004634:	f004 fa58 	bl	8008ae8 <CreateLine>
    ATCommandSend = CWINIT();
 8004638:	230f      	movs	r3, #15
 800463a:	18fc      	adds	r4, r7, r3
 800463c:	f7ff fbe4 	bl	8003e08 <CWINIT>
 8004640:	0003      	movs	r3, r0
 8004642:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004644:	f004 fe48 	bl	80092d8 <HAL_GetTick>
 8004648:	0003      	movs	r3, r0
 800464a:	33f5      	adds	r3, #245	@ 0xf5
 800464c:	33ff      	adds	r3, #255	@ 0xff
 800464e:	001a      	movs	r2, r3
 8004650:	4b6b      	ldr	r3, [pc, #428]	@ (8004800 <AT_Send+0x2a0>)
 8004652:	601a      	str	r2, [r3, #0]
    break;
 8004654:	e0ca      	b.n	80047ec <AT_Send+0x28c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004656:	4a70      	ldr	r2, [pc, #448]	@ (8004818 <AT_Send+0x2b8>)
 8004658:	4b6b      	ldr	r3, [pc, #428]	@ (8004808 <AT_Send+0x2a8>)
 800465a:	0019      	movs	r1, r3
 800465c:	2003      	movs	r0, #3
 800465e:	f004 fa43 	bl	8008ae8 <CreateLine>
    ATCommandSend = CWMODE1();
 8004662:	230f      	movs	r3, #15
 8004664:	18fc      	adds	r4, r7, r3
 8004666:	f7ff fbef 	bl	8003e48 <CWMODE1>
 800466a:	0003      	movs	r3, r0
 800466c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800466e:	f004 fe33 	bl	80092d8 <HAL_GetTick>
 8004672:	0003      	movs	r3, r0
 8004674:	330a      	adds	r3, #10
 8004676:	001a      	movs	r2, r3
 8004678:	4b61      	ldr	r3, [pc, #388]	@ (8004800 <AT_Send+0x2a0>)
 800467a:	601a      	str	r2, [r3, #0]
    break;
 800467c:	e0b6      	b.n	80047ec <AT_Send+0x28c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 800467e:	4a67      	ldr	r2, [pc, #412]	@ (800481c <AT_Send+0x2bc>)
 8004680:	4b61      	ldr	r3, [pc, #388]	@ (8004808 <AT_Send+0x2a8>)
 8004682:	0019      	movs	r1, r3
 8004684:	2003      	movs	r0, #3
 8004686:	f004 fa2f 	bl	8008ae8 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800468a:	230f      	movs	r3, #15
 800468c:	18fc      	adds	r4, r7, r3
 800468e:	f7ff fbfb 	bl	8003e88 <CWAUTOCONN>
 8004692:	0003      	movs	r3, r0
 8004694:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004696:	f004 fe1f 	bl	80092d8 <HAL_GetTick>
 800469a:	0003      	movs	r3, r0
 800469c:	330a      	adds	r3, #10
 800469e:	001a      	movs	r2, r3
 80046a0:	4b57      	ldr	r3, [pc, #348]	@ (8004800 <AT_Send+0x2a0>)
 80046a2:	601a      	str	r2, [r3, #0]
    break;
 80046a4:	e0a2      	b.n	80047ec <AT_Send+0x28c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80046a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004820 <AT_Send+0x2c0>)
 80046a8:	4b57      	ldr	r3, [pc, #348]	@ (8004808 <AT_Send+0x2a8>)
 80046aa:	0019      	movs	r1, r3
 80046ac:	2003      	movs	r0, #3
 80046ae:	f004 fa1b 	bl	8008ae8 <CreateLine>
    ATCommandSend = CWJAP();
 80046b2:	230f      	movs	r3, #15
 80046b4:	18fc      	adds	r4, r7, r3
 80046b6:	f7ff fc07 	bl	8003ec8 <CWJAP>
 80046ba:	0003      	movs	r3, r0
 80046bc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80046be:	f004 fe0b 	bl	80092d8 <HAL_GetTick>
 80046c2:	0003      	movs	r3, r0
 80046c4:	3332      	adds	r3, #50	@ 0x32
 80046c6:	001a      	movs	r2, r3
 80046c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004800 <AT_Send+0x2a0>)
 80046ca:	601a      	str	r2, [r3, #0]
    break;
 80046cc:	e08e      	b.n	80047ec <AT_Send+0x28c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80046ce:	4a55      	ldr	r2, [pc, #340]	@ (8004824 <AT_Send+0x2c4>)
 80046d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004808 <AT_Send+0x2a8>)
 80046d2:	0019      	movs	r1, r3
 80046d4:	2003      	movs	r0, #3
 80046d6:	f004 fa07 	bl	8008ae8 <CreateLine>
    ATCommandSend = CWMODE3();
 80046da:	230f      	movs	r3, #15
 80046dc:	18fc      	adds	r4, r7, r3
 80046de:	f7ff fc73 	bl	8003fc8 <CWMODE3>
 80046e2:	0003      	movs	r3, r0
 80046e4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046e6:	f004 fdf7 	bl	80092d8 <HAL_GetTick>
 80046ea:	0003      	movs	r3, r0
 80046ec:	330a      	adds	r3, #10
 80046ee:	001a      	movs	r2, r3
 80046f0:	4b43      	ldr	r3, [pc, #268]	@ (8004800 <AT_Send+0x2a0>)
 80046f2:	601a      	str	r2, [r3, #0]
    break;
 80046f4:	e07a      	b.n	80047ec <AT_Send+0x28c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80046f6:	4a4c      	ldr	r2, [pc, #304]	@ (8004828 <AT_Send+0x2c8>)
 80046f8:	4b43      	ldr	r3, [pc, #268]	@ (8004808 <AT_Send+0x2a8>)
 80046fa:	0019      	movs	r1, r3
 80046fc:	2003      	movs	r0, #3
 80046fe:	f004 f9f3 	bl	8008ae8 <CreateLine>
    ATCommandSend = CWSAP();
 8004702:	230f      	movs	r3, #15
 8004704:	18fc      	adds	r4, r7, r3
 8004706:	f7ff fc7f 	bl	8004008 <CWSAP>
 800470a:	0003      	movs	r3, r0
 800470c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800470e:	f004 fde3 	bl	80092d8 <HAL_GetTick>
 8004712:	0003      	movs	r3, r0
 8004714:	330a      	adds	r3, #10
 8004716:	001a      	movs	r2, r3
 8004718:	4b39      	ldr	r3, [pc, #228]	@ (8004800 <AT_Send+0x2a0>)
 800471a:	601a      	str	r2, [r3, #0]
    break;
 800471c:	e066      	b.n	80047ec <AT_Send+0x28c>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 800471e:	4a43      	ldr	r2, [pc, #268]	@ (800482c <AT_Send+0x2cc>)
 8004720:	4b39      	ldr	r3, [pc, #228]	@ (8004808 <AT_Send+0x2a8>)
 8004722:	0019      	movs	r1, r3
 8004724:	2003      	movs	r0, #3
 8004726:	f004 f9df 	bl	8008ae8 <CreateLine>
    ATCommandSend = CIPMUX();
 800472a:	230f      	movs	r3, #15
 800472c:	18fc      	adds	r4, r7, r3
 800472e:	f7ff fc8b 	bl	8004048 <CIPMUX>
 8004732:	0003      	movs	r3, r0
 8004734:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004736:	f004 fdcf 	bl	80092d8 <HAL_GetTick>
 800473a:	0003      	movs	r3, r0
 800473c:	330a      	adds	r3, #10
 800473e:	001a      	movs	r2, r3
 8004740:	4b2f      	ldr	r3, [pc, #188]	@ (8004800 <AT_Send+0x2a0>)
 8004742:	601a      	str	r2, [r3, #0]
    break;
 8004744:	e052      	b.n	80047ec <AT_Send+0x28c>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 8004746:	4a37      	ldr	r2, [pc, #220]	@ (8004824 <AT_Send+0x2c4>)
 8004748:	4b2f      	ldr	r3, [pc, #188]	@ (8004808 <AT_Send+0x2a8>)
 800474a:	0019      	movs	r1, r3
 800474c:	2003      	movs	r0, #3
 800474e:	f004 f9cb 	bl	8008ae8 <CreateLine>
    ATCommandSend = WEBSERVER();
 8004752:	230f      	movs	r3, #15
 8004754:	18fc      	adds	r4, r7, r3
 8004756:	f7ff fc97 	bl	8004088 <WEBSERVER>
 800475a:	0003      	movs	r3, r0
 800475c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800475e:	f004 fdbb 	bl	80092d8 <HAL_GetTick>
 8004762:	0003      	movs	r3, r0
 8004764:	330a      	adds	r3, #10
 8004766:	001a      	movs	r2, r3
 8004768:	4b25      	ldr	r3, [pc, #148]	@ (8004800 <AT_Send+0x2a0>)
 800476a:	601a      	str	r2, [r3, #0]
    break;
 800476c:	e03e      	b.n	80047ec <AT_Send+0x28c>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 800476e:	4a2d      	ldr	r2, [pc, #180]	@ (8004824 <AT_Send+0x2c4>)
 8004770:	4b25      	ldr	r3, [pc, #148]	@ (8004808 <AT_Send+0x2a8>)
 8004772:	0019      	movs	r1, r3
 8004774:	2003      	movs	r0, #3
 8004776:	f004 f9b7 	bl	8008ae8 <CreateLine>
    ATCommandSend = HTTPCPOST();
 800477a:	230f      	movs	r3, #15
 800477c:	18fc      	adds	r4, r7, r3
 800477e:	f7ff fca3 	bl	80040c8 <HTTPCPOST>
 8004782:	0003      	movs	r3, r0
 8004784:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004786:	f004 fda7 	bl	80092d8 <HAL_GetTick>
 800478a:	0003      	movs	r3, r0
 800478c:	33f5      	adds	r3, #245	@ 0xf5
 800478e:	33ff      	adds	r3, #255	@ 0xff
 8004790:	001a      	movs	r2, r3
 8004792:	4b1b      	ldr	r3, [pc, #108]	@ (8004800 <AT_Send+0x2a0>)
 8004794:	601a      	str	r2, [r3, #0]
    break;
 8004796:	e029      	b.n	80047ec <AT_Send+0x28c>

  case AT_SENDDATA:
    Debug("Send the data");
 8004798:	4a25      	ldr	r2, [pc, #148]	@ (8004830 <AT_Send+0x2d0>)
 800479a:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <AT_Send+0x2a8>)
 800479c:	0019      	movs	r1, r3
 800479e:	2003      	movs	r0, #3
 80047a0:	f004 f9a2 	bl	8008ae8 <CreateLine>
    ATCommandSend = SENDDATA();
 80047a4:	230f      	movs	r3, #15
 80047a6:	18fc      	adds	r4, r7, r3
 80047a8:	f7ff fd2a 	bl	8004200 <SENDDATA>
 80047ac:	0003      	movs	r3, r0
 80047ae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80047b0:	f004 fd92 	bl	80092d8 <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	33f5      	adds	r3, #245	@ 0xf5
 80047b8:	33ff      	adds	r3, #255	@ 0xff
 80047ba:	001a      	movs	r2, r3
 80047bc:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <AT_Send+0x2a0>)
 80047be:	601a      	str	r2, [r3, #0]
    break;
 80047c0:	e014      	b.n	80047ec <AT_Send+0x28c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80047c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004834 <AT_Send+0x2d4>)
 80047c4:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <AT_Send+0x2a8>)
 80047c6:	0019      	movs	r1, r3
 80047c8:	2003      	movs	r0, #3
 80047ca:	f004 f98d 	bl	8008ae8 <CreateLine>
    ATCommandSend = SLEEP();
 80047ce:	230f      	movs	r3, #15
 80047d0:	18fc      	adds	r4, r7, r3
 80047d2:	f7ff fdc1 	bl	8004358 <SLEEP>
 80047d6:	0003      	movs	r3, r0
 80047d8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047da:	f004 fd7d 	bl	80092d8 <HAL_GetTick>
 80047de:	0003      	movs	r3, r0
 80047e0:	330a      	adds	r3, #10
 80047e2:	001a      	movs	r2, r3
 80047e4:	4b06      	ldr	r3, [pc, #24]	@ (8004800 <AT_Send+0x2a0>)
 80047e6:	601a      	str	r2, [r3, #0]
    break;
 80047e8:	e000      	b.n	80047ec <AT_Send+0x28c>
  break;
 80047ea:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80047ec:	230f      	movs	r3, #15
 80047ee:	18fb      	adds	r3, r7, r3
 80047f0:	781b      	ldrb	r3, [r3, #0]
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b005      	add	sp, #20
 80047f8:	bd90      	pop	{r4, r7, pc}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	0801a36c 	.word	0x0801a36c
 8004800:	2000088c 	.word	0x2000088c
 8004804:	08019bd0 	.word	0x08019bd0
 8004808:	08019878 	.word	0x08019878
 800480c:	08019be4 	.word	0x08019be4
 8004810:	08019bf8 	.word	0x08019bf8
 8004814:	08019c08 	.word	0x08019c08
 8004818:	08019c1c 	.word	0x08019c1c
 800481c:	08019c34 	.word	0x08019c34
 8004820:	08019c4c 	.word	0x08019c4c
 8004824:	08019c60 	.word	0x08019c60
 8004828:	08019c7c 	.word	0x08019c7c
 800482c:	08019c98 	.word	0x08019c98
 8004830:	08019cbc 	.word	0x08019cbc
 8004834:	08019ccc 	.word	0x08019ccc

08004838 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004838:	b590      	push	{r4, r7, lr}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800483e:	1dfb      	adds	r3, r7, #7
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004844:	4b79      	ldr	r3, [pc, #484]	@ (8004a2c <ESP_WakeTest+0x1f4>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b05      	cmp	r3, #5
 800484a:	d900      	bls.n	800484e <ESP_WakeTest+0x16>
 800484c:	e0d4      	b.n	80049f8 <ESP_WakeTest+0x1c0>
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	4b77      	ldr	r3, [pc, #476]	@ (8004a30 <ESP_WakeTest+0x1f8>)
 8004852:	18d3      	adds	r3, r2, r3
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004858:	4b76      	ldr	r3, [pc, #472]	@ (8004a34 <ESP_WakeTest+0x1fc>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2201      	movs	r2, #1
 800485e:	4053      	eors	r3, r2
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d036      	beq.n	80048d4 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004866:	2380      	movs	r3, #128	@ 0x80
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	4873      	ldr	r0, [pc, #460]	@ (8004a38 <ESP_WakeTest+0x200>)
 800486c:	2200      	movs	r2, #0
 800486e:	0019      	movs	r1, r3
 8004870:	f005 fee6 	bl	800a640 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004874:	2032      	movs	r0, #50	@ 0x32
 8004876:	f004 fd39 	bl	80092ec <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	486e      	ldr	r0, [pc, #440]	@ (8004a38 <ESP_WakeTest+0x200>)
 8004880:	2201      	movs	r2, #1
 8004882:	0019      	movs	r1, r3
 8004884:	f005 fedc 	bl	800a640 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004888:	200a      	movs	r0, #10
 800488a:	f004 fd2f 	bl	80092ec <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800488e:	4b6b      	ldr	r3, [pc, #428]	@ (8004a3c <ESP_WakeTest+0x204>)
 8004890:	2200      	movs	r2, #0
 8004892:	2101      	movs	r1, #1
 8004894:	0018      	movs	r0, r3
 8004896:	f005 fed3 	bl	800a640 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800489a:	200a      	movs	r0, #10
 800489c:	f004 fd26 	bl	80092ec <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80048a0:	4b66      	ldr	r3, [pc, #408]	@ (8004a3c <ESP_WakeTest+0x204>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	2102      	movs	r1, #2
 80048a6:	0018      	movs	r0, r3
 80048a8:	f005 feca 	bl	800a640 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80048ac:	200a      	movs	r0, #10
 80048ae:	f004 fd1d 	bl	80092ec <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80048b2:	4b62      	ldr	r3, [pc, #392]	@ (8004a3c <ESP_WakeTest+0x204>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	2101      	movs	r1, #1
 80048b8:	0018      	movs	r0, r3
 80048ba:	f005 fec1 	bl	800a640 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80048be:	f004 fd0b 	bl	80092d8 <HAL_GetTick>
 80048c2:	0003      	movs	r3, r0
 80048c4:	22af      	movs	r2, #175	@ 0xaf
 80048c6:	0092      	lsls	r2, r2, #2
 80048c8:	189a      	adds	r2, r3, r2
 80048ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004a40 <ESP_WakeTest+0x208>)
 80048cc:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80048ce:	4b59      	ldr	r3, [pc, #356]	@ (8004a34 <ESP_WakeTest+0x1fc>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80048d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a44 <ESP_WakeTest+0x20c>)
 80048d6:	21ff      	movs	r1, #255	@ 0xff
 80048d8:	0018      	movs	r0, r3
 80048da:	f7fe ff71 	bl	80037c0 <ESP_Receive>
 80048de:	1e03      	subs	r3, r0, #0
 80048e0:	d100      	bne.n	80048e4 <ESP_WakeTest+0xac>
 80048e2:	e099      	b.n	8004a18 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 80048e4:	4b51      	ldr	r3, [pc, #324]	@ (8004a2c <ESP_WakeTest+0x1f4>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80048ea:	e095      	b.n	8004a18 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80048ec:	4b54      	ldr	r3, [pc, #336]	@ (8004a40 <ESP_WakeTest+0x208>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f004 f8a3 	bl	8008a3c <TimestampIsReached>
 80048f6:	1e03      	subs	r3, r0, #0
 80048f8:	d100      	bne.n	80048fc <ESP_WakeTest+0xc4>
 80048fa:	e08f      	b.n	8004a1c <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 80048fc:	4b52      	ldr	r3, [pc, #328]	@ (8004a48 <ESP_WakeTest+0x210>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	1dfc      	adds	r4, r7, #7
 8004902:	0018      	movs	r0, r3
 8004904:	f7ff fe2c 	bl	8004560 <AT_Send>
 8004908:	0003      	movs	r3, r0
 800490a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800490c:	1dfb      	adds	r3, r7, #7
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d100      	bne.n	8004916 <ESP_WakeTest+0xde>
 8004914:	e082      	b.n	8004a1c <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 8004916:	4b45      	ldr	r3, [pc, #276]	@ (8004a2c <ESP_WakeTest+0x1f4>)
 8004918:	2202      	movs	r2, #2
 800491a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800491c:	e07e      	b.n	8004a1c <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800491e:	4b48      	ldr	r3, [pc, #288]	@ (8004a40 <ESP_WakeTest+0x208>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	0018      	movs	r0, r3
 8004924:	f004 f88a 	bl	8008a3c <TimestampIsReached>
 8004928:	1e03      	subs	r3, r0, #0
 800492a:	d100      	bne.n	800492e <ESP_WakeTest+0xf6>
 800492c:	e078      	b.n	8004a20 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800492e:	4b47      	ldr	r3, [pc, #284]	@ (8004a4c <ESP_WakeTest+0x214>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	0018      	movs	r0, r3
 8004934:	f7ff fd30 	bl	8004398 <DMA_ProcessBuffer>
 8004938:	0003      	movs	r3, r0
 800493a:	001a      	movs	r2, r3
 800493c:	4b44      	ldr	r3, [pc, #272]	@ (8004a50 <ESP_WakeTest+0x218>)
 800493e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004940:	4b43      	ldr	r3, [pc, #268]	@ (8004a50 <ESP_WakeTest+0x218>)
 8004942:	781a      	ldrb	r2, [r3, #0]
 8004944:	4b41      	ldr	r3, [pc, #260]	@ (8004a4c <ESP_WakeTest+0x214>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	1dbc      	adds	r4, r7, #6
 800494a:	0019      	movs	r1, r3
 800494c:	0010      	movs	r0, r2
 800494e:	f7ff fdd1 	bl	80044f4 <ATCompare>
 8004952:	0003      	movs	r3, r0
 8004954:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004956:	4b3e      	ldr	r3, [pc, #248]	@ (8004a50 <ESP_WakeTest+0x218>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d102      	bne.n	8004964 <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 800495e:	4b33      	ldr	r3, [pc, #204]	@ (8004a2c <ESP_WakeTest+0x1f4>)
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004964:	4b3a      	ldr	r3, [pc, #232]	@ (8004a50 <ESP_WakeTest+0x218>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b07      	cmp	r3, #7
 800496a:	d104      	bne.n	8004976 <ESP_WakeTest+0x13e>
          StartProg();
 800496c:	f7ff f858 	bl	8003a20 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004970:	4b2e      	ldr	r3, [pc, #184]	@ (8004a2c <ESP_WakeTest+0x1f4>)
 8004972:	2205      	movs	r2, #5
 8004974:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004976:	4b36      	ldr	r3, [pc, #216]	@ (8004a50 <ESP_WakeTest+0x218>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d109      	bne.n	8004992 <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 800497e:	f004 fcab 	bl	80092d8 <HAL_GetTick>
 8004982:	0003      	movs	r3, r0
 8004984:	3332      	adds	r3, #50	@ 0x32
 8004986:	001a      	movs	r2, r3
 8004988:	4b2d      	ldr	r3, [pc, #180]	@ (8004a40 <ESP_WakeTest+0x208>)
 800498a:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800498c:	4b27      	ldr	r3, [pc, #156]	@ (8004a2c <ESP_WakeTest+0x1f4>)
 800498e:	2201      	movs	r2, #1
 8004990:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004992:	1dbb      	adds	r3, r7, #6
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d042      	beq.n	8004a20 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 800499a:	4b24      	ldr	r3, [pc, #144]	@ (8004a2c <ESP_WakeTest+0x1f4>)
 800499c:	2203      	movs	r2, #3
 800499e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80049a0:	e03e      	b.n	8004a20 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 80049a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a54 <ESP_WakeTest+0x21c>)
 80049a4:	22fa      	movs	r2, #250	@ 0xfa
 80049a6:	0112      	lsls	r2, r2, #4
 80049a8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 80049aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004a54 <ESP_WakeTest+0x21c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 80049b0:	4b28      	ldr	r3, [pc, #160]	@ (8004a54 <ESP_WakeTest+0x21c>)
 80049b2:	22fa      	movs	r2, #250	@ 0xfa
 80049b4:	0112      	lsls	r2, r2, #4
 80049b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80049b8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a2c <ESP_WakeTest+0x1f4>)
 80049ba:	2204      	movs	r2, #4
 80049bc:	701a      	strb	r2, [r3, #0]

      break;
 80049be:	e030      	b.n	8004a22 <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 80049c0:	4b25      	ldr	r3, [pc, #148]	@ (8004a58 <ESP_WakeTest+0x220>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80049c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a34 <ESP_WakeTest+0x1fc>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80049cc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a3c <ESP_WakeTest+0x204>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	2101      	movs	r1, #1
 80049d2:	0018      	movs	r0, r3
 80049d4:	f005 fe34 	bl	800a640 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80049d8:	2380      	movs	r3, #128	@ 0x80
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4816      	ldr	r0, [pc, #88]	@ (8004a38 <ESP_WakeTest+0x200>)
 80049de:	2200      	movs	r2, #0
 80049e0:	0019      	movs	r1, r3
 80049e2:	f005 fe2d 	bl	800a640 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80049e6:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <ESP_WakeTest+0x204>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	2102      	movs	r1, #2
 80049ec:	0018      	movs	r0, r3
 80049ee:	f005 fe27 	bl	800a640 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80049f2:	f001 fc43 	bl	800627c <SetESPMeasurementDone>
      break;
 80049f6:	e014      	b.n	8004a22 <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 80049f8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <ESP_WakeTest+0x1f4>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
      break;
 80049fe:	e010      	b.n	8004a22 <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004a00:	4b14      	ldr	r3, [pc, #80]	@ (8004a54 <ESP_WakeTest+0x21c>)
 8004a02:	22fa      	movs	r2, #250	@ 0xfa
 8004a04:	0112      	lsls	r2, r2, #4
 8004a06:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004a08:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <ESP_WakeTest+0x21c>)
 8004a0a:	22fa      	movs	r2, #250	@ 0xfa
 8004a0c:	0112      	lsls	r2, r2, #4
 8004a0e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004a10:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <ESP_WakeTest+0x21c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004a16:	e004      	b.n	8004a22 <ESP_WakeTest+0x1ea>
      break;
 8004a18:	46c0      	nop			@ (mov r8, r8)
 8004a1a:	e002      	b.n	8004a22 <ESP_WakeTest+0x1ea>
      break;
 8004a1c:	46c0      	nop			@ (mov r8, r8)
 8004a1e:	e000      	b.n	8004a22 <ESP_WakeTest+0x1ea>
      break;
 8004a20:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b003      	add	sp, #12
 8004a28:	bd90      	pop	{r4, r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	20000a98 	.word	0x20000a98
 8004a30:	0801a3a8 	.word	0x0801a3a8
 8004a34:	200005d7 	.word	0x200005d7
 8004a38:	50000800 	.word	0x50000800
 8004a3c:	50001c00 	.word	0x50001c00
 8004a40:	2000088c 	.word	0x2000088c
 8004a44:	200004d8 	.word	0x200004d8
 8004a48:	20000a96 	.word	0x20000a96
 8004a4c:	20000a95 	.word	0x20000a95
 8004a50:	20000103 	.word	0x20000103
 8004a54:	40000400 	.word	0x40000400
 8004a58:	20000002 	.word	0x20000002

08004a5c <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004a62:	1dfb      	adds	r3, r7, #7
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004a68:	4bdc      	ldr	r3, [pc, #880]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b0b      	cmp	r3, #11
 8004a6e:	d900      	bls.n	8004a72 <ESP_Upkeep+0x16>
 8004a70:	e1a6      	b.n	8004dc0 <ESP_Upkeep+0x364>
 8004a72:	009a      	lsls	r2, r3, #2
 8004a74:	4bda      	ldr	r3, [pc, #872]	@ (8004de0 <ESP_Upkeep+0x384>)
 8004a76:	18d3      	adds	r3, r2, r3
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004a7c:	4bd7      	ldr	r3, [pc, #860]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
      break;
 8004a82:	e1de      	b.n	8004e42 <ESP_Upkeep+0x3e6>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004a84:	4bd7      	ldr	r3, [pc, #860]	@ (8004de4 <ESP_Upkeep+0x388>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4053      	eors	r3, r2
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d036      	beq.n	8004b00 <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	48d4      	ldr	r0, [pc, #848]	@ (8004de8 <ESP_Upkeep+0x38c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	f005 fdd0 	bl	800a640 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004aa0:	2032      	movs	r0, #50	@ 0x32
 8004aa2:	f004 fc23 	bl	80092ec <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004aa6:	2380      	movs	r3, #128	@ 0x80
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	48cf      	ldr	r0, [pc, #828]	@ (8004de8 <ESP_Upkeep+0x38c>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	0019      	movs	r1, r3
 8004ab0:	f005 fdc6 	bl	800a640 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ab4:	200a      	movs	r0, #10
 8004ab6:	f004 fc19 	bl	80092ec <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004aba:	4bcc      	ldr	r3, [pc, #816]	@ (8004dec <ESP_Upkeep+0x390>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	2101      	movs	r1, #1
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f005 fdbd 	bl	800a640 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ac6:	200a      	movs	r0, #10
 8004ac8:	f004 fc10 	bl	80092ec <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004acc:	4bc7      	ldr	r3, [pc, #796]	@ (8004dec <ESP_Upkeep+0x390>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f005 fdb4 	bl	800a640 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ad8:	200a      	movs	r0, #10
 8004ada:	f004 fc07 	bl	80092ec <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004ade:	4bc3      	ldr	r3, [pc, #780]	@ (8004dec <ESP_Upkeep+0x390>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f005 fdab 	bl	800a640 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004aea:	f004 fbf5 	bl	80092d8 <HAL_GetTick>
 8004aee:	0003      	movs	r3, r0
 8004af0:	22af      	movs	r2, #175	@ 0xaf
 8004af2:	0092      	lsls	r2, r2, #2
 8004af4:	189a      	adds	r2, r3, r2
 8004af6:	4bbe      	ldr	r3, [pc, #760]	@ (8004df0 <ESP_Upkeep+0x394>)
 8004af8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004afa:	4bba      	ldr	r3, [pc, #744]	@ (8004de4 <ESP_Upkeep+0x388>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004b00:	4bbc      	ldr	r3, [pc, #752]	@ (8004df4 <ESP_Upkeep+0x398>)
 8004b02:	21ff      	movs	r1, #255	@ 0xff
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7fe fe5b 	bl	80037c0 <ESP_Receive>
 8004b0a:	1e03      	subs	r3, r0, #0
 8004b0c:	d100      	bne.n	8004b10 <ESP_Upkeep+0xb4>
 8004b0e:	e15d      	b.n	8004dcc <ESP_Upkeep+0x370>
        EspState = ESP_STATE_MODE_SELECT;
 8004b10:	4bb2      	ldr	r3, [pc, #712]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004b12:	220b      	movs	r2, #11
 8004b14:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b16:	e159      	b.n	8004dcc <ESP_Upkeep+0x370>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 10);
 8004b18:	4bb7      	ldr	r3, [pc, #732]	@ (8004df8 <ESP_Upkeep+0x39c>)
 8004b1a:	220a      	movs	r2, #10
 8004b1c:	210f      	movs	r1, #15
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f011 ffa2 	bl	8016a68 <memset>
      if(!InitIsDone || WifiReset){
 8004b24:	4bb5      	ldr	r3, [pc, #724]	@ (8004dfc <ESP_Upkeep+0x3a0>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	4053      	eors	r3, r2
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <ESP_Upkeep+0xde>
 8004b32:	4bb3      	ldr	r3, [pc, #716]	@ (8004e00 <ESP_Upkeep+0x3a4>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01a      	beq.n	8004b70 <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 7);
 8004b3a:	4baf      	ldr	r3, [pc, #700]	@ (8004df8 <ESP_Upkeep+0x39c>)
 8004b3c:	4ab1      	ldr	r2, [pc, #708]	@ (8004e04 <ESP_Upkeep+0x3a8>)
 8004b3e:	6811      	ldr	r1, [r2, #0]
 8004b40:	6019      	str	r1, [r3, #0]
 8004b42:	8891      	ldrh	r1, [r2, #4]
 8004b44:	8099      	strh	r1, [r3, #4]
 8004b46:	7992      	ldrb	r2, [r2, #6]
 8004b48:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8004b4a:	4ba4      	ldr	r3, [pc, #656]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b50:	4bad      	ldr	r3, [pc, #692]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004b56:	4bad      	ldr	r3, [pc, #692]	@ (8004e0c <ESP_Upkeep+0x3b0>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004b5c:	4baa      	ldr	r3, [pc, #680]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	001a      	movs	r2, r3
 8004b62:	4ba5      	ldr	r3, [pc, #660]	@ (8004df8 <ESP_Upkeep+0x39c>)
 8004b64:	5c9a      	ldrb	r2, [r3, r2]
 8004b66:	4baa      	ldr	r3, [pc, #680]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004b68:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004b6a:	4baa      	ldr	r3, [pc, #680]	@ (8004e14 <ESP_Upkeep+0x3b8>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004b70:	4ba2      	ldr	r3, [pc, #648]	@ (8004dfc <ESP_Upkeep+0x3a0>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01f      	beq.n	8004bb8 <ESP_Upkeep+0x15c>
 8004b78:	4ba7      	ldr	r3, [pc, #668]	@ (8004e18 <ESP_Upkeep+0x3bc>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4053      	eors	r3, r2
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d018      	beq.n	8004bb8 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004b86:	4b9c      	ldr	r3, [pc, #624]	@ (8004df8 <ESP_Upkeep+0x39c>)
 8004b88:	4aa4      	ldr	r2, [pc, #656]	@ (8004e1c <ESP_Upkeep+0x3c0>)
 8004b8a:	6811      	ldr	r1, [r2, #0]
 8004b8c:	6019      	str	r1, [r3, #0]
 8004b8e:	8892      	ldrh	r2, [r2, #4]
 8004b90:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004b92:	4b92      	ldr	r3, [pc, #584]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004b94:	2204      	movs	r2, #4
 8004b96:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b98:	4b9b      	ldr	r3, [pc, #620]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004b9e:	4b9b      	ldr	r3, [pc, #620]	@ (8004e0c <ESP_Upkeep+0x3b0>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004ba4:	4b98      	ldr	r3, [pc, #608]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	001a      	movs	r2, r3
 8004baa:	4b93      	ldr	r3, [pc, #588]	@ (8004df8 <ESP_Upkeep+0x39c>)
 8004bac:	5c9a      	ldrb	r2, [r3, r2]
 8004bae:	4b98      	ldr	r3, [pc, #608]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004bb0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004bb2:	4b98      	ldr	r3, [pc, #608]	@ (8004e14 <ESP_Upkeep+0x3b8>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004bb8:	4b90      	ldr	r3, [pc, #576]	@ (8004dfc <ESP_Upkeep+0x3a0>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d100      	bne.n	8004bc2 <ESP_Upkeep+0x166>
 8004bc0:	e106      	b.n	8004dd0 <ESP_Upkeep+0x374>
 8004bc2:	4b95      	ldr	r3, [pc, #596]	@ (8004e18 <ESP_Upkeep+0x3bc>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d100      	bne.n	8004bcc <ESP_Upkeep+0x170>
 8004bca:	e101      	b.n	8004dd0 <ESP_Upkeep+0x374>
 8004bcc:	4b8c      	ldr	r3, [pc, #560]	@ (8004e00 <ESP_Upkeep+0x3a4>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4053      	eors	r3, r2
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d100      	bne.n	8004bdc <ESP_Upkeep+0x180>
 8004bda:	e0f9      	b.n	8004dd0 <ESP_Upkeep+0x374>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004bdc:	4b86      	ldr	r3, [pc, #536]	@ (8004df8 <ESP_Upkeep+0x39c>)
 8004bde:	4a90      	ldr	r2, [pc, #576]	@ (8004e20 <ESP_Upkeep+0x3c4>)
 8004be0:	8811      	ldrh	r1, [r2, #0]
 8004be2:	8019      	strh	r1, [r3, #0]
 8004be4:	7892      	ldrb	r2, [r2, #2]
 8004be6:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004be8:	4b7c      	ldr	r3, [pc, #496]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004bea:	2204      	movs	r2, #4
 8004bec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004bee:	4b86      	ldr	r3, [pc, #536]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004bf4:	4b85      	ldr	r3, [pc, #532]	@ (8004e0c <ESP_Upkeep+0x3b0>)
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	05db      	lsls	r3, r3, #23
 8004bfe:	4a89      	ldr	r2, [pc, #548]	@ (8004e24 <ESP_Upkeep+0x3c8>)
 8004c00:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004c02:	4b81      	ldr	r3, [pc, #516]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	001a      	movs	r2, r3
 8004c08:	4b7b      	ldr	r3, [pc, #492]	@ (8004df8 <ESP_Upkeep+0x39c>)
 8004c0a:	5c9a      	ldrb	r2, [r3, r2]
 8004c0c:	4b80      	ldr	r3, [pc, #512]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004c0e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c10:	4b80      	ldr	r3, [pc, #512]	@ (8004e14 <ESP_Upkeep+0x3b8>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004c16:	e0db      	b.n	8004dd0 <ESP_Upkeep+0x374>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004c18:	4b7d      	ldr	r3, [pc, #500]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	1dfc      	adds	r4, r7, #7
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7ff fc9e 	bl	8004560 <AT_Send>
 8004c24:	0003      	movs	r3, r0
 8004c26:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004c28:	1dfb      	adds	r3, r7, #7
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d100      	bne.n	8004c32 <ESP_Upkeep+0x1d6>
 8004c30:	e0d0      	b.n	8004dd4 <ESP_Upkeep+0x378>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004c32:	4b6a      	ldr	r3, [pc, #424]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004c34:	2203      	movs	r2, #3
 8004c36:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004c38:	e0cc      	b.n	8004dd4 <ESP_Upkeep+0x378>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8004df0 <ESP_Upkeep+0x394>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f003 fefc 	bl	8008a3c <TimestampIsReached>
 8004c44:	1e03      	subs	r3, r0, #0
 8004c46:	d100      	bne.n	8004c4a <ESP_Upkeep+0x1ee>
 8004c48:	e0c6      	b.n	8004dd8 <ESP_Upkeep+0x37c>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004c4a:	4b72      	ldr	r3, [pc, #456]	@ (8004e14 <ESP_Upkeep+0x3b8>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7ff fba2 	bl	8004398 <DMA_ProcessBuffer>
 8004c54:	0003      	movs	r3, r0
 8004c56:	001a      	movs	r2, r3
 8004c58:	4b73      	ldr	r3, [pc, #460]	@ (8004e28 <ESP_Upkeep+0x3cc>)
 8004c5a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004c5c:	4b72      	ldr	r3, [pc, #456]	@ (8004e28 <ESP_Upkeep+0x3cc>)
 8004c5e:	781a      	ldrb	r2, [r3, #0]
 8004c60:	4b6c      	ldr	r3, [pc, #432]	@ (8004e14 <ESP_Upkeep+0x3b8>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	1dbc      	adds	r4, r7, #6
 8004c66:	0019      	movs	r1, r3
 8004c68:	0010      	movs	r0, r2
 8004c6a:	f7ff fc43 	bl	80044f4 <ATCompare>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004c72:	4b6d      	ldr	r3, [pc, #436]	@ (8004e28 <ESP_Upkeep+0x3cc>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d102      	bne.n	8004c80 <ESP_Upkeep+0x224>
          EspState = ESP_STATE_SEND;
 8004c7a:	4b58      	ldr	r3, [pc, #352]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004c80:	4b69      	ldr	r3, [pc, #420]	@ (8004e28 <ESP_Upkeep+0x3cc>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d106      	bne.n	8004c96 <ESP_Upkeep+0x23a>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004c88:	f004 fb26 	bl	80092d8 <HAL_GetTick>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	330a      	adds	r3, #10
 8004c90:	001a      	movs	r2, r3
 8004c92:	4b57      	ldr	r3, [pc, #348]	@ (8004df0 <ESP_Upkeep+0x394>)
 8004c94:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004c96:	4b64      	ldr	r3, [pc, #400]	@ (8004e28 <ESP_Upkeep+0x3cc>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d116      	bne.n	8004ccc <ESP_Upkeep+0x270>
          if(ATCommand != AT_SENDDATA){
 8004c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b0d      	cmp	r3, #13
 8004ca4:	d003      	beq.n	8004cae <ESP_Upkeep+0x252>
            EspState = ESP_STATE_SEND;
 8004ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004ca8:	2204      	movs	r2, #4
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	e00e      	b.n	8004ccc <ESP_Upkeep+0x270>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004cae:	4b58      	ldr	r3, [pc, #352]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004cb0:	220c      	movs	r2, #12
 8004cb2:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004cb4:	4b54      	ldr	r3, [pc, #336]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	4b52      	ldr	r3, [pc, #328]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004cbe:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004cc0:	4b54      	ldr	r3, [pc, #336]	@ (8004e14 <ESP_Upkeep+0x3b8>)
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004cc6:	4b45      	ldr	r3, [pc, #276]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004cc8:	2204      	movs	r2, #4
 8004cca:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d100      	bne.n	8004cd6 <ESP_Upkeep+0x27a>
 8004cd4:	e080      	b.n	8004dd8 <ESP_Upkeep+0x37c>
          EspState = ESP_STATE_NEXT_AT;
 8004cd6:	4b41      	ldr	r3, [pc, #260]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004cd8:	2205      	movs	r2, #5
 8004cda:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004cdc:	e07c      	b.n	8004dd8 <ESP_Upkeep+0x37c>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004cde:	4b4a      	ldr	r3, [pc, #296]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	4b48      	ldr	r3, [pc, #288]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004ce8:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004cea:	4b47      	ldr	r3, [pc, #284]	@ (8004e08 <ESP_Upkeep+0x3ac>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	001a      	movs	r2, r3
 8004cf0:	4b41      	ldr	r3, [pc, #260]	@ (8004df8 <ESP_Upkeep+0x39c>)
 8004cf2:	5c9a      	ldrb	r2, [r3, r2]
 8004cf4:	4b46      	ldr	r3, [pc, #280]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004cf6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004cf8:	4b45      	ldr	r3, [pc, #276]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d102      	bne.n	8004d06 <ESP_Upkeep+0x2aa>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004d00:	4b44      	ldr	r3, [pc, #272]	@ (8004e14 <ESP_Upkeep+0x3b8>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004d06:	4b42      	ldr	r3, [pc, #264]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b0c      	cmp	r3, #12
 8004d0c:	d102      	bne.n	8004d14 <ESP_Upkeep+0x2b8>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004d0e:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <ESP_Upkeep+0x3b8>)
 8004d10:	2202      	movs	r2, #2
 8004d12:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004d14:	4b3e      	ldr	r3, [pc, #248]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d006      	beq.n	8004d2a <ESP_Upkeep+0x2ce>
 8004d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d002      	beq.n	8004d2a <ESP_Upkeep+0x2ce>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d24:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <ESP_Upkeep+0x3b8>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004d30:	4b37      	ldr	r3, [pc, #220]	@ (8004e10 <ESP_Upkeep+0x3b4>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b0f      	cmp	r3, #15
 8004d36:	d000      	beq.n	8004d3a <ESP_Upkeep+0x2de>
 8004d38:	e080      	b.n	8004e3c <ESP_Upkeep+0x3e0>
        if(Mode == AT_MODE_SEND){
 8004d3a:	4b34      	ldr	r3, [pc, #208]	@ (8004e0c <ESP_Upkeep+0x3b0>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d10b      	bne.n	8004d5a <ESP_Upkeep+0x2fe>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004d42:	f004 fac9 	bl	80092d8 <HAL_GetTick>
 8004d46:	0003      	movs	r3, r0
 8004d48:	4a38      	ldr	r2, [pc, #224]	@ (8004e2c <ESP_Upkeep+0x3d0>)
 8004d4a:	189a      	adds	r2, r3, r2
 8004d4c:	4b28      	ldr	r3, [pc, #160]	@ (8004df0 <ESP_Upkeep+0x394>)
 8004d4e:	601a      	str	r2, [r3, #0]
          TIM2 -> CCR4 = 4000;
 8004d50:	2380      	movs	r3, #128	@ 0x80
 8004d52:	05db      	lsls	r3, r3, #23
 8004d54:	22fa      	movs	r2, #250	@ 0xfa
 8004d56:	0112      	lsls	r2, r2, #4
 8004d58:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        EspState = ESP_STATE_RESET;
 8004d5a:	4b20      	ldr	r3, [pc, #128]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004d5c:	2209      	movs	r2, #9
 8004d5e:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004d60:	e06c      	b.n	8004e3c <ESP_Upkeep+0x3e0>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 8004d62:	4b23      	ldr	r3, [pc, #140]	@ (8004df0 <ESP_Upkeep+0x394>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	0018      	movs	r0, r3
 8004d68:	f003 fe68 	bl	8008a3c <TimestampIsReached>
 8004d6c:	1e03      	subs	r3, r0, #0
 8004d6e:	d067      	beq.n	8004e40 <ESP_Upkeep+0x3e4>
        if(Mode == AT_MODE_INIT){
 8004d70:	4b26      	ldr	r3, [pc, #152]	@ (8004e0c <ESP_Upkeep+0x3b0>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <ESP_Upkeep+0x322>
          InitIsDone = true;
 8004d78:	4b20      	ldr	r3, [pc, #128]	@ (8004dfc <ESP_Upkeep+0x3a0>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004d7e:	4b23      	ldr	r3, [pc, #140]	@ (8004e0c <ESP_Upkeep+0x3b0>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d102      	bne.n	8004d8c <ESP_Upkeep+0x330>
          ConnectionMade = true;
 8004d86:	4b24      	ldr	r3, [pc, #144]	@ (8004e18 <ESP_Upkeep+0x3bc>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	701a      	strb	r2, [r3, #0]
        }
        TIM2 -> CCR1 = 40000;
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	05db      	lsls	r3, r3, #23
 8004d90:	4a27      	ldr	r2, [pc, #156]	@ (8004e30 <ESP_Upkeep+0x3d4>)
 8004d92:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2 -> CCR3 = 40000;
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	05db      	lsls	r3, r3, #23
 8004d98:	4a25      	ldr	r2, [pc, #148]	@ (8004e30 <ESP_Upkeep+0x3d4>)
 8004d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2 -> CCR4 = 40000;
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	05db      	lsls	r3, r3, #23
 8004da0:	4a23      	ldr	r2, [pc, #140]	@ (8004e30 <ESP_Upkeep+0x3d4>)
 8004da2:	641a      	str	r2, [r3, #64]	@ 0x40
        EspState = ESP_STATE_MODE_SELECT;
 8004da4:	4b0d      	ldr	r3, [pc, #52]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004da6:	220b      	movs	r2, #11
 8004da8:	701a      	strb	r2, [r3, #0]
      }

      break;
 8004daa:	e049      	b.n	8004e40 <ESP_Upkeep+0x3e4>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004dac:	4a21      	ldr	r2, [pc, #132]	@ (8004e34 <ESP_Upkeep+0x3d8>)
 8004dae:	4b22      	ldr	r3, [pc, #136]	@ (8004e38 <ESP_Upkeep+0x3dc>)
 8004db0:	0019      	movs	r1, r3
 8004db2:	2003      	movs	r0, #3
 8004db4:	f003 fe98 	bl	8008ae8 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004db8:	4b08      	ldr	r3, [pc, #32]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004dba:	2202      	movs	r2, #2
 8004dbc:	701a      	strb	r2, [r3, #0]
      break;
 8004dbe:	e040      	b.n	8004e42 <ESP_Upkeep+0x3e6>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 8004dc0:	4b06      	ldr	r3, [pc, #24]	@ (8004ddc <ESP_Upkeep+0x380>)
 8004dc2:	2207      	movs	r2, #7
 8004dc4:	701a      	strb	r2, [r3, #0]
      break;
 8004dc6:	e03c      	b.n	8004e42 <ESP_Upkeep+0x3e6>
      break;
 8004dc8:	46c0      	nop			@ (mov r8, r8)
 8004dca:	e03a      	b.n	8004e42 <ESP_Upkeep+0x3e6>
      break;
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	e038      	b.n	8004e42 <ESP_Upkeep+0x3e6>
    break;
 8004dd0:	46c0      	nop			@ (mov r8, r8)
 8004dd2:	e036      	b.n	8004e42 <ESP_Upkeep+0x3e6>
         break;
 8004dd4:	46c0      	nop			@ (mov r8, r8)
 8004dd6:	e034      	b.n	8004e42 <ESP_Upkeep+0x3e6>
      break;
 8004dd8:	46c0      	nop			@ (mov r8, r8)
 8004dda:	e032      	b.n	8004e42 <ESP_Upkeep+0x3e6>
 8004ddc:	20000102 	.word	0x20000102
 8004de0:	0801a3c0 	.word	0x0801a3c0
 8004de4:	200005d7 	.word	0x200005d7
 8004de8:	50000800 	.word	0x50000800
 8004dec:	50001c00 	.word	0x50001c00
 8004df0:	2000088c 	.word	0x2000088c
 8004df4:	200004d8 	.word	0x200004d8
 8004df8:	20000880 	.word	0x20000880
 8004dfc:	200005d8 	.word	0x200005d8
 8004e00:	200005d9 	.word	0x200005d9
 8004e04:	200000f0 	.word	0x200000f0
 8004e08:	2000088a 	.word	0x2000088a
 8004e0c:	20000a97 	.word	0x20000a97
 8004e10:	20000a96 	.word	0x20000a96
 8004e14:	20000a95 	.word	0x20000a95
 8004e18:	200005da 	.word	0x200005da
 8004e1c:	200000fc 	.word	0x200000fc
 8004e20:	200000f8 	.word	0x200000f8
 8004e24:	00000bb8 	.word	0x00000bb8
 8004e28:	20000104 	.word	0x20000104
 8004e2c:	000493e0 	.word	0x000493e0
 8004e30:	00009c40 	.word	0x00009c40
 8004e34:	08019cf0 	.word	0x08019cf0
 8004e38:	08019878 	.word	0x08019878
    break;
 8004e3c:	46c0      	nop			@ (mov r8, r8)
 8004e3e:	e000      	b.n	8004e42 <ESP_Upkeep+0x3e6>
      break;
 8004e40:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b003      	add	sp, #12
 8004e48:	bd90      	pop	{r4, r7, pc}
 8004e4a:	46c0      	nop			@ (mov r8, r8)

08004e4c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004e54:	4b09      	ldr	r3, [pc, #36]	@ (8004e7c <I2CSensors_Init+0x30>)
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004e5a:	4a09      	ldr	r2, [pc, #36]	@ (8004e80 <I2CSensors_Init+0x34>)
 8004e5c:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <I2CSensors_Init+0x38>)
 8004e5e:	0011      	movs	r1, r2
 8004e60:	0018      	movs	r0, r3
 8004e62:	f000 faeb 	bl	800543c <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004e66:	4a06      	ldr	r2, [pc, #24]	@ (8004e80 <I2CSensors_Init+0x34>)
 8004e68:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <I2CSensors_Init+0x38>)
 8004e6a:	0011      	movs	r1, r2
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f000 f96d 	bl	800514c <Gas_Init>
}
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b002      	add	sp, #8
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	20000a9c 	.word	0x20000a9c
 8004e80:	08004edd 	.word	0x08004edd
 8004e84:	08004e89 	.word	0x08004e89

08004e88 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004e88:	b5b0      	push	{r4, r5, r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6039      	str	r1, [r7, #0]
 8004e90:	0011      	movs	r1, r2
 8004e92:	1dfb      	adds	r3, r7, #7
 8004e94:	1c02      	adds	r2, r0, #0
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	1dbb      	adds	r3, r7, #6
 8004e9a:	1c0a      	adds	r2, r1, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed8 <ReadI2C+0x50>)
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	1dfb      	adds	r3, r7, #7
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	18db      	adds	r3, r3, r3
 8004eaa:	b299      	uxth	r1, r3
 8004eac:	1dbb      	adds	r3, r7, #6
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	250f      	movs	r5, #15
 8004eb4:	197c      	adds	r4, r7, r5
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	f005 fd7c 	bl	800a9b4 <HAL_I2C_Master_Receive_DMA>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004ec0:	197b      	adds	r3, r7, r5
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <ReadI2C+0x44>
        return false;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e000      	b.n	8004ece <ReadI2C+0x46>
    }
    return true;
 8004ecc:	2301      	movs	r3, #1
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b004      	add	sp, #16
 8004ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	20000a9c 	.word	0x20000a9c

08004edc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004edc:	b5b0      	push	{r4, r5, r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6039      	str	r1, [r7, #0]
 8004ee4:	0011      	movs	r1, r2
 8004ee6:	1dfb      	adds	r3, r7, #7
 8004ee8:	1c02      	adds	r2, r0, #0
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	1dbb      	adds	r3, r7, #6
 8004eee:	1c0a      	adds	r2, r1, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f2c <WriteI2C+0x50>)
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	1dfb      	adds	r3, r7, #7
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	18db      	adds	r3, r3, r3
 8004efe:	b299      	uxth	r1, r3
 8004f00:	1dbb      	adds	r3, r7, #6
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	250f      	movs	r5, #15
 8004f08:	197c      	adds	r4, r7, r5
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	f005 fc4c 	bl	800a7a8 <HAL_I2C_Master_Transmit_DMA>
 8004f10:	0003      	movs	r3, r0
 8004f12:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004f14:	197b      	adds	r3, r7, r5
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <WriteI2C+0x44>
        return false;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e000      	b.n	8004f22 <WriteI2C+0x46>
    }
    return true;
 8004f20:	2301      	movs	r3, #1
}
 8004f22:	0018      	movs	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	b004      	add	sp, #16
 8004f28:	bdb0      	pop	{r4, r5, r7, pc}
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	20000a9c 	.word	0x20000a9c

08004f30 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f36:	003b      	movs	r3, r7
 8004f38:	0018      	movs	r0, r3
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	001a      	movs	r2, r3
 8004f3e:	2100      	movs	r1, #0
 8004f40:	f011 fd92 	bl	8016a68 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004f44:	4b30      	ldr	r3, [pc, #192]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f46:	4a31      	ldr	r2, [pc, #196]	@ (800500c <MX_ADC_Init+0xdc>)
 8004f48:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004f50:	4b2d      	ldr	r3, [pc, #180]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f52:	22c0      	movs	r2, #192	@ 0xc0
 8004f54:	0612      	lsls	r2, r2, #24
 8004f56:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004f58:	4b2b      	ldr	r3, [pc, #172]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004f64:	4b28      	ldr	r3, [pc, #160]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f6a:	4b27      	ldr	r3, [pc, #156]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004f70:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f72:	2220      	movs	r2, #32
 8004f74:	2100      	movs	r1, #0
 8004f76:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004f78:	4b23      	ldr	r3, [pc, #140]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f7a:	2221      	movs	r2, #33	@ 0x21
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f80:	4b21      	ldr	r3, [pc, #132]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f86:	4b20      	ldr	r3, [pc, #128]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f88:	22c2      	movs	r2, #194	@ 0xc2
 8004f8a:	32ff      	adds	r2, #255	@ 0xff
 8004f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f90:	222c      	movs	r2, #44	@ 0x2c
 8004f92:	2100      	movs	r1, #0
 8004f94:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f96:	4b1c      	ldr	r3, [pc, #112]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f98:	2204      	movs	r2, #4
 8004f9a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004fa2:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004fa8:	4b17      	ldr	r3, [pc, #92]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004fae:	4b16      	ldr	r3, [pc, #88]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004fb4:	4b14      	ldr	r3, [pc, #80]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f004 f9da 	bl	8009370 <HAL_ADC_Init>
 8004fbc:	1e03      	subs	r3, r0, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004fc0:	f000 fdbe 	bl	8005b40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004fc4:	003b      	movs	r3, r7
 8004fc6:	4a12      	ldr	r2, [pc, #72]	@ (8005010 <MX_ADC_Init+0xe0>)
 8004fc8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004fca:	003b      	movs	r3, r7
 8004fcc:	2280      	movs	r2, #128	@ 0x80
 8004fce:	0152      	lsls	r2, r2, #5
 8004fd0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fd2:	003a      	movs	r2, r7
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f004 fc39 	bl	8009850 <HAL_ADC_ConfigChannel>
 8004fde:	1e03      	subs	r3, r0, #0
 8004fe0:	d001      	beq.n	8004fe6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004fe2:	f000 fdad 	bl	8005b40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004fe6:	003b      	movs	r3, r7
 8004fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8005014 <MX_ADC_Init+0xe4>)
 8004fea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fec:	003a      	movs	r2, r7
 8004fee:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <MX_ADC_Init+0xd8>)
 8004ff0:	0011      	movs	r1, r2
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f004 fc2c 	bl	8009850 <HAL_ADC_ConfigChannel>
 8004ff8:	1e03      	subs	r3, r0, #0
 8004ffa:	d001      	beq.n	8005000 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004ffc:	f000 fda0 	bl	8005b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005000:	46c0      	nop			@ (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b002      	add	sp, #8
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000aa0 	.word	0x20000aa0
 800500c:	40012400 	.word	0x40012400
 8005010:	38004000 	.word	0x38004000
 8005014:	3c008000 	.word	0x3c008000

08005018 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b089      	sub	sp, #36	@ 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005020:	240c      	movs	r4, #12
 8005022:	193b      	adds	r3, r7, r4
 8005024:	0018      	movs	r0, r3
 8005026:	2314      	movs	r3, #20
 8005028:	001a      	movs	r2, r3
 800502a:	2100      	movs	r1, #0
 800502c:	f011 fd1c 	bl	8016a68 <memset>
  if(adcHandle->Instance==ADC1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a14      	ldr	r2, [pc, #80]	@ (8005088 <HAL_ADC_MspInit+0x70>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d121      	bne.n	800507e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800503a:	4b14      	ldr	r3, [pc, #80]	@ (800508c <HAL_ADC_MspInit+0x74>)
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	4b13      	ldr	r3, [pc, #76]	@ (800508c <HAL_ADC_MspInit+0x74>)
 8005040:	2180      	movs	r1, #128	@ 0x80
 8005042:	0089      	lsls	r1, r1, #2
 8005044:	430a      	orrs	r2, r1
 8005046:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005048:	4b10      	ldr	r3, [pc, #64]	@ (800508c <HAL_ADC_MspInit+0x74>)
 800504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504c:	4b0f      	ldr	r3, [pc, #60]	@ (800508c <HAL_ADC_MspInit+0x74>)
 800504e:	2104      	movs	r1, #4
 8005050:	430a      	orrs	r2, r1
 8005052:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005054:	4b0d      	ldr	r3, [pc, #52]	@ (800508c <HAL_ADC_MspInit+0x74>)
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	2204      	movs	r2, #4
 800505a:	4013      	ands	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005060:	193b      	adds	r3, r7, r4
 8005062:	2230      	movs	r2, #48	@ 0x30
 8005064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005066:	193b      	adds	r3, r7, r4
 8005068:	2203      	movs	r2, #3
 800506a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	193b      	adds	r3, r7, r4
 800506e:	2200      	movs	r2, #0
 8005070:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005072:	193b      	adds	r3, r7, r4
 8005074:	4a06      	ldr	r2, [pc, #24]	@ (8005090 <HAL_ADC_MspInit+0x78>)
 8005076:	0019      	movs	r1, r3
 8005078:	0010      	movs	r0, r2
 800507a:	f005 f881 	bl	800a180 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	46bd      	mov	sp, r7
 8005082:	b009      	add	sp, #36	@ 0x24
 8005084:	bd90      	pop	{r4, r7, pc}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	40012400 	.word	0x40012400
 800508c:	40021000 	.word	0x40021000
 8005090:	50000800 	.word	0x50000800

08005094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800509a:	4b10      	ldr	r3, [pc, #64]	@ (80050dc <MX_DMA_Init+0x48>)
 800509c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800509e:	4b0f      	ldr	r3, [pc, #60]	@ (80050dc <MX_DMA_Init+0x48>)
 80050a0:	2101      	movs	r1, #1
 80050a2:	430a      	orrs	r2, r1
 80050a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80050a6:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <MX_DMA_Init+0x48>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050aa:	2201      	movs	r2, #1
 80050ac:	4013      	ands	r3, r2
 80050ae:	607b      	str	r3, [r7, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	200a      	movs	r0, #10
 80050b8:	f004 fd84 	bl	8009bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80050bc:	200a      	movs	r0, #10
 80050be:	f004 fd96 	bl	8009bee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80050c2:	2200      	movs	r2, #0
 80050c4:	2103      	movs	r1, #3
 80050c6:	200b      	movs	r0, #11
 80050c8:	f004 fd7c 	bl	8009bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80050cc:	200b      	movs	r0, #11
 80050ce:	f004 fd8e 	bl	8009bee <HAL_NVIC_EnableIRQ>

}
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b002      	add	sp, #8
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	40021000 	.word	0x40021000

080050e0 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80050ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005120 <Gadget_Init+0x40>)
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	f001 f875 	bl	80061e0 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f000 fd93 	bl	8005c28 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	0018      	movs	r0, r3
 8005106:	f7fe fafd 	bl	8003704 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 800510a:	4a06      	ldr	r2, [pc, #24]	@ (8005124 <Gadget_Init+0x44>)
 800510c:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <Gadget_Init+0x48>)
 800510e:	0019      	movs	r1, r3
 8005110:	2003      	movs	r0, #3
 8005112:	f003 fce9 	bl	8008ae8 <CreateLine>
}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	b004      	add	sp, #16
 800511c:	bd80      	pop	{r7, pc}
 800511e:	46c0      	nop			@ (mov r8, r8)
 8005120:	20000108 	.word	0x20000108
 8005124:	08019d04 	.word	0x08019d04
 8005128:	08019d18 	.word	0x08019d18

0800512c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  Meas_Test();
 8005130:	f000 febe 	bl	8005eb0 <Meas_Test>
}
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <UpkeepGadget>:

void UpkeepGadget() {
 800513a:	b580      	push	{r7, lr}
 800513c:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 800513e:	f000 ffaf 	bl	80060a0 <Meas_Upkeep>
  Mic_Upkeep();
 8005142:	f000 ff61 	bl	8006008 <Mic_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	0011      	movs	r1, r2
 800515c:	0018      	movs	r0, r3
 800515e:	f002 fbd1 	bl	8007904 <SGP_Init>
}
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	46bd      	mov	sp, r7
 8005166:	b002      	add	sp, #8
 8005168:	bd80      	pop	{r7, pc}

0800516a <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 800516a:	b580      	push	{r7, lr}
 800516c:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 800516e:	f002 fbe3 	bl	8007938 <SGP_StartMeasurement>
}
 8005172:	46c0      	nop			@ (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	0018      	movs	r0, r3
 8005184:	f002 fc48 	bl	8007a18 <SGP_GetMeasurementValues>
 8005188:	0003      	movs	r3, r0
}
 800518a:	0018      	movs	r0, r3
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}

08005192 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8005192:	b580      	push	{r7, lr}
 8005194:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8005196:	f002 fe5d 	bl	8007e54 <SGP_DeviceConnected>
 800519a:	0003      	movs	r3, r0
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b08b      	sub	sp, #44	@ 0x2c
 80051a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051aa:	2414      	movs	r4, #20
 80051ac:	193b      	adds	r3, r7, r4
 80051ae:	0018      	movs	r0, r3
 80051b0:	2314      	movs	r3, #20
 80051b2:	001a      	movs	r2, r3
 80051b4:	2100      	movs	r1, #0
 80051b6:	f011 fc57 	bl	8016a68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ba:	4b70      	ldr	r3, [pc, #448]	@ (800537c <MX_GPIO_Init+0x1d8>)
 80051bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051be:	4b6f      	ldr	r3, [pc, #444]	@ (800537c <MX_GPIO_Init+0x1d8>)
 80051c0:	2104      	movs	r1, #4
 80051c2:	430a      	orrs	r2, r1
 80051c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051c6:	4b6d      	ldr	r3, [pc, #436]	@ (800537c <MX_GPIO_Init+0x1d8>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	2204      	movs	r2, #4
 80051cc:	4013      	ands	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051d2:	4b6a      	ldr	r3, [pc, #424]	@ (800537c <MX_GPIO_Init+0x1d8>)
 80051d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d6:	4b69      	ldr	r3, [pc, #420]	@ (800537c <MX_GPIO_Init+0x1d8>)
 80051d8:	2180      	movs	r1, #128	@ 0x80
 80051da:	430a      	orrs	r2, r1
 80051dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051de:	4b67      	ldr	r3, [pc, #412]	@ (800537c <MX_GPIO_Init+0x1d8>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	2280      	movs	r2, #128	@ 0x80
 80051e4:	4013      	ands	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ea:	4b64      	ldr	r3, [pc, #400]	@ (800537c <MX_GPIO_Init+0x1d8>)
 80051ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ee:	4b63      	ldr	r3, [pc, #396]	@ (800537c <MX_GPIO_Init+0x1d8>)
 80051f0:	2101      	movs	r1, #1
 80051f2:	430a      	orrs	r2, r1
 80051f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051f6:	4b61      	ldr	r3, [pc, #388]	@ (800537c <MX_GPIO_Init+0x1d8>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	2201      	movs	r2, #1
 80051fc:	4013      	ands	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005202:	4b5e      	ldr	r3, [pc, #376]	@ (800537c <MX_GPIO_Init+0x1d8>)
 8005204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005206:	4b5d      	ldr	r3, [pc, #372]	@ (800537c <MX_GPIO_Init+0x1d8>)
 8005208:	2102      	movs	r1, #2
 800520a:	430a      	orrs	r2, r1
 800520c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800520e:	4b5b      	ldr	r3, [pc, #364]	@ (800537c <MX_GPIO_Init+0x1d8>)
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	2202      	movs	r2, #2
 8005214:	4013      	ands	r3, r2
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800521a:	4b58      	ldr	r3, [pc, #352]	@ (800537c <MX_GPIO_Init+0x1d8>)
 800521c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521e:	4b57      	ldr	r3, [pc, #348]	@ (800537c <MX_GPIO_Init+0x1d8>)
 8005220:	2108      	movs	r1, #8
 8005222:	430a      	orrs	r2, r1
 8005224:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005226:	4b55      	ldr	r3, [pc, #340]	@ (800537c <MX_GPIO_Init+0x1d8>)
 8005228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522a:	2208      	movs	r2, #8
 800522c:	4013      	ands	r3, r2
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005232:	4b53      	ldr	r3, [pc, #332]	@ (8005380 <MX_GPIO_Init+0x1dc>)
 8005234:	2201      	movs	r2, #1
 8005236:	2101      	movs	r1, #1
 8005238:	0018      	movs	r0, r3
 800523a:	f005 fa01 	bl	800a640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800523e:	4b50      	ldr	r3, [pc, #320]	@ (8005380 <MX_GPIO_Init+0x1dc>)
 8005240:	2200      	movs	r2, #0
 8005242:	2102      	movs	r1, #2
 8005244:	0018      	movs	r0, r3
 8005246:	f005 f9fb 	bl	800a640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800524a:	494e      	ldr	r1, [pc, #312]	@ (8005384 <MX_GPIO_Init+0x1e0>)
 800524c:	4b4e      	ldr	r3, [pc, #312]	@ (8005388 <MX_GPIO_Init+0x1e4>)
 800524e:	2201      	movs	r2, #1
 8005250:	0018      	movs	r0, r3
 8005252:	f005 f9f5 	bl	800a640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005256:	2380      	movs	r3, #128	@ 0x80
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	484c      	ldr	r0, [pc, #304]	@ (800538c <MX_GPIO_Init+0x1e8>)
 800525c:	2201      	movs	r2, #1
 800525e:	0019      	movs	r1, r3
 8005260:	f005 f9ee 	bl	800a640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8005264:	193b      	adds	r3, r7, r4
 8005266:	4a4a      	ldr	r2, [pc, #296]	@ (8005390 <MX_GPIO_Init+0x1ec>)
 8005268:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800526a:	193b      	adds	r3, r7, r4
 800526c:	2203      	movs	r2, #3
 800526e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005270:	193b      	adds	r3, r7, r4
 8005272:	2200      	movs	r2, #0
 8005274:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005276:	193b      	adds	r3, r7, r4
 8005278:	4a44      	ldr	r2, [pc, #272]	@ (800538c <MX_GPIO_Init+0x1e8>)
 800527a:	0019      	movs	r1, r3
 800527c:	0010      	movs	r0, r2
 800527e:	f004 ff7f 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8005282:	193b      	adds	r3, r7, r4
 8005284:	2203      	movs	r2, #3
 8005286:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005288:	193b      	adds	r3, r7, r4
 800528a:	2201      	movs	r2, #1
 800528c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	193b      	adds	r3, r7, r4
 8005290:	2200      	movs	r2, #0
 8005292:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005294:	193b      	adds	r3, r7, r4
 8005296:	2200      	movs	r2, #0
 8005298:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800529a:	193b      	adds	r3, r7, r4
 800529c:	4a38      	ldr	r2, [pc, #224]	@ (8005380 <MX_GPIO_Init+0x1dc>)
 800529e:	0019      	movs	r1, r3
 80052a0:	0010      	movs	r0, r2
 80052a2:	f004 ff6d 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 80052a6:	193b      	adds	r3, r7, r4
 80052a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005394 <MX_GPIO_Init+0x1f0>)
 80052aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052ac:	193b      	adds	r3, r7, r4
 80052ae:	2203      	movs	r2, #3
 80052b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b2:	193b      	adds	r3, r7, r4
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052b8:	193a      	adds	r2, r7, r4
 80052ba:	23a0      	movs	r3, #160	@ 0xa0
 80052bc:	05db      	lsls	r3, r3, #23
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f004 ff5d 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80052c6:	193b      	adds	r3, r7, r4
 80052c8:	22c0      	movs	r2, #192	@ 0xc0
 80052ca:	0052      	lsls	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052ce:	193b      	adds	r3, r7, r4
 80052d0:	2200      	movs	r2, #0
 80052d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d4:	193b      	adds	r3, r7, r4
 80052d6:	2200      	movs	r2, #0
 80052d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052da:	193a      	adds	r2, r7, r4
 80052dc:	23a0      	movs	r3, #160	@ 0xa0
 80052de:	05db      	lsls	r3, r3, #23
 80052e0:	0011      	movs	r1, r2
 80052e2:	0018      	movs	r0, r3
 80052e4:	f004 ff4c 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80052e8:	193b      	adds	r3, r7, r4
 80052ea:	4a26      	ldr	r2, [pc, #152]	@ (8005384 <MX_GPIO_Init+0x1e0>)
 80052ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052ee:	193b      	adds	r3, r7, r4
 80052f0:	2201      	movs	r2, #1
 80052f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f4:	193b      	adds	r3, r7, r4
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fa:	193b      	adds	r3, r7, r4
 80052fc:	2200      	movs	r2, #0
 80052fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005300:	193b      	adds	r3, r7, r4
 8005302:	4a21      	ldr	r2, [pc, #132]	@ (8005388 <MX_GPIO_Init+0x1e4>)
 8005304:	0019      	movs	r1, r3
 8005306:	0010      	movs	r0, r2
 8005308:	f004 ff3a 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800530c:	193b      	adds	r3, r7, r4
 800530e:	4a22      	ldr	r2, [pc, #136]	@ (8005398 <MX_GPIO_Init+0x1f4>)
 8005310:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005312:	193b      	adds	r3, r7, r4
 8005314:	2203      	movs	r2, #3
 8005316:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005318:	193b      	adds	r3, r7, r4
 800531a:	2200      	movs	r2, #0
 800531c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800531e:	193b      	adds	r3, r7, r4
 8005320:	4a19      	ldr	r2, [pc, #100]	@ (8005388 <MX_GPIO_Init+0x1e4>)
 8005322:	0019      	movs	r1, r3
 8005324:	0010      	movs	r0, r2
 8005326:	f004 ff2b 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 800532a:	0021      	movs	r1, r4
 800532c:	187b      	adds	r3, r7, r1
 800532e:	2280      	movs	r2, #128	@ 0x80
 8005330:	0112      	lsls	r2, r2, #4
 8005332:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005334:	000c      	movs	r4, r1
 8005336:	193b      	adds	r3, r7, r4
 8005338:	2201      	movs	r2, #1
 800533a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533c:	193b      	adds	r3, r7, r4
 800533e:	2200      	movs	r2, #0
 8005340:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005342:	193b      	adds	r3, r7, r4
 8005344:	2200      	movs	r2, #0
 8005346:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8005348:	193b      	adds	r3, r7, r4
 800534a:	4a10      	ldr	r2, [pc, #64]	@ (800538c <MX_GPIO_Init+0x1e8>)
 800534c:	0019      	movs	r1, r3
 800534e:	0010      	movs	r0, r2
 8005350:	f004 ff16 	bl	800a180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005354:	0021      	movs	r1, r4
 8005356:	187b      	adds	r3, r7, r1
 8005358:	2204      	movs	r2, #4
 800535a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800535c:	187b      	adds	r3, r7, r1
 800535e:	2200      	movs	r2, #0
 8005360:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005362:	187b      	adds	r3, r7, r1
 8005364:	2200      	movs	r2, #0
 8005366:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005368:	187b      	adds	r3, r7, r1
 800536a:	4a0c      	ldr	r2, [pc, #48]	@ (800539c <MX_GPIO_Init+0x1f8>)
 800536c:	0019      	movs	r1, r3
 800536e:	0010      	movs	r0, r2
 8005370:	f004 ff06 	bl	800a180 <HAL_GPIO_Init>

}
 8005374:	46c0      	nop			@ (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b00b      	add	sp, #44	@ 0x2c
 800537a:	bd90      	pop	{r4, r7, pc}
 800537c:	40021000 	.word	0x40021000
 8005380:	50001c00 	.word	0x50001c00
 8005384:	00000301 	.word	0x00000301
 8005388:	50000400 	.word	0x50000400
 800538c:	50000800 	.word	0x50000800
 8005390:	0000320f 	.word	0x0000320f
 8005394:	00008070 	.word	0x00008070
 8005398:	0000403e 	.word	0x0000403e
 800539c:	50000c00 	.word	0x50000c00

080053a0 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2100      	movs	r1, #0
 80053ae:	0018      	movs	r0, r3
 80053b0:	f00a faa8 	bl	800f904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2108      	movs	r1, #8
 80053b8:	0018      	movs	r0, r3
 80053ba:	f00a faa3 	bl	800f904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	210c      	movs	r1, #12
 80053c2:	0018      	movs	r0, r3
 80053c4:	f00a fa9e 	bl	800f904 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	05db      	lsls	r3, r3, #23
 80053cc:	22fa      	movs	r2, #250	@ 0xfa
 80053ce:	0112      	lsls	r2, r2, #4
 80053d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80053d2:	2380      	movs	r3, #128	@ 0x80
 80053d4:	05db      	lsls	r3, r3, #23
 80053d6:	22fa      	movs	r2, #250	@ 0xfa
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80053dc:	2380      	movs	r3, #128	@ 0x80
 80053de:	05db      	lsls	r3, r3, #23
 80053e0:	22fa      	movs	r2, #250	@ 0xfa
 80053e2:	0112      	lsls	r2, r2, #4
 80053e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80053e6:	2380      	movs	r3, #128	@ 0x80
 80053e8:	05db      	lsls	r3, r3, #23
 80053ea:	22fa      	movs	r2, #250	@ 0xfa
 80053ec:	0112      	lsls	r2, r2, #4
 80053ee:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2100      	movs	r1, #0
 80053f4:	0018      	movs	r0, r3
 80053f6:	f00a fa85 	bl	800f904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2104      	movs	r1, #4
 80053fe:	0018      	movs	r0, r3
 8005400:	f00a fa80 	bl	800f904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2108      	movs	r1, #8
 8005408:	0018      	movs	r0, r3
 800540a:	f00a fa7b 	bl	800f904 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800540e:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <GPIO_InitPWMLEDs+0x98>)
 8005410:	22fa      	movs	r2, #250	@ 0xfa
 8005412:	0112      	lsls	r2, r2, #4
 8005414:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005416:	4b08      	ldr	r3, [pc, #32]	@ (8005438 <GPIO_InitPWMLEDs+0x98>)
 8005418:	22fa      	movs	r2, #250	@ 0xfa
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800541e:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <GPIO_InitPWMLEDs+0x98>)
 8005420:	22fa      	movs	r2, #250	@ 0xfa
 8005422:	0112      	lsls	r2, r2, #4
 8005424:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005426:	4b04      	ldr	r3, [pc, #16]	@ (8005438 <GPIO_InitPWMLEDs+0x98>)
 8005428:	22fa      	movs	r2, #250	@ 0xfa
 800542a:	0112      	lsls	r2, r2, #4
 800542c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	46bd      	mov	sp, r7
 8005432:	b002      	add	sp, #8
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			@ (mov r8, r8)
 8005438:	40000400 	.word	0x40000400

0800543c <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	0011      	movs	r1, r2
 800544c:	0018      	movs	r0, r3
 800544e:	f003 fca3 	bl	8008d98 <HIDS_Init>
}
 8005452:	46c0      	nop			@ (mov r8, r8)
 8005454:	46bd      	mov	sp, r7
 8005456:	b002      	add	sp, #8
 8005458:	bd80      	pop	{r7, pc}

0800545a <HT_StartMeasurement>:

void HT_StartMeasurement() {
 800545a:	b580      	push	{r7, lr}
 800545c:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 800545e:	f003 fcbd 	bl	8008ddc <HIDS_StartMeasurement>
}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	0011      	movs	r1, r2
 8005478:	0018      	movs	r0, r3
 800547a:	f003 fd8b 	bl	8008f94 <HIDS_GetMeasurementValues>
 800547e:	0003      	movs	r3, r0
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b002      	add	sp, #8
 8005486:	bd80      	pop	{r7, pc}

08005488 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 800548c:	f003 fd26 	bl	8008edc <HIDS_DeviceConnected>
 8005490:	0003      	movs	r3, r0
}
 8005492:	0018      	movs	r0, r3
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800549c:	4b1b      	ldr	r3, [pc, #108]	@ (800550c <MX_I2C1_Init+0x74>)
 800549e:	4a1c      	ldr	r2, [pc, #112]	@ (8005510 <MX_I2C1_Init+0x78>)
 80054a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80054a2:	4b1a      	ldr	r3, [pc, #104]	@ (800550c <MX_I2C1_Init+0x74>)
 80054a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <MX_I2C1_Init+0x7c>)
 80054a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80054a8:	4b18      	ldr	r3, [pc, #96]	@ (800550c <MX_I2C1_Init+0x74>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054ae:	4b17      	ldr	r3, [pc, #92]	@ (800550c <MX_I2C1_Init+0x74>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054b4:	4b15      	ldr	r3, [pc, #84]	@ (800550c <MX_I2C1_Init+0x74>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80054ba:	4b14      	ldr	r3, [pc, #80]	@ (800550c <MX_I2C1_Init+0x74>)
 80054bc:	2200      	movs	r2, #0
 80054be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80054c0:	4b12      	ldr	r3, [pc, #72]	@ (800550c <MX_I2C1_Init+0x74>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054c6:	4b11      	ldr	r3, [pc, #68]	@ (800550c <MX_I2C1_Init+0x74>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054cc:	4b0f      	ldr	r3, [pc, #60]	@ (800550c <MX_I2C1_Init+0x74>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80054d2:	4b0e      	ldr	r3, [pc, #56]	@ (800550c <MX_I2C1_Init+0x74>)
 80054d4:	0018      	movs	r0, r3
 80054d6:	f005 f8d1 	bl	800a67c <HAL_I2C_Init>
 80054da:	1e03      	subs	r3, r0, #0
 80054dc:	d001      	beq.n	80054e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80054de:	f000 fb2f 	bl	8005b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80054e2:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <MX_I2C1_Init+0x74>)
 80054e4:	2100      	movs	r1, #0
 80054e6:	0018      	movs	r0, r3
 80054e8:	f007 f840 	bl	800c56c <HAL_I2CEx_ConfigAnalogFilter>
 80054ec:	1e03      	subs	r3, r0, #0
 80054ee:	d001      	beq.n	80054f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80054f0:	f000 fb26 	bl	8005b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80054f4:	4b05      	ldr	r3, [pc, #20]	@ (800550c <MX_I2C1_Init+0x74>)
 80054f6:	2100      	movs	r1, #0
 80054f8:	0018      	movs	r0, r3
 80054fa:	f007 f883 	bl	800c604 <HAL_I2CEx_ConfigDigitalFilter>
 80054fe:	1e03      	subs	r3, r0, #0
 8005500:	d001      	beq.n	8005506 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005502:	f000 fb1d 	bl	8005b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005506:	46c0      	nop			@ (mov r8, r8)
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000afc 	.word	0x20000afc
 8005510:	40005400 	.word	0x40005400
 8005514:	00503d58 	.word	0x00503d58

08005518 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800551c:	4b1b      	ldr	r3, [pc, #108]	@ (800558c <MX_I2C2_Init+0x74>)
 800551e:	4a1c      	ldr	r2, [pc, #112]	@ (8005590 <MX_I2C2_Init+0x78>)
 8005520:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005522:	4b1a      	ldr	r3, [pc, #104]	@ (800558c <MX_I2C2_Init+0x74>)
 8005524:	4a1b      	ldr	r2, [pc, #108]	@ (8005594 <MX_I2C2_Init+0x7c>)
 8005526:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005528:	4b18      	ldr	r3, [pc, #96]	@ (800558c <MX_I2C2_Init+0x74>)
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800552e:	4b17      	ldr	r3, [pc, #92]	@ (800558c <MX_I2C2_Init+0x74>)
 8005530:	2201      	movs	r2, #1
 8005532:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005534:	4b15      	ldr	r3, [pc, #84]	@ (800558c <MX_I2C2_Init+0x74>)
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800553a:	4b14      	ldr	r3, [pc, #80]	@ (800558c <MX_I2C2_Init+0x74>)
 800553c:	2200      	movs	r2, #0
 800553e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005540:	4b12      	ldr	r3, [pc, #72]	@ (800558c <MX_I2C2_Init+0x74>)
 8005542:	2200      	movs	r2, #0
 8005544:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005546:	4b11      	ldr	r3, [pc, #68]	@ (800558c <MX_I2C2_Init+0x74>)
 8005548:	2200      	movs	r2, #0
 800554a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800554c:	4b0f      	ldr	r3, [pc, #60]	@ (800558c <MX_I2C2_Init+0x74>)
 800554e:	2200      	movs	r2, #0
 8005550:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005552:	4b0e      	ldr	r3, [pc, #56]	@ (800558c <MX_I2C2_Init+0x74>)
 8005554:	0018      	movs	r0, r3
 8005556:	f005 f891 	bl	800a67c <HAL_I2C_Init>
 800555a:	1e03      	subs	r3, r0, #0
 800555c:	d001      	beq.n	8005562 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800555e:	f000 faef 	bl	8005b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005562:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <MX_I2C2_Init+0x74>)
 8005564:	2100      	movs	r1, #0
 8005566:	0018      	movs	r0, r3
 8005568:	f007 f800 	bl	800c56c <HAL_I2CEx_ConfigAnalogFilter>
 800556c:	1e03      	subs	r3, r0, #0
 800556e:	d001      	beq.n	8005574 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005570:	f000 fae6 	bl	8005b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005574:	4b05      	ldr	r3, [pc, #20]	@ (800558c <MX_I2C2_Init+0x74>)
 8005576:	2100      	movs	r1, #0
 8005578:	0018      	movs	r0, r3
 800557a:	f007 f843 	bl	800c604 <HAL_I2CEx_ConfigDigitalFilter>
 800557e:	1e03      	subs	r3, r0, #0
 8005580:	d001      	beq.n	8005586 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005582:	f000 fadd 	bl	8005b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000b50 	.word	0x20000b50
 8005590:	40005800 	.word	0x40005800
 8005594:	00503d58 	.word	0x00503d58

08005598 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b08b      	sub	sp, #44	@ 0x2c
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a0:	2414      	movs	r4, #20
 80055a2:	193b      	adds	r3, r7, r4
 80055a4:	0018      	movs	r0, r3
 80055a6:	2314      	movs	r3, #20
 80055a8:	001a      	movs	r2, r3
 80055aa:	2100      	movs	r1, #0
 80055ac:	f011 fa5c 	bl	8016a68 <memset>
  if(i2cHandle->Instance==I2C1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a5d      	ldr	r2, [pc, #372]	@ (800572c <HAL_I2C_MspInit+0x194>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d000      	beq.n	80055bc <HAL_I2C_MspInit+0x24>
 80055ba:	e083      	b.n	80056c4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 80055be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c0:	4b5b      	ldr	r3, [pc, #364]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 80055c2:	2102      	movs	r1, #2
 80055c4:	430a      	orrs	r2, r1
 80055c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055c8:	4b59      	ldr	r3, [pc, #356]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	2202      	movs	r2, #2
 80055ce:	4013      	ands	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055d4:	0021      	movs	r1, r4
 80055d6:	187b      	adds	r3, r7, r1
 80055d8:	22c0      	movs	r2, #192	@ 0xc0
 80055da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055dc:	187b      	adds	r3, r7, r1
 80055de:	2212      	movs	r2, #18
 80055e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e2:	187b      	adds	r3, r7, r1
 80055e4:	2200      	movs	r2, #0
 80055e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	2203      	movs	r2, #3
 80055ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80055ee:	187b      	adds	r3, r7, r1
 80055f0:	2201      	movs	r2, #1
 80055f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f4:	187b      	adds	r3, r7, r1
 80055f6:	4a4f      	ldr	r2, [pc, #316]	@ (8005734 <HAL_I2C_MspInit+0x19c>)
 80055f8:	0019      	movs	r1, r3
 80055fa:	0010      	movs	r0, r2
 80055fc:	f004 fdc0 	bl	800a180 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005600:	4b4b      	ldr	r3, [pc, #300]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 8005602:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005604:	4b4a      	ldr	r3, [pc, #296]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 8005606:	2180      	movs	r1, #128	@ 0x80
 8005608:	0389      	lsls	r1, r1, #14
 800560a:	430a      	orrs	r2, r1
 800560c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800560e:	4b4a      	ldr	r3, [pc, #296]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 8005610:	4a4a      	ldr	r2, [pc, #296]	@ (800573c <HAL_I2C_MspInit+0x1a4>)
 8005612:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005614:	4b48      	ldr	r3, [pc, #288]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 8005616:	2206      	movs	r2, #6
 8005618:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800561a:	4b47      	ldr	r3, [pc, #284]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 800561c:	2200      	movs	r2, #0
 800561e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005620:	4b45      	ldr	r3, [pc, #276]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 8005622:	2200      	movs	r2, #0
 8005624:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005626:	4b44      	ldr	r3, [pc, #272]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 8005628:	2280      	movs	r2, #128	@ 0x80
 800562a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800562c:	4b42      	ldr	r3, [pc, #264]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 800562e:	2200      	movs	r2, #0
 8005630:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005632:	4b41      	ldr	r3, [pc, #260]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005638:	4b3f      	ldr	r3, [pc, #252]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800563e:	4b3e      	ldr	r3, [pc, #248]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 8005640:	2200      	movs	r2, #0
 8005642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005644:	4b3c      	ldr	r3, [pc, #240]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 8005646:	0018      	movs	r0, r3
 8005648:	f004 faee 	bl	8009c28 <HAL_DMA_Init>
 800564c:	1e03      	subs	r3, r0, #0
 800564e:	d001      	beq.n	8005654 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005650:	f000 fa76 	bl	8005b40 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a38      	ldr	r2, [pc, #224]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 8005658:	63da      	str	r2, [r3, #60]	@ 0x3c
 800565a:	4b37      	ldr	r3, [pc, #220]	@ (8005738 <HAL_I2C_MspInit+0x1a0>)
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005660:	4b37      	ldr	r3, [pc, #220]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 8005662:	4a38      	ldr	r2, [pc, #224]	@ (8005744 <HAL_I2C_MspInit+0x1ac>)
 8005664:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8005666:	4b36      	ldr	r3, [pc, #216]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 8005668:	2206      	movs	r2, #6
 800566a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800566c:	4b34      	ldr	r3, [pc, #208]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 800566e:	2210      	movs	r2, #16
 8005670:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005672:	4b33      	ldr	r3, [pc, #204]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 8005674:	2200      	movs	r2, #0
 8005676:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005678:	4b31      	ldr	r3, [pc, #196]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 800567a:	2280      	movs	r2, #128	@ 0x80
 800567c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800567e:	4b30      	ldr	r3, [pc, #192]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 8005680:	2200      	movs	r2, #0
 8005682:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005684:	4b2e      	ldr	r3, [pc, #184]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 8005686:	2200      	movs	r2, #0
 8005688:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800568a:	4b2d      	ldr	r3, [pc, #180]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 800568c:	2200      	movs	r2, #0
 800568e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005690:	4b2b      	ldr	r3, [pc, #172]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 8005692:	2200      	movs	r2, #0
 8005694:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005696:	4b2a      	ldr	r3, [pc, #168]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 8005698:	0018      	movs	r0, r3
 800569a:	f004 fac5 	bl	8009c28 <HAL_DMA_Init>
 800569e:	1e03      	subs	r3, r0, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80056a2:	f000 fa4d 	bl	8005b40 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a25      	ldr	r2, [pc, #148]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 80056aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80056ac:	4b24      	ldr	r3, [pc, #144]	@ (8005740 <HAL_I2C_MspInit+0x1a8>)
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80056b2:	2200      	movs	r2, #0
 80056b4:	2100      	movs	r1, #0
 80056b6:	2017      	movs	r0, #23
 80056b8:	f004 fa84 	bl	8009bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80056bc:	2017      	movs	r0, #23
 80056be:	f004 fa96 	bl	8009bee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80056c2:	e02e      	b.n	8005722 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005748 <HAL_I2C_MspInit+0x1b0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d129      	bne.n	8005722 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ce:	4b18      	ldr	r3, [pc, #96]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	4b17      	ldr	r3, [pc, #92]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 80056d4:	2102      	movs	r1, #2
 80056d6:	430a      	orrs	r2, r1
 80056d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80056da:	4b15      	ldr	r3, [pc, #84]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	2202      	movs	r2, #2
 80056e0:	4013      	ands	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056e6:	2114      	movs	r1, #20
 80056e8:	187b      	adds	r3, r7, r1
 80056ea:	22c0      	movs	r2, #192	@ 0xc0
 80056ec:	0112      	lsls	r2, r2, #4
 80056ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056f0:	187b      	adds	r3, r7, r1
 80056f2:	2212      	movs	r2, #18
 80056f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f6:	187b      	adds	r3, r7, r1
 80056f8:	2200      	movs	r2, #0
 80056fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056fc:	187b      	adds	r3, r7, r1
 80056fe:	2203      	movs	r2, #3
 8005700:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005702:	187b      	adds	r3, r7, r1
 8005704:	2206      	movs	r2, #6
 8005706:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005708:	187b      	adds	r3, r7, r1
 800570a:	4a0a      	ldr	r2, [pc, #40]	@ (8005734 <HAL_I2C_MspInit+0x19c>)
 800570c:	0019      	movs	r1, r3
 800570e:	0010      	movs	r0, r2
 8005710:	f004 fd36 	bl	800a180 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005714:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 8005716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005718:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <HAL_I2C_MspInit+0x198>)
 800571a:	2180      	movs	r1, #128	@ 0x80
 800571c:	03c9      	lsls	r1, r1, #15
 800571e:	430a      	orrs	r2, r1
 8005720:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	46bd      	mov	sp, r7
 8005726:	b00b      	add	sp, #44	@ 0x2c
 8005728:	bd90      	pop	{r4, r7, pc}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	40005400 	.word	0x40005400
 8005730:	40021000 	.word	0x40021000
 8005734:	50000400 	.word	0x50000400
 8005738:	20000ba4 	.word	0x20000ba4
 800573c:	40020030 	.word	0x40020030
 8005740:	20000bec 	.word	0x20000bec
 8005744:	4002001c 	.word	0x4002001c
 8005748:	40005800 	.word	0x40005800

0800574c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005750:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <MX_I2S2_Init+0x48>)
 8005752:	4a11      	ldr	r2, [pc, #68]	@ (8005798 <MX_I2S2_Init+0x4c>)
 8005754:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8005756:	4b0f      	ldr	r3, [pc, #60]	@ (8005794 <MX_I2S2_Init+0x48>)
 8005758:	22c0      	movs	r2, #192	@ 0xc0
 800575a:	0092      	lsls	r2, r2, #2
 800575c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800575e:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <MX_I2S2_Init+0x48>)
 8005760:	2210      	movs	r2, #16
 8005762:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005764:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <MX_I2S2_Init+0x48>)
 8005766:	2205      	movs	r2, #5
 8005768:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800576a:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <MX_I2S2_Init+0x48>)
 800576c:	2200      	movs	r2, #0
 800576e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005770:	4b08      	ldr	r3, [pc, #32]	@ (8005794 <MX_I2S2_Init+0x48>)
 8005772:	22fa      	movs	r2, #250	@ 0xfa
 8005774:	0152      	lsls	r2, r2, #5
 8005776:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005778:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <MX_I2S2_Init+0x48>)
 800577a:	2208      	movs	r2, #8
 800577c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800577e:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <MX_I2S2_Init+0x48>)
 8005780:	0018      	movs	r0, r3
 8005782:	f006 ff8b 	bl	800c69c <HAL_I2S_Init>
 8005786:	1e03      	subs	r3, r0, #0
 8005788:	d001      	beq.n	800578e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800578a:	f000 f9d9 	bl	8005b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20000c34 	.word	0x20000c34
 8005798:	40003800 	.word	0x40003800

0800579c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b089      	sub	sp, #36	@ 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a4:	240c      	movs	r4, #12
 80057a6:	193b      	adds	r3, r7, r4
 80057a8:	0018      	movs	r0, r3
 80057aa:	2314      	movs	r3, #20
 80057ac:	001a      	movs	r2, r3
 80057ae:	2100      	movs	r1, #0
 80057b0:	f011 f95a 	bl	8016a68 <memset>
  if(i2sHandle->Instance==SPI2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005870 <HAL_I2S_MspInit+0xd4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d154      	bne.n	8005868 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057be:	4b2d      	ldr	r3, [pc, #180]	@ (8005874 <HAL_I2S_MspInit+0xd8>)
 80057c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005874 <HAL_I2S_MspInit+0xd8>)
 80057c4:	2180      	movs	r1, #128	@ 0x80
 80057c6:	01c9      	lsls	r1, r1, #7
 80057c8:	430a      	orrs	r2, r1
 80057ca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057cc:	4b29      	ldr	r3, [pc, #164]	@ (8005874 <HAL_I2S_MspInit+0xd8>)
 80057ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d0:	4b28      	ldr	r3, [pc, #160]	@ (8005874 <HAL_I2S_MspInit+0xd8>)
 80057d2:	2102      	movs	r1, #2
 80057d4:	430a      	orrs	r2, r1
 80057d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80057d8:	4b26      	ldr	r3, [pc, #152]	@ (8005874 <HAL_I2S_MspInit+0xd8>)
 80057da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057dc:	2202      	movs	r2, #2
 80057de:	4013      	ands	r3, r2
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80057e4:	193b      	adds	r3, r7, r4
 80057e6:	22b0      	movs	r2, #176	@ 0xb0
 80057e8:	0212      	lsls	r2, r2, #8
 80057ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ec:	0021      	movs	r1, r4
 80057ee:	187b      	adds	r3, r7, r1
 80057f0:	2202      	movs	r2, #2
 80057f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f4:	187b      	adds	r3, r7, r1
 80057f6:	2200      	movs	r2, #0
 80057f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057fa:	187b      	adds	r3, r7, r1
 80057fc:	2200      	movs	r2, #0
 80057fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8005800:	187b      	adds	r3, r7, r1
 8005802:	2200      	movs	r2, #0
 8005804:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005806:	187b      	adds	r3, r7, r1
 8005808:	4a1b      	ldr	r2, [pc, #108]	@ (8005878 <HAL_I2S_MspInit+0xdc>)
 800580a:	0019      	movs	r1, r3
 800580c:	0010      	movs	r0, r2
 800580e:	f004 fcb7 	bl	800a180 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005812:	4b1a      	ldr	r3, [pc, #104]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 8005814:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <HAL_I2S_MspInit+0xe4>)
 8005816:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8005818:	4b18      	ldr	r3, [pc, #96]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 800581a:	2202      	movs	r2, #2
 800581c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800581e:	4b17      	ldr	r3, [pc, #92]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 8005820:	2200      	movs	r2, #0
 8005822:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005824:	4b15      	ldr	r3, [pc, #84]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 8005826:	2200      	movs	r2, #0
 8005828:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800582a:	4b14      	ldr	r3, [pc, #80]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 800582c:	2280      	movs	r2, #128	@ 0x80
 800582e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005830:	4b12      	ldr	r3, [pc, #72]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 8005832:	2280      	movs	r2, #128	@ 0x80
 8005834:	0052      	lsls	r2, r2, #1
 8005836:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005838:	4b10      	ldr	r3, [pc, #64]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 800583a:	2280      	movs	r2, #128	@ 0x80
 800583c:	00d2      	lsls	r2, r2, #3
 800583e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005840:	4b0e      	ldr	r3, [pc, #56]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 8005842:	2220      	movs	r2, #32
 8005844:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005846:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 8005848:	2200      	movs	r2, #0
 800584a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800584c:	4b0b      	ldr	r3, [pc, #44]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 800584e:	0018      	movs	r0, r3
 8005850:	f004 f9ea 	bl	8009c28 <HAL_DMA_Init>
 8005854:	1e03      	subs	r3, r0, #0
 8005856:	d001      	beq.n	800585c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8005858:	f000 f972 	bl	8005b40 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a07      	ldr	r2, [pc, #28]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 8005860:	631a      	str	r2, [r3, #48]	@ 0x30
 8005862:	4b06      	ldr	r3, [pc, #24]	@ (800587c <HAL_I2S_MspInit+0xe0>)
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005868:	46c0      	nop			@ (mov r8, r8)
 800586a:	46bd      	mov	sp, r7
 800586c:	b009      	add	sp, #36	@ 0x24
 800586e:	bd90      	pop	{r4, r7, pc}
 8005870:	40003800 	.word	0x40003800
 8005874:	40021000 	.word	0x40021000
 8005878:	50000400 	.word	0x50000400
 800587c:	20000c70 	.word	0x20000c70
 8005880:	40020044 	.word	0x40020044

08005884 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a0c      	ldr	r2, [pc, #48]	@ (80058c4 <HAL_I2S_MspDeInit+0x40>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d111      	bne.n	80058ba <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005896:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <HAL_I2S_MspDeInit+0x44>)
 8005898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <HAL_I2S_MspDeInit+0x44>)
 800589c:	490b      	ldr	r1, [pc, #44]	@ (80058cc <HAL_I2S_MspDeInit+0x48>)
 800589e:	400a      	ands	r2, r1
 80058a0:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80058a2:	23b0      	movs	r3, #176	@ 0xb0
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	4a0a      	ldr	r2, [pc, #40]	@ (80058d0 <HAL_I2S_MspDeInit+0x4c>)
 80058a8:	0019      	movs	r1, r3
 80058aa:	0010      	movs	r0, r2
 80058ac:	f004 fde6 	bl	800a47c <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	0018      	movs	r0, r3
 80058b6:	f004 fa2f 	bl	8009d18 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	40003800 	.word	0x40003800
 80058c8:	40021000 	.word	0x40021000
 80058cc:	ffffbfff 	.word	0xffffbfff
 80058d0:	50000400 	.word	0x50000400

080058d4 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  testDone = true;
 80058d8:	4b35      	ldr	r3, [pc, #212]	@ (80059b0 <SetTestDone+0xdc>)
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80058de:	23fa      	movs	r3, #250	@ 0xfa
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	0018      	movs	r0, r3
 80058e4:	f003 fd02 	bl	80092ec <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80058e8:	4b32      	ldr	r3, [pc, #200]	@ (80059b4 <SetTestDone+0xe0>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	2101      	movs	r1, #1
 80058ee:	0018      	movs	r0, r3
 80058f0:	f004 fea6 	bl	800a640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80058f4:	2380      	movs	r3, #128	@ 0x80
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	482e      	ldr	r0, [pc, #184]	@ (80059b4 <SetTestDone+0xe0>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	0019      	movs	r1, r3
 80058fe:	f004 fe9f 	bl	800a640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8005902:	2380      	movs	r3, #128	@ 0x80
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	482b      	ldr	r0, [pc, #172]	@ (80059b4 <SetTestDone+0xe0>)
 8005908:	2200      	movs	r2, #0
 800590a:	0019      	movs	r1, r3
 800590c:	f004 fe98 	bl	800a640 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 8005910:	2380      	movs	r3, #128	@ 0x80
 8005912:	05db      	lsls	r3, r3, #23
 8005914:	22fa      	movs	r2, #250	@ 0xfa
 8005916:	0112      	lsls	r2, r2, #4
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800591a:	2380      	movs	r3, #128	@ 0x80
 800591c:	05db      	lsls	r3, r3, #23
 800591e:	22fa      	movs	r2, #250	@ 0xfa
 8005920:	0112      	lsls	r2, r2, #4
 8005922:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 8005924:	2380      	movs	r3, #128	@ 0x80
 8005926:	05db      	lsls	r3, r3, #23
 8005928:	2200      	movs	r2, #0
 800592a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 800592c:	4b22      	ldr	r3, [pc, #136]	@ (80059b8 <SetTestDone+0xe4>)
 800592e:	22fa      	movs	r2, #250	@ 0xfa
 8005930:	0112      	lsls	r2, r2, #4
 8005932:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005934:	4b20      	ldr	r3, [pc, #128]	@ (80059b8 <SetTestDone+0xe4>)
 8005936:	22fa      	movs	r2, #250	@ 0xfa
 8005938:	0112      	lsls	r2, r2, #4
 800593a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 800593c:	4b1e      	ldr	r3, [pc, #120]	@ (80059b8 <SetTestDone+0xe4>)
 800593e:	2200      	movs	r2, #0
 8005940:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 8005942:	23fa      	movs	r3, #250	@ 0xfa
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	0018      	movs	r0, r3
 8005948:	f003 fcd0 	bl	80092ec <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800594c:	4b19      	ldr	r3, [pc, #100]	@ (80059b4 <SetTestDone+0xe0>)
 800594e:	2201      	movs	r2, #1
 8005950:	2101      	movs	r1, #1
 8005952:	0018      	movs	r0, r3
 8005954:	f004 fe74 	bl	800a640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005958:	2380      	movs	r3, #128	@ 0x80
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4815      	ldr	r0, [pc, #84]	@ (80059b4 <SetTestDone+0xe0>)
 800595e:	2201      	movs	r2, #1
 8005960:	0019      	movs	r1, r3
 8005962:	f004 fe6d 	bl	800a640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005966:	2380      	movs	r3, #128	@ 0x80
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4812      	ldr	r0, [pc, #72]	@ (80059b4 <SetTestDone+0xe0>)
 800596c:	2201      	movs	r2, #1
 800596e:	0019      	movs	r1, r3
 8005970:	f004 fe66 	bl	800a640 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 8005974:	2380      	movs	r3, #128	@ 0x80
 8005976:	05db      	lsls	r3, r3, #23
 8005978:	22fa      	movs	r2, #250	@ 0xfa
 800597a:	0112      	lsls	r2, r2, #4
 800597c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800597e:	2380      	movs	r3, #128	@ 0x80
 8005980:	05db      	lsls	r3, r3, #23
 8005982:	22fa      	movs	r2, #250	@ 0xfa
 8005984:	0112      	lsls	r2, r2, #4
 8005986:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005988:	2380      	movs	r3, #128	@ 0x80
 800598a:	05db      	lsls	r3, r3, #23
 800598c:	22fa      	movs	r2, #250	@ 0xfa
 800598e:	0112      	lsls	r2, r2, #4
 8005990:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8005992:	4b09      	ldr	r3, [pc, #36]	@ (80059b8 <SetTestDone+0xe4>)
 8005994:	22fa      	movs	r2, #250	@ 0xfa
 8005996:	0112      	lsls	r2, r2, #4
 8005998:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800599a:	4b07      	ldr	r3, [pc, #28]	@ (80059b8 <SetTestDone+0xe4>)
 800599c:	22fa      	movs	r2, #250	@ 0xfa
 800599e:	0112      	lsls	r2, r2, #4
 80059a0:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80059a2:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <SetTestDone+0xe4>)
 80059a4:	22fa      	movs	r2, #250	@ 0xfa
 80059a6:	0112      	lsls	r2, r2, #4
 80059a8:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20000cb8 	.word	0x20000cb8
 80059b4:	50000400 	.word	0x50000400
 80059b8:	40000400 	.word	0x40000400

080059bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059c2:	f003 fc23 	bl	800920c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059c6:	f000 f849 	bl	8005a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059ca:	f7ff fbeb 	bl	80051a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80059ce:	f7ff fb61 	bl	8005094 <MX_DMA_Init>
  MX_I2C1_Init();
 80059d2:	f7ff fd61 	bl	8005498 <MX_I2C1_Init>
  MX_I2S2_Init();
 80059d6:	f7ff feb9 	bl	800574c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80059da:	f002 fecd 	bl	8008778 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80059de:	f7ff fd9b 	bl	8005518 <MX_I2C2_Init>
  MX_TIM2_Init();
 80059e2:	f002 fd4b 	bl	800847c <MX_TIM2_Init>
  MX_TIM3_Init();
 80059e6:	f002 fdbd 	bl	8008564 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80059ea:	f002 fef9 	bl	80087e0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80059ee:	f7ff fa9f 	bl	8004f30 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80059f2:	f00f fd57 	bl	80154a4 <MX_USB_DEVICE_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80059f6:	4a12      	ldr	r2, [pc, #72]	@ (8005a40 <main+0x84>)
 80059f8:	4b12      	ldr	r3, [pc, #72]	@ (8005a44 <main+0x88>)
 80059fa:	0011      	movs	r1, r2
 80059fc:	0018      	movs	r0, r3
 80059fe:	f7ff fccf 	bl	80053a0 <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8005a02:	f003 fc69 	bl	80092d8 <HAL_GetTick>
 8005a06:	0003      	movs	r3, r0
 8005a08:	22fa      	movs	r2, #250	@ 0xfa
 8005a0a:	0092      	lsls	r2, r2, #2
 8005a0c:	4694      	mov	ip, r2
 8005a0e:	4463      	add	r3, ip
 8005a10:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8005a12:	2003      	movs	r0, #3
 8005a14:	f003 f8e4 	bl	8008be0 <SetVerboseLevel>
  BinaryReleaseInfo();
 8005a18:	f003 f8fa 	bl	8008c10 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a48 <main+0x8c>)
 8005a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8005a4c <main+0x90>)
 8005a20:	490b      	ldr	r1, [pc, #44]	@ (8005a50 <main+0x94>)
 8005a22:	480c      	ldr	r0, [pc, #48]	@ (8005a54 <main+0x98>)
 8005a24:	f7ff fb5c 	bl	80050e0 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone){
 8005a28:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <main+0x9c>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <main+0x7e>
      UpkeepGadget();
 8005a30:	f7ff fb83 	bl	800513a <UpkeepGadget>
      ESP_Upkeep();
 8005a34:	f7ff f812 	bl	8004a5c <ESP_Upkeep>
 8005a38:	e7f6      	b.n	8005a28 <main+0x6c>
    }
    else{
      Gadget_Test();
 8005a3a:	f7ff fb77 	bl	800512c <Gadget_Test>
    if(testDone){
 8005a3e:	e7f3      	b.n	8005a28 <main+0x6c>
 8005a40:	20002658 	.word	0x20002658
 8005a44:	20002618 	.word	0x20002618
 8005a48:	20000aa0 	.word	0x20000aa0
 8005a4c:	20002750 	.word	0x20002750
 8005a50:	20000c34 	.word	0x20000c34
 8005a54:	20000afc 	.word	0x20000afc
 8005a58:	20000cb8 	.word	0x20000cb8

08005a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b09d      	sub	sp, #116	@ 0x74
 8005a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a62:	2438      	movs	r4, #56	@ 0x38
 8005a64:	193b      	adds	r3, r7, r4
 8005a66:	0018      	movs	r0, r3
 8005a68:	2338      	movs	r3, #56	@ 0x38
 8005a6a:	001a      	movs	r2, r3
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f010 fffb 	bl	8016a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a72:	2324      	movs	r3, #36	@ 0x24
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	0018      	movs	r0, r3
 8005a78:	2314      	movs	r3, #20
 8005a7a:	001a      	movs	r2, r3
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	f010 fff3 	bl	8016a68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a82:	003b      	movs	r3, r7
 8005a84:	0018      	movs	r0, r3
 8005a86:	2324      	movs	r3, #36	@ 0x24
 8005a88:	001a      	movs	r2, r3
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f010 ffec 	bl	8016a68 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a90:	4b29      	ldr	r3, [pc, #164]	@ (8005b38 <SystemClock_Config+0xdc>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a29      	ldr	r2, [pc, #164]	@ (8005b3c <SystemClock_Config+0xe0>)
 8005a96:	401a      	ands	r2, r3
 8005a98:	4b27      	ldr	r3, [pc, #156]	@ (8005b38 <SystemClock_Config+0xdc>)
 8005a9a:	2180      	movs	r1, #128	@ 0x80
 8005a9c:	0109      	lsls	r1, r1, #4
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005aa2:	0021      	movs	r1, r4
 8005aa4:	187b      	adds	r3, r7, r1
 8005aa6:	2222      	movs	r2, #34	@ 0x22
 8005aa8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005aaa:	187b      	adds	r3, r7, r1
 8005aac:	2201      	movs	r2, #1
 8005aae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005ab0:	187b      	adds	r3, r7, r1
 8005ab2:	2210      	movs	r2, #16
 8005ab4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005ab6:	187b      	adds	r3, r7, r1
 8005ab8:	2201      	movs	r2, #1
 8005aba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005abc:	187b      	adds	r3, r7, r1
 8005abe:	2200      	movs	r2, #0
 8005ac0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ac2:	187b      	adds	r3, r7, r1
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f008 ff89 	bl	800e9dc <HAL_RCC_OscConfig>
 8005aca:	1e03      	subs	r3, r0, #0
 8005acc:	d001      	beq.n	8005ad2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005ace:	f000 f837 	bl	8005b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ad2:	2124      	movs	r1, #36	@ 0x24
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	220f      	movs	r2, #15
 8005ad8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005ada:	187b      	adds	r3, r7, r1
 8005adc:	2201      	movs	r2, #1
 8005ade:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ae0:	187b      	adds	r3, r7, r1
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005ae6:	187b      	adds	r3, r7, r1
 8005ae8:	2200      	movs	r2, #0
 8005aea:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005aec:	187b      	adds	r3, r7, r1
 8005aee:	2200      	movs	r2, #0
 8005af0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005af2:	187b      	adds	r3, r7, r1
 8005af4:	2100      	movs	r1, #0
 8005af6:	0018      	movs	r0, r3
 8005af8:	f009 fb44 	bl	800f184 <HAL_RCC_ClockConfig>
 8005afc:	1e03      	subs	r3, r0, #0
 8005afe:	d001      	beq.n	8005b04 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005b00:	f000 f81e 	bl	8005b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005b04:	003b      	movs	r3, r7
 8005b06:	2249      	movs	r2, #73	@ 0x49
 8005b08:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005b0a:	003b      	movs	r3, r7
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005b10:	003b      	movs	r3, r7
 8005b12:	2200      	movs	r2, #0
 8005b14:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005b16:	003b      	movs	r3, r7
 8005b18:	2280      	movs	r2, #128	@ 0x80
 8005b1a:	04d2      	lsls	r2, r2, #19
 8005b1c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b1e:	003b      	movs	r3, r7
 8005b20:	0018      	movs	r0, r3
 8005b22:	f009 fd53 	bl	800f5cc <HAL_RCCEx_PeriphCLKConfig>
 8005b26:	1e03      	subs	r3, r0, #0
 8005b28:	d001      	beq.n	8005b2e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8005b2a:	f000 f809 	bl	8005b40 <Error_Handler>
  }
}
 8005b2e:	46c0      	nop			@ (mov r8, r8)
 8005b30:	46bd      	mov	sp, r7
 8005b32:	b01d      	add	sp, #116	@ 0x74
 8005b34:	bd90      	pop	{r4, r7, pc}
 8005b36:	46c0      	nop			@ (mov r8, r8)
 8005b38:	40007000 	.word	0x40007000
 8005b3c:	ffffe7ff 	.word	0xffffe7ff

08005b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b44:	b672      	cpsid	i
}
 8005b46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b48:	46c0      	nop			@ (mov r8, r8)
 8005b4a:	e7fd      	b.n	8005b48 <Error_Handler+0x8>

08005b4c <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8005b50:	f7ff fc83 	bl	800545a <HT_StartMeasurement>
}
 8005b54:	46c0      	nop			@ (mov r8, r8)
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8005b60:	4a04      	ldr	r2, [pc, #16]	@ (8005b74 <HT_IsMeasurementDoneWrapper+0x18>)
 8005b62:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HT_IsMeasurementDoneWrapper+0x1c>)
 8005b64:	0011      	movs	r1, r2
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7ff fc7e 	bl	8005468 <HT_GetMeasurementValues>
 8005b6c:	0003      	movs	r3, r0
}
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000cc0 	.word	0x20000cc0
 8005b78:	20000cbc 	.word	0x20000cbc

08005b7c <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8005b80:	f7ff faf3 	bl	800516a <Gas_StartMeasurement>
}
 8005b84:	46c0      	nop			@ (mov r8, r8)
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8005b90:	4b03      	ldr	r3, [pc, #12]	@ (8005ba0 <VOC_IsMeasurementDoneWrapper+0x14>)
 8005b92:	0018      	movs	r0, r3
 8005b94:	f7ff faf0 	bl	8005178 <Gas_GetMeasurementValues>
 8005b98:	0003      	movs	r3, r0
}
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000cc4 	.word	0x20000cc4

08005ba4 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
}
 8005ba8:	46c0      	nop			@ (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	af00      	add	r7, sp, #0
  return true;
 8005bb2:	2301      	movs	r3, #1
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 8005bbe:	23fa      	movs	r3, #250	@ 0xfa
 8005bc0:	015b      	lsls	r3, r3, #5
 8005bc2:	2180      	movs	r1, #128	@ 0x80
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f000 fbcb 	bl	8006360 <MIC_Start>
}
 8005bca:	46c0      	nop			@ (mov r8, r8)
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8005bd4:	f000 fe94 	bl	8006900 <MIC_MeasurementDone>
 8005bd8:	0003      	movs	r3, r0
}
 8005bda:	0018      	movs	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <Meas_TestStart>:
void Meas_TestStart(){
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8005be4:	f7ff ffe9 	bl	8005bba <MIC_StartMeasurementWrapper>
}
 8005be8:	46c0      	nop			@ (mov r8, r8)
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8005bf2:	f000 fea9 	bl	8006948 <MIC_TestMeasurementDone>
 8005bf6:	0003      	movs	r3, r0
}
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <testInit>:
void testInit(){
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8005c04:	4b07      	ldr	r3, [pc, #28]	@ (8005c24 <testInit+0x24>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8005c0a:	4b06      	ldr	r3, [pc, #24]	@ (8005c24 <testInit+0x24>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8005c10:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <testInit+0x24>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8005c16:	4b03      	ldr	r3, [pc, #12]	@ (8005c24 <testInit+0x24>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	705a      	strb	r2, [r3, #1]
}
 8005c1c:	46c0      	nop			@ (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	46c0      	nop			@ (mov r8, r8)
 8005c24:	20000d00 	.word	0x20000d00

08005c28 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8005c28:	b5b0      	push	{r4, r5, r7, lr}
 8005c2a:	b092      	sub	sp, #72	@ 0x48
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005c34:	4b76      	ldr	r3, [pc, #472]	@ (8005e10 <Meas_Init+0x1e8>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	701a      	strb	r2, [r3, #0]
  testInit();
 8005c3a:	f7ff ffe1 	bl	8005c00 <testInit>
  batteryInit(ADC_HANDLER);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7fd fc83 	bl	800354c <batteryInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005c46:	4b73      	ldr	r3, [pc, #460]	@ (8005e14 <Meas_Init+0x1ec>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <Meas_Init+0x2e>
 8005c4e:	4b71      	ldr	r3, [pc, #452]	@ (8005e14 <Meas_Init+0x1ec>)
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d072      	beq.n	8005d3c <Meas_Init+0x114>
    I2CSensors_Init(sensorI2C);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f7ff f8f7 	bl	8004e4c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8005c5e:	f7ff fc13 	bl	8005488 <HT_DeviceConnected>
 8005c62:	0003      	movs	r3, r0
 8005c64:	001a      	movs	r2, r3
 8005c66:	2301      	movs	r3, #1
 8005c68:	4053      	eors	r3, r2
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00c      	beq.n	8005c8a <Meas_Init+0x62>
       Error("Humidity / Temperature sensor NOT connected!");
 8005c70:	4a69      	ldr	r2, [pc, #420]	@ (8005e18 <Meas_Init+0x1f0>)
 8005c72:	4b6a      	ldr	r3, [pc, #424]	@ (8005e1c <Meas_Init+0x1f4>)
 8005c74:	0019      	movs	r1, r3
 8005c76:	2001      	movs	r0, #1
 8005c78:	f002 ff36 	bl	8008ae8 <CreateLine>
       MeasTest.HT_Tested = false;
 8005c7c:	4b68      	ldr	r3, [pc, #416]	@ (8005e20 <Meas_Init+0x1f8>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8005c82:	4b64      	ldr	r3, [pc, #400]	@ (8005e14 <Meas_Init+0x1ec>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	e008      	b.n	8005c9c <Meas_Init+0x74>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 8005c8a:	4b65      	ldr	r3, [pc, #404]	@ (8005e20 <Meas_Init+0x1f8>)
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8005c90:	4a64      	ldr	r2, [pc, #400]	@ (8005e24 <Meas_Init+0x1fc>)
 8005c92:	4b65      	ldr	r3, [pc, #404]	@ (8005e28 <Meas_Init+0x200>)
 8005c94:	0019      	movs	r1, r3
 8005c96:	2003      	movs	r0, #3
 8005c98:	f002 ff26 	bl	8008ae8 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8005c9c:	f7ff fa79 	bl	8005192 <Gas_DeviceConnected>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	001a      	movs	r2, r3
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4053      	eors	r3, r2
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00c      	beq.n	8005cc8 <Meas_Init+0xa0>
      MeasTest.VOC_Tested = false;
 8005cae:	4b5c      	ldr	r3, [pc, #368]	@ (8005e20 <Meas_Init+0x1f8>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8005cb4:	4a5d      	ldr	r2, [pc, #372]	@ (8005e2c <Meas_Init+0x204>)
 8005cb6:	4b59      	ldr	r3, [pc, #356]	@ (8005e1c <Meas_Init+0x1f4>)
 8005cb8:	0019      	movs	r1, r3
 8005cba:	2001      	movs	r0, #1
 8005cbc:	f002 ff14 	bl	8008ae8 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
//       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
//       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
       MeasEnabled.VOC_measurementEnabled = false;
 8005cc0:	4b54      	ldr	r3, [pc, #336]	@ (8005e14 <Meas_Init+0x1ec>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	705a      	strb	r2, [r3, #1]
 8005cc6:	e008      	b.n	8005cda <Meas_Init+0xb2>
    }else{
      MeasTest.VOC_Tested = true;
 8005cc8:	4b55      	ldr	r3, [pc, #340]	@ (8005e20 <Meas_Init+0x1f8>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8005cce:	4a58      	ldr	r2, [pc, #352]	@ (8005e30 <Meas_Init+0x208>)
 8005cd0:	4b55      	ldr	r3, [pc, #340]	@ (8005e28 <Meas_Init+0x200>)
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	2003      	movs	r0, #3
 8005cd6:	f002 ff07 	bl	8008ae8 <CreateLine>
      // HT Device is connected, turning led on GREEN.
//      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8005cda:	4b51      	ldr	r3, [pc, #324]	@ (8005e20 <Meas_Init+0x1f8>)
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d018      	beq.n	8005d14 <Meas_Init+0xec>
 8005ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8005e20 <Meas_Init+0x1f8>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d014      	beq.n	8005d14 <Meas_Init+0xec>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005cea:	4b52      	ldr	r3, [pc, #328]	@ (8005e34 <Meas_Init+0x20c>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	2101      	movs	r1, #1
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f004 fca5 	bl	800a640 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8005cf6:	2380      	movs	r3, #128	@ 0x80
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	484e      	ldr	r0, [pc, #312]	@ (8005e34 <Meas_Init+0x20c>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	0019      	movs	r1, r3
 8005d00:	f004 fc9e 	bl	800a640 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005d04:	2380      	movs	r3, #128	@ 0x80
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	484a      	ldr	r0, [pc, #296]	@ (8005e34 <Meas_Init+0x20c>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	0019      	movs	r1, r3
 8005d0e:	f004 fc97 	bl	800a640 <HAL_GPIO_WritePin>
 8005d12:	e013      	b.n	8005d3c <Meas_Init+0x114>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005d14:	4b47      	ldr	r3, [pc, #284]	@ (8005e34 <Meas_Init+0x20c>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	2101      	movs	r1, #1
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f004 fc90 	bl	800a640 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005d20:	2380      	movs	r3, #128	@ 0x80
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	4843      	ldr	r0, [pc, #268]	@ (8005e34 <Meas_Init+0x20c>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	0019      	movs	r1, r3
 8005d2a:	f004 fc89 	bl	800a640 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005d2e:	2380      	movs	r3, #128	@ 0x80
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4840      	ldr	r0, [pc, #256]	@ (8005e34 <Meas_Init+0x20c>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	0019      	movs	r1, r3
 8005d38:	f004 fc82 	bl	800a640 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8005d3c:	4b35      	ldr	r3, [pc, #212]	@ (8005e14 <Meas_Init+0x1ec>)
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <Meas_Init+0x128>
    MIC_Init(micI2s);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	0018      	movs	r0, r3
 8005d48:	f000 faa2 	bl	8006290 <MIC_Init>
    Meas_TestStart();
 8005d4c:	f7ff ff48 	bl	8005be0 <Meas_TestStart>
  }
  uint8_t offset = 0;
 8005d50:	2547      	movs	r5, #71	@ 0x47
 8005d52:	197b      	adds	r3, r7, r5
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8005d58:	197b      	adds	r3, r7, r5
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	197a      	adds	r2, r7, r5
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	7011      	strb	r1, [r2, #0]
 8005d62:	4a2c      	ldr	r2, [pc, #176]	@ (8005e14 <Meas_Init+0x1ec>)
 8005d64:	7814      	ldrb	r4, [r2, #0]
 8005d66:	4a34      	ldr	r2, [pc, #208]	@ (8005e38 <Meas_Init+0x210>)
 8005d68:	0119      	lsls	r1, r3, #4
 8005d6a:	4834      	ldr	r0, [pc, #208]	@ (8005e3c <Meas_Init+0x214>)
 8005d6c:	5088      	str	r0, [r1, r2]
 8005d6e:	4932      	ldr	r1, [pc, #200]	@ (8005e38 <Meas_Init+0x210>)
 8005d70:	011a      	lsls	r2, r3, #4
 8005d72:	188a      	adds	r2, r1, r2
 8005d74:	3204      	adds	r2, #4
 8005d76:	4932      	ldr	r1, [pc, #200]	@ (8005e40 <Meas_Init+0x218>)
 8005d78:	6011      	str	r1, [r2, #0]
 8005d7a:	492f      	ldr	r1, [pc, #188]	@ (8005e38 <Meas_Init+0x210>)
 8005d7c:	011a      	lsls	r2, r3, #4
 8005d7e:	188a      	adds	r2, r1, r2
 8005d80:	3208      	adds	r2, #8
 8005d82:	4930      	ldr	r1, [pc, #192]	@ (8005e44 <Meas_Init+0x21c>)
 8005d84:	6011      	str	r1, [r2, #0]
 8005d86:	4a2c      	ldr	r2, [pc, #176]	@ (8005e38 <Meas_Init+0x210>)
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	18d3      	adds	r3, r2, r3
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	1c22      	adds	r2, r4, #0
 8005d90:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8005d92:	197b      	adds	r3, r7, r5
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	197a      	adds	r2, r7, r5
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	7011      	strb	r1, [r2, #0]
 8005d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e14 <Meas_Init+0x1ec>)
 8005d9e:	7854      	ldrb	r4, [r2, #1]
 8005da0:	4a25      	ldr	r2, [pc, #148]	@ (8005e38 <Meas_Init+0x210>)
 8005da2:	0119      	lsls	r1, r3, #4
 8005da4:	4828      	ldr	r0, [pc, #160]	@ (8005e48 <Meas_Init+0x220>)
 8005da6:	5088      	str	r0, [r1, r2]
 8005da8:	4923      	ldr	r1, [pc, #140]	@ (8005e38 <Meas_Init+0x210>)
 8005daa:	011a      	lsls	r2, r3, #4
 8005dac:	188a      	adds	r2, r1, r2
 8005dae:	3204      	adds	r2, #4
 8005db0:	4926      	ldr	r1, [pc, #152]	@ (8005e4c <Meas_Init+0x224>)
 8005db2:	6011      	str	r1, [r2, #0]
 8005db4:	4920      	ldr	r1, [pc, #128]	@ (8005e38 <Meas_Init+0x210>)
 8005db6:	011a      	lsls	r2, r3, #4
 8005db8:	188a      	adds	r2, r1, r2
 8005dba:	3208      	adds	r2, #8
 8005dbc:	4924      	ldr	r1, [pc, #144]	@ (8005e50 <Meas_Init+0x228>)
 8005dbe:	6011      	str	r1, [r2, #0]
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e38 <Meas_Init+0x210>)
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	18d3      	adds	r3, r2, r3
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	1c22      	adds	r2, r4, #0
 8005dca:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8005dcc:	197b      	adds	r3, r7, r5
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	197a      	adds	r2, r7, r5
 8005dd2:	1c59      	adds	r1, r3, #1
 8005dd4:	7011      	strb	r1, [r2, #0]
 8005dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e14 <Meas_Init+0x1ec>)
 8005dd8:	7894      	ldrb	r4, [r2, #2]
 8005dda:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <Meas_Init+0x210>)
 8005ddc:	0119      	lsls	r1, r3, #4
 8005dde:	481d      	ldr	r0, [pc, #116]	@ (8005e54 <Meas_Init+0x22c>)
 8005de0:	5088      	str	r0, [r1, r2]
 8005de2:	4915      	ldr	r1, [pc, #84]	@ (8005e38 <Meas_Init+0x210>)
 8005de4:	011a      	lsls	r2, r3, #4
 8005de6:	188a      	adds	r2, r1, r2
 8005de8:	3204      	adds	r2, #4
 8005dea:	491b      	ldr	r1, [pc, #108]	@ (8005e58 <Meas_Init+0x230>)
 8005dec:	6011      	str	r1, [r2, #0]
 8005dee:	4912      	ldr	r1, [pc, #72]	@ (8005e38 <Meas_Init+0x210>)
 8005df0:	011a      	lsls	r2, r3, #4
 8005df2:	188a      	adds	r2, r1, r2
 8005df4:	3208      	adds	r2, #8
 8005df6:	4919      	ldr	r1, [pc, #100]	@ (8005e5c <Meas_Init+0x234>)
 8005df8:	6011      	str	r1, [r2, #0]
 8005dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8005e38 <Meas_Init+0x210>)
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	18d3      	adds	r3, r2, r3
 8005e00:	330c      	adds	r3, #12
 8005e02:	1c22      	adds	r2, r4, #0
 8005e04:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8005e06:	46c0      	nop			@ (mov r8, r8)
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b012      	add	sp, #72	@ 0x48
 8005e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	20000d04 	.word	0x20000d04
 8005e14:	20000cfc 	.word	0x20000cfc
 8005e18:	08019d1c 	.word	0x08019d1c
 8005e1c:	08019d4c 	.word	0x08019d4c
 8005e20:	20000d00 	.word	0x20000d00
 8005e24:	08019d50 	.word	0x08019d50
 8005e28:	08019d7c 	.word	0x08019d7c
 8005e2c:	08019d80 	.word	0x08019d80
 8005e30:	08019d9c 	.word	0x08019d9c
 8005e34:	50000400 	.word	0x50000400
 8005e38:	20000ccc 	.word	0x20000ccc
 8005e3c:	08005b4d 	.word	0x08005b4d
 8005e40:	08005b5d 	.word	0x08005b5d
 8005e44:	20000cc8 	.word	0x20000cc8
 8005e48:	08005b7d 	.word	0x08005b7d
 8005e4c:	08005b8d 	.word	0x08005b8d
 8005e50:	20000cc9 	.word	0x20000cc9
 8005e54:	08005ba5 	.word	0x08005ba5
 8005e58:	08005baf 	.word	0x08005baf
 8005e5c:	20000cca 	.word	0x20000cca

08005e60 <StartMeasurements>:

void StartMeasurements(void) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005e64:	4b10      	ldr	r3, [pc, #64]	@ (8005ea8 <StartMeasurements+0x48>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	e015      	b.n	8005e98 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea8 <StartMeasurements+0x48>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	4a0e      	ldr	r2, [pc, #56]	@ (8005eac <StartMeasurements+0x4c>)
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	18d3      	adds	r3, r2, r3
 8005e76:	330c      	adds	r3, #12
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d006      	beq.n	8005e8c <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <StartMeasurements+0x48>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	001a      	movs	r2, r3
 8005e84:	4b09      	ldr	r3, [pc, #36]	@ (8005eac <StartMeasurements+0x4c>)
 8005e86:	0112      	lsls	r2, r2, #4
 8005e88:	58d3      	ldr	r3, [r2, r3]
 8005e8a:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005e8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ea8 <StartMeasurements+0x48>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	4b04      	ldr	r3, [pc, #16]	@ (8005ea8 <StartMeasurements+0x48>)
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	4b03      	ldr	r3, [pc, #12]	@ (8005ea8 <StartMeasurements+0x48>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d9e5      	bls.n	8005e6c <StartMeasurements+0xc>
    }
  }
}
 8005ea0:	46c0      	nop			@ (mov r8, r8)
 8005ea2:	46c0      	nop			@ (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000d06 	.word	0x20000d06
 8005eac:	20000ccc 	.word	0x20000ccc

08005eb0 <Meas_Test>:

void Meas_Test(){
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8005eb4:	4b27      	ldr	r3, [pc, #156]	@ (8005f54 <Meas_Test+0xa4>)
 8005eb6:	78db      	ldrb	r3, [r3, #3]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	4053      	eors	r3, r2
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <Meas_Test+0x16>
    ESP_WakeTest();
 8005ec2:	f7fe fcb9 	bl	8004838 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 8005ec6:	4b23      	ldr	r3, [pc, #140]	@ (8005f54 <Meas_Test+0xa4>)
 8005ec8:	789b      	ldrb	r3, [r3, #2]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	4053      	eors	r3, r2
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d023      	beq.n	8005f1c <Meas_Test+0x6c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8005ed4:	f7ff fe8b 	bl	8005bee <MIC_IsTestMeasurementDoneWrapper>
 8005ed8:	1e03      	subs	r3, r0, #0
 8005eda:	d011      	beq.n	8005f00 <Meas_Test+0x50>
      MeasTest.MIC_Tested = true;
 8005edc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f54 <Meas_Test+0xa4>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 4000;
 8005ee2:	2380      	movs	r3, #128	@ 0x80
 8005ee4:	05db      	lsls	r3, r3, #23
 8005ee6:	22fa      	movs	r2, #250	@ 0xfa
 8005ee8:	0112      	lsls	r2, r2, #4
 8005eea:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 8005eec:	2380      	movs	r3, #128	@ 0x80
 8005eee:	05db      	lsls	r3, r3, #23
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8005ef4:	2380      	movs	r3, #128	@ 0x80
 8005ef6:	05db      	lsls	r3, r3, #23
 8005ef8:	22fa      	movs	r2, #250	@ 0xfa
 8005efa:	0112      	lsls	r2, r2, #4
 8005efc:	641a      	str	r2, [r3, #64]	@ 0x40
 8005efe:	e00d      	b.n	8005f1c <Meas_Test+0x6c>
    }
    else{
      TIM2 -> CCR1 = 0;
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	05db      	lsls	r3, r3, #23
 8005f04:	2200      	movs	r2, #0
 8005f06:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 8005f08:	2380      	movs	r3, #128	@ 0x80
 8005f0a:	05db      	lsls	r3, r3, #23
 8005f0c:	22fa      	movs	r2, #250	@ 0xfa
 8005f0e:	0112      	lsls	r2, r2, #4
 8005f10:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8005f12:	2380      	movs	r3, #128	@ 0x80
 8005f14:	05db      	lsls	r3, r3, #23
 8005f16:	22fa      	movs	r2, #250	@ 0xfa
 8005f18:	0112      	lsls	r2, r2, #4
 8005f1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8005f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <Meas_Test+0xa4>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d013      	beq.n	8005f4c <Meas_Test+0x9c>
 8005f24:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <Meas_Test+0xa4>)
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00f      	beq.n	8005f4c <Meas_Test+0x9c>
 8005f2c:	4b09      	ldr	r3, [pc, #36]	@ (8005f54 <Meas_Test+0xa4>)
 8005f2e:	78db      	ldrb	r3, [r3, #3]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <Meas_Test+0x9c>
 8005f34:	4b07      	ldr	r3, [pc, #28]	@ (8005f54 <Meas_Test+0xa4>)
 8005f36:	789b      	ldrb	r3, [r3, #2]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <Meas_Test+0x9c>
    Debug("Test completed");
 8005f3c:	4a06      	ldr	r2, [pc, #24]	@ (8005f58 <Meas_Test+0xa8>)
 8005f3e:	4b07      	ldr	r3, [pc, #28]	@ (8005f5c <Meas_Test+0xac>)
 8005f40:	0019      	movs	r1, r3
 8005f42:	2003      	movs	r0, #3
 8005f44:	f002 fdd0 	bl	8008ae8 <CreateLine>
    SetTestDone();
 8005f48:	f7ff fcc4 	bl	80058d4 <SetTestDone>
  }
}
 8005f4c:	46c0      	nop			@ (mov r8, r8)
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	46c0      	nop			@ (mov r8, r8)
 8005f54:	20000d00 	.word	0x20000d00
 8005f58:	08019db4 	.word	0x08019db4
 8005f5c:	08019d7c 	.word	0x08019d7c

08005f60 <ResetMeasurements>:
void ResetMeasurements(void) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8005f64:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <ResetMeasurements+0x34>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f94 <ResetMeasurements+0x34>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8005f70:	4b08      	ldr	r3, [pc, #32]	@ (8005f94 <ResetMeasurements+0x34>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8005f76:	4b07      	ldr	r3, [pc, #28]	@ (8005f94 <ResetMeasurements+0x34>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005f7c:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <ResetMeasurements+0x34>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8005f82:	4b04      	ldr	r3, [pc, #16]	@ (8005f94 <ResetMeasurements+0x34>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005f88:	4b02      	ldr	r3, [pc, #8]	@ (8005f94 <ResetMeasurements+0x34>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	73da      	strb	r2, [r3, #15]
}
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000cbc 	.word	0x20000cbc

08005f98 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f9c:	4b18      	ldr	r3, [pc, #96]	@ (8006000 <MeasurementsCompleted+0x68>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e024      	b.n	8005fee <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005fa4:	4b16      	ldr	r3, [pc, #88]	@ (8006000 <MeasurementsCompleted+0x68>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	4a16      	ldr	r2, [pc, #88]	@ (8006004 <MeasurementsCompleted+0x6c>)
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	18d3      	adds	r3, r2, r3
 8005fae:	330c      	adds	r3, #12
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d015      	beq.n	8005fe2 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005fb6:	4b12      	ldr	r3, [pc, #72]	@ (8006000 <MeasurementsCompleted+0x68>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	4a12      	ldr	r2, [pc, #72]	@ (8006004 <MeasurementsCompleted+0x6c>)
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	18d3      	adds	r3, r2, r3
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4798      	blx	r3
 8005fc6:	1e03      	subs	r3, r0, #0
 8005fc8:	d009      	beq.n	8005fde <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <MeasurementsCompleted+0x68>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	4a0d      	ldr	r2, [pc, #52]	@ (8006004 <MeasurementsCompleted+0x6c>)
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	18d3      	adds	r3, r2, r3
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e001      	b.n	8005fe2 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e00a      	b.n	8005ff8 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005fe2:	4b07      	ldr	r3, [pc, #28]	@ (8006000 <MeasurementsCompleted+0x68>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <MeasurementsCompleted+0x68>)
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	4b04      	ldr	r3, [pc, #16]	@ (8006000 <MeasurementsCompleted+0x68>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d9d6      	bls.n	8005fa4 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8005ff6:	2301      	movs	r3, #1
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	20000d06 	.word	0x20000d06
 8006004:	20000ccc 	.word	0x20000ccc

08006008 <Mic_Upkeep>:

void Mic_Upkeep(){
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  switch(MicState){
 800600c:	4b20      	ldr	r3, [pc, #128]	@ (8006090 <Mic_Upkeep+0x88>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d022      	beq.n	800605a <Mic_Upkeep+0x52>
 8006014:	dc2c      	bgt.n	8006070 <Mic_Upkeep+0x68>
 8006016:	2b02      	cmp	r3, #2
 8006018:	d00f      	beq.n	800603a <Mic_Upkeep+0x32>
 800601a:	dc29      	bgt.n	8006070 <Mic_Upkeep+0x68>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <Mic_Upkeep+0x1e>
 8006020:	2b01      	cmp	r3, #1
 8006022:	d004      	beq.n	800602e <Mic_Upkeep+0x26>
 8006024:	e024      	b.n	8006070 <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 8006026:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <Mic_Upkeep+0x88>)
 8006028:	2201      	movs	r2, #1
 800602a:	701a      	strb	r2, [r3, #0]
    break;
 800602c:	e02d      	b.n	800608a <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 800602e:	f7ff fdc4 	bl	8005bba <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8006032:	4b17      	ldr	r3, [pc, #92]	@ (8006090 <Mic_Upkeep+0x88>)
 8006034:	2202      	movs	r2, #2
 8006036:	701a      	strb	r2, [r3, #0]
    break;
 8006038:	e027      	b.n	800608a <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 800603a:	f7ff fdc9 	bl	8005bd0 <MIC_IsMeasurementDoneWrapper>
 800603e:	1e03      	subs	r3, r0, #0
 8006040:	d020      	beq.n	8006084 <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 8006042:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <Mic_Upkeep+0x88>)
 8006044:	2203      	movs	r2, #3
 8006046:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 8006048:	f003 f946 	bl	80092d8 <HAL_GetTick>
 800604c:	0003      	movs	r3, r0
 800604e:	22fa      	movs	r2, #250	@ 0xfa
 8006050:	0092      	lsls	r2, r2, #2
 8006052:	189a      	adds	r2, r3, r2
 8006054:	4b0f      	ldr	r3, [pc, #60]	@ (8006094 <Mic_Upkeep+0x8c>)
 8006056:	601a      	str	r2, [r3, #0]
    }
    break;
 8006058:	e014      	b.n	8006084 <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 800605a:	4b0e      	ldr	r3, [pc, #56]	@ (8006094 <Mic_Upkeep+0x8c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	0018      	movs	r0, r3
 8006060:	f002 fcec 	bl	8008a3c <TimestampIsReached>
 8006064:	1e03      	subs	r3, r0, #0
 8006066:	d00f      	beq.n	8006088 <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 8006068:	4b09      	ldr	r3, [pc, #36]	@ (8006090 <Mic_Upkeep+0x88>)
 800606a:	2201      	movs	r2, #1
 800606c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800606e:	e00b      	b.n	8006088 <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006070:	4a09      	ldr	r2, [pc, #36]	@ (8006098 <Mic_Upkeep+0x90>)
 8006072:	4b0a      	ldr	r3, [pc, #40]	@ (800609c <Mic_Upkeep+0x94>)
 8006074:	0019      	movs	r1, r3
 8006076:	2003      	movs	r0, #3
 8006078:	f002 fd36 	bl	8008ae8 <CreateLine>
    MicState = MIC_STATE_INIT;
 800607c:	4b04      	ldr	r3, [pc, #16]	@ (8006090 <Mic_Upkeep+0x88>)
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
    break;
 8006082:	e002      	b.n	800608a <Mic_Upkeep+0x82>
    break;
 8006084:	46c0      	nop			@ (mov r8, r8)
 8006086:	e000      	b.n	800608a <Mic_Upkeep+0x82>
    break;
 8006088:	46c0      	nop			@ (mov r8, r8)
  }
}
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000d05 	.word	0x20000d05
 8006094:	20000d0c 	.word	0x20000d0c
 8006098:	08019dc4 	.word	0x08019dc4
 800609c:	08019d7c 	.word	0x08019d7c

080060a0 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 80060a0:	b5b0      	push	{r4, r5, r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af04      	add	r7, sp, #16
  switch(MeasState) {
 80060a6:	4b42      	ldr	r3, [pc, #264]	@ (80061b0 <Meas_Upkeep+0x110>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b06      	cmp	r3, #6
 80060ac:	d900      	bls.n	80060b0 <Meas_Upkeep+0x10>
 80060ae:	e075      	b.n	800619c <Meas_Upkeep+0xfc>
 80060b0:	009a      	lsls	r2, r3, #2
 80060b2:	4b40      	ldr	r3, [pc, #256]	@ (80061b4 <Meas_Upkeep+0x114>)
 80060b4:	18d3      	adds	r3, r2, r3
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 80060ba:	4a3f      	ldr	r2, [pc, #252]	@ (80061b8 <Meas_Upkeep+0x118>)
 80060bc:	4b3f      	ldr	r3, [pc, #252]	@ (80061bc <Meas_Upkeep+0x11c>)
 80060be:	0019      	movs	r1, r3
 80060c0:	2003      	movs	r0, #3
 80060c2:	f002 fd11 	bl	8008ae8 <CreateLine>
    break;
 80060c6:	e070      	b.n	80061aa <Meas_Upkeep+0x10a>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80060c8:	f7ff ff4a 	bl	8005f60 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80060cc:	4b38      	ldr	r3, [pc, #224]	@ (80061b0 <Meas_Upkeep+0x110>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
    break;
 80060d2:	e06a      	b.n	80061aa <Meas_Upkeep+0x10a>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80060d4:	f7ff fec4 	bl	8005e60 <StartMeasurements>
    TIM2 -> CCR3 = 3000;
 80060d8:	2380      	movs	r3, #128	@ 0x80
 80060da:	05db      	lsls	r3, r3, #23
 80060dc:	4a38      	ldr	r2, [pc, #224]	@ (80061c0 <Meas_Upkeep+0x120>)
 80060de:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80060e0:	4b33      	ldr	r3, [pc, #204]	@ (80061b0 <Meas_Upkeep+0x110>)
 80060e2:	2202      	movs	r2, #2
 80060e4:	701a      	strb	r2, [r3, #0]
   break;
 80060e6:	e060      	b.n	80061aa <Meas_Upkeep+0x10a>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80060e8:	f7ff ff56 	bl	8005f98 <MeasurementsCompleted>
 80060ec:	1e03      	subs	r3, r0, #0
 80060ee:	d059      	beq.n	80061a4 <Meas_Upkeep+0x104>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 80060f0:	4b2f      	ldr	r3, [pc, #188]	@ (80061b0 <Meas_Upkeep+0x110>)
 80060f2:	2203      	movs	r2, #3
 80060f4:	701a      	strb	r2, [r3, #0]
    }
    break;
 80060f6:	e055      	b.n	80061a4 <Meas_Upkeep+0x104>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 80060f8:	4a32      	ldr	r2, [pc, #200]	@ (80061c4 <Meas_Upkeep+0x124>)
 80060fa:	4b30      	ldr	r3, [pc, #192]	@ (80061bc <Meas_Upkeep+0x11c>)
 80060fc:	0019      	movs	r1, r3
 80060fe:	2003      	movs	r0, #3
 8006100:	f002 fcf2 	bl	8008ae8 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8006104:	4b30      	ldr	r3, [pc, #192]	@ (80061c8 <Meas_Upkeep+0x128>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	4a30      	ldr	r2, [pc, #192]	@ (80061cc <Meas_Upkeep+0x12c>)
 800610a:	492c      	ldr	r1, [pc, #176]	@ (80061bc <Meas_Upkeep+0x11c>)
 800610c:	2003      	movs	r0, #3
 800610e:	f002 fceb 	bl	8008ae8 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8006112:	4b2d      	ldr	r3, [pc, #180]	@ (80061c8 <Meas_Upkeep+0x128>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	1c18      	adds	r0, r3, #0
 8006118:	f7fd f922 	bl	8003360 <__aeabi_f2d>
 800611c:	0004      	movs	r4, r0
 800611e:	000d      	movs	r5, r1
 8006120:	4b29      	ldr	r3, [pc, #164]	@ (80061c8 <Meas_Upkeep+0x128>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	1c18      	adds	r0, r3, #0
 8006126:	f7fd f91b 	bl	8003360 <__aeabi_f2d>
 800612a:	0002      	movs	r2, r0
 800612c:	000b      	movs	r3, r1
 800612e:	4828      	ldr	r0, [pc, #160]	@ (80061d0 <Meas_Upkeep+0x130>)
 8006130:	4922      	ldr	r1, [pc, #136]	@ (80061bc <Meas_Upkeep+0x11c>)
 8006132:	9202      	str	r2, [sp, #8]
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	9400      	str	r4, [sp, #0]
 8006138:	9501      	str	r5, [sp, #4]
 800613a:	0002      	movs	r2, r0
 800613c:	2003      	movs	r0, #3
 800613e:	f002 fcd3 	bl	8008ae8 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006142:	4b21      	ldr	r3, [pc, #132]	@ (80061c8 <Meas_Upkeep+0x128>)
 8006144:	6858      	ldr	r0, [r3, #4]
 8006146:	4b20      	ldr	r3, [pc, #128]	@ (80061c8 <Meas_Upkeep+0x128>)
 8006148:	6819      	ldr	r1, [r3, #0]
 800614a:	4b1f      	ldr	r3, [pc, #124]	@ (80061c8 <Meas_Upkeep+0x128>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	b29b      	uxth	r3, r3
 8006150:	001a      	movs	r2, r3
 8006152:	f7fd faad 	bl	80036b0 <setMeasurement>
    checkCharges();
 8006156:	f7fd fa07 	bl	8003568 <checkCharges>
    TIM2 -> CCR3 = 4000;
 800615a:	2380      	movs	r3, #128	@ 0x80
 800615c:	05db      	lsls	r3, r3, #23
 800615e:	22fa      	movs	r2, #250	@ 0xfa
 8006160:	0112      	lsls	r2, r2, #4
 8006162:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasStamp = HAL_GetTick() + 10000;
 8006164:	f003 f8b8 	bl	80092d8 <HAL_GetTick>
 8006168:	0003      	movs	r3, r0
 800616a:	4a1a      	ldr	r2, [pc, #104]	@ (80061d4 <Meas_Upkeep+0x134>)
 800616c:	189a      	adds	r2, r3, r2
 800616e:	4b1a      	ldr	r3, [pc, #104]	@ (80061d8 <Meas_Upkeep+0x138>)
 8006170:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8006172:	4b0f      	ldr	r3, [pc, #60]	@ (80061b0 <Meas_Upkeep+0x110>)
 8006174:	2206      	movs	r2, #6
 8006176:	701a      	strb	r2, [r3, #0]
    break;
 8006178:	e017      	b.n	80061aa <Meas_Upkeep+0x10a>

  case MEAS_STATE_WAIT:
    Debug("Waiting until next loop");
 800617a:	4a18      	ldr	r2, [pc, #96]	@ (80061dc <Meas_Upkeep+0x13c>)
 800617c:	4b0f      	ldr	r3, [pc, #60]	@ (80061bc <Meas_Upkeep+0x11c>)
 800617e:	0019      	movs	r1, r3
 8006180:	2003      	movs	r0, #3
 8006182:	f002 fcb1 	bl	8008ae8 <CreateLine>
    if(TimestampIsReached(MeasStamp)){
 8006186:	4b14      	ldr	r3, [pc, #80]	@ (80061d8 <Meas_Upkeep+0x138>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	0018      	movs	r0, r3
 800618c:	f002 fc56 	bl	8008a3c <TimestampIsReached>
 8006190:	1e03      	subs	r3, r0, #0
 8006192:	d009      	beq.n	80061a8 <Meas_Upkeep+0x108>
      MeasState = MEAS_STATE_INIT;
 8006194:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <Meas_Upkeep+0x110>)
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
    }

    break;
 800619a:	e005      	b.n	80061a8 <Meas_Upkeep+0x108>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <Meas_Upkeep+0x110>)
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
    break;
 80061a2:	e002      	b.n	80061aa <Meas_Upkeep+0x10a>
    break;
 80061a4:	46c0      	nop			@ (mov r8, r8)
 80061a6:	e000      	b.n	80061aa <Meas_Upkeep+0x10a>
    break;
 80061a8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bdb0      	pop	{r4, r5, r7, pc}
 80061b0:	20000d04 	.word	0x20000d04
 80061b4:	0801a3f0 	.word	0x0801a3f0
 80061b8:	08019de4 	.word	0x08019de4
 80061bc:	08019d7c 	.word	0x08019d7c
 80061c0:	00000bb8 	.word	0x00000bb8
 80061c4:	08019e04 	.word	0x08019e04
 80061c8:	20000cbc 	.word	0x20000cbc
 80061cc:	08019e18 	.word	0x08019e18
 80061d0:	08019e30 	.word	0x08019e30
 80061d4:	00002710 	.word	0x00002710
 80061d8:	20000d08 	.word	0x20000d08
 80061dc:	08019e64 	.word	0x08019e64

080061e0 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	1d3b      	adds	r3, r7, #4
 80061e8:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80061ea:	240f      	movs	r4, #15
 80061ec:	193b      	adds	r3, r7, r4
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80061f2:	4b20      	ldr	r3, [pc, #128]	@ (8006274 <Meas_SetEnabledSensors+0x94>)
 80061f4:	1d3a      	adds	r2, r7, #4
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80061fa:	193b      	adds	r3, r7, r4
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	193a      	adds	r2, r7, r4
 8006200:	1c59      	adds	r1, r3, #1
 8006202:	7011      	strb	r1, [r2, #0]
 8006204:	0018      	movs	r0, r3
 8006206:	1d3b      	adds	r3, r7, #4
 8006208:	7819      	ldrb	r1, [r3, #0]
 800620a:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <Meas_SetEnabledSensors+0x98>)
 800620c:	0103      	lsls	r3, r0, #4
 800620e:	18d3      	adds	r3, r2, r3
 8006210:	330c      	adds	r3, #12
 8006212:	1c0a      	adds	r2, r1, #0
 8006214:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8006216:	193b      	adds	r3, r7, r4
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	193a      	adds	r2, r7, r4
 800621c:	1c59      	adds	r1, r3, #1
 800621e:	7011      	strb	r1, [r2, #0]
 8006220:	0018      	movs	r0, r3
 8006222:	1d3b      	adds	r3, r7, #4
 8006224:	7859      	ldrb	r1, [r3, #1]
 8006226:	4a14      	ldr	r2, [pc, #80]	@ (8006278 <Meas_SetEnabledSensors+0x98>)
 8006228:	0103      	lsls	r3, r0, #4
 800622a:	18d3      	adds	r3, r2, r3
 800622c:	330c      	adds	r3, #12
 800622e:	1c0a      	adds	r2, r1, #0
 8006230:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8006232:	193b      	adds	r3, r7, r4
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	193a      	adds	r2, r7, r4
 8006238:	1c59      	adds	r1, r3, #1
 800623a:	7011      	strb	r1, [r2, #0]
 800623c:	0018      	movs	r0, r3
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	7899      	ldrb	r1, [r3, #2]
 8006242:	4a0d      	ldr	r2, [pc, #52]	@ (8006278 <Meas_SetEnabledSensors+0x98>)
 8006244:	0103      	lsls	r3, r0, #4
 8006246:	18d3      	adds	r3, r2, r3
 8006248:	330c      	adds	r3, #12
 800624a:	1c0a      	adds	r2, r1, #0
 800624c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 800624e:	193b      	adds	r3, r7, r4
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	193a      	adds	r2, r7, r4
 8006254:	1c59      	adds	r1, r3, #1
 8006256:	7011      	strb	r1, [r2, #0]
 8006258:	0018      	movs	r0, r3
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	78d9      	ldrb	r1, [r3, #3]
 800625e:	4a06      	ldr	r2, [pc, #24]	@ (8006278 <Meas_SetEnabledSensors+0x98>)
 8006260:	0103      	lsls	r3, r0, #4
 8006262:	18d3      	adds	r3, r2, r3
 8006264:	330c      	adds	r3, #12
 8006266:	1c0a      	adds	r2, r1, #0
 8006268:	701a      	strb	r2, [r3, #0]
}
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	46bd      	mov	sp, r7
 800626e:	b005      	add	sp, #20
 8006270:	bd90      	pop	{r4, r7, pc}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	20000cfc 	.word	0x20000cfc
 8006278:	20000ccc 	.word	0x20000ccc

0800627c <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006280:	4b02      	ldr	r3, [pc, #8]	@ (800628c <SetESPMeasurementDone+0x10>)
 8006282:	2201      	movs	r2, #1
 8006284:	70da      	strb	r2, [r3, #3]
}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000d00 	.word	0x20000d00

08006290 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	4b03      	ldr	r3, [pc, #12]	@ (80062a8 <MIC_Init+0x18>)
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b002      	add	sp, #8
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	46c0      	nop			@ (mov r8, r8)
 80062a8:	20000d10 	.word	0x20000d10

080062ac <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 80062b4:	4b0c      	ldr	r3, [pc, #48]	@ (80062e8 <UpdateSampleRate+0x3c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d00e      	beq.n	80062de <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 80062c0:	4b09      	ldr	r3, [pc, #36]	@ (80062e8 <UpdateSampleRate+0x3c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	0018      	movs	r0, r3
 80062c6:	f006 fadb 	bl	800c880 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 80062ca:	4b07      	ldr	r3, [pc, #28]	@ (80062e8 <UpdateSampleRate+0x3c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 80062d2:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <UpdateSampleRate+0x3c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	0018      	movs	r0, r3
 80062d8:	f006 f9e0 	bl	800c69c <HAL_I2S_Init>
 80062dc:	e000      	b.n	80062e0 <UpdateSampleRate+0x34>
    return;
 80062de:	46c0      	nop			@ (mov r8, r8)
}
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b002      	add	sp, #8
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	20000d10 	.word	0x20000d10

080062ec <ConvertAudio>:

static float ConvertAudio(uint16_t* data) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	@ 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 80062f4:	4b18      	ldr	r3, [pc, #96]	@ (8006358 <ConvertAudio+0x6c>)
 80062f6:	623b      	str	r3, [r7, #32]
  float adjustedAudioValue = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	61fb      	str	r3, [r7, #28]
  uint32_t audioValue = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24

  int32_t value = 12345;
 8006300:	4b16      	ldr	r3, [pc, #88]	@ (800635c <ConvertAudio+0x70>)
 8006302:	61bb      	str	r3, [r7, #24]
  //uint16_t msb=(value & 0x0FFFFFF)>>9;
  //uint16_t lsb=(value & 0x1FF)<<7;
  MSP = data[0]<<9;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	025b      	lsls	r3, r3, #9
 800630a:	617b      	str	r3, [r7, #20]
  LSP = (data[1]&0xFF80)>>7;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3302      	adds	r3, #2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	09db      	lsrs	r3, r3, #7
 8006314:	b29b      	uxth	r3, r3
 8006316:	613b      	str	r3, [r7, #16]
  audioValue = MSP | LSP;
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
  if((0x800000 & audioValue) != 0){
 8006320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006322:	2380      	movs	r3, #128	@ 0x80
 8006324:	041b      	lsls	r3, r3, #16
 8006326:	4013      	ands	r3, r2
 8006328:	d004      	beq.n	8006334 <ConvertAudio+0x48>
    audioValue = 0xFF000000 | audioValue;
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	22ff      	movs	r2, #255	@ 0xff
 800632e:	0612      	lsls	r2, r2, #24
 8006330:	4313      	orrs	r3, r2
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  signedAudioValue = (int32_t)audioValue;
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	60fb      	str	r3, [r7, #12]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f7fb f8c7 	bl	80014cc <__aeabi_i2f>
 800633e:	1c03      	adds	r3, r0, #0
 8006340:	6a39      	ldr	r1, [r7, #32]
 8006342:	1c18      	adds	r0, r3, #0
 8006344:	f7fa fbc4 	bl	8000ad0 <__aeabi_fdiv>
 8006348:	1c03      	adds	r3, r0, #0
 800634a:	61fb      	str	r3, [r7, #28]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 800634c:	69fb      	ldr	r3, [r7, #28]
}
 800634e:	1c18      	adds	r0, r3, #0
 8006350:	46bd      	mov	sp, r7
 8006352:	b00a      	add	sp, #40	@ 0x28
 8006354:	bd80      	pop	{r7, pc}
 8006356:	46c0      	nop			@ (mov r8, r8)
 8006358:	4afffffe 	.word	0x4afffffe
 800635c:	00003039 	.word	0x00003039

08006360 <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006360:	b5b0      	push	{r4, r5, r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	000a      	movs	r2, r1
 800636a:	1cbb      	adds	r3, r7, #2
 800636c:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 800636e:	4b20      	ldr	r3, [pc, #128]	@ (80063f0 <MIC_Start+0x90>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006376:	4a1f      	ldr	r2, [pc, #124]	@ (80063f4 <MIC_Start+0x94>)
 8006378:	4b1f      	ldr	r3, [pc, #124]	@ (80063f8 <MIC_Start+0x98>)
 800637a:	0019      	movs	r1, r3
 800637c:	2001      	movs	r0, #1
 800637e:	f002 fbb3 	bl	8008ae8 <CreateLine>
    return;
 8006382:	e031      	b.n	80063e8 <MIC_Start+0x88>
  }
  TIM2 -> CCR1 = 3000;
 8006384:	2380      	movs	r3, #128	@ 0x80
 8006386:	05db      	lsls	r3, r3, #23
 8006388:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <MIC_Start+0x9c>)
 800638a:	635a      	str	r2, [r3, #52]	@ 0x34
  Debug("In mic start");
 800638c:	4a1c      	ldr	r2, [pc, #112]	@ (8006400 <MIC_Start+0xa0>)
 800638e:	4b1d      	ldr	r3, [pc, #116]	@ (8006404 <MIC_Start+0xa4>)
 8006390:	0019      	movs	r1, r3
 8006392:	2003      	movs	r0, #3
 8006394:	f002 fba8 	bl	8008ae8 <CreateLine>
  UpdateSampleRate(sampleRate);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	0018      	movs	r0, r3
 800639c:	f7ff ff86 	bl	80062ac <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 80063a0:	4b19      	ldr	r3, [pc, #100]	@ (8006408 <MIC_Start+0xa8>)
 80063a2:	1cba      	adds	r2, r7, #2
 80063a4:	8812      	ldrh	r2, [r2, #0]
 80063a6:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 80063a8:	f002 ff96 	bl	80092d8 <HAL_GetTick>
 80063ac:	0003      	movs	r3, r0
 80063ae:	3314      	adds	r3, #20
 80063b0:	001a      	movs	r2, r3
 80063b2:	4b16      	ldr	r3, [pc, #88]	@ (800640c <MIC_Start+0xac>)
 80063b4:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 80063b6:	4b16      	ldr	r3, [pc, #88]	@ (8006410 <MIC_Start+0xb0>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 80063bc:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <MIC_Start+0xb4>)
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 80063c2:	4b0b      	ldr	r3, [pc, #44]	@ (80063f0 <MIC_Start+0x90>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	250f      	movs	r5, #15
 80063c8:	197c      	adds	r4, r7, r5
 80063ca:	2280      	movs	r2, #128	@ 0x80
 80063cc:	00d2      	lsls	r2, r2, #3
 80063ce:	4912      	ldr	r1, [pc, #72]	@ (8006418 <MIC_Start+0xb8>)
 80063d0:	0018      	movs	r0, r3
 80063d2:	f006 fa81 	bl	800c8d8 <HAL_I2S_Receive_DMA>
 80063d6:	0003      	movs	r3, r0
 80063d8:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 80063da:	197b      	adds	r3, r7, r5
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	4a0f      	ldr	r2, [pc, #60]	@ (800641c <MIC_Start+0xbc>)
 80063e0:	490f      	ldr	r1, [pc, #60]	@ (8006420 <MIC_Start+0xc0>)
 80063e2:	2002      	movs	r0, #2
 80063e4:	f002 fb80 	bl	8008ae8 <CreateLine>
}
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b004      	add	sp, #16
 80063ec:	bdb0      	pop	{r4, r5, r7, pc}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	20000d10 	.word	0x20000d10
 80063f4:	08019e7c 	.word	0x08019e7c
 80063f8:	08019e9c 	.word	0x08019e9c
 80063fc:	00000bb8 	.word	0x00000bb8
 8006400:	08019ea0 	.word	0x08019ea0
 8006404:	08019eb0 	.word	0x08019eb0
 8006408:	2000010c 	.word	0x2000010c
 800640c:	20001d14 	.word	0x20001d14
 8006410:	20001d18 	.word	0x20001d18
 8006414:	20001d19 	.word	0x20001d19
 8006418:	20000d14 	.word	0x20000d14
 800641c:	08019eb4 	.word	0x08019eb4
 8006420:	08019ec0 	.word	0x08019ec0

08006424 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006424:	b590      	push	{r4, r7, lr}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	0002      	movs	r2, r0
 800642c:	1dbb      	adds	r3, r7, #6
 800642e:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006430:	23fe      	movs	r3, #254	@ 0xfe
 8006432:	059b      	lsls	r3, r3, #22
 8006434:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006436:	230a      	movs	r3, #10
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	2200      	movs	r2, #0
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e01c      	b.n	800647a <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006440:	240a      	movs	r4, #10
 8006442:	193b      	adds	r3, r7, r4
 8006444:	2200      	movs	r2, #0
 8006446:	5e9a      	ldrsh	r2, [r3, r2]
 8006448:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <MinimalValue+0x70>)
 800644a:	0092      	lsls	r2, r2, #2
 800644c:	58d3      	ldr	r3, [r2, r3]
 800644e:	1c19      	adds	r1, r3, #0
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7fa f84f 	bl	80004f4 <__aeabi_fcmpgt>
 8006456:	1e03      	subs	r3, r0, #0
 8006458:	d006      	beq.n	8006468 <MinimalValue+0x44>
      MinVal = sample[i];
 800645a:	193b      	adds	r3, r7, r4
 800645c:	2200      	movs	r2, #0
 800645e:	5e9a      	ldrsh	r2, [r3, r2]
 8006460:	4b0c      	ldr	r3, [pc, #48]	@ (8006494 <MinimalValue+0x70>)
 8006462:	0092      	lsls	r2, r2, #2
 8006464:	58d3      	ldr	r3, [r2, r3]
 8006466:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006468:	210a      	movs	r1, #10
 800646a:	187b      	adds	r3, r7, r1
 800646c:	2200      	movs	r2, #0
 800646e:	5e9b      	ldrsh	r3, [r3, r2]
 8006470:	b29b      	uxth	r3, r3
 8006472:	3301      	adds	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	187b      	adds	r3, r7, r1
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	230a      	movs	r3, #10
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	2200      	movs	r2, #0
 8006480:	5e9a      	ldrsh	r2, [r3, r2]
 8006482:	1dbb      	adds	r3, r7, #6
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	dbda      	blt.n	8006440 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	1c18      	adds	r0, r3, #0
 800648e:	46bd      	mov	sp, r7
 8006490:	b005      	add	sp, #20
 8006492:	bd90      	pop	{r4, r7, pc}
 8006494:	20001d50 	.word	0x20001d50

08006498 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006498:	b590      	push	{r4, r7, lr}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	0002      	movs	r2, r0
 80064a0:	1dbb      	adds	r3, r7, #6
 80064a2:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 80064a4:	4b18      	ldr	r3, [pc, #96]	@ (8006508 <MaximalValue+0x70>)
 80064a6:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 80064a8:	230a      	movs	r3, #10
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	2200      	movs	r2, #0
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	e01c      	b.n	80064ec <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 80064b2:	240a      	movs	r4, #10
 80064b4:	193b      	adds	r3, r7, r4
 80064b6:	2200      	movs	r2, #0
 80064b8:	5e9a      	ldrsh	r2, [r3, r2]
 80064ba:	4b14      	ldr	r3, [pc, #80]	@ (800650c <MaximalValue+0x74>)
 80064bc:	0092      	lsls	r2, r2, #2
 80064be:	58d3      	ldr	r3, [r2, r3]
 80064c0:	1c19      	adds	r1, r3, #0
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7fa f802 	bl	80004cc <__aeabi_fcmplt>
 80064c8:	1e03      	subs	r3, r0, #0
 80064ca:	d006      	beq.n	80064da <MaximalValue+0x42>
      MaxVal = sample[i];
 80064cc:	193b      	adds	r3, r7, r4
 80064ce:	2200      	movs	r2, #0
 80064d0:	5e9a      	ldrsh	r2, [r3, r2]
 80064d2:	4b0e      	ldr	r3, [pc, #56]	@ (800650c <MaximalValue+0x74>)
 80064d4:	0092      	lsls	r2, r2, #2
 80064d6:	58d3      	ldr	r3, [r2, r3]
 80064d8:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 80064da:	210a      	movs	r1, #10
 80064dc:	187b      	adds	r3, r7, r1
 80064de:	2200      	movs	r2, #0
 80064e0:	5e9b      	ldrsh	r3, [r3, r2]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3301      	adds	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	187b      	adds	r3, r7, r1
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	230a      	movs	r3, #10
 80064ee:	18fb      	adds	r3, r7, r3
 80064f0:	2200      	movs	r2, #0
 80064f2:	5e9a      	ldrsh	r2, [r3, r2]
 80064f4:	1dbb      	adds	r3, r7, #6
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	dbda      	blt.n	80064b2 <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 80064fc:	68fb      	ldr	r3, [r7, #12]
}
 80064fe:	1c18      	adds	r0, r3, #0
 8006500:	46bd      	mov	sp, r7
 8006502:	b005      	add	sp, #20
 8006504:	bd90      	pop	{r4, r7, pc}
 8006506:	46c0      	nop			@ (mov r8, r8)
 8006508:	bf800000 	.word	0xbf800000
 800650c:	20001d50 	.word	0x20001d50

08006510 <MIC_Check>:
bool MIC_Check(void) {
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006516:	4a25      	ldr	r2, [pc, #148]	@ (80065ac <MIC_Check+0x9c>)
 8006518:	4b25      	ldr	r3, [pc, #148]	@ (80065b0 <MIC_Check+0xa0>)
 800651a:	0019      	movs	r1, r3
 800651c:	2002      	movs	r0, #2
 800651e:	f002 fae3 	bl	8008ae8 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006522:	230e      	movs	r3, #14
 8006524:	18fb      	adds	r3, r7, r3
 8006526:	2200      	movs	r2, #0
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	e016      	b.n	800655a <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 800652c:	210e      	movs	r1, #14
 800652e:	187b      	adds	r3, r7, r1
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	3302      	adds	r3, #2
 8006536:	005a      	lsls	r2, r3, #1
 8006538:	4b1e      	ldr	r3, [pc, #120]	@ (80065b4 <MIC_Check+0xa4>)
 800653a:	18d2      	adds	r2, r2, r3
 800653c:	000d      	movs	r5, r1
 800653e:	187b      	adds	r3, r7, r1
 8006540:	881c      	ldrh	r4, [r3, #0]
 8006542:	0010      	movs	r0, r2
 8006544:	f7ff fed2 	bl	80062ec <ConvertAudio>
 8006548:	1c01      	adds	r1, r0, #0
 800654a:	4b1b      	ldr	r3, [pc, #108]	@ (80065b8 <MIC_Check+0xa8>)
 800654c:	00a2      	lsls	r2, r4, #2
 800654e:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006550:	197b      	adds	r3, r7, r5
 8006552:	197a      	adds	r2, r7, r5
 8006554:	8812      	ldrh	r2, [r2, #0]
 8006556:	3201      	adds	r2, #1
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	230e      	movs	r3, #14
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	881a      	ldrh	r2, [r3, #0]
 8006560:	2380      	movs	r3, #128	@ 0x80
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	429a      	cmp	r2, r3
 8006566:	d3e1      	bcc.n	800652c <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006568:	2380      	movs	r3, #128	@ 0x80
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	0018      	movs	r0, r3
 800656e:	f7ff ff93 	bl	8006498 <MaximalValue>
 8006572:	1c03      	adds	r3, r0, #0
 8006574:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006576:	2380      	movs	r3, #128	@ 0x80
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	0018      	movs	r0, r3
 800657c:	f7ff ff52 	bl	8006424 <MinimalValue>
 8006580:	1c03      	adds	r3, r0, #0
 8006582:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 8006584:	2100      	movs	r1, #0
 8006586:	68b8      	ldr	r0, [r7, #8]
 8006588:	f7f9 ffb4 	bl	80004f4 <__aeabi_fcmpgt>
 800658c:	1e03      	subs	r3, r0, #0
 800658e:	d105      	bne.n	800659c <MIC_Check+0x8c>
 8006590:	2100      	movs	r1, #0
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7f9 ff9a 	bl	80004cc <__aeabi_fcmplt>
 8006598:	1e03      	subs	r3, r0, #0
 800659a:	d001      	beq.n	80065a0 <MIC_Check+0x90>
    return(true);
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <MIC_Check+0x92>
  }
  return(false);
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	0018      	movs	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b004      	add	sp, #16
 80065a8:	bdb0      	pop	{r4, r5, r7, pc}
 80065aa:	46c0      	nop			@ (mov r8, r8)
 80065ac:	08019ec4 	.word	0x08019ec4
 80065b0:	08019ec0 	.word	0x08019ec0
 80065b4:	20000d14 	.word	0x20000d14
 80065b8:	20001d50 	.word	0x20001d50

080065bc <MIC_Print>:
void MIC_Print(void) {
 80065bc:	b590      	push	{r4, r7, lr}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
  Info("New samples");
 80065c2:	4abe      	ldr	r2, [pc, #760]	@ (80068bc <MIC_Print+0x300>)
 80065c4:	4bbe      	ldr	r3, [pc, #760]	@ (80068c0 <MIC_Print+0x304>)
 80065c6:	0019      	movs	r1, r3
 80065c8:	2002      	movs	r0, #2
 80065ca:	f002 fa8d 	bl	8008ae8 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80065ce:	1dbb      	adds	r3, r7, #6
 80065d0:	2200      	movs	r2, #0
 80065d2:	801a      	strh	r2, [r3, #0]
 80065d4:	e014      	b.n	8006600 <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 80065d6:	1dbb      	adds	r3, r7, #6
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	3302      	adds	r3, #2
 80065de:	005a      	lsls	r2, r3, #1
 80065e0:	4bb8      	ldr	r3, [pc, #736]	@ (80068c4 <MIC_Print+0x308>)
 80065e2:	18d2      	adds	r2, r2, r3
 80065e4:	1dbb      	adds	r3, r7, #6
 80065e6:	881c      	ldrh	r4, [r3, #0]
 80065e8:	0010      	movs	r0, r2
 80065ea:	f7ff fe7f 	bl	80062ec <ConvertAudio>
 80065ee:	1c01      	adds	r1, r0, #0
 80065f0:	4bb5      	ldr	r3, [pc, #724]	@ (80068c8 <MIC_Print+0x30c>)
 80065f2:	00a2      	lsls	r2, r4, #2
 80065f4:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80065f6:	1dbb      	adds	r3, r7, #6
 80065f8:	1dba      	adds	r2, r7, #6
 80065fa:	8812      	ldrh	r2, [r2, #0]
 80065fc:	3201      	adds	r2, #1
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	1dbb      	adds	r3, r7, #6
 8006602:	881a      	ldrh	r2, [r3, #0]
 8006604:	2380      	movs	r3, #128	@ 0x80
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	429a      	cmp	r2, r3
 800660a:	d3e4      	bcc.n	80065d6 <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 800660c:	f000 f9e6 	bl	80069dc <MIC_GetDB>
 8006610:	1c02      	adds	r2, r0, #0
 8006612:	4bae      	ldr	r3, [pc, #696]	@ (80068cc <MIC_Print+0x310>)
 8006614:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 8006616:	4bae      	ldr	r3, [pc, #696]	@ (80068d0 <MIC_Print+0x314>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b09      	cmp	r3, #9
 800661c:	d80e      	bhi.n	800663c <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 800661e:	4bac      	ldr	r3, [pc, #688]	@ (80068d0 <MIC_Print+0x314>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	001a      	movs	r2, r3
 8006624:	4ba9      	ldr	r3, [pc, #676]	@ (80068cc <MIC_Print+0x310>)
 8006626:	6819      	ldr	r1, [r3, #0]
 8006628:	4baa      	ldr	r3, [pc, #680]	@ (80068d4 <MIC_Print+0x318>)
 800662a:	0092      	lsls	r2, r2, #2
 800662c:	50d1      	str	r1, [r2, r3]
    counter += 1;
 800662e:	4ba8      	ldr	r3, [pc, #672]	@ (80068d0 <MIC_Print+0x314>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	3301      	adds	r3, #1
 8006634:	b2da      	uxtb	r2, r3
 8006636:	4ba6      	ldr	r3, [pc, #664]	@ (80068d0 <MIC_Print+0x314>)
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	e013      	b.n	8006664 <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 800663c:	4ba4      	ldr	r3, [pc, #656]	@ (80068d0 <MIC_Print+0x314>)
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8006642:	4ba3      	ldr	r3, [pc, #652]	@ (80068d0 <MIC_Print+0x314>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	001a      	movs	r2, r3
 8006648:	4ba0      	ldr	r3, [pc, #640]	@ (80068cc <MIC_Print+0x310>)
 800664a:	6819      	ldr	r1, [r3, #0]
 800664c:	4ba1      	ldr	r3, [pc, #644]	@ (80068d4 <MIC_Print+0x318>)
 800664e:	0092      	lsls	r2, r2, #2
 8006650:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006652:	4b9f      	ldr	r3, [pc, #636]	@ (80068d0 <MIC_Print+0x314>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	3301      	adds	r3, #1
 8006658:	b2da      	uxtb	r2, r3
 800665a:	4b9d      	ldr	r3, [pc, #628]	@ (80068d0 <MIC_Print+0x314>)
 800665c:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 800665e:	4b9e      	ldr	r3, [pc, #632]	@ (80068d8 <MIC_Print+0x31c>)
 8006660:	2201      	movs	r2, #1
 8006662:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8006664:	4b9c      	ldr	r3, [pc, #624]	@ (80068d8 <MIC_Print+0x31c>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2201      	movs	r2, #1
 800666a:	4053      	eors	r3, r2
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <MIC_Print+0xc2>
    setMic(dBc);
 8006672:	4b96      	ldr	r3, [pc, #600]	@ (80068cc <MIC_Print+0x310>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	1c18      	adds	r0, r3, #0
 8006678:	f7fd f836 	bl	80036e8 <setMic>
 800667c:	e02d      	b.n	80066da <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 800667e:	4b97      	ldr	r3, [pc, #604]	@ (80068dc <MIC_Print+0x320>)
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006684:	1d7b      	adds	r3, r7, #5
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	e013      	b.n	80066b4 <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 800668c:	1d7b      	adds	r3, r7, #5
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	4b90      	ldr	r3, [pc, #576]	@ (80068d4 <MIC_Print+0x318>)
 8006692:	0092      	lsls	r2, r2, #2
 8006694:	58d2      	ldr	r2, [r2, r3]
 8006696:	4b91      	ldr	r3, [pc, #580]	@ (80068dc <MIC_Print+0x320>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	1c19      	adds	r1, r3, #0
 800669c:	1c10      	adds	r0, r2, #0
 800669e:	f7fa f88d 	bl	80007bc <__aeabi_fadd>
 80066a2:	1c03      	adds	r3, r0, #0
 80066a4:	1c1a      	adds	r2, r3, #0
 80066a6:	4b8d      	ldr	r3, [pc, #564]	@ (80068dc <MIC_Print+0x320>)
 80066a8:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 80066aa:	1d7b      	adds	r3, r7, #5
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	1d7b      	adds	r3, r7, #5
 80066b0:	3201      	adds	r2, #1
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	1d7b      	adds	r3, r7, #5
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b09      	cmp	r3, #9
 80066ba:	d9e7      	bls.n	800668c <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 80066bc:	4b87      	ldr	r3, [pc, #540]	@ (80068dc <MIC_Print+0x320>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4987      	ldr	r1, [pc, #540]	@ (80068e0 <MIC_Print+0x324>)
 80066c2:	1c18      	adds	r0, r3, #0
 80066c4:	f7fa fa04 	bl	8000ad0 <__aeabi_fdiv>
 80066c8:	1c03      	adds	r3, r0, #0
 80066ca:	1c1a      	adds	r2, r3, #0
 80066cc:	4b83      	ldr	r3, [pc, #524]	@ (80068dc <MIC_Print+0x320>)
 80066ce:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 80066d0:	4b82      	ldr	r3, [pc, #520]	@ (80068dc <MIC_Print+0x320>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	1c18      	adds	r0, r3, #0
 80066d6:	f7fd f807 	bl	80036e8 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 80066da:	4b7c      	ldr	r3, [pc, #496]	@ (80068cc <MIC_Print+0x310>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4981      	ldr	r1, [pc, #516]	@ (80068e4 <MIC_Print+0x328>)
 80066e0:	1c18      	adds	r0, r3, #0
 80066e2:	f7f9 ff07 	bl	80004f4 <__aeabi_fcmpgt>
 80066e6:	1e03      	subs	r3, r0, #0
 80066e8:	d013      	beq.n	8006712 <MIC_Print+0x156>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80066ea:	4b7f      	ldr	r3, [pc, #508]	@ (80068e8 <MIC_Print+0x32c>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	2101      	movs	r1, #1
 80066f0:	0018      	movs	r0, r3
 80066f2:	f003 ffa5 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 80066f6:	2380      	movs	r3, #128	@ 0x80
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	487b      	ldr	r0, [pc, #492]	@ (80068e8 <MIC_Print+0x32c>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	0019      	movs	r1, r3
 8006700:	f003 ff9e 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006704:	2380      	movs	r3, #128	@ 0x80
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4877      	ldr	r0, [pc, #476]	@ (80068e8 <MIC_Print+0x32c>)
 800670a:	2200      	movs	r2, #0
 800670c:	0019      	movs	r1, r3
 800670e:	f003 ff97 	bl	800a640 <HAL_GPIO_WritePin>
  }
  if(dBc < 85 && dBc >= 80){ //red
 8006712:	4b6e      	ldr	r3, [pc, #440]	@ (80068cc <MIC_Print+0x310>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4973      	ldr	r1, [pc, #460]	@ (80068e4 <MIC_Print+0x328>)
 8006718:	1c18      	adds	r0, r3, #0
 800671a:	f7f9 fed7 	bl	80004cc <__aeabi_fcmplt>
 800671e:	1e03      	subs	r3, r0, #0
 8006720:	d01b      	beq.n	800675a <MIC_Print+0x19e>
 8006722:	4b6a      	ldr	r3, [pc, #424]	@ (80068cc <MIC_Print+0x310>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4971      	ldr	r1, [pc, #452]	@ (80068ec <MIC_Print+0x330>)
 8006728:	1c18      	adds	r0, r3, #0
 800672a:	f7f9 feed 	bl	8000508 <__aeabi_fcmpge>
 800672e:	1e03      	subs	r3, r0, #0
 8006730:	d013      	beq.n	800675a <MIC_Print+0x19e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006732:	4b6d      	ldr	r3, [pc, #436]	@ (80068e8 <MIC_Print+0x32c>)
 8006734:	2200      	movs	r2, #0
 8006736:	2101      	movs	r1, #1
 8006738:	0018      	movs	r0, r3
 800673a:	f003 ff81 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800673e:	2380      	movs	r3, #128	@ 0x80
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	4869      	ldr	r0, [pc, #420]	@ (80068e8 <MIC_Print+0x32c>)
 8006744:	2201      	movs	r2, #1
 8006746:	0019      	movs	r1, r3
 8006748:	f003 ff7a 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800674c:	2380      	movs	r3, #128	@ 0x80
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4865      	ldr	r0, [pc, #404]	@ (80068e8 <MIC_Print+0x32c>)
 8006752:	2201      	movs	r2, #1
 8006754:	0019      	movs	r1, r3
 8006756:	f003 ff73 	bl	800a640 <HAL_GPIO_WritePin>
  }
  if(dBc < 80 && dBc >= 75){//purple
 800675a:	4b5c      	ldr	r3, [pc, #368]	@ (80068cc <MIC_Print+0x310>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4963      	ldr	r1, [pc, #396]	@ (80068ec <MIC_Print+0x330>)
 8006760:	1c18      	adds	r0, r3, #0
 8006762:	f7f9 feb3 	bl	80004cc <__aeabi_fcmplt>
 8006766:	1e03      	subs	r3, r0, #0
 8006768:	d01b      	beq.n	80067a2 <MIC_Print+0x1e6>
 800676a:	4b58      	ldr	r3, [pc, #352]	@ (80068cc <MIC_Print+0x310>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4960      	ldr	r1, [pc, #384]	@ (80068f0 <MIC_Print+0x334>)
 8006770:	1c18      	adds	r0, r3, #0
 8006772:	f7f9 fec9 	bl	8000508 <__aeabi_fcmpge>
 8006776:	1e03      	subs	r3, r0, #0
 8006778:	d013      	beq.n	80067a2 <MIC_Print+0x1e6>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800677a:	4b5b      	ldr	r3, [pc, #364]	@ (80068e8 <MIC_Print+0x32c>)
 800677c:	2200      	movs	r2, #0
 800677e:	2101      	movs	r1, #1
 8006780:	0018      	movs	r0, r3
 8006782:	f003 ff5d 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006786:	2380      	movs	r3, #128	@ 0x80
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	4857      	ldr	r0, [pc, #348]	@ (80068e8 <MIC_Print+0x32c>)
 800678c:	2201      	movs	r2, #1
 800678e:	0019      	movs	r1, r3
 8006790:	f003 ff56 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006794:	2380      	movs	r3, #128	@ 0x80
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4853      	ldr	r0, [pc, #332]	@ (80068e8 <MIC_Print+0x32c>)
 800679a:	2200      	movs	r2, #0
 800679c:	0019      	movs	r1, r3
 800679e:	f003 ff4f 	bl	800a640 <HAL_GPIO_WritePin>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 80067a2:	4b4a      	ldr	r3, [pc, #296]	@ (80068cc <MIC_Print+0x310>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4952      	ldr	r1, [pc, #328]	@ (80068f0 <MIC_Print+0x334>)
 80067a8:	1c18      	adds	r0, r3, #0
 80067aa:	f7f9 fe8f 	bl	80004cc <__aeabi_fcmplt>
 80067ae:	1e03      	subs	r3, r0, #0
 80067b0:	d01b      	beq.n	80067ea <MIC_Print+0x22e>
 80067b2:	4b46      	ldr	r3, [pc, #280]	@ (80068cc <MIC_Print+0x310>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	494f      	ldr	r1, [pc, #316]	@ (80068f4 <MIC_Print+0x338>)
 80067b8:	1c18      	adds	r0, r3, #0
 80067ba:	f7f9 fea5 	bl	8000508 <__aeabi_fcmpge>
 80067be:	1e03      	subs	r3, r0, #0
 80067c0:	d013      	beq.n	80067ea <MIC_Print+0x22e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80067c2:	4b49      	ldr	r3, [pc, #292]	@ (80068e8 <MIC_Print+0x32c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	2101      	movs	r1, #1
 80067c8:	0018      	movs	r0, r3
 80067ca:	f003 ff39 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 80067ce:	2380      	movs	r3, #128	@ 0x80
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4845      	ldr	r0, [pc, #276]	@ (80068e8 <MIC_Print+0x32c>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	0019      	movs	r1, r3
 80067d8:	f003 ff32 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80067dc:	2380      	movs	r3, #128	@ 0x80
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4841      	ldr	r0, [pc, #260]	@ (80068e8 <MIC_Print+0x32c>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	0019      	movs	r1, r3
 80067e6:	f003 ff2b 	bl	800a640 <HAL_GPIO_WritePin>
  }
  if(dBc < 70 && dBc >= 65){//Green
 80067ea:	4b38      	ldr	r3, [pc, #224]	@ (80068cc <MIC_Print+0x310>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4941      	ldr	r1, [pc, #260]	@ (80068f4 <MIC_Print+0x338>)
 80067f0:	1c18      	adds	r0, r3, #0
 80067f2:	f7f9 fe6b 	bl	80004cc <__aeabi_fcmplt>
 80067f6:	1e03      	subs	r3, r0, #0
 80067f8:	d01b      	beq.n	8006832 <MIC_Print+0x276>
 80067fa:	4b34      	ldr	r3, [pc, #208]	@ (80068cc <MIC_Print+0x310>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	493e      	ldr	r1, [pc, #248]	@ (80068f8 <MIC_Print+0x33c>)
 8006800:	1c18      	adds	r0, r3, #0
 8006802:	f7f9 fe81 	bl	8000508 <__aeabi_fcmpge>
 8006806:	1e03      	subs	r3, r0, #0
 8006808:	d013      	beq.n	8006832 <MIC_Print+0x276>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800680a:	4b37      	ldr	r3, [pc, #220]	@ (80068e8 <MIC_Print+0x32c>)
 800680c:	2201      	movs	r2, #1
 800680e:	2101      	movs	r1, #1
 8006810:	0018      	movs	r0, r3
 8006812:	f003 ff15 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006816:	2380      	movs	r3, #128	@ 0x80
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	4833      	ldr	r0, [pc, #204]	@ (80068e8 <MIC_Print+0x32c>)
 800681c:	2200      	movs	r2, #0
 800681e:	0019      	movs	r1, r3
 8006820:	f003 ff0e 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006824:	2380      	movs	r3, #128	@ 0x80
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	482f      	ldr	r0, [pc, #188]	@ (80068e8 <MIC_Print+0x32c>)
 800682a:	2201      	movs	r2, #1
 800682c:	0019      	movs	r1, r3
 800682e:	f003 ff07 	bl	800a640 <HAL_GPIO_WritePin>
  }
  if(dBc < 65 && dBc >= 60){//blue
 8006832:	4b26      	ldr	r3, [pc, #152]	@ (80068cc <MIC_Print+0x310>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4930      	ldr	r1, [pc, #192]	@ (80068f8 <MIC_Print+0x33c>)
 8006838:	1c18      	adds	r0, r3, #0
 800683a:	f7f9 fe47 	bl	80004cc <__aeabi_fcmplt>
 800683e:	1e03      	subs	r3, r0, #0
 8006840:	d01b      	beq.n	800687a <MIC_Print+0x2be>
 8006842:	4b22      	ldr	r3, [pc, #136]	@ (80068cc <MIC_Print+0x310>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	492d      	ldr	r1, [pc, #180]	@ (80068fc <MIC_Print+0x340>)
 8006848:	1c18      	adds	r0, r3, #0
 800684a:	f7f9 fe5d 	bl	8000508 <__aeabi_fcmpge>
 800684e:	1e03      	subs	r3, r0, #0
 8006850:	d013      	beq.n	800687a <MIC_Print+0x2be>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006852:	4b25      	ldr	r3, [pc, #148]	@ (80068e8 <MIC_Print+0x32c>)
 8006854:	2201      	movs	r2, #1
 8006856:	2101      	movs	r1, #1
 8006858:	0018      	movs	r0, r3
 800685a:	f003 fef1 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800685e:	2380      	movs	r3, #128	@ 0x80
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4821      	ldr	r0, [pc, #132]	@ (80068e8 <MIC_Print+0x32c>)
 8006864:	2201      	movs	r2, #1
 8006866:	0019      	movs	r1, r3
 8006868:	f003 feea 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	481d      	ldr	r0, [pc, #116]	@ (80068e8 <MIC_Print+0x32c>)
 8006872:	2200      	movs	r2, #0
 8006874:	0019      	movs	r1, r3
 8006876:	f003 fee3 	bl	800a640 <HAL_GPIO_WritePin>
  }
  if(dBc < 60){//light blue
 800687a:	4b14      	ldr	r3, [pc, #80]	@ (80068cc <MIC_Print+0x310>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	491f      	ldr	r1, [pc, #124]	@ (80068fc <MIC_Print+0x340>)
 8006880:	1c18      	adds	r0, r3, #0
 8006882:	f7f9 fe23 	bl	80004cc <__aeabi_fcmplt>
 8006886:	1e03      	subs	r3, r0, #0
 8006888:	d100      	bne.n	800688c <MIC_Print+0x2d0>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
  }


  //FFT();
}
 800688a:	e013      	b.n	80068b4 <MIC_Print+0x2f8>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800688c:	4b16      	ldr	r3, [pc, #88]	@ (80068e8 <MIC_Print+0x32c>)
 800688e:	2201      	movs	r2, #1
 8006890:	2101      	movs	r1, #1
 8006892:	0018      	movs	r0, r3
 8006894:	f003 fed4 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006898:	2380      	movs	r3, #128	@ 0x80
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	4812      	ldr	r0, [pc, #72]	@ (80068e8 <MIC_Print+0x32c>)
 800689e:	2200      	movs	r2, #0
 80068a0:	0019      	movs	r1, r3
 80068a2:	f003 fecd 	bl	800a640 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80068a6:	2380      	movs	r3, #128	@ 0x80
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	480f      	ldr	r0, [pc, #60]	@ (80068e8 <MIC_Print+0x32c>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	0019      	movs	r1, r3
 80068b0:	f003 fec6 	bl	800a640 <HAL_GPIO_WritePin>
}
 80068b4:	46c0      	nop			@ (mov r8, r8)
 80068b6:	46bd      	mov	sp, r7
 80068b8:	b003      	add	sp, #12
 80068ba:	bd90      	pop	{r4, r7, pc}
 80068bc:	08019ec4 	.word	0x08019ec4
 80068c0:	08019ec0 	.word	0x08019ec0
 80068c4:	20000d14 	.word	0x20000d14
 80068c8:	20001d50 	.word	0x20001d50
 80068cc:	20001d1c 	.word	0x20001d1c
 80068d0:	20001d4c 	.word	0x20001d4c
 80068d4:	20001d20 	.word	0x20001d20
 80068d8:	20001d4d 	.word	0x20001d4d
 80068dc:	20001d48 	.word	0x20001d48
 80068e0:	41200000 	.word	0x41200000
 80068e4:	42aa0000 	.word	0x42aa0000
 80068e8:	50000400 	.word	0x50000400
 80068ec:	42a00000 	.word	0x42a00000
 80068f0:	42960000 	.word	0x42960000
 80068f4:	428c0000 	.word	0x428c0000
 80068f8:	42820000 	.word	0x42820000
 80068fc:	42700000 	.word	0x42700000

08006900 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  if(DataReady) {
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <MIC_MeasurementDone+0x38>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00f      	beq.n	800692e <MIC_MeasurementDone+0x2e>
    MIC_Print();
 800690e:	f7ff fe55 	bl	80065bc <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <MIC_MeasurementDone+0x3c>)
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	4a0a      	ldr	r2, [pc, #40]	@ (8006940 <MIC_MeasurementDone+0x40>)
 8006918:	490a      	ldr	r1, [pc, #40]	@ (8006944 <MIC_MeasurementDone+0x44>)
 800691a:	2003      	movs	r0, #3
 800691c:	f002 f8e4 	bl	8008ae8 <CreateLine>
    TIM2 -> CCR1 = 4000;
 8006920:	2380      	movs	r3, #128	@ 0x80
 8006922:	05db      	lsls	r3, r3, #23
 8006924:	22fa      	movs	r2, #250	@ 0xfa
 8006926:	0112      	lsls	r2, r2, #4
 8006928:	635a      	str	r2, [r3, #52]	@ 0x34
    return true;
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <MIC_MeasurementDone+0x30>
  }
  return false;
 800692e:	2300      	movs	r3, #0
}
 8006930:	0018      	movs	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	46c0      	nop			@ (mov r8, r8)
 8006938:	20001d19 	.word	0x20001d19
 800693c:	2000010c 	.word	0x2000010c
 8006940:	08019ed0 	.word	0x08019ed0
 8006944:	08019eb0 	.word	0x08019eb0

08006948 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 800694e:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <MIC_TestMeasurementDone+0x34>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00c      	beq.n	8006972 <MIC_TestMeasurementDone+0x2a>
    Check = MIC_Check();
 8006958:	1dfc      	adds	r4, r7, #7
 800695a:	f7ff fdd9 	bl	8006510 <MIC_Check>
 800695e:	0003      	movs	r3, r0
 8006960:	7023      	strb	r3, [r4, #0]
    TIM2 -> CCR1 = 4000;
 8006962:	2380      	movs	r3, #128	@ 0x80
 8006964:	05db      	lsls	r3, r3, #23
 8006966:	22fa      	movs	r2, #250	@ 0xfa
 8006968:	0112      	lsls	r2, r2, #4
 800696a:	635a      	str	r2, [r3, #52]	@ 0x34
    return Check;
 800696c:	1dfb      	adds	r3, r7, #7
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	e000      	b.n	8006974 <MIC_TestMeasurementDone+0x2c>
  }
  return false;
 8006972:	2300      	movs	r3, #0
}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	b003      	add	sp, #12
 800697a:	bd90      	pop	{r4, r7, pc}
 800697c:	20001d19 	.word	0x20001d19

08006980 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8006988:	4b10      	ldr	r3, [pc, #64]	@ (80069cc <HAL_I2S_RxCpltCallback+0x4c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	d118      	bne.n	80069c4 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8006992:	4b0f      	ldr	r3, [pc, #60]	@ (80069d0 <HAL_I2S_RxCpltCallback+0x50>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 800699c:	4b0b      	ldr	r3, [pc, #44]	@ (80069cc <HAL_I2S_RxCpltCallback+0x4c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f006 f85b 	bl	800ca5c <HAL_I2S_DMAStop>
    DataReady = true;
 80069a6:	4b0b      	ldr	r3, [pc, #44]	@ (80069d4 <HAL_I2S_RxCpltCallback+0x54>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	e00b      	b.n	80069c6 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 80069ae:	4b0a      	ldr	r3, [pc, #40]	@ (80069d8 <HAL_I2S_RxCpltCallback+0x58>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	0018      	movs	r0, r3
 80069b4:	f002 f842 	bl	8008a3c <TimestampIsReached>
 80069b8:	1e03      	subs	r3, r0, #0
 80069ba:	d004      	beq.n	80069c6 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 80069bc:	4b04      	ldr	r3, [pc, #16]	@ (80069d0 <HAL_I2S_RxCpltCallback+0x50>)
 80069be:	2201      	movs	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e000      	b.n	80069c6 <HAL_I2S_RxCpltCallback+0x46>
    return;
 80069c4:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b002      	add	sp, #8
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000d10 	.word	0x20000d10
 80069d0:	20001d18 	.word	0x20001d18
 80069d4:	20001d19 	.word	0x20001d19
 80069d8:	20001d14 	.word	0x20001d14

080069dc <MIC_GetDB>:

float MIC_GetDB(void) {
 80069dc:	b590      	push	{r4, r7, lr}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 80069e6:	2300      	movs	r3, #0
 80069e8:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80069ea:	230a      	movs	r3, #10
 80069ec:	18fb      	adds	r3, r7, r3
 80069ee:	2280      	movs	r2, #128	@ 0x80
 80069f0:	0052      	lsls	r2, r2, #1
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	e019      	b.n	8006a2a <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 80069f6:	240a      	movs	r4, #10
 80069f8:	193b      	adds	r3, r7, r4
 80069fa:	881a      	ldrh	r2, [r3, #0]
 80069fc:	4b2b      	ldr	r3, [pc, #172]	@ (8006aac <MIC_GetDB+0xd0>)
 80069fe:	0092      	lsls	r2, r2, #2
 8006a00:	58d0      	ldr	r0, [r2, r3]
 8006a02:	193b      	adds	r3, r7, r4
 8006a04:	881a      	ldrh	r2, [r3, #0]
 8006a06:	4b29      	ldr	r3, [pc, #164]	@ (8006aac <MIC_GetDB+0xd0>)
 8006a08:	0092      	lsls	r2, r2, #2
 8006a0a:	58d3      	ldr	r3, [r2, r3]
 8006a0c:	1c19      	adds	r1, r3, #0
 8006a0e:	f7fa fa45 	bl	8000e9c <__aeabi_fmul>
 8006a12:	1c03      	adds	r3, r0, #0
 8006a14:	1c19      	adds	r1, r3, #0
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7f9 fed0 	bl	80007bc <__aeabi_fadd>
 8006a1c:	1c03      	adds	r3, r0, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	881a      	ldrh	r2, [r3, #0]
 8006a24:	193b      	adds	r3, r7, r4
 8006a26:	3201      	adds	r2, #1
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	230a      	movs	r3, #10
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	881a      	ldrh	r2, [r3, #0]
 8006a30:	2380      	movs	r3, #128	@ 0x80
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d3de      	bcc.n	80069f6 <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 8006a38:	2187      	movs	r1, #135	@ 0x87
 8006a3a:	05c9      	lsls	r1, r1, #23
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7fa f847 	bl	8000ad0 <__aeabi_fdiv>
 8006a42:	1c03      	adds	r3, r0, #0
 8006a44:	1c18      	adds	r0, r3, #0
 8006a46:	f7fc fc8b 	bl	8003360 <__aeabi_f2d>
 8006a4a:	0002      	movs	r2, r0
 8006a4c:	000b      	movs	r3, r1
 8006a4e:	0010      	movs	r0, r2
 8006a50:	0019      	movs	r1, r3
 8006a52:	f012 f9dd 	bl	8018e10 <sqrt>
 8006a56:	0002      	movs	r2, r0
 8006a58:	000b      	movs	r3, r1
 8006a5a:	0010      	movs	r0, r2
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	f7fc fcc7 	bl	80033f0 <__aeabi_d2f>
 8006a62:	1c03      	adds	r3, r0, #0
 8006a64:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 8006a66:	6838      	ldr	r0, [r7, #0]
 8006a68:	f7fc fc7a 	bl	8003360 <__aeabi_f2d>
 8006a6c:	0002      	movs	r2, r0
 8006a6e:	000b      	movs	r3, r1
 8006a70:	0010      	movs	r0, r2
 8006a72:	0019      	movs	r1, r3
 8006a74:	f012 f996 	bl	8018da4 <log10>
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <MIC_GetDB+0xd4>)
 8006a7c:	f7fb fd5c 	bl	8002538 <__aeabi_dmul>
 8006a80:	0002      	movs	r2, r0
 8006a82:	000b      	movs	r3, r1
 8006a84:	0010      	movs	r0, r2
 8006a86:	0019      	movs	r1, r3
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab4 <MIC_GetDB+0xd8>)
 8006a8c:	f7fa fdac 	bl	80015e8 <__aeabi_dadd>
 8006a90:	0002      	movs	r2, r0
 8006a92:	000b      	movs	r3, r1
 8006a94:	0010      	movs	r0, r2
 8006a96:	0019      	movs	r1, r3
 8006a98:	f7fc fcaa 	bl	80033f0 <__aeabi_d2f>
 8006a9c:	1c03      	adds	r3, r0, #0
 8006a9e:	607b      	str	r3, [r7, #4]

    return dBValue;
 8006aa0:	687b      	ldr	r3, [r7, #4]
}
 8006aa2:	1c18      	adds	r0, r3, #0
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b005      	add	sp, #20
 8006aa8:	bd90      	pop	{r4, r7, pc}
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	20001d50 	.word	0x20001d50
 8006ab0:	40340000 	.word	0x40340000
 8006ab4:	405e0000 	.word	0x405e0000

08006ab8 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d113      	bne.n	8006afe <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	22fe      	movs	r2, #254	@ 0xfe
 8006ada:	0592      	lsls	r2, r2, #22
 8006adc:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b4c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8006ae2:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b50 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8006ae8:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a19      	ldr	r2, [pc, #100]	@ (8006b54 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8006aee:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a19      	ldr	r2, [pc, #100]	@ (8006b58 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8006af4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a18      	ldr	r2, [pc, #96]	@ (8006b5c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8006afa:	61da      	str	r2, [r3, #28]
 8006afc:	e011      	b.n	8006b22 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4a17      	ldr	r2, [pc, #92]	@ (8006b60 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8006b02:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a17      	ldr	r2, [pc, #92]	@ (8006b64 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8006b08:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a16      	ldr	r2, [pc, #88]	@ (8006b68 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8006b0e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a16      	ldr	r2, [pc, #88]	@ (8006b6c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8006b14:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a15      	ldr	r2, [pc, #84]	@ (8006b70 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8006b1a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4a15      	ldr	r2, [pc, #84]	@ (8006b74 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8006b20:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4a14      	ldr	r2, [pc, #80]	@ (8006b78 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8006b26:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4a14      	ldr	r2, [pc, #80]	@ (8006b7c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8006b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4a12      	ldr	r2, [pc, #72]	@ (8006b7c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8006b32:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a12      	ldr	r2, [pc, #72]	@ (8006b80 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8006b38:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f000 f831 	bl	8006ba4 <GasIndexAlgorithm_reset>
}
 8006b42:	46c0      	nop			@ (mov r8, r8)
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b004      	add	sp, #16
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	46c0      	nop			@ (mov r8, r8)
 8006b4c:	00002710 	.word	0x00002710
 8006b50:	44340000 	.word	0x44340000
 8006b54:	46859800 	.word	0x46859800
 8006b58:	46a05000 	.word	0x46a05000
 8006b5c:	41f00000 	.word	0x41f00000
 8006b60:	42c80000 	.word	0x42c80000
 8006b64:	00004e20 	.word	0x00004e20
 8006b68:	43340000 	.word	0x43340000
 8006b6c:	4528c000 	.word	0x4528c000
 8006b70:	45a32000 	.word	0x45a32000
 8006b74:	43aa0000 	.word	0x43aa0000
 8006b78:	43660000 	.word	0x43660000
 8006b7c:	41400000 	.word	0x41400000
 8006b80:	42480000 	.word	0x42480000

08006b84 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8006b8e:	22fe      	movs	r2, #254	@ 0xfe
 8006b90:	0592      	lsls	r2, r2, #22
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7ff ff8e 	bl	8006ab8 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8006b9c:	46c0      	nop			@ (mov r8, r8)
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	b002      	add	sp, #8
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 f805 	bl	8006bd0 <GasIndexAlgorithm__init_instances>
}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b002      	add	sp, #8
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8006bd0:	b590      	push	{r4, r7, lr}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f000 f8e8 	bl	8006db0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	0018      	movs	r0, r3
 8006be4:	f000 f9a6 	bl	8006f34 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006be8:	1c04      	adds	r4, r0, #0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f000 f9ab 	bl	8006f48 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006bf2:	1c02      	adds	r2, r0, #0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	1c21      	adds	r1, r4, #0
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 fc3b 	bl	8007474 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d107      	bne.n	8006c16 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006c06:	23fe      	movs	r3, #254	@ 0xfe
 8006c08:	059b      	lsls	r3, r3, #22
 8006c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c34 <GasIndexAlgorithm__init_instances+0x64>)
 8006c0c:	490a      	ldr	r1, [pc, #40]	@ (8006c38 <GasIndexAlgorithm__init_instances+0x68>)
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fc86 	bl	8007520 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8006c14:	e005      	b.n	8006c22 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006c16:	4b09      	ldr	r3, [pc, #36]	@ (8006c3c <GasIndexAlgorithm__init_instances+0x6c>)
 8006c18:	4a09      	ldr	r2, [pc, #36]	@ (8006c40 <GasIndexAlgorithm__init_instances+0x70>)
 8006c1a:	490a      	ldr	r1, [pc, #40]	@ (8006c44 <GasIndexAlgorithm__init_instances+0x74>)
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fc7f 	bl	8007520 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f000 fd35 	bl	8007694 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b003      	add	sp, #12
 8006c30:	bd90      	pop	{r4, r7, pc}
 8006c32:	46c0      	nop			@ (mov r8, r8)
 8006c34:	bc257a78 	.word	0xbc257a78
 8006c38:	44198000 	.word	0x44198000
 8006c3c:	42c80000 	.word	0x42c80000
 8006c40:	bbd4fdf4 	.word	0xbbd4fdf4
 8006c44:	43550000 	.word	0x43550000

08006c48 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c58:	4952      	ldr	r1, [pc, #328]	@ (8006da4 <GasIndexAlgorithm_process+0x15c>)
 8006c5a:	1c18      	adds	r0, r3, #0
 8006c5c:	f7f9 fc40 	bl	80004e0 <__aeabi_fcmple>
 8006c60:	1e03      	subs	r3, r0, #0
 8006c62:	d00c      	beq.n	8006c7e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	1c19      	adds	r1, r3, #0
 8006c6e:	1c10      	adds	r0, r2, #0
 8006c70:	f7f9 fda4 	bl	80007bc <__aeabi_fadd>
 8006c74:	1c03      	adds	r3, r0, #0
 8006c76:	1c1a      	adds	r2, r3, #0
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c7c:	e080      	b.n	8006d80 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dd25      	ble.n	8006cd0 <GasIndexAlgorithm_process+0x88>
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4a48      	ldr	r2, [pc, #288]	@ (8006da8 <GasIndexAlgorithm_process+0x160>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	dc21      	bgt.n	8006cd0 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	dc04      	bgt.n	8006ca0 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60bb      	str	r3, [r7, #8]
 8006c9e:	e00d      	b.n	8006cbc <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4a41      	ldr	r2, [pc, #260]	@ (8006dac <GasIndexAlgorithm_process+0x164>)
 8006ca6:	4694      	mov	ip, r2
 8006ca8:	4463      	add	r3, ip
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	dd05      	ble.n	8006cbc <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4a3d      	ldr	r2, [pc, #244]	@ (8006dac <GasIndexAlgorithm_process+0x164>)
 8006cb6:	4694      	mov	ip, r2
 8006cb8:	4463      	add	r3, ip
 8006cba:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f7fa fc01 	bl	80014cc <__aeabi_i2f>
 8006cca:	1c02      	adds	r2, r0, #0
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f000 f945 	bl	8006f6a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8006ce0:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8006ce2:	d014      	beq.n	8006d0e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	1c11      	adds	r1, r2, #0
 8006cec:	0018      	movs	r0, r3
 8006cee:	f000 fbd1 	bl	8007494 <GasIndexAlgorithm__mox_model__process>
 8006cf2:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	1c11      	adds	r1, r2, #0
 8006d00:	0018      	movs	r0, r3
 8006d02:	f000 fc25 	bl	8007550 <GasIndexAlgorithm__sigmoid_scaled__process>
 8006d06:	1c02      	adds	r2, r0, #0
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d0c:	e003      	b.n	8006d16 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	1c11      	adds	r1, r2, #0
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f000 fcec 	bl	80076fc <GasIndexAlgorithm__adaptive_lowpass__process>
 8006d24:	1c02      	adds	r2, r0, #0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2e:	21fc      	movs	r1, #252	@ 0xfc
 8006d30:	0589      	lsls	r1, r1, #22
 8006d32:	1c18      	adds	r0, r3, #0
 8006d34:	f7f9 fbca 	bl	80004cc <__aeabi_fcmplt>
 8006d38:	1e03      	subs	r3, r0, #0
 8006d3a:	d003      	beq.n	8006d44 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	22fc      	movs	r2, #252	@ 0xfc
 8006d40:	0592      	lsls	r2, r2, #22
 8006d42:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d48:	2100      	movs	r1, #0
 8006d4a:	1c18      	adds	r0, r3, #0
 8006d4c:	f7f9 fbd2 	bl	80004f4 <__aeabi_fcmpgt>
 8006d50:	1e03      	subs	r3, r0, #0
 8006d52:	d015      	beq.n	8006d80 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	1c11      	adds	r1, r2, #0
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f000 fa4f 	bl	8007200 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	0018      	movs	r0, r3
 8006d66:	f000 f8e5 	bl	8006f34 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006d6a:	1c04      	adds	r4, r0, #0
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f000 f8ea 	bl	8006f48 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006d74:	1c02      	adds	r2, r0, #0
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	1c21      	adds	r1, r4, #0
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	f000 fb7a 	bl	8007474 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	21fc      	movs	r1, #252	@ 0xfc
 8006d86:	0589      	lsls	r1, r1, #22
 8006d88:	1c18      	adds	r0, r3, #0
 8006d8a:	f7f9 fd17 	bl	80007bc <__aeabi_fadd>
 8006d8e:	1c03      	adds	r3, r0, #0
 8006d90:	1c18      	adds	r0, r3, #0
 8006d92:	f7fa fb7b 	bl	800148c <__aeabi_f2iz>
 8006d96:	0002      	movs	r2, r0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	601a      	str	r2, [r3, #0]
    return;
 8006d9c:	46c0      	nop			@ (mov r8, r8)
}
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b005      	add	sp, #20
 8006da2:	bd90      	pop	{r4, r7, pc}
 8006da4:	42340000 	.word	0x42340000
 8006da8:	0000fde7 	.word	0x0000fde7
 8006dac:	00007fff 	.word	0x00007fff

08006db0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006db0:	b5b0      	push	{r4, r5, r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	223c      	movs	r2, #60	@ 0x3c
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4952      	ldr	r1, [pc, #328]	@ (8006f24 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006dda:	1c18      	adds	r0, r3, #0
 8006ddc:	f7f9 fe78 	bl	8000ad0 <__aeabi_fdiv>
 8006de0:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006de2:	2188      	movs	r1, #136	@ 0x88
 8006de4:	05c9      	lsls	r1, r1, #23
 8006de6:	1c18      	adds	r0, r3, #0
 8006de8:	f7fa f858 	bl	8000e9c <__aeabi_fmul>
 8006dec:	1c03      	adds	r3, r0, #0
 8006dee:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	494a      	ldr	r1, [pc, #296]	@ (8006f24 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006dfa:	1c18      	adds	r0, r3, #0
 8006dfc:	f7f9 fe68 	bl	8000ad0 <__aeabi_fdiv>
 8006e00:	1c03      	adds	r3, r0, #0
 8006e02:	1c19      	adds	r1, r3, #0
 8006e04:	1c20      	adds	r0, r4, #0
 8006e06:	f7f9 fcd9 	bl	80007bc <__aeabi_fadd>
 8006e0a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006e0c:	1c19      	adds	r1, r3, #0
 8006e0e:	1c28      	adds	r0, r5, #0
 8006e10:	f7f9 fe5e 	bl	8000ad0 <__aeabi_fdiv>
 8006e14:	1c03      	adds	r3, r0, #0
 8006e16:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	4940      	ldr	r1, [pc, #256]	@ (8006f24 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006e22:	1c18      	adds	r0, r3, #0
 8006e24:	f7f9 fe54 	bl	8000ad0 <__aeabi_fdiv>
 8006e28:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006e2a:	2185      	movs	r1, #133	@ 0x85
 8006e2c:	05c9      	lsls	r1, r1, #23
 8006e2e:	1c18      	adds	r0, r3, #0
 8006e30:	f7fa f834 	bl	8000e9c <__aeabi_fmul>
 8006e34:	1c03      	adds	r3, r0, #0
 8006e36:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4938      	ldr	r1, [pc, #224]	@ (8006f24 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006e42:	1c18      	adds	r0, r3, #0
 8006e44:	f7f9 fe44 	bl	8000ad0 <__aeabi_fdiv>
 8006e48:	1c03      	adds	r3, r0, #0
 8006e4a:	1c19      	adds	r1, r3, #0
 8006e4c:	1c20      	adds	r0, r4, #0
 8006e4e:	f7f9 fcb5 	bl	80007bc <__aeabi_fadd>
 8006e52:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006e54:	1c19      	adds	r1, r3, #0
 8006e56:	1c28      	adds	r0, r5, #0
 8006e58:	f7f9 fe3a 	bl	8000ad0 <__aeabi_fdiv>
 8006e5c:	1c03      	adds	r3, r0, #0
 8006e5e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d118      	bne.n	8006e9e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006e70:	2188      	movs	r1, #136	@ 0x88
 8006e72:	05c9      	lsls	r1, r1, #23
 8006e74:	1c18      	adds	r0, r3, #0
 8006e76:	f7fa f811 	bl	8000e9c <__aeabi_fmul>
 8006e7a:	1c03      	adds	r3, r0, #0
 8006e7c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8006e82:	4929      	ldr	r1, [pc, #164]	@ (8006f28 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8006e84:	1c18      	adds	r0, r3, #0
 8006e86:	f7f9 fc99 	bl	80007bc <__aeabi_fadd>
 8006e8a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006e8c:	1c19      	adds	r1, r3, #0
 8006e8e:	1c20      	adds	r0, r4, #0
 8006e90:	f7f9 fe1e 	bl	8000ad0 <__aeabi_fdiv>
 8006e94:	1c03      	adds	r3, r0, #0
 8006e96:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e9c:	e017      	b.n	8006ece <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006ea2:	2188      	movs	r1, #136	@ 0x88
 8006ea4:	05c9      	lsls	r1, r1, #23
 8006ea6:	1c18      	adds	r0, r3, #0
 8006ea8:	f7f9 fff8 	bl	8000e9c <__aeabi_fmul>
 8006eac:	1c03      	adds	r3, r0, #0
 8006eae:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8006eb4:	491d      	ldr	r1, [pc, #116]	@ (8006f2c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8006eb6:	1c18      	adds	r0, r3, #0
 8006eb8:	f7f9 fc80 	bl	80007bc <__aeabi_fadd>
 8006ebc:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006ebe:	1c19      	adds	r1, r3, #0
 8006ec0:	1c20      	adds	r0, r4, #0
 8006ec2:	f7f9 fe05 	bl	8000ad0 <__aeabi_fdiv>
 8006ec6:	1c03      	adds	r3, r0, #0
 8006ec8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006ed2:	2185      	movs	r1, #133	@ 0x85
 8006ed4:	05c9      	lsls	r1, r1, #23
 8006ed6:	1c18      	adds	r0, r3, #0
 8006ed8:	f7f9 ffe0 	bl	8000e9c <__aeabi_fmul>
 8006edc:	1c03      	adds	r3, r0, #0
 8006ede:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4912      	ldr	r1, [pc, #72]	@ (8006f30 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8006ee6:	1c18      	adds	r0, r3, #0
 8006ee8:	f7f9 fc68 	bl	80007bc <__aeabi_fadd>
 8006eec:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8006eee:	1c19      	adds	r1, r3, #0
 8006ef0:	1c20      	adds	r0, r4, #0
 8006ef2:	f7f9 fded 	bl	8000ad0 <__aeabi_fdiv>
 8006ef6:	1c03      	adds	r3, r0, #0
 8006ef8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006f1c:	46c0      	nop			@ (mov r8, r8)
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	b002      	add	sp, #8
 8006f22:	bdb0      	pop	{r4, r5, r7, pc}
 8006f24:	45610000 	.word	0x45610000
 8006f28:	44960000 	.word	0x44960000
 8006f2c:	41a00000 	.word	0x41a00000
 8006f30:	451c4000 	.word	0x451c4000

08006f34 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8006f40:	1c18      	adds	r0, r3, #0
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b002      	add	sp, #8
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8006f58:	1c19      	adds	r1, r3, #0
 8006f5a:	1c10      	adds	r0, r2, #0
 8006f5c:	f7f9 fc2e 	bl	80007bc <__aeabi_fadd>
 8006f60:	1c03      	adds	r3, r0, #0
}
 8006f62:	1c18      	adds	r0, r3, #0
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b002      	add	sp, #8
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	223c      	movs	r2, #60	@ 0x3c
 8006f76:	5c9b      	ldrb	r3, [r3, r2]
}
 8006f78:	0018      	movs	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b002      	add	sp, #8
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006f80:	b5b0      	push	{r4, r5, r7, lr}
 8006f82:	b08c      	sub	sp, #48	@ 0x30
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8006f8c:	1c19      	adds	r1, r3, #0
 8006f8e:	4895      	ldr	r0, [pc, #596]	@ (80071e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8006f90:	f7fa f8c2 	bl	8001118 <__aeabi_fsub>
 8006f94:	1c03      	adds	r3, r0, #0
 8006f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f9c:	1c19      	adds	r1, r3, #0
 8006f9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fa0:	f7f9 faa8 	bl	80004f4 <__aeabi_fcmpgt>
 8006fa4:	1e03      	subs	r3, r0, #0
 8006fa6:	d00b      	beq.n	8006fc0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006fb0:	1c19      	adds	r1, r3, #0
 8006fb2:	1c10      	adds	r0, r2, #0
 8006fb4:	f7f9 fc02 	bl	80007bc <__aeabi_fadd>
 8006fb8:	1c03      	adds	r3, r0, #0
 8006fba:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fc4:	1c19      	adds	r1, r3, #0
 8006fc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fc8:	f7f9 fa94 	bl	80004f4 <__aeabi_fcmpgt>
 8006fcc:	1e03      	subs	r3, r0, #0
 8006fce:	d00b      	beq.n	8006fe8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006fd8:	1c19      	adds	r1, r3, #0
 8006fda:	1c10      	adds	r0, r2, #0
 8006fdc:	f7f9 fbee 	bl	80007bc <__aeabi_fadd>
 8006fe0:	1c03      	adds	r3, r0, #0
 8006fe2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6959      	ldr	r1, [r3, #20]
 8006fec:	4a7e      	ldr	r2, [pc, #504]	@ (80071e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f000 f9f1 	bl	80073d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	1c11      	adds	r1, r2, #0
 8006ffe:	0018      	movs	r0, r3
 8007000:	f000 f9fa 	bl	80073f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007004:	1c03      	adds	r3, r0, #0
 8007006:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007014:	1c19      	adds	r1, r3, #0
 8007016:	1c10      	adds	r0, r2, #0
 8007018:	f7fa f87e 	bl	8001118 <__aeabi_fsub>
 800701c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800701e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007020:	1c18      	adds	r0, r3, #0
 8007022:	f7f9 ff3b 	bl	8000e9c <__aeabi_fmul>
 8007026:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007028:	1c19      	adds	r1, r3, #0
 800702a:	1c20      	adds	r0, r4, #0
 800702c:	f7f9 fbc6 	bl	80007bc <__aeabi_fadd>
 8007030:	1c03      	adds	r3, r0, #0
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800703c:	1c19      	adds	r1, r3, #0
 800703e:	486b      	ldr	r0, [pc, #428]	@ (80071ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007040:	f7fa f86a 	bl	8001118 <__aeabi_fsub>
 8007044:	1c03      	adds	r3, r0, #0
 8007046:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	1c11      	adds	r1, r2, #0
 8007050:	0018      	movs	r0, r3
 8007052:	f000 f9d1 	bl	80073f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007056:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007058:	1c19      	adds	r1, r3, #0
 800705a:	1c28      	adds	r0, r5, #0
 800705c:	f7f9 ff1e 	bl	8000e9c <__aeabi_fmul>
 8007060:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8007062:	1c19      	adds	r1, r3, #0
 8007064:	1c20      	adds	r0, r4, #0
 8007066:	f7f9 fba9 	bl	80007bc <__aeabi_fadd>
 800706a:	1c03      	adds	r3, r0, #0
 800706c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800706e:	4a60      	ldr	r2, [pc, #384]	@ (80071f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007070:	6a39      	ldr	r1, [r7, #32]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	0018      	movs	r0, r3
 8007076:	f000 f9af 	bl	80073d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	1c11      	adds	r1, r2, #0
 8007082:	0018      	movs	r0, r3
 8007084:	f000 f9b8 	bl	80073f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007088:	1c03      	adds	r3, r0, #0
 800708a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800708c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800708e:	69f8      	ldr	r0, [r7, #28]
 8007090:	f7f9 ff04 	bl	8000e9c <__aeabi_fmul>
 8007094:	1c03      	adds	r3, r0, #0
 8007096:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6999      	ldr	r1, [r3, #24]
 80070a0:	4a51      	ldr	r2, [pc, #324]	@ (80071e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	0018      	movs	r0, r3
 80070a6:	f000 f997 	bl	80073d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	1c11      	adds	r1, r2, #0
 80070b2:	0018      	movs	r0, r3
 80070b4:	f000 f9a0 	bl	80073f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80070b8:	1c03      	adds	r3, r0, #0
 80070ba:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80070c8:	1c19      	adds	r1, r3, #0
 80070ca:	1c10      	adds	r0, r2, #0
 80070cc:	f7fa f824 	bl	8001118 <__aeabi_fsub>
 80070d0:	1c03      	adds	r3, r0, #0
 80070d2:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80070d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070d6:	69b8      	ldr	r0, [r7, #24]
 80070d8:	f7fa f81e 	bl	8001118 <__aeabi_fsub>
 80070dc:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80070de:	1c19      	adds	r1, r3, #0
 80070e0:	1c28      	adds	r0, r5, #0
 80070e2:	f7f9 fedb 	bl	8000e9c <__aeabi_fmul>
 80070e6:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80070e8:	1c19      	adds	r1, r3, #0
 80070ea:	1c20      	adds	r0, r4, #0
 80070ec:	f7f9 fb66 	bl	80007bc <__aeabi_fadd>
 80070f0:	1c03      	adds	r3, r0, #0
 80070f2:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80070fc:	1c19      	adds	r1, r3, #0
 80070fe:	483b      	ldr	r0, [pc, #236]	@ (80071ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007100:	f7fa f80a 	bl	8001118 <__aeabi_fsub>
 8007104:	1c03      	adds	r3, r0, #0
 8007106:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1c11      	adds	r1, r2, #0
 8007110:	0018      	movs	r0, r3
 8007112:	f000 f971 	bl	80073f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007116:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007118:	1c19      	adds	r1, r3, #0
 800711a:	1c28      	adds	r0, r5, #0
 800711c:	f7f9 febe 	bl	8000e9c <__aeabi_fmul>
 8007120:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8007122:	1c19      	adds	r1, r3, #0
 8007124:	1c20      	adds	r0, r4, #0
 8007126:	f7f9 fb49 	bl	80007bc <__aeabi_fadd>
 800712a:	1c03      	adds	r3, r0, #0
 800712c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800712e:	4a30      	ldr	r2, [pc, #192]	@ (80071f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007130:	6939      	ldr	r1, [r7, #16]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f000 f94f 	bl	80073d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	1c11      	adds	r1, r2, #0
 8007142:	0018      	movs	r0, r3
 8007144:	f000 f958 	bl	80073f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007148:	1c03      	adds	r3, r0, #0
 800714a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800714c:	6979      	ldr	r1, [r7, #20]
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f7f9 fea4 	bl	8000e9c <__aeabi_fmul>
 8007154:	1c03      	adds	r3, r0, #0
 8007156:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4923      	ldr	r1, [pc, #140]	@ (80071f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007166:	1c18      	adds	r0, r3, #0
 8007168:	f7f9 fcb2 	bl	8000ad0 <__aeabi_fdiv>
 800716c:	1c03      	adds	r3, r0, #0
 800716e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007170:	69f9      	ldr	r1, [r7, #28]
 8007172:	20fe      	movs	r0, #254	@ 0xfe
 8007174:	0580      	lsls	r0, r0, #22
 8007176:	f7f9 ffcf 	bl	8001118 <__aeabi_fsub>
 800717a:	1c03      	adds	r3, r0, #0
 800717c:	491e      	ldr	r1, [pc, #120]	@ (80071f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800717e:	1c18      	adds	r0, r3, #0
 8007180:	f7f9 fe8c 	bl	8000e9c <__aeabi_fmul>
 8007184:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007186:	491d      	ldr	r1, [pc, #116]	@ (80071fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007188:	1c18      	adds	r0, r3, #0
 800718a:	f7f9 ffc5 	bl	8001118 <__aeabi_fsub>
 800718e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007190:	1c19      	adds	r1, r3, #0
 8007192:	1c28      	adds	r0, r5, #0
 8007194:	f7f9 fe82 	bl	8000e9c <__aeabi_fmul>
 8007198:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800719a:	1c19      	adds	r1, r3, #0
 800719c:	1c20      	adds	r0, r4, #0
 800719e:	f7f9 fb0d 	bl	80007bc <__aeabi_fadd>
 80071a2:	1c03      	adds	r3, r0, #0
 80071a4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ae:	2100      	movs	r1, #0
 80071b0:	1c18      	adds	r0, r3, #0
 80071b2:	f7f9 f98b 	bl	80004cc <__aeabi_fcmplt>
 80071b6:	1e03      	subs	r3, r0, #0
 80071b8:	d002      	beq.n	80071c0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80071c8:	1c19      	adds	r1, r3, #0
 80071ca:	1c10      	adds	r0, r2, #0
 80071cc:	f7f9 f992 	bl	80004f4 <__aeabi_fcmpgt>
 80071d0:	1e03      	subs	r3, r0, #0
 80071d2:	d100      	bne.n	80071d6 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80071d4:	e002      	b.n	80071dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071dc:	46c0      	nop			@ (mov r8, r8)
 80071de:	46bd      	mov	sp, r7
 80071e0:	b00c      	add	sp, #48	@ 0x30
 80071e2:	bdb0      	pop	{r4, r5, r7, pc}
 80071e4:	46fffe00 	.word	0x46fffe00
 80071e8:	3c23d70a 	.word	0x3c23d70a
 80071ec:	43ff0000 	.word	0x43ff0000
 80071f0:	3db851ec 	.word	0x3db851ec
 80071f4:	42700000 	.word	0x42700000
 80071f8:	3fa66666 	.word	0x3fa66666
 80071fc:	3e99999a 	.word	0x3e99999a

08007200 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	223c      	movs	r2, #60	@ 0x3c
 800720e:	5c9b      	ldrb	r3, [r3, r2]
 8007210:	2201      	movs	r2, #1
 8007212:	4053      	eors	r3, r2
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	223c      	movs	r2, #60	@ 0x3c
 800721e:	2101      	movs	r1, #1
 8007220:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800722e:	e0c8      	b.n	80073c2 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007234:	4965      	ldr	r1, [pc, #404]	@ (80073cc <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007236:	1c18      	adds	r0, r3, #0
 8007238:	f7f9 f966 	bl	8000508 <__aeabi_fcmpge>
 800723c:	1e03      	subs	r3, r0, #0
 800723e:	d107      	bne.n	8007250 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007244:	4962      	ldr	r1, [pc, #392]	@ (80073d0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007246:	1c18      	adds	r0, r3, #0
 8007248:	f7f9 f94a 	bl	80004e0 <__aeabi_fcmple>
 800724c:	1e03      	subs	r3, r0, #0
 800724e:	d00e      	beq.n	800726e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007258:	1c19      	adds	r1, r3, #0
 800725a:	1c10      	adds	r0, r2, #0
 800725c:	f7f9 faae 	bl	80007bc <__aeabi_fadd>
 8007260:	1c03      	adds	r3, r0, #0
 8007262:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007272:	1c19      	adds	r1, r3, #0
 8007274:	6838      	ldr	r0, [r7, #0]
 8007276:	f7f9 ff4f 	bl	8001118 <__aeabi_fsub>
 800727a:	1c03      	adds	r3, r0, #0
 800727c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	0018      	movs	r0, r3
 8007282:	f7ff fe7d 	bl	8006f80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	1c19      	adds	r1, r3, #0
 800728c:	6838      	ldr	r0, [r7, #0]
 800728e:	f7f9 ff43 	bl	8001118 <__aeabi_fsub>
 8007292:	1c03      	adds	r3, r0, #0
 8007294:	2185      	movs	r1, #133	@ 0x85
 8007296:	05c9      	lsls	r1, r1, #23
 8007298:	1c18      	adds	r0, r3, #0
 800729a:	f7f9 fc19 	bl	8000ad0 <__aeabi_fdiv>
 800729e:	1c03      	adds	r3, r0, #0
 80072a0:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80072a2:	2100      	movs	r1, #0
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7f9 f911 	bl	80004cc <__aeabi_fcmplt>
 80072aa:	1e03      	subs	r3, r0, #0
 80072ac:	d008      	beq.n	80072c0 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	1c18      	adds	r0, r3, #0
 80072b6:	f7f9 ff2f 	bl	8001118 <__aeabi_fsub>
 80072ba:	1c03      	adds	r3, r0, #0
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	e007      	b.n	80072d0 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c4:	1c19      	adds	r1, r3, #0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7f9 fa78 	bl	80007bc <__aeabi_fadd>
 80072cc:	1c03      	adds	r3, r0, #0
 80072ce:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80072d0:	23fe      	movs	r3, #254	@ 0xfe
 80072d2:	059b      	lsls	r3, r3, #22
 80072d4:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80072d6:	493f      	ldr	r1, [pc, #252]	@ (80073d4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80072d8:	6978      	ldr	r0, [r7, #20]
 80072da:	f7f9 f90b 	bl	80004f4 <__aeabi_fcmpgt>
 80072de:	1e03      	subs	r3, r0, #0
 80072e0:	d010      	beq.n	8007304 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80072e2:	493c      	ldr	r1, [pc, #240]	@ (80073d4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80072e4:	6978      	ldr	r0, [r7, #20]
 80072e6:	f7f9 fbf3 	bl	8000ad0 <__aeabi_fdiv>
 80072ea:	1c03      	adds	r3, r0, #0
 80072ec:	1c1c      	adds	r4, r3, #0
 80072ee:	4939      	ldr	r1, [pc, #228]	@ (80073d4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80072f0:	6978      	ldr	r0, [r7, #20]
 80072f2:	f7f9 fbed 	bl	8000ad0 <__aeabi_fdiv>
 80072f6:	1c03      	adds	r3, r0, #0
 80072f8:	1c19      	adds	r1, r3, #0
 80072fa:	1c20      	adds	r0, r4, #0
 80072fc:	f7f9 fdce 	bl	8000e9c <__aeabi_fmul>
 8007300:	1c03      	adds	r3, r0, #0
 8007302:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007308:	1c19      	adds	r1, r3, #0
 800730a:	2085      	movs	r0, #133	@ 0x85
 800730c:	05c0      	lsls	r0, r0, #23
 800730e:	f7f9 ff03 	bl	8001118 <__aeabi_fsub>
 8007312:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007314:	6939      	ldr	r1, [r7, #16]
 8007316:	1c18      	adds	r0, r3, #0
 8007318:	f7f9 fdc0 	bl	8000e9c <__aeabi_fmul>
 800731c:	1c03      	adds	r3, r0, #0
 800731e:	1c18      	adds	r0, r3, #0
 8007320:	f011 fdc4 	bl	8018eac <sqrtf>
 8007324:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800732e:	2185      	movs	r1, #133	@ 0x85
 8007330:	05c9      	lsls	r1, r1, #23
 8007332:	6938      	ldr	r0, [r7, #16]
 8007334:	f7f9 fdb2 	bl	8000e9c <__aeabi_fmul>
 8007338:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800733a:	1c19      	adds	r1, r3, #0
 800733c:	1c28      	adds	r0, r5, #0
 800733e:	f7f9 fbc7 	bl	8000ad0 <__aeabi_fdiv>
 8007342:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007344:	1c19      	adds	r1, r3, #0
 8007346:	1c20      	adds	r0, r4, #0
 8007348:	f7f9 fda8 	bl	8000e9c <__aeabi_fmul>
 800734c:	1c03      	adds	r3, r0, #0
 800734e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007354:	68f9      	ldr	r1, [r7, #12]
 8007356:	1c18      	adds	r0, r3, #0
 8007358:	f7f9 fda0 	bl	8000e9c <__aeabi_fmul>
 800735c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800735e:	6939      	ldr	r1, [r7, #16]
 8007360:	1c18      	adds	r0, r3, #0
 8007362:	f7f9 fbb5 	bl	8000ad0 <__aeabi_fdiv>
 8007366:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007368:	68f9      	ldr	r1, [r7, #12]
 800736a:	1c18      	adds	r0, r3, #0
 800736c:	f7f9 fd96 	bl	8000e9c <__aeabi_fmul>
 8007370:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007372:	1c19      	adds	r1, r3, #0
 8007374:	1c20      	adds	r0, r4, #0
 8007376:	f7f9 fa21 	bl	80007bc <__aeabi_fadd>
 800737a:	1c03      	adds	r3, r0, #0
 800737c:	1c18      	adds	r0, r3, #0
 800737e:	f011 fd95 	bl	8018eac <sqrtf>
 8007382:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007384:	1c19      	adds	r1, r3, #0
 8007386:	1c30      	adds	r0, r6, #0
 8007388:	f7f9 fd88 	bl	8000e9c <__aeabi_fmul>
 800738c:	1c03      	adds	r3, r0, #0
 800738e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800739c:	68f9      	ldr	r1, [r7, #12]
 800739e:	1c18      	adds	r0, r3, #0
 80073a0:	f7f9 fd7c 	bl	8000e9c <__aeabi_fmul>
 80073a4:	1c03      	adds	r3, r0, #0
 80073a6:	2182      	movs	r1, #130	@ 0x82
 80073a8:	05c9      	lsls	r1, r1, #23
 80073aa:	1c18      	adds	r0, r3, #0
 80073ac:	f7f9 fb90 	bl	8000ad0 <__aeabi_fdiv>
 80073b0:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80073b2:	1c19      	adds	r1, r3, #0
 80073b4:	1c20      	adds	r0, r4, #0
 80073b6:	f7f9 fa01 	bl	80007bc <__aeabi_fadd>
 80073ba:	1c03      	adds	r3, r0, #0
 80073bc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80073c2:	46c0      	nop			@ (mov r8, r8)
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b007      	add	sp, #28
 80073c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ca:	46c0      	nop			@ (mov r8, r8)
 80073cc:	42c80000 	.word	0x42c80000
 80073d0:	c2c80000 	.word	0xc2c80000
 80073d4:	44b40000 	.word	0x44b40000

080073d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073f0:	46c0      	nop			@ (mov r8, r8)
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b004      	add	sp, #16
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800740a:	1c19      	adds	r1, r3, #0
 800740c:	6838      	ldr	r0, [r7, #0]
 800740e:	f7f9 fe83 	bl	8001118 <__aeabi_fsub>
 8007412:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007414:	1c19      	adds	r1, r3, #0
 8007416:	1c20      	adds	r0, r4, #0
 8007418:	f7f9 fd40 	bl	8000e9c <__aeabi_fmul>
 800741c:	1c03      	adds	r3, r0, #0
 800741e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007420:	4912      	ldr	r1, [pc, #72]	@ (800746c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7f9 f852 	bl	80004cc <__aeabi_fcmplt>
 8007428:	1e03      	subs	r3, r0, #0
 800742a:	d002      	beq.n	8007432 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800742c:	23fe      	movs	r3, #254	@ 0xfe
 800742e:	059b      	lsls	r3, r3, #22
 8007430:	e018      	b.n	8007464 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007432:	490f      	ldr	r1, [pc, #60]	@ (8007470 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7f9 f85d 	bl	80004f4 <__aeabi_fcmpgt>
 800743a:	1e03      	subs	r3, r0, #0
 800743c:	d001      	beq.n	8007442 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800743e:	2300      	movs	r3, #0
 8007440:	e010      	b.n	8007464 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1c18      	adds	r0, r3, #0
 8007446:	f011 fd09 	bl	8018e5c <expf>
 800744a:	1c03      	adds	r3, r0, #0
 800744c:	21fe      	movs	r1, #254	@ 0xfe
 800744e:	0589      	lsls	r1, r1, #22
 8007450:	1c18      	adds	r0, r3, #0
 8007452:	f7f9 f9b3 	bl	80007bc <__aeabi_fadd>
 8007456:	1c03      	adds	r3, r0, #0
 8007458:	1c19      	adds	r1, r3, #0
 800745a:	20fe      	movs	r0, #254	@ 0xfe
 800745c:	0580      	lsls	r0, r0, #22
 800745e:	f7f9 fb37 	bl	8000ad0 <__aeabi_fdiv>
 8007462:	1c03      	adds	r3, r0, #0
    }
}
 8007464:	1c18      	adds	r0, r3, #0
 8007466:	46bd      	mov	sp, r7
 8007468:	b005      	add	sp, #20
 800746a:	bd90      	pop	{r4, r7, pc}
 800746c:	c2480000 	.word	0xc2480000
 8007470:	42480000 	.word	0x42480000

08007474 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800748c:	46c0      	nop			@ (mov r8, r8)
 800748e:	46bd      	mov	sp, r7
 8007490:	b004      	add	sp, #16
 8007492:	bd80      	pop	{r7, pc}

08007494 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007494:	b590      	push	{r4, r7, lr}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d114      	bne.n	80074d0 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074aa:	1c19      	adds	r1, r3, #0
 80074ac:	6838      	ldr	r0, [r7, #0]
 80074ae:	f7f9 fe33 	bl	8001118 <__aeabi_fsub>
 80074b2:	1c03      	adds	r3, r0, #0
 80074b4:	4918      	ldr	r1, [pc, #96]	@ (8007518 <GasIndexAlgorithm__mox_model__process+0x84>)
 80074b6:	1c18      	adds	r0, r3, #0
 80074b8:	f7f9 fb0a 	bl	8000ad0 <__aeabi_fdiv>
 80074bc:	1c03      	adds	r3, r0, #0
 80074be:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80074c4:	1c19      	adds	r1, r3, #0
 80074c6:	1c10      	adds	r0, r2, #0
 80074c8:	f7f9 fce8 	bl	8000e9c <__aeabi_fmul>
 80074cc:	1c03      	adds	r3, r0, #0
 80074ce:	e01f      	b.n	8007510 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074d4:	1c19      	adds	r1, r3, #0
 80074d6:	6838      	ldr	r0, [r7, #0]
 80074d8:	f7f9 fe1e 	bl	8001118 <__aeabi_fsub>
 80074dc:	1c03      	adds	r3, r0, #0
 80074de:	1c1a      	adds	r2, r3, #0
 80074e0:	2380      	movs	r3, #128	@ 0x80
 80074e2:	061b      	lsls	r3, r3, #24
 80074e4:	4053      	eors	r3, r2
 80074e6:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074ec:	490b      	ldr	r1, [pc, #44]	@ (800751c <GasIndexAlgorithm__mox_model__process+0x88>)
 80074ee:	1c18      	adds	r0, r3, #0
 80074f0:	f7f9 f964 	bl	80007bc <__aeabi_fadd>
 80074f4:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80074f6:	1c19      	adds	r1, r3, #0
 80074f8:	1c20      	adds	r0, r4, #0
 80074fa:	f7f9 fae9 	bl	8000ad0 <__aeabi_fdiv>
 80074fe:	1c03      	adds	r3, r0, #0
 8007500:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007506:	1c19      	adds	r1, r3, #0
 8007508:	1c10      	adds	r0, r2, #0
 800750a:	f7f9 fcc7 	bl	8000e9c <__aeabi_fmul>
 800750e:	1c03      	adds	r3, r0, #0
    }
}
 8007510:	1c18      	adds	r0, r3, #0
 8007512:	46bd      	mov	sp, r7
 8007514:	b003      	add	sp, #12
 8007516:	bd90      	pop	{r4, r7, pc}
 8007518:	44fa0000 	.word	0x44fa0000
 800751c:	435c0000 	.word	0x435c0000

08007520 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2180      	movs	r1, #128	@ 0x80
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2184      	movs	r1, #132	@ 0x84
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2188      	movs	r1, #136	@ 0x88
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	505a      	str	r2, [r3, r1]
}
 8007546:	46c0      	nop			@ (mov r8, r8)
 8007548:	46bd      	mov	sp, r7
 800754a:	b004      	add	sp, #16
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8007550:	b590      	push	{r4, r7, lr}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2280      	movs	r2, #128	@ 0x80
 800755e:	589c      	ldr	r4, [r3, r2]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2284      	movs	r2, #132	@ 0x84
 8007564:	589b      	ldr	r3, [r3, r2]
 8007566:	1c19      	adds	r1, r3, #0
 8007568:	6838      	ldr	r0, [r7, #0]
 800756a:	f7f9 fdd5 	bl	8001118 <__aeabi_fsub>
 800756e:	1c03      	adds	r3, r0, #0
 8007570:	1c19      	adds	r1, r3, #0
 8007572:	1c20      	adds	r0, r4, #0
 8007574:	f7f9 fc92 	bl	8000e9c <__aeabi_fmul>
 8007578:	1c03      	adds	r3, r0, #0
 800757a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800757c:	4940      	ldr	r1, [pc, #256]	@ (8007680 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800757e:	68b8      	ldr	r0, [r7, #8]
 8007580:	f7f8 ffa4 	bl	80004cc <__aeabi_fcmplt>
 8007584:	1e03      	subs	r3, r0, #0
 8007586:	d001      	beq.n	800758c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007588:	4b3e      	ldr	r3, [pc, #248]	@ (8007684 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800758a:	e075      	b.n	8007678 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800758c:	493e      	ldr	r1, [pc, #248]	@ (8007688 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800758e:	68b8      	ldr	r0, [r7, #8]
 8007590:	f7f8 ffb0 	bl	80004f4 <__aeabi_fcmpgt>
 8007594:	1e03      	subs	r3, r0, #0
 8007596:	d001      	beq.n	800759c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007598:	2300      	movs	r3, #0
 800759a:	e06d      	b.n	8007678 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800759c:	2100      	movs	r1, #0
 800759e:	6838      	ldr	r0, [r7, #0]
 80075a0:	f7f8 ffb2 	bl	8000508 <__aeabi_fcmpge>
 80075a4:	1e03      	subs	r3, r0, #0
 80075a6:	d047      	beq.n	8007638 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2288      	movs	r2, #136	@ 0x88
 80075ac:	589b      	ldr	r3, [r3, r2]
 80075ae:	21fe      	movs	r1, #254	@ 0xfe
 80075b0:	0589      	lsls	r1, r1, #22
 80075b2:	1c18      	adds	r0, r3, #0
 80075b4:	f7f8 ff84 	bl	80004c0 <__aeabi_fcmpeq>
 80075b8:	1e03      	subs	r3, r0, #0
 80075ba:	d00e      	beq.n	80075da <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	1c19      	adds	r1, r3, #0
 80075c2:	20fe      	movs	r0, #254	@ 0xfe
 80075c4:	0580      	lsls	r0, r0, #22
 80075c6:	f7f9 fda7 	bl	8001118 <__aeabi_fsub>
 80075ca:	1c03      	adds	r3, r0, #0
 80075cc:	492f      	ldr	r1, [pc, #188]	@ (800768c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80075ce:	1c18      	adds	r0, r3, #0
 80075d0:	f7f9 fc64 	bl	8000e9c <__aeabi_fmul>
 80075d4:	1c03      	adds	r3, r0, #0
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e012      	b.n	8007600 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	492c      	ldr	r1, [pc, #176]	@ (8007690 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80075e0:	1c18      	adds	r0, r3, #0
 80075e2:	f7f9 fc5b 	bl	8000e9c <__aeabi_fmul>
 80075e6:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80075e8:	1c19      	adds	r1, r3, #0
 80075ea:	4826      	ldr	r0, [pc, #152]	@ (8007684 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80075ec:	f7f9 fd94 	bl	8001118 <__aeabi_fsub>
 80075f0:	1c03      	adds	r3, r0, #0
 80075f2:	2181      	movs	r1, #129	@ 0x81
 80075f4:	05c9      	lsls	r1, r1, #23
 80075f6:	1c18      	adds	r0, r3, #0
 80075f8:	f7f9 fa6a 	bl	8000ad0 <__aeabi_fdiv>
 80075fc:	1c03      	adds	r3, r0, #0
 80075fe:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007600:	4920      	ldr	r1, [pc, #128]	@ (8007684 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7f9 f8da 	bl	80007bc <__aeabi_fadd>
 8007608:	1c03      	adds	r3, r0, #0
 800760a:	1c1c      	adds	r4, r3, #0
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	1c18      	adds	r0, r3, #0
 8007610:	f011 fc24 	bl	8018e5c <expf>
 8007614:	1c03      	adds	r3, r0, #0
 8007616:	21fe      	movs	r1, #254	@ 0xfe
 8007618:	0589      	lsls	r1, r1, #22
 800761a:	1c18      	adds	r0, r3, #0
 800761c:	f7f9 f8ce 	bl	80007bc <__aeabi_fadd>
 8007620:	1c03      	adds	r3, r0, #0
 8007622:	1c19      	adds	r1, r3, #0
 8007624:	1c20      	adds	r0, r4, #0
 8007626:	f7f9 fa53 	bl	8000ad0 <__aeabi_fdiv>
 800762a:	1c03      	adds	r3, r0, #0
 800762c:	68f9      	ldr	r1, [r7, #12]
 800762e:	1c18      	adds	r0, r3, #0
 8007630:	f7f9 fd72 	bl	8001118 <__aeabi_fsub>
 8007634:	1c03      	adds	r3, r0, #0
 8007636:	e01f      	b.n	8007678 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2188      	movs	r1, #136	@ 0x88
 8007640:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8007642:	1c19      	adds	r1, r3, #0
 8007644:	1c10      	adds	r0, r2, #0
 8007646:	f7f9 fa43 	bl	8000ad0 <__aeabi_fdiv>
 800764a:	1c03      	adds	r3, r0, #0
 800764c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	1c18      	adds	r0, r3, #0
 8007652:	f011 fc03 	bl	8018e5c <expf>
 8007656:	1c03      	adds	r3, r0, #0
 8007658:	21fe      	movs	r1, #254	@ 0xfe
 800765a:	0589      	lsls	r1, r1, #22
 800765c:	1c18      	adds	r0, r3, #0
 800765e:	f7f9 f8ad 	bl	80007bc <__aeabi_fadd>
 8007662:	1c03      	adds	r3, r0, #0
 8007664:	1c19      	adds	r1, r3, #0
 8007666:	4807      	ldr	r0, [pc, #28]	@ (8007684 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007668:	f7f9 fa32 	bl	8000ad0 <__aeabi_fdiv>
 800766c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800766e:	1c19      	adds	r1, r3, #0
 8007670:	1c20      	adds	r0, r4, #0
 8007672:	f7f9 fc13 	bl	8000e9c <__aeabi_fmul>
 8007676:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007678:	1c18      	adds	r0, r3, #0
 800767a:	46bd      	mov	sp, r7
 800767c:	b005      	add	sp, #20
 800767e:	bd90      	pop	{r4, r7, pc}
 8007680:	c2480000 	.word	0xc2480000
 8007684:	43fa0000 	.word	0x43fa0000
 8007688:	42480000 	.word	0x42480000
 800768c:	3f8041ab 	.word	0x3f8041ab
 8007690:	40a00000 	.word	0x40a00000

08007694 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007694:	b590      	push	{r4, r7, lr}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	4913      	ldr	r1, [pc, #76]	@ (80076f4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80076a6:	1c18      	adds	r0, r3, #0
 80076a8:	f7f9 f888 	bl	80007bc <__aeabi_fadd>
 80076ac:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80076ae:	1c19      	adds	r1, r3, #0
 80076b0:	1c20      	adds	r0, r4, #0
 80076b2:	f7f9 fa0d 	bl	8000ad0 <__aeabi_fdiv>
 80076b6:	1c03      	adds	r3, r0, #0
 80076b8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	228c      	movs	r2, #140	@ 0x8c
 80076be:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	490b      	ldr	r1, [pc, #44]	@ (80076f8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80076ca:	1c18      	adds	r0, r3, #0
 80076cc:	f7f9 f876 	bl	80007bc <__aeabi_fadd>
 80076d0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80076d2:	1c19      	adds	r1, r3, #0
 80076d4:	1c20      	adds	r0, r4, #0
 80076d6:	f7f9 f9fb 	bl	8000ad0 <__aeabi_fdiv>
 80076da:	1c03      	adds	r3, r0, #0
 80076dc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2290      	movs	r2, #144	@ 0x90
 80076e2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2294      	movs	r2, #148	@ 0x94
 80076e8:	2100      	movs	r1, #0
 80076ea:	5499      	strb	r1, [r3, r2]
}
 80076ec:	46c0      	nop			@ (mov r8, r8)
 80076ee:	46bd      	mov	sp, r7
 80076f0:	b003      	add	sp, #12
 80076f2:	bd90      	pop	{r4, r7, pc}
 80076f4:	41a00000 	.word	0x41a00000
 80076f8:	43fa0000 	.word	0x43fa0000

080076fc <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2294      	movs	r2, #148	@ 0x94
 800770a:	5c9b      	ldrb	r3, [r3, r2]
 800770c:	2201      	movs	r2, #1
 800770e:	4053      	eors	r3, r2
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00f      	beq.n	8007736 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2198      	movs	r1, #152	@ 0x98
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	219c      	movs	r1, #156	@ 0x9c
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	21a0      	movs	r1, #160	@ 0xa0
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2294      	movs	r2, #148	@ 0x94
 8007732:	2101      	movs	r1, #1
 8007734:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	228c      	movs	r2, #140	@ 0x8c
 800773a:	589b      	ldr	r3, [r3, r2]
 800773c:	1c19      	adds	r1, r3, #0
 800773e:	20fe      	movs	r0, #254	@ 0xfe
 8007740:	0580      	lsls	r0, r0, #22
 8007742:	f7f9 fce9 	bl	8001118 <__aeabi_fsub>
 8007746:	1c03      	adds	r3, r0, #0
 8007748:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2298      	movs	r2, #152	@ 0x98
 800774e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007750:	1c19      	adds	r1, r3, #0
 8007752:	f7f9 fba3 	bl	8000e9c <__aeabi_fmul>
 8007756:	1c03      	adds	r3, r0, #0
 8007758:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	228c      	movs	r2, #140	@ 0x8c
 800775e:	589b      	ldr	r3, [r3, r2]
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	1c18      	adds	r0, r3, #0
 8007764:	f7f9 fb9a 	bl	8000e9c <__aeabi_fmul>
 8007768:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800776a:	1c19      	adds	r1, r3, #0
 800776c:	1c20      	adds	r0, r4, #0
 800776e:	f7f9 f825 	bl	80007bc <__aeabi_fadd>
 8007772:	1c03      	adds	r3, r0, #0
 8007774:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2298      	movs	r2, #152	@ 0x98
 800777a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2290      	movs	r2, #144	@ 0x90
 8007780:	589b      	ldr	r3, [r3, r2]
 8007782:	1c19      	adds	r1, r3, #0
 8007784:	20fe      	movs	r0, #254	@ 0xfe
 8007786:	0580      	lsls	r0, r0, #22
 8007788:	f7f9 fcc6 	bl	8001118 <__aeabi_fsub>
 800778c:	1c03      	adds	r3, r0, #0
 800778e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	229c      	movs	r2, #156	@ 0x9c
 8007794:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007796:	1c19      	adds	r1, r3, #0
 8007798:	f7f9 fb80 	bl	8000e9c <__aeabi_fmul>
 800779c:	1c03      	adds	r3, r0, #0
 800779e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2290      	movs	r2, #144	@ 0x90
 80077a4:	589b      	ldr	r3, [r3, r2]
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	1c18      	adds	r0, r3, #0
 80077aa:	f7f9 fb77 	bl	8000e9c <__aeabi_fmul>
 80077ae:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80077b0:	1c19      	adds	r1, r3, #0
 80077b2:	1c20      	adds	r0, r4, #0
 80077b4:	f7f9 f802 	bl	80007bc <__aeabi_fadd>
 80077b8:	1c03      	adds	r3, r0, #0
 80077ba:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	229c      	movs	r2, #156	@ 0x9c
 80077c0:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2298      	movs	r2, #152	@ 0x98
 80077c6:	589a      	ldr	r2, [r3, r2]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	219c      	movs	r1, #156	@ 0x9c
 80077cc:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80077ce:	1c19      	adds	r1, r3, #0
 80077d0:	1c10      	adds	r0, r2, #0
 80077d2:	f7f9 fca1 	bl	8001118 <__aeabi_fsub>
 80077d6:	1c03      	adds	r3, r0, #0
 80077d8:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80077da:	2100      	movs	r1, #0
 80077dc:	6978      	ldr	r0, [r7, #20]
 80077de:	f7f8 fe75 	bl	80004cc <__aeabi_fcmplt>
 80077e2:	1e03      	subs	r3, r0, #0
 80077e4:	d004      	beq.n	80077f0 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2280      	movs	r2, #128	@ 0x80
 80077ea:	0612      	lsls	r2, r2, #24
 80077ec:	4053      	eors	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80077f0:	4923      	ldr	r1, [pc, #140]	@ (8007880 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80077f2:	6978      	ldr	r0, [r7, #20]
 80077f4:	f7f9 fb52 	bl	8000e9c <__aeabi_fmul>
 80077f8:	1c03      	adds	r3, r0, #0
 80077fa:	1c18      	adds	r0, r3, #0
 80077fc:	f011 fb2e 	bl	8018e5c <expf>
 8007800:	1c03      	adds	r3, r0, #0
 8007802:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8007804:	491f      	ldr	r1, [pc, #124]	@ (8007884 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8007806:	6938      	ldr	r0, [r7, #16]
 8007808:	f7f9 fb48 	bl	8000e9c <__aeabi_fmul>
 800780c:	1c03      	adds	r3, r0, #0
 800780e:	491e      	ldr	r1, [pc, #120]	@ (8007888 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8007810:	1c18      	adds	r0, r3, #0
 8007812:	f7f8 ffd3 	bl	80007bc <__aeabi_fadd>
 8007816:	1c03      	adds	r3, r0, #0
 8007818:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685c      	ldr	r4, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	1c18      	adds	r0, r3, #0
 8007826:	f7f8 ffc9 	bl	80007bc <__aeabi_fadd>
 800782a:	1c03      	adds	r3, r0, #0
 800782c:	1c19      	adds	r1, r3, #0
 800782e:	1c20      	adds	r0, r4, #0
 8007830:	f7f9 f94e 	bl	8000ad0 <__aeabi_fdiv>
 8007834:	1c03      	adds	r3, r0, #0
 8007836:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	20fe      	movs	r0, #254	@ 0xfe
 800783c:	0580      	lsls	r0, r0, #22
 800783e:	f7f9 fc6b 	bl	8001118 <__aeabi_fsub>
 8007842:	1c03      	adds	r3, r0, #0
 8007844:	1c18      	adds	r0, r3, #0
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	22a0      	movs	r2, #160	@ 0xa0
 800784a:	589b      	ldr	r3, [r3, r2]
 800784c:	1c19      	adds	r1, r3, #0
 800784e:	f7f9 fb25 	bl	8000e9c <__aeabi_fmul>
 8007852:	1c03      	adds	r3, r0, #0
 8007854:	1c1c      	adds	r4, r3, #0
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	68b8      	ldr	r0, [r7, #8]
 800785a:	f7f9 fb1f 	bl	8000e9c <__aeabi_fmul>
 800785e:	1c03      	adds	r3, r0, #0
 8007860:	1c19      	adds	r1, r3, #0
 8007862:	1c20      	adds	r0, r4, #0
 8007864:	f7f8 ffaa 	bl	80007bc <__aeabi_fadd>
 8007868:	1c03      	adds	r3, r0, #0
 800786a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	22a0      	movs	r2, #160	@ 0xa0
 8007870:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	22a0      	movs	r2, #160	@ 0xa0
 8007876:	589b      	ldr	r3, [r3, r2]
}
 8007878:	1c18      	adds	r0, r3, #0
 800787a:	46bd      	mov	sp, r7
 800787c:	b007      	add	sp, #28
 800787e:	bd90      	pop	{r4, r7, pc}
 8007880:	be4ccccd 	.word	0xbe4ccccd
 8007884:	43f00000 	.word	0x43f00000
 8007888:	41a00000 	.word	0x41a00000

0800788c <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800788c:	b590      	push	{r4, r7, lr}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6039      	str	r1, [r7, #0]
 8007894:	0011      	movs	r1, r2
 8007896:	1dfb      	adds	r3, r7, #7
 8007898:	1c02      	adds	r2, r0, #0
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	1dbb      	adds	r3, r7, #6
 800789e:	1c0a      	adds	r2, r1, #0
 80078a0:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80078a2:	4b08      	ldr	r3, [pc, #32]	@ (80078c4 <ReadRegister+0x38>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80078aa:	4b06      	ldr	r3, [pc, #24]	@ (80078c4 <ReadRegister+0x38>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	1dba      	adds	r2, r7, #6
 80078b0:	7814      	ldrb	r4, [r2, #0]
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	1dfa      	adds	r2, r7, #7
 80078b6:	7810      	ldrb	r0, [r2, #0]
 80078b8:	0022      	movs	r2, r4
 80078ba:	4798      	blx	r3
  }
}
 80078bc:	46c0      	nop			@ (mov r8, r8)
 80078be:	46bd      	mov	sp, r7
 80078c0:	b003      	add	sp, #12
 80078c2:	bd90      	pop	{r4, r7, pc}
 80078c4:	20002550 	.word	0x20002550

080078c8 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80078c8:	b590      	push	{r4, r7, lr}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6039      	str	r1, [r7, #0]
 80078d0:	0011      	movs	r1, r2
 80078d2:	1dfb      	adds	r3, r7, #7
 80078d4:	1c02      	adds	r2, r0, #0
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	1dbb      	adds	r3, r7, #6
 80078da:	1c0a      	adds	r2, r1, #0
 80078dc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80078de:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <WriteRegister+0x38>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d008      	beq.n	80078f8 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80078e6:	4b06      	ldr	r3, [pc, #24]	@ (8007900 <WriteRegister+0x38>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	1dba      	adds	r2, r7, #6
 80078ec:	7814      	ldrb	r4, [r2, #0]
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	1dfa      	adds	r2, r7, #7
 80078f2:	7810      	ldrb	r0, [r2, #0]
 80078f4:	0022      	movs	r2, r4
 80078f6:	4798      	blx	r3
  }
}
 80078f8:	46c0      	nop			@ (mov r8, r8)
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b003      	add	sp, #12
 80078fe:	bd90      	pop	{r4, r7, pc}
 8007900:	20002554 	.word	0x20002554

08007904 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800790e:	4b07      	ldr	r3, [pc, #28]	@ (800792c <SGP_Init+0x28>)
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8007914:	4b06      	ldr	r3, [pc, #24]	@ (8007930 <SGP_Init+0x2c>)
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800791a:	4b06      	ldr	r3, [pc, #24]	@ (8007934 <SGP_Init+0x30>)
 800791c:	2100      	movs	r1, #0
 800791e:	0018      	movs	r0, r3
 8007920:	f7ff f930 	bl	8006b84 <GasIndexAlgorithm_init>
}
 8007924:	46c0      	nop			@ (mov r8, r8)
 8007926:	46bd      	mov	sp, r7
 8007928:	b002      	add	sp, #8
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20002550 	.word	0x20002550
 8007930:	20002554 	.word	0x20002554
 8007934:	20002564 	.word	0x20002564

08007938 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800793c:	4b13      	ldr	r3, [pc, #76]	@ (800798c <SGP_StartMeasurement+0x54>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00d      	beq.n	8007960 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007944:	4b12      	ldr	r3, [pc, #72]	@ (8007990 <SGP_StartMeasurement+0x58>)
 8007946:	2208      	movs	r2, #8
 8007948:	0019      	movs	r1, r3
 800794a:	2059      	movs	r0, #89	@ 0x59
 800794c:	f7ff ffbc 	bl	80078c8 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007950:	f001 f956 	bl	8008c00 <GetCurrentHalTicks>
 8007954:	0003      	movs	r3, r0
 8007956:	331e      	adds	r3, #30
 8007958:	001a      	movs	r2, r3
 800795a:	4b0e      	ldr	r3, [pc, #56]	@ (8007994 <SGP_StartMeasurement+0x5c>)
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	e00c      	b.n	800797a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007960:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <SGP_StartMeasurement+0x60>)
 8007962:	2208      	movs	r2, #8
 8007964:	0019      	movs	r1, r3
 8007966:	2059      	movs	r0, #89	@ 0x59
 8007968:	f7ff ffae 	bl	80078c8 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800796c:	f001 f948 	bl	8008c00 <GetCurrentHalTicks>
 8007970:	0003      	movs	r3, r0
 8007972:	33aa      	adds	r3, #170	@ 0xaa
 8007974:	001a      	movs	r2, r3
 8007976:	4b09      	ldr	r3, [pc, #36]	@ (800799c <SGP_StartMeasurement+0x64>)
 8007978:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800797a:	4b09      	ldr	r3, [pc, #36]	@ (80079a0 <SGP_StartMeasurement+0x68>)
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8007980:	4b08      	ldr	r3, [pc, #32]	@ (80079a4 <SGP_StartMeasurement+0x6c>)
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]
}
 8007986:	46c0      	nop			@ (mov r8, r8)
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	2000260c 	.word	0x2000260c
 8007990:	20000120 	.word	0x20000120
 8007994:	20000134 	.word	0x20000134
 8007998:	20000118 	.word	0x20000118
 800799c:	2000012c 	.word	0x2000012c
 80079a0:	20002562 	.word	0x20002562
 80079a4:	20002563 	.word	0x20002563

080079a8 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	4b04      	ldr	r3, [pc, #16]	@ (80079c0 <SGP_HeatedUp+0x18>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	0018      	movs	r0, r3
 80079b2:	f001 f843 	bl	8008a3c <TimestampIsReached>
 80079b6:	0003      	movs	r3, r0
 80079b8:	0018      	movs	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	46c0      	nop			@ (mov r8, r8)
 80079c0:	2000012c 	.word	0x2000012c

080079c4 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80079c8:	4b04      	ldr	r3, [pc, #16]	@ (80079dc <SGP_MeasurementReady+0x18>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	0018      	movs	r0, r3
 80079ce:	f001 f835 	bl	8008a3c <TimestampIsReached>
 80079d2:	0003      	movs	r3, r0
}
 80079d4:	0018      	movs	r0, r3
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	46c0      	nop			@ (mov r8, r8)
 80079dc:	20000134 	.word	0x20000134

080079e0 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80079e4:	4b04      	ldr	r3, [pc, #16]	@ (80079f8 <SGP_MeasurementDone+0x18>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	0018      	movs	r0, r3
 80079ea:	f001 f827 	bl	8008a3c <TimestampIsReached>
 80079ee:	0003      	movs	r3, r0
}
 80079f0:	0018      	movs	r0, r3
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	46c0      	nop			@ (mov r8, r8)
 80079f8:	20000130 	.word	0x20000130

080079fc <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80079fc:	b580      	push	{r7, lr}
 80079fe:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007a00:	4b04      	ldr	r3, [pc, #16]	@ (8007a14 <SGP_TurnHeaterOff+0x18>)
 8007a02:	2202      	movs	r2, #2
 8007a04:	0019      	movs	r1, r3
 8007a06:	2059      	movs	r0, #89	@ 0x59
 8007a08:	f7ff ff5e 	bl	80078c8 <WriteRegister>
}
 8007a0c:	46c0      	nop			@ (mov r8, r8)
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			@ (mov r8, r8)
 8007a14:	20000110 	.word	0x20000110

08007a18 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8007a18:	b5b0      	push	{r4, r5, r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8007a20:	f7ff ffc2 	bl	80079a8 <SGP_HeatedUp>
 8007a24:	1e03      	subs	r3, r0, #0
 8007a26:	d038      	beq.n	8007a9a <SGP_GetMeasurementValues+0x82>
 8007a28:	4bd8      	ldr	r3, [pc, #864]	@ (8007d8c <SGP_GetMeasurementValues+0x374>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	4053      	eors	r3, r2
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d031      	beq.n	8007a9a <SGP_GetMeasurementValues+0x82>
 8007a36:	4bd6      	ldr	r3, [pc, #856]	@ (8007d90 <SGP_GetMeasurementValues+0x378>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4053      	eors	r3, r2
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d02a      	beq.n	8007a9a <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8007a44:	4ad3      	ldr	r2, [pc, #844]	@ (8007d94 <SGP_GetMeasurementValues+0x37c>)
 8007a46:	4bd4      	ldr	r3, [pc, #848]	@ (8007d98 <SGP_GetMeasurementValues+0x380>)
 8007a48:	0019      	movs	r1, r3
 8007a4a:	2003      	movs	r0, #3
 8007a4c:	f001 f84c 	bl	8008ae8 <CreateLine>
    HeatUpIsDone = true;
 8007a50:	4bce      	ldr	r3, [pc, #824]	@ (8007d8c <SGP_GetMeasurementValues+0x374>)
 8007a52:	2201      	movs	r2, #1
 8007a54:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8007a56:	4bd1      	ldr	r3, [pc, #836]	@ (8007d9c <SGP_GetMeasurementValues+0x384>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00d      	beq.n	8007a7a <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007a5e:	4bd0      	ldr	r3, [pc, #832]	@ (8007da0 <SGP_GetMeasurementValues+0x388>)
 8007a60:	2208      	movs	r2, #8
 8007a62:	0019      	movs	r1, r3
 8007a64:	2059      	movs	r0, #89	@ 0x59
 8007a66:	f7ff ff2f 	bl	80078c8 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007a6a:	f001 f8c9 	bl	8008c00 <GetCurrentHalTicks>
 8007a6e:	0003      	movs	r3, r0
 8007a70:	331e      	adds	r3, #30
 8007a72:	001a      	movs	r2, r3
 8007a74:	4bcb      	ldr	r3, [pc, #812]	@ (8007da4 <SGP_GetMeasurementValues+0x38c>)
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e00c      	b.n	8007a94 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007a7a:	4bcb      	ldr	r3, [pc, #812]	@ (8007da8 <SGP_GetMeasurementValues+0x390>)
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	0019      	movs	r1, r3
 8007a80:	2059      	movs	r0, #89	@ 0x59
 8007a82:	f7ff ff21 	bl	80078c8 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007a86:	f001 f8bb 	bl	8008c00 <GetCurrentHalTicks>
 8007a8a:	0003      	movs	r3, r0
 8007a8c:	331e      	adds	r3, #30
 8007a8e:	001a      	movs	r2, r3
 8007a90:	4bc4      	ldr	r3, [pc, #784]	@ (8007da4 <SGP_GetMeasurementValues+0x38c>)
 8007a92:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8007a94:	4bbe      	ldr	r3, [pc, #760]	@ (8007d90 <SGP_GetMeasurementValues+0x378>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8007a9a:	4bbc      	ldr	r3, [pc, #752]	@ (8007d8c <SGP_GetMeasurementValues+0x374>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d100      	bne.n	8007aa4 <SGP_GetMeasurementValues+0x8c>
 8007aa2:	e1b1      	b.n	8007e08 <SGP_GetMeasurementValues+0x3f0>
 8007aa4:	f7ff ff8e 	bl	80079c4 <SGP_MeasurementReady>
 8007aa8:	1e03      	subs	r3, r0, #0
 8007aaa:	d100      	bne.n	8007aae <SGP_GetMeasurementValues+0x96>
 8007aac:	e1ac      	b.n	8007e08 <SGP_GetMeasurementValues+0x3f0>
 8007aae:	4bbf      	ldr	r3, [pc, #764]	@ (8007dac <SGP_GetMeasurementValues+0x394>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	4053      	eors	r3, r2
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d100      	bne.n	8007abe <SGP_GetMeasurementValues+0xa6>
 8007abc:	e1a4      	b.n	8007e08 <SGP_GetMeasurementValues+0x3f0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8007abe:	4bbc      	ldr	r3, [pc, #752]	@ (8007db0 <SGP_GetMeasurementValues+0x398>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	4abb      	ldr	r2, [pc, #748]	@ (8007db4 <SGP_GetMeasurementValues+0x39c>)
 8007ac6:	49b4      	ldr	r1, [pc, #720]	@ (8007d98 <SGP_GetMeasurementValues+0x380>)
 8007ac8:	2003      	movs	r0, #3
 8007aca:	f001 f80d 	bl	8008ae8 <CreateLine>
    MeasurementIsReady = true;
 8007ace:	4bb7      	ldr	r3, [pc, #732]	@ (8007dac <SGP_GetMeasurementValues+0x394>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8007ad4:	4bb8      	ldr	r3, [pc, #736]	@ (8007db8 <SGP_GetMeasurementValues+0x3a0>)
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	0019      	movs	r1, r3
 8007ada:	2059      	movs	r0, #89	@ 0x59
 8007adc:	f7ff fed6 	bl	800788c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8007ae0:	4bb5      	ldr	r3, [pc, #724]	@ (8007db8 <SGP_GetMeasurementValues+0x3a0>)
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	2103      	movs	r1, #3
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f000 f9f4 	bl	8007ed4 <CheckCRC>
 8007aec:	0003      	movs	r3, r0
 8007aee:	001a      	movs	r2, r3
 8007af0:	2301      	movs	r3, #1
 8007af2:	4053      	eors	r3, r2
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d02a      	beq.n	8007b50 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8007afa:	4ab0      	ldr	r2, [pc, #704]	@ (8007dbc <SGP_GetMeasurementValues+0x3a4>)
 8007afc:	4bb0      	ldr	r3, [pc, #704]	@ (8007dc0 <SGP_GetMeasurementValues+0x3a8>)
 8007afe:	0019      	movs	r1, r3
 8007b00:	2001      	movs	r0, #1
 8007b02:	f000 fff1 	bl	8008ae8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8007b06:	4aaf      	ldr	r2, [pc, #700]	@ (8007dc4 <SGP_GetMeasurementValues+0x3ac>)
 8007b08:	4baf      	ldr	r3, [pc, #700]	@ (8007dc8 <SGP_GetMeasurementValues+0x3b0>)
 8007b0a:	0019      	movs	r1, r3
 8007b0c:	2002      	movs	r0, #2
 8007b0e:	f000 ffeb 	bl	8008ae8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007b12:	230f      	movs	r3, #15
 8007b14:	18fb      	adds	r3, r7, r3
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e012      	b.n	8007b42 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8007b1c:	240f      	movs	r4, #15
 8007b1e:	193b      	adds	r3, r7, r4
 8007b20:	7818      	ldrb	r0, [r3, #0]
 8007b22:	193b      	adds	r3, r7, r4
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	4aa4      	ldr	r2, [pc, #656]	@ (8007db8 <SGP_GetMeasurementValues+0x3a0>)
 8007b28:	5cd3      	ldrb	r3, [r2, r3]
 8007b2a:	4aa8      	ldr	r2, [pc, #672]	@ (8007dcc <SGP_GetMeasurementValues+0x3b4>)
 8007b2c:	499a      	ldr	r1, [pc, #616]	@ (8007d98 <SGP_GetMeasurementValues+0x380>)
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	0003      	movs	r3, r0
 8007b32:	2003      	movs	r0, #3
 8007b34:	f000 ffd8 	bl	8008ae8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007b38:	193b      	adds	r3, r7, r4
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	193b      	adds	r3, r7, r4
 8007b3e:	3201      	adds	r2, #1
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	230f      	movs	r3, #15
 8007b44:	18fb      	adds	r3, r7, r3
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d9e7      	bls.n	8007b1c <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	e173      	b.n	8007e38 <SGP_GetMeasurementValues+0x420>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8007b50:	f001 f856 	bl	8008c00 <GetCurrentHalTicks>
 8007b54:	0003      	movs	r3, r0
 8007b56:	22fa      	movs	r2, #250	@ 0xfa
 8007b58:	0092      	lsls	r2, r2, #2
 8007b5a:	189a      	adds	r2, r3, r2
 8007b5c:	4b9c      	ldr	r3, [pc, #624]	@ (8007dd0 <SGP_GetMeasurementValues+0x3b8>)
 8007b5e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8007b60:	f7ff ff4c 	bl	80079fc <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8007b64:	4b92      	ldr	r3, [pc, #584]	@ (8007db0 <SGP_GetMeasurementValues+0x398>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	4b90      	ldr	r3, [pc, #576]	@ (8007db0 <SGP_GetMeasurementValues+0x398>)
 8007b6e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8007b70:	4b8f      	ldr	r3, [pc, #572]	@ (8007db0 <SGP_GetMeasurementValues+0x398>)
 8007b72:	781a      	ldrb	r2, [r3, #0]
 8007b74:	4b97      	ldr	r3, [pc, #604]	@ (8007dd4 <SGP_GetMeasurementValues+0x3bc>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d200      	bcs.n	8007b7e <SGP_GetMeasurementValues+0x166>
 8007b7c:	e144      	b.n	8007e08 <SGP_GetMeasurementValues+0x3f0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8007b7e:	4b8e      	ldr	r3, [pc, #568]	@ (8007db8 <SGP_GetMeasurementValues+0x3a0>)
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	b21a      	sxth	r2, r3
 8007b86:	4b8c      	ldr	r3, [pc, #560]	@ (8007db8 <SGP_GetMeasurementValues+0x3a0>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b21b      	sxth	r3, r3
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	b21a      	sxth	r2, r3
 8007b90:	240c      	movs	r4, #12
 8007b92:	193b      	adds	r3, r7, r4
 8007b94:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8007b96:	193b      	adds	r3, r7, r4
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	4a8f      	ldr	r2, [pc, #572]	@ (8007dd8 <SGP_GetMeasurementValues+0x3c0>)
 8007b9c:	497e      	ldr	r1, [pc, #504]	@ (8007d98 <SGP_GetMeasurementValues+0x380>)
 8007b9e:	2003      	movs	r0, #3
 8007ba0:	f000 ffa2 	bl	8008ae8 <CreateLine>
      int32_t tempVocIndex = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8007ba8:	193b      	adds	r3, r7, r4
 8007baa:	8819      	ldrh	r1, [r3, #0]
 8007bac:	2308      	movs	r3, #8
 8007bae:	18fa      	adds	r2, r7, r3
 8007bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8007ddc <SGP_GetMeasurementValues+0x3c4>)
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f7ff f848 	bl	8006c48 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4a89      	ldr	r2, [pc, #548]	@ (8007de0 <SGP_GetMeasurementValues+0x3c8>)
 8007bbc:	4976      	ldr	r1, [pc, #472]	@ (8007d98 <SGP_GetMeasurementValues+0x380>)
 8007bbe:	2003      	movs	r0, #3
 8007bc0:	f000 ff92 	bl	8008ae8 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dd5d      	ble.n	8007c8e <SGP_GetMeasurementValues+0x276>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b64      	cmp	r3, #100	@ 0x64
 8007bd8:	dc59      	bgt.n	8007c8e <SGP_GetMeasurementValues+0x276>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	0018      	movs	r0, r3
 8007be0:	f7fb fb6c 	bl	80032bc <__aeabi_i2d>
 8007be4:	2200      	movs	r2, #0
 8007be6:	4b7f      	ldr	r3, [pc, #508]	@ (8007de4 <SGP_GetMeasurementValues+0x3cc>)
 8007be8:	f7fa f862 	bl	8001cb0 <__aeabi_ddiv>
 8007bec:	0002      	movs	r2, r0
 8007bee:	000b      	movs	r3, r1
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	497d      	ldr	r1, [pc, #500]	@ (8007de8 <SGP_GetMeasurementValues+0x3d0>)
 8007bf4:	f7fa ff68 	bl	8002ac8 <__aeabi_dsub>
 8007bf8:	0002      	movs	r2, r0
 8007bfa:	000b      	movs	r3, r1
 8007bfc:	0014      	movs	r4, r2
 8007bfe:	001d      	movs	r5, r3
 8007c00:	4b7a      	ldr	r3, [pc, #488]	@ (8007dec <SGP_GetMeasurementValues+0x3d4>)
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	0018      	movs	r0, r3
 8007c06:	f7fb fb59 	bl	80032bc <__aeabi_i2d>
 8007c0a:	0002      	movs	r2, r0
 8007c0c:	000b      	movs	r3, r1
 8007c0e:	0020      	movs	r0, r4
 8007c10:	0029      	movs	r1, r5
 8007c12:	f7fa fc91 	bl	8002538 <__aeabi_dmul>
 8007c16:	0002      	movs	r2, r0
 8007c18:	000b      	movs	r3, r1
 8007c1a:	0010      	movs	r0, r2
 8007c1c:	0019      	movs	r1, r3
 8007c1e:	f7f8 fce3 	bl	80005e8 <__aeabi_d2uiz>
 8007c22:	0003      	movs	r3, r0
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	4b72      	ldr	r3, [pc, #456]	@ (8007df0 <SGP_GetMeasurementValues+0x3d8>)
 8007c28:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f7fb fb44 	bl	80032bc <__aeabi_i2d>
 8007c34:	2200      	movs	r2, #0
 8007c36:	4b6b      	ldr	r3, [pc, #428]	@ (8007de4 <SGP_GetMeasurementValues+0x3cc>)
 8007c38:	f7fa f83a 	bl	8001cb0 <__aeabi_ddiv>
 8007c3c:	0002      	movs	r2, r0
 8007c3e:	000b      	movs	r3, r1
 8007c40:	0014      	movs	r4, r2
 8007c42:	001d      	movs	r5, r3
 8007c44:	4b69      	ldr	r3, [pc, #420]	@ (8007dec <SGP_GetMeasurementValues+0x3d4>)
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f7fb fb37 	bl	80032bc <__aeabi_i2d>
 8007c4e:	0002      	movs	r2, r0
 8007c50:	000b      	movs	r3, r1
 8007c52:	0020      	movs	r0, r4
 8007c54:	0029      	movs	r1, r5
 8007c56:	f7fa fc6f 	bl	8002538 <__aeabi_dmul>
 8007c5a:	0002      	movs	r2, r0
 8007c5c:	000b      	movs	r3, r1
 8007c5e:	0010      	movs	r0, r2
 8007c60:	0019      	movs	r1, r3
 8007c62:	f7f8 fcc1 	bl	80005e8 <__aeabi_d2uiz>
 8007c66:	0003      	movs	r3, r0
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	4b62      	ldr	r3, [pc, #392]	@ (8007df4 <SGP_GetMeasurementValues+0x3dc>)
 8007c6c:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8007c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8007dec <SGP_GetMeasurementValues+0x3d4>)
 8007c70:	881a      	ldrh	r2, [r3, #0]
 8007c72:	4b61      	ldr	r3, [pc, #388]	@ (8007df8 <SGP_GetMeasurementValues+0x3e0>)
 8007c74:	801a      	strh	r2, [r3, #0]
      TIM3->CCR1 = Red;
 8007c76:	4b60      	ldr	r3, [pc, #384]	@ (8007df8 <SGP_GetMeasurementValues+0x3e0>)
 8007c78:	881a      	ldrh	r2, [r3, #0]
 8007c7a:	4b60      	ldr	r3, [pc, #384]	@ (8007dfc <SGP_GetMeasurementValues+0x3e4>)
 8007c7c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3->CCR2 = Green;
 8007c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8007df0 <SGP_GetMeasurementValues+0x3d8>)
 8007c80:	881a      	ldrh	r2, [r3, #0]
 8007c82:	4b5e      	ldr	r3, [pc, #376]	@ (8007dfc <SGP_GetMeasurementValues+0x3e4>)
 8007c84:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3->CCR3 = Blue;
 8007c86:	4b5b      	ldr	r3, [pc, #364]	@ (8007df4 <SGP_GetMeasurementValues+0x3dc>)
 8007c88:	881a      	ldrh	r2, [r3, #0]
 8007c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8007dfc <SGP_GetMeasurementValues+0x3e4>)
 8007c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      if(*vocIndex > 100){
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b64      	cmp	r3, #100	@ 0x64
 8007c94:	dd69      	ble.n	8007d6a <SGP_GetMeasurementValues+0x352>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	f7fb fb0e 	bl	80032bc <__aeabi_i2d>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4b50      	ldr	r3, [pc, #320]	@ (8007de4 <SGP_GetMeasurementValues+0x3cc>)
 8007ca4:	f7fa ff10 	bl	8002ac8 <__aeabi_dsub>
 8007ca8:	0002      	movs	r2, r0
 8007caa:	000b      	movs	r3, r1
 8007cac:	0010      	movs	r0, r2
 8007cae:	0019      	movs	r1, r3
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4b53      	ldr	r3, [pc, #332]	@ (8007e00 <SGP_GetMeasurementValues+0x3e8>)
 8007cb4:	f7f9 fffc 	bl	8001cb0 <__aeabi_ddiv>
 8007cb8:	0002      	movs	r2, r0
 8007cba:	000b      	movs	r3, r1
 8007cbc:	0014      	movs	r4, r2
 8007cbe:	001d      	movs	r5, r3
 8007cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8007dec <SGP_GetMeasurementValues+0x3d4>)
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f7fb faf9 	bl	80032bc <__aeabi_i2d>
 8007cca:	0002      	movs	r2, r0
 8007ccc:	000b      	movs	r3, r1
 8007cce:	0020      	movs	r0, r4
 8007cd0:	0029      	movs	r1, r5
 8007cd2:	f7fa fc31 	bl	8002538 <__aeabi_dmul>
 8007cd6:	0002      	movs	r2, r0
 8007cd8:	000b      	movs	r3, r1
 8007cda:	0010      	movs	r0, r2
 8007cdc:	0019      	movs	r1, r3
 8007cde:	f7f8 fc83 	bl	80005e8 <__aeabi_d2uiz>
 8007ce2:	0003      	movs	r3, r0
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	4b42      	ldr	r3, [pc, #264]	@ (8007df0 <SGP_GetMeasurementValues+0x3d8>)
 8007ce8:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f7fb fae4 	bl	80032bc <__aeabi_i2d>
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8007de4 <SGP_GetMeasurementValues+0x3cc>)
 8007cf8:	f7fa fee6 	bl	8002ac8 <__aeabi_dsub>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	000b      	movs	r3, r1
 8007d00:	0010      	movs	r0, r2
 8007d02:	0019      	movs	r1, r3
 8007d04:	2200      	movs	r2, #0
 8007d06:	4b3e      	ldr	r3, [pc, #248]	@ (8007e00 <SGP_GetMeasurementValues+0x3e8>)
 8007d08:	f7f9 ffd2 	bl	8001cb0 <__aeabi_ddiv>
 8007d0c:	0002      	movs	r2, r0
 8007d0e:	000b      	movs	r3, r1
 8007d10:	2000      	movs	r0, #0
 8007d12:	4935      	ldr	r1, [pc, #212]	@ (8007de8 <SGP_GetMeasurementValues+0x3d0>)
 8007d14:	f7fa fed8 	bl	8002ac8 <__aeabi_dsub>
 8007d18:	0002      	movs	r2, r0
 8007d1a:	000b      	movs	r3, r1
 8007d1c:	0014      	movs	r4, r2
 8007d1e:	001d      	movs	r5, r3
 8007d20:	4b32      	ldr	r3, [pc, #200]	@ (8007dec <SGP_GetMeasurementValues+0x3d4>)
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	0018      	movs	r0, r3
 8007d26:	f7fb fac9 	bl	80032bc <__aeabi_i2d>
 8007d2a:	0002      	movs	r2, r0
 8007d2c:	000b      	movs	r3, r1
 8007d2e:	0020      	movs	r0, r4
 8007d30:	0029      	movs	r1, r5
 8007d32:	f7fa fc01 	bl	8002538 <__aeabi_dmul>
 8007d36:	0002      	movs	r2, r0
 8007d38:	000b      	movs	r3, r1
 8007d3a:	0010      	movs	r0, r2
 8007d3c:	0019      	movs	r1, r3
 8007d3e:	f7f8 fc53 	bl	80005e8 <__aeabi_d2uiz>
 8007d42:	0003      	movs	r3, r0
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	4b2c      	ldr	r3, [pc, #176]	@ (8007df8 <SGP_GetMeasurementValues+0x3e0>)
 8007d48:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8007d4a:	4b28      	ldr	r3, [pc, #160]	@ (8007dec <SGP_GetMeasurementValues+0x3d4>)
 8007d4c:	881a      	ldrh	r2, [r3, #0]
 8007d4e:	4b29      	ldr	r3, [pc, #164]	@ (8007df4 <SGP_GetMeasurementValues+0x3dc>)
 8007d50:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = Red;
 8007d52:	4b29      	ldr	r3, [pc, #164]	@ (8007df8 <SGP_GetMeasurementValues+0x3e0>)
 8007d54:	881a      	ldrh	r2, [r3, #0]
 8007d56:	4b29      	ldr	r3, [pc, #164]	@ (8007dfc <SGP_GetMeasurementValues+0x3e4>)
 8007d58:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = Green;
 8007d5a:	4b25      	ldr	r3, [pc, #148]	@ (8007df0 <SGP_GetMeasurementValues+0x3d8>)
 8007d5c:	881a      	ldrh	r2, [r3, #0]
 8007d5e:	4b27      	ldr	r3, [pc, #156]	@ (8007dfc <SGP_GetMeasurementValues+0x3e4>)
 8007d60:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = Blue;
 8007d62:	4b24      	ldr	r3, [pc, #144]	@ (8007df4 <SGP_GetMeasurementValues+0x3dc>)
 8007d64:	881a      	ldrh	r2, [r3, #0]
 8007d66:	4b25      	ldr	r3, [pc, #148]	@ (8007dfc <SGP_GetMeasurementValues+0x3e4>)
 8007d68:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      SGP_AmountOfSamplesDone = 0;
 8007d6a:	4b11      	ldr	r3, [pc, #68]	@ (8007db0 <SGP_GetMeasurementValues+0x398>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8007d70:	4a24      	ldr	r2, [pc, #144]	@ (8007e04 <SGP_GetMeasurementValues+0x3ec>)
 8007d72:	4b09      	ldr	r3, [pc, #36]	@ (8007d98 <SGP_GetMeasurementValues+0x380>)
 8007d74:	0019      	movs	r1, r3
 8007d76:	2003      	movs	r0, #3
 8007d78:	f000 feb6 	bl	8008ae8 <CreateLine>
      HT_MeasurementReceived = false;
 8007d7c:	4b07      	ldr	r3, [pc, #28]	@ (8007d9c <SGP_GetMeasurementValues+0x384>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8007d82:	4b03      	ldr	r3, [pc, #12]	@ (8007d90 <SGP_GetMeasurementValues+0x378>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e055      	b.n	8007e38 <SGP_GetMeasurementValues+0x420>
 8007d8c:	20002562 	.word	0x20002562
 8007d90:	2000260d 	.word	0x2000260d
 8007d94:	08019efc 	.word	0x08019efc
 8007d98:	08019f28 	.word	0x08019f28
 8007d9c:	2000260c 	.word	0x2000260c
 8007da0:	20000120 	.word	0x20000120
 8007da4:	20000134 	.word	0x20000134
 8007da8:	20000118 	.word	0x20000118
 8007dac:	20002563 	.word	0x20002563
 8007db0:	20002561 	.word	0x20002561
 8007db4:	08019f2c 	.word	0x08019f2c
 8007db8:	20002558 	.word	0x20002558
 8007dbc:	08019f5c 	.word	0x08019f5c
 8007dc0:	08019f80 	.word	0x08019f80
 8007dc4:	08019f84 	.word	0x08019f84
 8007dc8:	08019fa4 	.word	0x08019fa4
 8007dcc:	08019fa8 	.word	0x08019fa8
 8007dd0:	20000130 	.word	0x20000130
 8007dd4:	20000128 	.word	0x20000128
 8007dd8:	08019fc8 	.word	0x08019fc8
 8007ddc:	20002564 	.word	0x20002564
 8007de0:	08019fdc 	.word	0x08019fdc
 8007de4:	40590000 	.word	0x40590000
 8007de8:	3ff00000 	.word	0x3ff00000
 8007dec:	20000138 	.word	0x20000138
 8007df0:	20002612 	.word	0x20002612
 8007df4:	20002610 	.word	0x20002610
 8007df8:	2000260e 	.word	0x2000260e
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40790000 	.word	0x40790000
 8007e04:	08019ff0 	.word	0x08019ff0
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007e08:	f7ff fdea 	bl	80079e0 <SGP_MeasurementDone>
 8007e0c:	1e03      	subs	r3, r0, #0
 8007e0e:	d012      	beq.n	8007e36 <SGP_GetMeasurementValues+0x41e>
 8007e10:	4b0b      	ldr	r3, [pc, #44]	@ (8007e40 <SGP_GetMeasurementValues+0x428>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00e      	beq.n	8007e36 <SGP_GetMeasurementValues+0x41e>
 8007e18:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <SGP_GetMeasurementValues+0x42c>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <SGP_GetMeasurementValues+0x41e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8007e20:	4a09      	ldr	r2, [pc, #36]	@ (8007e48 <SGP_GetMeasurementValues+0x430>)
 8007e22:	4b0a      	ldr	r3, [pc, #40]	@ (8007e4c <SGP_GetMeasurementValues+0x434>)
 8007e24:	0019      	movs	r1, r3
 8007e26:	2003      	movs	r0, #3
 8007e28:	f000 fe5e 	bl	8008ae8 <CreateLine>
    SGP_StartMeasurement();
 8007e2c:	f7ff fd84 	bl	8007938 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8007e30:	4b07      	ldr	r3, [pc, #28]	@ (8007e50 <SGP_GetMeasurementValues+0x438>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	0018      	movs	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b004      	add	sp, #16
 8007e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e40:	20002562 	.word	0x20002562
 8007e44:	20002563 	.word	0x20002563
 8007e48:	0801a014 	.word	0x0801a014
 8007e4c:	08019f28 	.word	0x08019f28
 8007e50:	2000260d 	.word	0x2000260d

08007e54 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec4 <SGP_DeviceConnected+0x70>)
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	0019      	movs	r1, r3
 8007e60:	2059      	movs	r0, #89	@ 0x59
 8007e62:	f7ff fd31 	bl	80078c8 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8007e66:	2001      	movs	r0, #1
 8007e68:	f001 fa40 	bl	80092ec <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8007e6c:	4b16      	ldr	r3, [pc, #88]	@ (8007ec8 <SGP_DeviceConnected+0x74>)
 8007e6e:	2209      	movs	r2, #9
 8007e70:	0019      	movs	r1, r3
 8007e72:	2059      	movs	r0, #89	@ 0x59
 8007e74:	f7ff fd0a 	bl	800788c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007e78:	1dfb      	adds	r3, r7, #7
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e011      	b.n	8007ea4 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8007e80:	1dfb      	adds	r3, r7, #7
 8007e82:	7818      	ldrb	r0, [r3, #0]
 8007e84:	1dfb      	adds	r3, r7, #7
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	4a0f      	ldr	r2, [pc, #60]	@ (8007ec8 <SGP_DeviceConnected+0x74>)
 8007e8a:	5cd3      	ldrb	r3, [r2, r3]
 8007e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8007ecc <SGP_DeviceConnected+0x78>)
 8007e8e:	4910      	ldr	r1, [pc, #64]	@ (8007ed0 <SGP_DeviceConnected+0x7c>)
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	0003      	movs	r3, r0
 8007e94:	2002      	movs	r0, #2
 8007e96:	f000 fe27 	bl	8008ae8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007e9a:	1dfb      	adds	r3, r7, #7
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	1dfb      	adds	r3, r7, #7
 8007ea0:	3201      	adds	r2, #1
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	1dfb      	adds	r3, r7, #7
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d9e9      	bls.n	8007e80 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8007eac:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <SGP_DeviceConnected+0x74>)
 8007eae:	2203      	movs	r2, #3
 8007eb0:	2109      	movs	r1, #9
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f000 f80e 	bl	8007ed4 <CheckCRC>
 8007eb8:	0003      	movs	r3, r0
}
 8007eba:	0018      	movs	r0, r3
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b002      	add	sp, #8
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	46c0      	nop			@ (mov r8, r8)
 8007ec4:	20000114 	.word	0x20000114
 8007ec8:	20002558 	.word	0x20002558
 8007ecc:	0801a034 	.word	0x0801a034
 8007ed0:	08019fa4 	.word	0x08019fa4

08007ed4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8007ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed6:	b08f      	sub	sp, #60	@ 0x3c
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6278      	str	r0, [r7, #36]	@ 0x24
 8007edc:	0008      	movs	r0, r1
 8007ede:	0011      	movs	r1, r2
 8007ee0:	2323      	movs	r3, #35	@ 0x23
 8007ee2:	18fb      	adds	r3, r7, r3
 8007ee4:	1c02      	adds	r2, r0, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	2322      	movs	r3, #34	@ 0x22
 8007eea:	18fb      	adds	r3, r7, r3
 8007eec:	1c0a      	adds	r2, r1, #0
 8007eee:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007ef0:	2317      	movs	r3, #23
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	189b      	adds	r3, r3, r2
 8007ef6:	19db      	adds	r3, r3, r7
 8007ef8:	2200      	movs	r2, #0
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e09f      	b.n	800803e <CheckCRC+0x16a>
 8007efe:	466b      	mov	r3, sp
 8007f00:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8007f02:	2322      	movs	r3, #34	@ 0x22
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	001a      	movs	r2, r3
 8007f0a:	3a01      	subs	r2, #1
 8007f0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f0e:	60bb      	str	r3, [r7, #8]
 8007f10:	2200      	movs	r2, #0
 8007f12:	60fa      	str	r2, [r7, #12]
 8007f14:	68b8      	ldr	r0, [r7, #8]
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	0002      	movs	r2, r0
 8007f1a:	0f52      	lsrs	r2, r2, #29
 8007f1c:	000c      	movs	r4, r1
 8007f1e:	00e4      	lsls	r4, r4, #3
 8007f20:	61fc      	str	r4, [r7, #28]
 8007f22:	69fc      	ldr	r4, [r7, #28]
 8007f24:	4314      	orrs	r4, r2
 8007f26:	61fc      	str	r4, [r7, #28]
 8007f28:	0002      	movs	r2, r0
 8007f2a:	00d2      	lsls	r2, r2, #3
 8007f2c:	61ba      	str	r2, [r7, #24]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	2200      	movs	r2, #0
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	6838      	ldr	r0, [r7, #0]
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	0002      	movs	r2, r0
 8007f3a:	0f52      	lsrs	r2, r2, #29
 8007f3c:	000c      	movs	r4, r1
 8007f3e:	00e4      	lsls	r4, r4, #3
 8007f40:	617c      	str	r4, [r7, #20]
 8007f42:	697c      	ldr	r4, [r7, #20]
 8007f44:	4314      	orrs	r4, r2
 8007f46:	617c      	str	r4, [r7, #20]
 8007f48:	0002      	movs	r2, r0
 8007f4a:	00d2      	lsls	r2, r2, #3
 8007f4c:	613a      	str	r2, [r7, #16]
 8007f4e:	3307      	adds	r3, #7
 8007f50:	08db      	lsrs	r3, r3, #3
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	466a      	mov	r2, sp
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	469d      	mov	sp, r3
 8007f5a:	466b      	mov	r3, sp
 8007f5c:	3300      	adds	r3, #0
 8007f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8007f60:	2316      	movs	r3, #22
 8007f62:	2220      	movs	r2, #32
 8007f64:	189b      	adds	r3, r3, r2
 8007f66:	19db      	adds	r3, r3, r7
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	e01e      	b.n	8007fac <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8007f6e:	2317      	movs	r3, #23
 8007f70:	2220      	movs	r2, #32
 8007f72:	189b      	adds	r3, r3, r2
 8007f74:	19db      	adds	r3, r3, r7
 8007f76:	781a      	ldrb	r2, [r3, #0]
 8007f78:	2116      	movs	r1, #22
 8007f7a:	2320      	movs	r3, #32
 8007f7c:	18cb      	adds	r3, r1, r3
 8007f7e:	19db      	adds	r3, r3, r7
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	18d3      	adds	r3, r2, r3
 8007f84:	001a      	movs	r2, r3
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	189a      	adds	r2, r3, r2
 8007f8a:	0008      	movs	r0, r1
 8007f8c:	2320      	movs	r3, #32
 8007f8e:	18cb      	adds	r3, r1, r3
 8007f90:	19db      	adds	r3, r3, r7
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	7811      	ldrb	r1, [r2, #0]
 8007f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f98:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8007f9a:	2320      	movs	r3, #32
 8007f9c:	18c3      	adds	r3, r0, r3
 8007f9e:	19db      	adds	r3, r3, r7
 8007fa0:	781a      	ldrb	r2, [r3, #0]
 8007fa2:	2320      	movs	r3, #32
 8007fa4:	18c3      	adds	r3, r0, r3
 8007fa6:	19db      	adds	r3, r3, r7
 8007fa8:	3201      	adds	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	2316      	movs	r3, #22
 8007fae:	2220      	movs	r2, #32
 8007fb0:	189b      	adds	r3, r3, r2
 8007fb2:	19da      	adds	r2, r3, r7
 8007fb4:	2322      	movs	r3, #34	@ 0x22
 8007fb6:	18fb      	adds	r3, r7, r3
 8007fb8:	7812      	ldrb	r2, [r2, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d3d6      	bcc.n	8007f6e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8007fc0:	2417      	movs	r4, #23
 8007fc2:	2320      	movs	r3, #32
 8007fc4:	18e3      	adds	r3, r4, r3
 8007fc6:	19db      	adds	r3, r3, r7
 8007fc8:	781a      	ldrb	r2, [r3, #0]
 8007fca:	2322      	movs	r3, #34	@ 0x22
 8007fcc:	18fb      	adds	r3, r7, r3
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	18d3      	adds	r3, r2, r3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd6:	18d2      	adds	r2, r2, r3
 8007fd8:	250b      	movs	r5, #11
 8007fda:	2320      	movs	r3, #32
 8007fdc:	18eb      	adds	r3, r5, r3
 8007fde:	19db      	adds	r3, r3, r7
 8007fe0:	7812      	ldrb	r2, [r2, #0]
 8007fe2:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8007fe4:	2322      	movs	r3, #34	@ 0x22
 8007fe6:	18fb      	adds	r3, r7, r3
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff0:	0011      	movs	r1, r2
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	f000 f838 	bl	8008068 <CalculateCRC>
 8007ff8:	0003      	movs	r3, r0
 8007ffa:	001a      	movs	r2, r3
 8007ffc:	2320      	movs	r3, #32
 8007ffe:	18eb      	adds	r3, r5, r3
 8008000:	19db      	adds	r3, r3, r7
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	4293      	cmp	r3, r2
 8008006:	d00c      	beq.n	8008022 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008008:	2320      	movs	r3, #32
 800800a:	18e3      	adds	r3, r4, r3
 800800c:	19db      	adds	r3, r3, r7
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	4a13      	ldr	r2, [pc, #76]	@ (8008060 <CheckCRC+0x18c>)
 8008014:	4913      	ldr	r1, [pc, #76]	@ (8008064 <CheckCRC+0x190>)
 8008016:	2001      	movs	r0, #1
 8008018:	f000 fd66 	bl	8008ae8 <CreateLine>
      return false;
 800801c:	2300      	movs	r3, #0
 800801e:	46b5      	mov	sp, r6
 8008020:	e019      	b.n	8008056 <CheckCRC+0x182>
 8008022:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008024:	2217      	movs	r2, #23
 8008026:	2320      	movs	r3, #32
 8008028:	18d3      	adds	r3, r2, r3
 800802a:	19db      	adds	r3, r3, r7
 800802c:	2120      	movs	r1, #32
 800802e:	1852      	adds	r2, r2, r1
 8008030:	19d1      	adds	r1, r2, r7
 8008032:	2222      	movs	r2, #34	@ 0x22
 8008034:	18ba      	adds	r2, r7, r2
 8008036:	7809      	ldrb	r1, [r1, #0]
 8008038:	7812      	ldrb	r2, [r2, #0]
 800803a:	188a      	adds	r2, r1, r2
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	2317      	movs	r3, #23
 8008040:	2220      	movs	r2, #32
 8008042:	189b      	adds	r3, r3, r2
 8008044:	19da      	adds	r2, r3, r7
 8008046:	2323      	movs	r3, #35	@ 0x23
 8008048:	18fb      	adds	r3, r7, r3
 800804a:	7812      	ldrb	r2, [r2, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	429a      	cmp	r2, r3
 8008050:	d200      	bcs.n	8008054 <CheckCRC+0x180>
 8008052:	e754      	b.n	8007efe <CheckCRC+0x2a>
    }
  }
  return true;
 8008054:	2301      	movs	r3, #1
}
 8008056:	0018      	movs	r0, r3
 8008058:	46bd      	mov	sp, r7
 800805a:	b00f      	add	sp, #60	@ 0x3c
 800805c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800805e:	46c0      	nop			@ (mov r8, r8)
 8008060:	0801a054 	.word	0x0801a054
 8008064:	08019f80 	.word	0x08019f80

08008068 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	000a      	movs	r2, r1
 8008072:	1cfb      	adds	r3, r7, #3
 8008074:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008076:	230f      	movs	r3, #15
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	22ff      	movs	r2, #255	@ 0xff
 800807c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800807e:	230e      	movs	r3, #14
 8008080:	18fb      	adds	r3, r7, r3
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	e037      	b.n	80080f8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008088:	230e      	movs	r3, #14
 800808a:	18fb      	adds	r3, r7, r3
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	18d3      	adds	r3, r2, r3
 8008092:	7819      	ldrb	r1, [r3, #0]
 8008094:	220f      	movs	r2, #15
 8008096:	18bb      	adds	r3, r7, r2
 8008098:	18ba      	adds	r2, r7, r2
 800809a:	7812      	ldrb	r2, [r2, #0]
 800809c:	404a      	eors	r2, r1
 800809e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80080a0:	230d      	movs	r3, #13
 80080a2:	18fb      	adds	r3, r7, r3
 80080a4:	2200      	movs	r2, #0
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	e01b      	b.n	80080e2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80080aa:	210f      	movs	r1, #15
 80080ac:	187b      	adds	r3, r7, r1
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	b25b      	sxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	da09      	bge.n	80080ca <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80080b6:	187b      	adds	r3, r7, r1
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	b25b      	sxtb	r3, r3
 80080be:	2231      	movs	r2, #49	@ 0x31
 80080c0:	4053      	eors	r3, r2
 80080c2:	b25a      	sxtb	r2, r3
 80080c4:	187b      	adds	r3, r7, r1
 80080c6:	701a      	strb	r2, [r3, #0]
 80080c8:	e005      	b.n	80080d6 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80080ca:	230f      	movs	r3, #15
 80080cc:	18fa      	adds	r2, r7, r3
 80080ce:	18fb      	adds	r3, r7, r3
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	18db      	adds	r3, r3, r3
 80080d4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80080d6:	210d      	movs	r1, #13
 80080d8:	187b      	adds	r3, r7, r1
 80080da:	781a      	ldrb	r2, [r3, #0]
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	3201      	adds	r2, #1
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	230d      	movs	r3, #13
 80080e4:	18fb      	adds	r3, r7, r3
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b07      	cmp	r3, #7
 80080ea:	d9de      	bls.n	80080aa <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80080ec:	210e      	movs	r1, #14
 80080ee:	187b      	adds	r3, r7, r1
 80080f0:	781a      	ldrb	r2, [r3, #0]
 80080f2:	187b      	adds	r3, r7, r1
 80080f4:	3201      	adds	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	230e      	movs	r3, #14
 80080fa:	18fa      	adds	r2, r7, r3
 80080fc:	1cfb      	adds	r3, r7, #3
 80080fe:	7812      	ldrb	r2, [r2, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d3c0      	bcc.n	8008088 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008106:	230f      	movs	r3, #15
 8008108:	18fb      	adds	r3, r7, r3
 800810a:	781b      	ldrb	r3, [r3, #0]
}
 800810c:	0018      	movs	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	b004      	add	sp, #16
 8008112:	bd80      	pop	{r7, pc}

08008114 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4936      	ldr	r1, [pc, #216]	@ (80081fc <SGP_GetHT+0xe8>)
 8008124:	1c18      	adds	r0, r3, #0
 8008126:	f7f8 fb49 	bl	80007bc <__aeabi_fadd>
 800812a:	1c03      	adds	r3, r0, #0
 800812c:	4934      	ldr	r1, [pc, #208]	@ (8008200 <SGP_GetHT+0xec>)
 800812e:	1c18      	adds	r0, r3, #0
 8008130:	f7f8 fcce 	bl	8000ad0 <__aeabi_fdiv>
 8008134:	1c03      	adds	r3, r0, #0
 8008136:	4933      	ldr	r1, [pc, #204]	@ (8008204 <SGP_GetHT+0xf0>)
 8008138:	1c18      	adds	r0, r3, #0
 800813a:	f7f8 feaf 	bl	8000e9c <__aeabi_fmul>
 800813e:	1c03      	adds	r3, r0, #0
 8008140:	1c18      	adds	r0, r3, #0
 8008142:	f7f8 fa39 	bl	80005b8 <__aeabi_f2uiz>
 8008146:	0003      	movs	r3, r0
 8008148:	b29a      	uxth	r2, r3
 800814a:	4b2f      	ldr	r3, [pc, #188]	@ (8008208 <SGP_GetHT+0xf4>)
 800814c:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	492e      	ldr	r1, [pc, #184]	@ (800820c <SGP_GetHT+0xf8>)
 8008154:	1c18      	adds	r0, r3, #0
 8008156:	f7f8 fcbb 	bl	8000ad0 <__aeabi_fdiv>
 800815a:	1c03      	adds	r3, r0, #0
 800815c:	4929      	ldr	r1, [pc, #164]	@ (8008204 <SGP_GetHT+0xf0>)
 800815e:	1c18      	adds	r0, r3, #0
 8008160:	f7f8 fe9c 	bl	8000e9c <__aeabi_fmul>
 8008164:	1c03      	adds	r3, r0, #0
 8008166:	1c18      	adds	r0, r3, #0
 8008168:	f7f8 fa26 	bl	80005b8 <__aeabi_f2uiz>
 800816c:	0003      	movs	r3, r0
 800816e:	b29a      	uxth	r2, r3
 8008170:	4b27      	ldr	r3, [pc, #156]	@ (8008210 <SGP_GetHT+0xfc>)
 8008172:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008174:	4b26      	ldr	r3, [pc, #152]	@ (8008210 <SGP_GetHT+0xfc>)
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	b29b      	uxth	r3, r3
 800817c:	b2da      	uxtb	r2, r3
 800817e:	4b25      	ldr	r3, [pc, #148]	@ (8008214 <SGP_GetHT+0x100>)
 8008180:	709a      	strb	r2, [r3, #2]
 8008182:	4b24      	ldr	r3, [pc, #144]	@ (8008214 <SGP_GetHT+0x100>)
 8008184:	789a      	ldrb	r2, [r3, #2]
 8008186:	210c      	movs	r1, #12
 8008188:	187b      	adds	r3, r7, r1
 800818a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800818c:	4b20      	ldr	r3, [pc, #128]	@ (8008210 <SGP_GetHT+0xfc>)
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b2da      	uxtb	r2, r3
 8008192:	4b20      	ldr	r3, [pc, #128]	@ (8008214 <SGP_GetHT+0x100>)
 8008194:	70da      	strb	r2, [r3, #3]
 8008196:	4b1f      	ldr	r3, [pc, #124]	@ (8008214 <SGP_GetHT+0x100>)
 8008198:	78da      	ldrb	r2, [r3, #3]
 800819a:	187b      	adds	r3, r7, r1
 800819c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800819e:	187b      	adds	r3, r7, r1
 80081a0:	2102      	movs	r1, #2
 80081a2:	0018      	movs	r0, r3
 80081a4:	f7ff ff60 	bl	8008068 <CalculateCRC>
 80081a8:	0003      	movs	r3, r0
 80081aa:	001a      	movs	r2, r3
 80081ac:	4b19      	ldr	r3, [pc, #100]	@ (8008214 <SGP_GetHT+0x100>)
 80081ae:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80081b0:	4b15      	ldr	r3, [pc, #84]	@ (8008208 <SGP_GetHT+0xf4>)
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	0a1b      	lsrs	r3, r3, #8
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	4b16      	ldr	r3, [pc, #88]	@ (8008214 <SGP_GetHT+0x100>)
 80081bc:	715a      	strb	r2, [r3, #5]
 80081be:	4b15      	ldr	r3, [pc, #84]	@ (8008214 <SGP_GetHT+0x100>)
 80081c0:	795a      	ldrb	r2, [r3, #5]
 80081c2:	2108      	movs	r1, #8
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80081c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008208 <SGP_GetHT+0xf4>)
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	4b11      	ldr	r3, [pc, #68]	@ (8008214 <SGP_GetHT+0x100>)
 80081d0:	719a      	strb	r2, [r3, #6]
 80081d2:	4b10      	ldr	r3, [pc, #64]	@ (8008214 <SGP_GetHT+0x100>)
 80081d4:	799a      	ldrb	r2, [r3, #6]
 80081d6:	187b      	adds	r3, r7, r1
 80081d8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80081da:	187b      	adds	r3, r7, r1
 80081dc:	2102      	movs	r1, #2
 80081de:	0018      	movs	r0, r3
 80081e0:	f7ff ff42 	bl	8008068 <CalculateCRC>
 80081e4:	0003      	movs	r3, r0
 80081e6:	001a      	movs	r2, r3
 80081e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008214 <SGP_GetHT+0x100>)
 80081ea:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80081ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008218 <SGP_GetHT+0x104>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	701a      	strb	r2, [r3, #0]
}
 80081f2:	46c0      	nop			@ (mov r8, r8)
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b004      	add	sp, #16
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	42340000 	.word	0x42340000
 8008200:	432f0000 	.word	0x432f0000
 8008204:	477fff00 	.word	0x477fff00
 8008208:	2000260a 	.word	0x2000260a
 800820c:	42c80000 	.word	0x42c80000
 8008210:	20002608 	.word	0x20002608
 8008214:	20000120 	.word	0x20000120
 8008218:	2000260c 	.word	0x2000260c

0800821c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008220:	4b07      	ldr	r3, [pc, #28]	@ (8008240 <HAL_MspInit+0x24>)
 8008222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008224:	4b06      	ldr	r3, [pc, #24]	@ (8008240 <HAL_MspInit+0x24>)
 8008226:	2101      	movs	r1, #1
 8008228:	430a      	orrs	r2, r1
 800822a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800822c:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <HAL_MspInit+0x24>)
 800822e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008230:	4b03      	ldr	r3, [pc, #12]	@ (8008240 <HAL_MspInit+0x24>)
 8008232:	2180      	movs	r1, #128	@ 0x80
 8008234:	0549      	lsls	r1, r1, #21
 8008236:	430a      	orrs	r2, r1
 8008238:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800823a:	46c0      	nop			@ (mov r8, r8)
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	40021000 	.word	0x40021000

08008244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008248:	46c0      	nop			@ (mov r8, r8)
 800824a:	e7fd      	b.n	8008248 <NMI_Handler+0x4>

0800824c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008250:	46c0      	nop			@ (mov r8, r8)
 8008252:	e7fd      	b.n	8008250 <HardFault_Handler+0x4>

08008254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008258:	46c0      	nop			@ (mov r8, r8)
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008262:	46c0      	nop			@ (mov r8, r8)
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800826c:	f001 f822 	bl	80092b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008270:	46c0      	nop			@ (mov r8, r8)
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800827c:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800827e:	0018      	movs	r0, r3
 8008280:	f001 fe95 	bl	8009fae <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008284:	4b04      	ldr	r3, [pc, #16]	@ (8008298 <DMA1_Channel2_3_IRQHandler+0x20>)
 8008286:	0018      	movs	r0, r3
 8008288:	f001 fe91 	bl	8009fae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800828c:	46c0      	nop			@ (mov r8, r8)
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	46c0      	nop			@ (mov r8, r8)
 8008294:	20000bec 	.word	0x20000bec
 8008298:	20000ba4 	.word	0x20000ba4

0800829c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80082a0:	4b07      	ldr	r3, [pc, #28]	@ (80082c0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80082a2:	0018      	movs	r0, r3
 80082a4:	f001 fe83 	bl	8009fae <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80082a8:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80082aa:	0018      	movs	r0, r3
 80082ac:	f001 fe7f 	bl	8009fae <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80082b0:	4b05      	ldr	r3, [pc, #20]	@ (80082c8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80082b2:	0018      	movs	r0, r3
 80082b4:	f001 fe7b 	bl	8009fae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80082b8:	46c0      	nop			@ (mov r8, r8)
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	46c0      	nop			@ (mov r8, r8)
 80082c0:	20000c70 	.word	0x20000c70
 80082c4:	20002808 	.word	0x20002808
 80082c8:	20002850 	.word	0x20002850

080082cc <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80082d0:	4b03      	ldr	r3, [pc, #12]	@ (80082e0 <USART4_5_IRQHandler+0x14>)
 80082d2:	0018      	movs	r0, r3
 80082d4:	f008 f864 	bl	80103a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80082d8:	46c0      	nop			@ (mov r8, r8)
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	46c0      	nop			@ (mov r8, r8)
 80082e0:	20002750 	.word	0x20002750

080082e4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80082e8:	4b09      	ldr	r3, [pc, #36]	@ (8008310 <I2C1_IRQHandler+0x2c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	23e0      	movs	r3, #224	@ 0xe0
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	4013      	ands	r3, r2
 80082f4:	d004      	beq.n	8008300 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80082f6:	4b06      	ldr	r3, [pc, #24]	@ (8008310 <I2C1_IRQHandler+0x2c>)
 80082f8:	0018      	movs	r0, r3
 80082fa:	f002 fc7b 	bl	800abf4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80082fe:	e003      	b.n	8008308 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008300:	4b03      	ldr	r3, [pc, #12]	@ (8008310 <I2C1_IRQHandler+0x2c>)
 8008302:	0018      	movs	r0, r3
 8008304:	f002 fc5c 	bl	800abc0 <HAL_I2C_EV_IRQHandler>
}
 8008308:	46c0      	nop			@ (mov r8, r8)
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	46c0      	nop			@ (mov r8, r8)
 8008310:	20000afc 	.word	0x20000afc

08008314 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008318:	4b03      	ldr	r3, [pc, #12]	@ (8008328 <USB_IRQHandler+0x14>)
 800831a:	0018      	movs	r0, r3
 800831c:	f004 fe32 	bl	800cf84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8008320:	46c0      	nop			@ (mov r8, r8)
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	20003d80 	.word	0x20003d80

0800832c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  return 1;
 8008330:	2301      	movs	r3, #1
}
 8008332:	0018      	movs	r0, r3
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_kill>:

int _kill(int pid, int sig)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008342:	f00e fc15 	bl	8016b70 <__errno>
 8008346:	0003      	movs	r3, r0
 8008348:	2216      	movs	r2, #22
 800834a:	601a      	str	r2, [r3, #0]
  return -1;
 800834c:	2301      	movs	r3, #1
 800834e:	425b      	negs	r3, r3
}
 8008350:	0018      	movs	r0, r3
 8008352:	46bd      	mov	sp, r7
 8008354:	b002      	add	sp, #8
 8008356:	bd80      	pop	{r7, pc}

08008358 <_exit>:

void _exit (int status)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008360:	2301      	movs	r3, #1
 8008362:	425a      	negs	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	0011      	movs	r1, r2
 8008368:	0018      	movs	r0, r3
 800836a:	f7ff ffe5 	bl	8008338 <_kill>
  while (1) {}    /* Make sure we hang here */
 800836e:	46c0      	nop			@ (mov r8, r8)
 8008370:	e7fd      	b.n	800836e <_exit+0x16>

08008372 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b086      	sub	sp, #24
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e00a      	b.n	800839a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008384:	e000      	b.n	8008388 <_read+0x16>
 8008386:	bf00      	nop
 8008388:	0001      	movs	r1, r0
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	60ba      	str	r2, [r7, #8]
 8008390:	b2ca      	uxtb	r2, r1
 8008392:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	3301      	adds	r3, #1
 8008398:	617b      	str	r3, [r7, #20]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	429a      	cmp	r2, r3
 80083a0:	dbf0      	blt.n	8008384 <_read+0x12>
  }

  return len;
 80083a2:	687b      	ldr	r3, [r7, #4]
}
 80083a4:	0018      	movs	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b006      	add	sp, #24
 80083aa:	bd80      	pop	{r7, pc}

080083ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80083b4:	2301      	movs	r3, #1
 80083b6:	425b      	negs	r3, r3
}
 80083b8:	0018      	movs	r0, r3
 80083ba:	46bd      	mov	sp, r7
 80083bc:	b002      	add	sp, #8
 80083be:	bd80      	pop	{r7, pc}

080083c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2280      	movs	r2, #128	@ 0x80
 80083ce:	0192      	lsls	r2, r2, #6
 80083d0:	605a      	str	r2, [r3, #4]
  return 0;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	0018      	movs	r0, r3
 80083d6:	46bd      	mov	sp, r7
 80083d8:	b002      	add	sp, #8
 80083da:	bd80      	pop	{r7, pc}

080083dc <_isatty>:

int _isatty(int file)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80083e4:	2301      	movs	r3, #1
}
 80083e6:	0018      	movs	r0, r3
 80083e8:	46bd      	mov	sp, r7
 80083ea:	b002      	add	sp, #8
 80083ec:	bd80      	pop	{r7, pc}

080083ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	60b9      	str	r1, [r7, #8]
 80083f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	0018      	movs	r0, r3
 80083fe:	46bd      	mov	sp, r7
 8008400:	b004      	add	sp, #16
 8008402:	bd80      	pop	{r7, pc}

08008404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800840c:	4a14      	ldr	r2, [pc, #80]	@ (8008460 <_sbrk+0x5c>)
 800840e:	4b15      	ldr	r3, [pc, #84]	@ (8008464 <_sbrk+0x60>)
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008418:	4b13      	ldr	r3, [pc, #76]	@ (8008468 <_sbrk+0x64>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008420:	4b11      	ldr	r3, [pc, #68]	@ (8008468 <_sbrk+0x64>)
 8008422:	4a12      	ldr	r2, [pc, #72]	@ (800846c <_sbrk+0x68>)
 8008424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008426:	4b10      	ldr	r3, [pc, #64]	@ (8008468 <_sbrk+0x64>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	18d3      	adds	r3, r2, r3
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	429a      	cmp	r2, r3
 8008432:	d207      	bcs.n	8008444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008434:	f00e fb9c 	bl	8016b70 <__errno>
 8008438:	0003      	movs	r3, r0
 800843a:	220c      	movs	r2, #12
 800843c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800843e:	2301      	movs	r3, #1
 8008440:	425b      	negs	r3, r3
 8008442:	e009      	b.n	8008458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008444:	4b08      	ldr	r3, [pc, #32]	@ (8008468 <_sbrk+0x64>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800844a:	4b07      	ldr	r3, [pc, #28]	@ (8008468 <_sbrk+0x64>)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	18d2      	adds	r2, r2, r3
 8008452:	4b05      	ldr	r3, [pc, #20]	@ (8008468 <_sbrk+0x64>)
 8008454:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008456:	68fb      	ldr	r3, [r7, #12]
}
 8008458:	0018      	movs	r0, r3
 800845a:	46bd      	mov	sp, r7
 800845c:	b006      	add	sp, #24
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20005000 	.word	0x20005000
 8008464:	00000400 	.word	0x00000400
 8008468:	20002614 	.word	0x20002614
 800846c:	200043e0 	.word	0x200043e0

08008470 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008474:	46c0      	nop			@ (mov r8, r8)
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
	...

0800847c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008482:	2310      	movs	r3, #16
 8008484:	18fb      	adds	r3, r7, r3
 8008486:	0018      	movs	r0, r3
 8008488:	2308      	movs	r3, #8
 800848a:	001a      	movs	r2, r3
 800848c:	2100      	movs	r1, #0
 800848e:	f00e faeb 	bl	8016a68 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008492:	003b      	movs	r3, r7
 8008494:	0018      	movs	r0, r3
 8008496:	2310      	movs	r3, #16
 8008498:	001a      	movs	r2, r3
 800849a:	2100      	movs	r1, #0
 800849c:	f00e fae4 	bl	8016a68 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80084a0:	4b2e      	ldr	r3, [pc, #184]	@ (800855c <MX_TIM2_Init+0xe0>)
 80084a2:	2280      	movs	r2, #128	@ 0x80
 80084a4:	05d2      	lsls	r2, r2, #23
 80084a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80084a8:	4b2c      	ldr	r3, [pc, #176]	@ (800855c <MX_TIM2_Init+0xe0>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084ae:	4b2b      	ldr	r3, [pc, #172]	@ (800855c <MX_TIM2_Init+0xe0>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80084b4:	4b29      	ldr	r3, [pc, #164]	@ (800855c <MX_TIM2_Init+0xe0>)
 80084b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008560 <MX_TIM2_Init+0xe4>)
 80084b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084ba:	4b28      	ldr	r3, [pc, #160]	@ (800855c <MX_TIM2_Init+0xe0>)
 80084bc:	2200      	movs	r2, #0
 80084be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084c0:	4b26      	ldr	r3, [pc, #152]	@ (800855c <MX_TIM2_Init+0xe0>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80084c6:	4b25      	ldr	r3, [pc, #148]	@ (800855c <MX_TIM2_Init+0xe0>)
 80084c8:	0018      	movs	r0, r3
 80084ca:	f007 f9db 	bl	800f884 <HAL_TIM_PWM_Init>
 80084ce:	1e03      	subs	r3, r0, #0
 80084d0:	d001      	beq.n	80084d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80084d2:	f7fd fb35 	bl	8005b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80084d6:	2110      	movs	r1, #16
 80084d8:	187b      	adds	r3, r7, r1
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084de:	187b      	adds	r3, r7, r1
 80084e0:	2200      	movs	r2, #0
 80084e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80084e4:	187a      	adds	r2, r7, r1
 80084e6:	4b1d      	ldr	r3, [pc, #116]	@ (800855c <MX_TIM2_Init+0xe0>)
 80084e8:	0011      	movs	r1, r2
 80084ea:	0018      	movs	r0, r3
 80084ec:	f007 fce8 	bl	800fec0 <HAL_TIMEx_MasterConfigSynchronization>
 80084f0:	1e03      	subs	r3, r0, #0
 80084f2:	d001      	beq.n	80084f8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80084f4:	f7fd fb24 	bl	8005b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80084f8:	003b      	movs	r3, r7
 80084fa:	2260      	movs	r2, #96	@ 0x60
 80084fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80084fe:	003b      	movs	r3, r7
 8008500:	2200      	movs	r2, #0
 8008502:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008504:	003b      	movs	r3, r7
 8008506:	2200      	movs	r2, #0
 8008508:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800850a:	003b      	movs	r3, r7
 800850c:	2200      	movs	r2, #0
 800850e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008510:	0039      	movs	r1, r7
 8008512:	4b12      	ldr	r3, [pc, #72]	@ (800855c <MX_TIM2_Init+0xe0>)
 8008514:	2200      	movs	r2, #0
 8008516:	0018      	movs	r0, r3
 8008518:	f007 fa86 	bl	800fa28 <HAL_TIM_PWM_ConfigChannel>
 800851c:	1e03      	subs	r3, r0, #0
 800851e:	d001      	beq.n	8008524 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8008520:	f7fd fb0e 	bl	8005b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008524:	0039      	movs	r1, r7
 8008526:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <MX_TIM2_Init+0xe0>)
 8008528:	2208      	movs	r2, #8
 800852a:	0018      	movs	r0, r3
 800852c:	f007 fa7c 	bl	800fa28 <HAL_TIM_PWM_ConfigChannel>
 8008530:	1e03      	subs	r3, r0, #0
 8008532:	d001      	beq.n	8008538 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8008534:	f7fd fb04 	bl	8005b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008538:	0039      	movs	r1, r7
 800853a:	4b08      	ldr	r3, [pc, #32]	@ (800855c <MX_TIM2_Init+0xe0>)
 800853c:	220c      	movs	r2, #12
 800853e:	0018      	movs	r0, r3
 8008540:	f007 fa72 	bl	800fa28 <HAL_TIM_PWM_ConfigChannel>
 8008544:	1e03      	subs	r3, r0, #0
 8008546:	d001      	beq.n	800854c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8008548:	f7fd fafa 	bl	8005b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800854c:	4b03      	ldr	r3, [pc, #12]	@ (800855c <MX_TIM2_Init+0xe0>)
 800854e:	0018      	movs	r0, r3
 8008550:	f000 f8aa 	bl	80086a8 <HAL_TIM_MspPostInit>

}
 8008554:	46c0      	nop			@ (mov r8, r8)
 8008556:	46bd      	mov	sp, r7
 8008558:	b006      	add	sp, #24
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20002618 	.word	0x20002618
 8008560:	0000ffff 	.word	0x0000ffff

08008564 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800856a:	2310      	movs	r3, #16
 800856c:	18fb      	adds	r3, r7, r3
 800856e:	0018      	movs	r0, r3
 8008570:	2308      	movs	r3, #8
 8008572:	001a      	movs	r2, r3
 8008574:	2100      	movs	r1, #0
 8008576:	f00e fa77 	bl	8016a68 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800857a:	003b      	movs	r3, r7
 800857c:	0018      	movs	r0, r3
 800857e:	2310      	movs	r3, #16
 8008580:	001a      	movs	r2, r3
 8008582:	2100      	movs	r1, #0
 8008584:	f00e fa70 	bl	8016a68 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008588:	4b32      	ldr	r3, [pc, #200]	@ (8008654 <MX_TIM3_Init+0xf0>)
 800858a:	4a33      	ldr	r2, [pc, #204]	@ (8008658 <MX_TIM3_Init+0xf4>)
 800858c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800858e:	4b31      	ldr	r3, [pc, #196]	@ (8008654 <MX_TIM3_Init+0xf0>)
 8008590:	2200      	movs	r2, #0
 8008592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008594:	4b2f      	ldr	r3, [pc, #188]	@ (8008654 <MX_TIM3_Init+0xf0>)
 8008596:	2200      	movs	r2, #0
 8008598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800859a:	4b2e      	ldr	r3, [pc, #184]	@ (8008654 <MX_TIM3_Init+0xf0>)
 800859c:	4a2f      	ldr	r2, [pc, #188]	@ (800865c <MX_TIM3_Init+0xf8>)
 800859e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085a0:	4b2c      	ldr	r3, [pc, #176]	@ (8008654 <MX_TIM3_Init+0xf0>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085a6:	4b2b      	ldr	r3, [pc, #172]	@ (8008654 <MX_TIM3_Init+0xf0>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80085ac:	4b29      	ldr	r3, [pc, #164]	@ (8008654 <MX_TIM3_Init+0xf0>)
 80085ae:	0018      	movs	r0, r3
 80085b0:	f007 f968 	bl	800f884 <HAL_TIM_PWM_Init>
 80085b4:	1e03      	subs	r3, r0, #0
 80085b6:	d001      	beq.n	80085bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80085b8:	f7fd fac2 	bl	8005b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085bc:	2110      	movs	r1, #16
 80085be:	187b      	adds	r3, r7, r1
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085c4:	187b      	adds	r3, r7, r1
 80085c6:	2200      	movs	r2, #0
 80085c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80085ca:	187a      	adds	r2, r7, r1
 80085cc:	4b21      	ldr	r3, [pc, #132]	@ (8008654 <MX_TIM3_Init+0xf0>)
 80085ce:	0011      	movs	r1, r2
 80085d0:	0018      	movs	r0, r3
 80085d2:	f007 fc75 	bl	800fec0 <HAL_TIMEx_MasterConfigSynchronization>
 80085d6:	1e03      	subs	r3, r0, #0
 80085d8:	d001      	beq.n	80085de <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80085da:	f7fd fab1 	bl	8005b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80085de:	003b      	movs	r3, r7
 80085e0:	2260      	movs	r2, #96	@ 0x60
 80085e2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80085e4:	003b      	movs	r3, r7
 80085e6:	2200      	movs	r2, #0
 80085e8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085ea:	003b      	movs	r3, r7
 80085ec:	2200      	movs	r2, #0
 80085ee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085f0:	003b      	movs	r3, r7
 80085f2:	2200      	movs	r2, #0
 80085f4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80085f6:	0039      	movs	r1, r7
 80085f8:	4b16      	ldr	r3, [pc, #88]	@ (8008654 <MX_TIM3_Init+0xf0>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	0018      	movs	r0, r3
 80085fe:	f007 fa13 	bl	800fa28 <HAL_TIM_PWM_ConfigChannel>
 8008602:	1e03      	subs	r3, r0, #0
 8008604:	d001      	beq.n	800860a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8008606:	f7fd fa9b 	bl	8005b40 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800860a:	4b12      	ldr	r3, [pc, #72]	@ (8008654 <MX_TIM3_Init+0xf0>)
 800860c:	2104      	movs	r1, #4
 800860e:	0018      	movs	r0, r3
 8008610:	f007 fcb4 	bl	800ff7c <HAL_TIMEx_RemapConfig>
 8008614:	1e03      	subs	r3, r0, #0
 8008616:	d001      	beq.n	800861c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8008618:	f7fd fa92 	bl	8005b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800861c:	0039      	movs	r1, r7
 800861e:	4b0d      	ldr	r3, [pc, #52]	@ (8008654 <MX_TIM3_Init+0xf0>)
 8008620:	2204      	movs	r2, #4
 8008622:	0018      	movs	r0, r3
 8008624:	f007 fa00 	bl	800fa28 <HAL_TIM_PWM_ConfigChannel>
 8008628:	1e03      	subs	r3, r0, #0
 800862a:	d001      	beq.n	8008630 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800862c:	f7fd fa88 	bl	8005b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008630:	0039      	movs	r1, r7
 8008632:	4b08      	ldr	r3, [pc, #32]	@ (8008654 <MX_TIM3_Init+0xf0>)
 8008634:	2208      	movs	r2, #8
 8008636:	0018      	movs	r0, r3
 8008638:	f007 f9f6 	bl	800fa28 <HAL_TIM_PWM_ConfigChannel>
 800863c:	1e03      	subs	r3, r0, #0
 800863e:	d001      	beq.n	8008644 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008640:	f7fd fa7e 	bl	8005b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008644:	4b03      	ldr	r3, [pc, #12]	@ (8008654 <MX_TIM3_Init+0xf0>)
 8008646:	0018      	movs	r0, r3
 8008648:	f000 f82e 	bl	80086a8 <HAL_TIM_MspPostInit>

}
 800864c:	46c0      	nop			@ (mov r8, r8)
 800864e:	46bd      	mov	sp, r7
 8008650:	b006      	add	sp, #24
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20002658 	.word	0x20002658
 8008658:	40000400 	.word	0x40000400
 800865c:	0000ffff 	.word	0x0000ffff

08008660 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	2380      	movs	r3, #128	@ 0x80
 800866e:	05db      	lsls	r3, r3, #23
 8008670:	429a      	cmp	r2, r3
 8008672:	d106      	bne.n	8008682 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008674:	4b0a      	ldr	r3, [pc, #40]	@ (80086a0 <HAL_TIM_PWM_MspInit+0x40>)
 8008676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008678:	4b09      	ldr	r3, [pc, #36]	@ (80086a0 <HAL_TIM_PWM_MspInit+0x40>)
 800867a:	2101      	movs	r1, #1
 800867c:	430a      	orrs	r2, r1
 800867e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008680:	e00a      	b.n	8008698 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a07      	ldr	r2, [pc, #28]	@ (80086a4 <HAL_TIM_PWM_MspInit+0x44>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d105      	bne.n	8008698 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800868c:	4b04      	ldr	r3, [pc, #16]	@ (80086a0 <HAL_TIM_PWM_MspInit+0x40>)
 800868e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008690:	4b03      	ldr	r3, [pc, #12]	@ (80086a0 <HAL_TIM_PWM_MspInit+0x40>)
 8008692:	2102      	movs	r1, #2
 8008694:	430a      	orrs	r2, r1
 8008696:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008698:	46c0      	nop			@ (mov r8, r8)
 800869a:	46bd      	mov	sp, r7
 800869c:	b002      	add	sp, #8
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	40021000 	.word	0x40021000
 80086a4:	40000400 	.word	0x40000400

080086a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80086a8:	b590      	push	{r4, r7, lr}
 80086aa:	b08b      	sub	sp, #44	@ 0x2c
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b0:	2414      	movs	r4, #20
 80086b2:	193b      	adds	r3, r7, r4
 80086b4:	0018      	movs	r0, r3
 80086b6:	2314      	movs	r3, #20
 80086b8:	001a      	movs	r2, r3
 80086ba:	2100      	movs	r1, #0
 80086bc:	f00e f9d4 	bl	8016a68 <memset>
  if(timHandle->Instance==TIM2)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	2380      	movs	r3, #128	@ 0x80
 80086c6:	05db      	lsls	r3, r3, #23
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d123      	bne.n	8008714 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086cc:	4b27      	ldr	r3, [pc, #156]	@ (800876c <HAL_TIM_MspPostInit+0xc4>)
 80086ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086d0:	4b26      	ldr	r3, [pc, #152]	@ (800876c <HAL_TIM_MspPostInit+0xc4>)
 80086d2:	2101      	movs	r1, #1
 80086d4:	430a      	orrs	r2, r1
 80086d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80086d8:	4b24      	ldr	r3, [pc, #144]	@ (800876c <HAL_TIM_MspPostInit+0xc4>)
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	2201      	movs	r2, #1
 80086de:	4013      	ands	r3, r2
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80086e4:	0021      	movs	r1, r4
 80086e6:	187b      	adds	r3, r7, r1
 80086e8:	220d      	movs	r2, #13
 80086ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ec:	187b      	adds	r3, r7, r1
 80086ee:	2202      	movs	r2, #2
 80086f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f2:	187b      	adds	r3, r7, r1
 80086f4:	2200      	movs	r2, #0
 80086f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086f8:	187b      	adds	r3, r7, r1
 80086fa:	2200      	movs	r2, #0
 80086fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80086fe:	187b      	adds	r3, r7, r1
 8008700:	2202      	movs	r2, #2
 8008702:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008704:	187a      	adds	r2, r7, r1
 8008706:	23a0      	movs	r3, #160	@ 0xa0
 8008708:	05db      	lsls	r3, r3, #23
 800870a:	0011      	movs	r1, r2
 800870c:	0018      	movs	r0, r3
 800870e:	f001 fd37 	bl	800a180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008712:	e027      	b.n	8008764 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a15      	ldr	r2, [pc, #84]	@ (8008770 <HAL_TIM_MspPostInit+0xc8>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d122      	bne.n	8008764 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800871e:	4b13      	ldr	r3, [pc, #76]	@ (800876c <HAL_TIM_MspPostInit+0xc4>)
 8008720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008722:	4b12      	ldr	r3, [pc, #72]	@ (800876c <HAL_TIM_MspPostInit+0xc4>)
 8008724:	2104      	movs	r1, #4
 8008726:	430a      	orrs	r2, r1
 8008728:	62da      	str	r2, [r3, #44]	@ 0x2c
 800872a:	4b10      	ldr	r3, [pc, #64]	@ (800876c <HAL_TIM_MspPostInit+0xc4>)
 800872c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872e:	2204      	movs	r2, #4
 8008730:	4013      	ands	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8008736:	2114      	movs	r1, #20
 8008738:	187b      	adds	r3, r7, r1
 800873a:	22e0      	movs	r2, #224	@ 0xe0
 800873c:	0052      	lsls	r2, r2, #1
 800873e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008740:	187b      	adds	r3, r7, r1
 8008742:	2202      	movs	r2, #2
 8008744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008746:	187b      	adds	r3, r7, r1
 8008748:	2200      	movs	r2, #0
 800874a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800874c:	187b      	adds	r3, r7, r1
 800874e:	2200      	movs	r2, #0
 8008750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008752:	187b      	adds	r3, r7, r1
 8008754:	2202      	movs	r2, #2
 8008756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008758:	187b      	adds	r3, r7, r1
 800875a:	4a06      	ldr	r2, [pc, #24]	@ (8008774 <HAL_TIM_MspPostInit+0xcc>)
 800875c:	0019      	movs	r1, r3
 800875e:	0010      	movs	r0, r2
 8008760:	f001 fd0e 	bl	800a180 <HAL_GPIO_Init>
}
 8008764:	46c0      	nop			@ (mov r8, r8)
 8008766:	46bd      	mov	sp, r7
 8008768:	b00b      	add	sp, #44	@ 0x2c
 800876a:	bd90      	pop	{r4, r7, pc}
 800876c:	40021000 	.word	0x40021000
 8008770:	40000400 	.word	0x40000400
 8008774:	50000800 	.word	0x50000800

08008778 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800877c:	4b16      	ldr	r3, [pc, #88]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 800877e:	4a17      	ldr	r2, [pc, #92]	@ (80087dc <MX_USART1_UART_Init+0x64>)
 8008780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008782:	4b15      	ldr	r3, [pc, #84]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 8008784:	22e1      	movs	r2, #225	@ 0xe1
 8008786:	0252      	lsls	r2, r2, #9
 8008788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800878a:	4b13      	ldr	r3, [pc, #76]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 800878c:	2200      	movs	r2, #0
 800878e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008790:	4b11      	ldr	r3, [pc, #68]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 8008792:	2200      	movs	r2, #0
 8008794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008796:	4b10      	ldr	r3, [pc, #64]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 8008798:	2200      	movs	r2, #0
 800879a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800879c:	4b0e      	ldr	r3, [pc, #56]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 800879e:	220c      	movs	r2, #12
 80087a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087a2:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80087a8:	4b0b      	ldr	r3, [pc, #44]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80087ae:	4b0a      	ldr	r3, [pc, #40]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80087b4:	4b08      	ldr	r3, [pc, #32]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 80087b6:	2208      	movs	r2, #8
 80087b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80087ba:	4b07      	ldr	r3, [pc, #28]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 80087bc:	2280      	movs	r2, #128	@ 0x80
 80087be:	0212      	lsls	r2, r2, #8
 80087c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80087c2:	4b05      	ldr	r3, [pc, #20]	@ (80087d8 <MX_USART1_UART_Init+0x60>)
 80087c4:	0018      	movs	r0, r3
 80087c6:	f007 fbf7 	bl	800ffb8 <HAL_UART_Init>
 80087ca:	1e03      	subs	r3, r0, #0
 80087cc:	d001      	beq.n	80087d2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80087ce:	f7fd f9b7 	bl	8005b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80087d2:	46c0      	nop			@ (mov r8, r8)
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20002698 	.word	0x20002698
 80087dc:	40013800 	.word	0x40013800

080087e0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80087e4:	4b14      	ldr	r3, [pc, #80]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 80087e6:	4a15      	ldr	r2, [pc, #84]	@ (800883c <MX_USART4_UART_Init+0x5c>)
 80087e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80087ea:	4b13      	ldr	r3, [pc, #76]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 80087ec:	22e1      	movs	r2, #225	@ 0xe1
 80087ee:	0252      	lsls	r2, r2, #9
 80087f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80087f2:	4b11      	ldr	r3, [pc, #68]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80087f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80087fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 8008800:	2200      	movs	r2, #0
 8008802:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008804:	4b0c      	ldr	r3, [pc, #48]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 8008806:	220c      	movs	r2, #12
 8008808:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800880a:	4b0b      	ldr	r3, [pc, #44]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 800880c:	2200      	movs	r2, #0
 800880e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008810:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 8008812:	2200      	movs	r2, #0
 8008814:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008816:	4b08      	ldr	r3, [pc, #32]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 8008818:	2200      	movs	r2, #0
 800881a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 800881e:	2200      	movs	r2, #0
 8008820:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008822:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <MX_USART4_UART_Init+0x58>)
 8008824:	0018      	movs	r0, r3
 8008826:	f007 fbc7 	bl	800ffb8 <HAL_UART_Init>
 800882a:	1e03      	subs	r3, r0, #0
 800882c:	d001      	beq.n	8008832 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800882e:	f7fd f987 	bl	8005b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8008832:	46c0      	nop			@ (mov r8, r8)
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20002750 	.word	0x20002750
 800883c:	40004c00 	.word	0x40004c00

08008840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008840:	b590      	push	{r4, r7, lr}
 8008842:	b08b      	sub	sp, #44	@ 0x2c
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008848:	2414      	movs	r4, #20
 800884a:	193b      	adds	r3, r7, r4
 800884c:	0018      	movs	r0, r3
 800884e:	2314      	movs	r3, #20
 8008850:	001a      	movs	r2, r3
 8008852:	2100      	movs	r1, #0
 8008854:	f00e f908 	bl	8016a68 <memset>
  if(uartHandle->Instance==USART1)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a6f      	ldr	r2, [pc, #444]	@ (8008a1c <HAL_UART_MspInit+0x1dc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d12b      	bne.n	80088ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008862:	4b6f      	ldr	r3, [pc, #444]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 8008864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008866:	4b6e      	ldr	r3, [pc, #440]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 8008868:	2180      	movs	r1, #128	@ 0x80
 800886a:	01c9      	lsls	r1, r1, #7
 800886c:	430a      	orrs	r2, r1
 800886e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008870:	4b6b      	ldr	r3, [pc, #428]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 8008872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008874:	4b6a      	ldr	r3, [pc, #424]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 8008876:	2101      	movs	r1, #1
 8008878:	430a      	orrs	r2, r1
 800887a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800887c:	4b68      	ldr	r3, [pc, #416]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 800887e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008880:	2201      	movs	r2, #1
 8008882:	4013      	ands	r3, r2
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008888:	193b      	adds	r3, r7, r4
 800888a:	22c0      	movs	r2, #192	@ 0xc0
 800888c:	00d2      	lsls	r2, r2, #3
 800888e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008890:	0021      	movs	r1, r4
 8008892:	187b      	adds	r3, r7, r1
 8008894:	2202      	movs	r2, #2
 8008896:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008898:	187b      	adds	r3, r7, r1
 800889a:	2200      	movs	r2, #0
 800889c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800889e:	187b      	adds	r3, r7, r1
 80088a0:	2203      	movs	r2, #3
 80088a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80088a4:	187b      	adds	r3, r7, r1
 80088a6:	2204      	movs	r2, #4
 80088a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088aa:	187a      	adds	r2, r7, r1
 80088ac:	23a0      	movs	r3, #160	@ 0xa0
 80088ae:	05db      	lsls	r3, r3, #23
 80088b0:	0011      	movs	r1, r2
 80088b2:	0018      	movs	r0, r3
 80088b4:	f001 fc64 	bl	800a180 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80088b8:	e0ac      	b.n	8008a14 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a59      	ldr	r2, [pc, #356]	@ (8008a24 <HAL_UART_MspInit+0x1e4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d000      	beq.n	80088c6 <HAL_UART_MspInit+0x86>
 80088c4:	e0a6      	b.n	8008a14 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 80088c6:	4b56      	ldr	r3, [pc, #344]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 80088c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ca:	4b55      	ldr	r3, [pc, #340]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 80088cc:	2180      	movs	r1, #128	@ 0x80
 80088ce:	0309      	lsls	r1, r1, #12
 80088d0:	430a      	orrs	r2, r1
 80088d2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088d4:	4b52      	ldr	r3, [pc, #328]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 80088d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d8:	4b51      	ldr	r3, [pc, #324]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 80088da:	2101      	movs	r1, #1
 80088dc:	430a      	orrs	r2, r1
 80088de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80088e0:	4b4f      	ldr	r3, [pc, #316]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 80088e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e4:	2201      	movs	r2, #1
 80088e6:	4013      	ands	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80088ec:	4b4c      	ldr	r3, [pc, #304]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 80088ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f0:	4b4b      	ldr	r3, [pc, #300]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 80088f2:	2104      	movs	r1, #4
 80088f4:	430a      	orrs	r2, r1
 80088f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80088f8:	4b49      	ldr	r3, [pc, #292]	@ (8008a20 <HAL_UART_MspInit+0x1e0>)
 80088fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fc:	2204      	movs	r2, #4
 80088fe:	4013      	ands	r3, r2
 8008900:	60bb      	str	r3, [r7, #8]
 8008902:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008904:	2414      	movs	r4, #20
 8008906:	193b      	adds	r3, r7, r4
 8008908:	2202      	movs	r2, #2
 800890a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800890c:	193b      	adds	r3, r7, r4
 800890e:	2202      	movs	r2, #2
 8008910:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008912:	193b      	adds	r3, r7, r4
 8008914:	2200      	movs	r2, #0
 8008916:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008918:	193b      	adds	r3, r7, r4
 800891a:	2203      	movs	r2, #3
 800891c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800891e:	193b      	adds	r3, r7, r4
 8008920:	2206      	movs	r2, #6
 8008922:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008924:	193a      	adds	r2, r7, r4
 8008926:	23a0      	movs	r3, #160	@ 0xa0
 8008928:	05db      	lsls	r3, r3, #23
 800892a:	0011      	movs	r1, r2
 800892c:	0018      	movs	r0, r3
 800892e:	f001 fc27 	bl	800a180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008932:	0021      	movs	r1, r4
 8008934:	187b      	adds	r3, r7, r1
 8008936:	2280      	movs	r2, #128	@ 0x80
 8008938:	00d2      	lsls	r2, r2, #3
 800893a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800893c:	187b      	adds	r3, r7, r1
 800893e:	2202      	movs	r2, #2
 8008940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008942:	187b      	adds	r3, r7, r1
 8008944:	2200      	movs	r2, #0
 8008946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008948:	187b      	adds	r3, r7, r1
 800894a:	2203      	movs	r2, #3
 800894c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800894e:	187b      	adds	r3, r7, r1
 8008950:	2206      	movs	r2, #6
 8008952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008954:	187b      	adds	r3, r7, r1
 8008956:	4a34      	ldr	r2, [pc, #208]	@ (8008a28 <HAL_UART_MspInit+0x1e8>)
 8008958:	0019      	movs	r1, r3
 800895a:	0010      	movs	r0, r2
 800895c:	f001 fc10 	bl	800a180 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8008960:	4b32      	ldr	r3, [pc, #200]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 8008962:	4a33      	ldr	r2, [pc, #204]	@ (8008a30 <HAL_UART_MspInit+0x1f0>)
 8008964:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8008966:	4b31      	ldr	r3, [pc, #196]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 8008968:	220c      	movs	r2, #12
 800896a:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800896c:	4b2f      	ldr	r3, [pc, #188]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 800896e:	2200      	movs	r2, #0
 8008970:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008972:	4b2e      	ldr	r3, [pc, #184]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 8008974:	2200      	movs	r2, #0
 8008976:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008978:	4b2c      	ldr	r3, [pc, #176]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 800897a:	2280      	movs	r2, #128	@ 0x80
 800897c:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800897e:	4b2b      	ldr	r3, [pc, #172]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 8008980:	2200      	movs	r2, #0
 8008982:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008984:	4b29      	ldr	r3, [pc, #164]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 8008986:	2200      	movs	r2, #0
 8008988:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800898a:	4b28      	ldr	r3, [pc, #160]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 800898c:	2220      	movs	r2, #32
 800898e:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008990:	4b26      	ldr	r3, [pc, #152]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 8008992:	2200      	movs	r2, #0
 8008994:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8008996:	4b25      	ldr	r3, [pc, #148]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 8008998:	0018      	movs	r0, r3
 800899a:	f001 f945 	bl	8009c28 <HAL_DMA_Init>
 800899e:	1e03      	subs	r3, r0, #0
 80089a0:	d001      	beq.n	80089a6 <HAL_UART_MspInit+0x166>
      Error_Handler();
 80089a2:	f7fd f8cd 	bl	8005b40 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a20      	ldr	r2, [pc, #128]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 80089aa:	675a      	str	r2, [r3, #116]	@ 0x74
 80089ac:	4b1f      	ldr	r3, [pc, #124]	@ (8008a2c <HAL_UART_MspInit+0x1ec>)
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80089b2:	4b20      	ldr	r3, [pc, #128]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089b4:	4a20      	ldr	r2, [pc, #128]	@ (8008a38 <HAL_UART_MspInit+0x1f8>)
 80089b6:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 80089b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089ba:	220c      	movs	r2, #12
 80089bc:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089be:	4b1d      	ldr	r3, [pc, #116]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089c0:	2210      	movs	r2, #16
 80089c2:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089c4:	4b1b      	ldr	r3, [pc, #108]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80089ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089cc:	2280      	movs	r2, #128	@ 0x80
 80089ce:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089d0:	4b18      	ldr	r3, [pc, #96]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089d6:	4b17      	ldr	r3, [pc, #92]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089d8:	2200      	movs	r2, #0
 80089da:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80089dc:	4b15      	ldr	r3, [pc, #84]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089de:	2200      	movs	r2, #0
 80089e0:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80089e2:	4b14      	ldr	r3, [pc, #80]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80089e8:	4b12      	ldr	r3, [pc, #72]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089ea:	0018      	movs	r0, r3
 80089ec:	f001 f91c 	bl	8009c28 <HAL_DMA_Init>
 80089f0:	1e03      	subs	r3, r0, #0
 80089f2:	d001      	beq.n	80089f8 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80089f4:	f7fd f8a4 	bl	8005b40 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a0e      	ldr	r2, [pc, #56]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 80089fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80089fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <HAL_UART_MspInit+0x1f4>)
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8008a04:	2200      	movs	r2, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	200e      	movs	r0, #14
 8008a0a:	f001 f8db 	bl	8009bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8008a0e:	200e      	movs	r0, #14
 8008a10:	f001 f8ed 	bl	8009bee <HAL_NVIC_EnableIRQ>
}
 8008a14:	46c0      	nop			@ (mov r8, r8)
 8008a16:	46bd      	mov	sp, r7
 8008a18:	b00b      	add	sp, #44	@ 0x2c
 8008a1a:	bd90      	pop	{r4, r7, pc}
 8008a1c:	40013800 	.word	0x40013800
 8008a20:	40021000 	.word	0x40021000
 8008a24:	40004c00 	.word	0x40004c00
 8008a28:	50000800 	.word	0x50000800
 8008a2c:	20002808 	.word	0x20002808
 8008a30:	4002006c 	.word	0x4002006c
 8008a34:	20002850 	.word	0x20002850
 8008a38:	40020080 	.word	0x40020080

08008a3c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8008a44:	f000 fc48 	bl	80092d8 <HAL_GetTick>
 8008a48:	0003      	movs	r3, r0
 8008a4a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8008a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac0 <TimestampIsReached+0x84>)
 8008a4e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d307      	bcc.n	8008a68 <TimestampIsReached+0x2c>
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d901      	bls.n	8008a68 <TimestampIsReached+0x2c>
 8008a64:	2201      	movs	r2, #1
 8008a66:	e000      	b.n	8008a6a <TimestampIsReached+0x2e>
 8008a68:	2200      	movs	r2, #0
 8008a6a:	230f      	movs	r3, #15
 8008a6c:	18fb      	adds	r3, r7, r3
 8008a6e:	701a      	strb	r2, [r3, #0]
 8008a70:	781a      	ldrb	r2, [r3, #0]
 8008a72:	2101      	movs	r1, #1
 8008a74:	400a      	ands	r2, r1
 8008a76:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d207      	bcs.n	8008a90 <TimestampIsReached+0x54>
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d201      	bcs.n	8008a90 <TimestampIsReached+0x54>
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	e000      	b.n	8008a92 <TimestampIsReached+0x56>
 8008a90:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8008a92:	200e      	movs	r0, #14
 8008a94:	183b      	adds	r3, r7, r0
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	781a      	ldrb	r2, [r3, #0]
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	400a      	ands	r2, r1
 8008a9e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8008aa0:	230f      	movs	r3, #15
 8008aa2:	18fb      	adds	r3, r7, r3
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d103      	bne.n	8008ab2 <TimestampIsReached+0x76>
 8008aaa:	183b      	adds	r3, r7, r0
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e000      	b.n	8008ab8 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	0018      	movs	r0, r3
 8008aba:	46bd      	mov	sp, r7
 8008abc:	b006      	add	sp, #24
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	7fffffff 	.word	0x7fffffff

08008ac4 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8008acc:	f000 fc04 	bl	80092d8 <HAL_GetTick>
 8008ad0:	0002      	movs	r2, r0
 8008ad2:	4904      	ldr	r1, [pc, #16]	@ (8008ae4 <AddTimestamp+0x20>)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f00d ff22 	bl	8016920 <siprintf>
}
 8008adc:	46c0      	nop			@ (mov r8, r8)
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	b002      	add	sp, #8
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	0801a0fc 	.word	0x0801a0fc

08008ae8 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8008ae8:	b40c      	push	{r2, r3}
 8008aea:	b5b0      	push	{r4, r5, r7, lr}
 8008aec:	4c2b      	ldr	r4, [pc, #172]	@ (8008b9c <CreateLine+0xb4>)
 8008aee:	44a5      	add	sp, r4
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	0002      	movs	r2, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	4b2a      	ldr	r3, [pc, #168]	@ (8008ba0 <CreateLine+0xb8>)
 8008af8:	2182      	movs	r1, #130	@ 0x82
 8008afa:	00c9      	lsls	r1, r1, #3
 8008afc:	185b      	adds	r3, r3, r1
 8008afe:	19db      	adds	r3, r3, r7
 8008b00:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8008b02:	4b28      	ldr	r3, [pc, #160]	@ (8008ba4 <CreateLine+0xbc>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	4a26      	ldr	r2, [pc, #152]	@ (8008ba0 <CreateLine+0xb8>)
 8008b08:	1852      	adds	r2, r2, r1
 8008b0a:	19d2      	adds	r2, r2, r7
 8008b0c:	7812      	ldrb	r2, [r2, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d83b      	bhi.n	8008b8a <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	4924      	ldr	r1, [pc, #144]	@ (8008ba8 <CreateLine+0xc0>)
 8008b16:	240c      	movs	r4, #12
 8008b18:	193b      	adds	r3, r7, r4
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	f00d ff00 	bl	8016920 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8008b20:	4b20      	ldr	r3, [pc, #128]	@ (8008ba4 <CreateLine+0xbc>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d909      	bls.n	8008b3c <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8008b28:	193b      	adds	r3, r7, r4
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f7f7 faec 	bl	8000108 <strlen>
 8008b30:	0002      	movs	r2, r0
 8008b32:	193b      	adds	r3, r7, r4
 8008b34:	189b      	adds	r3, r3, r2
 8008b36:	0018      	movs	r0, r3
 8008b38:	f7ff ffc4 	bl	8008ac4 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8008b3c:	240c      	movs	r4, #12
 8008b3e:	193b      	adds	r3, r7, r4
 8008b40:	0018      	movs	r0, r3
 8008b42:	f7f7 fae1 	bl	8000108 <strlen>
 8008b46:	0003      	movs	r3, r0
 8008b48:	4918      	ldr	r1, [pc, #96]	@ (8008bac <CreateLine+0xc4>)
 8008b4a:	187a      	adds	r2, r7, r1
 8008b4c:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8008b4e:	4b18      	ldr	r3, [pc, #96]	@ (8008bb0 <CreateLine+0xc8>)
 8008b50:	2508      	movs	r5, #8
 8008b52:	195b      	adds	r3, r3, r5
 8008b54:	19db      	adds	r3, r3, r7
 8008b56:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8008b58:	193a      	adds	r2, r7, r4
 8008b5a:	187b      	adds	r3, r7, r1
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	18d0      	adds	r0, r2, r3
 8008b60:	187b      	adds	r3, r7, r1
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2280      	movs	r2, #128	@ 0x80
 8008b66:	00d2      	lsls	r2, r2, #3
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	0019      	movs	r1, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2283      	movs	r2, #131	@ 0x83
 8008b70:	00d2      	lsls	r2, r2, #3
 8008b72:	1952      	adds	r2, r2, r5
 8008b74:	19d2      	adds	r2, r2, r7
 8008b76:	6812      	ldr	r2, [r2, #0]
 8008b78:	f00d ff6a 	bl	8016a50 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8008b7c:	193a      	adds	r2, r7, r4
 8008b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb4 <CreateLine+0xcc>)
 8008b80:	0011      	movs	r1, r2
 8008b82:	0018      	movs	r0, r3
 8008b84:	f00d febc 	bl	8016900 <iprintf>
 8008b88:	e000      	b.n	8008b8c <CreateLine+0xa4>
    return;
 8008b8a:	46c0      	nop			@ (mov r8, r8)
}
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	2382      	movs	r3, #130	@ 0x82
 8008b90:	00db      	lsls	r3, r3, #3
 8008b92:	449d      	add	sp, r3
 8008b94:	bcb0      	pop	{r4, r5, r7}
 8008b96:	bc08      	pop	{r3}
 8008b98:	b002      	add	sp, #8
 8008b9a:	4718      	bx	r3
 8008b9c:	fffffbf0 	.word	0xfffffbf0
 8008ba0:	fffffbf7 	.word	0xfffffbf7
 8008ba4:	20000140 	.word	0x20000140
 8008ba8:	0801a108 	.word	0x0801a108
 8008bac:	0000040c 	.word	0x0000040c
 8008bb0:	0000041c 	.word	0x0000041c
 8008bb4:	0801a10c 	.word	0x0801a10c

08008bb8 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	68b9      	ldr	r1, [r7, #8]
 8008bca:	4804      	ldr	r0, [pc, #16]	@ (8008bdc <_write+0x24>)
 8008bcc:	2364      	movs	r3, #100	@ 0x64
 8008bce:	f007 fa59 	bl	8010084 <HAL_UART_Transmit>
  return count;
 8008bd2:	687b      	ldr	r3, [r7, #4]
}
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b004      	add	sp, #16
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20002698 	.word	0x20002698

08008be0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	0002      	movs	r2, r0
 8008be8:	1dfb      	adds	r3, r7, #7
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	4b03      	ldr	r3, [pc, #12]	@ (8008bfc <SetVerboseLevel+0x1c>)
 8008bee:	1dfa      	adds	r2, r7, #7
 8008bf0:	7812      	ldrb	r2, [r2, #0]
 8008bf2:	701a      	strb	r2, [r3, #0]
 8008bf4:	46c0      	nop			@ (mov r8, r8)
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	b002      	add	sp, #8
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	20000140 	.word	0x20000140

08008c00 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008c04:	f000 fb68 	bl	80092d8 <HAL_GetTick>
 8008c08:	0003      	movs	r3, r0
}
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8008c16:	4a0f      	ldr	r2, [pc, #60]	@ (8008c54 <BinaryReleaseInfo+0x44>)
 8008c18:	4b0f      	ldr	r3, [pc, #60]	@ (8008c58 <BinaryReleaseInfo+0x48>)
 8008c1a:	0019      	movs	r1, r3
 8008c1c:	2002      	movs	r0, #2
 8008c1e:	f7ff ff63 	bl	8008ae8 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8008c22:	480e      	ldr	r0, [pc, #56]	@ (8008c5c <BinaryReleaseInfo+0x4c>)
 8008c24:	4a0e      	ldr	r2, [pc, #56]	@ (8008c60 <BinaryReleaseInfo+0x50>)
 8008c26:	490c      	ldr	r1, [pc, #48]	@ (8008c58 <BinaryReleaseInfo+0x48>)
 8008c28:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <BinaryReleaseInfo+0x54>)
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	0003      	movs	r3, r0
 8008c2e:	2002      	movs	r0, #2
 8008c30:	f7ff ff5a 	bl	8008ae8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8008c34:	4a0c      	ldr	r2, [pc, #48]	@ (8008c68 <BinaryReleaseInfo+0x58>)
 8008c36:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <BinaryReleaseInfo+0x48>)
 8008c38:	0019      	movs	r1, r3
 8008c3a:	2002      	movs	r0, #2
 8008c3c:	f7ff ff54 	bl	8008ae8 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8008c40:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <BinaryReleaseInfo+0x5c>)
 8008c42:	4a0b      	ldr	r2, [pc, #44]	@ (8008c70 <BinaryReleaseInfo+0x60>)
 8008c44:	4904      	ldr	r1, [pc, #16]	@ (8008c58 <BinaryReleaseInfo+0x48>)
 8008c46:	2002      	movs	r0, #2
 8008c48:	f7ff ff4e 	bl	8008ae8 <CreateLine>
}
 8008c4c:	46c0      	nop			@ (mov r8, r8)
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	0801a114 	.word	0x0801a114
 8008c58:	0801a140 	.word	0x0801a140
 8008c5c:	0801a144 	.word	0x0801a144
 8008c60:	0801a150 	.word	0x0801a150
 8008c64:	0801a164 	.word	0x0801a164
 8008c68:	0801a170 	.word	0x0801a170
 8008c6c:	0801a17c 	.word	0x0801a17c
 8008c70:	0801a184 	.word	0x0801a184

08008c74 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c74:	b590      	push	{r4, r7, lr}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6039      	str	r1, [r7, #0]
 8008c7c:	0011      	movs	r1, r2
 8008c7e:	1dfb      	adds	r3, r7, #7
 8008c80:	1c02      	adds	r2, r0, #0
 8008c82:	701a      	strb	r2, [r3, #0]
 8008c84:	1dbb      	adds	r3, r7, #6
 8008c86:	1c0a      	adds	r2, r1, #0
 8008c88:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8008c8a:	4b08      	ldr	r3, [pc, #32]	@ (8008cac <ReadRegister+0x38>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d008      	beq.n	8008ca4 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8008c92:	4b06      	ldr	r3, [pc, #24]	@ (8008cac <ReadRegister+0x38>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	1dba      	adds	r2, r7, #6
 8008c98:	7814      	ldrb	r4, [r2, #0]
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	1dfa      	adds	r2, r7, #7
 8008c9e:	7810      	ldrb	r0, [r2, #0]
 8008ca0:	0022      	movs	r2, r4
 8008ca2:	4798      	blx	r3
	}
}
 8008ca4:	46c0      	nop			@ (mov r8, r8)
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	b003      	add	sp, #12
 8008caa:	bd90      	pop	{r4, r7, pc}
 8008cac:	20002898 	.word	0x20002898

08008cb0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008cb0:	b590      	push	{r4, r7, lr}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6039      	str	r1, [r7, #0]
 8008cb8:	0011      	movs	r1, r2
 8008cba:	1dfb      	adds	r3, r7, #7
 8008cbc:	1c02      	adds	r2, r0, #0
 8008cbe:	701a      	strb	r2, [r3, #0]
 8008cc0:	1dbb      	adds	r3, r7, #6
 8008cc2:	1c0a      	adds	r2, r1, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008cc6:	4b08      	ldr	r3, [pc, #32]	@ (8008ce8 <WriteRegister+0x38>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d008      	beq.n	8008ce0 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008cce:	4b06      	ldr	r3, [pc, #24]	@ (8008ce8 <WriteRegister+0x38>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	1dba      	adds	r2, r7, #6
 8008cd4:	7814      	ldrb	r4, [r2, #0]
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	1dfa      	adds	r2, r7, #7
 8008cda:	7810      	ldrb	r0, [r2, #0]
 8008cdc:	0022      	movs	r2, r4
 8008cde:	4798      	blx	r3
  }
}
 8008ce0:	46c0      	nop			@ (mov r8, r8)
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	b003      	add	sp, #12
 8008ce6:	bd90      	pop	{r4, r7, pc}
 8008ce8:	2000289c 	.word	0x2000289c

08008cec <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	000a      	movs	r2, r1
 8008cf6:	1cfb      	adds	r3, r7, #3
 8008cf8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8008cfa:	230f      	movs	r3, #15
 8008cfc:	18fb      	adds	r3, r7, r3
 8008cfe:	22ff      	movs	r2, #255	@ 0xff
 8008d00:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008d02:	230e      	movs	r3, #14
 8008d04:	18fb      	adds	r3, r7, r3
 8008d06:	2200      	movs	r2, #0
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	e037      	b.n	8008d7c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008d0c:	230e      	movs	r3, #14
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	18d3      	adds	r3, r2, r3
 8008d16:	7819      	ldrb	r1, [r3, #0]
 8008d18:	220f      	movs	r2, #15
 8008d1a:	18bb      	adds	r3, r7, r2
 8008d1c:	18ba      	adds	r2, r7, r2
 8008d1e:	7812      	ldrb	r2, [r2, #0]
 8008d20:	404a      	eors	r2, r1
 8008d22:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008d24:	230d      	movs	r3, #13
 8008d26:	18fb      	adds	r3, r7, r3
 8008d28:	2200      	movs	r2, #0
 8008d2a:	701a      	strb	r2, [r3, #0]
 8008d2c:	e01b      	b.n	8008d66 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8008d2e:	210f      	movs	r1, #15
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	b25b      	sxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	da09      	bge.n	8008d4e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8008d3a:	187b      	adds	r3, r7, r1
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	b25b      	sxtb	r3, r3
 8008d42:	2231      	movs	r2, #49	@ 0x31
 8008d44:	4053      	eors	r3, r2
 8008d46:	b25a      	sxtb	r2, r3
 8008d48:	187b      	adds	r3, r7, r1
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	e005      	b.n	8008d5a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008d4e:	230f      	movs	r3, #15
 8008d50:	18fa      	adds	r2, r7, r3
 8008d52:	18fb      	adds	r3, r7, r3
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	18db      	adds	r3, r3, r3
 8008d58:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008d5a:	210d      	movs	r1, #13
 8008d5c:	187b      	adds	r3, r7, r1
 8008d5e:	781a      	ldrb	r2, [r3, #0]
 8008d60:	187b      	adds	r3, r7, r1
 8008d62:	3201      	adds	r2, #1
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	230d      	movs	r3, #13
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b07      	cmp	r3, #7
 8008d6e:	d9de      	bls.n	8008d2e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008d70:	210e      	movs	r1, #14
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	781a      	ldrb	r2, [r3, #0]
 8008d76:	187b      	adds	r3, r7, r1
 8008d78:	3201      	adds	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	230e      	movs	r3, #14
 8008d7e:	18fa      	adds	r2, r7, r3
 8008d80:	1cfb      	adds	r3, r7, #3
 8008d82:	7812      	ldrb	r2, [r2, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d3c0      	bcc.n	8008d0c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008d8a:	230f      	movs	r3, #15
 8008d8c:	18fb      	adds	r3, r7, r3
 8008d8e:	781b      	ldrb	r3, [r3, #0]
}
 8008d90:	0018      	movs	r0, r3
 8008d92:	46bd      	mov	sp, r7
 8008d94:	b004      	add	sp, #16
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8008da2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dcc <HIDS_Init+0x34>)
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8008da8:	4b09      	ldr	r3, [pc, #36]	@ (8008dd0 <HIDS_Init+0x38>)
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8008dae:	4b09      	ldr	r3, [pc, #36]	@ (8008dd4 <HIDS_Init+0x3c>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	0018      	movs	r0, r3
 8008db4:	f000 f8d0 	bl	8008f58 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8008db8:	4b07      	ldr	r3, [pc, #28]	@ (8008dd8 <HIDS_Init+0x40>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	f000 f82b 	bl	8008e18 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8008dc2:	46c0      	nop			@ (mov r8, r8)
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	b002      	add	sp, #8
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	46c0      	nop			@ (mov r8, r8)
 8008dcc:	20002898 	.word	0x20002898
 8008dd0:	2000289c 	.word	0x2000289c
 8008dd4:	20000142 	.word	0x20000142
 8008dd8:	20000141 	.word	0x20000141

08008ddc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8008de0:	f7ff ff0e 	bl	8008c00 <GetCurrentHalTicks>
 8008de4:	0002      	movs	r2, r0
 8008de6:	4b08      	ldr	r3, [pc, #32]	@ (8008e08 <HIDS_StartMeasurement+0x2c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	18d2      	adds	r2, r2, r3
 8008dec:	4b07      	ldr	r3, [pc, #28]	@ (8008e0c <HIDS_StartMeasurement+0x30>)
 8008dee:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8008df0:	4b07      	ldr	r3, [pc, #28]	@ (8008e10 <HIDS_StartMeasurement+0x34>)
 8008df2:	2201      	movs	r2, #1
 8008df4:	0019      	movs	r1, r3
 8008df6:	2044      	movs	r0, #68	@ 0x44
 8008df8:	f7ff ff5a 	bl	8008cb0 <WriteRegister>
  MeasurementDone = false;
 8008dfc:	4b05      	ldr	r3, [pc, #20]	@ (8008e14 <HIDS_StartMeasurement+0x38>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
}
 8008e02:	46c0      	nop			@ (mov r8, r8)
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20000148 	.word	0x20000148
 8008e0c:	20000144 	.word	0x20000144
 8008e10:	20000142 	.word	0x20000142
 8008e14:	200028ae 	.word	0x200028ae

08008e18 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	0002      	movs	r2, r0
 8008e20:	1dfb      	adds	r3, r7, #7
 8008e22:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8008e24:	4b03      	ldr	r3, [pc, #12]	@ (8008e34 <HIDS_SetHeaterMode+0x1c>)
 8008e26:	1dfa      	adds	r2, r7, #7
 8008e28:	7812      	ldrb	r2, [r2, #0]
 8008e2a:	701a      	strb	r2, [r3, #0]
}
 8008e2c:	46c0      	nop			@ (mov r8, r8)
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	b002      	add	sp, #8
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20000141 	.word	0x20000141

08008e38 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8008e38:	b590      	push	{r4, r7, lr}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	781a      	ldrb	r2, [r3, #0]
 8008e44:	210c      	movs	r1, #12
 8008e46:	187b      	adds	r3, r7, r1
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	785a      	ldrb	r2, [r3, #1]
 8008e4e:	187b      	adds	r3, r7, r1
 8008e50:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8008e52:	240f      	movs	r4, #15
 8008e54:	193b      	adds	r3, r7, r4
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	7892      	ldrb	r2, [r2, #2]
 8008e5a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8008e5c:	187b      	adds	r3, r7, r1
 8008e5e:	2102      	movs	r1, #2
 8008e60:	0018      	movs	r0, r3
 8008e62:	f7ff ff43 	bl	8008cec <CalculateCRC>
 8008e66:	0003      	movs	r3, r0
 8008e68:	001a      	movs	r2, r3
 8008e6a:	193b      	adds	r3, r7, r4
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d007      	beq.n	8008e82 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8008e72:	4a17      	ldr	r2, [pc, #92]	@ (8008ed0 <CheckCRC+0x98>)
 8008e74:	4b17      	ldr	r3, [pc, #92]	@ (8008ed4 <CheckCRC+0x9c>)
 8008e76:	0019      	movs	r1, r3
 8008e78:	2001      	movs	r0, #1
 8008e7a:	f7ff fe35 	bl	8008ae8 <CreateLine>
		return false;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e021      	b.n	8008ec6 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	78da      	ldrb	r2, [r3, #3]
 8008e86:	2108      	movs	r1, #8
 8008e88:	187b      	adds	r3, r7, r1
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	791a      	ldrb	r2, [r3, #4]
 8008e90:	187b      	adds	r3, r7, r1
 8008e92:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008e94:	240e      	movs	r4, #14
 8008e96:	193b      	adds	r3, r7, r4
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7952      	ldrb	r2, [r2, #5]
 8008e9c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8008e9e:	187b      	adds	r3, r7, r1
 8008ea0:	2102      	movs	r1, #2
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7ff ff22 	bl	8008cec <CalculateCRC>
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	001a      	movs	r2, r3
 8008eac:	193b      	adds	r3, r7, r4
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d007      	beq.n	8008ec4 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8008eb4:	4a08      	ldr	r2, [pc, #32]	@ (8008ed8 <CheckCRC+0xa0>)
 8008eb6:	4b07      	ldr	r3, [pc, #28]	@ (8008ed4 <CheckCRC+0x9c>)
 8008eb8:	0019      	movs	r1, r3
 8008eba:	2001      	movs	r0, #1
 8008ebc:	f7ff fe14 	bl	8008ae8 <CreateLine>
		return false;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	e000      	b.n	8008ec6 <CheckCRC+0x8e>
	}
	return true;
 8008ec4:	2301      	movs	r3, #1
}
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	b005      	add	sp, #20
 8008ecc:	bd90      	pop	{r4, r7, pc}
 8008ece:	46c0      	nop			@ (mov r8, r8)
 8008ed0:	0801a1c0 	.word	0x0801a1c0
 8008ed4:	0801a1e8 	.word	0x0801a1e8
 8008ed8:	0801a1ec 	.word	0x0801a1ec

08008edc <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8008ee2:	1dbb      	adds	r3, r7, #6
 8008ee4:	2289      	movs	r2, #137	@ 0x89
 8008ee6:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8008ee8:	1dbb      	adds	r3, r7, #6
 8008eea:	2201      	movs	r2, #1
 8008eec:	0019      	movs	r1, r3
 8008eee:	2044      	movs	r0, #68	@ 0x44
 8008ef0:	f7ff fede 	bl	8008cb0 <WriteRegister>
	HAL_Delay(30);
 8008ef4:	201e      	movs	r0, #30
 8008ef6:	f000 f9f9 	bl	80092ec <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8008efa:	4b14      	ldr	r3, [pc, #80]	@ (8008f4c <HIDS_DeviceConnected+0x70>)
 8008efc:	2206      	movs	r2, #6
 8008efe:	0019      	movs	r1, r3
 8008f00:	2044      	movs	r0, #68	@ 0x44
 8008f02:	f7ff feb7 	bl	8008c74 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008f06:	1dfb      	adds	r3, r7, #7
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	e011      	b.n	8008f32 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8008f0e:	1dfb      	adds	r3, r7, #7
 8008f10:	7818      	ldrb	r0, [r3, #0]
 8008f12:	1dfb      	adds	r3, r7, #7
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	4a0d      	ldr	r2, [pc, #52]	@ (8008f4c <HIDS_DeviceConnected+0x70>)
 8008f18:	5cd3      	ldrb	r3, [r2, r3]
 8008f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8008f50 <HIDS_DeviceConnected+0x74>)
 8008f1c:	490d      	ldr	r1, [pc, #52]	@ (8008f54 <HIDS_DeviceConnected+0x78>)
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	0003      	movs	r3, r0
 8008f22:	2002      	movs	r0, #2
 8008f24:	f7ff fde0 	bl	8008ae8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008f28:	1dfb      	adds	r3, r7, #7
 8008f2a:	781a      	ldrb	r2, [r3, #0]
 8008f2c:	1dfb      	adds	r3, r7, #7
 8008f2e:	3201      	adds	r2, #1
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	1dfb      	adds	r3, r7, #7
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b05      	cmp	r3, #5
 8008f38:	d9e9      	bls.n	8008f0e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8008f3a:	4b04      	ldr	r3, [pc, #16]	@ (8008f4c <HIDS_DeviceConnected+0x70>)
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f7ff ff7b 	bl	8008e38 <CheckCRC>
 8008f42:	0003      	movs	r3, r0
}
 8008f44:	0018      	movs	r0, r3
 8008f46:	46bd      	mov	sp, r7
 8008f48:	b002      	add	sp, #8
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	200028a0 	.word	0x200028a0
 8008f50:	0801a218 	.word	0x0801a218
 8008f54:	0801a1bc 	.word	0x0801a1bc

08008f58 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	0002      	movs	r2, r0
 8008f60:	1dfb      	adds	r3, r7, #7
 8008f62:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8008f64:	4b03      	ldr	r3, [pc, #12]	@ (8008f74 <HIDS_SetMeasurementMode+0x1c>)
 8008f66:	1dfa      	adds	r2, r7, #7
 8008f68:	7812      	ldrb	r2, [r2, #0]
 8008f6a:	701a      	strb	r2, [r3, #0]
}
 8008f6c:	46c0      	nop			@ (mov r8, r8)
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	b002      	add	sp, #8
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20000142 	.word	0x20000142

08008f78 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8008f7c:	4b04      	ldr	r3, [pc, #16]	@ (8008f90 <HIDS_MeasurementReady+0x18>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	0018      	movs	r0, r3
 8008f82:	f7ff fd5b 	bl	8008a3c <TimestampIsReached>
 8008f86:	0003      	movs	r3, r0
}
 8008f88:	0018      	movs	r0, r3
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	46c0      	nop			@ (mov r8, r8)
 8008f90:	20000144 	.word	0x20000144

08008f94 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08c      	sub	sp, #48	@ 0x30
 8008f98:	af02      	add	r7, sp, #8
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8008f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8009188 <HIDS_GetMeasurementValues+0x1f4>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <HIDS_GetMeasurementValues+0x16>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e0ea      	b.n	8009180 <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8008faa:	f7ff ffe5 	bl	8008f78 <HIDS_MeasurementReady>
 8008fae:	0003      	movs	r3, r0
 8008fb0:	001a      	movs	r2, r3
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4053      	eors	r3, r2
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <HIDS_GetMeasurementValues+0x2c>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e0df      	b.n	8009180 <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8008fc0:	4b72      	ldr	r3, [pc, #456]	@ (800918c <HIDS_GetMeasurementValues+0x1f8>)
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	4b72      	ldr	r3, [pc, #456]	@ (8009190 <HIDS_GetMeasurementValues+0x1fc>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	0019      	movs	r1, r3
 8008fca:	0010      	movs	r0, r2
 8008fcc:	f7f7 f8b8 	bl	8000140 <__udivsi3>
 8008fd0:	0003      	movs	r3, r0
 8008fd2:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	1c58      	adds	r0, r3, #1
 8008fda:	4a6f      	ldr	r2, [pc, #444]	@ (8009198 <HIDS_GetMeasurementValues+0x204>)
 8008fdc:	496f      	ldr	r1, [pc, #444]	@ (800919c <HIDS_GetMeasurementValues+0x208>)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	0003      	movs	r3, r0
 8008fe4:	2003      	movs	r0, #3
 8008fe6:	f7ff fd7f 	bl	8008ae8 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8008fea:	4b6d      	ldr	r3, [pc, #436]	@ (80091a0 <HIDS_GetMeasurementValues+0x20c>)
 8008fec:	2206      	movs	r2, #6
 8008fee:	0019      	movs	r1, r3
 8008ff0:	2044      	movs	r0, #68	@ 0x44
 8008ff2:	f7ff fe3f 	bl	8008c74 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8008ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80091a0 <HIDS_GetMeasurementValues+0x20c>)
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f7ff ff1d 	bl	8008e38 <CheckCRC>
 8008ffe:	0003      	movs	r3, r0
 8009000:	001a      	movs	r2, r3
 8009002:	2301      	movs	r3, #1
 8009004:	4053      	eors	r3, r2
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d011      	beq.n	8009030 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800900c:	2327      	movs	r3, #39	@ 0x27
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
 8009014:	e005      	b.n	8009022 <HIDS_GetMeasurementValues+0x8e>
 8009016:	2127      	movs	r1, #39	@ 0x27
 8009018:	187b      	adds	r3, r7, r1
 800901a:	781a      	ldrb	r2, [r3, #0]
 800901c:	187b      	adds	r3, r7, r1
 800901e:	3201      	adds	r2, #1
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	2327      	movs	r3, #39	@ 0x27
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b05      	cmp	r3, #5
 800902a:	d9f4      	bls.n	8009016 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800902c:	2300      	movs	r3, #0
 800902e:	e0a7      	b.n	8009180 <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8009030:	4b5b      	ldr	r3, [pc, #364]	@ (80091a0 <HIDS_GetMeasurementValues+0x20c>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	22af      	movs	r2, #175	@ 0xaf
 8009038:	4353      	muls	r3, r2
 800903a:	4a59      	ldr	r2, [pc, #356]	@ (80091a0 <HIDS_GetMeasurementValues+0x20c>)
 800903c:	7852      	ldrb	r2, [r2, #1]
 800903e:	4313      	orrs	r3, r2
 8009040:	0018      	movs	r0, r3
 8009042:	f7fa f93b 	bl	80032bc <__aeabi_i2d>
 8009046:	2200      	movs	r2, #0
 8009048:	4b56      	ldr	r3, [pc, #344]	@ (80091a4 <HIDS_GetMeasurementValues+0x210>)
 800904a:	f7f8 fe31 	bl	8001cb0 <__aeabi_ddiv>
 800904e:	0002      	movs	r2, r0
 8009050:	000b      	movs	r3, r1
 8009052:	0010      	movs	r0, r2
 8009054:	0019      	movs	r1, r3
 8009056:	f7fa f9cb 	bl	80033f0 <__aeabi_d2f>
 800905a:	1c03      	adds	r3, r0, #0
 800905c:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800905e:	4952      	ldr	r1, [pc, #328]	@ (80091a8 <HIDS_GetMeasurementValues+0x214>)
 8009060:	6938      	ldr	r0, [r7, #16]
 8009062:	f7f8 f859 	bl	8001118 <__aeabi_fsub>
 8009066:	1c03      	adds	r3, r0, #0
 8009068:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800906a:	4b4d      	ldr	r3, [pc, #308]	@ (80091a0 <HIDS_GetMeasurementValues+0x20c>)
 800906c:	78db      	ldrb	r3, [r3, #3]
 800906e:	021b      	lsls	r3, r3, #8
 8009070:	4a4b      	ldr	r2, [pc, #300]	@ (80091a0 <HIDS_GetMeasurementValues+0x20c>)
 8009072:	7912      	ldrb	r2, [r2, #4]
 8009074:	431a      	orrs	r2, r3
 8009076:	0013      	movs	r3, r2
 8009078:	015b      	lsls	r3, r3, #5
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	189b      	adds	r3, r3, r2
 8009080:	0018      	movs	r0, r3
 8009082:	f7fa f91b 	bl	80032bc <__aeabi_i2d>
 8009086:	2200      	movs	r2, #0
 8009088:	4b46      	ldr	r3, [pc, #280]	@ (80091a4 <HIDS_GetMeasurementValues+0x210>)
 800908a:	f7f8 fe11 	bl	8001cb0 <__aeabi_ddiv>
 800908e:	0002      	movs	r2, r0
 8009090:	000b      	movs	r3, r1
 8009092:	0010      	movs	r0, r2
 8009094:	0019      	movs	r1, r3
 8009096:	f7fa f9ab 	bl	80033f0 <__aeabi_d2f>
 800909a:	1c03      	adds	r3, r0, #0
 800909c:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800909e:	4943      	ldr	r1, [pc, #268]	@ (80091ac <HIDS_GetMeasurementValues+0x218>)
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7f8 f839 	bl	8001118 <__aeabi_fsub>
 80090a6:	1c03      	adds	r3, r0, #0
 80090a8:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 80090aa:	4b3a      	ldr	r3, [pc, #232]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d910      	bls.n	80090d6 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 80090b4:	4b37      	ldr	r3, [pc, #220]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	4b3d      	ldr	r3, [pc, #244]	@ (80091b0 <HIDS_GetMeasurementValues+0x21c>)
 80090ba:	0092      	lsls	r2, r2, #2
 80090bc:	6939      	ldr	r1, [r7, #16]
 80090be:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 80090c0:	4b34      	ldr	r3, [pc, #208]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	4b3b      	ldr	r3, [pc, #236]	@ (80091b4 <HIDS_GetMeasurementValues+0x220>)
 80090c6:	0092      	lsls	r2, r2, #2
 80090c8:	68f9      	ldr	r1, [r7, #12]
 80090ca:	50d1      	str	r1, [r2, r3]
	  measurements++;
 80090cc:	4b31      	ldr	r3, [pc, #196]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	4b30      	ldr	r3, [pc, #192]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 80090d4:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 80090d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d84c      	bhi.n	800917a <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 80090e8:	2300      	movs	r3, #0
 80090ea:	61bb      	str	r3, [r7, #24]
 80090ec:	e016      	b.n	800911c <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 80090ee:	4b30      	ldr	r3, [pc, #192]	@ (80091b0 <HIDS_GetMeasurementValues+0x21c>)
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	0092      	lsls	r2, r2, #2
 80090f4:	58d3      	ldr	r3, [r2, r3]
 80090f6:	1c19      	adds	r1, r3, #0
 80090f8:	6a38      	ldr	r0, [r7, #32]
 80090fa:	f7f7 fb5f 	bl	80007bc <__aeabi_fadd>
 80090fe:	1c03      	adds	r3, r0, #0
 8009100:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 8009102:	4b2c      	ldr	r3, [pc, #176]	@ (80091b4 <HIDS_GetMeasurementValues+0x220>)
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	0092      	lsls	r2, r2, #2
 8009108:	58d3      	ldr	r3, [r2, r3]
 800910a:	1c19      	adds	r1, r3, #0
 800910c:	69f8      	ldr	r0, [r7, #28]
 800910e:	f7f7 fb55 	bl	80007bc <__aeabi_fadd>
 8009112:	1c03      	adds	r3, r0, #0
 8009114:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	3301      	adds	r3, #1
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	4b1d      	ldr	r3, [pc, #116]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	429a      	cmp	r2, r3
 8009124:	d3e3      	bcc.n	80090ee <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 8009126:	4b1b      	ldr	r3, [pc, #108]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	0018      	movs	r0, r3
 800912c:	f7f8 fa1a 	bl	8001564 <__aeabi_ui2f>
 8009130:	1c03      	adds	r3, r0, #0
 8009132:	1c19      	adds	r1, r3, #0
 8009134:	6a38      	ldr	r0, [r7, #32]
 8009136:	f7f7 fccb 	bl	8000ad0 <__aeabi_fdiv>
 800913a:	1c03      	adds	r3, r0, #0
 800913c:	1c1a      	adds	r2, r3, #0
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 8009142:	4b14      	ldr	r3, [pc, #80]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	0018      	movs	r0, r3
 8009148:	f7f8 fa0c 	bl	8001564 <__aeabi_ui2f>
 800914c:	1c03      	adds	r3, r0, #0
 800914e:	1c19      	adds	r1, r3, #0
 8009150:	69f8      	ldr	r0, [r7, #28]
 8009152:	f7f7 fcbd 	bl	8000ad0 <__aeabi_fdiv>
 8009156:	1c03      	adds	r3, r0, #0
 8009158:	1c1a      	adds	r2, r3, #0
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	0011      	movs	r1, r2
 8009164:	0018      	movs	r0, r3
 8009166:	f7fe ffd5 	bl	8008114 <SGP_GetHT>

    measurements = 0;
 800916a:	4b0a      	ldr	r3, [pc, #40]	@ (8009194 <HIDS_GetMeasurementValues+0x200>)
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 8009170:	4b05      	ldr	r3, [pc, #20]	@ (8009188 <HIDS_GetMeasurementValues+0x1f4>)
 8009172:	2201      	movs	r2, #1
 8009174:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 8009176:	2301      	movs	r3, #1
 8009178:	e002      	b.n	8009180 <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 800917a:	f7ff fe2f 	bl	8008ddc <HIDS_StartMeasurement>
	return false;
 800917e:	2300      	movs	r3, #0
}
 8009180:	0018      	movs	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	b00a      	add	sp, #40	@ 0x28
 8009186:	bd80      	pop	{r7, pc}
 8009188:	200028ae 	.word	0x200028ae
 800918c:	2000014c 	.word	0x2000014c
 8009190:	20000148 	.word	0x20000148
 8009194:	200028b0 	.word	0x200028b0
 8009198:	0801a238 	.word	0x0801a238
 800919c:	0801a264 	.word	0x0801a264
 80091a0:	200028a8 	.word	0x200028a8
 80091a4:	40efffe0 	.word	0x40efffe0
 80091a8:	42340000 	.word	0x42340000
 80091ac:	40c00000 	.word	0x40c00000
 80091b0:	200028b4 	.word	0x200028b4
 80091b4:	20002cb4 	.word	0x20002cb4

080091b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80091b8:	480d      	ldr	r0, [pc, #52]	@ (80091f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80091ba:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80091bc:	f7ff f958 	bl	8008470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091c0:	480c      	ldr	r0, [pc, #48]	@ (80091f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80091c2:	490d      	ldr	r1, [pc, #52]	@ (80091f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80091c4:	4a0d      	ldr	r2, [pc, #52]	@ (80091fc <LoopForever+0xe>)
  movs r3, #0
 80091c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091c8:	e002      	b.n	80091d0 <LoopCopyDataInit>

080091ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091ce:	3304      	adds	r3, #4

080091d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091d4:	d3f9      	bcc.n	80091ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80091d8:	4c0a      	ldr	r4, [pc, #40]	@ (8009204 <LoopForever+0x16>)
  movs r3, #0
 80091da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091dc:	e001      	b.n	80091e2 <LoopFillZerobss>

080091de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091e0:	3204      	adds	r2, #4

080091e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091e4:	d3fb      	bcc.n	80091de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80091e6:	f00d fcc9 	bl	8016b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80091ea:	f7fc fbe7 	bl	80059bc <main>

080091ee <LoopForever>:

LoopForever:
    b LoopForever
 80091ee:	e7fe      	b.n	80091ee <LoopForever>
   ldr   r0, =_estack
 80091f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80091f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091f8:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 80091fc:	0801a900 	.word	0x0801a900
  ldr r2, =_sbss
 8009200:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8009204:	200043e0 	.word	0x200043e0

08009208 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009208:	e7fe      	b.n	8009208 <ADC1_COMP_IRQHandler>
	...

0800920c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009212:	1dfb      	adds	r3, r7, #7
 8009214:	2200      	movs	r2, #0
 8009216:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009218:	4b0b      	ldr	r3, [pc, #44]	@ (8009248 <HAL_Init+0x3c>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	4b0a      	ldr	r3, [pc, #40]	@ (8009248 <HAL_Init+0x3c>)
 800921e:	2140      	movs	r1, #64	@ 0x40
 8009220:	430a      	orrs	r2, r1
 8009222:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009224:	2003      	movs	r0, #3
 8009226:	f000 f811 	bl	800924c <HAL_InitTick>
 800922a:	1e03      	subs	r3, r0, #0
 800922c:	d003      	beq.n	8009236 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800922e:	1dfb      	adds	r3, r7, #7
 8009230:	2201      	movs	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	e001      	b.n	800923a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009236:	f7fe fff1 	bl	800821c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800923a:	1dfb      	adds	r3, r7, #7
 800923c:	781b      	ldrb	r3, [r3, #0]
}
 800923e:	0018      	movs	r0, r3
 8009240:	46bd      	mov	sp, r7
 8009242:	b002      	add	sp, #8
 8009244:	bd80      	pop	{r7, pc}
 8009246:	46c0      	nop			@ (mov r8, r8)
 8009248:	40022000 	.word	0x40022000

0800924c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800924c:	b590      	push	{r4, r7, lr}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009254:	4b14      	ldr	r3, [pc, #80]	@ (80092a8 <HAL_InitTick+0x5c>)
 8009256:	681c      	ldr	r4, [r3, #0]
 8009258:	4b14      	ldr	r3, [pc, #80]	@ (80092ac <HAL_InitTick+0x60>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	0019      	movs	r1, r3
 800925e:	23fa      	movs	r3, #250	@ 0xfa
 8009260:	0098      	lsls	r0, r3, #2
 8009262:	f7f6 ff6d 	bl	8000140 <__udivsi3>
 8009266:	0003      	movs	r3, r0
 8009268:	0019      	movs	r1, r3
 800926a:	0020      	movs	r0, r4
 800926c:	f7f6 ff68 	bl	8000140 <__udivsi3>
 8009270:	0003      	movs	r3, r0
 8009272:	0018      	movs	r0, r3
 8009274:	f000 fccb 	bl	8009c0e <HAL_SYSTICK_Config>
 8009278:	1e03      	subs	r3, r0, #0
 800927a:	d001      	beq.n	8009280 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e00f      	b.n	80092a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b03      	cmp	r3, #3
 8009284:	d80b      	bhi.n	800929e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	2301      	movs	r3, #1
 800928a:	425b      	negs	r3, r3
 800928c:	2200      	movs	r2, #0
 800928e:	0018      	movs	r0, r3
 8009290:	f000 fc98 	bl	8009bc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009294:	4b06      	ldr	r3, [pc, #24]	@ (80092b0 <HAL_InitTick+0x64>)
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	e000      	b.n	80092a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
}
 80092a0:	0018      	movs	r0, r3
 80092a2:	46bd      	mov	sp, r7
 80092a4:	b003      	add	sp, #12
 80092a6:	bd90      	pop	{r4, r7, pc}
 80092a8:	2000013c 	.word	0x2000013c
 80092ac:	20000154 	.word	0x20000154
 80092b0:	20000150 	.word	0x20000150

080092b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80092b8:	4b05      	ldr	r3, [pc, #20]	@ (80092d0 <HAL_IncTick+0x1c>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	001a      	movs	r2, r3
 80092be:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <HAL_IncTick+0x20>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	18d2      	adds	r2, r2, r3
 80092c4:	4b03      	ldr	r3, [pc, #12]	@ (80092d4 <HAL_IncTick+0x20>)
 80092c6:	601a      	str	r2, [r3, #0]
}
 80092c8:	46c0      	nop			@ (mov r8, r8)
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	46c0      	nop			@ (mov r8, r8)
 80092d0:	20000154 	.word	0x20000154
 80092d4:	200030b4 	.word	0x200030b4

080092d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
  return uwTick;
 80092dc:	4b02      	ldr	r3, [pc, #8]	@ (80092e8 <HAL_GetTick+0x10>)
 80092de:	681b      	ldr	r3, [r3, #0]
}
 80092e0:	0018      	movs	r0, r3
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	46c0      	nop			@ (mov r8, r8)
 80092e8:	200030b4 	.word	0x200030b4

080092ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092f4:	f7ff fff0 	bl	80092d8 <HAL_GetTick>
 80092f8:	0003      	movs	r3, r0
 80092fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3301      	adds	r3, #1
 8009304:	d005      	beq.n	8009312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009306:	4b0a      	ldr	r3, [pc, #40]	@ (8009330 <HAL_Delay+0x44>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	001a      	movs	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	189b      	adds	r3, r3, r2
 8009310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009312:	46c0      	nop			@ (mov r8, r8)
 8009314:	f7ff ffe0 	bl	80092d8 <HAL_GetTick>
 8009318:	0002      	movs	r2, r0
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	429a      	cmp	r2, r3
 8009322:	d8f7      	bhi.n	8009314 <HAL_Delay+0x28>
  {
  }
}
 8009324:	46c0      	nop			@ (mov r8, r8)
 8009326:	46c0      	nop			@ (mov r8, r8)
 8009328:	46bd      	mov	sp, r7
 800932a:	b004      	add	sp, #16
 800932c:	bd80      	pop	{r7, pc}
 800932e:	46c0      	nop			@ (mov r8, r8)
 8009330:	20000154 	.word	0x20000154

08009334 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8009338:	4b02      	ldr	r3, [pc, #8]	@ (8009344 <HAL_GetUIDw0+0x10>)
 800933a:	681b      	ldr	r3, [r3, #0]
}
 800933c:	0018      	movs	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	46c0      	nop			@ (mov r8, r8)
 8009344:	1ff80050 	.word	0x1ff80050

08009348 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800934c:	4b02      	ldr	r3, [pc, #8]	@ (8009358 <HAL_GetUIDw1+0x10>)
 800934e:	681b      	ldr	r3, [r3, #0]
}
 8009350:	0018      	movs	r0, r3
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	46c0      	nop			@ (mov r8, r8)
 8009358:	1ff80054 	.word	0x1ff80054

0800935c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8009360:	4b02      	ldr	r3, [pc, #8]	@ (800936c <HAL_GetUIDw2+0x10>)
 8009362:	681b      	ldr	r3, [r3, #0]
}
 8009364:	0018      	movs	r0, r3
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	1ff80064 	.word	0x1ff80064

08009370 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e159      	b.n	8009636 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10a      	bne.n	80093a0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2250      	movs	r2, #80	@ 0x50
 8009394:	2100      	movs	r1, #0
 8009396:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	0018      	movs	r0, r3
 800939c:	f7fb fe3c 	bl	8005018 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a4:	2210      	movs	r2, #16
 80093a6:	4013      	ands	r3, r2
 80093a8:	2b10      	cmp	r3, #16
 80093aa:	d005      	beq.n	80093b8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2204      	movs	r2, #4
 80093b4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80093b6:	d00b      	beq.n	80093d0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093bc:	2210      	movs	r2, #16
 80093be:	431a      	orrs	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2250      	movs	r2, #80	@ 0x50
 80093c8:	2100      	movs	r1, #0
 80093ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e132      	b.n	8009636 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d4:	4a9a      	ldr	r2, [pc, #616]	@ (8009640 <HAL_ADC_Init+0x2d0>)
 80093d6:	4013      	ands	r3, r2
 80093d8:	2202      	movs	r2, #2
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	2203      	movs	r2, #3
 80093e8:	4013      	ands	r3, r2
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d108      	bne.n	8009400 <HAL_ADC_Init+0x90>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2201      	movs	r2, #1
 80093f6:	4013      	ands	r3, r2
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d101      	bne.n	8009400 <HAL_ADC_Init+0x90>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <HAL_ADC_Init+0x92>
 8009400:	2300      	movs	r3, #0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d149      	bne.n	800949a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	23c0      	movs	r3, #192	@ 0xc0
 800940c:	061b      	lsls	r3, r3, #24
 800940e:	429a      	cmp	r2, r3
 8009410:	d00b      	beq.n	800942a <HAL_ADC_Init+0xba>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	2380      	movs	r3, #128	@ 0x80
 8009418:	05db      	lsls	r3, r3, #23
 800941a:	429a      	cmp	r2, r3
 800941c:	d005      	beq.n	800942a <HAL_ADC_Init+0xba>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	2380      	movs	r3, #128	@ 0x80
 8009424:	061b      	lsls	r3, r3, #24
 8009426:	429a      	cmp	r2, r3
 8009428:	d111      	bne.n	800944e <HAL_ADC_Init+0xde>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	691a      	ldr	r2, [r3, #16]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	0092      	lsls	r2, r2, #2
 8009436:	0892      	lsrs	r2, r2, #2
 8009438:	611a      	str	r2, [r3, #16]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6919      	ldr	r1, [r3, #16]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	611a      	str	r2, [r3, #16]
 800944c:	e014      	b.n	8009478 <HAL_ADC_Init+0x108>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	0092      	lsls	r2, r2, #2
 800945a:	0892      	lsrs	r2, r2, #2
 800945c:	611a      	str	r2, [r3, #16]
 800945e:	4b79      	ldr	r3, [pc, #484]	@ (8009644 <HAL_ADC_Init+0x2d4>)
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	4b78      	ldr	r3, [pc, #480]	@ (8009644 <HAL_ADC_Init+0x2d4>)
 8009464:	4978      	ldr	r1, [pc, #480]	@ (8009648 <HAL_ADC_Init+0x2d8>)
 8009466:	400a      	ands	r2, r1
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	4b76      	ldr	r3, [pc, #472]	@ (8009644 <HAL_ADC_Init+0x2d4>)
 800946c:	6819      	ldr	r1, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	4b74      	ldr	r3, [pc, #464]	@ (8009644 <HAL_ADC_Init+0x2d4>)
 8009474:	430a      	orrs	r2, r1
 8009476:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2118      	movs	r1, #24
 8009484:	438a      	bics	r2, r1
 8009486:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68d9      	ldr	r1, [r3, #12]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800949a:	4b6a      	ldr	r3, [pc, #424]	@ (8009644 <HAL_ADC_Init+0x2d4>)
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	4b69      	ldr	r3, [pc, #420]	@ (8009644 <HAL_ADC_Init+0x2d4>)
 80094a0:	496a      	ldr	r1, [pc, #424]	@ (800964c <HAL_ADC_Init+0x2dc>)
 80094a2:	400a      	ands	r2, r1
 80094a4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80094a6:	4b67      	ldr	r3, [pc, #412]	@ (8009644 <HAL_ADC_Init+0x2d4>)
 80094a8:	6819      	ldr	r1, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ae:	065a      	lsls	r2, r3, #25
 80094b0:	4b64      	ldr	r3, [pc, #400]	@ (8009644 <HAL_ADC_Init+0x2d4>)
 80094b2:	430a      	orrs	r2, r1
 80094b4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	2380      	movs	r3, #128	@ 0x80
 80094be:	055b      	lsls	r3, r3, #21
 80094c0:	4013      	ands	r3, r2
 80094c2:	d108      	bne.n	80094d6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2180      	movs	r1, #128	@ 0x80
 80094d0:	0549      	lsls	r1, r1, #21
 80094d2:	430a      	orrs	r2, r1
 80094d4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	495b      	ldr	r1, [pc, #364]	@ (8009650 <HAL_ADC_Init+0x2e0>)
 80094e2:	400a      	ands	r2, r1
 80094e4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68d9      	ldr	r1, [r3, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d101      	bne.n	80094fc <HAL_ADC_Init+0x18c>
 80094f8:	2304      	movs	r3, #4
 80094fa:	e000      	b.n	80094fe <HAL_ADC_Init+0x18e>
 80094fc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80094fe:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2020      	movs	r0, #32
 8009504:	5c1b      	ldrb	r3, [r3, r0]
 8009506:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009508:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	202c      	movs	r0, #44	@ 0x2c
 800950e:	5c1b      	ldrb	r3, [r3, r0]
 8009510:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009512:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009518:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8009520:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009528:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009536:	23c2      	movs	r3, #194	@ 0xc2
 8009538:	33ff      	adds	r3, #255	@ 0xff
 800953a:	429a      	cmp	r2, r3
 800953c:	d00b      	beq.n	8009556 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68d9      	ldr	r1, [r3, #12]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	430a      	orrs	r2, r1
 8009554:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2221      	movs	r2, #33	@ 0x21
 800955a:	5c9b      	ldrb	r3, [r3, r2]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d11a      	bne.n	8009596 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	5c9b      	ldrb	r3, [r3, r2]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d109      	bne.n	800957e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2180      	movs	r1, #128	@ 0x80
 8009576:	0249      	lsls	r1, r1, #9
 8009578:	430a      	orrs	r2, r1
 800957a:	60da      	str	r2, [r3, #12]
 800957c:	e00b      	b.n	8009596 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009582:	2220      	movs	r2, #32
 8009584:	431a      	orrs	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800958e:	2201      	movs	r2, #1
 8009590:	431a      	orrs	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800959a:	2b01      	cmp	r3, #1
 800959c:	d11f      	bne.n	80095de <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	492a      	ldr	r1, [pc, #168]	@ (8009654 <HAL_ADC_Init+0x2e4>)
 80095aa:	400a      	ands	r2, r1
 80095ac:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6919      	ldr	r1, [r3, #16]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80095bc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80095c2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2101      	movs	r1, #1
 80095d8:	430a      	orrs	r2, r1
 80095da:	611a      	str	r2, [r3, #16]
 80095dc:	e00e      	b.n	80095fc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	2201      	movs	r2, #1
 80095e6:	4013      	ands	r3, r2
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d107      	bne.n	80095fc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	691a      	ldr	r2, [r3, #16]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2101      	movs	r1, #1
 80095f8:	438a      	bics	r2, r1
 80095fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	695a      	ldr	r2, [r3, #20]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2107      	movs	r1, #7
 8009608:	438a      	bics	r2, r1
 800960a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6959      	ldr	r1, [r3, #20]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009628:	2203      	movs	r2, #3
 800962a:	4393      	bics	r3, r2
 800962c:	2201      	movs	r2, #1
 800962e:	431a      	orrs	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	0018      	movs	r0, r3
 8009638:	46bd      	mov	sp, r7
 800963a:	b002      	add	sp, #8
 800963c:	bd80      	pop	{r7, pc}
 800963e:	46c0      	nop			@ (mov r8, r8)
 8009640:	fffffefd 	.word	0xfffffefd
 8009644:	40012708 	.word	0x40012708
 8009648:	ffc3ffff 	.word	0xffc3ffff
 800964c:	fdffffff 	.word	0xfdffffff
 8009650:	fffe0219 	.word	0xfffe0219
 8009654:	fffffc03 	.word	0xfffffc03

08009658 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8009658:	b590      	push	{r4, r7, lr}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009660:	230f      	movs	r3, #15
 8009662:	18fb      	adds	r3, r7, r3
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	2204      	movs	r2, #4
 8009670:	4013      	ands	r3, r2
 8009672:	d138      	bne.n	80096e6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2250      	movs	r2, #80	@ 0x50
 8009678:	5c9b      	ldrb	r3, [r3, r2]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d101      	bne.n	8009682 <HAL_ADC_Start+0x2a>
 800967e:	2302      	movs	r3, #2
 8009680:	e038      	b.n	80096f4 <HAL_ADC_Start+0x9c>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2250      	movs	r2, #80	@ 0x50
 8009686:	2101      	movs	r1, #1
 8009688:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d007      	beq.n	80096a2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8009692:	230f      	movs	r3, #15
 8009694:	18fc      	adds	r4, r7, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	0018      	movs	r0, r3
 800969a:	f000 f95f 	bl	800995c <ADC_Enable>
 800969e:	0003      	movs	r3, r0
 80096a0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80096a2:	230f      	movs	r3, #15
 80096a4:	18fb      	adds	r3, r7, r3
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d120      	bne.n	80096ee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b0:	4a12      	ldr	r2, [pc, #72]	@ (80096fc <HAL_ADC_Start+0xa4>)
 80096b2:	4013      	ands	r3, r2
 80096b4:	2280      	movs	r2, #128	@ 0x80
 80096b6:	0052      	lsls	r2, r2, #1
 80096b8:	431a      	orrs	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2250      	movs	r2, #80	@ 0x50
 80096c8:	2100      	movs	r1, #0
 80096ca:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	221c      	movs	r2, #28
 80096d2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689a      	ldr	r2, [r3, #8]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2104      	movs	r1, #4
 80096e0:	430a      	orrs	r2, r1
 80096e2:	609a      	str	r2, [r3, #8]
 80096e4:	e003      	b.n	80096ee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80096e6:	230f      	movs	r3, #15
 80096e8:	18fb      	adds	r3, r7, r3
 80096ea:	2202      	movs	r2, #2
 80096ec:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80096ee:	230f      	movs	r3, #15
 80096f0:	18fb      	adds	r3, r7, r3
 80096f2:	781b      	ldrb	r3, [r3, #0]
}
 80096f4:	0018      	movs	r0, r3
 80096f6:	46bd      	mov	sp, r7
 80096f8:	b005      	add	sp, #20
 80096fa:	bd90      	pop	{r4, r7, pc}
 80096fc:	fffff0fe 	.word	0xfffff0fe

08009700 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800970e:	2300      	movs	r3, #0
 8009710:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	2b08      	cmp	r3, #8
 8009718:	d102      	bne.n	8009720 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800971a:	2308      	movs	r3, #8
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	e014      	b.n	800974a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2201      	movs	r2, #1
 8009728:	4013      	ands	r3, r2
 800972a:	2b01      	cmp	r3, #1
 800972c:	d10b      	bne.n	8009746 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009732:	2220      	movs	r2, #32
 8009734:	431a      	orrs	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2250      	movs	r2, #80	@ 0x50
 800973e:	2100      	movs	r1, #0
 8009740:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e072      	b.n	800982c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8009746:	230c      	movs	r3, #12
 8009748:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800974a:	f7ff fdc5 	bl	80092d8 <HAL_GetTick>
 800974e:	0003      	movs	r3, r0
 8009750:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009752:	e01f      	b.n	8009794 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	3301      	adds	r3, #1
 8009758:	d01c      	beq.n	8009794 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d007      	beq.n	8009770 <HAL_ADC_PollForConversion+0x70>
 8009760:	f7ff fdba 	bl	80092d8 <HAL_GetTick>
 8009764:	0002      	movs	r2, r0
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	429a      	cmp	r2, r3
 800976e:	d211      	bcs.n	8009794 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4013      	ands	r3, r2
 800977a:	d10b      	bne.n	8009794 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009780:	2204      	movs	r2, #4
 8009782:	431a      	orrs	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2250      	movs	r2, #80	@ 0x50
 800978c:	2100      	movs	r1, #0
 800978e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e04b      	b.n	800982c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4013      	ands	r3, r2
 800979e:	d0d9      	beq.n	8009754 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a4:	2280      	movs	r2, #128	@ 0x80
 80097a6:	0092      	lsls	r2, r2, #2
 80097a8:	431a      	orrs	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	23c0      	movs	r3, #192	@ 0xc0
 80097b6:	011b      	lsls	r3, r3, #4
 80097b8:	4013      	ands	r3, r2
 80097ba:	d12e      	bne.n	800981a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2220      	movs	r2, #32
 80097c0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d129      	bne.n	800981a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2208      	movs	r2, #8
 80097ce:	4013      	ands	r3, r2
 80097d0:	2b08      	cmp	r3, #8
 80097d2:	d122      	bne.n	800981a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	2204      	movs	r2, #4
 80097dc:	4013      	ands	r3, r2
 80097de:	d110      	bne.n	8009802 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	210c      	movs	r1, #12
 80097ec:	438a      	bics	r2, r1
 80097ee:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f4:	4a0f      	ldr	r2, [pc, #60]	@ (8009834 <HAL_ADC_PollForConversion+0x134>)
 80097f6:	4013      	ands	r3, r2
 80097f8:	2201      	movs	r2, #1
 80097fa:	431a      	orrs	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8009800:	e00b      	b.n	800981a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009806:	2220      	movs	r2, #32
 8009808:	431a      	orrs	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009812:	2201      	movs	r2, #1
 8009814:	431a      	orrs	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d103      	bne.n	800982a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	220c      	movs	r2, #12
 8009828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	0018      	movs	r0, r3
 800982e:	46bd      	mov	sp, r7
 8009830:	b004      	add	sp, #16
 8009832:	bd80      	pop	{r7, pc}
 8009834:	fffffefe 	.word	0xfffffefe

08009838 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8009846:	0018      	movs	r0, r3
 8009848:	46bd      	mov	sp, r7
 800984a:	b002      	add	sp, #8
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2250      	movs	r2, #80	@ 0x50
 800985e:	5c9b      	ldrb	r3, [r3, r2]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d101      	bne.n	8009868 <HAL_ADC_ConfigChannel+0x18>
 8009864:	2302      	movs	r3, #2
 8009866:	e06c      	b.n	8009942 <HAL_ADC_ConfigChannel+0xf2>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2250      	movs	r2, #80	@ 0x50
 800986c:	2101      	movs	r1, #1
 800986e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	2204      	movs	r2, #4
 8009878:	4013      	ands	r3, r2
 800987a:	d00b      	beq.n	8009894 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009880:	2220      	movs	r2, #32
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2250      	movs	r2, #80	@ 0x50
 800988c:	2100      	movs	r1, #0
 800988e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e056      	b.n	8009942 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	4a2c      	ldr	r2, [pc, #176]	@ (800994c <HAL_ADC_ConfigChannel+0xfc>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d028      	beq.n	80098f0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	035b      	lsls	r3, r3, #13
 80098aa:	0b5a      	lsrs	r2, r3, #13
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	2380      	movs	r3, #128	@ 0x80
 80098ba:	02db      	lsls	r3, r3, #11
 80098bc:	4013      	ands	r3, r2
 80098be:	d009      	beq.n	80098d4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80098c0:	4b23      	ldr	r3, [pc, #140]	@ (8009950 <HAL_ADC_ConfigChannel+0x100>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	4b22      	ldr	r3, [pc, #136]	@ (8009950 <HAL_ADC_ConfigChannel+0x100>)
 80098c6:	2180      	movs	r1, #128	@ 0x80
 80098c8:	0409      	lsls	r1, r1, #16
 80098ca:	430a      	orrs	r2, r1
 80098cc:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80098ce:	200a      	movs	r0, #10
 80098d0:	f000 f8ac 	bl	8009a2c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	2380      	movs	r3, #128	@ 0x80
 80098da:	029b      	lsls	r3, r3, #10
 80098dc:	4013      	ands	r3, r2
 80098de:	d02b      	beq.n	8009938 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80098e0:	4b1b      	ldr	r3, [pc, #108]	@ (8009950 <HAL_ADC_ConfigChannel+0x100>)
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009950 <HAL_ADC_ConfigChannel+0x100>)
 80098e6:	2180      	movs	r1, #128	@ 0x80
 80098e8:	03c9      	lsls	r1, r1, #15
 80098ea:	430a      	orrs	r2, r1
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e023      	b.n	8009938 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	035b      	lsls	r3, r3, #13
 80098fc:	0b5b      	lsrs	r3, r3, #13
 80098fe:	43d9      	mvns	r1, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	400a      	ands	r2, r1
 8009906:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	2380      	movs	r3, #128	@ 0x80
 800990e:	02db      	lsls	r3, r3, #11
 8009910:	4013      	ands	r3, r2
 8009912:	d005      	beq.n	8009920 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8009914:	4b0e      	ldr	r3, [pc, #56]	@ (8009950 <HAL_ADC_ConfigChannel+0x100>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	4b0d      	ldr	r3, [pc, #52]	@ (8009950 <HAL_ADC_ConfigChannel+0x100>)
 800991a:	490e      	ldr	r1, [pc, #56]	@ (8009954 <HAL_ADC_ConfigChannel+0x104>)
 800991c:	400a      	ands	r2, r1
 800991e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	2380      	movs	r3, #128	@ 0x80
 8009926:	029b      	lsls	r3, r3, #10
 8009928:	4013      	ands	r3, r2
 800992a:	d005      	beq.n	8009938 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800992c:	4b08      	ldr	r3, [pc, #32]	@ (8009950 <HAL_ADC_ConfigChannel+0x100>)
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <HAL_ADC_ConfigChannel+0x100>)
 8009932:	4909      	ldr	r1, [pc, #36]	@ (8009958 <HAL_ADC_ConfigChannel+0x108>)
 8009934:	400a      	ands	r2, r1
 8009936:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2250      	movs	r2, #80	@ 0x50
 800993c:	2100      	movs	r1, #0
 800993e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	0018      	movs	r0, r3
 8009944:	46bd      	mov	sp, r7
 8009946:	b002      	add	sp, #8
 8009948:	bd80      	pop	{r7, pc}
 800994a:	46c0      	nop			@ (mov r8, r8)
 800994c:	00001001 	.word	0x00001001
 8009950:	40012708 	.word	0x40012708
 8009954:	ff7fffff 	.word	0xff7fffff
 8009958:	ffbfffff 	.word	0xffbfffff

0800995c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	2203      	movs	r2, #3
 8009970:	4013      	ands	r3, r2
 8009972:	2b01      	cmp	r3, #1
 8009974:	d108      	bne.n	8009988 <ADC_Enable+0x2c>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2201      	movs	r2, #1
 800997e:	4013      	ands	r3, r2
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <ADC_Enable+0x2c>
 8009984:	2301      	movs	r3, #1
 8009986:	e000      	b.n	800998a <ADC_Enable+0x2e>
 8009988:	2300      	movs	r3, #0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d146      	bne.n	8009a1c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	4a24      	ldr	r2, [pc, #144]	@ (8009a28 <ADC_Enable+0xcc>)
 8009996:	4013      	ands	r3, r2
 8009998:	d00d      	beq.n	80099b6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800999e:	2210      	movs	r2, #16
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099aa:	2201      	movs	r2, #1
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e033      	b.n	8009a1e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2101      	movs	r1, #1
 80099c2:	430a      	orrs	r2, r1
 80099c4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80099c6:	2001      	movs	r0, #1
 80099c8:	f000 f830 	bl	8009a2c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80099cc:	f7ff fc84 	bl	80092d8 <HAL_GetTick>
 80099d0:	0003      	movs	r3, r0
 80099d2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80099d4:	e01b      	b.n	8009a0e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80099d6:	f7ff fc7f 	bl	80092d8 <HAL_GetTick>
 80099da:	0002      	movs	r2, r0
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	2b0a      	cmp	r3, #10
 80099e2:	d914      	bls.n	8009a0e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2201      	movs	r2, #1
 80099ec:	4013      	ands	r3, r2
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d00d      	beq.n	8009a0e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099f6:	2210      	movs	r2, #16
 80099f8:	431a      	orrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a02:	2201      	movs	r2, #1
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e007      	b.n	8009a1e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2201      	movs	r2, #1
 8009a16:	4013      	ands	r3, r2
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d1dc      	bne.n	80099d6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	0018      	movs	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b004      	add	sp, #16
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	46c0      	nop			@ (mov r8, r8)
 8009a28:	80000017 	.word	0x80000017

08009a2c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8009a34:	4b0b      	ldr	r3, [pc, #44]	@ (8009a64 <ADC_DelayMicroSecond+0x38>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	490b      	ldr	r1, [pc, #44]	@ (8009a68 <ADC_DelayMicroSecond+0x3c>)
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f7f6 fb80 	bl	8000140 <__udivsi3>
 8009a40:	0003      	movs	r3, r0
 8009a42:	001a      	movs	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4353      	muls	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8009a4a:	e002      	b.n	8009a52 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1f9      	bne.n	8009a4c <ADC_DelayMicroSecond+0x20>
  }
}
 8009a58:	46c0      	nop			@ (mov r8, r8)
 8009a5a:	46c0      	nop			@ (mov r8, r8)
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	b004      	add	sp, #16
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	46c0      	nop			@ (mov r8, r8)
 8009a64:	2000013c 	.word	0x2000013c
 8009a68:	000f4240 	.word	0x000f4240

08009a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	0002      	movs	r2, r0
 8009a74:	1dfb      	adds	r3, r7, #7
 8009a76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009a78:	1dfb      	adds	r3, r7, #7
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a7e:	d809      	bhi.n	8009a94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a80:	1dfb      	adds	r3, r7, #7
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	001a      	movs	r2, r3
 8009a86:	231f      	movs	r3, #31
 8009a88:	401a      	ands	r2, r3
 8009a8a:	4b04      	ldr	r3, [pc, #16]	@ (8009a9c <__NVIC_EnableIRQ+0x30>)
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	4091      	lsls	r1, r2
 8009a90:	000a      	movs	r2, r1
 8009a92:	601a      	str	r2, [r3, #0]
  }
}
 8009a94:	46c0      	nop			@ (mov r8, r8)
 8009a96:	46bd      	mov	sp, r7
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	e000e100 	.word	0xe000e100

08009aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009aa0:	b590      	push	{r4, r7, lr}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	0002      	movs	r2, r0
 8009aa8:	6039      	str	r1, [r7, #0]
 8009aaa:	1dfb      	adds	r3, r7, #7
 8009aac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009aae:	1dfb      	adds	r3, r7, #7
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ab4:	d828      	bhi.n	8009b08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8009b74 <__NVIC_SetPriority+0xd4>)
 8009ab8:	1dfb      	adds	r3, r7, #7
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	b25b      	sxtb	r3, r3
 8009abe:	089b      	lsrs	r3, r3, #2
 8009ac0:	33c0      	adds	r3, #192	@ 0xc0
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	589b      	ldr	r3, [r3, r2]
 8009ac6:	1dfa      	adds	r2, r7, #7
 8009ac8:	7812      	ldrb	r2, [r2, #0]
 8009aca:	0011      	movs	r1, r2
 8009acc:	2203      	movs	r2, #3
 8009ace:	400a      	ands	r2, r1
 8009ad0:	00d2      	lsls	r2, r2, #3
 8009ad2:	21ff      	movs	r1, #255	@ 0xff
 8009ad4:	4091      	lsls	r1, r2
 8009ad6:	000a      	movs	r2, r1
 8009ad8:	43d2      	mvns	r2, r2
 8009ada:	401a      	ands	r2, r3
 8009adc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	019b      	lsls	r3, r3, #6
 8009ae2:	22ff      	movs	r2, #255	@ 0xff
 8009ae4:	401a      	ands	r2, r3
 8009ae6:	1dfb      	adds	r3, r7, #7
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	0018      	movs	r0, r3
 8009aec:	2303      	movs	r3, #3
 8009aee:	4003      	ands	r3, r0
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009af4:	481f      	ldr	r0, [pc, #124]	@ (8009b74 <__NVIC_SetPriority+0xd4>)
 8009af6:	1dfb      	adds	r3, r7, #7
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	b25b      	sxtb	r3, r3
 8009afc:	089b      	lsrs	r3, r3, #2
 8009afe:	430a      	orrs	r2, r1
 8009b00:	33c0      	adds	r3, #192	@ 0xc0
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009b06:	e031      	b.n	8009b6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b08:	4a1b      	ldr	r2, [pc, #108]	@ (8009b78 <__NVIC_SetPriority+0xd8>)
 8009b0a:	1dfb      	adds	r3, r7, #7
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	0019      	movs	r1, r3
 8009b10:	230f      	movs	r3, #15
 8009b12:	400b      	ands	r3, r1
 8009b14:	3b08      	subs	r3, #8
 8009b16:	089b      	lsrs	r3, r3, #2
 8009b18:	3306      	adds	r3, #6
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	18d3      	adds	r3, r2, r3
 8009b1e:	3304      	adds	r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	1dfa      	adds	r2, r7, #7
 8009b24:	7812      	ldrb	r2, [r2, #0]
 8009b26:	0011      	movs	r1, r2
 8009b28:	2203      	movs	r2, #3
 8009b2a:	400a      	ands	r2, r1
 8009b2c:	00d2      	lsls	r2, r2, #3
 8009b2e:	21ff      	movs	r1, #255	@ 0xff
 8009b30:	4091      	lsls	r1, r2
 8009b32:	000a      	movs	r2, r1
 8009b34:	43d2      	mvns	r2, r2
 8009b36:	401a      	ands	r2, r3
 8009b38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	019b      	lsls	r3, r3, #6
 8009b3e:	22ff      	movs	r2, #255	@ 0xff
 8009b40:	401a      	ands	r2, r3
 8009b42:	1dfb      	adds	r3, r7, #7
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	0018      	movs	r0, r3
 8009b48:	2303      	movs	r3, #3
 8009b4a:	4003      	ands	r3, r0
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b50:	4809      	ldr	r0, [pc, #36]	@ (8009b78 <__NVIC_SetPriority+0xd8>)
 8009b52:	1dfb      	adds	r3, r7, #7
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	001c      	movs	r4, r3
 8009b58:	230f      	movs	r3, #15
 8009b5a:	4023      	ands	r3, r4
 8009b5c:	3b08      	subs	r3, #8
 8009b5e:	089b      	lsrs	r3, r3, #2
 8009b60:	430a      	orrs	r2, r1
 8009b62:	3306      	adds	r3, #6
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	18c3      	adds	r3, r0, r3
 8009b68:	3304      	adds	r3, #4
 8009b6a:	601a      	str	r2, [r3, #0]
}
 8009b6c:	46c0      	nop			@ (mov r8, r8)
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	b003      	add	sp, #12
 8009b72:	bd90      	pop	{r4, r7, pc}
 8009b74:	e000e100 	.word	0xe000e100
 8009b78:	e000ed00 	.word	0xe000ed00

08009b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	1e5a      	subs	r2, r3, #1
 8009b88:	2380      	movs	r3, #128	@ 0x80
 8009b8a:	045b      	lsls	r3, r3, #17
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d301      	bcc.n	8009b94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b90:	2301      	movs	r3, #1
 8009b92:	e010      	b.n	8009bb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b94:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc0 <SysTick_Config+0x44>)
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	3a01      	subs	r2, #1
 8009b9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	425b      	negs	r3, r3
 8009ba0:	2103      	movs	r1, #3
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	f7ff ff7c 	bl	8009aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ba8:	4b05      	ldr	r3, [pc, #20]	@ (8009bc0 <SysTick_Config+0x44>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009bae:	4b04      	ldr	r3, [pc, #16]	@ (8009bc0 <SysTick_Config+0x44>)
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	0018      	movs	r0, r3
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	b002      	add	sp, #8
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	46c0      	nop			@ (mov r8, r8)
 8009bc0:	e000e010 	.word	0xe000e010

08009bc4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	210f      	movs	r1, #15
 8009bd0:	187b      	adds	r3, r7, r1
 8009bd2:	1c02      	adds	r2, r0, #0
 8009bd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	187b      	adds	r3, r7, r1
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	b25b      	sxtb	r3, r3
 8009bde:	0011      	movs	r1, r2
 8009be0:	0018      	movs	r0, r3
 8009be2:	f7ff ff5d 	bl	8009aa0 <__NVIC_SetPriority>
}
 8009be6:	46c0      	nop			@ (mov r8, r8)
 8009be8:	46bd      	mov	sp, r7
 8009bea:	b004      	add	sp, #16
 8009bec:	bd80      	pop	{r7, pc}

08009bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	0002      	movs	r2, r0
 8009bf6:	1dfb      	adds	r3, r7, #7
 8009bf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009bfa:	1dfb      	adds	r3, r7, #7
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	b25b      	sxtb	r3, r3
 8009c00:	0018      	movs	r0, r3
 8009c02:	f7ff ff33 	bl	8009a6c <__NVIC_EnableIRQ>
}
 8009c06:	46c0      	nop			@ (mov r8, r8)
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	b002      	add	sp, #8
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f7ff ffaf 	bl	8009b7c <SysTick_Config>
 8009c1e:	0003      	movs	r3, r0
}
 8009c20:	0018      	movs	r0, r3
 8009c22:	46bd      	mov	sp, r7
 8009c24:	b002      	add	sp, #8
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e061      	b.n	8009cfe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a32      	ldr	r2, [pc, #200]	@ (8009d08 <HAL_DMA_Init+0xe0>)
 8009c40:	4694      	mov	ip, r2
 8009c42:	4463      	add	r3, ip
 8009c44:	2114      	movs	r1, #20
 8009c46:	0018      	movs	r0, r3
 8009c48:	f7f6 fa7a 	bl	8000140 <__udivsi3>
 8009c4c:	0003      	movs	r3, r0
 8009c4e:	009a      	lsls	r2, r3, #2
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a2d      	ldr	r2, [pc, #180]	@ (8009d0c <HAL_DMA_Init+0xe4>)
 8009c58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2225      	movs	r2, #37	@ 0x25
 8009c5e:	2102      	movs	r1, #2
 8009c60:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4a28      	ldr	r2, [pc, #160]	@ (8009d10 <HAL_DMA_Init+0xe8>)
 8009c6e:	4013      	ands	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	2380      	movs	r3, #128	@ 0x80
 8009cae:	01db      	lsls	r3, r3, #7
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d018      	beq.n	8009ce6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009cb4:	4b17      	ldr	r3, [pc, #92]	@ (8009d14 <HAL_DMA_Init+0xec>)
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cbc:	211c      	movs	r1, #28
 8009cbe:	400b      	ands	r3, r1
 8009cc0:	210f      	movs	r1, #15
 8009cc2:	4099      	lsls	r1, r3
 8009cc4:	000b      	movs	r3, r1
 8009cc6:	43d9      	mvns	r1, r3
 8009cc8:	4b12      	ldr	r3, [pc, #72]	@ (8009d14 <HAL_DMA_Init+0xec>)
 8009cca:	400a      	ands	r2, r1
 8009ccc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009cce:	4b11      	ldr	r3, [pc, #68]	@ (8009d14 <HAL_DMA_Init+0xec>)
 8009cd0:	6819      	ldr	r1, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cda:	201c      	movs	r0, #28
 8009cdc:	4003      	ands	r3, r0
 8009cde:	409a      	lsls	r2, r3
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d14 <HAL_DMA_Init+0xec>)
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2225      	movs	r2, #37	@ 0x25
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2224      	movs	r2, #36	@ 0x24
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	0018      	movs	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	b004      	add	sp, #16
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	46c0      	nop			@ (mov r8, r8)
 8009d08:	bffdfff8 	.word	0xbffdfff8
 8009d0c:	40020000 	.word	0x40020000
 8009d10:	ffff800f 	.word	0xffff800f
 8009d14:	400200a8 	.word	0x400200a8

08009d18 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e04a      	b.n	8009dc0 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2101      	movs	r1, #1
 8009d36:	438a      	bics	r2, r1
 8009d38:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a22      	ldr	r2, [pc, #136]	@ (8009dc8 <HAL_DMA_DeInit+0xb0>)
 8009d40:	4694      	mov	ip, r2
 8009d42:	4463      	add	r3, ip
 8009d44:	2114      	movs	r1, #20
 8009d46:	0018      	movs	r0, r3
 8009d48:	f7f6 f9fa 	bl	8000140 <__udivsi3>
 8009d4c:	0003      	movs	r3, r0
 8009d4e:	009a      	lsls	r2, r3, #2
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a1d      	ldr	r2, [pc, #116]	@ (8009dcc <HAL_DMA_DeInit+0xb4>)
 8009d58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d66:	221c      	movs	r2, #28
 8009d68:	401a      	ands	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6e:	2101      	movs	r1, #1
 8009d70:	4091      	lsls	r1, r2
 8009d72:	000a      	movs	r2, r1
 8009d74:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009d76:	4b16      	ldr	r3, [pc, #88]	@ (8009dd0 <HAL_DMA_DeInit+0xb8>)
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d7e:	211c      	movs	r1, #28
 8009d80:	400b      	ands	r3, r1
 8009d82:	210f      	movs	r1, #15
 8009d84:	4099      	lsls	r1, r3
 8009d86:	000b      	movs	r3, r1
 8009d88:	43d9      	mvns	r1, r3
 8009d8a:	4b11      	ldr	r3, [pc, #68]	@ (8009dd0 <HAL_DMA_DeInit+0xb8>)
 8009d8c:	400a      	ands	r2, r1
 8009d8e:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2225      	movs	r2, #37	@ 0x25
 8009db2:	2100      	movs	r1, #0
 8009db4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2224      	movs	r2, #36	@ 0x24
 8009dba:	2100      	movs	r1, #0
 8009dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	b002      	add	sp, #8
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	bffdfff8 	.word	0xbffdfff8
 8009dcc:	40020000 	.word	0x40020000
 8009dd0:	400200a8 	.word	0x400200a8

08009dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009de2:	2317      	movs	r3, #23
 8009de4:	18fb      	adds	r3, r7, r3
 8009de6:	2200      	movs	r2, #0
 8009de8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2224      	movs	r2, #36	@ 0x24
 8009dee:	5c9b      	ldrb	r3, [r3, r2]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d101      	bne.n	8009df8 <HAL_DMA_Start_IT+0x24>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e04f      	b.n	8009e98 <HAL_DMA_Start_IT+0xc4>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2224      	movs	r2, #36	@ 0x24
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2225      	movs	r2, #37	@ 0x25
 8009e04:	5c9b      	ldrb	r3, [r3, r2]
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d13a      	bne.n	8009e82 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2225      	movs	r2, #37	@ 0x25
 8009e10:	2102      	movs	r1, #2
 8009e12:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2101      	movs	r1, #1
 8009e26:	438a      	bics	r2, r1
 8009e28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	68b9      	ldr	r1, [r7, #8]
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 f976 	bl	800a122 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d008      	beq.n	8009e50 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	210e      	movs	r1, #14
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	e00f      	b.n	8009e70 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2104      	movs	r1, #4
 8009e5c:	438a      	bics	r2, r1
 8009e5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	210a      	movs	r1, #10
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	601a      	str	r2, [r3, #0]
 8009e80:	e007      	b.n	8009e92 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2224      	movs	r2, #36	@ 0x24
 8009e86:	2100      	movs	r1, #0
 8009e88:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009e8a:	2317      	movs	r3, #23
 8009e8c:	18fb      	adds	r3, r7, r3
 8009e8e:	2202      	movs	r2, #2
 8009e90:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009e92:	2317      	movs	r3, #23
 8009e94:	18fb      	adds	r3, r7, r3
 8009e96:	781b      	ldrb	r3, [r3, #0]
}
 8009e98:	0018      	movs	r0, r3
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	b006      	add	sp, #24
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea8:	230f      	movs	r3, #15
 8009eaa:	18fb      	adds	r3, r7, r3
 8009eac:	2200      	movs	r2, #0
 8009eae:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2225      	movs	r2, #37	@ 0x25
 8009eb4:	5c9b      	ldrb	r3, [r3, r2]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d008      	beq.n	8009ece <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2224      	movs	r2, #36	@ 0x24
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e024      	b.n	8009f18 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	210e      	movs	r1, #14
 8009eda:	438a      	bics	r2, r1
 8009edc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2101      	movs	r1, #1
 8009eea:	438a      	bics	r2, r1
 8009eec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ef2:	221c      	movs	r2, #28
 8009ef4:	401a      	ands	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efa:	2101      	movs	r1, #1
 8009efc:	4091      	lsls	r1, r2
 8009efe:	000a      	movs	r2, r1
 8009f00:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2225      	movs	r2, #37	@ 0x25
 8009f06:	2101      	movs	r1, #1
 8009f08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2224      	movs	r2, #36	@ 0x24
 8009f0e:	2100      	movs	r1, #0
 8009f10:	5499      	strb	r1, [r3, r2]

    return status;
 8009f12:	230f      	movs	r3, #15
 8009f14:	18fb      	adds	r3, r7, r3
 8009f16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f18:	0018      	movs	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	b004      	add	sp, #16
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f28:	210f      	movs	r1, #15
 8009f2a:	187b      	adds	r3, r7, r1
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2225      	movs	r2, #37	@ 0x25
 8009f34:	5c9b      	ldrb	r3, [r3, r2]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d006      	beq.n	8009f4a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2204      	movs	r2, #4
 8009f40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009f42:	187b      	adds	r3, r7, r1
 8009f44:	2201      	movs	r2, #1
 8009f46:	701a      	strb	r2, [r3, #0]
 8009f48:	e02a      	b.n	8009fa0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	210e      	movs	r1, #14
 8009f56:	438a      	bics	r2, r1
 8009f58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2101      	movs	r1, #1
 8009f66:	438a      	bics	r2, r1
 8009f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6e:	221c      	movs	r2, #28
 8009f70:	401a      	ands	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f76:	2101      	movs	r1, #1
 8009f78:	4091      	lsls	r1, r2
 8009f7a:	000a      	movs	r2, r1
 8009f7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2225      	movs	r2, #37	@ 0x25
 8009f82:	2101      	movs	r1, #1
 8009f84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2224      	movs	r2, #36	@ 0x24
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d004      	beq.n	8009fa0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	0010      	movs	r0, r2
 8009f9e:	4798      	blx	r3
    }
  }
  return status;
 8009fa0:	230f      	movs	r3, #15
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	781b      	ldrb	r3, [r3, #0]
}
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	b004      	add	sp, #16
 8009fac:	bd80      	pop	{r7, pc}

08009fae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b084      	sub	sp, #16
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fca:	221c      	movs	r2, #28
 8009fcc:	4013      	ands	r3, r2
 8009fce:	2204      	movs	r2, #4
 8009fd0:	409a      	lsls	r2, r3
 8009fd2:	0013      	movs	r3, r2
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	d026      	beq.n	800a028 <HAL_DMA_IRQHandler+0x7a>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2204      	movs	r2, #4
 8009fde:	4013      	ands	r3, r2
 8009fe0:	d022      	beq.n	800a028 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	4013      	ands	r3, r2
 8009fec:	d107      	bne.n	8009ffe <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2104      	movs	r1, #4
 8009ffa:	438a      	bics	r2, r1
 8009ffc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a002:	221c      	movs	r2, #28
 800a004:	401a      	ands	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a00a:	2104      	movs	r1, #4
 800a00c:	4091      	lsls	r1, r2
 800a00e:	000a      	movs	r2, r1
 800a010:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a016:	2b00      	cmp	r3, #0
 800a018:	d100      	bne.n	800a01c <HAL_DMA_IRQHandler+0x6e>
 800a01a:	e071      	b.n	800a100 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	0010      	movs	r0, r2
 800a024:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800a026:	e06b      	b.n	800a100 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02c:	221c      	movs	r2, #28
 800a02e:	4013      	ands	r3, r2
 800a030:	2202      	movs	r2, #2
 800a032:	409a      	lsls	r2, r3
 800a034:	0013      	movs	r3, r2
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4013      	ands	r3, r2
 800a03a:	d02d      	beq.n	800a098 <HAL_DMA_IRQHandler+0xea>
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2202      	movs	r2, #2
 800a040:	4013      	ands	r3, r2
 800a042:	d029      	beq.n	800a098 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2220      	movs	r2, #32
 800a04c:	4013      	ands	r3, r2
 800a04e:	d10b      	bne.n	800a068 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	210a      	movs	r1, #10
 800a05c:	438a      	bics	r2, r1
 800a05e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2225      	movs	r2, #37	@ 0x25
 800a064:	2101      	movs	r1, #1
 800a066:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a06c:	221c      	movs	r2, #28
 800a06e:	401a      	ands	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a074:	2102      	movs	r1, #2
 800a076:	4091      	lsls	r1, r2
 800a078:	000a      	movs	r2, r1
 800a07a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2224      	movs	r2, #36	@ 0x24
 800a080:	2100      	movs	r1, #0
 800a082:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d039      	beq.n	800a100 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	0010      	movs	r0, r2
 800a094:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a096:	e033      	b.n	800a100 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a09c:	221c      	movs	r2, #28
 800a09e:	4013      	ands	r3, r2
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	409a      	lsls	r2, r3
 800a0a4:	0013      	movs	r3, r2
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	d02a      	beq.n	800a102 <HAL_DMA_IRQHandler+0x154>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2208      	movs	r2, #8
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	d026      	beq.n	800a102 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	210e      	movs	r1, #14
 800a0c0:	438a      	bics	r2, r1
 800a0c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0c8:	221c      	movs	r2, #28
 800a0ca:	401a      	ands	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	4091      	lsls	r1, r2
 800a0d4:	000a      	movs	r2, r1
 800a0d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2225      	movs	r2, #37	@ 0x25
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2224      	movs	r2, #36	@ 0x24
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	0010      	movs	r0, r2
 800a0fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a100:	46c0      	nop			@ (mov r8, r8)
 800a102:	46c0      	nop			@ (mov r8, r8)
}
 800a104:	46bd      	mov	sp, r7
 800a106:	b004      	add	sp, #16
 800a108:	bd80      	pop	{r7, pc}

0800a10a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2225      	movs	r2, #37	@ 0x25
 800a116:	5c9b      	ldrb	r3, [r3, r2]
 800a118:	b2db      	uxtb	r3, r3
}
 800a11a:	0018      	movs	r0, r3
 800a11c:	46bd      	mov	sp, r7
 800a11e:	b002      	add	sp, #8
 800a120:	bd80      	pop	{r7, pc}

0800a122 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
 800a12e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a134:	221c      	movs	r2, #28
 800a136:	401a      	ands	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13c:	2101      	movs	r1, #1
 800a13e:	4091      	lsls	r1, r2
 800a140:	000a      	movs	r2, r1
 800a142:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	2b10      	cmp	r3, #16
 800a152:	d108      	bne.n	800a166 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a164:	e007      	b.n	800a176 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	60da      	str	r2, [r3, #12]
}
 800a176:	46c0      	nop			@ (mov r8, r8)
 800a178:	46bd      	mov	sp, r7
 800a17a:	b004      	add	sp, #16
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800a192:	2300      	movs	r3, #0
 800a194:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800a196:	e155      	b.n	800a444 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2101      	movs	r1, #1
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	4091      	lsls	r1, r2
 800a1a2:	000a      	movs	r2, r1
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d100      	bne.n	800a1b0 <HAL_GPIO_Init+0x30>
 800a1ae:	e146      	b.n	800a43e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	2203      	movs	r2, #3
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d005      	beq.n	800a1c8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d130      	bne.n	800a22a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	409a      	lsls	r2, r3
 800a1d6:	0013      	movs	r3, r2
 800a1d8:	43da      	mvns	r2, r3
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	4013      	ands	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	409a      	lsls	r2, r3
 800a1ea:	0013      	movs	r3, r2
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a1fe:	2201      	movs	r2, #1
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	409a      	lsls	r2, r3
 800a204:	0013      	movs	r3, r2
 800a206:	43da      	mvns	r2, r3
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	4013      	ands	r3, r2
 800a20c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	091b      	lsrs	r3, r3, #4
 800a214:	2201      	movs	r2, #1
 800a216:	401a      	ands	r2, r3
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	409a      	lsls	r2, r3
 800a21c:	0013      	movs	r3, r2
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	4313      	orrs	r3, r2
 800a222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2203      	movs	r2, #3
 800a230:	4013      	ands	r3, r2
 800a232:	2b03      	cmp	r3, #3
 800a234:	d017      	beq.n	800a266 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	2203      	movs	r2, #3
 800a242:	409a      	lsls	r2, r3
 800a244:	0013      	movs	r3, r2
 800a246:	43da      	mvns	r2, r3
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	4013      	ands	r3, r2
 800a24c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	409a      	lsls	r2, r3
 800a258:	0013      	movs	r3, r2
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	2203      	movs	r2, #3
 800a26c:	4013      	ands	r3, r2
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d123      	bne.n	800a2ba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	08da      	lsrs	r2, r3, #3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3208      	adds	r2, #8
 800a27a:	0092      	lsls	r2, r2, #2
 800a27c:	58d3      	ldr	r3, [r2, r3]
 800a27e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2207      	movs	r2, #7
 800a284:	4013      	ands	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	220f      	movs	r2, #15
 800a28a:	409a      	lsls	r2, r3
 800a28c:	0013      	movs	r3, r2
 800a28e:	43da      	mvns	r2, r3
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	4013      	ands	r3, r2
 800a294:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	691a      	ldr	r2, [r3, #16]
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2107      	movs	r1, #7
 800a29e:	400b      	ands	r3, r1
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	409a      	lsls	r2, r3
 800a2a4:	0013      	movs	r3, r2
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	08da      	lsrs	r2, r3, #3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3208      	adds	r2, #8
 800a2b4:	0092      	lsls	r2, r2, #2
 800a2b6:	6939      	ldr	r1, [r7, #16]
 800a2b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	409a      	lsls	r2, r3
 800a2c8:	0013      	movs	r3, r2
 800a2ca:	43da      	mvns	r2, r3
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	2203      	movs	r2, #3
 800a2d8:	401a      	ands	r2, r3
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	409a      	lsls	r2, r3
 800a2e0:	0013      	movs	r3, r2
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	23c0      	movs	r3, #192	@ 0xc0
 800a2f4:	029b      	lsls	r3, r3, #10
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	d100      	bne.n	800a2fc <HAL_GPIO_Init+0x17c>
 800a2fa:	e0a0      	b.n	800a43e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2fc:	4b57      	ldr	r3, [pc, #348]	@ (800a45c <HAL_GPIO_Init+0x2dc>)
 800a2fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a300:	4b56      	ldr	r3, [pc, #344]	@ (800a45c <HAL_GPIO_Init+0x2dc>)
 800a302:	2101      	movs	r1, #1
 800a304:	430a      	orrs	r2, r1
 800a306:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800a308:	4a55      	ldr	r2, [pc, #340]	@ (800a460 <HAL_GPIO_Init+0x2e0>)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	089b      	lsrs	r3, r3, #2
 800a30e:	3302      	adds	r3, #2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	589b      	ldr	r3, [r3, r2]
 800a314:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2203      	movs	r2, #3
 800a31a:	4013      	ands	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	220f      	movs	r2, #15
 800a320:	409a      	lsls	r2, r3
 800a322:	0013      	movs	r3, r2
 800a324:	43da      	mvns	r2, r3
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	4013      	ands	r3, r2
 800a32a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	23a0      	movs	r3, #160	@ 0xa0
 800a330:	05db      	lsls	r3, r3, #23
 800a332:	429a      	cmp	r2, r3
 800a334:	d01f      	beq.n	800a376 <HAL_GPIO_Init+0x1f6>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a4a      	ldr	r2, [pc, #296]	@ (800a464 <HAL_GPIO_Init+0x2e4>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d019      	beq.n	800a372 <HAL_GPIO_Init+0x1f2>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a49      	ldr	r2, [pc, #292]	@ (800a468 <HAL_GPIO_Init+0x2e8>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d013      	beq.n	800a36e <HAL_GPIO_Init+0x1ee>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a48      	ldr	r2, [pc, #288]	@ (800a46c <HAL_GPIO_Init+0x2ec>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00d      	beq.n	800a36a <HAL_GPIO_Init+0x1ea>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a47      	ldr	r2, [pc, #284]	@ (800a470 <HAL_GPIO_Init+0x2f0>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d007      	beq.n	800a366 <HAL_GPIO_Init+0x1e6>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a46      	ldr	r2, [pc, #280]	@ (800a474 <HAL_GPIO_Init+0x2f4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d101      	bne.n	800a362 <HAL_GPIO_Init+0x1e2>
 800a35e:	2305      	movs	r3, #5
 800a360:	e00a      	b.n	800a378 <HAL_GPIO_Init+0x1f8>
 800a362:	2306      	movs	r3, #6
 800a364:	e008      	b.n	800a378 <HAL_GPIO_Init+0x1f8>
 800a366:	2304      	movs	r3, #4
 800a368:	e006      	b.n	800a378 <HAL_GPIO_Init+0x1f8>
 800a36a:	2303      	movs	r3, #3
 800a36c:	e004      	b.n	800a378 <HAL_GPIO_Init+0x1f8>
 800a36e:	2302      	movs	r3, #2
 800a370:	e002      	b.n	800a378 <HAL_GPIO_Init+0x1f8>
 800a372:	2301      	movs	r3, #1
 800a374:	e000      	b.n	800a378 <HAL_GPIO_Init+0x1f8>
 800a376:	2300      	movs	r3, #0
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	2103      	movs	r1, #3
 800a37c:	400a      	ands	r2, r1
 800a37e:	0092      	lsls	r2, r2, #2
 800a380:	4093      	lsls	r3, r2
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	4313      	orrs	r3, r2
 800a386:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a388:	4935      	ldr	r1, [pc, #212]	@ (800a460 <HAL_GPIO_Init+0x2e0>)
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	089b      	lsrs	r3, r3, #2
 800a38e:	3302      	adds	r3, #2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a396:	4b38      	ldr	r3, [pc, #224]	@ (800a478 <HAL_GPIO_Init+0x2f8>)
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	43da      	mvns	r2, r3
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	685a      	ldr	r2, [r3, #4]
 800a3aa:	2380      	movs	r3, #128	@ 0x80
 800a3ac:	035b      	lsls	r3, r3, #13
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	d003      	beq.n	800a3ba <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a3ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a478 <HAL_GPIO_Init+0x2f8>)
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800a3c0:	4b2d      	ldr	r3, [pc, #180]	@ (800a478 <HAL_GPIO_Init+0x2f8>)
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	43da      	mvns	r2, r3
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	2380      	movs	r3, #128	@ 0x80
 800a3d6:	039b      	lsls	r3, r3, #14
 800a3d8:	4013      	ands	r3, r2
 800a3da:	d003      	beq.n	800a3e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a3e4:	4b24      	ldr	r3, [pc, #144]	@ (800a478 <HAL_GPIO_Init+0x2f8>)
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800a3ea:	4b23      	ldr	r3, [pc, #140]	@ (800a478 <HAL_GPIO_Init+0x2f8>)
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	43da      	mvns	r2, r3
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	2380      	movs	r3, #128	@ 0x80
 800a400:	029b      	lsls	r3, r3, #10
 800a402:	4013      	ands	r3, r2
 800a404:	d003      	beq.n	800a40e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a40e:	4b1a      	ldr	r3, [pc, #104]	@ (800a478 <HAL_GPIO_Init+0x2f8>)
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a414:	4b18      	ldr	r3, [pc, #96]	@ (800a478 <HAL_GPIO_Init+0x2f8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	43da      	mvns	r2, r3
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	4013      	ands	r3, r2
 800a422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685a      	ldr	r2, [r3, #4]
 800a428:	2380      	movs	r3, #128	@ 0x80
 800a42a:	025b      	lsls	r3, r3, #9
 800a42c:	4013      	ands	r3, r2
 800a42e:	d003      	beq.n	800a438 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4313      	orrs	r3, r2
 800a436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a438:	4b0f      	ldr	r3, [pc, #60]	@ (800a478 <HAL_GPIO_Init+0x2f8>)
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	3301      	adds	r3, #1
 800a442:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	40da      	lsrs	r2, r3
 800a44c:	1e13      	subs	r3, r2, #0
 800a44e:	d000      	beq.n	800a452 <HAL_GPIO_Init+0x2d2>
 800a450:	e6a2      	b.n	800a198 <HAL_GPIO_Init+0x18>
  }
}
 800a452:	46c0      	nop			@ (mov r8, r8)
 800a454:	46c0      	nop			@ (mov r8, r8)
 800a456:	46bd      	mov	sp, r7
 800a458:	b006      	add	sp, #24
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	40021000 	.word	0x40021000
 800a460:	40010000 	.word	0x40010000
 800a464:	50000400 	.word	0x50000400
 800a468:	50000800 	.word	0x50000800
 800a46c:	50000c00 	.word	0x50000c00
 800a470:	50001000 	.word	0x50001000
 800a474:	50001c00 	.word	0x50001c00
 800a478:	40010400 	.word	0x40010400

0800a47c <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a486:	2300      	movs	r3, #0
 800a488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800a48e:	2300      	movs	r3, #0
 800a490:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800a492:	e0bc      	b.n	800a60e <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800a494:	2201      	movs	r2, #1
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	409a      	lsls	r2, r3
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	4013      	ands	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d100      	bne.n	800a4a8 <HAL_GPIO_DeInit+0x2c>
 800a4a6:	e0af      	b.n	800a608 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a4a8:	4a5e      	ldr	r2, [pc, #376]	@ (800a624 <HAL_GPIO_DeInit+0x1a8>)
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	089b      	lsrs	r3, r3, #2
 800a4ae:	3302      	adds	r3, #2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	589b      	ldr	r3, [r3, r2]
 800a4b4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2203      	movs	r2, #3
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	220f      	movs	r2, #15
 800a4c0:	409a      	lsls	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	23a0      	movs	r3, #160	@ 0xa0
 800a4cc:	05db      	lsls	r3, r3, #23
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d01f      	beq.n	800a512 <HAL_GPIO_DeInit+0x96>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a54      	ldr	r2, [pc, #336]	@ (800a628 <HAL_GPIO_DeInit+0x1ac>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d019      	beq.n	800a50e <HAL_GPIO_DeInit+0x92>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a53      	ldr	r2, [pc, #332]	@ (800a62c <HAL_GPIO_DeInit+0x1b0>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d013      	beq.n	800a50a <HAL_GPIO_DeInit+0x8e>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a52      	ldr	r2, [pc, #328]	@ (800a630 <HAL_GPIO_DeInit+0x1b4>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d00d      	beq.n	800a506 <HAL_GPIO_DeInit+0x8a>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a51      	ldr	r2, [pc, #324]	@ (800a634 <HAL_GPIO_DeInit+0x1b8>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d007      	beq.n	800a502 <HAL_GPIO_DeInit+0x86>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a50      	ldr	r2, [pc, #320]	@ (800a638 <HAL_GPIO_DeInit+0x1bc>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d101      	bne.n	800a4fe <HAL_GPIO_DeInit+0x82>
 800a4fa:	2305      	movs	r3, #5
 800a4fc:	e00a      	b.n	800a514 <HAL_GPIO_DeInit+0x98>
 800a4fe:	2306      	movs	r3, #6
 800a500:	e008      	b.n	800a514 <HAL_GPIO_DeInit+0x98>
 800a502:	2304      	movs	r3, #4
 800a504:	e006      	b.n	800a514 <HAL_GPIO_DeInit+0x98>
 800a506:	2303      	movs	r3, #3
 800a508:	e004      	b.n	800a514 <HAL_GPIO_DeInit+0x98>
 800a50a:	2302      	movs	r3, #2
 800a50c:	e002      	b.n	800a514 <HAL_GPIO_DeInit+0x98>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <HAL_GPIO_DeInit+0x98>
 800a512:	2300      	movs	r3, #0
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	2103      	movs	r1, #3
 800a518:	400a      	ands	r2, r1
 800a51a:	0092      	lsls	r2, r2, #2
 800a51c:	4093      	lsls	r3, r2
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	429a      	cmp	r2, r3
 800a522:	d132      	bne.n	800a58a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a524:	4b45      	ldr	r3, [pc, #276]	@ (800a63c <HAL_GPIO_DeInit+0x1c0>)
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	43d9      	mvns	r1, r3
 800a52c:	4b43      	ldr	r3, [pc, #268]	@ (800a63c <HAL_GPIO_DeInit+0x1c0>)
 800a52e:	400a      	ands	r2, r1
 800a530:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a532:	4b42      	ldr	r3, [pc, #264]	@ (800a63c <HAL_GPIO_DeInit+0x1c0>)
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	43d9      	mvns	r1, r3
 800a53a:	4b40      	ldr	r3, [pc, #256]	@ (800a63c <HAL_GPIO_DeInit+0x1c0>)
 800a53c:	400a      	ands	r2, r1
 800a53e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a540:	4b3e      	ldr	r3, [pc, #248]	@ (800a63c <HAL_GPIO_DeInit+0x1c0>)
 800a542:	68da      	ldr	r2, [r3, #12]
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	43d9      	mvns	r1, r3
 800a548:	4b3c      	ldr	r3, [pc, #240]	@ (800a63c <HAL_GPIO_DeInit+0x1c0>)
 800a54a:	400a      	ands	r2, r1
 800a54c:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a54e:	4b3b      	ldr	r3, [pc, #236]	@ (800a63c <HAL_GPIO_DeInit+0x1c0>)
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	43d9      	mvns	r1, r3
 800a556:	4b39      	ldr	r3, [pc, #228]	@ (800a63c <HAL_GPIO_DeInit+0x1c0>)
 800a558:	400a      	ands	r2, r1
 800a55a:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	2203      	movs	r2, #3
 800a560:	4013      	ands	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	220f      	movs	r2, #15
 800a566:	409a      	lsls	r2, r3
 800a568:	0013      	movs	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a56c:	4a2d      	ldr	r2, [pc, #180]	@ (800a624 <HAL_GPIO_DeInit+0x1a8>)
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	089b      	lsrs	r3, r3, #2
 800a572:	3302      	adds	r3, #2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	589a      	ldr	r2, [r3, r2]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	43d9      	mvns	r1, r3
 800a57c:	4829      	ldr	r0, [pc, #164]	@ (800a624 <HAL_GPIO_DeInit+0x1a8>)
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	089b      	lsrs	r3, r3, #2
 800a582:	400a      	ands	r2, r1
 800a584:	3302      	adds	r3, #2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	2103      	movs	r1, #3
 800a594:	4099      	lsls	r1, r3
 800a596:	000b      	movs	r3, r1
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	08da      	lsrs	r2, r3, #3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	3208      	adds	r2, #8
 800a5a6:	0092      	lsls	r2, r2, #2
 800a5a8:	58d3      	ldr	r3, [r2, r3]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	2107      	movs	r1, #7
 800a5ae:	400a      	ands	r2, r1
 800a5b0:	0092      	lsls	r2, r2, #2
 800a5b2:	210f      	movs	r1, #15
 800a5b4:	4091      	lsls	r1, r2
 800a5b6:	000a      	movs	r2, r1
 800a5b8:	43d1      	mvns	r1, r2
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	08d2      	lsrs	r2, r2, #3
 800a5be:	4019      	ands	r1, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3208      	adds	r2, #8
 800a5c4:	0092      	lsls	r2, r2, #2
 800a5c6:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	0052      	lsls	r2, r2, #1
 800a5d0:	2103      	movs	r1, #3
 800a5d2:	4091      	lsls	r1, r2
 800a5d4:	000a      	movs	r2, r1
 800a5d6:	43d2      	mvns	r2, r2
 800a5d8:	401a      	ands	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	4091      	lsls	r1, r2
 800a5e8:	000a      	movs	r2, r1
 800a5ea:	43d2      	mvns	r2, r2
 800a5ec:	401a      	ands	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	0052      	lsls	r2, r2, #1
 800a5fa:	2103      	movs	r1, #3
 800a5fc:	4091      	lsls	r1, r2
 800a5fe:	000a      	movs	r2, r1
 800a600:	43d2      	mvns	r2, r2
 800a602:	401a      	ands	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	609a      	str	r2, [r3, #8]
    }
    position++;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	3301      	adds	r3, #1
 800a60c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	40da      	lsrs	r2, r3
 800a614:	1e13      	subs	r3, r2, #0
 800a616:	d000      	beq.n	800a61a <HAL_GPIO_DeInit+0x19e>
 800a618:	e73c      	b.n	800a494 <HAL_GPIO_DeInit+0x18>
  }
}
 800a61a:	46c0      	nop			@ (mov r8, r8)
 800a61c:	46c0      	nop			@ (mov r8, r8)
 800a61e:	46bd      	mov	sp, r7
 800a620:	b006      	add	sp, #24
 800a622:	bd80      	pop	{r7, pc}
 800a624:	40010000 	.word	0x40010000
 800a628:	50000400 	.word	0x50000400
 800a62c:	50000800 	.word	0x50000800
 800a630:	50000c00 	.word	0x50000c00
 800a634:	50001000 	.word	0x50001000
 800a638:	50001c00 	.word	0x50001c00
 800a63c:	40010400 	.word	0x40010400

0800a640 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	0008      	movs	r0, r1
 800a64a:	0011      	movs	r1, r2
 800a64c:	1cbb      	adds	r3, r7, #2
 800a64e:	1c02      	adds	r2, r0, #0
 800a650:	801a      	strh	r2, [r3, #0]
 800a652:	1c7b      	adds	r3, r7, #1
 800a654:	1c0a      	adds	r2, r1, #0
 800a656:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a658:	1c7b      	adds	r3, r7, #1
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d004      	beq.n	800a66a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a660:	1cbb      	adds	r3, r7, #2
 800a662:	881a      	ldrh	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800a668:	e003      	b.n	800a672 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800a66a:	1cbb      	adds	r3, r7, #2
 800a66c:	881a      	ldrh	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a672:	46c0      	nop			@ (mov r8, r8)
 800a674:	46bd      	mov	sp, r7
 800a676:	b002      	add	sp, #8
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e082      	b.n	800a794 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2241      	movs	r2, #65	@ 0x41
 800a692:	5c9b      	ldrb	r3, [r3, r2]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d107      	bne.n	800a6aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2240      	movs	r2, #64	@ 0x40
 800a69e:	2100      	movs	r1, #0
 800a6a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f7fa ff77 	bl	8005598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2241      	movs	r2, #65	@ 0x41
 800a6ae:	2124      	movs	r1, #36	@ 0x24
 800a6b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2101      	movs	r1, #1
 800a6be:	438a      	bics	r2, r1
 800a6c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4934      	ldr	r1, [pc, #208]	@ (800a79c <HAL_I2C_Init+0x120>)
 800a6cc:	400a      	ands	r2, r1
 800a6ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4931      	ldr	r1, [pc, #196]	@ (800a7a0 <HAL_I2C_Init+0x124>)
 800a6dc:	400a      	ands	r2, r1
 800a6de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d108      	bne.n	800a6fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689a      	ldr	r2, [r3, #8]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2180      	movs	r1, #128	@ 0x80
 800a6f2:	0209      	lsls	r1, r1, #8
 800a6f4:	430a      	orrs	r2, r1
 800a6f6:	609a      	str	r2, [r3, #8]
 800a6f8:	e007      	b.n	800a70a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689a      	ldr	r2, [r3, #8]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2184      	movs	r1, #132	@ 0x84
 800a704:	0209      	lsls	r1, r1, #8
 800a706:	430a      	orrs	r2, r1
 800a708:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d104      	bne.n	800a71c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2280      	movs	r2, #128	@ 0x80
 800a718:	0112      	lsls	r2, r2, #4
 800a71a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	491f      	ldr	r1, [pc, #124]	@ (800a7a4 <HAL_I2C_Init+0x128>)
 800a728:	430a      	orrs	r2, r1
 800a72a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68da      	ldr	r2, [r3, #12]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	491a      	ldr	r1, [pc, #104]	@ (800a7a0 <HAL_I2C_Init+0x124>)
 800a738:	400a      	ands	r2, r1
 800a73a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	691a      	ldr	r2, [r3, #16]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	431a      	orrs	r2, r3
 800a746:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	69d9      	ldr	r1, [r3, #28]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a1a      	ldr	r2, [r3, #32]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	430a      	orrs	r2, r1
 800a764:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2101      	movs	r1, #1
 800a772:	430a      	orrs	r2, r1
 800a774:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2241      	movs	r2, #65	@ 0x41
 800a780:	2120      	movs	r1, #32
 800a782:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2242      	movs	r2, #66	@ 0x42
 800a78e:	2100      	movs	r1, #0
 800a790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	0018      	movs	r0, r3
 800a796:	46bd      	mov	sp, r7
 800a798:	b002      	add	sp, #8
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	f0ffffff 	.word	0xf0ffffff
 800a7a0:	ffff7fff 	.word	0xffff7fff
 800a7a4:	02008000 	.word	0x02008000

0800a7a8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a7a8:	b5b0      	push	{r4, r5, r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	0008      	movs	r0, r1
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	0019      	movs	r1, r3
 800a7b6:	230a      	movs	r3, #10
 800a7b8:	18fb      	adds	r3, r7, r3
 800a7ba:	1c02      	adds	r2, r0, #0
 800a7bc:	801a      	strh	r2, [r3, #0]
 800a7be:	2308      	movs	r3, #8
 800a7c0:	18fb      	adds	r3, r7, r3
 800a7c2:	1c0a      	adds	r2, r1, #0
 800a7c4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2241      	movs	r2, #65	@ 0x41
 800a7ca:	5c9b      	ldrb	r3, [r3, r2]
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b20      	cmp	r3, #32
 800a7d0:	d000      	beq.n	800a7d4 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800a7d2:	e0dd      	b.n	800a990 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	699a      	ldr	r2, [r3, #24]
 800a7da:	2380      	movs	r3, #128	@ 0x80
 800a7dc:	021b      	lsls	r3, r3, #8
 800a7de:	401a      	ands	r2, r3
 800a7e0:	2380      	movs	r3, #128	@ 0x80
 800a7e2:	021b      	lsls	r3, r3, #8
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d101      	bne.n	800a7ec <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e0d2      	b.n	800a992 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2240      	movs	r2, #64	@ 0x40
 800a7f0:	5c9b      	ldrb	r3, [r3, r2]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d101      	bne.n	800a7fa <HAL_I2C_Master_Transmit_DMA+0x52>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e0cb      	b.n	800a992 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2240      	movs	r2, #64	@ 0x40
 800a7fe:	2101      	movs	r1, #1
 800a800:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2241      	movs	r2, #65	@ 0x41
 800a806:	2121      	movs	r1, #33	@ 0x21
 800a808:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2242      	movs	r2, #66	@ 0x42
 800a80e:	2110      	movs	r1, #16
 800a810:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2208      	movs	r2, #8
 800a822:	18ba      	adds	r2, r7, r2
 800a824:	8812      	ldrh	r2, [r2, #0]
 800a826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4a5c      	ldr	r2, [pc, #368]	@ (800a99c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800a82c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	4a5b      	ldr	r2, [pc, #364]	@ (800a9a0 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800a832:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a838:	b29b      	uxth	r3, r3
 800a83a:	2bff      	cmp	r3, #255	@ 0xff
 800a83c:	d906      	bls.n	800a84c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	22ff      	movs	r2, #255	@ 0xff
 800a842:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a844:	2380      	movs	r3, #128	@ 0x80
 800a846:	045b      	lsls	r3, r3, #17
 800a848:	617b      	str	r3, [r7, #20]
 800a84a:	e007      	b.n	800a85c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a850:	b29a      	uxth	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a856:	2380      	movs	r3, #128	@ 0x80
 800a858:	049b      	lsls	r3, r3, #18
 800a85a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a860:	2b00      	cmp	r3, #0
 800a862:	d100      	bne.n	800a866 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800a864:	e078      	b.n	800a958 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d023      	beq.n	800a8b6 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a872:	4a4c      	ldr	r2, [pc, #304]	@ (800a9a4 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800a874:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a87a:	4a4b      	ldr	r2, [pc, #300]	@ (800a9a8 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800a87c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a882:	2200      	movs	r2, #0
 800a884:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a88a:	2200      	movs	r2, #0
 800a88c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3328      	adds	r3, #40	@ 0x28
 800a89a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a8a0:	2513      	movs	r5, #19
 800a8a2:	197c      	adds	r4, r7, r5
 800a8a4:	f7ff fa96 	bl	8009dd4 <HAL_DMA_Start_IT>
 800a8a8:	0003      	movs	r3, r0
 800a8aa:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a8ac:	197b      	adds	r3, r7, r5
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d13d      	bne.n	800a930 <HAL_I2C_Master_Transmit_DMA+0x188>
 800a8b4:	e013      	b.n	800a8de <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2241      	movs	r2, #65	@ 0x41
 800a8ba:	2120      	movs	r1, #32
 800a8bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2242      	movs	r2, #66	@ 0x42
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8ca:	2280      	movs	r2, #128	@ 0x80
 800a8cc:	431a      	orrs	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2240      	movs	r2, #64	@ 0x40
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e059      	b.n	800a992 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	697c      	ldr	r4, [r7, #20]
 800a8e6:	230a      	movs	r3, #10
 800a8e8:	18fb      	adds	r3, r7, r3
 800a8ea:	8819      	ldrh	r1, [r3, #0]
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a9ac <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	0023      	movs	r3, r4
 800a8f4:	f001 fd0e 	bl	800c314 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	b29a      	uxth	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2240      	movs	r2, #64	@ 0x40
 800a90e:	2100      	movs	r1, #0
 800a910:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2110      	movs	r1, #16
 800a916:	0018      	movs	r0, r3
 800a918:	f001 fd36 	bl	800c388 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2180      	movs	r1, #128	@ 0x80
 800a928:	01c9      	lsls	r1, r1, #7
 800a92a:	430a      	orrs	r2, r1
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	e02d      	b.n	800a98c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2241      	movs	r2, #65	@ 0x41
 800a934:	2120      	movs	r1, #32
 800a936:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2242      	movs	r2, #66	@ 0x42
 800a93c:	2100      	movs	r1, #0
 800a93e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a944:	2210      	movs	r2, #16
 800a946:	431a      	orrs	r2, r3
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2240      	movs	r2, #64	@ 0x40
 800a950:	2100      	movs	r1, #0
 800a952:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	e01c      	b.n	800a992 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	4a15      	ldr	r2, [pc, #84]	@ (800a9b0 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800a95c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a962:	b2da      	uxtb	r2, r3
 800a964:	2380      	movs	r3, #128	@ 0x80
 800a966:	049c      	lsls	r4, r3, #18
 800a968:	230a      	movs	r3, #10
 800a96a:	18fb      	adds	r3, r7, r3
 800a96c:	8819      	ldrh	r1, [r3, #0]
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	4b0e      	ldr	r3, [pc, #56]	@ (800a9ac <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	0023      	movs	r3, r4
 800a976:	f001 fccd 	bl	800c314 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2240      	movs	r2, #64	@ 0x40
 800a97e:	2100      	movs	r1, #0
 800a980:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2101      	movs	r1, #1
 800a986:	0018      	movs	r0, r3
 800a988:	f001 fcfe 	bl	800c388 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e000      	b.n	800a992 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a990:	2302      	movs	r3, #2
  }
}
 800a992:	0018      	movs	r0, r3
 800a994:	46bd      	mov	sp, r7
 800a996:	b006      	add	sp, #24
 800a998:	bdb0      	pop	{r4, r5, r7, pc}
 800a99a:	46c0      	nop			@ (mov r8, r8)
 800a99c:	ffff0000 	.word	0xffff0000
 800a9a0:	0800b1ad 	.word	0x0800b1ad
 800a9a4:	0800c165 	.word	0x0800c165
 800a9a8:	0800c2a5 	.word	0x0800c2a5
 800a9ac:	80002000 	.word	0x80002000
 800a9b0:	0800ad59 	.word	0x0800ad59

0800a9b4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a9b4:	b5b0      	push	{r4, r5, r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af02      	add	r7, sp, #8
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	0008      	movs	r0, r1
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	0019      	movs	r1, r3
 800a9c2:	230a      	movs	r3, #10
 800a9c4:	18fb      	adds	r3, r7, r3
 800a9c6:	1c02      	adds	r2, r0, #0
 800a9c8:	801a      	strh	r2, [r3, #0]
 800a9ca:	2308      	movs	r3, #8
 800a9cc:	18fb      	adds	r3, r7, r3
 800a9ce:	1c0a      	adds	r2, r1, #0
 800a9d0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2241      	movs	r2, #65	@ 0x41
 800a9d6:	5c9b      	ldrb	r3, [r3, r2]
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b20      	cmp	r3, #32
 800a9dc:	d000      	beq.n	800a9e0 <HAL_I2C_Master_Receive_DMA+0x2c>
 800a9de:	e0dd      	b.n	800ab9c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	699a      	ldr	r2, [r3, #24]
 800a9e6:	2380      	movs	r3, #128	@ 0x80
 800a9e8:	021b      	lsls	r3, r3, #8
 800a9ea:	401a      	ands	r2, r3
 800a9ec:	2380      	movs	r3, #128	@ 0x80
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d101      	bne.n	800a9f8 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e0d2      	b.n	800ab9e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2240      	movs	r2, #64	@ 0x40
 800a9fc:	5c9b      	ldrb	r3, [r3, r2]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d101      	bne.n	800aa06 <HAL_I2C_Master_Receive_DMA+0x52>
 800aa02:	2302      	movs	r3, #2
 800aa04:	e0cb      	b.n	800ab9e <HAL_I2C_Master_Receive_DMA+0x1ea>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2240      	movs	r2, #64	@ 0x40
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2241      	movs	r2, #65	@ 0x41
 800aa12:	2122      	movs	r1, #34	@ 0x22
 800aa14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2242      	movs	r2, #66	@ 0x42
 800aa1a:	2110      	movs	r1, #16
 800aa1c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	18ba      	adds	r2, r7, r2
 800aa30:	8812      	ldrh	r2, [r2, #0]
 800aa32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a5c      	ldr	r2, [pc, #368]	@ (800aba8 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800aa38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	4a5b      	ldr	r2, [pc, #364]	@ (800abac <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800aa3e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	2bff      	cmp	r3, #255	@ 0xff
 800aa48:	d906      	bls.n	800aa58 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	22ff      	movs	r2, #255	@ 0xff
 800aa4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800aa50:	2380      	movs	r3, #128	@ 0x80
 800aa52:	045b      	lsls	r3, r3, #17
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	e007      	b.n	800aa68 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800aa62:	2380      	movs	r3, #128	@ 0x80
 800aa64:	049b      	lsls	r3, r3, #18
 800aa66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d100      	bne.n	800aa72 <HAL_I2C_Master_Receive_DMA+0xbe>
 800aa70:	e078      	b.n	800ab64 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d023      	beq.n	800aac2 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7e:	4a4c      	ldr	r2, [pc, #304]	@ (800abb0 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800aa80:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa86:	4a4b      	ldr	r2, [pc, #300]	@ (800abb4 <HAL_I2C_Master_Receive_DMA+0x200>)
 800aa88:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa8e:	2200      	movs	r2, #0
 800aa90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa96:	2200      	movs	r2, #0
 800aa98:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3324      	adds	r3, #36	@ 0x24
 800aaa4:	0019      	movs	r1, r3
 800aaa6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800aaac:	2513      	movs	r5, #19
 800aaae:	197c      	adds	r4, r7, r5
 800aab0:	f7ff f990 	bl	8009dd4 <HAL_DMA_Start_IT>
 800aab4:	0003      	movs	r3, r0
 800aab6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800aab8:	197b      	adds	r3, r7, r5
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d13d      	bne.n	800ab3c <HAL_I2C_Master_Receive_DMA+0x188>
 800aac0:	e013      	b.n	800aaea <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2241      	movs	r2, #65	@ 0x41
 800aac6:	2120      	movs	r1, #32
 800aac8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2242      	movs	r2, #66	@ 0x42
 800aace:	2100      	movs	r1, #0
 800aad0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad6:	2280      	movs	r2, #128	@ 0x80
 800aad8:	431a      	orrs	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2240      	movs	r2, #64	@ 0x40
 800aae2:	2100      	movs	r1, #0
 800aae4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e059      	b.n	800ab9e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	697c      	ldr	r4, [r7, #20]
 800aaf2:	230a      	movs	r3, #10
 800aaf4:	18fb      	adds	r3, r7, r3
 800aaf6:	8819      	ldrh	r1, [r3, #0]
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	4b2f      	ldr	r3, [pc, #188]	@ (800abb8 <HAL_I2C_Master_Receive_DMA+0x204>)
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	0023      	movs	r3, r4
 800ab00:	f001 fc08 	bl	800c314 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2240      	movs	r2, #64	@ 0x40
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2110      	movs	r1, #16
 800ab22:	0018      	movs	r0, r3
 800ab24:	f001 fc30 	bl	800c388 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2180      	movs	r1, #128	@ 0x80
 800ab34:	0209      	lsls	r1, r1, #8
 800ab36:	430a      	orrs	r2, r1
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	e02d      	b.n	800ab98 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2241      	movs	r2, #65	@ 0x41
 800ab40:	2120      	movs	r1, #32
 800ab42:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2242      	movs	r2, #66	@ 0x42
 800ab48:	2100      	movs	r1, #0
 800ab4a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab50:	2210      	movs	r2, #16
 800ab52:	431a      	orrs	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2240      	movs	r2, #64	@ 0x40
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e01c      	b.n	800ab9e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	4a15      	ldr	r2, [pc, #84]	@ (800abbc <HAL_I2C_Master_Receive_DMA+0x208>)
 800ab68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	2380      	movs	r3, #128	@ 0x80
 800ab72:	049c      	lsls	r4, r3, #18
 800ab74:	230a      	movs	r3, #10
 800ab76:	18fb      	adds	r3, r7, r3
 800ab78:	8819      	ldrh	r1, [r3, #0]
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	4b0e      	ldr	r3, [pc, #56]	@ (800abb8 <HAL_I2C_Master_Receive_DMA+0x204>)
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	0023      	movs	r3, r4
 800ab82:	f001 fbc7 	bl	800c314 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2240      	movs	r2, #64	@ 0x40
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2101      	movs	r1, #1
 800ab92:	0018      	movs	r0, r3
 800ab94:	f001 fbf8 	bl	800c388 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	e000      	b.n	800ab9e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ab9c:	2302      	movs	r3, #2
  }
}
 800ab9e:	0018      	movs	r0, r3
 800aba0:	46bd      	mov	sp, r7
 800aba2:	b006      	add	sp, #24
 800aba4:	bdb0      	pop	{r4, r5, r7, pc}
 800aba6:	46c0      	nop			@ (mov r8, r8)
 800aba8:	ffff0000 	.word	0xffff0000
 800abac:	0800b1ad 	.word	0x0800b1ad
 800abb0:	0800c205 	.word	0x0800c205
 800abb4:	0800c2a5 	.word	0x0800c2a5
 800abb8:	80002400 	.word	0x80002400
 800abbc:	0800ad59 	.word	0x0800ad59

0800abc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	68f9      	ldr	r1, [r7, #12]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	4798      	blx	r3
  }
}
 800abec:	46c0      	nop			@ (mov r8, r8)
 800abee:	46bd      	mov	sp, r7
 800abf0:	b004      	add	sp, #16
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	2380      	movs	r3, #128	@ 0x80
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	4013      	ands	r3, r2
 800ac14:	d00e      	beq.n	800ac34 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	2280      	movs	r2, #128	@ 0x80
 800ac1a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ac1c:	d00a      	beq.n	800ac34 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac22:	2201      	movs	r2, #1
 800ac24:	431a      	orrs	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2280      	movs	r2, #128	@ 0x80
 800ac30:	0052      	lsls	r2, r2, #1
 800ac32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	2380      	movs	r3, #128	@ 0x80
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	d00e      	beq.n	800ac5c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	2280      	movs	r2, #128	@ 0x80
 800ac42:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ac44:	d00a      	beq.n	800ac5c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac4a:	2208      	movs	r2, #8
 800ac4c:	431a      	orrs	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2280      	movs	r2, #128	@ 0x80
 800ac58:	00d2      	lsls	r2, r2, #3
 800ac5a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	2380      	movs	r3, #128	@ 0x80
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4013      	ands	r3, r2
 800ac64:	d00e      	beq.n	800ac84 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2280      	movs	r2, #128	@ 0x80
 800ac6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ac6c:	d00a      	beq.n	800ac84 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac72:	2202      	movs	r2, #2
 800ac74:	431a      	orrs	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2280      	movs	r2, #128	@ 0x80
 800ac80:	0092      	lsls	r2, r2, #2
 800ac82:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac88:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	220b      	movs	r2, #11
 800ac8e:	4013      	ands	r3, r2
 800ac90:	d005      	beq.n	800ac9e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	0011      	movs	r1, r2
 800ac98:	0018      	movs	r0, r3
 800ac9a:	f001 f915 	bl	800bec8 <I2C_ITError>
  }
}
 800ac9e:	46c0      	nop			@ (mov r8, r8)
 800aca0:	46bd      	mov	sp, r7
 800aca2:	b006      	add	sp, #24
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800acae:	46c0      	nop			@ (mov r8, r8)
 800acb0:	46bd      	mov	sp, r7
 800acb2:	b002      	add	sp, #8
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800acbe:	46c0      	nop			@ (mov r8, r8)
 800acc0:	46bd      	mov	sp, r7
 800acc2:	b002      	add	sp, #8
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800acce:	46c0      	nop			@ (mov r8, r8)
 800acd0:	46bd      	mov	sp, r7
 800acd2:	b002      	add	sp, #8
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b082      	sub	sp, #8
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800acde:	46c0      	nop			@ (mov r8, r8)
 800ace0:	46bd      	mov	sp, r7
 800ace2:	b002      	add	sp, #8
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	0008      	movs	r0, r1
 800acf0:	0011      	movs	r1, r2
 800acf2:	1cfb      	adds	r3, r7, #3
 800acf4:	1c02      	adds	r2, r0, #0
 800acf6:	701a      	strb	r2, [r3, #0]
 800acf8:	003b      	movs	r3, r7
 800acfa:	1c0a      	adds	r2, r1, #0
 800acfc:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800acfe:	46c0      	nop			@ (mov r8, r8)
 800ad00:	46bd      	mov	sp, r7
 800ad02:	b002      	add	sp, #8
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b082      	sub	sp, #8
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ad0e:	46c0      	nop			@ (mov r8, r8)
 800ad10:	46bd      	mov	sp, r7
 800ad12:	b002      	add	sp, #8
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b082      	sub	sp, #8
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ad1e:	46c0      	nop			@ (mov r8, r8)
 800ad20:	46bd      	mov	sp, r7
 800ad22:	b002      	add	sp, #8
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ad2e:	46c0      	nop			@ (mov r8, r8)
 800ad30:	46bd      	mov	sp, r7
 800ad32:	b002      	add	sp, #8
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ad3e:	46c0      	nop			@ (mov r8, r8)
 800ad40:	46bd      	mov	sp, r7
 800ad42:	b002      	add	sp, #8
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b082      	sub	sp, #8
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ad4e:	46c0      	nop			@ (mov r8, r8)
 800ad50:	46bd      	mov	sp, r7
 800ad52:	b002      	add	sp, #8
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ad58:	b590      	push	{r4, r7, lr}
 800ad5a:	b089      	sub	sp, #36	@ 0x24
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2240      	movs	r2, #64	@ 0x40
 800ad6c:	5c9b      	ldrb	r3, [r3, r2]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d101      	bne.n	800ad76 <I2C_Master_ISR_IT+0x1e>
 800ad72:	2302      	movs	r3, #2
 800ad74:	e113      	b.n	800af9e <I2C_Master_ISR_IT+0x246>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2240      	movs	r2, #64	@ 0x40
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2210      	movs	r2, #16
 800ad82:	4013      	ands	r3, r2
 800ad84:	d012      	beq.n	800adac <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2210      	movs	r2, #16
 800ad8a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ad8c:	d00e      	beq.n	800adac <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2210      	movs	r2, #16
 800ad94:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad9a:	2204      	movs	r2, #4
 800ad9c:	431a      	orrs	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	0018      	movs	r0, r3
 800ada6:	f001 f9ba 	bl	800c11e <I2C_Flush_TXDR>
 800adaa:	e0e5      	b.n	800af78 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2204      	movs	r2, #4
 800adb0:	4013      	ands	r3, r2
 800adb2:	d021      	beq.n	800adf8 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2204      	movs	r2, #4
 800adb8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800adba:	d01d      	beq.n	800adf8 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2204      	movs	r2, #4
 800adc0:	4393      	bics	r3, r2
 800adc2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adce:	b2d2      	uxtb	r2, r2
 800add0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adec:	b29b      	uxth	r3, r3
 800adee:	3b01      	subs	r3, #1
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800adf6:	e0bf      	b.n	800af78 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2202      	movs	r2, #2
 800adfc:	4013      	ands	r3, r2
 800adfe:	d01c      	beq.n	800ae3a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2202      	movs	r2, #2
 800ae04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ae06:	d018      	beq.n	800ae3a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae0c:	781a      	ldrb	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae22:	3b01      	subs	r3, #1
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	3b01      	subs	r3, #1
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ae38:	e09e      	b.n	800af78 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2280      	movs	r2, #128	@ 0x80
 800ae3e:	4013      	ands	r3, r2
 800ae40:	d100      	bne.n	800ae44 <I2C_Master_ISR_IT+0xec>
 800ae42:	e069      	b.n	800af18 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2240      	movs	r2, #64	@ 0x40
 800ae48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ae4a:	d065      	beq.n	800af18 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d04a      	beq.n	800aeec <I2C_Master_ISR_IT+0x194>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d146      	bne.n	800aeec <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	2112      	movs	r1, #18
 800ae68:	187b      	adds	r3, r7, r1
 800ae6a:	0592      	lsls	r2, r2, #22
 800ae6c:	0d92      	lsrs	r2, r2, #22
 800ae6e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	2bff      	cmp	r3, #255	@ 0xff
 800ae78:	d910      	bls.n	800ae9c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	22ff      	movs	r2, #255	@ 0xff
 800ae7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	2380      	movs	r3, #128	@ 0x80
 800ae88:	045c      	lsls	r4, r3, #17
 800ae8a:	187b      	adds	r3, r7, r1
 800ae8c:	8819      	ldrh	r1, [r3, #0]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	2300      	movs	r3, #0
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	0023      	movs	r3, r4
 800ae96:	f001 fa3d 	bl	800c314 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae9a:	e03c      	b.n	800af16 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeaa:	4a3f      	ldr	r2, [pc, #252]	@ (800afa8 <I2C_Master_ISR_IT+0x250>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d00e      	beq.n	800aece <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aeb4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800aeba:	2312      	movs	r3, #18
 800aebc:	18fb      	adds	r3, r7, r3
 800aebe:	8819      	ldrh	r1, [r3, #0]
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	2300      	movs	r3, #0
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	0023      	movs	r3, r4
 800aec8:	f001 fa24 	bl	800c314 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aecc:	e023      	b.n	800af16 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	2380      	movs	r3, #128	@ 0x80
 800aed6:	049c      	lsls	r4, r3, #18
 800aed8:	2312      	movs	r3, #18
 800aeda:	18fb      	adds	r3, r7, r3
 800aedc:	8819      	ldrh	r1, [r3, #0]
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	2300      	movs	r3, #0
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	0023      	movs	r3, r4
 800aee6:	f001 fa15 	bl	800c314 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aeea:	e014      	b.n	800af16 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	2380      	movs	r3, #128	@ 0x80
 800aef4:	049b      	lsls	r3, r3, #18
 800aef6:	401a      	ands	r2, r3
 800aef8:	2380      	movs	r3, #128	@ 0x80
 800aefa:	049b      	lsls	r3, r3, #18
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d004      	beq.n	800af0a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	0018      	movs	r0, r3
 800af04:	f000 fcf4 	bl	800b8f0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af08:	e036      	b.n	800af78 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2140      	movs	r1, #64	@ 0x40
 800af0e:	0018      	movs	r0, r3
 800af10:	f000 ffda 	bl	800bec8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af14:	e030      	b.n	800af78 <I2C_Master_ISR_IT+0x220>
 800af16:	e02f      	b.n	800af78 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2240      	movs	r2, #64	@ 0x40
 800af1c:	4013      	ands	r3, r2
 800af1e:	d02b      	beq.n	800af78 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2240      	movs	r2, #64	@ 0x40
 800af24:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800af26:	d027      	beq.n	800af78 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d11d      	bne.n	800af6e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	2380      	movs	r3, #128	@ 0x80
 800af3a:	049b      	lsls	r3, r3, #18
 800af3c:	401a      	ands	r2, r3
 800af3e:	2380      	movs	r3, #128	@ 0x80
 800af40:	049b      	lsls	r3, r3, #18
 800af42:	429a      	cmp	r2, r3
 800af44:	d018      	beq.n	800af78 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af4a:	4a17      	ldr	r2, [pc, #92]	@ (800afa8 <I2C_Master_ISR_IT+0x250>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d109      	bne.n	800af64 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2180      	movs	r1, #128	@ 0x80
 800af5c:	01c9      	lsls	r1, r1, #7
 800af5e:	430a      	orrs	r2, r1
 800af60:	605a      	str	r2, [r3, #4]
 800af62:	e009      	b.n	800af78 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	0018      	movs	r0, r3
 800af68:	f000 fcc2 	bl	800b8f0 <I2C_ITMasterSeqCplt>
 800af6c:	e004      	b.n	800af78 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2140      	movs	r1, #64	@ 0x40
 800af72:	0018      	movs	r0, r3
 800af74:	f000 ffa8 	bl	800bec8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2220      	movs	r2, #32
 800af7c:	4013      	ands	r3, r2
 800af7e:	d009      	beq.n	800af94 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2220      	movs	r2, #32
 800af84:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800af86:	d005      	beq.n	800af94 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	0011      	movs	r1, r2
 800af8e:	0018      	movs	r0, r3
 800af90:	f000 fd54 	bl	800ba3c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2240      	movs	r2, #64	@ 0x40
 800af98:	2100      	movs	r1, #0
 800af9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	0018      	movs	r0, r3
 800afa0:	46bd      	mov	sp, r7
 800afa2:	b007      	add	sp, #28
 800afa4:	bd90      	pop	{r4, r7, pc}
 800afa6:	46c0      	nop			@ (mov r8, r8)
 800afa8:	ffff0000 	.word	0xffff0000

0800afac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2240      	movs	r2, #64	@ 0x40
 800afc6:	5c9b      	ldrb	r3, [r3, r2]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d101      	bne.n	800afd0 <I2C_Slave_ISR_IT+0x24>
 800afcc:	2302      	movs	r3, #2
 800afce:	e0e6      	b.n	800b19e <I2C_Slave_ISR_IT+0x1f2>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2240      	movs	r2, #64	@ 0x40
 800afd4:	2101      	movs	r1, #1
 800afd6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2220      	movs	r2, #32
 800afdc:	4013      	ands	r3, r2
 800afde:	d009      	beq.n	800aff4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2220      	movs	r2, #32
 800afe4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800afe6:	d005      	beq.n	800aff4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	0011      	movs	r1, r2
 800afee:	0018      	movs	r0, r3
 800aff0:	f000 fdf2 	bl	800bbd8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	2210      	movs	r2, #16
 800aff8:	4013      	ands	r3, r2
 800affa:	d052      	beq.n	800b0a2 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2210      	movs	r2, #16
 800b000:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b002:	d04e      	beq.n	800b0a2 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b008:	b29b      	uxth	r3, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d12d      	bne.n	800b06a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2241      	movs	r2, #65	@ 0x41
 800b012:	5c9b      	ldrb	r3, [r3, r2]
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b28      	cmp	r3, #40	@ 0x28
 800b018:	d10b      	bne.n	800b032 <I2C_Slave_ISR_IT+0x86>
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	2380      	movs	r3, #128	@ 0x80
 800b01e:	049b      	lsls	r3, r3, #18
 800b020:	429a      	cmp	r2, r3
 800b022:	d106      	bne.n	800b032 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	0011      	movs	r1, r2
 800b02a:	0018      	movs	r0, r3
 800b02c:	f000 fef4 	bl	800be18 <I2C_ITListenCplt>
 800b030:	e036      	b.n	800b0a0 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2241      	movs	r2, #65	@ 0x41
 800b036:	5c9b      	ldrb	r3, [r3, r2]
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b29      	cmp	r3, #41	@ 0x29
 800b03c:	d110      	bne.n	800b060 <I2C_Slave_ISR_IT+0xb4>
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	4a59      	ldr	r2, [pc, #356]	@ (800b1a8 <I2C_Slave_ISR_IT+0x1fc>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d00c      	beq.n	800b060 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2210      	movs	r2, #16
 800b04c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	0018      	movs	r0, r3
 800b052:	f001 f864 	bl	800c11e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	0018      	movs	r0, r3
 800b05a:	f000 fc8b 	bl	800b974 <I2C_ITSlaveSeqCplt>
 800b05e:	e01f      	b.n	800b0a0 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2210      	movs	r2, #16
 800b066:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b068:	e091      	b.n	800b18e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2210      	movs	r2, #16
 800b070:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b076:	2204      	movs	r2, #4
 800b078:	431a      	orrs	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d005      	beq.n	800b090 <I2C_Slave_ISR_IT+0xe4>
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	2380      	movs	r3, #128	@ 0x80
 800b088:	045b      	lsls	r3, r3, #17
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d000      	beq.n	800b090 <I2C_Slave_ISR_IT+0xe4>
 800b08e:	e07e      	b.n	800b18e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	0011      	movs	r1, r2
 800b098:	0018      	movs	r0, r3
 800b09a:	f000 ff15 	bl	800bec8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b09e:	e076      	b.n	800b18e <I2C_Slave_ISR_IT+0x1e2>
 800b0a0:	e075      	b.n	800b18e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2204      	movs	r2, #4
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	d02f      	beq.n	800b10a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2204      	movs	r2, #4
 800b0ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b0b0:	d02b      	beq.n	800b10a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d018      	beq.n	800b0ee <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ce:	1c5a      	adds	r2, r3, #1
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d14c      	bne.n	800b192 <I2C_Slave_ISR_IT+0x1e6>
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	4a2b      	ldr	r2, [pc, #172]	@ (800b1a8 <I2C_Slave_ISR_IT+0x1fc>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d048      	beq.n	800b192 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	0018      	movs	r0, r3
 800b104:	f000 fc36 	bl	800b974 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b108:	e043      	b.n	800b192 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2208      	movs	r2, #8
 800b10e:	4013      	ands	r3, r2
 800b110:	d00a      	beq.n	800b128 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2208      	movs	r2, #8
 800b116:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b118:	d006      	beq.n	800b128 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	0011      	movs	r1, r2
 800b120:	0018      	movs	r0, r3
 800b122:	f000 fb41 	bl	800b7a8 <I2C_ITAddrCplt>
 800b126:	e035      	b.n	800b194 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	2202      	movs	r2, #2
 800b12c:	4013      	ands	r3, r2
 800b12e:	d031      	beq.n	800b194 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2202      	movs	r2, #2
 800b134:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b136:	d02d      	beq.n	800b194 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d018      	beq.n	800b174 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	3b01      	subs	r3, #1
 800b160:	b29a      	uxth	r2, r3
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b16a:	3b01      	subs	r3, #1
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b172:	e00f      	b.n	800b194 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	2380      	movs	r3, #128	@ 0x80
 800b178:	045b      	lsls	r3, r3, #17
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d002      	beq.n	800b184 <I2C_Slave_ISR_IT+0x1d8>
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d107      	bne.n	800b194 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	0018      	movs	r0, r3
 800b188:	f000 fbf4 	bl	800b974 <I2C_ITSlaveSeqCplt>
 800b18c:	e002      	b.n	800b194 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800b18e:	46c0      	nop			@ (mov r8, r8)
 800b190:	e000      	b.n	800b194 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800b192:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2240      	movs	r2, #64	@ 0x40
 800b198:	2100      	movs	r1, #0
 800b19a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	0018      	movs	r0, r3
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	b006      	add	sp, #24
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	46c0      	nop			@ (mov r8, r8)
 800b1a8:	ffff0000 	.word	0xffff0000

0800b1ac <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b089      	sub	sp, #36	@ 0x24
 800b1b0:	af02      	add	r7, sp, #8
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2240      	movs	r2, #64	@ 0x40
 800b1bc:	5c9b      	ldrb	r3, [r3, r2]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d101      	bne.n	800b1c6 <I2C_Master_ISR_DMA+0x1a>
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	e0e7      	b.n	800b396 <I2C_Master_ISR_DMA+0x1ea>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2240      	movs	r2, #64	@ 0x40
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2210      	movs	r2, #16
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	d017      	beq.n	800b206 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2210      	movs	r2, #16
 800b1da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b1dc:	d013      	beq.n	800b206 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2210      	movs	r2, #16
 800b1e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2120      	movs	r1, #32
 800b1f6:	0018      	movs	r0, r3
 800b1f8:	f001 f8c6 	bl	800c388 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	0018      	movs	r0, r3
 800b200:	f000 ff8d 	bl	800c11e <I2C_Flush_TXDR>
 800b204:	e0c2      	b.n	800b38c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2280      	movs	r2, #128	@ 0x80
 800b20a:	4013      	ands	r3, r2
 800b20c:	d100      	bne.n	800b210 <I2C_Master_ISR_DMA+0x64>
 800b20e:	e07c      	b.n	800b30a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2240      	movs	r2, #64	@ 0x40
 800b214:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b216:	d100      	bne.n	800b21a <I2C_Master_ISR_DMA+0x6e>
 800b218:	e077      	b.n	800b30a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2140      	movs	r1, #64	@ 0x40
 800b226:	438a      	bics	r2, r1
 800b228:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b22e:	b29b      	uxth	r3, r3
 800b230:	2b00      	cmp	r3, #0
 800b232:	d055      	beq.n	800b2e0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	2312      	movs	r3, #18
 800b23e:	18fb      	adds	r3, r7, r3
 800b240:	0592      	lsls	r2, r2, #22
 800b242:	0d92      	lsrs	r2, r2, #22
 800b244:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	2bff      	cmp	r3, #255	@ 0xff
 800b24e:	d906      	bls.n	800b25e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	22ff      	movs	r2, #255	@ 0xff
 800b254:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800b256:	2380      	movs	r3, #128	@ 0x80
 800b258:	045b      	lsls	r3, r3, #17
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e010      	b.n	800b280 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b262:	b29a      	uxth	r2, r3
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26c:	4a4c      	ldr	r2, [pc, #304]	@ (800b3a0 <I2C_Master_ISR_DMA+0x1f4>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d003      	beq.n	800b27a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b276:	617b      	str	r3, [r7, #20]
 800b278:	e002      	b.n	800b280 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b27a:	2380      	movs	r3, #128	@ 0x80
 800b27c:	049b      	lsls	r3, r3, #18
 800b27e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b284:	b2da      	uxtb	r2, r3
 800b286:	697c      	ldr	r4, [r7, #20]
 800b288:	2312      	movs	r3, #18
 800b28a:	18fb      	adds	r3, r7, r3
 800b28c:	8819      	ldrh	r1, [r3, #0]
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	2300      	movs	r3, #0
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	0023      	movs	r3, r4
 800b296:	f001 f83d 	bl	800c314 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2241      	movs	r2, #65	@ 0x41
 800b2b0:	5c9b      	ldrb	r3, [r3, r2]
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	2b22      	cmp	r3, #34	@ 0x22
 800b2b6:	d109      	bne.n	800b2cc <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2180      	movs	r1, #128	@ 0x80
 800b2c4:	0209      	lsls	r1, r1, #8
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b2ca:	e05f      	b.n	800b38c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2180      	movs	r1, #128	@ 0x80
 800b2d8:	01c9      	lsls	r1, r1, #7
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b2de:	e055      	b.n	800b38c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	2380      	movs	r3, #128	@ 0x80
 800b2e8:	049b      	lsls	r3, r3, #18
 800b2ea:	401a      	ands	r2, r3
 800b2ec:	2380      	movs	r3, #128	@ 0x80
 800b2ee:	049b      	lsls	r3, r3, #18
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d004      	beq.n	800b2fe <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	0018      	movs	r0, r3
 800b2f8:	f000 fafa 	bl	800b8f0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b2fc:	e046      	b.n	800b38c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2140      	movs	r1, #64	@ 0x40
 800b302:	0018      	movs	r0, r3
 800b304:	f000 fde0 	bl	800bec8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b308:	e040      	b.n	800b38c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2240      	movs	r2, #64	@ 0x40
 800b30e:	4013      	ands	r3, r2
 800b310:	d02c      	beq.n	800b36c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2240      	movs	r2, #64	@ 0x40
 800b316:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b318:	d028      	beq.n	800b36c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b31e:	b29b      	uxth	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	d11d      	bne.n	800b360 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	2380      	movs	r3, #128	@ 0x80
 800b32c:	049b      	lsls	r3, r3, #18
 800b32e:	401a      	ands	r2, r3
 800b330:	2380      	movs	r3, #128	@ 0x80
 800b332:	049b      	lsls	r3, r3, #18
 800b334:	429a      	cmp	r2, r3
 800b336:	d028      	beq.n	800b38a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33c:	4a18      	ldr	r2, [pc, #96]	@ (800b3a0 <I2C_Master_ISR_DMA+0x1f4>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d109      	bne.n	800b356 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2180      	movs	r1, #128	@ 0x80
 800b34e:	01c9      	lsls	r1, r1, #7
 800b350:	430a      	orrs	r2, r1
 800b352:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b354:	e019      	b.n	800b38a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	0018      	movs	r0, r3
 800b35a:	f000 fac9 	bl	800b8f0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b35e:	e014      	b.n	800b38a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2140      	movs	r1, #64	@ 0x40
 800b364:	0018      	movs	r0, r3
 800b366:	f000 fdaf 	bl	800bec8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b36a:	e00e      	b.n	800b38a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2220      	movs	r2, #32
 800b370:	4013      	ands	r3, r2
 800b372:	d00b      	beq.n	800b38c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2220      	movs	r2, #32
 800b378:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b37a:	d007      	beq.n	800b38c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	0011      	movs	r1, r2
 800b382:	0018      	movs	r0, r3
 800b384:	f000 fb5a 	bl	800ba3c <I2C_ITMasterCplt>
 800b388:	e000      	b.n	800b38c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800b38a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2240      	movs	r2, #64	@ 0x40
 800b390:	2100      	movs	r1, #0
 800b392:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	0018      	movs	r0, r3
 800b398:	46bd      	mov	sp, r7
 800b39a:	b007      	add	sp, #28
 800b39c:	bd90      	pop	{r4, r7, pc}
 800b39e:	46c0      	nop			@ (mov r8, r8)
 800b3a0:	ffff0000 	.word	0xffff0000

0800b3a4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b3a4:	b590      	push	{r4, r7, lr}
 800b3a6:	b089      	sub	sp, #36	@ 0x24
 800b3a8:	af02      	add	r7, sp, #8
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b3b0:	4b88      	ldr	r3, [pc, #544]	@ (800b5d4 <I2C_Mem_ISR_DMA+0x230>)
 800b3b2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2240      	movs	r2, #64	@ 0x40
 800b3b8:	5c9b      	ldrb	r3, [r3, r2]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d101      	bne.n	800b3c2 <I2C_Mem_ISR_DMA+0x1e>
 800b3be:	2302      	movs	r3, #2
 800b3c0:	e104      	b.n	800b5cc <I2C_Mem_ISR_DMA+0x228>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2240      	movs	r2, #64	@ 0x40
 800b3c6:	2101      	movs	r1, #1
 800b3c8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2210      	movs	r2, #16
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	d017      	beq.n	800b402 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2210      	movs	r2, #16
 800b3d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b3d8:	d013      	beq.n	800b402 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2210      	movs	r2, #16
 800b3e0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3e6:	2204      	movs	r2, #4
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2120      	movs	r1, #32
 800b3f2:	0018      	movs	r0, r3
 800b3f4:	f000 ffc8 	bl	800c388 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	0018      	movs	r0, r3
 800b3fc:	f000 fe8f 	bl	800c11e <I2C_Flush_TXDR>
 800b400:	e0df      	b.n	800b5c2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	2202      	movs	r2, #2
 800b406:	4013      	ands	r3, r2
 800b408:	d00d      	beq.n	800b426 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2202      	movs	r2, #2
 800b40e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b410:	d009      	beq.n	800b426 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b41a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2201      	movs	r2, #1
 800b420:	4252      	negs	r2, r2
 800b422:	651a      	str	r2, [r3, #80]	@ 0x50
 800b424:	e0cd      	b.n	800b5c2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2280      	movs	r2, #128	@ 0x80
 800b42a:	4013      	ands	r3, r2
 800b42c:	d05e      	beq.n	800b4ec <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2240      	movs	r2, #64	@ 0x40
 800b432:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b434:	d05a      	beq.n	800b4ec <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2110      	movs	r1, #16
 800b43a:	0018      	movs	r0, r3
 800b43c:	f000 ffa4 	bl	800c388 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b444:	b29b      	uxth	r3, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d04a      	beq.n	800b4e0 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b44e:	b29b      	uxth	r3, r3
 800b450:	2bff      	cmp	r3, #255	@ 0xff
 800b452:	d910      	bls.n	800b476 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	22ff      	movs	r2, #255	@ 0xff
 800b458:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b45e:	b299      	uxth	r1, r3
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b464:	b2da      	uxtb	r2, r3
 800b466:	2380      	movs	r3, #128	@ 0x80
 800b468:	045b      	lsls	r3, r3, #17
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	2400      	movs	r4, #0
 800b46e:	9400      	str	r4, [sp, #0]
 800b470:	f000 ff50 	bl	800c314 <I2C_TransferConfig>
 800b474:	e011      	b.n	800b49a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b484:	b299      	uxth	r1, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	2380      	movs	r3, #128	@ 0x80
 800b48e:	049b      	lsls	r3, r3, #18
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	2400      	movs	r4, #0
 800b494:	9400      	str	r4, [sp, #0]
 800b496:	f000 ff3d 	bl	800c314 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2241      	movs	r2, #65	@ 0x41
 800b4b0:	5c9b      	ldrb	r3, [r3, r2]
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b22      	cmp	r3, #34	@ 0x22
 800b4b6:	d109      	bne.n	800b4cc <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2180      	movs	r1, #128	@ 0x80
 800b4c4:	0209      	lsls	r1, r1, #8
 800b4c6:	430a      	orrs	r2, r1
 800b4c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b4ca:	e07a      	b.n	800b5c2 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2180      	movs	r1, #128	@ 0x80
 800b4d8:	01c9      	lsls	r1, r1, #7
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b4de:	e070      	b.n	800b5c2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2140      	movs	r1, #64	@ 0x40
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	f000 fcef 	bl	800bec8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b4ea:	e06a      	b.n	800b5c2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	2240      	movs	r2, #64	@ 0x40
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	d058      	beq.n	800b5a6 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2240      	movs	r2, #64	@ 0x40
 800b4f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b4fa:	d054      	beq.n	800b5a6 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2241      	movs	r2, #65	@ 0x41
 800b500:	5c9b      	ldrb	r3, [r3, r2]
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b22      	cmp	r3, #34	@ 0x22
 800b506:	d101      	bne.n	800b50c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800b508:	4b33      	ldr	r3, [pc, #204]	@ (800b5d8 <I2C_Mem_ISR_DMA+0x234>)
 800b50a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b510:	b29b      	uxth	r3, r3
 800b512:	2bff      	cmp	r3, #255	@ 0xff
 800b514:	d911      	bls.n	800b53a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	22ff      	movs	r2, #255	@ 0xff
 800b51a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b520:	b299      	uxth	r1, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b526:	b2da      	uxtb	r2, r3
 800b528:	2380      	movs	r3, #128	@ 0x80
 800b52a:	045c      	lsls	r4, r3, #17
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	0023      	movs	r3, r4
 800b534:	f000 feee 	bl	800c314 <I2C_TransferConfig>
 800b538:	e012      	b.n	800b560 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b53e:	b29a      	uxth	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b548:	b299      	uxth	r1, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	2380      	movs	r3, #128	@ 0x80
 800b552:	049c      	lsls	r4, r3, #18
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	0023      	movs	r3, r4
 800b55c:	f000 feda 	bl	800c314 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b564:	b29a      	uxth	r2, r3
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2241      	movs	r2, #65	@ 0x41
 800b576:	5c9b      	ldrb	r3, [r3, r2]
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b22      	cmp	r3, #34	@ 0x22
 800b57c:	d109      	bne.n	800b592 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2180      	movs	r1, #128	@ 0x80
 800b58a:	0209      	lsls	r1, r1, #8
 800b58c:	430a      	orrs	r2, r1
 800b58e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b590:	e017      	b.n	800b5c2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2180      	movs	r1, #128	@ 0x80
 800b59e:	01c9      	lsls	r1, r1, #7
 800b5a0:	430a      	orrs	r2, r1
 800b5a2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b5a4:	e00d      	b.n	800b5c2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	2220      	movs	r2, #32
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	d009      	beq.n	800b5c2 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2220      	movs	r2, #32
 800b5b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b5b4:	d005      	beq.n	800b5c2 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	0011      	movs	r1, r2
 800b5bc:	0018      	movs	r0, r3
 800b5be:	f000 fa3d 	bl	800ba3c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2240      	movs	r2, #64	@ 0x40
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	b007      	add	sp, #28
 800b5d2:	bd90      	pop	{r4, r7, pc}
 800b5d4:	80002000 	.word	0x80002000
 800b5d8:	80002400 	.word	0x80002400

0800b5dc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b088      	sub	sp, #32
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ec:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2240      	movs	r2, #64	@ 0x40
 800b5f6:	5c9b      	ldrb	r3, [r3, r2]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d101      	bne.n	800b600 <I2C_Slave_ISR_DMA+0x24>
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	e0cd      	b.n	800b79c <I2C_Slave_ISR_DMA+0x1c0>
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2240      	movs	r2, #64	@ 0x40
 800b604:	2101      	movs	r1, #1
 800b606:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2220      	movs	r2, #32
 800b60c:	4013      	ands	r3, r2
 800b60e:	d009      	beq.n	800b624 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2220      	movs	r2, #32
 800b614:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b616:	d005      	beq.n	800b624 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	0011      	movs	r1, r2
 800b61e:	0018      	movs	r0, r3
 800b620:	f000 fada 	bl	800bbd8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2210      	movs	r2, #16
 800b628:	4013      	ands	r3, r2
 800b62a:	d100      	bne.n	800b62e <I2C_Slave_ISR_DMA+0x52>
 800b62c:	e0a3      	b.n	800b776 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2210      	movs	r2, #16
 800b632:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b634:	d100      	bne.n	800b638 <I2C_Slave_ISR_DMA+0x5c>
 800b636:	e09e      	b.n	800b776 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	2380      	movs	r3, #128	@ 0x80
 800b63c:	01db      	lsls	r3, r3, #7
 800b63e:	4013      	ands	r3, r2
 800b640:	d105      	bne.n	800b64e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	2380      	movs	r3, #128	@ 0x80
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b64a:	d100      	bne.n	800b64e <I2C_Slave_ISR_DMA+0x72>
 800b64c:	e08c      	b.n	800b768 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00c      	beq.n	800b670 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	2380      	movs	r3, #128	@ 0x80
 800b65a:	021b      	lsls	r3, r3, #8
 800b65c:	4013      	ands	r3, r2
 800b65e:	d007      	beq.n	800b670 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800b66c:	2301      	movs	r3, #1
 800b66e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00c      	beq.n	800b692 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	2380      	movs	r3, #128	@ 0x80
 800b67c:	01db      	lsls	r3, r3, #7
 800b67e:	4013      	ands	r3, r2
 800b680:	d007      	beq.n	800b692 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800b68e:	2301      	movs	r3, #1
 800b690:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d12d      	bne.n	800b6f4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2241      	movs	r2, #65	@ 0x41
 800b69c:	5c9b      	ldrb	r3, [r3, r2]
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b28      	cmp	r3, #40	@ 0x28
 800b6a2:	d10b      	bne.n	800b6bc <I2C_Slave_ISR_DMA+0xe0>
 800b6a4:	69ba      	ldr	r2, [r7, #24]
 800b6a6:	2380      	movs	r3, #128	@ 0x80
 800b6a8:	049b      	lsls	r3, r3, #18
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d106      	bne.n	800b6bc <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	0011      	movs	r1, r2
 800b6b4:	0018      	movs	r0, r3
 800b6b6:	f000 fbaf 	bl	800be18 <I2C_ITListenCplt>
 800b6ba:	e054      	b.n	800b766 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2241      	movs	r2, #65	@ 0x41
 800b6c0:	5c9b      	ldrb	r3, [r3, r2]
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b29      	cmp	r3, #41	@ 0x29
 800b6c6:	d110      	bne.n	800b6ea <I2C_Slave_ISR_DMA+0x10e>
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	4a36      	ldr	r2, [pc, #216]	@ (800b7a4 <I2C_Slave_ISR_DMA+0x1c8>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d00c      	beq.n	800b6ea <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2210      	movs	r2, #16
 800b6d6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	0018      	movs	r0, r3
 800b6dc:	f000 fd1f 	bl	800c11e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	f000 f946 	bl	800b974 <I2C_ITSlaveSeqCplt>
 800b6e8:	e03d      	b.n	800b766 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2210      	movs	r2, #16
 800b6f0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b6f2:	e03e      	b.n	800b772 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2210      	movs	r2, #16
 800b6fa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b700:	2204      	movs	r2, #4
 800b702:	431a      	orrs	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b708:	2317      	movs	r3, #23
 800b70a:	18fb      	adds	r3, r7, r3
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	2141      	movs	r1, #65	@ 0x41
 800b710:	5c52      	ldrb	r2, [r2, r1]
 800b712:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d004      	beq.n	800b724 <I2C_Slave_ISR_DMA+0x148>
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	2380      	movs	r3, #128	@ 0x80
 800b71e:	045b      	lsls	r3, r3, #17
 800b720:	429a      	cmp	r2, r3
 800b722:	d126      	bne.n	800b772 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b724:	2217      	movs	r2, #23
 800b726:	18bb      	adds	r3, r7, r2
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	2b21      	cmp	r3, #33	@ 0x21
 800b72c:	d003      	beq.n	800b736 <I2C_Slave_ISR_DMA+0x15a>
 800b72e:	18bb      	adds	r3, r7, r2
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	2b29      	cmp	r3, #41	@ 0x29
 800b734:	d103      	bne.n	800b73e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2221      	movs	r2, #33	@ 0x21
 800b73a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b73c:	e00b      	b.n	800b756 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b73e:	2217      	movs	r2, #23
 800b740:	18bb      	adds	r3, r7, r2
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2b22      	cmp	r3, #34	@ 0x22
 800b746:	d003      	beq.n	800b750 <I2C_Slave_ISR_DMA+0x174>
 800b748:	18bb      	adds	r3, r7, r2
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b74e:	d102      	bne.n	800b756 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2222      	movs	r2, #34	@ 0x22
 800b754:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	0011      	movs	r1, r2
 800b75e:	0018      	movs	r0, r3
 800b760:	f000 fbb2 	bl	800bec8 <I2C_ITError>
      if (treatdmanack == 1U)
 800b764:	e005      	b.n	800b772 <I2C_Slave_ISR_DMA+0x196>
 800b766:	e004      	b.n	800b772 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2210      	movs	r2, #16
 800b76e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b770:	e00f      	b.n	800b792 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800b772:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b774:	e00d      	b.n	800b792 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2208      	movs	r2, #8
 800b77a:	4013      	ands	r3, r2
 800b77c:	d009      	beq.n	800b792 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2208      	movs	r2, #8
 800b782:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b784:	d005      	beq.n	800b792 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	0011      	movs	r1, r2
 800b78c:	0018      	movs	r0, r3
 800b78e:	f000 f80b 	bl	800b7a8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2240      	movs	r2, #64	@ 0x40
 800b796:	2100      	movs	r1, #0
 800b798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	0018      	movs	r0, r3
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	b008      	add	sp, #32
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	ffff0000 	.word	0xffff0000

0800b7a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b7a8:	b5b0      	push	{r4, r5, r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2241      	movs	r2, #65	@ 0x41
 800b7b6:	5c9b      	ldrb	r3, [r3, r2]
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	001a      	movs	r2, r3
 800b7bc:	2328      	movs	r3, #40	@ 0x28
 800b7be:	4013      	ands	r3, r2
 800b7c0:	2b28      	cmp	r3, #40	@ 0x28
 800b7c2:	d000      	beq.n	800b7c6 <I2C_ITAddrCplt+0x1e>
 800b7c4:	e088      	b.n	800b8d8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	0c1b      	lsrs	r3, r3, #16
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	250f      	movs	r5, #15
 800b7d2:	197b      	adds	r3, r7, r5
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	400a      	ands	r2, r1
 800b7d8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	0c1b      	lsrs	r3, r3, #16
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	200c      	movs	r0, #12
 800b7e6:	183b      	adds	r3, r7, r0
 800b7e8:	21fe      	movs	r1, #254	@ 0xfe
 800b7ea:	400a      	ands	r2, r1
 800b7ec:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	240a      	movs	r4, #10
 800b7f8:	193b      	adds	r3, r7, r4
 800b7fa:	0592      	lsls	r2, r2, #22
 800b7fc:	0d92      	lsrs	r2, r2, #22
 800b7fe:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	b29a      	uxth	r2, r3
 800b808:	2308      	movs	r3, #8
 800b80a:	18fb      	adds	r3, r7, r3
 800b80c:	21fe      	movs	r1, #254	@ 0xfe
 800b80e:	400a      	ands	r2, r1
 800b810:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	2b02      	cmp	r3, #2
 800b818:	d148      	bne.n	800b8ac <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b81a:	0021      	movs	r1, r4
 800b81c:	187b      	adds	r3, r7, r1
 800b81e:	881b      	ldrh	r3, [r3, #0]
 800b820:	09db      	lsrs	r3, r3, #7
 800b822:	b29a      	uxth	r2, r3
 800b824:	183b      	adds	r3, r7, r0
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	4053      	eors	r3, r2
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	001a      	movs	r2, r3
 800b82e:	2306      	movs	r3, #6
 800b830:	4013      	ands	r3, r2
 800b832:	d120      	bne.n	800b876 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800b834:	183b      	adds	r3, r7, r0
 800b836:	187a      	adds	r2, r7, r1
 800b838:	8812      	ldrh	r2, [r2, #0]
 800b83a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b840:	1c5a      	adds	r2, r3, #1
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d14c      	bne.n	800b8e8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2208      	movs	r2, #8
 800b85a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2240      	movs	r2, #64	@ 0x40
 800b860:	2100      	movs	r1, #0
 800b862:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b864:	183b      	adds	r3, r7, r0
 800b866:	881a      	ldrh	r2, [r3, #0]
 800b868:	197b      	adds	r3, r7, r5
 800b86a:	7819      	ldrb	r1, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	0018      	movs	r0, r3
 800b870:	f7ff fa39 	bl	800ace6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b874:	e038      	b.n	800b8e8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800b876:	240c      	movs	r4, #12
 800b878:	193b      	adds	r3, r7, r4
 800b87a:	2208      	movs	r2, #8
 800b87c:	18ba      	adds	r2, r7, r2
 800b87e:	8812      	ldrh	r2, [r2, #0]
 800b880:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b882:	2380      	movs	r3, #128	@ 0x80
 800b884:	021a      	lsls	r2, r3, #8
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	0011      	movs	r1, r2
 800b88a:	0018      	movs	r0, r3
 800b88c:	f000 fe0a 	bl	800c4a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2240      	movs	r2, #64	@ 0x40
 800b894:	2100      	movs	r1, #0
 800b896:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b898:	193b      	adds	r3, r7, r4
 800b89a:	881a      	ldrh	r2, [r3, #0]
 800b89c:	230f      	movs	r3, #15
 800b89e:	18fb      	adds	r3, r7, r3
 800b8a0:	7819      	ldrb	r1, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	0018      	movs	r0, r3
 800b8a6:	f7ff fa1e 	bl	800ace6 <HAL_I2C_AddrCallback>
}
 800b8aa:	e01d      	b.n	800b8e8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b8ac:	2380      	movs	r3, #128	@ 0x80
 800b8ae:	021a      	lsls	r2, r3, #8
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	0011      	movs	r1, r2
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	f000 fdf5 	bl	800c4a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2240      	movs	r2, #64	@ 0x40
 800b8be:	2100      	movs	r1, #0
 800b8c0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b8c2:	230c      	movs	r3, #12
 800b8c4:	18fb      	adds	r3, r7, r3
 800b8c6:	881a      	ldrh	r2, [r3, #0]
 800b8c8:	230f      	movs	r3, #15
 800b8ca:	18fb      	adds	r3, r7, r3
 800b8cc:	7819      	ldrb	r1, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	f7ff fa08 	bl	800ace6 <HAL_I2C_AddrCallback>
}
 800b8d6:	e007      	b.n	800b8e8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2208      	movs	r2, #8
 800b8de:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2240      	movs	r2, #64	@ 0x40
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	5499      	strb	r1, [r3, r2]
}
 800b8e8:	46c0      	nop			@ (mov r8, r8)
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	b004      	add	sp, #16
 800b8ee:	bdb0      	pop	{r4, r5, r7, pc}

0800b8f0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2242      	movs	r2, #66	@ 0x42
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2241      	movs	r2, #65	@ 0x41
 800b904:	5c9b      	ldrb	r3, [r3, r2]
 800b906:	b2db      	uxtb	r3, r3
 800b908:	2b21      	cmp	r3, #33	@ 0x21
 800b90a:	d117      	bne.n	800b93c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2241      	movs	r2, #65	@ 0x41
 800b910:	2120      	movs	r1, #32
 800b912:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2211      	movs	r2, #17
 800b918:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2101      	movs	r1, #1
 800b924:	0018      	movs	r0, r3
 800b926:	f000 fdbd 	bl	800c4a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2240      	movs	r2, #64	@ 0x40
 800b92e:	2100      	movs	r1, #0
 800b930:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	0018      	movs	r0, r3
 800b936:	f7ff f9b6 	bl	800aca6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b93a:	e016      	b.n	800b96a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2241      	movs	r2, #65	@ 0x41
 800b940:	2120      	movs	r1, #32
 800b942:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2212      	movs	r2, #18
 800b948:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2102      	movs	r1, #2
 800b954:	0018      	movs	r0, r3
 800b956:	f000 fda5 	bl	800c4a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2240      	movs	r2, #64	@ 0x40
 800b95e:	2100      	movs	r1, #0
 800b960:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	0018      	movs	r0, r3
 800b966:	f7ff f9a6 	bl	800acb6 <HAL_I2C_MasterRxCpltCallback>
}
 800b96a:	46c0      	nop			@ (mov r8, r8)
 800b96c:	46bd      	mov	sp, r7
 800b96e:	b002      	add	sp, #8
 800b970:	bd80      	pop	{r7, pc}
	...

0800b974 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2242      	movs	r2, #66	@ 0x42
 800b988:	2100      	movs	r1, #0
 800b98a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	2380      	movs	r3, #128	@ 0x80
 800b990:	01db      	lsls	r3, r3, #7
 800b992:	4013      	ands	r3, r2
 800b994:	d008      	beq.n	800b9a8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4924      	ldr	r1, [pc, #144]	@ (800ba34 <I2C_ITSlaveSeqCplt+0xc0>)
 800b9a2:	400a      	ands	r2, r1
 800b9a4:	601a      	str	r2, [r3, #0]
 800b9a6:	e00c      	b.n	800b9c2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	2380      	movs	r3, #128	@ 0x80
 800b9ac:	021b      	lsls	r3, r3, #8
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	d007      	beq.n	800b9c2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	491e      	ldr	r1, [pc, #120]	@ (800ba38 <I2C_ITSlaveSeqCplt+0xc4>)
 800b9be:	400a      	ands	r2, r1
 800b9c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2241      	movs	r2, #65	@ 0x41
 800b9c6:	5c9b      	ldrb	r3, [r3, r2]
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b29      	cmp	r3, #41	@ 0x29
 800b9cc:	d114      	bne.n	800b9f8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2241      	movs	r2, #65	@ 0x41
 800b9d2:	2128      	movs	r1, #40	@ 0x28
 800b9d4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2221      	movs	r2, #33	@ 0x21
 800b9da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2101      	movs	r1, #1
 800b9e0:	0018      	movs	r0, r3
 800b9e2:	f000 fd5f 	bl	800c4a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2240      	movs	r2, #64	@ 0x40
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	0018      	movs	r0, r3
 800b9f2:	f7ff f968 	bl	800acc6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b9f6:	e019      	b.n	800ba2c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2241      	movs	r2, #65	@ 0x41
 800b9fc:	5c9b      	ldrb	r3, [r3, r2]
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba02:	d113      	bne.n	800ba2c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2241      	movs	r2, #65	@ 0x41
 800ba08:	2128      	movs	r1, #40	@ 0x28
 800ba0a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2222      	movs	r2, #34	@ 0x22
 800ba10:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2102      	movs	r1, #2
 800ba16:	0018      	movs	r0, r3
 800ba18:	f000 fd44 	bl	800c4a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2240      	movs	r2, #64	@ 0x40
 800ba20:	2100      	movs	r1, #0
 800ba22:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	0018      	movs	r0, r3
 800ba28:	f7ff f955 	bl	800acd6 <HAL_I2C_SlaveRxCpltCallback>
}
 800ba2c:	46c0      	nop			@ (mov r8, r8)
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	b004      	add	sp, #16
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	ffffbfff 	.word	0xffffbfff
 800ba38:	ffff7fff 	.word	0xffff7fff

0800ba3c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2220      	movs	r2, #32
 800ba50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2241      	movs	r2, #65	@ 0x41
 800ba56:	5c9b      	ldrb	r3, [r3, r2]
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b21      	cmp	r3, #33	@ 0x21
 800ba5c:	d108      	bne.n	800ba70 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2101      	movs	r1, #1
 800ba62:	0018      	movs	r0, r3
 800ba64:	f000 fd1e 	bl	800c4a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2211      	movs	r2, #17
 800ba6c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba6e:	e00d      	b.n	800ba8c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2241      	movs	r2, #65	@ 0x41
 800ba74:	5c9b      	ldrb	r3, [r3, r2]
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b22      	cmp	r3, #34	@ 0x22
 800ba7a:	d107      	bne.n	800ba8c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2102      	movs	r1, #2
 800ba80:	0018      	movs	r0, r3
 800ba82:	f000 fd0f 	bl	800c4a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2212      	movs	r2, #18
 800ba8a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	494e      	ldr	r1, [pc, #312]	@ (800bbd0 <I2C_ITMasterCplt+0x194>)
 800ba98:	400a      	ands	r2, r1
 800ba9a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a4b      	ldr	r2, [pc, #300]	@ (800bbd4 <I2C_ITMasterCplt+0x198>)
 800baa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	2210      	movs	r2, #16
 800baac:	4013      	ands	r3, r2
 800baae:	d009      	beq.n	800bac4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2210      	movs	r2, #16
 800bab6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800babc:	2204      	movs	r2, #4
 800babe:	431a      	orrs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2241      	movs	r2, #65	@ 0x41
 800bac8:	5c9b      	ldrb	r3, [r3, r2]
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	2b60      	cmp	r3, #96	@ 0x60
 800bace:	d109      	bne.n	800bae4 <I2C_ITMasterCplt+0xa8>
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2204      	movs	r2, #4
 800bad4:	4013      	ands	r3, r2
 800bad6:	d005      	beq.n	800bae4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800bae2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	0018      	movs	r0, r3
 800bae8:	f000 fb19 	bl	800c11e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baf0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2241      	movs	r2, #65	@ 0x41
 800baf6:	5c9b      	ldrb	r3, [r3, r2]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b60      	cmp	r3, #96	@ 0x60
 800bafc:	d002      	beq.n	800bb04 <I2C_ITMasterCplt+0xc8>
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d007      	beq.n	800bb14 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	0011      	movs	r1, r2
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	f000 f9db 	bl	800bec8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bb12:	e058      	b.n	800bbc6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2241      	movs	r2, #65	@ 0x41
 800bb18:	5c9b      	ldrb	r3, [r3, r2]
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b21      	cmp	r3, #33	@ 0x21
 800bb1e:	d126      	bne.n	800bb6e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2241      	movs	r2, #65	@ 0x41
 800bb24:	2120      	movs	r1, #32
 800bb26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2242      	movs	r2, #66	@ 0x42
 800bb32:	5c9b      	ldrb	r3, [r3, r2]
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b40      	cmp	r3, #64	@ 0x40
 800bb38:	d10c      	bne.n	800bb54 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2242      	movs	r2, #66	@ 0x42
 800bb3e:	2100      	movs	r1, #0
 800bb40:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2240      	movs	r2, #64	@ 0x40
 800bb46:	2100      	movs	r1, #0
 800bb48:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	f7ff f8e2 	bl	800ad16 <HAL_I2C_MemTxCpltCallback>
}
 800bb52:	e038      	b.n	800bbc6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2242      	movs	r2, #66	@ 0x42
 800bb58:	2100      	movs	r1, #0
 800bb5a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2240      	movs	r2, #64	@ 0x40
 800bb60:	2100      	movs	r1, #0
 800bb62:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	0018      	movs	r0, r3
 800bb68:	f7ff f89d 	bl	800aca6 <HAL_I2C_MasterTxCpltCallback>
}
 800bb6c:	e02b      	b.n	800bbc6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2241      	movs	r2, #65	@ 0x41
 800bb72:	5c9b      	ldrb	r3, [r3, r2]
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b22      	cmp	r3, #34	@ 0x22
 800bb78:	d125      	bne.n	800bbc6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2241      	movs	r2, #65	@ 0x41
 800bb7e:	2120      	movs	r1, #32
 800bb80:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2242      	movs	r2, #66	@ 0x42
 800bb8c:	5c9b      	ldrb	r3, [r3, r2]
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b40      	cmp	r3, #64	@ 0x40
 800bb92:	d10c      	bne.n	800bbae <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2242      	movs	r2, #66	@ 0x42
 800bb98:	2100      	movs	r1, #0
 800bb9a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2240      	movs	r2, #64	@ 0x40
 800bba0:	2100      	movs	r1, #0
 800bba2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	0018      	movs	r0, r3
 800bba8:	f7ff f8bd 	bl	800ad26 <HAL_I2C_MemRxCpltCallback>
}
 800bbac:	e00b      	b.n	800bbc6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2242      	movs	r2, #66	@ 0x42
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2240      	movs	r2, #64	@ 0x40
 800bbba:	2100      	movs	r1, #0
 800bbbc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f7ff f878 	bl	800acb6 <HAL_I2C_MasterRxCpltCallback>
}
 800bbc6:	46c0      	nop			@ (mov r8, r8)
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	b006      	add	sp, #24
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	46c0      	nop			@ (mov r8, r8)
 800bbd0:	fe00e800 	.word	0xfe00e800
 800bbd4:	ffff0000 	.word	0xffff0000

0800bbd8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bbee:	200f      	movs	r0, #15
 800bbf0:	183b      	adds	r3, r7, r0
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	2141      	movs	r1, #65	@ 0x41
 800bbf6:	5c52      	ldrb	r2, [r2, r1]
 800bbf8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bc02:	183b      	adds	r3, r7, r0
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	2b21      	cmp	r3, #33	@ 0x21
 800bc08:	d003      	beq.n	800bc12 <I2C_ITSlaveCplt+0x3a>
 800bc0a:	183b      	adds	r3, r7, r0
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b29      	cmp	r3, #41	@ 0x29
 800bc10:	d109      	bne.n	800bc26 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bc12:	4a7b      	ldr	r2, [pc, #492]	@ (800be00 <I2C_ITSlaveCplt+0x228>)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	0011      	movs	r1, r2
 800bc18:	0018      	movs	r0, r3
 800bc1a:	f000 fc43 	bl	800c4a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2221      	movs	r2, #33	@ 0x21
 800bc22:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc24:	e011      	b.n	800bc4a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bc26:	220f      	movs	r2, #15
 800bc28:	18bb      	adds	r3, r7, r2
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b22      	cmp	r3, #34	@ 0x22
 800bc2e:	d003      	beq.n	800bc38 <I2C_ITSlaveCplt+0x60>
 800bc30:	18bb      	adds	r3, r7, r2
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc36:	d108      	bne.n	800bc4a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bc38:	4a72      	ldr	r2, [pc, #456]	@ (800be04 <I2C_ITSlaveCplt+0x22c>)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	0011      	movs	r1, r2
 800bc3e:	0018      	movs	r0, r3
 800bc40:	f000 fc30 	bl	800c4a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2222      	movs	r2, #34	@ 0x22
 800bc48:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2180      	movs	r1, #128	@ 0x80
 800bc56:	0209      	lsls	r1, r1, #8
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	685a      	ldr	r2, [r3, #4]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4968      	ldr	r1, [pc, #416]	@ (800be08 <I2C_ITSlaveCplt+0x230>)
 800bc68:	400a      	ands	r2, r1
 800bc6a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	0018      	movs	r0, r3
 800bc70:	f000 fa55 	bl	800c11e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	2380      	movs	r3, #128	@ 0x80
 800bc78:	01db      	lsls	r3, r3, #7
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	d013      	beq.n	800bca6 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4960      	ldr	r1, [pc, #384]	@ (800be0c <I2C_ITSlaveCplt+0x234>)
 800bc8a:	400a      	ands	r2, r1
 800bc8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d01f      	beq.n	800bcd6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bca4:	e017      	b.n	800bcd6 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bca6:	693a      	ldr	r2, [r7, #16]
 800bca8:	2380      	movs	r3, #128	@ 0x80
 800bcaa:	021b      	lsls	r3, r3, #8
 800bcac:	4013      	ands	r3, r2
 800bcae:	d012      	beq.n	800bcd6 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4955      	ldr	r1, [pc, #340]	@ (800be10 <I2C_ITSlaveCplt+0x238>)
 800bcbc:	400a      	ands	r2, r1
 800bcbe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d006      	beq.n	800bcd6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2204      	movs	r2, #4
 800bcda:	4013      	ands	r3, r2
 800bcdc:	d020      	beq.n	800bd20 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2204      	movs	r2, #4
 800bce2:	4393      	bics	r3, r2
 800bce4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf0:	b2d2      	uxtb	r2, r2
 800bcf2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf8:	1c5a      	adds	r2, r3, #1
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00c      	beq.n	800bd20 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d005      	beq.n	800bd36 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2e:	2204      	movs	r2, #4
 800bd30:	431a      	orrs	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2242      	movs	r2, #66	@ 0x42
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d013      	beq.n	800bd74 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	0011      	movs	r1, r2
 800bd54:	0018      	movs	r0, r3
 800bd56:	f000 f8b7 	bl	800bec8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2241      	movs	r2, #65	@ 0x41
 800bd5e:	5c9b      	ldrb	r3, [r3, r2]
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	2b28      	cmp	r3, #40	@ 0x28
 800bd64:	d147      	bne.n	800bdf6 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	0011      	movs	r1, r2
 800bd6c:	0018      	movs	r0, r3
 800bd6e:	f000 f853 	bl	800be18 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bd72:	e040      	b.n	800bdf6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd78:	4a26      	ldr	r2, [pc, #152]	@ (800be14 <I2C_ITSlaveCplt+0x23c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d016      	beq.n	800bdac <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	0018      	movs	r0, r3
 800bd82:	f7ff fdf7 	bl	800b974 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a22      	ldr	r2, [pc, #136]	@ (800be14 <I2C_ITSlaveCplt+0x23c>)
 800bd8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2241      	movs	r2, #65	@ 0x41
 800bd90:	2120      	movs	r1, #32
 800bd92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2240      	movs	r2, #64	@ 0x40
 800bd9e:	2100      	movs	r1, #0
 800bda0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	0018      	movs	r0, r3
 800bda6:	f7fe ffae 	bl	800ad06 <HAL_I2C_ListenCpltCallback>
}
 800bdaa:	e024      	b.n	800bdf6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2241      	movs	r2, #65	@ 0x41
 800bdb0:	5c9b      	ldrb	r3, [r3, r2]
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b22      	cmp	r3, #34	@ 0x22
 800bdb6:	d10f      	bne.n	800bdd8 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2241      	movs	r2, #65	@ 0x41
 800bdbc:	2120      	movs	r1, #32
 800bdbe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2240      	movs	r2, #64	@ 0x40
 800bdca:	2100      	movs	r1, #0
 800bdcc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	0018      	movs	r0, r3
 800bdd2:	f7fe ff80 	bl	800acd6 <HAL_I2C_SlaveRxCpltCallback>
}
 800bdd6:	e00e      	b.n	800bdf6 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2241      	movs	r2, #65	@ 0x41
 800bddc:	2120      	movs	r1, #32
 800bdde:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2240      	movs	r2, #64	@ 0x40
 800bdea:	2100      	movs	r1, #0
 800bdec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	0018      	movs	r0, r3
 800bdf2:	f7fe ff68 	bl	800acc6 <HAL_I2C_SlaveTxCpltCallback>
}
 800bdf6:	46c0      	nop			@ (mov r8, r8)
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	b006      	add	sp, #24
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	46c0      	nop			@ (mov r8, r8)
 800be00:	00008001 	.word	0x00008001
 800be04:	00008002 	.word	0x00008002
 800be08:	fe00e800 	.word	0xfe00e800
 800be0c:	ffffbfff 	.word	0xffffbfff
 800be10:	ffff7fff 	.word	0xffff7fff
 800be14:	ffff0000 	.word	0xffff0000

0800be18 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a26      	ldr	r2, [pc, #152]	@ (800bec0 <I2C_ITListenCplt+0xa8>)
 800be26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2241      	movs	r2, #65	@ 0x41
 800be32:	2120      	movs	r1, #32
 800be34:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2242      	movs	r2, #66	@ 0x42
 800be3a:	2100      	movs	r1, #0
 800be3c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2204      	movs	r2, #4
 800be48:	4013      	ands	r3, r2
 800be4a:	d022      	beq.n	800be92 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be56:	b2d2      	uxtb	r2, r2
 800be58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d012      	beq.n	800be92 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be70:	3b01      	subs	r3, #1
 800be72:	b29a      	uxth	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	3b01      	subs	r3, #1
 800be80:	b29a      	uxth	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be8a:	2204      	movs	r2, #4
 800be8c:	431a      	orrs	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800be92:	4a0c      	ldr	r2, [pc, #48]	@ (800bec4 <I2C_ITListenCplt+0xac>)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	0011      	movs	r1, r2
 800be98:	0018      	movs	r0, r3
 800be9a:	f000 fb03 	bl	800c4a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2210      	movs	r2, #16
 800bea4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2240      	movs	r2, #64	@ 0x40
 800beaa:	2100      	movs	r1, #0
 800beac:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	0018      	movs	r0, r3
 800beb2:	f7fe ff28 	bl	800ad06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800beb6:	46c0      	nop			@ (mov r8, r8)
 800beb8:	46bd      	mov	sp, r7
 800beba:	b002      	add	sp, #8
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	46c0      	nop			@ (mov r8, r8)
 800bec0:	ffff0000 	.word	0xffff0000
 800bec4:	00008003 	.word	0x00008003

0800bec8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bed2:	200f      	movs	r0, #15
 800bed4:	183b      	adds	r3, r7, r0
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	2141      	movs	r1, #65	@ 0x41
 800beda:	5c52      	ldrb	r2, [r2, r1]
 800bedc:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2242      	movs	r2, #66	@ 0x42
 800bee2:	2100      	movs	r1, #0
 800bee4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a72      	ldr	r2, [pc, #456]	@ (800c0b4 <I2C_ITError+0x1ec>)
 800beea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	431a      	orrs	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800befe:	183b      	adds	r3, r7, r0
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	2b28      	cmp	r3, #40	@ 0x28
 800bf04:	d007      	beq.n	800bf16 <I2C_ITError+0x4e>
 800bf06:	183b      	adds	r3, r7, r0
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	2b29      	cmp	r3, #41	@ 0x29
 800bf0c:	d003      	beq.n	800bf16 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800bf0e:	183b      	adds	r3, r7, r0
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf14:	d10c      	bne.n	800bf30 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2103      	movs	r1, #3
 800bf1a:	0018      	movs	r0, r3
 800bf1c:	f000 fac2 	bl	800c4a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2241      	movs	r2, #65	@ 0x41
 800bf24:	2128      	movs	r1, #40	@ 0x28
 800bf26:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a63      	ldr	r2, [pc, #396]	@ (800c0b8 <I2C_ITError+0x1f0>)
 800bf2c:	635a      	str	r2, [r3, #52]	@ 0x34
 800bf2e:	e032      	b.n	800bf96 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bf30:	4a62      	ldr	r2, [pc, #392]	@ (800c0bc <I2C_ITError+0x1f4>)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	0011      	movs	r1, r2
 800bf36:	0018      	movs	r0, r3
 800bf38:	f000 fab4 	bl	800c4a4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	0018      	movs	r0, r3
 800bf40:	f000 f8ed 	bl	800c11e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2241      	movs	r2, #65	@ 0x41
 800bf48:	5c9b      	ldrb	r3, [r3, r2]
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	2b60      	cmp	r3, #96	@ 0x60
 800bf4e:	d01f      	beq.n	800bf90 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2241      	movs	r2, #65	@ 0x41
 800bf54:	2120      	movs	r1, #32
 800bf56:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	2220      	movs	r2, #32
 800bf60:	4013      	ands	r3, r2
 800bf62:	2b20      	cmp	r3, #32
 800bf64:	d114      	bne.n	800bf90 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	2210      	movs	r2, #16
 800bf6e:	4013      	ands	r3, r2
 800bf70:	2b10      	cmp	r3, #16
 800bf72:	d109      	bne.n	800bf88 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2210      	movs	r2, #16
 800bf7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf80:	2204      	movs	r2, #4
 800bf82:	431a      	orrs	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf9a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d03b      	beq.n	800c01c <I2C_ITError+0x154>
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2b11      	cmp	r3, #17
 800bfa8:	d002      	beq.n	800bfb0 <I2C_ITError+0xe8>
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	2b21      	cmp	r3, #33	@ 0x21
 800bfae:	d135      	bne.n	800c01c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	2380      	movs	r3, #128	@ 0x80
 800bfb8:	01db      	lsls	r3, r3, #7
 800bfba:	401a      	ands	r2, r3
 800bfbc:	2380      	movs	r3, #128	@ 0x80
 800bfbe:	01db      	lsls	r3, r3, #7
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d107      	bne.n	800bfd4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	493c      	ldr	r1, [pc, #240]	@ (800c0c0 <I2C_ITError+0x1f8>)
 800bfd0:	400a      	ands	r2, r1
 800bfd2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd8:	0018      	movs	r0, r3
 800bfda:	f7fe f896 	bl	800a10a <HAL_DMA_GetState>
 800bfde:	0003      	movs	r3, r0
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d016      	beq.n	800c012 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe8:	4a36      	ldr	r2, [pc, #216]	@ (800c0c4 <I2C_ITError+0x1fc>)
 800bfea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2240      	movs	r2, #64	@ 0x40
 800bff0:	2100      	movs	r1, #0
 800bff2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff8:	0018      	movs	r0, r3
 800bffa:	f7fd ff91 	bl	8009f20 <HAL_DMA_Abort_IT>
 800bffe:	1e03      	subs	r3, r0, #0
 800c000:	d051      	beq.n	800c0a6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c00c:	0018      	movs	r0, r3
 800c00e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c010:	e049      	b.n	800c0a6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	0018      	movs	r0, r3
 800c016:	f000 f859 	bl	800c0cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c01a:	e044      	b.n	800c0a6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c020:	2b00      	cmp	r3, #0
 800c022:	d03b      	beq.n	800c09c <I2C_ITError+0x1d4>
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	2b12      	cmp	r3, #18
 800c028:	d002      	beq.n	800c030 <I2C_ITError+0x168>
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b22      	cmp	r3, #34	@ 0x22
 800c02e:	d135      	bne.n	800c09c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	2380      	movs	r3, #128	@ 0x80
 800c038:	021b      	lsls	r3, r3, #8
 800c03a:	401a      	ands	r2, r3
 800c03c:	2380      	movs	r3, #128	@ 0x80
 800c03e:	021b      	lsls	r3, r3, #8
 800c040:	429a      	cmp	r2, r3
 800c042:	d107      	bne.n	800c054 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	491e      	ldr	r1, [pc, #120]	@ (800c0c8 <I2C_ITError+0x200>)
 800c050:	400a      	ands	r2, r1
 800c052:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c058:	0018      	movs	r0, r3
 800c05a:	f7fe f856 	bl	800a10a <HAL_DMA_GetState>
 800c05e:	0003      	movs	r3, r0
 800c060:	2b01      	cmp	r3, #1
 800c062:	d016      	beq.n	800c092 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c068:	4a16      	ldr	r2, [pc, #88]	@ (800c0c4 <I2C_ITError+0x1fc>)
 800c06a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2240      	movs	r2, #64	@ 0x40
 800c070:	2100      	movs	r1, #0
 800c072:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c078:	0018      	movs	r0, r3
 800c07a:	f7fd ff51 	bl	8009f20 <HAL_DMA_Abort_IT>
 800c07e:	1e03      	subs	r3, r0, #0
 800c080:	d013      	beq.n	800c0aa <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c08c:	0018      	movs	r0, r3
 800c08e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c090:	e00b      	b.n	800c0aa <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	0018      	movs	r0, r3
 800c096:	f000 f819 	bl	800c0cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c09a:	e006      	b.n	800c0aa <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	0018      	movs	r0, r3
 800c0a0:	f000 f814 	bl	800c0cc <I2C_TreatErrorCallback>
  }
}
 800c0a4:	e002      	b.n	800c0ac <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c0a6:	46c0      	nop			@ (mov r8, r8)
 800c0a8:	e000      	b.n	800c0ac <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c0aa:	46c0      	nop			@ (mov r8, r8)
}
 800c0ac:	46c0      	nop			@ (mov r8, r8)
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	b004      	add	sp, #16
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	ffff0000 	.word	0xffff0000
 800c0b8:	0800afad 	.word	0x0800afad
 800c0bc:	00008003 	.word	0x00008003
 800c0c0:	ffffbfff 	.word	0xffffbfff
 800c0c4:	0800c2d7 	.word	0x0800c2d7
 800c0c8:	ffff7fff 	.word	0xffff7fff

0800c0cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2241      	movs	r2, #65	@ 0x41
 800c0d8:	5c9b      	ldrb	r3, [r3, r2]
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	2b60      	cmp	r3, #96	@ 0x60
 800c0de:	d10f      	bne.n	800c100 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2241      	movs	r2, #65	@ 0x41
 800c0e4:	2120      	movs	r1, #32
 800c0e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2240      	movs	r2, #64	@ 0x40
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	f7fe fe24 	bl	800ad46 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c0fe:	e00a      	b.n	800c116 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2240      	movs	r2, #64	@ 0x40
 800c10a:	2100      	movs	r1, #0
 800c10c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	0018      	movs	r0, r3
 800c112:	f7fe fe10 	bl	800ad36 <HAL_I2C_ErrorCallback>
}
 800c116:	46c0      	nop			@ (mov r8, r8)
 800c118:	46bd      	mov	sp, r7
 800c11a:	b002      	add	sp, #8
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	2202      	movs	r2, #2
 800c12e:	4013      	ands	r3, r2
 800c130:	2b02      	cmp	r3, #2
 800c132:	d103      	bne.n	800c13c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2200      	movs	r2, #0
 800c13a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	699b      	ldr	r3, [r3, #24]
 800c142:	2201      	movs	r2, #1
 800c144:	4013      	ands	r3, r2
 800c146:	2b01      	cmp	r3, #1
 800c148:	d007      	beq.n	800c15a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	699a      	ldr	r2, [r3, #24]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2101      	movs	r1, #1
 800c156:	430a      	orrs	r2, r1
 800c158:	619a      	str	r2, [r3, #24]
  }
}
 800c15a:	46c0      	nop			@ (mov r8, r8)
 800c15c:	46bd      	mov	sp, r7
 800c15e:	b002      	add	sp, #8
 800c160:	bd80      	pop	{r7, pc}
	...

0800c164 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c170:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4920      	ldr	r1, [pc, #128]	@ (800c200 <I2C_DMAMasterTransmitCplt+0x9c>)
 800c17e:	400a      	ands	r2, r1
 800c180:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c186:	b29b      	uxth	r3, r3
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d105      	bne.n	800c198 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2120      	movs	r1, #32
 800c190:	0018      	movs	r0, r3
 800c192:	f000 f8f9 	bl	800c388 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c196:	e02e      	b.n	800c1f6 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c1a0:	189a      	adds	r2, r3, r2
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	2bff      	cmp	r3, #255	@ 0xff
 800c1ae:	d903      	bls.n	800c1b8 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	22ff      	movs	r2, #255	@ 0xff
 800c1b4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c1b6:	e004      	b.n	800c1c2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ca:	0019      	movs	r1, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3328      	adds	r3, #40	@ 0x28
 800c1d2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c1d8:	f7fd fdfc 	bl	8009dd4 <HAL_DMA_Start_IT>
 800c1dc:	1e03      	subs	r3, r0, #0
 800c1de:	d005      	beq.n	800c1ec <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2110      	movs	r1, #16
 800c1e4:	0018      	movs	r0, r3
 800c1e6:	f7ff fe6f 	bl	800bec8 <I2C_ITError>
}
 800c1ea:	e004      	b.n	800c1f6 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2140      	movs	r1, #64	@ 0x40
 800c1f0:	0018      	movs	r0, r3
 800c1f2:	f000 f8c9 	bl	800c388 <I2C_Enable_IRQ>
}
 800c1f6:	46c0      	nop			@ (mov r8, r8)
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	b004      	add	sp, #16
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	46c0      	nop			@ (mov r8, r8)
 800c200:	ffffbfff 	.word	0xffffbfff

0800c204 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c210:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4920      	ldr	r1, [pc, #128]	@ (800c2a0 <I2C_DMAMasterReceiveCplt+0x9c>)
 800c21e:	400a      	ands	r2, r1
 800c220:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c226:	b29b      	uxth	r3, r3
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d105      	bne.n	800c238 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2120      	movs	r1, #32
 800c230:	0018      	movs	r0, r3
 800c232:	f000 f8a9 	bl	800c388 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c236:	e02e      	b.n	800c296 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c240:	189a      	adds	r2, r3, r2
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	2bff      	cmp	r3, #255	@ 0xff
 800c24e:	d903      	bls.n	800c258 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	22ff      	movs	r2, #255	@ 0xff
 800c254:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c256:	e004      	b.n	800c262 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	3324      	adds	r3, #36	@ 0x24
 800c26c:	0019      	movs	r1, r3
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c272:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c278:	f7fd fdac 	bl	8009dd4 <HAL_DMA_Start_IT>
 800c27c:	1e03      	subs	r3, r0, #0
 800c27e:	d005      	beq.n	800c28c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2110      	movs	r1, #16
 800c284:	0018      	movs	r0, r3
 800c286:	f7ff fe1f 	bl	800bec8 <I2C_ITError>
}
 800c28a:	e004      	b.n	800c296 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2140      	movs	r1, #64	@ 0x40
 800c290:	0018      	movs	r0, r3
 800c292:	f000 f879 	bl	800c388 <I2C_Enable_IRQ>
}
 800c296:	46c0      	nop			@ (mov r8, r8)
 800c298:	46bd      	mov	sp, r7
 800c29a:	b004      	add	sp, #16
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	46c0      	nop			@ (mov r8, r8)
 800c2a0:	ffff7fff 	.word	0xffff7fff

0800c2a4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	685a      	ldr	r2, [r3, #4]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2180      	movs	r1, #128	@ 0x80
 800c2be:	0209      	lsls	r1, r1, #8
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2110      	movs	r1, #16
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f7ff fdfd 	bl	800bec8 <I2C_ITError>
}
 800c2ce:	46c0      	nop			@ (mov r8, r8)
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	b004      	add	sp, #16
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d003      	beq.n	800c2f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d003      	beq.n	800c304 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c300:	2200      	movs	r2, #0
 800c302:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	0018      	movs	r0, r3
 800c308:	f7ff fee0 	bl	800c0cc <I2C_TreatErrorCallback>
}
 800c30c:	46c0      	nop			@ (mov r8, r8)
 800c30e:	46bd      	mov	sp, r7
 800c310:	b004      	add	sp, #16
 800c312:	bd80      	pop	{r7, pc}

0800c314 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c314:	b590      	push	{r4, r7, lr}
 800c316:	b087      	sub	sp, #28
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	0008      	movs	r0, r1
 800c31e:	0011      	movs	r1, r2
 800c320:	607b      	str	r3, [r7, #4]
 800c322:	240a      	movs	r4, #10
 800c324:	193b      	adds	r3, r7, r4
 800c326:	1c02      	adds	r2, r0, #0
 800c328:	801a      	strh	r2, [r3, #0]
 800c32a:	2009      	movs	r0, #9
 800c32c:	183b      	adds	r3, r7, r0
 800c32e:	1c0a      	adds	r2, r1, #0
 800c330:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c332:	193b      	adds	r3, r7, r4
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	059b      	lsls	r3, r3, #22
 800c338:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c33a:	183b      	adds	r3, r7, r0
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	0419      	lsls	r1, r3, #16
 800c340:	23ff      	movs	r3, #255	@ 0xff
 800c342:	041b      	lsls	r3, r3, #16
 800c344:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c346:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34e:	4313      	orrs	r3, r2
 800c350:	005b      	lsls	r3, r3, #1
 800c352:	085b      	lsrs	r3, r3, #1
 800c354:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c35e:	0d51      	lsrs	r1, r2, #21
 800c360:	2280      	movs	r2, #128	@ 0x80
 800c362:	00d2      	lsls	r2, r2, #3
 800c364:	400a      	ands	r2, r1
 800c366:	4907      	ldr	r1, [pc, #28]	@ (800c384 <I2C_TransferConfig+0x70>)
 800c368:	430a      	orrs	r2, r1
 800c36a:	43d2      	mvns	r2, r2
 800c36c:	401a      	ands	r2, r3
 800c36e:	0011      	movs	r1, r2
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	430a      	orrs	r2, r1
 800c378:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c37a:	46c0      	nop			@ (mov r8, r8)
 800c37c:	46bd      	mov	sp, r7
 800c37e:	b007      	add	sp, #28
 800c380:	bd90      	pop	{r4, r7, pc}
 800c382:	46c0      	nop			@ (mov r8, r8)
 800c384:	03ff63ff 	.word	0x03ff63ff

0800c388 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	000a      	movs	r2, r1
 800c392:	1cbb      	adds	r3, r7, #2
 800c394:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c396:	2300      	movs	r3, #0
 800c398:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c39e:	4b3e      	ldr	r3, [pc, #248]	@ (800c498 <I2C_Enable_IRQ+0x110>)
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d035      	beq.n	800c410 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c3a8:	4b3c      	ldr	r3, [pc, #240]	@ (800c49c <I2C_Enable_IRQ+0x114>)
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d030      	beq.n	800c410 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c3b2:	4b3b      	ldr	r3, [pc, #236]	@ (800c4a0 <I2C_Enable_IRQ+0x118>)
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d02b      	beq.n	800c410 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c3b8:	1cbb      	adds	r3, r7, #2
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	5e9b      	ldrsh	r3, [r3, r2]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	da03      	bge.n	800c3ca <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	22b8      	movs	r2, #184	@ 0xb8
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c3ca:	1cbb      	adds	r3, r7, #2
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	d003      	beq.n	800c3dc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	22f2      	movs	r2, #242	@ 0xf2
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c3dc:	1cbb      	adds	r3, r7, #2
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	2202      	movs	r2, #2
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	d003      	beq.n	800c3ee <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	22f4      	movs	r2, #244	@ 0xf4
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c3ee:	1cbb      	adds	r3, r7, #2
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	2b10      	cmp	r3, #16
 800c3f4:	d103      	bne.n	800c3fe <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2290      	movs	r2, #144	@ 0x90
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c3fe:	1cbb      	adds	r3, r7, #2
 800c400:	881b      	ldrh	r3, [r3, #0]
 800c402:	2b20      	cmp	r3, #32
 800c404:	d13c      	bne.n	800c480 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2220      	movs	r2, #32
 800c40a:	4313      	orrs	r3, r2
 800c40c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c40e:	e037      	b.n	800c480 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c410:	1cbb      	adds	r3, r7, #2
 800c412:	2200      	movs	r2, #0
 800c414:	5e9b      	ldrsh	r3, [r3, r2]
 800c416:	2b00      	cmp	r3, #0
 800c418:	da03      	bge.n	800c422 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	22b8      	movs	r2, #184	@ 0xb8
 800c41e:	4313      	orrs	r3, r2
 800c420:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c422:	1cbb      	adds	r3, r7, #2
 800c424:	881b      	ldrh	r3, [r3, #0]
 800c426:	2201      	movs	r2, #1
 800c428:	4013      	ands	r3, r2
 800c42a:	d003      	beq.n	800c434 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	22f2      	movs	r2, #242	@ 0xf2
 800c430:	4313      	orrs	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c434:	1cbb      	adds	r3, r7, #2
 800c436:	881b      	ldrh	r3, [r3, #0]
 800c438:	2202      	movs	r2, #2
 800c43a:	4013      	ands	r3, r2
 800c43c:	d003      	beq.n	800c446 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	22f4      	movs	r2, #244	@ 0xf4
 800c442:	4313      	orrs	r3, r2
 800c444:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c446:	1cbb      	adds	r3, r7, #2
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	2b10      	cmp	r3, #16
 800c44c:	d103      	bne.n	800c456 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2290      	movs	r2, #144	@ 0x90
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c456:	1cbb      	adds	r3, r7, #2
 800c458:	881b      	ldrh	r3, [r3, #0]
 800c45a:	2b20      	cmp	r3, #32
 800c45c:	d103      	bne.n	800c466 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2260      	movs	r2, #96	@ 0x60
 800c462:	4313      	orrs	r3, r2
 800c464:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c46a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a0 <I2C_Enable_IRQ+0x118>)
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d007      	beq.n	800c480 <I2C_Enable_IRQ+0xf8>
 800c470:	1cbb      	adds	r3, r7, #2
 800c472:	881b      	ldrh	r3, [r3, #0]
 800c474:	2b40      	cmp	r3, #64	@ 0x40
 800c476:	d103      	bne.n	800c480 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2240      	movs	r2, #64	@ 0x40
 800c47c:	4313      	orrs	r3, r2
 800c47e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6819      	ldr	r1, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	430a      	orrs	r2, r1
 800c48e:	601a      	str	r2, [r3, #0]
}
 800c490:	46c0      	nop			@ (mov r8, r8)
 800c492:	46bd      	mov	sp, r7
 800c494:	b004      	add	sp, #16
 800c496:	bd80      	pop	{r7, pc}
 800c498:	0800b1ad 	.word	0x0800b1ad
 800c49c:	0800b5dd 	.word	0x0800b5dd
 800c4a0:	0800b3a5 	.word	0x0800b3a5

0800c4a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	000a      	movs	r2, r1
 800c4ae:	1cbb      	adds	r3, r7, #2
 800c4b0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c4b6:	1cbb      	adds	r3, r7, #2
 800c4b8:	881b      	ldrh	r3, [r3, #0]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	4013      	ands	r3, r2
 800c4be:	d010      	beq.n	800c4e2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2242      	movs	r2, #66	@ 0x42
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2241      	movs	r2, #65	@ 0x41
 800c4cc:	5c9b      	ldrb	r3, [r3, r2]
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	001a      	movs	r2, r3
 800c4d2:	2328      	movs	r3, #40	@ 0x28
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	2b28      	cmp	r3, #40	@ 0x28
 800c4d8:	d003      	beq.n	800c4e2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	22b0      	movs	r2, #176	@ 0xb0
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c4e2:	1cbb      	adds	r3, r7, #2
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	d010      	beq.n	800c50e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2244      	movs	r2, #68	@ 0x44
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2241      	movs	r2, #65	@ 0x41
 800c4f8:	5c9b      	ldrb	r3, [r3, r2]
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	001a      	movs	r2, r3
 800c4fe:	2328      	movs	r3, #40	@ 0x28
 800c500:	4013      	ands	r3, r2
 800c502:	2b28      	cmp	r3, #40	@ 0x28
 800c504:	d003      	beq.n	800c50e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	22b0      	movs	r2, #176	@ 0xb0
 800c50a:	4313      	orrs	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c50e:	1cbb      	adds	r3, r7, #2
 800c510:	2200      	movs	r2, #0
 800c512:	5e9b      	ldrsh	r3, [r3, r2]
 800c514:	2b00      	cmp	r3, #0
 800c516:	da03      	bge.n	800c520 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	22b8      	movs	r2, #184	@ 0xb8
 800c51c:	4313      	orrs	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c520:	1cbb      	adds	r3, r7, #2
 800c522:	881b      	ldrh	r3, [r3, #0]
 800c524:	2b10      	cmp	r3, #16
 800c526:	d103      	bne.n	800c530 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2290      	movs	r2, #144	@ 0x90
 800c52c:	4313      	orrs	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c530:	1cbb      	adds	r3, r7, #2
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	2b20      	cmp	r3, #32
 800c536:	d103      	bne.n	800c540 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2220      	movs	r2, #32
 800c53c:	4313      	orrs	r3, r2
 800c53e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c540:	1cbb      	adds	r3, r7, #2
 800c542:	881b      	ldrh	r3, [r3, #0]
 800c544:	2b40      	cmp	r3, #64	@ 0x40
 800c546:	d103      	bne.n	800c550 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2240      	movs	r2, #64	@ 0x40
 800c54c:	4313      	orrs	r3, r2
 800c54e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	43d9      	mvns	r1, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	400a      	ands	r2, r1
 800c560:	601a      	str	r2, [r3, #0]
}
 800c562:	46c0      	nop			@ (mov r8, r8)
 800c564:	46bd      	mov	sp, r7
 800c566:	b004      	add	sp, #16
 800c568:	bd80      	pop	{r7, pc}
	...

0800c56c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2241      	movs	r2, #65	@ 0x41
 800c57a:	5c9b      	ldrb	r3, [r3, r2]
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b20      	cmp	r3, #32
 800c580:	d138      	bne.n	800c5f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2240      	movs	r2, #64	@ 0x40
 800c586:	5c9b      	ldrb	r3, [r3, r2]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d101      	bne.n	800c590 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c58c:	2302      	movs	r3, #2
 800c58e:	e032      	b.n	800c5f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2240      	movs	r2, #64	@ 0x40
 800c594:	2101      	movs	r1, #1
 800c596:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2241      	movs	r2, #65	@ 0x41
 800c59c:	2124      	movs	r1, #36	@ 0x24
 800c59e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	438a      	bics	r2, r1
 800c5ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4911      	ldr	r1, [pc, #68]	@ (800c600 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800c5bc:	400a      	ands	r2, r1
 800c5be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6819      	ldr	r1, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2101      	movs	r1, #1
 800c5dc:	430a      	orrs	r2, r1
 800c5de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2241      	movs	r2, #65	@ 0x41
 800c5e4:	2120      	movs	r1, #32
 800c5e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2240      	movs	r2, #64	@ 0x40
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e000      	b.n	800c5f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c5f4:	2302      	movs	r3, #2
  }
}
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	b002      	add	sp, #8
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	46c0      	nop			@ (mov r8, r8)
 800c600:	ffffefff 	.word	0xffffefff

0800c604 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2241      	movs	r2, #65	@ 0x41
 800c612:	5c9b      	ldrb	r3, [r3, r2]
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b20      	cmp	r3, #32
 800c618:	d139      	bne.n	800c68e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2240      	movs	r2, #64	@ 0x40
 800c61e:	5c9b      	ldrb	r3, [r3, r2]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d101      	bne.n	800c628 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c624:	2302      	movs	r3, #2
 800c626:	e033      	b.n	800c690 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2240      	movs	r2, #64	@ 0x40
 800c62c:	2101      	movs	r1, #1
 800c62e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2241      	movs	r2, #65	@ 0x41
 800c634:	2124      	movs	r1, #36	@ 0x24
 800c636:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2101      	movs	r1, #1
 800c644:	438a      	bics	r2, r1
 800c646:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	4a11      	ldr	r2, [pc, #68]	@ (800c698 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c654:	4013      	ands	r3, r2
 800c656:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	021b      	lsls	r3, r3, #8
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	4313      	orrs	r3, r2
 800c660:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2101      	movs	r1, #1
 800c676:	430a      	orrs	r2, r1
 800c678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2241      	movs	r2, #65	@ 0x41
 800c67e:	2120      	movs	r1, #32
 800c680:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2240      	movs	r2, #64	@ 0x40
 800c686:	2100      	movs	r1, #0
 800c688:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e000      	b.n	800c690 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c68e:	2302      	movs	r3, #2
  }
}
 800c690:	0018      	movs	r0, r3
 800c692:	46bd      	mov	sp, r7
 800c694:	b004      	add	sp, #16
 800c696:	bd80      	pop	{r7, pc}
 800c698:	fffff0ff 	.word	0xfffff0ff

0800c69c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e0e1      	b.n	800c872 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2235      	movs	r2, #53	@ 0x35
 800c6b2:	5c9b      	ldrb	r3, [r3, r2]
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d107      	bne.n	800c6ca <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2234      	movs	r2, #52	@ 0x34
 800c6be:	2100      	movs	r1, #0
 800c6c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	0018      	movs	r0, r3
 800c6c6:	f7f9 f869 	bl	800579c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2235      	movs	r2, #53	@ 0x35
 800c6ce:	2102      	movs	r1, #2
 800c6d0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69da      	ldr	r2, [r3, #28]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4967      	ldr	r1, [pc, #412]	@ (800c87c <HAL_I2S_Init+0x1e0>)
 800c6de:	400a      	ands	r2, r1
 800c6e0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d073      	beq.n	800c7da <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d102      	bne.n	800c700 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800c6fa:	2310      	movs	r3, #16
 800c6fc:	617b      	str	r3, [r7, #20]
 800c6fe:	e001      	b.n	800c704 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800c700:	2320      	movs	r3, #32
 800c702:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	2b20      	cmp	r3, #32
 800c70a:	d802      	bhi.n	800c712 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800c712:	f002 fe7f 	bl	800f414 <HAL_RCC_GetSysClockFreq>
 800c716:	0003      	movs	r3, r0
 800c718:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	691a      	ldr	r2, [r3, #16]
 800c71e:	2380      	movs	r3, #128	@ 0x80
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	429a      	cmp	r2, r3
 800c724:	d131      	bne.n	800c78a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d016      	beq.n	800c75c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	0019      	movs	r1, r3
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7f3 fd03 	bl	8000140 <__udivsi3>
 800c73a:	0003      	movs	r3, r0
 800c73c:	001a      	movs	r2, r3
 800c73e:	0013      	movs	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	189b      	adds	r3, r3, r2
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	001a      	movs	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	0019      	movs	r1, r3
 800c74e:	0010      	movs	r0, r2
 800c750:	f7f3 fcf6 	bl	8000140 <__udivsi3>
 800c754:	0003      	movs	r3, r0
 800c756:	3305      	adds	r3, #5
 800c758:	613b      	str	r3, [r7, #16]
 800c75a:	e02a      	b.n	800c7b2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	0019      	movs	r1, r3
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	f7f3 fcec 	bl	8000140 <__udivsi3>
 800c768:	0003      	movs	r3, r0
 800c76a:	001a      	movs	r2, r3
 800c76c:	0013      	movs	r3, r2
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	189b      	adds	r3, r3, r2
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	001a      	movs	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	0019      	movs	r1, r3
 800c77c:	0010      	movs	r0, r2
 800c77e:	f7f3 fcdf 	bl	8000140 <__udivsi3>
 800c782:	0003      	movs	r3, r0
 800c784:	3305      	adds	r3, #5
 800c786:	613b      	str	r3, [r7, #16]
 800c788:	e013      	b.n	800c7b2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c78a:	6979      	ldr	r1, [r7, #20]
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7f3 fcd7 	bl	8000140 <__udivsi3>
 800c792:	0003      	movs	r3, r0
 800c794:	001a      	movs	r2, r3
 800c796:	0013      	movs	r3, r2
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	189b      	adds	r3, r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	001a      	movs	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	695b      	ldr	r3, [r3, #20]
 800c7a4:	0019      	movs	r1, r3
 800c7a6:	0010      	movs	r0, r2
 800c7a8:	f7f3 fcca 	bl	8000140 <__udivsi3>
 800c7ac:	0003      	movs	r3, r0
 800c7ae:	3305      	adds	r3, #5
 800c7b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	210a      	movs	r1, #10
 800c7b6:	0018      	movs	r0, r3
 800c7b8:	f7f3 fcc2 	bl	8000140 <__udivsi3>
 800c7bc:	0003      	movs	r3, r0
 800c7be:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	1ad3      	subs	r3, r2, r3
 800c7ce:	085b      	lsrs	r3, r3, #1
 800c7d0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	021b      	lsls	r3, r3, #8
 800c7d6:	61bb      	str	r3, [r7, #24]
 800c7d8:	e003      	b.n	800c7e2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800c7da:	2302      	movs	r3, #2
 800c7dc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d902      	bls.n	800c7ee <HAL_I2S_Init+0x152>
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	2bff      	cmp	r3, #255	@ 0xff
 800c7ec:	d907      	bls.n	800c7fe <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f2:	2210      	movs	r2, #16
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e039      	b.n	800c872 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	691a      	ldr	r2, [r3, #16]
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	431a      	orrs	r2, r3
 800c806:	0011      	movs	r1, r2
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	69fa      	ldr	r2, [r7, #28]
 800c80e:	430a      	orrs	r2, r1
 800c810:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	69db      	ldr	r3, [r3, #28]
 800c818:	4a18      	ldr	r2, [pc, #96]	@ (800c87c <HAL_I2S_Init+0x1e0>)
 800c81a:	401a      	ands	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6859      	ldr	r1, [r3, #4]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	4319      	orrs	r1, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	4319      	orrs	r1, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	430b      	orrs	r3, r1
 800c832:	431a      	orrs	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2180      	movs	r1, #128	@ 0x80
 800c83a:	0109      	lsls	r1, r1, #4
 800c83c:	430a      	orrs	r2, r1
 800c83e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	2b30      	cmp	r3, #48	@ 0x30
 800c846:	d003      	beq.n	800c850 <HAL_I2S_Init+0x1b4>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	2bb0      	cmp	r3, #176	@ 0xb0
 800c84e:	d108      	bne.n	800c862 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	69da      	ldr	r2, [r3, #28]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2180      	movs	r1, #128	@ 0x80
 800c85c:	0149      	lsls	r1, r1, #5
 800c85e:	430a      	orrs	r2, r1
 800c860:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2235      	movs	r2, #53	@ 0x35
 800c86c:	2101      	movs	r1, #1
 800c86e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	0018      	movs	r0, r3
 800c874:	46bd      	mov	sp, r7
 800c876:	b008      	add	sp, #32
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	46c0      	nop			@ (mov r8, r8)
 800c87c:	fffff040 	.word	0xfffff040

0800c880 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e01b      	b.n	800c8ca <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2235      	movs	r2, #53	@ 0x35
 800c896:	2102      	movs	r1, #2
 800c898:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	69da      	ldr	r2, [r3, #28]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	490b      	ldr	r1, [pc, #44]	@ (800c8d4 <HAL_I2S_DeInit+0x54>)
 800c8a6:	400a      	ands	r2, r1
 800c8a8:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	f7f8 ffe9 	bl	8005884 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2235      	movs	r2, #53	@ 0x35
 800c8bc:	2100      	movs	r1, #0
 800c8be:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2234      	movs	r2, #52	@ 0x34
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	0018      	movs	r0, r3
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	b002      	add	sp, #8
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	46c0      	nop			@ (mov r8, r8)
 800c8d4:	fffffbff 	.word	0xfffffbff

0800c8d8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	1dbb      	adds	r3, r7, #6
 800c8e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d003      	beq.n	800c8f4 <HAL_I2S_Receive_DMA+0x1c>
 800c8ec:	1dbb      	adds	r3, r7, #6
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e0a6      	b.n	800ca46 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2234      	movs	r2, #52	@ 0x34
 800c8fc:	5c9b      	ldrb	r3, [r3, r2]
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b01      	cmp	r3, #1
 800c902:	d101      	bne.n	800c908 <HAL_I2S_Receive_DMA+0x30>
 800c904:	2302      	movs	r3, #2
 800c906:	e09e      	b.n	800ca46 <HAL_I2S_Receive_DMA+0x16e>
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2234      	movs	r2, #52	@ 0x34
 800c90c:	2101      	movs	r1, #1
 800c90e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2235      	movs	r2, #53	@ 0x35
 800c914:	5c9b      	ldrb	r3, [r3, r2]
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d005      	beq.n	800c928 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2234      	movs	r2, #52	@ 0x34
 800c920:	2100      	movs	r1, #0
 800c922:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800c924:	2302      	movs	r3, #2
 800c926:	e08e      	b.n	800ca46 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2235      	movs	r2, #53	@ 0x35
 800c92c:	2104      	movs	r1, #4
 800c92e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	2207      	movs	r2, #7
 800c944:	4013      	ands	r3, r2
 800c946:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d002      	beq.n	800c954 <HAL_I2S_Receive_DMA+0x7c>
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	2b05      	cmp	r3, #5
 800c952:	d10c      	bne.n	800c96e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800c954:	1dbb      	adds	r3, r7, #6
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	18db      	adds	r3, r3, r3
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800c960:	1dbb      	adds	r3, r7, #6
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	18db      	adds	r3, r3, r3
 800c966:	b29a      	uxth	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c96c:	e007      	b.n	800c97e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	1dba      	adds	r2, r7, #6
 800c972:	8812      	ldrh	r2, [r2, #0]
 800c974:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	1dba      	adds	r2, r7, #6
 800c97a:	8812      	ldrh	r2, [r2, #0]
 800c97c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c982:	4a33      	ldr	r2, [pc, #204]	@ (800ca50 <HAL_I2S_Receive_DMA+0x178>)
 800c984:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c98a:	4a32      	ldr	r2, [pc, #200]	@ (800ca54 <HAL_I2S_Receive_DMA+0x17c>)
 800c98c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c992:	4a31      	ldr	r2, [pc, #196]	@ (800ca58 <HAL_I2S_Receive_DMA+0x180>)
 800c994:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	69da      	ldr	r2, [r3, #28]
 800c99c:	23c0      	movs	r3, #192	@ 0xc0
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	401a      	ands	r2, r3
 800c9a2:	23c0      	movs	r3, #192	@ 0xc0
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d10a      	bne.n	800c9c0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	613b      	str	r3, [r7, #16]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	613b      	str	r3, [r7, #16]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	613b      	str	r3, [r7, #16]
 800c9be:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	330c      	adds	r3, #12
 800c9ca:	0019      	movs	r1, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9d0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c9d8:	f7fd f9fc 	bl	8009dd4 <HAL_DMA_Start_IT>
 800c9dc:	1e03      	subs	r3, r0, #0
 800c9de:	d00f      	beq.n	800ca00 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e4:	2208      	movs	r2, #8
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2235      	movs	r2, #53	@ 0x35
 800c9f0:	2101      	movs	r1, #1
 800c9f2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2234      	movs	r2, #52	@ 0x34
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e022      	b.n	800ca46 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	69da      	ldr	r2, [r3, #28]
 800ca06:	2380      	movs	r3, #128	@ 0x80
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	d108      	bne.n	800ca20 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	69da      	ldr	r2, [r3, #28]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2180      	movs	r1, #128	@ 0x80
 800ca1a:	00c9      	lsls	r1, r1, #3
 800ca1c:	430a      	orrs	r2, r1
 800ca1e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	4013      	ands	r3, r2
 800ca2a:	d107      	bne.n	800ca3c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	685a      	ldr	r2, [r3, #4]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2101      	movs	r1, #1
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2234      	movs	r2, #52	@ 0x34
 800ca40:	2100      	movs	r1, #0
 800ca42:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	0018      	movs	r0, r3
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	b006      	add	sp, #24
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	46c0      	nop			@ (mov r8, r8)
 800ca50:	0800cc59 	.word	0x0800cc59
 800ca54:	0800cc15 	.word	0x0800cc15
 800ca58:	0800cc77 	.word	0x0800cc77

0800ca5c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca64:	2317      	movs	r3, #23
 800ca66:	18fb      	adds	r3, r7, r3
 800ca68:	2200      	movs	r2, #0
 800ca6a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	2380      	movs	r3, #128	@ 0x80
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d003      	beq.n	800ca80 <HAL_I2S_DMAStop+0x24>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d158      	bne.n	800cb32 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d010      	beq.n	800caaa <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca8c:	0018      	movs	r0, r3
 800ca8e:	f7fd fa07 	bl	8009ea0 <HAL_DMA_Abort>
 800ca92:	1e03      	subs	r3, r0, #0
 800ca94:	d009      	beq.n	800caaa <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca9a:	2208      	movs	r2, #8
 800ca9c:	431a      	orrs	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800caa2:	2317      	movs	r3, #23
 800caa4:	18fb      	adds	r3, r7, r3
 800caa6:	2201      	movs	r2, #1
 800caa8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	2364      	movs	r3, #100	@ 0x64
 800caae:	2201      	movs	r2, #1
 800cab0:	2102      	movs	r1, #2
 800cab2:	f000 f907 	bl	800ccc4 <I2S_WaitFlagStateUntilTimeout>
 800cab6:	1e03      	subs	r3, r0, #0
 800cab8:	d00d      	beq.n	800cad6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cabe:	2201      	movs	r2, #1
 800cac0:	431a      	orrs	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2235      	movs	r2, #53	@ 0x35
 800caca:	2101      	movs	r1, #1
 800cacc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800cace:	2317      	movs	r3, #23
 800cad0:	18fb      	adds	r3, r7, r3
 800cad2:	2201      	movs	r2, #1
 800cad4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	2364      	movs	r3, #100	@ 0x64
 800cada:	2200      	movs	r2, #0
 800cadc:	2180      	movs	r1, #128	@ 0x80
 800cade:	f000 f8f1 	bl	800ccc4 <I2S_WaitFlagStateUntilTimeout>
 800cae2:	1e03      	subs	r3, r0, #0
 800cae4:	d00d      	beq.n	800cb02 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caea:	2201      	movs	r2, #1
 800caec:	431a      	orrs	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2235      	movs	r2, #53	@ 0x35
 800caf6:	2101      	movs	r1, #1
 800caf8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800cafa:	2317      	movs	r3, #23
 800cafc:	18fb      	adds	r3, r7, r3
 800cafe:	2201      	movs	r2, #1
 800cb00:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	69da      	ldr	r2, [r3, #28]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4938      	ldr	r1, [pc, #224]	@ (800cbf0 <HAL_I2S_DMAStop+0x194>)
 800cb0e:	400a      	ands	r2, r1
 800cb10:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800cb12:	2300      	movs	r3, #0
 800cb14:	613b      	str	r3, [r7, #16]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685a      	ldr	r2, [r3, #4]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2102      	movs	r1, #2
 800cb2c:	438a      	bics	r2, r1
 800cb2e:	605a      	str	r2, [r3, #4]
 800cb30:	e053      	b.n	800cbda <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	685a      	ldr	r2, [r3, #4]
 800cb36:	23c0      	movs	r3, #192	@ 0xc0
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d005      	beq.n	800cb4a <HAL_I2S_DMAStop+0xee>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685a      	ldr	r2, [r3, #4]
 800cb42:	2380      	movs	r3, #128	@ 0x80
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d147      	bne.n	800cbda <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d010      	beq.n	800cb74 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb56:	0018      	movs	r0, r3
 800cb58:	f7fd f9a2 	bl	8009ea0 <HAL_DMA_Abort>
 800cb5c:	1e03      	subs	r3, r0, #0
 800cb5e:	d009      	beq.n	800cb74 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb64:	2208      	movs	r2, #8
 800cb66:	431a      	orrs	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800cb6c:	2317      	movs	r3, #23
 800cb6e:	18fb      	adds	r3, r7, r3
 800cb70:	2201      	movs	r2, #1
 800cb72:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	69da      	ldr	r2, [r3, #28]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	491c      	ldr	r1, [pc, #112]	@ (800cbf0 <HAL_I2S_DMAStop+0x194>)
 800cb80:	400a      	ands	r2, r1
 800cb82:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800cb84:	2300      	movs	r3, #0
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	60fb      	str	r3, [r7, #12]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	60fb      	str	r3, [r7, #12]
 800cb98:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2101      	movs	r1, #1
 800cba6:	438a      	bics	r2, r1
 800cba8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	2380      	movs	r3, #128	@ 0x80
 800cbb0:	005b      	lsls	r3, r3, #1
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d10e      	bne.n	800cbd4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbba:	2240      	movs	r2, #64	@ 0x40
 800cbbc:	431a      	orrs	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2235      	movs	r2, #53	@ 0x35
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800cbca:	2317      	movs	r3, #23
 800cbcc:	18fb      	adds	r3, r7, r3
 800cbce:	2201      	movs	r2, #1
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	e002      	b.n	800cbda <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2235      	movs	r2, #53	@ 0x35
 800cbde:	2101      	movs	r1, #1
 800cbe0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800cbe2:	2317      	movs	r3, #23
 800cbe4:	18fb      	adds	r3, r7, r3
 800cbe6:	781b      	ldrb	r3, [r3, #0]
}
 800cbe8:	0018      	movs	r0, r3
 800cbea:	46bd      	mov	sp, r7
 800cbec:	b006      	add	sp, #24
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	fffffbff 	.word	0xfffffbff

0800cbf4 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cbfc:	46c0      	nop			@ (mov r8, r8)
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	b002      	add	sp, #8
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800cc0c:	46c0      	nop			@ (mov r8, r8)
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	b002      	add	sp, #8
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc20:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	69db      	ldr	r3, [r3, #28]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10e      	bne.n	800cc48 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	685a      	ldr	r2, [r3, #4]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2101      	movs	r1, #1
 800cc36:	438a      	bics	r2, r1
 800cc38:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2235      	movs	r2, #53	@ 0x35
 800cc44:	2101      	movs	r1, #1
 800cc46:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	0018      	movs	r0, r3
 800cc4c:	f7f9 fe98 	bl	8006980 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800cc50:	46c0      	nop			@ (mov r8, r8)
 800cc52:	46bd      	mov	sp, r7
 800cc54:	b004      	add	sp, #16
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc64:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	0018      	movs	r0, r3
 800cc6a:	f7ff ffc3 	bl	800cbf4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800cc6e:	46c0      	nop			@ (mov r8, r8)
 800cc70:	46bd      	mov	sp, r7
 800cc72:	b004      	add	sp, #16
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc82:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2103      	movs	r1, #3
 800cc90:	438a      	bics	r2, r1
 800cc92:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2235      	movs	r2, #53	@ 0x35
 800cca4:	2101      	movs	r1, #1
 800cca6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccac:	2208      	movs	r2, #8
 800ccae:	431a      	orrs	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	0018      	movs	r0, r3
 800ccb8:	f7ff ffa4 	bl	800cc04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ccbc:	46c0      	nop			@ (mov r8, r8)
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	b004      	add	sp, #16
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	603b      	str	r3, [r7, #0]
 800ccd0:	1dfb      	adds	r3, r7, #7
 800ccd2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800ccd4:	f7fc fb00 	bl	80092d8 <HAL_GetTick>
 800ccd8:	0003      	movs	r3, r0
 800ccda:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ccdc:	e017      	b.n	800cd0e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	3301      	adds	r3, #1
 800cce2:	d014      	beq.n	800cd0e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800cce4:	f7fc faf8 	bl	80092d8 <HAL_GetTick>
 800cce8:	0002      	movs	r2, r0
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d902      	bls.n	800ccfa <I2S_WaitFlagStateUntilTimeout+0x36>
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d109      	bne.n	800cd0e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2235      	movs	r2, #53	@ 0x35
 800ccfe:	2101      	movs	r1, #1
 800cd00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2234      	movs	r2, #52	@ 0x34
 800cd06:	2100      	movs	r1, #0
 800cd08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	e00f      	b.n	800cd2e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	4013      	ands	r3, r2
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	425a      	negs	r2, r3
 800cd1e:	4153      	adcs	r3, r2
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	001a      	movs	r2, r3
 800cd24:	1dfb      	adds	r3, r7, #7
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d1d8      	bne.n	800ccde <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	0018      	movs	r0, r3
 800cd30:	46bd      	mov	sp, r7
 800cd32:	b006      	add	sp, #24
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd3a:	b08b      	sub	sp, #44	@ 0x2c
 800cd3c:	af06      	add	r7, sp, #24
 800cd3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e0f0      	b.n	800cf2c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a79      	ldr	r2, [pc, #484]	@ (800cf34 <HAL_PCD_Init+0x1fc>)
 800cd4e:	5c9b      	ldrb	r3, [r3, r2]
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d108      	bne.n	800cd68 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	23aa      	movs	r3, #170	@ 0xaa
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	0018      	movs	r0, r3
 800cd64:	f008 fd50 	bl	8015808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a72      	ldr	r2, [pc, #456]	@ (800cf34 <HAL_PCD_Init+0x1fc>)
 800cd6c:	2103      	movs	r1, #3
 800cd6e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	0018      	movs	r0, r3
 800cd76:	f004 fdd1 	bl	801191c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd7a:	230f      	movs	r3, #15
 800cd7c:	18fb      	adds	r3, r7, r3
 800cd7e:	2200      	movs	r2, #0
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	e049      	b.n	800ce18 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cd84:	200f      	movs	r0, #15
 800cd86:	183b      	adds	r3, r7, r0
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	6879      	ldr	r1, [r7, #4]
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	0013      	movs	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	189b      	adds	r3, r3, r2
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	18cb      	adds	r3, r1, r3
 800cd98:	3301      	adds	r3, #1
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cd9e:	183b      	adds	r3, r7, r0
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	6879      	ldr	r1, [r7, #4]
 800cda4:	1c5a      	adds	r2, r3, #1
 800cda6:	0013      	movs	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	189b      	adds	r3, r3, r2
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	183a      	adds	r2, r7, r0
 800cdb0:	7812      	ldrb	r2, [r2, #0]
 800cdb2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cdb4:	183b      	adds	r3, r7, r0
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	1c5a      	adds	r2, r3, #1
 800cdbc:	0013      	movs	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	189b      	adds	r3, r3, r2
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	18cb      	adds	r3, r1, r3
 800cdc6:	3303      	adds	r3, #3
 800cdc8:	2200      	movs	r2, #0
 800cdca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cdcc:	183b      	adds	r3, r7, r0
 800cdce:	781a      	ldrb	r2, [r3, #0]
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	0013      	movs	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	189b      	adds	r3, r3, r2
 800cdd8:	00db      	lsls	r3, r3, #3
 800cdda:	18cb      	adds	r3, r1, r3
 800cddc:	3338      	adds	r3, #56	@ 0x38
 800cdde:	2200      	movs	r2, #0
 800cde0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cde2:	183b      	adds	r3, r7, r0
 800cde4:	781a      	ldrb	r2, [r3, #0]
 800cde6:	6879      	ldr	r1, [r7, #4]
 800cde8:	0013      	movs	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	189b      	adds	r3, r3, r2
 800cdee:	00db      	lsls	r3, r3, #3
 800cdf0:	18cb      	adds	r3, r1, r3
 800cdf2:	333c      	adds	r3, #60	@ 0x3c
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cdf8:	183b      	adds	r3, r7, r0
 800cdfa:	781a      	ldrb	r2, [r3, #0]
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	0013      	movs	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	189b      	adds	r3, r3, r2
 800ce04:	00db      	lsls	r3, r3, #3
 800ce06:	18cb      	adds	r3, r1, r3
 800ce08:	3340      	adds	r3, #64	@ 0x40
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce0e:	183b      	adds	r3, r7, r0
 800ce10:	781a      	ldrb	r2, [r3, #0]
 800ce12:	183b      	adds	r3, r7, r0
 800ce14:	3201      	adds	r2, #1
 800ce16:	701a      	strb	r2, [r3, #0]
 800ce18:	210f      	movs	r1, #15
 800ce1a:	187b      	adds	r3, r7, r1
 800ce1c:	781a      	ldrb	r2, [r3, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d3ae      	bcc.n	800cd84 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce26:	187b      	adds	r3, r7, r1
 800ce28:	2200      	movs	r2, #0
 800ce2a:	701a      	strb	r2, [r3, #0]
 800ce2c:	e056      	b.n	800cedc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ce2e:	240f      	movs	r4, #15
 800ce30:	193b      	adds	r3, r7, r4
 800ce32:	781a      	ldrb	r2, [r3, #0]
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	236a      	movs	r3, #106	@ 0x6a
 800ce38:	33ff      	adds	r3, #255	@ 0xff
 800ce3a:	0019      	movs	r1, r3
 800ce3c:	0013      	movs	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	189b      	adds	r3, r3, r2
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	18c3      	adds	r3, r0, r3
 800ce46:	185b      	adds	r3, r3, r1
 800ce48:	2200      	movs	r2, #0
 800ce4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ce4c:	193b      	adds	r3, r7, r4
 800ce4e:	781a      	ldrb	r2, [r3, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	23b4      	movs	r3, #180	@ 0xb4
 800ce54:	0059      	lsls	r1, r3, #1
 800ce56:	0013      	movs	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	189b      	adds	r3, r3, r2
 800ce5c:	00db      	lsls	r3, r3, #3
 800ce5e:	18c3      	adds	r3, r0, r3
 800ce60:	185b      	adds	r3, r3, r1
 800ce62:	193a      	adds	r2, r7, r4
 800ce64:	7812      	ldrb	r2, [r2, #0]
 800ce66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ce68:	193b      	adds	r3, r7, r4
 800ce6a:	781a      	ldrb	r2, [r3, #0]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	236c      	movs	r3, #108	@ 0x6c
 800ce70:	33ff      	adds	r3, #255	@ 0xff
 800ce72:	0019      	movs	r1, r3
 800ce74:	0013      	movs	r3, r2
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	189b      	adds	r3, r3, r2
 800ce7a:	00db      	lsls	r3, r3, #3
 800ce7c:	18c3      	adds	r3, r0, r3
 800ce7e:	185b      	adds	r3, r3, r1
 800ce80:	2200      	movs	r2, #0
 800ce82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ce84:	193b      	adds	r3, r7, r4
 800ce86:	781a      	ldrb	r2, [r3, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	23bc      	movs	r3, #188	@ 0xbc
 800ce8c:	0059      	lsls	r1, r3, #1
 800ce8e:	0013      	movs	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	189b      	adds	r3, r3, r2
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	18c3      	adds	r3, r0, r3
 800ce98:	185b      	adds	r3, r3, r1
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ce9e:	193b      	adds	r3, r7, r4
 800cea0:	781a      	ldrb	r2, [r3, #0]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	23be      	movs	r3, #190	@ 0xbe
 800cea6:	0059      	lsls	r1, r3, #1
 800cea8:	0013      	movs	r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	189b      	adds	r3, r3, r2
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	18c3      	adds	r3, r0, r3
 800ceb2:	185b      	adds	r3, r3, r1
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ceb8:	193b      	adds	r3, r7, r4
 800ceba:	781a      	ldrb	r2, [r3, #0]
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	23c0      	movs	r3, #192	@ 0xc0
 800cec0:	0059      	lsls	r1, r3, #1
 800cec2:	0013      	movs	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	189b      	adds	r3, r3, r2
 800cec8:	00db      	lsls	r3, r3, #3
 800ceca:	18c3      	adds	r3, r0, r3
 800cecc:	185b      	adds	r3, r3, r1
 800cece:	2200      	movs	r2, #0
 800ced0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ced2:	193b      	adds	r3, r7, r4
 800ced4:	781a      	ldrb	r2, [r3, #0]
 800ced6:	193b      	adds	r3, r7, r4
 800ced8:	3201      	adds	r2, #1
 800ceda:	701a      	strb	r2, [r3, #0]
 800cedc:	230f      	movs	r3, #15
 800cede:	18fb      	adds	r3, r7, r3
 800cee0:	781a      	ldrb	r2, [r3, #0]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d3a1      	bcc.n	800ce2e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6818      	ldr	r0, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	466a      	mov	r2, sp
 800cef2:	0011      	movs	r1, r2
 800cef4:	001a      	movs	r2, r3
 800cef6:	3210      	adds	r2, #16
 800cef8:	ca70      	ldmia	r2!, {r4, r5, r6}
 800cefa:	c170      	stmia	r1!, {r4, r5, r6}
 800cefc:	ca30      	ldmia	r2!, {r4, r5}
 800cefe:	c130      	stmia	r1!, {r4, r5}
 800cf00:	6859      	ldr	r1, [r3, #4]
 800cf02:	689a      	ldr	r2, [r3, #8]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	f004 fd23 	bl	8011950 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2224      	movs	r2, #36	@ 0x24
 800cf0e:	2100      	movs	r1, #0
 800cf10:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4a07      	ldr	r2, [pc, #28]	@ (800cf34 <HAL_PCD_Init+0x1fc>)
 800cf16:	2101      	movs	r1, #1
 800cf18:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	69db      	ldr	r3, [r3, #28]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d103      	bne.n	800cf2a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	0018      	movs	r0, r3
 800cf26:	f001 fd23 	bl	800e970 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	0018      	movs	r0, r3
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	b005      	add	sp, #20
 800cf32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf34:	000002a9 	.word	0x000002a9

0800cf38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	23aa      	movs	r3, #170	@ 0xaa
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	5cd3      	ldrb	r3, [r2, r3]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d101      	bne.n	800cf50 <HAL_PCD_Start+0x18>
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	e014      	b.n	800cf7a <HAL_PCD_Start+0x42>
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	23aa      	movs	r3, #170	@ 0xaa
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	2101      	movs	r1, #1
 800cf58:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	0018      	movs	r0, r3
 800cf60:	f004 fcc6 	bl	80118f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	0018      	movs	r0, r3
 800cf6a:	f006 fcc9 	bl	8013900 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	23aa      	movs	r3, #170	@ 0xaa
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	2100      	movs	r1, #0
 800cf76:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	0018      	movs	r0, r3
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	b002      	add	sp, #8
 800cf80:	bd80      	pop	{r7, pc}
	...

0800cf84 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	0018      	movs	r0, r3
 800cf92:	f006 fccb 	bl	801392c <USB_ReadInterrupts>
 800cf96:	0003      	movs	r3, r0
 800cf98:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800cf9a:	68fa      	ldr	r2, [r7, #12]
 800cf9c:	2380      	movs	r3, #128	@ 0x80
 800cf9e:	021b      	lsls	r3, r3, #8
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	d004      	beq.n	800cfae <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	0018      	movs	r0, r3
 800cfa8:	f000 fb62 	bl	800d670 <PCD_EP_ISR_Handler>

    return;
 800cfac:	e11d      	b.n	800d1ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	2380      	movs	r3, #128	@ 0x80
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	d015      	beq.n	800cfe4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2244      	movs	r2, #68	@ 0x44
 800cfbe:	5a9b      	ldrh	r3, [r3, r2]
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	498a      	ldr	r1, [pc, #552]	@ (800d1f0 <HAL_PCD_IRQHandler+0x26c>)
 800cfc8:	400a      	ands	r2, r1
 800cfca:	b291      	uxth	r1, r2
 800cfcc:	2244      	movs	r2, #68	@ 0x44
 800cfce:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	0018      	movs	r0, r3
 800cfd4:	f008 fc9b 	bl	801590e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2100      	movs	r1, #0
 800cfdc:	0018      	movs	r0, r3
 800cfde:	f000 f915 	bl	800d20c <HAL_PCD_SetAddress>

    return;
 800cfe2:	e102      	b.n	800d1ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	2380      	movs	r3, #128	@ 0x80
 800cfe8:	01db      	lsls	r3, r3, #7
 800cfea:	4013      	ands	r3, r2
 800cfec:	d00c      	beq.n	800d008 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2244      	movs	r2, #68	@ 0x44
 800cff4:	5a9b      	ldrh	r3, [r3, r2]
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	497d      	ldr	r1, [pc, #500]	@ (800d1f4 <HAL_PCD_IRQHandler+0x270>)
 800cffe:	400a      	ands	r2, r1
 800d000:	b291      	uxth	r1, r2
 800d002:	2244      	movs	r2, #68	@ 0x44
 800d004:	5299      	strh	r1, [r3, r2]

    return;
 800d006:	e0f0      	b.n	800d1ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	2380      	movs	r3, #128	@ 0x80
 800d00c:	019b      	lsls	r3, r3, #6
 800d00e:	4013      	ands	r3, r2
 800d010:	d00c      	beq.n	800d02c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2244      	movs	r2, #68	@ 0x44
 800d018:	5a9b      	ldrh	r3, [r3, r2]
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4975      	ldr	r1, [pc, #468]	@ (800d1f8 <HAL_PCD_IRQHandler+0x274>)
 800d022:	400a      	ands	r2, r1
 800d024:	b291      	uxth	r1, r2
 800d026:	2244      	movs	r2, #68	@ 0x44
 800d028:	5299      	strh	r1, [r3, r2]

    return;
 800d02a:	e0de      	b.n	800d1ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	2380      	movs	r3, #128	@ 0x80
 800d030:	015b      	lsls	r3, r3, #5
 800d032:	4013      	ands	r3, r2
 800d034:	d038      	beq.n	800d0a8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2240      	movs	r2, #64	@ 0x40
 800d03c:	5a9b      	ldrh	r3, [r3, r2]
 800d03e:	b29a      	uxth	r2, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2104      	movs	r1, #4
 800d046:	438a      	bics	r2, r1
 800d048:	b291      	uxth	r1, r2
 800d04a:	2240      	movs	r2, #64	@ 0x40
 800d04c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2240      	movs	r2, #64	@ 0x40
 800d054:	5a9b      	ldrh	r3, [r3, r2]
 800d056:	b29a      	uxth	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2108      	movs	r1, #8
 800d05e:	438a      	bics	r2, r1
 800d060:	b291      	uxth	r1, r2
 800d062:	2240      	movs	r2, #64	@ 0x40
 800d064:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	23b8      	movs	r3, #184	@ 0xb8
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	5cd3      	ldrb	r3, [r2, r3]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d109      	bne.n	800d086 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	23b8      	movs	r3, #184	@ 0xb8
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	2100      	movs	r1, #0
 800d07a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2100      	movs	r1, #0
 800d080:	0018      	movs	r0, r3
 800d082:	f001 fc9f 	bl	800e9c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	0018      	movs	r0, r3
 800d08a:	f008 fc81 	bl	8015990 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2244      	movs	r2, #68	@ 0x44
 800d094:	5a9b      	ldrh	r3, [r3, r2]
 800d096:	b29a      	uxth	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4957      	ldr	r1, [pc, #348]	@ (800d1fc <HAL_PCD_IRQHandler+0x278>)
 800d09e:	400a      	ands	r2, r1
 800d0a0:	b291      	uxth	r1, r2
 800d0a2:	2244      	movs	r2, #68	@ 0x44
 800d0a4:	5299      	strh	r1, [r3, r2]

    return;
 800d0a6:	e0a0      	b.n	800d1ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	2380      	movs	r3, #128	@ 0x80
 800d0ac:	011b      	lsls	r3, r3, #4
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	d028      	beq.n	800d104 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2240      	movs	r2, #64	@ 0x40
 800d0b8:	5a9b      	ldrh	r3, [r3, r2]
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2108      	movs	r1, #8
 800d0c2:	430a      	orrs	r2, r1
 800d0c4:	b291      	uxth	r1, r2
 800d0c6:	2240      	movs	r2, #64	@ 0x40
 800d0c8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2244      	movs	r2, #68	@ 0x44
 800d0d0:	5a9b      	ldrh	r3, [r3, r2]
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4949      	ldr	r1, [pc, #292]	@ (800d200 <HAL_PCD_IRQHandler+0x27c>)
 800d0da:	400a      	ands	r2, r1
 800d0dc:	b291      	uxth	r1, r2
 800d0de:	2244      	movs	r2, #68	@ 0x44
 800d0e0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2240      	movs	r2, #64	@ 0x40
 800d0e8:	5a9b      	ldrh	r3, [r3, r2]
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2104      	movs	r1, #4
 800d0f2:	430a      	orrs	r2, r1
 800d0f4:	b291      	uxth	r1, r2
 800d0f6:	2240      	movs	r2, #64	@ 0x40
 800d0f8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	f008 fc2b 	bl	8015958 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800d102:	e072      	b.n	800d1ea <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2280      	movs	r2, #128	@ 0x80
 800d108:	4013      	ands	r3, r2
 800d10a:	d046      	beq.n	800d19a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2244      	movs	r2, #68	@ 0x44
 800d112:	5a9b      	ldrh	r3, [r3, r2]
 800d114:	b29a      	uxth	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2180      	movs	r1, #128	@ 0x80
 800d11c:	438a      	bics	r2, r1
 800d11e:	b291      	uxth	r1, r2
 800d120:	2244      	movs	r2, #68	@ 0x44
 800d122:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	23b8      	movs	r3, #184	@ 0xb8
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	5cd3      	ldrb	r3, [r2, r3]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d12f      	bne.n	800d190 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2240      	movs	r2, #64	@ 0x40
 800d136:	5a9b      	ldrh	r3, [r3, r2]
 800d138:	b29a      	uxth	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2104      	movs	r1, #4
 800d140:	430a      	orrs	r2, r1
 800d142:	b291      	uxth	r1, r2
 800d144:	2240      	movs	r2, #64	@ 0x40
 800d146:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2240      	movs	r2, #64	@ 0x40
 800d14e:	5a9b      	ldrh	r3, [r3, r2]
 800d150:	b29a      	uxth	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2108      	movs	r1, #8
 800d158:	430a      	orrs	r2, r1
 800d15a:	b291      	uxth	r1, r2
 800d15c:	2240      	movs	r2, #64	@ 0x40
 800d15e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	23b8      	movs	r3, #184	@ 0xb8
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	2101      	movs	r1, #1
 800d168:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2254      	movs	r2, #84	@ 0x54
 800d170:	5a9b      	ldrh	r3, [r3, r2]
 800d172:	b29b      	uxth	r3, r3
 800d174:	089b      	lsrs	r3, r3, #2
 800d176:	223c      	movs	r2, #60	@ 0x3c
 800d178:	4013      	ands	r3, r2
 800d17a:	0019      	movs	r1, r3
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	23b9      	movs	r3, #185	@ 0xb9
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2101      	movs	r1, #1
 800d188:	0018      	movs	r0, r3
 800d18a:	f001 fc1b 	bl	800e9c4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800d18e:	e02c      	b.n	800d1ea <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	0018      	movs	r0, r3
 800d194:	f008 fbe0 	bl	8015958 <HAL_PCD_SuspendCallback>
    return;
 800d198:	e027      	b.n	800d1ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	2380      	movs	r3, #128	@ 0x80
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	d010      	beq.n	800d1c6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2244      	movs	r2, #68	@ 0x44
 800d1aa:	5a9b      	ldrh	r3, [r3, r2]
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4914      	ldr	r1, [pc, #80]	@ (800d204 <HAL_PCD_IRQHandler+0x280>)
 800d1b4:	400a      	ands	r2, r1
 800d1b6:	b291      	uxth	r1, r2
 800d1b8:	2244      	movs	r2, #68	@ 0x44
 800d1ba:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	0018      	movs	r0, r3
 800d1c0:	f008 fb96 	bl	80158f0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800d1c4:	e011      	b.n	800d1ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	2380      	movs	r3, #128	@ 0x80
 800d1ca:	005b      	lsls	r3, r3, #1
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	d00c      	beq.n	800d1ea <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2244      	movs	r2, #68	@ 0x44
 800d1d6:	5a9b      	ldrh	r3, [r3, r2]
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	490a      	ldr	r1, [pc, #40]	@ (800d208 <HAL_PCD_IRQHandler+0x284>)
 800d1e0:	400a      	ands	r2, r1
 800d1e2:	b291      	uxth	r1, r2
 800d1e4:	2244      	movs	r2, #68	@ 0x44
 800d1e6:	5299      	strh	r1, [r3, r2]

    return;
 800d1e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	b004      	add	sp, #16
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	fffffbff 	.word	0xfffffbff
 800d1f4:	ffffbfff 	.word	0xffffbfff
 800d1f8:	ffffdfff 	.word	0xffffdfff
 800d1fc:	ffffefff 	.word	0xffffefff
 800d200:	fffff7ff 	.word	0xfffff7ff
 800d204:	fffffdff 	.word	0xfffffdff
 800d208:	fffffeff 	.word	0xfffffeff

0800d20c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	000a      	movs	r2, r1
 800d216:	1cfb      	adds	r3, r7, #3
 800d218:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	23aa      	movs	r3, #170	@ 0xaa
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	5cd3      	ldrb	r3, [r2, r3]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d101      	bne.n	800d22a <HAL_PCD_SetAddress+0x1e>
 800d226:	2302      	movs	r3, #2
 800d228:	e017      	b.n	800d25a <HAL_PCD_SetAddress+0x4e>
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	23aa      	movs	r3, #170	@ 0xaa
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	2101      	movs	r1, #1
 800d232:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	1cfa      	adds	r2, r7, #3
 800d238:	2124      	movs	r1, #36	@ 0x24
 800d23a:	7812      	ldrb	r2, [r2, #0]
 800d23c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	1cfb      	adds	r3, r7, #3
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	0019      	movs	r1, r3
 800d248:	0010      	movs	r0, r2
 800d24a:	f006 fb45 	bl	80138d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	23aa      	movs	r3, #170	@ 0xaa
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	2100      	movs	r1, #0
 800d256:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	0018      	movs	r0, r3
 800d25c:	46bd      	mov	sp, r7
 800d25e:	b002      	add	sp, #8
 800d260:	bd80      	pop	{r7, pc}

0800d262 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d262:	b590      	push	{r4, r7, lr}
 800d264:	b085      	sub	sp, #20
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	000c      	movs	r4, r1
 800d26c:	0010      	movs	r0, r2
 800d26e:	0019      	movs	r1, r3
 800d270:	1cfb      	adds	r3, r7, #3
 800d272:	1c22      	adds	r2, r4, #0
 800d274:	701a      	strb	r2, [r3, #0]
 800d276:	003b      	movs	r3, r7
 800d278:	1c02      	adds	r2, r0, #0
 800d27a:	801a      	strh	r2, [r3, #0]
 800d27c:	1cbb      	adds	r3, r7, #2
 800d27e:	1c0a      	adds	r2, r1, #0
 800d280:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d282:	230b      	movs	r3, #11
 800d284:	18fb      	adds	r3, r7, r3
 800d286:	2200      	movs	r2, #0
 800d288:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d28a:	1cfb      	adds	r3, r7, #3
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	b25b      	sxtb	r3, r3
 800d290:	2b00      	cmp	r3, #0
 800d292:	da0f      	bge.n	800d2b4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d294:	1cfb      	adds	r3, r7, #3
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2207      	movs	r2, #7
 800d29a:	4013      	ands	r3, r2
 800d29c:	1c5a      	adds	r2, r3, #1
 800d29e:	0013      	movs	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	189b      	adds	r3, r3, r2
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	18d3      	adds	r3, r2, r3
 800d2aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	705a      	strb	r2, [r3, #1]
 800d2b2:	e00f      	b.n	800d2d4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2b4:	1cfb      	adds	r3, r7, #3
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	2207      	movs	r2, #7
 800d2ba:	401a      	ands	r2, r3
 800d2bc:	0013      	movs	r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	189b      	adds	r3, r3, r2
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	3369      	adds	r3, #105	@ 0x69
 800d2c6:	33ff      	adds	r3, #255	@ 0xff
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	18d3      	adds	r3, r2, r3
 800d2cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d2d4:	1cfb      	adds	r3, r7, #3
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2207      	movs	r2, #7
 800d2da:	4013      	ands	r3, r2
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d2e2:	003b      	movs	r3, r7
 800d2e4:	881a      	ldrh	r2, [r3, #0]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	1cba      	adds	r2, r7, #2
 800d2ee:	7812      	ldrb	r2, [r2, #0]
 800d2f0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d2f2:	1cbb      	adds	r3, r7, #2
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	d102      	bne.n	800d300 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	23aa      	movs	r3, #170	@ 0xaa
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	5cd3      	ldrb	r3, [r2, r3]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d101      	bne.n	800d310 <HAL_PCD_EP_Open+0xae>
 800d30c:	2302      	movs	r3, #2
 800d30e:	e013      	b.n	800d338 <HAL_PCD_EP_Open+0xd6>
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	23aa      	movs	r3, #170	@ 0xaa
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	2101      	movs	r1, #1
 800d318:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	0011      	movs	r1, r2
 800d322:	0018      	movs	r0, r3
 800d324:	f004 fb3c 	bl	80119a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	23aa      	movs	r3, #170	@ 0xaa
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	2100      	movs	r1, #0
 800d330:	54d1      	strb	r1, [r2, r3]

  return ret;
 800d332:	230b      	movs	r3, #11
 800d334:	18fb      	adds	r3, r7, r3
 800d336:	781b      	ldrb	r3, [r3, #0]
}
 800d338:	0018      	movs	r0, r3
 800d33a:	46bd      	mov	sp, r7
 800d33c:	b005      	add	sp, #20
 800d33e:	bd90      	pop	{r4, r7, pc}

0800d340 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	000a      	movs	r2, r1
 800d34a:	1cfb      	adds	r3, r7, #3
 800d34c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d34e:	1cfb      	adds	r3, r7, #3
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	b25b      	sxtb	r3, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	da0f      	bge.n	800d378 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d358:	1cfb      	adds	r3, r7, #3
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2207      	movs	r2, #7
 800d35e:	4013      	ands	r3, r2
 800d360:	1c5a      	adds	r2, r3, #1
 800d362:	0013      	movs	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	189b      	adds	r3, r3, r2
 800d368:	00db      	lsls	r3, r3, #3
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	18d3      	adds	r3, r2, r3
 800d36e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2201      	movs	r2, #1
 800d374:	705a      	strb	r2, [r3, #1]
 800d376:	e00f      	b.n	800d398 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d378:	1cfb      	adds	r3, r7, #3
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	2207      	movs	r2, #7
 800d37e:	401a      	ands	r2, r3
 800d380:	0013      	movs	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	189b      	adds	r3, r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	3369      	adds	r3, #105	@ 0x69
 800d38a:	33ff      	adds	r3, #255	@ 0xff
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	18d3      	adds	r3, r2, r3
 800d390:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d398:	1cfb      	adds	r3, r7, #3
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	2207      	movs	r2, #7
 800d39e:	4013      	ands	r3, r2
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	23aa      	movs	r3, #170	@ 0xaa
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	5cd3      	ldrb	r3, [r2, r3]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d101      	bne.n	800d3b6 <HAL_PCD_EP_Close+0x76>
 800d3b2:	2302      	movs	r3, #2
 800d3b4:	e011      	b.n	800d3da <HAL_PCD_EP_Close+0x9a>
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	23aa      	movs	r3, #170	@ 0xaa
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	2101      	movs	r1, #1
 800d3be:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	0011      	movs	r1, r2
 800d3c8:	0018      	movs	r0, r3
 800d3ca:	f004 fe8b 	bl	80120e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	23aa      	movs	r3, #170	@ 0xaa
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	0018      	movs	r0, r3
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	b004      	add	sp, #16
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b086      	sub	sp, #24
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
 800d3ee:	200b      	movs	r0, #11
 800d3f0:	183b      	adds	r3, r7, r0
 800d3f2:	1c0a      	adds	r2, r1, #0
 800d3f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d3f6:	0001      	movs	r1, r0
 800d3f8:	187b      	adds	r3, r7, r1
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2207      	movs	r2, #7
 800d3fe:	401a      	ands	r2, r3
 800d400:	0013      	movs	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	189b      	adds	r3, r3, r2
 800d406:	00db      	lsls	r3, r3, #3
 800d408:	3369      	adds	r3, #105	@ 0x69
 800d40a:	33ff      	adds	r3, #255	@ 0xff
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	18d3      	adds	r3, r2, r3
 800d410:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	2200      	movs	r2, #0
 800d422:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	2200      	movs	r2, #0
 800d428:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d42a:	187b      	adds	r3, r7, r1
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	2207      	movs	r2, #7
 800d430:	4013      	ands	r3, r2
 800d432:	b2da      	uxtb	r2, r3
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	0011      	movs	r1, r2
 800d440:	0018      	movs	r0, r3
 800d442:	f005 f80f 	bl	8012464 <USB_EPStartXfer>

  return HAL_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	0018      	movs	r0, r3
 800d44a:	46bd      	mov	sp, r7
 800d44c:	b006      	add	sp, #24
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	000a      	movs	r2, r1
 800d45a:	1cfb      	adds	r3, r7, #3
 800d45c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d45e:	1cfb      	adds	r3, r7, #3
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	2207      	movs	r2, #7
 800d464:	401a      	ands	r2, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	23c2      	movs	r3, #194	@ 0xc2
 800d46a:	0059      	lsls	r1, r3, #1
 800d46c:	0013      	movs	r3, r2
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	189b      	adds	r3, r3, r2
 800d472:	00db      	lsls	r3, r3, #3
 800d474:	18c3      	adds	r3, r0, r3
 800d476:	185b      	adds	r3, r3, r1
 800d478:	681b      	ldr	r3, [r3, #0]
}
 800d47a:	0018      	movs	r0, r3
 800d47c:	46bd      	mov	sp, r7
 800d47e:	b002      	add	sp, #8
 800d480:	bd80      	pop	{r7, pc}

0800d482 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b086      	sub	sp, #24
 800d486:	af00      	add	r7, sp, #0
 800d488:	60f8      	str	r0, [r7, #12]
 800d48a:	607a      	str	r2, [r7, #4]
 800d48c:	603b      	str	r3, [r7, #0]
 800d48e:	200b      	movs	r0, #11
 800d490:	183b      	adds	r3, r7, r0
 800d492:	1c0a      	adds	r2, r1, #0
 800d494:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d496:	183b      	adds	r3, r7, r0
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	2207      	movs	r2, #7
 800d49c:	4013      	ands	r3, r2
 800d49e:	1c5a      	adds	r2, r3, #1
 800d4a0:	0013      	movs	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	189b      	adds	r3, r3, r2
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	68fa      	ldr	r2, [r7, #12]
 800d4aa:	18d3      	adds	r3, r2, r3
 800d4ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	683a      	ldr	r2, [r7, #0]
 800d4b8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	2224      	movs	r2, #36	@ 0x24
 800d4be:	2101      	movs	r1, #1
 800d4c0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d4d4:	183b      	adds	r3, r7, r0
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2207      	movs	r2, #7
 800d4da:	4013      	ands	r3, r2
 800d4dc:	b2da      	uxtb	r2, r3
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	0011      	movs	r1, r2
 800d4ea:	0018      	movs	r0, r3
 800d4ec:	f004 ffba 	bl	8012464 <USB_EPStartXfer>

  return HAL_OK;
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	0018      	movs	r0, r3
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	b006      	add	sp, #24
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b084      	sub	sp, #16
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	000a      	movs	r2, r1
 800d504:	1cfb      	adds	r3, r7, #3
 800d506:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d508:	1cfb      	adds	r3, r7, #3
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	2207      	movs	r2, #7
 800d50e:	401a      	ands	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	429a      	cmp	r2, r3
 800d516:	d901      	bls.n	800d51c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	e046      	b.n	800d5aa <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d51c:	1cfb      	adds	r3, r7, #3
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	b25b      	sxtb	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	da0f      	bge.n	800d546 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d526:	1cfb      	adds	r3, r7, #3
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2207      	movs	r2, #7
 800d52c:	4013      	ands	r3, r2
 800d52e:	1c5a      	adds	r2, r3, #1
 800d530:	0013      	movs	r3, r2
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	189b      	adds	r3, r3, r2
 800d536:	00db      	lsls	r3, r3, #3
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	18d3      	adds	r3, r2, r3
 800d53c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2201      	movs	r2, #1
 800d542:	705a      	strb	r2, [r3, #1]
 800d544:	e00d      	b.n	800d562 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d546:	1cfb      	adds	r3, r7, #3
 800d548:	781a      	ldrb	r2, [r3, #0]
 800d54a:	0013      	movs	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	189b      	adds	r3, r3, r2
 800d550:	00db      	lsls	r3, r3, #3
 800d552:	3369      	adds	r3, #105	@ 0x69
 800d554:	33ff      	adds	r3, #255	@ 0xff
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	18d3      	adds	r3, r2, r3
 800d55a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2201      	movs	r2, #1
 800d566:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d568:	1cfb      	adds	r3, r7, #3
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2207      	movs	r2, #7
 800d56e:	4013      	ands	r3, r2
 800d570:	b2da      	uxtb	r2, r3
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	23aa      	movs	r3, #170	@ 0xaa
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	5cd3      	ldrb	r3, [r2, r3]
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d101      	bne.n	800d586 <HAL_PCD_EP_SetStall+0x8c>
 800d582:	2302      	movs	r3, #2
 800d584:	e011      	b.n	800d5aa <HAL_PCD_EP_SetStall+0xb0>
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	23aa      	movs	r3, #170	@ 0xaa
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	2101      	movs	r1, #1
 800d58e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	0011      	movs	r1, r2
 800d598:	0018      	movs	r0, r3
 800d59a:	f006 f89b 	bl	80136d4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	23aa      	movs	r3, #170	@ 0xaa
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	2100      	movs	r1, #0
 800d5a6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	b004      	add	sp, #16
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b084      	sub	sp, #16
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	000a      	movs	r2, r1
 800d5bc:	1cfb      	adds	r3, r7, #3
 800d5be:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d5c0:	1cfb      	adds	r3, r7, #3
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	220f      	movs	r2, #15
 800d5c6:	401a      	ands	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d901      	bls.n	800d5d4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e048      	b.n	800d666 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d5d4:	1cfb      	adds	r3, r7, #3
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	b25b      	sxtb	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	da0f      	bge.n	800d5fe <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d5de:	1cfb      	adds	r3, r7, #3
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2207      	movs	r2, #7
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	0013      	movs	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	189b      	adds	r3, r3, r2
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	18d3      	adds	r3, r2, r3
 800d5f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	705a      	strb	r2, [r3, #1]
 800d5fc:	e00f      	b.n	800d61e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d5fe:	1cfb      	adds	r3, r7, #3
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	2207      	movs	r2, #7
 800d604:	401a      	ands	r2, r3
 800d606:	0013      	movs	r3, r2
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	189b      	adds	r3, r3, r2
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	3369      	adds	r3, #105	@ 0x69
 800d610:	33ff      	adds	r3, #255	@ 0xff
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	18d3      	adds	r3, r2, r3
 800d616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2200      	movs	r2, #0
 800d61c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2200      	movs	r2, #0
 800d622:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d624:	1cfb      	adds	r3, r7, #3
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	2207      	movs	r2, #7
 800d62a:	4013      	ands	r3, r2
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	23aa      	movs	r3, #170	@ 0xaa
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	5cd3      	ldrb	r3, [r2, r3]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d101      	bne.n	800d642 <HAL_PCD_EP_ClrStall+0x90>
 800d63e:	2302      	movs	r3, #2
 800d640:	e011      	b.n	800d666 <HAL_PCD_EP_ClrStall+0xb4>
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	23aa      	movs	r3, #170	@ 0xaa
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	2101      	movs	r1, #1
 800d64a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68fa      	ldr	r2, [r7, #12]
 800d652:	0011      	movs	r1, r2
 800d654:	0018      	movs	r0, r3
 800d656:	f006 f88d 	bl	8013774 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	23aa      	movs	r3, #170	@ 0xaa
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	2100      	movs	r1, #0
 800d662:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	0018      	movs	r0, r3
 800d668:	46bd      	mov	sp, r7
 800d66a:	b004      	add	sp, #16
 800d66c:	bd80      	pop	{r7, pc}
	...

0800d670 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800d670:	b5b0      	push	{r4, r5, r7, lr}
 800d672:	b096      	sub	sp, #88	@ 0x58
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d678:	f000 fbec 	bl	800de54 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	204e      	movs	r0, #78	@ 0x4e
 800d682:	183b      	adds	r3, r7, r0
 800d684:	2144      	movs	r1, #68	@ 0x44
 800d686:	5a52      	ldrh	r2, [r2, r1]
 800d688:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800d68a:	183b      	adds	r3, r7, r0
 800d68c:	881b      	ldrh	r3, [r3, #0]
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	244d      	movs	r4, #77	@ 0x4d
 800d692:	193b      	adds	r3, r7, r4
 800d694:	210f      	movs	r1, #15
 800d696:	400a      	ands	r2, r1
 800d698:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800d69a:	193b      	adds	r3, r7, r4
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d000      	beq.n	800d6a4 <PCD_EP_ISR_Handler+0x34>
 800d6a2:	e18f      	b.n	800d9c4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800d6a4:	183b      	adds	r3, r7, r0
 800d6a6:	881b      	ldrh	r3, [r3, #0]
 800d6a8:	2210      	movs	r2, #16
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	d155      	bne.n	800d75a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	200e      	movs	r0, #14
 800d6b8:	183b      	adds	r3, r7, r0
 800d6ba:	49bb      	ldr	r1, [pc, #748]	@ (800d9a8 <PCD_EP_ISR_Handler+0x338>)
 800d6bc:	400a      	ands	r2, r1
 800d6be:	801a      	strh	r2, [r3, #0]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	183a      	adds	r2, r7, r0
 800d6c6:	8812      	ldrh	r2, [r2, #0]
 800d6c8:	49b8      	ldr	r1, [pc, #736]	@ (800d9ac <PCD_EP_ISR_Handler+0x33c>)
 800d6ca:	430a      	orrs	r2, r1
 800d6cc:	b292      	uxth	r2, r2
 800d6ce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3328      	adds	r3, #40	@ 0x28
 800d6d4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2250      	movs	r2, #80	@ 0x50
 800d6dc:	5a9b      	ldrh	r3, [r3, r2]
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	001a      	movs	r2, r3
 800d6e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	00db      	lsls	r3, r3, #3
 800d6e8:	18d2      	adds	r2, r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	18d3      	adds	r3, r2, r3
 800d6f0:	4aaf      	ldr	r2, [pc, #700]	@ (800d9b0 <PCD_EP_ISR_Handler+0x340>)
 800d6f2:	4694      	mov	ip, r2
 800d6f4:	4463      	add	r3, ip
 800d6f6:	881b      	ldrh	r3, [r3, #0]
 800d6f8:	059b      	lsls	r3, r3, #22
 800d6fa:	0d9a      	lsrs	r2, r3, #22
 800d6fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800d700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d702:	695a      	ldr	r2, [r3, #20]
 800d704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d706:	69db      	ldr	r3, [r3, #28]
 800d708:	18d2      	adds	r2, r2, r3
 800d70a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d70c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2100      	movs	r1, #0
 800d712:	0018      	movs	r0, r3
 800d714:	f008 f8ce 	bl	80158b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2224      	movs	r2, #36	@ 0x24
 800d71c:	5c9b      	ldrb	r3, [r3, r2]
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <PCD_EP_ISR_Handler+0xb8>
 800d724:	f000 fb96 	bl	800de54 <PCD_EP_ISR_Handler+0x7e4>
 800d728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d72a:	699b      	ldr	r3, [r3, #24]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d001      	beq.n	800d734 <PCD_EP_ISR_Handler+0xc4>
 800d730:	f000 fb90 	bl	800de54 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2224      	movs	r2, #36	@ 0x24
 800d738:	5c9b      	ldrb	r3, [r3, r2]
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2280      	movs	r2, #128	@ 0x80
 800d73e:	4252      	negs	r2, r2
 800d740:	4313      	orrs	r3, r2
 800d742:	b2da      	uxtb	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	0011      	movs	r1, r2
 800d74a:	224c      	movs	r2, #76	@ 0x4c
 800d74c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2224      	movs	r2, #36	@ 0x24
 800d752:	2100      	movs	r1, #0
 800d754:	5499      	strb	r1, [r3, r2]
 800d756:	f000 fb7d 	bl	800de54 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	3369      	adds	r3, #105	@ 0x69
 800d75e:	33ff      	adds	r3, #255	@ 0xff
 800d760:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	214a      	movs	r1, #74	@ 0x4a
 800d768:	187b      	adds	r3, r7, r1
 800d76a:	8812      	ldrh	r2, [r2, #0]
 800d76c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d76e:	187b      	adds	r3, r7, r1
 800d770:	881a      	ldrh	r2, [r3, #0]
 800d772:	2380      	movs	r3, #128	@ 0x80
 800d774:	011b      	lsls	r3, r3, #4
 800d776:	4013      	ands	r3, r2
 800d778:	d037      	beq.n	800d7ea <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2250      	movs	r2, #80	@ 0x50
 800d780:	5a9b      	ldrh	r3, [r3, r2]
 800d782:	b29b      	uxth	r3, r3
 800d784:	001a      	movs	r2, r3
 800d786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	00db      	lsls	r3, r3, #3
 800d78c:	18d2      	adds	r2, r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	18d3      	adds	r3, r2, r3
 800d794:	4a87      	ldr	r2, [pc, #540]	@ (800d9b4 <PCD_EP_ISR_Handler+0x344>)
 800d796:	4694      	mov	ip, r2
 800d798:	4463      	add	r3, ip
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	059b      	lsls	r3, r3, #22
 800d79e:	0d9a      	lsrs	r2, r3, #22
 800d7a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7a2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6818      	ldr	r0, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	22ac      	movs	r2, #172	@ 0xac
 800d7ac:	0092      	lsls	r2, r2, #2
 800d7ae:	1899      	adds	r1, r3, r2
 800d7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7b2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800d7b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7b6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	f006 f90e 	bl	80139da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	2010      	movs	r0, #16
 800d7c8:	183b      	adds	r3, r7, r0
 800d7ca:	497b      	ldr	r1, [pc, #492]	@ (800d9b8 <PCD_EP_ISR_Handler+0x348>)
 800d7cc:	400a      	ands	r2, r1
 800d7ce:	801a      	strh	r2, [r3, #0]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	183a      	adds	r2, r7, r0
 800d7d6:	8812      	ldrh	r2, [r2, #0]
 800d7d8:	2180      	movs	r1, #128	@ 0x80
 800d7da:	430a      	orrs	r2, r1
 800d7dc:	b292      	uxth	r2, r2
 800d7de:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	0018      	movs	r0, r3
 800d7e4:	f008 f830 	bl	8015848 <HAL_PCD_SetupStageCallback>
 800d7e8:	e334      	b.n	800de54 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d7ea:	234a      	movs	r3, #74	@ 0x4a
 800d7ec:	18fb      	adds	r3, r7, r3
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	5e9b      	ldrsh	r3, [r3, r2]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	db00      	blt.n	800d7f8 <PCD_EP_ISR_Handler+0x188>
 800d7f6:	e32d      	b.n	800de54 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	201e      	movs	r0, #30
 800d802:	183b      	adds	r3, r7, r0
 800d804:	496c      	ldr	r1, [pc, #432]	@ (800d9b8 <PCD_EP_ISR_Handler+0x348>)
 800d806:	400a      	ands	r2, r1
 800d808:	801a      	strh	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	183a      	adds	r2, r7, r0
 800d810:	8812      	ldrh	r2, [r2, #0]
 800d812:	2180      	movs	r1, #128	@ 0x80
 800d814:	430a      	orrs	r2, r1
 800d816:	b292      	uxth	r2, r2
 800d818:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2250      	movs	r2, #80	@ 0x50
 800d820:	5a9b      	ldrh	r3, [r3, r2]
 800d822:	b29b      	uxth	r3, r3
 800d824:	001a      	movs	r2, r3
 800d826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	00db      	lsls	r3, r3, #3
 800d82c:	18d2      	adds	r2, r2, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	18d3      	adds	r3, r2, r3
 800d834:	4a5f      	ldr	r2, [pc, #380]	@ (800d9b4 <PCD_EP_ISR_Handler+0x344>)
 800d836:	4694      	mov	ip, r2
 800d838:	4463      	add	r3, ip
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	059b      	lsls	r3, r3, #22
 800d83e:	0d9a      	lsrs	r2, r3, #22
 800d840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d842:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800d844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d846:	69db      	ldr	r3, [r3, #28]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d01a      	beq.n	800d882 <PCD_EP_ISR_Handler+0x212>
 800d84c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d016      	beq.n	800d882 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6818      	ldr	r0, [r3, #0]
 800d858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d85a:	6959      	ldr	r1, [r3, #20]
 800d85c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d85e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800d860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d862:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d864:	b29b      	uxth	r3, r3
 800d866:	f006 f8b8 	bl	80139da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800d86a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d86c:	695a      	ldr	r2, [r3, #20]
 800d86e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d870:	69db      	ldr	r3, [r3, #28]
 800d872:	18d2      	adds	r2, r2, r3
 800d874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d876:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2100      	movs	r1, #0
 800d87c:	0018      	movs	r0, r3
 800d87e:	f007 fff8 	bl	8015872 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	214a      	movs	r1, #74	@ 0x4a
 800d888:	187b      	adds	r3, r7, r1
 800d88a:	8812      	ldrh	r2, [r2, #0]
 800d88c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800d88e:	187b      	adds	r3, r7, r1
 800d890:	881a      	ldrh	r2, [r3, #0]
 800d892:	2380      	movs	r3, #128	@ 0x80
 800d894:	011b      	lsls	r3, r3, #4
 800d896:	4013      	ands	r3, r2
 800d898:	d000      	beq.n	800d89c <PCD_EP_ISR_Handler+0x22c>
 800d89a:	e2db      	b.n	800de54 <PCD_EP_ISR_Handler+0x7e4>
 800d89c:	187b      	adds	r3, r7, r1
 800d89e:	881a      	ldrh	r2, [r3, #0]
 800d8a0:	23c0      	movs	r3, #192	@ 0xc0
 800d8a2:	019b      	lsls	r3, r3, #6
 800d8a4:	401a      	ands	r2, r3
 800d8a6:	23c0      	movs	r3, #192	@ 0xc0
 800d8a8:	019b      	lsls	r3, r3, #6
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d100      	bne.n	800d8b0 <PCD_EP_ISR_Handler+0x240>
 800d8ae:	e2d1      	b.n	800de54 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	61bb      	str	r3, [r7, #24]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2250      	movs	r2, #80	@ 0x50
 800d8bc:	5a9b      	ldrh	r3, [r3, r2]
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	001a      	movs	r2, r3
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	189b      	adds	r3, r3, r2
 800d8c6:	61bb      	str	r3, [r7, #24]
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	4a3a      	ldr	r2, [pc, #232]	@ (800d9b4 <PCD_EP_ISR_Handler+0x344>)
 800d8cc:	4694      	mov	ip, r2
 800d8ce:	4463      	add	r3, ip
 800d8d0:	617b      	str	r3, [r7, #20]
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	881b      	ldrh	r3, [r3, #0]
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	059b      	lsls	r3, r3, #22
 800d8da:	0d9b      	lsrs	r3, r3, #22
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	801a      	strh	r2, [r3, #0]
 800d8e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8e8:	d91a      	bls.n	800d920 <PCD_EP_ISR_Handler+0x2b0>
 800d8ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	095b      	lsrs	r3, r3, #5
 800d8f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8f4:	691b      	ldr	r3, [r3, #16]
 800d8f6:	221f      	movs	r2, #31
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	d102      	bne.n	800d902 <PCD_EP_ISR_Handler+0x292>
 800d8fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8fe:	3b01      	subs	r3, #1
 800d900:	647b      	str	r3, [r7, #68]	@ 0x44
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	881b      	ldrh	r3, [r3, #0]
 800d906:	b29a      	uxth	r2, r3
 800d908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	029b      	lsls	r3, r3, #10
 800d90e:	b29b      	uxth	r3, r3
 800d910:	4313      	orrs	r3, r2
 800d912:	b29b      	uxth	r3, r3
 800d914:	4a25      	ldr	r2, [pc, #148]	@ (800d9ac <PCD_EP_ISR_Handler+0x33c>)
 800d916:	4313      	orrs	r3, r2
 800d918:	b29a      	uxth	r2, r3
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	801a      	strh	r2, [r3, #0]
 800d91e:	e023      	b.n	800d968 <PCD_EP_ISR_Handler+0x2f8>
 800d920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d108      	bne.n	800d93a <PCD_EP_ISR_Handler+0x2ca>
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	881b      	ldrh	r3, [r3, #0]
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	4a1f      	ldr	r2, [pc, #124]	@ (800d9ac <PCD_EP_ISR_Handler+0x33c>)
 800d930:	4313      	orrs	r3, r2
 800d932:	b29a      	uxth	r2, r3
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	801a      	strh	r2, [r3, #0]
 800d938:	e016      	b.n	800d968 <PCD_EP_ISR_Handler+0x2f8>
 800d93a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d93c:	691b      	ldr	r3, [r3, #16]
 800d93e:	085b      	lsrs	r3, r3, #1
 800d940:	647b      	str	r3, [r7, #68]	@ 0x44
 800d942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	2201      	movs	r2, #1
 800d948:	4013      	ands	r3, r2
 800d94a:	d002      	beq.n	800d952 <PCD_EP_ISR_Handler+0x2e2>
 800d94c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d94e:	3301      	adds	r3, #1
 800d950:	647b      	str	r3, [r7, #68]	@ 0x44
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	881b      	ldrh	r3, [r3, #0]
 800d956:	b29a      	uxth	r2, r3
 800d958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	029b      	lsls	r3, r3, #10
 800d95e:	b29b      	uxth	r3, r3
 800d960:	4313      	orrs	r3, r2
 800d962:	b29a      	uxth	r2, r3
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	881b      	ldrh	r3, [r3, #0]
 800d96e:	b29a      	uxth	r2, r3
 800d970:	2012      	movs	r0, #18
 800d972:	183b      	adds	r3, r7, r0
 800d974:	4911      	ldr	r1, [pc, #68]	@ (800d9bc <PCD_EP_ISR_Handler+0x34c>)
 800d976:	400a      	ands	r2, r1
 800d978:	801a      	strh	r2, [r3, #0]
 800d97a:	183b      	adds	r3, r7, r0
 800d97c:	183a      	adds	r2, r7, r0
 800d97e:	8812      	ldrh	r2, [r2, #0]
 800d980:	2180      	movs	r1, #128	@ 0x80
 800d982:	0149      	lsls	r1, r1, #5
 800d984:	404a      	eors	r2, r1
 800d986:	801a      	strh	r2, [r3, #0]
 800d988:	183b      	adds	r3, r7, r0
 800d98a:	183a      	adds	r2, r7, r0
 800d98c:	8812      	ldrh	r2, [r2, #0]
 800d98e:	2180      	movs	r1, #128	@ 0x80
 800d990:	0189      	lsls	r1, r1, #6
 800d992:	404a      	eors	r2, r1
 800d994:	801a      	strh	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	183a      	adds	r2, r7, r0
 800d99c:	8812      	ldrh	r2, [r2, #0]
 800d99e:	4908      	ldr	r1, [pc, #32]	@ (800d9c0 <PCD_EP_ISR_Handler+0x350>)
 800d9a0:	430a      	orrs	r2, r1
 800d9a2:	b292      	uxth	r2, r2
 800d9a4:	801a      	strh	r2, [r3, #0]
 800d9a6:	e255      	b.n	800de54 <PCD_EP_ISR_Handler+0x7e4>
 800d9a8:	ffff8f0f 	.word	0xffff8f0f
 800d9ac:	ffff8000 	.word	0xffff8000
 800d9b0:	00000402 	.word	0x00000402
 800d9b4:	00000406 	.word	0x00000406
 800d9b8:	00000f8f 	.word	0x00000f8f
 800d9bc:	ffffbf8f 	.word	0xffffbf8f
 800d9c0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	001a      	movs	r2, r3
 800d9ca:	204d      	movs	r0, #77	@ 0x4d
 800d9cc:	183b      	adds	r3, r7, r0
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	18d2      	adds	r2, r2, r3
 800d9d4:	214a      	movs	r1, #74	@ 0x4a
 800d9d6:	187b      	adds	r3, r7, r1
 800d9d8:	8812      	ldrh	r2, [r2, #0]
 800d9da:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d9dc:	187b      	adds	r3, r7, r1
 800d9de:	2200      	movs	r2, #0
 800d9e0:	5e9b      	ldrsh	r3, [r3, r2]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	db00      	blt.n	800d9e8 <PCD_EP_ISR_Handler+0x378>
 800d9e6:	e0fa      	b.n	800dbde <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	001a      	movs	r2, r3
 800d9ee:	183b      	adds	r3, r7, r0
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	18d3      	adds	r3, r2, r3
 800d9f6:	881b      	ldrh	r3, [r3, #0]
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	2448      	movs	r4, #72	@ 0x48
 800d9fc:	193b      	adds	r3, r7, r4
 800d9fe:	49d1      	ldr	r1, [pc, #836]	@ (800dd44 <PCD_EP_ISR_Handler+0x6d4>)
 800da00:	400a      	ands	r2, r1
 800da02:	801a      	strh	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	001a      	movs	r2, r3
 800da0a:	183b      	adds	r3, r7, r0
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	18d3      	adds	r3, r2, r3
 800da12:	193a      	adds	r2, r7, r4
 800da14:	8812      	ldrh	r2, [r2, #0]
 800da16:	2180      	movs	r1, #128	@ 0x80
 800da18:	430a      	orrs	r2, r1
 800da1a:	b292      	uxth	r2, r2
 800da1c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800da1e:	183b      	adds	r3, r7, r0
 800da20:	781a      	ldrb	r2, [r3, #0]
 800da22:	0013      	movs	r3, r2
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	189b      	adds	r3, r3, r2
 800da28:	00db      	lsls	r3, r3, #3
 800da2a:	3369      	adds	r3, #105	@ 0x69
 800da2c:	33ff      	adds	r3, #255	@ 0xff
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	18d3      	adds	r3, r2, r3
 800da32:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800da34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da36:	7b1b      	ldrb	r3, [r3, #12]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d125      	bne.n	800da88 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2250      	movs	r2, #80	@ 0x50
 800da42:	5a9b      	ldrh	r3, [r3, r2]
 800da44:	b29b      	uxth	r3, r3
 800da46:	001a      	movs	r2, r3
 800da48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	18d2      	adds	r2, r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	18d3      	adds	r3, r2, r3
 800da56:	4abc      	ldr	r2, [pc, #752]	@ (800dd48 <PCD_EP_ISR_Handler+0x6d8>)
 800da58:	4694      	mov	ip, r2
 800da5a:	4463      	add	r3, ip
 800da5c:	881a      	ldrh	r2, [r3, #0]
 800da5e:	2450      	movs	r4, #80	@ 0x50
 800da60:	193b      	adds	r3, r7, r4
 800da62:	0592      	lsls	r2, r2, #22
 800da64:	0d92      	lsrs	r2, r2, #22
 800da66:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800da68:	193b      	adds	r3, r7, r4
 800da6a:	881b      	ldrh	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d100      	bne.n	800da72 <PCD_EP_ISR_Handler+0x402>
 800da70:	e08d      	b.n	800db8e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da78:	6959      	ldr	r1, [r3, #20]
 800da7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da7c:	88da      	ldrh	r2, [r3, #6]
 800da7e:	193b      	adds	r3, r7, r4
 800da80:	881b      	ldrh	r3, [r3, #0]
 800da82:	f005 ffaa 	bl	80139da <USB_ReadPMA>
 800da86:	e082      	b.n	800db8e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800da88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da8a:	78db      	ldrb	r3, [r3, #3]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d10c      	bne.n	800daaa <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800da90:	2350      	movs	r3, #80	@ 0x50
 800da92:	18fc      	adds	r4, r7, r3
 800da94:	234a      	movs	r3, #74	@ 0x4a
 800da96:	18fb      	adds	r3, r7, r3
 800da98:	881a      	ldrh	r2, [r3, #0]
 800da9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	0018      	movs	r0, r3
 800daa0:	f000 f9ec 	bl	800de7c <HAL_PCD_EP_DB_Receive>
 800daa4:	0003      	movs	r3, r0
 800daa6:	8023      	strh	r3, [r4, #0]
 800daa8:	e071      	b.n	800db8e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	001a      	movs	r2, r3
 800dab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	18d3      	adds	r3, r2, r3
 800dab8:	881b      	ldrh	r3, [r3, #0]
 800daba:	b29a      	uxth	r2, r3
 800dabc:	2052      	movs	r0, #82	@ 0x52
 800dabe:	183b      	adds	r3, r7, r0
 800dac0:	49a2      	ldr	r1, [pc, #648]	@ (800dd4c <PCD_EP_ISR_Handler+0x6dc>)
 800dac2:	400a      	ands	r2, r1
 800dac4:	801a      	strh	r2, [r3, #0]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	001a      	movs	r2, r3
 800dacc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	18d3      	adds	r3, r2, r3
 800dad4:	183a      	adds	r2, r7, r0
 800dad6:	8812      	ldrh	r2, [r2, #0]
 800dad8:	499d      	ldr	r1, [pc, #628]	@ (800dd50 <PCD_EP_ISR_Handler+0x6e0>)
 800dada:	430a      	orrs	r2, r1
 800dadc:	b292      	uxth	r2, r2
 800dade:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	001a      	movs	r2, r3
 800dae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	18d3      	adds	r3, r2, r3
 800daee:	881b      	ldrh	r3, [r3, #0]
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	001a      	movs	r2, r3
 800daf4:	2380      	movs	r3, #128	@ 0x80
 800daf6:	01db      	lsls	r3, r3, #7
 800daf8:	4013      	ands	r3, r2
 800dafa:	d024      	beq.n	800db46 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2250      	movs	r2, #80	@ 0x50
 800db02:	5a9b      	ldrh	r3, [r3, r2]
 800db04:	b29b      	uxth	r3, r3
 800db06:	001a      	movs	r2, r3
 800db08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	00db      	lsls	r3, r3, #3
 800db0e:	18d2      	adds	r2, r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	18d3      	adds	r3, r2, r3
 800db16:	4a8f      	ldr	r2, [pc, #572]	@ (800dd54 <PCD_EP_ISR_Handler+0x6e4>)
 800db18:	4694      	mov	ip, r2
 800db1a:	4463      	add	r3, ip
 800db1c:	881a      	ldrh	r2, [r3, #0]
 800db1e:	2450      	movs	r4, #80	@ 0x50
 800db20:	193b      	adds	r3, r7, r4
 800db22:	0592      	lsls	r2, r2, #22
 800db24:	0d92      	lsrs	r2, r2, #22
 800db26:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800db28:	193b      	adds	r3, r7, r4
 800db2a:	881b      	ldrh	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d02e      	beq.n	800db8e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6818      	ldr	r0, [r3, #0]
 800db34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db36:	6959      	ldr	r1, [r3, #20]
 800db38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db3a:	891a      	ldrh	r2, [r3, #8]
 800db3c:	193b      	adds	r3, r7, r4
 800db3e:	881b      	ldrh	r3, [r3, #0]
 800db40:	f005 ff4b 	bl	80139da <USB_ReadPMA>
 800db44:	e023      	b.n	800db8e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2250      	movs	r2, #80	@ 0x50
 800db4c:	5a9b      	ldrh	r3, [r3, r2]
 800db4e:	b29b      	uxth	r3, r3
 800db50:	001a      	movs	r2, r3
 800db52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	18d2      	adds	r2, r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	18d3      	adds	r3, r2, r3
 800db60:	4a79      	ldr	r2, [pc, #484]	@ (800dd48 <PCD_EP_ISR_Handler+0x6d8>)
 800db62:	4694      	mov	ip, r2
 800db64:	4463      	add	r3, ip
 800db66:	881a      	ldrh	r2, [r3, #0]
 800db68:	2450      	movs	r4, #80	@ 0x50
 800db6a:	193b      	adds	r3, r7, r4
 800db6c:	0592      	lsls	r2, r2, #22
 800db6e:	0d92      	lsrs	r2, r2, #22
 800db70:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800db72:	193b      	adds	r3, r7, r4
 800db74:	881b      	ldrh	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d009      	beq.n	800db8e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6818      	ldr	r0, [r3, #0]
 800db7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db80:	6959      	ldr	r1, [r3, #20]
 800db82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db84:	895a      	ldrh	r2, [r3, #10]
 800db86:	193b      	adds	r3, r7, r4
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	f005 ff26 	bl	80139da <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800db8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db90:	69da      	ldr	r2, [r3, #28]
 800db92:	2150      	movs	r1, #80	@ 0x50
 800db94:	187b      	adds	r3, r7, r1
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	18d2      	adds	r2, r2, r3
 800db9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800db9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dba0:	695a      	ldr	r2, [r3, #20]
 800dba2:	187b      	adds	r3, r7, r1
 800dba4:	881b      	ldrh	r3, [r3, #0]
 800dba6:	18d2      	adds	r2, r2, r3
 800dba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbaa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800dbac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbae:	699b      	ldr	r3, [r3, #24]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d005      	beq.n	800dbc0 <PCD_EP_ISR_Handler+0x550>
 800dbb4:	187b      	adds	r3, r7, r1
 800dbb6:	881a      	ldrh	r2, [r3, #0]
 800dbb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d207      	bcs.n	800dbd0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800dbc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbc2:	781a      	ldrb	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	0011      	movs	r1, r2
 800dbc8:	0018      	movs	r0, r3
 800dbca:	f007 fe52 	bl	8015872 <HAL_PCD_DataOutStageCallback>
 800dbce:	e006      	b.n	800dbde <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dbd6:	0011      	movs	r1, r2
 800dbd8:	0018      	movs	r0, r3
 800dbda:	f004 fc43 	bl	8012464 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800dbde:	244a      	movs	r4, #74	@ 0x4a
 800dbe0:	193b      	adds	r3, r7, r4
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	2280      	movs	r2, #128	@ 0x80
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	d100      	bne.n	800dbec <PCD_EP_ISR_Handler+0x57c>
 800dbea:	e133      	b.n	800de54 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800dbec:	204d      	movs	r0, #77	@ 0x4d
 800dbee:	183b      	adds	r3, r7, r0
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	1c5a      	adds	r2, r3, #1
 800dbf4:	0013      	movs	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	189b      	adds	r3, r3, r2
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	18d3      	adds	r3, r2, r3
 800dc00:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	001a      	movs	r2, r3
 800dc08:	183b      	adds	r3, r7, r0
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	18d3      	adds	r3, r2, r3
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	2542      	movs	r5, #66	@ 0x42
 800dc16:	197b      	adds	r3, r7, r5
 800dc18:	494f      	ldr	r1, [pc, #316]	@ (800dd58 <PCD_EP_ISR_Handler+0x6e8>)
 800dc1a:	400a      	ands	r2, r1
 800dc1c:	801a      	strh	r2, [r3, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	001a      	movs	r2, r3
 800dc24:	183b      	adds	r3, r7, r0
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	18d3      	adds	r3, r2, r3
 800dc2c:	197a      	adds	r2, r7, r5
 800dc2e:	8812      	ldrh	r2, [r2, #0]
 800dc30:	494a      	ldr	r1, [pc, #296]	@ (800dd5c <PCD_EP_ISR_Handler+0x6ec>)
 800dc32:	430a      	orrs	r2, r1
 800dc34:	b292      	uxth	r2, r2
 800dc36:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800dc38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc3a:	78db      	ldrb	r3, [r3, #3]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d000      	beq.n	800dc42 <PCD_EP_ISR_Handler+0x5d2>
 800dc40:	e0af      	b.n	800dda2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800dc42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc44:	2200      	movs	r2, #0
 800dc46:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800dc48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc4a:	7b1b      	ldrb	r3, [r3, #12]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d100      	bne.n	800dc52 <PCD_EP_ISR_Handler+0x5e2>
 800dc50:	e09f      	b.n	800dd92 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800dc52:	193b      	adds	r3, r7, r4
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	2240      	movs	r2, #64	@ 0x40
 800dc58:	4013      	ands	r3, r2
 800dc5a:	d046      	beq.n	800dcea <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dc5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc5e:	785b      	ldrb	r3, [r3, #1]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d125      	bne.n	800dcb0 <PCD_EP_ISR_Handler+0x640>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2250      	movs	r2, #80	@ 0x50
 800dc70:	5a9b      	ldrh	r3, [r3, r2]
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	001a      	movs	r2, r3
 800dc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc78:	189b      	adds	r3, r3, r2
 800dc7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	00da      	lsls	r2, r3, #3
 800dc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc84:	18d3      	adds	r3, r2, r3
 800dc86:	4a33      	ldr	r2, [pc, #204]	@ (800dd54 <PCD_EP_ISR_Handler+0x6e4>)
 800dc88:	4694      	mov	ip, r2
 800dc8a:	4463      	add	r3, ip
 800dc8c:	623b      	str	r3, [r7, #32]
 800dc8e:	6a3b      	ldr	r3, [r7, #32]
 800dc90:	881b      	ldrh	r3, [r3, #0]
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	059b      	lsls	r3, r3, #22
 800dc96:	0d9b      	lsrs	r3, r3, #22
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	6a3b      	ldr	r3, [r7, #32]
 800dc9c:	801a      	strh	r2, [r3, #0]
 800dc9e:	6a3b      	ldr	r3, [r7, #32]
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	4a2d      	ldr	r2, [pc, #180]	@ (800dd5c <PCD_EP_ISR_Handler+0x6ec>)
 800dca6:	4313      	orrs	r3, r2
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	6a3b      	ldr	r3, [r7, #32]
 800dcac:	801a      	strh	r2, [r3, #0]
 800dcae:	e070      	b.n	800dd92 <PCD_EP_ISR_Handler+0x722>
 800dcb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcb2:	785b      	ldrb	r3, [r3, #1]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d16c      	bne.n	800dd92 <PCD_EP_ISR_Handler+0x722>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2250      	movs	r2, #80	@ 0x50
 800dcc4:	5a9b      	ldrh	r3, [r3, r2]
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	001a      	movs	r2, r3
 800dcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dccc:	189b      	adds	r3, r3, r2
 800dcce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dcd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	00da      	lsls	r2, r3, #3
 800dcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd8:	18d3      	adds	r3, r2, r3
 800dcda:	4a1e      	ldr	r2, [pc, #120]	@ (800dd54 <PCD_EP_ISR_Handler+0x6e4>)
 800dcdc:	4694      	mov	ip, r2
 800dcde:	4463      	add	r3, ip
 800dce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce4:	2200      	movs	r2, #0
 800dce6:	801a      	strh	r2, [r3, #0]
 800dce8:	e053      	b.n	800dd92 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcf2:	785b      	ldrb	r3, [r3, #1]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d133      	bne.n	800dd60 <PCD_EP_ISR_Handler+0x6f0>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2250      	movs	r2, #80	@ 0x50
 800dd04:	5a9b      	ldrh	r3, [r3, r2]
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	001a      	movs	r2, r3
 800dd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd0c:	189b      	adds	r3, r3, r2
 800dd0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	00da      	lsls	r2, r3, #3
 800dd16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd18:	18d3      	adds	r3, r2, r3
 800dd1a:	4a0b      	ldr	r2, [pc, #44]	@ (800dd48 <PCD_EP_ISR_Handler+0x6d8>)
 800dd1c:	4694      	mov	ip, r2
 800dd1e:	4463      	add	r3, ip
 800dd20:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	059b      	lsls	r3, r3, #22
 800dd2a:	0d9b      	lsrs	r3, r3, #22
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd30:	801a      	strh	r2, [r3, #0]
 800dd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd34:	881b      	ldrh	r3, [r3, #0]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	4a08      	ldr	r2, [pc, #32]	@ (800dd5c <PCD_EP_ISR_Handler+0x6ec>)
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd40:	801a      	strh	r2, [r3, #0]
 800dd42:	e026      	b.n	800dd92 <PCD_EP_ISR_Handler+0x722>
 800dd44:	00000f8f 	.word	0x00000f8f
 800dd48:	00000406 	.word	0x00000406
 800dd4c:	ffff8f8f 	.word	0xffff8f8f
 800dd50:	ffff80c0 	.word	0xffff80c0
 800dd54:	00000402 	.word	0x00000402
 800dd58:	ffff8f0f 	.word	0xffff8f0f
 800dd5c:	ffff8000 	.word	0xffff8000
 800dd60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd62:	785b      	ldrb	r3, [r3, #1]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d114      	bne.n	800dd92 <PCD_EP_ISR_Handler+0x722>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2250      	movs	r2, #80	@ 0x50
 800dd6e:	5a9b      	ldrh	r3, [r3, r2]
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	001a      	movs	r2, r3
 800dd74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd76:	189b      	adds	r3, r3, r2
 800dd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	00da      	lsls	r2, r3, #3
 800dd80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd82:	18d3      	adds	r3, r2, r3
 800dd84:	4a3b      	ldr	r2, [pc, #236]	@ (800de74 <PCD_EP_ISR_Handler+0x804>)
 800dd86:	4694      	mov	ip, r2
 800dd88:	4463      	add	r3, ip
 800dd8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd8e:	2200      	movs	r2, #0
 800dd90:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dd92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd94:	781a      	ldrb	r2, [r3, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	0011      	movs	r1, r2
 800dd9a:	0018      	movs	r0, r3
 800dd9c:	f007 fd8a 	bl	80158b4 <HAL_PCD_DataInStageCallback>
 800dda0:	e058      	b.n	800de54 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800dda2:	234a      	movs	r3, #74	@ 0x4a
 800dda4:	18fb      	adds	r3, r7, r3
 800dda6:	881a      	ldrh	r2, [r3, #0]
 800dda8:	2380      	movs	r3, #128	@ 0x80
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	4013      	ands	r3, r2
 800ddae:	d149      	bne.n	800de44 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2250      	movs	r2, #80	@ 0x50
 800ddb6:	5a9b      	ldrh	r3, [r3, r2]
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	001a      	movs	r2, r3
 800ddbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	00db      	lsls	r3, r3, #3
 800ddc2:	18d2      	adds	r2, r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	18d3      	adds	r3, r2, r3
 800ddca:	4a2b      	ldr	r2, [pc, #172]	@ (800de78 <PCD_EP_ISR_Handler+0x808>)
 800ddcc:	4694      	mov	ip, r2
 800ddce:	4463      	add	r3, ip
 800ddd0:	881a      	ldrh	r2, [r3, #0]
 800ddd2:	2140      	movs	r1, #64	@ 0x40
 800ddd4:	187b      	adds	r3, r7, r1
 800ddd6:	0592      	lsls	r2, r2, #22
 800ddd8:	0d92      	lsrs	r2, r2, #22
 800ddda:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800dddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddde:	699a      	ldr	r2, [r3, #24]
 800dde0:	187b      	adds	r3, r7, r1
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d907      	bls.n	800ddf8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800dde8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddea:	699a      	ldr	r2, [r3, #24]
 800ddec:	187b      	adds	r3, r7, r1
 800ddee:	881b      	ldrh	r3, [r3, #0]
 800ddf0:	1ad2      	subs	r2, r2, r3
 800ddf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddf4:	619a      	str	r2, [r3, #24]
 800ddf6:	e002      	b.n	800ddfe <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800ddf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ddfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de00:	699b      	ldr	r3, [r3, #24]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d107      	bne.n	800de16 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800de06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de08:	781a      	ldrb	r2, [r3, #0]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	0011      	movs	r1, r2
 800de0e:	0018      	movs	r0, r3
 800de10:	f007 fd50 	bl	80158b4 <HAL_PCD_DataInStageCallback>
 800de14:	e01e      	b.n	800de54 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800de16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de18:	695a      	ldr	r2, [r3, #20]
 800de1a:	2140      	movs	r1, #64	@ 0x40
 800de1c:	187b      	adds	r3, r7, r1
 800de1e:	881b      	ldrh	r3, [r3, #0]
 800de20:	18d2      	adds	r2, r2, r3
 800de22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de24:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800de26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de28:	69da      	ldr	r2, [r3, #28]
 800de2a:	187b      	adds	r3, r7, r1
 800de2c:	881b      	ldrh	r3, [r3, #0]
 800de2e:	18d2      	adds	r2, r2, r3
 800de30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de32:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800de3a:	0011      	movs	r1, r2
 800de3c:	0018      	movs	r0, r3
 800de3e:	f004 fb11 	bl	8012464 <USB_EPStartXfer>
 800de42:	e007      	b.n	800de54 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800de44:	234a      	movs	r3, #74	@ 0x4a
 800de46:	18fb      	adds	r3, r7, r3
 800de48:	881a      	ldrh	r2, [r3, #0]
 800de4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	0018      	movs	r0, r3
 800de50:	f000 f930 	bl	800e0b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2244      	movs	r2, #68	@ 0x44
 800de5a:	5a9b      	ldrh	r3, [r3, r2]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	b21b      	sxth	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	da01      	bge.n	800de68 <PCD_EP_ISR_Handler+0x7f8>
 800de64:	f7ff fc0a 	bl	800d67c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	0018      	movs	r0, r3
 800de6c:	46bd      	mov	sp, r7
 800de6e:	b016      	add	sp, #88	@ 0x58
 800de70:	bdb0      	pop	{r4, r5, r7, pc}
 800de72:	46c0      	nop			@ (mov r8, r8)
 800de74:	00000406 	.word	0x00000406
 800de78:	00000402 	.word	0x00000402

0800de7c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800de7c:	b590      	push	{r4, r7, lr}
 800de7e:	b089      	sub	sp, #36	@ 0x24
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	1dbb      	adds	r3, r7, #6
 800de88:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800de8a:	1dbb      	adds	r3, r7, #6
 800de8c:	881a      	ldrh	r2, [r3, #0]
 800de8e:	2380      	movs	r3, #128	@ 0x80
 800de90:	01db      	lsls	r3, r3, #7
 800de92:	4013      	ands	r3, r2
 800de94:	d100      	bne.n	800de98 <HAL_PCD_EP_DB_Receive+0x1c>
 800de96:	e07d      	b.n	800df94 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2250      	movs	r2, #80	@ 0x50
 800de9e:	5a9b      	ldrh	r3, [r3, r2]
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	001a      	movs	r2, r3
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	00db      	lsls	r3, r3, #3
 800deaa:	18d2      	adds	r2, r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	18d3      	adds	r3, r2, r3
 800deb2:	4a7a      	ldr	r2, [pc, #488]	@ (800e09c <HAL_PCD_EP_DB_Receive+0x220>)
 800deb4:	4694      	mov	ip, r2
 800deb6:	4463      	add	r3, ip
 800deb8:	881a      	ldrh	r2, [r3, #0]
 800deba:	211a      	movs	r1, #26
 800debc:	187b      	adds	r3, r7, r1
 800debe:	0592      	lsls	r2, r2, #22
 800dec0:	0d92      	lsrs	r2, r2, #22
 800dec2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	699a      	ldr	r2, [r3, #24]
 800dec8:	187b      	adds	r3, r7, r1
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	429a      	cmp	r2, r3
 800dece:	d307      	bcc.n	800dee0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	699a      	ldr	r2, [r3, #24]
 800ded4:	187b      	adds	r3, r7, r1
 800ded6:	881b      	ldrh	r3, [r3, #0]
 800ded8:	1ad2      	subs	r2, r2, r3
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	619a      	str	r2, [r3, #24]
 800dede:	e002      	b.n	800dee6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2200      	movs	r2, #0
 800dee4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	699b      	ldr	r3, [r3, #24]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d121      	bne.n	800df32 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	001a      	movs	r2, r3
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	18d3      	adds	r3, r2, r3
 800defc:	881b      	ldrh	r3, [r3, #0]
 800defe:	b29a      	uxth	r2, r3
 800df00:	2018      	movs	r0, #24
 800df02:	183b      	adds	r3, r7, r0
 800df04:	4966      	ldr	r1, [pc, #408]	@ (800e0a0 <HAL_PCD_EP_DB_Receive+0x224>)
 800df06:	400a      	ands	r2, r1
 800df08:	801a      	strh	r2, [r3, #0]
 800df0a:	183b      	adds	r3, r7, r0
 800df0c:	183a      	adds	r2, r7, r0
 800df0e:	8812      	ldrh	r2, [r2, #0]
 800df10:	2180      	movs	r1, #128	@ 0x80
 800df12:	0189      	lsls	r1, r1, #6
 800df14:	404a      	eors	r2, r1
 800df16:	801a      	strh	r2, [r3, #0]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	001a      	movs	r2, r3
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	18d3      	adds	r3, r2, r3
 800df26:	183a      	adds	r2, r7, r0
 800df28:	8812      	ldrh	r2, [r2, #0]
 800df2a:	495e      	ldr	r1, [pc, #376]	@ (800e0a4 <HAL_PCD_EP_DB_Receive+0x228>)
 800df2c:	430a      	orrs	r2, r1
 800df2e:	b292      	uxth	r2, r2
 800df30:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800df32:	1dbb      	adds	r3, r7, #6
 800df34:	881b      	ldrh	r3, [r3, #0]
 800df36:	2240      	movs	r2, #64	@ 0x40
 800df38:	4013      	ands	r3, r2
 800df3a:	d01a      	beq.n	800df72 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	001a      	movs	r2, r3
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	18d3      	adds	r3, r2, r3
 800df4a:	881b      	ldrh	r3, [r3, #0]
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	2016      	movs	r0, #22
 800df50:	183b      	adds	r3, r7, r0
 800df52:	4955      	ldr	r1, [pc, #340]	@ (800e0a8 <HAL_PCD_EP_DB_Receive+0x22c>)
 800df54:	400a      	ands	r2, r1
 800df56:	801a      	strh	r2, [r3, #0]
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	001a      	movs	r2, r3
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	18d3      	adds	r3, r2, r3
 800df66:	183a      	adds	r2, r7, r0
 800df68:	8812      	ldrh	r2, [r2, #0]
 800df6a:	4950      	ldr	r1, [pc, #320]	@ (800e0ac <HAL_PCD_EP_DB_Receive+0x230>)
 800df6c:	430a      	orrs	r2, r1
 800df6e:	b292      	uxth	r2, r2
 800df70:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800df72:	241a      	movs	r4, #26
 800df74:	193b      	adds	r3, r7, r4
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d100      	bne.n	800df7e <HAL_PCD_EP_DB_Receive+0x102>
 800df7c:	e086      	b.n	800e08c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6818      	ldr	r0, [r3, #0]
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	6959      	ldr	r1, [r3, #20]
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	891a      	ldrh	r2, [r3, #8]
 800df8a:	193b      	adds	r3, r7, r4
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	f005 fd24 	bl	80139da <USB_ReadPMA>
 800df92:	e07b      	b.n	800e08c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2250      	movs	r2, #80	@ 0x50
 800df9a:	5a9b      	ldrh	r3, [r3, r2]
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	001a      	movs	r2, r3
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	00db      	lsls	r3, r3, #3
 800dfa6:	18d2      	adds	r2, r2, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	18d3      	adds	r3, r2, r3
 800dfae:	4a40      	ldr	r2, [pc, #256]	@ (800e0b0 <HAL_PCD_EP_DB_Receive+0x234>)
 800dfb0:	4694      	mov	ip, r2
 800dfb2:	4463      	add	r3, ip
 800dfb4:	881a      	ldrh	r2, [r3, #0]
 800dfb6:	211a      	movs	r1, #26
 800dfb8:	187b      	adds	r3, r7, r1
 800dfba:	0592      	lsls	r2, r2, #22
 800dfbc:	0d92      	lsrs	r2, r2, #22
 800dfbe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	699a      	ldr	r2, [r3, #24]
 800dfc4:	187b      	adds	r3, r7, r1
 800dfc6:	881b      	ldrh	r3, [r3, #0]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d307      	bcc.n	800dfdc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	699a      	ldr	r2, [r3, #24]
 800dfd0:	187b      	adds	r3, r7, r1
 800dfd2:	881b      	ldrh	r3, [r3, #0]
 800dfd4:	1ad2      	subs	r2, r2, r3
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	619a      	str	r2, [r3, #24]
 800dfda:	e002      	b.n	800dfe2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	699b      	ldr	r3, [r3, #24]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d121      	bne.n	800e02e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	001a      	movs	r2, r3
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	18d3      	adds	r3, r2, r3
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	201e      	movs	r0, #30
 800dffe:	183b      	adds	r3, r7, r0
 800e000:	4927      	ldr	r1, [pc, #156]	@ (800e0a0 <HAL_PCD_EP_DB_Receive+0x224>)
 800e002:	400a      	ands	r2, r1
 800e004:	801a      	strh	r2, [r3, #0]
 800e006:	183b      	adds	r3, r7, r0
 800e008:	183a      	adds	r2, r7, r0
 800e00a:	8812      	ldrh	r2, [r2, #0]
 800e00c:	2180      	movs	r1, #128	@ 0x80
 800e00e:	0189      	lsls	r1, r1, #6
 800e010:	404a      	eors	r2, r1
 800e012:	801a      	strh	r2, [r3, #0]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	001a      	movs	r2, r3
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	18d3      	adds	r3, r2, r3
 800e022:	183a      	adds	r2, r7, r0
 800e024:	8812      	ldrh	r2, [r2, #0]
 800e026:	491f      	ldr	r1, [pc, #124]	@ (800e0a4 <HAL_PCD_EP_DB_Receive+0x228>)
 800e028:	430a      	orrs	r2, r1
 800e02a:	b292      	uxth	r2, r2
 800e02c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800e02e:	1dbb      	adds	r3, r7, #6
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	2240      	movs	r2, #64	@ 0x40
 800e034:	4013      	ands	r3, r2
 800e036:	d11a      	bne.n	800e06e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	001a      	movs	r2, r3
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	18d3      	adds	r3, r2, r3
 800e046:	881b      	ldrh	r3, [r3, #0]
 800e048:	b29a      	uxth	r2, r3
 800e04a:	201c      	movs	r0, #28
 800e04c:	183b      	adds	r3, r7, r0
 800e04e:	4916      	ldr	r1, [pc, #88]	@ (800e0a8 <HAL_PCD_EP_DB_Receive+0x22c>)
 800e050:	400a      	ands	r2, r1
 800e052:	801a      	strh	r2, [r3, #0]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	001a      	movs	r2, r3
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	18d3      	adds	r3, r2, r3
 800e062:	183a      	adds	r2, r7, r0
 800e064:	8812      	ldrh	r2, [r2, #0]
 800e066:	4911      	ldr	r1, [pc, #68]	@ (800e0ac <HAL_PCD_EP_DB_Receive+0x230>)
 800e068:	430a      	orrs	r2, r1
 800e06a:	b292      	uxth	r2, r2
 800e06c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800e06e:	241a      	movs	r4, #26
 800e070:	193b      	adds	r3, r7, r4
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d009      	beq.n	800e08c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6818      	ldr	r0, [r3, #0]
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	6959      	ldr	r1, [r3, #20]
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	895a      	ldrh	r2, [r3, #10]
 800e084:	193b      	adds	r3, r7, r4
 800e086:	881b      	ldrh	r3, [r3, #0]
 800e088:	f005 fca7 	bl	80139da <USB_ReadPMA>
    }
  }

  return count;
 800e08c:	231a      	movs	r3, #26
 800e08e:	18fb      	adds	r3, r7, r3
 800e090:	881b      	ldrh	r3, [r3, #0]
}
 800e092:	0018      	movs	r0, r3
 800e094:	46bd      	mov	sp, r7
 800e096:	b009      	add	sp, #36	@ 0x24
 800e098:	bd90      	pop	{r4, r7, pc}
 800e09a:	46c0      	nop			@ (mov r8, r8)
 800e09c:	00000402 	.word	0x00000402
 800e0a0:	ffffbf8f 	.word	0xffffbf8f
 800e0a4:	ffff8080 	.word	0xffff8080
 800e0a8:	ffff8f8f 	.word	0xffff8f8f
 800e0ac:	ffff80c0 	.word	0xffff80c0
 800e0b0:	00000406 	.word	0x00000406

0800e0b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b0a4      	sub	sp, #144	@ 0x90
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	1dbb      	adds	r3, r7, #6
 800e0c0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e0c2:	1dbb      	adds	r3, r7, #6
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	2240      	movs	r2, #64	@ 0x40
 800e0c8:	4013      	ands	r3, r2
 800e0ca:	d100      	bne.n	800e0ce <HAL_PCD_EP_DB_Transmit+0x1a>
 800e0cc:	e1e4      	b.n	800e498 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2250      	movs	r2, #80	@ 0x50
 800e0d4:	5a9b      	ldrh	r3, [r3, r2]
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	001a      	movs	r2, r3
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	00db      	lsls	r3, r3, #3
 800e0e0:	18d2      	adds	r2, r2, r3
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	18d3      	adds	r3, r2, r3
 800e0e8:	4ad0      	ldr	r2, [pc, #832]	@ (800e42c <HAL_PCD_EP_DB_Transmit+0x378>)
 800e0ea:	4694      	mov	ip, r2
 800e0ec:	4463      	add	r3, ip
 800e0ee:	881a      	ldrh	r2, [r3, #0]
 800e0f0:	2186      	movs	r1, #134	@ 0x86
 800e0f2:	187b      	adds	r3, r7, r1
 800e0f4:	0592      	lsls	r2, r2, #22
 800e0f6:	0d92      	lsrs	r2, r2, #22
 800e0f8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	699a      	ldr	r2, [r3, #24]
 800e0fe:	187b      	adds	r3, r7, r1
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	429a      	cmp	r2, r3
 800e104:	d907      	bls.n	800e116 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	699a      	ldr	r2, [r3, #24]
 800e10a:	187b      	adds	r3, r7, r1
 800e10c:	881b      	ldrh	r3, [r3, #0]
 800e10e:	1ad2      	subs	r2, r2, r3
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	619a      	str	r2, [r3, #24]
 800e114:	e002      	b.n	800e11c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2200      	movs	r2, #0
 800e11a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d000      	beq.n	800e126 <HAL_PCD_EP_DB_Transmit+0x72>
 800e124:	e0b5      	b.n	800e292 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	785b      	ldrb	r3, [r3, #1]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d125      	bne.n	800e17a <HAL_PCD_EP_DB_Transmit+0xc6>
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2250      	movs	r2, #80	@ 0x50
 800e13a:	5a9b      	ldrh	r3, [r3, r2]
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	001a      	movs	r2, r3
 800e140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e142:	189b      	adds	r3, r3, r2
 800e144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	00da      	lsls	r2, r3, #3
 800e14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e14e:	18d3      	adds	r3, r2, r3
 800e150:	4ab6      	ldr	r2, [pc, #728]	@ (800e42c <HAL_PCD_EP_DB_Transmit+0x378>)
 800e152:	4694      	mov	ip, r2
 800e154:	4463      	add	r3, ip
 800e156:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e15a:	881b      	ldrh	r3, [r3, #0]
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	059b      	lsls	r3, r3, #22
 800e160:	0d9b      	lsrs	r3, r3, #22
 800e162:	b29a      	uxth	r2, r3
 800e164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e166:	801a      	strh	r2, [r3, #0]
 800e168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e16a:	881b      	ldrh	r3, [r3, #0]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	4ab0      	ldr	r2, [pc, #704]	@ (800e430 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e170:	4313      	orrs	r3, r2
 800e172:	b29a      	uxth	r2, r3
 800e174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e176:	801a      	strh	r2, [r3, #0]
 800e178:	e01b      	b.n	800e1b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	785b      	ldrb	r3, [r3, #1]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d117      	bne.n	800e1b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	637b      	str	r3, [r7, #52]	@ 0x34
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2250      	movs	r2, #80	@ 0x50
 800e18e:	5a9b      	ldrh	r3, [r3, r2]
 800e190:	b29b      	uxth	r3, r3
 800e192:	001a      	movs	r2, r3
 800e194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e196:	189b      	adds	r3, r3, r2
 800e198:	637b      	str	r3, [r7, #52]	@ 0x34
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	00da      	lsls	r2, r3, #3
 800e1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1a2:	18d3      	adds	r3, r2, r3
 800e1a4:	4aa1      	ldr	r2, [pc, #644]	@ (800e42c <HAL_PCD_EP_DB_Transmit+0x378>)
 800e1a6:	4694      	mov	ip, r2
 800e1a8:	4463      	add	r3, ip
 800e1aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	785b      	ldrb	r3, [r3, #1]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d125      	bne.n	800e20c <HAL_PCD_EP_DB_Transmit+0x158>
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	61fb      	str	r3, [r7, #28]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2250      	movs	r2, #80	@ 0x50
 800e1cc:	5a9b      	ldrh	r3, [r3, r2]
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	001a      	movs	r2, r3
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	189b      	adds	r3, r3, r2
 800e1d6:	61fb      	str	r3, [r7, #28]
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	00da      	lsls	r2, r3, #3
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	18d3      	adds	r3, r2, r3
 800e1e2:	4a94      	ldr	r2, [pc, #592]	@ (800e434 <HAL_PCD_EP_DB_Transmit+0x380>)
 800e1e4:	4694      	mov	ip, r2
 800e1e6:	4463      	add	r3, ip
 800e1e8:	61bb      	str	r3, [r7, #24]
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	059b      	lsls	r3, r3, #22
 800e1f2:	0d9b      	lsrs	r3, r3, #22
 800e1f4:	b29a      	uxth	r2, r3
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	801a      	strh	r2, [r3, #0]
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	881b      	ldrh	r3, [r3, #0]
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	4a8b      	ldr	r2, [pc, #556]	@ (800e430 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e202:	4313      	orrs	r3, r2
 800e204:	b29a      	uxth	r2, r3
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	801a      	strh	r2, [r3, #0]
 800e20a:	e018      	b.n	800e23e <HAL_PCD_EP_DB_Transmit+0x18a>
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	785b      	ldrb	r3, [r3, #1]
 800e210:	2b01      	cmp	r3, #1
 800e212:	d114      	bne.n	800e23e <HAL_PCD_EP_DB_Transmit+0x18a>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2250      	movs	r2, #80	@ 0x50
 800e21a:	5a9b      	ldrh	r3, [r3, r2]
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	001a      	movs	r2, r3
 800e220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e222:	189b      	adds	r3, r3, r2
 800e224:	627b      	str	r3, [r7, #36]	@ 0x24
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	00da      	lsls	r2, r3, #3
 800e22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22e:	18d3      	adds	r3, r2, r3
 800e230:	4a80      	ldr	r2, [pc, #512]	@ (800e434 <HAL_PCD_EP_DB_Transmit+0x380>)
 800e232:	4694      	mov	ip, r2
 800e234:	4463      	add	r3, ip
 800e236:	623b      	str	r3, [r7, #32]
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	2200      	movs	r2, #0
 800e23c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	781a      	ldrb	r2, [r3, #0]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	0011      	movs	r1, r2
 800e246:	0018      	movs	r0, r3
 800e248:	f007 fb34 	bl	80158b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e24c:	1dbb      	adds	r3, r7, #6
 800e24e:	881a      	ldrh	r2, [r3, #0]
 800e250:	2380      	movs	r3, #128	@ 0x80
 800e252:	01db      	lsls	r3, r3, #7
 800e254:	4013      	ands	r3, r2
 800e256:	d100      	bne.n	800e25a <HAL_PCD_EP_DB_Transmit+0x1a6>
 800e258:	e309      	b.n	800e86e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	001a      	movs	r2, r3
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	18d3      	adds	r3, r2, r3
 800e268:	881b      	ldrh	r3, [r3, #0]
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	2016      	movs	r0, #22
 800e26e:	183b      	adds	r3, r7, r0
 800e270:	4971      	ldr	r1, [pc, #452]	@ (800e438 <HAL_PCD_EP_DB_Transmit+0x384>)
 800e272:	400a      	ands	r2, r1
 800e274:	801a      	strh	r2, [r3, #0]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	001a      	movs	r2, r3
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	18d3      	adds	r3, r2, r3
 800e284:	183a      	adds	r2, r7, r0
 800e286:	8812      	ldrh	r2, [r2, #0]
 800e288:	496c      	ldr	r1, [pc, #432]	@ (800e43c <HAL_PCD_EP_DB_Transmit+0x388>)
 800e28a:	430a      	orrs	r2, r1
 800e28c:	b292      	uxth	r2, r2
 800e28e:	801a      	strh	r2, [r3, #0]
 800e290:	e2ed      	b.n	800e86e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e292:	1dbb      	adds	r3, r7, #6
 800e294:	881a      	ldrh	r2, [r3, #0]
 800e296:	2380      	movs	r3, #128	@ 0x80
 800e298:	01db      	lsls	r3, r3, #7
 800e29a:	4013      	ands	r3, r2
 800e29c:	d01a      	beq.n	800e2d4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	001a      	movs	r2, r3
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	18d3      	adds	r3, r2, r3
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	208a      	movs	r0, #138	@ 0x8a
 800e2b2:	183b      	adds	r3, r7, r0
 800e2b4:	4960      	ldr	r1, [pc, #384]	@ (800e438 <HAL_PCD_EP_DB_Transmit+0x384>)
 800e2b6:	400a      	ands	r2, r1
 800e2b8:	801a      	strh	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	001a      	movs	r2, r3
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	18d3      	adds	r3, r2, r3
 800e2c8:	183a      	adds	r2, r7, r0
 800e2ca:	8812      	ldrh	r2, [r2, #0]
 800e2cc:	495b      	ldr	r1, [pc, #364]	@ (800e43c <HAL_PCD_EP_DB_Transmit+0x388>)
 800e2ce:	430a      	orrs	r2, r1
 800e2d0:	b292      	uxth	r2, r2
 800e2d2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	2224      	movs	r2, #36	@ 0x24
 800e2d8:	5c9b      	ldrb	r3, [r3, r2]
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d000      	beq.n	800e2e0 <HAL_PCD_EP_DB_Transmit+0x22c>
 800e2de:	e2c6      	b.n	800e86e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	695a      	ldr	r2, [r3, #20]
 800e2e4:	2186      	movs	r1, #134	@ 0x86
 800e2e6:	187b      	adds	r3, r7, r1
 800e2e8:	881b      	ldrh	r3, [r3, #0]
 800e2ea:	18d2      	adds	r2, r2, r3
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	69da      	ldr	r2, [r3, #28]
 800e2f4:	187b      	adds	r3, r7, r1
 800e2f6:	881b      	ldrh	r3, [r3, #0]
 800e2f8:	18d2      	adds	r2, r2, r3
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	6a1a      	ldr	r2, [r3, #32]
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	691b      	ldr	r3, [r3, #16]
 800e306:	429a      	cmp	r2, r3
 800e308:	d30c      	bcc.n	800e324 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	691b      	ldr	r3, [r3, #16]
 800e30e:	218c      	movs	r1, #140	@ 0x8c
 800e310:	187a      	adds	r2, r7, r1
 800e312:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	6a1a      	ldr	r2, [r3, #32]
 800e318:	187b      	adds	r3, r7, r1
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	1ad2      	subs	r2, r2, r3
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	621a      	str	r2, [r3, #32]
 800e322:	e01a      	b.n	800e35a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	6a1b      	ldr	r3, [r3, #32]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10a      	bne.n	800e342 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800e32c:	2386      	movs	r3, #134	@ 0x86
 800e32e:	18fb      	adds	r3, r7, r3
 800e330:	881b      	ldrh	r3, [r3, #0]
 800e332:	228c      	movs	r2, #140	@ 0x8c
 800e334:	18ba      	adds	r2, r7, r2
 800e336:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	2224      	movs	r2, #36	@ 0x24
 800e33c:	2100      	movs	r1, #0
 800e33e:	5499      	strb	r1, [r3, r2]
 800e340:	e00b      	b.n	800e35a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	2224      	movs	r2, #36	@ 0x24
 800e346:	2100      	movs	r1, #0
 800e348:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	6a1b      	ldr	r3, [r3, #32]
 800e34e:	228c      	movs	r2, #140	@ 0x8c
 800e350:	18ba      	adds	r2, r7, r2
 800e352:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	2200      	movs	r2, #0
 800e358:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	785b      	ldrb	r3, [r3, #1]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d000      	beq.n	800e364 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800e362:	e06d      	b.n	800e440 <HAL_PCD_EP_DB_Transmit+0x38c>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2250      	movs	r2, #80	@ 0x50
 800e370:	5a9b      	ldrh	r3, [r3, r2]
 800e372:	b29b      	uxth	r3, r3
 800e374:	001a      	movs	r2, r3
 800e376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e378:	189b      	adds	r3, r3, r2
 800e37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	00da      	lsls	r2, r3, #3
 800e382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e384:	18d3      	adds	r3, r2, r3
 800e386:	4a29      	ldr	r2, [pc, #164]	@ (800e42c <HAL_PCD_EP_DB_Transmit+0x378>)
 800e388:	4694      	mov	ip, r2
 800e38a:	4463      	add	r3, ip
 800e38c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e390:	881b      	ldrh	r3, [r3, #0]
 800e392:	b29b      	uxth	r3, r3
 800e394:	059b      	lsls	r3, r3, #22
 800e396:	0d9b      	lsrs	r3, r3, #22
 800e398:	b29a      	uxth	r2, r3
 800e39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e39c:	801a      	strh	r2, [r3, #0]
 800e39e:	228c      	movs	r2, #140	@ 0x8c
 800e3a0:	18bb      	adds	r3, r7, r2
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800e3a6:	d91a      	bls.n	800e3de <HAL_PCD_EP_DB_Transmit+0x32a>
 800e3a8:	18bb      	adds	r3, r7, r2
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	095b      	lsrs	r3, r3, #5
 800e3ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3b0:	18bb      	adds	r3, r7, r2
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	221f      	movs	r2, #31
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	d102      	bne.n	800e3c0 <HAL_PCD_EP_DB_Transmit+0x30c>
 800e3ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	029b      	lsls	r3, r3, #10
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	4a17      	ldr	r2, [pc, #92]	@ (800e430 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3da:	801a      	strh	r2, [r3, #0]
 800e3dc:	e04f      	b.n	800e47e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e3de:	238c      	movs	r3, #140	@ 0x8c
 800e3e0:	18fb      	adds	r3, r7, r3
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d108      	bne.n	800e3fa <HAL_PCD_EP_DB_Transmit+0x346>
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ea:	881b      	ldrh	r3, [r3, #0]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	4a10      	ldr	r2, [pc, #64]	@ (800e430 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f6:	801a      	strh	r2, [r3, #0]
 800e3f8:	e041      	b.n	800e47e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e3fa:	228c      	movs	r2, #140	@ 0x8c
 800e3fc:	18bb      	adds	r3, r7, r2
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	085b      	lsrs	r3, r3, #1
 800e402:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e404:	18bb      	adds	r3, r7, r2
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2201      	movs	r2, #1
 800e40a:	4013      	ands	r3, r2
 800e40c:	d002      	beq.n	800e414 <HAL_PCD_EP_DB_Transmit+0x360>
 800e40e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e410:	3301      	adds	r3, #1
 800e412:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e416:	881b      	ldrh	r3, [r3, #0]
 800e418:	b29a      	uxth	r2, r3
 800e41a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	029b      	lsls	r3, r3, #10
 800e420:	b29b      	uxth	r3, r3
 800e422:	4313      	orrs	r3, r2
 800e424:	b29a      	uxth	r2, r3
 800e426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e428:	801a      	strh	r2, [r3, #0]
 800e42a:	e028      	b.n	800e47e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e42c:	00000402 	.word	0x00000402
 800e430:	ffff8000 	.word	0xffff8000
 800e434:	00000406 	.word	0x00000406
 800e438:	ffff8f8f 	.word	0xffff8f8f
 800e43c:	ffffc080 	.word	0xffffc080
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	785b      	ldrb	r3, [r3, #1]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d11a      	bne.n	800e47e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2250      	movs	r2, #80	@ 0x50
 800e454:	5a9b      	ldrh	r3, [r3, r2]
 800e456:	b29b      	uxth	r3, r3
 800e458:	001a      	movs	r2, r3
 800e45a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e45c:	189b      	adds	r3, r3, r2
 800e45e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	00da      	lsls	r2, r3, #3
 800e466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e468:	18d3      	adds	r3, r2, r3
 800e46a:	4adb      	ldr	r2, [pc, #876]	@ (800e7d8 <HAL_PCD_EP_DB_Transmit+0x724>)
 800e46c:	4694      	mov	ip, r2
 800e46e:	4463      	add	r3, ip
 800e470:	643b      	str	r3, [r7, #64]	@ 0x40
 800e472:	238c      	movs	r3, #140	@ 0x8c
 800e474:	18fb      	adds	r3, r7, r3
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	b29a      	uxth	r2, r3
 800e47a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e47c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6818      	ldr	r0, [r3, #0]
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	6959      	ldr	r1, [r3, #20]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	891a      	ldrh	r2, [r3, #8]
 800e48a:	238c      	movs	r3, #140	@ 0x8c
 800e48c:	18fb      	adds	r3, r7, r3
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	b29b      	uxth	r3, r3
 800e492:	f005 fa59 	bl	8013948 <USB_WritePMA>
 800e496:	e1ea      	b.n	800e86e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2250      	movs	r2, #80	@ 0x50
 800e49e:	5a9b      	ldrh	r3, [r3, r2]
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	001a      	movs	r2, r3
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	00db      	lsls	r3, r3, #3
 800e4aa:	18d2      	adds	r2, r2, r3
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	18d3      	adds	r3, r2, r3
 800e4b2:	4aca      	ldr	r2, [pc, #808]	@ (800e7dc <HAL_PCD_EP_DB_Transmit+0x728>)
 800e4b4:	4694      	mov	ip, r2
 800e4b6:	4463      	add	r3, ip
 800e4b8:	881a      	ldrh	r2, [r3, #0]
 800e4ba:	2186      	movs	r1, #134	@ 0x86
 800e4bc:	187b      	adds	r3, r7, r1
 800e4be:	0592      	lsls	r2, r2, #22
 800e4c0:	0d92      	lsrs	r2, r2, #22
 800e4c2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	699a      	ldr	r2, [r3, #24]
 800e4c8:	187b      	adds	r3, r7, r1
 800e4ca:	881b      	ldrh	r3, [r3, #0]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d307      	bcc.n	800e4e0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	699a      	ldr	r2, [r3, #24]
 800e4d4:	187b      	adds	r3, r7, r1
 800e4d6:	881b      	ldrh	r3, [r3, #0]
 800e4d8:	1ad2      	subs	r2, r2, r3
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	619a      	str	r2, [r3, #24]
 800e4de:	e002      	b.n	800e4e6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	699b      	ldr	r3, [r3, #24]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d000      	beq.n	800e4f0 <HAL_PCD_EP_DB_Transmit+0x43c>
 800e4ee:	e0bb      	b.n	800e668 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	785b      	ldrb	r3, [r3, #1]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d125      	bne.n	800e544 <HAL_PCD_EP_DB_Transmit+0x490>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2250      	movs	r2, #80	@ 0x50
 800e504:	5a9b      	ldrh	r3, [r3, r2]
 800e506:	b29b      	uxth	r3, r3
 800e508:	001a      	movs	r2, r3
 800e50a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e50c:	189b      	adds	r3, r3, r2
 800e50e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	00da      	lsls	r2, r3, #3
 800e516:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e518:	18d3      	adds	r3, r2, r3
 800e51a:	4aaf      	ldr	r2, [pc, #700]	@ (800e7d8 <HAL_PCD_EP_DB_Transmit+0x724>)
 800e51c:	4694      	mov	ip, r2
 800e51e:	4463      	add	r3, ip
 800e520:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e522:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e524:	881b      	ldrh	r3, [r3, #0]
 800e526:	b29b      	uxth	r3, r3
 800e528:	059b      	lsls	r3, r3, #22
 800e52a:	0d9b      	lsrs	r3, r3, #22
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e530:	801a      	strh	r2, [r3, #0]
 800e532:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e534:	881b      	ldrh	r3, [r3, #0]
 800e536:	b29b      	uxth	r3, r3
 800e538:	4aa9      	ldr	r2, [pc, #676]	@ (800e7e0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e53a:	4313      	orrs	r3, r2
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e540:	801a      	strh	r2, [r3, #0]
 800e542:	e01b      	b.n	800e57c <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	785b      	ldrb	r3, [r3, #1]
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d117      	bne.n	800e57c <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	667b      	str	r3, [r7, #100]	@ 0x64
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2250      	movs	r2, #80	@ 0x50
 800e558:	5a9b      	ldrh	r3, [r3, r2]
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	001a      	movs	r2, r3
 800e55e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e560:	189b      	adds	r3, r3, r2
 800e562:	667b      	str	r3, [r7, #100]	@ 0x64
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	00da      	lsls	r2, r3, #3
 800e56a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e56c:	18d3      	adds	r3, r2, r3
 800e56e:	4a9a      	ldr	r2, [pc, #616]	@ (800e7d8 <HAL_PCD_EP_DB_Transmit+0x724>)
 800e570:	4694      	mov	ip, r2
 800e572:	4463      	add	r3, ip
 800e574:	663b      	str	r3, [r7, #96]	@ 0x60
 800e576:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e578:	2200      	movs	r2, #0
 800e57a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	677b      	str	r3, [r7, #116]	@ 0x74
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	785b      	ldrb	r3, [r3, #1]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d12b      	bne.n	800e5e2 <HAL_PCD_EP_DB_Transmit+0x52e>
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2250      	movs	r2, #80	@ 0x50
 800e596:	5a9b      	ldrh	r3, [r3, r2]
 800e598:	b29b      	uxth	r3, r3
 800e59a:	001a      	movs	r2, r3
 800e59c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e59e:	189b      	adds	r3, r3, r2
 800e5a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	00da      	lsls	r2, r3, #3
 800e5a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5aa:	18d3      	adds	r3, r2, r3
 800e5ac:	4a8b      	ldr	r2, [pc, #556]	@ (800e7dc <HAL_PCD_EP_DB_Transmit+0x728>)
 800e5ae:	4694      	mov	ip, r2
 800e5b0:	4463      	add	r3, ip
 800e5b2:	2180      	movs	r1, #128	@ 0x80
 800e5b4:	187a      	adds	r2, r7, r1
 800e5b6:	6013      	str	r3, [r2, #0]
 800e5b8:	187b      	adds	r3, r7, r1
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	059b      	lsls	r3, r3, #22
 800e5c2:	0d9b      	lsrs	r3, r3, #22
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	187b      	adds	r3, r7, r1
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	801a      	strh	r2, [r3, #0]
 800e5cc:	187b      	adds	r3, r7, r1
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	4a82      	ldr	r2, [pc, #520]	@ (800e7e0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	187b      	adds	r3, r7, r1
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	801a      	strh	r2, [r3, #0]
 800e5e0:	e018      	b.n	800e614 <HAL_PCD_EP_DB_Transmit+0x560>
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	785b      	ldrb	r3, [r3, #1]
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d114      	bne.n	800e614 <HAL_PCD_EP_DB_Transmit+0x560>
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2250      	movs	r2, #80	@ 0x50
 800e5f0:	5a9b      	ldrh	r3, [r3, r2]
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	001a      	movs	r2, r3
 800e5f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5f8:	189b      	adds	r3, r3, r2
 800e5fa:	677b      	str	r3, [r7, #116]	@ 0x74
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	00da      	lsls	r2, r3, #3
 800e602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e604:	18d3      	adds	r3, r2, r3
 800e606:	4a75      	ldr	r2, [pc, #468]	@ (800e7dc <HAL_PCD_EP_DB_Transmit+0x728>)
 800e608:	4694      	mov	ip, r2
 800e60a:	4463      	add	r3, ip
 800e60c:	673b      	str	r3, [r7, #112]	@ 0x70
 800e60e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e610:	2200      	movs	r2, #0
 800e612:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	781a      	ldrb	r2, [r3, #0]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	0011      	movs	r1, r2
 800e61c:	0018      	movs	r0, r3
 800e61e:	f007 f949 	bl	80158b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e622:	1dbb      	adds	r3, r7, #6
 800e624:	881a      	ldrh	r2, [r3, #0]
 800e626:	2380      	movs	r3, #128	@ 0x80
 800e628:	01db      	lsls	r3, r3, #7
 800e62a:	4013      	ands	r3, r2
 800e62c:	d000      	beq.n	800e630 <HAL_PCD_EP_DB_Transmit+0x57c>
 800e62e:	e11e      	b.n	800e86e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	001a      	movs	r2, r3
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	18d3      	adds	r3, r2, r3
 800e63e:	881b      	ldrh	r3, [r3, #0]
 800e640:	b29a      	uxth	r2, r3
 800e642:	2088      	movs	r0, #136	@ 0x88
 800e644:	183b      	adds	r3, r7, r0
 800e646:	4967      	ldr	r1, [pc, #412]	@ (800e7e4 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e648:	400a      	ands	r2, r1
 800e64a:	801a      	strh	r2, [r3, #0]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	001a      	movs	r2, r3
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	18d3      	adds	r3, r2, r3
 800e65a:	183a      	adds	r2, r7, r0
 800e65c:	8812      	ldrh	r2, [r2, #0]
 800e65e:	4962      	ldr	r1, [pc, #392]	@ (800e7e8 <HAL_PCD_EP_DB_Transmit+0x734>)
 800e660:	430a      	orrs	r2, r1
 800e662:	b292      	uxth	r2, r2
 800e664:	801a      	strh	r2, [r3, #0]
 800e666:	e102      	b.n	800e86e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e668:	1dbb      	adds	r3, r7, #6
 800e66a:	881a      	ldrh	r2, [r3, #0]
 800e66c:	2380      	movs	r3, #128	@ 0x80
 800e66e:	01db      	lsls	r3, r3, #7
 800e670:	4013      	ands	r3, r2
 800e672:	d11a      	bne.n	800e6aa <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	001a      	movs	r2, r3
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	18d3      	adds	r3, r2, r3
 800e682:	881b      	ldrh	r3, [r3, #0]
 800e684:	b29a      	uxth	r2, r3
 800e686:	204e      	movs	r0, #78	@ 0x4e
 800e688:	183b      	adds	r3, r7, r0
 800e68a:	4956      	ldr	r1, [pc, #344]	@ (800e7e4 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e68c:	400a      	ands	r2, r1
 800e68e:	801a      	strh	r2, [r3, #0]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	001a      	movs	r2, r3
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	18d3      	adds	r3, r2, r3
 800e69e:	183a      	adds	r2, r7, r0
 800e6a0:	8812      	ldrh	r2, [r2, #0]
 800e6a2:	4951      	ldr	r1, [pc, #324]	@ (800e7e8 <HAL_PCD_EP_DB_Transmit+0x734>)
 800e6a4:	430a      	orrs	r2, r1
 800e6a6:	b292      	uxth	r2, r2
 800e6a8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	2224      	movs	r2, #36	@ 0x24
 800e6ae:	5c9b      	ldrb	r3, [r3, r2]
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d000      	beq.n	800e6b6 <HAL_PCD_EP_DB_Transmit+0x602>
 800e6b4:	e0db      	b.n	800e86e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	695a      	ldr	r2, [r3, #20]
 800e6ba:	2186      	movs	r1, #134	@ 0x86
 800e6bc:	187b      	adds	r3, r7, r1
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	18d2      	adds	r2, r2, r3
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	69da      	ldr	r2, [r3, #28]
 800e6ca:	187b      	adds	r3, r7, r1
 800e6cc:	881b      	ldrh	r3, [r3, #0]
 800e6ce:	18d2      	adds	r2, r2, r3
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	6a1a      	ldr	r2, [r3, #32]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d30c      	bcc.n	800e6fa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	218c      	movs	r1, #140	@ 0x8c
 800e6e6:	187a      	adds	r2, r7, r1
 800e6e8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	6a1a      	ldr	r2, [r3, #32]
 800e6ee:	187b      	adds	r3, r7, r1
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	1ad2      	subs	r2, r2, r3
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	621a      	str	r2, [r3, #32]
 800e6f8:	e01a      	b.n	800e730 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d10a      	bne.n	800e718 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800e702:	2386      	movs	r3, #134	@ 0x86
 800e704:	18fb      	adds	r3, r7, r3
 800e706:	881b      	ldrh	r3, [r3, #0]
 800e708:	228c      	movs	r2, #140	@ 0x8c
 800e70a:	18ba      	adds	r2, r7, r2
 800e70c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	2224      	movs	r2, #36	@ 0x24
 800e712:	2100      	movs	r1, #0
 800e714:	5499      	strb	r1, [r3, r2]
 800e716:	e00b      	b.n	800e730 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	6a1b      	ldr	r3, [r3, #32]
 800e71c:	228c      	movs	r2, #140	@ 0x8c
 800e71e:	18ba      	adds	r2, r7, r2
 800e720:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	2200      	movs	r2, #0
 800e726:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	2224      	movs	r2, #36	@ 0x24
 800e72c:	2100      	movs	r1, #0
 800e72e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	657b      	str	r3, [r7, #84]	@ 0x54
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	785b      	ldrb	r3, [r3, #1]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d000      	beq.n	800e740 <HAL_PCD_EP_DB_Transmit+0x68c>
 800e73e:	e06e      	b.n	800e81e <HAL_PCD_EP_DB_Transmit+0x76a>
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2250      	movs	r2, #80	@ 0x50
 800e74c:	5a9b      	ldrh	r3, [r3, r2]
 800e74e:	b29b      	uxth	r3, r3
 800e750:	001a      	movs	r2, r3
 800e752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e754:	189b      	adds	r3, r3, r2
 800e756:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	00da      	lsls	r2, r3, #3
 800e75e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e760:	18d3      	adds	r3, r2, r3
 800e762:	4a1e      	ldr	r2, [pc, #120]	@ (800e7dc <HAL_PCD_EP_DB_Transmit+0x728>)
 800e764:	4694      	mov	ip, r2
 800e766:	4463      	add	r3, ip
 800e768:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e76a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e76c:	881b      	ldrh	r3, [r3, #0]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	059b      	lsls	r3, r3, #22
 800e772:	0d9b      	lsrs	r3, r3, #22
 800e774:	b29a      	uxth	r2, r3
 800e776:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e778:	801a      	strh	r2, [r3, #0]
 800e77a:	228c      	movs	r2, #140	@ 0x8c
 800e77c:	18bb      	adds	r3, r7, r2
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b3e      	cmp	r3, #62	@ 0x3e
 800e782:	d91a      	bls.n	800e7ba <HAL_PCD_EP_DB_Transmit+0x706>
 800e784:	18bb      	adds	r3, r7, r2
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	095b      	lsrs	r3, r3, #5
 800e78a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e78c:	18bb      	adds	r3, r7, r2
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	221f      	movs	r2, #31
 800e792:	4013      	ands	r3, r2
 800e794:	d102      	bne.n	800e79c <HAL_PCD_EP_DB_Transmit+0x6e8>
 800e796:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e798:	3b01      	subs	r3, #1
 800e79a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e79c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e79e:	881b      	ldrh	r3, [r3, #0]
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	029b      	lsls	r3, r3, #10
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	4a0c      	ldr	r2, [pc, #48]	@ (800e7e0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7b6:	801a      	strh	r2, [r3, #0]
 800e7b8:	e04d      	b.n	800e856 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e7ba:	238c      	movs	r3, #140	@ 0x8c
 800e7bc:	18fb      	adds	r3, r7, r3
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d113      	bne.n	800e7ec <HAL_PCD_EP_DB_Transmit+0x738>
 800e7c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7c6:	881b      	ldrh	r3, [r3, #0]
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	4a05      	ldr	r2, [pc, #20]	@ (800e7e0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7d2:	801a      	strh	r2, [r3, #0]
 800e7d4:	e03f      	b.n	800e856 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e7d6:	46c0      	nop			@ (mov r8, r8)
 800e7d8:	00000402 	.word	0x00000402
 800e7dc:	00000406 	.word	0x00000406
 800e7e0:	ffff8000 	.word	0xffff8000
 800e7e4:	ffff8f8f 	.word	0xffff8f8f
 800e7e8:	ffffc080 	.word	0xffffc080
 800e7ec:	228c      	movs	r2, #140	@ 0x8c
 800e7ee:	18bb      	adds	r3, r7, r2
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	085b      	lsrs	r3, r3, #1
 800e7f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e7f6:	18bb      	adds	r3, r7, r2
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	4013      	ands	r3, r2
 800e7fe:	d002      	beq.n	800e806 <HAL_PCD_EP_DB_Transmit+0x752>
 800e800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e802:	3301      	adds	r3, #1
 800e804:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e808:	881b      	ldrh	r3, [r3, #0]
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e80e:	b29b      	uxth	r3, r3
 800e810:	029b      	lsls	r3, r3, #10
 800e812:	b29b      	uxth	r3, r3
 800e814:	4313      	orrs	r3, r2
 800e816:	b29a      	uxth	r2, r3
 800e818:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e81a:	801a      	strh	r2, [r3, #0]
 800e81c:	e01b      	b.n	800e856 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	785b      	ldrb	r3, [r3, #1]
 800e822:	2b01      	cmp	r3, #1
 800e824:	d117      	bne.n	800e856 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2250      	movs	r2, #80	@ 0x50
 800e82c:	5a9b      	ldrh	r3, [r3, r2]
 800e82e:	b29b      	uxth	r3, r3
 800e830:	001a      	movs	r2, r3
 800e832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e834:	189b      	adds	r3, r3, r2
 800e836:	657b      	str	r3, [r7, #84]	@ 0x54
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	00da      	lsls	r2, r3, #3
 800e83e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e840:	18d3      	adds	r3, r2, r3
 800e842:	4a21      	ldr	r2, [pc, #132]	@ (800e8c8 <HAL_PCD_EP_DB_Transmit+0x814>)
 800e844:	4694      	mov	ip, r2
 800e846:	4463      	add	r3, ip
 800e848:	653b      	str	r3, [r7, #80]	@ 0x50
 800e84a:	238c      	movs	r3, #140	@ 0x8c
 800e84c:	18fb      	adds	r3, r7, r3
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	b29a      	uxth	r2, r3
 800e852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e854:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6818      	ldr	r0, [r3, #0]
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	6959      	ldr	r1, [r3, #20]
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	895a      	ldrh	r2, [r3, #10]
 800e862:	238c      	movs	r3, #140	@ 0x8c
 800e864:	18fb      	adds	r3, r7, r3
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	b29b      	uxth	r3, r3
 800e86a:	f005 f86d 	bl	8013948 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	001a      	movs	r2, r3
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	18d3      	adds	r3, r2, r3
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	b29a      	uxth	r2, r3
 800e880:	2014      	movs	r0, #20
 800e882:	183b      	adds	r3, r7, r0
 800e884:	4911      	ldr	r1, [pc, #68]	@ (800e8cc <HAL_PCD_EP_DB_Transmit+0x818>)
 800e886:	400a      	ands	r2, r1
 800e888:	801a      	strh	r2, [r3, #0]
 800e88a:	183b      	adds	r3, r7, r0
 800e88c:	183a      	adds	r2, r7, r0
 800e88e:	8812      	ldrh	r2, [r2, #0]
 800e890:	2110      	movs	r1, #16
 800e892:	404a      	eors	r2, r1
 800e894:	801a      	strh	r2, [r3, #0]
 800e896:	183b      	adds	r3, r7, r0
 800e898:	183a      	adds	r2, r7, r0
 800e89a:	8812      	ldrh	r2, [r2, #0]
 800e89c:	2120      	movs	r1, #32
 800e89e:	404a      	eors	r2, r1
 800e8a0:	801a      	strh	r2, [r3, #0]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	001a      	movs	r2, r3
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	18d3      	adds	r3, r2, r3
 800e8b0:	183a      	adds	r2, r7, r0
 800e8b2:	8812      	ldrh	r2, [r2, #0]
 800e8b4:	4906      	ldr	r1, [pc, #24]	@ (800e8d0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800e8b6:	430a      	orrs	r2, r1
 800e8b8:	b292      	uxth	r2, r2
 800e8ba:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	0018      	movs	r0, r3
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	b024      	add	sp, #144	@ 0x90
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	46c0      	nop			@ (mov r8, r8)
 800e8c8:	00000406 	.word	0x00000406
 800e8cc:	ffff8fbf 	.word	0xffff8fbf
 800e8d0:	ffff8080 	.word	0xffff8080

0800e8d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800e8d4:	b590      	push	{r4, r7, lr}
 800e8d6:	b087      	sub	sp, #28
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	0008      	movs	r0, r1
 800e8de:	0011      	movs	r1, r2
 800e8e0:	607b      	str	r3, [r7, #4]
 800e8e2:	240a      	movs	r4, #10
 800e8e4:	193b      	adds	r3, r7, r4
 800e8e6:	1c02      	adds	r2, r0, #0
 800e8e8:	801a      	strh	r2, [r3, #0]
 800e8ea:	2308      	movs	r3, #8
 800e8ec:	18fb      	adds	r3, r7, r3
 800e8ee:	1c0a      	adds	r2, r1, #0
 800e8f0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800e8f2:	0021      	movs	r1, r4
 800e8f4:	187b      	adds	r3, r7, r1
 800e8f6:	881b      	ldrh	r3, [r3, #0]
 800e8f8:	2280      	movs	r2, #128	@ 0x80
 800e8fa:	4013      	ands	r3, r2
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00c      	beq.n	800e91c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e902:	187b      	adds	r3, r7, r1
 800e904:	881b      	ldrh	r3, [r3, #0]
 800e906:	2207      	movs	r2, #7
 800e908:	4013      	ands	r3, r2
 800e90a:	1c5a      	adds	r2, r3, #1
 800e90c:	0013      	movs	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	189b      	adds	r3, r3, r2
 800e912:	00db      	lsls	r3, r3, #3
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	18d3      	adds	r3, r2, r3
 800e918:	617b      	str	r3, [r7, #20]
 800e91a:	e00b      	b.n	800e934 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e91c:	230a      	movs	r3, #10
 800e91e:	18fb      	adds	r3, r7, r3
 800e920:	881a      	ldrh	r2, [r3, #0]
 800e922:	0013      	movs	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	189b      	adds	r3, r3, r2
 800e928:	00db      	lsls	r3, r3, #3
 800e92a:	3369      	adds	r3, #105	@ 0x69
 800e92c:	33ff      	adds	r3, #255	@ 0xff
 800e92e:	68fa      	ldr	r2, [r7, #12]
 800e930:	18d3      	adds	r3, r2, r3
 800e932:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800e934:	2308      	movs	r3, #8
 800e936:	18fb      	adds	r3, r7, r3
 800e938:	881b      	ldrh	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d107      	bne.n	800e94e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	2200      	movs	r2, #0
 800e942:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	b29a      	uxth	r2, r3
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	80da      	strh	r2, [r3, #6]
 800e94c:	e00b      	b.n	800e966 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	2201      	movs	r2, #1
 800e952:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	b29a      	uxth	r2, r3
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	0c1b      	lsrs	r3, r3, #16
 800e960:	b29a      	uxth	r2, r3
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	0018      	movs	r0, r3
 800e96a:	46bd      	mov	sp, r7
 800e96c:	b007      	add	sp, #28
 800e96e:	bd90      	pop	{r4, r7, pc}

0800e970 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	23ba      	movs	r3, #186	@ 0xba
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	2101      	movs	r1, #1
 800e986:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	23b8      	movs	r3, #184	@ 0xb8
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	2100      	movs	r1, #0
 800e990:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2254      	movs	r2, #84	@ 0x54
 800e996:	5a9b      	ldrh	r3, [r3, r2]
 800e998:	b29b      	uxth	r3, r3
 800e99a:	2201      	movs	r2, #1
 800e99c:	4313      	orrs	r3, r2
 800e99e:	b299      	uxth	r1, r3
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2254      	movs	r2, #84	@ 0x54
 800e9a4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2254      	movs	r2, #84	@ 0x54
 800e9aa:	5a9b      	ldrh	r3, [r3, r2]
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	2202      	movs	r2, #2
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	b299      	uxth	r1, r3
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2254      	movs	r2, #84	@ 0x54
 800e9b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	0018      	movs	r0, r3
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	b004      	add	sp, #16
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	000a      	movs	r2, r1
 800e9ce:	1cfb      	adds	r3, r7, #3
 800e9d0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e9d2:	46c0      	nop			@ (mov r8, r8)
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	b002      	add	sp, #8
 800e9d8:	bd80      	pop	{r7, pc}
	...

0800e9dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e9dc:	b5b0      	push	{r4, r5, r7, lr}
 800e9de:	b08a      	sub	sp, #40	@ 0x28
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d102      	bne.n	800e9f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	f000 fbbf 	bl	800f16e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e9f0:	4bc9      	ldr	r3, [pc, #804]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	220c      	movs	r2, #12
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e9fa:	4bc7      	ldr	r3, [pc, #796]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	2380      	movs	r3, #128	@ 0x80
 800ea00:	025b      	lsls	r3, r3, #9
 800ea02:	4013      	ands	r3, r2
 800ea04:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	4013      	ands	r3, r2
 800ea0e:	d100      	bne.n	800ea12 <HAL_RCC_OscConfig+0x36>
 800ea10:	e07e      	b.n	800eb10 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ea12:	69fb      	ldr	r3, [r7, #28]
 800ea14:	2b08      	cmp	r3, #8
 800ea16:	d007      	beq.n	800ea28 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	2b0c      	cmp	r3, #12
 800ea1c:	d112      	bne.n	800ea44 <HAL_RCC_OscConfig+0x68>
 800ea1e:	69ba      	ldr	r2, [r7, #24]
 800ea20:	2380      	movs	r3, #128	@ 0x80
 800ea22:	025b      	lsls	r3, r3, #9
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d10d      	bne.n	800ea44 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea28:	4bbb      	ldr	r3, [pc, #748]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	2380      	movs	r3, #128	@ 0x80
 800ea2e:	029b      	lsls	r3, r3, #10
 800ea30:	4013      	ands	r3, r2
 800ea32:	d100      	bne.n	800ea36 <HAL_RCC_OscConfig+0x5a>
 800ea34:	e06b      	b.n	800eb0e <HAL_RCC_OscConfig+0x132>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d167      	bne.n	800eb0e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	f000 fb95 	bl	800f16e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685a      	ldr	r2, [r3, #4]
 800ea48:	2380      	movs	r3, #128	@ 0x80
 800ea4a:	025b      	lsls	r3, r3, #9
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d107      	bne.n	800ea60 <HAL_RCC_OscConfig+0x84>
 800ea50:	4bb1      	ldr	r3, [pc, #708]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	4bb0      	ldr	r3, [pc, #704]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea56:	2180      	movs	r1, #128	@ 0x80
 800ea58:	0249      	lsls	r1, r1, #9
 800ea5a:	430a      	orrs	r2, r1
 800ea5c:	601a      	str	r2, [r3, #0]
 800ea5e:	e027      	b.n	800eab0 <HAL_RCC_OscConfig+0xd4>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	685a      	ldr	r2, [r3, #4]
 800ea64:	23a0      	movs	r3, #160	@ 0xa0
 800ea66:	02db      	lsls	r3, r3, #11
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d10e      	bne.n	800ea8a <HAL_RCC_OscConfig+0xae>
 800ea6c:	4baa      	ldr	r3, [pc, #680]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	4ba9      	ldr	r3, [pc, #676]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea72:	2180      	movs	r1, #128	@ 0x80
 800ea74:	02c9      	lsls	r1, r1, #11
 800ea76:	430a      	orrs	r2, r1
 800ea78:	601a      	str	r2, [r3, #0]
 800ea7a:	4ba7      	ldr	r3, [pc, #668]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	4ba6      	ldr	r3, [pc, #664]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea80:	2180      	movs	r1, #128	@ 0x80
 800ea82:	0249      	lsls	r1, r1, #9
 800ea84:	430a      	orrs	r2, r1
 800ea86:	601a      	str	r2, [r3, #0]
 800ea88:	e012      	b.n	800eab0 <HAL_RCC_OscConfig+0xd4>
 800ea8a:	4ba3      	ldr	r3, [pc, #652]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	4ba2      	ldr	r3, [pc, #648]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea90:	49a2      	ldr	r1, [pc, #648]	@ (800ed1c <HAL_RCC_OscConfig+0x340>)
 800ea92:	400a      	ands	r2, r1
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	4ba0      	ldr	r3, [pc, #640]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	2380      	movs	r3, #128	@ 0x80
 800ea9c:	025b      	lsls	r3, r3, #9
 800ea9e:	4013      	ands	r3, r2
 800eaa0:	60fb      	str	r3, [r7, #12]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	4b9c      	ldr	r3, [pc, #624]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	4b9b      	ldr	r3, [pc, #620]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eaaa:	499d      	ldr	r1, [pc, #628]	@ (800ed20 <HAL_RCC_OscConfig+0x344>)
 800eaac:	400a      	ands	r2, r1
 800eaae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d015      	beq.n	800eae4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eab8:	f7fa fc0e 	bl	80092d8 <HAL_GetTick>
 800eabc:	0003      	movs	r3, r0
 800eabe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800eac0:	e009      	b.n	800ead6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eac2:	f7fa fc09 	bl	80092d8 <HAL_GetTick>
 800eac6:	0002      	movs	r2, r0
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	2b64      	cmp	r3, #100	@ 0x64
 800eace:	d902      	bls.n	800ead6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ead0:	2303      	movs	r3, #3
 800ead2:	f000 fb4c 	bl	800f16e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ead6:	4b90      	ldr	r3, [pc, #576]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	2380      	movs	r3, #128	@ 0x80
 800eadc:	029b      	lsls	r3, r3, #10
 800eade:	4013      	ands	r3, r2
 800eae0:	d0ef      	beq.n	800eac2 <HAL_RCC_OscConfig+0xe6>
 800eae2:	e015      	b.n	800eb10 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eae4:	f7fa fbf8 	bl	80092d8 <HAL_GetTick>
 800eae8:	0003      	movs	r3, r0
 800eaea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800eaec:	e008      	b.n	800eb00 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eaee:	f7fa fbf3 	bl	80092d8 <HAL_GetTick>
 800eaf2:	0002      	movs	r2, r0
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	2b64      	cmp	r3, #100	@ 0x64
 800eafa:	d901      	bls.n	800eb00 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800eafc:	2303      	movs	r3, #3
 800eafe:	e336      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800eb00:	4b85      	ldr	r3, [pc, #532]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	2380      	movs	r3, #128	@ 0x80
 800eb06:	029b      	lsls	r3, r3, #10
 800eb08:	4013      	ands	r3, r2
 800eb0a:	d1f0      	bne.n	800eaee <HAL_RCC_OscConfig+0x112>
 800eb0c:	e000      	b.n	800eb10 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eb0e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2202      	movs	r2, #2
 800eb16:	4013      	ands	r3, r2
 800eb18:	d100      	bne.n	800eb1c <HAL_RCC_OscConfig+0x140>
 800eb1a:	e099      	b.n	800ec50 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800eb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb24:	2220      	movs	r2, #32
 800eb26:	4013      	ands	r3, r2
 800eb28:	d009      	beq.n	800eb3e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800eb2a:	4b7b      	ldr	r3, [pc, #492]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	4b7a      	ldr	r3, [pc, #488]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eb30:	2120      	movs	r1, #32
 800eb32:	430a      	orrs	r2, r1
 800eb34:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800eb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb38:	2220      	movs	r2, #32
 800eb3a:	4393      	bics	r3, r2
 800eb3c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	d005      	beq.n	800eb50 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	2b0c      	cmp	r3, #12
 800eb48:	d13e      	bne.n	800ebc8 <HAL_RCC_OscConfig+0x1ec>
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d13b      	bne.n	800ebc8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800eb50:	4b71      	ldr	r3, [pc, #452]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2204      	movs	r2, #4
 800eb56:	4013      	ands	r3, r2
 800eb58:	d004      	beq.n	800eb64 <HAL_RCC_OscConfig+0x188>
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d101      	bne.n	800eb64 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800eb60:	2301      	movs	r3, #1
 800eb62:	e304      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb64:	4b6c      	ldr	r3, [pc, #432]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	4a6e      	ldr	r2, [pc, #440]	@ (800ed24 <HAL_RCC_OscConfig+0x348>)
 800eb6a:	4013      	ands	r3, r2
 800eb6c:	0019      	movs	r1, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	691b      	ldr	r3, [r3, #16]
 800eb72:	021a      	lsls	r2, r3, #8
 800eb74:	4b68      	ldr	r3, [pc, #416]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eb76:	430a      	orrs	r2, r1
 800eb78:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800eb7a:	4b67      	ldr	r3, [pc, #412]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2209      	movs	r2, #9
 800eb80:	4393      	bics	r3, r2
 800eb82:	0019      	movs	r1, r3
 800eb84:	4b64      	ldr	r3, [pc, #400]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eb86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb88:	430a      	orrs	r2, r1
 800eb8a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800eb8c:	f000 fc42 	bl	800f414 <HAL_RCC_GetSysClockFreq>
 800eb90:	0001      	movs	r1, r0
 800eb92:	4b61      	ldr	r3, [pc, #388]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	091b      	lsrs	r3, r3, #4
 800eb98:	220f      	movs	r2, #15
 800eb9a:	4013      	ands	r3, r2
 800eb9c:	4a62      	ldr	r2, [pc, #392]	@ (800ed28 <HAL_RCC_OscConfig+0x34c>)
 800eb9e:	5cd3      	ldrb	r3, [r2, r3]
 800eba0:	000a      	movs	r2, r1
 800eba2:	40da      	lsrs	r2, r3
 800eba4:	4b61      	ldr	r3, [pc, #388]	@ (800ed2c <HAL_RCC_OscConfig+0x350>)
 800eba6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800eba8:	4b61      	ldr	r3, [pc, #388]	@ (800ed30 <HAL_RCC_OscConfig+0x354>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2513      	movs	r5, #19
 800ebae:	197c      	adds	r4, r7, r5
 800ebb0:	0018      	movs	r0, r3
 800ebb2:	f7fa fb4b 	bl	800924c <HAL_InitTick>
 800ebb6:	0003      	movs	r3, r0
 800ebb8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800ebba:	197b      	adds	r3, r7, r5
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d046      	beq.n	800ec50 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800ebc2:	197b      	adds	r3, r7, r5
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	e2d2      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d027      	beq.n	800ec1e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ebce:	4b52      	ldr	r3, [pc, #328]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	2209      	movs	r2, #9
 800ebd4:	4393      	bics	r3, r2
 800ebd6:	0019      	movs	r1, r3
 800ebd8:	4b4f      	ldr	r3, [pc, #316]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ebda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebdc:	430a      	orrs	r2, r1
 800ebde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ebe0:	f7fa fb7a 	bl	80092d8 <HAL_GetTick>
 800ebe4:	0003      	movs	r3, r0
 800ebe6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ebe8:	e008      	b.n	800ebfc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ebea:	f7fa fb75 	bl	80092d8 <HAL_GetTick>
 800ebee:	0002      	movs	r2, r0
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	2b02      	cmp	r3, #2
 800ebf6:	d901      	bls.n	800ebfc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	e2b8      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ebfc:	4b46      	ldr	r3, [pc, #280]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2204      	movs	r2, #4
 800ec02:	4013      	ands	r3, r2
 800ec04:	d0f1      	beq.n	800ebea <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec06:	4b44      	ldr	r3, [pc, #272]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	4a46      	ldr	r2, [pc, #280]	@ (800ed24 <HAL_RCC_OscConfig+0x348>)
 800ec0c:	4013      	ands	r3, r2
 800ec0e:	0019      	movs	r1, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	691b      	ldr	r3, [r3, #16]
 800ec14:	021a      	lsls	r2, r3, #8
 800ec16:	4b40      	ldr	r3, [pc, #256]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec18:	430a      	orrs	r2, r1
 800ec1a:	605a      	str	r2, [r3, #4]
 800ec1c:	e018      	b.n	800ec50 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec1e:	4b3e      	ldr	r3, [pc, #248]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	4b3d      	ldr	r3, [pc, #244]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec24:	2101      	movs	r1, #1
 800ec26:	438a      	bics	r2, r1
 800ec28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec2a:	f7fa fb55 	bl	80092d8 <HAL_GetTick>
 800ec2e:	0003      	movs	r3, r0
 800ec30:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ec32:	e008      	b.n	800ec46 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ec34:	f7fa fb50 	bl	80092d8 <HAL_GetTick>
 800ec38:	0002      	movs	r2, r0
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d901      	bls.n	800ec46 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800ec42:	2303      	movs	r3, #3
 800ec44:	e293      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ec46:	4b34      	ldr	r3, [pc, #208]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	2204      	movs	r2, #4
 800ec4c:	4013      	ands	r3, r2
 800ec4e:	d1f1      	bne.n	800ec34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2210      	movs	r2, #16
 800ec56:	4013      	ands	r3, r2
 800ec58:	d100      	bne.n	800ec5c <HAL_RCC_OscConfig+0x280>
 800ec5a:	e0a2      	b.n	800eda2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d140      	bne.n	800ece4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ec62:	4b2d      	ldr	r3, [pc, #180]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	2380      	movs	r3, #128	@ 0x80
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	4013      	ands	r3, r2
 800ec6c:	d005      	beq.n	800ec7a <HAL_RCC_OscConfig+0x29e>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	69db      	ldr	r3, [r3, #28]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d101      	bne.n	800ec7a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	e279      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ec7a:	4b27      	ldr	r3, [pc, #156]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	4a2d      	ldr	r2, [pc, #180]	@ (800ed34 <HAL_RCC_OscConfig+0x358>)
 800ec80:	4013      	ands	r3, r2
 800ec82:	0019      	movs	r1, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec88:	4b23      	ldr	r3, [pc, #140]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec8a:	430a      	orrs	r2, r1
 800ec8c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ec8e:	4b22      	ldr	r3, [pc, #136]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	021b      	lsls	r3, r3, #8
 800ec94:	0a19      	lsrs	r1, r3, #8
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	061a      	lsls	r2, r3, #24
 800ec9c:	4b1e      	ldr	r3, [pc, #120]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ec9e:	430a      	orrs	r2, r1
 800eca0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca6:	0b5b      	lsrs	r3, r3, #13
 800eca8:	3301      	adds	r3, #1
 800ecaa:	2280      	movs	r2, #128	@ 0x80
 800ecac:	0212      	lsls	r2, r2, #8
 800ecae:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800ecb0:	4b19      	ldr	r3, [pc, #100]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	091b      	lsrs	r3, r3, #4
 800ecb6:	210f      	movs	r1, #15
 800ecb8:	400b      	ands	r3, r1
 800ecba:	491b      	ldr	r1, [pc, #108]	@ (800ed28 <HAL_RCC_OscConfig+0x34c>)
 800ecbc:	5ccb      	ldrb	r3, [r1, r3]
 800ecbe:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ecc0:	4b1a      	ldr	r3, [pc, #104]	@ (800ed2c <HAL_RCC_OscConfig+0x350>)
 800ecc2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800ecc4:	4b1a      	ldr	r3, [pc, #104]	@ (800ed30 <HAL_RCC_OscConfig+0x354>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2513      	movs	r5, #19
 800ecca:	197c      	adds	r4, r7, r5
 800eccc:	0018      	movs	r0, r3
 800ecce:	f7fa fabd 	bl	800924c <HAL_InitTick>
 800ecd2:	0003      	movs	r3, r0
 800ecd4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800ecd6:	197b      	adds	r3, r7, r5
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d061      	beq.n	800eda2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800ecde:	197b      	adds	r3, r7, r5
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	e244      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	69db      	ldr	r3, [r3, #28]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d040      	beq.n	800ed6e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ecec:	4b0a      	ldr	r3, [pc, #40]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	4b09      	ldr	r3, [pc, #36]	@ (800ed18 <HAL_RCC_OscConfig+0x33c>)
 800ecf2:	2180      	movs	r1, #128	@ 0x80
 800ecf4:	0049      	lsls	r1, r1, #1
 800ecf6:	430a      	orrs	r2, r1
 800ecf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecfa:	f7fa faed 	bl	80092d8 <HAL_GetTick>
 800ecfe:	0003      	movs	r3, r0
 800ed00:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ed02:	e019      	b.n	800ed38 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ed04:	f7fa fae8 	bl	80092d8 <HAL_GetTick>
 800ed08:	0002      	movs	r2, r0
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	1ad3      	subs	r3, r2, r3
 800ed0e:	2b02      	cmp	r3, #2
 800ed10:	d912      	bls.n	800ed38 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800ed12:	2303      	movs	r3, #3
 800ed14:	e22b      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
 800ed16:	46c0      	nop			@ (mov r8, r8)
 800ed18:	40021000 	.word	0x40021000
 800ed1c:	fffeffff 	.word	0xfffeffff
 800ed20:	fffbffff 	.word	0xfffbffff
 800ed24:	ffffe0ff 	.word	0xffffe0ff
 800ed28:	0801a40c 	.word	0x0801a40c
 800ed2c:	2000013c 	.word	0x2000013c
 800ed30:	20000150 	.word	0x20000150
 800ed34:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ed38:	4bca      	ldr	r3, [pc, #808]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	2380      	movs	r3, #128	@ 0x80
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4013      	ands	r3, r2
 800ed42:	d0df      	beq.n	800ed04 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ed44:	4bc7      	ldr	r3, [pc, #796]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	4ac7      	ldr	r2, [pc, #796]	@ (800f068 <HAL_RCC_OscConfig+0x68c>)
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	0019      	movs	r1, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed52:	4bc4      	ldr	r3, [pc, #784]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ed54:	430a      	orrs	r2, r1
 800ed56:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ed58:	4bc2      	ldr	r3, [pc, #776]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	021b      	lsls	r3, r3, #8
 800ed5e:	0a19      	lsrs	r1, r3, #8
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6a1b      	ldr	r3, [r3, #32]
 800ed64:	061a      	lsls	r2, r3, #24
 800ed66:	4bbf      	ldr	r3, [pc, #764]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ed68:	430a      	orrs	r2, r1
 800ed6a:	605a      	str	r2, [r3, #4]
 800ed6c:	e019      	b.n	800eda2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ed6e:	4bbd      	ldr	r3, [pc, #756]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	4bbc      	ldr	r3, [pc, #752]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ed74:	49bd      	ldr	r1, [pc, #756]	@ (800f06c <HAL_RCC_OscConfig+0x690>)
 800ed76:	400a      	ands	r2, r1
 800ed78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed7a:	f7fa faad 	bl	80092d8 <HAL_GetTick>
 800ed7e:	0003      	movs	r3, r0
 800ed80:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ed82:	e008      	b.n	800ed96 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ed84:	f7fa faa8 	bl	80092d8 <HAL_GetTick>
 800ed88:	0002      	movs	r2, r0
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	d901      	bls.n	800ed96 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800ed92:	2303      	movs	r3, #3
 800ed94:	e1eb      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ed96:	4bb3      	ldr	r3, [pc, #716]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	2380      	movs	r3, #128	@ 0x80
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	4013      	ands	r3, r2
 800eda0:	d1f0      	bne.n	800ed84 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2208      	movs	r2, #8
 800eda8:	4013      	ands	r3, r2
 800edaa:	d036      	beq.n	800ee1a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	695b      	ldr	r3, [r3, #20]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d019      	beq.n	800ede8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800edb4:	4bab      	ldr	r3, [pc, #684]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800edb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edb8:	4baa      	ldr	r3, [pc, #680]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800edba:	2101      	movs	r1, #1
 800edbc:	430a      	orrs	r2, r1
 800edbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800edc0:	f7fa fa8a 	bl	80092d8 <HAL_GetTick>
 800edc4:	0003      	movs	r3, r0
 800edc6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800edc8:	e008      	b.n	800eddc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800edca:	f7fa fa85 	bl	80092d8 <HAL_GetTick>
 800edce:	0002      	movs	r2, r0
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d901      	bls.n	800eddc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800edd8:	2303      	movs	r3, #3
 800edda:	e1c8      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800eddc:	4ba1      	ldr	r3, [pc, #644]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800edde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ede0:	2202      	movs	r2, #2
 800ede2:	4013      	ands	r3, r2
 800ede4:	d0f1      	beq.n	800edca <HAL_RCC_OscConfig+0x3ee>
 800ede6:	e018      	b.n	800ee1a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ede8:	4b9e      	ldr	r3, [pc, #632]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800edea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edec:	4b9d      	ldr	r3, [pc, #628]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800edee:	2101      	movs	r1, #1
 800edf0:	438a      	bics	r2, r1
 800edf2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800edf4:	f7fa fa70 	bl	80092d8 <HAL_GetTick>
 800edf8:	0003      	movs	r3, r0
 800edfa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800edfc:	e008      	b.n	800ee10 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800edfe:	f7fa fa6b 	bl	80092d8 <HAL_GetTick>
 800ee02:	0002      	movs	r2, r0
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d901      	bls.n	800ee10 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	e1ae      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ee10:	4b94      	ldr	r3, [pc, #592]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ee12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee14:	2202      	movs	r2, #2
 800ee16:	4013      	ands	r3, r2
 800ee18:	d1f1      	bne.n	800edfe <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2204      	movs	r2, #4
 800ee20:	4013      	ands	r3, r2
 800ee22:	d100      	bne.n	800ee26 <HAL_RCC_OscConfig+0x44a>
 800ee24:	e0ae      	b.n	800ef84 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ee26:	2023      	movs	r0, #35	@ 0x23
 800ee28:	183b      	adds	r3, r7, r0
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ee2e:	4b8d      	ldr	r3, [pc, #564]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ee30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee32:	2380      	movs	r3, #128	@ 0x80
 800ee34:	055b      	lsls	r3, r3, #21
 800ee36:	4013      	ands	r3, r2
 800ee38:	d109      	bne.n	800ee4e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ee3a:	4b8a      	ldr	r3, [pc, #552]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ee3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee3e:	4b89      	ldr	r3, [pc, #548]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ee40:	2180      	movs	r1, #128	@ 0x80
 800ee42:	0549      	lsls	r1, r1, #21
 800ee44:	430a      	orrs	r2, r1
 800ee46:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800ee48:	183b      	adds	r3, r7, r0
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee4e:	4b88      	ldr	r3, [pc, #544]	@ (800f070 <HAL_RCC_OscConfig+0x694>)
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	2380      	movs	r3, #128	@ 0x80
 800ee54:	005b      	lsls	r3, r3, #1
 800ee56:	4013      	ands	r3, r2
 800ee58:	d11a      	bne.n	800ee90 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ee5a:	4b85      	ldr	r3, [pc, #532]	@ (800f070 <HAL_RCC_OscConfig+0x694>)
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	4b84      	ldr	r3, [pc, #528]	@ (800f070 <HAL_RCC_OscConfig+0x694>)
 800ee60:	2180      	movs	r1, #128	@ 0x80
 800ee62:	0049      	lsls	r1, r1, #1
 800ee64:	430a      	orrs	r2, r1
 800ee66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ee68:	f7fa fa36 	bl	80092d8 <HAL_GetTick>
 800ee6c:	0003      	movs	r3, r0
 800ee6e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee70:	e008      	b.n	800ee84 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee72:	f7fa fa31 	bl	80092d8 <HAL_GetTick>
 800ee76:	0002      	movs	r2, r0
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	1ad3      	subs	r3, r2, r3
 800ee7c:	2b64      	cmp	r3, #100	@ 0x64
 800ee7e:	d901      	bls.n	800ee84 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800ee80:	2303      	movs	r3, #3
 800ee82:	e174      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee84:	4b7a      	ldr	r3, [pc, #488]	@ (800f070 <HAL_RCC_OscConfig+0x694>)
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	2380      	movs	r3, #128	@ 0x80
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	d0f0      	beq.n	800ee72 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	689a      	ldr	r2, [r3, #8]
 800ee94:	2380      	movs	r3, #128	@ 0x80
 800ee96:	005b      	lsls	r3, r3, #1
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d107      	bne.n	800eeac <HAL_RCC_OscConfig+0x4d0>
 800ee9c:	4b71      	ldr	r3, [pc, #452]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ee9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eea0:	4b70      	ldr	r3, [pc, #448]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eea2:	2180      	movs	r1, #128	@ 0x80
 800eea4:	0049      	lsls	r1, r1, #1
 800eea6:	430a      	orrs	r2, r1
 800eea8:	651a      	str	r2, [r3, #80]	@ 0x50
 800eeaa:	e031      	b.n	800ef10 <HAL_RCC_OscConfig+0x534>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10c      	bne.n	800eece <HAL_RCC_OscConfig+0x4f2>
 800eeb4:	4b6b      	ldr	r3, [pc, #428]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eeb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eeb8:	4b6a      	ldr	r3, [pc, #424]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eeba:	496c      	ldr	r1, [pc, #432]	@ (800f06c <HAL_RCC_OscConfig+0x690>)
 800eebc:	400a      	ands	r2, r1
 800eebe:	651a      	str	r2, [r3, #80]	@ 0x50
 800eec0:	4b68      	ldr	r3, [pc, #416]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eec2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eec4:	4b67      	ldr	r3, [pc, #412]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eec6:	496b      	ldr	r1, [pc, #428]	@ (800f074 <HAL_RCC_OscConfig+0x698>)
 800eec8:	400a      	ands	r2, r1
 800eeca:	651a      	str	r2, [r3, #80]	@ 0x50
 800eecc:	e020      	b.n	800ef10 <HAL_RCC_OscConfig+0x534>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	689a      	ldr	r2, [r3, #8]
 800eed2:	23a0      	movs	r3, #160	@ 0xa0
 800eed4:	00db      	lsls	r3, r3, #3
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d10e      	bne.n	800eef8 <HAL_RCC_OscConfig+0x51c>
 800eeda:	4b62      	ldr	r3, [pc, #392]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eedc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eede:	4b61      	ldr	r3, [pc, #388]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eee0:	2180      	movs	r1, #128	@ 0x80
 800eee2:	00c9      	lsls	r1, r1, #3
 800eee4:	430a      	orrs	r2, r1
 800eee6:	651a      	str	r2, [r3, #80]	@ 0x50
 800eee8:	4b5e      	ldr	r3, [pc, #376]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eeea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eeec:	4b5d      	ldr	r3, [pc, #372]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eeee:	2180      	movs	r1, #128	@ 0x80
 800eef0:	0049      	lsls	r1, r1, #1
 800eef2:	430a      	orrs	r2, r1
 800eef4:	651a      	str	r2, [r3, #80]	@ 0x50
 800eef6:	e00b      	b.n	800ef10 <HAL_RCC_OscConfig+0x534>
 800eef8:	4b5a      	ldr	r3, [pc, #360]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eefa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eefc:	4b59      	ldr	r3, [pc, #356]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800eefe:	495b      	ldr	r1, [pc, #364]	@ (800f06c <HAL_RCC_OscConfig+0x690>)
 800ef00:	400a      	ands	r2, r1
 800ef02:	651a      	str	r2, [r3, #80]	@ 0x50
 800ef04:	4b57      	ldr	r3, [pc, #348]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ef06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef08:	4b56      	ldr	r3, [pc, #344]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ef0a:	495a      	ldr	r1, [pc, #360]	@ (800f074 <HAL_RCC_OscConfig+0x698>)
 800ef0c:	400a      	ands	r2, r1
 800ef0e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d015      	beq.n	800ef44 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef18:	f7fa f9de 	bl	80092d8 <HAL_GetTick>
 800ef1c:	0003      	movs	r3, r0
 800ef1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ef20:	e009      	b.n	800ef36 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef22:	f7fa f9d9 	bl	80092d8 <HAL_GetTick>
 800ef26:	0002      	movs	r2, r0
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	1ad3      	subs	r3, r2, r3
 800ef2c:	4a52      	ldr	r2, [pc, #328]	@ (800f078 <HAL_RCC_OscConfig+0x69c>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d901      	bls.n	800ef36 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800ef32:	2303      	movs	r3, #3
 800ef34:	e11b      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ef36:	4b4b      	ldr	r3, [pc, #300]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ef38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef3a:	2380      	movs	r3, #128	@ 0x80
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	4013      	ands	r3, r2
 800ef40:	d0ef      	beq.n	800ef22 <HAL_RCC_OscConfig+0x546>
 800ef42:	e014      	b.n	800ef6e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef44:	f7fa f9c8 	bl	80092d8 <HAL_GetTick>
 800ef48:	0003      	movs	r3, r0
 800ef4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ef4c:	e009      	b.n	800ef62 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef4e:	f7fa f9c3 	bl	80092d8 <HAL_GetTick>
 800ef52:	0002      	movs	r2, r0
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	1ad3      	subs	r3, r2, r3
 800ef58:	4a47      	ldr	r2, [pc, #284]	@ (800f078 <HAL_RCC_OscConfig+0x69c>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d901      	bls.n	800ef62 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e105      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ef62:	4b40      	ldr	r3, [pc, #256]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ef64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef66:	2380      	movs	r3, #128	@ 0x80
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	4013      	ands	r3, r2
 800ef6c:	d1ef      	bne.n	800ef4e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ef6e:	2323      	movs	r3, #35	@ 0x23
 800ef70:	18fb      	adds	r3, r7, r3
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d105      	bne.n	800ef84 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ef78:	4b3a      	ldr	r3, [pc, #232]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ef7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef7c:	4b39      	ldr	r3, [pc, #228]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ef7e:	493f      	ldr	r1, [pc, #252]	@ (800f07c <HAL_RCC_OscConfig+0x6a0>)
 800ef80:	400a      	ands	r2, r1
 800ef82:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2220      	movs	r2, #32
 800ef8a:	4013      	ands	r3, r2
 800ef8c:	d049      	beq.n	800f022 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	699b      	ldr	r3, [r3, #24]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d026      	beq.n	800efe4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800ef96:	4b33      	ldr	r3, [pc, #204]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ef98:	689a      	ldr	r2, [r3, #8]
 800ef9a:	4b32      	ldr	r3, [pc, #200]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800ef9c:	2101      	movs	r1, #1
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	609a      	str	r2, [r3, #8]
 800efa2:	4b30      	ldr	r3, [pc, #192]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800efa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efa6:	4b2f      	ldr	r3, [pc, #188]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800efa8:	2101      	movs	r1, #1
 800efaa:	430a      	orrs	r2, r1
 800efac:	635a      	str	r2, [r3, #52]	@ 0x34
 800efae:	4b34      	ldr	r3, [pc, #208]	@ (800f080 <HAL_RCC_OscConfig+0x6a4>)
 800efb0:	6a1a      	ldr	r2, [r3, #32]
 800efb2:	4b33      	ldr	r3, [pc, #204]	@ (800f080 <HAL_RCC_OscConfig+0x6a4>)
 800efb4:	2180      	movs	r1, #128	@ 0x80
 800efb6:	0189      	lsls	r1, r1, #6
 800efb8:	430a      	orrs	r2, r1
 800efba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800efbc:	f7fa f98c 	bl	80092d8 <HAL_GetTick>
 800efc0:	0003      	movs	r3, r0
 800efc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800efc4:	e008      	b.n	800efd8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800efc6:	f7fa f987 	bl	80092d8 <HAL_GetTick>
 800efca:	0002      	movs	r2, r0
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	1ad3      	subs	r3, r2, r3
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d901      	bls.n	800efd8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800efd4:	2303      	movs	r3, #3
 800efd6:	e0ca      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800efd8:	4b22      	ldr	r3, [pc, #136]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	2202      	movs	r2, #2
 800efde:	4013      	ands	r3, r2
 800efe0:	d0f1      	beq.n	800efc6 <HAL_RCC_OscConfig+0x5ea>
 800efe2:	e01e      	b.n	800f022 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800efe4:	4b1f      	ldr	r3, [pc, #124]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800efe6:	689a      	ldr	r2, [r3, #8]
 800efe8:	4b1e      	ldr	r3, [pc, #120]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800efea:	2101      	movs	r1, #1
 800efec:	438a      	bics	r2, r1
 800efee:	609a      	str	r2, [r3, #8]
 800eff0:	4b23      	ldr	r3, [pc, #140]	@ (800f080 <HAL_RCC_OscConfig+0x6a4>)
 800eff2:	6a1a      	ldr	r2, [r3, #32]
 800eff4:	4b22      	ldr	r3, [pc, #136]	@ (800f080 <HAL_RCC_OscConfig+0x6a4>)
 800eff6:	4923      	ldr	r1, [pc, #140]	@ (800f084 <HAL_RCC_OscConfig+0x6a8>)
 800eff8:	400a      	ands	r2, r1
 800effa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800effc:	f7fa f96c 	bl	80092d8 <HAL_GetTick>
 800f000:	0003      	movs	r3, r0
 800f002:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f004:	e008      	b.n	800f018 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f006:	f7fa f967 	bl	80092d8 <HAL_GetTick>
 800f00a:	0002      	movs	r2, r0
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	2b02      	cmp	r3, #2
 800f012:	d901      	bls.n	800f018 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800f014:	2303      	movs	r3, #3
 800f016:	e0aa      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f018:	4b12      	ldr	r3, [pc, #72]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	2202      	movs	r2, #2
 800f01e:	4013      	ands	r3, r2
 800f020:	d1f1      	bne.n	800f006 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f026:	2b00      	cmp	r3, #0
 800f028:	d100      	bne.n	800f02c <HAL_RCC_OscConfig+0x650>
 800f02a:	e09f      	b.n	800f16c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	2b0c      	cmp	r3, #12
 800f030:	d100      	bne.n	800f034 <HAL_RCC_OscConfig+0x658>
 800f032:	e078      	b.n	800f126 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f038:	2b02      	cmp	r3, #2
 800f03a:	d159      	bne.n	800f0f0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f03c:	4b09      	ldr	r3, [pc, #36]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	4b08      	ldr	r3, [pc, #32]	@ (800f064 <HAL_RCC_OscConfig+0x688>)
 800f042:	4911      	ldr	r1, [pc, #68]	@ (800f088 <HAL_RCC_OscConfig+0x6ac>)
 800f044:	400a      	ands	r2, r1
 800f046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f048:	f7fa f946 	bl	80092d8 <HAL_GetTick>
 800f04c:	0003      	movs	r3, r0
 800f04e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f050:	e01c      	b.n	800f08c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f052:	f7fa f941 	bl	80092d8 <HAL_GetTick>
 800f056:	0002      	movs	r2, r0
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	1ad3      	subs	r3, r2, r3
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	d915      	bls.n	800f08c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800f060:	2303      	movs	r3, #3
 800f062:	e084      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
 800f064:	40021000 	.word	0x40021000
 800f068:	ffff1fff 	.word	0xffff1fff
 800f06c:	fffffeff 	.word	0xfffffeff
 800f070:	40007000 	.word	0x40007000
 800f074:	fffffbff 	.word	0xfffffbff
 800f078:	00001388 	.word	0x00001388
 800f07c:	efffffff 	.word	0xefffffff
 800f080:	40010000 	.word	0x40010000
 800f084:	ffffdfff 	.word	0xffffdfff
 800f088:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f08c:	4b3a      	ldr	r3, [pc, #232]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	2380      	movs	r3, #128	@ 0x80
 800f092:	049b      	lsls	r3, r3, #18
 800f094:	4013      	ands	r3, r2
 800f096:	d1dc      	bne.n	800f052 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f098:	4b37      	ldr	r3, [pc, #220]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	4a37      	ldr	r2, [pc, #220]	@ (800f17c <HAL_RCC_OscConfig+0x7a0>)
 800f09e:	4013      	ands	r3, r2
 800f0a0:	0019      	movs	r1, r3
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0aa:	431a      	orrs	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0b0:	431a      	orrs	r2, r3
 800f0b2:	4b31      	ldr	r3, [pc, #196]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f0b4:	430a      	orrs	r2, r1
 800f0b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f0b8:	4b2f      	ldr	r3, [pc, #188]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	4b2e      	ldr	r3, [pc, #184]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f0be:	2180      	movs	r1, #128	@ 0x80
 800f0c0:	0449      	lsls	r1, r1, #17
 800f0c2:	430a      	orrs	r2, r1
 800f0c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f0c6:	f7fa f907 	bl	80092d8 <HAL_GetTick>
 800f0ca:	0003      	movs	r3, r0
 800f0cc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800f0ce:	e008      	b.n	800f0e2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f0d0:	f7fa f902 	bl	80092d8 <HAL_GetTick>
 800f0d4:	0002      	movs	r2, r0
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	1ad3      	subs	r3, r2, r3
 800f0da:	2b02      	cmp	r3, #2
 800f0dc:	d901      	bls.n	800f0e2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800f0de:	2303      	movs	r3, #3
 800f0e0:	e045      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800f0e2:	4b25      	ldr	r3, [pc, #148]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	2380      	movs	r3, #128	@ 0x80
 800f0e8:	049b      	lsls	r3, r3, #18
 800f0ea:	4013      	ands	r3, r2
 800f0ec:	d0f0      	beq.n	800f0d0 <HAL_RCC_OscConfig+0x6f4>
 800f0ee:	e03d      	b.n	800f16c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f0f0:	4b21      	ldr	r3, [pc, #132]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	4b20      	ldr	r3, [pc, #128]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f0f6:	4922      	ldr	r1, [pc, #136]	@ (800f180 <HAL_RCC_OscConfig+0x7a4>)
 800f0f8:	400a      	ands	r2, r1
 800f0fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f0fc:	f7fa f8ec 	bl	80092d8 <HAL_GetTick>
 800f100:	0003      	movs	r3, r0
 800f102:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f104:	e008      	b.n	800f118 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f106:	f7fa f8e7 	bl	80092d8 <HAL_GetTick>
 800f10a:	0002      	movs	r2, r0
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	2b02      	cmp	r3, #2
 800f112:	d901      	bls.n	800f118 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800f114:	2303      	movs	r3, #3
 800f116:	e02a      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f118:	4b17      	ldr	r3, [pc, #92]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	2380      	movs	r3, #128	@ 0x80
 800f11e:	049b      	lsls	r3, r3, #18
 800f120:	4013      	ands	r3, r2
 800f122:	d1f0      	bne.n	800f106 <HAL_RCC_OscConfig+0x72a>
 800f124:	e022      	b.n	800f16c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d101      	bne.n	800f132 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800f12e:	2301      	movs	r3, #1
 800f130:	e01d      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800f132:	4b11      	ldr	r3, [pc, #68]	@ (800f178 <HAL_RCC_OscConfig+0x79c>)
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f138:	69ba      	ldr	r2, [r7, #24]
 800f13a:	2380      	movs	r3, #128	@ 0x80
 800f13c:	025b      	lsls	r3, r3, #9
 800f13e:	401a      	ands	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f144:	429a      	cmp	r2, r3
 800f146:	d10f      	bne.n	800f168 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800f148:	69ba      	ldr	r2, [r7, #24]
 800f14a:	23f0      	movs	r3, #240	@ 0xf0
 800f14c:	039b      	lsls	r3, r3, #14
 800f14e:	401a      	ands	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f154:	429a      	cmp	r2, r3
 800f156:	d107      	bne.n	800f168 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800f158:	69ba      	ldr	r2, [r7, #24]
 800f15a:	23c0      	movs	r3, #192	@ 0xc0
 800f15c:	041b      	lsls	r3, r3, #16
 800f15e:	401a      	ands	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800f164:	429a      	cmp	r2, r3
 800f166:	d001      	beq.n	800f16c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800f168:	2301      	movs	r3, #1
 800f16a:	e000      	b.n	800f16e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	0018      	movs	r0, r3
 800f170:	46bd      	mov	sp, r7
 800f172:	b00a      	add	sp, #40	@ 0x28
 800f174:	bdb0      	pop	{r4, r5, r7, pc}
 800f176:	46c0      	nop			@ (mov r8, r8)
 800f178:	40021000 	.word	0x40021000
 800f17c:	ff02ffff 	.word	0xff02ffff
 800f180:	feffffff 	.word	0xfeffffff

0800f184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f184:	b5b0      	push	{r4, r5, r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d101      	bne.n	800f198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f194:	2301      	movs	r3, #1
 800f196:	e128      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f198:	4b96      	ldr	r3, [pc, #600]	@ (800f3f4 <HAL_RCC_ClockConfig+0x270>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2201      	movs	r2, #1
 800f19e:	4013      	ands	r3, r2
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d91e      	bls.n	800f1e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1a6:	4b93      	ldr	r3, [pc, #588]	@ (800f3f4 <HAL_RCC_ClockConfig+0x270>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	4393      	bics	r3, r2
 800f1ae:	0019      	movs	r1, r3
 800f1b0:	4b90      	ldr	r3, [pc, #576]	@ (800f3f4 <HAL_RCC_ClockConfig+0x270>)
 800f1b2:	683a      	ldr	r2, [r7, #0]
 800f1b4:	430a      	orrs	r2, r1
 800f1b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800f1b8:	f7fa f88e 	bl	80092d8 <HAL_GetTick>
 800f1bc:	0003      	movs	r3, r0
 800f1be:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1c0:	e009      	b.n	800f1d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f1c2:	f7fa f889 	bl	80092d8 <HAL_GetTick>
 800f1c6:	0002      	movs	r2, r0
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	4a8a      	ldr	r2, [pc, #552]	@ (800f3f8 <HAL_RCC_ClockConfig+0x274>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d901      	bls.n	800f1d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800f1d2:	2303      	movs	r3, #3
 800f1d4:	e109      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1d6:	4b87      	ldr	r3, [pc, #540]	@ (800f3f4 <HAL_RCC_ClockConfig+0x270>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	4013      	ands	r3, r2
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d1ee      	bne.n	800f1c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2202      	movs	r2, #2
 800f1ea:	4013      	ands	r3, r2
 800f1ec:	d009      	beq.n	800f202 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f1ee:	4b83      	ldr	r3, [pc, #524]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	22f0      	movs	r2, #240	@ 0xf0
 800f1f4:	4393      	bics	r3, r2
 800f1f6:	0019      	movs	r1, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	689a      	ldr	r2, [r3, #8]
 800f1fc:	4b7f      	ldr	r3, [pc, #508]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f1fe:	430a      	orrs	r2, r1
 800f200:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2201      	movs	r2, #1
 800f208:	4013      	ands	r3, r2
 800f20a:	d100      	bne.n	800f20e <HAL_RCC_ClockConfig+0x8a>
 800f20c:	e089      	b.n	800f322 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	2b02      	cmp	r3, #2
 800f214:	d107      	bne.n	800f226 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f216:	4b79      	ldr	r3, [pc, #484]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	2380      	movs	r3, #128	@ 0x80
 800f21c:	029b      	lsls	r3, r3, #10
 800f21e:	4013      	ands	r3, r2
 800f220:	d120      	bne.n	800f264 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f222:	2301      	movs	r3, #1
 800f224:	e0e1      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d107      	bne.n	800f23e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f22e:	4b73      	ldr	r3, [pc, #460]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	2380      	movs	r3, #128	@ 0x80
 800f234:	049b      	lsls	r3, r3, #18
 800f236:	4013      	ands	r3, r2
 800f238:	d114      	bne.n	800f264 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f23a:	2301      	movs	r3, #1
 800f23c:	e0d5      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d106      	bne.n	800f254 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f246:	4b6d      	ldr	r3, [pc, #436]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2204      	movs	r2, #4
 800f24c:	4013      	ands	r3, r2
 800f24e:	d109      	bne.n	800f264 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f250:	2301      	movs	r3, #1
 800f252:	e0ca      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800f254:	4b69      	ldr	r3, [pc, #420]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	2380      	movs	r3, #128	@ 0x80
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4013      	ands	r3, r2
 800f25e:	d101      	bne.n	800f264 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f260:	2301      	movs	r3, #1
 800f262:	e0c2      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f264:	4b65      	ldr	r3, [pc, #404]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	2203      	movs	r2, #3
 800f26a:	4393      	bics	r3, r2
 800f26c:	0019      	movs	r1, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	685a      	ldr	r2, [r3, #4]
 800f272:	4b62      	ldr	r3, [pc, #392]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f274:	430a      	orrs	r2, r1
 800f276:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f278:	f7fa f82e 	bl	80092d8 <HAL_GetTick>
 800f27c:	0003      	movs	r3, r0
 800f27e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	2b02      	cmp	r3, #2
 800f286:	d111      	bne.n	800f2ac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800f288:	e009      	b.n	800f29e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f28a:	f7fa f825 	bl	80092d8 <HAL_GetTick>
 800f28e:	0002      	movs	r2, r0
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	4a58      	ldr	r2, [pc, #352]	@ (800f3f8 <HAL_RCC_ClockConfig+0x274>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d901      	bls.n	800f29e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800f29a:	2303      	movs	r3, #3
 800f29c:	e0a5      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800f29e:	4b57      	ldr	r3, [pc, #348]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	220c      	movs	r2, #12
 800f2a4:	4013      	ands	r3, r2
 800f2a6:	2b08      	cmp	r3, #8
 800f2a8:	d1ef      	bne.n	800f28a <HAL_RCC_ClockConfig+0x106>
 800f2aa:	e03a      	b.n	800f322 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d111      	bne.n	800f2d8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f2b4:	e009      	b.n	800f2ca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f2b6:	f7fa f80f 	bl	80092d8 <HAL_GetTick>
 800f2ba:	0002      	movs	r2, r0
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	4a4d      	ldr	r2, [pc, #308]	@ (800f3f8 <HAL_RCC_ClockConfig+0x274>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d901      	bls.n	800f2ca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800f2c6:	2303      	movs	r3, #3
 800f2c8:	e08f      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f2ca:	4b4c      	ldr	r3, [pc, #304]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f2cc:	68db      	ldr	r3, [r3, #12]
 800f2ce:	220c      	movs	r2, #12
 800f2d0:	4013      	ands	r3, r2
 800f2d2:	2b0c      	cmp	r3, #12
 800f2d4:	d1ef      	bne.n	800f2b6 <HAL_RCC_ClockConfig+0x132>
 800f2d6:	e024      	b.n	800f322 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d11b      	bne.n	800f318 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f2e0:	e009      	b.n	800f2f6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f2e2:	f7f9 fff9 	bl	80092d8 <HAL_GetTick>
 800f2e6:	0002      	movs	r2, r0
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	4a42      	ldr	r2, [pc, #264]	@ (800f3f8 <HAL_RCC_ClockConfig+0x274>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d901      	bls.n	800f2f6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800f2f2:	2303      	movs	r3, #3
 800f2f4:	e079      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f2f6:	4b41      	ldr	r3, [pc, #260]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	220c      	movs	r2, #12
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	2b04      	cmp	r3, #4
 800f300:	d1ef      	bne.n	800f2e2 <HAL_RCC_ClockConfig+0x15e>
 800f302:	e00e      	b.n	800f322 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f304:	f7f9 ffe8 	bl	80092d8 <HAL_GetTick>
 800f308:	0002      	movs	r2, r0
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	1ad3      	subs	r3, r2, r3
 800f30e:	4a3a      	ldr	r2, [pc, #232]	@ (800f3f8 <HAL_RCC_ClockConfig+0x274>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d901      	bls.n	800f318 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800f314:	2303      	movs	r3, #3
 800f316:	e068      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800f318:	4b38      	ldr	r3, [pc, #224]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	220c      	movs	r2, #12
 800f31e:	4013      	ands	r3, r2
 800f320:	d1f0      	bne.n	800f304 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f322:	4b34      	ldr	r3, [pc, #208]	@ (800f3f4 <HAL_RCC_ClockConfig+0x270>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	2201      	movs	r2, #1
 800f328:	4013      	ands	r3, r2
 800f32a:	683a      	ldr	r2, [r7, #0]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d21e      	bcs.n	800f36e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f330:	4b30      	ldr	r3, [pc, #192]	@ (800f3f4 <HAL_RCC_ClockConfig+0x270>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2201      	movs	r2, #1
 800f336:	4393      	bics	r3, r2
 800f338:	0019      	movs	r1, r3
 800f33a:	4b2e      	ldr	r3, [pc, #184]	@ (800f3f4 <HAL_RCC_ClockConfig+0x270>)
 800f33c:	683a      	ldr	r2, [r7, #0]
 800f33e:	430a      	orrs	r2, r1
 800f340:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800f342:	f7f9 ffc9 	bl	80092d8 <HAL_GetTick>
 800f346:	0003      	movs	r3, r0
 800f348:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f34a:	e009      	b.n	800f360 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f34c:	f7f9 ffc4 	bl	80092d8 <HAL_GetTick>
 800f350:	0002      	movs	r2, r0
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	1ad3      	subs	r3, r2, r3
 800f356:	4a28      	ldr	r2, [pc, #160]	@ (800f3f8 <HAL_RCC_ClockConfig+0x274>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d901      	bls.n	800f360 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800f35c:	2303      	movs	r3, #3
 800f35e:	e044      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f360:	4b24      	ldr	r3, [pc, #144]	@ (800f3f4 <HAL_RCC_ClockConfig+0x270>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2201      	movs	r2, #1
 800f366:	4013      	ands	r3, r2
 800f368:	683a      	ldr	r2, [r7, #0]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d1ee      	bne.n	800f34c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2204      	movs	r2, #4
 800f374:	4013      	ands	r3, r2
 800f376:	d009      	beq.n	800f38c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f378:	4b20      	ldr	r3, [pc, #128]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	4a20      	ldr	r2, [pc, #128]	@ (800f400 <HAL_RCC_ClockConfig+0x27c>)
 800f37e:	4013      	ands	r3, r2
 800f380:	0019      	movs	r1, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	68da      	ldr	r2, [r3, #12]
 800f386:	4b1d      	ldr	r3, [pc, #116]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f388:	430a      	orrs	r2, r1
 800f38a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2208      	movs	r2, #8
 800f392:	4013      	ands	r3, r2
 800f394:	d00a      	beq.n	800f3ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f396:	4b19      	ldr	r3, [pc, #100]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	4a1a      	ldr	r2, [pc, #104]	@ (800f404 <HAL_RCC_ClockConfig+0x280>)
 800f39c:	4013      	ands	r3, r2
 800f39e:	0019      	movs	r1, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	691b      	ldr	r3, [r3, #16]
 800f3a4:	00da      	lsls	r2, r3, #3
 800f3a6:	4b15      	ldr	r3, [pc, #84]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f3a8:	430a      	orrs	r2, r1
 800f3aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f3ac:	f000 f832 	bl	800f414 <HAL_RCC_GetSysClockFreq>
 800f3b0:	0001      	movs	r1, r0
 800f3b2:	4b12      	ldr	r3, [pc, #72]	@ (800f3fc <HAL_RCC_ClockConfig+0x278>)
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	091b      	lsrs	r3, r3, #4
 800f3b8:	220f      	movs	r2, #15
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	4a12      	ldr	r2, [pc, #72]	@ (800f408 <HAL_RCC_ClockConfig+0x284>)
 800f3be:	5cd3      	ldrb	r3, [r2, r3]
 800f3c0:	000a      	movs	r2, r1
 800f3c2:	40da      	lsrs	r2, r3
 800f3c4:	4b11      	ldr	r3, [pc, #68]	@ (800f40c <HAL_RCC_ClockConfig+0x288>)
 800f3c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f3c8:	4b11      	ldr	r3, [pc, #68]	@ (800f410 <HAL_RCC_ClockConfig+0x28c>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	250b      	movs	r5, #11
 800f3ce:	197c      	adds	r4, r7, r5
 800f3d0:	0018      	movs	r0, r3
 800f3d2:	f7f9 ff3b 	bl	800924c <HAL_InitTick>
 800f3d6:	0003      	movs	r3, r0
 800f3d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800f3da:	197b      	adds	r3, r7, r5
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d002      	beq.n	800f3e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800f3e2:	197b      	adds	r3, r7, r5
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	e000      	b.n	800f3ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	0018      	movs	r0, r3
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	b004      	add	sp, #16
 800f3f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f3f2:	46c0      	nop			@ (mov r8, r8)
 800f3f4:	40022000 	.word	0x40022000
 800f3f8:	00001388 	.word	0x00001388
 800f3fc:	40021000 	.word	0x40021000
 800f400:	fffff8ff 	.word	0xfffff8ff
 800f404:	ffffc7ff 	.word	0xffffc7ff
 800f408:	0801a40c 	.word	0x0801a40c
 800f40c:	2000013c 	.word	0x2000013c
 800f410:	20000150 	.word	0x20000150

0800f414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f414:	b5b0      	push	{r4, r5, r7, lr}
 800f416:	b08e      	sub	sp, #56	@ 0x38
 800f418:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800f41a:	4b4c      	ldr	r3, [pc, #304]	@ (800f54c <HAL_RCC_GetSysClockFreq+0x138>)
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f422:	230c      	movs	r3, #12
 800f424:	4013      	ands	r3, r2
 800f426:	2b0c      	cmp	r3, #12
 800f428:	d014      	beq.n	800f454 <HAL_RCC_GetSysClockFreq+0x40>
 800f42a:	d900      	bls.n	800f42e <HAL_RCC_GetSysClockFreq+0x1a>
 800f42c:	e07b      	b.n	800f526 <HAL_RCC_GetSysClockFreq+0x112>
 800f42e:	2b04      	cmp	r3, #4
 800f430:	d002      	beq.n	800f438 <HAL_RCC_GetSysClockFreq+0x24>
 800f432:	2b08      	cmp	r3, #8
 800f434:	d00b      	beq.n	800f44e <HAL_RCC_GetSysClockFreq+0x3a>
 800f436:	e076      	b.n	800f526 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f438:	4b44      	ldr	r3, [pc, #272]	@ (800f54c <HAL_RCC_GetSysClockFreq+0x138>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2210      	movs	r2, #16
 800f43e:	4013      	ands	r3, r2
 800f440:	d002      	beq.n	800f448 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800f442:	4b43      	ldr	r3, [pc, #268]	@ (800f550 <HAL_RCC_GetSysClockFreq+0x13c>)
 800f444:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800f446:	e07c      	b.n	800f542 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800f448:	4b42      	ldr	r3, [pc, #264]	@ (800f554 <HAL_RCC_GetSysClockFreq+0x140>)
 800f44a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f44c:	e079      	b.n	800f542 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f44e:	4b42      	ldr	r3, [pc, #264]	@ (800f558 <HAL_RCC_GetSysClockFreq+0x144>)
 800f450:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f452:	e076      	b.n	800f542 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800f454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f456:	0c9a      	lsrs	r2, r3, #18
 800f458:	230f      	movs	r3, #15
 800f45a:	401a      	ands	r2, r3
 800f45c:	4b3f      	ldr	r3, [pc, #252]	@ (800f55c <HAL_RCC_GetSysClockFreq+0x148>)
 800f45e:	5c9b      	ldrb	r3, [r3, r2]
 800f460:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800f462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f464:	0d9a      	lsrs	r2, r3, #22
 800f466:	2303      	movs	r3, #3
 800f468:	4013      	ands	r3, r2
 800f46a:	3301      	adds	r3, #1
 800f46c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f46e:	4b37      	ldr	r3, [pc, #220]	@ (800f54c <HAL_RCC_GetSysClockFreq+0x138>)
 800f470:	68da      	ldr	r2, [r3, #12]
 800f472:	2380      	movs	r3, #128	@ 0x80
 800f474:	025b      	lsls	r3, r3, #9
 800f476:	4013      	ands	r3, r2
 800f478:	d01a      	beq.n	800f4b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f47c:	61bb      	str	r3, [r7, #24]
 800f47e:	2300      	movs	r3, #0
 800f480:	61fb      	str	r3, [r7, #28]
 800f482:	4a35      	ldr	r2, [pc, #212]	@ (800f558 <HAL_RCC_GetSysClockFreq+0x144>)
 800f484:	2300      	movs	r3, #0
 800f486:	69b8      	ldr	r0, [r7, #24]
 800f488:	69f9      	ldr	r1, [r7, #28]
 800f48a:	f7f1 f867 	bl	800055c <__aeabi_lmul>
 800f48e:	0002      	movs	r2, r0
 800f490:	000b      	movs	r3, r1
 800f492:	0010      	movs	r0, r2
 800f494:	0019      	movs	r1, r3
 800f496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f498:	613b      	str	r3, [r7, #16]
 800f49a:	2300      	movs	r3, #0
 800f49c:	617b      	str	r3, [r7, #20]
 800f49e:	693a      	ldr	r2, [r7, #16]
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	f7f1 f83b 	bl	800051c <__aeabi_uldivmod>
 800f4a6:	0002      	movs	r2, r0
 800f4a8:	000b      	movs	r3, r1
 800f4aa:	0013      	movs	r3, r2
 800f4ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4ae:	e037      	b.n	800f520 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f4b0:	4b26      	ldr	r3, [pc, #152]	@ (800f54c <HAL_RCC_GetSysClockFreq+0x138>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2210      	movs	r2, #16
 800f4b6:	4013      	ands	r3, r2
 800f4b8:	d01a      	beq.n	800f4f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800f4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4bc:	60bb      	str	r3, [r7, #8]
 800f4be:	2300      	movs	r3, #0
 800f4c0:	60fb      	str	r3, [r7, #12]
 800f4c2:	4a23      	ldr	r2, [pc, #140]	@ (800f550 <HAL_RCC_GetSysClockFreq+0x13c>)
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	68b8      	ldr	r0, [r7, #8]
 800f4c8:	68f9      	ldr	r1, [r7, #12]
 800f4ca:	f7f1 f847 	bl	800055c <__aeabi_lmul>
 800f4ce:	0002      	movs	r2, r0
 800f4d0:	000b      	movs	r3, r1
 800f4d2:	0010      	movs	r0, r2
 800f4d4:	0019      	movs	r1, r3
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d8:	603b      	str	r3, [r7, #0]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	607b      	str	r3, [r7, #4]
 800f4de:	683a      	ldr	r2, [r7, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f7f1 f81b 	bl	800051c <__aeabi_uldivmod>
 800f4e6:	0002      	movs	r2, r0
 800f4e8:	000b      	movs	r3, r1
 800f4ea:	0013      	movs	r3, r2
 800f4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4ee:	e017      	b.n	800f520 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f2:	0018      	movs	r0, r3
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	0019      	movs	r1, r3
 800f4f8:	4a16      	ldr	r2, [pc, #88]	@ (800f554 <HAL_RCC_GetSysClockFreq+0x140>)
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f7f1 f82e 	bl	800055c <__aeabi_lmul>
 800f500:	0002      	movs	r2, r0
 800f502:	000b      	movs	r3, r1
 800f504:	0010      	movs	r0, r2
 800f506:	0019      	movs	r1, r3
 800f508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50a:	001c      	movs	r4, r3
 800f50c:	2300      	movs	r3, #0
 800f50e:	001d      	movs	r5, r3
 800f510:	0022      	movs	r2, r4
 800f512:	002b      	movs	r3, r5
 800f514:	f7f1 f802 	bl	800051c <__aeabi_uldivmod>
 800f518:	0002      	movs	r2, r0
 800f51a:	000b      	movs	r3, r1
 800f51c:	0013      	movs	r3, r2
 800f51e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800f520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f522:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f524:	e00d      	b.n	800f542 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800f526:	4b09      	ldr	r3, [pc, #36]	@ (800f54c <HAL_RCC_GetSysClockFreq+0x138>)
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	0b5b      	lsrs	r3, r3, #13
 800f52c:	2207      	movs	r2, #7
 800f52e:	4013      	ands	r3, r2
 800f530:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	3301      	adds	r3, #1
 800f536:	2280      	movs	r2, #128	@ 0x80
 800f538:	0212      	lsls	r2, r2, #8
 800f53a:	409a      	lsls	r2, r3
 800f53c:	0013      	movs	r3, r2
 800f53e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f540:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800f542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800f544:	0018      	movs	r0, r3
 800f546:	46bd      	mov	sp, r7
 800f548:	b00e      	add	sp, #56	@ 0x38
 800f54a:	bdb0      	pop	{r4, r5, r7, pc}
 800f54c:	40021000 	.word	0x40021000
 800f550:	003d0900 	.word	0x003d0900
 800f554:	00f42400 	.word	0x00f42400
 800f558:	007a1200 	.word	0x007a1200
 800f55c:	0801a424 	.word	0x0801a424

0800f560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f564:	4b02      	ldr	r3, [pc, #8]	@ (800f570 <HAL_RCC_GetHCLKFreq+0x10>)
 800f566:	681b      	ldr	r3, [r3, #0]
}
 800f568:	0018      	movs	r0, r3
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	46c0      	nop			@ (mov r8, r8)
 800f570:	2000013c 	.word	0x2000013c

0800f574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f578:	f7ff fff2 	bl	800f560 <HAL_RCC_GetHCLKFreq>
 800f57c:	0001      	movs	r1, r0
 800f57e:	4b06      	ldr	r3, [pc, #24]	@ (800f598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	0a1b      	lsrs	r3, r3, #8
 800f584:	2207      	movs	r2, #7
 800f586:	4013      	ands	r3, r2
 800f588:	4a04      	ldr	r2, [pc, #16]	@ (800f59c <HAL_RCC_GetPCLK1Freq+0x28>)
 800f58a:	5cd3      	ldrb	r3, [r2, r3]
 800f58c:	40d9      	lsrs	r1, r3
 800f58e:	000b      	movs	r3, r1
}
 800f590:	0018      	movs	r0, r3
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	46c0      	nop			@ (mov r8, r8)
 800f598:	40021000 	.word	0x40021000
 800f59c:	0801a41c 	.word	0x0801a41c

0800f5a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f5a4:	f7ff ffdc 	bl	800f560 <HAL_RCC_GetHCLKFreq>
 800f5a8:	0001      	movs	r1, r0
 800f5aa:	4b06      	ldr	r3, [pc, #24]	@ (800f5c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	0adb      	lsrs	r3, r3, #11
 800f5b0:	2207      	movs	r2, #7
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	4a04      	ldr	r2, [pc, #16]	@ (800f5c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f5b6:	5cd3      	ldrb	r3, [r2, r3]
 800f5b8:	40d9      	lsrs	r1, r3
 800f5ba:	000b      	movs	r3, r1
}
 800f5bc:	0018      	movs	r0, r3
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	46c0      	nop			@ (mov r8, r8)
 800f5c4:	40021000 	.word	0x40021000
 800f5c8:	0801a41c 	.word	0x0801a41c

0800f5cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800f5d4:	2017      	movs	r0, #23
 800f5d6:	183b      	adds	r3, r7, r0
 800f5d8:	2200      	movs	r2, #0
 800f5da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2220      	movs	r2, #32
 800f5e2:	4013      	ands	r3, r2
 800f5e4:	d100      	bne.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800f5e6:	e0c7      	b.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f5e8:	4b9b      	ldr	r3, [pc, #620]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5ec:	2380      	movs	r3, #128	@ 0x80
 800f5ee:	055b      	lsls	r3, r3, #21
 800f5f0:	4013      	ands	r3, r2
 800f5f2:	d109      	bne.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f5f4:	4b98      	ldr	r3, [pc, #608]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5f8:	4b97      	ldr	r3, [pc, #604]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5fa:	2180      	movs	r1, #128	@ 0x80
 800f5fc:	0549      	lsls	r1, r1, #21
 800f5fe:	430a      	orrs	r2, r1
 800f600:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800f602:	183b      	adds	r3, r7, r0
 800f604:	2201      	movs	r2, #1
 800f606:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f608:	4b94      	ldr	r3, [pc, #592]	@ (800f85c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	2380      	movs	r3, #128	@ 0x80
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	4013      	ands	r3, r2
 800f612:	d11a      	bne.n	800f64a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f614:	4b91      	ldr	r3, [pc, #580]	@ (800f85c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	4b90      	ldr	r3, [pc, #576]	@ (800f85c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f61a:	2180      	movs	r1, #128	@ 0x80
 800f61c:	0049      	lsls	r1, r1, #1
 800f61e:	430a      	orrs	r2, r1
 800f620:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f622:	f7f9 fe59 	bl	80092d8 <HAL_GetTick>
 800f626:	0003      	movs	r3, r0
 800f628:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f62a:	e008      	b.n	800f63e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f62c:	f7f9 fe54 	bl	80092d8 <HAL_GetTick>
 800f630:	0002      	movs	r2, r0
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	1ad3      	subs	r3, r2, r3
 800f636:	2b64      	cmp	r3, #100	@ 0x64
 800f638:	d901      	bls.n	800f63e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800f63a:	2303      	movs	r3, #3
 800f63c:	e107      	b.n	800f84e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f63e:	4b87      	ldr	r3, [pc, #540]	@ (800f85c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	2380      	movs	r3, #128	@ 0x80
 800f644:	005b      	lsls	r3, r3, #1
 800f646:	4013      	ands	r3, r2
 800f648:	d0f0      	beq.n	800f62c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800f64a:	4b83      	ldr	r3, [pc, #524]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	23c0      	movs	r3, #192	@ 0xc0
 800f650:	039b      	lsls	r3, r3, #14
 800f652:	4013      	ands	r3, r2
 800f654:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	685a      	ldr	r2, [r3, #4]
 800f65a:	23c0      	movs	r3, #192	@ 0xc0
 800f65c:	039b      	lsls	r3, r3, #14
 800f65e:	4013      	ands	r3, r2
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	429a      	cmp	r2, r3
 800f664:	d013      	beq.n	800f68e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	685a      	ldr	r2, [r3, #4]
 800f66a:	23c0      	movs	r3, #192	@ 0xc0
 800f66c:	029b      	lsls	r3, r3, #10
 800f66e:	401a      	ands	r2, r3
 800f670:	23c0      	movs	r3, #192	@ 0xc0
 800f672:	029b      	lsls	r3, r3, #10
 800f674:	429a      	cmp	r2, r3
 800f676:	d10a      	bne.n	800f68e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f678:	4b77      	ldr	r3, [pc, #476]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	2380      	movs	r3, #128	@ 0x80
 800f67e:	029b      	lsls	r3, r3, #10
 800f680:	401a      	ands	r2, r3
 800f682:	2380      	movs	r3, #128	@ 0x80
 800f684:	029b      	lsls	r3, r3, #10
 800f686:	429a      	cmp	r2, r3
 800f688:	d101      	bne.n	800f68e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800f68a:	2301      	movs	r3, #1
 800f68c:	e0df      	b.n	800f84e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800f68e:	4b72      	ldr	r3, [pc, #456]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f690:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f692:	23c0      	movs	r3, #192	@ 0xc0
 800f694:	029b      	lsls	r3, r3, #10
 800f696:	4013      	ands	r3, r2
 800f698:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d03b      	beq.n	800f718 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	685a      	ldr	r2, [r3, #4]
 800f6a4:	23c0      	movs	r3, #192	@ 0xc0
 800f6a6:	029b      	lsls	r3, r3, #10
 800f6a8:	4013      	ands	r3, r2
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d033      	beq.n	800f718 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2220      	movs	r2, #32
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	d02e      	beq.n	800f718 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800f6ba:	4b67      	ldr	r3, [pc, #412]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6be:	4a68      	ldr	r2, [pc, #416]	@ (800f860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f6c0:	4013      	ands	r3, r2
 800f6c2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f6c4:	4b64      	ldr	r3, [pc, #400]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f6c8:	4b63      	ldr	r3, [pc, #396]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6ca:	2180      	movs	r1, #128	@ 0x80
 800f6cc:	0309      	lsls	r1, r1, #12
 800f6ce:	430a      	orrs	r2, r1
 800f6d0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f6d2:	4b61      	ldr	r3, [pc, #388]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f6d6:	4b60      	ldr	r3, [pc, #384]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6d8:	4962      	ldr	r1, [pc, #392]	@ (800f864 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800f6da:	400a      	ands	r2, r1
 800f6dc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800f6de:	4b5e      	ldr	r3, [pc, #376]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800f6e4:	68fa      	ldr	r2, [r7, #12]
 800f6e6:	2380      	movs	r3, #128	@ 0x80
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	4013      	ands	r3, r2
 800f6ec:	d014      	beq.n	800f718 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f6ee:	f7f9 fdf3 	bl	80092d8 <HAL_GetTick>
 800f6f2:	0003      	movs	r3, r0
 800f6f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f6f6:	e009      	b.n	800f70c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f6f8:	f7f9 fdee 	bl	80092d8 <HAL_GetTick>
 800f6fc:	0002      	movs	r2, r0
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	4a59      	ldr	r2, [pc, #356]	@ (800f868 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d901      	bls.n	800f70c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800f708:	2303      	movs	r3, #3
 800f70a:	e0a0      	b.n	800f84e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f70c:	4b52      	ldr	r3, [pc, #328]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f70e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f710:	2380      	movs	r3, #128	@ 0x80
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	4013      	ands	r3, r2
 800f716:	d0ef      	beq.n	800f6f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2220      	movs	r2, #32
 800f71e:	4013      	ands	r3, r2
 800f720:	d01f      	beq.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	685a      	ldr	r2, [r3, #4]
 800f726:	23c0      	movs	r3, #192	@ 0xc0
 800f728:	029b      	lsls	r3, r3, #10
 800f72a:	401a      	ands	r2, r3
 800f72c:	23c0      	movs	r3, #192	@ 0xc0
 800f72e:	029b      	lsls	r3, r3, #10
 800f730:	429a      	cmp	r2, r3
 800f732:	d10c      	bne.n	800f74e <HAL_RCCEx_PeriphCLKConfig+0x182>
 800f734:	4b48      	ldr	r3, [pc, #288]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a4c      	ldr	r2, [pc, #304]	@ (800f86c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800f73a:	4013      	ands	r3, r2
 800f73c:	0019      	movs	r1, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	685a      	ldr	r2, [r3, #4]
 800f742:	23c0      	movs	r3, #192	@ 0xc0
 800f744:	039b      	lsls	r3, r3, #14
 800f746:	401a      	ands	r2, r3
 800f748:	4b43      	ldr	r3, [pc, #268]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f74a:	430a      	orrs	r2, r1
 800f74c:	601a      	str	r2, [r3, #0]
 800f74e:	4b42      	ldr	r3, [pc, #264]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f750:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	685a      	ldr	r2, [r3, #4]
 800f756:	23c0      	movs	r3, #192	@ 0xc0
 800f758:	029b      	lsls	r3, r3, #10
 800f75a:	401a      	ands	r2, r3
 800f75c:	4b3e      	ldr	r3, [pc, #248]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f75e:	430a      	orrs	r2, r1
 800f760:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800f762:	2317      	movs	r3, #23
 800f764:	18fb      	adds	r3, r7, r3
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d105      	bne.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f76c:	4b3a      	ldr	r3, [pc, #232]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f76e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f770:	4b39      	ldr	r3, [pc, #228]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f772:	493f      	ldr	r1, [pc, #252]	@ (800f870 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800f774:	400a      	ands	r2, r1
 800f776:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2201      	movs	r2, #1
 800f77e:	4013      	ands	r3, r2
 800f780:	d009      	beq.n	800f796 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f782:	4b35      	ldr	r3, [pc, #212]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f786:	2203      	movs	r2, #3
 800f788:	4393      	bics	r3, r2
 800f78a:	0019      	movs	r1, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	689a      	ldr	r2, [r3, #8]
 800f790:	4b31      	ldr	r3, [pc, #196]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f792:	430a      	orrs	r2, r1
 800f794:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2202      	movs	r2, #2
 800f79c:	4013      	ands	r3, r2
 800f79e:	d009      	beq.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f7a0:	4b2d      	ldr	r3, [pc, #180]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7a4:	220c      	movs	r2, #12
 800f7a6:	4393      	bics	r3, r2
 800f7a8:	0019      	movs	r1, r3
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	68da      	ldr	r2, [r3, #12]
 800f7ae:	4b2a      	ldr	r3, [pc, #168]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7b0:	430a      	orrs	r2, r1
 800f7b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2204      	movs	r2, #4
 800f7ba:	4013      	ands	r3, r2
 800f7bc:	d009      	beq.n	800f7d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f7be:	4b26      	ldr	r3, [pc, #152]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7c2:	4a2c      	ldr	r2, [pc, #176]	@ (800f874 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800f7c4:	4013      	ands	r3, r2
 800f7c6:	0019      	movs	r1, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	691a      	ldr	r2, [r3, #16]
 800f7cc:	4b22      	ldr	r3, [pc, #136]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7ce:	430a      	orrs	r2, r1
 800f7d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2208      	movs	r2, #8
 800f7d8:	4013      	ands	r3, r2
 800f7da:	d009      	beq.n	800f7f0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f7dc:	4b1e      	ldr	r3, [pc, #120]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7e0:	4a25      	ldr	r2, [pc, #148]	@ (800f878 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800f7e2:	4013      	ands	r3, r2
 800f7e4:	0019      	movs	r1, r3
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	695a      	ldr	r2, [r3, #20]
 800f7ea:	4b1b      	ldr	r3, [pc, #108]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7ec:	430a      	orrs	r2, r1
 800f7ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	2380      	movs	r3, #128	@ 0x80
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	4013      	ands	r3, r2
 800f7fa:	d009      	beq.n	800f810 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f7fc:	4b16      	ldr	r3, [pc, #88]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f800:	4a17      	ldr	r2, [pc, #92]	@ (800f860 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f802:	4013      	ands	r3, r2
 800f804:	0019      	movs	r1, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	699a      	ldr	r2, [r3, #24]
 800f80a:	4b13      	ldr	r3, [pc, #76]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f80c:	430a      	orrs	r2, r1
 800f80e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2240      	movs	r2, #64	@ 0x40
 800f816:	4013      	ands	r3, r2
 800f818:	d009      	beq.n	800f82e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f81a:	4b0f      	ldr	r3, [pc, #60]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f81c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f81e:	4a17      	ldr	r2, [pc, #92]	@ (800f87c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800f820:	4013      	ands	r3, r2
 800f822:	0019      	movs	r1, r3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6a1a      	ldr	r2, [r3, #32]
 800f828:	4b0b      	ldr	r3, [pc, #44]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f82a:	430a      	orrs	r2, r1
 800f82c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2280      	movs	r2, #128	@ 0x80
 800f834:	4013      	ands	r3, r2
 800f836:	d009      	beq.n	800f84c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800f838:	4b07      	ldr	r3, [pc, #28]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f83a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f83c:	4a10      	ldr	r2, [pc, #64]	@ (800f880 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800f83e:	4013      	ands	r3, r2
 800f840:	0019      	movs	r1, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	69da      	ldr	r2, [r3, #28]
 800f846:	4b04      	ldr	r3, [pc, #16]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f848:	430a      	orrs	r2, r1
 800f84a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	0018      	movs	r0, r3
 800f850:	46bd      	mov	sp, r7
 800f852:	b006      	add	sp, #24
 800f854:	bd80      	pop	{r7, pc}
 800f856:	46c0      	nop			@ (mov r8, r8)
 800f858:	40021000 	.word	0x40021000
 800f85c:	40007000 	.word	0x40007000
 800f860:	fffcffff 	.word	0xfffcffff
 800f864:	fff7ffff 	.word	0xfff7ffff
 800f868:	00001388 	.word	0x00001388
 800f86c:	ffcfffff 	.word	0xffcfffff
 800f870:	efffffff 	.word	0xefffffff
 800f874:	fffff3ff 	.word	0xfffff3ff
 800f878:	ffffcfff 	.word	0xffffcfff
 800f87c:	fbffffff 	.word	0xfbffffff
 800f880:	fff3ffff 	.word	0xfff3ffff

0800f884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d101      	bne.n	800f896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f892:	2301      	movs	r3, #1
 800f894:	e032      	b.n	800f8fc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2239      	movs	r2, #57	@ 0x39
 800f89a:	5c9b      	ldrb	r3, [r3, r2]
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d107      	bne.n	800f8b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2238      	movs	r2, #56	@ 0x38
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	0018      	movs	r0, r3
 800f8ae:	f7f8 fed7 	bl	8008660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2239      	movs	r2, #57	@ 0x39
 800f8b6:	2102      	movs	r1, #2
 800f8b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	3304      	adds	r3, #4
 800f8c2:	0019      	movs	r1, r3
 800f8c4:	0010      	movs	r0, r2
 800f8c6:	f000 f975 	bl	800fbb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	223e      	movs	r2, #62	@ 0x3e
 800f8ce:	2101      	movs	r1, #1
 800f8d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	223a      	movs	r2, #58	@ 0x3a
 800f8d6:	2101      	movs	r1, #1
 800f8d8:	5499      	strb	r1, [r3, r2]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	223b      	movs	r2, #59	@ 0x3b
 800f8de:	2101      	movs	r1, #1
 800f8e0:	5499      	strb	r1, [r3, r2]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	223c      	movs	r2, #60	@ 0x3c
 800f8e6:	2101      	movs	r1, #1
 800f8e8:	5499      	strb	r1, [r3, r2]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	223d      	movs	r2, #61	@ 0x3d
 800f8ee:	2101      	movs	r1, #1
 800f8f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2239      	movs	r2, #57	@ 0x39
 800f8f6:	2101      	movs	r1, #1
 800f8f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	0018      	movs	r0, r3
 800f8fe:	46bd      	mov	sp, r7
 800f900:	b002      	add	sp, #8
 800f902:	bd80      	pop	{r7, pc}

0800f904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d108      	bne.n	800f926 <HAL_TIM_PWM_Start+0x22>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	223a      	movs	r2, #58	@ 0x3a
 800f918:	5c9b      	ldrb	r3, [r3, r2]
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	3b01      	subs	r3, #1
 800f91e:	1e5a      	subs	r2, r3, #1
 800f920:	4193      	sbcs	r3, r2
 800f922:	b2db      	uxtb	r3, r3
 800f924:	e01f      	b.n	800f966 <HAL_TIM_PWM_Start+0x62>
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	2b04      	cmp	r3, #4
 800f92a:	d108      	bne.n	800f93e <HAL_TIM_PWM_Start+0x3a>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	223b      	movs	r2, #59	@ 0x3b
 800f930:	5c9b      	ldrb	r3, [r3, r2]
 800f932:	b2db      	uxtb	r3, r3
 800f934:	3b01      	subs	r3, #1
 800f936:	1e5a      	subs	r2, r3, #1
 800f938:	4193      	sbcs	r3, r2
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	e013      	b.n	800f966 <HAL_TIM_PWM_Start+0x62>
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	2b08      	cmp	r3, #8
 800f942:	d108      	bne.n	800f956 <HAL_TIM_PWM_Start+0x52>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	223c      	movs	r2, #60	@ 0x3c
 800f948:	5c9b      	ldrb	r3, [r3, r2]
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	3b01      	subs	r3, #1
 800f94e:	1e5a      	subs	r2, r3, #1
 800f950:	4193      	sbcs	r3, r2
 800f952:	b2db      	uxtb	r3, r3
 800f954:	e007      	b.n	800f966 <HAL_TIM_PWM_Start+0x62>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	223d      	movs	r2, #61	@ 0x3d
 800f95a:	5c9b      	ldrb	r3, [r3, r2]
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	3b01      	subs	r3, #1
 800f960:	1e5a      	subs	r2, r3, #1
 800f962:	4193      	sbcs	r3, r2
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800f96a:	2301      	movs	r3, #1
 800f96c:	e052      	b.n	800fa14 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d104      	bne.n	800f97e <HAL_TIM_PWM_Start+0x7a>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	223a      	movs	r2, #58	@ 0x3a
 800f978:	2102      	movs	r1, #2
 800f97a:	5499      	strb	r1, [r3, r2]
 800f97c:	e013      	b.n	800f9a6 <HAL_TIM_PWM_Start+0xa2>
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	2b04      	cmp	r3, #4
 800f982:	d104      	bne.n	800f98e <HAL_TIM_PWM_Start+0x8a>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	223b      	movs	r2, #59	@ 0x3b
 800f988:	2102      	movs	r1, #2
 800f98a:	5499      	strb	r1, [r3, r2]
 800f98c:	e00b      	b.n	800f9a6 <HAL_TIM_PWM_Start+0xa2>
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	2b08      	cmp	r3, #8
 800f992:	d104      	bne.n	800f99e <HAL_TIM_PWM_Start+0x9a>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	223c      	movs	r2, #60	@ 0x3c
 800f998:	2102      	movs	r1, #2
 800f99a:	5499      	strb	r1, [r3, r2]
 800f99c:	e003      	b.n	800f9a6 <HAL_TIM_PWM_Start+0xa2>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	223d      	movs	r2, #61	@ 0x3d
 800f9a2:	2102      	movs	r1, #2
 800f9a4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	6839      	ldr	r1, [r7, #0]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	0018      	movs	r0, r3
 800f9b0:	f000 fa62 	bl	800fe78 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	2380      	movs	r3, #128	@ 0x80
 800f9ba:	05db      	lsls	r3, r3, #23
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d00e      	beq.n	800f9de <HAL_TIM_PWM_Start+0xda>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a15      	ldr	r2, [pc, #84]	@ (800fa1c <HAL_TIM_PWM_Start+0x118>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d009      	beq.n	800f9de <HAL_TIM_PWM_Start+0xda>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4a14      	ldr	r2, [pc, #80]	@ (800fa20 <HAL_TIM_PWM_Start+0x11c>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d004      	beq.n	800f9de <HAL_TIM_PWM_Start+0xda>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4a12      	ldr	r2, [pc, #72]	@ (800fa24 <HAL_TIM_PWM_Start+0x120>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d111      	bne.n	800fa02 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	2207      	movs	r2, #7
 800f9e6:	4013      	ands	r3, r2
 800f9e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2b06      	cmp	r3, #6
 800f9ee:	d010      	beq.n	800fa12 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2101      	movs	r1, #1
 800f9fc:	430a      	orrs	r2, r1
 800f9fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa00:	e007      	b.n	800fa12 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2101      	movs	r1, #1
 800fa0e:	430a      	orrs	r2, r1
 800fa10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa12:	2300      	movs	r3, #0
}
 800fa14:	0018      	movs	r0, r3
 800fa16:	46bd      	mov	sp, r7
 800fa18:	b004      	add	sp, #16
 800fa1a:	bd80      	pop	{r7, pc}
 800fa1c:	40000400 	.word	0x40000400
 800fa20:	40010800 	.word	0x40010800
 800fa24:	40011400 	.word	0x40011400

0800fa28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b086      	sub	sp, #24
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa34:	2317      	movs	r3, #23
 800fa36:	18fb      	adds	r3, r7, r3
 800fa38:	2200      	movs	r2, #0
 800fa3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2238      	movs	r2, #56	@ 0x38
 800fa40:	5c9b      	ldrb	r3, [r3, r2]
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d101      	bne.n	800fa4a <HAL_TIM_PWM_ConfigChannel+0x22>
 800fa46:	2302      	movs	r3, #2
 800fa48:	e0ad      	b.n	800fba6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2238      	movs	r2, #56	@ 0x38
 800fa4e:	2101      	movs	r1, #1
 800fa50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2b0c      	cmp	r3, #12
 800fa56:	d100      	bne.n	800fa5a <HAL_TIM_PWM_ConfigChannel+0x32>
 800fa58:	e076      	b.n	800fb48 <HAL_TIM_PWM_ConfigChannel+0x120>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2b0c      	cmp	r3, #12
 800fa5e:	d900      	bls.n	800fa62 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800fa60:	e095      	b.n	800fb8e <HAL_TIM_PWM_ConfigChannel+0x166>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2b08      	cmp	r3, #8
 800fa66:	d04e      	beq.n	800fb06 <HAL_TIM_PWM_ConfigChannel+0xde>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b08      	cmp	r3, #8
 800fa6c:	d900      	bls.n	800fa70 <HAL_TIM_PWM_ConfigChannel+0x48>
 800fa6e:	e08e      	b.n	800fb8e <HAL_TIM_PWM_ConfigChannel+0x166>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d003      	beq.n	800fa7e <HAL_TIM_PWM_ConfigChannel+0x56>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b04      	cmp	r3, #4
 800fa7a:	d021      	beq.n	800fac0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800fa7c:	e087      	b.n	800fb8e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	68ba      	ldr	r2, [r7, #8]
 800fa84:	0011      	movs	r1, r2
 800fa86:	0018      	movs	r0, r3
 800fa88:	f000 f8f2 	bl	800fc70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	699a      	ldr	r2, [r3, #24]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2108      	movs	r1, #8
 800fa98:	430a      	orrs	r2, r1
 800fa9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	699a      	ldr	r2, [r3, #24]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2104      	movs	r1, #4
 800faa8:	438a      	bics	r2, r1
 800faaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6999      	ldr	r1, [r3, #24]
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	68da      	ldr	r2, [r3, #12]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	430a      	orrs	r2, r1
 800fabc:	619a      	str	r2, [r3, #24]
      break;
 800fabe:	e06b      	b.n	800fb98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	68ba      	ldr	r2, [r7, #8]
 800fac6:	0011      	movs	r1, r2
 800fac8:	0018      	movs	r0, r3
 800faca:	f000 f90d 	bl	800fce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	699a      	ldr	r2, [r3, #24]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2180      	movs	r1, #128	@ 0x80
 800fada:	0109      	lsls	r1, r1, #4
 800fadc:	430a      	orrs	r2, r1
 800fade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	699a      	ldr	r2, [r3, #24]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4931      	ldr	r1, [pc, #196]	@ (800fbb0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800faec:	400a      	ands	r2, r1
 800faee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	6999      	ldr	r1, [r3, #24]
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	021a      	lsls	r2, r3, #8
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	430a      	orrs	r2, r1
 800fb02:	619a      	str	r2, [r3, #24]
      break;
 800fb04:	e048      	b.n	800fb98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	68ba      	ldr	r2, [r7, #8]
 800fb0c:	0011      	movs	r1, r2
 800fb0e:	0018      	movs	r0, r3
 800fb10:	f000 f92c 	bl	800fd6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	69da      	ldr	r2, [r3, #28]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2108      	movs	r1, #8
 800fb20:	430a      	orrs	r2, r1
 800fb22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	69da      	ldr	r2, [r3, #28]
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2104      	movs	r1, #4
 800fb30:	438a      	bics	r2, r1
 800fb32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	69d9      	ldr	r1, [r3, #28]
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	68da      	ldr	r2, [r3, #12]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	430a      	orrs	r2, r1
 800fb44:	61da      	str	r2, [r3, #28]
      break;
 800fb46:	e027      	b.n	800fb98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	68ba      	ldr	r2, [r7, #8]
 800fb4e:	0011      	movs	r1, r2
 800fb50:	0018      	movs	r0, r3
 800fb52:	f000 f94b 	bl	800fdec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	69da      	ldr	r2, [r3, #28]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2180      	movs	r1, #128	@ 0x80
 800fb62:	0109      	lsls	r1, r1, #4
 800fb64:	430a      	orrs	r2, r1
 800fb66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	69da      	ldr	r2, [r3, #28]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	490f      	ldr	r1, [pc, #60]	@ (800fbb0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800fb74:	400a      	ands	r2, r1
 800fb76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	69d9      	ldr	r1, [r3, #28]
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	021a      	lsls	r2, r3, #8
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	430a      	orrs	r2, r1
 800fb8a:	61da      	str	r2, [r3, #28]
      break;
 800fb8c:	e004      	b.n	800fb98 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800fb8e:	2317      	movs	r3, #23
 800fb90:	18fb      	adds	r3, r7, r3
 800fb92:	2201      	movs	r2, #1
 800fb94:	701a      	strb	r2, [r3, #0]
      break;
 800fb96:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2238      	movs	r2, #56	@ 0x38
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	5499      	strb	r1, [r3, r2]

  return status;
 800fba0:	2317      	movs	r3, #23
 800fba2:	18fb      	adds	r3, r7, r3
 800fba4:	781b      	ldrb	r3, [r3, #0]
}
 800fba6:	0018      	movs	r0, r3
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	b006      	add	sp, #24
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	46c0      	nop			@ (mov r8, r8)
 800fbb0:	fffffbff 	.word	0xfffffbff

0800fbb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	2380      	movs	r3, #128	@ 0x80
 800fbc8:	05db      	lsls	r3, r3, #23
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d00b      	beq.n	800fbe6 <TIM_Base_SetConfig+0x32>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4a23      	ldr	r2, [pc, #140]	@ (800fc60 <TIM_Base_SetConfig+0xac>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d007      	beq.n	800fbe6 <TIM_Base_SetConfig+0x32>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4a22      	ldr	r2, [pc, #136]	@ (800fc64 <TIM_Base_SetConfig+0xb0>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d003      	beq.n	800fbe6 <TIM_Base_SetConfig+0x32>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4a21      	ldr	r2, [pc, #132]	@ (800fc68 <TIM_Base_SetConfig+0xb4>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d108      	bne.n	800fbf8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2270      	movs	r2, #112	@ 0x70
 800fbea:	4393      	bics	r3, r2
 800fbec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	4313      	orrs	r3, r2
 800fbf6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	2380      	movs	r3, #128	@ 0x80
 800fbfc:	05db      	lsls	r3, r3, #23
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d00b      	beq.n	800fc1a <TIM_Base_SetConfig+0x66>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4a16      	ldr	r2, [pc, #88]	@ (800fc60 <TIM_Base_SetConfig+0xac>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d007      	beq.n	800fc1a <TIM_Base_SetConfig+0x66>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4a15      	ldr	r2, [pc, #84]	@ (800fc64 <TIM_Base_SetConfig+0xb0>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d003      	beq.n	800fc1a <TIM_Base_SetConfig+0x66>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4a14      	ldr	r2, [pc, #80]	@ (800fc68 <TIM_Base_SetConfig+0xb4>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d108      	bne.n	800fc2c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	4a13      	ldr	r2, [pc, #76]	@ (800fc6c <TIM_Base_SetConfig+0xb8>)
 800fc1e:	4013      	ands	r3, r2
 800fc20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	68fa      	ldr	r2, [r7, #12]
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2280      	movs	r2, #128	@ 0x80
 800fc30:	4393      	bics	r3, r2
 800fc32:	001a      	movs	r2, r3
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	689a      	ldr	r2, [r3, #8]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2201      	movs	r2, #1
 800fc56:	615a      	str	r2, [r3, #20]
}
 800fc58:	46c0      	nop			@ (mov r8, r8)
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	b004      	add	sp, #16
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	40000400 	.word	0x40000400
 800fc64:	40010800 	.word	0x40010800
 800fc68:	40011400 	.word	0x40011400
 800fc6c:	fffffcff 	.word	0xfffffcff

0800fc70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a1b      	ldr	r3, [r3, #32]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	4393      	bics	r3, r2
 800fc82:	001a      	movs	r2, r3
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a1b      	ldr	r3, [r3, #32]
 800fc8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	699b      	ldr	r3, [r3, #24]
 800fc98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2270      	movs	r2, #112	@ 0x70
 800fc9e:	4393      	bics	r3, r2
 800fca0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2203      	movs	r2, #3
 800fca6:	4393      	bics	r3, r2
 800fca8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	4393      	bics	r3, r2
 800fcba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	697a      	ldr	r2, [r7, #20]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	693a      	ldr	r2, [r7, #16]
 800fcca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	697a      	ldr	r2, [r7, #20]
 800fcde:	621a      	str	r2, [r3, #32]
}
 800fce0:	46c0      	nop			@ (mov r8, r8)
 800fce2:	46bd      	mov	sp, r7
 800fce4:	b006      	add	sp, #24
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b086      	sub	sp, #24
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a1b      	ldr	r3, [r3, #32]
 800fcf6:	2210      	movs	r2, #16
 800fcf8:	4393      	bics	r3, r2
 800fcfa:	001a      	movs	r2, r3
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a1b      	ldr	r3, [r3, #32]
 800fd04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4a13      	ldr	r2, [pc, #76]	@ (800fd64 <TIM_OC2_SetConfig+0x7c>)
 800fd16:	4013      	ands	r3, r2
 800fd18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	4a12      	ldr	r2, [pc, #72]	@ (800fd68 <TIM_OC2_SetConfig+0x80>)
 800fd1e:	4013      	ands	r3, r2
 800fd20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	021b      	lsls	r3, r3, #8
 800fd28:	68fa      	ldr	r2, [r7, #12]
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	2220      	movs	r2, #32
 800fd32:	4393      	bics	r3, r2
 800fd34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	011b      	lsls	r3, r3, #4
 800fd3c:	697a      	ldr	r2, [r7, #20]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	693a      	ldr	r2, [r7, #16]
 800fd46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	685a      	ldr	r2, [r3, #4]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	697a      	ldr	r2, [r7, #20]
 800fd5a:	621a      	str	r2, [r3, #32]
}
 800fd5c:	46c0      	nop			@ (mov r8, r8)
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	b006      	add	sp, #24
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	ffff8fff 	.word	0xffff8fff
 800fd68:	fffffcff 	.word	0xfffffcff

0800fd6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b086      	sub	sp, #24
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6a1b      	ldr	r3, [r3, #32]
 800fd7a:	4a1a      	ldr	r2, [pc, #104]	@ (800fde4 <TIM_OC3_SetConfig+0x78>)
 800fd7c:	401a      	ands	r2, r3
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a1b      	ldr	r3, [r3, #32]
 800fd86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	69db      	ldr	r3, [r3, #28]
 800fd92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2270      	movs	r2, #112	@ 0x70
 800fd98:	4393      	bics	r3, r2
 800fd9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2203      	movs	r2, #3
 800fda0:	4393      	bics	r3, r2
 800fda2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	4a0d      	ldr	r2, [pc, #52]	@ (800fde8 <TIM_OC3_SetConfig+0x7c>)
 800fdb2:	4013      	ands	r3, r2
 800fdb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	689b      	ldr	r3, [r3, #8]
 800fdba:	021b      	lsls	r3, r3, #8
 800fdbc:	697a      	ldr	r2, [r7, #20]
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	693a      	ldr	r2, [r7, #16]
 800fdc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68fa      	ldr	r2, [r7, #12]
 800fdcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	685a      	ldr	r2, [r3, #4]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	697a      	ldr	r2, [r7, #20]
 800fdda:	621a      	str	r2, [r3, #32]
}
 800fddc:	46c0      	nop			@ (mov r8, r8)
 800fdde:	46bd      	mov	sp, r7
 800fde0:	b006      	add	sp, #24
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	fffffeff 	.word	0xfffffeff
 800fde8:	fffffdff 	.word	0xfffffdff

0800fdec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b086      	sub	sp, #24
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a1b      	ldr	r3, [r3, #32]
 800fdfa:	4a1b      	ldr	r2, [pc, #108]	@ (800fe68 <TIM_OC4_SetConfig+0x7c>)
 800fdfc:	401a      	ands	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6a1b      	ldr	r3, [r3, #32]
 800fe06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	69db      	ldr	r3, [r3, #28]
 800fe12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4a15      	ldr	r2, [pc, #84]	@ (800fe6c <TIM_OC4_SetConfig+0x80>)
 800fe18:	4013      	ands	r3, r2
 800fe1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	4a14      	ldr	r2, [pc, #80]	@ (800fe70 <TIM_OC4_SetConfig+0x84>)
 800fe20:	4013      	ands	r3, r2
 800fe22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	021b      	lsls	r3, r3, #8
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	4a10      	ldr	r2, [pc, #64]	@ (800fe74 <TIM_OC4_SetConfig+0x88>)
 800fe34:	4013      	ands	r3, r2
 800fe36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	031b      	lsls	r3, r3, #12
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	4313      	orrs	r3, r2
 800fe42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	693a      	ldr	r2, [r7, #16]
 800fe48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	685a      	ldr	r2, [r3, #4]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	697a      	ldr	r2, [r7, #20]
 800fe5c:	621a      	str	r2, [r3, #32]
}
 800fe5e:	46c0      	nop			@ (mov r8, r8)
 800fe60:	46bd      	mov	sp, r7
 800fe62:	b006      	add	sp, #24
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	46c0      	nop			@ (mov r8, r8)
 800fe68:	ffffefff 	.word	0xffffefff
 800fe6c:	ffff8fff 	.word	0xffff8fff
 800fe70:	fffffcff 	.word	0xfffffcff
 800fe74:	ffffdfff 	.word	0xffffdfff

0800fe78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b086      	sub	sp, #24
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	221f      	movs	r2, #31
 800fe88:	4013      	ands	r3, r2
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	409a      	lsls	r2, r3
 800fe8e:	0013      	movs	r3, r2
 800fe90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6a1b      	ldr	r3, [r3, #32]
 800fe96:	697a      	ldr	r2, [r7, #20]
 800fe98:	43d2      	mvns	r2, r2
 800fe9a:	401a      	ands	r2, r3
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6a1a      	ldr	r2, [r3, #32]
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	211f      	movs	r1, #31
 800fea8:	400b      	ands	r3, r1
 800feaa:	6879      	ldr	r1, [r7, #4]
 800feac:	4099      	lsls	r1, r3
 800feae:	000b      	movs	r3, r1
 800feb0:	431a      	orrs	r2, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	621a      	str	r2, [r3, #32]
}
 800feb6:	46c0      	nop			@ (mov r8, r8)
 800feb8:	46bd      	mov	sp, r7
 800feba:	b006      	add	sp, #24
 800febc:	bd80      	pop	{r7, pc}
	...

0800fec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2238      	movs	r2, #56	@ 0x38
 800fece:	5c9b      	ldrb	r3, [r3, r2]
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d101      	bne.n	800fed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fed4:	2302      	movs	r3, #2
 800fed6:	e047      	b.n	800ff68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2238      	movs	r2, #56	@ 0x38
 800fedc:	2101      	movs	r1, #1
 800fede:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2239      	movs	r2, #57	@ 0x39
 800fee4:	2102      	movs	r1, #2
 800fee6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	689b      	ldr	r3, [r3, #8]
 800fef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2270      	movs	r2, #112	@ 0x70
 800fefc:	4393      	bics	r3, r2
 800fefe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	4313      	orrs	r3, r2
 800ff08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	2380      	movs	r3, #128	@ 0x80
 800ff18:	05db      	lsls	r3, r3, #23
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d00e      	beq.n	800ff3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4a13      	ldr	r2, [pc, #76]	@ (800ff70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d009      	beq.n	800ff3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	4a11      	ldr	r2, [pc, #68]	@ (800ff74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d004      	beq.n	800ff3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4a10      	ldr	r2, [pc, #64]	@ (800ff78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d10c      	bne.n	800ff56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	2280      	movs	r2, #128	@ 0x80
 800ff40:	4393      	bics	r3, r2
 800ff42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	68ba      	ldr	r2, [r7, #8]
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	68ba      	ldr	r2, [r7, #8]
 800ff54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2239      	movs	r2, #57	@ 0x39
 800ff5a:	2101      	movs	r1, #1
 800ff5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2238      	movs	r2, #56	@ 0x38
 800ff62:	2100      	movs	r1, #0
 800ff64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ff66:	2300      	movs	r3, #0
}
 800ff68:	0018      	movs	r0, r3
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	b004      	add	sp, #16
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	40000400 	.word	0x40000400
 800ff74:	40010800 	.word	0x40010800
 800ff78:	40011400 	.word	0x40011400

0800ff7c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2238      	movs	r2, #56	@ 0x38
 800ff8a:	5c9b      	ldrb	r3, [r3, r2]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d101      	bne.n	800ff94 <HAL_TIMEx_RemapConfig+0x18>
 800ff90:	2302      	movs	r3, #2
 800ff92:	e00c      	b.n	800ffae <HAL_TIMEx_RemapConfig+0x32>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2238      	movs	r2, #56	@ 0x38
 800ff98:	2101      	movs	r1, #1
 800ff9a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2238      	movs	r2, #56	@ 0x38
 800ffa8:	2100      	movs	r1, #0
 800ffaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ffac:	2300      	movs	r3, #0
}
 800ffae:	0018      	movs	r0, r3
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	b002      	add	sp, #8
 800ffb4:	bd80      	pop	{r7, pc}
	...

0800ffb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d101      	bne.n	800ffca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e053      	b.n	8010072 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d116      	bne.n	8010000 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2278      	movs	r2, #120	@ 0x78
 800ffd6:	2100      	movs	r1, #0
 800ffd8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	0018      	movs	r0, r3
 800ffde:	f000 fd07 	bl	80109f0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	22b0      	movs	r2, #176	@ 0xb0
 800ffe6:	589b      	ldr	r3, [r3, r2]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d103      	bne.n	800fff4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	21b0      	movs	r1, #176	@ 0xb0
 800fff0:	4a22      	ldr	r2, [pc, #136]	@ (801007c <HAL_UART_Init+0xc4>)
 800fff2:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	22b0      	movs	r2, #176	@ 0xb0
 800fff8:	589b      	ldr	r3, [r3, r2]
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	0010      	movs	r0, r2
 800fffe:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2224      	movs	r2, #36	@ 0x24
 8010004:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2101      	movs	r1, #1
 8010012:	438a      	bics	r2, r1
 8010014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	0018      	movs	r0, r3
 801001a:	f000 fd2d 	bl	8010a78 <UART_SetConfig>
 801001e:	0003      	movs	r3, r0
 8010020:	2b01      	cmp	r3, #1
 8010022:	d101      	bne.n	8010028 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8010024:	2301      	movs	r3, #1
 8010026:	e024      	b.n	8010072 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801002c:	2b00      	cmp	r3, #0
 801002e:	d003      	beq.n	8010038 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	0018      	movs	r0, r3
 8010034:	f000 ffbe 	bl	8010fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	685a      	ldr	r2, [r3, #4]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	490f      	ldr	r1, [pc, #60]	@ (8010080 <HAL_UART_Init+0xc8>)
 8010044:	400a      	ands	r2, r1
 8010046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	689a      	ldr	r2, [r3, #8]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	212a      	movs	r1, #42	@ 0x2a
 8010054:	438a      	bics	r2, r1
 8010056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2101      	movs	r1, #1
 8010064:	430a      	orrs	r2, r1
 8010066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	0018      	movs	r0, r3
 801006c:	f001 f856 	bl	801111c <UART_CheckIdleState>
 8010070:	0003      	movs	r3, r0
}
 8010072:	0018      	movs	r0, r3
 8010074:	46bd      	mov	sp, r7
 8010076:	b002      	add	sp, #8
 8010078:	bd80      	pop	{r7, pc}
 801007a:	46c0      	nop			@ (mov r8, r8)
 801007c:	08008841 	.word	0x08008841
 8010080:	ffffb7ff 	.word	0xffffb7ff

08010084 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b08a      	sub	sp, #40	@ 0x28
 8010088:	af02      	add	r7, sp, #8
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	603b      	str	r3, [r7, #0]
 8010090:	1dbb      	adds	r3, r7, #6
 8010092:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010098:	2b20      	cmp	r3, #32
 801009a:	d000      	beq.n	801009e <HAL_UART_Transmit+0x1a>
 801009c:	e08c      	b.n	80101b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d003      	beq.n	80100ac <HAL_UART_Transmit+0x28>
 80100a4:	1dbb      	adds	r3, r7, #6
 80100a6:	881b      	ldrh	r3, [r3, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d101      	bne.n	80100b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80100ac:	2301      	movs	r3, #1
 80100ae:	e084      	b.n	80101ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	689a      	ldr	r2, [r3, #8]
 80100b4:	2380      	movs	r3, #128	@ 0x80
 80100b6:	015b      	lsls	r3, r3, #5
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d109      	bne.n	80100d0 <HAL_UART_Transmit+0x4c>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	691b      	ldr	r3, [r3, #16]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d105      	bne.n	80100d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	2201      	movs	r2, #1
 80100c8:	4013      	ands	r3, r2
 80100ca:	d001      	beq.n	80100d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80100cc:	2301      	movs	r3, #1
 80100ce:	e074      	b.n	80101ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2284      	movs	r2, #132	@ 0x84
 80100d4:	2100      	movs	r1, #0
 80100d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2221      	movs	r2, #33	@ 0x21
 80100dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80100de:	f7f9 f8fb 	bl	80092d8 <HAL_GetTick>
 80100e2:	0003      	movs	r3, r0
 80100e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	1dba      	adds	r2, r7, #6
 80100ea:	2150      	movs	r1, #80	@ 0x50
 80100ec:	8812      	ldrh	r2, [r2, #0]
 80100ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	1dba      	adds	r2, r7, #6
 80100f4:	2152      	movs	r1, #82	@ 0x52
 80100f6:	8812      	ldrh	r2, [r2, #0]
 80100f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	689a      	ldr	r2, [r3, #8]
 80100fe:	2380      	movs	r3, #128	@ 0x80
 8010100:	015b      	lsls	r3, r3, #5
 8010102:	429a      	cmp	r2, r3
 8010104:	d108      	bne.n	8010118 <HAL_UART_Transmit+0x94>
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	691b      	ldr	r3, [r3, #16]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d104      	bne.n	8010118 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801010e:	2300      	movs	r3, #0
 8010110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	61bb      	str	r3, [r7, #24]
 8010116:	e003      	b.n	8010120 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801011c:	2300      	movs	r3, #0
 801011e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010120:	e02f      	b.n	8010182 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010122:	697a      	ldr	r2, [r7, #20]
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	9300      	str	r3, [sp, #0]
 801012a:	0013      	movs	r3, r2
 801012c:	2200      	movs	r2, #0
 801012e:	2180      	movs	r1, #128	@ 0x80
 8010130:	f001 f89c 	bl	801126c <UART_WaitOnFlagUntilTimeout>
 8010134:	1e03      	subs	r3, r0, #0
 8010136:	d004      	beq.n	8010142 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2220      	movs	r2, #32
 801013c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801013e:	2303      	movs	r3, #3
 8010140:	e03b      	b.n	80101ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10b      	bne.n	8010160 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	881b      	ldrh	r3, [r3, #0]
 801014c:	001a      	movs	r2, r3
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	05d2      	lsls	r2, r2, #23
 8010154:	0dd2      	lsrs	r2, r2, #23
 8010156:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	3302      	adds	r3, #2
 801015c:	61bb      	str	r3, [r7, #24]
 801015e:	e007      	b.n	8010170 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	781a      	ldrb	r2, [r3, #0]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	3301      	adds	r3, #1
 801016e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2252      	movs	r2, #82	@ 0x52
 8010174:	5a9b      	ldrh	r3, [r3, r2]
 8010176:	b29b      	uxth	r3, r3
 8010178:	3b01      	subs	r3, #1
 801017a:	b299      	uxth	r1, r3
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2252      	movs	r2, #82	@ 0x52
 8010180:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2252      	movs	r2, #82	@ 0x52
 8010186:	5a9b      	ldrh	r3, [r3, r2]
 8010188:	b29b      	uxth	r3, r3
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1c9      	bne.n	8010122 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801018e:	697a      	ldr	r2, [r7, #20]
 8010190:	68f8      	ldr	r0, [r7, #12]
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	9300      	str	r3, [sp, #0]
 8010196:	0013      	movs	r3, r2
 8010198:	2200      	movs	r2, #0
 801019a:	2140      	movs	r1, #64	@ 0x40
 801019c:	f001 f866 	bl	801126c <UART_WaitOnFlagUntilTimeout>
 80101a0:	1e03      	subs	r3, r0, #0
 80101a2:	d004      	beq.n	80101ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2220      	movs	r2, #32
 80101a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80101aa:	2303      	movs	r3, #3
 80101ac:	e005      	b.n	80101ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2220      	movs	r2, #32
 80101b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80101b4:	2300      	movs	r3, #0
 80101b6:	e000      	b.n	80101ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80101b8:	2302      	movs	r3, #2
  }
}
 80101ba:	0018      	movs	r0, r3
 80101bc:	46bd      	mov	sp, r7
 80101be:	b008      	add	sp, #32
 80101c0:	bd80      	pop	{r7, pc}
	...

080101c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b088      	sub	sp, #32
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	1dbb      	adds	r3, r7, #6
 80101d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80101d6:	2b20      	cmp	r3, #32
 80101d8:	d000      	beq.n	80101dc <HAL_UART_Transmit_DMA+0x18>
 80101da:	e077      	b.n	80102cc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d003      	beq.n	80101ea <HAL_UART_Transmit_DMA+0x26>
 80101e2:	1dbb      	adds	r3, r7, #6
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d101      	bne.n	80101ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80101ea:	2301      	movs	r3, #1
 80101ec:	e06f      	b.n	80102ce <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	689a      	ldr	r2, [r3, #8]
 80101f2:	2380      	movs	r3, #128	@ 0x80
 80101f4:	015b      	lsls	r3, r3, #5
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d109      	bne.n	801020e <HAL_UART_Transmit_DMA+0x4a>
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	691b      	ldr	r3, [r3, #16]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d105      	bne.n	801020e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	2201      	movs	r2, #1
 8010206:	4013      	ands	r3, r2
 8010208:	d001      	beq.n	801020e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801020a:	2301      	movs	r3, #1
 801020c:	e05f      	b.n	80102ce <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	68ba      	ldr	r2, [r7, #8]
 8010212:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	1dba      	adds	r2, r7, #6
 8010218:	2150      	movs	r1, #80	@ 0x50
 801021a:	8812      	ldrh	r2, [r2, #0]
 801021c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	1dba      	adds	r2, r7, #6
 8010222:	2152      	movs	r1, #82	@ 0x52
 8010224:	8812      	ldrh	r2, [r2, #0]
 8010226:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2284      	movs	r2, #132	@ 0x84
 801022c:	2100      	movs	r1, #0
 801022e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2221      	movs	r2, #33	@ 0x21
 8010234:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801023a:	2b00      	cmp	r3, #0
 801023c:	d027      	beq.n	801028e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010242:	4a25      	ldr	r2, [pc, #148]	@ (80102d8 <HAL_UART_Transmit_DMA+0x114>)
 8010244:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801024a:	4a24      	ldr	r2, [pc, #144]	@ (80102dc <HAL_UART_Transmit_DMA+0x118>)
 801024c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010252:	4a23      	ldr	r2, [pc, #140]	@ (80102e0 <HAL_UART_Transmit_DMA+0x11c>)
 8010254:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801025a:	2200      	movs	r2, #0
 801025c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010266:	0019      	movs	r1, r3
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	3328      	adds	r3, #40	@ 0x28
 801026e:	001a      	movs	r2, r3
 8010270:	1dbb      	adds	r3, r7, #6
 8010272:	881b      	ldrh	r3, [r3, #0]
 8010274:	f7f9 fdae 	bl	8009dd4 <HAL_DMA_Start_IT>
 8010278:	1e03      	subs	r3, r0, #0
 801027a:	d008      	beq.n	801028e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2284      	movs	r2, #132	@ 0x84
 8010280:	2110      	movs	r1, #16
 8010282:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2220      	movs	r2, #32
 8010288:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801028a:	2301      	movs	r3, #1
 801028c:	e01f      	b.n	80102ce <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2240      	movs	r2, #64	@ 0x40
 8010294:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010296:	f3ef 8310 	mrs	r3, PRIMASK
 801029a:	613b      	str	r3, [r7, #16]
  return(result);
 801029c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801029e:	61fb      	str	r3, [r7, #28]
 80102a0:	2301      	movs	r3, #1
 80102a2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	f383 8810 	msr	PRIMASK, r3
}
 80102aa:	46c0      	nop			@ (mov r8, r8)
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	689a      	ldr	r2, [r3, #8]
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2180      	movs	r1, #128	@ 0x80
 80102b8:	430a      	orrs	r2, r1
 80102ba:	609a      	str	r2, [r3, #8]
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102c0:	69bb      	ldr	r3, [r7, #24]
 80102c2:	f383 8810 	msr	PRIMASK, r3
}
 80102c6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80102c8:	2300      	movs	r3, #0
 80102ca:	e000      	b.n	80102ce <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80102cc:	2302      	movs	r3, #2
  }
}
 80102ce:	0018      	movs	r0, r3
 80102d0:	46bd      	mov	sp, r7
 80102d2:	b008      	add	sp, #32
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	46c0      	nop			@ (mov r8, r8)
 80102d8:	08011591 	.word	0x08011591
 80102dc:	0801162d 	.word	0x0801162d
 80102e0:	080117cd 	.word	0x080117cd

080102e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b088      	sub	sp, #32
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	1dbb      	adds	r3, r7, #6
 80102f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2280      	movs	r2, #128	@ 0x80
 80102f6:	589b      	ldr	r3, [r3, r2]
 80102f8:	2b20      	cmp	r3, #32
 80102fa:	d14a      	bne.n	8010392 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d003      	beq.n	801030a <HAL_UART_Receive_DMA+0x26>
 8010302:	1dbb      	adds	r3, r7, #6
 8010304:	881b      	ldrh	r3, [r3, #0]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d101      	bne.n	801030e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801030a:	2301      	movs	r3, #1
 801030c:	e042      	b.n	8010394 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	689a      	ldr	r2, [r3, #8]
 8010312:	2380      	movs	r3, #128	@ 0x80
 8010314:	015b      	lsls	r3, r3, #5
 8010316:	429a      	cmp	r2, r3
 8010318:	d109      	bne.n	801032e <HAL_UART_Receive_DMA+0x4a>
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	691b      	ldr	r3, [r3, #16]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d105      	bne.n	801032e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	2201      	movs	r2, #1
 8010326:	4013      	ands	r3, r2
 8010328:	d001      	beq.n	801032e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801032a:	2301      	movs	r3, #1
 801032c:	e032      	b.n	8010394 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2200      	movs	r2, #0
 8010332:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4a18      	ldr	r2, [pc, #96]	@ (801039c <HAL_UART_Receive_DMA+0xb8>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d020      	beq.n	8010380 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	685a      	ldr	r2, [r3, #4]
 8010344:	2380      	movs	r3, #128	@ 0x80
 8010346:	041b      	lsls	r3, r3, #16
 8010348:	4013      	ands	r3, r2
 801034a:	d019      	beq.n	8010380 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801034c:	f3ef 8310 	mrs	r3, PRIMASK
 8010350:	613b      	str	r3, [r7, #16]
  return(result);
 8010352:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010354:	61fb      	str	r3, [r7, #28]
 8010356:	2301      	movs	r3, #1
 8010358:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	f383 8810 	msr	PRIMASK, r3
}
 8010360:	46c0      	nop			@ (mov r8, r8)
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2180      	movs	r1, #128	@ 0x80
 801036e:	04c9      	lsls	r1, r1, #19
 8010370:	430a      	orrs	r2, r1
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010378:	69bb      	ldr	r3, [r7, #24]
 801037a:	f383 8810 	msr	PRIMASK, r3
}
 801037e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010380:	1dbb      	adds	r3, r7, #6
 8010382:	881a      	ldrh	r2, [r3, #0]
 8010384:	68b9      	ldr	r1, [r7, #8]
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	0018      	movs	r0, r3
 801038a:	f000 ffd9 	bl	8011340 <UART_Start_Receive_DMA>
 801038e:	0003      	movs	r3, r0
 8010390:	e000      	b.n	8010394 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010392:	2302      	movs	r3, #2
  }
}
 8010394:	0018      	movs	r0, r3
 8010396:	46bd      	mov	sp, r7
 8010398:	b008      	add	sp, #32
 801039a:	bd80      	pop	{r7, pc}
 801039c:	40004800 	.word	0x40004800

080103a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80103a0:	b590      	push	{r4, r7, lr}
 80103a2:	b0ab      	sub	sp, #172	@ 0xac
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	69db      	ldr	r3, [r3, #28]
 80103ae:	22a4      	movs	r2, #164	@ 0xa4
 80103b0:	18b9      	adds	r1, r7, r2
 80103b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	20a0      	movs	r0, #160	@ 0xa0
 80103bc:	1839      	adds	r1, r7, r0
 80103be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	689b      	ldr	r3, [r3, #8]
 80103c6:	219c      	movs	r1, #156	@ 0x9c
 80103c8:	1879      	adds	r1, r7, r1
 80103ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80103cc:	0011      	movs	r1, r2
 80103ce:	18bb      	adds	r3, r7, r2
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	4a9c      	ldr	r2, [pc, #624]	@ (8010644 <HAL_UART_IRQHandler+0x2a4>)
 80103d4:	4013      	ands	r3, r2
 80103d6:	2298      	movs	r2, #152	@ 0x98
 80103d8:	18bc      	adds	r4, r7, r2
 80103da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80103dc:	18bb      	adds	r3, r7, r2
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d114      	bne.n	801040e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80103e4:	187b      	adds	r3, r7, r1
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2220      	movs	r2, #32
 80103ea:	4013      	ands	r3, r2
 80103ec:	d00f      	beq.n	801040e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80103ee:	183b      	adds	r3, r7, r0
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2220      	movs	r2, #32
 80103f4:	4013      	ands	r3, r2
 80103f6:	d00a      	beq.n	801040e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d100      	bne.n	8010402 <HAL_UART_IRQHandler+0x62>
 8010400:	e2aa      	b.n	8010958 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	0010      	movs	r0, r2
 801040a:	4798      	blx	r3
      }
      return;
 801040c:	e2a4      	b.n	8010958 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801040e:	2398      	movs	r3, #152	@ 0x98
 8010410:	18fb      	adds	r3, r7, r3
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d100      	bne.n	801041a <HAL_UART_IRQHandler+0x7a>
 8010418:	e11a      	b.n	8010650 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801041a:	239c      	movs	r3, #156	@ 0x9c
 801041c:	18fb      	adds	r3, r7, r3
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2201      	movs	r2, #1
 8010422:	4013      	ands	r3, r2
 8010424:	d106      	bne.n	8010434 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010426:	23a0      	movs	r3, #160	@ 0xa0
 8010428:	18fb      	adds	r3, r7, r3
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4a86      	ldr	r2, [pc, #536]	@ (8010648 <HAL_UART_IRQHandler+0x2a8>)
 801042e:	4013      	ands	r3, r2
 8010430:	d100      	bne.n	8010434 <HAL_UART_IRQHandler+0x94>
 8010432:	e10d      	b.n	8010650 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010434:	23a4      	movs	r3, #164	@ 0xa4
 8010436:	18fb      	adds	r3, r7, r3
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2201      	movs	r2, #1
 801043c:	4013      	ands	r3, r2
 801043e:	d012      	beq.n	8010466 <HAL_UART_IRQHandler+0xc6>
 8010440:	23a0      	movs	r3, #160	@ 0xa0
 8010442:	18fb      	adds	r3, r7, r3
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	2380      	movs	r3, #128	@ 0x80
 8010448:	005b      	lsls	r3, r3, #1
 801044a:	4013      	ands	r3, r2
 801044c:	d00b      	beq.n	8010466 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2201      	movs	r2, #1
 8010454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2284      	movs	r2, #132	@ 0x84
 801045a:	589b      	ldr	r3, [r3, r2]
 801045c:	2201      	movs	r2, #1
 801045e:	431a      	orrs	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2184      	movs	r1, #132	@ 0x84
 8010464:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010466:	23a4      	movs	r3, #164	@ 0xa4
 8010468:	18fb      	adds	r3, r7, r3
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2202      	movs	r2, #2
 801046e:	4013      	ands	r3, r2
 8010470:	d011      	beq.n	8010496 <HAL_UART_IRQHandler+0xf6>
 8010472:	239c      	movs	r3, #156	@ 0x9c
 8010474:	18fb      	adds	r3, r7, r3
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2201      	movs	r2, #1
 801047a:	4013      	ands	r3, r2
 801047c:	d00b      	beq.n	8010496 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2202      	movs	r2, #2
 8010484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2284      	movs	r2, #132	@ 0x84
 801048a:	589b      	ldr	r3, [r3, r2]
 801048c:	2204      	movs	r2, #4
 801048e:	431a      	orrs	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2184      	movs	r1, #132	@ 0x84
 8010494:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010496:	23a4      	movs	r3, #164	@ 0xa4
 8010498:	18fb      	adds	r3, r7, r3
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2204      	movs	r2, #4
 801049e:	4013      	ands	r3, r2
 80104a0:	d011      	beq.n	80104c6 <HAL_UART_IRQHandler+0x126>
 80104a2:	239c      	movs	r3, #156	@ 0x9c
 80104a4:	18fb      	adds	r3, r7, r3
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2201      	movs	r2, #1
 80104aa:	4013      	ands	r3, r2
 80104ac:	d00b      	beq.n	80104c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2204      	movs	r2, #4
 80104b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2284      	movs	r2, #132	@ 0x84
 80104ba:	589b      	ldr	r3, [r3, r2]
 80104bc:	2202      	movs	r2, #2
 80104be:	431a      	orrs	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2184      	movs	r1, #132	@ 0x84
 80104c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80104c6:	23a4      	movs	r3, #164	@ 0xa4
 80104c8:	18fb      	adds	r3, r7, r3
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	2208      	movs	r2, #8
 80104ce:	4013      	ands	r3, r2
 80104d0:	d017      	beq.n	8010502 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80104d2:	23a0      	movs	r3, #160	@ 0xa0
 80104d4:	18fb      	adds	r3, r7, r3
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2220      	movs	r2, #32
 80104da:	4013      	ands	r3, r2
 80104dc:	d105      	bne.n	80104ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80104de:	239c      	movs	r3, #156	@ 0x9c
 80104e0:	18fb      	adds	r3, r7, r3
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	2201      	movs	r2, #1
 80104e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80104e8:	d00b      	beq.n	8010502 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	2208      	movs	r2, #8
 80104f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2284      	movs	r2, #132	@ 0x84
 80104f6:	589b      	ldr	r3, [r3, r2]
 80104f8:	2208      	movs	r2, #8
 80104fa:	431a      	orrs	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2184      	movs	r1, #132	@ 0x84
 8010500:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010502:	23a4      	movs	r3, #164	@ 0xa4
 8010504:	18fb      	adds	r3, r7, r3
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	2380      	movs	r3, #128	@ 0x80
 801050a:	011b      	lsls	r3, r3, #4
 801050c:	4013      	ands	r3, r2
 801050e:	d013      	beq.n	8010538 <HAL_UART_IRQHandler+0x198>
 8010510:	23a0      	movs	r3, #160	@ 0xa0
 8010512:	18fb      	adds	r3, r7, r3
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	2380      	movs	r3, #128	@ 0x80
 8010518:	04db      	lsls	r3, r3, #19
 801051a:	4013      	ands	r3, r2
 801051c:	d00c      	beq.n	8010538 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2280      	movs	r2, #128	@ 0x80
 8010524:	0112      	lsls	r2, r2, #4
 8010526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2284      	movs	r2, #132	@ 0x84
 801052c:	589b      	ldr	r3, [r3, r2]
 801052e:	2220      	movs	r2, #32
 8010530:	431a      	orrs	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2184      	movs	r1, #132	@ 0x84
 8010536:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2284      	movs	r2, #132	@ 0x84
 801053c:	589b      	ldr	r3, [r3, r2]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d100      	bne.n	8010544 <HAL_UART_IRQHandler+0x1a4>
 8010542:	e20b      	b.n	801095c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010544:	23a4      	movs	r3, #164	@ 0xa4
 8010546:	18fb      	adds	r3, r7, r3
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2220      	movs	r2, #32
 801054c:	4013      	ands	r3, r2
 801054e:	d00e      	beq.n	801056e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010550:	23a0      	movs	r3, #160	@ 0xa0
 8010552:	18fb      	adds	r3, r7, r3
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2220      	movs	r2, #32
 8010558:	4013      	ands	r3, r2
 801055a:	d008      	beq.n	801056e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010560:	2b00      	cmp	r3, #0
 8010562:	d004      	beq.n	801056e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	0010      	movs	r0, r2
 801056c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2284      	movs	r2, #132	@ 0x84
 8010572:	589b      	ldr	r3, [r3, r2]
 8010574:	2194      	movs	r1, #148	@ 0x94
 8010576:	187a      	adds	r2, r7, r1
 8010578:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	2240      	movs	r2, #64	@ 0x40
 8010582:	4013      	ands	r3, r2
 8010584:	2b40      	cmp	r3, #64	@ 0x40
 8010586:	d004      	beq.n	8010592 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010588:	187b      	adds	r3, r7, r1
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2228      	movs	r2, #40	@ 0x28
 801058e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010590:	d04b      	beq.n	801062a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	0018      	movs	r0, r3
 8010596:	f000 ff97 	bl	80114c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	2240      	movs	r2, #64	@ 0x40
 80105a2:	4013      	ands	r3, r2
 80105a4:	2b40      	cmp	r3, #64	@ 0x40
 80105a6:	d139      	bne.n	801061c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105a8:	f3ef 8310 	mrs	r3, PRIMASK
 80105ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80105ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105b0:	2090      	movs	r0, #144	@ 0x90
 80105b2:	183a      	adds	r2, r7, r0
 80105b4:	6013      	str	r3, [r2, #0]
 80105b6:	2301      	movs	r3, #1
 80105b8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105bc:	f383 8810 	msr	PRIMASK, r3
}
 80105c0:	46c0      	nop			@ (mov r8, r8)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	689a      	ldr	r2, [r3, #8]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2140      	movs	r1, #64	@ 0x40
 80105ce:	438a      	bics	r2, r1
 80105d0:	609a      	str	r2, [r3, #8]
 80105d2:	183b      	adds	r3, r7, r0
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80105da:	f383 8810 	msr	PRIMASK, r3
}
 80105de:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d012      	beq.n	801060e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105ec:	4a17      	ldr	r2, [pc, #92]	@ (801064c <HAL_UART_IRQHandler+0x2ac>)
 80105ee:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105f4:	0018      	movs	r0, r3
 80105f6:	f7f9 fc93 	bl	8009f20 <HAL_DMA_Abort_IT>
 80105fa:	1e03      	subs	r3, r0, #0
 80105fc:	d020      	beq.n	8010640 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010602:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010608:	0018      	movs	r0, r3
 801060a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801060c:	e018      	b.n	8010640 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2298      	movs	r2, #152	@ 0x98
 8010612:	589b      	ldr	r3, [r3, r2]
 8010614:	687a      	ldr	r2, [r7, #4]
 8010616:	0010      	movs	r0, r2
 8010618:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801061a:	e011      	b.n	8010640 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2298      	movs	r2, #152	@ 0x98
 8010620:	589b      	ldr	r3, [r3, r2]
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	0010      	movs	r0, r2
 8010626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010628:	e00a      	b.n	8010640 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2298      	movs	r2, #152	@ 0x98
 801062e:	589b      	ldr	r3, [r3, r2]
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	0010      	movs	r0, r2
 8010634:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2284      	movs	r2, #132	@ 0x84
 801063a:	2100      	movs	r1, #0
 801063c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801063e:	e18d      	b.n	801095c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010640:	46c0      	nop			@ (mov r8, r8)
    return;
 8010642:	e18b      	b.n	801095c <HAL_UART_IRQHandler+0x5bc>
 8010644:	0000080f 	.word	0x0000080f
 8010648:	04000120 	.word	0x04000120
 801064c:	08011855 	.word	0x08011855

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010654:	2b01      	cmp	r3, #1
 8010656:	d000      	beq.n	801065a <HAL_UART_IRQHandler+0x2ba>
 8010658:	e13d      	b.n	80108d6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801065a:	23a4      	movs	r3, #164	@ 0xa4
 801065c:	18fb      	adds	r3, r7, r3
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2210      	movs	r2, #16
 8010662:	4013      	ands	r3, r2
 8010664:	d100      	bne.n	8010668 <HAL_UART_IRQHandler+0x2c8>
 8010666:	e136      	b.n	80108d6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010668:	23a0      	movs	r3, #160	@ 0xa0
 801066a:	18fb      	adds	r3, r7, r3
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	2210      	movs	r2, #16
 8010670:	4013      	ands	r3, r2
 8010672:	d100      	bne.n	8010676 <HAL_UART_IRQHandler+0x2d6>
 8010674:	e12f      	b.n	80108d6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2210      	movs	r2, #16
 801067c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	689b      	ldr	r3, [r3, #8]
 8010684:	2240      	movs	r2, #64	@ 0x40
 8010686:	4013      	ands	r3, r2
 8010688:	2b40      	cmp	r3, #64	@ 0x40
 801068a:	d000      	beq.n	801068e <HAL_UART_IRQHandler+0x2ee>
 801068c:	e0a2      	b.n	80107d4 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	685a      	ldr	r2, [r3, #4]
 8010696:	217e      	movs	r1, #126	@ 0x7e
 8010698:	187b      	adds	r3, r7, r1
 801069a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801069c:	187b      	adds	r3, r7, r1
 801069e:	881b      	ldrh	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d100      	bne.n	80106a6 <HAL_UART_IRQHandler+0x306>
 80106a4:	e15c      	b.n	8010960 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2258      	movs	r2, #88	@ 0x58
 80106aa:	5a9b      	ldrh	r3, [r3, r2]
 80106ac:	187a      	adds	r2, r7, r1
 80106ae:	8812      	ldrh	r2, [r2, #0]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d300      	bcc.n	80106b6 <HAL_UART_IRQHandler+0x316>
 80106b4:	e154      	b.n	8010960 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	187a      	adds	r2, r7, r1
 80106ba:	215a      	movs	r1, #90	@ 0x5a
 80106bc:	8812      	ldrh	r2, [r2, #0]
 80106be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2220      	movs	r2, #32
 80106ca:	4013      	ands	r3, r2
 80106cc:	d16f      	bne.n	80107ae <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ce:	f3ef 8310 	mrs	r3, PRIMASK
 80106d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80106d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80106d8:	2301      	movs	r3, #1
 80106da:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106de:	f383 8810 	msr	PRIMASK, r3
}
 80106e2:	46c0      	nop			@ (mov r8, r8)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	49a0      	ldr	r1, [pc, #640]	@ (8010970 <HAL_UART_IRQHandler+0x5d0>)
 80106f0:	400a      	ands	r2, r1
 80106f2:	601a      	str	r2, [r3, #0]
 80106f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80106f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106fa:	f383 8810 	msr	PRIMASK, r3
}
 80106fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010700:	f3ef 8310 	mrs	r3, PRIMASK
 8010704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8010706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010708:	677b      	str	r3, [r7, #116]	@ 0x74
 801070a:	2301      	movs	r3, #1
 801070c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801070e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010710:	f383 8810 	msr	PRIMASK, r3
}
 8010714:	46c0      	nop			@ (mov r8, r8)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	689a      	ldr	r2, [r3, #8]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2101      	movs	r1, #1
 8010722:	438a      	bics	r2, r1
 8010724:	609a      	str	r2, [r3, #8]
 8010726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010728:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801072a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801072c:	f383 8810 	msr	PRIMASK, r3
}
 8010730:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010732:	f3ef 8310 	mrs	r3, PRIMASK
 8010736:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8010738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801073a:	673b      	str	r3, [r7, #112]	@ 0x70
 801073c:	2301      	movs	r3, #1
 801073e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010742:	f383 8810 	msr	PRIMASK, r3
}
 8010746:	46c0      	nop			@ (mov r8, r8)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	689a      	ldr	r2, [r3, #8]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2140      	movs	r1, #64	@ 0x40
 8010754:	438a      	bics	r2, r1
 8010756:	609a      	str	r2, [r3, #8]
 8010758:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801075a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801075c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801075e:	f383 8810 	msr	PRIMASK, r3
}
 8010762:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2280      	movs	r2, #128	@ 0x80
 8010768:	2120      	movs	r1, #32
 801076a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2200      	movs	r2, #0
 8010770:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010772:	f3ef 8310 	mrs	r3, PRIMASK
 8010776:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8010778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801077a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801077c:	2301      	movs	r3, #1
 801077e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010780:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010782:	f383 8810 	msr	PRIMASK, r3
}
 8010786:	46c0      	nop			@ (mov r8, r8)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2110      	movs	r1, #16
 8010794:	438a      	bics	r2, r1
 8010796:	601a      	str	r2, [r3, #0]
 8010798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801079a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801079c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801079e:	f383 8810 	msr	PRIMASK, r3
}
 80107a2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107a8:	0018      	movs	r0, r3
 80107aa:	f7f9 fb79 	bl	8009ea0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2202      	movs	r2, #2
 80107b2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	22ac      	movs	r2, #172	@ 0xac
 80107b8:	589b      	ldr	r3, [r3, r2]
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	2158      	movs	r1, #88	@ 0x58
 80107be:	5a51      	ldrh	r1, [r2, r1]
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	205a      	movs	r0, #90	@ 0x5a
 80107c4:	5a12      	ldrh	r2, [r2, r0]
 80107c6:	b292      	uxth	r2, r2
 80107c8:	1a8a      	subs	r2, r1, r2
 80107ca:	b291      	uxth	r1, r2
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	0010      	movs	r0, r2
 80107d0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80107d2:	e0c5      	b.n	8010960 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2258      	movs	r2, #88	@ 0x58
 80107d8:	5a99      	ldrh	r1, [r3, r2]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	225a      	movs	r2, #90	@ 0x5a
 80107de:	5a9b      	ldrh	r3, [r3, r2]
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	208e      	movs	r0, #142	@ 0x8e
 80107e4:	183b      	adds	r3, r7, r0
 80107e6:	1a8a      	subs	r2, r1, r2
 80107e8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	225a      	movs	r2, #90	@ 0x5a
 80107ee:	5a9b      	ldrh	r3, [r3, r2]
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d100      	bne.n	80107f8 <HAL_UART_IRQHandler+0x458>
 80107f6:	e0b5      	b.n	8010964 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80107f8:	183b      	adds	r3, r7, r0
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d100      	bne.n	8010802 <HAL_UART_IRQHandler+0x462>
 8010800:	e0b0      	b.n	8010964 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010802:	f3ef 8310 	mrs	r3, PRIMASK
 8010806:	60fb      	str	r3, [r7, #12]
  return(result);
 8010808:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801080a:	2488      	movs	r4, #136	@ 0x88
 801080c:	193a      	adds	r2, r7, r4
 801080e:	6013      	str	r3, [r2, #0]
 8010810:	2301      	movs	r3, #1
 8010812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	f383 8810 	msr	PRIMASK, r3
}
 801081a:	46c0      	nop			@ (mov r8, r8)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4953      	ldr	r1, [pc, #332]	@ (8010974 <HAL_UART_IRQHandler+0x5d4>)
 8010828:	400a      	ands	r2, r1
 801082a:	601a      	str	r2, [r3, #0]
 801082c:	193b      	adds	r3, r7, r4
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	f383 8810 	msr	PRIMASK, r3
}
 8010838:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801083a:	f3ef 8310 	mrs	r3, PRIMASK
 801083e:	61bb      	str	r3, [r7, #24]
  return(result);
 8010840:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010842:	2484      	movs	r4, #132	@ 0x84
 8010844:	193a      	adds	r2, r7, r4
 8010846:	6013      	str	r3, [r2, #0]
 8010848:	2301      	movs	r3, #1
 801084a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	f383 8810 	msr	PRIMASK, r3
}
 8010852:	46c0      	nop			@ (mov r8, r8)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	689a      	ldr	r2, [r3, #8]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	2101      	movs	r1, #1
 8010860:	438a      	bics	r2, r1
 8010862:	609a      	str	r2, [r3, #8]
 8010864:	193b      	adds	r3, r7, r4
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801086a:	6a3b      	ldr	r3, [r7, #32]
 801086c:	f383 8810 	msr	PRIMASK, r3
}
 8010870:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2280      	movs	r2, #128	@ 0x80
 8010876:	2120      	movs	r1, #32
 8010878:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2200      	movs	r2, #0
 801087e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010886:	f3ef 8310 	mrs	r3, PRIMASK
 801088a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801088e:	2480      	movs	r4, #128	@ 0x80
 8010890:	193a      	adds	r2, r7, r4
 8010892:	6013      	str	r3, [r2, #0]
 8010894:	2301      	movs	r3, #1
 8010896:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801089a:	f383 8810 	msr	PRIMASK, r3
}
 801089e:	46c0      	nop			@ (mov r8, r8)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	681a      	ldr	r2, [r3, #0]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2110      	movs	r1, #16
 80108ac:	438a      	bics	r2, r1
 80108ae:	601a      	str	r2, [r3, #0]
 80108b0:	193b      	adds	r3, r7, r4
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b8:	f383 8810 	msr	PRIMASK, r3
}
 80108bc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2202      	movs	r2, #2
 80108c2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	22ac      	movs	r2, #172	@ 0xac
 80108c8:	589b      	ldr	r3, [r3, r2]
 80108ca:	183a      	adds	r2, r7, r0
 80108cc:	8811      	ldrh	r1, [r2, #0]
 80108ce:	687a      	ldr	r2, [r7, #4]
 80108d0:	0010      	movs	r0, r2
 80108d2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80108d4:	e046      	b.n	8010964 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80108d6:	23a4      	movs	r3, #164	@ 0xa4
 80108d8:	18fb      	adds	r3, r7, r3
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	2380      	movs	r3, #128	@ 0x80
 80108de:	035b      	lsls	r3, r3, #13
 80108e0:	4013      	ands	r3, r2
 80108e2:	d012      	beq.n	801090a <HAL_UART_IRQHandler+0x56a>
 80108e4:	239c      	movs	r3, #156	@ 0x9c
 80108e6:	18fb      	adds	r3, r7, r3
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	2380      	movs	r3, #128	@ 0x80
 80108ec:	03db      	lsls	r3, r3, #15
 80108ee:	4013      	ands	r3, r2
 80108f0:	d00b      	beq.n	801090a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2280      	movs	r2, #128	@ 0x80
 80108f8:	0352      	lsls	r2, r2, #13
 80108fa:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	22a8      	movs	r2, #168	@ 0xa8
 8010900:	589b      	ldr	r3, [r3, r2]
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	0010      	movs	r0, r2
 8010906:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010908:	e02f      	b.n	801096a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801090a:	23a4      	movs	r3, #164	@ 0xa4
 801090c:	18fb      	adds	r3, r7, r3
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	2280      	movs	r2, #128	@ 0x80
 8010912:	4013      	ands	r3, r2
 8010914:	d00f      	beq.n	8010936 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010916:	23a0      	movs	r3, #160	@ 0xa0
 8010918:	18fb      	adds	r3, r7, r3
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2280      	movs	r2, #128	@ 0x80
 801091e:	4013      	ands	r3, r2
 8010920:	d009      	beq.n	8010936 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010926:	2b00      	cmp	r3, #0
 8010928:	d01e      	beq.n	8010968 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	0010      	movs	r0, r2
 8010932:	4798      	blx	r3
    }
    return;
 8010934:	e018      	b.n	8010968 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010936:	23a4      	movs	r3, #164	@ 0xa4
 8010938:	18fb      	adds	r3, r7, r3
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	2240      	movs	r2, #64	@ 0x40
 801093e:	4013      	ands	r3, r2
 8010940:	d013      	beq.n	801096a <HAL_UART_IRQHandler+0x5ca>
 8010942:	23a0      	movs	r3, #160	@ 0xa0
 8010944:	18fb      	adds	r3, r7, r3
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2240      	movs	r2, #64	@ 0x40
 801094a:	4013      	ands	r3, r2
 801094c:	d00d      	beq.n	801096a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	0018      	movs	r0, r3
 8010952:	f000 ff98 	bl	8011886 <UART_EndTransmit_IT>
    return;
 8010956:	e008      	b.n	801096a <HAL_UART_IRQHandler+0x5ca>
      return;
 8010958:	46c0      	nop			@ (mov r8, r8)
 801095a:	e006      	b.n	801096a <HAL_UART_IRQHandler+0x5ca>
    return;
 801095c:	46c0      	nop			@ (mov r8, r8)
 801095e:	e004      	b.n	801096a <HAL_UART_IRQHandler+0x5ca>
      return;
 8010960:	46c0      	nop			@ (mov r8, r8)
 8010962:	e002      	b.n	801096a <HAL_UART_IRQHandler+0x5ca>
      return;
 8010964:	46c0      	nop			@ (mov r8, r8)
 8010966:	e000      	b.n	801096a <HAL_UART_IRQHandler+0x5ca>
    return;
 8010968:	46c0      	nop			@ (mov r8, r8)
  }

}
 801096a:	46bd      	mov	sp, r7
 801096c:	b02b      	add	sp, #172	@ 0xac
 801096e:	bd90      	pop	{r4, r7, pc}
 8010970:	fffffeff 	.word	0xfffffeff
 8010974:	fffffedf 	.word	0xfffffedf

08010978 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010980:	46c0      	nop			@ (mov r8, r8)
 8010982:	46bd      	mov	sp, r7
 8010984:	b002      	add	sp, #8
 8010986:	bd80      	pop	{r7, pc}

08010988 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010990:	46c0      	nop			@ (mov r8, r8)
 8010992:	46bd      	mov	sp, r7
 8010994:	b002      	add	sp, #8
 8010996:	bd80      	pop	{r7, pc}

08010998 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80109a0:	46c0      	nop			@ (mov r8, r8)
 80109a2:	46bd      	mov	sp, r7
 80109a4:	b002      	add	sp, #8
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80109b0:	46c0      	nop			@ (mov r8, r8)
 80109b2:	46bd      	mov	sp, r7
 80109b4:	b002      	add	sp, #8
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80109c0:	46c0      	nop			@ (mov r8, r8)
 80109c2:	46bd      	mov	sp, r7
 80109c4:	b002      	add	sp, #8
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80109d0:	46c0      	nop			@ (mov r8, r8)
 80109d2:	46bd      	mov	sp, r7
 80109d4:	b002      	add	sp, #8
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	000a      	movs	r2, r1
 80109e2:	1cbb      	adds	r3, r7, #2
 80109e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80109e6:	46c0      	nop			@ (mov r8, r8)
 80109e8:	46bd      	mov	sp, r7
 80109ea:	b002      	add	sp, #8
 80109ec:	bd80      	pop	{r7, pc}
	...

080109f0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2188      	movs	r1, #136	@ 0x88
 80109fc:	4a14      	ldr	r2, [pc, #80]	@ (8010a50 <UART_InitCallbacksToDefault+0x60>)
 80109fe:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	218c      	movs	r1, #140	@ 0x8c
 8010a04:	4a13      	ldr	r2, [pc, #76]	@ (8010a54 <UART_InitCallbacksToDefault+0x64>)
 8010a06:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2190      	movs	r1, #144	@ 0x90
 8010a0c:	4a12      	ldr	r2, [pc, #72]	@ (8010a58 <UART_InitCallbacksToDefault+0x68>)
 8010a0e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2194      	movs	r1, #148	@ 0x94
 8010a14:	4a11      	ldr	r2, [pc, #68]	@ (8010a5c <UART_InitCallbacksToDefault+0x6c>)
 8010a16:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2198      	movs	r1, #152	@ 0x98
 8010a1c:	4a10      	ldr	r2, [pc, #64]	@ (8010a60 <UART_InitCallbacksToDefault+0x70>)
 8010a1e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	219c      	movs	r1, #156	@ 0x9c
 8010a24:	4a0f      	ldr	r2, [pc, #60]	@ (8010a64 <UART_InitCallbacksToDefault+0x74>)
 8010a26:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	21a0      	movs	r1, #160	@ 0xa0
 8010a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8010a68 <UART_InitCallbacksToDefault+0x78>)
 8010a2e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	21a4      	movs	r1, #164	@ 0xa4
 8010a34:	4a0d      	ldr	r2, [pc, #52]	@ (8010a6c <UART_InitCallbacksToDefault+0x7c>)
 8010a36:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	21a8      	movs	r1, #168	@ 0xa8
 8010a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8010a70 <UART_InitCallbacksToDefault+0x80>)
 8010a3e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	21ac      	movs	r1, #172	@ 0xac
 8010a44:	4a0b      	ldr	r2, [pc, #44]	@ (8010a74 <UART_InitCallbacksToDefault+0x84>)
 8010a46:	505a      	str	r2, [r3, r1]

}
 8010a48:	46c0      	nop			@ (mov r8, r8)
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	b002      	add	sp, #8
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	08010989 	.word	0x08010989
 8010a54:	08010979 	.word	0x08010979
 8010a58:	08010999 	.word	0x08010999
 8010a5c:	08003829 	.word	0x08003829
 8010a60:	08003865 	.word	0x08003865
 8010a64:	080109a9 	.word	0x080109a9
 8010a68:	080109b9 	.word	0x080109b9
 8010a6c:	080109c9 	.word	0x080109c9
 8010a70:	080118e1 	.word	0x080118e1
 8010a74:	080109d9 	.word	0x080109d9

08010a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a78:	b5b0      	push	{r4, r5, r7, lr}
 8010a7a:	b08e      	sub	sp, #56	@ 0x38
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a80:	231a      	movs	r3, #26
 8010a82:	2218      	movs	r2, #24
 8010a84:	189b      	adds	r3, r3, r2
 8010a86:	19db      	adds	r3, r3, r7
 8010a88:	2200      	movs	r2, #0
 8010a8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	689a      	ldr	r2, [r3, #8]
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	691b      	ldr	r3, [r3, #16]
 8010a94:	431a      	orrs	r2, r3
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	695b      	ldr	r3, [r3, #20]
 8010a9a:	431a      	orrs	r2, r3
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	69db      	ldr	r3, [r3, #28]
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4ac3      	ldr	r2, [pc, #780]	@ (8010db8 <UART_SetConfig+0x340>)
 8010aac:	4013      	ands	r3, r2
 8010aae:	0019      	movs	r1, r3
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ab6:	430a      	orrs	r2, r1
 8010ab8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	4abe      	ldr	r2, [pc, #760]	@ (8010dbc <UART_SetConfig+0x344>)
 8010ac2:	4013      	ands	r3, r2
 8010ac4:	0019      	movs	r1, r3
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	68da      	ldr	r2, [r3, #12]
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	430a      	orrs	r2, r1
 8010ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	699b      	ldr	r3, [r3, #24]
 8010ad6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4ab8      	ldr	r2, [pc, #736]	@ (8010dc0 <UART_SetConfig+0x348>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d004      	beq.n	8010aec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ae2:	69fb      	ldr	r3, [r7, #28]
 8010ae4:	6a1b      	ldr	r3, [r3, #32]
 8010ae6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010aec:	69fb      	ldr	r3, [r7, #28]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	689b      	ldr	r3, [r3, #8]
 8010af2:	4ab4      	ldr	r2, [pc, #720]	@ (8010dc4 <UART_SetConfig+0x34c>)
 8010af4:	4013      	ands	r3, r2
 8010af6:	0019      	movs	r1, r3
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010afe:	430a      	orrs	r2, r1
 8010b00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4ab0      	ldr	r2, [pc, #704]	@ (8010dc8 <UART_SetConfig+0x350>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d131      	bne.n	8010b70 <UART_SetConfig+0xf8>
 8010b0c:	4baf      	ldr	r3, [pc, #700]	@ (8010dcc <UART_SetConfig+0x354>)
 8010b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b10:	2203      	movs	r2, #3
 8010b12:	4013      	ands	r3, r2
 8010b14:	2b03      	cmp	r3, #3
 8010b16:	d01d      	beq.n	8010b54 <UART_SetConfig+0xdc>
 8010b18:	d823      	bhi.n	8010b62 <UART_SetConfig+0xea>
 8010b1a:	2b02      	cmp	r3, #2
 8010b1c:	d00c      	beq.n	8010b38 <UART_SetConfig+0xc0>
 8010b1e:	d820      	bhi.n	8010b62 <UART_SetConfig+0xea>
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d002      	beq.n	8010b2a <UART_SetConfig+0xb2>
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d00e      	beq.n	8010b46 <UART_SetConfig+0xce>
 8010b28:	e01b      	b.n	8010b62 <UART_SetConfig+0xea>
 8010b2a:	231b      	movs	r3, #27
 8010b2c:	2218      	movs	r2, #24
 8010b2e:	189b      	adds	r3, r3, r2
 8010b30:	19db      	adds	r3, r3, r7
 8010b32:	2201      	movs	r2, #1
 8010b34:	701a      	strb	r2, [r3, #0]
 8010b36:	e0b4      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010b38:	231b      	movs	r3, #27
 8010b3a:	2218      	movs	r2, #24
 8010b3c:	189b      	adds	r3, r3, r2
 8010b3e:	19db      	adds	r3, r3, r7
 8010b40:	2202      	movs	r2, #2
 8010b42:	701a      	strb	r2, [r3, #0]
 8010b44:	e0ad      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010b46:	231b      	movs	r3, #27
 8010b48:	2218      	movs	r2, #24
 8010b4a:	189b      	adds	r3, r3, r2
 8010b4c:	19db      	adds	r3, r3, r7
 8010b4e:	2204      	movs	r2, #4
 8010b50:	701a      	strb	r2, [r3, #0]
 8010b52:	e0a6      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010b54:	231b      	movs	r3, #27
 8010b56:	2218      	movs	r2, #24
 8010b58:	189b      	adds	r3, r3, r2
 8010b5a:	19db      	adds	r3, r3, r7
 8010b5c:	2208      	movs	r2, #8
 8010b5e:	701a      	strb	r2, [r3, #0]
 8010b60:	e09f      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010b62:	231b      	movs	r3, #27
 8010b64:	2218      	movs	r2, #24
 8010b66:	189b      	adds	r3, r3, r2
 8010b68:	19db      	adds	r3, r3, r7
 8010b6a:	2210      	movs	r2, #16
 8010b6c:	701a      	strb	r2, [r3, #0]
 8010b6e:	e098      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a96      	ldr	r2, [pc, #600]	@ (8010dd0 <UART_SetConfig+0x358>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d131      	bne.n	8010bde <UART_SetConfig+0x166>
 8010b7a:	4b94      	ldr	r3, [pc, #592]	@ (8010dcc <UART_SetConfig+0x354>)
 8010b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b7e:	220c      	movs	r2, #12
 8010b80:	4013      	ands	r3, r2
 8010b82:	2b0c      	cmp	r3, #12
 8010b84:	d01d      	beq.n	8010bc2 <UART_SetConfig+0x14a>
 8010b86:	d823      	bhi.n	8010bd0 <UART_SetConfig+0x158>
 8010b88:	2b08      	cmp	r3, #8
 8010b8a:	d00c      	beq.n	8010ba6 <UART_SetConfig+0x12e>
 8010b8c:	d820      	bhi.n	8010bd0 <UART_SetConfig+0x158>
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d002      	beq.n	8010b98 <UART_SetConfig+0x120>
 8010b92:	2b04      	cmp	r3, #4
 8010b94:	d00e      	beq.n	8010bb4 <UART_SetConfig+0x13c>
 8010b96:	e01b      	b.n	8010bd0 <UART_SetConfig+0x158>
 8010b98:	231b      	movs	r3, #27
 8010b9a:	2218      	movs	r2, #24
 8010b9c:	189b      	adds	r3, r3, r2
 8010b9e:	19db      	adds	r3, r3, r7
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	701a      	strb	r2, [r3, #0]
 8010ba4:	e07d      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010ba6:	231b      	movs	r3, #27
 8010ba8:	2218      	movs	r2, #24
 8010baa:	189b      	adds	r3, r3, r2
 8010bac:	19db      	adds	r3, r3, r7
 8010bae:	2202      	movs	r2, #2
 8010bb0:	701a      	strb	r2, [r3, #0]
 8010bb2:	e076      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010bb4:	231b      	movs	r3, #27
 8010bb6:	2218      	movs	r2, #24
 8010bb8:	189b      	adds	r3, r3, r2
 8010bba:	19db      	adds	r3, r3, r7
 8010bbc:	2204      	movs	r2, #4
 8010bbe:	701a      	strb	r2, [r3, #0]
 8010bc0:	e06f      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010bc2:	231b      	movs	r3, #27
 8010bc4:	2218      	movs	r2, #24
 8010bc6:	189b      	adds	r3, r3, r2
 8010bc8:	19db      	adds	r3, r3, r7
 8010bca:	2208      	movs	r2, #8
 8010bcc:	701a      	strb	r2, [r3, #0]
 8010bce:	e068      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010bd0:	231b      	movs	r3, #27
 8010bd2:	2218      	movs	r2, #24
 8010bd4:	189b      	adds	r3, r3, r2
 8010bd6:	19db      	adds	r3, r3, r7
 8010bd8:	2210      	movs	r2, #16
 8010bda:	701a      	strb	r2, [r3, #0]
 8010bdc:	e061      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	4a7c      	ldr	r2, [pc, #496]	@ (8010dd4 <UART_SetConfig+0x35c>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d106      	bne.n	8010bf6 <UART_SetConfig+0x17e>
 8010be8:	231b      	movs	r3, #27
 8010bea:	2218      	movs	r2, #24
 8010bec:	189b      	adds	r3, r3, r2
 8010bee:	19db      	adds	r3, r3, r7
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	701a      	strb	r2, [r3, #0]
 8010bf4:	e055      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	4a77      	ldr	r2, [pc, #476]	@ (8010dd8 <UART_SetConfig+0x360>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d106      	bne.n	8010c0e <UART_SetConfig+0x196>
 8010c00:	231b      	movs	r3, #27
 8010c02:	2218      	movs	r2, #24
 8010c04:	189b      	adds	r3, r3, r2
 8010c06:	19db      	adds	r3, r3, r7
 8010c08:	2200      	movs	r2, #0
 8010c0a:	701a      	strb	r2, [r3, #0]
 8010c0c:	e049      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	4a6b      	ldr	r2, [pc, #428]	@ (8010dc0 <UART_SetConfig+0x348>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d13e      	bne.n	8010c96 <UART_SetConfig+0x21e>
 8010c18:	4b6c      	ldr	r3, [pc, #432]	@ (8010dcc <UART_SetConfig+0x354>)
 8010c1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c1c:	23c0      	movs	r3, #192	@ 0xc0
 8010c1e:	011b      	lsls	r3, r3, #4
 8010c20:	4013      	ands	r3, r2
 8010c22:	22c0      	movs	r2, #192	@ 0xc0
 8010c24:	0112      	lsls	r2, r2, #4
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d027      	beq.n	8010c7a <UART_SetConfig+0x202>
 8010c2a:	22c0      	movs	r2, #192	@ 0xc0
 8010c2c:	0112      	lsls	r2, r2, #4
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d82a      	bhi.n	8010c88 <UART_SetConfig+0x210>
 8010c32:	2280      	movs	r2, #128	@ 0x80
 8010c34:	0112      	lsls	r2, r2, #4
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d011      	beq.n	8010c5e <UART_SetConfig+0x1e6>
 8010c3a:	2280      	movs	r2, #128	@ 0x80
 8010c3c:	0112      	lsls	r2, r2, #4
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d822      	bhi.n	8010c88 <UART_SetConfig+0x210>
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d004      	beq.n	8010c50 <UART_SetConfig+0x1d8>
 8010c46:	2280      	movs	r2, #128	@ 0x80
 8010c48:	00d2      	lsls	r2, r2, #3
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d00e      	beq.n	8010c6c <UART_SetConfig+0x1f4>
 8010c4e:	e01b      	b.n	8010c88 <UART_SetConfig+0x210>
 8010c50:	231b      	movs	r3, #27
 8010c52:	2218      	movs	r2, #24
 8010c54:	189b      	adds	r3, r3, r2
 8010c56:	19db      	adds	r3, r3, r7
 8010c58:	2200      	movs	r2, #0
 8010c5a:	701a      	strb	r2, [r3, #0]
 8010c5c:	e021      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010c5e:	231b      	movs	r3, #27
 8010c60:	2218      	movs	r2, #24
 8010c62:	189b      	adds	r3, r3, r2
 8010c64:	19db      	adds	r3, r3, r7
 8010c66:	2202      	movs	r2, #2
 8010c68:	701a      	strb	r2, [r3, #0]
 8010c6a:	e01a      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010c6c:	231b      	movs	r3, #27
 8010c6e:	2218      	movs	r2, #24
 8010c70:	189b      	adds	r3, r3, r2
 8010c72:	19db      	adds	r3, r3, r7
 8010c74:	2204      	movs	r2, #4
 8010c76:	701a      	strb	r2, [r3, #0]
 8010c78:	e013      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010c7a:	231b      	movs	r3, #27
 8010c7c:	2218      	movs	r2, #24
 8010c7e:	189b      	adds	r3, r3, r2
 8010c80:	19db      	adds	r3, r3, r7
 8010c82:	2208      	movs	r2, #8
 8010c84:	701a      	strb	r2, [r3, #0]
 8010c86:	e00c      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010c88:	231b      	movs	r3, #27
 8010c8a:	2218      	movs	r2, #24
 8010c8c:	189b      	adds	r3, r3, r2
 8010c8e:	19db      	adds	r3, r3, r7
 8010c90:	2210      	movs	r2, #16
 8010c92:	701a      	strb	r2, [r3, #0]
 8010c94:	e005      	b.n	8010ca2 <UART_SetConfig+0x22a>
 8010c96:	231b      	movs	r3, #27
 8010c98:	2218      	movs	r2, #24
 8010c9a:	189b      	adds	r3, r3, r2
 8010c9c:	19db      	adds	r3, r3, r7
 8010c9e:	2210      	movs	r2, #16
 8010ca0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	4a46      	ldr	r2, [pc, #280]	@ (8010dc0 <UART_SetConfig+0x348>)
 8010ca8:	4293      	cmp	r3, r2
 8010caa:	d000      	beq.n	8010cae <UART_SetConfig+0x236>
 8010cac:	e09a      	b.n	8010de4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010cae:	231b      	movs	r3, #27
 8010cb0:	2218      	movs	r2, #24
 8010cb2:	189b      	adds	r3, r3, r2
 8010cb4:	19db      	adds	r3, r3, r7
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	2b08      	cmp	r3, #8
 8010cba:	d01d      	beq.n	8010cf8 <UART_SetConfig+0x280>
 8010cbc:	dc20      	bgt.n	8010d00 <UART_SetConfig+0x288>
 8010cbe:	2b04      	cmp	r3, #4
 8010cc0:	d015      	beq.n	8010cee <UART_SetConfig+0x276>
 8010cc2:	dc1d      	bgt.n	8010d00 <UART_SetConfig+0x288>
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d002      	beq.n	8010cce <UART_SetConfig+0x256>
 8010cc8:	2b02      	cmp	r3, #2
 8010cca:	d005      	beq.n	8010cd8 <UART_SetConfig+0x260>
 8010ccc:	e018      	b.n	8010d00 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010cce:	f7fe fc51 	bl	800f574 <HAL_RCC_GetPCLK1Freq>
 8010cd2:	0003      	movs	r3, r0
 8010cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010cd6:	e01c      	b.n	8010d12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8010dcc <UART_SetConfig+0x354>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2210      	movs	r2, #16
 8010cde:	4013      	ands	r3, r2
 8010ce0:	d002      	beq.n	8010ce8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8010ddc <UART_SetConfig+0x364>)
 8010ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ce6:	e014      	b.n	8010d12 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8010ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8010de0 <UART_SetConfig+0x368>)
 8010cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010cec:	e011      	b.n	8010d12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010cee:	f7fe fb91 	bl	800f414 <HAL_RCC_GetSysClockFreq>
 8010cf2:	0003      	movs	r3, r0
 8010cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010cf6:	e00c      	b.n	8010d12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010cf8:	2380      	movs	r3, #128	@ 0x80
 8010cfa:	021b      	lsls	r3, r3, #8
 8010cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010cfe:	e008      	b.n	8010d12 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8010d00:	2300      	movs	r3, #0
 8010d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010d04:	231a      	movs	r3, #26
 8010d06:	2218      	movs	r2, #24
 8010d08:	189b      	adds	r3, r3, r2
 8010d0a:	19db      	adds	r3, r3, r7
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	701a      	strb	r2, [r3, #0]
        break;
 8010d10:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d100      	bne.n	8010d1a <UART_SetConfig+0x2a2>
 8010d18:	e133      	b.n	8010f82 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010d1a:	69fb      	ldr	r3, [r7, #28]
 8010d1c:	685a      	ldr	r2, [r3, #4]
 8010d1e:	0013      	movs	r3, r2
 8010d20:	005b      	lsls	r3, r3, #1
 8010d22:	189b      	adds	r3, r3, r2
 8010d24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d305      	bcc.n	8010d36 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010d2a:	69fb      	ldr	r3, [r7, #28]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d906      	bls.n	8010d44 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8010d36:	231a      	movs	r3, #26
 8010d38:	2218      	movs	r2, #24
 8010d3a:	189b      	adds	r3, r3, r2
 8010d3c:	19db      	adds	r3, r3, r7
 8010d3e:	2201      	movs	r2, #1
 8010d40:	701a      	strb	r2, [r3, #0]
 8010d42:	e11e      	b.n	8010f82 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d46:	613b      	str	r3, [r7, #16]
 8010d48:	2300      	movs	r3, #0
 8010d4a:	617b      	str	r3, [r7, #20]
 8010d4c:	6939      	ldr	r1, [r7, #16]
 8010d4e:	697a      	ldr	r2, [r7, #20]
 8010d50:	000b      	movs	r3, r1
 8010d52:	0e1b      	lsrs	r3, r3, #24
 8010d54:	0010      	movs	r0, r2
 8010d56:	0205      	lsls	r5, r0, #8
 8010d58:	431d      	orrs	r5, r3
 8010d5a:	000b      	movs	r3, r1
 8010d5c:	021c      	lsls	r4, r3, #8
 8010d5e:	69fb      	ldr	r3, [r7, #28]
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	085b      	lsrs	r3, r3, #1
 8010d64:	60bb      	str	r3, [r7, #8]
 8010d66:	2300      	movs	r3, #0
 8010d68:	60fb      	str	r3, [r7, #12]
 8010d6a:	68b8      	ldr	r0, [r7, #8]
 8010d6c:	68f9      	ldr	r1, [r7, #12]
 8010d6e:	1900      	adds	r0, r0, r4
 8010d70:	4169      	adcs	r1, r5
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	603b      	str	r3, [r7, #0]
 8010d78:	2300      	movs	r3, #0
 8010d7a:	607b      	str	r3, [r7, #4]
 8010d7c:	683a      	ldr	r2, [r7, #0]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f7ef fbcc 	bl	800051c <__aeabi_uldivmod>
 8010d84:	0002      	movs	r2, r0
 8010d86:	000b      	movs	r3, r1
 8010d88:	0013      	movs	r3, r2
 8010d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d8e:	23c0      	movs	r3, #192	@ 0xc0
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d309      	bcc.n	8010daa <UART_SetConfig+0x332>
 8010d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d98:	2380      	movs	r3, #128	@ 0x80
 8010d9a:	035b      	lsls	r3, r3, #13
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d204      	bcs.n	8010daa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010da6:	60da      	str	r2, [r3, #12]
 8010da8:	e0eb      	b.n	8010f82 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8010daa:	231a      	movs	r3, #26
 8010dac:	2218      	movs	r2, #24
 8010dae:	189b      	adds	r3, r3, r2
 8010db0:	19db      	adds	r3, r3, r7
 8010db2:	2201      	movs	r2, #1
 8010db4:	701a      	strb	r2, [r3, #0]
 8010db6:	e0e4      	b.n	8010f82 <UART_SetConfig+0x50a>
 8010db8:	efff69f3 	.word	0xefff69f3
 8010dbc:	ffffcfff 	.word	0xffffcfff
 8010dc0:	40004800 	.word	0x40004800
 8010dc4:	fffff4ff 	.word	0xfffff4ff
 8010dc8:	40013800 	.word	0x40013800
 8010dcc:	40021000 	.word	0x40021000
 8010dd0:	40004400 	.word	0x40004400
 8010dd4:	40004c00 	.word	0x40004c00
 8010dd8:	40005000 	.word	0x40005000
 8010ddc:	003d0900 	.word	0x003d0900
 8010de0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	69da      	ldr	r2, [r3, #28]
 8010de8:	2380      	movs	r3, #128	@ 0x80
 8010dea:	021b      	lsls	r3, r3, #8
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d000      	beq.n	8010df2 <UART_SetConfig+0x37a>
 8010df0:	e070      	b.n	8010ed4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8010df2:	231b      	movs	r3, #27
 8010df4:	2218      	movs	r2, #24
 8010df6:	189b      	adds	r3, r3, r2
 8010df8:	19db      	adds	r3, r3, r7
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	2b08      	cmp	r3, #8
 8010dfe:	d822      	bhi.n	8010e46 <UART_SetConfig+0x3ce>
 8010e00:	009a      	lsls	r2, r3, #2
 8010e02:	4b67      	ldr	r3, [pc, #412]	@ (8010fa0 <UART_SetConfig+0x528>)
 8010e04:	18d3      	adds	r3, r2, r3
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e0a:	f7fe fbb3 	bl	800f574 <HAL_RCC_GetPCLK1Freq>
 8010e0e:	0003      	movs	r3, r0
 8010e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e12:	e021      	b.n	8010e58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e14:	f7fe fbc4 	bl	800f5a0 <HAL_RCC_GetPCLK2Freq>
 8010e18:	0003      	movs	r3, r0
 8010e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e1c:	e01c      	b.n	8010e58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e1e:	4b61      	ldr	r3, [pc, #388]	@ (8010fa4 <UART_SetConfig+0x52c>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2210      	movs	r2, #16
 8010e24:	4013      	ands	r3, r2
 8010e26:	d002      	beq.n	8010e2e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010e28:	4b5f      	ldr	r3, [pc, #380]	@ (8010fa8 <UART_SetConfig+0x530>)
 8010e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e2c:	e014      	b.n	8010e58 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8010e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8010fac <UART_SetConfig+0x534>)
 8010e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e32:	e011      	b.n	8010e58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e34:	f7fe faee 	bl	800f414 <HAL_RCC_GetSysClockFreq>
 8010e38:	0003      	movs	r3, r0
 8010e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e3c:	e00c      	b.n	8010e58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e3e:	2380      	movs	r3, #128	@ 0x80
 8010e40:	021b      	lsls	r3, r3, #8
 8010e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e44:	e008      	b.n	8010e58 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8010e46:	2300      	movs	r3, #0
 8010e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010e4a:	231a      	movs	r3, #26
 8010e4c:	2218      	movs	r2, #24
 8010e4e:	189b      	adds	r3, r3, r2
 8010e50:	19db      	adds	r3, r3, r7
 8010e52:	2201      	movs	r2, #1
 8010e54:	701a      	strb	r2, [r3, #0]
        break;
 8010e56:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d100      	bne.n	8010e60 <UART_SetConfig+0x3e8>
 8010e5e:	e090      	b.n	8010f82 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e62:	005a      	lsls	r2, r3, #1
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	085b      	lsrs	r3, r3, #1
 8010e6a:	18d2      	adds	r2, r2, r3
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	0019      	movs	r1, r3
 8010e72:	0010      	movs	r0, r2
 8010e74:	f7ef f964 	bl	8000140 <__udivsi3>
 8010e78:	0003      	movs	r3, r0
 8010e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e7e:	2b0f      	cmp	r3, #15
 8010e80:	d921      	bls.n	8010ec6 <UART_SetConfig+0x44e>
 8010e82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e84:	2380      	movs	r3, #128	@ 0x80
 8010e86:	025b      	lsls	r3, r3, #9
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d21c      	bcs.n	8010ec6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	200e      	movs	r0, #14
 8010e92:	2418      	movs	r4, #24
 8010e94:	1903      	adds	r3, r0, r4
 8010e96:	19db      	adds	r3, r3, r7
 8010e98:	210f      	movs	r1, #15
 8010e9a:	438a      	bics	r2, r1
 8010e9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea0:	085b      	lsrs	r3, r3, #1
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	2207      	movs	r2, #7
 8010ea6:	4013      	ands	r3, r2
 8010ea8:	b299      	uxth	r1, r3
 8010eaa:	1903      	adds	r3, r0, r4
 8010eac:	19db      	adds	r3, r3, r7
 8010eae:	1902      	adds	r2, r0, r4
 8010eb0:	19d2      	adds	r2, r2, r7
 8010eb2:	8812      	ldrh	r2, [r2, #0]
 8010eb4:	430a      	orrs	r2, r1
 8010eb6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	1902      	adds	r2, r0, r4
 8010ebe:	19d2      	adds	r2, r2, r7
 8010ec0:	8812      	ldrh	r2, [r2, #0]
 8010ec2:	60da      	str	r2, [r3, #12]
 8010ec4:	e05d      	b.n	8010f82 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010ec6:	231a      	movs	r3, #26
 8010ec8:	2218      	movs	r2, #24
 8010eca:	189b      	adds	r3, r3, r2
 8010ecc:	19db      	adds	r3, r3, r7
 8010ece:	2201      	movs	r2, #1
 8010ed0:	701a      	strb	r2, [r3, #0]
 8010ed2:	e056      	b.n	8010f82 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010ed4:	231b      	movs	r3, #27
 8010ed6:	2218      	movs	r2, #24
 8010ed8:	189b      	adds	r3, r3, r2
 8010eda:	19db      	adds	r3, r3, r7
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	2b08      	cmp	r3, #8
 8010ee0:	d822      	bhi.n	8010f28 <UART_SetConfig+0x4b0>
 8010ee2:	009a      	lsls	r2, r3, #2
 8010ee4:	4b32      	ldr	r3, [pc, #200]	@ (8010fb0 <UART_SetConfig+0x538>)
 8010ee6:	18d3      	adds	r3, r2, r3
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010eec:	f7fe fb42 	bl	800f574 <HAL_RCC_GetPCLK1Freq>
 8010ef0:	0003      	movs	r3, r0
 8010ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010ef4:	e021      	b.n	8010f3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ef6:	f7fe fb53 	bl	800f5a0 <HAL_RCC_GetPCLK2Freq>
 8010efa:	0003      	movs	r3, r0
 8010efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010efe:	e01c      	b.n	8010f3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f00:	4b28      	ldr	r3, [pc, #160]	@ (8010fa4 <UART_SetConfig+0x52c>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	2210      	movs	r2, #16
 8010f06:	4013      	ands	r3, r2
 8010f08:	d002      	beq.n	8010f10 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010f0a:	4b27      	ldr	r3, [pc, #156]	@ (8010fa8 <UART_SetConfig+0x530>)
 8010f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f0e:	e014      	b.n	8010f3a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8010f10:	4b26      	ldr	r3, [pc, #152]	@ (8010fac <UART_SetConfig+0x534>)
 8010f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010f14:	e011      	b.n	8010f3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010f16:	f7fe fa7d 	bl	800f414 <HAL_RCC_GetSysClockFreq>
 8010f1a:	0003      	movs	r3, r0
 8010f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010f1e:	e00c      	b.n	8010f3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f20:	2380      	movs	r3, #128	@ 0x80
 8010f22:	021b      	lsls	r3, r3, #8
 8010f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010f26:	e008      	b.n	8010f3a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010f2c:	231a      	movs	r3, #26
 8010f2e:	2218      	movs	r2, #24
 8010f30:	189b      	adds	r3, r3, r2
 8010f32:	19db      	adds	r3, r3, r7
 8010f34:	2201      	movs	r2, #1
 8010f36:	701a      	strb	r2, [r3, #0]
        break;
 8010f38:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8010f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d020      	beq.n	8010f82 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	085a      	lsrs	r2, r3, #1
 8010f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f48:	18d2      	adds	r2, r2, r3
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	0019      	movs	r1, r3
 8010f50:	0010      	movs	r0, r2
 8010f52:	f7ef f8f5 	bl	8000140 <__udivsi3>
 8010f56:	0003      	movs	r3, r0
 8010f58:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f5c:	2b0f      	cmp	r3, #15
 8010f5e:	d90a      	bls.n	8010f76 <UART_SetConfig+0x4fe>
 8010f60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f62:	2380      	movs	r3, #128	@ 0x80
 8010f64:	025b      	lsls	r3, r3, #9
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d205      	bcs.n	8010f76 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	60da      	str	r2, [r3, #12]
 8010f74:	e005      	b.n	8010f82 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010f76:	231a      	movs	r3, #26
 8010f78:	2218      	movs	r2, #24
 8010f7a:	189b      	adds	r3, r3, r2
 8010f7c:	19db      	adds	r3, r3, r7
 8010f7e:	2201      	movs	r2, #1
 8010f80:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010f82:	69fb      	ldr	r3, [r7, #28]
 8010f84:	2200      	movs	r2, #0
 8010f86:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8010f88:	69fb      	ldr	r3, [r7, #28]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010f8e:	231a      	movs	r3, #26
 8010f90:	2218      	movs	r2, #24
 8010f92:	189b      	adds	r3, r3, r2
 8010f94:	19db      	adds	r3, r3, r7
 8010f96:	781b      	ldrb	r3, [r3, #0]
}
 8010f98:	0018      	movs	r0, r3
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	b00e      	add	sp, #56	@ 0x38
 8010f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8010fa0:	0801a430 	.word	0x0801a430
 8010fa4:	40021000 	.word	0x40021000
 8010fa8:	003d0900 	.word	0x003d0900
 8010fac:	00f42400 	.word	0x00f42400
 8010fb0:	0801a454 	.word	0x0801a454

08010fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	4013      	ands	r3, r2
 8010fc4:	d00b      	beq.n	8010fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80110f8 <UART_AdvFeatureConfig+0x144>)
 8010fce:	4013      	ands	r3, r2
 8010fd0:	0019      	movs	r1, r3
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	430a      	orrs	r2, r1
 8010fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fe2:	2202      	movs	r2, #2
 8010fe4:	4013      	ands	r3, r2
 8010fe6:	d00b      	beq.n	8011000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	4a43      	ldr	r2, [pc, #268]	@ (80110fc <UART_AdvFeatureConfig+0x148>)
 8010ff0:	4013      	ands	r3, r2
 8010ff2:	0019      	movs	r1, r3
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	430a      	orrs	r2, r1
 8010ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011004:	2204      	movs	r2, #4
 8011006:	4013      	ands	r3, r2
 8011008:	d00b      	beq.n	8011022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	4a3b      	ldr	r2, [pc, #236]	@ (8011100 <UART_AdvFeatureConfig+0x14c>)
 8011012:	4013      	ands	r3, r2
 8011014:	0019      	movs	r1, r3
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	430a      	orrs	r2, r1
 8011020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011026:	2208      	movs	r2, #8
 8011028:	4013      	ands	r3, r2
 801102a:	d00b      	beq.n	8011044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	4a34      	ldr	r2, [pc, #208]	@ (8011104 <UART_AdvFeatureConfig+0x150>)
 8011034:	4013      	ands	r3, r2
 8011036:	0019      	movs	r1, r3
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	430a      	orrs	r2, r1
 8011042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011048:	2210      	movs	r2, #16
 801104a:	4013      	ands	r3, r2
 801104c:	d00b      	beq.n	8011066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	4a2c      	ldr	r2, [pc, #176]	@ (8011108 <UART_AdvFeatureConfig+0x154>)
 8011056:	4013      	ands	r3, r2
 8011058:	0019      	movs	r1, r3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	430a      	orrs	r2, r1
 8011064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801106a:	2220      	movs	r2, #32
 801106c:	4013      	ands	r3, r2
 801106e:	d00b      	beq.n	8011088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	689b      	ldr	r3, [r3, #8]
 8011076:	4a25      	ldr	r2, [pc, #148]	@ (801110c <UART_AdvFeatureConfig+0x158>)
 8011078:	4013      	ands	r3, r2
 801107a:	0019      	movs	r1, r3
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	430a      	orrs	r2, r1
 8011086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801108c:	2240      	movs	r2, #64	@ 0x40
 801108e:	4013      	ands	r3, r2
 8011090:	d01d      	beq.n	80110ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	4a1d      	ldr	r2, [pc, #116]	@ (8011110 <UART_AdvFeatureConfig+0x15c>)
 801109a:	4013      	ands	r3, r2
 801109c:	0019      	movs	r1, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	430a      	orrs	r2, r1
 80110a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80110ae:	2380      	movs	r3, #128	@ 0x80
 80110b0:	035b      	lsls	r3, r3, #13
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d10b      	bne.n	80110ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	4a15      	ldr	r2, [pc, #84]	@ (8011114 <UART_AdvFeatureConfig+0x160>)
 80110be:	4013      	ands	r3, r2
 80110c0:	0019      	movs	r1, r3
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	430a      	orrs	r2, r1
 80110cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110d2:	2280      	movs	r2, #128	@ 0x80
 80110d4:	4013      	ands	r3, r2
 80110d6:	d00b      	beq.n	80110f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	4a0e      	ldr	r2, [pc, #56]	@ (8011118 <UART_AdvFeatureConfig+0x164>)
 80110e0:	4013      	ands	r3, r2
 80110e2:	0019      	movs	r1, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	430a      	orrs	r2, r1
 80110ee:	605a      	str	r2, [r3, #4]
  }
}
 80110f0:	46c0      	nop			@ (mov r8, r8)
 80110f2:	46bd      	mov	sp, r7
 80110f4:	b002      	add	sp, #8
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	fffdffff 	.word	0xfffdffff
 80110fc:	fffeffff 	.word	0xfffeffff
 8011100:	fffbffff 	.word	0xfffbffff
 8011104:	ffff7fff 	.word	0xffff7fff
 8011108:	ffffefff 	.word	0xffffefff
 801110c:	ffffdfff 	.word	0xffffdfff
 8011110:	ffefffff 	.word	0xffefffff
 8011114:	ff9fffff 	.word	0xff9fffff
 8011118:	fff7ffff 	.word	0xfff7ffff

0801111c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b092      	sub	sp, #72	@ 0x48
 8011120:	af02      	add	r7, sp, #8
 8011122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2284      	movs	r2, #132	@ 0x84
 8011128:	2100      	movs	r1, #0
 801112a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801112c:	f7f8 f8d4 	bl	80092d8 <HAL_GetTick>
 8011130:	0003      	movs	r3, r0
 8011132:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	2208      	movs	r2, #8
 801113c:	4013      	ands	r3, r2
 801113e:	2b08      	cmp	r3, #8
 8011140:	d12c      	bne.n	801119c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011144:	2280      	movs	r2, #128	@ 0x80
 8011146:	0391      	lsls	r1, r2, #14
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	4a46      	ldr	r2, [pc, #280]	@ (8011264 <UART_CheckIdleState+0x148>)
 801114c:	9200      	str	r2, [sp, #0]
 801114e:	2200      	movs	r2, #0
 8011150:	f000 f88c 	bl	801126c <UART_WaitOnFlagUntilTimeout>
 8011154:	1e03      	subs	r3, r0, #0
 8011156:	d021      	beq.n	801119c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011158:	f3ef 8310 	mrs	r3, PRIMASK
 801115c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8011160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011162:	2301      	movs	r3, #1
 8011164:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011168:	f383 8810 	msr	PRIMASK, r3
}
 801116c:	46c0      	nop			@ (mov r8, r8)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2180      	movs	r1, #128	@ 0x80
 801117a:	438a      	bics	r2, r1
 801117c:	601a      	str	r2, [r3, #0]
 801117e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011184:	f383 8810 	msr	PRIMASK, r3
}
 8011188:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2220      	movs	r2, #32
 801118e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2278      	movs	r2, #120	@ 0x78
 8011194:	2100      	movs	r1, #0
 8011196:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011198:	2303      	movs	r3, #3
 801119a:	e05f      	b.n	801125c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	2204      	movs	r2, #4
 80111a4:	4013      	ands	r3, r2
 80111a6:	2b04      	cmp	r3, #4
 80111a8:	d146      	bne.n	8011238 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80111aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111ac:	2280      	movs	r2, #128	@ 0x80
 80111ae:	03d1      	lsls	r1, r2, #15
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	4a2c      	ldr	r2, [pc, #176]	@ (8011264 <UART_CheckIdleState+0x148>)
 80111b4:	9200      	str	r2, [sp, #0]
 80111b6:	2200      	movs	r2, #0
 80111b8:	f000 f858 	bl	801126c <UART_WaitOnFlagUntilTimeout>
 80111bc:	1e03      	subs	r3, r0, #0
 80111be:	d03b      	beq.n	8011238 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111c0:	f3ef 8310 	mrs	r3, PRIMASK
 80111c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80111c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80111c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80111ca:	2301      	movs	r3, #1
 80111cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	f383 8810 	msr	PRIMASK, r3
}
 80111d4:	46c0      	nop			@ (mov r8, r8)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4921      	ldr	r1, [pc, #132]	@ (8011268 <UART_CheckIdleState+0x14c>)
 80111e2:	400a      	ands	r2, r1
 80111e4:	601a      	str	r2, [r3, #0]
 80111e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	f383 8810 	msr	PRIMASK, r3
}
 80111f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111f2:	f3ef 8310 	mrs	r3, PRIMASK
 80111f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80111f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80111fc:	2301      	movs	r3, #1
 80111fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011200:	69fb      	ldr	r3, [r7, #28]
 8011202:	f383 8810 	msr	PRIMASK, r3
}
 8011206:	46c0      	nop			@ (mov r8, r8)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	689a      	ldr	r2, [r3, #8]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	2101      	movs	r1, #1
 8011214:	438a      	bics	r2, r1
 8011216:	609a      	str	r2, [r3, #8]
 8011218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801121a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801121c:	6a3b      	ldr	r3, [r7, #32]
 801121e:	f383 8810 	msr	PRIMASK, r3
}
 8011222:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2280      	movs	r2, #128	@ 0x80
 8011228:	2120      	movs	r1, #32
 801122a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2278      	movs	r2, #120	@ 0x78
 8011230:	2100      	movs	r1, #0
 8011232:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011234:	2303      	movs	r3, #3
 8011236:	e011      	b.n	801125c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2220      	movs	r2, #32
 801123c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2280      	movs	r2, #128	@ 0x80
 8011242:	2120      	movs	r1, #32
 8011244:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2278      	movs	r2, #120	@ 0x78
 8011256:	2100      	movs	r1, #0
 8011258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801125a:	2300      	movs	r3, #0
}
 801125c:	0018      	movs	r0, r3
 801125e:	46bd      	mov	sp, r7
 8011260:	b010      	add	sp, #64	@ 0x40
 8011262:	bd80      	pop	{r7, pc}
 8011264:	01ffffff 	.word	0x01ffffff
 8011268:	fffffedf 	.word	0xfffffedf

0801126c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	603b      	str	r3, [r7, #0]
 8011278:	1dfb      	adds	r3, r7, #7
 801127a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801127c:	e04b      	b.n	8011316 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	3301      	adds	r3, #1
 8011282:	d048      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011284:	f7f8 f828 	bl	80092d8 <HAL_GetTick>
 8011288:	0002      	movs	r2, r0
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	1ad3      	subs	r3, r2, r3
 801128e:	69ba      	ldr	r2, [r7, #24]
 8011290:	429a      	cmp	r2, r3
 8011292:	d302      	bcc.n	801129a <UART_WaitOnFlagUntilTimeout+0x2e>
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d101      	bne.n	801129e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801129a:	2303      	movs	r3, #3
 801129c:	e04b      	b.n	8011336 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	2204      	movs	r2, #4
 80112a6:	4013      	ands	r3, r2
 80112a8:	d035      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	69db      	ldr	r3, [r3, #28]
 80112b0:	2208      	movs	r2, #8
 80112b2:	4013      	ands	r3, r2
 80112b4:	2b08      	cmp	r3, #8
 80112b6:	d111      	bne.n	80112dc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	2208      	movs	r2, #8
 80112be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	0018      	movs	r0, r3
 80112c4:	f000 f900 	bl	80114c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2284      	movs	r2, #132	@ 0x84
 80112cc:	2108      	movs	r1, #8
 80112ce:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2278      	movs	r2, #120	@ 0x78
 80112d4:	2100      	movs	r1, #0
 80112d6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	e02c      	b.n	8011336 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	69da      	ldr	r2, [r3, #28]
 80112e2:	2380      	movs	r3, #128	@ 0x80
 80112e4:	011b      	lsls	r3, r3, #4
 80112e6:	401a      	ands	r2, r3
 80112e8:	2380      	movs	r3, #128	@ 0x80
 80112ea:	011b      	lsls	r3, r3, #4
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d112      	bne.n	8011316 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2280      	movs	r2, #128	@ 0x80
 80112f6:	0112      	lsls	r2, r2, #4
 80112f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	0018      	movs	r0, r3
 80112fe:	f000 f8e3 	bl	80114c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2284      	movs	r2, #132	@ 0x84
 8011306:	2120      	movs	r1, #32
 8011308:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2278      	movs	r2, #120	@ 0x78
 801130e:	2100      	movs	r1, #0
 8011310:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8011312:	2303      	movs	r3, #3
 8011314:	e00f      	b.n	8011336 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	69db      	ldr	r3, [r3, #28]
 801131c:	68ba      	ldr	r2, [r7, #8]
 801131e:	4013      	ands	r3, r2
 8011320:	68ba      	ldr	r2, [r7, #8]
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	425a      	negs	r2, r3
 8011326:	4153      	adcs	r3, r2
 8011328:	b2db      	uxtb	r3, r3
 801132a:	001a      	movs	r2, r3
 801132c:	1dfb      	adds	r3, r7, #7
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	429a      	cmp	r2, r3
 8011332:	d0a4      	beq.n	801127e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011334:	2300      	movs	r3, #0
}
 8011336:	0018      	movs	r0, r3
 8011338:	46bd      	mov	sp, r7
 801133a:	b004      	add	sp, #16
 801133c:	bd80      	pop	{r7, pc}
	...

08011340 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b090      	sub	sp, #64	@ 0x40
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	1dbb      	adds	r3, r7, #6
 801134c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	1dba      	adds	r2, r7, #6
 8011358:	2158      	movs	r1, #88	@ 0x58
 801135a:	8812      	ldrh	r2, [r2, #0]
 801135c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	2284      	movs	r2, #132	@ 0x84
 8011362:	2100      	movs	r1, #0
 8011364:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	2280      	movs	r2, #128	@ 0x80
 801136a:	2122      	movs	r1, #34	@ 0x22
 801136c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011372:	2b00      	cmp	r3, #0
 8011374:	d028      	beq.n	80113c8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801137a:	4a3e      	ldr	r2, [pc, #248]	@ (8011474 <UART_Start_Receive_DMA+0x134>)
 801137c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011382:	4a3d      	ldr	r2, [pc, #244]	@ (8011478 <UART_Start_Receive_DMA+0x138>)
 8011384:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801138a:	4a3c      	ldr	r2, [pc, #240]	@ (801147c <UART_Start_Receive_DMA+0x13c>)
 801138c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011392:	2200      	movs	r2, #0
 8011394:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	3324      	adds	r3, #36	@ 0x24
 80113a0:	0019      	movs	r1, r3
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113a6:	001a      	movs	r2, r3
 80113a8:	1dbb      	adds	r3, r7, #6
 80113aa:	881b      	ldrh	r3, [r3, #0]
 80113ac:	f7f8 fd12 	bl	8009dd4 <HAL_DMA_Start_IT>
 80113b0:	1e03      	subs	r3, r0, #0
 80113b2:	d009      	beq.n	80113c8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2284      	movs	r2, #132	@ 0x84
 80113b8:	2110      	movs	r1, #16
 80113ba:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2280      	movs	r2, #128	@ 0x80
 80113c0:	2120      	movs	r1, #32
 80113c2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e050      	b.n	801146a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	691b      	ldr	r3, [r3, #16]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d019      	beq.n	8011404 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113d0:	f3ef 8310 	mrs	r3, PRIMASK
 80113d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80113d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80113da:	2301      	movs	r3, #1
 80113dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e0:	f383 8810 	msr	PRIMASK, r3
}
 80113e4:	46c0      	nop			@ (mov r8, r8)
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2180      	movs	r1, #128	@ 0x80
 80113f2:	0049      	lsls	r1, r1, #1
 80113f4:	430a      	orrs	r2, r1
 80113f6:	601a      	str	r2, [r3, #0]
 80113f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113fe:	f383 8810 	msr	PRIMASK, r3
}
 8011402:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011404:	f3ef 8310 	mrs	r3, PRIMASK
 8011408:	613b      	str	r3, [r7, #16]
  return(result);
 801140a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801140c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801140e:	2301      	movs	r3, #1
 8011410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	f383 8810 	msr	PRIMASK, r3
}
 8011418:	46c0      	nop			@ (mov r8, r8)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	689a      	ldr	r2, [r3, #8]
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	2101      	movs	r1, #1
 8011426:	430a      	orrs	r2, r1
 8011428:	609a      	str	r2, [r3, #8]
 801142a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801142c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	f383 8810 	msr	PRIMASK, r3
}
 8011434:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011436:	f3ef 8310 	mrs	r3, PRIMASK
 801143a:	61fb      	str	r3, [r7, #28]
  return(result);
 801143c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801143e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011440:	2301      	movs	r3, #1
 8011442:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011444:	6a3b      	ldr	r3, [r7, #32]
 8011446:	f383 8810 	msr	PRIMASK, r3
}
 801144a:	46c0      	nop			@ (mov r8, r8)
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	689a      	ldr	r2, [r3, #8]
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2140      	movs	r1, #64	@ 0x40
 8011458:	430a      	orrs	r2, r1
 801145a:	609a      	str	r2, [r3, #8]
 801145c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801145e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011462:	f383 8810 	msr	PRIMASK, r3
}
 8011466:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8011468:	2300      	movs	r3, #0
}
 801146a:	0018      	movs	r0, r3
 801146c:	46bd      	mov	sp, r7
 801146e:	b010      	add	sp, #64	@ 0x40
 8011470:	bd80      	pop	{r7, pc}
 8011472:	46c0      	nop			@ (mov r8, r8)
 8011474:	08011651 	.word	0x08011651
 8011478:	08011785 	.word	0x08011785
 801147c:	080117cd 	.word	0x080117cd

08011480 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011488:	f3ef 8310 	mrs	r3, PRIMASK
 801148c:	60bb      	str	r3, [r7, #8]
  return(result);
 801148e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011490:	617b      	str	r3, [r7, #20]
 8011492:	2301      	movs	r3, #1
 8011494:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f383 8810 	msr	PRIMASK, r3
}
 801149c:	46c0      	nop			@ (mov r8, r8)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	21c0      	movs	r1, #192	@ 0xc0
 80114aa:	438a      	bics	r2, r1
 80114ac:	601a      	str	r2, [r3, #0]
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	f383 8810 	msr	PRIMASK, r3
}
 80114b8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2220      	movs	r2, #32
 80114be:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80114c0:	46c0      	nop			@ (mov r8, r8)
 80114c2:	46bd      	mov	sp, r7
 80114c4:	b006      	add	sp, #24
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b08e      	sub	sp, #56	@ 0x38
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114d0:	f3ef 8310 	mrs	r3, PRIMASK
 80114d4:	617b      	str	r3, [r7, #20]
  return(result);
 80114d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80114d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80114da:	2301      	movs	r3, #1
 80114dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	f383 8810 	msr	PRIMASK, r3
}
 80114e4:	46c0      	nop			@ (mov r8, r8)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4926      	ldr	r1, [pc, #152]	@ (801158c <UART_EndRxTransfer+0xc4>)
 80114f2:	400a      	ands	r2, r1
 80114f4:	601a      	str	r2, [r3, #0]
 80114f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	f383 8810 	msr	PRIMASK, r3
}
 8011500:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011502:	f3ef 8310 	mrs	r3, PRIMASK
 8011506:	623b      	str	r3, [r7, #32]
  return(result);
 8011508:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801150a:	633b      	str	r3, [r7, #48]	@ 0x30
 801150c:	2301      	movs	r3, #1
 801150e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011512:	f383 8810 	msr	PRIMASK, r3
}
 8011516:	46c0      	nop			@ (mov r8, r8)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	689a      	ldr	r2, [r3, #8]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2101      	movs	r1, #1
 8011524:	438a      	bics	r2, r1
 8011526:	609a      	str	r2, [r3, #8]
 8011528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801152a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801152c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801152e:	f383 8810 	msr	PRIMASK, r3
}
 8011532:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011538:	2b01      	cmp	r3, #1
 801153a:	d118      	bne.n	801156e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801153c:	f3ef 8310 	mrs	r3, PRIMASK
 8011540:	60bb      	str	r3, [r7, #8]
  return(result);
 8011542:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011546:	2301      	movs	r3, #1
 8011548:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f383 8810 	msr	PRIMASK, r3
}
 8011550:	46c0      	nop			@ (mov r8, r8)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	2110      	movs	r1, #16
 801155e:	438a      	bics	r2, r1
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	f383 8810 	msr	PRIMASK, r3
}
 801156c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2280      	movs	r2, #128	@ 0x80
 8011572:	2120      	movs	r1, #32
 8011574:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2200      	movs	r2, #0
 801157a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2200      	movs	r2, #0
 8011580:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8011582:	46c0      	nop			@ (mov r8, r8)
 8011584:	46bd      	mov	sp, r7
 8011586:	b00e      	add	sp, #56	@ 0x38
 8011588:	bd80      	pop	{r7, pc}
 801158a:	46c0      	nop			@ (mov r8, r8)
 801158c:	fffffedf 	.word	0xfffffedf

08011590 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b08c      	sub	sp, #48	@ 0x30
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801159c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2220      	movs	r2, #32
 80115a6:	4013      	ands	r3, r2
 80115a8:	d135      	bne.n	8011616 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80115aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ac:	2252      	movs	r2, #82	@ 0x52
 80115ae:	2100      	movs	r1, #0
 80115b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115b2:	f3ef 8310 	mrs	r3, PRIMASK
 80115b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80115b8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80115ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80115bc:	2301      	movs	r3, #1
 80115be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	f383 8810 	msr	PRIMASK, r3
}
 80115c6:	46c0      	nop			@ (mov r8, r8)
 80115c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	689a      	ldr	r2, [r3, #8]
 80115ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2180      	movs	r1, #128	@ 0x80
 80115d4:	438a      	bics	r2, r1
 80115d6:	609a      	str	r2, [r3, #8]
 80115d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	f383 8810 	msr	PRIMASK, r3
}
 80115e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115e4:	f3ef 8310 	mrs	r3, PRIMASK
 80115e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80115ea:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80115ee:	2301      	movs	r3, #1
 80115f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115f2:	69fb      	ldr	r3, [r7, #28]
 80115f4:	f383 8810 	msr	PRIMASK, r3
}
 80115f8:	46c0      	nop			@ (mov r8, r8)
 80115fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2140      	movs	r1, #64	@ 0x40
 8011606:	430a      	orrs	r2, r1
 8011608:	601a      	str	r2, [r3, #0]
 801160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801160c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801160e:	6a3b      	ldr	r3, [r7, #32]
 8011610:	f383 8810 	msr	PRIMASK, r3
}
 8011614:	e006      	b.n	8011624 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8011616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011618:	228c      	movs	r2, #140	@ 0x8c
 801161a:	589b      	ldr	r3, [r3, r2]
 801161c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801161e:	0010      	movs	r0, r2
 8011620:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011622:	46c0      	nop			@ (mov r8, r8)
 8011624:	46c0      	nop			@ (mov r8, r8)
 8011626:	46bd      	mov	sp, r7
 8011628:	b00c      	add	sp, #48	@ 0x30
 801162a:	bd80      	pop	{r7, pc}

0801162c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011638:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2288      	movs	r2, #136	@ 0x88
 801163e:	589b      	ldr	r3, [r3, r2]
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	0010      	movs	r0, r2
 8011644:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011646:	46c0      	nop			@ (mov r8, r8)
 8011648:	46bd      	mov	sp, r7
 801164a:	b004      	add	sp, #16
 801164c:	bd80      	pop	{r7, pc}
	...

08011650 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b094      	sub	sp, #80	@ 0x50
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801165c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	2220      	movs	r2, #32
 8011666:	4013      	ands	r3, r2
 8011668:	d16f      	bne.n	801174a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801166a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801166c:	225a      	movs	r2, #90	@ 0x5a
 801166e:	2100      	movs	r1, #0
 8011670:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011672:	f3ef 8310 	mrs	r3, PRIMASK
 8011676:	61bb      	str	r3, [r7, #24]
  return(result);
 8011678:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801167a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801167c:	2301      	movs	r3, #1
 801167e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	f383 8810 	msr	PRIMASK, r3
}
 8011686:	46c0      	nop			@ (mov r8, r8)
 8011688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	681a      	ldr	r2, [r3, #0]
 801168e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	493b      	ldr	r1, [pc, #236]	@ (8011780 <UART_DMAReceiveCplt+0x130>)
 8011694:	400a      	ands	r2, r1
 8011696:	601a      	str	r2, [r3, #0]
 8011698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801169a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801169c:	6a3b      	ldr	r3, [r7, #32]
 801169e:	f383 8810 	msr	PRIMASK, r3
}
 80116a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116a4:	f3ef 8310 	mrs	r3, PRIMASK
 80116a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80116aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80116ae:	2301      	movs	r3, #1
 80116b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b4:	f383 8810 	msr	PRIMASK, r3
}
 80116b8:	46c0      	nop			@ (mov r8, r8)
 80116ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	689a      	ldr	r2, [r3, #8]
 80116c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2101      	movs	r1, #1
 80116c6:	438a      	bics	r2, r1
 80116c8:	609a      	str	r2, [r3, #8]
 80116ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116d0:	f383 8810 	msr	PRIMASK, r3
}
 80116d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116d6:	f3ef 8310 	mrs	r3, PRIMASK
 80116da:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80116dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116de:	643b      	str	r3, [r7, #64]	@ 0x40
 80116e0:	2301      	movs	r3, #1
 80116e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116e6:	f383 8810 	msr	PRIMASK, r3
}
 80116ea:	46c0      	nop			@ (mov r8, r8)
 80116ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	689a      	ldr	r2, [r3, #8]
 80116f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	2140      	movs	r1, #64	@ 0x40
 80116f8:	438a      	bics	r2, r1
 80116fa:	609a      	str	r2, [r3, #8]
 80116fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011702:	f383 8810 	msr	PRIMASK, r3
}
 8011706:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801170a:	2280      	movs	r2, #128	@ 0x80
 801170c:	2120      	movs	r1, #32
 801170e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011714:	2b01      	cmp	r3, #1
 8011716:	d118      	bne.n	801174a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011718:	f3ef 8310 	mrs	r3, PRIMASK
 801171c:	60fb      	str	r3, [r7, #12]
  return(result);
 801171e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011722:	2301      	movs	r3, #1
 8011724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	f383 8810 	msr	PRIMASK, r3
}
 801172c:	46c0      	nop			@ (mov r8, r8)
 801172e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2110      	movs	r1, #16
 801173a:	438a      	bics	r2, r1
 801173c:	601a      	str	r2, [r3, #0]
 801173e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	f383 8810 	msr	PRIMASK, r3
}
 8011748:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801174a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801174c:	2200      	movs	r2, #0
 801174e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011754:	2b01      	cmp	r3, #1
 8011756:	d109      	bne.n	801176c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8011758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801175a:	22ac      	movs	r2, #172	@ 0xac
 801175c:	589b      	ldr	r3, [r3, r2]
 801175e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011760:	2158      	movs	r1, #88	@ 0x58
 8011762:	5a51      	ldrh	r1, [r2, r1]
 8011764:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011766:	0010      	movs	r0, r2
 8011768:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801176a:	e005      	b.n	8011778 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801176c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801176e:	2294      	movs	r2, #148	@ 0x94
 8011770:	589b      	ldr	r3, [r3, r2]
 8011772:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011774:	0010      	movs	r0, r2
 8011776:	4798      	blx	r3
}
 8011778:	46c0      	nop			@ (mov r8, r8)
 801177a:	46bd      	mov	sp, r7
 801177c:	b014      	add	sp, #80	@ 0x50
 801177e:	bd80      	pop	{r7, pc}
 8011780:	fffffeff 	.word	0xfffffeff

08011784 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011790:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2201      	movs	r2, #1
 8011796:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801179c:	2b01      	cmp	r3, #1
 801179e:	d10b      	bne.n	80117b8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	22ac      	movs	r2, #172	@ 0xac
 80117a4:	589b      	ldr	r3, [r3, r2]
 80117a6:	68fa      	ldr	r2, [r7, #12]
 80117a8:	2158      	movs	r1, #88	@ 0x58
 80117aa:	5a52      	ldrh	r2, [r2, r1]
 80117ac:	0852      	lsrs	r2, r2, #1
 80117ae:	b291      	uxth	r1, r2
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	0010      	movs	r0, r2
 80117b4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80117b6:	e005      	b.n	80117c4 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	2290      	movs	r2, #144	@ 0x90
 80117bc:	589b      	ldr	r3, [r3, r2]
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	0010      	movs	r0, r2
 80117c2:	4798      	blx	r3
}
 80117c4:	46c0      	nop			@ (mov r8, r8)
 80117c6:	46bd      	mov	sp, r7
 80117c8:	b004      	add	sp, #16
 80117ca:	bd80      	pop	{r7, pc}

080117cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b086      	sub	sp, #24
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	2280      	movs	r2, #128	@ 0x80
 80117e4:	589b      	ldr	r3, [r3, r2]
 80117e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	2280      	movs	r2, #128	@ 0x80
 80117f0:	4013      	ands	r3, r2
 80117f2:	2b80      	cmp	r3, #128	@ 0x80
 80117f4:	d10a      	bne.n	801180c <UART_DMAError+0x40>
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	2b21      	cmp	r3, #33	@ 0x21
 80117fa:	d107      	bne.n	801180c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	2252      	movs	r2, #82	@ 0x52
 8011800:	2100      	movs	r1, #0
 8011802:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	0018      	movs	r0, r3
 8011808:	f7ff fe3a 	bl	8011480 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	689b      	ldr	r3, [r3, #8]
 8011812:	2240      	movs	r2, #64	@ 0x40
 8011814:	4013      	ands	r3, r2
 8011816:	2b40      	cmp	r3, #64	@ 0x40
 8011818:	d10a      	bne.n	8011830 <UART_DMAError+0x64>
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	2b22      	cmp	r3, #34	@ 0x22
 801181e:	d107      	bne.n	8011830 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	225a      	movs	r2, #90	@ 0x5a
 8011824:	2100      	movs	r1, #0
 8011826:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	0018      	movs	r0, r3
 801182c:	f7ff fe4c 	bl	80114c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	2284      	movs	r2, #132	@ 0x84
 8011834:	589b      	ldr	r3, [r3, r2]
 8011836:	2210      	movs	r2, #16
 8011838:	431a      	orrs	r2, r3
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	2184      	movs	r1, #132	@ 0x84
 801183e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	2298      	movs	r2, #152	@ 0x98
 8011844:	589b      	ldr	r3, [r3, r2]
 8011846:	697a      	ldr	r2, [r7, #20]
 8011848:	0010      	movs	r0, r2
 801184a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801184c:	46c0      	nop			@ (mov r8, r8)
 801184e:	46bd      	mov	sp, r7
 8011850:	b006      	add	sp, #24
 8011852:	bd80      	pop	{r7, pc}

08011854 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011860:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	225a      	movs	r2, #90	@ 0x5a
 8011866:	2100      	movs	r1, #0
 8011868:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2252      	movs	r2, #82	@ 0x52
 801186e:	2100      	movs	r1, #0
 8011870:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2298      	movs	r2, #152	@ 0x98
 8011876:	589b      	ldr	r3, [r3, r2]
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	0010      	movs	r0, r2
 801187c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801187e:	46c0      	nop			@ (mov r8, r8)
 8011880:	46bd      	mov	sp, r7
 8011882:	b004      	add	sp, #16
 8011884:	bd80      	pop	{r7, pc}

08011886 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011886:	b580      	push	{r7, lr}
 8011888:	b086      	sub	sp, #24
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801188e:	f3ef 8310 	mrs	r3, PRIMASK
 8011892:	60bb      	str	r3, [r7, #8]
  return(result);
 8011894:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011896:	617b      	str	r3, [r7, #20]
 8011898:	2301      	movs	r3, #1
 801189a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f383 8810 	msr	PRIMASK, r3
}
 80118a2:	46c0      	nop			@ (mov r8, r8)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	2140      	movs	r1, #64	@ 0x40
 80118b0:	438a      	bics	r2, r1
 80118b2:	601a      	str	r2, [r3, #0]
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	f383 8810 	msr	PRIMASK, r3
}
 80118be:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2220      	movs	r2, #32
 80118c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2200      	movs	r2, #0
 80118ca:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	228c      	movs	r2, #140	@ 0x8c
 80118d0:	589b      	ldr	r3, [r3, r2]
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	0010      	movs	r0, r2
 80118d6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80118d8:	46c0      	nop			@ (mov r8, r8)
 80118da:	46bd      	mov	sp, r7
 80118dc:	b006      	add	sp, #24
 80118de:	bd80      	pop	{r7, pc}

080118e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80118e8:	46c0      	nop			@ (mov r8, r8)
 80118ea:	46bd      	mov	sp, r7
 80118ec:	b002      	add	sp, #8
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b084      	sub	sp, #16
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2244      	movs	r2, #68	@ 0x44
 80118fc:	2100      	movs	r1, #0
 80118fe:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011900:	4b05      	ldr	r3, [pc, #20]	@ (8011918 <USB_EnableGlobalInt+0x28>)
 8011902:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	b299      	uxth	r1, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2240      	movs	r2, #64	@ 0x40
 801190c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801190e:	2300      	movs	r3, #0
}
 8011910:	0018      	movs	r0, r3
 8011912:	46bd      	mov	sp, r7
 8011914:	b004      	add	sp, #16
 8011916:	bd80      	pop	{r7, pc}
 8011918:	0000bf80 	.word	0x0000bf80

0801191c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011924:	4b09      	ldr	r3, [pc, #36]	@ (801194c <USB_DisableGlobalInt+0x30>)
 8011926:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2240      	movs	r2, #64	@ 0x40
 801192c:	5a9b      	ldrh	r3, [r3, r2]
 801192e:	b29b      	uxth	r3, r3
 8011930:	68fa      	ldr	r2, [r7, #12]
 8011932:	b292      	uxth	r2, r2
 8011934:	43d2      	mvns	r2, r2
 8011936:	b292      	uxth	r2, r2
 8011938:	4013      	ands	r3, r2
 801193a:	b299      	uxth	r1, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2240      	movs	r2, #64	@ 0x40
 8011940:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011942:	2300      	movs	r3, #0
}
 8011944:	0018      	movs	r0, r3
 8011946:	46bd      	mov	sp, r7
 8011948:	b004      	add	sp, #16
 801194a:	bd80      	pop	{r7, pc}
 801194c:	0000bf80 	.word	0x0000bf80

08011950 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011950:	b084      	sub	sp, #16
 8011952:	b590      	push	{r4, r7, lr}
 8011954:	b083      	sub	sp, #12
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	2004      	movs	r0, #4
 801195c:	2410      	movs	r4, #16
 801195e:	1900      	adds	r0, r0, r4
 8011960:	2408      	movs	r4, #8
 8011962:	46a4      	mov	ip, r4
 8011964:	44bc      	add	ip, r7
 8011966:	4460      	add	r0, ip
 8011968:	6001      	str	r1, [r0, #0]
 801196a:	6042      	str	r2, [r0, #4]
 801196c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2240      	movs	r2, #64	@ 0x40
 8011972:	2101      	movs	r1, #1
 8011974:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2240      	movs	r2, #64	@ 0x40
 801197a:	2100      	movs	r1, #0
 801197c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2244      	movs	r2, #68	@ 0x44
 8011982:	2100      	movs	r1, #0
 8011984:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2250      	movs	r2, #80	@ 0x50
 801198a:	2100      	movs	r1, #0
 801198c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801198e:	2300      	movs	r3, #0
}
 8011990:	0018      	movs	r0, r3
 8011992:	46bd      	mov	sp, r7
 8011994:	b003      	add	sp, #12
 8011996:	bc90      	pop	{r4, r7}
 8011998:	bc08      	pop	{r3}
 801199a:	b004      	add	sp, #16
 801199c:	4718      	bx	r3
	...

080119a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b09c      	sub	sp, #112	@ 0x70
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80119aa:	236f      	movs	r3, #111	@ 0x6f
 80119ac:	18fb      	adds	r3, r7, r3
 80119ae:	2200      	movs	r2, #0
 80119b0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	18d3      	adds	r3, r2, r3
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	b29a      	uxth	r2, r3
 80119c0:	236c      	movs	r3, #108	@ 0x6c
 80119c2:	18fb      	adds	r3, r7, r3
 80119c4:	49a3      	ldr	r1, [pc, #652]	@ (8011c54 <USB_ActivateEndpoint+0x2b4>)
 80119c6:	400a      	ands	r2, r1
 80119c8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	78db      	ldrb	r3, [r3, #3]
 80119ce:	2b03      	cmp	r3, #3
 80119d0:	d017      	beq.n	8011a02 <USB_ActivateEndpoint+0x62>
 80119d2:	dc28      	bgt.n	8011a26 <USB_ActivateEndpoint+0x86>
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	d00e      	beq.n	80119f6 <USB_ActivateEndpoint+0x56>
 80119d8:	dc25      	bgt.n	8011a26 <USB_ActivateEndpoint+0x86>
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d002      	beq.n	80119e4 <USB_ActivateEndpoint+0x44>
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d018      	beq.n	8011a14 <USB_ActivateEndpoint+0x74>
 80119e2:	e020      	b.n	8011a26 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80119e4:	226c      	movs	r2, #108	@ 0x6c
 80119e6:	18bb      	adds	r3, r7, r2
 80119e8:	18ba      	adds	r2, r7, r2
 80119ea:	8812      	ldrh	r2, [r2, #0]
 80119ec:	2180      	movs	r1, #128	@ 0x80
 80119ee:	0089      	lsls	r1, r1, #2
 80119f0:	430a      	orrs	r2, r1
 80119f2:	801a      	strh	r2, [r3, #0]
      break;
 80119f4:	e01c      	b.n	8011a30 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80119f6:	226c      	movs	r2, #108	@ 0x6c
 80119f8:	18bb      	adds	r3, r7, r2
 80119fa:	18ba      	adds	r2, r7, r2
 80119fc:	8812      	ldrh	r2, [r2, #0]
 80119fe:	801a      	strh	r2, [r3, #0]
      break;
 8011a00:	e016      	b.n	8011a30 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011a02:	226c      	movs	r2, #108	@ 0x6c
 8011a04:	18bb      	adds	r3, r7, r2
 8011a06:	18ba      	adds	r2, r7, r2
 8011a08:	8812      	ldrh	r2, [r2, #0]
 8011a0a:	21c0      	movs	r1, #192	@ 0xc0
 8011a0c:	00c9      	lsls	r1, r1, #3
 8011a0e:	430a      	orrs	r2, r1
 8011a10:	801a      	strh	r2, [r3, #0]
      break;
 8011a12:	e00d      	b.n	8011a30 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011a14:	226c      	movs	r2, #108	@ 0x6c
 8011a16:	18bb      	adds	r3, r7, r2
 8011a18:	18ba      	adds	r2, r7, r2
 8011a1a:	8812      	ldrh	r2, [r2, #0]
 8011a1c:	2180      	movs	r1, #128	@ 0x80
 8011a1e:	00c9      	lsls	r1, r1, #3
 8011a20:	430a      	orrs	r2, r1
 8011a22:	801a      	strh	r2, [r3, #0]
      break;
 8011a24:	e004      	b.n	8011a30 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8011a26:	236f      	movs	r3, #111	@ 0x6f
 8011a28:	18fb      	adds	r3, r7, r3
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	701a      	strb	r2, [r3, #0]
      break;
 8011a2e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	009b      	lsls	r3, r3, #2
 8011a38:	18d3      	adds	r3, r2, r3
 8011a3a:	226c      	movs	r2, #108	@ 0x6c
 8011a3c:	18ba      	adds	r2, r7, r2
 8011a3e:	8812      	ldrh	r2, [r2, #0]
 8011a40:	4985      	ldr	r1, [pc, #532]	@ (8011c58 <USB_ActivateEndpoint+0x2b8>)
 8011a42:	430a      	orrs	r2, r1
 8011a44:	b292      	uxth	r2, r2
 8011a46:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011a48:	687a      	ldr	r2, [r7, #4]
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	18d3      	adds	r3, r2, r3
 8011a52:	881b      	ldrh	r3, [r3, #0]
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	b21b      	sxth	r3, r3
 8011a58:	4a80      	ldr	r2, [pc, #512]	@ (8011c5c <USB_ActivateEndpoint+0x2bc>)
 8011a5a:	4013      	ands	r3, r2
 8011a5c:	b21a      	sxth	r2, r3
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	781b      	ldrb	r3, [r3, #0]
 8011a62:	b21b      	sxth	r3, r3
 8011a64:	4313      	orrs	r3, r2
 8011a66:	b21a      	sxth	r2, r3
 8011a68:	2166      	movs	r1, #102	@ 0x66
 8011a6a:	187b      	adds	r3, r7, r1
 8011a6c:	801a      	strh	r2, [r3, #0]
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	18d3      	adds	r3, r2, r3
 8011a78:	187a      	adds	r2, r7, r1
 8011a7a:	8812      	ldrh	r2, [r2, #0]
 8011a7c:	4976      	ldr	r1, [pc, #472]	@ (8011c58 <USB_ActivateEndpoint+0x2b8>)
 8011a7e:	430a      	orrs	r2, r1
 8011a80:	b292      	uxth	r2, r2
 8011a82:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	7b1b      	ldrb	r3, [r3, #12]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d000      	beq.n	8011a8e <USB_ActivateEndpoint+0xee>
 8011a8c:	e178      	b.n	8011d80 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	785b      	ldrb	r3, [r3, #1]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d100      	bne.n	8011a98 <USB_ActivateEndpoint+0xf8>
 8011a96:	e07a      	b.n	8011b8e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	61bb      	str	r3, [r7, #24]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2250      	movs	r2, #80	@ 0x50
 8011aa0:	5a9b      	ldrh	r3, [r3, r2]
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	001a      	movs	r2, r3
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	189b      	adds	r3, r3, r2
 8011aaa:	61bb      	str	r3, [r7, #24]
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	00da      	lsls	r2, r3, #3
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	18d3      	adds	r3, r2, r3
 8011ab6:	2280      	movs	r2, #128	@ 0x80
 8011ab8:	00d2      	lsls	r2, r2, #3
 8011aba:	4694      	mov	ip, r2
 8011abc:	4463      	add	r3, ip
 8011abe:	617b      	str	r3, [r7, #20]
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	88db      	ldrh	r3, [r3, #6]
 8011ac4:	085b      	lsrs	r3, r3, #1
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	18db      	adds	r3, r3, r3
 8011aca:	b29a      	uxth	r2, r3
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011ad0:	687a      	ldr	r2, [r7, #4]
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	009b      	lsls	r3, r3, #2
 8011ad8:	18d2      	adds	r2, r2, r3
 8011ada:	2112      	movs	r1, #18
 8011adc:	187b      	adds	r3, r7, r1
 8011ade:	8812      	ldrh	r2, [r2, #0]
 8011ae0:	801a      	strh	r2, [r3, #0]
 8011ae2:	187b      	adds	r3, r7, r1
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	2240      	movs	r2, #64	@ 0x40
 8011ae8:	4013      	ands	r3, r2
 8011aea:	d016      	beq.n	8011b1a <USB_ActivateEndpoint+0x17a>
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	009b      	lsls	r3, r3, #2
 8011af4:	18d3      	adds	r3, r2, r3
 8011af6:	881b      	ldrh	r3, [r3, #0]
 8011af8:	b29a      	uxth	r2, r3
 8011afa:	2010      	movs	r0, #16
 8011afc:	183b      	adds	r3, r7, r0
 8011afe:	4957      	ldr	r1, [pc, #348]	@ (8011c5c <USB_ActivateEndpoint+0x2bc>)
 8011b00:	400a      	ands	r2, r1
 8011b02:	801a      	strh	r2, [r3, #0]
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	18d3      	adds	r3, r2, r3
 8011b0e:	183a      	adds	r2, r7, r0
 8011b10:	8812      	ldrh	r2, [r2, #0]
 8011b12:	4953      	ldr	r1, [pc, #332]	@ (8011c60 <USB_ActivateEndpoint+0x2c0>)
 8011b14:	430a      	orrs	r2, r1
 8011b16:	b292      	uxth	r2, r2
 8011b18:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	78db      	ldrb	r3, [r3, #3]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	d01d      	beq.n	8011b5e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	009b      	lsls	r3, r3, #2
 8011b2a:	18d3      	adds	r3, r2, r3
 8011b2c:	881b      	ldrh	r3, [r3, #0]
 8011b2e:	b29a      	uxth	r2, r3
 8011b30:	200c      	movs	r0, #12
 8011b32:	183b      	adds	r3, r7, r0
 8011b34:	494b      	ldr	r1, [pc, #300]	@ (8011c64 <USB_ActivateEndpoint+0x2c4>)
 8011b36:	400a      	ands	r2, r1
 8011b38:	801a      	strh	r2, [r3, #0]
 8011b3a:	183b      	adds	r3, r7, r0
 8011b3c:	183a      	adds	r2, r7, r0
 8011b3e:	8812      	ldrh	r2, [r2, #0]
 8011b40:	2120      	movs	r1, #32
 8011b42:	404a      	eors	r2, r1
 8011b44:	801a      	strh	r2, [r3, #0]
 8011b46:	687a      	ldr	r2, [r7, #4]
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	009b      	lsls	r3, r3, #2
 8011b4e:	18d3      	adds	r3, r2, r3
 8011b50:	183a      	adds	r2, r7, r0
 8011b52:	8812      	ldrh	r2, [r2, #0]
 8011b54:	4940      	ldr	r1, [pc, #256]	@ (8011c58 <USB_ActivateEndpoint+0x2b8>)
 8011b56:	430a      	orrs	r2, r1
 8011b58:	b292      	uxth	r2, r2
 8011b5a:	801a      	strh	r2, [r3, #0]
 8011b5c:	e2b4      	b.n	80120c8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	18d3      	adds	r3, r2, r3
 8011b68:	881b      	ldrh	r3, [r3, #0]
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	200e      	movs	r0, #14
 8011b6e:	183b      	adds	r3, r7, r0
 8011b70:	493c      	ldr	r1, [pc, #240]	@ (8011c64 <USB_ActivateEndpoint+0x2c4>)
 8011b72:	400a      	ands	r2, r1
 8011b74:	801a      	strh	r2, [r3, #0]
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	009b      	lsls	r3, r3, #2
 8011b7e:	18d3      	adds	r3, r2, r3
 8011b80:	183a      	adds	r2, r7, r0
 8011b82:	8812      	ldrh	r2, [r2, #0]
 8011b84:	4934      	ldr	r1, [pc, #208]	@ (8011c58 <USB_ActivateEndpoint+0x2b8>)
 8011b86:	430a      	orrs	r2, r1
 8011b88:	b292      	uxth	r2, r2
 8011b8a:	801a      	strh	r2, [r3, #0]
 8011b8c:	e29c      	b.n	80120c8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2250      	movs	r2, #80	@ 0x50
 8011b96:	5a9b      	ldrh	r3, [r3, r2]
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	001a      	movs	r2, r3
 8011b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b9e:	189b      	adds	r3, r3, r2
 8011ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	00da      	lsls	r2, r3, #3
 8011ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011baa:	18d3      	adds	r3, r2, r3
 8011bac:	4a2e      	ldr	r2, [pc, #184]	@ (8011c68 <USB_ActivateEndpoint+0x2c8>)
 8011bae:	4694      	mov	ip, r2
 8011bb0:	4463      	add	r3, ip
 8011bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	88db      	ldrh	r3, [r3, #6]
 8011bb8:	085b      	lsrs	r3, r3, #1
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	18db      	adds	r3, r3, r3
 8011bbe:	b29a      	uxth	r2, r3
 8011bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bc2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2250      	movs	r2, #80	@ 0x50
 8011bcc:	5a9b      	ldrh	r3, [r3, r2]
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	001a      	movs	r2, r3
 8011bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd4:	189b      	adds	r3, r3, r2
 8011bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	00da      	lsls	r2, r3, #3
 8011bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be0:	18d3      	adds	r3, r2, r3
 8011be2:	4a22      	ldr	r2, [pc, #136]	@ (8011c6c <USB_ActivateEndpoint+0x2cc>)
 8011be4:	4694      	mov	ip, r2
 8011be6:	4463      	add	r3, ip
 8011be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	059b      	lsls	r3, r3, #22
 8011bf2:	0d9b      	lsrs	r3, r3, #22
 8011bf4:	b29a      	uxth	r2, r3
 8011bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bf8:	801a      	strh	r2, [r3, #0]
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	691b      	ldr	r3, [r3, #16]
 8011bfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8011c00:	d91a      	bls.n	8011c38 <USB_ActivateEndpoint+0x298>
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	691b      	ldr	r3, [r3, #16]
 8011c06:	095b      	lsrs	r3, r3, #5
 8011c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	691b      	ldr	r3, [r3, #16]
 8011c0e:	221f      	movs	r2, #31
 8011c10:	4013      	ands	r3, r2
 8011c12:	d102      	bne.n	8011c1a <USB_ActivateEndpoint+0x27a>
 8011c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c16:	3b01      	subs	r3, #1
 8011c18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c1c:	881b      	ldrh	r3, [r3, #0]
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	029b      	lsls	r3, r3, #10
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	4a10      	ldr	r2, [pc, #64]	@ (8011c70 <USB_ActivateEndpoint+0x2d0>)
 8011c2e:	4313      	orrs	r3, r2
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c34:	801a      	strh	r2, [r3, #0]
 8011c36:	e034      	b.n	8011ca2 <USB_ActivateEndpoint+0x302>
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	691b      	ldr	r3, [r3, #16]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d119      	bne.n	8011c74 <USB_ActivateEndpoint+0x2d4>
 8011c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c42:	881b      	ldrh	r3, [r3, #0]
 8011c44:	b29b      	uxth	r3, r3
 8011c46:	4a0a      	ldr	r2, [pc, #40]	@ (8011c70 <USB_ActivateEndpoint+0x2d0>)
 8011c48:	4313      	orrs	r3, r2
 8011c4a:	b29a      	uxth	r2, r3
 8011c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4e:	801a      	strh	r2, [r3, #0]
 8011c50:	e027      	b.n	8011ca2 <USB_ActivateEndpoint+0x302>
 8011c52:	46c0      	nop			@ (mov r8, r8)
 8011c54:	ffff898f 	.word	0xffff898f
 8011c58:	ffff8080 	.word	0xffff8080
 8011c5c:	ffff8f8f 	.word	0xffff8f8f
 8011c60:	ffff80c0 	.word	0xffff80c0
 8011c64:	ffff8fbf 	.word	0xffff8fbf
 8011c68:	00000404 	.word	0x00000404
 8011c6c:	00000406 	.word	0x00000406
 8011c70:	ffff8000 	.word	0xffff8000
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	691b      	ldr	r3, [r3, #16]
 8011c78:	085b      	lsrs	r3, r3, #1
 8011c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	691b      	ldr	r3, [r3, #16]
 8011c80:	2201      	movs	r2, #1
 8011c82:	4013      	ands	r3, r2
 8011c84:	d002      	beq.n	8011c8c <USB_ActivateEndpoint+0x2ec>
 8011c86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c88:	3301      	adds	r3, #1
 8011c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c8e:	881b      	ldrh	r3, [r3, #0]
 8011c90:	b29a      	uxth	r2, r3
 8011c92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	029b      	lsls	r3, r3, #10
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ca0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	18d2      	adds	r2, r2, r3
 8011cac:	2122      	movs	r1, #34	@ 0x22
 8011cae:	187b      	adds	r3, r7, r1
 8011cb0:	8812      	ldrh	r2, [r2, #0]
 8011cb2:	801a      	strh	r2, [r3, #0]
 8011cb4:	187b      	adds	r3, r7, r1
 8011cb6:	881a      	ldrh	r2, [r3, #0]
 8011cb8:	2380      	movs	r3, #128	@ 0x80
 8011cba:	01db      	lsls	r3, r3, #7
 8011cbc:	4013      	ands	r3, r2
 8011cbe:	d016      	beq.n	8011cee <USB_ActivateEndpoint+0x34e>
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	18d3      	adds	r3, r2, r3
 8011cca:	881b      	ldrh	r3, [r3, #0]
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	2020      	movs	r0, #32
 8011cd0:	183b      	adds	r3, r7, r0
 8011cd2:	49dd      	ldr	r1, [pc, #884]	@ (8012048 <USB_ActivateEndpoint+0x6a8>)
 8011cd4:	400a      	ands	r2, r1
 8011cd6:	801a      	strh	r2, [r3, #0]
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	18d3      	adds	r3, r2, r3
 8011ce2:	183a      	adds	r2, r7, r0
 8011ce4:	8812      	ldrh	r2, [r2, #0]
 8011ce6:	49d9      	ldr	r1, [pc, #868]	@ (801204c <USB_ActivateEndpoint+0x6ac>)
 8011ce8:	430a      	orrs	r2, r1
 8011cea:	b292      	uxth	r2, r2
 8011cec:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d125      	bne.n	8011d42 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	18d3      	adds	r3, r2, r3
 8011d00:	881b      	ldrh	r3, [r3, #0]
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	201c      	movs	r0, #28
 8011d06:	183b      	adds	r3, r7, r0
 8011d08:	49d1      	ldr	r1, [pc, #836]	@ (8012050 <USB_ActivateEndpoint+0x6b0>)
 8011d0a:	400a      	ands	r2, r1
 8011d0c:	801a      	strh	r2, [r3, #0]
 8011d0e:	183b      	adds	r3, r7, r0
 8011d10:	183a      	adds	r2, r7, r0
 8011d12:	8812      	ldrh	r2, [r2, #0]
 8011d14:	2180      	movs	r1, #128	@ 0x80
 8011d16:	0149      	lsls	r1, r1, #5
 8011d18:	404a      	eors	r2, r1
 8011d1a:	801a      	strh	r2, [r3, #0]
 8011d1c:	183b      	adds	r3, r7, r0
 8011d1e:	183a      	adds	r2, r7, r0
 8011d20:	8812      	ldrh	r2, [r2, #0]
 8011d22:	2180      	movs	r1, #128	@ 0x80
 8011d24:	0189      	lsls	r1, r1, #6
 8011d26:	404a      	eors	r2, r1
 8011d28:	801a      	strh	r2, [r3, #0]
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	18d3      	adds	r3, r2, r3
 8011d34:	183a      	adds	r2, r7, r0
 8011d36:	8812      	ldrh	r2, [r2, #0]
 8011d38:	49c6      	ldr	r1, [pc, #792]	@ (8012054 <USB_ActivateEndpoint+0x6b4>)
 8011d3a:	430a      	orrs	r2, r1
 8011d3c:	b292      	uxth	r2, r2
 8011d3e:	801a      	strh	r2, [r3, #0]
 8011d40:	e1c2      	b.n	80120c8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	18d3      	adds	r3, r2, r3
 8011d4c:	881b      	ldrh	r3, [r3, #0]
 8011d4e:	b29a      	uxth	r2, r3
 8011d50:	201e      	movs	r0, #30
 8011d52:	183b      	adds	r3, r7, r0
 8011d54:	49be      	ldr	r1, [pc, #760]	@ (8012050 <USB_ActivateEndpoint+0x6b0>)
 8011d56:	400a      	ands	r2, r1
 8011d58:	801a      	strh	r2, [r3, #0]
 8011d5a:	183b      	adds	r3, r7, r0
 8011d5c:	183a      	adds	r2, r7, r0
 8011d5e:	8812      	ldrh	r2, [r2, #0]
 8011d60:	2180      	movs	r1, #128	@ 0x80
 8011d62:	0189      	lsls	r1, r1, #6
 8011d64:	404a      	eors	r2, r1
 8011d66:	801a      	strh	r2, [r3, #0]
 8011d68:	687a      	ldr	r2, [r7, #4]
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	18d3      	adds	r3, r2, r3
 8011d72:	183a      	adds	r2, r7, r0
 8011d74:	8812      	ldrh	r2, [r2, #0]
 8011d76:	49b7      	ldr	r1, [pc, #732]	@ (8012054 <USB_ActivateEndpoint+0x6b4>)
 8011d78:	430a      	orrs	r2, r1
 8011d7a:	b292      	uxth	r2, r2
 8011d7c:	801a      	strh	r2, [r3, #0]
 8011d7e:	e1a3      	b.n	80120c8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	78db      	ldrb	r3, [r3, #3]
 8011d84:	2b02      	cmp	r3, #2
 8011d86:	d117      	bne.n	8011db8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	009b      	lsls	r3, r3, #2
 8011d90:	18d3      	adds	r3, r2, r3
 8011d92:	881b      	ldrh	r3, [r3, #0]
 8011d94:	b29a      	uxth	r2, r3
 8011d96:	2062      	movs	r0, #98	@ 0x62
 8011d98:	183b      	adds	r3, r7, r0
 8011d9a:	49ab      	ldr	r1, [pc, #684]	@ (8012048 <USB_ActivateEndpoint+0x6a8>)
 8011d9c:	400a      	ands	r2, r1
 8011d9e:	801a      	strh	r2, [r3, #0]
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	009b      	lsls	r3, r3, #2
 8011da8:	18d3      	adds	r3, r2, r3
 8011daa:	183a      	adds	r2, r7, r0
 8011dac:	8812      	ldrh	r2, [r2, #0]
 8011dae:	49aa      	ldr	r1, [pc, #680]	@ (8012058 <USB_ActivateEndpoint+0x6b8>)
 8011db0:	430a      	orrs	r2, r1
 8011db2:	b292      	uxth	r2, r2
 8011db4:	801a      	strh	r2, [r3, #0]
 8011db6:	e016      	b.n	8011de6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	009b      	lsls	r3, r3, #2
 8011dc0:	18d3      	adds	r3, r2, r3
 8011dc2:	881b      	ldrh	r3, [r3, #0]
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	2064      	movs	r0, #100	@ 0x64
 8011dc8:	183b      	adds	r3, r7, r0
 8011dca:	49a4      	ldr	r1, [pc, #656]	@ (801205c <USB_ActivateEndpoint+0x6bc>)
 8011dcc:	400a      	ands	r2, r1
 8011dce:	801a      	strh	r2, [r3, #0]
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	18d3      	adds	r3, r2, r3
 8011dda:	183a      	adds	r2, r7, r0
 8011ddc:	8812      	ldrh	r2, [r2, #0]
 8011dde:	499d      	ldr	r1, [pc, #628]	@ (8012054 <USB_ActivateEndpoint+0x6b4>)
 8011de0:	430a      	orrs	r2, r1
 8011de2:	b292      	uxth	r2, r2
 8011de4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2250      	movs	r2, #80	@ 0x50
 8011dee:	5a9b      	ldrh	r3, [r3, r2]
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	001a      	movs	r2, r3
 8011df4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011df6:	189b      	adds	r3, r3, r2
 8011df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	00da      	lsls	r2, r3, #3
 8011e00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e02:	18d3      	adds	r3, r2, r3
 8011e04:	2280      	movs	r2, #128	@ 0x80
 8011e06:	00d2      	lsls	r2, r2, #3
 8011e08:	4694      	mov	ip, r2
 8011e0a:	4463      	add	r3, ip
 8011e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	891b      	ldrh	r3, [r3, #8]
 8011e12:	085b      	lsrs	r3, r3, #1
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	18db      	adds	r3, r3, r3
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e1c:	801a      	strh	r2, [r3, #0]
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2250      	movs	r2, #80	@ 0x50
 8011e26:	5a9b      	ldrh	r3, [r3, r2]
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	001a      	movs	r2, r3
 8011e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e2e:	189b      	adds	r3, r3, r2
 8011e30:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	00da      	lsls	r2, r3, #3
 8011e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e3a:	18d3      	adds	r3, r2, r3
 8011e3c:	4a88      	ldr	r2, [pc, #544]	@ (8012060 <USB_ActivateEndpoint+0x6c0>)
 8011e3e:	4694      	mov	ip, r2
 8011e40:	4463      	add	r3, ip
 8011e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	895b      	ldrh	r3, [r3, #10]
 8011e48:	085b      	lsrs	r3, r3, #1
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	18db      	adds	r3, r3, r3
 8011e4e:	b29a      	uxth	r2, r3
 8011e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e52:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	785b      	ldrb	r3, [r3, #1]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d000      	beq.n	8011e5e <USB_ActivateEndpoint+0x4be>
 8011e5c:	e087      	b.n	8011f6e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e5e:	687a      	ldr	r2, [r7, #4]
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	18d2      	adds	r2, r2, r3
 8011e68:	2140      	movs	r1, #64	@ 0x40
 8011e6a:	187b      	adds	r3, r7, r1
 8011e6c:	8812      	ldrh	r2, [r2, #0]
 8011e6e:	801a      	strh	r2, [r3, #0]
 8011e70:	187b      	adds	r3, r7, r1
 8011e72:	881a      	ldrh	r2, [r3, #0]
 8011e74:	2380      	movs	r3, #128	@ 0x80
 8011e76:	01db      	lsls	r3, r3, #7
 8011e78:	4013      	ands	r3, r2
 8011e7a:	d016      	beq.n	8011eaa <USB_ActivateEndpoint+0x50a>
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	009b      	lsls	r3, r3, #2
 8011e84:	18d3      	adds	r3, r2, r3
 8011e86:	881b      	ldrh	r3, [r3, #0]
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	203e      	movs	r0, #62	@ 0x3e
 8011e8c:	183b      	adds	r3, r7, r0
 8011e8e:	496e      	ldr	r1, [pc, #440]	@ (8012048 <USB_ActivateEndpoint+0x6a8>)
 8011e90:	400a      	ands	r2, r1
 8011e92:	801a      	strh	r2, [r3, #0]
 8011e94:	687a      	ldr	r2, [r7, #4]
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	009b      	lsls	r3, r3, #2
 8011e9c:	18d3      	adds	r3, r2, r3
 8011e9e:	183a      	adds	r2, r7, r0
 8011ea0:	8812      	ldrh	r2, [r2, #0]
 8011ea2:	496a      	ldr	r1, [pc, #424]	@ (801204c <USB_ActivateEndpoint+0x6ac>)
 8011ea4:	430a      	orrs	r2, r1
 8011ea6:	b292      	uxth	r2, r2
 8011ea8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	009b      	lsls	r3, r3, #2
 8011eb2:	18d2      	adds	r2, r2, r3
 8011eb4:	213c      	movs	r1, #60	@ 0x3c
 8011eb6:	187b      	adds	r3, r7, r1
 8011eb8:	8812      	ldrh	r2, [r2, #0]
 8011eba:	801a      	strh	r2, [r3, #0]
 8011ebc:	187b      	adds	r3, r7, r1
 8011ebe:	881b      	ldrh	r3, [r3, #0]
 8011ec0:	2240      	movs	r2, #64	@ 0x40
 8011ec2:	4013      	ands	r3, r2
 8011ec4:	d016      	beq.n	8011ef4 <USB_ActivateEndpoint+0x554>
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	18d3      	adds	r3, r2, r3
 8011ed0:	881b      	ldrh	r3, [r3, #0]
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	203a      	movs	r0, #58	@ 0x3a
 8011ed6:	183b      	adds	r3, r7, r0
 8011ed8:	495b      	ldr	r1, [pc, #364]	@ (8012048 <USB_ActivateEndpoint+0x6a8>)
 8011eda:	400a      	ands	r2, r1
 8011edc:	801a      	strh	r2, [r3, #0]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	009b      	lsls	r3, r3, #2
 8011ee6:	18d3      	adds	r3, r2, r3
 8011ee8:	183a      	adds	r2, r7, r0
 8011eea:	8812      	ldrh	r2, [r2, #0]
 8011eec:	495d      	ldr	r1, [pc, #372]	@ (8012064 <USB_ActivateEndpoint+0x6c4>)
 8011eee:	430a      	orrs	r2, r1
 8011ef0:	b292      	uxth	r2, r2
 8011ef2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011ef4:	687a      	ldr	r2, [r7, #4]
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	009b      	lsls	r3, r3, #2
 8011efc:	18d3      	adds	r3, r2, r3
 8011efe:	881b      	ldrh	r3, [r3, #0]
 8011f00:	b29a      	uxth	r2, r3
 8011f02:	2038      	movs	r0, #56	@ 0x38
 8011f04:	183b      	adds	r3, r7, r0
 8011f06:	4952      	ldr	r1, [pc, #328]	@ (8012050 <USB_ActivateEndpoint+0x6b0>)
 8011f08:	400a      	ands	r2, r1
 8011f0a:	801a      	strh	r2, [r3, #0]
 8011f0c:	183b      	adds	r3, r7, r0
 8011f0e:	183a      	adds	r2, r7, r0
 8011f10:	8812      	ldrh	r2, [r2, #0]
 8011f12:	2180      	movs	r1, #128	@ 0x80
 8011f14:	0149      	lsls	r1, r1, #5
 8011f16:	404a      	eors	r2, r1
 8011f18:	801a      	strh	r2, [r3, #0]
 8011f1a:	183b      	adds	r3, r7, r0
 8011f1c:	183a      	adds	r2, r7, r0
 8011f1e:	8812      	ldrh	r2, [r2, #0]
 8011f20:	2180      	movs	r1, #128	@ 0x80
 8011f22:	0189      	lsls	r1, r1, #6
 8011f24:	404a      	eors	r2, r1
 8011f26:	801a      	strh	r2, [r3, #0]
 8011f28:	687a      	ldr	r2, [r7, #4]
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	18d3      	adds	r3, r2, r3
 8011f32:	183a      	adds	r2, r7, r0
 8011f34:	8812      	ldrh	r2, [r2, #0]
 8011f36:	4947      	ldr	r1, [pc, #284]	@ (8012054 <USB_ActivateEndpoint+0x6b4>)
 8011f38:	430a      	orrs	r2, r1
 8011f3a:	b292      	uxth	r2, r2
 8011f3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	18d3      	adds	r3, r2, r3
 8011f48:	881b      	ldrh	r3, [r3, #0]
 8011f4a:	b29a      	uxth	r2, r3
 8011f4c:	2036      	movs	r0, #54	@ 0x36
 8011f4e:	183b      	adds	r3, r7, r0
 8011f50:	4945      	ldr	r1, [pc, #276]	@ (8012068 <USB_ActivateEndpoint+0x6c8>)
 8011f52:	400a      	ands	r2, r1
 8011f54:	801a      	strh	r2, [r3, #0]
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	009b      	lsls	r3, r3, #2
 8011f5e:	18d3      	adds	r3, r2, r3
 8011f60:	183a      	adds	r2, r7, r0
 8011f62:	8812      	ldrh	r2, [r2, #0]
 8011f64:	493b      	ldr	r1, [pc, #236]	@ (8012054 <USB_ActivateEndpoint+0x6b4>)
 8011f66:	430a      	orrs	r2, r1
 8011f68:	b292      	uxth	r2, r2
 8011f6a:	801a      	strh	r2, [r3, #0]
 8011f6c:	e0ac      	b.n	80120c8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	009b      	lsls	r3, r3, #2
 8011f76:	18d2      	adds	r2, r2, r3
 8011f78:	214e      	movs	r1, #78	@ 0x4e
 8011f7a:	187b      	adds	r3, r7, r1
 8011f7c:	8812      	ldrh	r2, [r2, #0]
 8011f7e:	801a      	strh	r2, [r3, #0]
 8011f80:	187b      	adds	r3, r7, r1
 8011f82:	881a      	ldrh	r2, [r3, #0]
 8011f84:	2380      	movs	r3, #128	@ 0x80
 8011f86:	01db      	lsls	r3, r3, #7
 8011f88:	4013      	ands	r3, r2
 8011f8a:	d016      	beq.n	8011fba <USB_ActivateEndpoint+0x61a>
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	18d3      	adds	r3, r2, r3
 8011f96:	881b      	ldrh	r3, [r3, #0]
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	204c      	movs	r0, #76	@ 0x4c
 8011f9c:	183b      	adds	r3, r7, r0
 8011f9e:	492a      	ldr	r1, [pc, #168]	@ (8012048 <USB_ActivateEndpoint+0x6a8>)
 8011fa0:	400a      	ands	r2, r1
 8011fa2:	801a      	strh	r2, [r3, #0]
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	009b      	lsls	r3, r3, #2
 8011fac:	18d3      	adds	r3, r2, r3
 8011fae:	183a      	adds	r2, r7, r0
 8011fb0:	8812      	ldrh	r2, [r2, #0]
 8011fb2:	4926      	ldr	r1, [pc, #152]	@ (801204c <USB_ActivateEndpoint+0x6ac>)
 8011fb4:	430a      	orrs	r2, r1
 8011fb6:	b292      	uxth	r2, r2
 8011fb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	18d2      	adds	r2, r2, r3
 8011fc4:	214a      	movs	r1, #74	@ 0x4a
 8011fc6:	187b      	adds	r3, r7, r1
 8011fc8:	8812      	ldrh	r2, [r2, #0]
 8011fca:	801a      	strh	r2, [r3, #0]
 8011fcc:	187b      	adds	r3, r7, r1
 8011fce:	881b      	ldrh	r3, [r3, #0]
 8011fd0:	2240      	movs	r2, #64	@ 0x40
 8011fd2:	4013      	ands	r3, r2
 8011fd4:	d016      	beq.n	8012004 <USB_ActivateEndpoint+0x664>
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	009b      	lsls	r3, r3, #2
 8011fde:	18d3      	adds	r3, r2, r3
 8011fe0:	881b      	ldrh	r3, [r3, #0]
 8011fe2:	b29a      	uxth	r2, r3
 8011fe4:	2048      	movs	r0, #72	@ 0x48
 8011fe6:	183b      	adds	r3, r7, r0
 8011fe8:	4917      	ldr	r1, [pc, #92]	@ (8012048 <USB_ActivateEndpoint+0x6a8>)
 8011fea:	400a      	ands	r2, r1
 8011fec:	801a      	strh	r2, [r3, #0]
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	009b      	lsls	r3, r3, #2
 8011ff6:	18d3      	adds	r3, r2, r3
 8011ff8:	183a      	adds	r2, r7, r0
 8011ffa:	8812      	ldrh	r2, [r2, #0]
 8011ffc:	4919      	ldr	r1, [pc, #100]	@ (8012064 <USB_ActivateEndpoint+0x6c4>)
 8011ffe:	430a      	orrs	r2, r1
 8012000:	b292      	uxth	r2, r2
 8012002:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	78db      	ldrb	r3, [r3, #3]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d02f      	beq.n	801206c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	009b      	lsls	r3, r3, #2
 8012014:	18d3      	adds	r3, r2, r3
 8012016:	881b      	ldrh	r3, [r3, #0]
 8012018:	b29a      	uxth	r2, r3
 801201a:	2044      	movs	r0, #68	@ 0x44
 801201c:	183b      	adds	r3, r7, r0
 801201e:	4912      	ldr	r1, [pc, #72]	@ (8012068 <USB_ActivateEndpoint+0x6c8>)
 8012020:	400a      	ands	r2, r1
 8012022:	801a      	strh	r2, [r3, #0]
 8012024:	183b      	adds	r3, r7, r0
 8012026:	183a      	adds	r2, r7, r0
 8012028:	8812      	ldrh	r2, [r2, #0]
 801202a:	2120      	movs	r1, #32
 801202c:	404a      	eors	r2, r1
 801202e:	801a      	strh	r2, [r3, #0]
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	18d3      	adds	r3, r2, r3
 801203a:	183a      	adds	r2, r7, r0
 801203c:	8812      	ldrh	r2, [r2, #0]
 801203e:	4905      	ldr	r1, [pc, #20]	@ (8012054 <USB_ActivateEndpoint+0x6b4>)
 8012040:	430a      	orrs	r2, r1
 8012042:	b292      	uxth	r2, r2
 8012044:	801a      	strh	r2, [r3, #0]
 8012046:	e028      	b.n	801209a <USB_ActivateEndpoint+0x6fa>
 8012048:	ffff8f8f 	.word	0xffff8f8f
 801204c:	ffffc080 	.word	0xffffc080
 8012050:	ffffbf8f 	.word	0xffffbf8f
 8012054:	ffff8080 	.word	0xffff8080
 8012058:	ffff8180 	.word	0xffff8180
 801205c:	ffff8e8f 	.word	0xffff8e8f
 8012060:	00000404 	.word	0x00000404
 8012064:	ffff80c0 	.word	0xffff80c0
 8012068:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	18d3      	adds	r3, r2, r3
 8012076:	881b      	ldrh	r3, [r3, #0]
 8012078:	b29a      	uxth	r2, r3
 801207a:	2046      	movs	r0, #70	@ 0x46
 801207c:	183b      	adds	r3, r7, r0
 801207e:	4916      	ldr	r1, [pc, #88]	@ (80120d8 <USB_ActivateEndpoint+0x738>)
 8012080:	400a      	ands	r2, r1
 8012082:	801a      	strh	r2, [r3, #0]
 8012084:	687a      	ldr	r2, [r7, #4]
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	18d3      	adds	r3, r2, r3
 801208e:	183a      	adds	r2, r7, r0
 8012090:	8812      	ldrh	r2, [r2, #0]
 8012092:	4912      	ldr	r1, [pc, #72]	@ (80120dc <USB_ActivateEndpoint+0x73c>)
 8012094:	430a      	orrs	r2, r1
 8012096:	b292      	uxth	r2, r2
 8012098:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	781b      	ldrb	r3, [r3, #0]
 80120a0:	009b      	lsls	r3, r3, #2
 80120a2:	18d3      	adds	r3, r2, r3
 80120a4:	881b      	ldrh	r3, [r3, #0]
 80120a6:	b29a      	uxth	r2, r3
 80120a8:	2042      	movs	r0, #66	@ 0x42
 80120aa:	183b      	adds	r3, r7, r0
 80120ac:	490c      	ldr	r1, [pc, #48]	@ (80120e0 <USB_ActivateEndpoint+0x740>)
 80120ae:	400a      	ands	r2, r1
 80120b0:	801a      	strh	r2, [r3, #0]
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	009b      	lsls	r3, r3, #2
 80120ba:	18d3      	adds	r3, r2, r3
 80120bc:	183a      	adds	r2, r7, r0
 80120be:	8812      	ldrh	r2, [r2, #0]
 80120c0:	4906      	ldr	r1, [pc, #24]	@ (80120dc <USB_ActivateEndpoint+0x73c>)
 80120c2:	430a      	orrs	r2, r1
 80120c4:	b292      	uxth	r2, r2
 80120c6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80120c8:	236f      	movs	r3, #111	@ 0x6f
 80120ca:	18fb      	adds	r3, r7, r3
 80120cc:	781b      	ldrb	r3, [r3, #0]
}
 80120ce:	0018      	movs	r0, r3
 80120d0:	46bd      	mov	sp, r7
 80120d2:	b01c      	add	sp, #112	@ 0x70
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	46c0      	nop			@ (mov r8, r8)
 80120d8:	ffff8fbf 	.word	0xffff8fbf
 80120dc:	ffff8080 	.word	0xffff8080
 80120e0:	ffffbf8f 	.word	0xffffbf8f

080120e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b08c      	sub	sp, #48	@ 0x30
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	7b1b      	ldrb	r3, [r3, #12]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d000      	beq.n	80120f8 <USB_DeactivateEndpoint+0x14>
 80120f6:	e07e      	b.n	80121f6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	785b      	ldrb	r3, [r3, #1]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d03c      	beq.n	801217a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012100:	687a      	ldr	r2, [r7, #4]
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	18d2      	adds	r2, r2, r3
 801210a:	210c      	movs	r1, #12
 801210c:	187b      	adds	r3, r7, r1
 801210e:	8812      	ldrh	r2, [r2, #0]
 8012110:	801a      	strh	r2, [r3, #0]
 8012112:	187b      	adds	r3, r7, r1
 8012114:	881b      	ldrh	r3, [r3, #0]
 8012116:	2240      	movs	r2, #64	@ 0x40
 8012118:	4013      	ands	r3, r2
 801211a:	d016      	beq.n	801214a <USB_DeactivateEndpoint+0x66>
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	009b      	lsls	r3, r3, #2
 8012124:	18d3      	adds	r3, r2, r3
 8012126:	881b      	ldrh	r3, [r3, #0]
 8012128:	b29a      	uxth	r2, r3
 801212a:	200a      	movs	r0, #10
 801212c:	183b      	adds	r3, r7, r0
 801212e:	49c7      	ldr	r1, [pc, #796]	@ (801244c <USB_DeactivateEndpoint+0x368>)
 8012130:	400a      	ands	r2, r1
 8012132:	801a      	strh	r2, [r3, #0]
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	009b      	lsls	r3, r3, #2
 801213c:	18d3      	adds	r3, r2, r3
 801213e:	183a      	adds	r2, r7, r0
 8012140:	8812      	ldrh	r2, [r2, #0]
 8012142:	49c3      	ldr	r1, [pc, #780]	@ (8012450 <USB_DeactivateEndpoint+0x36c>)
 8012144:	430a      	orrs	r2, r1
 8012146:	b292      	uxth	r2, r2
 8012148:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	009b      	lsls	r3, r3, #2
 8012152:	18d3      	adds	r3, r2, r3
 8012154:	881b      	ldrh	r3, [r3, #0]
 8012156:	b29a      	uxth	r2, r3
 8012158:	2008      	movs	r0, #8
 801215a:	183b      	adds	r3, r7, r0
 801215c:	49bd      	ldr	r1, [pc, #756]	@ (8012454 <USB_DeactivateEndpoint+0x370>)
 801215e:	400a      	ands	r2, r1
 8012160:	801a      	strh	r2, [r3, #0]
 8012162:	687a      	ldr	r2, [r7, #4]
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	009b      	lsls	r3, r3, #2
 801216a:	18d3      	adds	r3, r2, r3
 801216c:	183a      	adds	r2, r7, r0
 801216e:	8812      	ldrh	r2, [r2, #0]
 8012170:	49b9      	ldr	r1, [pc, #740]	@ (8012458 <USB_DeactivateEndpoint+0x374>)
 8012172:	430a      	orrs	r2, r1
 8012174:	b292      	uxth	r2, r2
 8012176:	801a      	strh	r2, [r3, #0]
 8012178:	e163      	b.n	8012442 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801217a:	687a      	ldr	r2, [r7, #4]
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	009b      	lsls	r3, r3, #2
 8012182:	18d2      	adds	r2, r2, r3
 8012184:	2112      	movs	r1, #18
 8012186:	187b      	adds	r3, r7, r1
 8012188:	8812      	ldrh	r2, [r2, #0]
 801218a:	801a      	strh	r2, [r3, #0]
 801218c:	187b      	adds	r3, r7, r1
 801218e:	881a      	ldrh	r2, [r3, #0]
 8012190:	2380      	movs	r3, #128	@ 0x80
 8012192:	01db      	lsls	r3, r3, #7
 8012194:	4013      	ands	r3, r2
 8012196:	d016      	beq.n	80121c6 <USB_DeactivateEndpoint+0xe2>
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	18d3      	adds	r3, r2, r3
 80121a2:	881b      	ldrh	r3, [r3, #0]
 80121a4:	b29a      	uxth	r2, r3
 80121a6:	2010      	movs	r0, #16
 80121a8:	183b      	adds	r3, r7, r0
 80121aa:	49a8      	ldr	r1, [pc, #672]	@ (801244c <USB_DeactivateEndpoint+0x368>)
 80121ac:	400a      	ands	r2, r1
 80121ae:	801a      	strh	r2, [r3, #0]
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	009b      	lsls	r3, r3, #2
 80121b8:	18d3      	adds	r3, r2, r3
 80121ba:	183a      	adds	r2, r7, r0
 80121bc:	8812      	ldrh	r2, [r2, #0]
 80121be:	49a7      	ldr	r1, [pc, #668]	@ (801245c <USB_DeactivateEndpoint+0x378>)
 80121c0:	430a      	orrs	r2, r1
 80121c2:	b292      	uxth	r2, r2
 80121c4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	781b      	ldrb	r3, [r3, #0]
 80121cc:	009b      	lsls	r3, r3, #2
 80121ce:	18d3      	adds	r3, r2, r3
 80121d0:	881b      	ldrh	r3, [r3, #0]
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	200e      	movs	r0, #14
 80121d6:	183b      	adds	r3, r7, r0
 80121d8:	49a1      	ldr	r1, [pc, #644]	@ (8012460 <USB_DeactivateEndpoint+0x37c>)
 80121da:	400a      	ands	r2, r1
 80121dc:	801a      	strh	r2, [r3, #0]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	18d3      	adds	r3, r2, r3
 80121e8:	183a      	adds	r2, r7, r0
 80121ea:	8812      	ldrh	r2, [r2, #0]
 80121ec:	499a      	ldr	r1, [pc, #616]	@ (8012458 <USB_DeactivateEndpoint+0x374>)
 80121ee:	430a      	orrs	r2, r1
 80121f0:	b292      	uxth	r2, r2
 80121f2:	801a      	strh	r2, [r3, #0]
 80121f4:	e125      	b.n	8012442 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	785b      	ldrb	r3, [r3, #1]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d000      	beq.n	8012200 <USB_DeactivateEndpoint+0x11c>
 80121fe:	e090      	b.n	8012322 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	18d2      	adds	r2, r2, r3
 801220a:	2120      	movs	r1, #32
 801220c:	187b      	adds	r3, r7, r1
 801220e:	8812      	ldrh	r2, [r2, #0]
 8012210:	801a      	strh	r2, [r3, #0]
 8012212:	187b      	adds	r3, r7, r1
 8012214:	881a      	ldrh	r2, [r3, #0]
 8012216:	2380      	movs	r3, #128	@ 0x80
 8012218:	01db      	lsls	r3, r3, #7
 801221a:	4013      	ands	r3, r2
 801221c:	d016      	beq.n	801224c <USB_DeactivateEndpoint+0x168>
 801221e:	687a      	ldr	r2, [r7, #4]
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	18d3      	adds	r3, r2, r3
 8012228:	881b      	ldrh	r3, [r3, #0]
 801222a:	b29a      	uxth	r2, r3
 801222c:	201e      	movs	r0, #30
 801222e:	183b      	adds	r3, r7, r0
 8012230:	4986      	ldr	r1, [pc, #536]	@ (801244c <USB_DeactivateEndpoint+0x368>)
 8012232:	400a      	ands	r2, r1
 8012234:	801a      	strh	r2, [r3, #0]
 8012236:	687a      	ldr	r2, [r7, #4]
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	009b      	lsls	r3, r3, #2
 801223e:	18d3      	adds	r3, r2, r3
 8012240:	183a      	adds	r2, r7, r0
 8012242:	8812      	ldrh	r2, [r2, #0]
 8012244:	4985      	ldr	r1, [pc, #532]	@ (801245c <USB_DeactivateEndpoint+0x378>)
 8012246:	430a      	orrs	r2, r1
 8012248:	b292      	uxth	r2, r2
 801224a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	009b      	lsls	r3, r3, #2
 8012254:	18d2      	adds	r2, r2, r3
 8012256:	211c      	movs	r1, #28
 8012258:	187b      	adds	r3, r7, r1
 801225a:	8812      	ldrh	r2, [r2, #0]
 801225c:	801a      	strh	r2, [r3, #0]
 801225e:	187b      	adds	r3, r7, r1
 8012260:	881b      	ldrh	r3, [r3, #0]
 8012262:	2240      	movs	r2, #64	@ 0x40
 8012264:	4013      	ands	r3, r2
 8012266:	d016      	beq.n	8012296 <USB_DeactivateEndpoint+0x1b2>
 8012268:	687a      	ldr	r2, [r7, #4]
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	009b      	lsls	r3, r3, #2
 8012270:	18d3      	adds	r3, r2, r3
 8012272:	881b      	ldrh	r3, [r3, #0]
 8012274:	b29a      	uxth	r2, r3
 8012276:	201a      	movs	r0, #26
 8012278:	183b      	adds	r3, r7, r0
 801227a:	4974      	ldr	r1, [pc, #464]	@ (801244c <USB_DeactivateEndpoint+0x368>)
 801227c:	400a      	ands	r2, r1
 801227e:	801a      	strh	r2, [r3, #0]
 8012280:	687a      	ldr	r2, [r7, #4]
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	009b      	lsls	r3, r3, #2
 8012288:	18d3      	adds	r3, r2, r3
 801228a:	183a      	adds	r2, r7, r0
 801228c:	8812      	ldrh	r2, [r2, #0]
 801228e:	4970      	ldr	r1, [pc, #448]	@ (8012450 <USB_DeactivateEndpoint+0x36c>)
 8012290:	430a      	orrs	r2, r1
 8012292:	b292      	uxth	r2, r2
 8012294:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	18d3      	adds	r3, r2, r3
 80122a0:	881b      	ldrh	r3, [r3, #0]
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	2018      	movs	r0, #24
 80122a6:	183b      	adds	r3, r7, r0
 80122a8:	4968      	ldr	r1, [pc, #416]	@ (801244c <USB_DeactivateEndpoint+0x368>)
 80122aa:	400a      	ands	r2, r1
 80122ac:	801a      	strh	r2, [r3, #0]
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	009b      	lsls	r3, r3, #2
 80122b6:	18d3      	adds	r3, r2, r3
 80122b8:	183a      	adds	r2, r7, r0
 80122ba:	8812      	ldrh	r2, [r2, #0]
 80122bc:	4964      	ldr	r1, [pc, #400]	@ (8012450 <USB_DeactivateEndpoint+0x36c>)
 80122be:	430a      	orrs	r2, r1
 80122c0:	b292      	uxth	r2, r2
 80122c2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80122c4:	687a      	ldr	r2, [r7, #4]
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	18d3      	adds	r3, r2, r3
 80122ce:	881b      	ldrh	r3, [r3, #0]
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	2016      	movs	r0, #22
 80122d4:	183b      	adds	r3, r7, r0
 80122d6:	4962      	ldr	r1, [pc, #392]	@ (8012460 <USB_DeactivateEndpoint+0x37c>)
 80122d8:	400a      	ands	r2, r1
 80122da:	801a      	strh	r2, [r3, #0]
 80122dc:	687a      	ldr	r2, [r7, #4]
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	009b      	lsls	r3, r3, #2
 80122e4:	18d3      	adds	r3, r2, r3
 80122e6:	183a      	adds	r2, r7, r0
 80122e8:	8812      	ldrh	r2, [r2, #0]
 80122ea:	495b      	ldr	r1, [pc, #364]	@ (8012458 <USB_DeactivateEndpoint+0x374>)
 80122ec:	430a      	orrs	r2, r1
 80122ee:	b292      	uxth	r2, r2
 80122f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	18d3      	adds	r3, r2, r3
 80122fc:	881b      	ldrh	r3, [r3, #0]
 80122fe:	b29a      	uxth	r2, r3
 8012300:	2014      	movs	r0, #20
 8012302:	183b      	adds	r3, r7, r0
 8012304:	4953      	ldr	r1, [pc, #332]	@ (8012454 <USB_DeactivateEndpoint+0x370>)
 8012306:	400a      	ands	r2, r1
 8012308:	801a      	strh	r2, [r3, #0]
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	009b      	lsls	r3, r3, #2
 8012312:	18d3      	adds	r3, r2, r3
 8012314:	183a      	adds	r2, r7, r0
 8012316:	8812      	ldrh	r2, [r2, #0]
 8012318:	494f      	ldr	r1, [pc, #316]	@ (8012458 <USB_DeactivateEndpoint+0x374>)
 801231a:	430a      	orrs	r2, r1
 801231c:	b292      	uxth	r2, r2
 801231e:	801a      	strh	r2, [r3, #0]
 8012320:	e08f      	b.n	8012442 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012322:	687a      	ldr	r2, [r7, #4]
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	009b      	lsls	r3, r3, #2
 801232a:	18d2      	adds	r2, r2, r3
 801232c:	212e      	movs	r1, #46	@ 0x2e
 801232e:	187b      	adds	r3, r7, r1
 8012330:	8812      	ldrh	r2, [r2, #0]
 8012332:	801a      	strh	r2, [r3, #0]
 8012334:	187b      	adds	r3, r7, r1
 8012336:	881a      	ldrh	r2, [r3, #0]
 8012338:	2380      	movs	r3, #128	@ 0x80
 801233a:	01db      	lsls	r3, r3, #7
 801233c:	4013      	ands	r3, r2
 801233e:	d016      	beq.n	801236e <USB_DeactivateEndpoint+0x28a>
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	781b      	ldrb	r3, [r3, #0]
 8012346:	009b      	lsls	r3, r3, #2
 8012348:	18d3      	adds	r3, r2, r3
 801234a:	881b      	ldrh	r3, [r3, #0]
 801234c:	b29a      	uxth	r2, r3
 801234e:	202c      	movs	r0, #44	@ 0x2c
 8012350:	183b      	adds	r3, r7, r0
 8012352:	493e      	ldr	r1, [pc, #248]	@ (801244c <USB_DeactivateEndpoint+0x368>)
 8012354:	400a      	ands	r2, r1
 8012356:	801a      	strh	r2, [r3, #0]
 8012358:	687a      	ldr	r2, [r7, #4]
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	781b      	ldrb	r3, [r3, #0]
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	18d3      	adds	r3, r2, r3
 8012362:	183a      	adds	r2, r7, r0
 8012364:	8812      	ldrh	r2, [r2, #0]
 8012366:	493d      	ldr	r1, [pc, #244]	@ (801245c <USB_DeactivateEndpoint+0x378>)
 8012368:	430a      	orrs	r2, r1
 801236a:	b292      	uxth	r2, r2
 801236c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801236e:	687a      	ldr	r2, [r7, #4]
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	18d2      	adds	r2, r2, r3
 8012378:	212a      	movs	r1, #42	@ 0x2a
 801237a:	187b      	adds	r3, r7, r1
 801237c:	8812      	ldrh	r2, [r2, #0]
 801237e:	801a      	strh	r2, [r3, #0]
 8012380:	187b      	adds	r3, r7, r1
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	2240      	movs	r2, #64	@ 0x40
 8012386:	4013      	ands	r3, r2
 8012388:	d016      	beq.n	80123b8 <USB_DeactivateEndpoint+0x2d4>
 801238a:	687a      	ldr	r2, [r7, #4]
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	009b      	lsls	r3, r3, #2
 8012392:	18d3      	adds	r3, r2, r3
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	b29a      	uxth	r2, r3
 8012398:	2028      	movs	r0, #40	@ 0x28
 801239a:	183b      	adds	r3, r7, r0
 801239c:	492b      	ldr	r1, [pc, #172]	@ (801244c <USB_DeactivateEndpoint+0x368>)
 801239e:	400a      	ands	r2, r1
 80123a0:	801a      	strh	r2, [r3, #0]
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	009b      	lsls	r3, r3, #2
 80123aa:	18d3      	adds	r3, r2, r3
 80123ac:	183a      	adds	r2, r7, r0
 80123ae:	8812      	ldrh	r2, [r2, #0]
 80123b0:	4927      	ldr	r1, [pc, #156]	@ (8012450 <USB_DeactivateEndpoint+0x36c>)
 80123b2:	430a      	orrs	r2, r1
 80123b4:	b292      	uxth	r2, r2
 80123b6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	009b      	lsls	r3, r3, #2
 80123c0:	18d3      	adds	r3, r2, r3
 80123c2:	881b      	ldrh	r3, [r3, #0]
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	2026      	movs	r0, #38	@ 0x26
 80123c8:	183b      	adds	r3, r7, r0
 80123ca:	4920      	ldr	r1, [pc, #128]	@ (801244c <USB_DeactivateEndpoint+0x368>)
 80123cc:	400a      	ands	r2, r1
 80123ce:	801a      	strh	r2, [r3, #0]
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	009b      	lsls	r3, r3, #2
 80123d8:	18d3      	adds	r3, r2, r3
 80123da:	183a      	adds	r2, r7, r0
 80123dc:	8812      	ldrh	r2, [r2, #0]
 80123de:	491f      	ldr	r1, [pc, #124]	@ (801245c <USB_DeactivateEndpoint+0x378>)
 80123e0:	430a      	orrs	r2, r1
 80123e2:	b292      	uxth	r2, r2
 80123e4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	781b      	ldrb	r3, [r3, #0]
 80123ec:	009b      	lsls	r3, r3, #2
 80123ee:	18d3      	adds	r3, r2, r3
 80123f0:	881b      	ldrh	r3, [r3, #0]
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	2024      	movs	r0, #36	@ 0x24
 80123f6:	183b      	adds	r3, r7, r0
 80123f8:	4916      	ldr	r1, [pc, #88]	@ (8012454 <USB_DeactivateEndpoint+0x370>)
 80123fa:	400a      	ands	r2, r1
 80123fc:	801a      	strh	r2, [r3, #0]
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	009b      	lsls	r3, r3, #2
 8012406:	18d3      	adds	r3, r2, r3
 8012408:	183a      	adds	r2, r7, r0
 801240a:	8812      	ldrh	r2, [r2, #0]
 801240c:	4912      	ldr	r1, [pc, #72]	@ (8012458 <USB_DeactivateEndpoint+0x374>)
 801240e:	430a      	orrs	r2, r1
 8012410:	b292      	uxth	r2, r2
 8012412:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	781b      	ldrb	r3, [r3, #0]
 801241a:	009b      	lsls	r3, r3, #2
 801241c:	18d3      	adds	r3, r2, r3
 801241e:	881b      	ldrh	r3, [r3, #0]
 8012420:	b29a      	uxth	r2, r3
 8012422:	2022      	movs	r0, #34	@ 0x22
 8012424:	183b      	adds	r3, r7, r0
 8012426:	490e      	ldr	r1, [pc, #56]	@ (8012460 <USB_DeactivateEndpoint+0x37c>)
 8012428:	400a      	ands	r2, r1
 801242a:	801a      	strh	r2, [r3, #0]
 801242c:	687a      	ldr	r2, [r7, #4]
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	009b      	lsls	r3, r3, #2
 8012434:	18d3      	adds	r3, r2, r3
 8012436:	183a      	adds	r2, r7, r0
 8012438:	8812      	ldrh	r2, [r2, #0]
 801243a:	4907      	ldr	r1, [pc, #28]	@ (8012458 <USB_DeactivateEndpoint+0x374>)
 801243c:	430a      	orrs	r2, r1
 801243e:	b292      	uxth	r2, r2
 8012440:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8012442:	2300      	movs	r3, #0
}
 8012444:	0018      	movs	r0, r3
 8012446:	46bd      	mov	sp, r7
 8012448:	b00c      	add	sp, #48	@ 0x30
 801244a:	bd80      	pop	{r7, pc}
 801244c:	ffff8f8f 	.word	0xffff8f8f
 8012450:	ffff80c0 	.word	0xffff80c0
 8012454:	ffff8fbf 	.word	0xffff8fbf
 8012458:	ffff8080 	.word	0xffff8080
 801245c:	ffffc080 	.word	0xffffc080
 8012460:	ffffbf8f 	.word	0xffffbf8f

08012464 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012464:	b590      	push	{r4, r7, lr}
 8012466:	b0c3      	sub	sp, #268	@ 0x10c
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	785b      	ldrb	r3, [r3, #1]
 8012472:	2b01      	cmp	r3, #1
 8012474:	d001      	beq.n	801247a <USB_EPStartXfer+0x16>
 8012476:	f000 fd2d 	bl	8012ed4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	699a      	ldr	r2, [r3, #24]
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	691b      	ldr	r3, [r3, #16]
 8012482:	429a      	cmp	r2, r3
 8012484:	d905      	bls.n	8012492 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	691b      	ldr	r3, [r3, #16]
 801248a:	1d7a      	adds	r2, r7, #5
 801248c:	32ff      	adds	r2, #255	@ 0xff
 801248e:	6013      	str	r3, [r2, #0]
 8012490:	e004      	b.n	801249c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	699b      	ldr	r3, [r3, #24]
 8012496:	1d7a      	adds	r2, r7, #5
 8012498:	32ff      	adds	r2, #255	@ 0xff
 801249a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	7b1b      	ldrb	r3, [r3, #12]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d125      	bne.n	80124f0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	6959      	ldr	r1, [r3, #20]
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	88da      	ldrh	r2, [r3, #6]
 80124ac:	1d7b      	adds	r3, r7, #5
 80124ae:	33ff      	adds	r3, #255	@ 0xff
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f001 fa47 	bl	8013948 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	613b      	str	r3, [r7, #16]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2250      	movs	r2, #80	@ 0x50
 80124c2:	5a9b      	ldrh	r3, [r3, r2]
 80124c4:	b29b      	uxth	r3, r3
 80124c6:	001a      	movs	r2, r3
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	189b      	adds	r3, r3, r2
 80124cc:	613b      	str	r3, [r7, #16]
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	00da      	lsls	r2, r3, #3
 80124d4:	693b      	ldr	r3, [r7, #16]
 80124d6:	18d3      	adds	r3, r2, r3
 80124d8:	4ad7      	ldr	r2, [pc, #860]	@ (8012838 <USB_EPStartXfer+0x3d4>)
 80124da:	4694      	mov	ip, r2
 80124dc:	4463      	add	r3, ip
 80124de:	60fb      	str	r3, [r7, #12]
 80124e0:	1d7b      	adds	r3, r7, #5
 80124e2:	33ff      	adds	r3, #255	@ 0xff
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	801a      	strh	r2, [r3, #0]
 80124ec:	f000 fccd 	bl	8012e8a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	78db      	ldrb	r3, [r3, #3]
 80124f4:	2b02      	cmp	r3, #2
 80124f6:	d000      	beq.n	80124fa <USB_EPStartXfer+0x96>
 80124f8:	e362      	b.n	8012bc0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	6a1a      	ldr	r2, [r3, #32]
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	691b      	ldr	r3, [r3, #16]
 8012502:	429a      	cmp	r2, r3
 8012504:	d800      	bhi.n	8012508 <USB_EPStartXfer+0xa4>
 8012506:	e309      	b.n	8012b1c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012508:	687a      	ldr	r2, [r7, #4]
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	009b      	lsls	r3, r3, #2
 8012510:	18d3      	adds	r3, r2, r3
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	b29a      	uxth	r2, r3
 8012516:	2056      	movs	r0, #86	@ 0x56
 8012518:	183b      	adds	r3, r7, r0
 801251a:	49c8      	ldr	r1, [pc, #800]	@ (801283c <USB_EPStartXfer+0x3d8>)
 801251c:	400a      	ands	r2, r1
 801251e:	801a      	strh	r2, [r3, #0]
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	18d3      	adds	r3, r2, r3
 801252a:	183a      	adds	r2, r7, r0
 801252c:	8812      	ldrh	r2, [r2, #0]
 801252e:	49c4      	ldr	r1, [pc, #784]	@ (8012840 <USB_EPStartXfer+0x3dc>)
 8012530:	430a      	orrs	r2, r1
 8012532:	b292      	uxth	r2, r2
 8012534:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	6a1a      	ldr	r2, [r3, #32]
 801253a:	1d7b      	adds	r3, r7, #5
 801253c:	33ff      	adds	r3, #255	@ 0xff
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	1ad2      	subs	r2, r2, r3
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	009b      	lsls	r3, r3, #2
 801254e:	18d3      	adds	r3, r2, r3
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	b29b      	uxth	r3, r3
 8012554:	001a      	movs	r2, r3
 8012556:	2340      	movs	r3, #64	@ 0x40
 8012558:	4013      	ands	r3, r2
 801255a:	d100      	bne.n	801255e <USB_EPStartXfer+0xfa>
 801255c:	e176      	b.n	801284c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	633b      	str	r3, [r7, #48]	@ 0x30
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	785b      	ldrb	r3, [r3, #1]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d000      	beq.n	801256c <USB_EPStartXfer+0x108>
 801256a:	e074      	b.n	8012656 <USB_EPStartXfer+0x1f2>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2250      	movs	r2, #80	@ 0x50
 8012574:	5a9b      	ldrh	r3, [r3, r2]
 8012576:	b29b      	uxth	r3, r3
 8012578:	001a      	movs	r2, r3
 801257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801257c:	189b      	adds	r3, r3, r2
 801257e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	00da      	lsls	r2, r3, #3
 8012586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012588:	18d3      	adds	r3, r2, r3
 801258a:	4aae      	ldr	r2, [pc, #696]	@ (8012844 <USB_EPStartXfer+0x3e0>)
 801258c:	4694      	mov	ip, r2
 801258e:	4463      	add	r3, ip
 8012590:	627b      	str	r3, [r7, #36]	@ 0x24
 8012592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012594:	881b      	ldrh	r3, [r3, #0]
 8012596:	b29b      	uxth	r3, r3
 8012598:	059b      	lsls	r3, r3, #22
 801259a:	0d9b      	lsrs	r3, r3, #22
 801259c:	b29a      	uxth	r2, r3
 801259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a0:	801a      	strh	r2, [r3, #0]
 80125a2:	1d7b      	adds	r3, r7, #5
 80125a4:	33ff      	adds	r3, #255	@ 0xff
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80125aa:	d924      	bls.n	80125f6 <USB_EPStartXfer+0x192>
 80125ac:	1d7b      	adds	r3, r7, #5
 80125ae:	33ff      	adds	r3, #255	@ 0xff
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	095b      	lsrs	r3, r3, #5
 80125b4:	1c7a      	adds	r2, r7, #1
 80125b6:	32ff      	adds	r2, #255	@ 0xff
 80125b8:	6013      	str	r3, [r2, #0]
 80125ba:	1d7b      	adds	r3, r7, #5
 80125bc:	33ff      	adds	r3, #255	@ 0xff
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	221f      	movs	r2, #31
 80125c2:	4013      	ands	r3, r2
 80125c4:	d106      	bne.n	80125d4 <USB_EPStartXfer+0x170>
 80125c6:	1c7b      	adds	r3, r7, #1
 80125c8:	33ff      	adds	r3, #255	@ 0xff
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	3b01      	subs	r3, #1
 80125ce:	1c7a      	adds	r2, r7, #1
 80125d0:	32ff      	adds	r2, #255	@ 0xff
 80125d2:	6013      	str	r3, [r2, #0]
 80125d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125d6:	881b      	ldrh	r3, [r3, #0]
 80125d8:	b29a      	uxth	r2, r3
 80125da:	1c7b      	adds	r3, r7, #1
 80125dc:	33ff      	adds	r3, #255	@ 0xff
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	029b      	lsls	r3, r3, #10
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	4313      	orrs	r3, r2
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	4a97      	ldr	r2, [pc, #604]	@ (8012848 <USB_EPStartXfer+0x3e4>)
 80125ec:	4313      	orrs	r3, r2
 80125ee:	b29a      	uxth	r2, r3
 80125f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125f2:	801a      	strh	r2, [r3, #0]
 80125f4:	e04a      	b.n	801268c <USB_EPStartXfer+0x228>
 80125f6:	1d7b      	adds	r3, r7, #5
 80125f8:	33ff      	adds	r3, #255	@ 0xff
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d108      	bne.n	8012612 <USB_EPStartXfer+0x1ae>
 8012600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012602:	881b      	ldrh	r3, [r3, #0]
 8012604:	b29b      	uxth	r3, r3
 8012606:	4a90      	ldr	r2, [pc, #576]	@ (8012848 <USB_EPStartXfer+0x3e4>)
 8012608:	4313      	orrs	r3, r2
 801260a:	b29a      	uxth	r2, r3
 801260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801260e:	801a      	strh	r2, [r3, #0]
 8012610:	e03c      	b.n	801268c <USB_EPStartXfer+0x228>
 8012612:	1d7b      	adds	r3, r7, #5
 8012614:	33ff      	adds	r3, #255	@ 0xff
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	085b      	lsrs	r3, r3, #1
 801261a:	1c7a      	adds	r2, r7, #1
 801261c:	32ff      	adds	r2, #255	@ 0xff
 801261e:	6013      	str	r3, [r2, #0]
 8012620:	1d7b      	adds	r3, r7, #5
 8012622:	33ff      	adds	r3, #255	@ 0xff
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2201      	movs	r2, #1
 8012628:	4013      	ands	r3, r2
 801262a:	d006      	beq.n	801263a <USB_EPStartXfer+0x1d6>
 801262c:	1c7b      	adds	r3, r7, #1
 801262e:	33ff      	adds	r3, #255	@ 0xff
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	3301      	adds	r3, #1
 8012634:	1c7a      	adds	r2, r7, #1
 8012636:	32ff      	adds	r2, #255	@ 0xff
 8012638:	6013      	str	r3, [r2, #0]
 801263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	b29a      	uxth	r2, r3
 8012640:	1c7b      	adds	r3, r7, #1
 8012642:	33ff      	adds	r3, #255	@ 0xff
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	b29b      	uxth	r3, r3
 8012648:	029b      	lsls	r3, r3, #10
 801264a:	b29b      	uxth	r3, r3
 801264c:	4313      	orrs	r3, r2
 801264e:	b29a      	uxth	r2, r3
 8012650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012652:	801a      	strh	r2, [r3, #0]
 8012654:	e01a      	b.n	801268c <USB_EPStartXfer+0x228>
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	785b      	ldrb	r3, [r3, #1]
 801265a:	2b01      	cmp	r3, #1
 801265c:	d116      	bne.n	801268c <USB_EPStartXfer+0x228>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2250      	movs	r2, #80	@ 0x50
 8012662:	5a9b      	ldrh	r3, [r3, r2]
 8012664:	b29b      	uxth	r3, r3
 8012666:	001a      	movs	r2, r3
 8012668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801266a:	189b      	adds	r3, r3, r2
 801266c:	633b      	str	r3, [r7, #48]	@ 0x30
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	00da      	lsls	r2, r3, #3
 8012674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012676:	18d3      	adds	r3, r2, r3
 8012678:	4a72      	ldr	r2, [pc, #456]	@ (8012844 <USB_EPStartXfer+0x3e0>)
 801267a:	4694      	mov	ip, r2
 801267c:	4463      	add	r3, ip
 801267e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012680:	1d7b      	adds	r3, r7, #5
 8012682:	33ff      	adds	r3, #255	@ 0xff
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	b29a      	uxth	r2, r3
 8012688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801268a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801268c:	2076      	movs	r0, #118	@ 0x76
 801268e:	183b      	adds	r3, r7, r0
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	8952      	ldrh	r2, [r2, #10]
 8012694:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	6959      	ldr	r1, [r3, #20]
 801269a:	1d7b      	adds	r3, r7, #5
 801269c:	33ff      	adds	r3, #255	@ 0xff
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	b29c      	uxth	r4, r3
 80126a2:	183b      	adds	r3, r7, r0
 80126a4:	881a      	ldrh	r2, [r3, #0]
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	0023      	movs	r3, r4
 80126aa:	f001 f94d 	bl	8013948 <USB_WritePMA>
            ep->xfer_buff += len;
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	695a      	ldr	r2, [r3, #20]
 80126b2:	1d7b      	adds	r3, r7, #5
 80126b4:	33ff      	adds	r3, #255	@ 0xff
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	18d2      	adds	r2, r2, r3
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	6a1a      	ldr	r2, [r3, #32]
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	691b      	ldr	r3, [r3, #16]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d908      	bls.n	80126dc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	6a1a      	ldr	r2, [r3, #32]
 80126ce:	1d7b      	adds	r3, r7, #5
 80126d0:	33ff      	adds	r3, #255	@ 0xff
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	1ad2      	subs	r2, r2, r3
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	621a      	str	r2, [r3, #32]
 80126da:	e007      	b.n	80126ec <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	6a1b      	ldr	r3, [r3, #32]
 80126e0:	1d7a      	adds	r2, r7, #5
 80126e2:	32ff      	adds	r2, #255	@ 0xff
 80126e4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	2200      	movs	r2, #0
 80126ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	785b      	ldrb	r3, [r3, #1]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d000      	beq.n	80126f6 <USB_EPStartXfer+0x292>
 80126f4:	e070      	b.n	80127d8 <USB_EPStartXfer+0x374>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	61bb      	str	r3, [r7, #24]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2250      	movs	r2, #80	@ 0x50
 80126fe:	5a9b      	ldrh	r3, [r3, r2]
 8012700:	b29b      	uxth	r3, r3
 8012702:	001a      	movs	r2, r3
 8012704:	69bb      	ldr	r3, [r7, #24]
 8012706:	189b      	adds	r3, r3, r2
 8012708:	61bb      	str	r3, [r7, #24]
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	00da      	lsls	r2, r3, #3
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	18d3      	adds	r3, r2, r3
 8012714:	4a48      	ldr	r2, [pc, #288]	@ (8012838 <USB_EPStartXfer+0x3d4>)
 8012716:	4694      	mov	ip, r2
 8012718:	4463      	add	r3, ip
 801271a:	617b      	str	r3, [r7, #20]
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	881b      	ldrh	r3, [r3, #0]
 8012720:	b29b      	uxth	r3, r3
 8012722:	059b      	lsls	r3, r3, #22
 8012724:	0d9b      	lsrs	r3, r3, #22
 8012726:	b29a      	uxth	r2, r3
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	801a      	strh	r2, [r3, #0]
 801272c:	1d7b      	adds	r3, r7, #5
 801272e:	33ff      	adds	r3, #255	@ 0xff
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2b3e      	cmp	r3, #62	@ 0x3e
 8012734:	d922      	bls.n	801277c <USB_EPStartXfer+0x318>
 8012736:	1d7b      	adds	r3, r7, #5
 8012738:	33ff      	adds	r3, #255	@ 0xff
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	095b      	lsrs	r3, r3, #5
 801273e:	21fc      	movs	r1, #252	@ 0xfc
 8012740:	187a      	adds	r2, r7, r1
 8012742:	6013      	str	r3, [r2, #0]
 8012744:	1d7b      	adds	r3, r7, #5
 8012746:	33ff      	adds	r3, #255	@ 0xff
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	221f      	movs	r2, #31
 801274c:	4013      	ands	r3, r2
 801274e:	d104      	bne.n	801275a <USB_EPStartXfer+0x2f6>
 8012750:	187b      	adds	r3, r7, r1
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	3b01      	subs	r3, #1
 8012756:	187a      	adds	r2, r7, r1
 8012758:	6013      	str	r3, [r2, #0]
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	b29a      	uxth	r2, r3
 8012760:	23fc      	movs	r3, #252	@ 0xfc
 8012762:	18fb      	adds	r3, r7, r3
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	b29b      	uxth	r3, r3
 8012768:	029b      	lsls	r3, r3, #10
 801276a:	b29b      	uxth	r3, r3
 801276c:	4313      	orrs	r3, r2
 801276e:	b29b      	uxth	r3, r3
 8012770:	4a35      	ldr	r2, [pc, #212]	@ (8012848 <USB_EPStartXfer+0x3e4>)
 8012772:	4313      	orrs	r3, r2
 8012774:	b29a      	uxth	r2, r3
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	801a      	strh	r2, [r3, #0]
 801277a:	e04a      	b.n	8012812 <USB_EPStartXfer+0x3ae>
 801277c:	1d7b      	adds	r3, r7, #5
 801277e:	33ff      	adds	r3, #255	@ 0xff
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d108      	bne.n	8012798 <USB_EPStartXfer+0x334>
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	881b      	ldrh	r3, [r3, #0]
 801278a:	b29b      	uxth	r3, r3
 801278c:	4a2e      	ldr	r2, [pc, #184]	@ (8012848 <USB_EPStartXfer+0x3e4>)
 801278e:	4313      	orrs	r3, r2
 8012790:	b29a      	uxth	r2, r3
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	801a      	strh	r2, [r3, #0]
 8012796:	e03c      	b.n	8012812 <USB_EPStartXfer+0x3ae>
 8012798:	1d7b      	adds	r3, r7, #5
 801279a:	33ff      	adds	r3, #255	@ 0xff
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	085b      	lsrs	r3, r3, #1
 80127a0:	21fc      	movs	r1, #252	@ 0xfc
 80127a2:	187a      	adds	r2, r7, r1
 80127a4:	6013      	str	r3, [r2, #0]
 80127a6:	1d7b      	adds	r3, r7, #5
 80127a8:	33ff      	adds	r3, #255	@ 0xff
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2201      	movs	r2, #1
 80127ae:	4013      	ands	r3, r2
 80127b0:	d004      	beq.n	80127bc <USB_EPStartXfer+0x358>
 80127b2:	187b      	adds	r3, r7, r1
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	3301      	adds	r3, #1
 80127b8:	187a      	adds	r2, r7, r1
 80127ba:	6013      	str	r3, [r2, #0]
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	881b      	ldrh	r3, [r3, #0]
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	23fc      	movs	r3, #252	@ 0xfc
 80127c4:	18fb      	adds	r3, r7, r3
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	029b      	lsls	r3, r3, #10
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	4313      	orrs	r3, r2
 80127d0:	b29a      	uxth	r2, r3
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	801a      	strh	r2, [r3, #0]
 80127d6:	e01c      	b.n	8012812 <USB_EPStartXfer+0x3ae>
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	785b      	ldrb	r3, [r3, #1]
 80127dc:	2b01      	cmp	r3, #1
 80127de:	d118      	bne.n	8012812 <USB_EPStartXfer+0x3ae>
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	623b      	str	r3, [r7, #32]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2250      	movs	r2, #80	@ 0x50
 80127e8:	5a9b      	ldrh	r3, [r3, r2]
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	001a      	movs	r2, r3
 80127ee:	6a3b      	ldr	r3, [r7, #32]
 80127f0:	189b      	adds	r3, r3, r2
 80127f2:	623b      	str	r3, [r7, #32]
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	00da      	lsls	r2, r3, #3
 80127fa:	6a3b      	ldr	r3, [r7, #32]
 80127fc:	18d3      	adds	r3, r2, r3
 80127fe:	4a0e      	ldr	r2, [pc, #56]	@ (8012838 <USB_EPStartXfer+0x3d4>)
 8012800:	4694      	mov	ip, r2
 8012802:	4463      	add	r3, ip
 8012804:	61fb      	str	r3, [r7, #28]
 8012806:	1d7b      	adds	r3, r7, #5
 8012808:	33ff      	adds	r3, #255	@ 0xff
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	b29a      	uxth	r2, r3
 801280e:	69fb      	ldr	r3, [r7, #28]
 8012810:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012812:	2076      	movs	r0, #118	@ 0x76
 8012814:	183b      	adds	r3, r7, r0
 8012816:	683a      	ldr	r2, [r7, #0]
 8012818:	8912      	ldrh	r2, [r2, #8]
 801281a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	6959      	ldr	r1, [r3, #20]
 8012820:	1d7b      	adds	r3, r7, #5
 8012822:	33ff      	adds	r3, #255	@ 0xff
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	b29c      	uxth	r4, r3
 8012828:	183b      	adds	r3, r7, r0
 801282a:	881a      	ldrh	r2, [r3, #0]
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	0023      	movs	r3, r4
 8012830:	f001 f88a 	bl	8013948 <USB_WritePMA>
 8012834:	e329      	b.n	8012e8a <USB_EPStartXfer+0xa26>
 8012836:	46c0      	nop			@ (mov r8, r8)
 8012838:	00000402 	.word	0x00000402
 801283c:	ffff8f8f 	.word	0xffff8f8f
 8012840:	ffff8180 	.word	0xffff8180
 8012844:	00000406 	.word	0x00000406
 8012848:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	785b      	ldrb	r3, [r3, #1]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d000      	beq.n	8012856 <USB_EPStartXfer+0x3f2>
 8012854:	e070      	b.n	8012938 <USB_EPStartXfer+0x4d4>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	64bb      	str	r3, [r7, #72]	@ 0x48
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2250      	movs	r2, #80	@ 0x50
 801285e:	5a9b      	ldrh	r3, [r3, r2]
 8012860:	b29b      	uxth	r3, r3
 8012862:	001a      	movs	r2, r3
 8012864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012866:	189b      	adds	r3, r3, r2
 8012868:	64bb      	str	r3, [r7, #72]	@ 0x48
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	00da      	lsls	r2, r3, #3
 8012870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012872:	18d3      	adds	r3, r2, r3
 8012874:	4acd      	ldr	r2, [pc, #820]	@ (8012bac <USB_EPStartXfer+0x748>)
 8012876:	4694      	mov	ip, r2
 8012878:	4463      	add	r3, ip
 801287a:	647b      	str	r3, [r7, #68]	@ 0x44
 801287c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801287e:	881b      	ldrh	r3, [r3, #0]
 8012880:	b29b      	uxth	r3, r3
 8012882:	059b      	lsls	r3, r3, #22
 8012884:	0d9b      	lsrs	r3, r3, #22
 8012886:	b29a      	uxth	r2, r3
 8012888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801288a:	801a      	strh	r2, [r3, #0]
 801288c:	1d7b      	adds	r3, r7, #5
 801288e:	33ff      	adds	r3, #255	@ 0xff
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b3e      	cmp	r3, #62	@ 0x3e
 8012894:	d922      	bls.n	80128dc <USB_EPStartXfer+0x478>
 8012896:	1d7b      	adds	r3, r7, #5
 8012898:	33ff      	adds	r3, #255	@ 0xff
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	095b      	lsrs	r3, r3, #5
 801289e:	21f8      	movs	r1, #248	@ 0xf8
 80128a0:	187a      	adds	r2, r7, r1
 80128a2:	6013      	str	r3, [r2, #0]
 80128a4:	1d7b      	adds	r3, r7, #5
 80128a6:	33ff      	adds	r3, #255	@ 0xff
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	221f      	movs	r2, #31
 80128ac:	4013      	ands	r3, r2
 80128ae:	d104      	bne.n	80128ba <USB_EPStartXfer+0x456>
 80128b0:	187b      	adds	r3, r7, r1
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	187a      	adds	r2, r7, r1
 80128b8:	6013      	str	r3, [r2, #0]
 80128ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128bc:	881b      	ldrh	r3, [r3, #0]
 80128be:	b29a      	uxth	r2, r3
 80128c0:	23f8      	movs	r3, #248	@ 0xf8
 80128c2:	18fb      	adds	r3, r7, r3
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	b29b      	uxth	r3, r3
 80128c8:	029b      	lsls	r3, r3, #10
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	4313      	orrs	r3, r2
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	4ab7      	ldr	r2, [pc, #732]	@ (8012bb0 <USB_EPStartXfer+0x74c>)
 80128d2:	4313      	orrs	r3, r2
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128d8:	801a      	strh	r2, [r3, #0]
 80128da:	e04a      	b.n	8012972 <USB_EPStartXfer+0x50e>
 80128dc:	1d7b      	adds	r3, r7, #5
 80128de:	33ff      	adds	r3, #255	@ 0xff
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d108      	bne.n	80128f8 <USB_EPStartXfer+0x494>
 80128e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128e8:	881b      	ldrh	r3, [r3, #0]
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	4ab0      	ldr	r2, [pc, #704]	@ (8012bb0 <USB_EPStartXfer+0x74c>)
 80128ee:	4313      	orrs	r3, r2
 80128f0:	b29a      	uxth	r2, r3
 80128f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128f4:	801a      	strh	r2, [r3, #0]
 80128f6:	e03c      	b.n	8012972 <USB_EPStartXfer+0x50e>
 80128f8:	1d7b      	adds	r3, r7, #5
 80128fa:	33ff      	adds	r3, #255	@ 0xff
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	085b      	lsrs	r3, r3, #1
 8012900:	21f8      	movs	r1, #248	@ 0xf8
 8012902:	187a      	adds	r2, r7, r1
 8012904:	6013      	str	r3, [r2, #0]
 8012906:	1d7b      	adds	r3, r7, #5
 8012908:	33ff      	adds	r3, #255	@ 0xff
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2201      	movs	r2, #1
 801290e:	4013      	ands	r3, r2
 8012910:	d004      	beq.n	801291c <USB_EPStartXfer+0x4b8>
 8012912:	187b      	adds	r3, r7, r1
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	3301      	adds	r3, #1
 8012918:	187a      	adds	r2, r7, r1
 801291a:	6013      	str	r3, [r2, #0]
 801291c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801291e:	881b      	ldrh	r3, [r3, #0]
 8012920:	b29a      	uxth	r2, r3
 8012922:	23f8      	movs	r3, #248	@ 0xf8
 8012924:	18fb      	adds	r3, r7, r3
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	b29b      	uxth	r3, r3
 801292a:	029b      	lsls	r3, r3, #10
 801292c:	b29b      	uxth	r3, r3
 801292e:	4313      	orrs	r3, r2
 8012930:	b29a      	uxth	r2, r3
 8012932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012934:	801a      	strh	r2, [r3, #0]
 8012936:	e01c      	b.n	8012972 <USB_EPStartXfer+0x50e>
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	785b      	ldrb	r3, [r3, #1]
 801293c:	2b01      	cmp	r3, #1
 801293e:	d118      	bne.n	8012972 <USB_EPStartXfer+0x50e>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	653b      	str	r3, [r7, #80]	@ 0x50
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2250      	movs	r2, #80	@ 0x50
 8012948:	5a9b      	ldrh	r3, [r3, r2]
 801294a:	b29b      	uxth	r3, r3
 801294c:	001a      	movs	r2, r3
 801294e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012950:	189b      	adds	r3, r3, r2
 8012952:	653b      	str	r3, [r7, #80]	@ 0x50
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	00da      	lsls	r2, r3, #3
 801295a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801295c:	18d3      	adds	r3, r2, r3
 801295e:	4a93      	ldr	r2, [pc, #588]	@ (8012bac <USB_EPStartXfer+0x748>)
 8012960:	4694      	mov	ip, r2
 8012962:	4463      	add	r3, ip
 8012964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012966:	1d7b      	adds	r3, r7, #5
 8012968:	33ff      	adds	r3, #255	@ 0xff
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	b29a      	uxth	r2, r3
 801296e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012970:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012972:	2076      	movs	r0, #118	@ 0x76
 8012974:	183b      	adds	r3, r7, r0
 8012976:	683a      	ldr	r2, [r7, #0]
 8012978:	8912      	ldrh	r2, [r2, #8]
 801297a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	6959      	ldr	r1, [r3, #20]
 8012980:	1d7b      	adds	r3, r7, #5
 8012982:	33ff      	adds	r3, #255	@ 0xff
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	b29c      	uxth	r4, r3
 8012988:	183b      	adds	r3, r7, r0
 801298a:	881a      	ldrh	r2, [r3, #0]
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	0023      	movs	r3, r4
 8012990:	f000 ffda 	bl	8013948 <USB_WritePMA>
            ep->xfer_buff += len;
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	695a      	ldr	r2, [r3, #20]
 8012998:	1d7b      	adds	r3, r7, #5
 801299a:	33ff      	adds	r3, #255	@ 0xff
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	18d2      	adds	r2, r2, r3
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	6a1a      	ldr	r2, [r3, #32]
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	691b      	ldr	r3, [r3, #16]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d908      	bls.n	80129c2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	6a1a      	ldr	r2, [r3, #32]
 80129b4:	1d7b      	adds	r3, r7, #5
 80129b6:	33ff      	adds	r3, #255	@ 0xff
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	1ad2      	subs	r2, r2, r3
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	621a      	str	r2, [r3, #32]
 80129c0:	e007      	b.n	80129d2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	6a1b      	ldr	r3, [r3, #32]
 80129c6:	1d7a      	adds	r2, r7, #5
 80129c8:	32ff      	adds	r2, #255	@ 0xff
 80129ca:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	2200      	movs	r2, #0
 80129d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	785b      	ldrb	r3, [r3, #1]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d000      	beq.n	80129e0 <USB_EPStartXfer+0x57c>
 80129de:	e070      	b.n	8012ac2 <USB_EPStartXfer+0x65e>
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2250      	movs	r2, #80	@ 0x50
 80129e8:	5a9b      	ldrh	r3, [r3, r2]
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	001a      	movs	r2, r3
 80129ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129f0:	189b      	adds	r3, r3, r2
 80129f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	00da      	lsls	r2, r3, #3
 80129fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129fc:	18d3      	adds	r3, r2, r3
 80129fe:	4a6d      	ldr	r2, [pc, #436]	@ (8012bb4 <USB_EPStartXfer+0x750>)
 8012a00:	4694      	mov	ip, r2
 8012a02:	4463      	add	r3, ip
 8012a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a08:	881b      	ldrh	r3, [r3, #0]
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	059b      	lsls	r3, r3, #22
 8012a0e:	0d9b      	lsrs	r3, r3, #22
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a14:	801a      	strh	r2, [r3, #0]
 8012a16:	1d7b      	adds	r3, r7, #5
 8012a18:	33ff      	adds	r3, #255	@ 0xff
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a1e:	d922      	bls.n	8012a66 <USB_EPStartXfer+0x602>
 8012a20:	1d7b      	adds	r3, r7, #5
 8012a22:	33ff      	adds	r3, #255	@ 0xff
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	095b      	lsrs	r3, r3, #5
 8012a28:	21f4      	movs	r1, #244	@ 0xf4
 8012a2a:	187a      	adds	r2, r7, r1
 8012a2c:	6013      	str	r3, [r2, #0]
 8012a2e:	1d7b      	adds	r3, r7, #5
 8012a30:	33ff      	adds	r3, #255	@ 0xff
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	221f      	movs	r2, #31
 8012a36:	4013      	ands	r3, r2
 8012a38:	d104      	bne.n	8012a44 <USB_EPStartXfer+0x5e0>
 8012a3a:	187b      	adds	r3, r7, r1
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	3b01      	subs	r3, #1
 8012a40:	187a      	adds	r2, r7, r1
 8012a42:	6013      	str	r3, [r2, #0]
 8012a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a46:	881b      	ldrh	r3, [r3, #0]
 8012a48:	b29a      	uxth	r2, r3
 8012a4a:	23f4      	movs	r3, #244	@ 0xf4
 8012a4c:	18fb      	adds	r3, r7, r3
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	029b      	lsls	r3, r3, #10
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	4313      	orrs	r3, r2
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	4a55      	ldr	r2, [pc, #340]	@ (8012bb0 <USB_EPStartXfer+0x74c>)
 8012a5c:	4313      	orrs	r3, r2
 8012a5e:	b29a      	uxth	r2, r3
 8012a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a62:	801a      	strh	r2, [r3, #0]
 8012a64:	e048      	b.n	8012af8 <USB_EPStartXfer+0x694>
 8012a66:	1d7b      	adds	r3, r7, #5
 8012a68:	33ff      	adds	r3, #255	@ 0xff
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d108      	bne.n	8012a82 <USB_EPStartXfer+0x61e>
 8012a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a72:	881b      	ldrh	r3, [r3, #0]
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	4a4e      	ldr	r2, [pc, #312]	@ (8012bb0 <USB_EPStartXfer+0x74c>)
 8012a78:	4313      	orrs	r3, r2
 8012a7a:	b29a      	uxth	r2, r3
 8012a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a7e:	801a      	strh	r2, [r3, #0]
 8012a80:	e03a      	b.n	8012af8 <USB_EPStartXfer+0x694>
 8012a82:	1d7b      	adds	r3, r7, #5
 8012a84:	33ff      	adds	r3, #255	@ 0xff
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	085b      	lsrs	r3, r3, #1
 8012a8a:	21f4      	movs	r1, #244	@ 0xf4
 8012a8c:	187a      	adds	r2, r7, r1
 8012a8e:	6013      	str	r3, [r2, #0]
 8012a90:	1d7b      	adds	r3, r7, #5
 8012a92:	33ff      	adds	r3, #255	@ 0xff
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2201      	movs	r2, #1
 8012a98:	4013      	ands	r3, r2
 8012a9a:	d004      	beq.n	8012aa6 <USB_EPStartXfer+0x642>
 8012a9c:	187b      	adds	r3, r7, r1
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	187a      	adds	r2, r7, r1
 8012aa4:	6013      	str	r3, [r2, #0]
 8012aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012aa8:	881b      	ldrh	r3, [r3, #0]
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	23f4      	movs	r3, #244	@ 0xf4
 8012aae:	18fb      	adds	r3, r7, r3
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	029b      	lsls	r3, r3, #10
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	4313      	orrs	r3, r2
 8012aba:	b29a      	uxth	r2, r3
 8012abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012abe:	801a      	strh	r2, [r3, #0]
 8012ac0:	e01a      	b.n	8012af8 <USB_EPStartXfer+0x694>
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	785b      	ldrb	r3, [r3, #1]
 8012ac6:	2b01      	cmp	r3, #1
 8012ac8:	d116      	bne.n	8012af8 <USB_EPStartXfer+0x694>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2250      	movs	r2, #80	@ 0x50
 8012ace:	5a9b      	ldrh	r3, [r3, r2]
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	001a      	movs	r2, r3
 8012ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ad6:	189b      	adds	r3, r3, r2
 8012ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	781b      	ldrb	r3, [r3, #0]
 8012ade:	00da      	lsls	r2, r3, #3
 8012ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ae2:	18d3      	adds	r3, r2, r3
 8012ae4:	4a33      	ldr	r2, [pc, #204]	@ (8012bb4 <USB_EPStartXfer+0x750>)
 8012ae6:	4694      	mov	ip, r2
 8012ae8:	4463      	add	r3, ip
 8012aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012aec:	1d7b      	adds	r3, r7, #5
 8012aee:	33ff      	adds	r3, #255	@ 0xff
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012af6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012af8:	2076      	movs	r0, #118	@ 0x76
 8012afa:	183b      	adds	r3, r7, r0
 8012afc:	683a      	ldr	r2, [r7, #0]
 8012afe:	8952      	ldrh	r2, [r2, #10]
 8012b00:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	6959      	ldr	r1, [r3, #20]
 8012b06:	1d7b      	adds	r3, r7, #5
 8012b08:	33ff      	adds	r3, #255	@ 0xff
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	b29c      	uxth	r4, r3
 8012b0e:	183b      	adds	r3, r7, r0
 8012b10:	881a      	ldrh	r2, [r3, #0]
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	0023      	movs	r3, r4
 8012b16:	f000 ff17 	bl	8013948 <USB_WritePMA>
 8012b1a:	e1b6      	b.n	8012e8a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	6a1b      	ldr	r3, [r3, #32]
 8012b20:	1d7a      	adds	r2, r7, #5
 8012b22:	32ff      	adds	r2, #255	@ 0xff
 8012b24:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	009b      	lsls	r3, r3, #2
 8012b2e:	18d3      	adds	r3, r2, r3
 8012b30:	881b      	ldrh	r3, [r3, #0]
 8012b32:	b29a      	uxth	r2, r3
 8012b34:	2062      	movs	r0, #98	@ 0x62
 8012b36:	183b      	adds	r3, r7, r0
 8012b38:	491f      	ldr	r1, [pc, #124]	@ (8012bb8 <USB_EPStartXfer+0x754>)
 8012b3a:	400a      	ands	r2, r1
 8012b3c:	801a      	strh	r2, [r3, #0]
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	009b      	lsls	r3, r3, #2
 8012b46:	18d3      	adds	r3, r2, r3
 8012b48:	183a      	adds	r2, r7, r0
 8012b4a:	8812      	ldrh	r2, [r2, #0]
 8012b4c:	491b      	ldr	r1, [pc, #108]	@ (8012bbc <USB_EPStartXfer+0x758>)
 8012b4e:	430a      	orrs	r2, r1
 8012b50:	b292      	uxth	r2, r2
 8012b52:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2250      	movs	r2, #80	@ 0x50
 8012b5c:	5a9b      	ldrh	r3, [r3, r2]
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	001a      	movs	r2, r3
 8012b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b64:	189b      	adds	r3, r3, r2
 8012b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	00da      	lsls	r2, r3, #3
 8012b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b70:	18d3      	adds	r3, r2, r3
 8012b72:	4a0e      	ldr	r2, [pc, #56]	@ (8012bac <USB_EPStartXfer+0x748>)
 8012b74:	4694      	mov	ip, r2
 8012b76:	4463      	add	r3, ip
 8012b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012b7a:	1d7b      	adds	r3, r7, #5
 8012b7c:	33ff      	adds	r3, #255	@ 0xff
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	b29a      	uxth	r2, r3
 8012b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012b86:	2076      	movs	r0, #118	@ 0x76
 8012b88:	183b      	adds	r3, r7, r0
 8012b8a:	683a      	ldr	r2, [r7, #0]
 8012b8c:	8912      	ldrh	r2, [r2, #8]
 8012b8e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	6959      	ldr	r1, [r3, #20]
 8012b94:	1d7b      	adds	r3, r7, #5
 8012b96:	33ff      	adds	r3, #255	@ 0xff
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	b29c      	uxth	r4, r3
 8012b9c:	183b      	adds	r3, r7, r0
 8012b9e:	881a      	ldrh	r2, [r3, #0]
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	0023      	movs	r3, r4
 8012ba4:	f000 fed0 	bl	8013948 <USB_WritePMA>
 8012ba8:	e16f      	b.n	8012e8a <USB_EPStartXfer+0xa26>
 8012baa:	46c0      	nop			@ (mov r8, r8)
 8012bac:	00000402 	.word	0x00000402
 8012bb0:	ffff8000 	.word	0xffff8000
 8012bb4:	00000406 	.word	0x00000406
 8012bb8:	ffff8e8f 	.word	0xffff8e8f
 8012bbc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	6a1a      	ldr	r2, [r3, #32]
 8012bc4:	1d7b      	adds	r3, r7, #5
 8012bc6:	33ff      	adds	r3, #255	@ 0xff
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	1ad2      	subs	r2, r2, r3
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	18d3      	adds	r3, r2, r3
 8012bda:	881b      	ldrh	r3, [r3, #0]
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	001a      	movs	r2, r3
 8012be0:	2340      	movs	r3, #64	@ 0x40
 8012be2:	4013      	ands	r3, r2
 8012be4:	d100      	bne.n	8012be8 <USB_EPStartXfer+0x784>
 8012be6:	e0a4      	b.n	8012d32 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	673b      	str	r3, [r7, #112]	@ 0x70
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	785b      	ldrb	r3, [r3, #1]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d000      	beq.n	8012bf6 <USB_EPStartXfer+0x792>
 8012bf4:	e070      	b.n	8012cd8 <USB_EPStartXfer+0x874>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2250      	movs	r2, #80	@ 0x50
 8012bfe:	5a9b      	ldrh	r3, [r3, r2]
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	001a      	movs	r2, r3
 8012c04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c06:	189b      	adds	r3, r3, r2
 8012c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	00da      	lsls	r2, r3, #3
 8012c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c12:	18d3      	adds	r3, r2, r3
 8012c14:	4abc      	ldr	r2, [pc, #752]	@ (8012f08 <USB_EPStartXfer+0xaa4>)
 8012c16:	4694      	mov	ip, r2
 8012c18:	4463      	add	r3, ip
 8012c1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8012c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c1e:	881b      	ldrh	r3, [r3, #0]
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	059b      	lsls	r3, r3, #22
 8012c24:	0d9b      	lsrs	r3, r3, #22
 8012c26:	b29a      	uxth	r2, r3
 8012c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c2a:	801a      	strh	r2, [r3, #0]
 8012c2c:	1d7b      	adds	r3, r7, #5
 8012c2e:	33ff      	adds	r3, #255	@ 0xff
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	2b3e      	cmp	r3, #62	@ 0x3e
 8012c34:	d922      	bls.n	8012c7c <USB_EPStartXfer+0x818>
 8012c36:	1d7b      	adds	r3, r7, #5
 8012c38:	33ff      	adds	r3, #255	@ 0xff
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	095b      	lsrs	r3, r3, #5
 8012c3e:	21f0      	movs	r1, #240	@ 0xf0
 8012c40:	187a      	adds	r2, r7, r1
 8012c42:	6013      	str	r3, [r2, #0]
 8012c44:	1d7b      	adds	r3, r7, #5
 8012c46:	33ff      	adds	r3, #255	@ 0xff
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	221f      	movs	r2, #31
 8012c4c:	4013      	ands	r3, r2
 8012c4e:	d104      	bne.n	8012c5a <USB_EPStartXfer+0x7f6>
 8012c50:	187b      	adds	r3, r7, r1
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	3b01      	subs	r3, #1
 8012c56:	187a      	adds	r2, r7, r1
 8012c58:	6013      	str	r3, [r2, #0]
 8012c5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c5c:	881b      	ldrh	r3, [r3, #0]
 8012c5e:	b29a      	uxth	r2, r3
 8012c60:	23f0      	movs	r3, #240	@ 0xf0
 8012c62:	18fb      	adds	r3, r7, r3
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	029b      	lsls	r3, r3, #10
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	4313      	orrs	r3, r2
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	4aa6      	ldr	r2, [pc, #664]	@ (8012f0c <USB_EPStartXfer+0xaa8>)
 8012c72:	4313      	orrs	r3, r2
 8012c74:	b29a      	uxth	r2, r3
 8012c76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c78:	801a      	strh	r2, [r3, #0]
 8012c7a:	e048      	b.n	8012d0e <USB_EPStartXfer+0x8aa>
 8012c7c:	1d7b      	adds	r3, r7, #5
 8012c7e:	33ff      	adds	r3, #255	@ 0xff
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d108      	bne.n	8012c98 <USB_EPStartXfer+0x834>
 8012c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c88:	881b      	ldrh	r3, [r3, #0]
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	4a9f      	ldr	r2, [pc, #636]	@ (8012f0c <USB_EPStartXfer+0xaa8>)
 8012c8e:	4313      	orrs	r3, r2
 8012c90:	b29a      	uxth	r2, r3
 8012c92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c94:	801a      	strh	r2, [r3, #0]
 8012c96:	e03a      	b.n	8012d0e <USB_EPStartXfer+0x8aa>
 8012c98:	1d7b      	adds	r3, r7, #5
 8012c9a:	33ff      	adds	r3, #255	@ 0xff
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	085b      	lsrs	r3, r3, #1
 8012ca0:	21f0      	movs	r1, #240	@ 0xf0
 8012ca2:	187a      	adds	r2, r7, r1
 8012ca4:	6013      	str	r3, [r2, #0]
 8012ca6:	1d7b      	adds	r3, r7, #5
 8012ca8:	33ff      	adds	r3, #255	@ 0xff
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	2201      	movs	r2, #1
 8012cae:	4013      	ands	r3, r2
 8012cb0:	d004      	beq.n	8012cbc <USB_EPStartXfer+0x858>
 8012cb2:	187b      	adds	r3, r7, r1
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	187a      	adds	r2, r7, r1
 8012cba:	6013      	str	r3, [r2, #0]
 8012cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012cbe:	881b      	ldrh	r3, [r3, #0]
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	23f0      	movs	r3, #240	@ 0xf0
 8012cc4:	18fb      	adds	r3, r7, r3
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	b29b      	uxth	r3, r3
 8012cca:	029b      	lsls	r3, r3, #10
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	4313      	orrs	r3, r2
 8012cd0:	b29a      	uxth	r2, r3
 8012cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012cd4:	801a      	strh	r2, [r3, #0]
 8012cd6:	e01a      	b.n	8012d0e <USB_EPStartXfer+0x8aa>
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	785b      	ldrb	r3, [r3, #1]
 8012cdc:	2b01      	cmp	r3, #1
 8012cde:	d116      	bne.n	8012d0e <USB_EPStartXfer+0x8aa>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2250      	movs	r2, #80	@ 0x50
 8012ce4:	5a9b      	ldrh	r3, [r3, r2]
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	001a      	movs	r2, r3
 8012cea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012cec:	189b      	adds	r3, r3, r2
 8012cee:	673b      	str	r3, [r7, #112]	@ 0x70
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	00da      	lsls	r2, r3, #3
 8012cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012cf8:	18d3      	adds	r3, r2, r3
 8012cfa:	4a83      	ldr	r2, [pc, #524]	@ (8012f08 <USB_EPStartXfer+0xaa4>)
 8012cfc:	4694      	mov	ip, r2
 8012cfe:	4463      	add	r3, ip
 8012d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012d02:	1d7b      	adds	r3, r7, #5
 8012d04:	33ff      	adds	r3, #255	@ 0xff
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	b29a      	uxth	r2, r3
 8012d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012d0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012d0e:	2076      	movs	r0, #118	@ 0x76
 8012d10:	183b      	adds	r3, r7, r0
 8012d12:	683a      	ldr	r2, [r7, #0]
 8012d14:	8952      	ldrh	r2, [r2, #10]
 8012d16:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	6959      	ldr	r1, [r3, #20]
 8012d1c:	1d7b      	adds	r3, r7, #5
 8012d1e:	33ff      	adds	r3, #255	@ 0xff
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	b29c      	uxth	r4, r3
 8012d24:	183b      	adds	r3, r7, r0
 8012d26:	881a      	ldrh	r2, [r3, #0]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	0023      	movs	r3, r4
 8012d2c:	f000 fe0c 	bl	8013948 <USB_WritePMA>
 8012d30:	e0ab      	b.n	8012e8a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	785b      	ldrb	r3, [r3, #1]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d000      	beq.n	8012d3c <USB_EPStartXfer+0x8d8>
 8012d3a:	e070      	b.n	8012e1e <USB_EPStartXfer+0x9ba>
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2250      	movs	r2, #80	@ 0x50
 8012d44:	5a9b      	ldrh	r3, [r3, r2]
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	001a      	movs	r2, r3
 8012d4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d4c:	189b      	adds	r3, r3, r2
 8012d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	781b      	ldrb	r3, [r3, #0]
 8012d54:	00da      	lsls	r2, r3, #3
 8012d56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d58:	18d3      	adds	r3, r2, r3
 8012d5a:	4a6d      	ldr	r2, [pc, #436]	@ (8012f10 <USB_EPStartXfer+0xaac>)
 8012d5c:	4694      	mov	ip, r2
 8012d5e:	4463      	add	r3, ip
 8012d60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012d62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d64:	881b      	ldrh	r3, [r3, #0]
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	059b      	lsls	r3, r3, #22
 8012d6a:	0d9b      	lsrs	r3, r3, #22
 8012d6c:	b29a      	uxth	r2, r3
 8012d6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d70:	801a      	strh	r2, [r3, #0]
 8012d72:	1d7b      	adds	r3, r7, #5
 8012d74:	33ff      	adds	r3, #255	@ 0xff
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	2b3e      	cmp	r3, #62	@ 0x3e
 8012d7a:	d922      	bls.n	8012dc2 <USB_EPStartXfer+0x95e>
 8012d7c:	1d7b      	adds	r3, r7, #5
 8012d7e:	33ff      	adds	r3, #255	@ 0xff
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	095b      	lsrs	r3, r3, #5
 8012d84:	21ec      	movs	r1, #236	@ 0xec
 8012d86:	187a      	adds	r2, r7, r1
 8012d88:	6013      	str	r3, [r2, #0]
 8012d8a:	1d7b      	adds	r3, r7, #5
 8012d8c:	33ff      	adds	r3, #255	@ 0xff
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	221f      	movs	r2, #31
 8012d92:	4013      	ands	r3, r2
 8012d94:	d104      	bne.n	8012da0 <USB_EPStartXfer+0x93c>
 8012d96:	187b      	adds	r3, r7, r1
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	3b01      	subs	r3, #1
 8012d9c:	187a      	adds	r2, r7, r1
 8012d9e:	6013      	str	r3, [r2, #0]
 8012da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012da2:	881b      	ldrh	r3, [r3, #0]
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	23ec      	movs	r3, #236	@ 0xec
 8012da8:	18fb      	adds	r3, r7, r3
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	b29b      	uxth	r3, r3
 8012dae:	029b      	lsls	r3, r3, #10
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	4313      	orrs	r3, r2
 8012db4:	b29b      	uxth	r3, r3
 8012db6:	4a55      	ldr	r2, [pc, #340]	@ (8012f0c <USB_EPStartXfer+0xaa8>)
 8012db8:	4313      	orrs	r3, r2
 8012dba:	b29a      	uxth	r2, r3
 8012dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012dbe:	801a      	strh	r2, [r3, #0]
 8012dc0:	e052      	b.n	8012e68 <USB_EPStartXfer+0xa04>
 8012dc2:	1d7b      	adds	r3, r7, #5
 8012dc4:	33ff      	adds	r3, #255	@ 0xff
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d108      	bne.n	8012dde <USB_EPStartXfer+0x97a>
 8012dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012dce:	881b      	ldrh	r3, [r3, #0]
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	4a4e      	ldr	r2, [pc, #312]	@ (8012f0c <USB_EPStartXfer+0xaa8>)
 8012dd4:	4313      	orrs	r3, r2
 8012dd6:	b29a      	uxth	r2, r3
 8012dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012dda:	801a      	strh	r2, [r3, #0]
 8012ddc:	e044      	b.n	8012e68 <USB_EPStartXfer+0xa04>
 8012dde:	1d7b      	adds	r3, r7, #5
 8012de0:	33ff      	adds	r3, #255	@ 0xff
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	085b      	lsrs	r3, r3, #1
 8012de6:	21ec      	movs	r1, #236	@ 0xec
 8012de8:	187a      	adds	r2, r7, r1
 8012dea:	6013      	str	r3, [r2, #0]
 8012dec:	1d7b      	adds	r3, r7, #5
 8012dee:	33ff      	adds	r3, #255	@ 0xff
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	2201      	movs	r2, #1
 8012df4:	4013      	ands	r3, r2
 8012df6:	d004      	beq.n	8012e02 <USB_EPStartXfer+0x99e>
 8012df8:	187b      	adds	r3, r7, r1
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	187a      	adds	r2, r7, r1
 8012e00:	6013      	str	r3, [r2, #0]
 8012e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012e04:	881b      	ldrh	r3, [r3, #0]
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	23ec      	movs	r3, #236	@ 0xec
 8012e0a:	18fb      	adds	r3, r7, r3
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	029b      	lsls	r3, r3, #10
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	4313      	orrs	r3, r2
 8012e16:	b29a      	uxth	r2, r3
 8012e18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012e1a:	801a      	strh	r2, [r3, #0]
 8012e1c:	e024      	b.n	8012e68 <USB_EPStartXfer+0xa04>
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	785b      	ldrb	r3, [r3, #1]
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d120      	bne.n	8012e68 <USB_EPStartXfer+0xa04>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2184      	movs	r1, #132	@ 0x84
 8012e2a:	187a      	adds	r2, r7, r1
 8012e2c:	6013      	str	r3, [r2, #0]
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2250      	movs	r2, #80	@ 0x50
 8012e32:	5a9b      	ldrh	r3, [r3, r2]
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	001a      	movs	r2, r3
 8012e38:	187b      	adds	r3, r7, r1
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	189b      	adds	r3, r3, r2
 8012e3e:	187a      	adds	r2, r7, r1
 8012e40:	6013      	str	r3, [r2, #0]
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	00da      	lsls	r2, r3, #3
 8012e48:	187b      	adds	r3, r7, r1
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	18d3      	adds	r3, r2, r3
 8012e4e:	4a30      	ldr	r2, [pc, #192]	@ (8012f10 <USB_EPStartXfer+0xaac>)
 8012e50:	4694      	mov	ip, r2
 8012e52:	4463      	add	r3, ip
 8012e54:	2180      	movs	r1, #128	@ 0x80
 8012e56:	187a      	adds	r2, r7, r1
 8012e58:	6013      	str	r3, [r2, #0]
 8012e5a:	1d7b      	adds	r3, r7, #5
 8012e5c:	33ff      	adds	r3, #255	@ 0xff
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	b29a      	uxth	r2, r3
 8012e62:	187b      	adds	r3, r7, r1
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012e68:	2076      	movs	r0, #118	@ 0x76
 8012e6a:	183b      	adds	r3, r7, r0
 8012e6c:	683a      	ldr	r2, [r7, #0]
 8012e6e:	8912      	ldrh	r2, [r2, #8]
 8012e70:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	6959      	ldr	r1, [r3, #20]
 8012e76:	1d7b      	adds	r3, r7, #5
 8012e78:	33ff      	adds	r3, #255	@ 0xff
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	b29c      	uxth	r4, r3
 8012e7e:	183b      	adds	r3, r7, r0
 8012e80:	881a      	ldrh	r2, [r3, #0]
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	0023      	movs	r3, r4
 8012e86:	f000 fd5f 	bl	8013948 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	009b      	lsls	r3, r3, #2
 8012e92:	18d3      	adds	r3, r2, r3
 8012e94:	881b      	ldrh	r3, [r3, #0]
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	200a      	movs	r0, #10
 8012e9a:	183b      	adds	r3, r7, r0
 8012e9c:	491d      	ldr	r1, [pc, #116]	@ (8012f14 <USB_EPStartXfer+0xab0>)
 8012e9e:	400a      	ands	r2, r1
 8012ea0:	801a      	strh	r2, [r3, #0]
 8012ea2:	183b      	adds	r3, r7, r0
 8012ea4:	183a      	adds	r2, r7, r0
 8012ea6:	8812      	ldrh	r2, [r2, #0]
 8012ea8:	2110      	movs	r1, #16
 8012eaa:	404a      	eors	r2, r1
 8012eac:	801a      	strh	r2, [r3, #0]
 8012eae:	183b      	adds	r3, r7, r0
 8012eb0:	183a      	adds	r2, r7, r0
 8012eb2:	8812      	ldrh	r2, [r2, #0]
 8012eb4:	2120      	movs	r1, #32
 8012eb6:	404a      	eors	r2, r1
 8012eb8:	801a      	strh	r2, [r3, #0]
 8012eba:	687a      	ldr	r2, [r7, #4]
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	18d3      	adds	r3, r2, r3
 8012ec4:	183a      	adds	r2, r7, r0
 8012ec6:	8812      	ldrh	r2, [r2, #0]
 8012ec8:	4913      	ldr	r1, [pc, #76]	@ (8012f18 <USB_EPStartXfer+0xab4>)
 8012eca:	430a      	orrs	r2, r1
 8012ecc:	b292      	uxth	r2, r2
 8012ece:	801a      	strh	r2, [r3, #0]
 8012ed0:	f000 fbf4 	bl	80136bc <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	7b1b      	ldrb	r3, [r3, #12]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d000      	beq.n	8012ede <USB_EPStartXfer+0xa7a>
 8012edc:	e0a9      	b.n	8013032 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	699a      	ldr	r2, [r3, #24]
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	691b      	ldr	r3, [r3, #16]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d918      	bls.n	8012f1c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	691b      	ldr	r3, [r3, #16]
 8012eee:	1d7a      	adds	r2, r7, #5
 8012ef0:	32ff      	adds	r2, #255	@ 0xff
 8012ef2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	699a      	ldr	r2, [r3, #24]
 8012ef8:	1d7b      	adds	r3, r7, #5
 8012efa:	33ff      	adds	r3, #255	@ 0xff
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	1ad2      	subs	r2, r2, r3
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	619a      	str	r2, [r3, #24]
 8012f04:	e012      	b.n	8012f2c <USB_EPStartXfer+0xac8>
 8012f06:	46c0      	nop			@ (mov r8, r8)
 8012f08:	00000406 	.word	0x00000406
 8012f0c:	ffff8000 	.word	0xffff8000
 8012f10:	00000402 	.word	0x00000402
 8012f14:	ffff8fbf 	.word	0xffff8fbf
 8012f18:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	699b      	ldr	r3, [r3, #24]
 8012f20:	1d7a      	adds	r2, r7, #5
 8012f22:	32ff      	adds	r2, #255	@ 0xff
 8012f24:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2190      	movs	r1, #144	@ 0x90
 8012f30:	187a      	adds	r2, r7, r1
 8012f32:	6013      	str	r3, [r2, #0]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2250      	movs	r2, #80	@ 0x50
 8012f38:	5a9b      	ldrh	r3, [r3, r2]
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	001a      	movs	r2, r3
 8012f3e:	187b      	adds	r3, r7, r1
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	189b      	adds	r3, r3, r2
 8012f44:	187a      	adds	r2, r7, r1
 8012f46:	6013      	str	r3, [r2, #0]
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	00da      	lsls	r2, r3, #3
 8012f4e:	187b      	adds	r3, r7, r1
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	18d3      	adds	r3, r2, r3
 8012f54:	4acf      	ldr	r2, [pc, #828]	@ (8013294 <USB_EPStartXfer+0xe30>)
 8012f56:	4694      	mov	ip, r2
 8012f58:	4463      	add	r3, ip
 8012f5a:	218c      	movs	r1, #140	@ 0x8c
 8012f5c:	187a      	adds	r2, r7, r1
 8012f5e:	6013      	str	r3, [r2, #0]
 8012f60:	187b      	adds	r3, r7, r1
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	059b      	lsls	r3, r3, #22
 8012f6a:	0d9b      	lsrs	r3, r3, #22
 8012f6c:	b29a      	uxth	r2, r3
 8012f6e:	187b      	adds	r3, r7, r1
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	801a      	strh	r2, [r3, #0]
 8012f74:	1d7b      	adds	r3, r7, #5
 8012f76:	33ff      	adds	r3, #255	@ 0xff
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8012f7c:	d925      	bls.n	8012fca <USB_EPStartXfer+0xb66>
 8012f7e:	1d7b      	adds	r3, r7, #5
 8012f80:	33ff      	adds	r3, #255	@ 0xff
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	095b      	lsrs	r3, r3, #5
 8012f86:	21e8      	movs	r1, #232	@ 0xe8
 8012f88:	187a      	adds	r2, r7, r1
 8012f8a:	6013      	str	r3, [r2, #0]
 8012f8c:	1d7b      	adds	r3, r7, #5
 8012f8e:	33ff      	adds	r3, #255	@ 0xff
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	221f      	movs	r2, #31
 8012f94:	4013      	ands	r3, r2
 8012f96:	d104      	bne.n	8012fa2 <USB_EPStartXfer+0xb3e>
 8012f98:	187b      	adds	r3, r7, r1
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	3b01      	subs	r3, #1
 8012f9e:	187a      	adds	r2, r7, r1
 8012fa0:	6013      	str	r3, [r2, #0]
 8012fa2:	218c      	movs	r1, #140	@ 0x8c
 8012fa4:	187b      	adds	r3, r7, r1
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	881b      	ldrh	r3, [r3, #0]
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	23e8      	movs	r3, #232	@ 0xe8
 8012fae:	18fb      	adds	r3, r7, r3
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	029b      	lsls	r3, r3, #10
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	4313      	orrs	r3, r2
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	4ab6      	ldr	r2, [pc, #728]	@ (8013298 <USB_EPStartXfer+0xe34>)
 8012fbe:	4313      	orrs	r3, r2
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	187b      	adds	r3, r7, r1
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	801a      	strh	r2, [r3, #0]
 8012fc8:	e353      	b.n	8013672 <USB_EPStartXfer+0x120e>
 8012fca:	1d7b      	adds	r3, r7, #5
 8012fcc:	33ff      	adds	r3, #255	@ 0xff
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d10b      	bne.n	8012fec <USB_EPStartXfer+0xb88>
 8012fd4:	218c      	movs	r1, #140	@ 0x8c
 8012fd6:	187b      	adds	r3, r7, r1
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	4aae      	ldr	r2, [pc, #696]	@ (8013298 <USB_EPStartXfer+0xe34>)
 8012fe0:	4313      	orrs	r3, r2
 8012fe2:	b29a      	uxth	r2, r3
 8012fe4:	187b      	adds	r3, r7, r1
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	801a      	strh	r2, [r3, #0]
 8012fea:	e342      	b.n	8013672 <USB_EPStartXfer+0x120e>
 8012fec:	1d7b      	adds	r3, r7, #5
 8012fee:	33ff      	adds	r3, #255	@ 0xff
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	085b      	lsrs	r3, r3, #1
 8012ff4:	21e8      	movs	r1, #232	@ 0xe8
 8012ff6:	187a      	adds	r2, r7, r1
 8012ff8:	6013      	str	r3, [r2, #0]
 8012ffa:	1d7b      	adds	r3, r7, #5
 8012ffc:	33ff      	adds	r3, #255	@ 0xff
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2201      	movs	r2, #1
 8013002:	4013      	ands	r3, r2
 8013004:	d004      	beq.n	8013010 <USB_EPStartXfer+0xbac>
 8013006:	187b      	adds	r3, r7, r1
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	3301      	adds	r3, #1
 801300c:	187a      	adds	r2, r7, r1
 801300e:	6013      	str	r3, [r2, #0]
 8013010:	218c      	movs	r1, #140	@ 0x8c
 8013012:	187b      	adds	r3, r7, r1
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	881b      	ldrh	r3, [r3, #0]
 8013018:	b29a      	uxth	r2, r3
 801301a:	23e8      	movs	r3, #232	@ 0xe8
 801301c:	18fb      	adds	r3, r7, r3
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	b29b      	uxth	r3, r3
 8013022:	029b      	lsls	r3, r3, #10
 8013024:	b29b      	uxth	r3, r3
 8013026:	4313      	orrs	r3, r2
 8013028:	b29a      	uxth	r2, r3
 801302a:	187b      	adds	r3, r7, r1
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	801a      	strh	r2, [r3, #0]
 8013030:	e31f      	b.n	8013672 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	78db      	ldrb	r3, [r3, #3]
 8013036:	2b02      	cmp	r3, #2
 8013038:	d000      	beq.n	801303c <USB_EPStartXfer+0xbd8>
 801303a:	e191      	b.n	8013360 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	785b      	ldrb	r3, [r3, #1]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d000      	beq.n	8013046 <USB_EPStartXfer+0xbe2>
 8013044:	e07c      	b.n	8013140 <USB_EPStartXfer+0xcdc>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	21ac      	movs	r1, #172	@ 0xac
 801304a:	187a      	adds	r2, r7, r1
 801304c:	6013      	str	r3, [r2, #0]
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2250      	movs	r2, #80	@ 0x50
 8013052:	5a9b      	ldrh	r3, [r3, r2]
 8013054:	b29b      	uxth	r3, r3
 8013056:	001a      	movs	r2, r3
 8013058:	187b      	adds	r3, r7, r1
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	189b      	adds	r3, r3, r2
 801305e:	187a      	adds	r2, r7, r1
 8013060:	6013      	str	r3, [r2, #0]
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	00da      	lsls	r2, r3, #3
 8013068:	187b      	adds	r3, r7, r1
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	18d3      	adds	r3, r2, r3
 801306e:	4a8b      	ldr	r2, [pc, #556]	@ (801329c <USB_EPStartXfer+0xe38>)
 8013070:	4694      	mov	ip, r2
 8013072:	4463      	add	r3, ip
 8013074:	21a8      	movs	r1, #168	@ 0xa8
 8013076:	187a      	adds	r2, r7, r1
 8013078:	6013      	str	r3, [r2, #0]
 801307a:	187b      	adds	r3, r7, r1
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	881b      	ldrh	r3, [r3, #0]
 8013080:	b29b      	uxth	r3, r3
 8013082:	059b      	lsls	r3, r3, #22
 8013084:	0d9b      	lsrs	r3, r3, #22
 8013086:	b29a      	uxth	r2, r3
 8013088:	187b      	adds	r3, r7, r1
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	801a      	strh	r2, [r3, #0]
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	2b3e      	cmp	r3, #62	@ 0x3e
 8013094:	d923      	bls.n	80130de <USB_EPStartXfer+0xc7a>
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	691b      	ldr	r3, [r3, #16]
 801309a:	095b      	lsrs	r3, r3, #5
 801309c:	21e4      	movs	r1, #228	@ 0xe4
 801309e:	187a      	adds	r2, r7, r1
 80130a0:	6013      	str	r3, [r2, #0]
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	691b      	ldr	r3, [r3, #16]
 80130a6:	221f      	movs	r2, #31
 80130a8:	4013      	ands	r3, r2
 80130aa:	d104      	bne.n	80130b6 <USB_EPStartXfer+0xc52>
 80130ac:	187b      	adds	r3, r7, r1
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	3b01      	subs	r3, #1
 80130b2:	187a      	adds	r2, r7, r1
 80130b4:	6013      	str	r3, [r2, #0]
 80130b6:	21a8      	movs	r1, #168	@ 0xa8
 80130b8:	187b      	adds	r3, r7, r1
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	b29a      	uxth	r2, r3
 80130c0:	23e4      	movs	r3, #228	@ 0xe4
 80130c2:	18fb      	adds	r3, r7, r3
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	029b      	lsls	r3, r3, #10
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	4313      	orrs	r3, r2
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	4a71      	ldr	r2, [pc, #452]	@ (8013298 <USB_EPStartXfer+0xe34>)
 80130d2:	4313      	orrs	r3, r2
 80130d4:	b29a      	uxth	r2, r3
 80130d6:	187b      	adds	r3, r7, r1
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	801a      	strh	r2, [r3, #0]
 80130dc:	e054      	b.n	8013188 <USB_EPStartXfer+0xd24>
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	691b      	ldr	r3, [r3, #16]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d10b      	bne.n	80130fe <USB_EPStartXfer+0xc9a>
 80130e6:	21a8      	movs	r1, #168	@ 0xa8
 80130e8:	187b      	adds	r3, r7, r1
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	4a69      	ldr	r2, [pc, #420]	@ (8013298 <USB_EPStartXfer+0xe34>)
 80130f2:	4313      	orrs	r3, r2
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	187b      	adds	r3, r7, r1
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	801a      	strh	r2, [r3, #0]
 80130fc:	e044      	b.n	8013188 <USB_EPStartXfer+0xd24>
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	691b      	ldr	r3, [r3, #16]
 8013102:	085b      	lsrs	r3, r3, #1
 8013104:	21e4      	movs	r1, #228	@ 0xe4
 8013106:	187a      	adds	r2, r7, r1
 8013108:	6013      	str	r3, [r2, #0]
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	691b      	ldr	r3, [r3, #16]
 801310e:	2201      	movs	r2, #1
 8013110:	4013      	ands	r3, r2
 8013112:	d004      	beq.n	801311e <USB_EPStartXfer+0xcba>
 8013114:	187b      	adds	r3, r7, r1
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	3301      	adds	r3, #1
 801311a:	187a      	adds	r2, r7, r1
 801311c:	6013      	str	r3, [r2, #0]
 801311e:	21a8      	movs	r1, #168	@ 0xa8
 8013120:	187b      	adds	r3, r7, r1
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	881b      	ldrh	r3, [r3, #0]
 8013126:	b29a      	uxth	r2, r3
 8013128:	23e4      	movs	r3, #228	@ 0xe4
 801312a:	18fb      	adds	r3, r7, r3
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	b29b      	uxth	r3, r3
 8013130:	029b      	lsls	r3, r3, #10
 8013132:	b29b      	uxth	r3, r3
 8013134:	4313      	orrs	r3, r2
 8013136:	b29a      	uxth	r2, r3
 8013138:	187b      	adds	r3, r7, r1
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	801a      	strh	r2, [r3, #0]
 801313e:	e023      	b.n	8013188 <USB_EPStartXfer+0xd24>
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	785b      	ldrb	r3, [r3, #1]
 8013144:	2b01      	cmp	r3, #1
 8013146:	d11f      	bne.n	8013188 <USB_EPStartXfer+0xd24>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	21b4      	movs	r1, #180	@ 0xb4
 801314c:	187a      	adds	r2, r7, r1
 801314e:	6013      	str	r3, [r2, #0]
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2250      	movs	r2, #80	@ 0x50
 8013154:	5a9b      	ldrh	r3, [r3, r2]
 8013156:	b29b      	uxth	r3, r3
 8013158:	001a      	movs	r2, r3
 801315a:	187b      	adds	r3, r7, r1
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	189b      	adds	r3, r3, r2
 8013160:	187a      	adds	r2, r7, r1
 8013162:	6013      	str	r3, [r2, #0]
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	781b      	ldrb	r3, [r3, #0]
 8013168:	00da      	lsls	r2, r3, #3
 801316a:	187b      	adds	r3, r7, r1
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	18d3      	adds	r3, r2, r3
 8013170:	4a4a      	ldr	r2, [pc, #296]	@ (801329c <USB_EPStartXfer+0xe38>)
 8013172:	4694      	mov	ip, r2
 8013174:	4463      	add	r3, ip
 8013176:	21b0      	movs	r1, #176	@ 0xb0
 8013178:	187a      	adds	r2, r7, r1
 801317a:	6013      	str	r3, [r2, #0]
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	691b      	ldr	r3, [r3, #16]
 8013180:	b29a      	uxth	r2, r3
 8013182:	187b      	adds	r3, r7, r1
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	801a      	strh	r2, [r3, #0]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	22a4      	movs	r2, #164	@ 0xa4
 801318c:	18ba      	adds	r2, r7, r2
 801318e:	6013      	str	r3, [r2, #0]
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	785b      	ldrb	r3, [r3, #1]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d000      	beq.n	801319a <USB_EPStartXfer+0xd36>
 8013198:	e082      	b.n	80132a0 <USB_EPStartXfer+0xe3c>
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	219c      	movs	r1, #156	@ 0x9c
 801319e:	187a      	adds	r2, r7, r1
 80131a0:	6013      	str	r3, [r2, #0]
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2250      	movs	r2, #80	@ 0x50
 80131a6:	5a9b      	ldrh	r3, [r3, r2]
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	001a      	movs	r2, r3
 80131ac:	187b      	adds	r3, r7, r1
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	189b      	adds	r3, r3, r2
 80131b2:	187a      	adds	r2, r7, r1
 80131b4:	6013      	str	r3, [r2, #0]
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	00da      	lsls	r2, r3, #3
 80131bc:	187b      	adds	r3, r7, r1
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	18d3      	adds	r3, r2, r3
 80131c2:	4a34      	ldr	r2, [pc, #208]	@ (8013294 <USB_EPStartXfer+0xe30>)
 80131c4:	4694      	mov	ip, r2
 80131c6:	4463      	add	r3, ip
 80131c8:	2198      	movs	r1, #152	@ 0x98
 80131ca:	187a      	adds	r2, r7, r1
 80131cc:	6013      	str	r3, [r2, #0]
 80131ce:	187b      	adds	r3, r7, r1
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	881b      	ldrh	r3, [r3, #0]
 80131d4:	b29b      	uxth	r3, r3
 80131d6:	059b      	lsls	r3, r3, #22
 80131d8:	0d9b      	lsrs	r3, r3, #22
 80131da:	b29a      	uxth	r2, r3
 80131dc:	187b      	adds	r3, r7, r1
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	801a      	strh	r2, [r3, #0]
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	691b      	ldr	r3, [r3, #16]
 80131e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80131e8:	d923      	bls.n	8013232 <USB_EPStartXfer+0xdce>
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	691b      	ldr	r3, [r3, #16]
 80131ee:	095b      	lsrs	r3, r3, #5
 80131f0:	21e0      	movs	r1, #224	@ 0xe0
 80131f2:	187a      	adds	r2, r7, r1
 80131f4:	6013      	str	r3, [r2, #0]
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	691b      	ldr	r3, [r3, #16]
 80131fa:	221f      	movs	r2, #31
 80131fc:	4013      	ands	r3, r2
 80131fe:	d104      	bne.n	801320a <USB_EPStartXfer+0xda6>
 8013200:	187b      	adds	r3, r7, r1
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	3b01      	subs	r3, #1
 8013206:	187a      	adds	r2, r7, r1
 8013208:	6013      	str	r3, [r2, #0]
 801320a:	2198      	movs	r1, #152	@ 0x98
 801320c:	187b      	adds	r3, r7, r1
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	b29a      	uxth	r2, r3
 8013214:	23e0      	movs	r3, #224	@ 0xe0
 8013216:	18fb      	adds	r3, r7, r3
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	b29b      	uxth	r3, r3
 801321c:	029b      	lsls	r3, r3, #10
 801321e:	b29b      	uxth	r3, r3
 8013220:	4313      	orrs	r3, r2
 8013222:	b29b      	uxth	r3, r3
 8013224:	4a1c      	ldr	r2, [pc, #112]	@ (8013298 <USB_EPStartXfer+0xe34>)
 8013226:	4313      	orrs	r3, r2
 8013228:	b29a      	uxth	r2, r3
 801322a:	187b      	adds	r3, r7, r1
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	801a      	strh	r2, [r3, #0]
 8013230:	e057      	b.n	80132e2 <USB_EPStartXfer+0xe7e>
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	691b      	ldr	r3, [r3, #16]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d10b      	bne.n	8013252 <USB_EPStartXfer+0xdee>
 801323a:	2198      	movs	r1, #152	@ 0x98
 801323c:	187b      	adds	r3, r7, r1
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	881b      	ldrh	r3, [r3, #0]
 8013242:	b29b      	uxth	r3, r3
 8013244:	4a14      	ldr	r2, [pc, #80]	@ (8013298 <USB_EPStartXfer+0xe34>)
 8013246:	4313      	orrs	r3, r2
 8013248:	b29a      	uxth	r2, r3
 801324a:	187b      	adds	r3, r7, r1
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	801a      	strh	r2, [r3, #0]
 8013250:	e047      	b.n	80132e2 <USB_EPStartXfer+0xe7e>
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	691b      	ldr	r3, [r3, #16]
 8013256:	085b      	lsrs	r3, r3, #1
 8013258:	21e0      	movs	r1, #224	@ 0xe0
 801325a:	187a      	adds	r2, r7, r1
 801325c:	6013      	str	r3, [r2, #0]
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	691b      	ldr	r3, [r3, #16]
 8013262:	2201      	movs	r2, #1
 8013264:	4013      	ands	r3, r2
 8013266:	d004      	beq.n	8013272 <USB_EPStartXfer+0xe0e>
 8013268:	187b      	adds	r3, r7, r1
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	3301      	adds	r3, #1
 801326e:	187a      	adds	r2, r7, r1
 8013270:	6013      	str	r3, [r2, #0]
 8013272:	2198      	movs	r1, #152	@ 0x98
 8013274:	187b      	adds	r3, r7, r1
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	881b      	ldrh	r3, [r3, #0]
 801327a:	b29a      	uxth	r2, r3
 801327c:	23e0      	movs	r3, #224	@ 0xe0
 801327e:	18fb      	adds	r3, r7, r3
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	b29b      	uxth	r3, r3
 8013284:	029b      	lsls	r3, r3, #10
 8013286:	b29b      	uxth	r3, r3
 8013288:	4313      	orrs	r3, r2
 801328a:	b29a      	uxth	r2, r3
 801328c:	187b      	adds	r3, r7, r1
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	801a      	strh	r2, [r3, #0]
 8013292:	e026      	b.n	80132e2 <USB_EPStartXfer+0xe7e>
 8013294:	00000406 	.word	0x00000406
 8013298:	ffff8000 	.word	0xffff8000
 801329c:	00000402 	.word	0x00000402
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	785b      	ldrb	r3, [r3, #1]
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	d11c      	bne.n	80132e2 <USB_EPStartXfer+0xe7e>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2250      	movs	r2, #80	@ 0x50
 80132ac:	5a9b      	ldrh	r3, [r3, r2]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	001a      	movs	r2, r3
 80132b2:	21a4      	movs	r1, #164	@ 0xa4
 80132b4:	187b      	adds	r3, r7, r1
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	189b      	adds	r3, r3, r2
 80132ba:	187a      	adds	r2, r7, r1
 80132bc:	6013      	str	r3, [r2, #0]
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	00da      	lsls	r2, r3, #3
 80132c4:	187b      	adds	r3, r7, r1
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	18d3      	adds	r3, r2, r3
 80132ca:	4ad2      	ldr	r2, [pc, #840]	@ (8013614 <USB_EPStartXfer+0x11b0>)
 80132cc:	4694      	mov	ip, r2
 80132ce:	4463      	add	r3, ip
 80132d0:	21a0      	movs	r1, #160	@ 0xa0
 80132d2:	187a      	adds	r2, r7, r1
 80132d4:	6013      	str	r3, [r2, #0]
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	691b      	ldr	r3, [r3, #16]
 80132da:	b29a      	uxth	r2, r3
 80132dc:	187b      	adds	r3, r7, r1
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	69db      	ldr	r3, [r3, #28]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d100      	bne.n	80132ec <USB_EPStartXfer+0xe88>
 80132ea:	e1c2      	b.n	8013672 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	009b      	lsls	r3, r3, #2
 80132f4:	18d2      	adds	r2, r2, r3
 80132f6:	2196      	movs	r1, #150	@ 0x96
 80132f8:	187b      	adds	r3, r7, r1
 80132fa:	8812      	ldrh	r2, [r2, #0]
 80132fc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80132fe:	187b      	adds	r3, r7, r1
 8013300:	881a      	ldrh	r2, [r3, #0]
 8013302:	2380      	movs	r3, #128	@ 0x80
 8013304:	01db      	lsls	r3, r3, #7
 8013306:	4013      	ands	r3, r2
 8013308:	d004      	beq.n	8013314 <USB_EPStartXfer+0xeb0>
 801330a:	187b      	adds	r3, r7, r1
 801330c:	881b      	ldrh	r3, [r3, #0]
 801330e:	2240      	movs	r2, #64	@ 0x40
 8013310:	4013      	ands	r3, r2
 8013312:	d10d      	bne.n	8013330 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013314:	2196      	movs	r1, #150	@ 0x96
 8013316:	187b      	adds	r3, r7, r1
 8013318:	881a      	ldrh	r2, [r3, #0]
 801331a:	2380      	movs	r3, #128	@ 0x80
 801331c:	01db      	lsls	r3, r3, #7
 801331e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013320:	d000      	beq.n	8013324 <USB_EPStartXfer+0xec0>
 8013322:	e1a6      	b.n	8013672 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013324:	187b      	adds	r3, r7, r1
 8013326:	881b      	ldrh	r3, [r3, #0]
 8013328:	2240      	movs	r2, #64	@ 0x40
 801332a:	4013      	ands	r3, r2
 801332c:	d000      	beq.n	8013330 <USB_EPStartXfer+0xecc>
 801332e:	e1a0      	b.n	8013672 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8013330:	687a      	ldr	r2, [r7, #4]
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	009b      	lsls	r3, r3, #2
 8013338:	18d3      	adds	r3, r2, r3
 801333a:	881b      	ldrh	r3, [r3, #0]
 801333c:	b29a      	uxth	r2, r3
 801333e:	2094      	movs	r0, #148	@ 0x94
 8013340:	183b      	adds	r3, r7, r0
 8013342:	49b5      	ldr	r1, [pc, #724]	@ (8013618 <USB_EPStartXfer+0x11b4>)
 8013344:	400a      	ands	r2, r1
 8013346:	801a      	strh	r2, [r3, #0]
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	009b      	lsls	r3, r3, #2
 8013350:	18d3      	adds	r3, r2, r3
 8013352:	183a      	adds	r2, r7, r0
 8013354:	8812      	ldrh	r2, [r2, #0]
 8013356:	49b1      	ldr	r1, [pc, #708]	@ (801361c <USB_EPStartXfer+0x11b8>)
 8013358:	430a      	orrs	r2, r1
 801335a:	b292      	uxth	r2, r2
 801335c:	801a      	strh	r2, [r3, #0]
 801335e:	e188      	b.n	8013672 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	78db      	ldrb	r3, [r3, #3]
 8013364:	2b01      	cmp	r3, #1
 8013366:	d000      	beq.n	801336a <USB_EPStartXfer+0xf06>
 8013368:	e181      	b.n	801366e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	699a      	ldr	r2, [r3, #24]
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	691b      	ldr	r3, [r3, #16]
 8013372:	429a      	cmp	r2, r3
 8013374:	d90d      	bls.n	8013392 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	691b      	ldr	r3, [r3, #16]
 801337a:	1d7a      	adds	r2, r7, #5
 801337c:	32ff      	adds	r2, #255	@ 0xff
 801337e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	699a      	ldr	r2, [r3, #24]
 8013384:	1d7b      	adds	r3, r7, #5
 8013386:	33ff      	adds	r3, #255	@ 0xff
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	1ad2      	subs	r2, r2, r3
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	619a      	str	r2, [r3, #24]
 8013390:	e007      	b.n	80133a2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	699b      	ldr	r3, [r3, #24]
 8013396:	1d7a      	adds	r2, r7, #5
 8013398:	32ff      	adds	r2, #255	@ 0xff
 801339a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	2200      	movs	r2, #0
 80133a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	785b      	ldrb	r3, [r3, #1]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d000      	beq.n	80133ac <USB_EPStartXfer+0xf48>
 80133aa:	e082      	b.n	80134b2 <USB_EPStartXfer+0x104e>
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	21cc      	movs	r1, #204	@ 0xcc
 80133b0:	187a      	adds	r2, r7, r1
 80133b2:	6013      	str	r3, [r2, #0]
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2250      	movs	r2, #80	@ 0x50
 80133b8:	5a9b      	ldrh	r3, [r3, r2]
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	001a      	movs	r2, r3
 80133be:	187b      	adds	r3, r7, r1
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	189b      	adds	r3, r3, r2
 80133c4:	187a      	adds	r2, r7, r1
 80133c6:	6013      	str	r3, [r2, #0]
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	00da      	lsls	r2, r3, #3
 80133ce:	187b      	adds	r3, r7, r1
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	18d3      	adds	r3, r2, r3
 80133d4:	4a92      	ldr	r2, [pc, #584]	@ (8013620 <USB_EPStartXfer+0x11bc>)
 80133d6:	4694      	mov	ip, r2
 80133d8:	4463      	add	r3, ip
 80133da:	21c8      	movs	r1, #200	@ 0xc8
 80133dc:	187a      	adds	r2, r7, r1
 80133de:	6013      	str	r3, [r2, #0]
 80133e0:	187b      	adds	r3, r7, r1
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	881b      	ldrh	r3, [r3, #0]
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	059b      	lsls	r3, r3, #22
 80133ea:	0d9b      	lsrs	r3, r3, #22
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	187b      	adds	r3, r7, r1
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	801a      	strh	r2, [r3, #0]
 80133f4:	1d7b      	adds	r3, r7, #5
 80133f6:	33ff      	adds	r3, #255	@ 0xff
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80133fc:	d925      	bls.n	801344a <USB_EPStartXfer+0xfe6>
 80133fe:	1d7b      	adds	r3, r7, #5
 8013400:	33ff      	adds	r3, #255	@ 0xff
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	095b      	lsrs	r3, r3, #5
 8013406:	21dc      	movs	r1, #220	@ 0xdc
 8013408:	187a      	adds	r2, r7, r1
 801340a:	6013      	str	r3, [r2, #0]
 801340c:	1d7b      	adds	r3, r7, #5
 801340e:	33ff      	adds	r3, #255	@ 0xff
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	221f      	movs	r2, #31
 8013414:	4013      	ands	r3, r2
 8013416:	d104      	bne.n	8013422 <USB_EPStartXfer+0xfbe>
 8013418:	187b      	adds	r3, r7, r1
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	3b01      	subs	r3, #1
 801341e:	187a      	adds	r2, r7, r1
 8013420:	6013      	str	r3, [r2, #0]
 8013422:	21c8      	movs	r1, #200	@ 0xc8
 8013424:	187b      	adds	r3, r7, r1
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	881b      	ldrh	r3, [r3, #0]
 801342a:	b29a      	uxth	r2, r3
 801342c:	23dc      	movs	r3, #220	@ 0xdc
 801342e:	18fb      	adds	r3, r7, r3
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	b29b      	uxth	r3, r3
 8013434:	029b      	lsls	r3, r3, #10
 8013436:	b29b      	uxth	r3, r3
 8013438:	4313      	orrs	r3, r2
 801343a:	b29b      	uxth	r3, r3
 801343c:	4a79      	ldr	r2, [pc, #484]	@ (8013624 <USB_EPStartXfer+0x11c0>)
 801343e:	4313      	orrs	r3, r2
 8013440:	b29a      	uxth	r2, r3
 8013442:	187b      	adds	r3, r7, r1
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	801a      	strh	r2, [r3, #0]
 8013448:	e058      	b.n	80134fc <USB_EPStartXfer+0x1098>
 801344a:	1d7b      	adds	r3, r7, #5
 801344c:	33ff      	adds	r3, #255	@ 0xff
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d10b      	bne.n	801346c <USB_EPStartXfer+0x1008>
 8013454:	21c8      	movs	r1, #200	@ 0xc8
 8013456:	187b      	adds	r3, r7, r1
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	881b      	ldrh	r3, [r3, #0]
 801345c:	b29b      	uxth	r3, r3
 801345e:	4a71      	ldr	r2, [pc, #452]	@ (8013624 <USB_EPStartXfer+0x11c0>)
 8013460:	4313      	orrs	r3, r2
 8013462:	b29a      	uxth	r2, r3
 8013464:	187b      	adds	r3, r7, r1
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	801a      	strh	r2, [r3, #0]
 801346a:	e047      	b.n	80134fc <USB_EPStartXfer+0x1098>
 801346c:	1d7b      	adds	r3, r7, #5
 801346e:	33ff      	adds	r3, #255	@ 0xff
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	085b      	lsrs	r3, r3, #1
 8013474:	21dc      	movs	r1, #220	@ 0xdc
 8013476:	187a      	adds	r2, r7, r1
 8013478:	6013      	str	r3, [r2, #0]
 801347a:	1d7b      	adds	r3, r7, #5
 801347c:	33ff      	adds	r3, #255	@ 0xff
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2201      	movs	r2, #1
 8013482:	4013      	ands	r3, r2
 8013484:	d004      	beq.n	8013490 <USB_EPStartXfer+0x102c>
 8013486:	187b      	adds	r3, r7, r1
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	3301      	adds	r3, #1
 801348c:	187a      	adds	r2, r7, r1
 801348e:	6013      	str	r3, [r2, #0]
 8013490:	21c8      	movs	r1, #200	@ 0xc8
 8013492:	187b      	adds	r3, r7, r1
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	881b      	ldrh	r3, [r3, #0]
 8013498:	b29a      	uxth	r2, r3
 801349a:	23dc      	movs	r3, #220	@ 0xdc
 801349c:	18fb      	adds	r3, r7, r3
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	029b      	lsls	r3, r3, #10
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	4313      	orrs	r3, r2
 80134a8:	b29a      	uxth	r2, r3
 80134aa:	187b      	adds	r3, r7, r1
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	801a      	strh	r2, [r3, #0]
 80134b0:	e024      	b.n	80134fc <USB_EPStartXfer+0x1098>
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	785b      	ldrb	r3, [r3, #1]
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d120      	bne.n	80134fc <USB_EPStartXfer+0x1098>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	21d4      	movs	r1, #212	@ 0xd4
 80134be:	187a      	adds	r2, r7, r1
 80134c0:	6013      	str	r3, [r2, #0]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2250      	movs	r2, #80	@ 0x50
 80134c6:	5a9b      	ldrh	r3, [r3, r2]
 80134c8:	b29b      	uxth	r3, r3
 80134ca:	001a      	movs	r2, r3
 80134cc:	187b      	adds	r3, r7, r1
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	189b      	adds	r3, r3, r2
 80134d2:	187a      	adds	r2, r7, r1
 80134d4:	6013      	str	r3, [r2, #0]
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	00da      	lsls	r2, r3, #3
 80134dc:	187b      	adds	r3, r7, r1
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	18d3      	adds	r3, r2, r3
 80134e2:	4a4f      	ldr	r2, [pc, #316]	@ (8013620 <USB_EPStartXfer+0x11bc>)
 80134e4:	4694      	mov	ip, r2
 80134e6:	4463      	add	r3, ip
 80134e8:	21d0      	movs	r1, #208	@ 0xd0
 80134ea:	187a      	adds	r2, r7, r1
 80134ec:	6013      	str	r3, [r2, #0]
 80134ee:	1d7b      	adds	r3, r7, #5
 80134f0:	33ff      	adds	r3, #255	@ 0xff
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	b29a      	uxth	r2, r3
 80134f6:	187b      	adds	r3, r7, r1
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	801a      	strh	r2, [r3, #0]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	22c4      	movs	r2, #196	@ 0xc4
 8013500:	18ba      	adds	r2, r7, r2
 8013502:	6013      	str	r3, [r2, #0]
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	785b      	ldrb	r3, [r3, #1]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d000      	beq.n	801350e <USB_EPStartXfer+0x10aa>
 801350c:	e08c      	b.n	8013628 <USB_EPStartXfer+0x11c4>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	21bc      	movs	r1, #188	@ 0xbc
 8013512:	187a      	adds	r2, r7, r1
 8013514:	6013      	str	r3, [r2, #0]
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2250      	movs	r2, #80	@ 0x50
 801351a:	5a9b      	ldrh	r3, [r3, r2]
 801351c:	b29b      	uxth	r3, r3
 801351e:	001a      	movs	r2, r3
 8013520:	187b      	adds	r3, r7, r1
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	189b      	adds	r3, r3, r2
 8013526:	187a      	adds	r2, r7, r1
 8013528:	6013      	str	r3, [r2, #0]
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	00da      	lsls	r2, r3, #3
 8013530:	187b      	adds	r3, r7, r1
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	18d3      	adds	r3, r2, r3
 8013536:	4a37      	ldr	r2, [pc, #220]	@ (8013614 <USB_EPStartXfer+0x11b0>)
 8013538:	4694      	mov	ip, r2
 801353a:	4463      	add	r3, ip
 801353c:	21b8      	movs	r1, #184	@ 0xb8
 801353e:	187a      	adds	r2, r7, r1
 8013540:	6013      	str	r3, [r2, #0]
 8013542:	187b      	adds	r3, r7, r1
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	881b      	ldrh	r3, [r3, #0]
 8013548:	b29b      	uxth	r3, r3
 801354a:	059b      	lsls	r3, r3, #22
 801354c:	0d9b      	lsrs	r3, r3, #22
 801354e:	b29a      	uxth	r2, r3
 8013550:	187b      	adds	r3, r7, r1
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	801a      	strh	r2, [r3, #0]
 8013556:	1d7b      	adds	r3, r7, #5
 8013558:	33ff      	adds	r3, #255	@ 0xff
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	2b3e      	cmp	r3, #62	@ 0x3e
 801355e:	d925      	bls.n	80135ac <USB_EPStartXfer+0x1148>
 8013560:	1d7b      	adds	r3, r7, #5
 8013562:	33ff      	adds	r3, #255	@ 0xff
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	095b      	lsrs	r3, r3, #5
 8013568:	21d8      	movs	r1, #216	@ 0xd8
 801356a:	187a      	adds	r2, r7, r1
 801356c:	6013      	str	r3, [r2, #0]
 801356e:	1d7b      	adds	r3, r7, #5
 8013570:	33ff      	adds	r3, #255	@ 0xff
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	221f      	movs	r2, #31
 8013576:	4013      	ands	r3, r2
 8013578:	d104      	bne.n	8013584 <USB_EPStartXfer+0x1120>
 801357a:	187b      	adds	r3, r7, r1
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	3b01      	subs	r3, #1
 8013580:	187a      	adds	r2, r7, r1
 8013582:	6013      	str	r3, [r2, #0]
 8013584:	21b8      	movs	r1, #184	@ 0xb8
 8013586:	187b      	adds	r3, r7, r1
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	881b      	ldrh	r3, [r3, #0]
 801358c:	b29a      	uxth	r2, r3
 801358e:	23d8      	movs	r3, #216	@ 0xd8
 8013590:	18fb      	adds	r3, r7, r3
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	b29b      	uxth	r3, r3
 8013596:	029b      	lsls	r3, r3, #10
 8013598:	b29b      	uxth	r3, r3
 801359a:	4313      	orrs	r3, r2
 801359c:	b29b      	uxth	r3, r3
 801359e:	4a21      	ldr	r2, [pc, #132]	@ (8013624 <USB_EPStartXfer+0x11c0>)
 80135a0:	4313      	orrs	r3, r2
 80135a2:	b29a      	uxth	r2, r3
 80135a4:	187b      	adds	r3, r7, r1
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	801a      	strh	r2, [r3, #0]
 80135aa:	e062      	b.n	8013672 <USB_EPStartXfer+0x120e>
 80135ac:	1d7b      	adds	r3, r7, #5
 80135ae:	33ff      	adds	r3, #255	@ 0xff
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d10b      	bne.n	80135ce <USB_EPStartXfer+0x116a>
 80135b6:	21b8      	movs	r1, #184	@ 0xb8
 80135b8:	187b      	adds	r3, r7, r1
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	881b      	ldrh	r3, [r3, #0]
 80135be:	b29b      	uxth	r3, r3
 80135c0:	4a18      	ldr	r2, [pc, #96]	@ (8013624 <USB_EPStartXfer+0x11c0>)
 80135c2:	4313      	orrs	r3, r2
 80135c4:	b29a      	uxth	r2, r3
 80135c6:	187b      	adds	r3, r7, r1
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	801a      	strh	r2, [r3, #0]
 80135cc:	e051      	b.n	8013672 <USB_EPStartXfer+0x120e>
 80135ce:	1d7b      	adds	r3, r7, #5
 80135d0:	33ff      	adds	r3, #255	@ 0xff
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	085b      	lsrs	r3, r3, #1
 80135d6:	21d8      	movs	r1, #216	@ 0xd8
 80135d8:	187a      	adds	r2, r7, r1
 80135da:	6013      	str	r3, [r2, #0]
 80135dc:	1d7b      	adds	r3, r7, #5
 80135de:	33ff      	adds	r3, #255	@ 0xff
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	2201      	movs	r2, #1
 80135e4:	4013      	ands	r3, r2
 80135e6:	d004      	beq.n	80135f2 <USB_EPStartXfer+0x118e>
 80135e8:	187b      	adds	r3, r7, r1
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	3301      	adds	r3, #1
 80135ee:	187a      	adds	r2, r7, r1
 80135f0:	6013      	str	r3, [r2, #0]
 80135f2:	21b8      	movs	r1, #184	@ 0xb8
 80135f4:	187b      	adds	r3, r7, r1
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	881b      	ldrh	r3, [r3, #0]
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	23d8      	movs	r3, #216	@ 0xd8
 80135fe:	18fb      	adds	r3, r7, r3
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	b29b      	uxth	r3, r3
 8013604:	029b      	lsls	r3, r3, #10
 8013606:	b29b      	uxth	r3, r3
 8013608:	4313      	orrs	r3, r2
 801360a:	b29a      	uxth	r2, r3
 801360c:	187b      	adds	r3, r7, r1
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	801a      	strh	r2, [r3, #0]
 8013612:	e02e      	b.n	8013672 <USB_EPStartXfer+0x120e>
 8013614:	00000406 	.word	0x00000406
 8013618:	ffff8f8f 	.word	0xffff8f8f
 801361c:	ffff80c0 	.word	0xffff80c0
 8013620:	00000402 	.word	0x00000402
 8013624:	ffff8000 	.word	0xffff8000
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	785b      	ldrb	r3, [r3, #1]
 801362c:	2b01      	cmp	r3, #1
 801362e:	d120      	bne.n	8013672 <USB_EPStartXfer+0x120e>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2250      	movs	r2, #80	@ 0x50
 8013634:	5a9b      	ldrh	r3, [r3, r2]
 8013636:	b29b      	uxth	r3, r3
 8013638:	001a      	movs	r2, r3
 801363a:	21c4      	movs	r1, #196	@ 0xc4
 801363c:	187b      	adds	r3, r7, r1
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	189b      	adds	r3, r3, r2
 8013642:	187a      	adds	r2, r7, r1
 8013644:	6013      	str	r3, [r2, #0]
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	00da      	lsls	r2, r3, #3
 801364c:	187b      	adds	r3, r7, r1
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	18d3      	adds	r3, r2, r3
 8013652:	4a1d      	ldr	r2, [pc, #116]	@ (80136c8 <USB_EPStartXfer+0x1264>)
 8013654:	4694      	mov	ip, r2
 8013656:	4463      	add	r3, ip
 8013658:	21c0      	movs	r1, #192	@ 0xc0
 801365a:	187a      	adds	r2, r7, r1
 801365c:	6013      	str	r3, [r2, #0]
 801365e:	1d7b      	adds	r3, r7, #5
 8013660:	33ff      	adds	r3, #255	@ 0xff
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	b29a      	uxth	r2, r3
 8013666:	187b      	adds	r3, r7, r1
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	801a      	strh	r2, [r3, #0]
 801366c:	e001      	b.n	8013672 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801366e:	2301      	movs	r3, #1
 8013670:	e025      	b.n	80136be <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	009b      	lsls	r3, r3, #2
 801367a:	18d3      	adds	r3, r2, r3
 801367c:	881b      	ldrh	r3, [r3, #0]
 801367e:	b29a      	uxth	r2, r3
 8013680:	208a      	movs	r0, #138	@ 0x8a
 8013682:	183b      	adds	r3, r7, r0
 8013684:	4911      	ldr	r1, [pc, #68]	@ (80136cc <USB_EPStartXfer+0x1268>)
 8013686:	400a      	ands	r2, r1
 8013688:	801a      	strh	r2, [r3, #0]
 801368a:	183b      	adds	r3, r7, r0
 801368c:	183a      	adds	r2, r7, r0
 801368e:	8812      	ldrh	r2, [r2, #0]
 8013690:	2180      	movs	r1, #128	@ 0x80
 8013692:	0149      	lsls	r1, r1, #5
 8013694:	404a      	eors	r2, r1
 8013696:	801a      	strh	r2, [r3, #0]
 8013698:	183b      	adds	r3, r7, r0
 801369a:	183a      	adds	r2, r7, r0
 801369c:	8812      	ldrh	r2, [r2, #0]
 801369e:	2180      	movs	r1, #128	@ 0x80
 80136a0:	0189      	lsls	r1, r1, #6
 80136a2:	404a      	eors	r2, r1
 80136a4:	801a      	strh	r2, [r3, #0]
 80136a6:	687a      	ldr	r2, [r7, #4]
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	18d3      	adds	r3, r2, r3
 80136b0:	183a      	adds	r2, r7, r0
 80136b2:	8812      	ldrh	r2, [r2, #0]
 80136b4:	4906      	ldr	r1, [pc, #24]	@ (80136d0 <USB_EPStartXfer+0x126c>)
 80136b6:	430a      	orrs	r2, r1
 80136b8:	b292      	uxth	r2, r2
 80136ba:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80136bc:	2300      	movs	r3, #0
}
 80136be:	0018      	movs	r0, r3
 80136c0:	46bd      	mov	sp, r7
 80136c2:	b043      	add	sp, #268	@ 0x10c
 80136c4:	bd90      	pop	{r4, r7, pc}
 80136c6:	46c0      	nop			@ (mov r8, r8)
 80136c8:	00000406 	.word	0x00000406
 80136cc:	ffffbf8f 	.word	0xffffbf8f
 80136d0:	ffff8080 	.word	0xffff8080

080136d4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	785b      	ldrb	r3, [r3, #1]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d01d      	beq.n	8013722 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80136e6:	687a      	ldr	r2, [r7, #4]
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	009b      	lsls	r3, r3, #2
 80136ee:	18d3      	adds	r3, r2, r3
 80136f0:	881b      	ldrh	r3, [r3, #0]
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	200c      	movs	r0, #12
 80136f6:	183b      	adds	r3, r7, r0
 80136f8:	491b      	ldr	r1, [pc, #108]	@ (8013768 <USB_EPSetStall+0x94>)
 80136fa:	400a      	ands	r2, r1
 80136fc:	801a      	strh	r2, [r3, #0]
 80136fe:	183b      	adds	r3, r7, r0
 8013700:	183a      	adds	r2, r7, r0
 8013702:	8812      	ldrh	r2, [r2, #0]
 8013704:	2110      	movs	r1, #16
 8013706:	404a      	eors	r2, r1
 8013708:	801a      	strh	r2, [r3, #0]
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	009b      	lsls	r3, r3, #2
 8013712:	18d3      	adds	r3, r2, r3
 8013714:	183a      	adds	r2, r7, r0
 8013716:	8812      	ldrh	r2, [r2, #0]
 8013718:	4914      	ldr	r1, [pc, #80]	@ (801376c <USB_EPSetStall+0x98>)
 801371a:	430a      	orrs	r2, r1
 801371c:	b292      	uxth	r2, r2
 801371e:	801a      	strh	r2, [r3, #0]
 8013720:	e01d      	b.n	801375e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013722:	687a      	ldr	r2, [r7, #4]
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	009b      	lsls	r3, r3, #2
 801372a:	18d3      	adds	r3, r2, r3
 801372c:	881b      	ldrh	r3, [r3, #0]
 801372e:	b29a      	uxth	r2, r3
 8013730:	200e      	movs	r0, #14
 8013732:	183b      	adds	r3, r7, r0
 8013734:	490e      	ldr	r1, [pc, #56]	@ (8013770 <USB_EPSetStall+0x9c>)
 8013736:	400a      	ands	r2, r1
 8013738:	801a      	strh	r2, [r3, #0]
 801373a:	183b      	adds	r3, r7, r0
 801373c:	183a      	adds	r2, r7, r0
 801373e:	8812      	ldrh	r2, [r2, #0]
 8013740:	2180      	movs	r1, #128	@ 0x80
 8013742:	0149      	lsls	r1, r1, #5
 8013744:	404a      	eors	r2, r1
 8013746:	801a      	strh	r2, [r3, #0]
 8013748:	687a      	ldr	r2, [r7, #4]
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	009b      	lsls	r3, r3, #2
 8013750:	18d3      	adds	r3, r2, r3
 8013752:	183a      	adds	r2, r7, r0
 8013754:	8812      	ldrh	r2, [r2, #0]
 8013756:	4905      	ldr	r1, [pc, #20]	@ (801376c <USB_EPSetStall+0x98>)
 8013758:	430a      	orrs	r2, r1
 801375a:	b292      	uxth	r2, r2
 801375c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801375e:	2300      	movs	r3, #0
}
 8013760:	0018      	movs	r0, r3
 8013762:	46bd      	mov	sp, r7
 8013764:	b004      	add	sp, #16
 8013766:	bd80      	pop	{r7, pc}
 8013768:	ffff8fbf 	.word	0xffff8fbf
 801376c:	ffff8080 	.word	0xffff8080
 8013770:	ffffbf8f 	.word	0xffffbf8f

08013774 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b086      	sub	sp, #24
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	7b1b      	ldrb	r3, [r3, #12]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d000      	beq.n	8013788 <USB_EPClearStall+0x14>
 8013786:	e095      	b.n	80138b4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	785b      	ldrb	r3, [r3, #1]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d046      	beq.n	801381e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	18d2      	adds	r2, r2, r3
 801379a:	2110      	movs	r1, #16
 801379c:	187b      	adds	r3, r7, r1
 801379e:	8812      	ldrh	r2, [r2, #0]
 80137a0:	801a      	strh	r2, [r3, #0]
 80137a2:	187b      	adds	r3, r7, r1
 80137a4:	881b      	ldrh	r3, [r3, #0]
 80137a6:	2240      	movs	r2, #64	@ 0x40
 80137a8:	4013      	ands	r3, r2
 80137aa:	d016      	beq.n	80137da <USB_EPClearStall+0x66>
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	009b      	lsls	r3, r3, #2
 80137b4:	18d3      	adds	r3, r2, r3
 80137b6:	881b      	ldrh	r3, [r3, #0]
 80137b8:	b29a      	uxth	r2, r3
 80137ba:	200e      	movs	r0, #14
 80137bc:	183b      	adds	r3, r7, r0
 80137be:	4940      	ldr	r1, [pc, #256]	@ (80138c0 <USB_EPClearStall+0x14c>)
 80137c0:	400a      	ands	r2, r1
 80137c2:	801a      	strh	r2, [r3, #0]
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	009b      	lsls	r3, r3, #2
 80137cc:	18d3      	adds	r3, r2, r3
 80137ce:	183a      	adds	r2, r7, r0
 80137d0:	8812      	ldrh	r2, [r2, #0]
 80137d2:	493c      	ldr	r1, [pc, #240]	@ (80138c4 <USB_EPClearStall+0x150>)
 80137d4:	430a      	orrs	r2, r1
 80137d6:	b292      	uxth	r2, r2
 80137d8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	78db      	ldrb	r3, [r3, #3]
 80137de:	2b01      	cmp	r3, #1
 80137e0:	d068      	beq.n	80138b4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80137e2:	687a      	ldr	r2, [r7, #4]
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	009b      	lsls	r3, r3, #2
 80137ea:	18d3      	adds	r3, r2, r3
 80137ec:	881b      	ldrh	r3, [r3, #0]
 80137ee:	b29a      	uxth	r2, r3
 80137f0:	200c      	movs	r0, #12
 80137f2:	183b      	adds	r3, r7, r0
 80137f4:	4934      	ldr	r1, [pc, #208]	@ (80138c8 <USB_EPClearStall+0x154>)
 80137f6:	400a      	ands	r2, r1
 80137f8:	801a      	strh	r2, [r3, #0]
 80137fa:	183b      	adds	r3, r7, r0
 80137fc:	183a      	adds	r2, r7, r0
 80137fe:	8812      	ldrh	r2, [r2, #0]
 8013800:	2120      	movs	r1, #32
 8013802:	404a      	eors	r2, r1
 8013804:	801a      	strh	r2, [r3, #0]
 8013806:	687a      	ldr	r2, [r7, #4]
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	18d3      	adds	r3, r2, r3
 8013810:	183a      	adds	r2, r7, r0
 8013812:	8812      	ldrh	r2, [r2, #0]
 8013814:	492d      	ldr	r1, [pc, #180]	@ (80138cc <USB_EPClearStall+0x158>)
 8013816:	430a      	orrs	r2, r1
 8013818:	b292      	uxth	r2, r2
 801381a:	801a      	strh	r2, [r3, #0]
 801381c:	e04a      	b.n	80138b4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	009b      	lsls	r3, r3, #2
 8013826:	18d2      	adds	r2, r2, r3
 8013828:	2116      	movs	r1, #22
 801382a:	187b      	adds	r3, r7, r1
 801382c:	8812      	ldrh	r2, [r2, #0]
 801382e:	801a      	strh	r2, [r3, #0]
 8013830:	187b      	adds	r3, r7, r1
 8013832:	881a      	ldrh	r2, [r3, #0]
 8013834:	2380      	movs	r3, #128	@ 0x80
 8013836:	01db      	lsls	r3, r3, #7
 8013838:	4013      	ands	r3, r2
 801383a:	d016      	beq.n	801386a <USB_EPClearStall+0xf6>
 801383c:	687a      	ldr	r2, [r7, #4]
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	009b      	lsls	r3, r3, #2
 8013844:	18d3      	adds	r3, r2, r3
 8013846:	881b      	ldrh	r3, [r3, #0]
 8013848:	b29a      	uxth	r2, r3
 801384a:	2014      	movs	r0, #20
 801384c:	183b      	adds	r3, r7, r0
 801384e:	491c      	ldr	r1, [pc, #112]	@ (80138c0 <USB_EPClearStall+0x14c>)
 8013850:	400a      	ands	r2, r1
 8013852:	801a      	strh	r2, [r3, #0]
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	18d3      	adds	r3, r2, r3
 801385e:	183a      	adds	r2, r7, r0
 8013860:	8812      	ldrh	r2, [r2, #0]
 8013862:	491b      	ldr	r1, [pc, #108]	@ (80138d0 <USB_EPClearStall+0x15c>)
 8013864:	430a      	orrs	r2, r1
 8013866:	b292      	uxth	r2, r2
 8013868:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	18d3      	adds	r3, r2, r3
 8013874:	881b      	ldrh	r3, [r3, #0]
 8013876:	b29a      	uxth	r2, r3
 8013878:	2012      	movs	r0, #18
 801387a:	183b      	adds	r3, r7, r0
 801387c:	4915      	ldr	r1, [pc, #84]	@ (80138d4 <USB_EPClearStall+0x160>)
 801387e:	400a      	ands	r2, r1
 8013880:	801a      	strh	r2, [r3, #0]
 8013882:	183b      	adds	r3, r7, r0
 8013884:	183a      	adds	r2, r7, r0
 8013886:	8812      	ldrh	r2, [r2, #0]
 8013888:	2180      	movs	r1, #128	@ 0x80
 801388a:	0149      	lsls	r1, r1, #5
 801388c:	404a      	eors	r2, r1
 801388e:	801a      	strh	r2, [r3, #0]
 8013890:	183b      	adds	r3, r7, r0
 8013892:	183a      	adds	r2, r7, r0
 8013894:	8812      	ldrh	r2, [r2, #0]
 8013896:	2180      	movs	r1, #128	@ 0x80
 8013898:	0189      	lsls	r1, r1, #6
 801389a:	404a      	eors	r2, r1
 801389c:	801a      	strh	r2, [r3, #0]
 801389e:	687a      	ldr	r2, [r7, #4]
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	18d3      	adds	r3, r2, r3
 80138a8:	183a      	adds	r2, r7, r0
 80138aa:	8812      	ldrh	r2, [r2, #0]
 80138ac:	4907      	ldr	r1, [pc, #28]	@ (80138cc <USB_EPClearStall+0x158>)
 80138ae:	430a      	orrs	r2, r1
 80138b0:	b292      	uxth	r2, r2
 80138b2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80138b4:	2300      	movs	r3, #0
}
 80138b6:	0018      	movs	r0, r3
 80138b8:	46bd      	mov	sp, r7
 80138ba:	b006      	add	sp, #24
 80138bc:	bd80      	pop	{r7, pc}
 80138be:	46c0      	nop			@ (mov r8, r8)
 80138c0:	ffff8f8f 	.word	0xffff8f8f
 80138c4:	ffff80c0 	.word	0xffff80c0
 80138c8:	ffff8fbf 	.word	0xffff8fbf
 80138cc:	ffff8080 	.word	0xffff8080
 80138d0:	ffffc080 	.word	0xffffc080
 80138d4:	ffffbf8f 	.word	0xffffbf8f

080138d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	000a      	movs	r2, r1
 80138e2:	1cfb      	adds	r3, r7, #3
 80138e4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80138e6:	1cfb      	adds	r3, r7, #3
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d103      	bne.n	80138f6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	224c      	movs	r2, #76	@ 0x4c
 80138f2:	2180      	movs	r1, #128	@ 0x80
 80138f4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80138f6:	2300      	movs	r3, #0
}
 80138f8:	0018      	movs	r0, r3
 80138fa:	46bd      	mov	sp, r7
 80138fc:	b002      	add	sp, #8
 80138fe:	bd80      	pop	{r7, pc}

08013900 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2258      	movs	r2, #88	@ 0x58
 801390c:	5a9b      	ldrh	r3, [r3, r2]
 801390e:	b29b      	uxth	r3, r3
 8013910:	4a05      	ldr	r2, [pc, #20]	@ (8013928 <USB_DevConnect+0x28>)
 8013912:	4313      	orrs	r3, r2
 8013914:	b299      	uxth	r1, r3
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2258      	movs	r2, #88	@ 0x58
 801391a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801391c:	2300      	movs	r3, #0
}
 801391e:	0018      	movs	r0, r3
 8013920:	46bd      	mov	sp, r7
 8013922:	b002      	add	sp, #8
 8013924:	bd80      	pop	{r7, pc}
 8013926:	46c0      	nop			@ (mov r8, r8)
 8013928:	ffff8000 	.word	0xffff8000

0801392c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b084      	sub	sp, #16
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2244      	movs	r2, #68	@ 0x44
 8013938:	5a9b      	ldrh	r3, [r3, r2]
 801393a:	b29b      	uxth	r3, r3
 801393c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801393e:	68fb      	ldr	r3, [r7, #12]
}
 8013940:	0018      	movs	r0, r3
 8013942:	46bd      	mov	sp, r7
 8013944:	b004      	add	sp, #16
 8013946:	bd80      	pop	{r7, pc}

08013948 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b08a      	sub	sp, #40	@ 0x28
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	0019      	movs	r1, r3
 8013954:	1dbb      	adds	r3, r7, #6
 8013956:	801a      	strh	r2, [r3, #0]
 8013958:	1d3b      	adds	r3, r7, #4
 801395a:	1c0a      	adds	r2, r1, #0
 801395c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801395e:	1d3b      	adds	r3, r7, #4
 8013960:	881b      	ldrh	r3, [r3, #0]
 8013962:	3301      	adds	r3, #1
 8013964:	085b      	lsrs	r3, r3, #1
 8013966:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013970:	1dbb      	adds	r3, r7, #6
 8013972:	881a      	ldrh	r2, [r3, #0]
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	18d3      	adds	r3, r2, r3
 8013978:	2280      	movs	r2, #128	@ 0x80
 801397a:	00d2      	lsls	r2, r2, #3
 801397c:	4694      	mov	ip, r2
 801397e:	4463      	add	r3, ip
 8013980:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	627b      	str	r3, [r7, #36]	@ 0x24
 8013986:	e020      	b.n	80139ca <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	781a      	ldrb	r2, [r3, #0]
 801398c:	2112      	movs	r1, #18
 801398e:	187b      	adds	r3, r7, r1
 8013990:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	3301      	adds	r3, #1
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	021b      	lsls	r3, r3, #8
 801399a:	b21a      	sxth	r2, r3
 801399c:	187b      	adds	r3, r7, r1
 801399e:	2000      	movs	r0, #0
 80139a0:	5e1b      	ldrsh	r3, [r3, r0]
 80139a2:	4313      	orrs	r3, r2
 80139a4:	b21a      	sxth	r2, r3
 80139a6:	187b      	adds	r3, r7, r1
 80139a8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80139aa:	6a3b      	ldr	r3, [r7, #32]
 80139ac:	187a      	adds	r2, r7, r1
 80139ae:	8812      	ldrh	r2, [r2, #0]
 80139b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80139b2:	6a3b      	ldr	r3, [r7, #32]
 80139b4:	3302      	adds	r3, #2
 80139b6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	3301      	adds	r3, #1
 80139bc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	3301      	adds	r3, #1
 80139c2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80139c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139c6:	3b01      	subs	r3, #1
 80139c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80139ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1db      	bne.n	8013988 <USB_WritePMA+0x40>
  }
}
 80139d0:	46c0      	nop			@ (mov r8, r8)
 80139d2:	46c0      	nop			@ (mov r8, r8)
 80139d4:	46bd      	mov	sp, r7
 80139d6:	b00a      	add	sp, #40	@ 0x28
 80139d8:	bd80      	pop	{r7, pc}

080139da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80139da:	b580      	push	{r7, lr}
 80139dc:	b08a      	sub	sp, #40	@ 0x28
 80139de:	af00      	add	r7, sp, #0
 80139e0:	60f8      	str	r0, [r7, #12]
 80139e2:	60b9      	str	r1, [r7, #8]
 80139e4:	0019      	movs	r1, r3
 80139e6:	1dbb      	adds	r3, r7, #6
 80139e8:	801a      	strh	r2, [r3, #0]
 80139ea:	1d3b      	adds	r3, r7, #4
 80139ec:	1c0a      	adds	r2, r1, #0
 80139ee:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80139f0:	1d3b      	adds	r3, r7, #4
 80139f2:	881b      	ldrh	r3, [r3, #0]
 80139f4:	085b      	lsrs	r3, r3, #1
 80139f6:	b29b      	uxth	r3, r3
 80139f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013a02:	1dbb      	adds	r3, r7, #6
 8013a04:	881a      	ldrh	r2, [r3, #0]
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	18d3      	adds	r3, r2, r3
 8013a0a:	2280      	movs	r2, #128	@ 0x80
 8013a0c:	00d2      	lsls	r2, r2, #3
 8013a0e:	4694      	mov	ip, r2
 8013a10:	4463      	add	r3, ip
 8013a12:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013a14:	69bb      	ldr	r3, [r7, #24]
 8013a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a18:	e018      	b.n	8013a4c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8013a1a:	6a3b      	ldr	r3, [r7, #32]
 8013a1c:	881b      	ldrh	r3, [r3, #0]
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8013a22:	6a3b      	ldr	r3, [r7, #32]
 8013a24:	3302      	adds	r3, #2
 8013a26:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	b2da      	uxtb	r2, r3
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	3301      	adds	r3, #1
 8013a34:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	0a1b      	lsrs	r3, r3, #8
 8013a3a:	b2da      	uxtb	r2, r3
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	3301      	adds	r3, #1
 8013a44:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d1e3      	bne.n	8013a1a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8013a52:	1d3b      	adds	r3, r7, #4
 8013a54:	881b      	ldrh	r3, [r3, #0]
 8013a56:	2201      	movs	r2, #1
 8013a58:	4013      	ands	r3, r2
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d007      	beq.n	8013a70 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8013a60:	6a3b      	ldr	r3, [r7, #32]
 8013a62:	881b      	ldrh	r3, [r3, #0]
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	b2da      	uxtb	r2, r3
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	701a      	strb	r2, [r3, #0]
  }
}
 8013a70:	46c0      	nop			@ (mov r8, r8)
 8013a72:	46bd      	mov	sp, r7
 8013a74:	b00a      	add	sp, #40	@ 0x28
 8013a76:	bd80      	pop	{r7, pc}

08013a78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b084      	sub	sp, #16
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	000a      	movs	r2, r1
 8013a82:	1cfb      	adds	r3, r7, #3
 8013a84:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8013a86:	230f      	movs	r3, #15
 8013a88:	18fb      	adds	r3, r7, r3
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	7c1b      	ldrb	r3, [r3, #16]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d116      	bne.n	8013ac4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013a96:	2380      	movs	r3, #128	@ 0x80
 8013a98:	009b      	lsls	r3, r3, #2
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	2202      	movs	r2, #2
 8013a9e:	2181      	movs	r1, #129	@ 0x81
 8013aa0:	f002 f81d 	bl	8015ade <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013aaa:	2380      	movs	r3, #128	@ 0x80
 8013aac:	009b      	lsls	r3, r3, #2
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	2202      	movs	r2, #2
 8013ab2:	2101      	movs	r1, #1
 8013ab4:	f002 f813 	bl	8015ade <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	23b6      	movs	r3, #182	@ 0xb6
 8013abc:	005b      	lsls	r3, r3, #1
 8013abe:	2101      	movs	r1, #1
 8013ac0:	50d1      	str	r1, [r2, r3]
 8013ac2:	e013      	b.n	8013aec <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	2340      	movs	r3, #64	@ 0x40
 8013ac8:	2202      	movs	r2, #2
 8013aca:	2181      	movs	r1, #129	@ 0x81
 8013acc:	f002 f807 	bl	8015ade <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2201      	movs	r2, #1
 8013ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	2340      	movs	r3, #64	@ 0x40
 8013ada:	2202      	movs	r2, #2
 8013adc:	2101      	movs	r1, #1
 8013ade:	f001 fffe 	bl	8015ade <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013ae2:	687a      	ldr	r2, [r7, #4]
 8013ae4:	23b6      	movs	r3, #182	@ 0xb6
 8013ae6:	005b      	lsls	r3, r3, #1
 8013ae8:	2101      	movs	r1, #1
 8013aea:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	2308      	movs	r3, #8
 8013af0:	2203      	movs	r2, #3
 8013af2:	2182      	movs	r1, #130	@ 0x82
 8013af4:	f001 fff3 	bl	8015ade <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2201      	movs	r2, #1
 8013afc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013afe:	2387      	movs	r3, #135	@ 0x87
 8013b00:	009b      	lsls	r3, r3, #2
 8013b02:	0018      	movs	r0, r3
 8013b04:	f002 f984 	bl	8015e10 <USBD_static_malloc>
 8013b08:	0001      	movs	r1, r0
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	23ae      	movs	r3, #174	@ 0xae
 8013b0e:	009b      	lsls	r3, r3, #2
 8013b10:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	23ae      	movs	r3, #174	@ 0xae
 8013b16:	009b      	lsls	r3, r3, #2
 8013b18:	58d3      	ldr	r3, [r2, r3]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d104      	bne.n	8013b28 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8013b1e:	230f      	movs	r3, #15
 8013b20:	18fb      	adds	r3, r7, r3
 8013b22:	2201      	movs	r2, #1
 8013b24:	701a      	strb	r2, [r3, #0]
 8013b26:	e02c      	b.n	8013b82 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013b28:	687a      	ldr	r2, [r7, #4]
 8013b2a:	23ae      	movs	r3, #174	@ 0xae
 8013b2c:	009b      	lsls	r3, r3, #2
 8013b2e:	58d3      	ldr	r3, [r2, r3]
 8013b30:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013b32:	687a      	ldr	r2, [r7, #4]
 8013b34:	23af      	movs	r3, #175	@ 0xaf
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	58d3      	ldr	r3, [r2, r3]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8013b3e:	68ba      	ldr	r2, [r7, #8]
 8013b40:	2385      	movs	r3, #133	@ 0x85
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	2100      	movs	r1, #0
 8013b46:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8013b48:	68ba      	ldr	r2, [r7, #8]
 8013b4a:	2386      	movs	r3, #134	@ 0x86
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	2100      	movs	r1, #0
 8013b50:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	7c1b      	ldrb	r3, [r3, #16]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d10a      	bne.n	8013b70 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013b5a:	68ba      	ldr	r2, [r7, #8]
 8013b5c:	2381      	movs	r3, #129	@ 0x81
 8013b5e:	009b      	lsls	r3, r3, #2
 8013b60:	58d2      	ldr	r2, [r2, r3]
 8013b62:	2380      	movs	r3, #128	@ 0x80
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	6878      	ldr	r0, [r7, #4]
 8013b68:	2101      	movs	r1, #1
 8013b6a:	f002 f903 	bl	8015d74 <USBD_LL_PrepareReceive>
 8013b6e:	e008      	b.n	8013b82 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013b70:	68ba      	ldr	r2, [r7, #8]
 8013b72:	2381      	movs	r3, #129	@ 0x81
 8013b74:	009b      	lsls	r3, r3, #2
 8013b76:	58d2      	ldr	r2, [r2, r3]
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	2340      	movs	r3, #64	@ 0x40
 8013b7c:	2101      	movs	r1, #1
 8013b7e:	f002 f8f9 	bl	8015d74 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8013b82:	230f      	movs	r3, #15
 8013b84:	18fb      	adds	r3, r7, r3
 8013b86:	781b      	ldrb	r3, [r3, #0]
}
 8013b88:	0018      	movs	r0, r3
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	b004      	add	sp, #16
 8013b8e:	bd80      	pop	{r7, pc}

08013b90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b084      	sub	sp, #16
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	000a      	movs	r2, r1
 8013b9a:	1cfb      	adds	r3, r7, #3
 8013b9c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8013b9e:	230f      	movs	r3, #15
 8013ba0:	18fb      	adds	r3, r7, r3
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2181      	movs	r1, #129	@ 0x81
 8013baa:	0018      	movs	r0, r3
 8013bac:	f001 ffce 	bl	8015b4c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2101      	movs	r1, #1
 8013bba:	0018      	movs	r0, r3
 8013bbc:	f001 ffc6 	bl	8015b4c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	23b6      	movs	r3, #182	@ 0xb6
 8013bc4:	005b      	lsls	r3, r3, #1
 8013bc6:	2100      	movs	r1, #0
 8013bc8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2182      	movs	r1, #130	@ 0x82
 8013bce:	0018      	movs	r0, r3
 8013bd0:	f001 ffbc 	bl	8015b4c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013bda:	687a      	ldr	r2, [r7, #4]
 8013bdc:	23ae      	movs	r3, #174	@ 0xae
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	58d3      	ldr	r3, [r2, r3]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d011      	beq.n	8013c0a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013be6:	687a      	ldr	r2, [r7, #4]
 8013be8:	23af      	movs	r3, #175	@ 0xaf
 8013bea:	009b      	lsls	r3, r3, #2
 8013bec:	58d3      	ldr	r3, [r2, r3]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8013bf2:	687a      	ldr	r2, [r7, #4]
 8013bf4:	23ae      	movs	r3, #174	@ 0xae
 8013bf6:	009b      	lsls	r3, r3, #2
 8013bf8:	58d3      	ldr	r3, [r2, r3]
 8013bfa:	0018      	movs	r0, r3
 8013bfc:	f002 f914 	bl	8015e28 <USBD_static_free>
    pdev->pClassData = NULL;
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	23ae      	movs	r3, #174	@ 0xae
 8013c04:	009b      	lsls	r3, r3, #2
 8013c06:	2100      	movs	r1, #0
 8013c08:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8013c0a:	230f      	movs	r3, #15
 8013c0c:	18fb      	adds	r3, r7, r3
 8013c0e:	781b      	ldrb	r3, [r3, #0]
}
 8013c10:	0018      	movs	r0, r3
 8013c12:	46bd      	mov	sp, r7
 8013c14:	b004      	add	sp, #16
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b086      	sub	sp, #24
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	23ae      	movs	r3, #174	@ 0xae
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	58d3      	ldr	r3, [r2, r3]
 8013c2a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8013c2c:	230f      	movs	r3, #15
 8013c2e:	18fb      	adds	r3, r7, r3
 8013c30:	2200      	movs	r2, #0
 8013c32:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8013c34:	230c      	movs	r3, #12
 8013c36:	18fb      	adds	r3, r7, r3
 8013c38:	2200      	movs	r2, #0
 8013c3a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8013c3c:	2317      	movs	r3, #23
 8013c3e:	18fb      	adds	r3, r7, r3
 8013c40:	2200      	movs	r2, #0
 8013c42:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	001a      	movs	r2, r3
 8013c4a:	2360      	movs	r3, #96	@ 0x60
 8013c4c:	4013      	ands	r3, r2
 8013c4e:	d03d      	beq.n	8013ccc <USBD_CDC_Setup+0xb4>
 8013c50:	2b20      	cmp	r3, #32
 8013c52:	d000      	beq.n	8013c56 <USBD_CDC_Setup+0x3e>
 8013c54:	e094      	b.n	8013d80 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	88db      	ldrh	r3, [r3, #6]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d02b      	beq.n	8013cb6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	b25b      	sxtb	r3, r3
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	da12      	bge.n	8013c8e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013c68:	687a      	ldr	r2, [r7, #4]
 8013c6a:	23af      	movs	r3, #175	@ 0xaf
 8013c6c:	009b      	lsls	r3, r3, #2
 8013c6e:	58d3      	ldr	r3, [r2, r3]
 8013c70:	689b      	ldr	r3, [r3, #8]
 8013c72:	683a      	ldr	r2, [r7, #0]
 8013c74:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8013c76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013c78:	683a      	ldr	r2, [r7, #0]
 8013c7a:	88d2      	ldrh	r2, [r2, #6]
 8013c7c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013c7e:	6939      	ldr	r1, [r7, #16]
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	88da      	ldrh	r2, [r3, #6]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	0018      	movs	r0, r3
 8013c88:	f001 fb79 	bl	801537e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8013c8c:	e083      	b.n	8013d96 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	7859      	ldrb	r1, [r3, #1]
 8013c92:	693a      	ldr	r2, [r7, #16]
 8013c94:	2380      	movs	r3, #128	@ 0x80
 8013c96:	009b      	lsls	r3, r3, #2
 8013c98:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	88db      	ldrh	r3, [r3, #6]
 8013c9e:	b2d9      	uxtb	r1, r3
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	4a40      	ldr	r2, [pc, #256]	@ (8013da4 <USBD_CDC_Setup+0x18c>)
 8013ca4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013ca6:	6939      	ldr	r1, [r7, #16]
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	88da      	ldrh	r2, [r3, #6]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	0018      	movs	r0, r3
 8013cb0:	f001 fb98 	bl	80153e4 <USBD_CtlPrepareRx>
      break;
 8013cb4:	e06f      	b.n	8013d96 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013cb6:	687a      	ldr	r2, [r7, #4]
 8013cb8:	23af      	movs	r3, #175	@ 0xaf
 8013cba:	009b      	lsls	r3, r3, #2
 8013cbc:	58d3      	ldr	r3, [r2, r3]
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	683a      	ldr	r2, [r7, #0]
 8013cc2:	7850      	ldrb	r0, [r2, #1]
 8013cc4:	6839      	ldr	r1, [r7, #0]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	4798      	blx	r3
      break;
 8013cca:	e064      	b.n	8013d96 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	785b      	ldrb	r3, [r3, #1]
 8013cd0:	2b0b      	cmp	r3, #11
 8013cd2:	d037      	beq.n	8013d44 <USBD_CDC_Setup+0x12c>
 8013cd4:	dc47      	bgt.n	8013d66 <USBD_CDC_Setup+0x14e>
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d002      	beq.n	8013ce0 <USBD_CDC_Setup+0xc8>
 8013cda:	2b0a      	cmp	r3, #10
 8013cdc:	d019      	beq.n	8013d12 <USBD_CDC_Setup+0xfa>
 8013cde:	e042      	b.n	8013d66 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ce0:	687a      	ldr	r2, [r7, #4]
 8013ce2:	23a7      	movs	r3, #167	@ 0xa7
 8013ce4:	009b      	lsls	r3, r3, #2
 8013ce6:	5cd3      	ldrb	r3, [r2, r3]
 8013ce8:	2b03      	cmp	r3, #3
 8013cea:	d107      	bne.n	8013cfc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8013cec:	230c      	movs	r3, #12
 8013cee:	18f9      	adds	r1, r7, r3
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2202      	movs	r2, #2
 8013cf4:	0018      	movs	r0, r3
 8013cf6:	f001 fb42 	bl	801537e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013cfa:	e040      	b.n	8013d7e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013cfc:	683a      	ldr	r2, [r7, #0]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	0011      	movs	r1, r2
 8013d02:	0018      	movs	r0, r3
 8013d04:	f001 fabd 	bl	8015282 <USBD_CtlError>
            ret = USBD_FAIL;
 8013d08:	2317      	movs	r3, #23
 8013d0a:	18fb      	adds	r3, r7, r3
 8013d0c:	2202      	movs	r2, #2
 8013d0e:	701a      	strb	r2, [r3, #0]
          break;
 8013d10:	e035      	b.n	8013d7e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	23a7      	movs	r3, #167	@ 0xa7
 8013d16:	009b      	lsls	r3, r3, #2
 8013d18:	5cd3      	ldrb	r3, [r2, r3]
 8013d1a:	2b03      	cmp	r3, #3
 8013d1c:	d107      	bne.n	8013d2e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8013d1e:	230f      	movs	r3, #15
 8013d20:	18f9      	adds	r1, r7, r3
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	2201      	movs	r2, #1
 8013d26:	0018      	movs	r0, r3
 8013d28:	f001 fb29 	bl	801537e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013d2c:	e027      	b.n	8013d7e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013d2e:	683a      	ldr	r2, [r7, #0]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	0011      	movs	r1, r2
 8013d34:	0018      	movs	r0, r3
 8013d36:	f001 faa4 	bl	8015282 <USBD_CtlError>
            ret = USBD_FAIL;
 8013d3a:	2317      	movs	r3, #23
 8013d3c:	18fb      	adds	r3, r7, r3
 8013d3e:	2202      	movs	r2, #2
 8013d40:	701a      	strb	r2, [r3, #0]
          break;
 8013d42:	e01c      	b.n	8013d7e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013d44:	687a      	ldr	r2, [r7, #4]
 8013d46:	23a7      	movs	r3, #167	@ 0xa7
 8013d48:	009b      	lsls	r3, r3, #2
 8013d4a:	5cd3      	ldrb	r3, [r2, r3]
 8013d4c:	2b03      	cmp	r3, #3
 8013d4e:	d015      	beq.n	8013d7c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8013d50:	683a      	ldr	r2, [r7, #0]
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	0011      	movs	r1, r2
 8013d56:	0018      	movs	r0, r3
 8013d58:	f001 fa93 	bl	8015282 <USBD_CtlError>
            ret = USBD_FAIL;
 8013d5c:	2317      	movs	r3, #23
 8013d5e:	18fb      	adds	r3, r7, r3
 8013d60:	2202      	movs	r2, #2
 8013d62:	701a      	strb	r2, [r3, #0]
          }
          break;
 8013d64:	e00a      	b.n	8013d7c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8013d66:	683a      	ldr	r2, [r7, #0]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	0011      	movs	r1, r2
 8013d6c:	0018      	movs	r0, r3
 8013d6e:	f001 fa88 	bl	8015282 <USBD_CtlError>
          ret = USBD_FAIL;
 8013d72:	2317      	movs	r3, #23
 8013d74:	18fb      	adds	r3, r7, r3
 8013d76:	2202      	movs	r2, #2
 8013d78:	701a      	strb	r2, [r3, #0]
          break;
 8013d7a:	e000      	b.n	8013d7e <USBD_CDC_Setup+0x166>
          break;
 8013d7c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8013d7e:	e00a      	b.n	8013d96 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8013d80:	683a      	ldr	r2, [r7, #0]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	0011      	movs	r1, r2
 8013d86:	0018      	movs	r0, r3
 8013d88:	f001 fa7b 	bl	8015282 <USBD_CtlError>
      ret = USBD_FAIL;
 8013d8c:	2317      	movs	r3, #23
 8013d8e:	18fb      	adds	r3, r7, r3
 8013d90:	2202      	movs	r2, #2
 8013d92:	701a      	strb	r2, [r3, #0]
      break;
 8013d94:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8013d96:	2317      	movs	r3, #23
 8013d98:	18fb      	adds	r3, r7, r3
 8013d9a:	781b      	ldrb	r3, [r3, #0]
}
 8013d9c:	0018      	movs	r0, r3
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	b006      	add	sp, #24
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	00000201 	.word	0x00000201

08013da8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b084      	sub	sp, #16
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	000a      	movs	r2, r1
 8013db2:	1cfb      	adds	r3, r7, #3
 8013db4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013db6:	687a      	ldr	r2, [r7, #4]
 8013db8:	23ae      	movs	r3, #174	@ 0xae
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	58d3      	ldr	r3, [r2, r3]
 8013dbe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013dc0:	687a      	ldr	r2, [r7, #4]
 8013dc2:	23b0      	movs	r3, #176	@ 0xb0
 8013dc4:	009b      	lsls	r3, r3, #2
 8013dc6:	58d3      	ldr	r3, [r2, r3]
 8013dc8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	23ae      	movs	r3, #174	@ 0xae
 8013dce:	009b      	lsls	r3, r3, #2
 8013dd0:	58d3      	ldr	r3, [r2, r3]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d03e      	beq.n	8013e54 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013dd6:	1cfb      	adds	r3, r7, #3
 8013dd8:	781a      	ldrb	r2, [r3, #0]
 8013dda:	6879      	ldr	r1, [r7, #4]
 8013ddc:	0013      	movs	r3, r2
 8013dde:	009b      	lsls	r3, r3, #2
 8013de0:	189b      	adds	r3, r3, r2
 8013de2:	009b      	lsls	r3, r3, #2
 8013de4:	18cb      	adds	r3, r1, r3
 8013de6:	331c      	adds	r3, #28
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d02b      	beq.n	8013e46 <USBD_CDC_DataIn+0x9e>
 8013dee:	1cfb      	adds	r3, r7, #3
 8013df0:	781a      	ldrb	r2, [r3, #0]
 8013df2:	6879      	ldr	r1, [r7, #4]
 8013df4:	0013      	movs	r3, r2
 8013df6:	009b      	lsls	r3, r3, #2
 8013df8:	189b      	adds	r3, r3, r2
 8013dfa:	009b      	lsls	r3, r3, #2
 8013dfc:	18cb      	adds	r3, r1, r3
 8013dfe:	331c      	adds	r3, #28
 8013e00:	6818      	ldr	r0, [r3, #0]
 8013e02:	1cfb      	adds	r3, r7, #3
 8013e04:	781a      	ldrb	r2, [r3, #0]
 8013e06:	68b9      	ldr	r1, [r7, #8]
 8013e08:	0013      	movs	r3, r2
 8013e0a:	009b      	lsls	r3, r3, #2
 8013e0c:	189b      	adds	r3, r3, r2
 8013e0e:	00db      	lsls	r3, r3, #3
 8013e10:	18cb      	adds	r3, r1, r3
 8013e12:	3338      	adds	r3, #56	@ 0x38
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	0019      	movs	r1, r3
 8013e18:	f7ec fa18 	bl	800024c <__aeabi_uidivmod>
 8013e1c:	1e0b      	subs	r3, r1, #0
 8013e1e:	d112      	bne.n	8013e46 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8013e20:	1cfb      	adds	r3, r7, #3
 8013e22:	781a      	ldrb	r2, [r3, #0]
 8013e24:	6879      	ldr	r1, [r7, #4]
 8013e26:	0013      	movs	r3, r2
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	189b      	adds	r3, r3, r2
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	18cb      	adds	r3, r1, r3
 8013e30:	331c      	adds	r3, #28
 8013e32:	2200      	movs	r2, #0
 8013e34:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013e36:	1cfb      	adds	r3, r7, #3
 8013e38:	7819      	ldrb	r1, [r3, #0]
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	2200      	movs	r2, #0
 8013e40:	f001 ff61 	bl	8015d06 <USBD_LL_Transmit>
 8013e44:	e004      	b.n	8013e50 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8013e46:	68fa      	ldr	r2, [r7, #12]
 8013e48:	2385      	movs	r3, #133	@ 0x85
 8013e4a:	009b      	lsls	r3, r3, #2
 8013e4c:	2100      	movs	r1, #0
 8013e4e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8013e50:	2300      	movs	r3, #0
 8013e52:	e000      	b.n	8013e56 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8013e54:	2302      	movs	r3, #2
  }
}
 8013e56:	0018      	movs	r0, r3
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	b004      	add	sp, #16
 8013e5c:	bd80      	pop	{r7, pc}

08013e5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b084      	sub	sp, #16
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
 8013e66:	000a      	movs	r2, r1
 8013e68:	1cfb      	adds	r3, r7, #3
 8013e6a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013e6c:	687a      	ldr	r2, [r7, #4]
 8013e6e:	23ae      	movs	r3, #174	@ 0xae
 8013e70:	009b      	lsls	r3, r3, #2
 8013e72:	58d3      	ldr	r3, [r2, r3]
 8013e74:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013e76:	1cfb      	adds	r3, r7, #3
 8013e78:	781a      	ldrb	r2, [r3, #0]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	0011      	movs	r1, r2
 8013e7e:	0018      	movs	r0, r3
 8013e80:	f001 ffaf 	bl	8015de2 <USBD_LL_GetRxDataSize>
 8013e84:	0001      	movs	r1, r0
 8013e86:	68fa      	ldr	r2, [r7, #12]
 8013e88:	2383      	movs	r3, #131	@ 0x83
 8013e8a:	009b      	lsls	r3, r3, #2
 8013e8c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	23ae      	movs	r3, #174	@ 0xae
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	58d3      	ldr	r3, [r2, r3]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d011      	beq.n	8013ebe <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	23af      	movs	r3, #175	@ 0xaf
 8013e9e:	009b      	lsls	r3, r3, #2
 8013ea0:	58d3      	ldr	r3, [r2, r3]
 8013ea2:	68da      	ldr	r2, [r3, #12]
 8013ea4:	68f9      	ldr	r1, [r7, #12]
 8013ea6:	2381      	movs	r3, #129	@ 0x81
 8013ea8:	009b      	lsls	r3, r3, #2
 8013eaa:	58c8      	ldr	r0, [r1, r3]
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2183      	movs	r1, #131	@ 0x83
 8013eb0:	0089      	lsls	r1, r1, #2
 8013eb2:	468c      	mov	ip, r1
 8013eb4:	4463      	add	r3, ip
 8013eb6:	0019      	movs	r1, r3
 8013eb8:	4790      	blx	r2

    return USBD_OK;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	e000      	b.n	8013ec0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8013ebe:	2302      	movs	r3, #2
  }
}
 8013ec0:	0018      	movs	r0, r3
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	b004      	add	sp, #16
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013ec8:	b590      	push	{r4, r7, lr}
 8013eca:	b085      	sub	sp, #20
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013ed0:	687a      	ldr	r2, [r7, #4]
 8013ed2:	23ae      	movs	r3, #174	@ 0xae
 8013ed4:	009b      	lsls	r3, r3, #2
 8013ed6:	58d3      	ldr	r3, [r2, r3]
 8013ed8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	23af      	movs	r3, #175	@ 0xaf
 8013ede:	009b      	lsls	r3, r3, #2
 8013ee0:	58d3      	ldr	r3, [r2, r3]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d018      	beq.n	8013f18 <USBD_CDC_EP0_RxReady+0x50>
 8013ee6:	68fa      	ldr	r2, [r7, #12]
 8013ee8:	2380      	movs	r3, #128	@ 0x80
 8013eea:	009b      	lsls	r3, r3, #2
 8013eec:	5cd3      	ldrb	r3, [r2, r3]
 8013eee:	2bff      	cmp	r3, #255	@ 0xff
 8013ef0:	d012      	beq.n	8013f18 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	23af      	movs	r3, #175	@ 0xaf
 8013ef6:	009b      	lsls	r3, r3, #2
 8013ef8:	58d3      	ldr	r3, [r2, r3]
 8013efa:	689b      	ldr	r3, [r3, #8]
 8013efc:	68f9      	ldr	r1, [r7, #12]
 8013efe:	2280      	movs	r2, #128	@ 0x80
 8013f00:	0092      	lsls	r2, r2, #2
 8013f02:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8013f04:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013f06:	68fa      	ldr	r2, [r7, #12]
 8013f08:	4c06      	ldr	r4, [pc, #24]	@ (8013f24 <USBD_CDC_EP0_RxReady+0x5c>)
 8013f0a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013f0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013f0e:	68fa      	ldr	r2, [r7, #12]
 8013f10:	2380      	movs	r3, #128	@ 0x80
 8013f12:	009b      	lsls	r3, r3, #2
 8013f14:	21ff      	movs	r1, #255	@ 0xff
 8013f16:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8013f18:	2300      	movs	r3, #0
}
 8013f1a:	0018      	movs	r0, r3
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	b005      	add	sp, #20
 8013f20:	bd90      	pop	{r4, r7, pc}
 8013f22:	46c0      	nop			@ (mov r8, r8)
 8013f24:	00000201 	.word	0x00000201

08013f28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b082      	sub	sp, #8
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2243      	movs	r2, #67	@ 0x43
 8013f34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8013f36:	4b02      	ldr	r3, [pc, #8]	@ (8013f40 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8013f38:	0018      	movs	r0, r3
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	b002      	add	sp, #8
 8013f3e:	bd80      	pop	{r7, pc}
 8013f40:	200001e0 	.word	0x200001e0

08013f44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2243      	movs	r2, #67	@ 0x43
 8013f50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8013f52:	4b02      	ldr	r3, [pc, #8]	@ (8013f5c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8013f54:	0018      	movs	r0, r3
 8013f56:	46bd      	mov	sp, r7
 8013f58:	b002      	add	sp, #8
 8013f5a:	bd80      	pop	{r7, pc}
 8013f5c:	2000019c 	.word	0x2000019c

08013f60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2243      	movs	r2, #67	@ 0x43
 8013f6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8013f6e:	4b02      	ldr	r3, [pc, #8]	@ (8013f78 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8013f70:	0018      	movs	r0, r3
 8013f72:	46bd      	mov	sp, r7
 8013f74:	b002      	add	sp, #8
 8013f76:	bd80      	pop	{r7, pc}
 8013f78:	20000224 	.word	0x20000224

08013f7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b082      	sub	sp, #8
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	220a      	movs	r2, #10
 8013f88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8013f8a:	4b02      	ldr	r3, [pc, #8]	@ (8013f94 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8013f8c:	0018      	movs	r0, r3
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	b002      	add	sp, #8
 8013f92:	bd80      	pop	{r7, pc}
 8013f94:	20000158 	.word	0x20000158

08013f98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b084      	sub	sp, #16
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8013fa2:	200f      	movs	r0, #15
 8013fa4:	183b      	adds	r3, r7, r0
 8013fa6:	2202      	movs	r2, #2
 8013fa8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d007      	beq.n	8013fc0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8013fb0:	687a      	ldr	r2, [r7, #4]
 8013fb2:	23af      	movs	r3, #175	@ 0xaf
 8013fb4:	009b      	lsls	r3, r3, #2
 8013fb6:	6839      	ldr	r1, [r7, #0]
 8013fb8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8013fba:	183b      	adds	r3, r7, r0
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8013fc0:	230f      	movs	r3, #15
 8013fc2:	18fb      	adds	r3, r7, r3
 8013fc4:	781b      	ldrb	r3, [r3, #0]
}
 8013fc6:	0018      	movs	r0, r3
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	b004      	add	sp, #16
 8013fcc:	bd80      	pop	{r7, pc}

08013fce <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8013fce:	b580      	push	{r7, lr}
 8013fd0:	b086      	sub	sp, #24
 8013fd2:	af00      	add	r7, sp, #0
 8013fd4:	60f8      	str	r0, [r7, #12]
 8013fd6:	60b9      	str	r1, [r7, #8]
 8013fd8:	1dbb      	adds	r3, r7, #6
 8013fda:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013fdc:	68fa      	ldr	r2, [r7, #12]
 8013fde:	23ae      	movs	r3, #174	@ 0xae
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	58d3      	ldr	r3, [r2, r3]
 8013fe4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8013fe6:	697a      	ldr	r2, [r7, #20]
 8013fe8:	2382      	movs	r3, #130	@ 0x82
 8013fea:	009b      	lsls	r3, r3, #2
 8013fec:	68b9      	ldr	r1, [r7, #8]
 8013fee:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8013ff0:	1dbb      	adds	r3, r7, #6
 8013ff2:	8819      	ldrh	r1, [r3, #0]
 8013ff4:	697a      	ldr	r2, [r7, #20]
 8013ff6:	2384      	movs	r3, #132	@ 0x84
 8013ff8:	009b      	lsls	r3, r3, #2
 8013ffa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013ffc:	2300      	movs	r3, #0
}
 8013ffe:	0018      	movs	r0, r3
 8014000:	46bd      	mov	sp, r7
 8014002:	b006      	add	sp, #24
 8014004:	bd80      	pop	{r7, pc}

08014006 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8014006:	b580      	push	{r7, lr}
 8014008:	b084      	sub	sp, #16
 801400a:	af00      	add	r7, sp, #0
 801400c:	6078      	str	r0, [r7, #4]
 801400e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	23ae      	movs	r3, #174	@ 0xae
 8014014:	009b      	lsls	r3, r3, #2
 8014016:	58d3      	ldr	r3, [r2, r3]
 8014018:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801401a:	68fa      	ldr	r2, [r7, #12]
 801401c:	2381      	movs	r3, #129	@ 0x81
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	6839      	ldr	r1, [r7, #0]
 8014022:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8014024:	2300      	movs	r3, #0
}
 8014026:	0018      	movs	r0, r3
 8014028:	46bd      	mov	sp, r7
 801402a:	b004      	add	sp, #16
 801402c:	bd80      	pop	{r7, pc}

0801402e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801402e:	b580      	push	{r7, lr}
 8014030:	b084      	sub	sp, #16
 8014032:	af00      	add	r7, sp, #0
 8014034:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	23ae      	movs	r3, #174	@ 0xae
 801403a:	009b      	lsls	r3, r3, #2
 801403c:	58d3      	ldr	r3, [r2, r3]
 801403e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8014040:	687a      	ldr	r2, [r7, #4]
 8014042:	23ae      	movs	r3, #174	@ 0xae
 8014044:	009b      	lsls	r3, r3, #2
 8014046:	58d3      	ldr	r3, [r2, r3]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d019      	beq.n	8014080 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	7c1b      	ldrb	r3, [r3, #16]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d10a      	bne.n	801406a <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8014054:	68fa      	ldr	r2, [r7, #12]
 8014056:	2381      	movs	r3, #129	@ 0x81
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	58d2      	ldr	r2, [r2, r3]
 801405c:	2380      	movs	r3, #128	@ 0x80
 801405e:	009b      	lsls	r3, r3, #2
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	2101      	movs	r1, #1
 8014064:	f001 fe86 	bl	8015d74 <USBD_LL_PrepareReceive>
 8014068:	e008      	b.n	801407c <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	2381      	movs	r3, #129	@ 0x81
 801406e:	009b      	lsls	r3, r3, #2
 8014070:	58d2      	ldr	r2, [r2, r3]
 8014072:	6878      	ldr	r0, [r7, #4]
 8014074:	2340      	movs	r3, #64	@ 0x40
 8014076:	2101      	movs	r1, #1
 8014078:	f001 fe7c 	bl	8015d74 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801407c:	2300      	movs	r3, #0
 801407e:	e000      	b.n	8014082 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8014080:	2302      	movs	r3, #2
  }
}
 8014082:	0018      	movs	r0, r3
 8014084:	46bd      	mov	sp, r7
 8014086:	b004      	add	sp, #16
 8014088:	bd80      	pop	{r7, pc}

0801408a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801408a:	b580      	push	{r7, lr}
 801408c:	b084      	sub	sp, #16
 801408e:	af00      	add	r7, sp, #0
 8014090:	60f8      	str	r0, [r7, #12]
 8014092:	60b9      	str	r1, [r7, #8]
 8014094:	1dfb      	adds	r3, r7, #7
 8014096:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d101      	bne.n	80140a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801409e:	2302      	movs	r3, #2
 80140a0:	e020      	b.n	80140e4 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80140a2:	68fa      	ldr	r2, [r7, #12]
 80140a4:	23ad      	movs	r3, #173	@ 0xad
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	58d3      	ldr	r3, [r2, r3]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d004      	beq.n	80140b8 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80140ae:	68fa      	ldr	r2, [r7, #12]
 80140b0:	23ad      	movs	r3, #173	@ 0xad
 80140b2:	009b      	lsls	r3, r3, #2
 80140b4:	2100      	movs	r1, #0
 80140b6:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d004      	beq.n	80140c8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80140be:	68fa      	ldr	r2, [r7, #12]
 80140c0:	23ac      	movs	r3, #172	@ 0xac
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	68b9      	ldr	r1, [r7, #8]
 80140c6:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80140c8:	68fa      	ldr	r2, [r7, #12]
 80140ca:	23a7      	movs	r3, #167	@ 0xa7
 80140cc:	009b      	lsls	r3, r3, #2
 80140ce:	2101      	movs	r1, #1
 80140d0:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	1dfa      	adds	r2, r7, #7
 80140d6:	7812      	ldrb	r2, [r2, #0]
 80140d8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	0018      	movs	r0, r3
 80140de:	f001 fc75 	bl	80159cc <USBD_LL_Init>

  return USBD_OK;
 80140e2:	2300      	movs	r3, #0
}
 80140e4:	0018      	movs	r0, r3
 80140e6:	46bd      	mov	sp, r7
 80140e8:	b004      	add	sp, #16
 80140ea:	bd80      	pop	{r7, pc}

080140ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b084      	sub	sp, #16
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80140f6:	200f      	movs	r0, #15
 80140f8:	183b      	adds	r3, r7, r0
 80140fa:	2200      	movs	r2, #0
 80140fc:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d008      	beq.n	8014116 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8014104:	687a      	ldr	r2, [r7, #4]
 8014106:	23ad      	movs	r3, #173	@ 0xad
 8014108:	009b      	lsls	r3, r3, #2
 801410a:	6839      	ldr	r1, [r7, #0]
 801410c:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801410e:	183b      	adds	r3, r7, r0
 8014110:	2200      	movs	r2, #0
 8014112:	701a      	strb	r2, [r3, #0]
 8014114:	e003      	b.n	801411e <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8014116:	230f      	movs	r3, #15
 8014118:	18fb      	adds	r3, r7, r3
 801411a:	2202      	movs	r2, #2
 801411c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801411e:	230f      	movs	r3, #15
 8014120:	18fb      	adds	r3, r7, r3
 8014122:	781b      	ldrb	r3, [r3, #0]
}
 8014124:	0018      	movs	r0, r3
 8014126:	46bd      	mov	sp, r7
 8014128:	b004      	add	sp, #16
 801412a:	bd80      	pop	{r7, pc}

0801412c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	0018      	movs	r0, r3
 8014138:	f001 fcac 	bl	8015a94 <USBD_LL_Start>

  return USBD_OK;
 801413c:	2300      	movs	r3, #0
}
 801413e:	0018      	movs	r0, r3
 8014140:	46bd      	mov	sp, r7
 8014142:	b002      	add	sp, #8
 8014144:	bd80      	pop	{r7, pc}

08014146 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014146:	b580      	push	{r7, lr}
 8014148:	b082      	sub	sp, #8
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801414e:	2300      	movs	r3, #0
}
 8014150:	0018      	movs	r0, r3
 8014152:	46bd      	mov	sp, r7
 8014154:	b002      	add	sp, #8
 8014156:	bd80      	pop	{r7, pc}

08014158 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8014158:	b590      	push	{r4, r7, lr}
 801415a:	b085      	sub	sp, #20
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	000a      	movs	r2, r1
 8014162:	1cfb      	adds	r3, r7, #3
 8014164:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014166:	240f      	movs	r4, #15
 8014168:	193b      	adds	r3, r7, r4
 801416a:	2202      	movs	r2, #2
 801416c:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801416e:	687a      	ldr	r2, [r7, #4]
 8014170:	23ad      	movs	r3, #173	@ 0xad
 8014172:	009b      	lsls	r3, r3, #2
 8014174:	58d3      	ldr	r3, [r2, r3]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00e      	beq.n	8014198 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	23ad      	movs	r3, #173	@ 0xad
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	58d3      	ldr	r3, [r2, r3]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	1cfa      	adds	r2, r7, #3
 8014186:	7811      	ldrb	r1, [r2, #0]
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	0010      	movs	r0, r2
 801418c:	4798      	blx	r3
 801418e:	1e03      	subs	r3, r0, #0
 8014190:	d102      	bne.n	8014198 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8014192:	193b      	adds	r3, r7, r4
 8014194:	2200      	movs	r2, #0
 8014196:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8014198:	230f      	movs	r3, #15
 801419a:	18fb      	adds	r3, r7, r3
 801419c:	781b      	ldrb	r3, [r3, #0]
}
 801419e:	0018      	movs	r0, r3
 80141a0:	46bd      	mov	sp, r7
 80141a2:	b005      	add	sp, #20
 80141a4:	bd90      	pop	{r4, r7, pc}

080141a6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80141a6:	b580      	push	{r7, lr}
 80141a8:	b082      	sub	sp, #8
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
 80141ae:	000a      	movs	r2, r1
 80141b0:	1cfb      	adds	r3, r7, #3
 80141b2:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80141b4:	687a      	ldr	r2, [r7, #4]
 80141b6:	23ad      	movs	r3, #173	@ 0xad
 80141b8:	009b      	lsls	r3, r3, #2
 80141ba:	58d3      	ldr	r3, [r2, r3]
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	1cfa      	adds	r2, r7, #3
 80141c0:	7811      	ldrb	r1, [r2, #0]
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	0010      	movs	r0, r2
 80141c6:	4798      	blx	r3

  return USBD_OK;
 80141c8:	2300      	movs	r3, #0
}
 80141ca:	0018      	movs	r0, r3
 80141cc:	46bd      	mov	sp, r7
 80141ce:	b002      	add	sp, #8
 80141d0:	bd80      	pop	{r7, pc}
	...

080141d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b082      	sub	sp, #8
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
 80141dc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	22aa      	movs	r2, #170	@ 0xaa
 80141e2:	0092      	lsls	r2, r2, #2
 80141e4:	4694      	mov	ip, r2
 80141e6:	4463      	add	r3, ip
 80141e8:	683a      	ldr	r2, [r7, #0]
 80141ea:	0011      	movs	r1, r2
 80141ec:	0018      	movs	r0, r3
 80141ee:	f001 f810 	bl	8015212 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80141f2:	687a      	ldr	r2, [r7, #4]
 80141f4:	23a5      	movs	r3, #165	@ 0xa5
 80141f6:	009b      	lsls	r3, r3, #2
 80141f8:	2101      	movs	r1, #1
 80141fa:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	4a23      	ldr	r2, [pc, #140]	@ (801428c <USBD_LL_SetupStage+0xb8>)
 8014200:	5a9b      	ldrh	r3, [r3, r2]
 8014202:	0019      	movs	r1, r3
 8014204:	687a      	ldr	r2, [r7, #4]
 8014206:	23a6      	movs	r3, #166	@ 0xa6
 8014208:	009b      	lsls	r3, r3, #2
 801420a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801420c:	687a      	ldr	r2, [r7, #4]
 801420e:	23aa      	movs	r3, #170	@ 0xaa
 8014210:	009b      	lsls	r3, r3, #2
 8014212:	5cd3      	ldrb	r3, [r2, r3]
 8014214:	001a      	movs	r2, r3
 8014216:	231f      	movs	r3, #31
 8014218:	4013      	ands	r3, r2
 801421a:	2b02      	cmp	r3, #2
 801421c:	d019      	beq.n	8014252 <USBD_LL_SetupStage+0x7e>
 801421e:	d822      	bhi.n	8014266 <USBD_LL_SetupStage+0x92>
 8014220:	2b00      	cmp	r3, #0
 8014222:	d002      	beq.n	801422a <USBD_LL_SetupStage+0x56>
 8014224:	2b01      	cmp	r3, #1
 8014226:	d00a      	beq.n	801423e <USBD_LL_SetupStage+0x6a>
 8014228:	e01d      	b.n	8014266 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	22aa      	movs	r2, #170	@ 0xaa
 801422e:	0092      	lsls	r2, r2, #2
 8014230:	189a      	adds	r2, r3, r2
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	0011      	movs	r1, r2
 8014236:	0018      	movs	r0, r3
 8014238:	f000 fa10 	bl	801465c <USBD_StdDevReq>
      break;
 801423c:	e020      	b.n	8014280 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	22aa      	movs	r2, #170	@ 0xaa
 8014242:	0092      	lsls	r2, r2, #2
 8014244:	189a      	adds	r2, r3, r2
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	0011      	movs	r1, r2
 801424a:	0018      	movs	r0, r3
 801424c:	f000 fa78 	bl	8014740 <USBD_StdItfReq>
      break;
 8014250:	e016      	b.n	8014280 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	22aa      	movs	r2, #170	@ 0xaa
 8014256:	0092      	lsls	r2, r2, #2
 8014258:	189a      	adds	r2, r3, r2
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	0011      	movs	r1, r2
 801425e:	0018      	movs	r0, r3
 8014260:	f000 fac5 	bl	80147ee <USBD_StdEPReq>
      break;
 8014264:	e00c      	b.n	8014280 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	23aa      	movs	r3, #170	@ 0xaa
 801426a:	009b      	lsls	r3, r3, #2
 801426c:	5cd3      	ldrb	r3, [r2, r3]
 801426e:	227f      	movs	r2, #127	@ 0x7f
 8014270:	4393      	bics	r3, r2
 8014272:	b2da      	uxtb	r2, r3
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	0011      	movs	r1, r2
 8014278:	0018      	movs	r0, r3
 801427a:	f001 fc92 	bl	8015ba2 <USBD_LL_StallEP>
      break;
 801427e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8014280:	2300      	movs	r3, #0
}
 8014282:	0018      	movs	r0, r3
 8014284:	46bd      	mov	sp, r7
 8014286:	b002      	add	sp, #8
 8014288:	bd80      	pop	{r7, pc}
 801428a:	46c0      	nop			@ (mov r8, r8)
 801428c:	000002ae 	.word	0x000002ae

08014290 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b086      	sub	sp, #24
 8014294:	af00      	add	r7, sp, #0
 8014296:	60f8      	str	r0, [r7, #12]
 8014298:	607a      	str	r2, [r7, #4]
 801429a:	200b      	movs	r0, #11
 801429c:	183b      	adds	r3, r7, r0
 801429e:	1c0a      	adds	r2, r1, #0
 80142a0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80142a2:	183b      	adds	r3, r7, r0
 80142a4:	781b      	ldrb	r3, [r3, #0]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d154      	bne.n	8014354 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	3355      	adds	r3, #85	@ 0x55
 80142ae:	33ff      	adds	r3, #255	@ 0xff
 80142b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80142b2:	68fa      	ldr	r2, [r7, #12]
 80142b4:	23a5      	movs	r3, #165	@ 0xa5
 80142b6:	009b      	lsls	r3, r3, #2
 80142b8:	58d3      	ldr	r3, [r2, r3]
 80142ba:	2b03      	cmp	r3, #3
 80142bc:	d139      	bne.n	8014332 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80142be:	697b      	ldr	r3, [r7, #20]
 80142c0:	68da      	ldr	r2, [r3, #12]
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	691b      	ldr	r3, [r3, #16]
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d919      	bls.n	80142fe <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	68da      	ldr	r2, [r3, #12]
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	691b      	ldr	r3, [r3, #16]
 80142d2:	1ad2      	subs	r2, r2, r3
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	68da      	ldr	r2, [r3, #12]
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d203      	bcs.n	80142ec <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80142e8:	b29b      	uxth	r3, r3
 80142ea:	e002      	b.n	80142f2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80142ec:	697b      	ldr	r3, [r7, #20]
 80142ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80142f0:	b29b      	uxth	r3, r3
 80142f2:	6879      	ldr	r1, [r7, #4]
 80142f4:	68f8      	ldr	r0, [r7, #12]
 80142f6:	001a      	movs	r2, r3
 80142f8:	f001 f898 	bl	801542c <USBD_CtlContinueRx>
 80142fc:	e045      	b.n	801438a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80142fe:	68fa      	ldr	r2, [r7, #12]
 8014300:	23ad      	movs	r3, #173	@ 0xad
 8014302:	009b      	lsls	r3, r3, #2
 8014304:	58d3      	ldr	r3, [r2, r3]
 8014306:	691b      	ldr	r3, [r3, #16]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d00d      	beq.n	8014328 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801430c:	68fa      	ldr	r2, [r7, #12]
 801430e:	23a7      	movs	r3, #167	@ 0xa7
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014314:	2b03      	cmp	r3, #3
 8014316:	d107      	bne.n	8014328 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8014318:	68fa      	ldr	r2, [r7, #12]
 801431a:	23ad      	movs	r3, #173	@ 0xad
 801431c:	009b      	lsls	r3, r3, #2
 801431e:	58d3      	ldr	r3, [r2, r3]
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	68fa      	ldr	r2, [r7, #12]
 8014324:	0010      	movs	r0, r2
 8014326:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	0018      	movs	r0, r3
 801432c:	f001 f891 	bl	8015452 <USBD_CtlSendStatus>
 8014330:	e02b      	b.n	801438a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8014332:	68fa      	ldr	r2, [r7, #12]
 8014334:	23a5      	movs	r3, #165	@ 0xa5
 8014336:	009b      	lsls	r3, r3, #2
 8014338:	58d3      	ldr	r3, [r2, r3]
 801433a:	2b05      	cmp	r3, #5
 801433c:	d125      	bne.n	801438a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801433e:	68fa      	ldr	r2, [r7, #12]
 8014340:	23a5      	movs	r3, #165	@ 0xa5
 8014342:	009b      	lsls	r3, r3, #2
 8014344:	2100      	movs	r1, #0
 8014346:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2100      	movs	r1, #0
 801434c:	0018      	movs	r0, r3
 801434e:	f001 fc28 	bl	8015ba2 <USBD_LL_StallEP>
 8014352:	e01a      	b.n	801438a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8014354:	68fa      	ldr	r2, [r7, #12]
 8014356:	23ad      	movs	r3, #173	@ 0xad
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	58d3      	ldr	r3, [r2, r3]
 801435c:	699b      	ldr	r3, [r3, #24]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d011      	beq.n	8014386 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014362:	68fa      	ldr	r2, [r7, #12]
 8014364:	23a7      	movs	r3, #167	@ 0xa7
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801436a:	2b03      	cmp	r3, #3
 801436c:	d10b      	bne.n	8014386 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801436e:	68fa      	ldr	r2, [r7, #12]
 8014370:	23ad      	movs	r3, #173	@ 0xad
 8014372:	009b      	lsls	r3, r3, #2
 8014374:	58d3      	ldr	r3, [r2, r3]
 8014376:	699b      	ldr	r3, [r3, #24]
 8014378:	220b      	movs	r2, #11
 801437a:	18ba      	adds	r2, r7, r2
 801437c:	7811      	ldrb	r1, [r2, #0]
 801437e:	68fa      	ldr	r2, [r7, #12]
 8014380:	0010      	movs	r0, r2
 8014382:	4798      	blx	r3
 8014384:	e001      	b.n	801438a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014386:	2302      	movs	r3, #2
 8014388:	e000      	b.n	801438c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801438a:	2300      	movs	r3, #0
}
 801438c:	0018      	movs	r0, r3
 801438e:	46bd      	mov	sp, r7
 8014390:	b006      	add	sp, #24
 8014392:	bd80      	pop	{r7, pc}

08014394 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b086      	sub	sp, #24
 8014398:	af00      	add	r7, sp, #0
 801439a:	60f8      	str	r0, [r7, #12]
 801439c:	607a      	str	r2, [r7, #4]
 801439e:	200b      	movs	r0, #11
 80143a0:	183b      	adds	r3, r7, r0
 80143a2:	1c0a      	adds	r2, r1, #0
 80143a4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80143a6:	183b      	adds	r3, r7, r0
 80143a8:	781b      	ldrb	r3, [r3, #0]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d000      	beq.n	80143b0 <USBD_LL_DataInStage+0x1c>
 80143ae:	e08e      	b.n	80144ce <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	3314      	adds	r3, #20
 80143b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80143b6:	68fa      	ldr	r2, [r7, #12]
 80143b8:	23a5      	movs	r3, #165	@ 0xa5
 80143ba:	009b      	lsls	r3, r3, #2
 80143bc:	58d3      	ldr	r3, [r2, r3]
 80143be:	2b02      	cmp	r3, #2
 80143c0:	d164      	bne.n	801448c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	68da      	ldr	r2, [r3, #12]
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	691b      	ldr	r3, [r3, #16]
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d915      	bls.n	80143fa <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	68da      	ldr	r2, [r3, #12]
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	691b      	ldr	r3, [r3, #16]
 80143d6:	1ad2      	subs	r2, r2, r3
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	b29a      	uxth	r2, r3
 80143e2:	6879      	ldr	r1, [r7, #4]
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	0018      	movs	r0, r3
 80143e8:	f000 ffe9 	bl	80153be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80143ec:	68f8      	ldr	r0, [r7, #12]
 80143ee:	2300      	movs	r3, #0
 80143f0:	2200      	movs	r2, #0
 80143f2:	2100      	movs	r1, #0
 80143f4:	f001 fcbe 	bl	8015d74 <USBD_LL_PrepareReceive>
 80143f8:	e059      	b.n	80144ae <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	689a      	ldr	r2, [r3, #8]
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	691b      	ldr	r3, [r3, #16]
 8014402:	0019      	movs	r1, r3
 8014404:	0010      	movs	r0, r2
 8014406:	f7eb ff21 	bl	800024c <__aeabi_uidivmod>
 801440a:	1e0b      	subs	r3, r1, #0
 801440c:	d11f      	bne.n	801444e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	689a      	ldr	r2, [r3, #8]
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014416:	429a      	cmp	r2, r3
 8014418:	d319      	bcc.n	801444e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	689a      	ldr	r2, [r3, #8]
 801441e:	68f9      	ldr	r1, [r7, #12]
 8014420:	23a6      	movs	r3, #166	@ 0xa6
 8014422:	009b      	lsls	r3, r3, #2
 8014424:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8014426:	429a      	cmp	r2, r3
 8014428:	d211      	bcs.n	801444e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	2200      	movs	r2, #0
 801442e:	2100      	movs	r1, #0
 8014430:	0018      	movs	r0, r3
 8014432:	f000 ffc4 	bl	80153be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014436:	68fa      	ldr	r2, [r7, #12]
 8014438:	23a6      	movs	r3, #166	@ 0xa6
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	2100      	movs	r1, #0
 801443e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014440:	68f8      	ldr	r0, [r7, #12]
 8014442:	2300      	movs	r3, #0
 8014444:	2200      	movs	r2, #0
 8014446:	2100      	movs	r1, #0
 8014448:	f001 fc94 	bl	8015d74 <USBD_LL_PrepareReceive>
 801444c:	e02f      	b.n	80144ae <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801444e:	68fa      	ldr	r2, [r7, #12]
 8014450:	23ad      	movs	r3, #173	@ 0xad
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	58d3      	ldr	r3, [r2, r3]
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00d      	beq.n	8014478 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801445c:	68fa      	ldr	r2, [r7, #12]
 801445e:	23a7      	movs	r3, #167	@ 0xa7
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014464:	2b03      	cmp	r3, #3
 8014466:	d107      	bne.n	8014478 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8014468:	68fa      	ldr	r2, [r7, #12]
 801446a:	23ad      	movs	r3, #173	@ 0xad
 801446c:	009b      	lsls	r3, r3, #2
 801446e:	58d3      	ldr	r3, [r2, r3]
 8014470:	68db      	ldr	r3, [r3, #12]
 8014472:	68fa      	ldr	r2, [r7, #12]
 8014474:	0010      	movs	r0, r2
 8014476:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	2180      	movs	r1, #128	@ 0x80
 801447c:	0018      	movs	r0, r3
 801447e:	f001 fb90 	bl	8015ba2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	0018      	movs	r0, r3
 8014486:	f000 fff8 	bl	801547a <USBD_CtlReceiveStatus>
 801448a:	e010      	b.n	80144ae <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801448c:	68fa      	ldr	r2, [r7, #12]
 801448e:	23a5      	movs	r3, #165	@ 0xa5
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	58d3      	ldr	r3, [r2, r3]
 8014494:	2b04      	cmp	r3, #4
 8014496:	d005      	beq.n	80144a4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8014498:	68fa      	ldr	r2, [r7, #12]
 801449a:	23a5      	movs	r3, #165	@ 0xa5
 801449c:	009b      	lsls	r3, r3, #2
 801449e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d104      	bne.n	80144ae <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	2180      	movs	r1, #128	@ 0x80
 80144a8:	0018      	movs	r0, r3
 80144aa:	f001 fb7a 	bl	8015ba2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	23a8      	movs	r3, #168	@ 0xa8
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	5cd3      	ldrb	r3, [r2, r3]
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	d124      	bne.n	8014504 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	0018      	movs	r0, r3
 80144be:	f7ff fe42 	bl	8014146 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80144c2:	68fa      	ldr	r2, [r7, #12]
 80144c4:	23a8      	movs	r3, #168	@ 0xa8
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	2100      	movs	r1, #0
 80144ca:	54d1      	strb	r1, [r2, r3]
 80144cc:	e01a      	b.n	8014504 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80144ce:	68fa      	ldr	r2, [r7, #12]
 80144d0:	23ad      	movs	r3, #173	@ 0xad
 80144d2:	009b      	lsls	r3, r3, #2
 80144d4:	58d3      	ldr	r3, [r2, r3]
 80144d6:	695b      	ldr	r3, [r3, #20]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d011      	beq.n	8014500 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80144dc:	68fa      	ldr	r2, [r7, #12]
 80144de:	23a7      	movs	r3, #167	@ 0xa7
 80144e0:	009b      	lsls	r3, r3, #2
 80144e2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80144e4:	2b03      	cmp	r3, #3
 80144e6:	d10b      	bne.n	8014500 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80144e8:	68fa      	ldr	r2, [r7, #12]
 80144ea:	23ad      	movs	r3, #173	@ 0xad
 80144ec:	009b      	lsls	r3, r3, #2
 80144ee:	58d3      	ldr	r3, [r2, r3]
 80144f0:	695b      	ldr	r3, [r3, #20]
 80144f2:	220b      	movs	r2, #11
 80144f4:	18ba      	adds	r2, r7, r2
 80144f6:	7811      	ldrb	r1, [r2, #0]
 80144f8:	68fa      	ldr	r2, [r7, #12]
 80144fa:	0010      	movs	r0, r2
 80144fc:	4798      	blx	r3
 80144fe:	e001      	b.n	8014504 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014500:	2302      	movs	r3, #2
 8014502:	e000      	b.n	8014506 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8014504:	2300      	movs	r3, #0
}
 8014506:	0018      	movs	r0, r3
 8014508:	46bd      	mov	sp, r7
 801450a:	b006      	add	sp, #24
 801450c:	bd80      	pop	{r7, pc}

0801450e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801450e:	b580      	push	{r7, lr}
 8014510:	b082      	sub	sp, #8
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	2340      	movs	r3, #64	@ 0x40
 801451a:	2200      	movs	r2, #0
 801451c:	2100      	movs	r1, #0
 801451e:	f001 fade 	bl	8015ade <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014522:	687a      	ldr	r2, [r7, #4]
 8014524:	23ac      	movs	r3, #172	@ 0xac
 8014526:	005b      	lsls	r3, r3, #1
 8014528:	2101      	movs	r1, #1
 801452a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801452c:	687a      	ldr	r2, [r7, #4]
 801452e:	23b2      	movs	r3, #178	@ 0xb2
 8014530:	005b      	lsls	r3, r3, #1
 8014532:	2140      	movs	r1, #64	@ 0x40
 8014534:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	2340      	movs	r3, #64	@ 0x40
 801453a:	2200      	movs	r2, #0
 801453c:	2180      	movs	r1, #128	@ 0x80
 801453e:	f001 face 	bl	8015ade <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2201      	movs	r2, #1
 8014546:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2240      	movs	r2, #64	@ 0x40
 801454c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801454e:	687a      	ldr	r2, [r7, #4]
 8014550:	23a7      	movs	r3, #167	@ 0xa7
 8014552:	009b      	lsls	r3, r3, #2
 8014554:	2101      	movs	r1, #1
 8014556:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8014558:	687a      	ldr	r2, [r7, #4]
 801455a:	23a5      	movs	r3, #165	@ 0xa5
 801455c:	009b      	lsls	r3, r3, #2
 801455e:	2100      	movs	r1, #0
 8014560:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	2200      	movs	r2, #0
 8014566:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	23a9      	movs	r3, #169	@ 0xa9
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	2100      	movs	r1, #0
 8014570:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	23ae      	movs	r3, #174	@ 0xae
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	58d3      	ldr	r3, [r2, r3]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d00a      	beq.n	8014594 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801457e:	687a      	ldr	r2, [r7, #4]
 8014580:	23ad      	movs	r3, #173	@ 0xad
 8014582:	009b      	lsls	r3, r3, #2
 8014584:	58d3      	ldr	r3, [r2, r3]
 8014586:	685a      	ldr	r2, [r3, #4]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	685b      	ldr	r3, [r3, #4]
 801458c:	b2d9      	uxtb	r1, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	0018      	movs	r0, r3
 8014592:	4790      	blx	r2
  }

  return USBD_OK;
 8014594:	2300      	movs	r3, #0
}
 8014596:	0018      	movs	r0, r3
 8014598:	46bd      	mov	sp, r7
 801459a:	b002      	add	sp, #8
 801459c:	bd80      	pop	{r7, pc}

0801459e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801459e:	b580      	push	{r7, lr}
 80145a0:	b082      	sub	sp, #8
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
 80145a6:	000a      	movs	r2, r1
 80145a8:	1cfb      	adds	r3, r7, #3
 80145aa:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	1cfa      	adds	r2, r7, #3
 80145b0:	7812      	ldrb	r2, [r2, #0]
 80145b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80145b4:	2300      	movs	r3, #0
}
 80145b6:	0018      	movs	r0, r3
 80145b8:	46bd      	mov	sp, r7
 80145ba:	b002      	add	sp, #8
 80145bc:	bd80      	pop	{r7, pc}
	...

080145c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80145c8:	687a      	ldr	r2, [r7, #4]
 80145ca:	23a7      	movs	r3, #167	@ 0xa7
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	5cd1      	ldrb	r1, [r2, r3]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	4a06      	ldr	r2, [pc, #24]	@ (80145ec <USBD_LL_Suspend+0x2c>)
 80145d4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	23a7      	movs	r3, #167	@ 0xa7
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	2104      	movs	r1, #4
 80145de:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80145e0:	2300      	movs	r3, #0
}
 80145e2:	0018      	movs	r0, r3
 80145e4:	46bd      	mov	sp, r7
 80145e6:	b002      	add	sp, #8
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	46c0      	nop			@ (mov r8, r8)
 80145ec:	0000029d 	.word	0x0000029d

080145f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b082      	sub	sp, #8
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	23a7      	movs	r3, #167	@ 0xa7
 80145fc:	009b      	lsls	r3, r3, #2
 80145fe:	5cd3      	ldrb	r3, [r2, r3]
 8014600:	2b04      	cmp	r3, #4
 8014602:	d106      	bne.n	8014612 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	4a05      	ldr	r2, [pc, #20]	@ (801461c <USBD_LL_Resume+0x2c>)
 8014608:	5c99      	ldrb	r1, [r3, r2]
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	23a7      	movs	r3, #167	@ 0xa7
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8014612:	2300      	movs	r3, #0
}
 8014614:	0018      	movs	r0, r3
 8014616:	46bd      	mov	sp, r7
 8014618:	b002      	add	sp, #8
 801461a:	bd80      	pop	{r7, pc}
 801461c:	0000029d 	.word	0x0000029d

08014620 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	23a7      	movs	r3, #167	@ 0xa7
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	5cd3      	ldrb	r3, [r2, r3]
 8014630:	2b03      	cmp	r3, #3
 8014632:	d10e      	bne.n	8014652 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8014634:	687a      	ldr	r2, [r7, #4]
 8014636:	23ad      	movs	r3, #173	@ 0xad
 8014638:	009b      	lsls	r3, r3, #2
 801463a:	58d3      	ldr	r3, [r2, r3]
 801463c:	69db      	ldr	r3, [r3, #28]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d007      	beq.n	8014652 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8014642:	687a      	ldr	r2, [r7, #4]
 8014644:	23ad      	movs	r3, #173	@ 0xad
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	58d3      	ldr	r3, [r2, r3]
 801464a:	69db      	ldr	r3, [r3, #28]
 801464c:	687a      	ldr	r2, [r7, #4]
 801464e:	0010      	movs	r0, r2
 8014650:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014652:	2300      	movs	r3, #0
}
 8014654:	0018      	movs	r0, r3
 8014656:	46bd      	mov	sp, r7
 8014658:	b002      	add	sp, #8
 801465a:	bd80      	pop	{r7, pc}

0801465c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014666:	230f      	movs	r3, #15
 8014668:	18fb      	adds	r3, r7, r3
 801466a:	2200      	movs	r2, #0
 801466c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	001a      	movs	r2, r3
 8014674:	2360      	movs	r3, #96	@ 0x60
 8014676:	4013      	ands	r3, r2
 8014678:	2b40      	cmp	r3, #64	@ 0x40
 801467a:	d004      	beq.n	8014686 <USBD_StdDevReq+0x2a>
 801467c:	d84f      	bhi.n	801471e <USBD_StdDevReq+0xc2>
 801467e:	2b00      	cmp	r3, #0
 8014680:	d00b      	beq.n	801469a <USBD_StdDevReq+0x3e>
 8014682:	2b20      	cmp	r3, #32
 8014684:	d14b      	bne.n	801471e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	23ad      	movs	r3, #173	@ 0xad
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	58d3      	ldr	r3, [r2, r3]
 801468e:	689b      	ldr	r3, [r3, #8]
 8014690:	6839      	ldr	r1, [r7, #0]
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	0010      	movs	r0, r2
 8014696:	4798      	blx	r3
      break;
 8014698:	e048      	b.n	801472c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	785b      	ldrb	r3, [r3, #1]
 801469e:	2b09      	cmp	r3, #9
 80146a0:	d835      	bhi.n	801470e <USBD_StdDevReq+0xb2>
 80146a2:	009a      	lsls	r2, r3, #2
 80146a4:	4b25      	ldr	r3, [pc, #148]	@ (801473c <USBD_StdDevReq+0xe0>)
 80146a6:	18d3      	adds	r3, r2, r3
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80146ac:	683a      	ldr	r2, [r7, #0]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	0011      	movs	r1, r2
 80146b2:	0018      	movs	r0, r3
 80146b4:	f000 fa52 	bl	8014b5c <USBD_GetDescriptor>
          break;
 80146b8:	e030      	b.n	801471c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80146ba:	683a      	ldr	r2, [r7, #0]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	0011      	movs	r1, r2
 80146c0:	0018      	movs	r0, r3
 80146c2:	f000 fbfd 	bl	8014ec0 <USBD_SetAddress>
          break;
 80146c6:	e029      	b.n	801471c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80146c8:	683a      	ldr	r2, [r7, #0]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	0011      	movs	r1, r2
 80146ce:	0018      	movs	r0, r3
 80146d0:	f000 fc4a 	bl	8014f68 <USBD_SetConfig>
          break;
 80146d4:	e022      	b.n	801471c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80146d6:	683a      	ldr	r2, [r7, #0]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	0011      	movs	r1, r2
 80146dc:	0018      	movs	r0, r3
 80146de:	f000 fce7 	bl	80150b0 <USBD_GetConfig>
          break;
 80146e2:	e01b      	b.n	801471c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80146e4:	683a      	ldr	r2, [r7, #0]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	0011      	movs	r1, r2
 80146ea:	0018      	movs	r0, r3
 80146ec:	f000 fd1b 	bl	8015126 <USBD_GetStatus>
          break;
 80146f0:	e014      	b.n	801471c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80146f2:	683a      	ldr	r2, [r7, #0]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	0011      	movs	r1, r2
 80146f8:	0018      	movs	r0, r3
 80146fa:	f000 fd4e 	bl	801519a <USBD_SetFeature>
          break;
 80146fe:	e00d      	b.n	801471c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014700:	683a      	ldr	r2, [r7, #0]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	0011      	movs	r1, r2
 8014706:	0018      	movs	r0, r3
 8014708:	f000 fd5d 	bl	80151c6 <USBD_ClrFeature>
          break;
 801470c:	e006      	b.n	801471c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801470e:	683a      	ldr	r2, [r7, #0]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	0011      	movs	r1, r2
 8014714:	0018      	movs	r0, r3
 8014716:	f000 fdb4 	bl	8015282 <USBD_CtlError>
          break;
 801471a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801471c:	e006      	b.n	801472c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801471e:	683a      	ldr	r2, [r7, #0]
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	0011      	movs	r1, r2
 8014724:	0018      	movs	r0, r3
 8014726:	f000 fdac 	bl	8015282 <USBD_CtlError>
      break;
 801472a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801472c:	230f      	movs	r3, #15
 801472e:	18fb      	adds	r3, r7, r3
 8014730:	781b      	ldrb	r3, [r3, #0]
}
 8014732:	0018      	movs	r0, r3
 8014734:	46bd      	mov	sp, r7
 8014736:	b004      	add	sp, #16
 8014738:	bd80      	pop	{r7, pc}
 801473a:	46c0      	nop			@ (mov r8, r8)
 801473c:	0801a478 	.word	0x0801a478

08014740 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8014740:	b5b0      	push	{r4, r5, r7, lr}
 8014742:	b084      	sub	sp, #16
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801474a:	230f      	movs	r3, #15
 801474c:	18fb      	adds	r3, r7, r3
 801474e:	2200      	movs	r2, #0
 8014750:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	781b      	ldrb	r3, [r3, #0]
 8014756:	001a      	movs	r2, r3
 8014758:	2360      	movs	r3, #96	@ 0x60
 801475a:	4013      	ands	r3, r2
 801475c:	2b40      	cmp	r3, #64	@ 0x40
 801475e:	d004      	beq.n	801476a <USBD_StdItfReq+0x2a>
 8014760:	d839      	bhi.n	80147d6 <USBD_StdItfReq+0x96>
 8014762:	2b00      	cmp	r3, #0
 8014764:	d001      	beq.n	801476a <USBD_StdItfReq+0x2a>
 8014766:	2b20      	cmp	r3, #32
 8014768:	d135      	bne.n	80147d6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801476a:	687a      	ldr	r2, [r7, #4]
 801476c:	23a7      	movs	r3, #167	@ 0xa7
 801476e:	009b      	lsls	r3, r3, #2
 8014770:	5cd3      	ldrb	r3, [r2, r3]
 8014772:	3b01      	subs	r3, #1
 8014774:	2b02      	cmp	r3, #2
 8014776:	d825      	bhi.n	80147c4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	889b      	ldrh	r3, [r3, #4]
 801477c:	b2db      	uxtb	r3, r3
 801477e:	2b01      	cmp	r3, #1
 8014780:	d819      	bhi.n	80147b6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	23ad      	movs	r3, #173	@ 0xad
 8014786:	009b      	lsls	r3, r3, #2
 8014788:	58d3      	ldr	r3, [r2, r3]
 801478a:	689b      	ldr	r3, [r3, #8]
 801478c:	250f      	movs	r5, #15
 801478e:	197c      	adds	r4, r7, r5
 8014790:	6839      	ldr	r1, [r7, #0]
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	0010      	movs	r0, r2
 8014796:	4798      	blx	r3
 8014798:	0003      	movs	r3, r0
 801479a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	88db      	ldrh	r3, [r3, #6]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d116      	bne.n	80147d2 <USBD_StdItfReq+0x92>
 80147a4:	197b      	adds	r3, r7, r5
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d112      	bne.n	80147d2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	0018      	movs	r0, r3
 80147b0:	f000 fe4f 	bl	8015452 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80147b4:	e00d      	b.n	80147d2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80147b6:	683a      	ldr	r2, [r7, #0]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	0011      	movs	r1, r2
 80147bc:	0018      	movs	r0, r3
 80147be:	f000 fd60 	bl	8015282 <USBD_CtlError>
          break;
 80147c2:	e006      	b.n	80147d2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80147c4:	683a      	ldr	r2, [r7, #0]
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	0011      	movs	r1, r2
 80147ca:	0018      	movs	r0, r3
 80147cc:	f000 fd59 	bl	8015282 <USBD_CtlError>
          break;
 80147d0:	e000      	b.n	80147d4 <USBD_StdItfReq+0x94>
          break;
 80147d2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80147d4:	e006      	b.n	80147e4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80147d6:	683a      	ldr	r2, [r7, #0]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	0011      	movs	r1, r2
 80147dc:	0018      	movs	r0, r3
 80147de:	f000 fd50 	bl	8015282 <USBD_CtlError>
      break;
 80147e2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80147e4:	2300      	movs	r3, #0
}
 80147e6:	0018      	movs	r0, r3
 80147e8:	46bd      	mov	sp, r7
 80147ea:	b004      	add	sp, #16
 80147ec:	bdb0      	pop	{r4, r5, r7, pc}

080147ee <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80147ee:	b5b0      	push	{r4, r5, r7, lr}
 80147f0:	b084      	sub	sp, #16
 80147f2:	af00      	add	r7, sp, #0
 80147f4:	6078      	str	r0, [r7, #4]
 80147f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80147f8:	230f      	movs	r3, #15
 80147fa:	18fb      	adds	r3, r7, r3
 80147fc:	2200      	movs	r2, #0
 80147fe:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	889a      	ldrh	r2, [r3, #4]
 8014804:	230e      	movs	r3, #14
 8014806:	18fb      	adds	r3, r7, r3
 8014808:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	781b      	ldrb	r3, [r3, #0]
 801480e:	001a      	movs	r2, r3
 8014810:	2360      	movs	r3, #96	@ 0x60
 8014812:	4013      	ands	r3, r2
 8014814:	2b40      	cmp	r3, #64	@ 0x40
 8014816:	d006      	beq.n	8014826 <USBD_StdEPReq+0x38>
 8014818:	d900      	bls.n	801481c <USBD_StdEPReq+0x2e>
 801481a:	e190      	b.n	8014b3e <USBD_StdEPReq+0x350>
 801481c:	2b00      	cmp	r3, #0
 801481e:	d00c      	beq.n	801483a <USBD_StdEPReq+0x4c>
 8014820:	2b20      	cmp	r3, #32
 8014822:	d000      	beq.n	8014826 <USBD_StdEPReq+0x38>
 8014824:	e18b      	b.n	8014b3e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	23ad      	movs	r3, #173	@ 0xad
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	58d3      	ldr	r3, [r2, r3]
 801482e:	689b      	ldr	r3, [r3, #8]
 8014830:	6839      	ldr	r1, [r7, #0]
 8014832:	687a      	ldr	r2, [r7, #4]
 8014834:	0010      	movs	r0, r2
 8014836:	4798      	blx	r3
      break;
 8014838:	e188      	b.n	8014b4c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	781b      	ldrb	r3, [r3, #0]
 801483e:	001a      	movs	r2, r3
 8014840:	2360      	movs	r3, #96	@ 0x60
 8014842:	4013      	ands	r3, r2
 8014844:	2b20      	cmp	r3, #32
 8014846:	d10f      	bne.n	8014868 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	23ad      	movs	r3, #173	@ 0xad
 801484c:	009b      	lsls	r3, r3, #2
 801484e:	58d3      	ldr	r3, [r2, r3]
 8014850:	689b      	ldr	r3, [r3, #8]
 8014852:	250f      	movs	r5, #15
 8014854:	197c      	adds	r4, r7, r5
 8014856:	6839      	ldr	r1, [r7, #0]
 8014858:	687a      	ldr	r2, [r7, #4]
 801485a:	0010      	movs	r0, r2
 801485c:	4798      	blx	r3
 801485e:	0003      	movs	r3, r0
 8014860:	7023      	strb	r3, [r4, #0]

        return ret;
 8014862:	197b      	adds	r3, r7, r5
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	e174      	b.n	8014b52 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	785b      	ldrb	r3, [r3, #1]
 801486c:	2b03      	cmp	r3, #3
 801486e:	d007      	beq.n	8014880 <USBD_StdEPReq+0x92>
 8014870:	dd00      	ble.n	8014874 <USBD_StdEPReq+0x86>
 8014872:	e15c      	b.n	8014b2e <USBD_StdEPReq+0x340>
 8014874:	2b00      	cmp	r3, #0
 8014876:	d100      	bne.n	801487a <USBD_StdEPReq+0x8c>
 8014878:	e092      	b.n	80149a0 <USBD_StdEPReq+0x1b2>
 801487a:	2b01      	cmp	r3, #1
 801487c:	d04b      	beq.n	8014916 <USBD_StdEPReq+0x128>
 801487e:	e156      	b.n	8014b2e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	23a7      	movs	r3, #167	@ 0xa7
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	5cd3      	ldrb	r3, [r2, r3]
 8014888:	2b02      	cmp	r3, #2
 801488a:	d002      	beq.n	8014892 <USBD_StdEPReq+0xa4>
 801488c:	2b03      	cmp	r3, #3
 801488e:	d01d      	beq.n	80148cc <USBD_StdEPReq+0xde>
 8014890:	e039      	b.n	8014906 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014892:	220e      	movs	r2, #14
 8014894:	18bb      	adds	r3, r7, r2
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d010      	beq.n	80148be <USBD_StdEPReq+0xd0>
 801489c:	18bb      	adds	r3, r7, r2
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	2b80      	cmp	r3, #128	@ 0x80
 80148a2:	d00c      	beq.n	80148be <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80148a4:	18bb      	adds	r3, r7, r2
 80148a6:	781a      	ldrb	r2, [r3, #0]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	0011      	movs	r1, r2
 80148ac:	0018      	movs	r0, r3
 80148ae:	f001 f978 	bl	8015ba2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2180      	movs	r1, #128	@ 0x80
 80148b6:	0018      	movs	r0, r3
 80148b8:	f001 f973 	bl	8015ba2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80148bc:	e02a      	b.n	8014914 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80148be:	683a      	ldr	r2, [r7, #0]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	0011      	movs	r1, r2
 80148c4:	0018      	movs	r0, r3
 80148c6:	f000 fcdc 	bl	8015282 <USBD_CtlError>
              break;
 80148ca:	e023      	b.n	8014914 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	885b      	ldrh	r3, [r3, #2]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d113      	bne.n	80148fc <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80148d4:	220e      	movs	r2, #14
 80148d6:	18bb      	adds	r3, r7, r2
 80148d8:	781b      	ldrb	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d00e      	beq.n	80148fc <USBD_StdEPReq+0x10e>
 80148de:	18bb      	adds	r3, r7, r2
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	2b80      	cmp	r3, #128	@ 0x80
 80148e4:	d00a      	beq.n	80148fc <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	88db      	ldrh	r3, [r3, #6]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d106      	bne.n	80148fc <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80148ee:	18bb      	adds	r3, r7, r2
 80148f0:	781a      	ldrb	r2, [r3, #0]
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	0011      	movs	r1, r2
 80148f6:	0018      	movs	r0, r3
 80148f8:	f001 f953 	bl	8015ba2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	0018      	movs	r0, r3
 8014900:	f000 fda7 	bl	8015452 <USBD_CtlSendStatus>

              break;
 8014904:	e006      	b.n	8014914 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8014906:	683a      	ldr	r2, [r7, #0]
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	0011      	movs	r1, r2
 801490c:	0018      	movs	r0, r3
 801490e:	f000 fcb8 	bl	8015282 <USBD_CtlError>
              break;
 8014912:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014914:	e112      	b.n	8014b3c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014916:	687a      	ldr	r2, [r7, #4]
 8014918:	23a7      	movs	r3, #167	@ 0xa7
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	5cd3      	ldrb	r3, [r2, r3]
 801491e:	2b02      	cmp	r3, #2
 8014920:	d002      	beq.n	8014928 <USBD_StdEPReq+0x13a>
 8014922:	2b03      	cmp	r3, #3
 8014924:	d01d      	beq.n	8014962 <USBD_StdEPReq+0x174>
 8014926:	e032      	b.n	801498e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014928:	220e      	movs	r2, #14
 801492a:	18bb      	adds	r3, r7, r2
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d010      	beq.n	8014954 <USBD_StdEPReq+0x166>
 8014932:	18bb      	adds	r3, r7, r2
 8014934:	781b      	ldrb	r3, [r3, #0]
 8014936:	2b80      	cmp	r3, #128	@ 0x80
 8014938:	d00c      	beq.n	8014954 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801493a:	18bb      	adds	r3, r7, r2
 801493c:	781a      	ldrb	r2, [r3, #0]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	0011      	movs	r1, r2
 8014942:	0018      	movs	r0, r3
 8014944:	f001 f92d 	bl	8015ba2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2180      	movs	r1, #128	@ 0x80
 801494c:	0018      	movs	r0, r3
 801494e:	f001 f928 	bl	8015ba2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014952:	e024      	b.n	801499e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8014954:	683a      	ldr	r2, [r7, #0]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	0011      	movs	r1, r2
 801495a:	0018      	movs	r0, r3
 801495c:	f000 fc91 	bl	8015282 <USBD_CtlError>
              break;
 8014960:	e01d      	b.n	801499e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	885b      	ldrh	r3, [r3, #2]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d118      	bne.n	801499c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801496a:	210e      	movs	r1, #14
 801496c:	187b      	adds	r3, r7, r1
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	227f      	movs	r2, #127	@ 0x7f
 8014972:	4013      	ands	r3, r2
 8014974:	d006      	beq.n	8014984 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8014976:	187b      	adds	r3, r7, r1
 8014978:	781a      	ldrb	r2, [r3, #0]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	0011      	movs	r1, r2
 801497e:	0018      	movs	r0, r3
 8014980:	f001 f93a 	bl	8015bf8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	0018      	movs	r0, r3
 8014988:	f000 fd63 	bl	8015452 <USBD_CtlSendStatus>
              }
              break;
 801498c:	e006      	b.n	801499c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801498e:	683a      	ldr	r2, [r7, #0]
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	0011      	movs	r1, r2
 8014994:	0018      	movs	r0, r3
 8014996:	f000 fc74 	bl	8015282 <USBD_CtlError>
              break;
 801499a:	e000      	b.n	801499e <USBD_StdEPReq+0x1b0>
              break;
 801499c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801499e:	e0cd      	b.n	8014b3c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80149a0:	687a      	ldr	r2, [r7, #4]
 80149a2:	23a7      	movs	r3, #167	@ 0xa7
 80149a4:	009b      	lsls	r3, r3, #2
 80149a6:	5cd3      	ldrb	r3, [r2, r3]
 80149a8:	2b02      	cmp	r3, #2
 80149aa:	d002      	beq.n	80149b2 <USBD_StdEPReq+0x1c4>
 80149ac:	2b03      	cmp	r3, #3
 80149ae:	d03c      	beq.n	8014a2a <USBD_StdEPReq+0x23c>
 80149b0:	e0b5      	b.n	8014b1e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80149b2:	220e      	movs	r2, #14
 80149b4:	18bb      	adds	r3, r7, r2
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d00a      	beq.n	80149d2 <USBD_StdEPReq+0x1e4>
 80149bc:	18bb      	adds	r3, r7, r2
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	2b80      	cmp	r3, #128	@ 0x80
 80149c2:	d006      	beq.n	80149d2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80149c4:	683a      	ldr	r2, [r7, #0]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	0011      	movs	r1, r2
 80149ca:	0018      	movs	r0, r3
 80149cc:	f000 fc59 	bl	8015282 <USBD_CtlError>
                break;
 80149d0:	e0ac      	b.n	8014b2c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149d2:	220e      	movs	r2, #14
 80149d4:	18bb      	adds	r3, r7, r2
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	b25b      	sxtb	r3, r3
 80149da:	2b00      	cmp	r3, #0
 80149dc:	da0c      	bge.n	80149f8 <USBD_StdEPReq+0x20a>
 80149de:	18bb      	adds	r3, r7, r2
 80149e0:	781b      	ldrb	r3, [r3, #0]
 80149e2:	227f      	movs	r2, #127	@ 0x7f
 80149e4:	401a      	ands	r2, r3
 80149e6:	0013      	movs	r3, r2
 80149e8:	009b      	lsls	r3, r3, #2
 80149ea:	189b      	adds	r3, r3, r2
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	3310      	adds	r3, #16
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	18d3      	adds	r3, r2, r3
 80149f4:	3304      	adds	r3, #4
 80149f6:	e00d      	b.n	8014a14 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80149f8:	230e      	movs	r3, #14
 80149fa:	18fb      	adds	r3, r7, r3
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	227f      	movs	r2, #127	@ 0x7f
 8014a00:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a02:	0013      	movs	r3, r2
 8014a04:	009b      	lsls	r3, r3, #2
 8014a06:	189b      	adds	r3, r3, r2
 8014a08:	009b      	lsls	r3, r3, #2
 8014a0a:	3351      	adds	r3, #81	@ 0x51
 8014a0c:	33ff      	adds	r3, #255	@ 0xff
 8014a0e:	687a      	ldr	r2, [r7, #4]
 8014a10:	18d3      	adds	r3, r2, r3
 8014a12:	3304      	adds	r3, #4
 8014a14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014a1c:	68b9      	ldr	r1, [r7, #8]
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	2202      	movs	r2, #2
 8014a22:	0018      	movs	r0, r3
 8014a24:	f000 fcab 	bl	801537e <USBD_CtlSendData>
              break;
 8014a28:	e080      	b.n	8014b2c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014a2a:	220e      	movs	r2, #14
 8014a2c:	18bb      	adds	r3, r7, r2
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	b25b      	sxtb	r3, r3
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	da14      	bge.n	8014a60 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014a36:	18bb      	adds	r3, r7, r2
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	220f      	movs	r2, #15
 8014a3c:	401a      	ands	r2, r3
 8014a3e:	6879      	ldr	r1, [r7, #4]
 8014a40:	0013      	movs	r3, r2
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	189b      	adds	r3, r3, r2
 8014a46:	009b      	lsls	r3, r3, #2
 8014a48:	18cb      	adds	r3, r1, r3
 8014a4a:	3318      	adds	r3, #24
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d11e      	bne.n	8014a90 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8014a52:	683a      	ldr	r2, [r7, #0]
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	0011      	movs	r1, r2
 8014a58:	0018      	movs	r0, r3
 8014a5a:	f000 fc12 	bl	8015282 <USBD_CtlError>
                  break;
 8014a5e:	e065      	b.n	8014b2c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014a60:	230e      	movs	r3, #14
 8014a62:	18fb      	adds	r3, r7, r3
 8014a64:	781b      	ldrb	r3, [r3, #0]
 8014a66:	220f      	movs	r2, #15
 8014a68:	401a      	ands	r2, r3
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	23ac      	movs	r3, #172	@ 0xac
 8014a6e:	0059      	lsls	r1, r3, #1
 8014a70:	0013      	movs	r3, r2
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	189b      	adds	r3, r3, r2
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	18c3      	adds	r3, r0, r3
 8014a7a:	185b      	adds	r3, r3, r1
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d106      	bne.n	8014a90 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8014a82:	683a      	ldr	r2, [r7, #0]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	0011      	movs	r1, r2
 8014a88:	0018      	movs	r0, r3
 8014a8a:	f000 fbfa 	bl	8015282 <USBD_CtlError>
                  break;
 8014a8e:	e04d      	b.n	8014b2c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a90:	220e      	movs	r2, #14
 8014a92:	18bb      	adds	r3, r7, r2
 8014a94:	781b      	ldrb	r3, [r3, #0]
 8014a96:	b25b      	sxtb	r3, r3
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	da0c      	bge.n	8014ab6 <USBD_StdEPReq+0x2c8>
 8014a9c:	18bb      	adds	r3, r7, r2
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	227f      	movs	r2, #127	@ 0x7f
 8014aa2:	401a      	ands	r2, r3
 8014aa4:	0013      	movs	r3, r2
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	189b      	adds	r3, r3, r2
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	3310      	adds	r3, #16
 8014aae:	687a      	ldr	r2, [r7, #4]
 8014ab0:	18d3      	adds	r3, r2, r3
 8014ab2:	3304      	adds	r3, #4
 8014ab4:	e00d      	b.n	8014ad2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014ab6:	230e      	movs	r3, #14
 8014ab8:	18fb      	adds	r3, r7, r3
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	227f      	movs	r2, #127	@ 0x7f
 8014abe:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ac0:	0013      	movs	r3, r2
 8014ac2:	009b      	lsls	r3, r3, #2
 8014ac4:	189b      	adds	r3, r3, r2
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	3351      	adds	r3, #81	@ 0x51
 8014aca:	33ff      	adds	r3, #255	@ 0xff
 8014acc:	687a      	ldr	r2, [r7, #4]
 8014ace:	18d3      	adds	r3, r2, r3
 8014ad0:	3304      	adds	r3, #4
 8014ad2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014ad4:	220e      	movs	r2, #14
 8014ad6:	18bb      	adds	r3, r7, r2
 8014ad8:	781b      	ldrb	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d003      	beq.n	8014ae6 <USBD_StdEPReq+0x2f8>
 8014ade:	18bb      	adds	r3, r7, r2
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	2b80      	cmp	r3, #128	@ 0x80
 8014ae4:	d103      	bne.n	8014aee <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	2200      	movs	r2, #0
 8014aea:	601a      	str	r2, [r3, #0]
 8014aec:	e010      	b.n	8014b10 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8014aee:	230e      	movs	r3, #14
 8014af0:	18fb      	adds	r3, r7, r3
 8014af2:	781a      	ldrb	r2, [r3, #0]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	0011      	movs	r1, r2
 8014af8:	0018      	movs	r0, r3
 8014afa:	f001 f8a8 	bl	8015c4e <USBD_LL_IsStallEP>
 8014afe:	1e03      	subs	r3, r0, #0
 8014b00:	d003      	beq.n	8014b0a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	2201      	movs	r2, #1
 8014b06:	601a      	str	r2, [r3, #0]
 8014b08:	e002      	b.n	8014b10 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014b10:	68b9      	ldr	r1, [r7, #8]
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2202      	movs	r2, #2
 8014b16:	0018      	movs	r0, r3
 8014b18:	f000 fc31 	bl	801537e <USBD_CtlSendData>
              break;
 8014b1c:	e006      	b.n	8014b2c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8014b1e:	683a      	ldr	r2, [r7, #0]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	0011      	movs	r1, r2
 8014b24:	0018      	movs	r0, r3
 8014b26:	f000 fbac 	bl	8015282 <USBD_CtlError>
              break;
 8014b2a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014b2c:	e006      	b.n	8014b3c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8014b2e:	683a      	ldr	r2, [r7, #0]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	0011      	movs	r1, r2
 8014b34:	0018      	movs	r0, r3
 8014b36:	f000 fba4 	bl	8015282 <USBD_CtlError>
          break;
 8014b3a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014b3c:	e006      	b.n	8014b4c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8014b3e:	683a      	ldr	r2, [r7, #0]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	0011      	movs	r1, r2
 8014b44:	0018      	movs	r0, r3
 8014b46:	f000 fb9c 	bl	8015282 <USBD_CtlError>
      break;
 8014b4a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014b4c:	230f      	movs	r3, #15
 8014b4e:	18fb      	adds	r3, r7, r3
 8014b50:	781b      	ldrb	r3, [r3, #0]
}
 8014b52:	0018      	movs	r0, r3
 8014b54:	46bd      	mov	sp, r7
 8014b56:	b004      	add	sp, #16
 8014b58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014b5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b084      	sub	sp, #16
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
 8014b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014b66:	2308      	movs	r3, #8
 8014b68:	18fb      	adds	r3, r7, r3
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014b72:	230b      	movs	r3, #11
 8014b74:	18fb      	adds	r3, r7, r3
 8014b76:	2200      	movs	r2, #0
 8014b78:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	885b      	ldrh	r3, [r3, #2]
 8014b7e:	0a1b      	lsrs	r3, r3, #8
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	2b07      	cmp	r3, #7
 8014b84:	d900      	bls.n	8014b88 <USBD_GetDescriptor+0x2c>
 8014b86:	e159      	b.n	8014e3c <USBD_GetDescriptor+0x2e0>
 8014b88:	009a      	lsls	r2, r3, #2
 8014b8a:	4bcb      	ldr	r3, [pc, #812]	@ (8014eb8 <USBD_GetDescriptor+0x35c>)
 8014b8c:	18d3      	adds	r3, r2, r3
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	23ac      	movs	r3, #172	@ 0xac
 8014b96:	009b      	lsls	r3, r3, #2
 8014b98:	58d3      	ldr	r3, [r2, r3]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	687a      	ldr	r2, [r7, #4]
 8014b9e:	7c12      	ldrb	r2, [r2, #16]
 8014ba0:	2108      	movs	r1, #8
 8014ba2:	1879      	adds	r1, r7, r1
 8014ba4:	0010      	movs	r0, r2
 8014ba6:	4798      	blx	r3
 8014ba8:	0003      	movs	r3, r0
 8014baa:	60fb      	str	r3, [r7, #12]
      break;
 8014bac:	e153      	b.n	8014e56 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	7c1b      	ldrb	r3, [r3, #16]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d10f      	bne.n	8014bd6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	23ad      	movs	r3, #173	@ 0xad
 8014bba:	009b      	lsls	r3, r3, #2
 8014bbc:	58d3      	ldr	r3, [r2, r3]
 8014bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bc0:	2208      	movs	r2, #8
 8014bc2:	18ba      	adds	r2, r7, r2
 8014bc4:	0010      	movs	r0, r2
 8014bc6:	4798      	blx	r3
 8014bc8:	0003      	movs	r3, r0
 8014bca:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	3301      	adds	r3, #1
 8014bd0:	2202      	movs	r2, #2
 8014bd2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014bd4:	e13f      	b.n	8014e56 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014bd6:	687a      	ldr	r2, [r7, #4]
 8014bd8:	23ad      	movs	r3, #173	@ 0xad
 8014bda:	009b      	lsls	r3, r3, #2
 8014bdc:	58d3      	ldr	r3, [r2, r3]
 8014bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014be0:	2208      	movs	r2, #8
 8014be2:	18ba      	adds	r2, r7, r2
 8014be4:	0010      	movs	r0, r2
 8014be6:	4798      	blx	r3
 8014be8:	0003      	movs	r3, r0
 8014bea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	3301      	adds	r3, #1
 8014bf0:	2202      	movs	r2, #2
 8014bf2:	701a      	strb	r2, [r3, #0]
      break;
 8014bf4:	e12f      	b.n	8014e56 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	885b      	ldrh	r3, [r3, #2]
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	2b05      	cmp	r3, #5
 8014bfe:	d900      	bls.n	8014c02 <USBD_GetDescriptor+0xa6>
 8014c00:	e0d0      	b.n	8014da4 <USBD_GetDescriptor+0x248>
 8014c02:	009a      	lsls	r2, r3, #2
 8014c04:	4bad      	ldr	r3, [pc, #692]	@ (8014ebc <USBD_GetDescriptor+0x360>)
 8014c06:	18d3      	adds	r3, r2, r3
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	23ac      	movs	r3, #172	@ 0xac
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	58d3      	ldr	r3, [r2, r3]
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d00d      	beq.n	8014c36 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014c1a:	687a      	ldr	r2, [r7, #4]
 8014c1c:	23ac      	movs	r3, #172	@ 0xac
 8014c1e:	009b      	lsls	r3, r3, #2
 8014c20:	58d3      	ldr	r3, [r2, r3]
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	687a      	ldr	r2, [r7, #4]
 8014c26:	7c12      	ldrb	r2, [r2, #16]
 8014c28:	2108      	movs	r1, #8
 8014c2a:	1879      	adds	r1, r7, r1
 8014c2c:	0010      	movs	r0, r2
 8014c2e:	4798      	blx	r3
 8014c30:	0003      	movs	r3, r0
 8014c32:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c34:	e0c3      	b.n	8014dbe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014c36:	683a      	ldr	r2, [r7, #0]
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	0011      	movs	r1, r2
 8014c3c:	0018      	movs	r0, r3
 8014c3e:	f000 fb20 	bl	8015282 <USBD_CtlError>
            err++;
 8014c42:	210b      	movs	r1, #11
 8014c44:	187b      	adds	r3, r7, r1
 8014c46:	781a      	ldrb	r2, [r3, #0]
 8014c48:	187b      	adds	r3, r7, r1
 8014c4a:	3201      	adds	r2, #1
 8014c4c:	701a      	strb	r2, [r3, #0]
          break;
 8014c4e:	e0b6      	b.n	8014dbe <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014c50:	687a      	ldr	r2, [r7, #4]
 8014c52:	23ac      	movs	r3, #172	@ 0xac
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	58d3      	ldr	r3, [r2, r3]
 8014c58:	689b      	ldr	r3, [r3, #8]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d00d      	beq.n	8014c7a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014c5e:	687a      	ldr	r2, [r7, #4]
 8014c60:	23ac      	movs	r3, #172	@ 0xac
 8014c62:	009b      	lsls	r3, r3, #2
 8014c64:	58d3      	ldr	r3, [r2, r3]
 8014c66:	689b      	ldr	r3, [r3, #8]
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	7c12      	ldrb	r2, [r2, #16]
 8014c6c:	2108      	movs	r1, #8
 8014c6e:	1879      	adds	r1, r7, r1
 8014c70:	0010      	movs	r0, r2
 8014c72:	4798      	blx	r3
 8014c74:	0003      	movs	r3, r0
 8014c76:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c78:	e0a1      	b.n	8014dbe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014c7a:	683a      	ldr	r2, [r7, #0]
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	0011      	movs	r1, r2
 8014c80:	0018      	movs	r0, r3
 8014c82:	f000 fafe 	bl	8015282 <USBD_CtlError>
            err++;
 8014c86:	210b      	movs	r1, #11
 8014c88:	187b      	adds	r3, r7, r1
 8014c8a:	781a      	ldrb	r2, [r3, #0]
 8014c8c:	187b      	adds	r3, r7, r1
 8014c8e:	3201      	adds	r2, #1
 8014c90:	701a      	strb	r2, [r3, #0]
          break;
 8014c92:	e094      	b.n	8014dbe <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014c94:	687a      	ldr	r2, [r7, #4]
 8014c96:	23ac      	movs	r3, #172	@ 0xac
 8014c98:	009b      	lsls	r3, r3, #2
 8014c9a:	58d3      	ldr	r3, [r2, r3]
 8014c9c:	68db      	ldr	r3, [r3, #12]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d00d      	beq.n	8014cbe <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014ca2:	687a      	ldr	r2, [r7, #4]
 8014ca4:	23ac      	movs	r3, #172	@ 0xac
 8014ca6:	009b      	lsls	r3, r3, #2
 8014ca8:	58d3      	ldr	r3, [r2, r3]
 8014caa:	68db      	ldr	r3, [r3, #12]
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	7c12      	ldrb	r2, [r2, #16]
 8014cb0:	2108      	movs	r1, #8
 8014cb2:	1879      	adds	r1, r7, r1
 8014cb4:	0010      	movs	r0, r2
 8014cb6:	4798      	blx	r3
 8014cb8:	0003      	movs	r3, r0
 8014cba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cbc:	e07f      	b.n	8014dbe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014cbe:	683a      	ldr	r2, [r7, #0]
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	0011      	movs	r1, r2
 8014cc4:	0018      	movs	r0, r3
 8014cc6:	f000 fadc 	bl	8015282 <USBD_CtlError>
            err++;
 8014cca:	210b      	movs	r1, #11
 8014ccc:	187b      	adds	r3, r7, r1
 8014cce:	781a      	ldrb	r2, [r3, #0]
 8014cd0:	187b      	adds	r3, r7, r1
 8014cd2:	3201      	adds	r2, #1
 8014cd4:	701a      	strb	r2, [r3, #0]
          break;
 8014cd6:	e072      	b.n	8014dbe <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	23ac      	movs	r3, #172	@ 0xac
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	58d3      	ldr	r3, [r2, r3]
 8014ce0:	691b      	ldr	r3, [r3, #16]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d00d      	beq.n	8014d02 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014ce6:	687a      	ldr	r2, [r7, #4]
 8014ce8:	23ac      	movs	r3, #172	@ 0xac
 8014cea:	009b      	lsls	r3, r3, #2
 8014cec:	58d3      	ldr	r3, [r2, r3]
 8014cee:	691b      	ldr	r3, [r3, #16]
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	7c12      	ldrb	r2, [r2, #16]
 8014cf4:	2108      	movs	r1, #8
 8014cf6:	1879      	adds	r1, r7, r1
 8014cf8:	0010      	movs	r0, r2
 8014cfa:	4798      	blx	r3
 8014cfc:	0003      	movs	r3, r0
 8014cfe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d00:	e05d      	b.n	8014dbe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014d02:	683a      	ldr	r2, [r7, #0]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	0011      	movs	r1, r2
 8014d08:	0018      	movs	r0, r3
 8014d0a:	f000 faba 	bl	8015282 <USBD_CtlError>
            err++;
 8014d0e:	210b      	movs	r1, #11
 8014d10:	187b      	adds	r3, r7, r1
 8014d12:	781a      	ldrb	r2, [r3, #0]
 8014d14:	187b      	adds	r3, r7, r1
 8014d16:	3201      	adds	r2, #1
 8014d18:	701a      	strb	r2, [r3, #0]
          break;
 8014d1a:	e050      	b.n	8014dbe <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014d1c:	687a      	ldr	r2, [r7, #4]
 8014d1e:	23ac      	movs	r3, #172	@ 0xac
 8014d20:	009b      	lsls	r3, r3, #2
 8014d22:	58d3      	ldr	r3, [r2, r3]
 8014d24:	695b      	ldr	r3, [r3, #20]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d00d      	beq.n	8014d46 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	23ac      	movs	r3, #172	@ 0xac
 8014d2e:	009b      	lsls	r3, r3, #2
 8014d30:	58d3      	ldr	r3, [r2, r3]
 8014d32:	695b      	ldr	r3, [r3, #20]
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	7c12      	ldrb	r2, [r2, #16]
 8014d38:	2108      	movs	r1, #8
 8014d3a:	1879      	adds	r1, r7, r1
 8014d3c:	0010      	movs	r0, r2
 8014d3e:	4798      	blx	r3
 8014d40:	0003      	movs	r3, r0
 8014d42:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d44:	e03b      	b.n	8014dbe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014d46:	683a      	ldr	r2, [r7, #0]
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	0011      	movs	r1, r2
 8014d4c:	0018      	movs	r0, r3
 8014d4e:	f000 fa98 	bl	8015282 <USBD_CtlError>
            err++;
 8014d52:	210b      	movs	r1, #11
 8014d54:	187b      	adds	r3, r7, r1
 8014d56:	781a      	ldrb	r2, [r3, #0]
 8014d58:	187b      	adds	r3, r7, r1
 8014d5a:	3201      	adds	r2, #1
 8014d5c:	701a      	strb	r2, [r3, #0]
          break;
 8014d5e:	e02e      	b.n	8014dbe <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014d60:	687a      	ldr	r2, [r7, #4]
 8014d62:	23ac      	movs	r3, #172	@ 0xac
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	58d3      	ldr	r3, [r2, r3]
 8014d68:	699b      	ldr	r3, [r3, #24]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d00d      	beq.n	8014d8a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	23ac      	movs	r3, #172	@ 0xac
 8014d72:	009b      	lsls	r3, r3, #2
 8014d74:	58d3      	ldr	r3, [r2, r3]
 8014d76:	699b      	ldr	r3, [r3, #24]
 8014d78:	687a      	ldr	r2, [r7, #4]
 8014d7a:	7c12      	ldrb	r2, [r2, #16]
 8014d7c:	2108      	movs	r1, #8
 8014d7e:	1879      	adds	r1, r7, r1
 8014d80:	0010      	movs	r0, r2
 8014d82:	4798      	blx	r3
 8014d84:	0003      	movs	r3, r0
 8014d86:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d88:	e019      	b.n	8014dbe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014d8a:	683a      	ldr	r2, [r7, #0]
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	0011      	movs	r1, r2
 8014d90:	0018      	movs	r0, r3
 8014d92:	f000 fa76 	bl	8015282 <USBD_CtlError>
            err++;
 8014d96:	210b      	movs	r1, #11
 8014d98:	187b      	adds	r3, r7, r1
 8014d9a:	781a      	ldrb	r2, [r3, #0]
 8014d9c:	187b      	adds	r3, r7, r1
 8014d9e:	3201      	adds	r2, #1
 8014da0:	701a      	strb	r2, [r3, #0]
          break;
 8014da2:	e00c      	b.n	8014dbe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014da4:	683a      	ldr	r2, [r7, #0]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	0011      	movs	r1, r2
 8014daa:	0018      	movs	r0, r3
 8014dac:	f000 fa69 	bl	8015282 <USBD_CtlError>
          err++;
 8014db0:	210b      	movs	r1, #11
 8014db2:	187b      	adds	r3, r7, r1
 8014db4:	781a      	ldrb	r2, [r3, #0]
 8014db6:	187b      	adds	r3, r7, r1
 8014db8:	3201      	adds	r2, #1
 8014dba:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8014dbc:	e04b      	b.n	8014e56 <USBD_GetDescriptor+0x2fa>
 8014dbe:	e04a      	b.n	8014e56 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	7c1b      	ldrb	r3, [r3, #16]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d10b      	bne.n	8014de0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014dc8:	687a      	ldr	r2, [r7, #4]
 8014dca:	23ad      	movs	r3, #173	@ 0xad
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	58d3      	ldr	r3, [r2, r3]
 8014dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014dd2:	2208      	movs	r2, #8
 8014dd4:	18ba      	adds	r2, r7, r2
 8014dd6:	0010      	movs	r0, r2
 8014dd8:	4798      	blx	r3
 8014dda:	0003      	movs	r3, r0
 8014ddc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014dde:	e03a      	b.n	8014e56 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014de0:	683a      	ldr	r2, [r7, #0]
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	0011      	movs	r1, r2
 8014de6:	0018      	movs	r0, r3
 8014de8:	f000 fa4b 	bl	8015282 <USBD_CtlError>
        err++;
 8014dec:	210b      	movs	r1, #11
 8014dee:	187b      	adds	r3, r7, r1
 8014df0:	781a      	ldrb	r2, [r3, #0]
 8014df2:	187b      	adds	r3, r7, r1
 8014df4:	3201      	adds	r2, #1
 8014df6:	701a      	strb	r2, [r3, #0]
      break;
 8014df8:	e02d      	b.n	8014e56 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	7c1b      	ldrb	r3, [r3, #16]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d10f      	bne.n	8014e22 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	23ad      	movs	r3, #173	@ 0xad
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	58d3      	ldr	r3, [r2, r3]
 8014e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e0c:	2208      	movs	r2, #8
 8014e0e:	18ba      	adds	r2, r7, r2
 8014e10:	0010      	movs	r0, r2
 8014e12:	4798      	blx	r3
 8014e14:	0003      	movs	r3, r0
 8014e16:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	2207      	movs	r2, #7
 8014e1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e20:	e019      	b.n	8014e56 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014e22:	683a      	ldr	r2, [r7, #0]
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	0011      	movs	r1, r2
 8014e28:	0018      	movs	r0, r3
 8014e2a:	f000 fa2a 	bl	8015282 <USBD_CtlError>
        err++;
 8014e2e:	210b      	movs	r1, #11
 8014e30:	187b      	adds	r3, r7, r1
 8014e32:	781a      	ldrb	r2, [r3, #0]
 8014e34:	187b      	adds	r3, r7, r1
 8014e36:	3201      	adds	r2, #1
 8014e38:	701a      	strb	r2, [r3, #0]
      break;
 8014e3a:	e00c      	b.n	8014e56 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8014e3c:	683a      	ldr	r2, [r7, #0]
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	0011      	movs	r1, r2
 8014e42:	0018      	movs	r0, r3
 8014e44:	f000 fa1d 	bl	8015282 <USBD_CtlError>
      err++;
 8014e48:	210b      	movs	r1, #11
 8014e4a:	187b      	adds	r3, r7, r1
 8014e4c:	781a      	ldrb	r2, [r3, #0]
 8014e4e:	187b      	adds	r3, r7, r1
 8014e50:	3201      	adds	r2, #1
 8014e52:	701a      	strb	r2, [r3, #0]
      break;
 8014e54:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8014e56:	230b      	movs	r3, #11
 8014e58:	18fb      	adds	r3, r7, r3
 8014e5a:	781b      	ldrb	r3, [r3, #0]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d127      	bne.n	8014eb0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014e60:	2108      	movs	r1, #8
 8014e62:	187b      	adds	r3, r7, r1
 8014e64:	881b      	ldrh	r3, [r3, #0]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d019      	beq.n	8014e9e <USBD_GetDescriptor+0x342>
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	88db      	ldrh	r3, [r3, #6]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d015      	beq.n	8014e9e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	88da      	ldrh	r2, [r3, #6]
 8014e76:	187b      	adds	r3, r7, r1
 8014e78:	881b      	ldrh	r3, [r3, #0]
 8014e7a:	1c18      	adds	r0, r3, #0
 8014e7c:	1c11      	adds	r1, r2, #0
 8014e7e:	b28a      	uxth	r2, r1
 8014e80:	b283      	uxth	r3, r0
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d900      	bls.n	8014e88 <USBD_GetDescriptor+0x32c>
 8014e86:	1c01      	adds	r1, r0, #0
 8014e88:	b28a      	uxth	r2, r1
 8014e8a:	2108      	movs	r1, #8
 8014e8c:	187b      	adds	r3, r7, r1
 8014e8e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014e90:	187b      	adds	r3, r7, r1
 8014e92:	881a      	ldrh	r2, [r3, #0]
 8014e94:	68f9      	ldr	r1, [r7, #12]
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	0018      	movs	r0, r3
 8014e9a:	f000 fa70 	bl	801537e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	88db      	ldrh	r3, [r3, #6]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d105      	bne.n	8014eb2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	0018      	movs	r0, r3
 8014eaa:	f000 fad2 	bl	8015452 <USBD_CtlSendStatus>
 8014eae:	e000      	b.n	8014eb2 <USBD_GetDescriptor+0x356>
    return;
 8014eb0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	b004      	add	sp, #16
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	0801a4a0 	.word	0x0801a4a0
 8014ebc:	0801a4c0 	.word	0x0801a4c0

08014ec0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014ec0:	b590      	push	{r4, r7, lr}
 8014ec2:	b085      	sub	sp, #20
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
 8014ec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	889b      	ldrh	r3, [r3, #4]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d13d      	bne.n	8014f4e <USBD_SetAddress+0x8e>
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	88db      	ldrh	r3, [r3, #6]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d139      	bne.n	8014f4e <USBD_SetAddress+0x8e>
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	885b      	ldrh	r3, [r3, #2]
 8014ede:	2b7f      	cmp	r3, #127	@ 0x7f
 8014ee0:	d835      	bhi.n	8014f4e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	885b      	ldrh	r3, [r3, #2]
 8014ee6:	b2da      	uxtb	r2, r3
 8014ee8:	230f      	movs	r3, #15
 8014eea:	18fb      	adds	r3, r7, r3
 8014eec:	217f      	movs	r1, #127	@ 0x7f
 8014eee:	400a      	ands	r2, r1
 8014ef0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ef2:	687a      	ldr	r2, [r7, #4]
 8014ef4:	23a7      	movs	r3, #167	@ 0xa7
 8014ef6:	009b      	lsls	r3, r3, #2
 8014ef8:	5cd3      	ldrb	r3, [r2, r3]
 8014efa:	2b03      	cmp	r3, #3
 8014efc:	d106      	bne.n	8014f0c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8014efe:	683a      	ldr	r2, [r7, #0]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	0011      	movs	r1, r2
 8014f04:	0018      	movs	r0, r3
 8014f06:	f000 f9bc 	bl	8015282 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f0a:	e027      	b.n	8014f5c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	240f      	movs	r4, #15
 8014f10:	193a      	adds	r2, r7, r4
 8014f12:	4914      	ldr	r1, [pc, #80]	@ (8014f64 <USBD_SetAddress+0xa4>)
 8014f14:	7812      	ldrb	r2, [r2, #0]
 8014f16:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014f18:	193b      	adds	r3, r7, r4
 8014f1a:	781a      	ldrb	r2, [r3, #0]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	0011      	movs	r1, r2
 8014f20:	0018      	movs	r0, r3
 8014f22:	f000 fec5 	bl	8015cb0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	0018      	movs	r0, r3
 8014f2a:	f000 fa92 	bl	8015452 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014f2e:	193b      	adds	r3, r7, r4
 8014f30:	781b      	ldrb	r3, [r3, #0]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d005      	beq.n	8014f42 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	23a7      	movs	r3, #167	@ 0xa7
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	2102      	movs	r1, #2
 8014f3e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f40:	e00c      	b.n	8014f5c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014f42:	687a      	ldr	r2, [r7, #4]
 8014f44:	23a7      	movs	r3, #167	@ 0xa7
 8014f46:	009b      	lsls	r3, r3, #2
 8014f48:	2101      	movs	r1, #1
 8014f4a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f4c:	e006      	b.n	8014f5c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014f4e:	683a      	ldr	r2, [r7, #0]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	0011      	movs	r1, r2
 8014f54:	0018      	movs	r0, r3
 8014f56:	f000 f994 	bl	8015282 <USBD_CtlError>
  }
}
 8014f5a:	46c0      	nop			@ (mov r8, r8)
 8014f5c:	46c0      	nop			@ (mov r8, r8)
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	b005      	add	sp, #20
 8014f62:	bd90      	pop	{r4, r7, pc}
 8014f64:	0000029e 	.word	0x0000029e

08014f68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	885b      	ldrh	r3, [r3, #2]
 8014f76:	b2da      	uxtb	r2, r3
 8014f78:	4b4c      	ldr	r3, [pc, #304]	@ (80150ac <USBD_SetConfig+0x144>)
 8014f7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80150ac <USBD_SetConfig+0x144>)
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	2b01      	cmp	r3, #1
 8014f82:	d906      	bls.n	8014f92 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8014f84:	683a      	ldr	r2, [r7, #0]
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	0011      	movs	r1, r2
 8014f8a:	0018      	movs	r0, r3
 8014f8c:	f000 f979 	bl	8015282 <USBD_CtlError>
 8014f90:	e088      	b.n	80150a4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	23a7      	movs	r3, #167	@ 0xa7
 8014f96:	009b      	lsls	r3, r3, #2
 8014f98:	5cd3      	ldrb	r3, [r2, r3]
 8014f9a:	2b02      	cmp	r3, #2
 8014f9c:	d002      	beq.n	8014fa4 <USBD_SetConfig+0x3c>
 8014f9e:	2b03      	cmp	r3, #3
 8014fa0:	d029      	beq.n	8014ff6 <USBD_SetConfig+0x8e>
 8014fa2:	e071      	b.n	8015088 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8014fa4:	4b41      	ldr	r3, [pc, #260]	@ (80150ac <USBD_SetConfig+0x144>)
 8014fa6:	781b      	ldrb	r3, [r3, #0]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d01f      	beq.n	8014fec <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8014fac:	4b3f      	ldr	r3, [pc, #252]	@ (80150ac <USBD_SetConfig+0x144>)
 8014fae:	781b      	ldrb	r3, [r3, #0]
 8014fb0:	001a      	movs	r2, r3
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014fb6:	687a      	ldr	r2, [r7, #4]
 8014fb8:	23a7      	movs	r3, #167	@ 0xa7
 8014fba:	009b      	lsls	r3, r3, #2
 8014fbc:	2103      	movs	r1, #3
 8014fbe:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80150ac <USBD_SetConfig+0x144>)
 8014fc2:	781a      	ldrb	r2, [r3, #0]
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	0011      	movs	r1, r2
 8014fc8:	0018      	movs	r0, r3
 8014fca:	f7ff f8c5 	bl	8014158 <USBD_SetClassConfig>
 8014fce:	0003      	movs	r3, r0
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	d106      	bne.n	8014fe2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8014fd4:	683a      	ldr	r2, [r7, #0]
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	0011      	movs	r1, r2
 8014fda:	0018      	movs	r0, r3
 8014fdc:	f000 f951 	bl	8015282 <USBD_CtlError>
            return;
 8014fe0:	e060      	b.n	80150a4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	0018      	movs	r0, r3
 8014fe6:	f000 fa34 	bl	8015452 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014fea:	e05b      	b.n	80150a4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	0018      	movs	r0, r3
 8014ff0:	f000 fa2f 	bl	8015452 <USBD_CtlSendStatus>
        break;
 8014ff4:	e056      	b.n	80150a4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80150ac <USBD_SetConfig+0x144>)
 8014ff8:	781b      	ldrb	r3, [r3, #0]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d115      	bne.n	801502a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	23a7      	movs	r3, #167	@ 0xa7
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	2102      	movs	r1, #2
 8015006:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8015008:	4b28      	ldr	r3, [pc, #160]	@ (80150ac <USBD_SetConfig+0x144>)
 801500a:	781b      	ldrb	r3, [r3, #0]
 801500c:	001a      	movs	r2, r3
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8015012:	4b26      	ldr	r3, [pc, #152]	@ (80150ac <USBD_SetConfig+0x144>)
 8015014:	781a      	ldrb	r2, [r3, #0]
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	0011      	movs	r1, r2
 801501a:	0018      	movs	r0, r3
 801501c:	f7ff f8c3 	bl	80141a6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	0018      	movs	r0, r3
 8015024:	f000 fa15 	bl	8015452 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8015028:	e03c      	b.n	80150a4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801502a:	4b20      	ldr	r3, [pc, #128]	@ (80150ac <USBD_SetConfig+0x144>)
 801502c:	781b      	ldrb	r3, [r3, #0]
 801502e:	001a      	movs	r2, r3
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	429a      	cmp	r2, r3
 8015036:	d022      	beq.n	801507e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	b2da      	uxtb	r2, r3
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	0011      	movs	r1, r2
 8015042:	0018      	movs	r0, r3
 8015044:	f7ff f8af 	bl	80141a6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8015048:	4b18      	ldr	r3, [pc, #96]	@ (80150ac <USBD_SetConfig+0x144>)
 801504a:	781b      	ldrb	r3, [r3, #0]
 801504c:	001a      	movs	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8015052:	4b16      	ldr	r3, [pc, #88]	@ (80150ac <USBD_SetConfig+0x144>)
 8015054:	781a      	ldrb	r2, [r3, #0]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	0011      	movs	r1, r2
 801505a:	0018      	movs	r0, r3
 801505c:	f7ff f87c 	bl	8014158 <USBD_SetClassConfig>
 8015060:	0003      	movs	r3, r0
 8015062:	2b02      	cmp	r3, #2
 8015064:	d106      	bne.n	8015074 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8015066:	683a      	ldr	r2, [r7, #0]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	0011      	movs	r1, r2
 801506c:	0018      	movs	r0, r3
 801506e:	f000 f908 	bl	8015282 <USBD_CtlError>
            return;
 8015072:	e017      	b.n	80150a4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	0018      	movs	r0, r3
 8015078:	f000 f9eb 	bl	8015452 <USBD_CtlSendStatus>
        break;
 801507c:	e012      	b.n	80150a4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	0018      	movs	r0, r3
 8015082:	f000 f9e6 	bl	8015452 <USBD_CtlSendStatus>
        break;
 8015086:	e00d      	b.n	80150a4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8015088:	683a      	ldr	r2, [r7, #0]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	0011      	movs	r1, r2
 801508e:	0018      	movs	r0, r3
 8015090:	f000 f8f7 	bl	8015282 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8015094:	4b05      	ldr	r3, [pc, #20]	@ (80150ac <USBD_SetConfig+0x144>)
 8015096:	781a      	ldrb	r2, [r3, #0]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	0011      	movs	r1, r2
 801509c:	0018      	movs	r0, r3
 801509e:	f7ff f882 	bl	80141a6 <USBD_ClrClassConfig>
        break;
 80150a2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80150a4:	46bd      	mov	sp, r7
 80150a6:	b002      	add	sp, #8
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	46c0      	nop			@ (mov r8, r8)
 80150ac:	200030b8 	.word	0x200030b8

080150b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	88db      	ldrh	r3, [r3, #6]
 80150be:	2b01      	cmp	r3, #1
 80150c0:	d006      	beq.n	80150d0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80150c2:	683a      	ldr	r2, [r7, #0]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	0011      	movs	r1, r2
 80150c8:	0018      	movs	r0, r3
 80150ca:	f000 f8da 	bl	8015282 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80150ce:	e026      	b.n	801511e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80150d0:	687a      	ldr	r2, [r7, #4]
 80150d2:	23a7      	movs	r3, #167	@ 0xa7
 80150d4:	009b      	lsls	r3, r3, #2
 80150d6:	5cd3      	ldrb	r3, [r2, r3]
 80150d8:	2b02      	cmp	r3, #2
 80150da:	dc02      	bgt.n	80150e2 <USBD_GetConfig+0x32>
 80150dc:	2b00      	cmp	r3, #0
 80150de:	dc03      	bgt.n	80150e8 <USBD_GetConfig+0x38>
 80150e0:	e016      	b.n	8015110 <USBD_GetConfig+0x60>
 80150e2:	2b03      	cmp	r3, #3
 80150e4:	d00c      	beq.n	8015100 <USBD_GetConfig+0x50>
 80150e6:	e013      	b.n	8015110 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2200      	movs	r2, #0
 80150ec:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	3308      	adds	r3, #8
 80150f2:	0019      	movs	r1, r3
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2201      	movs	r2, #1
 80150f8:	0018      	movs	r0, r3
 80150fa:	f000 f940 	bl	801537e <USBD_CtlSendData>
        break;
 80150fe:	e00e      	b.n	801511e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	1d19      	adds	r1, r3, #4
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2201      	movs	r2, #1
 8015108:	0018      	movs	r0, r3
 801510a:	f000 f938 	bl	801537e <USBD_CtlSendData>
        break;
 801510e:	e006      	b.n	801511e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8015110:	683a      	ldr	r2, [r7, #0]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	0011      	movs	r1, r2
 8015116:	0018      	movs	r0, r3
 8015118:	f000 f8b3 	bl	8015282 <USBD_CtlError>
        break;
 801511c:	46c0      	nop			@ (mov r8, r8)
}
 801511e:	46c0      	nop			@ (mov r8, r8)
 8015120:	46bd      	mov	sp, r7
 8015122:	b002      	add	sp, #8
 8015124:	bd80      	pop	{r7, pc}

08015126 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b082      	sub	sp, #8
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
 801512e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015130:	687a      	ldr	r2, [r7, #4]
 8015132:	23a7      	movs	r3, #167	@ 0xa7
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	5cd3      	ldrb	r3, [r2, r3]
 8015138:	3b01      	subs	r3, #1
 801513a:	2b02      	cmp	r3, #2
 801513c:	d822      	bhi.n	8015184 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801513e:	683b      	ldr	r3, [r7, #0]
 8015140:	88db      	ldrh	r3, [r3, #6]
 8015142:	2b02      	cmp	r3, #2
 8015144:	d006      	beq.n	8015154 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8015146:	683a      	ldr	r2, [r7, #0]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	0011      	movs	r1, r2
 801514c:	0018      	movs	r0, r3
 801514e:	f000 f898 	bl	8015282 <USBD_CtlError>
        break;
 8015152:	e01e      	b.n	8015192 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2201      	movs	r2, #1
 8015158:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	23a9      	movs	r3, #169	@ 0xa9
 801515e:	009b      	lsls	r3, r3, #2
 8015160:	58d3      	ldr	r3, [r2, r3]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d005      	beq.n	8015172 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	68db      	ldr	r3, [r3, #12]
 801516a:	2202      	movs	r2, #2
 801516c:	431a      	orrs	r2, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	330c      	adds	r3, #12
 8015176:	0019      	movs	r1, r3
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2202      	movs	r2, #2
 801517c:	0018      	movs	r0, r3
 801517e:	f000 f8fe 	bl	801537e <USBD_CtlSendData>
      break;
 8015182:	e006      	b.n	8015192 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8015184:	683a      	ldr	r2, [r7, #0]
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	0011      	movs	r1, r2
 801518a:	0018      	movs	r0, r3
 801518c:	f000 f879 	bl	8015282 <USBD_CtlError>
      break;
 8015190:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015192:	46c0      	nop			@ (mov r8, r8)
 8015194:	46bd      	mov	sp, r7
 8015196:	b002      	add	sp, #8
 8015198:	bd80      	pop	{r7, pc}

0801519a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801519a:	b580      	push	{r7, lr}
 801519c:	b082      	sub	sp, #8
 801519e:	af00      	add	r7, sp, #0
 80151a0:	6078      	str	r0, [r7, #4]
 80151a2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	885b      	ldrh	r3, [r3, #2]
 80151a8:	2b01      	cmp	r3, #1
 80151aa:	d108      	bne.n	80151be <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	23a9      	movs	r3, #169	@ 0xa9
 80151b0:	009b      	lsls	r3, r3, #2
 80151b2:	2101      	movs	r1, #1
 80151b4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	0018      	movs	r0, r3
 80151ba:	f000 f94a 	bl	8015452 <USBD_CtlSendStatus>
  }
}
 80151be:	46c0      	nop			@ (mov r8, r8)
 80151c0:	46bd      	mov	sp, r7
 80151c2:	b002      	add	sp, #8
 80151c4:	bd80      	pop	{r7, pc}

080151c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80151c6:	b580      	push	{r7, lr}
 80151c8:	b082      	sub	sp, #8
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	6078      	str	r0, [r7, #4]
 80151ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80151d0:	687a      	ldr	r2, [r7, #4]
 80151d2:	23a7      	movs	r3, #167	@ 0xa7
 80151d4:	009b      	lsls	r3, r3, #2
 80151d6:	5cd3      	ldrb	r3, [r2, r3]
 80151d8:	3b01      	subs	r3, #1
 80151da:	2b02      	cmp	r3, #2
 80151dc:	d80d      	bhi.n	80151fa <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	885b      	ldrh	r3, [r3, #2]
 80151e2:	2b01      	cmp	r3, #1
 80151e4:	d110      	bne.n	8015208 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80151e6:	687a      	ldr	r2, [r7, #4]
 80151e8:	23a9      	movs	r3, #169	@ 0xa9
 80151ea:	009b      	lsls	r3, r3, #2
 80151ec:	2100      	movs	r1, #0
 80151ee:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	0018      	movs	r0, r3
 80151f4:	f000 f92d 	bl	8015452 <USBD_CtlSendStatus>
      }
      break;
 80151f8:	e006      	b.n	8015208 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80151fa:	683a      	ldr	r2, [r7, #0]
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	0011      	movs	r1, r2
 8015200:	0018      	movs	r0, r3
 8015202:	f000 f83e 	bl	8015282 <USBD_CtlError>
      break;
 8015206:	e000      	b.n	801520a <USBD_ClrFeature+0x44>
      break;
 8015208:	46c0      	nop			@ (mov r8, r8)
  }
}
 801520a:	46c0      	nop			@ (mov r8, r8)
 801520c:	46bd      	mov	sp, r7
 801520e:	b002      	add	sp, #8
 8015210:	bd80      	pop	{r7, pc}

08015212 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015212:	b580      	push	{r7, lr}
 8015214:	b082      	sub	sp, #8
 8015216:	af00      	add	r7, sp, #0
 8015218:	6078      	str	r0, [r7, #4]
 801521a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	781a      	ldrb	r2, [r3, #0]
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	785a      	ldrb	r2, [r3, #1]
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	3302      	adds	r3, #2
 8015230:	781b      	ldrb	r3, [r3, #0]
 8015232:	001a      	movs	r2, r3
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	3303      	adds	r3, #3
 8015238:	781b      	ldrb	r3, [r3, #0]
 801523a:	021b      	lsls	r3, r3, #8
 801523c:	b29b      	uxth	r3, r3
 801523e:	18d3      	adds	r3, r2, r3
 8015240:	b29a      	uxth	r2, r3
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	3304      	adds	r3, #4
 801524a:	781b      	ldrb	r3, [r3, #0]
 801524c:	001a      	movs	r2, r3
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	3305      	adds	r3, #5
 8015252:	781b      	ldrb	r3, [r3, #0]
 8015254:	021b      	lsls	r3, r3, #8
 8015256:	b29b      	uxth	r3, r3
 8015258:	18d3      	adds	r3, r2, r3
 801525a:	b29a      	uxth	r2, r3
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	3306      	adds	r3, #6
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	001a      	movs	r2, r3
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	3307      	adds	r3, #7
 801526c:	781b      	ldrb	r3, [r3, #0]
 801526e:	021b      	lsls	r3, r3, #8
 8015270:	b29b      	uxth	r3, r3
 8015272:	18d3      	adds	r3, r2, r3
 8015274:	b29a      	uxth	r2, r3
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	80da      	strh	r2, [r3, #6]

}
 801527a:	46c0      	nop			@ (mov r8, r8)
 801527c:	46bd      	mov	sp, r7
 801527e:	b002      	add	sp, #8
 8015280:	bd80      	pop	{r7, pc}

08015282 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8015282:	b580      	push	{r7, lr}
 8015284:	b082      	sub	sp, #8
 8015286:	af00      	add	r7, sp, #0
 8015288:	6078      	str	r0, [r7, #4]
 801528a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2180      	movs	r1, #128	@ 0x80
 8015290:	0018      	movs	r0, r3
 8015292:	f000 fc86 	bl	8015ba2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	2100      	movs	r1, #0
 801529a:	0018      	movs	r0, r3
 801529c:	f000 fc81 	bl	8015ba2 <USBD_LL_StallEP>
}
 80152a0:	46c0      	nop			@ (mov r8, r8)
 80152a2:	46bd      	mov	sp, r7
 80152a4:	b002      	add	sp, #8
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80152a8:	b590      	push	{r4, r7, lr}
 80152aa:	b087      	sub	sp, #28
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	60f8      	str	r0, [r7, #12]
 80152b0:	60b9      	str	r1, [r7, #8]
 80152b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80152b4:	2417      	movs	r4, #23
 80152b6:	193b      	adds	r3, r7, r4
 80152b8:	2200      	movs	r2, #0
 80152ba:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d03c      	beq.n	801533c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	0018      	movs	r0, r3
 80152c6:	f000 f83d 	bl	8015344 <USBD_GetLen>
 80152ca:	0003      	movs	r3, r0
 80152cc:	3301      	adds	r3, #1
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	18db      	adds	r3, r3, r3
 80152d2:	b29a      	uxth	r2, r3
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80152d8:	193b      	adds	r3, r7, r4
 80152da:	781b      	ldrb	r3, [r3, #0]
 80152dc:	193a      	adds	r2, r7, r4
 80152de:	1c59      	adds	r1, r3, #1
 80152e0:	7011      	strb	r1, [r2, #0]
 80152e2:	001a      	movs	r2, r3
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	189b      	adds	r3, r3, r2
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	7812      	ldrb	r2, [r2, #0]
 80152ec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80152ee:	193b      	adds	r3, r7, r4
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	193a      	adds	r2, r7, r4
 80152f4:	1c59      	adds	r1, r3, #1
 80152f6:	7011      	strb	r1, [r2, #0]
 80152f8:	001a      	movs	r2, r3
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	189b      	adds	r3, r3, r2
 80152fe:	2203      	movs	r2, #3
 8015300:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8015302:	e017      	b.n	8015334 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	1c5a      	adds	r2, r3, #1
 8015308:	60fa      	str	r2, [r7, #12]
 801530a:	2417      	movs	r4, #23
 801530c:	193a      	adds	r2, r7, r4
 801530e:	7812      	ldrb	r2, [r2, #0]
 8015310:	1939      	adds	r1, r7, r4
 8015312:	1c50      	adds	r0, r2, #1
 8015314:	7008      	strb	r0, [r1, #0]
 8015316:	0011      	movs	r1, r2
 8015318:	68ba      	ldr	r2, [r7, #8]
 801531a:	1852      	adds	r2, r2, r1
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8015320:	193b      	adds	r3, r7, r4
 8015322:	781b      	ldrb	r3, [r3, #0]
 8015324:	193a      	adds	r2, r7, r4
 8015326:	1c59      	adds	r1, r3, #1
 8015328:	7011      	strb	r1, [r2, #0]
 801532a:	001a      	movs	r2, r3
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	189b      	adds	r3, r3, r2
 8015330:	2200      	movs	r2, #0
 8015332:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d1e3      	bne.n	8015304 <USBD_GetString+0x5c>
    }
  }
}
 801533c:	46c0      	nop			@ (mov r8, r8)
 801533e:	46bd      	mov	sp, r7
 8015340:	b007      	add	sp, #28
 8015342:	bd90      	pop	{r4, r7, pc}

08015344 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b084      	sub	sp, #16
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801534c:	230f      	movs	r3, #15
 801534e:	18fb      	adds	r3, r7, r3
 8015350:	2200      	movs	r2, #0
 8015352:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8015354:	e008      	b.n	8015368 <USBD_GetLen+0x24>
  {
    len++;
 8015356:	210f      	movs	r1, #15
 8015358:	187b      	adds	r3, r7, r1
 801535a:	781a      	ldrb	r2, [r3, #0]
 801535c:	187b      	adds	r3, r7, r1
 801535e:	3201      	adds	r2, #1
 8015360:	701a      	strb	r2, [r3, #0]
    buf++;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	3301      	adds	r3, #1
 8015366:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	781b      	ldrb	r3, [r3, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d1f2      	bne.n	8015356 <USBD_GetLen+0x12>
  }

  return len;
 8015370:	230f      	movs	r3, #15
 8015372:	18fb      	adds	r3, r7, r3
 8015374:	781b      	ldrb	r3, [r3, #0]
}
 8015376:	0018      	movs	r0, r3
 8015378:	46bd      	mov	sp, r7
 801537a:	b004      	add	sp, #16
 801537c:	bd80      	pop	{r7, pc}

0801537e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801537e:	b580      	push	{r7, lr}
 8015380:	b084      	sub	sp, #16
 8015382:	af00      	add	r7, sp, #0
 8015384:	60f8      	str	r0, [r7, #12]
 8015386:	60b9      	str	r1, [r7, #8]
 8015388:	1dbb      	adds	r3, r7, #6
 801538a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801538c:	68fa      	ldr	r2, [r7, #12]
 801538e:	23a5      	movs	r3, #165	@ 0xa5
 8015390:	009b      	lsls	r3, r3, #2
 8015392:	2102      	movs	r1, #2
 8015394:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8015396:	1dbb      	adds	r3, r7, #6
 8015398:	881a      	ldrh	r2, [r3, #0]
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801539e:	1dbb      	adds	r3, r7, #6
 80153a0:	881a      	ldrh	r2, [r3, #0]
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80153a6:	1dbb      	adds	r3, r7, #6
 80153a8:	881b      	ldrh	r3, [r3, #0]
 80153aa:	68ba      	ldr	r2, [r7, #8]
 80153ac:	68f8      	ldr	r0, [r7, #12]
 80153ae:	2100      	movs	r1, #0
 80153b0:	f000 fca9 	bl	8015d06 <USBD_LL_Transmit>

  return USBD_OK;
 80153b4:	2300      	movs	r3, #0
}
 80153b6:	0018      	movs	r0, r3
 80153b8:	46bd      	mov	sp, r7
 80153ba:	b004      	add	sp, #16
 80153bc:	bd80      	pop	{r7, pc}

080153be <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b084      	sub	sp, #16
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	60f8      	str	r0, [r7, #12]
 80153c6:	60b9      	str	r1, [r7, #8]
 80153c8:	1dbb      	adds	r3, r7, #6
 80153ca:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80153cc:	1dbb      	adds	r3, r7, #6
 80153ce:	881b      	ldrh	r3, [r3, #0]
 80153d0:	68ba      	ldr	r2, [r7, #8]
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	2100      	movs	r1, #0
 80153d6:	f000 fc96 	bl	8015d06 <USBD_LL_Transmit>

  return USBD_OK;
 80153da:	2300      	movs	r3, #0
}
 80153dc:	0018      	movs	r0, r3
 80153de:	46bd      	mov	sp, r7
 80153e0:	b004      	add	sp, #16
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b084      	sub	sp, #16
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	60f8      	str	r0, [r7, #12]
 80153ec:	60b9      	str	r1, [r7, #8]
 80153ee:	1dbb      	adds	r3, r7, #6
 80153f0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80153f2:	68fa      	ldr	r2, [r7, #12]
 80153f4:	23a5      	movs	r3, #165	@ 0xa5
 80153f6:	009b      	lsls	r3, r3, #2
 80153f8:	2103      	movs	r1, #3
 80153fa:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80153fc:	1dbb      	adds	r3, r7, #6
 80153fe:	8819      	ldrh	r1, [r3, #0]
 8015400:	68fa      	ldr	r2, [r7, #12]
 8015402:	23ae      	movs	r3, #174	@ 0xae
 8015404:	005b      	lsls	r3, r3, #1
 8015406:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8015408:	1dbb      	adds	r3, r7, #6
 801540a:	8819      	ldrh	r1, [r3, #0]
 801540c:	68fa      	ldr	r2, [r7, #12]
 801540e:	23b0      	movs	r3, #176	@ 0xb0
 8015410:	005b      	lsls	r3, r3, #1
 8015412:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015414:	1dbb      	adds	r3, r7, #6
 8015416:	881b      	ldrh	r3, [r3, #0]
 8015418:	68ba      	ldr	r2, [r7, #8]
 801541a:	68f8      	ldr	r0, [r7, #12]
 801541c:	2100      	movs	r1, #0
 801541e:	f000 fca9 	bl	8015d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015422:	2300      	movs	r3, #0
}
 8015424:	0018      	movs	r0, r3
 8015426:	46bd      	mov	sp, r7
 8015428:	b004      	add	sp, #16
 801542a:	bd80      	pop	{r7, pc}

0801542c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b084      	sub	sp, #16
 8015430:	af00      	add	r7, sp, #0
 8015432:	60f8      	str	r0, [r7, #12]
 8015434:	60b9      	str	r1, [r7, #8]
 8015436:	1dbb      	adds	r3, r7, #6
 8015438:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801543a:	1dbb      	adds	r3, r7, #6
 801543c:	881b      	ldrh	r3, [r3, #0]
 801543e:	68ba      	ldr	r2, [r7, #8]
 8015440:	68f8      	ldr	r0, [r7, #12]
 8015442:	2100      	movs	r1, #0
 8015444:	f000 fc96 	bl	8015d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015448:	2300      	movs	r3, #0
}
 801544a:	0018      	movs	r0, r3
 801544c:	46bd      	mov	sp, r7
 801544e:	b004      	add	sp, #16
 8015450:	bd80      	pop	{r7, pc}

08015452 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015452:	b580      	push	{r7, lr}
 8015454:	b082      	sub	sp, #8
 8015456:	af00      	add	r7, sp, #0
 8015458:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801545a:	687a      	ldr	r2, [r7, #4]
 801545c:	23a5      	movs	r3, #165	@ 0xa5
 801545e:	009b      	lsls	r3, r3, #2
 8015460:	2104      	movs	r1, #4
 8015462:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	2300      	movs	r3, #0
 8015468:	2200      	movs	r2, #0
 801546a:	2100      	movs	r1, #0
 801546c:	f000 fc4b 	bl	8015d06 <USBD_LL_Transmit>

  return USBD_OK;
 8015470:	2300      	movs	r3, #0
}
 8015472:	0018      	movs	r0, r3
 8015474:	46bd      	mov	sp, r7
 8015476:	b002      	add	sp, #8
 8015478:	bd80      	pop	{r7, pc}

0801547a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801547a:	b580      	push	{r7, lr}
 801547c:	b082      	sub	sp, #8
 801547e:	af00      	add	r7, sp, #0
 8015480:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015482:	687a      	ldr	r2, [r7, #4]
 8015484:	23a5      	movs	r3, #165	@ 0xa5
 8015486:	009b      	lsls	r3, r3, #2
 8015488:	2105      	movs	r1, #5
 801548a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	2300      	movs	r3, #0
 8015490:	2200      	movs	r2, #0
 8015492:	2100      	movs	r1, #0
 8015494:	f000 fc6e 	bl	8015d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015498:	2300      	movs	r3, #0
}
 801549a:	0018      	movs	r0, r3
 801549c:	46bd      	mov	sp, r7
 801549e:	b002      	add	sp, #8
 80154a0:	bd80      	pop	{r7, pc}
	...

080154a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80154a8:	4914      	ldr	r1, [pc, #80]	@ (80154fc <MX_USB_DEVICE_Init+0x58>)
 80154aa:	4b15      	ldr	r3, [pc, #84]	@ (8015500 <MX_USB_DEVICE_Init+0x5c>)
 80154ac:	2200      	movs	r2, #0
 80154ae:	0018      	movs	r0, r3
 80154b0:	f7fe fdeb 	bl	801408a <USBD_Init>
 80154b4:	1e03      	subs	r3, r0, #0
 80154b6:	d001      	beq.n	80154bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80154b8:	f7f0 fb42 	bl	8005b40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80154bc:	4a11      	ldr	r2, [pc, #68]	@ (8015504 <MX_USB_DEVICE_Init+0x60>)
 80154be:	4b10      	ldr	r3, [pc, #64]	@ (8015500 <MX_USB_DEVICE_Init+0x5c>)
 80154c0:	0011      	movs	r1, r2
 80154c2:	0018      	movs	r0, r3
 80154c4:	f7fe fe12 	bl	80140ec <USBD_RegisterClass>
 80154c8:	1e03      	subs	r3, r0, #0
 80154ca:	d001      	beq.n	80154d0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80154cc:	f7f0 fb38 	bl	8005b40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80154d0:	4a0d      	ldr	r2, [pc, #52]	@ (8015508 <MX_USB_DEVICE_Init+0x64>)
 80154d2:	4b0b      	ldr	r3, [pc, #44]	@ (8015500 <MX_USB_DEVICE_Init+0x5c>)
 80154d4:	0011      	movs	r1, r2
 80154d6:	0018      	movs	r0, r3
 80154d8:	f7fe fd5e 	bl	8013f98 <USBD_CDC_RegisterInterface>
 80154dc:	1e03      	subs	r3, r0, #0
 80154de:	d001      	beq.n	80154e4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80154e0:	f7f0 fb2e 	bl	8005b40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80154e4:	4b06      	ldr	r3, [pc, #24]	@ (8015500 <MX_USB_DEVICE_Init+0x5c>)
 80154e6:	0018      	movs	r0, r3
 80154e8:	f7fe fe20 	bl	801412c <USBD_Start>
 80154ec:	1e03      	subs	r3, r0, #0
 80154ee:	d001      	beq.n	80154f4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80154f0:	f7f0 fb26 	bl	8005b40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80154f4:	46c0      	nop			@ (mov r8, r8)
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	46c0      	nop			@ (mov r8, r8)
 80154fc:	20000278 	.word	0x20000278
 8015500:	200030bc 	.word	0x200030bc
 8015504:	20000164 	.word	0x20000164
 8015508:	20000268 	.word	0x20000268

0801550c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015510:	4907      	ldr	r1, [pc, #28]	@ (8015530 <CDC_Init_FS+0x24>)
 8015512:	4b08      	ldr	r3, [pc, #32]	@ (8015534 <CDC_Init_FS+0x28>)
 8015514:	2200      	movs	r2, #0
 8015516:	0018      	movs	r0, r3
 8015518:	f7fe fd59 	bl	8013fce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801551c:	4a06      	ldr	r2, [pc, #24]	@ (8015538 <CDC_Init_FS+0x2c>)
 801551e:	4b05      	ldr	r3, [pc, #20]	@ (8015534 <CDC_Init_FS+0x28>)
 8015520:	0011      	movs	r1, r2
 8015522:	0018      	movs	r0, r3
 8015524:	f7fe fd6f 	bl	8014006 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015528:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801552a:	0018      	movs	r0, r3
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}
 8015530:	20003780 	.word	0x20003780
 8015534:	200030bc 	.word	0x200030bc
 8015538:	20003380 	.word	0x20003380

0801553c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015540:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015542:	0018      	movs	r0, r3
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}

08015548 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b082      	sub	sp, #8
 801554c:	af00      	add	r7, sp, #0
 801554e:	6039      	str	r1, [r7, #0]
 8015550:	0011      	movs	r1, r2
 8015552:	1dfb      	adds	r3, r7, #7
 8015554:	1c02      	adds	r2, r0, #0
 8015556:	701a      	strb	r2, [r3, #0]
 8015558:	1d3b      	adds	r3, r7, #4
 801555a:	1c0a      	adds	r2, r1, #0
 801555c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801555e:	1dfb      	adds	r3, r7, #7
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	2b23      	cmp	r3, #35	@ 0x23
 8015564:	d804      	bhi.n	8015570 <CDC_Control_FS+0x28>
 8015566:	009a      	lsls	r2, r3, #2
 8015568:	4b04      	ldr	r3, [pc, #16]	@ (801557c <CDC_Control_FS+0x34>)
 801556a:	18d3      	adds	r3, r2, r3
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015570:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8015572:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015574:	0018      	movs	r0, r3
 8015576:	46bd      	mov	sp, r7
 8015578:	b002      	add	sp, #8
 801557a:	bd80      	pop	{r7, pc}
 801557c:	0801a4d8 	.word	0x0801a4d8

08015580 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801558a:	687a      	ldr	r2, [r7, #4]
 801558c:	4b06      	ldr	r3, [pc, #24]	@ (80155a8 <CDC_Receive_FS+0x28>)
 801558e:	0011      	movs	r1, r2
 8015590:	0018      	movs	r0, r3
 8015592:	f7fe fd38 	bl	8014006 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015596:	4b04      	ldr	r3, [pc, #16]	@ (80155a8 <CDC_Receive_FS+0x28>)
 8015598:	0018      	movs	r0, r3
 801559a:	f7fe fd48 	bl	801402e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801559e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80155a0:	0018      	movs	r0, r3
 80155a2:	46bd      	mov	sp, r7
 80155a4:	b002      	add	sp, #8
 80155a6:	bd80      	pop	{r7, pc}
 80155a8:	200030bc 	.word	0x200030bc

080155ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	0002      	movs	r2, r0
 80155b4:	6039      	str	r1, [r7, #0]
 80155b6:	1dfb      	adds	r3, r7, #7
 80155b8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	2212      	movs	r2, #18
 80155be:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80155c0:	4b02      	ldr	r3, [pc, #8]	@ (80155cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80155c2:	0018      	movs	r0, r3
 80155c4:	46bd      	mov	sp, r7
 80155c6:	b002      	add	sp, #8
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	46c0      	nop			@ (mov r8, r8)
 80155cc:	20000294 	.word	0x20000294

080155d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	0002      	movs	r2, r0
 80155d8:	6039      	str	r1, [r7, #0]
 80155da:	1dfb      	adds	r3, r7, #7
 80155dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	2204      	movs	r2, #4
 80155e2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80155e4:	4b02      	ldr	r3, [pc, #8]	@ (80155f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80155e6:	0018      	movs	r0, r3
 80155e8:	46bd      	mov	sp, r7
 80155ea:	b002      	add	sp, #8
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	46c0      	nop			@ (mov r8, r8)
 80155f0:	200002a8 	.word	0x200002a8

080155f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b082      	sub	sp, #8
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	0002      	movs	r2, r0
 80155fc:	6039      	str	r1, [r7, #0]
 80155fe:	1dfb      	adds	r3, r7, #7
 8015600:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015602:	1dfb      	adds	r3, r7, #7
 8015604:	781b      	ldrb	r3, [r3, #0]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d106      	bne.n	8015618 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801560a:	683a      	ldr	r2, [r7, #0]
 801560c:	4908      	ldr	r1, [pc, #32]	@ (8015630 <USBD_FS_ProductStrDescriptor+0x3c>)
 801560e:	4b09      	ldr	r3, [pc, #36]	@ (8015634 <USBD_FS_ProductStrDescriptor+0x40>)
 8015610:	0018      	movs	r0, r3
 8015612:	f7ff fe49 	bl	80152a8 <USBD_GetString>
 8015616:	e005      	b.n	8015624 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015618:	683a      	ldr	r2, [r7, #0]
 801561a:	4905      	ldr	r1, [pc, #20]	@ (8015630 <USBD_FS_ProductStrDescriptor+0x3c>)
 801561c:	4b05      	ldr	r3, [pc, #20]	@ (8015634 <USBD_FS_ProductStrDescriptor+0x40>)
 801561e:	0018      	movs	r0, r3
 8015620:	f7ff fe42 	bl	80152a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015624:	4b02      	ldr	r3, [pc, #8]	@ (8015630 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8015626:	0018      	movs	r0, r3
 8015628:	46bd      	mov	sp, r7
 801562a:	b002      	add	sp, #8
 801562c:	bd80      	pop	{r7, pc}
 801562e:	46c0      	nop			@ (mov r8, r8)
 8015630:	20003b80 	.word	0x20003b80
 8015634:	0801a268 	.word	0x0801a268

08015638 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b082      	sub	sp, #8
 801563c:	af00      	add	r7, sp, #0
 801563e:	0002      	movs	r2, r0
 8015640:	6039      	str	r1, [r7, #0]
 8015642:	1dfb      	adds	r3, r7, #7
 8015644:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015646:	683a      	ldr	r2, [r7, #0]
 8015648:	4904      	ldr	r1, [pc, #16]	@ (801565c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801564a:	4b05      	ldr	r3, [pc, #20]	@ (8015660 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801564c:	0018      	movs	r0, r3
 801564e:	f7ff fe2b 	bl	80152a8 <USBD_GetString>
  return USBD_StrDesc;
 8015652:	4b02      	ldr	r3, [pc, #8]	@ (801565c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8015654:	0018      	movs	r0, r3
 8015656:	46bd      	mov	sp, r7
 8015658:	b002      	add	sp, #8
 801565a:	bd80      	pop	{r7, pc}
 801565c:	20003b80 	.word	0x20003b80
 8015660:	0801a280 	.word	0x0801a280

08015664 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b082      	sub	sp, #8
 8015668:	af00      	add	r7, sp, #0
 801566a:	0002      	movs	r2, r0
 801566c:	6039      	str	r1, [r7, #0]
 801566e:	1dfb      	adds	r3, r7, #7
 8015670:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	221a      	movs	r2, #26
 8015676:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015678:	f000 f84c 	bl	8015714 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801567c:	4b02      	ldr	r3, [pc, #8]	@ (8015688 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801567e:	0018      	movs	r0, r3
 8015680:	46bd      	mov	sp, r7
 8015682:	b002      	add	sp, #8
 8015684:	bd80      	pop	{r7, pc}
 8015686:	46c0      	nop			@ (mov r8, r8)
 8015688:	200002ac 	.word	0x200002ac

0801568c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b082      	sub	sp, #8
 8015690:	af00      	add	r7, sp, #0
 8015692:	0002      	movs	r2, r0
 8015694:	6039      	str	r1, [r7, #0]
 8015696:	1dfb      	adds	r3, r7, #7
 8015698:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801569a:	1dfb      	adds	r3, r7, #7
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d106      	bne.n	80156b0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80156a2:	683a      	ldr	r2, [r7, #0]
 80156a4:	4908      	ldr	r1, [pc, #32]	@ (80156c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80156a6:	4b09      	ldr	r3, [pc, #36]	@ (80156cc <USBD_FS_ConfigStrDescriptor+0x40>)
 80156a8:	0018      	movs	r0, r3
 80156aa:	f7ff fdfd 	bl	80152a8 <USBD_GetString>
 80156ae:	e005      	b.n	80156bc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80156b0:	683a      	ldr	r2, [r7, #0]
 80156b2:	4905      	ldr	r1, [pc, #20]	@ (80156c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80156b4:	4b05      	ldr	r3, [pc, #20]	@ (80156cc <USBD_FS_ConfigStrDescriptor+0x40>)
 80156b6:	0018      	movs	r0, r3
 80156b8:	f7ff fdf6 	bl	80152a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80156bc:	4b02      	ldr	r3, [pc, #8]	@ (80156c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80156be:	0018      	movs	r0, r3
 80156c0:	46bd      	mov	sp, r7
 80156c2:	b002      	add	sp, #8
 80156c4:	bd80      	pop	{r7, pc}
 80156c6:	46c0      	nop			@ (mov r8, r8)
 80156c8:	20003b80 	.word	0x20003b80
 80156cc:	0801a294 	.word	0x0801a294

080156d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	0002      	movs	r2, r0
 80156d8:	6039      	str	r1, [r7, #0]
 80156da:	1dfb      	adds	r3, r7, #7
 80156dc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80156de:	1dfb      	adds	r3, r7, #7
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d106      	bne.n	80156f4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80156e6:	683a      	ldr	r2, [r7, #0]
 80156e8:	4908      	ldr	r1, [pc, #32]	@ (801570c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80156ea:	4b09      	ldr	r3, [pc, #36]	@ (8015710 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80156ec:	0018      	movs	r0, r3
 80156ee:	f7ff fddb 	bl	80152a8 <USBD_GetString>
 80156f2:	e005      	b.n	8015700 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80156f4:	683a      	ldr	r2, [r7, #0]
 80156f6:	4905      	ldr	r1, [pc, #20]	@ (801570c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80156f8:	4b05      	ldr	r3, [pc, #20]	@ (8015710 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80156fa:	0018      	movs	r0, r3
 80156fc:	f7ff fdd4 	bl	80152a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015700:	4b02      	ldr	r3, [pc, #8]	@ (801570c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8015702:	0018      	movs	r0, r3
 8015704:	46bd      	mov	sp, r7
 8015706:	b002      	add	sp, #8
 8015708:	bd80      	pop	{r7, pc}
 801570a:	46c0      	nop			@ (mov r8, r8)
 801570c:	20003b80 	.word	0x20003b80
 8015710:	0801a2a0 	.word	0x0801a2a0

08015714 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b084      	sub	sp, #16
 8015718:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801571a:	4b10      	ldr	r3, [pc, #64]	@ (801575c <Get_SerialNum+0x48>)
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015720:	4b0f      	ldr	r3, [pc, #60]	@ (8015760 <Get_SerialNum+0x4c>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015726:	4b0f      	ldr	r3, [pc, #60]	@ (8015764 <Get_SerialNum+0x50>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801572c:	68fa      	ldr	r2, [r7, #12]
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	18d3      	adds	r3, r2, r3
 8015732:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d00b      	beq.n	8015752 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801573a:	490b      	ldr	r1, [pc, #44]	@ (8015768 <Get_SerialNum+0x54>)
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	2208      	movs	r2, #8
 8015740:	0018      	movs	r0, r3
 8015742:	f000 f815 	bl	8015770 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015746:	4909      	ldr	r1, [pc, #36]	@ (801576c <Get_SerialNum+0x58>)
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	2204      	movs	r2, #4
 801574c:	0018      	movs	r0, r3
 801574e:	f000 f80f 	bl	8015770 <IntToUnicode>
  }
}
 8015752:	46c0      	nop			@ (mov r8, r8)
 8015754:	46bd      	mov	sp, r7
 8015756:	b004      	add	sp, #16
 8015758:	bd80      	pop	{r7, pc}
 801575a:	46c0      	nop			@ (mov r8, r8)
 801575c:	1ff80050 	.word	0x1ff80050
 8015760:	1ff80054 	.word	0x1ff80054
 8015764:	1ff80058 	.word	0x1ff80058
 8015768:	200002ae 	.word	0x200002ae
 801576c:	200002be 	.word	0x200002be

08015770 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b086      	sub	sp, #24
 8015774:	af00      	add	r7, sp, #0
 8015776:	60f8      	str	r0, [r7, #12]
 8015778:	60b9      	str	r1, [r7, #8]
 801577a:	1dfb      	adds	r3, r7, #7
 801577c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801577e:	2117      	movs	r1, #23
 8015780:	187b      	adds	r3, r7, r1
 8015782:	2200      	movs	r2, #0
 8015784:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8015786:	187b      	adds	r3, r7, r1
 8015788:	2200      	movs	r2, #0
 801578a:	701a      	strb	r2, [r3, #0]
 801578c:	e02f      	b.n	80157ee <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	0f1b      	lsrs	r3, r3, #28
 8015792:	2b09      	cmp	r3, #9
 8015794:	d80d      	bhi.n	80157b2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	0f1b      	lsrs	r3, r3, #28
 801579a:	b2da      	uxtb	r2, r3
 801579c:	2317      	movs	r3, #23
 801579e:	18fb      	adds	r3, r7, r3
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	005b      	lsls	r3, r3, #1
 80157a4:	0019      	movs	r1, r3
 80157a6:	68bb      	ldr	r3, [r7, #8]
 80157a8:	185b      	adds	r3, r3, r1
 80157aa:	3230      	adds	r2, #48	@ 0x30
 80157ac:	b2d2      	uxtb	r2, r2
 80157ae:	701a      	strb	r2, [r3, #0]
 80157b0:	e00c      	b.n	80157cc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	0f1b      	lsrs	r3, r3, #28
 80157b6:	b2da      	uxtb	r2, r3
 80157b8:	2317      	movs	r3, #23
 80157ba:	18fb      	adds	r3, r7, r3
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	005b      	lsls	r3, r3, #1
 80157c0:	0019      	movs	r1, r3
 80157c2:	68bb      	ldr	r3, [r7, #8]
 80157c4:	185b      	adds	r3, r3, r1
 80157c6:	3237      	adds	r2, #55	@ 0x37
 80157c8:	b2d2      	uxtb	r2, r2
 80157ca:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	011b      	lsls	r3, r3, #4
 80157d0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80157d2:	2117      	movs	r1, #23
 80157d4:	187b      	adds	r3, r7, r1
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	005b      	lsls	r3, r3, #1
 80157da:	3301      	adds	r3, #1
 80157dc:	68ba      	ldr	r2, [r7, #8]
 80157de:	18d3      	adds	r3, r2, r3
 80157e0:	2200      	movs	r2, #0
 80157e2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80157e4:	187b      	adds	r3, r7, r1
 80157e6:	781a      	ldrb	r2, [r3, #0]
 80157e8:	187b      	adds	r3, r7, r1
 80157ea:	3201      	adds	r2, #1
 80157ec:	701a      	strb	r2, [r3, #0]
 80157ee:	2317      	movs	r3, #23
 80157f0:	18fa      	adds	r2, r7, r3
 80157f2:	1dfb      	adds	r3, r7, #7
 80157f4:	7812      	ldrb	r2, [r2, #0]
 80157f6:	781b      	ldrb	r3, [r3, #0]
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d3c8      	bcc.n	801578e <IntToUnicode+0x1e>
  }
}
 80157fc:	46c0      	nop			@ (mov r8, r8)
 80157fe:	46c0      	nop			@ (mov r8, r8)
 8015800:	46bd      	mov	sp, r7
 8015802:	b006      	add	sp, #24
 8015804:	bd80      	pop	{r7, pc}
	...

08015808 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	4a0a      	ldr	r2, [pc, #40]	@ (8015840 <HAL_PCD_MspInit+0x38>)
 8015816:	4293      	cmp	r3, r2
 8015818:	d10e      	bne.n	8015838 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801581a:	4b0a      	ldr	r3, [pc, #40]	@ (8015844 <HAL_PCD_MspInit+0x3c>)
 801581c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801581e:	4b09      	ldr	r3, [pc, #36]	@ (8015844 <HAL_PCD_MspInit+0x3c>)
 8015820:	2180      	movs	r1, #128	@ 0x80
 8015822:	0409      	lsls	r1, r1, #16
 8015824:	430a      	orrs	r2, r1
 8015826:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8015828:	2200      	movs	r2, #0
 801582a:	2100      	movs	r1, #0
 801582c:	201f      	movs	r0, #31
 801582e:	f7f4 f9c9 	bl	8009bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8015832:	201f      	movs	r0, #31
 8015834:	f7f4 f9db 	bl	8009bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015838:	46c0      	nop			@ (mov r8, r8)
 801583a:	46bd      	mov	sp, r7
 801583c:	b002      	add	sp, #8
 801583e:	bd80      	pop	{r7, pc}
 8015840:	40005c00 	.word	0x40005c00
 8015844:	40021000 	.word	0x40021000

08015848 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015850:	687a      	ldr	r2, [r7, #4]
 8015852:	23bc      	movs	r3, #188	@ 0xbc
 8015854:	009b      	lsls	r3, r3, #2
 8015856:	58d2      	ldr	r2, [r2, r3]
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	21ac      	movs	r1, #172	@ 0xac
 801585c:	0089      	lsls	r1, r1, #2
 801585e:	468c      	mov	ip, r1
 8015860:	4463      	add	r3, ip
 8015862:	0019      	movs	r1, r3
 8015864:	0010      	movs	r0, r2
 8015866:	f7fe fcb5 	bl	80141d4 <USBD_LL_SetupStage>
}
 801586a:	46c0      	nop			@ (mov r8, r8)
 801586c:	46bd      	mov	sp, r7
 801586e:	b002      	add	sp, #8
 8015870:	bd80      	pop	{r7, pc}

08015872 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015872:	b590      	push	{r4, r7, lr}
 8015874:	b083      	sub	sp, #12
 8015876:	af00      	add	r7, sp, #0
 8015878:	6078      	str	r0, [r7, #4]
 801587a:	000a      	movs	r2, r1
 801587c:	1cfb      	adds	r3, r7, #3
 801587e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015880:	687a      	ldr	r2, [r7, #4]
 8015882:	23bc      	movs	r3, #188	@ 0xbc
 8015884:	009b      	lsls	r3, r3, #2
 8015886:	58d4      	ldr	r4, [r2, r3]
 8015888:	1cfb      	adds	r3, r7, #3
 801588a:	781a      	ldrb	r2, [r3, #0]
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	23be      	movs	r3, #190	@ 0xbe
 8015890:	0059      	lsls	r1, r3, #1
 8015892:	0013      	movs	r3, r2
 8015894:	009b      	lsls	r3, r3, #2
 8015896:	189b      	adds	r3, r3, r2
 8015898:	00db      	lsls	r3, r3, #3
 801589a:	18c3      	adds	r3, r0, r3
 801589c:	185b      	adds	r3, r3, r1
 801589e:	681a      	ldr	r2, [r3, #0]
 80158a0:	1cfb      	adds	r3, r7, #3
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	0019      	movs	r1, r3
 80158a6:	0020      	movs	r0, r4
 80158a8:	f7fe fcf2 	bl	8014290 <USBD_LL_DataOutStage>
}
 80158ac:	46c0      	nop			@ (mov r8, r8)
 80158ae:	46bd      	mov	sp, r7
 80158b0:	b003      	add	sp, #12
 80158b2:	bd90      	pop	{r4, r7, pc}

080158b4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	000a      	movs	r2, r1
 80158be:	1cfb      	adds	r3, r7, #3
 80158c0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	23bc      	movs	r3, #188	@ 0xbc
 80158c6:	009b      	lsls	r3, r3, #2
 80158c8:	58d0      	ldr	r0, [r2, r3]
 80158ca:	1cfb      	adds	r3, r7, #3
 80158cc:	781a      	ldrb	r2, [r3, #0]
 80158ce:	6879      	ldr	r1, [r7, #4]
 80158d0:	0013      	movs	r3, r2
 80158d2:	009b      	lsls	r3, r3, #2
 80158d4:	189b      	adds	r3, r3, r2
 80158d6:	00db      	lsls	r3, r3, #3
 80158d8:	18cb      	adds	r3, r1, r3
 80158da:	333c      	adds	r3, #60	@ 0x3c
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	1cfb      	adds	r3, r7, #3
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	0019      	movs	r1, r3
 80158e4:	f7fe fd56 	bl	8014394 <USBD_LL_DataInStage>
}
 80158e8:	46c0      	nop			@ (mov r8, r8)
 80158ea:	46bd      	mov	sp, r7
 80158ec:	b002      	add	sp, #8
 80158ee:	bd80      	pop	{r7, pc}

080158f0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b082      	sub	sp, #8
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80158f8:	687a      	ldr	r2, [r7, #4]
 80158fa:	23bc      	movs	r3, #188	@ 0xbc
 80158fc:	009b      	lsls	r3, r3, #2
 80158fe:	58d3      	ldr	r3, [r2, r3]
 8015900:	0018      	movs	r0, r3
 8015902:	f7fe fe8d 	bl	8014620 <USBD_LL_SOF>
}
 8015906:	46c0      	nop			@ (mov r8, r8)
 8015908:	46bd      	mov	sp, r7
 801590a:	b002      	add	sp, #8
 801590c:	bd80      	pop	{r7, pc}

0801590e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801590e:	b580      	push	{r7, lr}
 8015910:	b084      	sub	sp, #16
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015916:	230f      	movs	r3, #15
 8015918:	18fb      	adds	r3, r7, r3
 801591a:	2201      	movs	r2, #1
 801591c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	689b      	ldr	r3, [r3, #8]
 8015922:	2b02      	cmp	r3, #2
 8015924:	d001      	beq.n	801592a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8015926:	f7f0 f90b 	bl	8005b40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	23bc      	movs	r3, #188	@ 0xbc
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	58d2      	ldr	r2, [r2, r3]
 8015932:	230f      	movs	r3, #15
 8015934:	18fb      	adds	r3, r7, r3
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	0019      	movs	r1, r3
 801593a:	0010      	movs	r0, r2
 801593c:	f7fe fe2f 	bl	801459e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	23bc      	movs	r3, #188	@ 0xbc
 8015944:	009b      	lsls	r3, r3, #2
 8015946:	58d3      	ldr	r3, [r2, r3]
 8015948:	0018      	movs	r0, r3
 801594a:	f7fe fde0 	bl	801450e <USBD_LL_Reset>
}
 801594e:	46c0      	nop			@ (mov r8, r8)
 8015950:	46bd      	mov	sp, r7
 8015952:	b004      	add	sp, #16
 8015954:	bd80      	pop	{r7, pc}
	...

08015958 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b082      	sub	sp, #8
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015960:	687a      	ldr	r2, [r7, #4]
 8015962:	23bc      	movs	r3, #188	@ 0xbc
 8015964:	009b      	lsls	r3, r3, #2
 8015966:	58d3      	ldr	r3, [r2, r3]
 8015968:	0018      	movs	r0, r3
 801596a:	f7fe fe29 	bl	80145c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	699b      	ldr	r3, [r3, #24]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d005      	beq.n	8015982 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015976:	4b05      	ldr	r3, [pc, #20]	@ (801598c <HAL_PCD_SuspendCallback+0x34>)
 8015978:	691a      	ldr	r2, [r3, #16]
 801597a:	4b04      	ldr	r3, [pc, #16]	@ (801598c <HAL_PCD_SuspendCallback+0x34>)
 801597c:	2106      	movs	r1, #6
 801597e:	430a      	orrs	r2, r1
 8015980:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8015982:	46c0      	nop			@ (mov r8, r8)
 8015984:	46bd      	mov	sp, r7
 8015986:	b002      	add	sp, #8
 8015988:	bd80      	pop	{r7, pc}
 801598a:	46c0      	nop			@ (mov r8, r8)
 801598c:	e000ed00 	.word	0xe000ed00

08015990 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b082      	sub	sp, #8
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	699b      	ldr	r3, [r3, #24]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d007      	beq.n	80159b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80159a0:	4b09      	ldr	r3, [pc, #36]	@ (80159c8 <HAL_PCD_ResumeCallback+0x38>)
 80159a2:	691a      	ldr	r2, [r3, #16]
 80159a4:	4b08      	ldr	r3, [pc, #32]	@ (80159c8 <HAL_PCD_ResumeCallback+0x38>)
 80159a6:	2106      	movs	r1, #6
 80159a8:	438a      	bics	r2, r1
 80159aa:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80159ac:	f000 fa44 	bl	8015e38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	23bc      	movs	r3, #188	@ 0xbc
 80159b4:	009b      	lsls	r3, r3, #2
 80159b6:	58d3      	ldr	r3, [r2, r3]
 80159b8:	0018      	movs	r0, r3
 80159ba:	f7fe fe19 	bl	80145f0 <USBD_LL_Resume>
}
 80159be:	46c0      	nop			@ (mov r8, r8)
 80159c0:	46bd      	mov	sp, r7
 80159c2:	b002      	add	sp, #8
 80159c4:	bd80      	pop	{r7, pc}
 80159c6:	46c0      	nop			@ (mov r8, r8)
 80159c8:	e000ed00 	.word	0xe000ed00

080159cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80159d4:	4a2d      	ldr	r2, [pc, #180]	@ (8015a8c <USBD_LL_Init+0xc0>)
 80159d6:	23bc      	movs	r3, #188	@ 0xbc
 80159d8:	009b      	lsls	r3, r3, #2
 80159da:	6879      	ldr	r1, [r7, #4]
 80159dc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80159de:	687a      	ldr	r2, [r7, #4]
 80159e0:	23b0      	movs	r3, #176	@ 0xb0
 80159e2:	009b      	lsls	r3, r3, #2
 80159e4:	4929      	ldr	r1, [pc, #164]	@ (8015a8c <USBD_LL_Init+0xc0>)
 80159e6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80159e8:	4b28      	ldr	r3, [pc, #160]	@ (8015a8c <USBD_LL_Init+0xc0>)
 80159ea:	4a29      	ldr	r2, [pc, #164]	@ (8015a90 <USBD_LL_Init+0xc4>)
 80159ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80159ee:	4b27      	ldr	r3, [pc, #156]	@ (8015a8c <USBD_LL_Init+0xc0>)
 80159f0:	2208      	movs	r2, #8
 80159f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80159f4:	4b25      	ldr	r3, [pc, #148]	@ (8015a8c <USBD_LL_Init+0xc0>)
 80159f6:	2202      	movs	r2, #2
 80159f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80159fa:	4b24      	ldr	r3, [pc, #144]	@ (8015a8c <USBD_LL_Init+0xc0>)
 80159fc:	2202      	movs	r2, #2
 80159fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015a00:	4b22      	ldr	r3, [pc, #136]	@ (8015a8c <USBD_LL_Init+0xc0>)
 8015a02:	2200      	movs	r2, #0
 8015a04:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015a06:	4b21      	ldr	r3, [pc, #132]	@ (8015a8c <USBD_LL_Init+0xc0>)
 8015a08:	2200      	movs	r2, #0
 8015a0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8015a8c <USBD_LL_Init+0xc0>)
 8015a0e:	2200      	movs	r2, #0
 8015a10:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015a12:	4b1e      	ldr	r3, [pc, #120]	@ (8015a8c <USBD_LL_Init+0xc0>)
 8015a14:	0018      	movs	r0, r3
 8015a16:	f7f7 f98f 	bl	800cd38 <HAL_PCD_Init>
 8015a1a:	1e03      	subs	r3, r0, #0
 8015a1c:	d001      	beq.n	8015a22 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8015a1e:	f7f0 f88f 	bl	8005b40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	23b0      	movs	r3, #176	@ 0xb0
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	58d0      	ldr	r0, [r2, r3]
 8015a2a:	2318      	movs	r3, #24
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	2100      	movs	r1, #0
 8015a30:	f7f8 ff50 	bl	800e8d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015a34:	687a      	ldr	r2, [r7, #4]
 8015a36:	23b0      	movs	r3, #176	@ 0xb0
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	58d0      	ldr	r0, [r2, r3]
 8015a3c:	2358      	movs	r3, #88	@ 0x58
 8015a3e:	2200      	movs	r2, #0
 8015a40:	2180      	movs	r1, #128	@ 0x80
 8015a42:	f7f8 ff47 	bl	800e8d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015a46:	687a      	ldr	r2, [r7, #4]
 8015a48:	23b0      	movs	r3, #176	@ 0xb0
 8015a4a:	009b      	lsls	r3, r3, #2
 8015a4c:	58d0      	ldr	r0, [r2, r3]
 8015a4e:	23c0      	movs	r3, #192	@ 0xc0
 8015a50:	2200      	movs	r2, #0
 8015a52:	2181      	movs	r1, #129	@ 0x81
 8015a54:	f7f8 ff3e 	bl	800e8d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	23b0      	movs	r3, #176	@ 0xb0
 8015a5c:	009b      	lsls	r3, r3, #2
 8015a5e:	58d0      	ldr	r0, [r2, r3]
 8015a60:	2388      	movs	r3, #136	@ 0x88
 8015a62:	005b      	lsls	r3, r3, #1
 8015a64:	2200      	movs	r2, #0
 8015a66:	2101      	movs	r1, #1
 8015a68:	f7f8 ff34 	bl	800e8d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015a6c:	687a      	ldr	r2, [r7, #4]
 8015a6e:	23b0      	movs	r3, #176	@ 0xb0
 8015a70:	009b      	lsls	r3, r3, #2
 8015a72:	58d0      	ldr	r0, [r2, r3]
 8015a74:	2380      	movs	r3, #128	@ 0x80
 8015a76:	005b      	lsls	r3, r3, #1
 8015a78:	2200      	movs	r2, #0
 8015a7a:	2182      	movs	r1, #130	@ 0x82
 8015a7c:	f7f8 ff2a 	bl	800e8d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015a80:	2300      	movs	r3, #0
}
 8015a82:	0018      	movs	r0, r3
 8015a84:	46bd      	mov	sp, r7
 8015a86:	b002      	add	sp, #8
 8015a88:	bd80      	pop	{r7, pc}
 8015a8a:	46c0      	nop			@ (mov r8, r8)
 8015a8c:	20003d80 	.word	0x20003d80
 8015a90:	40005c00 	.word	0x40005c00

08015a94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a96:	b085      	sub	sp, #20
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a9c:	210f      	movs	r1, #15
 8015a9e:	187b      	adds	r3, r7, r1
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aa4:	260e      	movs	r6, #14
 8015aa6:	19bb      	adds	r3, r7, r6
 8015aa8:	2200      	movs	r2, #0
 8015aaa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015aac:	687a      	ldr	r2, [r7, #4]
 8015aae:	23b0      	movs	r3, #176	@ 0xb0
 8015ab0:	009b      	lsls	r3, r3, #2
 8015ab2:	58d3      	ldr	r3, [r2, r3]
 8015ab4:	000d      	movs	r5, r1
 8015ab6:	187c      	adds	r4, r7, r1
 8015ab8:	0018      	movs	r0, r3
 8015aba:	f7f7 fa3d 	bl	800cf38 <HAL_PCD_Start>
 8015abe:	0003      	movs	r3, r0
 8015ac0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ac2:	19bc      	adds	r4, r7, r6
 8015ac4:	197b      	adds	r3, r7, r5
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	0018      	movs	r0, r3
 8015aca:	f000 f9bc 	bl	8015e46 <USBD_Get_USB_Status>
 8015ace:	0003      	movs	r3, r0
 8015ad0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015ad2:	19bb      	adds	r3, r7, r6
 8015ad4:	781b      	ldrb	r3, [r3, #0]
}
 8015ad6:	0018      	movs	r0, r3
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	b005      	add	sp, #20
 8015adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ade <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ae0:	b085      	sub	sp, #20
 8015ae2:	af00      	add	r7, sp, #0
 8015ae4:	6078      	str	r0, [r7, #4]
 8015ae6:	000c      	movs	r4, r1
 8015ae8:	0010      	movs	r0, r2
 8015aea:	0019      	movs	r1, r3
 8015aec:	1cfb      	adds	r3, r7, #3
 8015aee:	1c22      	adds	r2, r4, #0
 8015af0:	701a      	strb	r2, [r3, #0]
 8015af2:	1cbb      	adds	r3, r7, #2
 8015af4:	1c02      	adds	r2, r0, #0
 8015af6:	701a      	strb	r2, [r3, #0]
 8015af8:	003b      	movs	r3, r7
 8015afa:	1c0a      	adds	r2, r1, #0
 8015afc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015afe:	260f      	movs	r6, #15
 8015b00:	19bb      	adds	r3, r7, r6
 8015b02:	2200      	movs	r2, #0
 8015b04:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b06:	250e      	movs	r5, #14
 8015b08:	197b      	adds	r3, r7, r5
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	23b0      	movs	r3, #176	@ 0xb0
 8015b12:	009b      	lsls	r3, r3, #2
 8015b14:	58d0      	ldr	r0, [r2, r3]
 8015b16:	19bc      	adds	r4, r7, r6
 8015b18:	1cbb      	adds	r3, r7, #2
 8015b1a:	781d      	ldrb	r5, [r3, #0]
 8015b1c:	003b      	movs	r3, r7
 8015b1e:	881a      	ldrh	r2, [r3, #0]
 8015b20:	1cfb      	adds	r3, r7, #3
 8015b22:	7819      	ldrb	r1, [r3, #0]
 8015b24:	002b      	movs	r3, r5
 8015b26:	f7f7 fb9c 	bl	800d262 <HAL_PCD_EP_Open>
 8015b2a:	0003      	movs	r3, r0
 8015b2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b2e:	250e      	movs	r5, #14
 8015b30:	197c      	adds	r4, r7, r5
 8015b32:	19bb      	adds	r3, r7, r6
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	0018      	movs	r0, r3
 8015b38:	f000 f985 	bl	8015e46 <USBD_Get_USB_Status>
 8015b3c:	0003      	movs	r3, r0
 8015b3e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b40:	197b      	adds	r3, r7, r5
 8015b42:	781b      	ldrb	r3, [r3, #0]
}
 8015b44:	0018      	movs	r0, r3
 8015b46:	46bd      	mov	sp, r7
 8015b48:	b005      	add	sp, #20
 8015b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b4c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b4e:	b085      	sub	sp, #20
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	000a      	movs	r2, r1
 8015b56:	1cfb      	adds	r3, r7, #3
 8015b58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b5a:	210f      	movs	r1, #15
 8015b5c:	187b      	adds	r3, r7, r1
 8015b5e:	2200      	movs	r2, #0
 8015b60:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b62:	260e      	movs	r6, #14
 8015b64:	19bb      	adds	r3, r7, r6
 8015b66:	2200      	movs	r2, #0
 8015b68:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015b6a:	687a      	ldr	r2, [r7, #4]
 8015b6c:	23b0      	movs	r3, #176	@ 0xb0
 8015b6e:	009b      	lsls	r3, r3, #2
 8015b70:	58d2      	ldr	r2, [r2, r3]
 8015b72:	000d      	movs	r5, r1
 8015b74:	187c      	adds	r4, r7, r1
 8015b76:	1cfb      	adds	r3, r7, #3
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	0019      	movs	r1, r3
 8015b7c:	0010      	movs	r0, r2
 8015b7e:	f7f7 fbdf 	bl	800d340 <HAL_PCD_EP_Close>
 8015b82:	0003      	movs	r3, r0
 8015b84:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b86:	19bc      	adds	r4, r7, r6
 8015b88:	197b      	adds	r3, r7, r5
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	0018      	movs	r0, r3
 8015b8e:	f000 f95a 	bl	8015e46 <USBD_Get_USB_Status>
 8015b92:	0003      	movs	r3, r0
 8015b94:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b96:	19bb      	adds	r3, r7, r6
 8015b98:	781b      	ldrb	r3, [r3, #0]
}
 8015b9a:	0018      	movs	r0, r3
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	b005      	add	sp, #20
 8015ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ba2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ba4:	b085      	sub	sp, #20
 8015ba6:	af00      	add	r7, sp, #0
 8015ba8:	6078      	str	r0, [r7, #4]
 8015baa:	000a      	movs	r2, r1
 8015bac:	1cfb      	adds	r3, r7, #3
 8015bae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bb0:	210f      	movs	r1, #15
 8015bb2:	187b      	adds	r3, r7, r1
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bb8:	260e      	movs	r6, #14
 8015bba:	19bb      	adds	r3, r7, r6
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015bc0:	687a      	ldr	r2, [r7, #4]
 8015bc2:	23b0      	movs	r3, #176	@ 0xb0
 8015bc4:	009b      	lsls	r3, r3, #2
 8015bc6:	58d2      	ldr	r2, [r2, r3]
 8015bc8:	000d      	movs	r5, r1
 8015bca:	187c      	adds	r4, r7, r1
 8015bcc:	1cfb      	adds	r3, r7, #3
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	0019      	movs	r1, r3
 8015bd2:	0010      	movs	r0, r2
 8015bd4:	f7f7 fc91 	bl	800d4fa <HAL_PCD_EP_SetStall>
 8015bd8:	0003      	movs	r3, r0
 8015bda:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bdc:	19bc      	adds	r4, r7, r6
 8015bde:	197b      	adds	r3, r7, r5
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	0018      	movs	r0, r3
 8015be4:	f000 f92f 	bl	8015e46 <USBD_Get_USB_Status>
 8015be8:	0003      	movs	r3, r0
 8015bea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015bec:	19bb      	adds	r3, r7, r6
 8015bee:	781b      	ldrb	r3, [r3, #0]
}
 8015bf0:	0018      	movs	r0, r3
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	b005      	add	sp, #20
 8015bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015bf8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bfa:	b085      	sub	sp, #20
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	000a      	movs	r2, r1
 8015c02:	1cfb      	adds	r3, r7, #3
 8015c04:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c06:	210f      	movs	r1, #15
 8015c08:	187b      	adds	r3, r7, r1
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c0e:	260e      	movs	r6, #14
 8015c10:	19bb      	adds	r3, r7, r6
 8015c12:	2200      	movs	r2, #0
 8015c14:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015c16:	687a      	ldr	r2, [r7, #4]
 8015c18:	23b0      	movs	r3, #176	@ 0xb0
 8015c1a:	009b      	lsls	r3, r3, #2
 8015c1c:	58d2      	ldr	r2, [r2, r3]
 8015c1e:	000d      	movs	r5, r1
 8015c20:	187c      	adds	r4, r7, r1
 8015c22:	1cfb      	adds	r3, r7, #3
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	0019      	movs	r1, r3
 8015c28:	0010      	movs	r0, r2
 8015c2a:	f7f7 fcc2 	bl	800d5b2 <HAL_PCD_EP_ClrStall>
 8015c2e:	0003      	movs	r3, r0
 8015c30:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c32:	19bc      	adds	r4, r7, r6
 8015c34:	197b      	adds	r3, r7, r5
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	0018      	movs	r0, r3
 8015c3a:	f000 f904 	bl	8015e46 <USBD_Get_USB_Status>
 8015c3e:	0003      	movs	r3, r0
 8015c40:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015c42:	19bb      	adds	r3, r7, r6
 8015c44:	781b      	ldrb	r3, [r3, #0]
}
 8015c46:	0018      	movs	r0, r3
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	b005      	add	sp, #20
 8015c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c4e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c4e:	b580      	push	{r7, lr}
 8015c50:	b084      	sub	sp, #16
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]
 8015c56:	000a      	movs	r2, r1
 8015c58:	1cfb      	adds	r3, r7, #3
 8015c5a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015c5c:	687a      	ldr	r2, [r7, #4]
 8015c5e:	23b0      	movs	r3, #176	@ 0xb0
 8015c60:	009b      	lsls	r3, r3, #2
 8015c62:	58d3      	ldr	r3, [r2, r3]
 8015c64:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015c66:	1cfb      	adds	r3, r7, #3
 8015c68:	781b      	ldrb	r3, [r3, #0]
 8015c6a:	b25b      	sxtb	r3, r3
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	da0d      	bge.n	8015c8c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015c70:	1cfb      	adds	r3, r7, #3
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	227f      	movs	r2, #127	@ 0x7f
 8015c76:	4013      	ands	r3, r2
 8015c78:	68f9      	ldr	r1, [r7, #12]
 8015c7a:	1c5a      	adds	r2, r3, #1
 8015c7c:	0013      	movs	r3, r2
 8015c7e:	009b      	lsls	r3, r3, #2
 8015c80:	189b      	adds	r3, r3, r2
 8015c82:	00db      	lsls	r3, r3, #3
 8015c84:	18cb      	adds	r3, r1, r3
 8015c86:	3302      	adds	r3, #2
 8015c88:	781b      	ldrb	r3, [r3, #0]
 8015c8a:	e00d      	b.n	8015ca8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015c8c:	1cfb      	adds	r3, r7, #3
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	227f      	movs	r2, #127	@ 0x7f
 8015c92:	401a      	ands	r2, r3
 8015c94:	68f8      	ldr	r0, [r7, #12]
 8015c96:	23b5      	movs	r3, #181	@ 0xb5
 8015c98:	0059      	lsls	r1, r3, #1
 8015c9a:	0013      	movs	r3, r2
 8015c9c:	009b      	lsls	r3, r3, #2
 8015c9e:	189b      	adds	r3, r3, r2
 8015ca0:	00db      	lsls	r3, r3, #3
 8015ca2:	18c3      	adds	r3, r0, r3
 8015ca4:	185b      	adds	r3, r3, r1
 8015ca6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015ca8:	0018      	movs	r0, r3
 8015caa:	46bd      	mov	sp, r7
 8015cac:	b004      	add	sp, #16
 8015cae:	bd80      	pop	{r7, pc}

08015cb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	000a      	movs	r2, r1
 8015cba:	1cfb      	adds	r3, r7, #3
 8015cbc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cbe:	210f      	movs	r1, #15
 8015cc0:	187b      	adds	r3, r7, r1
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cc6:	260e      	movs	r6, #14
 8015cc8:	19bb      	adds	r3, r7, r6
 8015cca:	2200      	movs	r2, #0
 8015ccc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015cce:	687a      	ldr	r2, [r7, #4]
 8015cd0:	23b0      	movs	r3, #176	@ 0xb0
 8015cd2:	009b      	lsls	r3, r3, #2
 8015cd4:	58d2      	ldr	r2, [r2, r3]
 8015cd6:	000d      	movs	r5, r1
 8015cd8:	187c      	adds	r4, r7, r1
 8015cda:	1cfb      	adds	r3, r7, #3
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	0019      	movs	r1, r3
 8015ce0:	0010      	movs	r0, r2
 8015ce2:	f7f7 fa93 	bl	800d20c <HAL_PCD_SetAddress>
 8015ce6:	0003      	movs	r3, r0
 8015ce8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cea:	19bc      	adds	r4, r7, r6
 8015cec:	197b      	adds	r3, r7, r5
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	0018      	movs	r0, r3
 8015cf2:	f000 f8a8 	bl	8015e46 <USBD_Get_USB_Status>
 8015cf6:	0003      	movs	r3, r0
 8015cf8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015cfa:	19bb      	adds	r3, r7, r6
 8015cfc:	781b      	ldrb	r3, [r3, #0]
}
 8015cfe:	0018      	movs	r0, r3
 8015d00:	46bd      	mov	sp, r7
 8015d02:	b005      	add	sp, #20
 8015d04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d08:	b087      	sub	sp, #28
 8015d0a:	af00      	add	r7, sp, #0
 8015d0c:	60f8      	str	r0, [r7, #12]
 8015d0e:	0008      	movs	r0, r1
 8015d10:	607a      	str	r2, [r7, #4]
 8015d12:	0019      	movs	r1, r3
 8015d14:	230b      	movs	r3, #11
 8015d16:	18fb      	adds	r3, r7, r3
 8015d18:	1c02      	adds	r2, r0, #0
 8015d1a:	701a      	strb	r2, [r3, #0]
 8015d1c:	2408      	movs	r4, #8
 8015d1e:	193b      	adds	r3, r7, r4
 8015d20:	1c0a      	adds	r2, r1, #0
 8015d22:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d24:	2117      	movs	r1, #23
 8015d26:	187b      	adds	r3, r7, r1
 8015d28:	2200      	movs	r2, #0
 8015d2a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d2c:	2516      	movs	r5, #22
 8015d2e:	197b      	adds	r3, r7, r5
 8015d30:	2200      	movs	r2, #0
 8015d32:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015d34:	68fa      	ldr	r2, [r7, #12]
 8015d36:	23b0      	movs	r3, #176	@ 0xb0
 8015d38:	009b      	lsls	r3, r3, #2
 8015d3a:	58d0      	ldr	r0, [r2, r3]
 8015d3c:	193b      	adds	r3, r7, r4
 8015d3e:	881d      	ldrh	r5, [r3, #0]
 8015d40:	000e      	movs	r6, r1
 8015d42:	187c      	adds	r4, r7, r1
 8015d44:	687a      	ldr	r2, [r7, #4]
 8015d46:	230b      	movs	r3, #11
 8015d48:	18fb      	adds	r3, r7, r3
 8015d4a:	7819      	ldrb	r1, [r3, #0]
 8015d4c:	002b      	movs	r3, r5
 8015d4e:	f7f7 fb98 	bl	800d482 <HAL_PCD_EP_Transmit>
 8015d52:	0003      	movs	r3, r0
 8015d54:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d56:	2516      	movs	r5, #22
 8015d58:	197c      	adds	r4, r7, r5
 8015d5a:	19bb      	adds	r3, r7, r6
 8015d5c:	781b      	ldrb	r3, [r3, #0]
 8015d5e:	0018      	movs	r0, r3
 8015d60:	f000 f871 	bl	8015e46 <USBD_Get_USB_Status>
 8015d64:	0003      	movs	r3, r0
 8015d66:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015d68:	197b      	adds	r3, r7, r5
 8015d6a:	781b      	ldrb	r3, [r3, #0]
}
 8015d6c:	0018      	movs	r0, r3
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	b007      	add	sp, #28
 8015d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d76:	b087      	sub	sp, #28
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	60f8      	str	r0, [r7, #12]
 8015d7c:	0008      	movs	r0, r1
 8015d7e:	607a      	str	r2, [r7, #4]
 8015d80:	0019      	movs	r1, r3
 8015d82:	230b      	movs	r3, #11
 8015d84:	18fb      	adds	r3, r7, r3
 8015d86:	1c02      	adds	r2, r0, #0
 8015d88:	701a      	strb	r2, [r3, #0]
 8015d8a:	2408      	movs	r4, #8
 8015d8c:	193b      	adds	r3, r7, r4
 8015d8e:	1c0a      	adds	r2, r1, #0
 8015d90:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d92:	2117      	movs	r1, #23
 8015d94:	187b      	adds	r3, r7, r1
 8015d96:	2200      	movs	r2, #0
 8015d98:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d9a:	2516      	movs	r5, #22
 8015d9c:	197b      	adds	r3, r7, r5
 8015d9e:	2200      	movs	r2, #0
 8015da0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015da2:	68fa      	ldr	r2, [r7, #12]
 8015da4:	23b0      	movs	r3, #176	@ 0xb0
 8015da6:	009b      	lsls	r3, r3, #2
 8015da8:	58d0      	ldr	r0, [r2, r3]
 8015daa:	193b      	adds	r3, r7, r4
 8015dac:	881d      	ldrh	r5, [r3, #0]
 8015dae:	000e      	movs	r6, r1
 8015db0:	187c      	adds	r4, r7, r1
 8015db2:	687a      	ldr	r2, [r7, #4]
 8015db4:	230b      	movs	r3, #11
 8015db6:	18fb      	adds	r3, r7, r3
 8015db8:	7819      	ldrb	r1, [r3, #0]
 8015dba:	002b      	movs	r3, r5
 8015dbc:	f7f7 fb11 	bl	800d3e2 <HAL_PCD_EP_Receive>
 8015dc0:	0003      	movs	r3, r0
 8015dc2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dc4:	2516      	movs	r5, #22
 8015dc6:	197c      	adds	r4, r7, r5
 8015dc8:	19bb      	adds	r3, r7, r6
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	0018      	movs	r0, r3
 8015dce:	f000 f83a 	bl	8015e46 <USBD_Get_USB_Status>
 8015dd2:	0003      	movs	r3, r0
 8015dd4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015dd6:	197b      	adds	r3, r7, r5
 8015dd8:	781b      	ldrb	r3, [r3, #0]
}
 8015dda:	0018      	movs	r0, r3
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	b007      	add	sp, #28
 8015de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015de2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015de2:	b580      	push	{r7, lr}
 8015de4:	b082      	sub	sp, #8
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6078      	str	r0, [r7, #4]
 8015dea:	000a      	movs	r2, r1
 8015dec:	1cfb      	adds	r3, r7, #3
 8015dee:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	23b0      	movs	r3, #176	@ 0xb0
 8015df4:	009b      	lsls	r3, r3, #2
 8015df6:	58d2      	ldr	r2, [r2, r3]
 8015df8:	1cfb      	adds	r3, r7, #3
 8015dfa:	781b      	ldrb	r3, [r3, #0]
 8015dfc:	0019      	movs	r1, r3
 8015dfe:	0010      	movs	r0, r2
 8015e00:	f7f7 fb26 	bl	800d450 <HAL_PCD_EP_GetRxCount>
 8015e04:	0003      	movs	r3, r0
}
 8015e06:	0018      	movs	r0, r3
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	b002      	add	sp, #8
 8015e0c:	bd80      	pop	{r7, pc}
	...

08015e10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b082      	sub	sp, #8
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015e18:	4b02      	ldr	r3, [pc, #8]	@ (8015e24 <USBD_static_malloc+0x14>)
}
 8015e1a:	0018      	movs	r0, r3
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	b002      	add	sp, #8
 8015e20:	bd80      	pop	{r7, pc}
 8015e22:	46c0      	nop			@ (mov r8, r8)
 8015e24:	20004074 	.word	0x20004074

08015e28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]

}
 8015e30:	46c0      	nop			@ (mov r8, r8)
 8015e32:	46bd      	mov	sp, r7
 8015e34:	b002      	add	sp, #8
 8015e36:	bd80      	pop	{r7, pc}

08015e38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015e3c:	f7ef fe0e 	bl	8005a5c <SystemClock_Config>
}
 8015e40:	46c0      	nop			@ (mov r8, r8)
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}

08015e46 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015e46:	b580      	push	{r7, lr}
 8015e48:	b084      	sub	sp, #16
 8015e4a:	af00      	add	r7, sp, #0
 8015e4c:	0002      	movs	r2, r0
 8015e4e:	1dfb      	adds	r3, r7, #7
 8015e50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e52:	230f      	movs	r3, #15
 8015e54:	18fb      	adds	r3, r7, r3
 8015e56:	2200      	movs	r2, #0
 8015e58:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8015e5a:	1dfb      	adds	r3, r7, #7
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	2b03      	cmp	r3, #3
 8015e60:	d017      	beq.n	8015e92 <USBD_Get_USB_Status+0x4c>
 8015e62:	dc1b      	bgt.n	8015e9c <USBD_Get_USB_Status+0x56>
 8015e64:	2b02      	cmp	r3, #2
 8015e66:	d00f      	beq.n	8015e88 <USBD_Get_USB_Status+0x42>
 8015e68:	dc18      	bgt.n	8015e9c <USBD_Get_USB_Status+0x56>
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d002      	beq.n	8015e74 <USBD_Get_USB_Status+0x2e>
 8015e6e:	2b01      	cmp	r3, #1
 8015e70:	d005      	beq.n	8015e7e <USBD_Get_USB_Status+0x38>
 8015e72:	e013      	b.n	8015e9c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015e74:	230f      	movs	r3, #15
 8015e76:	18fb      	adds	r3, r7, r3
 8015e78:	2200      	movs	r2, #0
 8015e7a:	701a      	strb	r2, [r3, #0]
    break;
 8015e7c:	e013      	b.n	8015ea6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015e7e:	230f      	movs	r3, #15
 8015e80:	18fb      	adds	r3, r7, r3
 8015e82:	2202      	movs	r2, #2
 8015e84:	701a      	strb	r2, [r3, #0]
    break;
 8015e86:	e00e      	b.n	8015ea6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015e88:	230f      	movs	r3, #15
 8015e8a:	18fb      	adds	r3, r7, r3
 8015e8c:	2201      	movs	r2, #1
 8015e8e:	701a      	strb	r2, [r3, #0]
    break;
 8015e90:	e009      	b.n	8015ea6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015e92:	230f      	movs	r3, #15
 8015e94:	18fb      	adds	r3, r7, r3
 8015e96:	2202      	movs	r2, #2
 8015e98:	701a      	strb	r2, [r3, #0]
    break;
 8015e9a:	e004      	b.n	8015ea6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8015e9c:	230f      	movs	r3, #15
 8015e9e:	18fb      	adds	r3, r7, r3
 8015ea0:	2202      	movs	r2, #2
 8015ea2:	701a      	strb	r2, [r3, #0]
    break;
 8015ea4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8015ea6:	230f      	movs	r3, #15
 8015ea8:	18fb      	adds	r3, r7, r3
 8015eaa:	781b      	ldrb	r3, [r3, #0]
}
 8015eac:	0018      	movs	r0, r3
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	b004      	add	sp, #16
 8015eb2:	bd80      	pop	{r7, pc}

08015eb4 <__cvt>:
 8015eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eb6:	001f      	movs	r7, r3
 8015eb8:	2300      	movs	r3, #0
 8015eba:	0016      	movs	r6, r2
 8015ebc:	b08b      	sub	sp, #44	@ 0x2c
 8015ebe:	429f      	cmp	r7, r3
 8015ec0:	da04      	bge.n	8015ecc <__cvt+0x18>
 8015ec2:	2180      	movs	r1, #128	@ 0x80
 8015ec4:	0609      	lsls	r1, r1, #24
 8015ec6:	187b      	adds	r3, r7, r1
 8015ec8:	001f      	movs	r7, r3
 8015eca:	232d      	movs	r3, #45	@ 0x2d
 8015ecc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015ece:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8015ed0:	7013      	strb	r3, [r2, #0]
 8015ed2:	2320      	movs	r3, #32
 8015ed4:	2203      	movs	r2, #3
 8015ed6:	439d      	bics	r5, r3
 8015ed8:	2d46      	cmp	r5, #70	@ 0x46
 8015eda:	d007      	beq.n	8015eec <__cvt+0x38>
 8015edc:	002b      	movs	r3, r5
 8015ede:	3b45      	subs	r3, #69	@ 0x45
 8015ee0:	4259      	negs	r1, r3
 8015ee2:	414b      	adcs	r3, r1
 8015ee4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8015ee6:	3a01      	subs	r2, #1
 8015ee8:	18cb      	adds	r3, r1, r3
 8015eea:	9310      	str	r3, [sp, #64]	@ 0x40
 8015eec:	ab09      	add	r3, sp, #36	@ 0x24
 8015eee:	9304      	str	r3, [sp, #16]
 8015ef0:	ab08      	add	r3, sp, #32
 8015ef2:	9303      	str	r3, [sp, #12]
 8015ef4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015ef6:	9200      	str	r2, [sp, #0]
 8015ef8:	9302      	str	r3, [sp, #8]
 8015efa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015efc:	0032      	movs	r2, r6
 8015efe:	9301      	str	r3, [sp, #4]
 8015f00:	003b      	movs	r3, r7
 8015f02:	f000 ff05 	bl	8016d10 <_dtoa_r>
 8015f06:	0004      	movs	r4, r0
 8015f08:	2d47      	cmp	r5, #71	@ 0x47
 8015f0a:	d11b      	bne.n	8015f44 <__cvt+0x90>
 8015f0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015f0e:	07db      	lsls	r3, r3, #31
 8015f10:	d511      	bpl.n	8015f36 <__cvt+0x82>
 8015f12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015f14:	18c3      	adds	r3, r0, r3
 8015f16:	9307      	str	r3, [sp, #28]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	0030      	movs	r0, r6
 8015f1e:	0039      	movs	r1, r7
 8015f20:	f7ea fa94 	bl	800044c <__aeabi_dcmpeq>
 8015f24:	2800      	cmp	r0, #0
 8015f26:	d001      	beq.n	8015f2c <__cvt+0x78>
 8015f28:	9b07      	ldr	r3, [sp, #28]
 8015f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f2c:	2230      	movs	r2, #48	@ 0x30
 8015f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f30:	9907      	ldr	r1, [sp, #28]
 8015f32:	428b      	cmp	r3, r1
 8015f34:	d320      	bcc.n	8015f78 <__cvt+0xc4>
 8015f36:	0020      	movs	r0, r4
 8015f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f3a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015f3c:	1b1b      	subs	r3, r3, r4
 8015f3e:	6013      	str	r3, [r2, #0]
 8015f40:	b00b      	add	sp, #44	@ 0x2c
 8015f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015f46:	18c3      	adds	r3, r0, r3
 8015f48:	9307      	str	r3, [sp, #28]
 8015f4a:	2d46      	cmp	r5, #70	@ 0x46
 8015f4c:	d1e4      	bne.n	8015f18 <__cvt+0x64>
 8015f4e:	7803      	ldrb	r3, [r0, #0]
 8015f50:	2b30      	cmp	r3, #48	@ 0x30
 8015f52:	d10c      	bne.n	8015f6e <__cvt+0xba>
 8015f54:	2200      	movs	r2, #0
 8015f56:	2300      	movs	r3, #0
 8015f58:	0030      	movs	r0, r6
 8015f5a:	0039      	movs	r1, r7
 8015f5c:	f7ea fa76 	bl	800044c <__aeabi_dcmpeq>
 8015f60:	2800      	cmp	r0, #0
 8015f62:	d104      	bne.n	8015f6e <__cvt+0xba>
 8015f64:	2301      	movs	r3, #1
 8015f66:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015f68:	1a9b      	subs	r3, r3, r2
 8015f6a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015f6c:	6013      	str	r3, [r2, #0]
 8015f6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015f70:	9a07      	ldr	r2, [sp, #28]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	18d3      	adds	r3, r2, r3
 8015f76:	e7ce      	b.n	8015f16 <__cvt+0x62>
 8015f78:	1c59      	adds	r1, r3, #1
 8015f7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8015f7c:	701a      	strb	r2, [r3, #0]
 8015f7e:	e7d6      	b.n	8015f2e <__cvt+0x7a>

08015f80 <__exponent>:
 8015f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f82:	232b      	movs	r3, #43	@ 0x2b
 8015f84:	0005      	movs	r5, r0
 8015f86:	000c      	movs	r4, r1
 8015f88:	b085      	sub	sp, #20
 8015f8a:	7002      	strb	r2, [r0, #0]
 8015f8c:	2900      	cmp	r1, #0
 8015f8e:	da01      	bge.n	8015f94 <__exponent+0x14>
 8015f90:	424c      	negs	r4, r1
 8015f92:	3302      	adds	r3, #2
 8015f94:	706b      	strb	r3, [r5, #1]
 8015f96:	2c09      	cmp	r4, #9
 8015f98:	dd2c      	ble.n	8015ff4 <__exponent+0x74>
 8015f9a:	ab02      	add	r3, sp, #8
 8015f9c:	1dde      	adds	r6, r3, #7
 8015f9e:	0020      	movs	r0, r4
 8015fa0:	210a      	movs	r1, #10
 8015fa2:	f7ea fa3d 	bl	8000420 <__aeabi_idivmod>
 8015fa6:	0037      	movs	r7, r6
 8015fa8:	3130      	adds	r1, #48	@ 0x30
 8015faa:	3e01      	subs	r6, #1
 8015fac:	0020      	movs	r0, r4
 8015fae:	7031      	strb	r1, [r6, #0]
 8015fb0:	210a      	movs	r1, #10
 8015fb2:	9401      	str	r4, [sp, #4]
 8015fb4:	f7ea f94e 	bl	8000254 <__divsi3>
 8015fb8:	9b01      	ldr	r3, [sp, #4]
 8015fba:	0004      	movs	r4, r0
 8015fbc:	2b63      	cmp	r3, #99	@ 0x63
 8015fbe:	dcee      	bgt.n	8015f9e <__exponent+0x1e>
 8015fc0:	1eba      	subs	r2, r7, #2
 8015fc2:	1ca8      	adds	r0, r5, #2
 8015fc4:	0001      	movs	r1, r0
 8015fc6:	0013      	movs	r3, r2
 8015fc8:	3430      	adds	r4, #48	@ 0x30
 8015fca:	7014      	strb	r4, [r2, #0]
 8015fcc:	ac02      	add	r4, sp, #8
 8015fce:	3407      	adds	r4, #7
 8015fd0:	429c      	cmp	r4, r3
 8015fd2:	d80a      	bhi.n	8015fea <__exponent+0x6a>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	42a2      	cmp	r2, r4
 8015fd8:	d803      	bhi.n	8015fe2 <__exponent+0x62>
 8015fda:	3309      	adds	r3, #9
 8015fdc:	aa02      	add	r2, sp, #8
 8015fde:	189b      	adds	r3, r3, r2
 8015fe0:	1bdb      	subs	r3, r3, r7
 8015fe2:	18c0      	adds	r0, r0, r3
 8015fe4:	1b40      	subs	r0, r0, r5
 8015fe6:	b005      	add	sp, #20
 8015fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fea:	781c      	ldrb	r4, [r3, #0]
 8015fec:	3301      	adds	r3, #1
 8015fee:	700c      	strb	r4, [r1, #0]
 8015ff0:	3101      	adds	r1, #1
 8015ff2:	e7eb      	b.n	8015fcc <__exponent+0x4c>
 8015ff4:	2330      	movs	r3, #48	@ 0x30
 8015ff6:	18e4      	adds	r4, r4, r3
 8015ff8:	70ab      	strb	r3, [r5, #2]
 8015ffa:	1d28      	adds	r0, r5, #4
 8015ffc:	70ec      	strb	r4, [r5, #3]
 8015ffe:	e7f1      	b.n	8015fe4 <__exponent+0x64>

08016000 <_printf_float>:
 8016000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016002:	b097      	sub	sp, #92	@ 0x5c
 8016004:	000d      	movs	r5, r1
 8016006:	920a      	str	r2, [sp, #40]	@ 0x28
 8016008:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801600a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801600c:	9009      	str	r0, [sp, #36]	@ 0x24
 801600e:	f000 fd5d 	bl	8016acc <_localeconv_r>
 8016012:	6803      	ldr	r3, [r0, #0]
 8016014:	0018      	movs	r0, r3
 8016016:	930d      	str	r3, [sp, #52]	@ 0x34
 8016018:	f7ea f876 	bl	8000108 <strlen>
 801601c:	2300      	movs	r3, #0
 801601e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8016020:	9314      	str	r3, [sp, #80]	@ 0x50
 8016022:	7e2b      	ldrb	r3, [r5, #24]
 8016024:	2207      	movs	r2, #7
 8016026:	930c      	str	r3, [sp, #48]	@ 0x30
 8016028:	682b      	ldr	r3, [r5, #0]
 801602a:	930e      	str	r3, [sp, #56]	@ 0x38
 801602c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801602e:	6823      	ldr	r3, [r4, #0]
 8016030:	05c9      	lsls	r1, r1, #23
 8016032:	d545      	bpl.n	80160c0 <_printf_float+0xc0>
 8016034:	189b      	adds	r3, r3, r2
 8016036:	4393      	bics	r3, r2
 8016038:	001a      	movs	r2, r3
 801603a:	3208      	adds	r2, #8
 801603c:	6022      	str	r2, [r4, #0]
 801603e:	2201      	movs	r2, #1
 8016040:	681e      	ldr	r6, [r3, #0]
 8016042:	685f      	ldr	r7, [r3, #4]
 8016044:	007b      	lsls	r3, r7, #1
 8016046:	085b      	lsrs	r3, r3, #1
 8016048:	9311      	str	r3, [sp, #68]	@ 0x44
 801604a:	9610      	str	r6, [sp, #64]	@ 0x40
 801604c:	64ae      	str	r6, [r5, #72]	@ 0x48
 801604e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8016050:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8016052:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016054:	4ba7      	ldr	r3, [pc, #668]	@ (80162f4 <_printf_float+0x2f4>)
 8016056:	4252      	negs	r2, r2
 8016058:	f7ed f8d2 	bl	8003200 <__aeabi_dcmpun>
 801605c:	2800      	cmp	r0, #0
 801605e:	d131      	bne.n	80160c4 <_printf_float+0xc4>
 8016060:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8016062:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016064:	2201      	movs	r2, #1
 8016066:	4ba3      	ldr	r3, [pc, #652]	@ (80162f4 <_printf_float+0x2f4>)
 8016068:	4252      	negs	r2, r2
 801606a:	f7ea f9ff 	bl	800046c <__aeabi_dcmple>
 801606e:	2800      	cmp	r0, #0
 8016070:	d128      	bne.n	80160c4 <_printf_float+0xc4>
 8016072:	2200      	movs	r2, #0
 8016074:	2300      	movs	r3, #0
 8016076:	0030      	movs	r0, r6
 8016078:	0039      	movs	r1, r7
 801607a:	f7ea f9ed 	bl	8000458 <__aeabi_dcmplt>
 801607e:	2800      	cmp	r0, #0
 8016080:	d003      	beq.n	801608a <_printf_float+0x8a>
 8016082:	002b      	movs	r3, r5
 8016084:	222d      	movs	r2, #45	@ 0x2d
 8016086:	3343      	adds	r3, #67	@ 0x43
 8016088:	701a      	strb	r2, [r3, #0]
 801608a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801608c:	4f9a      	ldr	r7, [pc, #616]	@ (80162f8 <_printf_float+0x2f8>)
 801608e:	2b47      	cmp	r3, #71	@ 0x47
 8016090:	d900      	bls.n	8016094 <_printf_float+0x94>
 8016092:	4f9a      	ldr	r7, [pc, #616]	@ (80162fc <_printf_float+0x2fc>)
 8016094:	2303      	movs	r3, #3
 8016096:	2400      	movs	r4, #0
 8016098:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801609a:	612b      	str	r3, [r5, #16]
 801609c:	3301      	adds	r3, #1
 801609e:	439a      	bics	r2, r3
 80160a0:	602a      	str	r2, [r5, #0]
 80160a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80160a4:	0029      	movs	r1, r5
 80160a6:	9300      	str	r3, [sp, #0]
 80160a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80160ac:	aa15      	add	r2, sp, #84	@ 0x54
 80160ae:	f000 f9e5 	bl	801647c <_printf_common>
 80160b2:	3001      	adds	r0, #1
 80160b4:	d000      	beq.n	80160b8 <_printf_float+0xb8>
 80160b6:	e09f      	b.n	80161f8 <_printf_float+0x1f8>
 80160b8:	2001      	movs	r0, #1
 80160ba:	4240      	negs	r0, r0
 80160bc:	b017      	add	sp, #92	@ 0x5c
 80160be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160c0:	3307      	adds	r3, #7
 80160c2:	e7b8      	b.n	8016036 <_printf_float+0x36>
 80160c4:	0032      	movs	r2, r6
 80160c6:	003b      	movs	r3, r7
 80160c8:	0030      	movs	r0, r6
 80160ca:	0039      	movs	r1, r7
 80160cc:	f7ed f898 	bl	8003200 <__aeabi_dcmpun>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	d00b      	beq.n	80160ec <_printf_float+0xec>
 80160d4:	2f00      	cmp	r7, #0
 80160d6:	da03      	bge.n	80160e0 <_printf_float+0xe0>
 80160d8:	002b      	movs	r3, r5
 80160da:	222d      	movs	r2, #45	@ 0x2d
 80160dc:	3343      	adds	r3, #67	@ 0x43
 80160de:	701a      	strb	r2, [r3, #0]
 80160e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160e2:	4f87      	ldr	r7, [pc, #540]	@ (8016300 <_printf_float+0x300>)
 80160e4:	2b47      	cmp	r3, #71	@ 0x47
 80160e6:	d9d5      	bls.n	8016094 <_printf_float+0x94>
 80160e8:	4f86      	ldr	r7, [pc, #536]	@ (8016304 <_printf_float+0x304>)
 80160ea:	e7d3      	b.n	8016094 <_printf_float+0x94>
 80160ec:	2220      	movs	r2, #32
 80160ee:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80160f0:	686b      	ldr	r3, [r5, #4]
 80160f2:	4394      	bics	r4, r2
 80160f4:	1c5a      	adds	r2, r3, #1
 80160f6:	d146      	bne.n	8016186 <_printf_float+0x186>
 80160f8:	3307      	adds	r3, #7
 80160fa:	606b      	str	r3, [r5, #4]
 80160fc:	2380      	movs	r3, #128	@ 0x80
 80160fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016100:	00db      	lsls	r3, r3, #3
 8016102:	4313      	orrs	r3, r2
 8016104:	2200      	movs	r2, #0
 8016106:	602b      	str	r3, [r5, #0]
 8016108:	9206      	str	r2, [sp, #24]
 801610a:	aa14      	add	r2, sp, #80	@ 0x50
 801610c:	9205      	str	r2, [sp, #20]
 801610e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016110:	a90a      	add	r1, sp, #40	@ 0x28
 8016112:	9204      	str	r2, [sp, #16]
 8016114:	aa13      	add	r2, sp, #76	@ 0x4c
 8016116:	9203      	str	r2, [sp, #12]
 8016118:	2223      	movs	r2, #35	@ 0x23
 801611a:	1852      	adds	r2, r2, r1
 801611c:	9202      	str	r2, [sp, #8]
 801611e:	9301      	str	r3, [sp, #4]
 8016120:	686b      	ldr	r3, [r5, #4]
 8016122:	0032      	movs	r2, r6
 8016124:	9300      	str	r3, [sp, #0]
 8016126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016128:	003b      	movs	r3, r7
 801612a:	f7ff fec3 	bl	8015eb4 <__cvt>
 801612e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016130:	0007      	movs	r7, r0
 8016132:	2c47      	cmp	r4, #71	@ 0x47
 8016134:	d12d      	bne.n	8016192 <_printf_float+0x192>
 8016136:	1cd3      	adds	r3, r2, #3
 8016138:	db02      	blt.n	8016140 <_printf_float+0x140>
 801613a:	686b      	ldr	r3, [r5, #4]
 801613c:	429a      	cmp	r2, r3
 801613e:	dd48      	ble.n	80161d2 <_printf_float+0x1d2>
 8016140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016142:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016144:	3b02      	subs	r3, #2
 8016146:	b2db      	uxtb	r3, r3
 8016148:	930c      	str	r3, [sp, #48]	@ 0x30
 801614a:	0028      	movs	r0, r5
 801614c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801614e:	3901      	subs	r1, #1
 8016150:	3050      	adds	r0, #80	@ 0x50
 8016152:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016154:	f7ff ff14 	bl	8015f80 <__exponent>
 8016158:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801615a:	0004      	movs	r4, r0
 801615c:	1813      	adds	r3, r2, r0
 801615e:	612b      	str	r3, [r5, #16]
 8016160:	2a01      	cmp	r2, #1
 8016162:	dc02      	bgt.n	801616a <_printf_float+0x16a>
 8016164:	682a      	ldr	r2, [r5, #0]
 8016166:	07d2      	lsls	r2, r2, #31
 8016168:	d501      	bpl.n	801616e <_printf_float+0x16e>
 801616a:	3301      	adds	r3, #1
 801616c:	612b      	str	r3, [r5, #16]
 801616e:	2323      	movs	r3, #35	@ 0x23
 8016170:	aa0a      	add	r2, sp, #40	@ 0x28
 8016172:	189b      	adds	r3, r3, r2
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d100      	bne.n	801617c <_printf_float+0x17c>
 801617a:	e792      	b.n	80160a2 <_printf_float+0xa2>
 801617c:	002b      	movs	r3, r5
 801617e:	222d      	movs	r2, #45	@ 0x2d
 8016180:	3343      	adds	r3, #67	@ 0x43
 8016182:	701a      	strb	r2, [r3, #0]
 8016184:	e78d      	b.n	80160a2 <_printf_float+0xa2>
 8016186:	2c47      	cmp	r4, #71	@ 0x47
 8016188:	d1b8      	bne.n	80160fc <_printf_float+0xfc>
 801618a:	2b00      	cmp	r3, #0
 801618c:	d1b6      	bne.n	80160fc <_printf_float+0xfc>
 801618e:	3301      	adds	r3, #1
 8016190:	e7b3      	b.n	80160fa <_printf_float+0xfa>
 8016192:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016194:	0011      	movs	r1, r2
 8016196:	2b65      	cmp	r3, #101	@ 0x65
 8016198:	d9d7      	bls.n	801614a <_printf_float+0x14a>
 801619a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801619c:	2b66      	cmp	r3, #102	@ 0x66
 801619e:	d11a      	bne.n	80161d6 <_printf_float+0x1d6>
 80161a0:	686b      	ldr	r3, [r5, #4]
 80161a2:	2a00      	cmp	r2, #0
 80161a4:	dd09      	ble.n	80161ba <_printf_float+0x1ba>
 80161a6:	612a      	str	r2, [r5, #16]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d102      	bne.n	80161b2 <_printf_float+0x1b2>
 80161ac:	6829      	ldr	r1, [r5, #0]
 80161ae:	07c9      	lsls	r1, r1, #31
 80161b0:	d50b      	bpl.n	80161ca <_printf_float+0x1ca>
 80161b2:	3301      	adds	r3, #1
 80161b4:	189b      	adds	r3, r3, r2
 80161b6:	612b      	str	r3, [r5, #16]
 80161b8:	e007      	b.n	80161ca <_printf_float+0x1ca>
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d103      	bne.n	80161c6 <_printf_float+0x1c6>
 80161be:	2201      	movs	r2, #1
 80161c0:	6829      	ldr	r1, [r5, #0]
 80161c2:	4211      	tst	r1, r2
 80161c4:	d000      	beq.n	80161c8 <_printf_float+0x1c8>
 80161c6:	1c9a      	adds	r2, r3, #2
 80161c8:	612a      	str	r2, [r5, #16]
 80161ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80161cc:	2400      	movs	r4, #0
 80161ce:	65ab      	str	r3, [r5, #88]	@ 0x58
 80161d0:	e7cd      	b.n	801616e <_printf_float+0x16e>
 80161d2:	2367      	movs	r3, #103	@ 0x67
 80161d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80161d6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80161d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80161da:	4299      	cmp	r1, r3
 80161dc:	db06      	blt.n	80161ec <_printf_float+0x1ec>
 80161de:	682b      	ldr	r3, [r5, #0]
 80161e0:	6129      	str	r1, [r5, #16]
 80161e2:	07db      	lsls	r3, r3, #31
 80161e4:	d5f1      	bpl.n	80161ca <_printf_float+0x1ca>
 80161e6:	3101      	adds	r1, #1
 80161e8:	6129      	str	r1, [r5, #16]
 80161ea:	e7ee      	b.n	80161ca <_printf_float+0x1ca>
 80161ec:	2201      	movs	r2, #1
 80161ee:	2900      	cmp	r1, #0
 80161f0:	dce0      	bgt.n	80161b4 <_printf_float+0x1b4>
 80161f2:	1892      	adds	r2, r2, r2
 80161f4:	1a52      	subs	r2, r2, r1
 80161f6:	e7dd      	b.n	80161b4 <_printf_float+0x1b4>
 80161f8:	682a      	ldr	r2, [r5, #0]
 80161fa:	0553      	lsls	r3, r2, #21
 80161fc:	d408      	bmi.n	8016210 <_printf_float+0x210>
 80161fe:	692b      	ldr	r3, [r5, #16]
 8016200:	003a      	movs	r2, r7
 8016202:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016204:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016206:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016208:	47a0      	blx	r4
 801620a:	3001      	adds	r0, #1
 801620c:	d129      	bne.n	8016262 <_printf_float+0x262>
 801620e:	e753      	b.n	80160b8 <_printf_float+0xb8>
 8016210:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016212:	2b65      	cmp	r3, #101	@ 0x65
 8016214:	d800      	bhi.n	8016218 <_printf_float+0x218>
 8016216:	e0da      	b.n	80163ce <_printf_float+0x3ce>
 8016218:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801621a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801621c:	2200      	movs	r2, #0
 801621e:	2300      	movs	r3, #0
 8016220:	f7ea f914 	bl	800044c <__aeabi_dcmpeq>
 8016224:	2800      	cmp	r0, #0
 8016226:	d033      	beq.n	8016290 <_printf_float+0x290>
 8016228:	2301      	movs	r3, #1
 801622a:	4a37      	ldr	r2, [pc, #220]	@ (8016308 <_printf_float+0x308>)
 801622c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801622e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016230:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016232:	47a0      	blx	r4
 8016234:	3001      	adds	r0, #1
 8016236:	d100      	bne.n	801623a <_printf_float+0x23a>
 8016238:	e73e      	b.n	80160b8 <_printf_float+0xb8>
 801623a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801623c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801623e:	42b3      	cmp	r3, r6
 8016240:	db02      	blt.n	8016248 <_printf_float+0x248>
 8016242:	682b      	ldr	r3, [r5, #0]
 8016244:	07db      	lsls	r3, r3, #31
 8016246:	d50c      	bpl.n	8016262 <_printf_float+0x262>
 8016248:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801624a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801624c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801624e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016250:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016252:	47a0      	blx	r4
 8016254:	2400      	movs	r4, #0
 8016256:	3001      	adds	r0, #1
 8016258:	d100      	bne.n	801625c <_printf_float+0x25c>
 801625a:	e72d      	b.n	80160b8 <_printf_float+0xb8>
 801625c:	1e73      	subs	r3, r6, #1
 801625e:	42a3      	cmp	r3, r4
 8016260:	dc0a      	bgt.n	8016278 <_printf_float+0x278>
 8016262:	682b      	ldr	r3, [r5, #0]
 8016264:	079b      	lsls	r3, r3, #30
 8016266:	d500      	bpl.n	801626a <_printf_float+0x26a>
 8016268:	e105      	b.n	8016476 <_printf_float+0x476>
 801626a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801626c:	68e8      	ldr	r0, [r5, #12]
 801626e:	4298      	cmp	r0, r3
 8016270:	db00      	blt.n	8016274 <_printf_float+0x274>
 8016272:	e723      	b.n	80160bc <_printf_float+0xbc>
 8016274:	0018      	movs	r0, r3
 8016276:	e721      	b.n	80160bc <_printf_float+0xbc>
 8016278:	002a      	movs	r2, r5
 801627a:	2301      	movs	r3, #1
 801627c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801627e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016280:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016282:	321a      	adds	r2, #26
 8016284:	47b8      	blx	r7
 8016286:	3001      	adds	r0, #1
 8016288:	d100      	bne.n	801628c <_printf_float+0x28c>
 801628a:	e715      	b.n	80160b8 <_printf_float+0xb8>
 801628c:	3401      	adds	r4, #1
 801628e:	e7e5      	b.n	801625c <_printf_float+0x25c>
 8016290:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016292:	2b00      	cmp	r3, #0
 8016294:	dc3a      	bgt.n	801630c <_printf_float+0x30c>
 8016296:	2301      	movs	r3, #1
 8016298:	4a1b      	ldr	r2, [pc, #108]	@ (8016308 <_printf_float+0x308>)
 801629a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801629c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801629e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80162a0:	47a0      	blx	r4
 80162a2:	3001      	adds	r0, #1
 80162a4:	d100      	bne.n	80162a8 <_printf_float+0x2a8>
 80162a6:	e707      	b.n	80160b8 <_printf_float+0xb8>
 80162a8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80162aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80162ac:	4333      	orrs	r3, r6
 80162ae:	d102      	bne.n	80162b6 <_printf_float+0x2b6>
 80162b0:	682b      	ldr	r3, [r5, #0]
 80162b2:	07db      	lsls	r3, r3, #31
 80162b4:	d5d5      	bpl.n	8016262 <_printf_float+0x262>
 80162b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80162ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80162bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80162c0:	47a0      	blx	r4
 80162c2:	2300      	movs	r3, #0
 80162c4:	3001      	adds	r0, #1
 80162c6:	d100      	bne.n	80162ca <_printf_float+0x2ca>
 80162c8:	e6f6      	b.n	80160b8 <_printf_float+0xb8>
 80162ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80162cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80162ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80162d0:	425b      	negs	r3, r3
 80162d2:	4293      	cmp	r3, r2
 80162d4:	dc01      	bgt.n	80162da <_printf_float+0x2da>
 80162d6:	0033      	movs	r3, r6
 80162d8:	e792      	b.n	8016200 <_printf_float+0x200>
 80162da:	002a      	movs	r2, r5
 80162dc:	2301      	movs	r3, #1
 80162de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80162e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80162e4:	321a      	adds	r2, #26
 80162e6:	47a0      	blx	r4
 80162e8:	3001      	adds	r0, #1
 80162ea:	d100      	bne.n	80162ee <_printf_float+0x2ee>
 80162ec:	e6e4      	b.n	80160b8 <_printf_float+0xb8>
 80162ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162f0:	3301      	adds	r3, #1
 80162f2:	e7ea      	b.n	80162ca <_printf_float+0x2ca>
 80162f4:	7fefffff 	.word	0x7fefffff
 80162f8:	0801a568 	.word	0x0801a568
 80162fc:	0801a56c 	.word	0x0801a56c
 8016300:	0801a570 	.word	0x0801a570
 8016304:	0801a574 	.word	0x0801a574
 8016308:	0801a578 	.word	0x0801a578
 801630c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801630e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8016310:	930c      	str	r3, [sp, #48]	@ 0x30
 8016312:	429e      	cmp	r6, r3
 8016314:	dd00      	ble.n	8016318 <_printf_float+0x318>
 8016316:	001e      	movs	r6, r3
 8016318:	2e00      	cmp	r6, #0
 801631a:	dc31      	bgt.n	8016380 <_printf_float+0x380>
 801631c:	43f3      	mvns	r3, r6
 801631e:	2400      	movs	r4, #0
 8016320:	17db      	asrs	r3, r3, #31
 8016322:	4033      	ands	r3, r6
 8016324:	930e      	str	r3, [sp, #56]	@ 0x38
 8016326:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8016328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801632a:	1af3      	subs	r3, r6, r3
 801632c:	42a3      	cmp	r3, r4
 801632e:	dc30      	bgt.n	8016392 <_printf_float+0x392>
 8016330:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016332:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016334:	429a      	cmp	r2, r3
 8016336:	dc38      	bgt.n	80163aa <_printf_float+0x3aa>
 8016338:	682b      	ldr	r3, [r5, #0]
 801633a:	07db      	lsls	r3, r3, #31
 801633c:	d435      	bmi.n	80163aa <_printf_float+0x3aa>
 801633e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016342:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016344:	1b9b      	subs	r3, r3, r6
 8016346:	1b14      	subs	r4, r2, r4
 8016348:	429c      	cmp	r4, r3
 801634a:	dd00      	ble.n	801634e <_printf_float+0x34e>
 801634c:	001c      	movs	r4, r3
 801634e:	2c00      	cmp	r4, #0
 8016350:	dc34      	bgt.n	80163bc <_printf_float+0x3bc>
 8016352:	43e3      	mvns	r3, r4
 8016354:	2600      	movs	r6, #0
 8016356:	17db      	asrs	r3, r3, #31
 8016358:	401c      	ands	r4, r3
 801635a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801635c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801635e:	1ad3      	subs	r3, r2, r3
 8016360:	1b1b      	subs	r3, r3, r4
 8016362:	42b3      	cmp	r3, r6
 8016364:	dc00      	bgt.n	8016368 <_printf_float+0x368>
 8016366:	e77c      	b.n	8016262 <_printf_float+0x262>
 8016368:	002a      	movs	r2, r5
 801636a:	2301      	movs	r3, #1
 801636c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801636e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016370:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016372:	321a      	adds	r2, #26
 8016374:	47b8      	blx	r7
 8016376:	3001      	adds	r0, #1
 8016378:	d100      	bne.n	801637c <_printf_float+0x37c>
 801637a:	e69d      	b.n	80160b8 <_printf_float+0xb8>
 801637c:	3601      	adds	r6, #1
 801637e:	e7ec      	b.n	801635a <_printf_float+0x35a>
 8016380:	0033      	movs	r3, r6
 8016382:	003a      	movs	r2, r7
 8016384:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016388:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801638a:	47a0      	blx	r4
 801638c:	3001      	adds	r0, #1
 801638e:	d1c5      	bne.n	801631c <_printf_float+0x31c>
 8016390:	e692      	b.n	80160b8 <_printf_float+0xb8>
 8016392:	002a      	movs	r2, r5
 8016394:	2301      	movs	r3, #1
 8016396:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016398:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801639a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801639c:	321a      	adds	r2, #26
 801639e:	47b0      	blx	r6
 80163a0:	3001      	adds	r0, #1
 80163a2:	d100      	bne.n	80163a6 <_printf_float+0x3a6>
 80163a4:	e688      	b.n	80160b8 <_printf_float+0xb8>
 80163a6:	3401      	adds	r4, #1
 80163a8:	e7bd      	b.n	8016326 <_printf_float+0x326>
 80163aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80163ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80163b4:	47a0      	blx	r4
 80163b6:	3001      	adds	r0, #1
 80163b8:	d1c1      	bne.n	801633e <_printf_float+0x33e>
 80163ba:	e67d      	b.n	80160b8 <_printf_float+0xb8>
 80163bc:	19ba      	adds	r2, r7, r6
 80163be:	0023      	movs	r3, r4
 80163c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80163c6:	47b0      	blx	r6
 80163c8:	3001      	adds	r0, #1
 80163ca:	d1c2      	bne.n	8016352 <_printf_float+0x352>
 80163cc:	e674      	b.n	80160b8 <_printf_float+0xb8>
 80163ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80163d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80163d2:	2b01      	cmp	r3, #1
 80163d4:	dc02      	bgt.n	80163dc <_printf_float+0x3dc>
 80163d6:	2301      	movs	r3, #1
 80163d8:	421a      	tst	r2, r3
 80163da:	d039      	beq.n	8016450 <_printf_float+0x450>
 80163dc:	2301      	movs	r3, #1
 80163de:	003a      	movs	r2, r7
 80163e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80163e6:	47b0      	blx	r6
 80163e8:	3001      	adds	r0, #1
 80163ea:	d100      	bne.n	80163ee <_printf_float+0x3ee>
 80163ec:	e664      	b.n	80160b8 <_printf_float+0xb8>
 80163ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80163f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163f6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80163f8:	47b0      	blx	r6
 80163fa:	3001      	adds	r0, #1
 80163fc:	d100      	bne.n	8016400 <_printf_float+0x400>
 80163fe:	e65b      	b.n	80160b8 <_printf_float+0xb8>
 8016400:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8016402:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016404:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016406:	2200      	movs	r2, #0
 8016408:	3b01      	subs	r3, #1
 801640a:	930c      	str	r3, [sp, #48]	@ 0x30
 801640c:	2300      	movs	r3, #0
 801640e:	f7ea f81d 	bl	800044c <__aeabi_dcmpeq>
 8016412:	2800      	cmp	r0, #0
 8016414:	d11a      	bne.n	801644c <_printf_float+0x44c>
 8016416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016418:	1c7a      	adds	r2, r7, #1
 801641a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801641c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801641e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016420:	47b0      	blx	r6
 8016422:	3001      	adds	r0, #1
 8016424:	d10e      	bne.n	8016444 <_printf_float+0x444>
 8016426:	e647      	b.n	80160b8 <_printf_float+0xb8>
 8016428:	002a      	movs	r2, r5
 801642a:	2301      	movs	r3, #1
 801642c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801642e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016430:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016432:	321a      	adds	r2, #26
 8016434:	47b8      	blx	r7
 8016436:	3001      	adds	r0, #1
 8016438:	d100      	bne.n	801643c <_printf_float+0x43c>
 801643a:	e63d      	b.n	80160b8 <_printf_float+0xb8>
 801643c:	3601      	adds	r6, #1
 801643e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016440:	429e      	cmp	r6, r3
 8016442:	dbf1      	blt.n	8016428 <_printf_float+0x428>
 8016444:	002a      	movs	r2, r5
 8016446:	0023      	movs	r3, r4
 8016448:	3250      	adds	r2, #80	@ 0x50
 801644a:	e6da      	b.n	8016202 <_printf_float+0x202>
 801644c:	2600      	movs	r6, #0
 801644e:	e7f6      	b.n	801643e <_printf_float+0x43e>
 8016450:	003a      	movs	r2, r7
 8016452:	e7e2      	b.n	801641a <_printf_float+0x41a>
 8016454:	002a      	movs	r2, r5
 8016456:	2301      	movs	r3, #1
 8016458:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801645a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801645c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801645e:	3219      	adds	r2, #25
 8016460:	47b0      	blx	r6
 8016462:	3001      	adds	r0, #1
 8016464:	d100      	bne.n	8016468 <_printf_float+0x468>
 8016466:	e627      	b.n	80160b8 <_printf_float+0xb8>
 8016468:	3401      	adds	r4, #1
 801646a:	68eb      	ldr	r3, [r5, #12]
 801646c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801646e:	1a9b      	subs	r3, r3, r2
 8016470:	42a3      	cmp	r3, r4
 8016472:	dcef      	bgt.n	8016454 <_printf_float+0x454>
 8016474:	e6f9      	b.n	801626a <_printf_float+0x26a>
 8016476:	2400      	movs	r4, #0
 8016478:	e7f7      	b.n	801646a <_printf_float+0x46a>
 801647a:	46c0      	nop			@ (mov r8, r8)

0801647c <_printf_common>:
 801647c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801647e:	0016      	movs	r6, r2
 8016480:	9301      	str	r3, [sp, #4]
 8016482:	688a      	ldr	r2, [r1, #8]
 8016484:	690b      	ldr	r3, [r1, #16]
 8016486:	000c      	movs	r4, r1
 8016488:	9000      	str	r0, [sp, #0]
 801648a:	4293      	cmp	r3, r2
 801648c:	da00      	bge.n	8016490 <_printf_common+0x14>
 801648e:	0013      	movs	r3, r2
 8016490:	0022      	movs	r2, r4
 8016492:	6033      	str	r3, [r6, #0]
 8016494:	3243      	adds	r2, #67	@ 0x43
 8016496:	7812      	ldrb	r2, [r2, #0]
 8016498:	2a00      	cmp	r2, #0
 801649a:	d001      	beq.n	80164a0 <_printf_common+0x24>
 801649c:	3301      	adds	r3, #1
 801649e:	6033      	str	r3, [r6, #0]
 80164a0:	6823      	ldr	r3, [r4, #0]
 80164a2:	069b      	lsls	r3, r3, #26
 80164a4:	d502      	bpl.n	80164ac <_printf_common+0x30>
 80164a6:	6833      	ldr	r3, [r6, #0]
 80164a8:	3302      	adds	r3, #2
 80164aa:	6033      	str	r3, [r6, #0]
 80164ac:	6822      	ldr	r2, [r4, #0]
 80164ae:	2306      	movs	r3, #6
 80164b0:	0015      	movs	r5, r2
 80164b2:	401d      	ands	r5, r3
 80164b4:	421a      	tst	r2, r3
 80164b6:	d027      	beq.n	8016508 <_printf_common+0x8c>
 80164b8:	0023      	movs	r3, r4
 80164ba:	3343      	adds	r3, #67	@ 0x43
 80164bc:	781b      	ldrb	r3, [r3, #0]
 80164be:	1e5a      	subs	r2, r3, #1
 80164c0:	4193      	sbcs	r3, r2
 80164c2:	6822      	ldr	r2, [r4, #0]
 80164c4:	0692      	lsls	r2, r2, #26
 80164c6:	d430      	bmi.n	801652a <_printf_common+0xae>
 80164c8:	0022      	movs	r2, r4
 80164ca:	9901      	ldr	r1, [sp, #4]
 80164cc:	9800      	ldr	r0, [sp, #0]
 80164ce:	9d08      	ldr	r5, [sp, #32]
 80164d0:	3243      	adds	r2, #67	@ 0x43
 80164d2:	47a8      	blx	r5
 80164d4:	3001      	adds	r0, #1
 80164d6:	d025      	beq.n	8016524 <_printf_common+0xa8>
 80164d8:	2206      	movs	r2, #6
 80164da:	6823      	ldr	r3, [r4, #0]
 80164dc:	2500      	movs	r5, #0
 80164de:	4013      	ands	r3, r2
 80164e0:	2b04      	cmp	r3, #4
 80164e2:	d105      	bne.n	80164f0 <_printf_common+0x74>
 80164e4:	6833      	ldr	r3, [r6, #0]
 80164e6:	68e5      	ldr	r5, [r4, #12]
 80164e8:	1aed      	subs	r5, r5, r3
 80164ea:	43eb      	mvns	r3, r5
 80164ec:	17db      	asrs	r3, r3, #31
 80164ee:	401d      	ands	r5, r3
 80164f0:	68a3      	ldr	r3, [r4, #8]
 80164f2:	6922      	ldr	r2, [r4, #16]
 80164f4:	4293      	cmp	r3, r2
 80164f6:	dd01      	ble.n	80164fc <_printf_common+0x80>
 80164f8:	1a9b      	subs	r3, r3, r2
 80164fa:	18ed      	adds	r5, r5, r3
 80164fc:	2600      	movs	r6, #0
 80164fe:	42b5      	cmp	r5, r6
 8016500:	d120      	bne.n	8016544 <_printf_common+0xc8>
 8016502:	2000      	movs	r0, #0
 8016504:	e010      	b.n	8016528 <_printf_common+0xac>
 8016506:	3501      	adds	r5, #1
 8016508:	68e3      	ldr	r3, [r4, #12]
 801650a:	6832      	ldr	r2, [r6, #0]
 801650c:	1a9b      	subs	r3, r3, r2
 801650e:	42ab      	cmp	r3, r5
 8016510:	ddd2      	ble.n	80164b8 <_printf_common+0x3c>
 8016512:	0022      	movs	r2, r4
 8016514:	2301      	movs	r3, #1
 8016516:	9901      	ldr	r1, [sp, #4]
 8016518:	9800      	ldr	r0, [sp, #0]
 801651a:	9f08      	ldr	r7, [sp, #32]
 801651c:	3219      	adds	r2, #25
 801651e:	47b8      	blx	r7
 8016520:	3001      	adds	r0, #1
 8016522:	d1f0      	bne.n	8016506 <_printf_common+0x8a>
 8016524:	2001      	movs	r0, #1
 8016526:	4240      	negs	r0, r0
 8016528:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801652a:	2030      	movs	r0, #48	@ 0x30
 801652c:	18e1      	adds	r1, r4, r3
 801652e:	3143      	adds	r1, #67	@ 0x43
 8016530:	7008      	strb	r0, [r1, #0]
 8016532:	0021      	movs	r1, r4
 8016534:	1c5a      	adds	r2, r3, #1
 8016536:	3145      	adds	r1, #69	@ 0x45
 8016538:	7809      	ldrb	r1, [r1, #0]
 801653a:	18a2      	adds	r2, r4, r2
 801653c:	3243      	adds	r2, #67	@ 0x43
 801653e:	3302      	adds	r3, #2
 8016540:	7011      	strb	r1, [r2, #0]
 8016542:	e7c1      	b.n	80164c8 <_printf_common+0x4c>
 8016544:	0022      	movs	r2, r4
 8016546:	2301      	movs	r3, #1
 8016548:	9901      	ldr	r1, [sp, #4]
 801654a:	9800      	ldr	r0, [sp, #0]
 801654c:	9f08      	ldr	r7, [sp, #32]
 801654e:	321a      	adds	r2, #26
 8016550:	47b8      	blx	r7
 8016552:	3001      	adds	r0, #1
 8016554:	d0e6      	beq.n	8016524 <_printf_common+0xa8>
 8016556:	3601      	adds	r6, #1
 8016558:	e7d1      	b.n	80164fe <_printf_common+0x82>
	...

0801655c <_printf_i>:
 801655c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801655e:	b08b      	sub	sp, #44	@ 0x2c
 8016560:	9206      	str	r2, [sp, #24]
 8016562:	000a      	movs	r2, r1
 8016564:	3243      	adds	r2, #67	@ 0x43
 8016566:	9307      	str	r3, [sp, #28]
 8016568:	9005      	str	r0, [sp, #20]
 801656a:	9203      	str	r2, [sp, #12]
 801656c:	7e0a      	ldrb	r2, [r1, #24]
 801656e:	000c      	movs	r4, r1
 8016570:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016572:	2a78      	cmp	r2, #120	@ 0x78
 8016574:	d809      	bhi.n	801658a <_printf_i+0x2e>
 8016576:	2a62      	cmp	r2, #98	@ 0x62
 8016578:	d80b      	bhi.n	8016592 <_printf_i+0x36>
 801657a:	2a00      	cmp	r2, #0
 801657c:	d100      	bne.n	8016580 <_printf_i+0x24>
 801657e:	e0bc      	b.n	80166fa <_printf_i+0x19e>
 8016580:	497b      	ldr	r1, [pc, #492]	@ (8016770 <_printf_i+0x214>)
 8016582:	9104      	str	r1, [sp, #16]
 8016584:	2a58      	cmp	r2, #88	@ 0x58
 8016586:	d100      	bne.n	801658a <_printf_i+0x2e>
 8016588:	e090      	b.n	80166ac <_printf_i+0x150>
 801658a:	0025      	movs	r5, r4
 801658c:	3542      	adds	r5, #66	@ 0x42
 801658e:	702a      	strb	r2, [r5, #0]
 8016590:	e022      	b.n	80165d8 <_printf_i+0x7c>
 8016592:	0010      	movs	r0, r2
 8016594:	3863      	subs	r0, #99	@ 0x63
 8016596:	2815      	cmp	r0, #21
 8016598:	d8f7      	bhi.n	801658a <_printf_i+0x2e>
 801659a:	f7e9 fdc7 	bl	800012c <__gnu_thumb1_case_shi>
 801659e:	0016      	.short	0x0016
 80165a0:	fff6001f 	.word	0xfff6001f
 80165a4:	fff6fff6 	.word	0xfff6fff6
 80165a8:	001ffff6 	.word	0x001ffff6
 80165ac:	fff6fff6 	.word	0xfff6fff6
 80165b0:	fff6fff6 	.word	0xfff6fff6
 80165b4:	003600a1 	.word	0x003600a1
 80165b8:	fff60080 	.word	0xfff60080
 80165bc:	00b2fff6 	.word	0x00b2fff6
 80165c0:	0036fff6 	.word	0x0036fff6
 80165c4:	fff6fff6 	.word	0xfff6fff6
 80165c8:	0084      	.short	0x0084
 80165ca:	0025      	movs	r5, r4
 80165cc:	681a      	ldr	r2, [r3, #0]
 80165ce:	3542      	adds	r5, #66	@ 0x42
 80165d0:	1d11      	adds	r1, r2, #4
 80165d2:	6019      	str	r1, [r3, #0]
 80165d4:	6813      	ldr	r3, [r2, #0]
 80165d6:	702b      	strb	r3, [r5, #0]
 80165d8:	2301      	movs	r3, #1
 80165da:	e0a0      	b.n	801671e <_printf_i+0x1c2>
 80165dc:	6818      	ldr	r0, [r3, #0]
 80165de:	6809      	ldr	r1, [r1, #0]
 80165e0:	1d02      	adds	r2, r0, #4
 80165e2:	060d      	lsls	r5, r1, #24
 80165e4:	d50b      	bpl.n	80165fe <_printf_i+0xa2>
 80165e6:	6806      	ldr	r6, [r0, #0]
 80165e8:	601a      	str	r2, [r3, #0]
 80165ea:	2e00      	cmp	r6, #0
 80165ec:	da03      	bge.n	80165f6 <_printf_i+0x9a>
 80165ee:	232d      	movs	r3, #45	@ 0x2d
 80165f0:	9a03      	ldr	r2, [sp, #12]
 80165f2:	4276      	negs	r6, r6
 80165f4:	7013      	strb	r3, [r2, #0]
 80165f6:	4b5e      	ldr	r3, [pc, #376]	@ (8016770 <_printf_i+0x214>)
 80165f8:	270a      	movs	r7, #10
 80165fa:	9304      	str	r3, [sp, #16]
 80165fc:	e018      	b.n	8016630 <_printf_i+0xd4>
 80165fe:	6806      	ldr	r6, [r0, #0]
 8016600:	601a      	str	r2, [r3, #0]
 8016602:	0649      	lsls	r1, r1, #25
 8016604:	d5f1      	bpl.n	80165ea <_printf_i+0x8e>
 8016606:	b236      	sxth	r6, r6
 8016608:	e7ef      	b.n	80165ea <_printf_i+0x8e>
 801660a:	6808      	ldr	r0, [r1, #0]
 801660c:	6819      	ldr	r1, [r3, #0]
 801660e:	c940      	ldmia	r1!, {r6}
 8016610:	0605      	lsls	r5, r0, #24
 8016612:	d402      	bmi.n	801661a <_printf_i+0xbe>
 8016614:	0640      	lsls	r0, r0, #25
 8016616:	d500      	bpl.n	801661a <_printf_i+0xbe>
 8016618:	b2b6      	uxth	r6, r6
 801661a:	6019      	str	r1, [r3, #0]
 801661c:	4b54      	ldr	r3, [pc, #336]	@ (8016770 <_printf_i+0x214>)
 801661e:	270a      	movs	r7, #10
 8016620:	9304      	str	r3, [sp, #16]
 8016622:	2a6f      	cmp	r2, #111	@ 0x6f
 8016624:	d100      	bne.n	8016628 <_printf_i+0xcc>
 8016626:	3f02      	subs	r7, #2
 8016628:	0023      	movs	r3, r4
 801662a:	2200      	movs	r2, #0
 801662c:	3343      	adds	r3, #67	@ 0x43
 801662e:	701a      	strb	r2, [r3, #0]
 8016630:	6863      	ldr	r3, [r4, #4]
 8016632:	60a3      	str	r3, [r4, #8]
 8016634:	2b00      	cmp	r3, #0
 8016636:	db03      	blt.n	8016640 <_printf_i+0xe4>
 8016638:	2104      	movs	r1, #4
 801663a:	6822      	ldr	r2, [r4, #0]
 801663c:	438a      	bics	r2, r1
 801663e:	6022      	str	r2, [r4, #0]
 8016640:	2e00      	cmp	r6, #0
 8016642:	d102      	bne.n	801664a <_printf_i+0xee>
 8016644:	9d03      	ldr	r5, [sp, #12]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d00c      	beq.n	8016664 <_printf_i+0x108>
 801664a:	9d03      	ldr	r5, [sp, #12]
 801664c:	0030      	movs	r0, r6
 801664e:	0039      	movs	r1, r7
 8016650:	f7e9 fdfc 	bl	800024c <__aeabi_uidivmod>
 8016654:	9b04      	ldr	r3, [sp, #16]
 8016656:	3d01      	subs	r5, #1
 8016658:	5c5b      	ldrb	r3, [r3, r1]
 801665a:	702b      	strb	r3, [r5, #0]
 801665c:	0033      	movs	r3, r6
 801665e:	0006      	movs	r6, r0
 8016660:	429f      	cmp	r7, r3
 8016662:	d9f3      	bls.n	801664c <_printf_i+0xf0>
 8016664:	2f08      	cmp	r7, #8
 8016666:	d109      	bne.n	801667c <_printf_i+0x120>
 8016668:	6823      	ldr	r3, [r4, #0]
 801666a:	07db      	lsls	r3, r3, #31
 801666c:	d506      	bpl.n	801667c <_printf_i+0x120>
 801666e:	6862      	ldr	r2, [r4, #4]
 8016670:	6923      	ldr	r3, [r4, #16]
 8016672:	429a      	cmp	r2, r3
 8016674:	dc02      	bgt.n	801667c <_printf_i+0x120>
 8016676:	2330      	movs	r3, #48	@ 0x30
 8016678:	3d01      	subs	r5, #1
 801667a:	702b      	strb	r3, [r5, #0]
 801667c:	9b03      	ldr	r3, [sp, #12]
 801667e:	1b5b      	subs	r3, r3, r5
 8016680:	6123      	str	r3, [r4, #16]
 8016682:	9b07      	ldr	r3, [sp, #28]
 8016684:	0021      	movs	r1, r4
 8016686:	9300      	str	r3, [sp, #0]
 8016688:	9805      	ldr	r0, [sp, #20]
 801668a:	9b06      	ldr	r3, [sp, #24]
 801668c:	aa09      	add	r2, sp, #36	@ 0x24
 801668e:	f7ff fef5 	bl	801647c <_printf_common>
 8016692:	3001      	adds	r0, #1
 8016694:	d148      	bne.n	8016728 <_printf_i+0x1cc>
 8016696:	2001      	movs	r0, #1
 8016698:	4240      	negs	r0, r0
 801669a:	b00b      	add	sp, #44	@ 0x2c
 801669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801669e:	2220      	movs	r2, #32
 80166a0:	6809      	ldr	r1, [r1, #0]
 80166a2:	430a      	orrs	r2, r1
 80166a4:	6022      	str	r2, [r4, #0]
 80166a6:	2278      	movs	r2, #120	@ 0x78
 80166a8:	4932      	ldr	r1, [pc, #200]	@ (8016774 <_printf_i+0x218>)
 80166aa:	9104      	str	r1, [sp, #16]
 80166ac:	0021      	movs	r1, r4
 80166ae:	3145      	adds	r1, #69	@ 0x45
 80166b0:	700a      	strb	r2, [r1, #0]
 80166b2:	6819      	ldr	r1, [r3, #0]
 80166b4:	6822      	ldr	r2, [r4, #0]
 80166b6:	c940      	ldmia	r1!, {r6}
 80166b8:	0610      	lsls	r0, r2, #24
 80166ba:	d402      	bmi.n	80166c2 <_printf_i+0x166>
 80166bc:	0650      	lsls	r0, r2, #25
 80166be:	d500      	bpl.n	80166c2 <_printf_i+0x166>
 80166c0:	b2b6      	uxth	r6, r6
 80166c2:	6019      	str	r1, [r3, #0]
 80166c4:	07d3      	lsls	r3, r2, #31
 80166c6:	d502      	bpl.n	80166ce <_printf_i+0x172>
 80166c8:	2320      	movs	r3, #32
 80166ca:	4313      	orrs	r3, r2
 80166cc:	6023      	str	r3, [r4, #0]
 80166ce:	2e00      	cmp	r6, #0
 80166d0:	d001      	beq.n	80166d6 <_printf_i+0x17a>
 80166d2:	2710      	movs	r7, #16
 80166d4:	e7a8      	b.n	8016628 <_printf_i+0xcc>
 80166d6:	2220      	movs	r2, #32
 80166d8:	6823      	ldr	r3, [r4, #0]
 80166da:	4393      	bics	r3, r2
 80166dc:	6023      	str	r3, [r4, #0]
 80166de:	e7f8      	b.n	80166d2 <_printf_i+0x176>
 80166e0:	681a      	ldr	r2, [r3, #0]
 80166e2:	680d      	ldr	r5, [r1, #0]
 80166e4:	1d10      	adds	r0, r2, #4
 80166e6:	6949      	ldr	r1, [r1, #20]
 80166e8:	6018      	str	r0, [r3, #0]
 80166ea:	6813      	ldr	r3, [r2, #0]
 80166ec:	062e      	lsls	r6, r5, #24
 80166ee:	d501      	bpl.n	80166f4 <_printf_i+0x198>
 80166f0:	6019      	str	r1, [r3, #0]
 80166f2:	e002      	b.n	80166fa <_printf_i+0x19e>
 80166f4:	066d      	lsls	r5, r5, #25
 80166f6:	d5fb      	bpl.n	80166f0 <_printf_i+0x194>
 80166f8:	8019      	strh	r1, [r3, #0]
 80166fa:	2300      	movs	r3, #0
 80166fc:	9d03      	ldr	r5, [sp, #12]
 80166fe:	6123      	str	r3, [r4, #16]
 8016700:	e7bf      	b.n	8016682 <_printf_i+0x126>
 8016702:	681a      	ldr	r2, [r3, #0]
 8016704:	1d11      	adds	r1, r2, #4
 8016706:	6019      	str	r1, [r3, #0]
 8016708:	6815      	ldr	r5, [r2, #0]
 801670a:	2100      	movs	r1, #0
 801670c:	0028      	movs	r0, r5
 801670e:	6862      	ldr	r2, [r4, #4]
 8016710:	f000 fa5b 	bl	8016bca <memchr>
 8016714:	2800      	cmp	r0, #0
 8016716:	d001      	beq.n	801671c <_printf_i+0x1c0>
 8016718:	1b40      	subs	r0, r0, r5
 801671a:	6060      	str	r0, [r4, #4]
 801671c:	6863      	ldr	r3, [r4, #4]
 801671e:	6123      	str	r3, [r4, #16]
 8016720:	2300      	movs	r3, #0
 8016722:	9a03      	ldr	r2, [sp, #12]
 8016724:	7013      	strb	r3, [r2, #0]
 8016726:	e7ac      	b.n	8016682 <_printf_i+0x126>
 8016728:	002a      	movs	r2, r5
 801672a:	6923      	ldr	r3, [r4, #16]
 801672c:	9906      	ldr	r1, [sp, #24]
 801672e:	9805      	ldr	r0, [sp, #20]
 8016730:	9d07      	ldr	r5, [sp, #28]
 8016732:	47a8      	blx	r5
 8016734:	3001      	adds	r0, #1
 8016736:	d0ae      	beq.n	8016696 <_printf_i+0x13a>
 8016738:	6823      	ldr	r3, [r4, #0]
 801673a:	079b      	lsls	r3, r3, #30
 801673c:	d415      	bmi.n	801676a <_printf_i+0x20e>
 801673e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016740:	68e0      	ldr	r0, [r4, #12]
 8016742:	4298      	cmp	r0, r3
 8016744:	daa9      	bge.n	801669a <_printf_i+0x13e>
 8016746:	0018      	movs	r0, r3
 8016748:	e7a7      	b.n	801669a <_printf_i+0x13e>
 801674a:	0022      	movs	r2, r4
 801674c:	2301      	movs	r3, #1
 801674e:	9906      	ldr	r1, [sp, #24]
 8016750:	9805      	ldr	r0, [sp, #20]
 8016752:	9e07      	ldr	r6, [sp, #28]
 8016754:	3219      	adds	r2, #25
 8016756:	47b0      	blx	r6
 8016758:	3001      	adds	r0, #1
 801675a:	d09c      	beq.n	8016696 <_printf_i+0x13a>
 801675c:	3501      	adds	r5, #1
 801675e:	68e3      	ldr	r3, [r4, #12]
 8016760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016762:	1a9b      	subs	r3, r3, r2
 8016764:	42ab      	cmp	r3, r5
 8016766:	dcf0      	bgt.n	801674a <_printf_i+0x1ee>
 8016768:	e7e9      	b.n	801673e <_printf_i+0x1e2>
 801676a:	2500      	movs	r5, #0
 801676c:	e7f7      	b.n	801675e <_printf_i+0x202>
 801676e:	46c0      	nop			@ (mov r8, r8)
 8016770:	0801a57a 	.word	0x0801a57a
 8016774:	0801a58b 	.word	0x0801a58b

08016778 <std>:
 8016778:	2300      	movs	r3, #0
 801677a:	b510      	push	{r4, lr}
 801677c:	0004      	movs	r4, r0
 801677e:	6003      	str	r3, [r0, #0]
 8016780:	6043      	str	r3, [r0, #4]
 8016782:	6083      	str	r3, [r0, #8]
 8016784:	8181      	strh	r1, [r0, #12]
 8016786:	6643      	str	r3, [r0, #100]	@ 0x64
 8016788:	81c2      	strh	r2, [r0, #14]
 801678a:	6103      	str	r3, [r0, #16]
 801678c:	6143      	str	r3, [r0, #20]
 801678e:	6183      	str	r3, [r0, #24]
 8016790:	0019      	movs	r1, r3
 8016792:	2208      	movs	r2, #8
 8016794:	305c      	adds	r0, #92	@ 0x5c
 8016796:	f000 f967 	bl	8016a68 <memset>
 801679a:	4b0b      	ldr	r3, [pc, #44]	@ (80167c8 <std+0x50>)
 801679c:	6224      	str	r4, [r4, #32]
 801679e:	6263      	str	r3, [r4, #36]	@ 0x24
 80167a0:	4b0a      	ldr	r3, [pc, #40]	@ (80167cc <std+0x54>)
 80167a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80167a4:	4b0a      	ldr	r3, [pc, #40]	@ (80167d0 <std+0x58>)
 80167a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80167a8:	4b0a      	ldr	r3, [pc, #40]	@ (80167d4 <std+0x5c>)
 80167aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80167ac:	4b0a      	ldr	r3, [pc, #40]	@ (80167d8 <std+0x60>)
 80167ae:	429c      	cmp	r4, r3
 80167b0:	d005      	beq.n	80167be <std+0x46>
 80167b2:	4b0a      	ldr	r3, [pc, #40]	@ (80167dc <std+0x64>)
 80167b4:	429c      	cmp	r4, r3
 80167b6:	d002      	beq.n	80167be <std+0x46>
 80167b8:	4b09      	ldr	r3, [pc, #36]	@ (80167e0 <std+0x68>)
 80167ba:	429c      	cmp	r4, r3
 80167bc:	d103      	bne.n	80167c6 <std+0x4e>
 80167be:	0020      	movs	r0, r4
 80167c0:	3058      	adds	r0, #88	@ 0x58
 80167c2:	f000 f9ff 	bl	8016bc4 <__retarget_lock_init_recursive>
 80167c6:	bd10      	pop	{r4, pc}
 80167c8:	08016961 	.word	0x08016961
 80167cc:	08016989 	.word	0x08016989
 80167d0:	080169c1 	.word	0x080169c1
 80167d4:	080169ed 	.word	0x080169ed
 80167d8:	20004294 	.word	0x20004294
 80167dc:	200042fc 	.word	0x200042fc
 80167e0:	20004364 	.word	0x20004364

080167e4 <stdio_exit_handler>:
 80167e4:	b510      	push	{r4, lr}
 80167e6:	4a03      	ldr	r2, [pc, #12]	@ (80167f4 <stdio_exit_handler+0x10>)
 80167e8:	4903      	ldr	r1, [pc, #12]	@ (80167f8 <stdio_exit_handler+0x14>)
 80167ea:	4804      	ldr	r0, [pc, #16]	@ (80167fc <stdio_exit_handler+0x18>)
 80167ec:	f000 f86c 	bl	80168c8 <_fwalk_sglue>
 80167f0:	bd10      	pop	{r4, pc}
 80167f2:	46c0      	nop			@ (mov r8, r8)
 80167f4:	200002c8 	.word	0x200002c8
 80167f8:	0801889d 	.word	0x0801889d
 80167fc:	200002d8 	.word	0x200002d8

08016800 <cleanup_stdio>:
 8016800:	6841      	ldr	r1, [r0, #4]
 8016802:	4b0b      	ldr	r3, [pc, #44]	@ (8016830 <cleanup_stdio+0x30>)
 8016804:	b510      	push	{r4, lr}
 8016806:	0004      	movs	r4, r0
 8016808:	4299      	cmp	r1, r3
 801680a:	d001      	beq.n	8016810 <cleanup_stdio+0x10>
 801680c:	f002 f846 	bl	801889c <_fflush_r>
 8016810:	68a1      	ldr	r1, [r4, #8]
 8016812:	4b08      	ldr	r3, [pc, #32]	@ (8016834 <cleanup_stdio+0x34>)
 8016814:	4299      	cmp	r1, r3
 8016816:	d002      	beq.n	801681e <cleanup_stdio+0x1e>
 8016818:	0020      	movs	r0, r4
 801681a:	f002 f83f 	bl	801889c <_fflush_r>
 801681e:	68e1      	ldr	r1, [r4, #12]
 8016820:	4b05      	ldr	r3, [pc, #20]	@ (8016838 <cleanup_stdio+0x38>)
 8016822:	4299      	cmp	r1, r3
 8016824:	d002      	beq.n	801682c <cleanup_stdio+0x2c>
 8016826:	0020      	movs	r0, r4
 8016828:	f002 f838 	bl	801889c <_fflush_r>
 801682c:	bd10      	pop	{r4, pc}
 801682e:	46c0      	nop			@ (mov r8, r8)
 8016830:	20004294 	.word	0x20004294
 8016834:	200042fc 	.word	0x200042fc
 8016838:	20004364 	.word	0x20004364

0801683c <global_stdio_init.part.0>:
 801683c:	b510      	push	{r4, lr}
 801683e:	4b09      	ldr	r3, [pc, #36]	@ (8016864 <global_stdio_init.part.0+0x28>)
 8016840:	4a09      	ldr	r2, [pc, #36]	@ (8016868 <global_stdio_init.part.0+0x2c>)
 8016842:	2104      	movs	r1, #4
 8016844:	601a      	str	r2, [r3, #0]
 8016846:	4809      	ldr	r0, [pc, #36]	@ (801686c <global_stdio_init.part.0+0x30>)
 8016848:	2200      	movs	r2, #0
 801684a:	f7ff ff95 	bl	8016778 <std>
 801684e:	2201      	movs	r2, #1
 8016850:	2109      	movs	r1, #9
 8016852:	4807      	ldr	r0, [pc, #28]	@ (8016870 <global_stdio_init.part.0+0x34>)
 8016854:	f7ff ff90 	bl	8016778 <std>
 8016858:	2202      	movs	r2, #2
 801685a:	2112      	movs	r1, #18
 801685c:	4805      	ldr	r0, [pc, #20]	@ (8016874 <global_stdio_init.part.0+0x38>)
 801685e:	f7ff ff8b 	bl	8016778 <std>
 8016862:	bd10      	pop	{r4, pc}
 8016864:	200043cc 	.word	0x200043cc
 8016868:	080167e5 	.word	0x080167e5
 801686c:	20004294 	.word	0x20004294
 8016870:	200042fc 	.word	0x200042fc
 8016874:	20004364 	.word	0x20004364

08016878 <__sfp_lock_acquire>:
 8016878:	b510      	push	{r4, lr}
 801687a:	4802      	ldr	r0, [pc, #8]	@ (8016884 <__sfp_lock_acquire+0xc>)
 801687c:	f000 f9a3 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 8016880:	bd10      	pop	{r4, pc}
 8016882:	46c0      	nop			@ (mov r8, r8)
 8016884:	200043d5 	.word	0x200043d5

08016888 <__sfp_lock_release>:
 8016888:	b510      	push	{r4, lr}
 801688a:	4802      	ldr	r0, [pc, #8]	@ (8016894 <__sfp_lock_release+0xc>)
 801688c:	f000 f99c 	bl	8016bc8 <__retarget_lock_release_recursive>
 8016890:	bd10      	pop	{r4, pc}
 8016892:	46c0      	nop			@ (mov r8, r8)
 8016894:	200043d5 	.word	0x200043d5

08016898 <__sinit>:
 8016898:	b510      	push	{r4, lr}
 801689a:	0004      	movs	r4, r0
 801689c:	f7ff ffec 	bl	8016878 <__sfp_lock_acquire>
 80168a0:	6a23      	ldr	r3, [r4, #32]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d002      	beq.n	80168ac <__sinit+0x14>
 80168a6:	f7ff ffef 	bl	8016888 <__sfp_lock_release>
 80168aa:	bd10      	pop	{r4, pc}
 80168ac:	4b04      	ldr	r3, [pc, #16]	@ (80168c0 <__sinit+0x28>)
 80168ae:	6223      	str	r3, [r4, #32]
 80168b0:	4b04      	ldr	r3, [pc, #16]	@ (80168c4 <__sinit+0x2c>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1f6      	bne.n	80168a6 <__sinit+0xe>
 80168b8:	f7ff ffc0 	bl	801683c <global_stdio_init.part.0>
 80168bc:	e7f3      	b.n	80168a6 <__sinit+0xe>
 80168be:	46c0      	nop			@ (mov r8, r8)
 80168c0:	08016801 	.word	0x08016801
 80168c4:	200043cc 	.word	0x200043cc

080168c8 <_fwalk_sglue>:
 80168c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80168ca:	0014      	movs	r4, r2
 80168cc:	2600      	movs	r6, #0
 80168ce:	9000      	str	r0, [sp, #0]
 80168d0:	9101      	str	r1, [sp, #4]
 80168d2:	68a5      	ldr	r5, [r4, #8]
 80168d4:	6867      	ldr	r7, [r4, #4]
 80168d6:	3f01      	subs	r7, #1
 80168d8:	d504      	bpl.n	80168e4 <_fwalk_sglue+0x1c>
 80168da:	6824      	ldr	r4, [r4, #0]
 80168dc:	2c00      	cmp	r4, #0
 80168de:	d1f8      	bne.n	80168d2 <_fwalk_sglue+0xa>
 80168e0:	0030      	movs	r0, r6
 80168e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80168e4:	89ab      	ldrh	r3, [r5, #12]
 80168e6:	2b01      	cmp	r3, #1
 80168e8:	d908      	bls.n	80168fc <_fwalk_sglue+0x34>
 80168ea:	220e      	movs	r2, #14
 80168ec:	5eab      	ldrsh	r3, [r5, r2]
 80168ee:	3301      	adds	r3, #1
 80168f0:	d004      	beq.n	80168fc <_fwalk_sglue+0x34>
 80168f2:	0029      	movs	r1, r5
 80168f4:	9800      	ldr	r0, [sp, #0]
 80168f6:	9b01      	ldr	r3, [sp, #4]
 80168f8:	4798      	blx	r3
 80168fa:	4306      	orrs	r6, r0
 80168fc:	3568      	adds	r5, #104	@ 0x68
 80168fe:	e7ea      	b.n	80168d6 <_fwalk_sglue+0xe>

08016900 <iprintf>:
 8016900:	b40f      	push	{r0, r1, r2, r3}
 8016902:	b507      	push	{r0, r1, r2, lr}
 8016904:	4905      	ldr	r1, [pc, #20]	@ (801691c <iprintf+0x1c>)
 8016906:	ab04      	add	r3, sp, #16
 8016908:	6808      	ldr	r0, [r1, #0]
 801690a:	cb04      	ldmia	r3!, {r2}
 801690c:	6881      	ldr	r1, [r0, #8]
 801690e:	9301      	str	r3, [sp, #4]
 8016910:	f001 fe22 	bl	8018558 <_vfiprintf_r>
 8016914:	b003      	add	sp, #12
 8016916:	bc08      	pop	{r3}
 8016918:	b004      	add	sp, #16
 801691a:	4718      	bx	r3
 801691c:	200002d4 	.word	0x200002d4

08016920 <siprintf>:
 8016920:	b40e      	push	{r1, r2, r3}
 8016922:	b500      	push	{lr}
 8016924:	490b      	ldr	r1, [pc, #44]	@ (8016954 <siprintf+0x34>)
 8016926:	b09c      	sub	sp, #112	@ 0x70
 8016928:	ab1d      	add	r3, sp, #116	@ 0x74
 801692a:	9002      	str	r0, [sp, #8]
 801692c:	9006      	str	r0, [sp, #24]
 801692e:	9107      	str	r1, [sp, #28]
 8016930:	9104      	str	r1, [sp, #16]
 8016932:	4809      	ldr	r0, [pc, #36]	@ (8016958 <siprintf+0x38>)
 8016934:	4909      	ldr	r1, [pc, #36]	@ (801695c <siprintf+0x3c>)
 8016936:	cb04      	ldmia	r3!, {r2}
 8016938:	9105      	str	r1, [sp, #20]
 801693a:	6800      	ldr	r0, [r0, #0]
 801693c:	a902      	add	r1, sp, #8
 801693e:	9301      	str	r3, [sp, #4]
 8016940:	f001 fce4 	bl	801830c <_svfiprintf_r>
 8016944:	2200      	movs	r2, #0
 8016946:	9b02      	ldr	r3, [sp, #8]
 8016948:	701a      	strb	r2, [r3, #0]
 801694a:	b01c      	add	sp, #112	@ 0x70
 801694c:	bc08      	pop	{r3}
 801694e:	b003      	add	sp, #12
 8016950:	4718      	bx	r3
 8016952:	46c0      	nop			@ (mov r8, r8)
 8016954:	7fffffff 	.word	0x7fffffff
 8016958:	200002d4 	.word	0x200002d4
 801695c:	ffff0208 	.word	0xffff0208

08016960 <__sread>:
 8016960:	b570      	push	{r4, r5, r6, lr}
 8016962:	000c      	movs	r4, r1
 8016964:	250e      	movs	r5, #14
 8016966:	5f49      	ldrsh	r1, [r1, r5]
 8016968:	f000 f8da 	bl	8016b20 <_read_r>
 801696c:	2800      	cmp	r0, #0
 801696e:	db03      	blt.n	8016978 <__sread+0x18>
 8016970:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016972:	181b      	adds	r3, r3, r0
 8016974:	6563      	str	r3, [r4, #84]	@ 0x54
 8016976:	bd70      	pop	{r4, r5, r6, pc}
 8016978:	89a3      	ldrh	r3, [r4, #12]
 801697a:	4a02      	ldr	r2, [pc, #8]	@ (8016984 <__sread+0x24>)
 801697c:	4013      	ands	r3, r2
 801697e:	81a3      	strh	r3, [r4, #12]
 8016980:	e7f9      	b.n	8016976 <__sread+0x16>
 8016982:	46c0      	nop			@ (mov r8, r8)
 8016984:	ffffefff 	.word	0xffffefff

08016988 <__swrite>:
 8016988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801698a:	001f      	movs	r7, r3
 801698c:	898b      	ldrh	r3, [r1, #12]
 801698e:	0005      	movs	r5, r0
 8016990:	000c      	movs	r4, r1
 8016992:	0016      	movs	r6, r2
 8016994:	05db      	lsls	r3, r3, #23
 8016996:	d505      	bpl.n	80169a4 <__swrite+0x1c>
 8016998:	230e      	movs	r3, #14
 801699a:	5ec9      	ldrsh	r1, [r1, r3]
 801699c:	2200      	movs	r2, #0
 801699e:	2302      	movs	r3, #2
 80169a0:	f000 f8aa 	bl	8016af8 <_lseek_r>
 80169a4:	89a3      	ldrh	r3, [r4, #12]
 80169a6:	4a05      	ldr	r2, [pc, #20]	@ (80169bc <__swrite+0x34>)
 80169a8:	0028      	movs	r0, r5
 80169aa:	4013      	ands	r3, r2
 80169ac:	81a3      	strh	r3, [r4, #12]
 80169ae:	0032      	movs	r2, r6
 80169b0:	230e      	movs	r3, #14
 80169b2:	5ee1      	ldrsh	r1, [r4, r3]
 80169b4:	003b      	movs	r3, r7
 80169b6:	f000 f8c7 	bl	8016b48 <_write_r>
 80169ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169bc:	ffffefff 	.word	0xffffefff

080169c0 <__sseek>:
 80169c0:	b570      	push	{r4, r5, r6, lr}
 80169c2:	000c      	movs	r4, r1
 80169c4:	250e      	movs	r5, #14
 80169c6:	5f49      	ldrsh	r1, [r1, r5]
 80169c8:	f000 f896 	bl	8016af8 <_lseek_r>
 80169cc:	89a3      	ldrh	r3, [r4, #12]
 80169ce:	1c42      	adds	r2, r0, #1
 80169d0:	d103      	bne.n	80169da <__sseek+0x1a>
 80169d2:	4a05      	ldr	r2, [pc, #20]	@ (80169e8 <__sseek+0x28>)
 80169d4:	4013      	ands	r3, r2
 80169d6:	81a3      	strh	r3, [r4, #12]
 80169d8:	bd70      	pop	{r4, r5, r6, pc}
 80169da:	2280      	movs	r2, #128	@ 0x80
 80169dc:	0152      	lsls	r2, r2, #5
 80169de:	4313      	orrs	r3, r2
 80169e0:	81a3      	strh	r3, [r4, #12]
 80169e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80169e4:	e7f8      	b.n	80169d8 <__sseek+0x18>
 80169e6:	46c0      	nop			@ (mov r8, r8)
 80169e8:	ffffefff 	.word	0xffffefff

080169ec <__sclose>:
 80169ec:	b510      	push	{r4, lr}
 80169ee:	230e      	movs	r3, #14
 80169f0:	5ec9      	ldrsh	r1, [r1, r3]
 80169f2:	f000 f86f 	bl	8016ad4 <_close_r>
 80169f6:	bd10      	pop	{r4, pc}

080169f8 <_vsniprintf_r>:
 80169f8:	b530      	push	{r4, r5, lr}
 80169fa:	0014      	movs	r4, r2
 80169fc:	0005      	movs	r5, r0
 80169fe:	001a      	movs	r2, r3
 8016a00:	b09b      	sub	sp, #108	@ 0x6c
 8016a02:	2c00      	cmp	r4, #0
 8016a04:	da05      	bge.n	8016a12 <_vsniprintf_r+0x1a>
 8016a06:	238b      	movs	r3, #139	@ 0x8b
 8016a08:	6003      	str	r3, [r0, #0]
 8016a0a:	2001      	movs	r0, #1
 8016a0c:	4240      	negs	r0, r0
 8016a0e:	b01b      	add	sp, #108	@ 0x6c
 8016a10:	bd30      	pop	{r4, r5, pc}
 8016a12:	2382      	movs	r3, #130	@ 0x82
 8016a14:	4668      	mov	r0, sp
 8016a16:	009b      	lsls	r3, r3, #2
 8016a18:	8183      	strh	r3, [r0, #12]
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	9100      	str	r1, [sp, #0]
 8016a1e:	9104      	str	r1, [sp, #16]
 8016a20:	429c      	cmp	r4, r3
 8016a22:	d000      	beq.n	8016a26 <_vsniprintf_r+0x2e>
 8016a24:	1e63      	subs	r3, r4, #1
 8016a26:	9302      	str	r3, [sp, #8]
 8016a28:	9305      	str	r3, [sp, #20]
 8016a2a:	2301      	movs	r3, #1
 8016a2c:	4669      	mov	r1, sp
 8016a2e:	425b      	negs	r3, r3
 8016a30:	81cb      	strh	r3, [r1, #14]
 8016a32:	0028      	movs	r0, r5
 8016a34:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016a36:	f001 fc69 	bl	801830c <_svfiprintf_r>
 8016a3a:	1c43      	adds	r3, r0, #1
 8016a3c:	da01      	bge.n	8016a42 <_vsniprintf_r+0x4a>
 8016a3e:	238b      	movs	r3, #139	@ 0x8b
 8016a40:	602b      	str	r3, [r5, #0]
 8016a42:	2c00      	cmp	r4, #0
 8016a44:	d0e3      	beq.n	8016a0e <_vsniprintf_r+0x16>
 8016a46:	2200      	movs	r2, #0
 8016a48:	9b00      	ldr	r3, [sp, #0]
 8016a4a:	701a      	strb	r2, [r3, #0]
 8016a4c:	e7df      	b.n	8016a0e <_vsniprintf_r+0x16>
	...

08016a50 <vsniprintf>:
 8016a50:	b513      	push	{r0, r1, r4, lr}
 8016a52:	4c04      	ldr	r4, [pc, #16]	@ (8016a64 <vsniprintf+0x14>)
 8016a54:	9300      	str	r3, [sp, #0]
 8016a56:	0013      	movs	r3, r2
 8016a58:	000a      	movs	r2, r1
 8016a5a:	0001      	movs	r1, r0
 8016a5c:	6820      	ldr	r0, [r4, #0]
 8016a5e:	f7ff ffcb 	bl	80169f8 <_vsniprintf_r>
 8016a62:	bd16      	pop	{r1, r2, r4, pc}
 8016a64:	200002d4 	.word	0x200002d4

08016a68 <memset>:
 8016a68:	0003      	movs	r3, r0
 8016a6a:	1882      	adds	r2, r0, r2
 8016a6c:	4293      	cmp	r3, r2
 8016a6e:	d100      	bne.n	8016a72 <memset+0xa>
 8016a70:	4770      	bx	lr
 8016a72:	7019      	strb	r1, [r3, #0]
 8016a74:	3301      	adds	r3, #1
 8016a76:	e7f9      	b.n	8016a6c <memset+0x4>

08016a78 <strncpy>:
 8016a78:	0003      	movs	r3, r0
 8016a7a:	b530      	push	{r4, r5, lr}
 8016a7c:	001d      	movs	r5, r3
 8016a7e:	2a00      	cmp	r2, #0
 8016a80:	d006      	beq.n	8016a90 <strncpy+0x18>
 8016a82:	780c      	ldrb	r4, [r1, #0]
 8016a84:	3a01      	subs	r2, #1
 8016a86:	3301      	adds	r3, #1
 8016a88:	702c      	strb	r4, [r5, #0]
 8016a8a:	3101      	adds	r1, #1
 8016a8c:	2c00      	cmp	r4, #0
 8016a8e:	d1f5      	bne.n	8016a7c <strncpy+0x4>
 8016a90:	2100      	movs	r1, #0
 8016a92:	189a      	adds	r2, r3, r2
 8016a94:	4293      	cmp	r3, r2
 8016a96:	d100      	bne.n	8016a9a <strncpy+0x22>
 8016a98:	bd30      	pop	{r4, r5, pc}
 8016a9a:	7019      	strb	r1, [r3, #0]
 8016a9c:	3301      	adds	r3, #1
 8016a9e:	e7f9      	b.n	8016a94 <strncpy+0x1c>

08016aa0 <strstr>:
 8016aa0:	780a      	ldrb	r2, [r1, #0]
 8016aa2:	b530      	push	{r4, r5, lr}
 8016aa4:	2a00      	cmp	r2, #0
 8016aa6:	d10c      	bne.n	8016ac2 <strstr+0x22>
 8016aa8:	bd30      	pop	{r4, r5, pc}
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d108      	bne.n	8016ac0 <strstr+0x20>
 8016aae:	2301      	movs	r3, #1
 8016ab0:	5ccc      	ldrb	r4, [r1, r3]
 8016ab2:	2c00      	cmp	r4, #0
 8016ab4:	d0f8      	beq.n	8016aa8 <strstr+0x8>
 8016ab6:	5cc5      	ldrb	r5, [r0, r3]
 8016ab8:	42a5      	cmp	r5, r4
 8016aba:	d101      	bne.n	8016ac0 <strstr+0x20>
 8016abc:	3301      	adds	r3, #1
 8016abe:	e7f7      	b.n	8016ab0 <strstr+0x10>
 8016ac0:	3001      	adds	r0, #1
 8016ac2:	7803      	ldrb	r3, [r0, #0]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d1f0      	bne.n	8016aaa <strstr+0xa>
 8016ac8:	0018      	movs	r0, r3
 8016aca:	e7ed      	b.n	8016aa8 <strstr+0x8>

08016acc <_localeconv_r>:
 8016acc:	4800      	ldr	r0, [pc, #0]	@ (8016ad0 <_localeconv_r+0x4>)
 8016ace:	4770      	bx	lr
 8016ad0:	20000414 	.word	0x20000414

08016ad4 <_close_r>:
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	b570      	push	{r4, r5, r6, lr}
 8016ad8:	4d06      	ldr	r5, [pc, #24]	@ (8016af4 <_close_r+0x20>)
 8016ada:	0004      	movs	r4, r0
 8016adc:	0008      	movs	r0, r1
 8016ade:	602b      	str	r3, [r5, #0]
 8016ae0:	f7f1 fc64 	bl	80083ac <_close>
 8016ae4:	1c43      	adds	r3, r0, #1
 8016ae6:	d103      	bne.n	8016af0 <_close_r+0x1c>
 8016ae8:	682b      	ldr	r3, [r5, #0]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d000      	beq.n	8016af0 <_close_r+0x1c>
 8016aee:	6023      	str	r3, [r4, #0]
 8016af0:	bd70      	pop	{r4, r5, r6, pc}
 8016af2:	46c0      	nop			@ (mov r8, r8)
 8016af4:	200043d0 	.word	0x200043d0

08016af8 <_lseek_r>:
 8016af8:	b570      	push	{r4, r5, r6, lr}
 8016afa:	0004      	movs	r4, r0
 8016afc:	0008      	movs	r0, r1
 8016afe:	0011      	movs	r1, r2
 8016b00:	001a      	movs	r2, r3
 8016b02:	2300      	movs	r3, #0
 8016b04:	4d05      	ldr	r5, [pc, #20]	@ (8016b1c <_lseek_r+0x24>)
 8016b06:	602b      	str	r3, [r5, #0]
 8016b08:	f7f1 fc71 	bl	80083ee <_lseek>
 8016b0c:	1c43      	adds	r3, r0, #1
 8016b0e:	d103      	bne.n	8016b18 <_lseek_r+0x20>
 8016b10:	682b      	ldr	r3, [r5, #0]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d000      	beq.n	8016b18 <_lseek_r+0x20>
 8016b16:	6023      	str	r3, [r4, #0]
 8016b18:	bd70      	pop	{r4, r5, r6, pc}
 8016b1a:	46c0      	nop			@ (mov r8, r8)
 8016b1c:	200043d0 	.word	0x200043d0

08016b20 <_read_r>:
 8016b20:	b570      	push	{r4, r5, r6, lr}
 8016b22:	0004      	movs	r4, r0
 8016b24:	0008      	movs	r0, r1
 8016b26:	0011      	movs	r1, r2
 8016b28:	001a      	movs	r2, r3
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	4d05      	ldr	r5, [pc, #20]	@ (8016b44 <_read_r+0x24>)
 8016b2e:	602b      	str	r3, [r5, #0]
 8016b30:	f7f1 fc1f 	bl	8008372 <_read>
 8016b34:	1c43      	adds	r3, r0, #1
 8016b36:	d103      	bne.n	8016b40 <_read_r+0x20>
 8016b38:	682b      	ldr	r3, [r5, #0]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d000      	beq.n	8016b40 <_read_r+0x20>
 8016b3e:	6023      	str	r3, [r4, #0]
 8016b40:	bd70      	pop	{r4, r5, r6, pc}
 8016b42:	46c0      	nop			@ (mov r8, r8)
 8016b44:	200043d0 	.word	0x200043d0

08016b48 <_write_r>:
 8016b48:	b570      	push	{r4, r5, r6, lr}
 8016b4a:	0004      	movs	r4, r0
 8016b4c:	0008      	movs	r0, r1
 8016b4e:	0011      	movs	r1, r2
 8016b50:	001a      	movs	r2, r3
 8016b52:	2300      	movs	r3, #0
 8016b54:	4d05      	ldr	r5, [pc, #20]	@ (8016b6c <_write_r+0x24>)
 8016b56:	602b      	str	r3, [r5, #0]
 8016b58:	f7f2 f82e 	bl	8008bb8 <_write>
 8016b5c:	1c43      	adds	r3, r0, #1
 8016b5e:	d103      	bne.n	8016b68 <_write_r+0x20>
 8016b60:	682b      	ldr	r3, [r5, #0]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d000      	beq.n	8016b68 <_write_r+0x20>
 8016b66:	6023      	str	r3, [r4, #0]
 8016b68:	bd70      	pop	{r4, r5, r6, pc}
 8016b6a:	46c0      	nop			@ (mov r8, r8)
 8016b6c:	200043d0 	.word	0x200043d0

08016b70 <__errno>:
 8016b70:	4b01      	ldr	r3, [pc, #4]	@ (8016b78 <__errno+0x8>)
 8016b72:	6818      	ldr	r0, [r3, #0]
 8016b74:	4770      	bx	lr
 8016b76:	46c0      	nop			@ (mov r8, r8)
 8016b78:	200002d4 	.word	0x200002d4

08016b7c <__libc_init_array>:
 8016b7c:	b570      	push	{r4, r5, r6, lr}
 8016b7e:	2600      	movs	r6, #0
 8016b80:	4c0c      	ldr	r4, [pc, #48]	@ (8016bb4 <__libc_init_array+0x38>)
 8016b82:	4d0d      	ldr	r5, [pc, #52]	@ (8016bb8 <__libc_init_array+0x3c>)
 8016b84:	1b64      	subs	r4, r4, r5
 8016b86:	10a4      	asrs	r4, r4, #2
 8016b88:	42a6      	cmp	r6, r4
 8016b8a:	d109      	bne.n	8016ba0 <__libc_init_array+0x24>
 8016b8c:	2600      	movs	r6, #0
 8016b8e:	f002 fe57 	bl	8019840 <_init>
 8016b92:	4c0a      	ldr	r4, [pc, #40]	@ (8016bbc <__libc_init_array+0x40>)
 8016b94:	4d0a      	ldr	r5, [pc, #40]	@ (8016bc0 <__libc_init_array+0x44>)
 8016b96:	1b64      	subs	r4, r4, r5
 8016b98:	10a4      	asrs	r4, r4, #2
 8016b9a:	42a6      	cmp	r6, r4
 8016b9c:	d105      	bne.n	8016baa <__libc_init_array+0x2e>
 8016b9e:	bd70      	pop	{r4, r5, r6, pc}
 8016ba0:	00b3      	lsls	r3, r6, #2
 8016ba2:	58eb      	ldr	r3, [r5, r3]
 8016ba4:	4798      	blx	r3
 8016ba6:	3601      	adds	r6, #1
 8016ba8:	e7ee      	b.n	8016b88 <__libc_init_array+0xc>
 8016baa:	00b3      	lsls	r3, r6, #2
 8016bac:	58eb      	ldr	r3, [r5, r3]
 8016bae:	4798      	blx	r3
 8016bb0:	3601      	adds	r6, #1
 8016bb2:	e7f2      	b.n	8016b9a <__libc_init_array+0x1e>
 8016bb4:	0801a8f8 	.word	0x0801a8f8
 8016bb8:	0801a8f8 	.word	0x0801a8f8
 8016bbc:	0801a8fc 	.word	0x0801a8fc
 8016bc0:	0801a8f8 	.word	0x0801a8f8

08016bc4 <__retarget_lock_init_recursive>:
 8016bc4:	4770      	bx	lr

08016bc6 <__retarget_lock_acquire_recursive>:
 8016bc6:	4770      	bx	lr

08016bc8 <__retarget_lock_release_recursive>:
 8016bc8:	4770      	bx	lr

08016bca <memchr>:
 8016bca:	b2c9      	uxtb	r1, r1
 8016bcc:	1882      	adds	r2, r0, r2
 8016bce:	4290      	cmp	r0, r2
 8016bd0:	d101      	bne.n	8016bd6 <memchr+0xc>
 8016bd2:	2000      	movs	r0, #0
 8016bd4:	4770      	bx	lr
 8016bd6:	7803      	ldrb	r3, [r0, #0]
 8016bd8:	428b      	cmp	r3, r1
 8016bda:	d0fb      	beq.n	8016bd4 <memchr+0xa>
 8016bdc:	3001      	adds	r0, #1
 8016bde:	e7f6      	b.n	8016bce <memchr+0x4>

08016be0 <memcpy>:
 8016be0:	2300      	movs	r3, #0
 8016be2:	b510      	push	{r4, lr}
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d100      	bne.n	8016bea <memcpy+0xa>
 8016be8:	bd10      	pop	{r4, pc}
 8016bea:	5ccc      	ldrb	r4, [r1, r3]
 8016bec:	54c4      	strb	r4, [r0, r3]
 8016bee:	3301      	adds	r3, #1
 8016bf0:	e7f8      	b.n	8016be4 <memcpy+0x4>

08016bf2 <quorem>:
 8016bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bf4:	6902      	ldr	r2, [r0, #16]
 8016bf6:	690f      	ldr	r7, [r1, #16]
 8016bf8:	b087      	sub	sp, #28
 8016bfa:	0006      	movs	r6, r0
 8016bfc:	000b      	movs	r3, r1
 8016bfe:	2000      	movs	r0, #0
 8016c00:	9102      	str	r1, [sp, #8]
 8016c02:	42ba      	cmp	r2, r7
 8016c04:	db6d      	blt.n	8016ce2 <quorem+0xf0>
 8016c06:	3f01      	subs	r7, #1
 8016c08:	00bc      	lsls	r4, r7, #2
 8016c0a:	3314      	adds	r3, #20
 8016c0c:	9305      	str	r3, [sp, #20]
 8016c0e:	191b      	adds	r3, r3, r4
 8016c10:	9303      	str	r3, [sp, #12]
 8016c12:	0033      	movs	r3, r6
 8016c14:	3314      	adds	r3, #20
 8016c16:	191c      	adds	r4, r3, r4
 8016c18:	9301      	str	r3, [sp, #4]
 8016c1a:	6823      	ldr	r3, [r4, #0]
 8016c1c:	9304      	str	r3, [sp, #16]
 8016c1e:	9b03      	ldr	r3, [sp, #12]
 8016c20:	9804      	ldr	r0, [sp, #16]
 8016c22:	681d      	ldr	r5, [r3, #0]
 8016c24:	3501      	adds	r5, #1
 8016c26:	0029      	movs	r1, r5
 8016c28:	f7e9 fa8a 	bl	8000140 <__udivsi3>
 8016c2c:	9b04      	ldr	r3, [sp, #16]
 8016c2e:	9000      	str	r0, [sp, #0]
 8016c30:	42ab      	cmp	r3, r5
 8016c32:	d32b      	bcc.n	8016c8c <quorem+0x9a>
 8016c34:	9b05      	ldr	r3, [sp, #20]
 8016c36:	9d01      	ldr	r5, [sp, #4]
 8016c38:	469c      	mov	ip, r3
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	9305      	str	r3, [sp, #20]
 8016c3e:	9304      	str	r3, [sp, #16]
 8016c40:	4662      	mov	r2, ip
 8016c42:	ca08      	ldmia	r2!, {r3}
 8016c44:	6828      	ldr	r0, [r5, #0]
 8016c46:	4694      	mov	ip, r2
 8016c48:	9a00      	ldr	r2, [sp, #0]
 8016c4a:	b299      	uxth	r1, r3
 8016c4c:	4351      	muls	r1, r2
 8016c4e:	9a05      	ldr	r2, [sp, #20]
 8016c50:	0c1b      	lsrs	r3, r3, #16
 8016c52:	1889      	adds	r1, r1, r2
 8016c54:	9a00      	ldr	r2, [sp, #0]
 8016c56:	4353      	muls	r3, r2
 8016c58:	0c0a      	lsrs	r2, r1, #16
 8016c5a:	189b      	adds	r3, r3, r2
 8016c5c:	0c1a      	lsrs	r2, r3, #16
 8016c5e:	b289      	uxth	r1, r1
 8016c60:	9205      	str	r2, [sp, #20]
 8016c62:	b282      	uxth	r2, r0
 8016c64:	1a52      	subs	r2, r2, r1
 8016c66:	9904      	ldr	r1, [sp, #16]
 8016c68:	0c00      	lsrs	r0, r0, #16
 8016c6a:	1852      	adds	r2, r2, r1
 8016c6c:	b29b      	uxth	r3, r3
 8016c6e:	1411      	asrs	r1, r2, #16
 8016c70:	1ac3      	subs	r3, r0, r3
 8016c72:	185b      	adds	r3, r3, r1
 8016c74:	1419      	asrs	r1, r3, #16
 8016c76:	b292      	uxth	r2, r2
 8016c78:	041b      	lsls	r3, r3, #16
 8016c7a:	431a      	orrs	r2, r3
 8016c7c:	9b03      	ldr	r3, [sp, #12]
 8016c7e:	9104      	str	r1, [sp, #16]
 8016c80:	c504      	stmia	r5!, {r2}
 8016c82:	4563      	cmp	r3, ip
 8016c84:	d2dc      	bcs.n	8016c40 <quorem+0x4e>
 8016c86:	6823      	ldr	r3, [r4, #0]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d030      	beq.n	8016cee <quorem+0xfc>
 8016c8c:	0030      	movs	r0, r6
 8016c8e:	9902      	ldr	r1, [sp, #8]
 8016c90:	f001 f9c6 	bl	8018020 <__mcmp>
 8016c94:	2800      	cmp	r0, #0
 8016c96:	db23      	blt.n	8016ce0 <quorem+0xee>
 8016c98:	0034      	movs	r4, r6
 8016c9a:	2500      	movs	r5, #0
 8016c9c:	9902      	ldr	r1, [sp, #8]
 8016c9e:	3414      	adds	r4, #20
 8016ca0:	3114      	adds	r1, #20
 8016ca2:	6823      	ldr	r3, [r4, #0]
 8016ca4:	c901      	ldmia	r1!, {r0}
 8016ca6:	9302      	str	r3, [sp, #8]
 8016ca8:	466b      	mov	r3, sp
 8016caa:	891b      	ldrh	r3, [r3, #8]
 8016cac:	b282      	uxth	r2, r0
 8016cae:	1a9a      	subs	r2, r3, r2
 8016cb0:	9b02      	ldr	r3, [sp, #8]
 8016cb2:	1952      	adds	r2, r2, r5
 8016cb4:	0c00      	lsrs	r0, r0, #16
 8016cb6:	0c1b      	lsrs	r3, r3, #16
 8016cb8:	1a1b      	subs	r3, r3, r0
 8016cba:	1410      	asrs	r0, r2, #16
 8016cbc:	181b      	adds	r3, r3, r0
 8016cbe:	141d      	asrs	r5, r3, #16
 8016cc0:	b292      	uxth	r2, r2
 8016cc2:	041b      	lsls	r3, r3, #16
 8016cc4:	431a      	orrs	r2, r3
 8016cc6:	9b03      	ldr	r3, [sp, #12]
 8016cc8:	c404      	stmia	r4!, {r2}
 8016cca:	428b      	cmp	r3, r1
 8016ccc:	d2e9      	bcs.n	8016ca2 <quorem+0xb0>
 8016cce:	9a01      	ldr	r2, [sp, #4]
 8016cd0:	00bb      	lsls	r3, r7, #2
 8016cd2:	18d3      	adds	r3, r2, r3
 8016cd4:	681a      	ldr	r2, [r3, #0]
 8016cd6:	2a00      	cmp	r2, #0
 8016cd8:	d013      	beq.n	8016d02 <quorem+0x110>
 8016cda:	9b00      	ldr	r3, [sp, #0]
 8016cdc:	3301      	adds	r3, #1
 8016cde:	9300      	str	r3, [sp, #0]
 8016ce0:	9800      	ldr	r0, [sp, #0]
 8016ce2:	b007      	add	sp, #28
 8016ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ce6:	6823      	ldr	r3, [r4, #0]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d104      	bne.n	8016cf6 <quorem+0x104>
 8016cec:	3f01      	subs	r7, #1
 8016cee:	9b01      	ldr	r3, [sp, #4]
 8016cf0:	3c04      	subs	r4, #4
 8016cf2:	42a3      	cmp	r3, r4
 8016cf4:	d3f7      	bcc.n	8016ce6 <quorem+0xf4>
 8016cf6:	6137      	str	r7, [r6, #16]
 8016cf8:	e7c8      	b.n	8016c8c <quorem+0x9a>
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	2a00      	cmp	r2, #0
 8016cfe:	d104      	bne.n	8016d0a <quorem+0x118>
 8016d00:	3f01      	subs	r7, #1
 8016d02:	9a01      	ldr	r2, [sp, #4]
 8016d04:	3b04      	subs	r3, #4
 8016d06:	429a      	cmp	r2, r3
 8016d08:	d3f7      	bcc.n	8016cfa <quorem+0x108>
 8016d0a:	6137      	str	r7, [r6, #16]
 8016d0c:	e7e5      	b.n	8016cda <quorem+0xe8>
	...

08016d10 <_dtoa_r>:
 8016d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d12:	0014      	movs	r4, r2
 8016d14:	001d      	movs	r5, r3
 8016d16:	69c6      	ldr	r6, [r0, #28]
 8016d18:	b09d      	sub	sp, #116	@ 0x74
 8016d1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8016d1c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8016d1e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8016d20:	9003      	str	r0, [sp, #12]
 8016d22:	2e00      	cmp	r6, #0
 8016d24:	d10f      	bne.n	8016d46 <_dtoa_r+0x36>
 8016d26:	2010      	movs	r0, #16
 8016d28:	f000 fe30 	bl	801798c <malloc>
 8016d2c:	9b03      	ldr	r3, [sp, #12]
 8016d2e:	1e02      	subs	r2, r0, #0
 8016d30:	61d8      	str	r0, [r3, #28]
 8016d32:	d104      	bne.n	8016d3e <_dtoa_r+0x2e>
 8016d34:	21ef      	movs	r1, #239	@ 0xef
 8016d36:	4bc7      	ldr	r3, [pc, #796]	@ (8017054 <_dtoa_r+0x344>)
 8016d38:	48c7      	ldr	r0, [pc, #796]	@ (8017058 <_dtoa_r+0x348>)
 8016d3a:	f001 fea1 	bl	8018a80 <__assert_func>
 8016d3e:	6046      	str	r6, [r0, #4]
 8016d40:	6086      	str	r6, [r0, #8]
 8016d42:	6006      	str	r6, [r0, #0]
 8016d44:	60c6      	str	r6, [r0, #12]
 8016d46:	9b03      	ldr	r3, [sp, #12]
 8016d48:	69db      	ldr	r3, [r3, #28]
 8016d4a:	6819      	ldr	r1, [r3, #0]
 8016d4c:	2900      	cmp	r1, #0
 8016d4e:	d00b      	beq.n	8016d68 <_dtoa_r+0x58>
 8016d50:	685a      	ldr	r2, [r3, #4]
 8016d52:	2301      	movs	r3, #1
 8016d54:	4093      	lsls	r3, r2
 8016d56:	604a      	str	r2, [r1, #4]
 8016d58:	608b      	str	r3, [r1, #8]
 8016d5a:	9803      	ldr	r0, [sp, #12]
 8016d5c:	f000 ff16 	bl	8017b8c <_Bfree>
 8016d60:	2200      	movs	r2, #0
 8016d62:	9b03      	ldr	r3, [sp, #12]
 8016d64:	69db      	ldr	r3, [r3, #28]
 8016d66:	601a      	str	r2, [r3, #0]
 8016d68:	2d00      	cmp	r5, #0
 8016d6a:	da1e      	bge.n	8016daa <_dtoa_r+0x9a>
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	603b      	str	r3, [r7, #0]
 8016d70:	006b      	lsls	r3, r5, #1
 8016d72:	085b      	lsrs	r3, r3, #1
 8016d74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016d76:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016d78:	4bb8      	ldr	r3, [pc, #736]	@ (801705c <_dtoa_r+0x34c>)
 8016d7a:	4ab8      	ldr	r2, [pc, #736]	@ (801705c <_dtoa_r+0x34c>)
 8016d7c:	403b      	ands	r3, r7
 8016d7e:	4293      	cmp	r3, r2
 8016d80:	d116      	bne.n	8016db0 <_dtoa_r+0xa0>
 8016d82:	4bb7      	ldr	r3, [pc, #732]	@ (8017060 <_dtoa_r+0x350>)
 8016d84:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016d86:	6013      	str	r3, [r2, #0]
 8016d88:	033b      	lsls	r3, r7, #12
 8016d8a:	0b1b      	lsrs	r3, r3, #12
 8016d8c:	4323      	orrs	r3, r4
 8016d8e:	d101      	bne.n	8016d94 <_dtoa_r+0x84>
 8016d90:	f000 fd83 	bl	801789a <_dtoa_r+0xb8a>
 8016d94:	4bb3      	ldr	r3, [pc, #716]	@ (8017064 <_dtoa_r+0x354>)
 8016d96:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016d98:	9308      	str	r3, [sp, #32]
 8016d9a:	2a00      	cmp	r2, #0
 8016d9c:	d002      	beq.n	8016da4 <_dtoa_r+0x94>
 8016d9e:	4bb2      	ldr	r3, [pc, #712]	@ (8017068 <_dtoa_r+0x358>)
 8016da0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016da2:	6013      	str	r3, [r2, #0]
 8016da4:	9808      	ldr	r0, [sp, #32]
 8016da6:	b01d      	add	sp, #116	@ 0x74
 8016da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016daa:	2300      	movs	r3, #0
 8016dac:	603b      	str	r3, [r7, #0]
 8016dae:	e7e2      	b.n	8016d76 <_dtoa_r+0x66>
 8016db0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016db2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016db4:	9212      	str	r2, [sp, #72]	@ 0x48
 8016db6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016db8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016dba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016dbc:	2200      	movs	r2, #0
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	f7e9 fb44 	bl	800044c <__aeabi_dcmpeq>
 8016dc4:	1e06      	subs	r6, r0, #0
 8016dc6:	d00b      	beq.n	8016de0 <_dtoa_r+0xd0>
 8016dc8:	2301      	movs	r3, #1
 8016dca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016dcc:	6013      	str	r3, [r2, #0]
 8016dce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d002      	beq.n	8016dda <_dtoa_r+0xca>
 8016dd4:	4ba5      	ldr	r3, [pc, #660]	@ (801706c <_dtoa_r+0x35c>)
 8016dd6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016dd8:	6013      	str	r3, [r2, #0]
 8016dda:	4ba5      	ldr	r3, [pc, #660]	@ (8017070 <_dtoa_r+0x360>)
 8016ddc:	9308      	str	r3, [sp, #32]
 8016dde:	e7e1      	b.n	8016da4 <_dtoa_r+0x94>
 8016de0:	ab1a      	add	r3, sp, #104	@ 0x68
 8016de2:	9301      	str	r3, [sp, #4]
 8016de4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016de6:	9300      	str	r3, [sp, #0]
 8016de8:	9803      	ldr	r0, [sp, #12]
 8016dea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016dec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016dee:	f001 f9cd 	bl	801818c <__d2b>
 8016df2:	007a      	lsls	r2, r7, #1
 8016df4:	9005      	str	r0, [sp, #20]
 8016df6:	0d52      	lsrs	r2, r2, #21
 8016df8:	d100      	bne.n	8016dfc <_dtoa_r+0xec>
 8016dfa:	e07b      	b.n	8016ef4 <_dtoa_r+0x1e4>
 8016dfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016dfe:	9618      	str	r6, [sp, #96]	@ 0x60
 8016e00:	0319      	lsls	r1, r3, #12
 8016e02:	4b9c      	ldr	r3, [pc, #624]	@ (8017074 <_dtoa_r+0x364>)
 8016e04:	0b09      	lsrs	r1, r1, #12
 8016e06:	430b      	orrs	r3, r1
 8016e08:	499b      	ldr	r1, [pc, #620]	@ (8017078 <_dtoa_r+0x368>)
 8016e0a:	1857      	adds	r7, r2, r1
 8016e0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016e0e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016e10:	0019      	movs	r1, r3
 8016e12:	2200      	movs	r2, #0
 8016e14:	4b99      	ldr	r3, [pc, #612]	@ (801707c <_dtoa_r+0x36c>)
 8016e16:	f7eb fe57 	bl	8002ac8 <__aeabi_dsub>
 8016e1a:	4a99      	ldr	r2, [pc, #612]	@ (8017080 <_dtoa_r+0x370>)
 8016e1c:	4b99      	ldr	r3, [pc, #612]	@ (8017084 <_dtoa_r+0x374>)
 8016e1e:	f7eb fb8b 	bl	8002538 <__aeabi_dmul>
 8016e22:	4a99      	ldr	r2, [pc, #612]	@ (8017088 <_dtoa_r+0x378>)
 8016e24:	4b99      	ldr	r3, [pc, #612]	@ (801708c <_dtoa_r+0x37c>)
 8016e26:	f7ea fbdf 	bl	80015e8 <__aeabi_dadd>
 8016e2a:	0004      	movs	r4, r0
 8016e2c:	0038      	movs	r0, r7
 8016e2e:	000d      	movs	r5, r1
 8016e30:	f7ec fa44 	bl	80032bc <__aeabi_i2d>
 8016e34:	4a96      	ldr	r2, [pc, #600]	@ (8017090 <_dtoa_r+0x380>)
 8016e36:	4b97      	ldr	r3, [pc, #604]	@ (8017094 <_dtoa_r+0x384>)
 8016e38:	f7eb fb7e 	bl	8002538 <__aeabi_dmul>
 8016e3c:	0002      	movs	r2, r0
 8016e3e:	000b      	movs	r3, r1
 8016e40:	0020      	movs	r0, r4
 8016e42:	0029      	movs	r1, r5
 8016e44:	f7ea fbd0 	bl	80015e8 <__aeabi_dadd>
 8016e48:	0004      	movs	r4, r0
 8016e4a:	000d      	movs	r5, r1
 8016e4c:	f7ec f9fa 	bl	8003244 <__aeabi_d2iz>
 8016e50:	2200      	movs	r2, #0
 8016e52:	9004      	str	r0, [sp, #16]
 8016e54:	2300      	movs	r3, #0
 8016e56:	0020      	movs	r0, r4
 8016e58:	0029      	movs	r1, r5
 8016e5a:	f7e9 fafd 	bl	8000458 <__aeabi_dcmplt>
 8016e5e:	2800      	cmp	r0, #0
 8016e60:	d00b      	beq.n	8016e7a <_dtoa_r+0x16a>
 8016e62:	9804      	ldr	r0, [sp, #16]
 8016e64:	f7ec fa2a 	bl	80032bc <__aeabi_i2d>
 8016e68:	002b      	movs	r3, r5
 8016e6a:	0022      	movs	r2, r4
 8016e6c:	f7e9 faee 	bl	800044c <__aeabi_dcmpeq>
 8016e70:	4243      	negs	r3, r0
 8016e72:	4158      	adcs	r0, r3
 8016e74:	9b04      	ldr	r3, [sp, #16]
 8016e76:	1a1b      	subs	r3, r3, r0
 8016e78:	9304      	str	r3, [sp, #16]
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8016e7e:	9b04      	ldr	r3, [sp, #16]
 8016e80:	2b16      	cmp	r3, #22
 8016e82:	d810      	bhi.n	8016ea6 <_dtoa_r+0x196>
 8016e84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016e86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016e88:	9a04      	ldr	r2, [sp, #16]
 8016e8a:	4b83      	ldr	r3, [pc, #524]	@ (8017098 <_dtoa_r+0x388>)
 8016e8c:	00d2      	lsls	r2, r2, #3
 8016e8e:	189b      	adds	r3, r3, r2
 8016e90:	681a      	ldr	r2, [r3, #0]
 8016e92:	685b      	ldr	r3, [r3, #4]
 8016e94:	f7e9 fae0 	bl	8000458 <__aeabi_dcmplt>
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	d047      	beq.n	8016f2c <_dtoa_r+0x21c>
 8016e9c:	9b04      	ldr	r3, [sp, #16]
 8016e9e:	3b01      	subs	r3, #1
 8016ea0:	9304      	str	r3, [sp, #16]
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	9315      	str	r3, [sp, #84]	@ 0x54
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016eaa:	9206      	str	r2, [sp, #24]
 8016eac:	1bdb      	subs	r3, r3, r7
 8016eae:	1e5a      	subs	r2, r3, #1
 8016eb0:	d53e      	bpl.n	8016f30 <_dtoa_r+0x220>
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	1ad3      	subs	r3, r2, r3
 8016eb6:	9306      	str	r3, [sp, #24]
 8016eb8:	2300      	movs	r3, #0
 8016eba:	930d      	str	r3, [sp, #52]	@ 0x34
 8016ebc:	9b04      	ldr	r3, [sp, #16]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	db38      	blt.n	8016f34 <_dtoa_r+0x224>
 8016ec2:	9a04      	ldr	r2, [sp, #16]
 8016ec4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ec6:	4694      	mov	ip, r2
 8016ec8:	4463      	add	r3, ip
 8016eca:	930d      	str	r3, [sp, #52]	@ 0x34
 8016ecc:	2300      	movs	r3, #0
 8016ece:	9214      	str	r2, [sp, #80]	@ 0x50
 8016ed0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016ed2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016ed4:	2401      	movs	r4, #1
 8016ed6:	2b09      	cmp	r3, #9
 8016ed8:	d867      	bhi.n	8016faa <_dtoa_r+0x29a>
 8016eda:	2b05      	cmp	r3, #5
 8016edc:	dd02      	ble.n	8016ee4 <_dtoa_r+0x1d4>
 8016ede:	2400      	movs	r4, #0
 8016ee0:	3b04      	subs	r3, #4
 8016ee2:	9322      	str	r3, [sp, #136]	@ 0x88
 8016ee4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016ee6:	1e98      	subs	r0, r3, #2
 8016ee8:	2803      	cmp	r0, #3
 8016eea:	d867      	bhi.n	8016fbc <_dtoa_r+0x2ac>
 8016eec:	f7e9 f914 	bl	8000118 <__gnu_thumb1_case_uqi>
 8016ef0:	5b383a2b 	.word	0x5b383a2b
 8016ef4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016ef6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016ef8:	18f6      	adds	r6, r6, r3
 8016efa:	4b68      	ldr	r3, [pc, #416]	@ (801709c <_dtoa_r+0x38c>)
 8016efc:	18f2      	adds	r2, r6, r3
 8016efe:	2a20      	cmp	r2, #32
 8016f00:	dd0f      	ble.n	8016f22 <_dtoa_r+0x212>
 8016f02:	2340      	movs	r3, #64	@ 0x40
 8016f04:	1a9b      	subs	r3, r3, r2
 8016f06:	409f      	lsls	r7, r3
 8016f08:	4b65      	ldr	r3, [pc, #404]	@ (80170a0 <_dtoa_r+0x390>)
 8016f0a:	0038      	movs	r0, r7
 8016f0c:	18f3      	adds	r3, r6, r3
 8016f0e:	40dc      	lsrs	r4, r3
 8016f10:	4320      	orrs	r0, r4
 8016f12:	f7ec fa01 	bl	8003318 <__aeabi_ui2d>
 8016f16:	2201      	movs	r2, #1
 8016f18:	4b62      	ldr	r3, [pc, #392]	@ (80170a4 <_dtoa_r+0x394>)
 8016f1a:	1e77      	subs	r7, r6, #1
 8016f1c:	18cb      	adds	r3, r1, r3
 8016f1e:	9218      	str	r2, [sp, #96]	@ 0x60
 8016f20:	e776      	b.n	8016e10 <_dtoa_r+0x100>
 8016f22:	2320      	movs	r3, #32
 8016f24:	0020      	movs	r0, r4
 8016f26:	1a9b      	subs	r3, r3, r2
 8016f28:	4098      	lsls	r0, r3
 8016f2a:	e7f2      	b.n	8016f12 <_dtoa_r+0x202>
 8016f2c:	9015      	str	r0, [sp, #84]	@ 0x54
 8016f2e:	e7ba      	b.n	8016ea6 <_dtoa_r+0x196>
 8016f30:	920d      	str	r2, [sp, #52]	@ 0x34
 8016f32:	e7c3      	b.n	8016ebc <_dtoa_r+0x1ac>
 8016f34:	9b06      	ldr	r3, [sp, #24]
 8016f36:	9a04      	ldr	r2, [sp, #16]
 8016f38:	1a9b      	subs	r3, r3, r2
 8016f3a:	9306      	str	r3, [sp, #24]
 8016f3c:	4253      	negs	r3, r2
 8016f3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016f40:	2300      	movs	r3, #0
 8016f42:	9314      	str	r3, [sp, #80]	@ 0x50
 8016f44:	e7c5      	b.n	8016ed2 <_dtoa_r+0x1c2>
 8016f46:	2300      	movs	r3, #0
 8016f48:	9310      	str	r3, [sp, #64]	@ 0x40
 8016f4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016f4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8016f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	dc13      	bgt.n	8016f7c <_dtoa_r+0x26c>
 8016f54:	2301      	movs	r3, #1
 8016f56:	001a      	movs	r2, r3
 8016f58:	930e      	str	r3, [sp, #56]	@ 0x38
 8016f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f5c:	9223      	str	r2, [sp, #140]	@ 0x8c
 8016f5e:	e00d      	b.n	8016f7c <_dtoa_r+0x26c>
 8016f60:	2301      	movs	r3, #1
 8016f62:	e7f1      	b.n	8016f48 <_dtoa_r+0x238>
 8016f64:	2300      	movs	r3, #0
 8016f66:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016f68:	9310      	str	r3, [sp, #64]	@ 0x40
 8016f6a:	4694      	mov	ip, r2
 8016f6c:	9b04      	ldr	r3, [sp, #16]
 8016f6e:	4463      	add	r3, ip
 8016f70:	930e      	str	r3, [sp, #56]	@ 0x38
 8016f72:	3301      	adds	r3, #1
 8016f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	dc00      	bgt.n	8016f7c <_dtoa_r+0x26c>
 8016f7a:	2301      	movs	r3, #1
 8016f7c:	9a03      	ldr	r2, [sp, #12]
 8016f7e:	2100      	movs	r1, #0
 8016f80:	69d0      	ldr	r0, [r2, #28]
 8016f82:	2204      	movs	r2, #4
 8016f84:	0015      	movs	r5, r2
 8016f86:	3514      	adds	r5, #20
 8016f88:	429d      	cmp	r5, r3
 8016f8a:	d91b      	bls.n	8016fc4 <_dtoa_r+0x2b4>
 8016f8c:	6041      	str	r1, [r0, #4]
 8016f8e:	9803      	ldr	r0, [sp, #12]
 8016f90:	f000 fdb8 	bl	8017b04 <_Balloc>
 8016f94:	9008      	str	r0, [sp, #32]
 8016f96:	2800      	cmp	r0, #0
 8016f98:	d117      	bne.n	8016fca <_dtoa_r+0x2ba>
 8016f9a:	21b0      	movs	r1, #176	@ 0xb0
 8016f9c:	4b42      	ldr	r3, [pc, #264]	@ (80170a8 <_dtoa_r+0x398>)
 8016f9e:	482e      	ldr	r0, [pc, #184]	@ (8017058 <_dtoa_r+0x348>)
 8016fa0:	9a08      	ldr	r2, [sp, #32]
 8016fa2:	31ff      	adds	r1, #255	@ 0xff
 8016fa4:	e6c9      	b.n	8016d3a <_dtoa_r+0x2a>
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	e7dd      	b.n	8016f66 <_dtoa_r+0x256>
 8016faa:	2300      	movs	r3, #0
 8016fac:	9410      	str	r4, [sp, #64]	@ 0x40
 8016fae:	9322      	str	r3, [sp, #136]	@ 0x88
 8016fb0:	3b01      	subs	r3, #1
 8016fb2:	930e      	str	r3, [sp, #56]	@ 0x38
 8016fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	3313      	adds	r3, #19
 8016fba:	e7cf      	b.n	8016f5c <_dtoa_r+0x24c>
 8016fbc:	2301      	movs	r3, #1
 8016fbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8016fc0:	3b02      	subs	r3, #2
 8016fc2:	e7f6      	b.n	8016fb2 <_dtoa_r+0x2a2>
 8016fc4:	3101      	adds	r1, #1
 8016fc6:	0052      	lsls	r2, r2, #1
 8016fc8:	e7dc      	b.n	8016f84 <_dtoa_r+0x274>
 8016fca:	9b03      	ldr	r3, [sp, #12]
 8016fcc:	9a08      	ldr	r2, [sp, #32]
 8016fce:	69db      	ldr	r3, [r3, #28]
 8016fd0:	601a      	str	r2, [r3, #0]
 8016fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fd4:	2b0e      	cmp	r3, #14
 8016fd6:	d900      	bls.n	8016fda <_dtoa_r+0x2ca>
 8016fd8:	e0d9      	b.n	801718e <_dtoa_r+0x47e>
 8016fda:	2c00      	cmp	r4, #0
 8016fdc:	d100      	bne.n	8016fe0 <_dtoa_r+0x2d0>
 8016fde:	e0d6      	b.n	801718e <_dtoa_r+0x47e>
 8016fe0:	9b04      	ldr	r3, [sp, #16]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	dd64      	ble.n	80170b0 <_dtoa_r+0x3a0>
 8016fe6:	210f      	movs	r1, #15
 8016fe8:	9a04      	ldr	r2, [sp, #16]
 8016fea:	4b2b      	ldr	r3, [pc, #172]	@ (8017098 <_dtoa_r+0x388>)
 8016fec:	400a      	ands	r2, r1
 8016fee:	00d2      	lsls	r2, r2, #3
 8016ff0:	189b      	adds	r3, r3, r2
 8016ff2:	681e      	ldr	r6, [r3, #0]
 8016ff4:	685f      	ldr	r7, [r3, #4]
 8016ff6:	9b04      	ldr	r3, [sp, #16]
 8016ff8:	2402      	movs	r4, #2
 8016ffa:	111d      	asrs	r5, r3, #4
 8016ffc:	05db      	lsls	r3, r3, #23
 8016ffe:	d50a      	bpl.n	8017016 <_dtoa_r+0x306>
 8017000:	4b2a      	ldr	r3, [pc, #168]	@ (80170ac <_dtoa_r+0x39c>)
 8017002:	400d      	ands	r5, r1
 8017004:	6a1a      	ldr	r2, [r3, #32]
 8017006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017008:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801700a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801700c:	f7ea fe50 	bl	8001cb0 <__aeabi_ddiv>
 8017010:	900a      	str	r0, [sp, #40]	@ 0x28
 8017012:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017014:	3401      	adds	r4, #1
 8017016:	4b25      	ldr	r3, [pc, #148]	@ (80170ac <_dtoa_r+0x39c>)
 8017018:	930c      	str	r3, [sp, #48]	@ 0x30
 801701a:	2d00      	cmp	r5, #0
 801701c:	d108      	bne.n	8017030 <_dtoa_r+0x320>
 801701e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017020:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017022:	0032      	movs	r2, r6
 8017024:	003b      	movs	r3, r7
 8017026:	f7ea fe43 	bl	8001cb0 <__aeabi_ddiv>
 801702a:	900a      	str	r0, [sp, #40]	@ 0x28
 801702c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801702e:	e05a      	b.n	80170e6 <_dtoa_r+0x3d6>
 8017030:	2301      	movs	r3, #1
 8017032:	421d      	tst	r5, r3
 8017034:	d009      	beq.n	801704a <_dtoa_r+0x33a>
 8017036:	18e4      	adds	r4, r4, r3
 8017038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801703a:	0030      	movs	r0, r6
 801703c:	681a      	ldr	r2, [r3, #0]
 801703e:	685b      	ldr	r3, [r3, #4]
 8017040:	0039      	movs	r1, r7
 8017042:	f7eb fa79 	bl	8002538 <__aeabi_dmul>
 8017046:	0006      	movs	r6, r0
 8017048:	000f      	movs	r7, r1
 801704a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801704c:	106d      	asrs	r5, r5, #1
 801704e:	3308      	adds	r3, #8
 8017050:	e7e2      	b.n	8017018 <_dtoa_r+0x308>
 8017052:	46c0      	nop			@ (mov r8, r8)
 8017054:	0801a5a9 	.word	0x0801a5a9
 8017058:	0801a5c0 	.word	0x0801a5c0
 801705c:	7ff00000 	.word	0x7ff00000
 8017060:	0000270f 	.word	0x0000270f
 8017064:	0801a5a5 	.word	0x0801a5a5
 8017068:	0801a5a8 	.word	0x0801a5a8
 801706c:	0801a579 	.word	0x0801a579
 8017070:	0801a578 	.word	0x0801a578
 8017074:	3ff00000 	.word	0x3ff00000
 8017078:	fffffc01 	.word	0xfffffc01
 801707c:	3ff80000 	.word	0x3ff80000
 8017080:	636f4361 	.word	0x636f4361
 8017084:	3fd287a7 	.word	0x3fd287a7
 8017088:	8b60c8b3 	.word	0x8b60c8b3
 801708c:	3fc68a28 	.word	0x3fc68a28
 8017090:	509f79fb 	.word	0x509f79fb
 8017094:	3fd34413 	.word	0x3fd34413
 8017098:	0801a6b8 	.word	0x0801a6b8
 801709c:	00000432 	.word	0x00000432
 80170a0:	00000412 	.word	0x00000412
 80170a4:	fe100000 	.word	0xfe100000
 80170a8:	0801a618 	.word	0x0801a618
 80170ac:	0801a690 	.word	0x0801a690
 80170b0:	9b04      	ldr	r3, [sp, #16]
 80170b2:	2402      	movs	r4, #2
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d016      	beq.n	80170e6 <_dtoa_r+0x3d6>
 80170b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80170ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80170bc:	220f      	movs	r2, #15
 80170be:	425d      	negs	r5, r3
 80170c0:	402a      	ands	r2, r5
 80170c2:	4bd7      	ldr	r3, [pc, #860]	@ (8017420 <_dtoa_r+0x710>)
 80170c4:	00d2      	lsls	r2, r2, #3
 80170c6:	189b      	adds	r3, r3, r2
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	685b      	ldr	r3, [r3, #4]
 80170cc:	f7eb fa34 	bl	8002538 <__aeabi_dmul>
 80170d0:	2701      	movs	r7, #1
 80170d2:	2300      	movs	r3, #0
 80170d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80170d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80170d8:	4ed2      	ldr	r6, [pc, #840]	@ (8017424 <_dtoa_r+0x714>)
 80170da:	112d      	asrs	r5, r5, #4
 80170dc:	2d00      	cmp	r5, #0
 80170de:	d000      	beq.n	80170e2 <_dtoa_r+0x3d2>
 80170e0:	e0ba      	b.n	8017258 <_dtoa_r+0x548>
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d1a1      	bne.n	801702a <_dtoa_r+0x31a>
 80170e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80170e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80170ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d100      	bne.n	80170f2 <_dtoa_r+0x3e2>
 80170f0:	e0bd      	b.n	801726e <_dtoa_r+0x55e>
 80170f2:	2200      	movs	r2, #0
 80170f4:	0030      	movs	r0, r6
 80170f6:	0039      	movs	r1, r7
 80170f8:	4bcb      	ldr	r3, [pc, #812]	@ (8017428 <_dtoa_r+0x718>)
 80170fa:	f7e9 f9ad 	bl	8000458 <__aeabi_dcmplt>
 80170fe:	2800      	cmp	r0, #0
 8017100:	d100      	bne.n	8017104 <_dtoa_r+0x3f4>
 8017102:	e0b4      	b.n	801726e <_dtoa_r+0x55e>
 8017104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017106:	2b00      	cmp	r3, #0
 8017108:	d100      	bne.n	801710c <_dtoa_r+0x3fc>
 801710a:	e0b0      	b.n	801726e <_dtoa_r+0x55e>
 801710c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801710e:	2b00      	cmp	r3, #0
 8017110:	dd39      	ble.n	8017186 <_dtoa_r+0x476>
 8017112:	9b04      	ldr	r3, [sp, #16]
 8017114:	2200      	movs	r2, #0
 8017116:	3b01      	subs	r3, #1
 8017118:	930c      	str	r3, [sp, #48]	@ 0x30
 801711a:	0030      	movs	r0, r6
 801711c:	4bc3      	ldr	r3, [pc, #780]	@ (801742c <_dtoa_r+0x71c>)
 801711e:	0039      	movs	r1, r7
 8017120:	f7eb fa0a 	bl	8002538 <__aeabi_dmul>
 8017124:	900a      	str	r0, [sp, #40]	@ 0x28
 8017126:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801712a:	3401      	adds	r4, #1
 801712c:	0020      	movs	r0, r4
 801712e:	9311      	str	r3, [sp, #68]	@ 0x44
 8017130:	f7ec f8c4 	bl	80032bc <__aeabi_i2d>
 8017134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017136:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017138:	f7eb f9fe 	bl	8002538 <__aeabi_dmul>
 801713c:	4bbc      	ldr	r3, [pc, #752]	@ (8017430 <_dtoa_r+0x720>)
 801713e:	2200      	movs	r2, #0
 8017140:	f7ea fa52 	bl	80015e8 <__aeabi_dadd>
 8017144:	4bbb      	ldr	r3, [pc, #748]	@ (8017434 <_dtoa_r+0x724>)
 8017146:	0006      	movs	r6, r0
 8017148:	18cf      	adds	r7, r1, r3
 801714a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801714c:	2b00      	cmp	r3, #0
 801714e:	d000      	beq.n	8017152 <_dtoa_r+0x442>
 8017150:	e091      	b.n	8017276 <_dtoa_r+0x566>
 8017152:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017154:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017156:	2200      	movs	r2, #0
 8017158:	4bb7      	ldr	r3, [pc, #732]	@ (8017438 <_dtoa_r+0x728>)
 801715a:	f7eb fcb5 	bl	8002ac8 <__aeabi_dsub>
 801715e:	0032      	movs	r2, r6
 8017160:	003b      	movs	r3, r7
 8017162:	0004      	movs	r4, r0
 8017164:	000d      	movs	r5, r1
 8017166:	f7e9 f98b 	bl	8000480 <__aeabi_dcmpgt>
 801716a:	2800      	cmp	r0, #0
 801716c:	d000      	beq.n	8017170 <_dtoa_r+0x460>
 801716e:	e29d      	b.n	80176ac <_dtoa_r+0x99c>
 8017170:	2180      	movs	r1, #128	@ 0x80
 8017172:	0609      	lsls	r1, r1, #24
 8017174:	187b      	adds	r3, r7, r1
 8017176:	0032      	movs	r2, r6
 8017178:	0020      	movs	r0, r4
 801717a:	0029      	movs	r1, r5
 801717c:	f7e9 f96c 	bl	8000458 <__aeabi_dcmplt>
 8017180:	2800      	cmp	r0, #0
 8017182:	d000      	beq.n	8017186 <_dtoa_r+0x476>
 8017184:	e130      	b.n	80173e8 <_dtoa_r+0x6d8>
 8017186:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017188:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801718a:	930a      	str	r3, [sp, #40]	@ 0x28
 801718c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801718e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8017190:	2b00      	cmp	r3, #0
 8017192:	da00      	bge.n	8017196 <_dtoa_r+0x486>
 8017194:	e177      	b.n	8017486 <_dtoa_r+0x776>
 8017196:	9a04      	ldr	r2, [sp, #16]
 8017198:	2a0e      	cmp	r2, #14
 801719a:	dd00      	ble.n	801719e <_dtoa_r+0x48e>
 801719c:	e173      	b.n	8017486 <_dtoa_r+0x776>
 801719e:	4ba0      	ldr	r3, [pc, #640]	@ (8017420 <_dtoa_r+0x710>)
 80171a0:	00d2      	lsls	r2, r2, #3
 80171a2:	189b      	adds	r3, r3, r2
 80171a4:	685c      	ldr	r4, [r3, #4]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	9306      	str	r3, [sp, #24]
 80171aa:	9407      	str	r4, [sp, #28]
 80171ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	da03      	bge.n	80171ba <_dtoa_r+0x4aa>
 80171b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	dc00      	bgt.n	80171ba <_dtoa_r+0x4aa>
 80171b8:	e106      	b.n	80173c8 <_dtoa_r+0x6b8>
 80171ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80171bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80171be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171c0:	9d08      	ldr	r5, [sp, #32]
 80171c2:	3b01      	subs	r3, #1
 80171c4:	195b      	adds	r3, r3, r5
 80171c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80171c8:	9a06      	ldr	r2, [sp, #24]
 80171ca:	9b07      	ldr	r3, [sp, #28]
 80171cc:	0030      	movs	r0, r6
 80171ce:	0039      	movs	r1, r7
 80171d0:	f7ea fd6e 	bl	8001cb0 <__aeabi_ddiv>
 80171d4:	f7ec f836 	bl	8003244 <__aeabi_d2iz>
 80171d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80171da:	f7ec f86f 	bl	80032bc <__aeabi_i2d>
 80171de:	9a06      	ldr	r2, [sp, #24]
 80171e0:	9b07      	ldr	r3, [sp, #28]
 80171e2:	f7eb f9a9 	bl	8002538 <__aeabi_dmul>
 80171e6:	0002      	movs	r2, r0
 80171e8:	000b      	movs	r3, r1
 80171ea:	0030      	movs	r0, r6
 80171ec:	0039      	movs	r1, r7
 80171ee:	f7eb fc6b 	bl	8002ac8 <__aeabi_dsub>
 80171f2:	002b      	movs	r3, r5
 80171f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171f6:	3501      	adds	r5, #1
 80171f8:	3230      	adds	r2, #48	@ 0x30
 80171fa:	701a      	strb	r2, [r3, #0]
 80171fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80171fe:	002c      	movs	r4, r5
 8017200:	429a      	cmp	r2, r3
 8017202:	d000      	beq.n	8017206 <_dtoa_r+0x4f6>
 8017204:	e131      	b.n	801746a <_dtoa_r+0x75a>
 8017206:	0002      	movs	r2, r0
 8017208:	000b      	movs	r3, r1
 801720a:	f7ea f9ed 	bl	80015e8 <__aeabi_dadd>
 801720e:	9a06      	ldr	r2, [sp, #24]
 8017210:	9b07      	ldr	r3, [sp, #28]
 8017212:	0006      	movs	r6, r0
 8017214:	000f      	movs	r7, r1
 8017216:	f7e9 f933 	bl	8000480 <__aeabi_dcmpgt>
 801721a:	2800      	cmp	r0, #0
 801721c:	d000      	beq.n	8017220 <_dtoa_r+0x510>
 801721e:	e10f      	b.n	8017440 <_dtoa_r+0x730>
 8017220:	9a06      	ldr	r2, [sp, #24]
 8017222:	9b07      	ldr	r3, [sp, #28]
 8017224:	0030      	movs	r0, r6
 8017226:	0039      	movs	r1, r7
 8017228:	f7e9 f910 	bl	800044c <__aeabi_dcmpeq>
 801722c:	2800      	cmp	r0, #0
 801722e:	d003      	beq.n	8017238 <_dtoa_r+0x528>
 8017230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017232:	07dd      	lsls	r5, r3, #31
 8017234:	d500      	bpl.n	8017238 <_dtoa_r+0x528>
 8017236:	e103      	b.n	8017440 <_dtoa_r+0x730>
 8017238:	9905      	ldr	r1, [sp, #20]
 801723a:	9803      	ldr	r0, [sp, #12]
 801723c:	f000 fca6 	bl	8017b8c <_Bfree>
 8017240:	2300      	movs	r3, #0
 8017242:	7023      	strb	r3, [r4, #0]
 8017244:	9b04      	ldr	r3, [sp, #16]
 8017246:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8017248:	3301      	adds	r3, #1
 801724a:	6013      	str	r3, [r2, #0]
 801724c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801724e:	2b00      	cmp	r3, #0
 8017250:	d100      	bne.n	8017254 <_dtoa_r+0x544>
 8017252:	e5a7      	b.n	8016da4 <_dtoa_r+0x94>
 8017254:	601c      	str	r4, [r3, #0]
 8017256:	e5a5      	b.n	8016da4 <_dtoa_r+0x94>
 8017258:	423d      	tst	r5, r7
 801725a:	d005      	beq.n	8017268 <_dtoa_r+0x558>
 801725c:	6832      	ldr	r2, [r6, #0]
 801725e:	6873      	ldr	r3, [r6, #4]
 8017260:	f7eb f96a 	bl	8002538 <__aeabi_dmul>
 8017264:	003b      	movs	r3, r7
 8017266:	3401      	adds	r4, #1
 8017268:	106d      	asrs	r5, r5, #1
 801726a:	3608      	adds	r6, #8
 801726c:	e736      	b.n	80170dc <_dtoa_r+0x3cc>
 801726e:	9b04      	ldr	r3, [sp, #16]
 8017270:	930c      	str	r3, [sp, #48]	@ 0x30
 8017272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017274:	e75a      	b.n	801712c <_dtoa_r+0x41c>
 8017276:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017278:	4b69      	ldr	r3, [pc, #420]	@ (8017420 <_dtoa_r+0x710>)
 801727a:	3a01      	subs	r2, #1
 801727c:	00d2      	lsls	r2, r2, #3
 801727e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017280:	189b      	adds	r3, r3, r2
 8017282:	681a      	ldr	r2, [r3, #0]
 8017284:	685b      	ldr	r3, [r3, #4]
 8017286:	2900      	cmp	r1, #0
 8017288:	d04c      	beq.n	8017324 <_dtoa_r+0x614>
 801728a:	2000      	movs	r0, #0
 801728c:	496b      	ldr	r1, [pc, #428]	@ (801743c <_dtoa_r+0x72c>)
 801728e:	f7ea fd0f 	bl	8001cb0 <__aeabi_ddiv>
 8017292:	0032      	movs	r2, r6
 8017294:	003b      	movs	r3, r7
 8017296:	f7eb fc17 	bl	8002ac8 <__aeabi_dsub>
 801729a:	9a08      	ldr	r2, [sp, #32]
 801729c:	0006      	movs	r6, r0
 801729e:	4694      	mov	ip, r2
 80172a0:	000f      	movs	r7, r1
 80172a2:	9b08      	ldr	r3, [sp, #32]
 80172a4:	9316      	str	r3, [sp, #88]	@ 0x58
 80172a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80172a8:	4463      	add	r3, ip
 80172aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80172ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80172ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80172b0:	f7eb ffc8 	bl	8003244 <__aeabi_d2iz>
 80172b4:	0005      	movs	r5, r0
 80172b6:	f7ec f801 	bl	80032bc <__aeabi_i2d>
 80172ba:	0002      	movs	r2, r0
 80172bc:	000b      	movs	r3, r1
 80172be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80172c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80172c2:	f7eb fc01 	bl	8002ac8 <__aeabi_dsub>
 80172c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80172c8:	3530      	adds	r5, #48	@ 0x30
 80172ca:	1c5c      	adds	r4, r3, #1
 80172cc:	701d      	strb	r5, [r3, #0]
 80172ce:	0032      	movs	r2, r6
 80172d0:	003b      	movs	r3, r7
 80172d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80172d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80172d6:	f7e9 f8bf 	bl	8000458 <__aeabi_dcmplt>
 80172da:	2800      	cmp	r0, #0
 80172dc:	d16a      	bne.n	80173b4 <_dtoa_r+0x6a4>
 80172de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80172e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80172e2:	2000      	movs	r0, #0
 80172e4:	4950      	ldr	r1, [pc, #320]	@ (8017428 <_dtoa_r+0x718>)
 80172e6:	f7eb fbef 	bl	8002ac8 <__aeabi_dsub>
 80172ea:	0032      	movs	r2, r6
 80172ec:	003b      	movs	r3, r7
 80172ee:	f7e9 f8b3 	bl	8000458 <__aeabi_dcmplt>
 80172f2:	2800      	cmp	r0, #0
 80172f4:	d000      	beq.n	80172f8 <_dtoa_r+0x5e8>
 80172f6:	e0a5      	b.n	8017444 <_dtoa_r+0x734>
 80172f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80172fa:	42a3      	cmp	r3, r4
 80172fc:	d100      	bne.n	8017300 <_dtoa_r+0x5f0>
 80172fe:	e742      	b.n	8017186 <_dtoa_r+0x476>
 8017300:	2200      	movs	r2, #0
 8017302:	0030      	movs	r0, r6
 8017304:	0039      	movs	r1, r7
 8017306:	4b49      	ldr	r3, [pc, #292]	@ (801742c <_dtoa_r+0x71c>)
 8017308:	f7eb f916 	bl	8002538 <__aeabi_dmul>
 801730c:	2200      	movs	r2, #0
 801730e:	0006      	movs	r6, r0
 8017310:	000f      	movs	r7, r1
 8017312:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017316:	4b45      	ldr	r3, [pc, #276]	@ (801742c <_dtoa_r+0x71c>)
 8017318:	f7eb f90e 	bl	8002538 <__aeabi_dmul>
 801731c:	9416      	str	r4, [sp, #88]	@ 0x58
 801731e:	900a      	str	r0, [sp, #40]	@ 0x28
 8017320:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017322:	e7c3      	b.n	80172ac <_dtoa_r+0x59c>
 8017324:	0030      	movs	r0, r6
 8017326:	0039      	movs	r1, r7
 8017328:	f7eb f906 	bl	8002538 <__aeabi_dmul>
 801732c:	9d08      	ldr	r5, [sp, #32]
 801732e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017330:	002b      	movs	r3, r5
 8017332:	4694      	mov	ip, r2
 8017334:	9016      	str	r0, [sp, #88]	@ 0x58
 8017336:	9117      	str	r1, [sp, #92]	@ 0x5c
 8017338:	4463      	add	r3, ip
 801733a:	9319      	str	r3, [sp, #100]	@ 0x64
 801733c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801733e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017340:	f7eb ff80 	bl	8003244 <__aeabi_d2iz>
 8017344:	0004      	movs	r4, r0
 8017346:	f7eb ffb9 	bl	80032bc <__aeabi_i2d>
 801734a:	000b      	movs	r3, r1
 801734c:	0002      	movs	r2, r0
 801734e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017352:	f7eb fbb9 	bl	8002ac8 <__aeabi_dsub>
 8017356:	3430      	adds	r4, #48	@ 0x30
 8017358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801735a:	702c      	strb	r4, [r5, #0]
 801735c:	3501      	adds	r5, #1
 801735e:	0006      	movs	r6, r0
 8017360:	000f      	movs	r7, r1
 8017362:	42ab      	cmp	r3, r5
 8017364:	d129      	bne.n	80173ba <_dtoa_r+0x6aa>
 8017366:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8017368:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801736a:	9b08      	ldr	r3, [sp, #32]
 801736c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801736e:	469c      	mov	ip, r3
 8017370:	2200      	movs	r2, #0
 8017372:	4b32      	ldr	r3, [pc, #200]	@ (801743c <_dtoa_r+0x72c>)
 8017374:	4464      	add	r4, ip
 8017376:	f7ea f937 	bl	80015e8 <__aeabi_dadd>
 801737a:	0002      	movs	r2, r0
 801737c:	000b      	movs	r3, r1
 801737e:	0030      	movs	r0, r6
 8017380:	0039      	movs	r1, r7
 8017382:	f7e9 f87d 	bl	8000480 <__aeabi_dcmpgt>
 8017386:	2800      	cmp	r0, #0
 8017388:	d15c      	bne.n	8017444 <_dtoa_r+0x734>
 801738a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801738c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801738e:	2000      	movs	r0, #0
 8017390:	492a      	ldr	r1, [pc, #168]	@ (801743c <_dtoa_r+0x72c>)
 8017392:	f7eb fb99 	bl	8002ac8 <__aeabi_dsub>
 8017396:	0002      	movs	r2, r0
 8017398:	000b      	movs	r3, r1
 801739a:	0030      	movs	r0, r6
 801739c:	0039      	movs	r1, r7
 801739e:	f7e9 f85b 	bl	8000458 <__aeabi_dcmplt>
 80173a2:	2800      	cmp	r0, #0
 80173a4:	d100      	bne.n	80173a8 <_dtoa_r+0x698>
 80173a6:	e6ee      	b.n	8017186 <_dtoa_r+0x476>
 80173a8:	0023      	movs	r3, r4
 80173aa:	3c01      	subs	r4, #1
 80173ac:	7822      	ldrb	r2, [r4, #0]
 80173ae:	2a30      	cmp	r2, #48	@ 0x30
 80173b0:	d0fa      	beq.n	80173a8 <_dtoa_r+0x698>
 80173b2:	001c      	movs	r4, r3
 80173b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173b6:	9304      	str	r3, [sp, #16]
 80173b8:	e73e      	b.n	8017238 <_dtoa_r+0x528>
 80173ba:	2200      	movs	r2, #0
 80173bc:	4b1b      	ldr	r3, [pc, #108]	@ (801742c <_dtoa_r+0x71c>)
 80173be:	f7eb f8bb 	bl	8002538 <__aeabi_dmul>
 80173c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80173c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80173c6:	e7b9      	b.n	801733c <_dtoa_r+0x62c>
 80173c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d10c      	bne.n	80173e8 <_dtoa_r+0x6d8>
 80173ce:	9806      	ldr	r0, [sp, #24]
 80173d0:	9907      	ldr	r1, [sp, #28]
 80173d2:	2200      	movs	r2, #0
 80173d4:	4b18      	ldr	r3, [pc, #96]	@ (8017438 <_dtoa_r+0x728>)
 80173d6:	f7eb f8af 	bl	8002538 <__aeabi_dmul>
 80173da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80173dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80173de:	f7e9 f859 	bl	8000494 <__aeabi_dcmpge>
 80173e2:	2800      	cmp	r0, #0
 80173e4:	d100      	bne.n	80173e8 <_dtoa_r+0x6d8>
 80173e6:	e164      	b.n	80176b2 <_dtoa_r+0x9a2>
 80173e8:	2600      	movs	r6, #0
 80173ea:	0037      	movs	r7, r6
 80173ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80173ee:	9c08      	ldr	r4, [sp, #32]
 80173f0:	43db      	mvns	r3, r3
 80173f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80173f4:	2300      	movs	r3, #0
 80173f6:	9304      	str	r3, [sp, #16]
 80173f8:	0031      	movs	r1, r6
 80173fa:	9803      	ldr	r0, [sp, #12]
 80173fc:	f000 fbc6 	bl	8017b8c <_Bfree>
 8017400:	2f00      	cmp	r7, #0
 8017402:	d0d7      	beq.n	80173b4 <_dtoa_r+0x6a4>
 8017404:	9b04      	ldr	r3, [sp, #16]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d005      	beq.n	8017416 <_dtoa_r+0x706>
 801740a:	42bb      	cmp	r3, r7
 801740c:	d003      	beq.n	8017416 <_dtoa_r+0x706>
 801740e:	0019      	movs	r1, r3
 8017410:	9803      	ldr	r0, [sp, #12]
 8017412:	f000 fbbb 	bl	8017b8c <_Bfree>
 8017416:	0039      	movs	r1, r7
 8017418:	9803      	ldr	r0, [sp, #12]
 801741a:	f000 fbb7 	bl	8017b8c <_Bfree>
 801741e:	e7c9      	b.n	80173b4 <_dtoa_r+0x6a4>
 8017420:	0801a6b8 	.word	0x0801a6b8
 8017424:	0801a690 	.word	0x0801a690
 8017428:	3ff00000 	.word	0x3ff00000
 801742c:	40240000 	.word	0x40240000
 8017430:	401c0000 	.word	0x401c0000
 8017434:	fcc00000 	.word	0xfcc00000
 8017438:	40140000 	.word	0x40140000
 801743c:	3fe00000 	.word	0x3fe00000
 8017440:	9b04      	ldr	r3, [sp, #16]
 8017442:	930c      	str	r3, [sp, #48]	@ 0x30
 8017444:	0023      	movs	r3, r4
 8017446:	001c      	movs	r4, r3
 8017448:	3b01      	subs	r3, #1
 801744a:	781a      	ldrb	r2, [r3, #0]
 801744c:	2a39      	cmp	r2, #57	@ 0x39
 801744e:	d108      	bne.n	8017462 <_dtoa_r+0x752>
 8017450:	9a08      	ldr	r2, [sp, #32]
 8017452:	429a      	cmp	r2, r3
 8017454:	d1f7      	bne.n	8017446 <_dtoa_r+0x736>
 8017456:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017458:	9908      	ldr	r1, [sp, #32]
 801745a:	3201      	adds	r2, #1
 801745c:	920c      	str	r2, [sp, #48]	@ 0x30
 801745e:	2230      	movs	r2, #48	@ 0x30
 8017460:	700a      	strb	r2, [r1, #0]
 8017462:	781a      	ldrb	r2, [r3, #0]
 8017464:	3201      	adds	r2, #1
 8017466:	701a      	strb	r2, [r3, #0]
 8017468:	e7a4      	b.n	80173b4 <_dtoa_r+0x6a4>
 801746a:	2200      	movs	r2, #0
 801746c:	4bc6      	ldr	r3, [pc, #792]	@ (8017788 <_dtoa_r+0xa78>)
 801746e:	f7eb f863 	bl	8002538 <__aeabi_dmul>
 8017472:	2200      	movs	r2, #0
 8017474:	2300      	movs	r3, #0
 8017476:	0006      	movs	r6, r0
 8017478:	000f      	movs	r7, r1
 801747a:	f7e8 ffe7 	bl	800044c <__aeabi_dcmpeq>
 801747e:	2800      	cmp	r0, #0
 8017480:	d100      	bne.n	8017484 <_dtoa_r+0x774>
 8017482:	e6a1      	b.n	80171c8 <_dtoa_r+0x4b8>
 8017484:	e6d8      	b.n	8017238 <_dtoa_r+0x528>
 8017486:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017488:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801748a:	9c06      	ldr	r4, [sp, #24]
 801748c:	2f00      	cmp	r7, #0
 801748e:	d014      	beq.n	80174ba <_dtoa_r+0x7aa>
 8017490:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8017492:	2a01      	cmp	r2, #1
 8017494:	dd00      	ble.n	8017498 <_dtoa_r+0x788>
 8017496:	e0c8      	b.n	801762a <_dtoa_r+0x91a>
 8017498:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801749a:	2a00      	cmp	r2, #0
 801749c:	d100      	bne.n	80174a0 <_dtoa_r+0x790>
 801749e:	e0be      	b.n	801761e <_dtoa_r+0x90e>
 80174a0:	4aba      	ldr	r2, [pc, #744]	@ (801778c <_dtoa_r+0xa7c>)
 80174a2:	189b      	adds	r3, r3, r2
 80174a4:	9a06      	ldr	r2, [sp, #24]
 80174a6:	2101      	movs	r1, #1
 80174a8:	18d2      	adds	r2, r2, r3
 80174aa:	9206      	str	r2, [sp, #24]
 80174ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80174ae:	9803      	ldr	r0, [sp, #12]
 80174b0:	18d3      	adds	r3, r2, r3
 80174b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80174b4:	f000 fc22 	bl	8017cfc <__i2b>
 80174b8:	0007      	movs	r7, r0
 80174ba:	2c00      	cmp	r4, #0
 80174bc:	d00e      	beq.n	80174dc <_dtoa_r+0x7cc>
 80174be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	dd0b      	ble.n	80174dc <_dtoa_r+0x7cc>
 80174c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80174c6:	0023      	movs	r3, r4
 80174c8:	4294      	cmp	r4, r2
 80174ca:	dd00      	ble.n	80174ce <_dtoa_r+0x7be>
 80174cc:	0013      	movs	r3, r2
 80174ce:	9a06      	ldr	r2, [sp, #24]
 80174d0:	1ae4      	subs	r4, r4, r3
 80174d2:	1ad2      	subs	r2, r2, r3
 80174d4:	9206      	str	r2, [sp, #24]
 80174d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80174d8:	1ad3      	subs	r3, r2, r3
 80174da:	930d      	str	r3, [sp, #52]	@ 0x34
 80174dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d01f      	beq.n	8017522 <_dtoa_r+0x812>
 80174e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d100      	bne.n	80174ea <_dtoa_r+0x7da>
 80174e8:	e0b5      	b.n	8017656 <_dtoa_r+0x946>
 80174ea:	2d00      	cmp	r5, #0
 80174ec:	d010      	beq.n	8017510 <_dtoa_r+0x800>
 80174ee:	0039      	movs	r1, r7
 80174f0:	002a      	movs	r2, r5
 80174f2:	9803      	ldr	r0, [sp, #12]
 80174f4:	f000 fccc 	bl	8017e90 <__pow5mult>
 80174f8:	9a05      	ldr	r2, [sp, #20]
 80174fa:	0001      	movs	r1, r0
 80174fc:	0007      	movs	r7, r0
 80174fe:	9803      	ldr	r0, [sp, #12]
 8017500:	f000 fc14 	bl	8017d2c <__multiply>
 8017504:	0006      	movs	r6, r0
 8017506:	9905      	ldr	r1, [sp, #20]
 8017508:	9803      	ldr	r0, [sp, #12]
 801750a:	f000 fb3f 	bl	8017b8c <_Bfree>
 801750e:	9605      	str	r6, [sp, #20]
 8017510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017512:	1b5a      	subs	r2, r3, r5
 8017514:	42ab      	cmp	r3, r5
 8017516:	d004      	beq.n	8017522 <_dtoa_r+0x812>
 8017518:	9905      	ldr	r1, [sp, #20]
 801751a:	9803      	ldr	r0, [sp, #12]
 801751c:	f000 fcb8 	bl	8017e90 <__pow5mult>
 8017520:	9005      	str	r0, [sp, #20]
 8017522:	2101      	movs	r1, #1
 8017524:	9803      	ldr	r0, [sp, #12]
 8017526:	f000 fbe9 	bl	8017cfc <__i2b>
 801752a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801752c:	0006      	movs	r6, r0
 801752e:	2b00      	cmp	r3, #0
 8017530:	d100      	bne.n	8017534 <_dtoa_r+0x824>
 8017532:	e1bc      	b.n	80178ae <_dtoa_r+0xb9e>
 8017534:	001a      	movs	r2, r3
 8017536:	0001      	movs	r1, r0
 8017538:	9803      	ldr	r0, [sp, #12]
 801753a:	f000 fca9 	bl	8017e90 <__pow5mult>
 801753e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017540:	0006      	movs	r6, r0
 8017542:	2500      	movs	r5, #0
 8017544:	2b01      	cmp	r3, #1
 8017546:	dc16      	bgt.n	8017576 <_dtoa_r+0x866>
 8017548:	2500      	movs	r5, #0
 801754a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801754c:	42ab      	cmp	r3, r5
 801754e:	d10e      	bne.n	801756e <_dtoa_r+0x85e>
 8017550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017552:	031b      	lsls	r3, r3, #12
 8017554:	42ab      	cmp	r3, r5
 8017556:	d10a      	bne.n	801756e <_dtoa_r+0x85e>
 8017558:	4b8d      	ldr	r3, [pc, #564]	@ (8017790 <_dtoa_r+0xa80>)
 801755a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801755c:	4213      	tst	r3, r2
 801755e:	d006      	beq.n	801756e <_dtoa_r+0x85e>
 8017560:	9b06      	ldr	r3, [sp, #24]
 8017562:	3501      	adds	r5, #1
 8017564:	3301      	adds	r3, #1
 8017566:	9306      	str	r3, [sp, #24]
 8017568:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801756a:	3301      	adds	r3, #1
 801756c:	930d      	str	r3, [sp, #52]	@ 0x34
 801756e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017570:	2001      	movs	r0, #1
 8017572:	2b00      	cmp	r3, #0
 8017574:	d008      	beq.n	8017588 <_dtoa_r+0x878>
 8017576:	6933      	ldr	r3, [r6, #16]
 8017578:	3303      	adds	r3, #3
 801757a:	009b      	lsls	r3, r3, #2
 801757c:	18f3      	adds	r3, r6, r3
 801757e:	6858      	ldr	r0, [r3, #4]
 8017580:	f000 fb6c 	bl	8017c5c <__hi0bits>
 8017584:	2320      	movs	r3, #32
 8017586:	1a18      	subs	r0, r3, r0
 8017588:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801758a:	1818      	adds	r0, r3, r0
 801758c:	0002      	movs	r2, r0
 801758e:	231f      	movs	r3, #31
 8017590:	401a      	ands	r2, r3
 8017592:	4218      	tst	r0, r3
 8017594:	d065      	beq.n	8017662 <_dtoa_r+0x952>
 8017596:	3301      	adds	r3, #1
 8017598:	1a9b      	subs	r3, r3, r2
 801759a:	2b04      	cmp	r3, #4
 801759c:	dd5d      	ble.n	801765a <_dtoa_r+0x94a>
 801759e:	231c      	movs	r3, #28
 80175a0:	1a9b      	subs	r3, r3, r2
 80175a2:	9a06      	ldr	r2, [sp, #24]
 80175a4:	18e4      	adds	r4, r4, r3
 80175a6:	18d2      	adds	r2, r2, r3
 80175a8:	9206      	str	r2, [sp, #24]
 80175aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80175ac:	18d3      	adds	r3, r2, r3
 80175ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80175b0:	9b06      	ldr	r3, [sp, #24]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	dd05      	ble.n	80175c2 <_dtoa_r+0x8b2>
 80175b6:	001a      	movs	r2, r3
 80175b8:	9905      	ldr	r1, [sp, #20]
 80175ba:	9803      	ldr	r0, [sp, #12]
 80175bc:	f000 fcc4 	bl	8017f48 <__lshift>
 80175c0:	9005      	str	r0, [sp, #20]
 80175c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	dd05      	ble.n	80175d4 <_dtoa_r+0x8c4>
 80175c8:	0031      	movs	r1, r6
 80175ca:	001a      	movs	r2, r3
 80175cc:	9803      	ldr	r0, [sp, #12]
 80175ce:	f000 fcbb 	bl	8017f48 <__lshift>
 80175d2:	0006      	movs	r6, r0
 80175d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d045      	beq.n	8017666 <_dtoa_r+0x956>
 80175da:	0031      	movs	r1, r6
 80175dc:	9805      	ldr	r0, [sp, #20]
 80175de:	f000 fd1f 	bl	8018020 <__mcmp>
 80175e2:	2800      	cmp	r0, #0
 80175e4:	da3f      	bge.n	8017666 <_dtoa_r+0x956>
 80175e6:	9b04      	ldr	r3, [sp, #16]
 80175e8:	220a      	movs	r2, #10
 80175ea:	3b01      	subs	r3, #1
 80175ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80175ee:	9905      	ldr	r1, [sp, #20]
 80175f0:	2300      	movs	r3, #0
 80175f2:	9803      	ldr	r0, [sp, #12]
 80175f4:	f000 faee 	bl	8017bd4 <__multadd>
 80175f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80175fa:	9005      	str	r0, [sp, #20]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d100      	bne.n	8017602 <_dtoa_r+0x8f2>
 8017600:	e15c      	b.n	80178bc <_dtoa_r+0xbac>
 8017602:	2300      	movs	r3, #0
 8017604:	0039      	movs	r1, r7
 8017606:	220a      	movs	r2, #10
 8017608:	9803      	ldr	r0, [sp, #12]
 801760a:	f000 fae3 	bl	8017bd4 <__multadd>
 801760e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017610:	0007      	movs	r7, r0
 8017612:	2b00      	cmp	r3, #0
 8017614:	dc55      	bgt.n	80176c2 <_dtoa_r+0x9b2>
 8017616:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017618:	2b02      	cmp	r3, #2
 801761a:	dc2d      	bgt.n	8017678 <_dtoa_r+0x968>
 801761c:	e051      	b.n	80176c2 <_dtoa_r+0x9b2>
 801761e:	2336      	movs	r3, #54	@ 0x36
 8017620:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017622:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8017624:	9c06      	ldr	r4, [sp, #24]
 8017626:	1a9b      	subs	r3, r3, r2
 8017628:	e73c      	b.n	80174a4 <_dtoa_r+0x794>
 801762a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801762c:	1e5d      	subs	r5, r3, #1
 801762e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017630:	42ab      	cmp	r3, r5
 8017632:	db08      	blt.n	8017646 <_dtoa_r+0x936>
 8017634:	1b5d      	subs	r5, r3, r5
 8017636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017638:	9c06      	ldr	r4, [sp, #24]
 801763a:	2b00      	cmp	r3, #0
 801763c:	db00      	blt.n	8017640 <_dtoa_r+0x930>
 801763e:	e731      	b.n	80174a4 <_dtoa_r+0x794>
 8017640:	1ae4      	subs	r4, r4, r3
 8017642:	2300      	movs	r3, #0
 8017644:	e72e      	b.n	80174a4 <_dtoa_r+0x794>
 8017646:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017648:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801764a:	1aeb      	subs	r3, r5, r3
 801764c:	18d3      	adds	r3, r2, r3
 801764e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017650:	9314      	str	r3, [sp, #80]	@ 0x50
 8017652:	2500      	movs	r5, #0
 8017654:	e7ef      	b.n	8017636 <_dtoa_r+0x926>
 8017656:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017658:	e75e      	b.n	8017518 <_dtoa_r+0x808>
 801765a:	2b04      	cmp	r3, #4
 801765c:	d0a8      	beq.n	80175b0 <_dtoa_r+0x8a0>
 801765e:	331c      	adds	r3, #28
 8017660:	e79f      	b.n	80175a2 <_dtoa_r+0x892>
 8017662:	0013      	movs	r3, r2
 8017664:	e7fb      	b.n	801765e <_dtoa_r+0x94e>
 8017666:	9b04      	ldr	r3, [sp, #16]
 8017668:	930c      	str	r3, [sp, #48]	@ 0x30
 801766a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801766c:	930e      	str	r3, [sp, #56]	@ 0x38
 801766e:	2b00      	cmp	r3, #0
 8017670:	dc23      	bgt.n	80176ba <_dtoa_r+0x9aa>
 8017672:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017674:	2b02      	cmp	r3, #2
 8017676:	dd20      	ble.n	80176ba <_dtoa_r+0x9aa>
 8017678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801767a:	2b00      	cmp	r3, #0
 801767c:	d000      	beq.n	8017680 <_dtoa_r+0x970>
 801767e:	e6b5      	b.n	80173ec <_dtoa_r+0x6dc>
 8017680:	0031      	movs	r1, r6
 8017682:	2205      	movs	r2, #5
 8017684:	9803      	ldr	r0, [sp, #12]
 8017686:	f000 faa5 	bl	8017bd4 <__multadd>
 801768a:	0006      	movs	r6, r0
 801768c:	0001      	movs	r1, r0
 801768e:	9805      	ldr	r0, [sp, #20]
 8017690:	f000 fcc6 	bl	8018020 <__mcmp>
 8017694:	2800      	cmp	r0, #0
 8017696:	dc00      	bgt.n	801769a <_dtoa_r+0x98a>
 8017698:	e6a8      	b.n	80173ec <_dtoa_r+0x6dc>
 801769a:	9b08      	ldr	r3, [sp, #32]
 801769c:	9a08      	ldr	r2, [sp, #32]
 801769e:	1c5c      	adds	r4, r3, #1
 80176a0:	2331      	movs	r3, #49	@ 0x31
 80176a2:	7013      	strb	r3, [r2, #0]
 80176a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176a6:	3301      	adds	r3, #1
 80176a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80176aa:	e6a3      	b.n	80173f4 <_dtoa_r+0x6e4>
 80176ac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80176ae:	0037      	movs	r7, r6
 80176b0:	e7f3      	b.n	801769a <_dtoa_r+0x98a>
 80176b2:	9b04      	ldr	r3, [sp, #16]
 80176b4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80176b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80176b8:	e7f9      	b.n	80176ae <_dtoa_r+0x99e>
 80176ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d100      	bne.n	80176c2 <_dtoa_r+0x9b2>
 80176c0:	e100      	b.n	80178c4 <_dtoa_r+0xbb4>
 80176c2:	2c00      	cmp	r4, #0
 80176c4:	dd05      	ble.n	80176d2 <_dtoa_r+0x9c2>
 80176c6:	0039      	movs	r1, r7
 80176c8:	0022      	movs	r2, r4
 80176ca:	9803      	ldr	r0, [sp, #12]
 80176cc:	f000 fc3c 	bl	8017f48 <__lshift>
 80176d0:	0007      	movs	r7, r0
 80176d2:	0038      	movs	r0, r7
 80176d4:	2d00      	cmp	r5, #0
 80176d6:	d018      	beq.n	801770a <_dtoa_r+0x9fa>
 80176d8:	6879      	ldr	r1, [r7, #4]
 80176da:	9803      	ldr	r0, [sp, #12]
 80176dc:	f000 fa12 	bl	8017b04 <_Balloc>
 80176e0:	1e04      	subs	r4, r0, #0
 80176e2:	d105      	bne.n	80176f0 <_dtoa_r+0x9e0>
 80176e4:	0022      	movs	r2, r4
 80176e6:	4b2b      	ldr	r3, [pc, #172]	@ (8017794 <_dtoa_r+0xa84>)
 80176e8:	482b      	ldr	r0, [pc, #172]	@ (8017798 <_dtoa_r+0xa88>)
 80176ea:	492c      	ldr	r1, [pc, #176]	@ (801779c <_dtoa_r+0xa8c>)
 80176ec:	f7ff fb25 	bl	8016d3a <_dtoa_r+0x2a>
 80176f0:	0039      	movs	r1, r7
 80176f2:	693a      	ldr	r2, [r7, #16]
 80176f4:	310c      	adds	r1, #12
 80176f6:	3202      	adds	r2, #2
 80176f8:	0092      	lsls	r2, r2, #2
 80176fa:	300c      	adds	r0, #12
 80176fc:	f7ff fa70 	bl	8016be0 <memcpy>
 8017700:	2201      	movs	r2, #1
 8017702:	0021      	movs	r1, r4
 8017704:	9803      	ldr	r0, [sp, #12]
 8017706:	f000 fc1f 	bl	8017f48 <__lshift>
 801770a:	9b08      	ldr	r3, [sp, #32]
 801770c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801770e:	9306      	str	r3, [sp, #24]
 8017710:	3b01      	subs	r3, #1
 8017712:	189b      	adds	r3, r3, r2
 8017714:	2201      	movs	r2, #1
 8017716:	9704      	str	r7, [sp, #16]
 8017718:	0007      	movs	r7, r0
 801771a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801771c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801771e:	4013      	ands	r3, r2
 8017720:	930e      	str	r3, [sp, #56]	@ 0x38
 8017722:	0031      	movs	r1, r6
 8017724:	9805      	ldr	r0, [sp, #20]
 8017726:	f7ff fa64 	bl	8016bf2 <quorem>
 801772a:	9904      	ldr	r1, [sp, #16]
 801772c:	0005      	movs	r5, r0
 801772e:	900a      	str	r0, [sp, #40]	@ 0x28
 8017730:	9805      	ldr	r0, [sp, #20]
 8017732:	f000 fc75 	bl	8018020 <__mcmp>
 8017736:	003a      	movs	r2, r7
 8017738:	900d      	str	r0, [sp, #52]	@ 0x34
 801773a:	0031      	movs	r1, r6
 801773c:	9803      	ldr	r0, [sp, #12]
 801773e:	f000 fc8b 	bl	8018058 <__mdiff>
 8017742:	2201      	movs	r2, #1
 8017744:	68c3      	ldr	r3, [r0, #12]
 8017746:	0004      	movs	r4, r0
 8017748:	3530      	adds	r5, #48	@ 0x30
 801774a:	9209      	str	r2, [sp, #36]	@ 0x24
 801774c:	2b00      	cmp	r3, #0
 801774e:	d104      	bne.n	801775a <_dtoa_r+0xa4a>
 8017750:	0001      	movs	r1, r0
 8017752:	9805      	ldr	r0, [sp, #20]
 8017754:	f000 fc64 	bl	8018020 <__mcmp>
 8017758:	9009      	str	r0, [sp, #36]	@ 0x24
 801775a:	0021      	movs	r1, r4
 801775c:	9803      	ldr	r0, [sp, #12]
 801775e:	f000 fa15 	bl	8017b8c <_Bfree>
 8017762:	9b06      	ldr	r3, [sp, #24]
 8017764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017766:	1c5c      	adds	r4, r3, #1
 8017768:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801776a:	4313      	orrs	r3, r2
 801776c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801776e:	4313      	orrs	r3, r2
 8017770:	d116      	bne.n	80177a0 <_dtoa_r+0xa90>
 8017772:	2d39      	cmp	r5, #57	@ 0x39
 8017774:	d02f      	beq.n	80177d6 <_dtoa_r+0xac6>
 8017776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017778:	2b00      	cmp	r3, #0
 801777a:	dd01      	ble.n	8017780 <_dtoa_r+0xa70>
 801777c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801777e:	3531      	adds	r5, #49	@ 0x31
 8017780:	9b06      	ldr	r3, [sp, #24]
 8017782:	701d      	strb	r5, [r3, #0]
 8017784:	e638      	b.n	80173f8 <_dtoa_r+0x6e8>
 8017786:	46c0      	nop			@ (mov r8, r8)
 8017788:	40240000 	.word	0x40240000
 801778c:	00000433 	.word	0x00000433
 8017790:	7ff00000 	.word	0x7ff00000
 8017794:	0801a618 	.word	0x0801a618
 8017798:	0801a5c0 	.word	0x0801a5c0
 801779c:	000002ef 	.word	0x000002ef
 80177a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	db04      	blt.n	80177b0 <_dtoa_r+0xaa0>
 80177a6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80177a8:	4313      	orrs	r3, r2
 80177aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80177ac:	4313      	orrs	r3, r2
 80177ae:	d11e      	bne.n	80177ee <_dtoa_r+0xade>
 80177b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	dde4      	ble.n	8017780 <_dtoa_r+0xa70>
 80177b6:	9905      	ldr	r1, [sp, #20]
 80177b8:	2201      	movs	r2, #1
 80177ba:	9803      	ldr	r0, [sp, #12]
 80177bc:	f000 fbc4 	bl	8017f48 <__lshift>
 80177c0:	0031      	movs	r1, r6
 80177c2:	9005      	str	r0, [sp, #20]
 80177c4:	f000 fc2c 	bl	8018020 <__mcmp>
 80177c8:	2800      	cmp	r0, #0
 80177ca:	dc02      	bgt.n	80177d2 <_dtoa_r+0xac2>
 80177cc:	d1d8      	bne.n	8017780 <_dtoa_r+0xa70>
 80177ce:	07eb      	lsls	r3, r5, #31
 80177d0:	d5d6      	bpl.n	8017780 <_dtoa_r+0xa70>
 80177d2:	2d39      	cmp	r5, #57	@ 0x39
 80177d4:	d1d2      	bne.n	801777c <_dtoa_r+0xa6c>
 80177d6:	2339      	movs	r3, #57	@ 0x39
 80177d8:	9a06      	ldr	r2, [sp, #24]
 80177da:	7013      	strb	r3, [r2, #0]
 80177dc:	0023      	movs	r3, r4
 80177de:	001c      	movs	r4, r3
 80177e0:	3b01      	subs	r3, #1
 80177e2:	781a      	ldrb	r2, [r3, #0]
 80177e4:	2a39      	cmp	r2, #57	@ 0x39
 80177e6:	d04f      	beq.n	8017888 <_dtoa_r+0xb78>
 80177e8:	3201      	adds	r2, #1
 80177ea:	701a      	strb	r2, [r3, #0]
 80177ec:	e604      	b.n	80173f8 <_dtoa_r+0x6e8>
 80177ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	dd03      	ble.n	80177fc <_dtoa_r+0xaec>
 80177f4:	2d39      	cmp	r5, #57	@ 0x39
 80177f6:	d0ee      	beq.n	80177d6 <_dtoa_r+0xac6>
 80177f8:	3501      	adds	r5, #1
 80177fa:	e7c1      	b.n	8017780 <_dtoa_r+0xa70>
 80177fc:	9b06      	ldr	r3, [sp, #24]
 80177fe:	9a06      	ldr	r2, [sp, #24]
 8017800:	701d      	strb	r5, [r3, #0]
 8017802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017804:	4293      	cmp	r3, r2
 8017806:	d02a      	beq.n	801785e <_dtoa_r+0xb4e>
 8017808:	2300      	movs	r3, #0
 801780a:	220a      	movs	r2, #10
 801780c:	9905      	ldr	r1, [sp, #20]
 801780e:	9803      	ldr	r0, [sp, #12]
 8017810:	f000 f9e0 	bl	8017bd4 <__multadd>
 8017814:	9b04      	ldr	r3, [sp, #16]
 8017816:	9005      	str	r0, [sp, #20]
 8017818:	42bb      	cmp	r3, r7
 801781a:	d109      	bne.n	8017830 <_dtoa_r+0xb20>
 801781c:	2300      	movs	r3, #0
 801781e:	220a      	movs	r2, #10
 8017820:	9904      	ldr	r1, [sp, #16]
 8017822:	9803      	ldr	r0, [sp, #12]
 8017824:	f000 f9d6 	bl	8017bd4 <__multadd>
 8017828:	9004      	str	r0, [sp, #16]
 801782a:	0007      	movs	r7, r0
 801782c:	9406      	str	r4, [sp, #24]
 801782e:	e778      	b.n	8017722 <_dtoa_r+0xa12>
 8017830:	9904      	ldr	r1, [sp, #16]
 8017832:	2300      	movs	r3, #0
 8017834:	220a      	movs	r2, #10
 8017836:	9803      	ldr	r0, [sp, #12]
 8017838:	f000 f9cc 	bl	8017bd4 <__multadd>
 801783c:	2300      	movs	r3, #0
 801783e:	9004      	str	r0, [sp, #16]
 8017840:	220a      	movs	r2, #10
 8017842:	0039      	movs	r1, r7
 8017844:	9803      	ldr	r0, [sp, #12]
 8017846:	f000 f9c5 	bl	8017bd4 <__multadd>
 801784a:	e7ee      	b.n	801782a <_dtoa_r+0xb1a>
 801784c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801784e:	2401      	movs	r4, #1
 8017850:	2b00      	cmp	r3, #0
 8017852:	dd00      	ble.n	8017856 <_dtoa_r+0xb46>
 8017854:	001c      	movs	r4, r3
 8017856:	9b08      	ldr	r3, [sp, #32]
 8017858:	191c      	adds	r4, r3, r4
 801785a:	2300      	movs	r3, #0
 801785c:	9304      	str	r3, [sp, #16]
 801785e:	9905      	ldr	r1, [sp, #20]
 8017860:	2201      	movs	r2, #1
 8017862:	9803      	ldr	r0, [sp, #12]
 8017864:	f000 fb70 	bl	8017f48 <__lshift>
 8017868:	0031      	movs	r1, r6
 801786a:	9005      	str	r0, [sp, #20]
 801786c:	f000 fbd8 	bl	8018020 <__mcmp>
 8017870:	2800      	cmp	r0, #0
 8017872:	dcb3      	bgt.n	80177dc <_dtoa_r+0xacc>
 8017874:	d101      	bne.n	801787a <_dtoa_r+0xb6a>
 8017876:	07ed      	lsls	r5, r5, #31
 8017878:	d4b0      	bmi.n	80177dc <_dtoa_r+0xacc>
 801787a:	0023      	movs	r3, r4
 801787c:	001c      	movs	r4, r3
 801787e:	3b01      	subs	r3, #1
 8017880:	781a      	ldrb	r2, [r3, #0]
 8017882:	2a30      	cmp	r2, #48	@ 0x30
 8017884:	d0fa      	beq.n	801787c <_dtoa_r+0xb6c>
 8017886:	e5b7      	b.n	80173f8 <_dtoa_r+0x6e8>
 8017888:	9a08      	ldr	r2, [sp, #32]
 801788a:	429a      	cmp	r2, r3
 801788c:	d1a7      	bne.n	80177de <_dtoa_r+0xace>
 801788e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017890:	3301      	adds	r3, #1
 8017892:	930c      	str	r3, [sp, #48]	@ 0x30
 8017894:	2331      	movs	r3, #49	@ 0x31
 8017896:	7013      	strb	r3, [r2, #0]
 8017898:	e5ae      	b.n	80173f8 <_dtoa_r+0x6e8>
 801789a:	4b15      	ldr	r3, [pc, #84]	@ (80178f0 <_dtoa_r+0xbe0>)
 801789c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801789e:	9308      	str	r3, [sp, #32]
 80178a0:	4b14      	ldr	r3, [pc, #80]	@ (80178f4 <_dtoa_r+0xbe4>)
 80178a2:	2a00      	cmp	r2, #0
 80178a4:	d001      	beq.n	80178aa <_dtoa_r+0xb9a>
 80178a6:	f7ff fa7b 	bl	8016da0 <_dtoa_r+0x90>
 80178aa:	f7ff fa7b 	bl	8016da4 <_dtoa_r+0x94>
 80178ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80178b0:	2b01      	cmp	r3, #1
 80178b2:	dc00      	bgt.n	80178b6 <_dtoa_r+0xba6>
 80178b4:	e648      	b.n	8017548 <_dtoa_r+0x838>
 80178b6:	2001      	movs	r0, #1
 80178b8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80178ba:	e665      	b.n	8017588 <_dtoa_r+0x878>
 80178bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178be:	2b00      	cmp	r3, #0
 80178c0:	dc00      	bgt.n	80178c4 <_dtoa_r+0xbb4>
 80178c2:	e6d6      	b.n	8017672 <_dtoa_r+0x962>
 80178c4:	2400      	movs	r4, #0
 80178c6:	0031      	movs	r1, r6
 80178c8:	9805      	ldr	r0, [sp, #20]
 80178ca:	f7ff f992 	bl	8016bf2 <quorem>
 80178ce:	9b08      	ldr	r3, [sp, #32]
 80178d0:	3030      	adds	r0, #48	@ 0x30
 80178d2:	5518      	strb	r0, [r3, r4]
 80178d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178d6:	3401      	adds	r4, #1
 80178d8:	0005      	movs	r5, r0
 80178da:	429c      	cmp	r4, r3
 80178dc:	dab6      	bge.n	801784c <_dtoa_r+0xb3c>
 80178de:	2300      	movs	r3, #0
 80178e0:	220a      	movs	r2, #10
 80178e2:	9905      	ldr	r1, [sp, #20]
 80178e4:	9803      	ldr	r0, [sp, #12]
 80178e6:	f000 f975 	bl	8017bd4 <__multadd>
 80178ea:	9005      	str	r0, [sp, #20]
 80178ec:	e7eb      	b.n	80178c6 <_dtoa_r+0xbb6>
 80178ee:	46c0      	nop			@ (mov r8, r8)
 80178f0:	0801a59c 	.word	0x0801a59c
 80178f4:	0801a5a4 	.word	0x0801a5a4

080178f8 <_free_r>:
 80178f8:	b570      	push	{r4, r5, r6, lr}
 80178fa:	0005      	movs	r5, r0
 80178fc:	1e0c      	subs	r4, r1, #0
 80178fe:	d010      	beq.n	8017922 <_free_r+0x2a>
 8017900:	3c04      	subs	r4, #4
 8017902:	6823      	ldr	r3, [r4, #0]
 8017904:	2b00      	cmp	r3, #0
 8017906:	da00      	bge.n	801790a <_free_r+0x12>
 8017908:	18e4      	adds	r4, r4, r3
 801790a:	0028      	movs	r0, r5
 801790c:	f000 f8ea 	bl	8017ae4 <__malloc_lock>
 8017910:	4a1d      	ldr	r2, [pc, #116]	@ (8017988 <_free_r+0x90>)
 8017912:	6813      	ldr	r3, [r2, #0]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d105      	bne.n	8017924 <_free_r+0x2c>
 8017918:	6063      	str	r3, [r4, #4]
 801791a:	6014      	str	r4, [r2, #0]
 801791c:	0028      	movs	r0, r5
 801791e:	f000 f8e9 	bl	8017af4 <__malloc_unlock>
 8017922:	bd70      	pop	{r4, r5, r6, pc}
 8017924:	42a3      	cmp	r3, r4
 8017926:	d908      	bls.n	801793a <_free_r+0x42>
 8017928:	6820      	ldr	r0, [r4, #0]
 801792a:	1821      	adds	r1, r4, r0
 801792c:	428b      	cmp	r3, r1
 801792e:	d1f3      	bne.n	8017918 <_free_r+0x20>
 8017930:	6819      	ldr	r1, [r3, #0]
 8017932:	685b      	ldr	r3, [r3, #4]
 8017934:	1809      	adds	r1, r1, r0
 8017936:	6021      	str	r1, [r4, #0]
 8017938:	e7ee      	b.n	8017918 <_free_r+0x20>
 801793a:	001a      	movs	r2, r3
 801793c:	685b      	ldr	r3, [r3, #4]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d001      	beq.n	8017946 <_free_r+0x4e>
 8017942:	42a3      	cmp	r3, r4
 8017944:	d9f9      	bls.n	801793a <_free_r+0x42>
 8017946:	6811      	ldr	r1, [r2, #0]
 8017948:	1850      	adds	r0, r2, r1
 801794a:	42a0      	cmp	r0, r4
 801794c:	d10b      	bne.n	8017966 <_free_r+0x6e>
 801794e:	6820      	ldr	r0, [r4, #0]
 8017950:	1809      	adds	r1, r1, r0
 8017952:	1850      	adds	r0, r2, r1
 8017954:	6011      	str	r1, [r2, #0]
 8017956:	4283      	cmp	r3, r0
 8017958:	d1e0      	bne.n	801791c <_free_r+0x24>
 801795a:	6818      	ldr	r0, [r3, #0]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	1841      	adds	r1, r0, r1
 8017960:	6011      	str	r1, [r2, #0]
 8017962:	6053      	str	r3, [r2, #4]
 8017964:	e7da      	b.n	801791c <_free_r+0x24>
 8017966:	42a0      	cmp	r0, r4
 8017968:	d902      	bls.n	8017970 <_free_r+0x78>
 801796a:	230c      	movs	r3, #12
 801796c:	602b      	str	r3, [r5, #0]
 801796e:	e7d5      	b.n	801791c <_free_r+0x24>
 8017970:	6820      	ldr	r0, [r4, #0]
 8017972:	1821      	adds	r1, r4, r0
 8017974:	428b      	cmp	r3, r1
 8017976:	d103      	bne.n	8017980 <_free_r+0x88>
 8017978:	6819      	ldr	r1, [r3, #0]
 801797a:	685b      	ldr	r3, [r3, #4]
 801797c:	1809      	adds	r1, r1, r0
 801797e:	6021      	str	r1, [r4, #0]
 8017980:	6063      	str	r3, [r4, #4]
 8017982:	6054      	str	r4, [r2, #4]
 8017984:	e7ca      	b.n	801791c <_free_r+0x24>
 8017986:	46c0      	nop			@ (mov r8, r8)
 8017988:	200043dc 	.word	0x200043dc

0801798c <malloc>:
 801798c:	b510      	push	{r4, lr}
 801798e:	4b03      	ldr	r3, [pc, #12]	@ (801799c <malloc+0x10>)
 8017990:	0001      	movs	r1, r0
 8017992:	6818      	ldr	r0, [r3, #0]
 8017994:	f000 f826 	bl	80179e4 <_malloc_r>
 8017998:	bd10      	pop	{r4, pc}
 801799a:	46c0      	nop			@ (mov r8, r8)
 801799c:	200002d4 	.word	0x200002d4

080179a0 <sbrk_aligned>:
 80179a0:	b570      	push	{r4, r5, r6, lr}
 80179a2:	4e0f      	ldr	r6, [pc, #60]	@ (80179e0 <sbrk_aligned+0x40>)
 80179a4:	000d      	movs	r5, r1
 80179a6:	6831      	ldr	r1, [r6, #0]
 80179a8:	0004      	movs	r4, r0
 80179aa:	2900      	cmp	r1, #0
 80179ac:	d102      	bne.n	80179b4 <sbrk_aligned+0x14>
 80179ae:	f001 f855 	bl	8018a5c <_sbrk_r>
 80179b2:	6030      	str	r0, [r6, #0]
 80179b4:	0029      	movs	r1, r5
 80179b6:	0020      	movs	r0, r4
 80179b8:	f001 f850 	bl	8018a5c <_sbrk_r>
 80179bc:	1c43      	adds	r3, r0, #1
 80179be:	d103      	bne.n	80179c8 <sbrk_aligned+0x28>
 80179c0:	2501      	movs	r5, #1
 80179c2:	426d      	negs	r5, r5
 80179c4:	0028      	movs	r0, r5
 80179c6:	bd70      	pop	{r4, r5, r6, pc}
 80179c8:	2303      	movs	r3, #3
 80179ca:	1cc5      	adds	r5, r0, #3
 80179cc:	439d      	bics	r5, r3
 80179ce:	42a8      	cmp	r0, r5
 80179d0:	d0f8      	beq.n	80179c4 <sbrk_aligned+0x24>
 80179d2:	1a29      	subs	r1, r5, r0
 80179d4:	0020      	movs	r0, r4
 80179d6:	f001 f841 	bl	8018a5c <_sbrk_r>
 80179da:	3001      	adds	r0, #1
 80179dc:	d1f2      	bne.n	80179c4 <sbrk_aligned+0x24>
 80179de:	e7ef      	b.n	80179c0 <sbrk_aligned+0x20>
 80179e0:	200043d8 	.word	0x200043d8

080179e4 <_malloc_r>:
 80179e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179e6:	2203      	movs	r2, #3
 80179e8:	1ccb      	adds	r3, r1, #3
 80179ea:	4393      	bics	r3, r2
 80179ec:	3308      	adds	r3, #8
 80179ee:	0005      	movs	r5, r0
 80179f0:	001f      	movs	r7, r3
 80179f2:	2b0c      	cmp	r3, #12
 80179f4:	d234      	bcs.n	8017a60 <_malloc_r+0x7c>
 80179f6:	270c      	movs	r7, #12
 80179f8:	42b9      	cmp	r1, r7
 80179fa:	d833      	bhi.n	8017a64 <_malloc_r+0x80>
 80179fc:	0028      	movs	r0, r5
 80179fe:	f000 f871 	bl	8017ae4 <__malloc_lock>
 8017a02:	4e37      	ldr	r6, [pc, #220]	@ (8017ae0 <_malloc_r+0xfc>)
 8017a04:	6833      	ldr	r3, [r6, #0]
 8017a06:	001c      	movs	r4, r3
 8017a08:	2c00      	cmp	r4, #0
 8017a0a:	d12f      	bne.n	8017a6c <_malloc_r+0x88>
 8017a0c:	0039      	movs	r1, r7
 8017a0e:	0028      	movs	r0, r5
 8017a10:	f7ff ffc6 	bl	80179a0 <sbrk_aligned>
 8017a14:	0004      	movs	r4, r0
 8017a16:	1c43      	adds	r3, r0, #1
 8017a18:	d15f      	bne.n	8017ada <_malloc_r+0xf6>
 8017a1a:	6834      	ldr	r4, [r6, #0]
 8017a1c:	9400      	str	r4, [sp, #0]
 8017a1e:	9b00      	ldr	r3, [sp, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d14a      	bne.n	8017aba <_malloc_r+0xd6>
 8017a24:	2c00      	cmp	r4, #0
 8017a26:	d052      	beq.n	8017ace <_malloc_r+0xea>
 8017a28:	6823      	ldr	r3, [r4, #0]
 8017a2a:	0028      	movs	r0, r5
 8017a2c:	18e3      	adds	r3, r4, r3
 8017a2e:	9900      	ldr	r1, [sp, #0]
 8017a30:	9301      	str	r3, [sp, #4]
 8017a32:	f001 f813 	bl	8018a5c <_sbrk_r>
 8017a36:	9b01      	ldr	r3, [sp, #4]
 8017a38:	4283      	cmp	r3, r0
 8017a3a:	d148      	bne.n	8017ace <_malloc_r+0xea>
 8017a3c:	6823      	ldr	r3, [r4, #0]
 8017a3e:	0028      	movs	r0, r5
 8017a40:	1aff      	subs	r7, r7, r3
 8017a42:	0039      	movs	r1, r7
 8017a44:	f7ff ffac 	bl	80179a0 <sbrk_aligned>
 8017a48:	3001      	adds	r0, #1
 8017a4a:	d040      	beq.n	8017ace <_malloc_r+0xea>
 8017a4c:	6823      	ldr	r3, [r4, #0]
 8017a4e:	19db      	adds	r3, r3, r7
 8017a50:	6023      	str	r3, [r4, #0]
 8017a52:	6833      	ldr	r3, [r6, #0]
 8017a54:	685a      	ldr	r2, [r3, #4]
 8017a56:	2a00      	cmp	r2, #0
 8017a58:	d133      	bne.n	8017ac2 <_malloc_r+0xde>
 8017a5a:	9b00      	ldr	r3, [sp, #0]
 8017a5c:	6033      	str	r3, [r6, #0]
 8017a5e:	e019      	b.n	8017a94 <_malloc_r+0xb0>
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	dac9      	bge.n	80179f8 <_malloc_r+0x14>
 8017a64:	230c      	movs	r3, #12
 8017a66:	602b      	str	r3, [r5, #0]
 8017a68:	2000      	movs	r0, #0
 8017a6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017a6c:	6821      	ldr	r1, [r4, #0]
 8017a6e:	1bc9      	subs	r1, r1, r7
 8017a70:	d420      	bmi.n	8017ab4 <_malloc_r+0xd0>
 8017a72:	290b      	cmp	r1, #11
 8017a74:	d90a      	bls.n	8017a8c <_malloc_r+0xa8>
 8017a76:	19e2      	adds	r2, r4, r7
 8017a78:	6027      	str	r7, [r4, #0]
 8017a7a:	42a3      	cmp	r3, r4
 8017a7c:	d104      	bne.n	8017a88 <_malloc_r+0xa4>
 8017a7e:	6032      	str	r2, [r6, #0]
 8017a80:	6863      	ldr	r3, [r4, #4]
 8017a82:	6011      	str	r1, [r2, #0]
 8017a84:	6053      	str	r3, [r2, #4]
 8017a86:	e005      	b.n	8017a94 <_malloc_r+0xb0>
 8017a88:	605a      	str	r2, [r3, #4]
 8017a8a:	e7f9      	b.n	8017a80 <_malloc_r+0x9c>
 8017a8c:	6862      	ldr	r2, [r4, #4]
 8017a8e:	42a3      	cmp	r3, r4
 8017a90:	d10e      	bne.n	8017ab0 <_malloc_r+0xcc>
 8017a92:	6032      	str	r2, [r6, #0]
 8017a94:	0028      	movs	r0, r5
 8017a96:	f000 f82d 	bl	8017af4 <__malloc_unlock>
 8017a9a:	0020      	movs	r0, r4
 8017a9c:	2207      	movs	r2, #7
 8017a9e:	300b      	adds	r0, #11
 8017aa0:	1d23      	adds	r3, r4, #4
 8017aa2:	4390      	bics	r0, r2
 8017aa4:	1ac2      	subs	r2, r0, r3
 8017aa6:	4298      	cmp	r0, r3
 8017aa8:	d0df      	beq.n	8017a6a <_malloc_r+0x86>
 8017aaa:	1a1b      	subs	r3, r3, r0
 8017aac:	50a3      	str	r3, [r4, r2]
 8017aae:	e7dc      	b.n	8017a6a <_malloc_r+0x86>
 8017ab0:	605a      	str	r2, [r3, #4]
 8017ab2:	e7ef      	b.n	8017a94 <_malloc_r+0xb0>
 8017ab4:	0023      	movs	r3, r4
 8017ab6:	6864      	ldr	r4, [r4, #4]
 8017ab8:	e7a6      	b.n	8017a08 <_malloc_r+0x24>
 8017aba:	9c00      	ldr	r4, [sp, #0]
 8017abc:	6863      	ldr	r3, [r4, #4]
 8017abe:	9300      	str	r3, [sp, #0]
 8017ac0:	e7ad      	b.n	8017a1e <_malloc_r+0x3a>
 8017ac2:	001a      	movs	r2, r3
 8017ac4:	685b      	ldr	r3, [r3, #4]
 8017ac6:	42a3      	cmp	r3, r4
 8017ac8:	d1fb      	bne.n	8017ac2 <_malloc_r+0xde>
 8017aca:	2300      	movs	r3, #0
 8017acc:	e7da      	b.n	8017a84 <_malloc_r+0xa0>
 8017ace:	230c      	movs	r3, #12
 8017ad0:	0028      	movs	r0, r5
 8017ad2:	602b      	str	r3, [r5, #0]
 8017ad4:	f000 f80e 	bl	8017af4 <__malloc_unlock>
 8017ad8:	e7c6      	b.n	8017a68 <_malloc_r+0x84>
 8017ada:	6007      	str	r7, [r0, #0]
 8017adc:	e7da      	b.n	8017a94 <_malloc_r+0xb0>
 8017ade:	46c0      	nop			@ (mov r8, r8)
 8017ae0:	200043dc 	.word	0x200043dc

08017ae4 <__malloc_lock>:
 8017ae4:	b510      	push	{r4, lr}
 8017ae6:	4802      	ldr	r0, [pc, #8]	@ (8017af0 <__malloc_lock+0xc>)
 8017ae8:	f7ff f86d 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 8017aec:	bd10      	pop	{r4, pc}
 8017aee:	46c0      	nop			@ (mov r8, r8)
 8017af0:	200043d4 	.word	0x200043d4

08017af4 <__malloc_unlock>:
 8017af4:	b510      	push	{r4, lr}
 8017af6:	4802      	ldr	r0, [pc, #8]	@ (8017b00 <__malloc_unlock+0xc>)
 8017af8:	f7ff f866 	bl	8016bc8 <__retarget_lock_release_recursive>
 8017afc:	bd10      	pop	{r4, pc}
 8017afe:	46c0      	nop			@ (mov r8, r8)
 8017b00:	200043d4 	.word	0x200043d4

08017b04 <_Balloc>:
 8017b04:	b570      	push	{r4, r5, r6, lr}
 8017b06:	69c5      	ldr	r5, [r0, #28]
 8017b08:	0006      	movs	r6, r0
 8017b0a:	000c      	movs	r4, r1
 8017b0c:	2d00      	cmp	r5, #0
 8017b0e:	d10e      	bne.n	8017b2e <_Balloc+0x2a>
 8017b10:	2010      	movs	r0, #16
 8017b12:	f7ff ff3b 	bl	801798c <malloc>
 8017b16:	1e02      	subs	r2, r0, #0
 8017b18:	61f0      	str	r0, [r6, #28]
 8017b1a:	d104      	bne.n	8017b26 <_Balloc+0x22>
 8017b1c:	216b      	movs	r1, #107	@ 0x6b
 8017b1e:	4b19      	ldr	r3, [pc, #100]	@ (8017b84 <_Balloc+0x80>)
 8017b20:	4819      	ldr	r0, [pc, #100]	@ (8017b88 <_Balloc+0x84>)
 8017b22:	f000 ffad 	bl	8018a80 <__assert_func>
 8017b26:	6045      	str	r5, [r0, #4]
 8017b28:	6085      	str	r5, [r0, #8]
 8017b2a:	6005      	str	r5, [r0, #0]
 8017b2c:	60c5      	str	r5, [r0, #12]
 8017b2e:	69f5      	ldr	r5, [r6, #28]
 8017b30:	68eb      	ldr	r3, [r5, #12]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d013      	beq.n	8017b5e <_Balloc+0x5a>
 8017b36:	69f3      	ldr	r3, [r6, #28]
 8017b38:	00a2      	lsls	r2, r4, #2
 8017b3a:	68db      	ldr	r3, [r3, #12]
 8017b3c:	189b      	adds	r3, r3, r2
 8017b3e:	6818      	ldr	r0, [r3, #0]
 8017b40:	2800      	cmp	r0, #0
 8017b42:	d118      	bne.n	8017b76 <_Balloc+0x72>
 8017b44:	2101      	movs	r1, #1
 8017b46:	000d      	movs	r5, r1
 8017b48:	40a5      	lsls	r5, r4
 8017b4a:	1d6a      	adds	r2, r5, #5
 8017b4c:	0030      	movs	r0, r6
 8017b4e:	0092      	lsls	r2, r2, #2
 8017b50:	f000 ffb4 	bl	8018abc <_calloc_r>
 8017b54:	2800      	cmp	r0, #0
 8017b56:	d00c      	beq.n	8017b72 <_Balloc+0x6e>
 8017b58:	6044      	str	r4, [r0, #4]
 8017b5a:	6085      	str	r5, [r0, #8]
 8017b5c:	e00d      	b.n	8017b7a <_Balloc+0x76>
 8017b5e:	2221      	movs	r2, #33	@ 0x21
 8017b60:	2104      	movs	r1, #4
 8017b62:	0030      	movs	r0, r6
 8017b64:	f000 ffaa 	bl	8018abc <_calloc_r>
 8017b68:	69f3      	ldr	r3, [r6, #28]
 8017b6a:	60e8      	str	r0, [r5, #12]
 8017b6c:	68db      	ldr	r3, [r3, #12]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d1e1      	bne.n	8017b36 <_Balloc+0x32>
 8017b72:	2000      	movs	r0, #0
 8017b74:	bd70      	pop	{r4, r5, r6, pc}
 8017b76:	6802      	ldr	r2, [r0, #0]
 8017b78:	601a      	str	r2, [r3, #0]
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	6103      	str	r3, [r0, #16]
 8017b7e:	60c3      	str	r3, [r0, #12]
 8017b80:	e7f8      	b.n	8017b74 <_Balloc+0x70>
 8017b82:	46c0      	nop			@ (mov r8, r8)
 8017b84:	0801a5a9 	.word	0x0801a5a9
 8017b88:	0801a629 	.word	0x0801a629

08017b8c <_Bfree>:
 8017b8c:	b570      	push	{r4, r5, r6, lr}
 8017b8e:	69c6      	ldr	r6, [r0, #28]
 8017b90:	0005      	movs	r5, r0
 8017b92:	000c      	movs	r4, r1
 8017b94:	2e00      	cmp	r6, #0
 8017b96:	d10e      	bne.n	8017bb6 <_Bfree+0x2a>
 8017b98:	2010      	movs	r0, #16
 8017b9a:	f7ff fef7 	bl	801798c <malloc>
 8017b9e:	1e02      	subs	r2, r0, #0
 8017ba0:	61e8      	str	r0, [r5, #28]
 8017ba2:	d104      	bne.n	8017bae <_Bfree+0x22>
 8017ba4:	218f      	movs	r1, #143	@ 0x8f
 8017ba6:	4b09      	ldr	r3, [pc, #36]	@ (8017bcc <_Bfree+0x40>)
 8017ba8:	4809      	ldr	r0, [pc, #36]	@ (8017bd0 <_Bfree+0x44>)
 8017baa:	f000 ff69 	bl	8018a80 <__assert_func>
 8017bae:	6046      	str	r6, [r0, #4]
 8017bb0:	6086      	str	r6, [r0, #8]
 8017bb2:	6006      	str	r6, [r0, #0]
 8017bb4:	60c6      	str	r6, [r0, #12]
 8017bb6:	2c00      	cmp	r4, #0
 8017bb8:	d007      	beq.n	8017bca <_Bfree+0x3e>
 8017bba:	69eb      	ldr	r3, [r5, #28]
 8017bbc:	6862      	ldr	r2, [r4, #4]
 8017bbe:	68db      	ldr	r3, [r3, #12]
 8017bc0:	0092      	lsls	r2, r2, #2
 8017bc2:	189b      	adds	r3, r3, r2
 8017bc4:	681a      	ldr	r2, [r3, #0]
 8017bc6:	6022      	str	r2, [r4, #0]
 8017bc8:	601c      	str	r4, [r3, #0]
 8017bca:	bd70      	pop	{r4, r5, r6, pc}
 8017bcc:	0801a5a9 	.word	0x0801a5a9
 8017bd0:	0801a629 	.word	0x0801a629

08017bd4 <__multadd>:
 8017bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017bd6:	000f      	movs	r7, r1
 8017bd8:	9001      	str	r0, [sp, #4]
 8017bda:	000c      	movs	r4, r1
 8017bdc:	001e      	movs	r6, r3
 8017bde:	2000      	movs	r0, #0
 8017be0:	690d      	ldr	r5, [r1, #16]
 8017be2:	3714      	adds	r7, #20
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	3001      	adds	r0, #1
 8017be8:	b299      	uxth	r1, r3
 8017bea:	4351      	muls	r1, r2
 8017bec:	0c1b      	lsrs	r3, r3, #16
 8017bee:	4353      	muls	r3, r2
 8017bf0:	1989      	adds	r1, r1, r6
 8017bf2:	0c0e      	lsrs	r6, r1, #16
 8017bf4:	199b      	adds	r3, r3, r6
 8017bf6:	0c1e      	lsrs	r6, r3, #16
 8017bf8:	b289      	uxth	r1, r1
 8017bfa:	041b      	lsls	r3, r3, #16
 8017bfc:	185b      	adds	r3, r3, r1
 8017bfe:	c708      	stmia	r7!, {r3}
 8017c00:	4285      	cmp	r5, r0
 8017c02:	dcef      	bgt.n	8017be4 <__multadd+0x10>
 8017c04:	2e00      	cmp	r6, #0
 8017c06:	d022      	beq.n	8017c4e <__multadd+0x7a>
 8017c08:	68a3      	ldr	r3, [r4, #8]
 8017c0a:	42ab      	cmp	r3, r5
 8017c0c:	dc19      	bgt.n	8017c42 <__multadd+0x6e>
 8017c0e:	6861      	ldr	r1, [r4, #4]
 8017c10:	9801      	ldr	r0, [sp, #4]
 8017c12:	3101      	adds	r1, #1
 8017c14:	f7ff ff76 	bl	8017b04 <_Balloc>
 8017c18:	1e07      	subs	r7, r0, #0
 8017c1a:	d105      	bne.n	8017c28 <__multadd+0x54>
 8017c1c:	003a      	movs	r2, r7
 8017c1e:	21ba      	movs	r1, #186	@ 0xba
 8017c20:	4b0c      	ldr	r3, [pc, #48]	@ (8017c54 <__multadd+0x80>)
 8017c22:	480d      	ldr	r0, [pc, #52]	@ (8017c58 <__multadd+0x84>)
 8017c24:	f000 ff2c 	bl	8018a80 <__assert_func>
 8017c28:	0021      	movs	r1, r4
 8017c2a:	6922      	ldr	r2, [r4, #16]
 8017c2c:	310c      	adds	r1, #12
 8017c2e:	3202      	adds	r2, #2
 8017c30:	0092      	lsls	r2, r2, #2
 8017c32:	300c      	adds	r0, #12
 8017c34:	f7fe ffd4 	bl	8016be0 <memcpy>
 8017c38:	0021      	movs	r1, r4
 8017c3a:	9801      	ldr	r0, [sp, #4]
 8017c3c:	f7ff ffa6 	bl	8017b8c <_Bfree>
 8017c40:	003c      	movs	r4, r7
 8017c42:	1d2b      	adds	r3, r5, #4
 8017c44:	009b      	lsls	r3, r3, #2
 8017c46:	18e3      	adds	r3, r4, r3
 8017c48:	3501      	adds	r5, #1
 8017c4a:	605e      	str	r6, [r3, #4]
 8017c4c:	6125      	str	r5, [r4, #16]
 8017c4e:	0020      	movs	r0, r4
 8017c50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017c52:	46c0      	nop			@ (mov r8, r8)
 8017c54:	0801a618 	.word	0x0801a618
 8017c58:	0801a629 	.word	0x0801a629

08017c5c <__hi0bits>:
 8017c5c:	2280      	movs	r2, #128	@ 0x80
 8017c5e:	0003      	movs	r3, r0
 8017c60:	0252      	lsls	r2, r2, #9
 8017c62:	2000      	movs	r0, #0
 8017c64:	4293      	cmp	r3, r2
 8017c66:	d201      	bcs.n	8017c6c <__hi0bits+0x10>
 8017c68:	041b      	lsls	r3, r3, #16
 8017c6a:	3010      	adds	r0, #16
 8017c6c:	2280      	movs	r2, #128	@ 0x80
 8017c6e:	0452      	lsls	r2, r2, #17
 8017c70:	4293      	cmp	r3, r2
 8017c72:	d201      	bcs.n	8017c78 <__hi0bits+0x1c>
 8017c74:	3008      	adds	r0, #8
 8017c76:	021b      	lsls	r3, r3, #8
 8017c78:	2280      	movs	r2, #128	@ 0x80
 8017c7a:	0552      	lsls	r2, r2, #21
 8017c7c:	4293      	cmp	r3, r2
 8017c7e:	d201      	bcs.n	8017c84 <__hi0bits+0x28>
 8017c80:	3004      	adds	r0, #4
 8017c82:	011b      	lsls	r3, r3, #4
 8017c84:	2280      	movs	r2, #128	@ 0x80
 8017c86:	05d2      	lsls	r2, r2, #23
 8017c88:	4293      	cmp	r3, r2
 8017c8a:	d201      	bcs.n	8017c90 <__hi0bits+0x34>
 8017c8c:	3002      	adds	r0, #2
 8017c8e:	009b      	lsls	r3, r3, #2
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	db03      	blt.n	8017c9c <__hi0bits+0x40>
 8017c94:	3001      	adds	r0, #1
 8017c96:	4213      	tst	r3, r2
 8017c98:	d100      	bne.n	8017c9c <__hi0bits+0x40>
 8017c9a:	2020      	movs	r0, #32
 8017c9c:	4770      	bx	lr

08017c9e <__lo0bits>:
 8017c9e:	6803      	ldr	r3, [r0, #0]
 8017ca0:	0001      	movs	r1, r0
 8017ca2:	2207      	movs	r2, #7
 8017ca4:	0018      	movs	r0, r3
 8017ca6:	4010      	ands	r0, r2
 8017ca8:	4213      	tst	r3, r2
 8017caa:	d00d      	beq.n	8017cc8 <__lo0bits+0x2a>
 8017cac:	3a06      	subs	r2, #6
 8017cae:	2000      	movs	r0, #0
 8017cb0:	4213      	tst	r3, r2
 8017cb2:	d105      	bne.n	8017cc0 <__lo0bits+0x22>
 8017cb4:	3002      	adds	r0, #2
 8017cb6:	4203      	tst	r3, r0
 8017cb8:	d003      	beq.n	8017cc2 <__lo0bits+0x24>
 8017cba:	40d3      	lsrs	r3, r2
 8017cbc:	0010      	movs	r0, r2
 8017cbe:	600b      	str	r3, [r1, #0]
 8017cc0:	4770      	bx	lr
 8017cc2:	089b      	lsrs	r3, r3, #2
 8017cc4:	600b      	str	r3, [r1, #0]
 8017cc6:	e7fb      	b.n	8017cc0 <__lo0bits+0x22>
 8017cc8:	b29a      	uxth	r2, r3
 8017cca:	2a00      	cmp	r2, #0
 8017ccc:	d101      	bne.n	8017cd2 <__lo0bits+0x34>
 8017cce:	2010      	movs	r0, #16
 8017cd0:	0c1b      	lsrs	r3, r3, #16
 8017cd2:	b2da      	uxtb	r2, r3
 8017cd4:	2a00      	cmp	r2, #0
 8017cd6:	d101      	bne.n	8017cdc <__lo0bits+0x3e>
 8017cd8:	3008      	adds	r0, #8
 8017cda:	0a1b      	lsrs	r3, r3, #8
 8017cdc:	071a      	lsls	r2, r3, #28
 8017cde:	d101      	bne.n	8017ce4 <__lo0bits+0x46>
 8017ce0:	3004      	adds	r0, #4
 8017ce2:	091b      	lsrs	r3, r3, #4
 8017ce4:	079a      	lsls	r2, r3, #30
 8017ce6:	d101      	bne.n	8017cec <__lo0bits+0x4e>
 8017ce8:	3002      	adds	r0, #2
 8017cea:	089b      	lsrs	r3, r3, #2
 8017cec:	07da      	lsls	r2, r3, #31
 8017cee:	d4e9      	bmi.n	8017cc4 <__lo0bits+0x26>
 8017cf0:	3001      	adds	r0, #1
 8017cf2:	085b      	lsrs	r3, r3, #1
 8017cf4:	d1e6      	bne.n	8017cc4 <__lo0bits+0x26>
 8017cf6:	2020      	movs	r0, #32
 8017cf8:	e7e2      	b.n	8017cc0 <__lo0bits+0x22>
	...

08017cfc <__i2b>:
 8017cfc:	b510      	push	{r4, lr}
 8017cfe:	000c      	movs	r4, r1
 8017d00:	2101      	movs	r1, #1
 8017d02:	f7ff feff 	bl	8017b04 <_Balloc>
 8017d06:	2800      	cmp	r0, #0
 8017d08:	d107      	bne.n	8017d1a <__i2b+0x1e>
 8017d0a:	2146      	movs	r1, #70	@ 0x46
 8017d0c:	4c05      	ldr	r4, [pc, #20]	@ (8017d24 <__i2b+0x28>)
 8017d0e:	0002      	movs	r2, r0
 8017d10:	4b05      	ldr	r3, [pc, #20]	@ (8017d28 <__i2b+0x2c>)
 8017d12:	0020      	movs	r0, r4
 8017d14:	31ff      	adds	r1, #255	@ 0xff
 8017d16:	f000 feb3 	bl	8018a80 <__assert_func>
 8017d1a:	2301      	movs	r3, #1
 8017d1c:	6144      	str	r4, [r0, #20]
 8017d1e:	6103      	str	r3, [r0, #16]
 8017d20:	bd10      	pop	{r4, pc}
 8017d22:	46c0      	nop			@ (mov r8, r8)
 8017d24:	0801a629 	.word	0x0801a629
 8017d28:	0801a618 	.word	0x0801a618

08017d2c <__multiply>:
 8017d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d2e:	0014      	movs	r4, r2
 8017d30:	690a      	ldr	r2, [r1, #16]
 8017d32:	6923      	ldr	r3, [r4, #16]
 8017d34:	000d      	movs	r5, r1
 8017d36:	b08b      	sub	sp, #44	@ 0x2c
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	db02      	blt.n	8017d42 <__multiply+0x16>
 8017d3c:	0023      	movs	r3, r4
 8017d3e:	000c      	movs	r4, r1
 8017d40:	001d      	movs	r5, r3
 8017d42:	6927      	ldr	r7, [r4, #16]
 8017d44:	692e      	ldr	r6, [r5, #16]
 8017d46:	6861      	ldr	r1, [r4, #4]
 8017d48:	19bb      	adds	r3, r7, r6
 8017d4a:	9303      	str	r3, [sp, #12]
 8017d4c:	68a3      	ldr	r3, [r4, #8]
 8017d4e:	19ba      	adds	r2, r7, r6
 8017d50:	4293      	cmp	r3, r2
 8017d52:	da00      	bge.n	8017d56 <__multiply+0x2a>
 8017d54:	3101      	adds	r1, #1
 8017d56:	f7ff fed5 	bl	8017b04 <_Balloc>
 8017d5a:	9002      	str	r0, [sp, #8]
 8017d5c:	2800      	cmp	r0, #0
 8017d5e:	d106      	bne.n	8017d6e <__multiply+0x42>
 8017d60:	21b1      	movs	r1, #177	@ 0xb1
 8017d62:	4b49      	ldr	r3, [pc, #292]	@ (8017e88 <__multiply+0x15c>)
 8017d64:	4849      	ldr	r0, [pc, #292]	@ (8017e8c <__multiply+0x160>)
 8017d66:	9a02      	ldr	r2, [sp, #8]
 8017d68:	0049      	lsls	r1, r1, #1
 8017d6a:	f000 fe89 	bl	8018a80 <__assert_func>
 8017d6e:	9b02      	ldr	r3, [sp, #8]
 8017d70:	2200      	movs	r2, #0
 8017d72:	3314      	adds	r3, #20
 8017d74:	469c      	mov	ip, r3
 8017d76:	19bb      	adds	r3, r7, r6
 8017d78:	009b      	lsls	r3, r3, #2
 8017d7a:	4463      	add	r3, ip
 8017d7c:	9304      	str	r3, [sp, #16]
 8017d7e:	4663      	mov	r3, ip
 8017d80:	9904      	ldr	r1, [sp, #16]
 8017d82:	428b      	cmp	r3, r1
 8017d84:	d32a      	bcc.n	8017ddc <__multiply+0xb0>
 8017d86:	0023      	movs	r3, r4
 8017d88:	00bf      	lsls	r7, r7, #2
 8017d8a:	3314      	adds	r3, #20
 8017d8c:	3514      	adds	r5, #20
 8017d8e:	9308      	str	r3, [sp, #32]
 8017d90:	00b6      	lsls	r6, r6, #2
 8017d92:	19db      	adds	r3, r3, r7
 8017d94:	9305      	str	r3, [sp, #20]
 8017d96:	19ab      	adds	r3, r5, r6
 8017d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d9a:	2304      	movs	r3, #4
 8017d9c:	9306      	str	r3, [sp, #24]
 8017d9e:	0023      	movs	r3, r4
 8017da0:	9a05      	ldr	r2, [sp, #20]
 8017da2:	3315      	adds	r3, #21
 8017da4:	9501      	str	r5, [sp, #4]
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d305      	bcc.n	8017db6 <__multiply+0x8a>
 8017daa:	1b13      	subs	r3, r2, r4
 8017dac:	3b15      	subs	r3, #21
 8017dae:	089b      	lsrs	r3, r3, #2
 8017db0:	3301      	adds	r3, #1
 8017db2:	009b      	lsls	r3, r3, #2
 8017db4:	9306      	str	r3, [sp, #24]
 8017db6:	9b01      	ldr	r3, [sp, #4]
 8017db8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017dba:	4293      	cmp	r3, r2
 8017dbc:	d310      	bcc.n	8017de0 <__multiply+0xb4>
 8017dbe:	9b03      	ldr	r3, [sp, #12]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	dd05      	ble.n	8017dd0 <__multiply+0xa4>
 8017dc4:	9b04      	ldr	r3, [sp, #16]
 8017dc6:	3b04      	subs	r3, #4
 8017dc8:	9304      	str	r3, [sp, #16]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d056      	beq.n	8017e7e <__multiply+0x152>
 8017dd0:	9b02      	ldr	r3, [sp, #8]
 8017dd2:	9a03      	ldr	r2, [sp, #12]
 8017dd4:	0018      	movs	r0, r3
 8017dd6:	611a      	str	r2, [r3, #16]
 8017dd8:	b00b      	add	sp, #44	@ 0x2c
 8017dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ddc:	c304      	stmia	r3!, {r2}
 8017dde:	e7cf      	b.n	8017d80 <__multiply+0x54>
 8017de0:	9b01      	ldr	r3, [sp, #4]
 8017de2:	6818      	ldr	r0, [r3, #0]
 8017de4:	b280      	uxth	r0, r0
 8017de6:	2800      	cmp	r0, #0
 8017de8:	d01e      	beq.n	8017e28 <__multiply+0xfc>
 8017dea:	4667      	mov	r7, ip
 8017dec:	2500      	movs	r5, #0
 8017dee:	9e08      	ldr	r6, [sp, #32]
 8017df0:	ce02      	ldmia	r6!, {r1}
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	9307      	str	r3, [sp, #28]
 8017df6:	b28b      	uxth	r3, r1
 8017df8:	4343      	muls	r3, r0
 8017dfa:	001a      	movs	r2, r3
 8017dfc:	466b      	mov	r3, sp
 8017dfe:	0c09      	lsrs	r1, r1, #16
 8017e00:	8b9b      	ldrh	r3, [r3, #28]
 8017e02:	4341      	muls	r1, r0
 8017e04:	18d3      	adds	r3, r2, r3
 8017e06:	9a07      	ldr	r2, [sp, #28]
 8017e08:	195b      	adds	r3, r3, r5
 8017e0a:	0c12      	lsrs	r2, r2, #16
 8017e0c:	1889      	adds	r1, r1, r2
 8017e0e:	0c1a      	lsrs	r2, r3, #16
 8017e10:	188a      	adds	r2, r1, r2
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	0c15      	lsrs	r5, r2, #16
 8017e16:	0412      	lsls	r2, r2, #16
 8017e18:	431a      	orrs	r2, r3
 8017e1a:	9b05      	ldr	r3, [sp, #20]
 8017e1c:	c704      	stmia	r7!, {r2}
 8017e1e:	42b3      	cmp	r3, r6
 8017e20:	d8e6      	bhi.n	8017df0 <__multiply+0xc4>
 8017e22:	4663      	mov	r3, ip
 8017e24:	9a06      	ldr	r2, [sp, #24]
 8017e26:	509d      	str	r5, [r3, r2]
 8017e28:	9b01      	ldr	r3, [sp, #4]
 8017e2a:	6818      	ldr	r0, [r3, #0]
 8017e2c:	0c00      	lsrs	r0, r0, #16
 8017e2e:	d020      	beq.n	8017e72 <__multiply+0x146>
 8017e30:	4663      	mov	r3, ip
 8017e32:	0025      	movs	r5, r4
 8017e34:	4661      	mov	r1, ip
 8017e36:	2700      	movs	r7, #0
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	3514      	adds	r5, #20
 8017e3c:	682a      	ldr	r2, [r5, #0]
 8017e3e:	680e      	ldr	r6, [r1, #0]
 8017e40:	b292      	uxth	r2, r2
 8017e42:	4342      	muls	r2, r0
 8017e44:	0c36      	lsrs	r6, r6, #16
 8017e46:	1992      	adds	r2, r2, r6
 8017e48:	19d2      	adds	r2, r2, r7
 8017e4a:	0416      	lsls	r6, r2, #16
 8017e4c:	b29b      	uxth	r3, r3
 8017e4e:	431e      	orrs	r6, r3
 8017e50:	600e      	str	r6, [r1, #0]
 8017e52:	cd40      	ldmia	r5!, {r6}
 8017e54:	684b      	ldr	r3, [r1, #4]
 8017e56:	0c36      	lsrs	r6, r6, #16
 8017e58:	4346      	muls	r6, r0
 8017e5a:	b29b      	uxth	r3, r3
 8017e5c:	0c12      	lsrs	r2, r2, #16
 8017e5e:	18f3      	adds	r3, r6, r3
 8017e60:	189b      	adds	r3, r3, r2
 8017e62:	9a05      	ldr	r2, [sp, #20]
 8017e64:	0c1f      	lsrs	r7, r3, #16
 8017e66:	3104      	adds	r1, #4
 8017e68:	42aa      	cmp	r2, r5
 8017e6a:	d8e7      	bhi.n	8017e3c <__multiply+0x110>
 8017e6c:	4662      	mov	r2, ip
 8017e6e:	9906      	ldr	r1, [sp, #24]
 8017e70:	5053      	str	r3, [r2, r1]
 8017e72:	9b01      	ldr	r3, [sp, #4]
 8017e74:	3304      	adds	r3, #4
 8017e76:	9301      	str	r3, [sp, #4]
 8017e78:	2304      	movs	r3, #4
 8017e7a:	449c      	add	ip, r3
 8017e7c:	e79b      	b.n	8017db6 <__multiply+0x8a>
 8017e7e:	9b03      	ldr	r3, [sp, #12]
 8017e80:	3b01      	subs	r3, #1
 8017e82:	9303      	str	r3, [sp, #12]
 8017e84:	e79b      	b.n	8017dbe <__multiply+0x92>
 8017e86:	46c0      	nop			@ (mov r8, r8)
 8017e88:	0801a618 	.word	0x0801a618
 8017e8c:	0801a629 	.word	0x0801a629

08017e90 <__pow5mult>:
 8017e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e92:	2303      	movs	r3, #3
 8017e94:	0015      	movs	r5, r2
 8017e96:	0007      	movs	r7, r0
 8017e98:	000e      	movs	r6, r1
 8017e9a:	401a      	ands	r2, r3
 8017e9c:	421d      	tst	r5, r3
 8017e9e:	d008      	beq.n	8017eb2 <__pow5mult+0x22>
 8017ea0:	4925      	ldr	r1, [pc, #148]	@ (8017f38 <__pow5mult+0xa8>)
 8017ea2:	3a01      	subs	r2, #1
 8017ea4:	0092      	lsls	r2, r2, #2
 8017ea6:	5852      	ldr	r2, [r2, r1]
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	0031      	movs	r1, r6
 8017eac:	f7ff fe92 	bl	8017bd4 <__multadd>
 8017eb0:	0006      	movs	r6, r0
 8017eb2:	10ad      	asrs	r5, r5, #2
 8017eb4:	d03d      	beq.n	8017f32 <__pow5mult+0xa2>
 8017eb6:	69fc      	ldr	r4, [r7, #28]
 8017eb8:	2c00      	cmp	r4, #0
 8017eba:	d10f      	bne.n	8017edc <__pow5mult+0x4c>
 8017ebc:	2010      	movs	r0, #16
 8017ebe:	f7ff fd65 	bl	801798c <malloc>
 8017ec2:	1e02      	subs	r2, r0, #0
 8017ec4:	61f8      	str	r0, [r7, #28]
 8017ec6:	d105      	bne.n	8017ed4 <__pow5mult+0x44>
 8017ec8:	21b4      	movs	r1, #180	@ 0xb4
 8017eca:	4b1c      	ldr	r3, [pc, #112]	@ (8017f3c <__pow5mult+0xac>)
 8017ecc:	481c      	ldr	r0, [pc, #112]	@ (8017f40 <__pow5mult+0xb0>)
 8017ece:	31ff      	adds	r1, #255	@ 0xff
 8017ed0:	f000 fdd6 	bl	8018a80 <__assert_func>
 8017ed4:	6044      	str	r4, [r0, #4]
 8017ed6:	6084      	str	r4, [r0, #8]
 8017ed8:	6004      	str	r4, [r0, #0]
 8017eda:	60c4      	str	r4, [r0, #12]
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	689c      	ldr	r4, [r3, #8]
 8017ee0:	9301      	str	r3, [sp, #4]
 8017ee2:	2c00      	cmp	r4, #0
 8017ee4:	d108      	bne.n	8017ef8 <__pow5mult+0x68>
 8017ee6:	0038      	movs	r0, r7
 8017ee8:	4916      	ldr	r1, [pc, #88]	@ (8017f44 <__pow5mult+0xb4>)
 8017eea:	f7ff ff07 	bl	8017cfc <__i2b>
 8017eee:	9b01      	ldr	r3, [sp, #4]
 8017ef0:	0004      	movs	r4, r0
 8017ef2:	6098      	str	r0, [r3, #8]
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	6003      	str	r3, [r0, #0]
 8017ef8:	2301      	movs	r3, #1
 8017efa:	421d      	tst	r5, r3
 8017efc:	d00a      	beq.n	8017f14 <__pow5mult+0x84>
 8017efe:	0031      	movs	r1, r6
 8017f00:	0022      	movs	r2, r4
 8017f02:	0038      	movs	r0, r7
 8017f04:	f7ff ff12 	bl	8017d2c <__multiply>
 8017f08:	0031      	movs	r1, r6
 8017f0a:	9001      	str	r0, [sp, #4]
 8017f0c:	0038      	movs	r0, r7
 8017f0e:	f7ff fe3d 	bl	8017b8c <_Bfree>
 8017f12:	9e01      	ldr	r6, [sp, #4]
 8017f14:	106d      	asrs	r5, r5, #1
 8017f16:	d00c      	beq.n	8017f32 <__pow5mult+0xa2>
 8017f18:	6820      	ldr	r0, [r4, #0]
 8017f1a:	2800      	cmp	r0, #0
 8017f1c:	d107      	bne.n	8017f2e <__pow5mult+0x9e>
 8017f1e:	0022      	movs	r2, r4
 8017f20:	0021      	movs	r1, r4
 8017f22:	0038      	movs	r0, r7
 8017f24:	f7ff ff02 	bl	8017d2c <__multiply>
 8017f28:	2300      	movs	r3, #0
 8017f2a:	6020      	str	r0, [r4, #0]
 8017f2c:	6003      	str	r3, [r0, #0]
 8017f2e:	0004      	movs	r4, r0
 8017f30:	e7e2      	b.n	8017ef8 <__pow5mult+0x68>
 8017f32:	0030      	movs	r0, r6
 8017f34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017f36:	46c0      	nop			@ (mov r8, r8)
 8017f38:	0801a684 	.word	0x0801a684
 8017f3c:	0801a5a9 	.word	0x0801a5a9
 8017f40:	0801a629 	.word	0x0801a629
 8017f44:	00000271 	.word	0x00000271

08017f48 <__lshift>:
 8017f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f4a:	000c      	movs	r4, r1
 8017f4c:	0016      	movs	r6, r2
 8017f4e:	6923      	ldr	r3, [r4, #16]
 8017f50:	1157      	asrs	r7, r2, #5
 8017f52:	b085      	sub	sp, #20
 8017f54:	18fb      	adds	r3, r7, r3
 8017f56:	9301      	str	r3, [sp, #4]
 8017f58:	3301      	adds	r3, #1
 8017f5a:	9300      	str	r3, [sp, #0]
 8017f5c:	6849      	ldr	r1, [r1, #4]
 8017f5e:	68a3      	ldr	r3, [r4, #8]
 8017f60:	9002      	str	r0, [sp, #8]
 8017f62:	9a00      	ldr	r2, [sp, #0]
 8017f64:	4293      	cmp	r3, r2
 8017f66:	db10      	blt.n	8017f8a <__lshift+0x42>
 8017f68:	9802      	ldr	r0, [sp, #8]
 8017f6a:	f7ff fdcb 	bl	8017b04 <_Balloc>
 8017f6e:	2300      	movs	r3, #0
 8017f70:	0001      	movs	r1, r0
 8017f72:	0005      	movs	r5, r0
 8017f74:	001a      	movs	r2, r3
 8017f76:	3114      	adds	r1, #20
 8017f78:	4298      	cmp	r0, r3
 8017f7a:	d10c      	bne.n	8017f96 <__lshift+0x4e>
 8017f7c:	21ef      	movs	r1, #239	@ 0xef
 8017f7e:	002a      	movs	r2, r5
 8017f80:	4b25      	ldr	r3, [pc, #148]	@ (8018018 <__lshift+0xd0>)
 8017f82:	4826      	ldr	r0, [pc, #152]	@ (801801c <__lshift+0xd4>)
 8017f84:	0049      	lsls	r1, r1, #1
 8017f86:	f000 fd7b 	bl	8018a80 <__assert_func>
 8017f8a:	3101      	adds	r1, #1
 8017f8c:	005b      	lsls	r3, r3, #1
 8017f8e:	e7e8      	b.n	8017f62 <__lshift+0x1a>
 8017f90:	0098      	lsls	r0, r3, #2
 8017f92:	500a      	str	r2, [r1, r0]
 8017f94:	3301      	adds	r3, #1
 8017f96:	42bb      	cmp	r3, r7
 8017f98:	dbfa      	blt.n	8017f90 <__lshift+0x48>
 8017f9a:	43fb      	mvns	r3, r7
 8017f9c:	17db      	asrs	r3, r3, #31
 8017f9e:	401f      	ands	r7, r3
 8017fa0:	00bf      	lsls	r7, r7, #2
 8017fa2:	0023      	movs	r3, r4
 8017fa4:	201f      	movs	r0, #31
 8017fa6:	19c9      	adds	r1, r1, r7
 8017fa8:	0037      	movs	r7, r6
 8017faa:	6922      	ldr	r2, [r4, #16]
 8017fac:	3314      	adds	r3, #20
 8017fae:	0092      	lsls	r2, r2, #2
 8017fb0:	189a      	adds	r2, r3, r2
 8017fb2:	4007      	ands	r7, r0
 8017fb4:	4206      	tst	r6, r0
 8017fb6:	d029      	beq.n	801800c <__lshift+0xc4>
 8017fb8:	3001      	adds	r0, #1
 8017fba:	1bc0      	subs	r0, r0, r7
 8017fbc:	9003      	str	r0, [sp, #12]
 8017fbe:	468c      	mov	ip, r1
 8017fc0:	2000      	movs	r0, #0
 8017fc2:	681e      	ldr	r6, [r3, #0]
 8017fc4:	40be      	lsls	r6, r7
 8017fc6:	4306      	orrs	r6, r0
 8017fc8:	4660      	mov	r0, ip
 8017fca:	c040      	stmia	r0!, {r6}
 8017fcc:	4684      	mov	ip, r0
 8017fce:	9e03      	ldr	r6, [sp, #12]
 8017fd0:	cb01      	ldmia	r3!, {r0}
 8017fd2:	40f0      	lsrs	r0, r6
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d8f4      	bhi.n	8017fc2 <__lshift+0x7a>
 8017fd8:	0026      	movs	r6, r4
 8017fda:	3615      	adds	r6, #21
 8017fdc:	2304      	movs	r3, #4
 8017fde:	42b2      	cmp	r2, r6
 8017fe0:	d304      	bcc.n	8017fec <__lshift+0xa4>
 8017fe2:	1b13      	subs	r3, r2, r4
 8017fe4:	3b15      	subs	r3, #21
 8017fe6:	089b      	lsrs	r3, r3, #2
 8017fe8:	3301      	adds	r3, #1
 8017fea:	009b      	lsls	r3, r3, #2
 8017fec:	50c8      	str	r0, [r1, r3]
 8017fee:	2800      	cmp	r0, #0
 8017ff0:	d002      	beq.n	8017ff8 <__lshift+0xb0>
 8017ff2:	9b01      	ldr	r3, [sp, #4]
 8017ff4:	3302      	adds	r3, #2
 8017ff6:	9300      	str	r3, [sp, #0]
 8017ff8:	9b00      	ldr	r3, [sp, #0]
 8017ffa:	9802      	ldr	r0, [sp, #8]
 8017ffc:	3b01      	subs	r3, #1
 8017ffe:	0021      	movs	r1, r4
 8018000:	612b      	str	r3, [r5, #16]
 8018002:	f7ff fdc3 	bl	8017b8c <_Bfree>
 8018006:	0028      	movs	r0, r5
 8018008:	b005      	add	sp, #20
 801800a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801800c:	cb01      	ldmia	r3!, {r0}
 801800e:	c101      	stmia	r1!, {r0}
 8018010:	429a      	cmp	r2, r3
 8018012:	d8fb      	bhi.n	801800c <__lshift+0xc4>
 8018014:	e7f0      	b.n	8017ff8 <__lshift+0xb0>
 8018016:	46c0      	nop			@ (mov r8, r8)
 8018018:	0801a618 	.word	0x0801a618
 801801c:	0801a629 	.word	0x0801a629

08018020 <__mcmp>:
 8018020:	b530      	push	{r4, r5, lr}
 8018022:	690b      	ldr	r3, [r1, #16]
 8018024:	6904      	ldr	r4, [r0, #16]
 8018026:	0002      	movs	r2, r0
 8018028:	1ae0      	subs	r0, r4, r3
 801802a:	429c      	cmp	r4, r3
 801802c:	d10f      	bne.n	801804e <__mcmp+0x2e>
 801802e:	3214      	adds	r2, #20
 8018030:	009b      	lsls	r3, r3, #2
 8018032:	3114      	adds	r1, #20
 8018034:	0014      	movs	r4, r2
 8018036:	18c9      	adds	r1, r1, r3
 8018038:	18d2      	adds	r2, r2, r3
 801803a:	3a04      	subs	r2, #4
 801803c:	3904      	subs	r1, #4
 801803e:	6815      	ldr	r5, [r2, #0]
 8018040:	680b      	ldr	r3, [r1, #0]
 8018042:	429d      	cmp	r5, r3
 8018044:	d004      	beq.n	8018050 <__mcmp+0x30>
 8018046:	2001      	movs	r0, #1
 8018048:	429d      	cmp	r5, r3
 801804a:	d200      	bcs.n	801804e <__mcmp+0x2e>
 801804c:	3802      	subs	r0, #2
 801804e:	bd30      	pop	{r4, r5, pc}
 8018050:	4294      	cmp	r4, r2
 8018052:	d3f2      	bcc.n	801803a <__mcmp+0x1a>
 8018054:	e7fb      	b.n	801804e <__mcmp+0x2e>
	...

08018058 <__mdiff>:
 8018058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801805a:	000c      	movs	r4, r1
 801805c:	b087      	sub	sp, #28
 801805e:	9000      	str	r0, [sp, #0]
 8018060:	0011      	movs	r1, r2
 8018062:	0020      	movs	r0, r4
 8018064:	0017      	movs	r7, r2
 8018066:	f7ff ffdb 	bl	8018020 <__mcmp>
 801806a:	1e05      	subs	r5, r0, #0
 801806c:	d110      	bne.n	8018090 <__mdiff+0x38>
 801806e:	0001      	movs	r1, r0
 8018070:	9800      	ldr	r0, [sp, #0]
 8018072:	f7ff fd47 	bl	8017b04 <_Balloc>
 8018076:	1e02      	subs	r2, r0, #0
 8018078:	d104      	bne.n	8018084 <__mdiff+0x2c>
 801807a:	4b40      	ldr	r3, [pc, #256]	@ (801817c <__mdiff+0x124>)
 801807c:	4840      	ldr	r0, [pc, #256]	@ (8018180 <__mdiff+0x128>)
 801807e:	4941      	ldr	r1, [pc, #260]	@ (8018184 <__mdiff+0x12c>)
 8018080:	f000 fcfe 	bl	8018a80 <__assert_func>
 8018084:	2301      	movs	r3, #1
 8018086:	6145      	str	r5, [r0, #20]
 8018088:	6103      	str	r3, [r0, #16]
 801808a:	0010      	movs	r0, r2
 801808c:	b007      	add	sp, #28
 801808e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018090:	2600      	movs	r6, #0
 8018092:	42b0      	cmp	r0, r6
 8018094:	da03      	bge.n	801809e <__mdiff+0x46>
 8018096:	0023      	movs	r3, r4
 8018098:	003c      	movs	r4, r7
 801809a:	001f      	movs	r7, r3
 801809c:	3601      	adds	r6, #1
 801809e:	6861      	ldr	r1, [r4, #4]
 80180a0:	9800      	ldr	r0, [sp, #0]
 80180a2:	f7ff fd2f 	bl	8017b04 <_Balloc>
 80180a6:	1e02      	subs	r2, r0, #0
 80180a8:	d103      	bne.n	80180b2 <__mdiff+0x5a>
 80180aa:	4b34      	ldr	r3, [pc, #208]	@ (801817c <__mdiff+0x124>)
 80180ac:	4834      	ldr	r0, [pc, #208]	@ (8018180 <__mdiff+0x128>)
 80180ae:	4936      	ldr	r1, [pc, #216]	@ (8018188 <__mdiff+0x130>)
 80180b0:	e7e6      	b.n	8018080 <__mdiff+0x28>
 80180b2:	6923      	ldr	r3, [r4, #16]
 80180b4:	3414      	adds	r4, #20
 80180b6:	9300      	str	r3, [sp, #0]
 80180b8:	009b      	lsls	r3, r3, #2
 80180ba:	18e3      	adds	r3, r4, r3
 80180bc:	0021      	movs	r1, r4
 80180be:	9401      	str	r4, [sp, #4]
 80180c0:	003c      	movs	r4, r7
 80180c2:	9302      	str	r3, [sp, #8]
 80180c4:	693b      	ldr	r3, [r7, #16]
 80180c6:	3414      	adds	r4, #20
 80180c8:	009b      	lsls	r3, r3, #2
 80180ca:	18e3      	adds	r3, r4, r3
 80180cc:	9303      	str	r3, [sp, #12]
 80180ce:	0003      	movs	r3, r0
 80180d0:	60c6      	str	r6, [r0, #12]
 80180d2:	468c      	mov	ip, r1
 80180d4:	2000      	movs	r0, #0
 80180d6:	3314      	adds	r3, #20
 80180d8:	9304      	str	r3, [sp, #16]
 80180da:	9305      	str	r3, [sp, #20]
 80180dc:	4663      	mov	r3, ip
 80180de:	cb20      	ldmia	r3!, {r5}
 80180e0:	b2a9      	uxth	r1, r5
 80180e2:	000e      	movs	r6, r1
 80180e4:	469c      	mov	ip, r3
 80180e6:	cc08      	ldmia	r4!, {r3}
 80180e8:	0c2d      	lsrs	r5, r5, #16
 80180ea:	b299      	uxth	r1, r3
 80180ec:	1a71      	subs	r1, r6, r1
 80180ee:	1809      	adds	r1, r1, r0
 80180f0:	0c1b      	lsrs	r3, r3, #16
 80180f2:	1408      	asrs	r0, r1, #16
 80180f4:	1aeb      	subs	r3, r5, r3
 80180f6:	181b      	adds	r3, r3, r0
 80180f8:	1418      	asrs	r0, r3, #16
 80180fa:	b289      	uxth	r1, r1
 80180fc:	041b      	lsls	r3, r3, #16
 80180fe:	4319      	orrs	r1, r3
 8018100:	9b05      	ldr	r3, [sp, #20]
 8018102:	c302      	stmia	r3!, {r1}
 8018104:	9305      	str	r3, [sp, #20]
 8018106:	9b03      	ldr	r3, [sp, #12]
 8018108:	42a3      	cmp	r3, r4
 801810a:	d8e7      	bhi.n	80180dc <__mdiff+0x84>
 801810c:	0039      	movs	r1, r7
 801810e:	9c03      	ldr	r4, [sp, #12]
 8018110:	3115      	adds	r1, #21
 8018112:	2304      	movs	r3, #4
 8018114:	428c      	cmp	r4, r1
 8018116:	d304      	bcc.n	8018122 <__mdiff+0xca>
 8018118:	1be3      	subs	r3, r4, r7
 801811a:	3b15      	subs	r3, #21
 801811c:	089b      	lsrs	r3, r3, #2
 801811e:	3301      	adds	r3, #1
 8018120:	009b      	lsls	r3, r3, #2
 8018122:	9901      	ldr	r1, [sp, #4]
 8018124:	18cd      	adds	r5, r1, r3
 8018126:	9904      	ldr	r1, [sp, #16]
 8018128:	002e      	movs	r6, r5
 801812a:	18cb      	adds	r3, r1, r3
 801812c:	001f      	movs	r7, r3
 801812e:	9902      	ldr	r1, [sp, #8]
 8018130:	428e      	cmp	r6, r1
 8018132:	d311      	bcc.n	8018158 <__mdiff+0x100>
 8018134:	9c02      	ldr	r4, [sp, #8]
 8018136:	1ee9      	subs	r1, r5, #3
 8018138:	2000      	movs	r0, #0
 801813a:	428c      	cmp	r4, r1
 801813c:	d304      	bcc.n	8018148 <__mdiff+0xf0>
 801813e:	0021      	movs	r1, r4
 8018140:	3103      	adds	r1, #3
 8018142:	1b49      	subs	r1, r1, r5
 8018144:	0889      	lsrs	r1, r1, #2
 8018146:	0088      	lsls	r0, r1, #2
 8018148:	181b      	adds	r3, r3, r0
 801814a:	3b04      	subs	r3, #4
 801814c:	6819      	ldr	r1, [r3, #0]
 801814e:	2900      	cmp	r1, #0
 8018150:	d010      	beq.n	8018174 <__mdiff+0x11c>
 8018152:	9b00      	ldr	r3, [sp, #0]
 8018154:	6113      	str	r3, [r2, #16]
 8018156:	e798      	b.n	801808a <__mdiff+0x32>
 8018158:	4684      	mov	ip, r0
 801815a:	ce02      	ldmia	r6!, {r1}
 801815c:	b288      	uxth	r0, r1
 801815e:	4460      	add	r0, ip
 8018160:	1400      	asrs	r0, r0, #16
 8018162:	0c0c      	lsrs	r4, r1, #16
 8018164:	1904      	adds	r4, r0, r4
 8018166:	4461      	add	r1, ip
 8018168:	1420      	asrs	r0, r4, #16
 801816a:	b289      	uxth	r1, r1
 801816c:	0424      	lsls	r4, r4, #16
 801816e:	4321      	orrs	r1, r4
 8018170:	c702      	stmia	r7!, {r1}
 8018172:	e7dc      	b.n	801812e <__mdiff+0xd6>
 8018174:	9900      	ldr	r1, [sp, #0]
 8018176:	3901      	subs	r1, #1
 8018178:	9100      	str	r1, [sp, #0]
 801817a:	e7e6      	b.n	801814a <__mdiff+0xf2>
 801817c:	0801a618 	.word	0x0801a618
 8018180:	0801a629 	.word	0x0801a629
 8018184:	00000237 	.word	0x00000237
 8018188:	00000245 	.word	0x00000245

0801818c <__d2b>:
 801818c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801818e:	2101      	movs	r1, #1
 8018190:	0016      	movs	r6, r2
 8018192:	001f      	movs	r7, r3
 8018194:	f7ff fcb6 	bl	8017b04 <_Balloc>
 8018198:	1e04      	subs	r4, r0, #0
 801819a:	d105      	bne.n	80181a8 <__d2b+0x1c>
 801819c:	0022      	movs	r2, r4
 801819e:	4b25      	ldr	r3, [pc, #148]	@ (8018234 <__d2b+0xa8>)
 80181a0:	4825      	ldr	r0, [pc, #148]	@ (8018238 <__d2b+0xac>)
 80181a2:	4926      	ldr	r1, [pc, #152]	@ (801823c <__d2b+0xb0>)
 80181a4:	f000 fc6c 	bl	8018a80 <__assert_func>
 80181a8:	033b      	lsls	r3, r7, #12
 80181aa:	007d      	lsls	r5, r7, #1
 80181ac:	0b1b      	lsrs	r3, r3, #12
 80181ae:	0d6d      	lsrs	r5, r5, #21
 80181b0:	d002      	beq.n	80181b8 <__d2b+0x2c>
 80181b2:	2280      	movs	r2, #128	@ 0x80
 80181b4:	0352      	lsls	r2, r2, #13
 80181b6:	4313      	orrs	r3, r2
 80181b8:	9301      	str	r3, [sp, #4]
 80181ba:	2e00      	cmp	r6, #0
 80181bc:	d025      	beq.n	801820a <__d2b+0x7e>
 80181be:	4668      	mov	r0, sp
 80181c0:	9600      	str	r6, [sp, #0]
 80181c2:	f7ff fd6c 	bl	8017c9e <__lo0bits>
 80181c6:	9b01      	ldr	r3, [sp, #4]
 80181c8:	9900      	ldr	r1, [sp, #0]
 80181ca:	2800      	cmp	r0, #0
 80181cc:	d01b      	beq.n	8018206 <__d2b+0x7a>
 80181ce:	2220      	movs	r2, #32
 80181d0:	001e      	movs	r6, r3
 80181d2:	1a12      	subs	r2, r2, r0
 80181d4:	4096      	lsls	r6, r2
 80181d6:	0032      	movs	r2, r6
 80181d8:	40c3      	lsrs	r3, r0
 80181da:	430a      	orrs	r2, r1
 80181dc:	6162      	str	r2, [r4, #20]
 80181de:	9301      	str	r3, [sp, #4]
 80181e0:	9e01      	ldr	r6, [sp, #4]
 80181e2:	61a6      	str	r6, [r4, #24]
 80181e4:	1e73      	subs	r3, r6, #1
 80181e6:	419e      	sbcs	r6, r3
 80181e8:	3601      	adds	r6, #1
 80181ea:	6126      	str	r6, [r4, #16]
 80181ec:	2d00      	cmp	r5, #0
 80181ee:	d014      	beq.n	801821a <__d2b+0x8e>
 80181f0:	2635      	movs	r6, #53	@ 0x35
 80181f2:	4b13      	ldr	r3, [pc, #76]	@ (8018240 <__d2b+0xb4>)
 80181f4:	18ed      	adds	r5, r5, r3
 80181f6:	9b08      	ldr	r3, [sp, #32]
 80181f8:	182d      	adds	r5, r5, r0
 80181fa:	601d      	str	r5, [r3, #0]
 80181fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181fe:	1a36      	subs	r6, r6, r0
 8018200:	601e      	str	r6, [r3, #0]
 8018202:	0020      	movs	r0, r4
 8018204:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018206:	6161      	str	r1, [r4, #20]
 8018208:	e7ea      	b.n	80181e0 <__d2b+0x54>
 801820a:	a801      	add	r0, sp, #4
 801820c:	f7ff fd47 	bl	8017c9e <__lo0bits>
 8018210:	9b01      	ldr	r3, [sp, #4]
 8018212:	2601      	movs	r6, #1
 8018214:	6163      	str	r3, [r4, #20]
 8018216:	3020      	adds	r0, #32
 8018218:	e7e7      	b.n	80181ea <__d2b+0x5e>
 801821a:	4b0a      	ldr	r3, [pc, #40]	@ (8018244 <__d2b+0xb8>)
 801821c:	18c0      	adds	r0, r0, r3
 801821e:	9b08      	ldr	r3, [sp, #32]
 8018220:	6018      	str	r0, [r3, #0]
 8018222:	4b09      	ldr	r3, [pc, #36]	@ (8018248 <__d2b+0xbc>)
 8018224:	18f3      	adds	r3, r6, r3
 8018226:	009b      	lsls	r3, r3, #2
 8018228:	18e3      	adds	r3, r4, r3
 801822a:	6958      	ldr	r0, [r3, #20]
 801822c:	f7ff fd16 	bl	8017c5c <__hi0bits>
 8018230:	0176      	lsls	r6, r6, #5
 8018232:	e7e3      	b.n	80181fc <__d2b+0x70>
 8018234:	0801a618 	.word	0x0801a618
 8018238:	0801a629 	.word	0x0801a629
 801823c:	0000030f 	.word	0x0000030f
 8018240:	fffffbcd 	.word	0xfffffbcd
 8018244:	fffffbce 	.word	0xfffffbce
 8018248:	3fffffff 	.word	0x3fffffff

0801824c <__ssputs_r>:
 801824c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801824e:	688e      	ldr	r6, [r1, #8]
 8018250:	b085      	sub	sp, #20
 8018252:	001f      	movs	r7, r3
 8018254:	000c      	movs	r4, r1
 8018256:	680b      	ldr	r3, [r1, #0]
 8018258:	9002      	str	r0, [sp, #8]
 801825a:	9203      	str	r2, [sp, #12]
 801825c:	42be      	cmp	r6, r7
 801825e:	d830      	bhi.n	80182c2 <__ssputs_r+0x76>
 8018260:	210c      	movs	r1, #12
 8018262:	5e62      	ldrsh	r2, [r4, r1]
 8018264:	2190      	movs	r1, #144	@ 0x90
 8018266:	00c9      	lsls	r1, r1, #3
 8018268:	420a      	tst	r2, r1
 801826a:	d028      	beq.n	80182be <__ssputs_r+0x72>
 801826c:	2003      	movs	r0, #3
 801826e:	6921      	ldr	r1, [r4, #16]
 8018270:	1a5b      	subs	r3, r3, r1
 8018272:	9301      	str	r3, [sp, #4]
 8018274:	6963      	ldr	r3, [r4, #20]
 8018276:	4343      	muls	r3, r0
 8018278:	9801      	ldr	r0, [sp, #4]
 801827a:	0fdd      	lsrs	r5, r3, #31
 801827c:	18ed      	adds	r5, r5, r3
 801827e:	1c7b      	adds	r3, r7, #1
 8018280:	181b      	adds	r3, r3, r0
 8018282:	106d      	asrs	r5, r5, #1
 8018284:	42ab      	cmp	r3, r5
 8018286:	d900      	bls.n	801828a <__ssputs_r+0x3e>
 8018288:	001d      	movs	r5, r3
 801828a:	0552      	lsls	r2, r2, #21
 801828c:	d528      	bpl.n	80182e0 <__ssputs_r+0x94>
 801828e:	0029      	movs	r1, r5
 8018290:	9802      	ldr	r0, [sp, #8]
 8018292:	f7ff fba7 	bl	80179e4 <_malloc_r>
 8018296:	1e06      	subs	r6, r0, #0
 8018298:	d02c      	beq.n	80182f4 <__ssputs_r+0xa8>
 801829a:	9a01      	ldr	r2, [sp, #4]
 801829c:	6921      	ldr	r1, [r4, #16]
 801829e:	f7fe fc9f 	bl	8016be0 <memcpy>
 80182a2:	89a2      	ldrh	r2, [r4, #12]
 80182a4:	4b18      	ldr	r3, [pc, #96]	@ (8018308 <__ssputs_r+0xbc>)
 80182a6:	401a      	ands	r2, r3
 80182a8:	2380      	movs	r3, #128	@ 0x80
 80182aa:	4313      	orrs	r3, r2
 80182ac:	81a3      	strh	r3, [r4, #12]
 80182ae:	9b01      	ldr	r3, [sp, #4]
 80182b0:	6126      	str	r6, [r4, #16]
 80182b2:	18f6      	adds	r6, r6, r3
 80182b4:	6026      	str	r6, [r4, #0]
 80182b6:	003e      	movs	r6, r7
 80182b8:	6165      	str	r5, [r4, #20]
 80182ba:	1aed      	subs	r5, r5, r3
 80182bc:	60a5      	str	r5, [r4, #8]
 80182be:	42be      	cmp	r6, r7
 80182c0:	d900      	bls.n	80182c4 <__ssputs_r+0x78>
 80182c2:	003e      	movs	r6, r7
 80182c4:	0032      	movs	r2, r6
 80182c6:	9903      	ldr	r1, [sp, #12]
 80182c8:	6820      	ldr	r0, [r4, #0]
 80182ca:	f000 fbb3 	bl	8018a34 <memmove>
 80182ce:	2000      	movs	r0, #0
 80182d0:	68a3      	ldr	r3, [r4, #8]
 80182d2:	1b9b      	subs	r3, r3, r6
 80182d4:	60a3      	str	r3, [r4, #8]
 80182d6:	6823      	ldr	r3, [r4, #0]
 80182d8:	199b      	adds	r3, r3, r6
 80182da:	6023      	str	r3, [r4, #0]
 80182dc:	b005      	add	sp, #20
 80182de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182e0:	002a      	movs	r2, r5
 80182e2:	9802      	ldr	r0, [sp, #8]
 80182e4:	f000 fc29 	bl	8018b3a <_realloc_r>
 80182e8:	1e06      	subs	r6, r0, #0
 80182ea:	d1e0      	bne.n	80182ae <__ssputs_r+0x62>
 80182ec:	6921      	ldr	r1, [r4, #16]
 80182ee:	9802      	ldr	r0, [sp, #8]
 80182f0:	f7ff fb02 	bl	80178f8 <_free_r>
 80182f4:	230c      	movs	r3, #12
 80182f6:	2001      	movs	r0, #1
 80182f8:	9a02      	ldr	r2, [sp, #8]
 80182fa:	4240      	negs	r0, r0
 80182fc:	6013      	str	r3, [r2, #0]
 80182fe:	89a2      	ldrh	r2, [r4, #12]
 8018300:	3334      	adds	r3, #52	@ 0x34
 8018302:	4313      	orrs	r3, r2
 8018304:	81a3      	strh	r3, [r4, #12]
 8018306:	e7e9      	b.n	80182dc <__ssputs_r+0x90>
 8018308:	fffffb7f 	.word	0xfffffb7f

0801830c <_svfiprintf_r>:
 801830c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801830e:	b0a1      	sub	sp, #132	@ 0x84
 8018310:	9003      	str	r0, [sp, #12]
 8018312:	001d      	movs	r5, r3
 8018314:	898b      	ldrh	r3, [r1, #12]
 8018316:	000f      	movs	r7, r1
 8018318:	0016      	movs	r6, r2
 801831a:	061b      	lsls	r3, r3, #24
 801831c:	d511      	bpl.n	8018342 <_svfiprintf_r+0x36>
 801831e:	690b      	ldr	r3, [r1, #16]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d10e      	bne.n	8018342 <_svfiprintf_r+0x36>
 8018324:	2140      	movs	r1, #64	@ 0x40
 8018326:	f7ff fb5d 	bl	80179e4 <_malloc_r>
 801832a:	6038      	str	r0, [r7, #0]
 801832c:	6138      	str	r0, [r7, #16]
 801832e:	2800      	cmp	r0, #0
 8018330:	d105      	bne.n	801833e <_svfiprintf_r+0x32>
 8018332:	230c      	movs	r3, #12
 8018334:	9a03      	ldr	r2, [sp, #12]
 8018336:	6013      	str	r3, [r2, #0]
 8018338:	2001      	movs	r0, #1
 801833a:	4240      	negs	r0, r0
 801833c:	e0cf      	b.n	80184de <_svfiprintf_r+0x1d2>
 801833e:	2340      	movs	r3, #64	@ 0x40
 8018340:	617b      	str	r3, [r7, #20]
 8018342:	2300      	movs	r3, #0
 8018344:	ac08      	add	r4, sp, #32
 8018346:	6163      	str	r3, [r4, #20]
 8018348:	3320      	adds	r3, #32
 801834a:	7663      	strb	r3, [r4, #25]
 801834c:	3310      	adds	r3, #16
 801834e:	76a3      	strb	r3, [r4, #26]
 8018350:	9507      	str	r5, [sp, #28]
 8018352:	0035      	movs	r5, r6
 8018354:	782b      	ldrb	r3, [r5, #0]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d001      	beq.n	801835e <_svfiprintf_r+0x52>
 801835a:	2b25      	cmp	r3, #37	@ 0x25
 801835c:	d148      	bne.n	80183f0 <_svfiprintf_r+0xe4>
 801835e:	1bab      	subs	r3, r5, r6
 8018360:	9305      	str	r3, [sp, #20]
 8018362:	42b5      	cmp	r5, r6
 8018364:	d00b      	beq.n	801837e <_svfiprintf_r+0x72>
 8018366:	0032      	movs	r2, r6
 8018368:	0039      	movs	r1, r7
 801836a:	9803      	ldr	r0, [sp, #12]
 801836c:	f7ff ff6e 	bl	801824c <__ssputs_r>
 8018370:	3001      	adds	r0, #1
 8018372:	d100      	bne.n	8018376 <_svfiprintf_r+0x6a>
 8018374:	e0ae      	b.n	80184d4 <_svfiprintf_r+0x1c8>
 8018376:	6963      	ldr	r3, [r4, #20]
 8018378:	9a05      	ldr	r2, [sp, #20]
 801837a:	189b      	adds	r3, r3, r2
 801837c:	6163      	str	r3, [r4, #20]
 801837e:	782b      	ldrb	r3, [r5, #0]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d100      	bne.n	8018386 <_svfiprintf_r+0x7a>
 8018384:	e0a6      	b.n	80184d4 <_svfiprintf_r+0x1c8>
 8018386:	2201      	movs	r2, #1
 8018388:	2300      	movs	r3, #0
 801838a:	4252      	negs	r2, r2
 801838c:	6062      	str	r2, [r4, #4]
 801838e:	a904      	add	r1, sp, #16
 8018390:	3254      	adds	r2, #84	@ 0x54
 8018392:	1852      	adds	r2, r2, r1
 8018394:	1c6e      	adds	r6, r5, #1
 8018396:	6023      	str	r3, [r4, #0]
 8018398:	60e3      	str	r3, [r4, #12]
 801839a:	60a3      	str	r3, [r4, #8]
 801839c:	7013      	strb	r3, [r2, #0]
 801839e:	65a3      	str	r3, [r4, #88]	@ 0x58
 80183a0:	4b54      	ldr	r3, [pc, #336]	@ (80184f4 <_svfiprintf_r+0x1e8>)
 80183a2:	2205      	movs	r2, #5
 80183a4:	0018      	movs	r0, r3
 80183a6:	7831      	ldrb	r1, [r6, #0]
 80183a8:	9305      	str	r3, [sp, #20]
 80183aa:	f7fe fc0e 	bl	8016bca <memchr>
 80183ae:	1c75      	adds	r5, r6, #1
 80183b0:	2800      	cmp	r0, #0
 80183b2:	d11f      	bne.n	80183f4 <_svfiprintf_r+0xe8>
 80183b4:	6822      	ldr	r2, [r4, #0]
 80183b6:	06d3      	lsls	r3, r2, #27
 80183b8:	d504      	bpl.n	80183c4 <_svfiprintf_r+0xb8>
 80183ba:	2353      	movs	r3, #83	@ 0x53
 80183bc:	a904      	add	r1, sp, #16
 80183be:	185b      	adds	r3, r3, r1
 80183c0:	2120      	movs	r1, #32
 80183c2:	7019      	strb	r1, [r3, #0]
 80183c4:	0713      	lsls	r3, r2, #28
 80183c6:	d504      	bpl.n	80183d2 <_svfiprintf_r+0xc6>
 80183c8:	2353      	movs	r3, #83	@ 0x53
 80183ca:	a904      	add	r1, sp, #16
 80183cc:	185b      	adds	r3, r3, r1
 80183ce:	212b      	movs	r1, #43	@ 0x2b
 80183d0:	7019      	strb	r1, [r3, #0]
 80183d2:	7833      	ldrb	r3, [r6, #0]
 80183d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80183d6:	d016      	beq.n	8018406 <_svfiprintf_r+0xfa>
 80183d8:	0035      	movs	r5, r6
 80183da:	2100      	movs	r1, #0
 80183dc:	200a      	movs	r0, #10
 80183de:	68e3      	ldr	r3, [r4, #12]
 80183e0:	782a      	ldrb	r2, [r5, #0]
 80183e2:	1c6e      	adds	r6, r5, #1
 80183e4:	3a30      	subs	r2, #48	@ 0x30
 80183e6:	2a09      	cmp	r2, #9
 80183e8:	d950      	bls.n	801848c <_svfiprintf_r+0x180>
 80183ea:	2900      	cmp	r1, #0
 80183ec:	d111      	bne.n	8018412 <_svfiprintf_r+0x106>
 80183ee:	e017      	b.n	8018420 <_svfiprintf_r+0x114>
 80183f0:	3501      	adds	r5, #1
 80183f2:	e7af      	b.n	8018354 <_svfiprintf_r+0x48>
 80183f4:	9b05      	ldr	r3, [sp, #20]
 80183f6:	6822      	ldr	r2, [r4, #0]
 80183f8:	1ac0      	subs	r0, r0, r3
 80183fa:	2301      	movs	r3, #1
 80183fc:	4083      	lsls	r3, r0
 80183fe:	4313      	orrs	r3, r2
 8018400:	002e      	movs	r6, r5
 8018402:	6023      	str	r3, [r4, #0]
 8018404:	e7cc      	b.n	80183a0 <_svfiprintf_r+0x94>
 8018406:	9b07      	ldr	r3, [sp, #28]
 8018408:	1d19      	adds	r1, r3, #4
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	9107      	str	r1, [sp, #28]
 801840e:	2b00      	cmp	r3, #0
 8018410:	db01      	blt.n	8018416 <_svfiprintf_r+0x10a>
 8018412:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018414:	e004      	b.n	8018420 <_svfiprintf_r+0x114>
 8018416:	425b      	negs	r3, r3
 8018418:	60e3      	str	r3, [r4, #12]
 801841a:	2302      	movs	r3, #2
 801841c:	4313      	orrs	r3, r2
 801841e:	6023      	str	r3, [r4, #0]
 8018420:	782b      	ldrb	r3, [r5, #0]
 8018422:	2b2e      	cmp	r3, #46	@ 0x2e
 8018424:	d10c      	bne.n	8018440 <_svfiprintf_r+0x134>
 8018426:	786b      	ldrb	r3, [r5, #1]
 8018428:	2b2a      	cmp	r3, #42	@ 0x2a
 801842a:	d134      	bne.n	8018496 <_svfiprintf_r+0x18a>
 801842c:	9b07      	ldr	r3, [sp, #28]
 801842e:	3502      	adds	r5, #2
 8018430:	1d1a      	adds	r2, r3, #4
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	9207      	str	r2, [sp, #28]
 8018436:	2b00      	cmp	r3, #0
 8018438:	da01      	bge.n	801843e <_svfiprintf_r+0x132>
 801843a:	2301      	movs	r3, #1
 801843c:	425b      	negs	r3, r3
 801843e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018440:	4e2d      	ldr	r6, [pc, #180]	@ (80184f8 <_svfiprintf_r+0x1ec>)
 8018442:	2203      	movs	r2, #3
 8018444:	0030      	movs	r0, r6
 8018446:	7829      	ldrb	r1, [r5, #0]
 8018448:	f7fe fbbf 	bl	8016bca <memchr>
 801844c:	2800      	cmp	r0, #0
 801844e:	d006      	beq.n	801845e <_svfiprintf_r+0x152>
 8018450:	2340      	movs	r3, #64	@ 0x40
 8018452:	1b80      	subs	r0, r0, r6
 8018454:	4083      	lsls	r3, r0
 8018456:	6822      	ldr	r2, [r4, #0]
 8018458:	3501      	adds	r5, #1
 801845a:	4313      	orrs	r3, r2
 801845c:	6023      	str	r3, [r4, #0]
 801845e:	7829      	ldrb	r1, [r5, #0]
 8018460:	2206      	movs	r2, #6
 8018462:	4826      	ldr	r0, [pc, #152]	@ (80184fc <_svfiprintf_r+0x1f0>)
 8018464:	1c6e      	adds	r6, r5, #1
 8018466:	7621      	strb	r1, [r4, #24]
 8018468:	f7fe fbaf 	bl	8016bca <memchr>
 801846c:	2800      	cmp	r0, #0
 801846e:	d038      	beq.n	80184e2 <_svfiprintf_r+0x1d6>
 8018470:	4b23      	ldr	r3, [pc, #140]	@ (8018500 <_svfiprintf_r+0x1f4>)
 8018472:	2b00      	cmp	r3, #0
 8018474:	d122      	bne.n	80184bc <_svfiprintf_r+0x1b0>
 8018476:	2207      	movs	r2, #7
 8018478:	9b07      	ldr	r3, [sp, #28]
 801847a:	3307      	adds	r3, #7
 801847c:	4393      	bics	r3, r2
 801847e:	3308      	adds	r3, #8
 8018480:	9307      	str	r3, [sp, #28]
 8018482:	6963      	ldr	r3, [r4, #20]
 8018484:	9a04      	ldr	r2, [sp, #16]
 8018486:	189b      	adds	r3, r3, r2
 8018488:	6163      	str	r3, [r4, #20]
 801848a:	e762      	b.n	8018352 <_svfiprintf_r+0x46>
 801848c:	4343      	muls	r3, r0
 801848e:	0035      	movs	r5, r6
 8018490:	2101      	movs	r1, #1
 8018492:	189b      	adds	r3, r3, r2
 8018494:	e7a4      	b.n	80183e0 <_svfiprintf_r+0xd4>
 8018496:	2300      	movs	r3, #0
 8018498:	200a      	movs	r0, #10
 801849a:	0019      	movs	r1, r3
 801849c:	3501      	adds	r5, #1
 801849e:	6063      	str	r3, [r4, #4]
 80184a0:	782a      	ldrb	r2, [r5, #0]
 80184a2:	1c6e      	adds	r6, r5, #1
 80184a4:	3a30      	subs	r2, #48	@ 0x30
 80184a6:	2a09      	cmp	r2, #9
 80184a8:	d903      	bls.n	80184b2 <_svfiprintf_r+0x1a6>
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d0c8      	beq.n	8018440 <_svfiprintf_r+0x134>
 80184ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80184b0:	e7c6      	b.n	8018440 <_svfiprintf_r+0x134>
 80184b2:	4341      	muls	r1, r0
 80184b4:	0035      	movs	r5, r6
 80184b6:	2301      	movs	r3, #1
 80184b8:	1889      	adds	r1, r1, r2
 80184ba:	e7f1      	b.n	80184a0 <_svfiprintf_r+0x194>
 80184bc:	aa07      	add	r2, sp, #28
 80184be:	9200      	str	r2, [sp, #0]
 80184c0:	0021      	movs	r1, r4
 80184c2:	003a      	movs	r2, r7
 80184c4:	4b0f      	ldr	r3, [pc, #60]	@ (8018504 <_svfiprintf_r+0x1f8>)
 80184c6:	9803      	ldr	r0, [sp, #12]
 80184c8:	f7fd fd9a 	bl	8016000 <_printf_float>
 80184cc:	9004      	str	r0, [sp, #16]
 80184ce:	9b04      	ldr	r3, [sp, #16]
 80184d0:	3301      	adds	r3, #1
 80184d2:	d1d6      	bne.n	8018482 <_svfiprintf_r+0x176>
 80184d4:	89bb      	ldrh	r3, [r7, #12]
 80184d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80184d8:	065b      	lsls	r3, r3, #25
 80184da:	d500      	bpl.n	80184de <_svfiprintf_r+0x1d2>
 80184dc:	e72c      	b.n	8018338 <_svfiprintf_r+0x2c>
 80184de:	b021      	add	sp, #132	@ 0x84
 80184e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184e2:	aa07      	add	r2, sp, #28
 80184e4:	9200      	str	r2, [sp, #0]
 80184e6:	0021      	movs	r1, r4
 80184e8:	003a      	movs	r2, r7
 80184ea:	4b06      	ldr	r3, [pc, #24]	@ (8018504 <_svfiprintf_r+0x1f8>)
 80184ec:	9803      	ldr	r0, [sp, #12]
 80184ee:	f7fe f835 	bl	801655c <_printf_i>
 80184f2:	e7eb      	b.n	80184cc <_svfiprintf_r+0x1c0>
 80184f4:	0801a780 	.word	0x0801a780
 80184f8:	0801a786 	.word	0x0801a786
 80184fc:	0801a78a 	.word	0x0801a78a
 8018500:	08016001 	.word	0x08016001
 8018504:	0801824d 	.word	0x0801824d

08018508 <__sfputc_r>:
 8018508:	6893      	ldr	r3, [r2, #8]
 801850a:	b510      	push	{r4, lr}
 801850c:	3b01      	subs	r3, #1
 801850e:	6093      	str	r3, [r2, #8]
 8018510:	2b00      	cmp	r3, #0
 8018512:	da04      	bge.n	801851e <__sfputc_r+0x16>
 8018514:	6994      	ldr	r4, [r2, #24]
 8018516:	42a3      	cmp	r3, r4
 8018518:	db07      	blt.n	801852a <__sfputc_r+0x22>
 801851a:	290a      	cmp	r1, #10
 801851c:	d005      	beq.n	801852a <__sfputc_r+0x22>
 801851e:	6813      	ldr	r3, [r2, #0]
 8018520:	1c58      	adds	r0, r3, #1
 8018522:	6010      	str	r0, [r2, #0]
 8018524:	7019      	strb	r1, [r3, #0]
 8018526:	0008      	movs	r0, r1
 8018528:	bd10      	pop	{r4, pc}
 801852a:	f000 f9e2 	bl	80188f2 <__swbuf_r>
 801852e:	0001      	movs	r1, r0
 8018530:	e7f9      	b.n	8018526 <__sfputc_r+0x1e>

08018532 <__sfputs_r>:
 8018532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018534:	0006      	movs	r6, r0
 8018536:	000f      	movs	r7, r1
 8018538:	0014      	movs	r4, r2
 801853a:	18d5      	adds	r5, r2, r3
 801853c:	42ac      	cmp	r4, r5
 801853e:	d101      	bne.n	8018544 <__sfputs_r+0x12>
 8018540:	2000      	movs	r0, #0
 8018542:	e007      	b.n	8018554 <__sfputs_r+0x22>
 8018544:	7821      	ldrb	r1, [r4, #0]
 8018546:	003a      	movs	r2, r7
 8018548:	0030      	movs	r0, r6
 801854a:	f7ff ffdd 	bl	8018508 <__sfputc_r>
 801854e:	3401      	adds	r4, #1
 8018550:	1c43      	adds	r3, r0, #1
 8018552:	d1f3      	bne.n	801853c <__sfputs_r+0xa>
 8018554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018558 <_vfiprintf_r>:
 8018558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801855a:	b0a1      	sub	sp, #132	@ 0x84
 801855c:	000f      	movs	r7, r1
 801855e:	0015      	movs	r5, r2
 8018560:	001e      	movs	r6, r3
 8018562:	9003      	str	r0, [sp, #12]
 8018564:	2800      	cmp	r0, #0
 8018566:	d004      	beq.n	8018572 <_vfiprintf_r+0x1a>
 8018568:	6a03      	ldr	r3, [r0, #32]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d101      	bne.n	8018572 <_vfiprintf_r+0x1a>
 801856e:	f7fe f993 	bl	8016898 <__sinit>
 8018572:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018574:	07db      	lsls	r3, r3, #31
 8018576:	d405      	bmi.n	8018584 <_vfiprintf_r+0x2c>
 8018578:	89bb      	ldrh	r3, [r7, #12]
 801857a:	059b      	lsls	r3, r3, #22
 801857c:	d402      	bmi.n	8018584 <_vfiprintf_r+0x2c>
 801857e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8018580:	f7fe fb21 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 8018584:	89bb      	ldrh	r3, [r7, #12]
 8018586:	071b      	lsls	r3, r3, #28
 8018588:	d502      	bpl.n	8018590 <_vfiprintf_r+0x38>
 801858a:	693b      	ldr	r3, [r7, #16]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d113      	bne.n	80185b8 <_vfiprintf_r+0x60>
 8018590:	0039      	movs	r1, r7
 8018592:	9803      	ldr	r0, [sp, #12]
 8018594:	f000 f9f0 	bl	8018978 <__swsetup_r>
 8018598:	2800      	cmp	r0, #0
 801859a:	d00d      	beq.n	80185b8 <_vfiprintf_r+0x60>
 801859c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801859e:	07db      	lsls	r3, r3, #31
 80185a0:	d503      	bpl.n	80185aa <_vfiprintf_r+0x52>
 80185a2:	2001      	movs	r0, #1
 80185a4:	4240      	negs	r0, r0
 80185a6:	b021      	add	sp, #132	@ 0x84
 80185a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185aa:	89bb      	ldrh	r3, [r7, #12]
 80185ac:	059b      	lsls	r3, r3, #22
 80185ae:	d4f8      	bmi.n	80185a2 <_vfiprintf_r+0x4a>
 80185b0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80185b2:	f7fe fb09 	bl	8016bc8 <__retarget_lock_release_recursive>
 80185b6:	e7f4      	b.n	80185a2 <_vfiprintf_r+0x4a>
 80185b8:	2300      	movs	r3, #0
 80185ba:	ac08      	add	r4, sp, #32
 80185bc:	6163      	str	r3, [r4, #20]
 80185be:	3320      	adds	r3, #32
 80185c0:	7663      	strb	r3, [r4, #25]
 80185c2:	3310      	adds	r3, #16
 80185c4:	76a3      	strb	r3, [r4, #26]
 80185c6:	9607      	str	r6, [sp, #28]
 80185c8:	002e      	movs	r6, r5
 80185ca:	7833      	ldrb	r3, [r6, #0]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d001      	beq.n	80185d4 <_vfiprintf_r+0x7c>
 80185d0:	2b25      	cmp	r3, #37	@ 0x25
 80185d2:	d148      	bne.n	8018666 <_vfiprintf_r+0x10e>
 80185d4:	1b73      	subs	r3, r6, r5
 80185d6:	9305      	str	r3, [sp, #20]
 80185d8:	42ae      	cmp	r6, r5
 80185da:	d00b      	beq.n	80185f4 <_vfiprintf_r+0x9c>
 80185dc:	002a      	movs	r2, r5
 80185de:	0039      	movs	r1, r7
 80185e0:	9803      	ldr	r0, [sp, #12]
 80185e2:	f7ff ffa6 	bl	8018532 <__sfputs_r>
 80185e6:	3001      	adds	r0, #1
 80185e8:	d100      	bne.n	80185ec <_vfiprintf_r+0x94>
 80185ea:	e0ae      	b.n	801874a <_vfiprintf_r+0x1f2>
 80185ec:	6963      	ldr	r3, [r4, #20]
 80185ee:	9a05      	ldr	r2, [sp, #20]
 80185f0:	189b      	adds	r3, r3, r2
 80185f2:	6163      	str	r3, [r4, #20]
 80185f4:	7833      	ldrb	r3, [r6, #0]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d100      	bne.n	80185fc <_vfiprintf_r+0xa4>
 80185fa:	e0a6      	b.n	801874a <_vfiprintf_r+0x1f2>
 80185fc:	2201      	movs	r2, #1
 80185fe:	2300      	movs	r3, #0
 8018600:	4252      	negs	r2, r2
 8018602:	6062      	str	r2, [r4, #4]
 8018604:	a904      	add	r1, sp, #16
 8018606:	3254      	adds	r2, #84	@ 0x54
 8018608:	1852      	adds	r2, r2, r1
 801860a:	1c75      	adds	r5, r6, #1
 801860c:	6023      	str	r3, [r4, #0]
 801860e:	60e3      	str	r3, [r4, #12]
 8018610:	60a3      	str	r3, [r4, #8]
 8018612:	7013      	strb	r3, [r2, #0]
 8018614:	65a3      	str	r3, [r4, #88]	@ 0x58
 8018616:	4b59      	ldr	r3, [pc, #356]	@ (801877c <_vfiprintf_r+0x224>)
 8018618:	2205      	movs	r2, #5
 801861a:	0018      	movs	r0, r3
 801861c:	7829      	ldrb	r1, [r5, #0]
 801861e:	9305      	str	r3, [sp, #20]
 8018620:	f7fe fad3 	bl	8016bca <memchr>
 8018624:	1c6e      	adds	r6, r5, #1
 8018626:	2800      	cmp	r0, #0
 8018628:	d11f      	bne.n	801866a <_vfiprintf_r+0x112>
 801862a:	6822      	ldr	r2, [r4, #0]
 801862c:	06d3      	lsls	r3, r2, #27
 801862e:	d504      	bpl.n	801863a <_vfiprintf_r+0xe2>
 8018630:	2353      	movs	r3, #83	@ 0x53
 8018632:	a904      	add	r1, sp, #16
 8018634:	185b      	adds	r3, r3, r1
 8018636:	2120      	movs	r1, #32
 8018638:	7019      	strb	r1, [r3, #0]
 801863a:	0713      	lsls	r3, r2, #28
 801863c:	d504      	bpl.n	8018648 <_vfiprintf_r+0xf0>
 801863e:	2353      	movs	r3, #83	@ 0x53
 8018640:	a904      	add	r1, sp, #16
 8018642:	185b      	adds	r3, r3, r1
 8018644:	212b      	movs	r1, #43	@ 0x2b
 8018646:	7019      	strb	r1, [r3, #0]
 8018648:	782b      	ldrb	r3, [r5, #0]
 801864a:	2b2a      	cmp	r3, #42	@ 0x2a
 801864c:	d016      	beq.n	801867c <_vfiprintf_r+0x124>
 801864e:	002e      	movs	r6, r5
 8018650:	2100      	movs	r1, #0
 8018652:	200a      	movs	r0, #10
 8018654:	68e3      	ldr	r3, [r4, #12]
 8018656:	7832      	ldrb	r2, [r6, #0]
 8018658:	1c75      	adds	r5, r6, #1
 801865a:	3a30      	subs	r2, #48	@ 0x30
 801865c:	2a09      	cmp	r2, #9
 801865e:	d950      	bls.n	8018702 <_vfiprintf_r+0x1aa>
 8018660:	2900      	cmp	r1, #0
 8018662:	d111      	bne.n	8018688 <_vfiprintf_r+0x130>
 8018664:	e017      	b.n	8018696 <_vfiprintf_r+0x13e>
 8018666:	3601      	adds	r6, #1
 8018668:	e7af      	b.n	80185ca <_vfiprintf_r+0x72>
 801866a:	9b05      	ldr	r3, [sp, #20]
 801866c:	6822      	ldr	r2, [r4, #0]
 801866e:	1ac0      	subs	r0, r0, r3
 8018670:	2301      	movs	r3, #1
 8018672:	4083      	lsls	r3, r0
 8018674:	4313      	orrs	r3, r2
 8018676:	0035      	movs	r5, r6
 8018678:	6023      	str	r3, [r4, #0]
 801867a:	e7cc      	b.n	8018616 <_vfiprintf_r+0xbe>
 801867c:	9b07      	ldr	r3, [sp, #28]
 801867e:	1d19      	adds	r1, r3, #4
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	9107      	str	r1, [sp, #28]
 8018684:	2b00      	cmp	r3, #0
 8018686:	db01      	blt.n	801868c <_vfiprintf_r+0x134>
 8018688:	930b      	str	r3, [sp, #44]	@ 0x2c
 801868a:	e004      	b.n	8018696 <_vfiprintf_r+0x13e>
 801868c:	425b      	negs	r3, r3
 801868e:	60e3      	str	r3, [r4, #12]
 8018690:	2302      	movs	r3, #2
 8018692:	4313      	orrs	r3, r2
 8018694:	6023      	str	r3, [r4, #0]
 8018696:	7833      	ldrb	r3, [r6, #0]
 8018698:	2b2e      	cmp	r3, #46	@ 0x2e
 801869a:	d10c      	bne.n	80186b6 <_vfiprintf_r+0x15e>
 801869c:	7873      	ldrb	r3, [r6, #1]
 801869e:	2b2a      	cmp	r3, #42	@ 0x2a
 80186a0:	d134      	bne.n	801870c <_vfiprintf_r+0x1b4>
 80186a2:	9b07      	ldr	r3, [sp, #28]
 80186a4:	3602      	adds	r6, #2
 80186a6:	1d1a      	adds	r2, r3, #4
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	9207      	str	r2, [sp, #28]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	da01      	bge.n	80186b4 <_vfiprintf_r+0x15c>
 80186b0:	2301      	movs	r3, #1
 80186b2:	425b      	negs	r3, r3
 80186b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80186b6:	4d32      	ldr	r5, [pc, #200]	@ (8018780 <_vfiprintf_r+0x228>)
 80186b8:	2203      	movs	r2, #3
 80186ba:	0028      	movs	r0, r5
 80186bc:	7831      	ldrb	r1, [r6, #0]
 80186be:	f7fe fa84 	bl	8016bca <memchr>
 80186c2:	2800      	cmp	r0, #0
 80186c4:	d006      	beq.n	80186d4 <_vfiprintf_r+0x17c>
 80186c6:	2340      	movs	r3, #64	@ 0x40
 80186c8:	1b40      	subs	r0, r0, r5
 80186ca:	4083      	lsls	r3, r0
 80186cc:	6822      	ldr	r2, [r4, #0]
 80186ce:	3601      	adds	r6, #1
 80186d0:	4313      	orrs	r3, r2
 80186d2:	6023      	str	r3, [r4, #0]
 80186d4:	7831      	ldrb	r1, [r6, #0]
 80186d6:	2206      	movs	r2, #6
 80186d8:	482a      	ldr	r0, [pc, #168]	@ (8018784 <_vfiprintf_r+0x22c>)
 80186da:	1c75      	adds	r5, r6, #1
 80186dc:	7621      	strb	r1, [r4, #24]
 80186de:	f7fe fa74 	bl	8016bca <memchr>
 80186e2:	2800      	cmp	r0, #0
 80186e4:	d040      	beq.n	8018768 <_vfiprintf_r+0x210>
 80186e6:	4b28      	ldr	r3, [pc, #160]	@ (8018788 <_vfiprintf_r+0x230>)
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d122      	bne.n	8018732 <_vfiprintf_r+0x1da>
 80186ec:	2207      	movs	r2, #7
 80186ee:	9b07      	ldr	r3, [sp, #28]
 80186f0:	3307      	adds	r3, #7
 80186f2:	4393      	bics	r3, r2
 80186f4:	3308      	adds	r3, #8
 80186f6:	9307      	str	r3, [sp, #28]
 80186f8:	6963      	ldr	r3, [r4, #20]
 80186fa:	9a04      	ldr	r2, [sp, #16]
 80186fc:	189b      	adds	r3, r3, r2
 80186fe:	6163      	str	r3, [r4, #20]
 8018700:	e762      	b.n	80185c8 <_vfiprintf_r+0x70>
 8018702:	4343      	muls	r3, r0
 8018704:	002e      	movs	r6, r5
 8018706:	2101      	movs	r1, #1
 8018708:	189b      	adds	r3, r3, r2
 801870a:	e7a4      	b.n	8018656 <_vfiprintf_r+0xfe>
 801870c:	2300      	movs	r3, #0
 801870e:	200a      	movs	r0, #10
 8018710:	0019      	movs	r1, r3
 8018712:	3601      	adds	r6, #1
 8018714:	6063      	str	r3, [r4, #4]
 8018716:	7832      	ldrb	r2, [r6, #0]
 8018718:	1c75      	adds	r5, r6, #1
 801871a:	3a30      	subs	r2, #48	@ 0x30
 801871c:	2a09      	cmp	r2, #9
 801871e:	d903      	bls.n	8018728 <_vfiprintf_r+0x1d0>
 8018720:	2b00      	cmp	r3, #0
 8018722:	d0c8      	beq.n	80186b6 <_vfiprintf_r+0x15e>
 8018724:	9109      	str	r1, [sp, #36]	@ 0x24
 8018726:	e7c6      	b.n	80186b6 <_vfiprintf_r+0x15e>
 8018728:	4341      	muls	r1, r0
 801872a:	002e      	movs	r6, r5
 801872c:	2301      	movs	r3, #1
 801872e:	1889      	adds	r1, r1, r2
 8018730:	e7f1      	b.n	8018716 <_vfiprintf_r+0x1be>
 8018732:	aa07      	add	r2, sp, #28
 8018734:	9200      	str	r2, [sp, #0]
 8018736:	0021      	movs	r1, r4
 8018738:	003a      	movs	r2, r7
 801873a:	4b14      	ldr	r3, [pc, #80]	@ (801878c <_vfiprintf_r+0x234>)
 801873c:	9803      	ldr	r0, [sp, #12]
 801873e:	f7fd fc5f 	bl	8016000 <_printf_float>
 8018742:	9004      	str	r0, [sp, #16]
 8018744:	9b04      	ldr	r3, [sp, #16]
 8018746:	3301      	adds	r3, #1
 8018748:	d1d6      	bne.n	80186f8 <_vfiprintf_r+0x1a0>
 801874a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801874c:	07db      	lsls	r3, r3, #31
 801874e:	d405      	bmi.n	801875c <_vfiprintf_r+0x204>
 8018750:	89bb      	ldrh	r3, [r7, #12]
 8018752:	059b      	lsls	r3, r3, #22
 8018754:	d402      	bmi.n	801875c <_vfiprintf_r+0x204>
 8018756:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8018758:	f7fe fa36 	bl	8016bc8 <__retarget_lock_release_recursive>
 801875c:	89bb      	ldrh	r3, [r7, #12]
 801875e:	065b      	lsls	r3, r3, #25
 8018760:	d500      	bpl.n	8018764 <_vfiprintf_r+0x20c>
 8018762:	e71e      	b.n	80185a2 <_vfiprintf_r+0x4a>
 8018764:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8018766:	e71e      	b.n	80185a6 <_vfiprintf_r+0x4e>
 8018768:	aa07      	add	r2, sp, #28
 801876a:	9200      	str	r2, [sp, #0]
 801876c:	0021      	movs	r1, r4
 801876e:	003a      	movs	r2, r7
 8018770:	4b06      	ldr	r3, [pc, #24]	@ (801878c <_vfiprintf_r+0x234>)
 8018772:	9803      	ldr	r0, [sp, #12]
 8018774:	f7fd fef2 	bl	801655c <_printf_i>
 8018778:	e7e3      	b.n	8018742 <_vfiprintf_r+0x1ea>
 801877a:	46c0      	nop			@ (mov r8, r8)
 801877c:	0801a780 	.word	0x0801a780
 8018780:	0801a786 	.word	0x0801a786
 8018784:	0801a78a 	.word	0x0801a78a
 8018788:	08016001 	.word	0x08016001
 801878c:	08018533 	.word	0x08018533

08018790 <__sflush_r>:
 8018790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018792:	220c      	movs	r2, #12
 8018794:	5e8b      	ldrsh	r3, [r1, r2]
 8018796:	0005      	movs	r5, r0
 8018798:	000c      	movs	r4, r1
 801879a:	071a      	lsls	r2, r3, #28
 801879c:	d456      	bmi.n	801884c <__sflush_r+0xbc>
 801879e:	684a      	ldr	r2, [r1, #4]
 80187a0:	2a00      	cmp	r2, #0
 80187a2:	dc02      	bgt.n	80187aa <__sflush_r+0x1a>
 80187a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80187a6:	2a00      	cmp	r2, #0
 80187a8:	dd4e      	ble.n	8018848 <__sflush_r+0xb8>
 80187aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80187ac:	2f00      	cmp	r7, #0
 80187ae:	d04b      	beq.n	8018848 <__sflush_r+0xb8>
 80187b0:	2200      	movs	r2, #0
 80187b2:	2080      	movs	r0, #128	@ 0x80
 80187b4:	682e      	ldr	r6, [r5, #0]
 80187b6:	602a      	str	r2, [r5, #0]
 80187b8:	001a      	movs	r2, r3
 80187ba:	0140      	lsls	r0, r0, #5
 80187bc:	6a21      	ldr	r1, [r4, #32]
 80187be:	4002      	ands	r2, r0
 80187c0:	4203      	tst	r3, r0
 80187c2:	d033      	beq.n	801882c <__sflush_r+0x9c>
 80187c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80187c6:	89a3      	ldrh	r3, [r4, #12]
 80187c8:	075b      	lsls	r3, r3, #29
 80187ca:	d506      	bpl.n	80187da <__sflush_r+0x4a>
 80187cc:	6863      	ldr	r3, [r4, #4]
 80187ce:	1ad2      	subs	r2, r2, r3
 80187d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d001      	beq.n	80187da <__sflush_r+0x4a>
 80187d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80187d8:	1ad2      	subs	r2, r2, r3
 80187da:	2300      	movs	r3, #0
 80187dc:	0028      	movs	r0, r5
 80187de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80187e0:	6a21      	ldr	r1, [r4, #32]
 80187e2:	47b8      	blx	r7
 80187e4:	89a2      	ldrh	r2, [r4, #12]
 80187e6:	1c43      	adds	r3, r0, #1
 80187e8:	d106      	bne.n	80187f8 <__sflush_r+0x68>
 80187ea:	6829      	ldr	r1, [r5, #0]
 80187ec:	291d      	cmp	r1, #29
 80187ee:	d846      	bhi.n	801887e <__sflush_r+0xee>
 80187f0:	4b29      	ldr	r3, [pc, #164]	@ (8018898 <__sflush_r+0x108>)
 80187f2:	410b      	asrs	r3, r1
 80187f4:	07db      	lsls	r3, r3, #31
 80187f6:	d442      	bmi.n	801887e <__sflush_r+0xee>
 80187f8:	2300      	movs	r3, #0
 80187fa:	6063      	str	r3, [r4, #4]
 80187fc:	6923      	ldr	r3, [r4, #16]
 80187fe:	6023      	str	r3, [r4, #0]
 8018800:	04d2      	lsls	r2, r2, #19
 8018802:	d505      	bpl.n	8018810 <__sflush_r+0x80>
 8018804:	1c43      	adds	r3, r0, #1
 8018806:	d102      	bne.n	801880e <__sflush_r+0x7e>
 8018808:	682b      	ldr	r3, [r5, #0]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d100      	bne.n	8018810 <__sflush_r+0x80>
 801880e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018812:	602e      	str	r6, [r5, #0]
 8018814:	2900      	cmp	r1, #0
 8018816:	d017      	beq.n	8018848 <__sflush_r+0xb8>
 8018818:	0023      	movs	r3, r4
 801881a:	3344      	adds	r3, #68	@ 0x44
 801881c:	4299      	cmp	r1, r3
 801881e:	d002      	beq.n	8018826 <__sflush_r+0x96>
 8018820:	0028      	movs	r0, r5
 8018822:	f7ff f869 	bl	80178f8 <_free_r>
 8018826:	2300      	movs	r3, #0
 8018828:	6363      	str	r3, [r4, #52]	@ 0x34
 801882a:	e00d      	b.n	8018848 <__sflush_r+0xb8>
 801882c:	2301      	movs	r3, #1
 801882e:	0028      	movs	r0, r5
 8018830:	47b8      	blx	r7
 8018832:	0002      	movs	r2, r0
 8018834:	1c43      	adds	r3, r0, #1
 8018836:	d1c6      	bne.n	80187c6 <__sflush_r+0x36>
 8018838:	682b      	ldr	r3, [r5, #0]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d0c3      	beq.n	80187c6 <__sflush_r+0x36>
 801883e:	2b1d      	cmp	r3, #29
 8018840:	d001      	beq.n	8018846 <__sflush_r+0xb6>
 8018842:	2b16      	cmp	r3, #22
 8018844:	d11a      	bne.n	801887c <__sflush_r+0xec>
 8018846:	602e      	str	r6, [r5, #0]
 8018848:	2000      	movs	r0, #0
 801884a:	e01e      	b.n	801888a <__sflush_r+0xfa>
 801884c:	690e      	ldr	r6, [r1, #16]
 801884e:	2e00      	cmp	r6, #0
 8018850:	d0fa      	beq.n	8018848 <__sflush_r+0xb8>
 8018852:	680f      	ldr	r7, [r1, #0]
 8018854:	600e      	str	r6, [r1, #0]
 8018856:	1bba      	subs	r2, r7, r6
 8018858:	9201      	str	r2, [sp, #4]
 801885a:	2200      	movs	r2, #0
 801885c:	079b      	lsls	r3, r3, #30
 801885e:	d100      	bne.n	8018862 <__sflush_r+0xd2>
 8018860:	694a      	ldr	r2, [r1, #20]
 8018862:	60a2      	str	r2, [r4, #8]
 8018864:	9b01      	ldr	r3, [sp, #4]
 8018866:	2b00      	cmp	r3, #0
 8018868:	ddee      	ble.n	8018848 <__sflush_r+0xb8>
 801886a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801886c:	0032      	movs	r2, r6
 801886e:	001f      	movs	r7, r3
 8018870:	0028      	movs	r0, r5
 8018872:	9b01      	ldr	r3, [sp, #4]
 8018874:	6a21      	ldr	r1, [r4, #32]
 8018876:	47b8      	blx	r7
 8018878:	2800      	cmp	r0, #0
 801887a:	dc07      	bgt.n	801888c <__sflush_r+0xfc>
 801887c:	89a2      	ldrh	r2, [r4, #12]
 801887e:	2340      	movs	r3, #64	@ 0x40
 8018880:	2001      	movs	r0, #1
 8018882:	4313      	orrs	r3, r2
 8018884:	b21b      	sxth	r3, r3
 8018886:	81a3      	strh	r3, [r4, #12]
 8018888:	4240      	negs	r0, r0
 801888a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801888c:	9b01      	ldr	r3, [sp, #4]
 801888e:	1836      	adds	r6, r6, r0
 8018890:	1a1b      	subs	r3, r3, r0
 8018892:	9301      	str	r3, [sp, #4]
 8018894:	e7e6      	b.n	8018864 <__sflush_r+0xd4>
 8018896:	46c0      	nop			@ (mov r8, r8)
 8018898:	dfbffffe 	.word	0xdfbffffe

0801889c <_fflush_r>:
 801889c:	690b      	ldr	r3, [r1, #16]
 801889e:	b570      	push	{r4, r5, r6, lr}
 80188a0:	0005      	movs	r5, r0
 80188a2:	000c      	movs	r4, r1
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d102      	bne.n	80188ae <_fflush_r+0x12>
 80188a8:	2500      	movs	r5, #0
 80188aa:	0028      	movs	r0, r5
 80188ac:	bd70      	pop	{r4, r5, r6, pc}
 80188ae:	2800      	cmp	r0, #0
 80188b0:	d004      	beq.n	80188bc <_fflush_r+0x20>
 80188b2:	6a03      	ldr	r3, [r0, #32]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d101      	bne.n	80188bc <_fflush_r+0x20>
 80188b8:	f7fd ffee 	bl	8016898 <__sinit>
 80188bc:	220c      	movs	r2, #12
 80188be:	5ea3      	ldrsh	r3, [r4, r2]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d0f1      	beq.n	80188a8 <_fflush_r+0xc>
 80188c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80188c6:	07d2      	lsls	r2, r2, #31
 80188c8:	d404      	bmi.n	80188d4 <_fflush_r+0x38>
 80188ca:	059b      	lsls	r3, r3, #22
 80188cc:	d402      	bmi.n	80188d4 <_fflush_r+0x38>
 80188ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80188d0:	f7fe f979 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 80188d4:	0028      	movs	r0, r5
 80188d6:	0021      	movs	r1, r4
 80188d8:	f7ff ff5a 	bl	8018790 <__sflush_r>
 80188dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80188de:	0005      	movs	r5, r0
 80188e0:	07db      	lsls	r3, r3, #31
 80188e2:	d4e2      	bmi.n	80188aa <_fflush_r+0xe>
 80188e4:	89a3      	ldrh	r3, [r4, #12]
 80188e6:	059b      	lsls	r3, r3, #22
 80188e8:	d4df      	bmi.n	80188aa <_fflush_r+0xe>
 80188ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80188ec:	f7fe f96c 	bl	8016bc8 <__retarget_lock_release_recursive>
 80188f0:	e7db      	b.n	80188aa <_fflush_r+0xe>

080188f2 <__swbuf_r>:
 80188f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188f4:	0006      	movs	r6, r0
 80188f6:	000d      	movs	r5, r1
 80188f8:	0014      	movs	r4, r2
 80188fa:	2800      	cmp	r0, #0
 80188fc:	d004      	beq.n	8018908 <__swbuf_r+0x16>
 80188fe:	6a03      	ldr	r3, [r0, #32]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d101      	bne.n	8018908 <__swbuf_r+0x16>
 8018904:	f7fd ffc8 	bl	8016898 <__sinit>
 8018908:	69a3      	ldr	r3, [r4, #24]
 801890a:	60a3      	str	r3, [r4, #8]
 801890c:	89a3      	ldrh	r3, [r4, #12]
 801890e:	071b      	lsls	r3, r3, #28
 8018910:	d502      	bpl.n	8018918 <__swbuf_r+0x26>
 8018912:	6923      	ldr	r3, [r4, #16]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d109      	bne.n	801892c <__swbuf_r+0x3a>
 8018918:	0021      	movs	r1, r4
 801891a:	0030      	movs	r0, r6
 801891c:	f000 f82c 	bl	8018978 <__swsetup_r>
 8018920:	2800      	cmp	r0, #0
 8018922:	d003      	beq.n	801892c <__swbuf_r+0x3a>
 8018924:	2501      	movs	r5, #1
 8018926:	426d      	negs	r5, r5
 8018928:	0028      	movs	r0, r5
 801892a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801892c:	6923      	ldr	r3, [r4, #16]
 801892e:	6820      	ldr	r0, [r4, #0]
 8018930:	b2ef      	uxtb	r7, r5
 8018932:	1ac0      	subs	r0, r0, r3
 8018934:	6963      	ldr	r3, [r4, #20]
 8018936:	b2ed      	uxtb	r5, r5
 8018938:	4283      	cmp	r3, r0
 801893a:	dc05      	bgt.n	8018948 <__swbuf_r+0x56>
 801893c:	0021      	movs	r1, r4
 801893e:	0030      	movs	r0, r6
 8018940:	f7ff ffac 	bl	801889c <_fflush_r>
 8018944:	2800      	cmp	r0, #0
 8018946:	d1ed      	bne.n	8018924 <__swbuf_r+0x32>
 8018948:	68a3      	ldr	r3, [r4, #8]
 801894a:	3001      	adds	r0, #1
 801894c:	3b01      	subs	r3, #1
 801894e:	60a3      	str	r3, [r4, #8]
 8018950:	6823      	ldr	r3, [r4, #0]
 8018952:	1c5a      	adds	r2, r3, #1
 8018954:	6022      	str	r2, [r4, #0]
 8018956:	701f      	strb	r7, [r3, #0]
 8018958:	6963      	ldr	r3, [r4, #20]
 801895a:	4283      	cmp	r3, r0
 801895c:	d004      	beq.n	8018968 <__swbuf_r+0x76>
 801895e:	89a3      	ldrh	r3, [r4, #12]
 8018960:	07db      	lsls	r3, r3, #31
 8018962:	d5e1      	bpl.n	8018928 <__swbuf_r+0x36>
 8018964:	2d0a      	cmp	r5, #10
 8018966:	d1df      	bne.n	8018928 <__swbuf_r+0x36>
 8018968:	0021      	movs	r1, r4
 801896a:	0030      	movs	r0, r6
 801896c:	f7ff ff96 	bl	801889c <_fflush_r>
 8018970:	2800      	cmp	r0, #0
 8018972:	d0d9      	beq.n	8018928 <__swbuf_r+0x36>
 8018974:	e7d6      	b.n	8018924 <__swbuf_r+0x32>
	...

08018978 <__swsetup_r>:
 8018978:	4b2d      	ldr	r3, [pc, #180]	@ (8018a30 <__swsetup_r+0xb8>)
 801897a:	b570      	push	{r4, r5, r6, lr}
 801897c:	0005      	movs	r5, r0
 801897e:	6818      	ldr	r0, [r3, #0]
 8018980:	000c      	movs	r4, r1
 8018982:	2800      	cmp	r0, #0
 8018984:	d004      	beq.n	8018990 <__swsetup_r+0x18>
 8018986:	6a03      	ldr	r3, [r0, #32]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d101      	bne.n	8018990 <__swsetup_r+0x18>
 801898c:	f7fd ff84 	bl	8016898 <__sinit>
 8018990:	230c      	movs	r3, #12
 8018992:	5ee2      	ldrsh	r2, [r4, r3]
 8018994:	0713      	lsls	r3, r2, #28
 8018996:	d423      	bmi.n	80189e0 <__swsetup_r+0x68>
 8018998:	06d3      	lsls	r3, r2, #27
 801899a:	d407      	bmi.n	80189ac <__swsetup_r+0x34>
 801899c:	2309      	movs	r3, #9
 801899e:	602b      	str	r3, [r5, #0]
 80189a0:	2340      	movs	r3, #64	@ 0x40
 80189a2:	2001      	movs	r0, #1
 80189a4:	4313      	orrs	r3, r2
 80189a6:	81a3      	strh	r3, [r4, #12]
 80189a8:	4240      	negs	r0, r0
 80189aa:	e03a      	b.n	8018a22 <__swsetup_r+0xaa>
 80189ac:	0752      	lsls	r2, r2, #29
 80189ae:	d513      	bpl.n	80189d8 <__swsetup_r+0x60>
 80189b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80189b2:	2900      	cmp	r1, #0
 80189b4:	d008      	beq.n	80189c8 <__swsetup_r+0x50>
 80189b6:	0023      	movs	r3, r4
 80189b8:	3344      	adds	r3, #68	@ 0x44
 80189ba:	4299      	cmp	r1, r3
 80189bc:	d002      	beq.n	80189c4 <__swsetup_r+0x4c>
 80189be:	0028      	movs	r0, r5
 80189c0:	f7fe ff9a 	bl	80178f8 <_free_r>
 80189c4:	2300      	movs	r3, #0
 80189c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80189c8:	2224      	movs	r2, #36	@ 0x24
 80189ca:	89a3      	ldrh	r3, [r4, #12]
 80189cc:	4393      	bics	r3, r2
 80189ce:	81a3      	strh	r3, [r4, #12]
 80189d0:	2300      	movs	r3, #0
 80189d2:	6063      	str	r3, [r4, #4]
 80189d4:	6923      	ldr	r3, [r4, #16]
 80189d6:	6023      	str	r3, [r4, #0]
 80189d8:	2308      	movs	r3, #8
 80189da:	89a2      	ldrh	r2, [r4, #12]
 80189dc:	4313      	orrs	r3, r2
 80189de:	81a3      	strh	r3, [r4, #12]
 80189e0:	6923      	ldr	r3, [r4, #16]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d10b      	bne.n	80189fe <__swsetup_r+0x86>
 80189e6:	21a0      	movs	r1, #160	@ 0xa0
 80189e8:	2280      	movs	r2, #128	@ 0x80
 80189ea:	89a3      	ldrh	r3, [r4, #12]
 80189ec:	0089      	lsls	r1, r1, #2
 80189ee:	0092      	lsls	r2, r2, #2
 80189f0:	400b      	ands	r3, r1
 80189f2:	4293      	cmp	r3, r2
 80189f4:	d003      	beq.n	80189fe <__swsetup_r+0x86>
 80189f6:	0021      	movs	r1, r4
 80189f8:	0028      	movs	r0, r5
 80189fa:	f000 f915 	bl	8018c28 <__smakebuf_r>
 80189fe:	230c      	movs	r3, #12
 8018a00:	5ee2      	ldrsh	r2, [r4, r3]
 8018a02:	2101      	movs	r1, #1
 8018a04:	0013      	movs	r3, r2
 8018a06:	400b      	ands	r3, r1
 8018a08:	420a      	tst	r2, r1
 8018a0a:	d00b      	beq.n	8018a24 <__swsetup_r+0xac>
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	60a3      	str	r3, [r4, #8]
 8018a10:	6963      	ldr	r3, [r4, #20]
 8018a12:	425b      	negs	r3, r3
 8018a14:	61a3      	str	r3, [r4, #24]
 8018a16:	2000      	movs	r0, #0
 8018a18:	6923      	ldr	r3, [r4, #16]
 8018a1a:	4283      	cmp	r3, r0
 8018a1c:	d101      	bne.n	8018a22 <__swsetup_r+0xaa>
 8018a1e:	0613      	lsls	r3, r2, #24
 8018a20:	d4be      	bmi.n	80189a0 <__swsetup_r+0x28>
 8018a22:	bd70      	pop	{r4, r5, r6, pc}
 8018a24:	0791      	lsls	r1, r2, #30
 8018a26:	d400      	bmi.n	8018a2a <__swsetup_r+0xb2>
 8018a28:	6963      	ldr	r3, [r4, #20]
 8018a2a:	60a3      	str	r3, [r4, #8]
 8018a2c:	e7f3      	b.n	8018a16 <__swsetup_r+0x9e>
 8018a2e:	46c0      	nop			@ (mov r8, r8)
 8018a30:	200002d4 	.word	0x200002d4

08018a34 <memmove>:
 8018a34:	b510      	push	{r4, lr}
 8018a36:	4288      	cmp	r0, r1
 8018a38:	d806      	bhi.n	8018a48 <memmove+0x14>
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	d008      	beq.n	8018a52 <memmove+0x1e>
 8018a40:	5ccc      	ldrb	r4, [r1, r3]
 8018a42:	54c4      	strb	r4, [r0, r3]
 8018a44:	3301      	adds	r3, #1
 8018a46:	e7f9      	b.n	8018a3c <memmove+0x8>
 8018a48:	188b      	adds	r3, r1, r2
 8018a4a:	4298      	cmp	r0, r3
 8018a4c:	d2f5      	bcs.n	8018a3a <memmove+0x6>
 8018a4e:	3a01      	subs	r2, #1
 8018a50:	d200      	bcs.n	8018a54 <memmove+0x20>
 8018a52:	bd10      	pop	{r4, pc}
 8018a54:	5c8b      	ldrb	r3, [r1, r2]
 8018a56:	5483      	strb	r3, [r0, r2]
 8018a58:	e7f9      	b.n	8018a4e <memmove+0x1a>
	...

08018a5c <_sbrk_r>:
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	b570      	push	{r4, r5, r6, lr}
 8018a60:	4d06      	ldr	r5, [pc, #24]	@ (8018a7c <_sbrk_r+0x20>)
 8018a62:	0004      	movs	r4, r0
 8018a64:	0008      	movs	r0, r1
 8018a66:	602b      	str	r3, [r5, #0]
 8018a68:	f7ef fccc 	bl	8008404 <_sbrk>
 8018a6c:	1c43      	adds	r3, r0, #1
 8018a6e:	d103      	bne.n	8018a78 <_sbrk_r+0x1c>
 8018a70:	682b      	ldr	r3, [r5, #0]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d000      	beq.n	8018a78 <_sbrk_r+0x1c>
 8018a76:	6023      	str	r3, [r4, #0]
 8018a78:	bd70      	pop	{r4, r5, r6, pc}
 8018a7a:	46c0      	nop			@ (mov r8, r8)
 8018a7c:	200043d0 	.word	0x200043d0

08018a80 <__assert_func>:
 8018a80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018a82:	0014      	movs	r4, r2
 8018a84:	001a      	movs	r2, r3
 8018a86:	4b09      	ldr	r3, [pc, #36]	@ (8018aac <__assert_func+0x2c>)
 8018a88:	0005      	movs	r5, r0
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	000e      	movs	r6, r1
 8018a8e:	68d8      	ldr	r0, [r3, #12]
 8018a90:	4b07      	ldr	r3, [pc, #28]	@ (8018ab0 <__assert_func+0x30>)
 8018a92:	2c00      	cmp	r4, #0
 8018a94:	d101      	bne.n	8018a9a <__assert_func+0x1a>
 8018a96:	4b07      	ldr	r3, [pc, #28]	@ (8018ab4 <__assert_func+0x34>)
 8018a98:	001c      	movs	r4, r3
 8018a9a:	4907      	ldr	r1, [pc, #28]	@ (8018ab8 <__assert_func+0x38>)
 8018a9c:	9301      	str	r3, [sp, #4]
 8018a9e:	9402      	str	r4, [sp, #8]
 8018aa0:	002b      	movs	r3, r5
 8018aa2:	9600      	str	r6, [sp, #0]
 8018aa4:	f000 f886 	bl	8018bb4 <fiprintf>
 8018aa8:	f000 f924 	bl	8018cf4 <abort>
 8018aac:	200002d4 	.word	0x200002d4
 8018ab0:	0801a79b 	.word	0x0801a79b
 8018ab4:	0801a7d6 	.word	0x0801a7d6
 8018ab8:	0801a7a8 	.word	0x0801a7a8

08018abc <_calloc_r>:
 8018abc:	b570      	push	{r4, r5, r6, lr}
 8018abe:	0c0b      	lsrs	r3, r1, #16
 8018ac0:	0c15      	lsrs	r5, r2, #16
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d11e      	bne.n	8018b04 <_calloc_r+0x48>
 8018ac6:	2d00      	cmp	r5, #0
 8018ac8:	d10c      	bne.n	8018ae4 <_calloc_r+0x28>
 8018aca:	b289      	uxth	r1, r1
 8018acc:	b294      	uxth	r4, r2
 8018ace:	434c      	muls	r4, r1
 8018ad0:	0021      	movs	r1, r4
 8018ad2:	f7fe ff87 	bl	80179e4 <_malloc_r>
 8018ad6:	1e05      	subs	r5, r0, #0
 8018ad8:	d01a      	beq.n	8018b10 <_calloc_r+0x54>
 8018ada:	0022      	movs	r2, r4
 8018adc:	2100      	movs	r1, #0
 8018ade:	f7fd ffc3 	bl	8016a68 <memset>
 8018ae2:	e016      	b.n	8018b12 <_calloc_r+0x56>
 8018ae4:	1c2b      	adds	r3, r5, #0
 8018ae6:	1c0c      	adds	r4, r1, #0
 8018ae8:	b289      	uxth	r1, r1
 8018aea:	b292      	uxth	r2, r2
 8018aec:	434a      	muls	r2, r1
 8018aee:	b29b      	uxth	r3, r3
 8018af0:	b2a1      	uxth	r1, r4
 8018af2:	4359      	muls	r1, r3
 8018af4:	0c14      	lsrs	r4, r2, #16
 8018af6:	190c      	adds	r4, r1, r4
 8018af8:	0c23      	lsrs	r3, r4, #16
 8018afa:	d107      	bne.n	8018b0c <_calloc_r+0x50>
 8018afc:	0424      	lsls	r4, r4, #16
 8018afe:	b292      	uxth	r2, r2
 8018b00:	4314      	orrs	r4, r2
 8018b02:	e7e5      	b.n	8018ad0 <_calloc_r+0x14>
 8018b04:	2d00      	cmp	r5, #0
 8018b06:	d101      	bne.n	8018b0c <_calloc_r+0x50>
 8018b08:	1c14      	adds	r4, r2, #0
 8018b0a:	e7ed      	b.n	8018ae8 <_calloc_r+0x2c>
 8018b0c:	230c      	movs	r3, #12
 8018b0e:	6003      	str	r3, [r0, #0]
 8018b10:	2500      	movs	r5, #0
 8018b12:	0028      	movs	r0, r5
 8018b14:	bd70      	pop	{r4, r5, r6, pc}

08018b16 <__ascii_mbtowc>:
 8018b16:	b082      	sub	sp, #8
 8018b18:	2900      	cmp	r1, #0
 8018b1a:	d100      	bne.n	8018b1e <__ascii_mbtowc+0x8>
 8018b1c:	a901      	add	r1, sp, #4
 8018b1e:	1e10      	subs	r0, r2, #0
 8018b20:	d006      	beq.n	8018b30 <__ascii_mbtowc+0x1a>
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d006      	beq.n	8018b34 <__ascii_mbtowc+0x1e>
 8018b26:	7813      	ldrb	r3, [r2, #0]
 8018b28:	600b      	str	r3, [r1, #0]
 8018b2a:	7810      	ldrb	r0, [r2, #0]
 8018b2c:	1e43      	subs	r3, r0, #1
 8018b2e:	4198      	sbcs	r0, r3
 8018b30:	b002      	add	sp, #8
 8018b32:	4770      	bx	lr
 8018b34:	2002      	movs	r0, #2
 8018b36:	4240      	negs	r0, r0
 8018b38:	e7fa      	b.n	8018b30 <__ascii_mbtowc+0x1a>

08018b3a <_realloc_r>:
 8018b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b3c:	0006      	movs	r6, r0
 8018b3e:	000c      	movs	r4, r1
 8018b40:	0015      	movs	r5, r2
 8018b42:	2900      	cmp	r1, #0
 8018b44:	d105      	bne.n	8018b52 <_realloc_r+0x18>
 8018b46:	0011      	movs	r1, r2
 8018b48:	f7fe ff4c 	bl	80179e4 <_malloc_r>
 8018b4c:	0004      	movs	r4, r0
 8018b4e:	0020      	movs	r0, r4
 8018b50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018b52:	2a00      	cmp	r2, #0
 8018b54:	d103      	bne.n	8018b5e <_realloc_r+0x24>
 8018b56:	f7fe fecf 	bl	80178f8 <_free_r>
 8018b5a:	2400      	movs	r4, #0
 8018b5c:	e7f7      	b.n	8018b4e <_realloc_r+0x14>
 8018b5e:	f000 f8d0 	bl	8018d02 <_malloc_usable_size_r>
 8018b62:	0007      	movs	r7, r0
 8018b64:	4285      	cmp	r5, r0
 8018b66:	d802      	bhi.n	8018b6e <_realloc_r+0x34>
 8018b68:	0843      	lsrs	r3, r0, #1
 8018b6a:	42ab      	cmp	r3, r5
 8018b6c:	d3ef      	bcc.n	8018b4e <_realloc_r+0x14>
 8018b6e:	0029      	movs	r1, r5
 8018b70:	0030      	movs	r0, r6
 8018b72:	f7fe ff37 	bl	80179e4 <_malloc_r>
 8018b76:	9001      	str	r0, [sp, #4]
 8018b78:	2800      	cmp	r0, #0
 8018b7a:	d0ee      	beq.n	8018b5a <_realloc_r+0x20>
 8018b7c:	002a      	movs	r2, r5
 8018b7e:	42bd      	cmp	r5, r7
 8018b80:	d900      	bls.n	8018b84 <_realloc_r+0x4a>
 8018b82:	003a      	movs	r2, r7
 8018b84:	0021      	movs	r1, r4
 8018b86:	9801      	ldr	r0, [sp, #4]
 8018b88:	f7fe f82a 	bl	8016be0 <memcpy>
 8018b8c:	0021      	movs	r1, r4
 8018b8e:	0030      	movs	r0, r6
 8018b90:	f7fe feb2 	bl	80178f8 <_free_r>
 8018b94:	9c01      	ldr	r4, [sp, #4]
 8018b96:	e7da      	b.n	8018b4e <_realloc_r+0x14>

08018b98 <__ascii_wctomb>:
 8018b98:	0003      	movs	r3, r0
 8018b9a:	1e08      	subs	r0, r1, #0
 8018b9c:	d005      	beq.n	8018baa <__ascii_wctomb+0x12>
 8018b9e:	2aff      	cmp	r2, #255	@ 0xff
 8018ba0:	d904      	bls.n	8018bac <__ascii_wctomb+0x14>
 8018ba2:	228a      	movs	r2, #138	@ 0x8a
 8018ba4:	2001      	movs	r0, #1
 8018ba6:	601a      	str	r2, [r3, #0]
 8018ba8:	4240      	negs	r0, r0
 8018baa:	4770      	bx	lr
 8018bac:	2001      	movs	r0, #1
 8018bae:	700a      	strb	r2, [r1, #0]
 8018bb0:	e7fb      	b.n	8018baa <__ascii_wctomb+0x12>
	...

08018bb4 <fiprintf>:
 8018bb4:	b40e      	push	{r1, r2, r3}
 8018bb6:	b517      	push	{r0, r1, r2, r4, lr}
 8018bb8:	4c05      	ldr	r4, [pc, #20]	@ (8018bd0 <fiprintf+0x1c>)
 8018bba:	ab05      	add	r3, sp, #20
 8018bbc:	cb04      	ldmia	r3!, {r2}
 8018bbe:	0001      	movs	r1, r0
 8018bc0:	6820      	ldr	r0, [r4, #0]
 8018bc2:	9301      	str	r3, [sp, #4]
 8018bc4:	f7ff fcc8 	bl	8018558 <_vfiprintf_r>
 8018bc8:	bc1e      	pop	{r1, r2, r3, r4}
 8018bca:	bc08      	pop	{r3}
 8018bcc:	b003      	add	sp, #12
 8018bce:	4718      	bx	r3
 8018bd0:	200002d4 	.word	0x200002d4

08018bd4 <__swhatbuf_r>:
 8018bd4:	b570      	push	{r4, r5, r6, lr}
 8018bd6:	000e      	movs	r6, r1
 8018bd8:	001d      	movs	r5, r3
 8018bda:	230e      	movs	r3, #14
 8018bdc:	5ec9      	ldrsh	r1, [r1, r3]
 8018bde:	0014      	movs	r4, r2
 8018be0:	b096      	sub	sp, #88	@ 0x58
 8018be2:	2900      	cmp	r1, #0
 8018be4:	da0c      	bge.n	8018c00 <__swhatbuf_r+0x2c>
 8018be6:	89b2      	ldrh	r2, [r6, #12]
 8018be8:	2380      	movs	r3, #128	@ 0x80
 8018bea:	0011      	movs	r1, r2
 8018bec:	4019      	ands	r1, r3
 8018bee:	421a      	tst	r2, r3
 8018bf0:	d114      	bne.n	8018c1c <__swhatbuf_r+0x48>
 8018bf2:	2380      	movs	r3, #128	@ 0x80
 8018bf4:	00db      	lsls	r3, r3, #3
 8018bf6:	2000      	movs	r0, #0
 8018bf8:	6029      	str	r1, [r5, #0]
 8018bfa:	6023      	str	r3, [r4, #0]
 8018bfc:	b016      	add	sp, #88	@ 0x58
 8018bfe:	bd70      	pop	{r4, r5, r6, pc}
 8018c00:	466a      	mov	r2, sp
 8018c02:	f000 f853 	bl	8018cac <_fstat_r>
 8018c06:	2800      	cmp	r0, #0
 8018c08:	dbed      	blt.n	8018be6 <__swhatbuf_r+0x12>
 8018c0a:	23f0      	movs	r3, #240	@ 0xf0
 8018c0c:	9901      	ldr	r1, [sp, #4]
 8018c0e:	021b      	lsls	r3, r3, #8
 8018c10:	4019      	ands	r1, r3
 8018c12:	4b04      	ldr	r3, [pc, #16]	@ (8018c24 <__swhatbuf_r+0x50>)
 8018c14:	18c9      	adds	r1, r1, r3
 8018c16:	424b      	negs	r3, r1
 8018c18:	4159      	adcs	r1, r3
 8018c1a:	e7ea      	b.n	8018bf2 <__swhatbuf_r+0x1e>
 8018c1c:	2100      	movs	r1, #0
 8018c1e:	2340      	movs	r3, #64	@ 0x40
 8018c20:	e7e9      	b.n	8018bf6 <__swhatbuf_r+0x22>
 8018c22:	46c0      	nop			@ (mov r8, r8)
 8018c24:	ffffe000 	.word	0xffffe000

08018c28 <__smakebuf_r>:
 8018c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c2a:	2602      	movs	r6, #2
 8018c2c:	898b      	ldrh	r3, [r1, #12]
 8018c2e:	0005      	movs	r5, r0
 8018c30:	000c      	movs	r4, r1
 8018c32:	b085      	sub	sp, #20
 8018c34:	4233      	tst	r3, r6
 8018c36:	d007      	beq.n	8018c48 <__smakebuf_r+0x20>
 8018c38:	0023      	movs	r3, r4
 8018c3a:	3347      	adds	r3, #71	@ 0x47
 8018c3c:	6023      	str	r3, [r4, #0]
 8018c3e:	6123      	str	r3, [r4, #16]
 8018c40:	2301      	movs	r3, #1
 8018c42:	6163      	str	r3, [r4, #20]
 8018c44:	b005      	add	sp, #20
 8018c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c48:	ab03      	add	r3, sp, #12
 8018c4a:	aa02      	add	r2, sp, #8
 8018c4c:	f7ff ffc2 	bl	8018bd4 <__swhatbuf_r>
 8018c50:	9f02      	ldr	r7, [sp, #8]
 8018c52:	9001      	str	r0, [sp, #4]
 8018c54:	0039      	movs	r1, r7
 8018c56:	0028      	movs	r0, r5
 8018c58:	f7fe fec4 	bl	80179e4 <_malloc_r>
 8018c5c:	2800      	cmp	r0, #0
 8018c5e:	d108      	bne.n	8018c72 <__smakebuf_r+0x4a>
 8018c60:	220c      	movs	r2, #12
 8018c62:	5ea3      	ldrsh	r3, [r4, r2]
 8018c64:	059a      	lsls	r2, r3, #22
 8018c66:	d4ed      	bmi.n	8018c44 <__smakebuf_r+0x1c>
 8018c68:	2203      	movs	r2, #3
 8018c6a:	4393      	bics	r3, r2
 8018c6c:	431e      	orrs	r6, r3
 8018c6e:	81a6      	strh	r6, [r4, #12]
 8018c70:	e7e2      	b.n	8018c38 <__smakebuf_r+0x10>
 8018c72:	2380      	movs	r3, #128	@ 0x80
 8018c74:	89a2      	ldrh	r2, [r4, #12]
 8018c76:	6020      	str	r0, [r4, #0]
 8018c78:	4313      	orrs	r3, r2
 8018c7a:	81a3      	strh	r3, [r4, #12]
 8018c7c:	9b03      	ldr	r3, [sp, #12]
 8018c7e:	6120      	str	r0, [r4, #16]
 8018c80:	6167      	str	r7, [r4, #20]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d00c      	beq.n	8018ca0 <__smakebuf_r+0x78>
 8018c86:	0028      	movs	r0, r5
 8018c88:	230e      	movs	r3, #14
 8018c8a:	5ee1      	ldrsh	r1, [r4, r3]
 8018c8c:	f000 f820 	bl	8018cd0 <_isatty_r>
 8018c90:	2800      	cmp	r0, #0
 8018c92:	d005      	beq.n	8018ca0 <__smakebuf_r+0x78>
 8018c94:	2303      	movs	r3, #3
 8018c96:	89a2      	ldrh	r2, [r4, #12]
 8018c98:	439a      	bics	r2, r3
 8018c9a:	3b02      	subs	r3, #2
 8018c9c:	4313      	orrs	r3, r2
 8018c9e:	81a3      	strh	r3, [r4, #12]
 8018ca0:	89a3      	ldrh	r3, [r4, #12]
 8018ca2:	9a01      	ldr	r2, [sp, #4]
 8018ca4:	4313      	orrs	r3, r2
 8018ca6:	81a3      	strh	r3, [r4, #12]
 8018ca8:	e7cc      	b.n	8018c44 <__smakebuf_r+0x1c>
	...

08018cac <_fstat_r>:
 8018cac:	2300      	movs	r3, #0
 8018cae:	b570      	push	{r4, r5, r6, lr}
 8018cb0:	4d06      	ldr	r5, [pc, #24]	@ (8018ccc <_fstat_r+0x20>)
 8018cb2:	0004      	movs	r4, r0
 8018cb4:	0008      	movs	r0, r1
 8018cb6:	0011      	movs	r1, r2
 8018cb8:	602b      	str	r3, [r5, #0]
 8018cba:	f7ef fb81 	bl	80083c0 <_fstat>
 8018cbe:	1c43      	adds	r3, r0, #1
 8018cc0:	d103      	bne.n	8018cca <_fstat_r+0x1e>
 8018cc2:	682b      	ldr	r3, [r5, #0]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d000      	beq.n	8018cca <_fstat_r+0x1e>
 8018cc8:	6023      	str	r3, [r4, #0]
 8018cca:	bd70      	pop	{r4, r5, r6, pc}
 8018ccc:	200043d0 	.word	0x200043d0

08018cd0 <_isatty_r>:
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	b570      	push	{r4, r5, r6, lr}
 8018cd4:	4d06      	ldr	r5, [pc, #24]	@ (8018cf0 <_isatty_r+0x20>)
 8018cd6:	0004      	movs	r4, r0
 8018cd8:	0008      	movs	r0, r1
 8018cda:	602b      	str	r3, [r5, #0]
 8018cdc:	f7ef fb7e 	bl	80083dc <_isatty>
 8018ce0:	1c43      	adds	r3, r0, #1
 8018ce2:	d103      	bne.n	8018cec <_isatty_r+0x1c>
 8018ce4:	682b      	ldr	r3, [r5, #0]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d000      	beq.n	8018cec <_isatty_r+0x1c>
 8018cea:	6023      	str	r3, [r4, #0]
 8018cec:	bd70      	pop	{r4, r5, r6, pc}
 8018cee:	46c0      	nop			@ (mov r8, r8)
 8018cf0:	200043d0 	.word	0x200043d0

08018cf4 <abort>:
 8018cf4:	2006      	movs	r0, #6
 8018cf6:	b510      	push	{r4, lr}
 8018cf8:	f000 f834 	bl	8018d64 <raise>
 8018cfc:	2001      	movs	r0, #1
 8018cfe:	f7ef fb2b 	bl	8008358 <_exit>

08018d02 <_malloc_usable_size_r>:
 8018d02:	1f0b      	subs	r3, r1, #4
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	1f18      	subs	r0, r3, #4
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	da01      	bge.n	8018d10 <_malloc_usable_size_r+0xe>
 8018d0c:	580b      	ldr	r3, [r1, r0]
 8018d0e:	18c0      	adds	r0, r0, r3
 8018d10:	4770      	bx	lr

08018d12 <_raise_r>:
 8018d12:	b570      	push	{r4, r5, r6, lr}
 8018d14:	0004      	movs	r4, r0
 8018d16:	000d      	movs	r5, r1
 8018d18:	291f      	cmp	r1, #31
 8018d1a:	d904      	bls.n	8018d26 <_raise_r+0x14>
 8018d1c:	2316      	movs	r3, #22
 8018d1e:	6003      	str	r3, [r0, #0]
 8018d20:	2001      	movs	r0, #1
 8018d22:	4240      	negs	r0, r0
 8018d24:	bd70      	pop	{r4, r5, r6, pc}
 8018d26:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d004      	beq.n	8018d36 <_raise_r+0x24>
 8018d2c:	008a      	lsls	r2, r1, #2
 8018d2e:	189b      	adds	r3, r3, r2
 8018d30:	681a      	ldr	r2, [r3, #0]
 8018d32:	2a00      	cmp	r2, #0
 8018d34:	d108      	bne.n	8018d48 <_raise_r+0x36>
 8018d36:	0020      	movs	r0, r4
 8018d38:	f000 f830 	bl	8018d9c <_getpid_r>
 8018d3c:	002a      	movs	r2, r5
 8018d3e:	0001      	movs	r1, r0
 8018d40:	0020      	movs	r0, r4
 8018d42:	f000 f819 	bl	8018d78 <_kill_r>
 8018d46:	e7ed      	b.n	8018d24 <_raise_r+0x12>
 8018d48:	2a01      	cmp	r2, #1
 8018d4a:	d009      	beq.n	8018d60 <_raise_r+0x4e>
 8018d4c:	1c51      	adds	r1, r2, #1
 8018d4e:	d103      	bne.n	8018d58 <_raise_r+0x46>
 8018d50:	2316      	movs	r3, #22
 8018d52:	6003      	str	r3, [r0, #0]
 8018d54:	2001      	movs	r0, #1
 8018d56:	e7e5      	b.n	8018d24 <_raise_r+0x12>
 8018d58:	2100      	movs	r1, #0
 8018d5a:	0028      	movs	r0, r5
 8018d5c:	6019      	str	r1, [r3, #0]
 8018d5e:	4790      	blx	r2
 8018d60:	2000      	movs	r0, #0
 8018d62:	e7df      	b.n	8018d24 <_raise_r+0x12>

08018d64 <raise>:
 8018d64:	b510      	push	{r4, lr}
 8018d66:	4b03      	ldr	r3, [pc, #12]	@ (8018d74 <raise+0x10>)
 8018d68:	0001      	movs	r1, r0
 8018d6a:	6818      	ldr	r0, [r3, #0]
 8018d6c:	f7ff ffd1 	bl	8018d12 <_raise_r>
 8018d70:	bd10      	pop	{r4, pc}
 8018d72:	46c0      	nop			@ (mov r8, r8)
 8018d74:	200002d4 	.word	0x200002d4

08018d78 <_kill_r>:
 8018d78:	2300      	movs	r3, #0
 8018d7a:	b570      	push	{r4, r5, r6, lr}
 8018d7c:	4d06      	ldr	r5, [pc, #24]	@ (8018d98 <_kill_r+0x20>)
 8018d7e:	0004      	movs	r4, r0
 8018d80:	0008      	movs	r0, r1
 8018d82:	0011      	movs	r1, r2
 8018d84:	602b      	str	r3, [r5, #0]
 8018d86:	f7ef fad7 	bl	8008338 <_kill>
 8018d8a:	1c43      	adds	r3, r0, #1
 8018d8c:	d103      	bne.n	8018d96 <_kill_r+0x1e>
 8018d8e:	682b      	ldr	r3, [r5, #0]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d000      	beq.n	8018d96 <_kill_r+0x1e>
 8018d94:	6023      	str	r3, [r4, #0]
 8018d96:	bd70      	pop	{r4, r5, r6, pc}
 8018d98:	200043d0 	.word	0x200043d0

08018d9c <_getpid_r>:
 8018d9c:	b510      	push	{r4, lr}
 8018d9e:	f7ef fac5 	bl	800832c <_getpid>
 8018da2:	bd10      	pop	{r4, pc}

08018da4 <log10>:
 8018da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018da6:	0004      	movs	r4, r0
 8018da8:	000d      	movs	r5, r1
 8018daa:	f000 fa0b 	bl	80191c4 <__ieee754_log10>
 8018dae:	0022      	movs	r2, r4
 8018db0:	0006      	movs	r6, r0
 8018db2:	000f      	movs	r7, r1
 8018db4:	002b      	movs	r3, r5
 8018db6:	0020      	movs	r0, r4
 8018db8:	0029      	movs	r1, r5
 8018dba:	f7ea fa21 	bl	8003200 <__aeabi_dcmpun>
 8018dbe:	2800      	cmp	r0, #0
 8018dc0:	d115      	bne.n	8018dee <log10+0x4a>
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	0020      	movs	r0, r4
 8018dc8:	0029      	movs	r1, r5
 8018dca:	f7e7 fb4f 	bl	800046c <__aeabi_dcmple>
 8018dce:	2800      	cmp	r0, #0
 8018dd0:	d00d      	beq.n	8018dee <log10+0x4a>
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	0020      	movs	r0, r4
 8018dd8:	0029      	movs	r1, r5
 8018dda:	f7e7 fb37 	bl	800044c <__aeabi_dcmpeq>
 8018dde:	2800      	cmp	r0, #0
 8018de0:	d008      	beq.n	8018df4 <log10+0x50>
 8018de2:	f7fd fec5 	bl	8016b70 <__errno>
 8018de6:	2322      	movs	r3, #34	@ 0x22
 8018de8:	2600      	movs	r6, #0
 8018dea:	4f07      	ldr	r7, [pc, #28]	@ (8018e08 <log10+0x64>)
 8018dec:	6003      	str	r3, [r0, #0]
 8018dee:	0030      	movs	r0, r6
 8018df0:	0039      	movs	r1, r7
 8018df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018df4:	f7fd febc 	bl	8016b70 <__errno>
 8018df8:	2321      	movs	r3, #33	@ 0x21
 8018dfa:	6003      	str	r3, [r0, #0]
 8018dfc:	4803      	ldr	r0, [pc, #12]	@ (8018e0c <log10+0x68>)
 8018dfe:	f000 f871 	bl	8018ee4 <nan>
 8018e02:	0006      	movs	r6, r0
 8018e04:	000f      	movs	r7, r1
 8018e06:	e7f2      	b.n	8018dee <log10+0x4a>
 8018e08:	fff00000 	.word	0xfff00000
 8018e0c:	0801a7d6 	.word	0x0801a7d6

08018e10 <sqrt>:
 8018e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e12:	0004      	movs	r4, r0
 8018e14:	000d      	movs	r5, r1
 8018e16:	f000 f875 	bl	8018f04 <__ieee754_sqrt>
 8018e1a:	0022      	movs	r2, r4
 8018e1c:	0006      	movs	r6, r0
 8018e1e:	000f      	movs	r7, r1
 8018e20:	002b      	movs	r3, r5
 8018e22:	0020      	movs	r0, r4
 8018e24:	0029      	movs	r1, r5
 8018e26:	f7ea f9eb 	bl	8003200 <__aeabi_dcmpun>
 8018e2a:	2800      	cmp	r0, #0
 8018e2c:	d113      	bne.n	8018e56 <sqrt+0x46>
 8018e2e:	2200      	movs	r2, #0
 8018e30:	2300      	movs	r3, #0
 8018e32:	0020      	movs	r0, r4
 8018e34:	0029      	movs	r1, r5
 8018e36:	f7e7 fb0f 	bl	8000458 <__aeabi_dcmplt>
 8018e3a:	2800      	cmp	r0, #0
 8018e3c:	d00b      	beq.n	8018e56 <sqrt+0x46>
 8018e3e:	f7fd fe97 	bl	8016b70 <__errno>
 8018e42:	2321      	movs	r3, #33	@ 0x21
 8018e44:	2200      	movs	r2, #0
 8018e46:	6003      	str	r3, [r0, #0]
 8018e48:	2300      	movs	r3, #0
 8018e4a:	0010      	movs	r0, r2
 8018e4c:	0019      	movs	r1, r3
 8018e4e:	f7e8 ff2f 	bl	8001cb0 <__aeabi_ddiv>
 8018e52:	0006      	movs	r6, r0
 8018e54:	000f      	movs	r7, r1
 8018e56:	0030      	movs	r0, r6
 8018e58:	0039      	movs	r1, r7
 8018e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e5c <expf>:
 8018e5c:	b570      	push	{r4, r5, r6, lr}
 8018e5e:	1c04      	adds	r4, r0, #0
 8018e60:	f000 fa2a 	bl	80192b8 <__ieee754_expf>
 8018e64:	1c05      	adds	r5, r0, #0
 8018e66:	1c20      	adds	r0, r4, #0
 8018e68:	f000 f842 	bl	8018ef0 <finitef>
 8018e6c:	2800      	cmp	r0, #0
 8018e6e:	d00b      	beq.n	8018e88 <expf+0x2c>
 8018e70:	490c      	ldr	r1, [pc, #48]	@ (8018ea4 <expf+0x48>)
 8018e72:	1c20      	adds	r0, r4, #0
 8018e74:	f7e7 fb3e 	bl	80004f4 <__aeabi_fcmpgt>
 8018e78:	2800      	cmp	r0, #0
 8018e7a:	d007      	beq.n	8018e8c <expf+0x30>
 8018e7c:	f7fd fe78 	bl	8016b70 <__errno>
 8018e80:	25ff      	movs	r5, #255	@ 0xff
 8018e82:	2322      	movs	r3, #34	@ 0x22
 8018e84:	05ed      	lsls	r5, r5, #23
 8018e86:	6003      	str	r3, [r0, #0]
 8018e88:	1c28      	adds	r0, r5, #0
 8018e8a:	bd70      	pop	{r4, r5, r6, pc}
 8018e8c:	4906      	ldr	r1, [pc, #24]	@ (8018ea8 <expf+0x4c>)
 8018e8e:	1c20      	adds	r0, r4, #0
 8018e90:	f7e7 fb1c 	bl	80004cc <__aeabi_fcmplt>
 8018e94:	2800      	cmp	r0, #0
 8018e96:	d0f7      	beq.n	8018e88 <expf+0x2c>
 8018e98:	f7fd fe6a 	bl	8016b70 <__errno>
 8018e9c:	2322      	movs	r3, #34	@ 0x22
 8018e9e:	2500      	movs	r5, #0
 8018ea0:	6003      	str	r3, [r0, #0]
 8018ea2:	e7f1      	b.n	8018e88 <expf+0x2c>
 8018ea4:	42b17217 	.word	0x42b17217
 8018ea8:	c2cff1b5 	.word	0xc2cff1b5

08018eac <sqrtf>:
 8018eac:	b570      	push	{r4, r5, r6, lr}
 8018eae:	1c05      	adds	r5, r0, #0
 8018eb0:	f000 f910 	bl	80190d4 <__ieee754_sqrtf>
 8018eb4:	1c29      	adds	r1, r5, #0
 8018eb6:	1c04      	adds	r4, r0, #0
 8018eb8:	1c28      	adds	r0, r5, #0
 8018eba:	f7e8 fad1 	bl	8001460 <__aeabi_fcmpun>
 8018ebe:	2800      	cmp	r0, #0
 8018ec0:	d10e      	bne.n	8018ee0 <sqrtf+0x34>
 8018ec2:	2100      	movs	r1, #0
 8018ec4:	1c28      	adds	r0, r5, #0
 8018ec6:	f7e7 fb01 	bl	80004cc <__aeabi_fcmplt>
 8018eca:	2800      	cmp	r0, #0
 8018ecc:	d008      	beq.n	8018ee0 <sqrtf+0x34>
 8018ece:	f7fd fe4f 	bl	8016b70 <__errno>
 8018ed2:	2321      	movs	r3, #33	@ 0x21
 8018ed4:	2100      	movs	r1, #0
 8018ed6:	6003      	str	r3, [r0, #0]
 8018ed8:	1c08      	adds	r0, r1, #0
 8018eda:	f7e7 fdf9 	bl	8000ad0 <__aeabi_fdiv>
 8018ede:	1c04      	adds	r4, r0, #0
 8018ee0:	1c20      	adds	r0, r4, #0
 8018ee2:	bd70      	pop	{r4, r5, r6, pc}

08018ee4 <nan>:
 8018ee4:	2000      	movs	r0, #0
 8018ee6:	4901      	ldr	r1, [pc, #4]	@ (8018eec <nan+0x8>)
 8018ee8:	4770      	bx	lr
 8018eea:	46c0      	nop			@ (mov r8, r8)
 8018eec:	7ff80000 	.word	0x7ff80000

08018ef0 <finitef>:
 8018ef0:	22ff      	movs	r2, #255	@ 0xff
 8018ef2:	0043      	lsls	r3, r0, #1
 8018ef4:	085b      	lsrs	r3, r3, #1
 8018ef6:	2001      	movs	r0, #1
 8018ef8:	05d2      	lsls	r2, r2, #23
 8018efa:	4293      	cmp	r3, r2
 8018efc:	db00      	blt.n	8018f00 <finitef+0x10>
 8018efe:	2000      	movs	r0, #0
 8018f00:	4770      	bx	lr
	...

08018f04 <__ieee754_sqrt>:
 8018f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f06:	000a      	movs	r2, r1
 8018f08:	000d      	movs	r5, r1
 8018f0a:	496d      	ldr	r1, [pc, #436]	@ (80190c0 <__ieee754_sqrt+0x1bc>)
 8018f0c:	0004      	movs	r4, r0
 8018f0e:	0003      	movs	r3, r0
 8018f10:	0008      	movs	r0, r1
 8018f12:	b087      	sub	sp, #28
 8018f14:	4028      	ands	r0, r5
 8018f16:	4288      	cmp	r0, r1
 8018f18:	d111      	bne.n	8018f3e <__ieee754_sqrt+0x3a>
 8018f1a:	0022      	movs	r2, r4
 8018f1c:	002b      	movs	r3, r5
 8018f1e:	0020      	movs	r0, r4
 8018f20:	0029      	movs	r1, r5
 8018f22:	f7e9 fb09 	bl	8002538 <__aeabi_dmul>
 8018f26:	0002      	movs	r2, r0
 8018f28:	000b      	movs	r3, r1
 8018f2a:	0020      	movs	r0, r4
 8018f2c:	0029      	movs	r1, r5
 8018f2e:	f7e8 fb5b 	bl	80015e8 <__aeabi_dadd>
 8018f32:	0004      	movs	r4, r0
 8018f34:	000d      	movs	r5, r1
 8018f36:	0020      	movs	r0, r4
 8018f38:	0029      	movs	r1, r5
 8018f3a:	b007      	add	sp, #28
 8018f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f3e:	2d00      	cmp	r5, #0
 8018f40:	dc11      	bgt.n	8018f66 <__ieee754_sqrt+0x62>
 8018f42:	0069      	lsls	r1, r5, #1
 8018f44:	0849      	lsrs	r1, r1, #1
 8018f46:	4321      	orrs	r1, r4
 8018f48:	d0f5      	beq.n	8018f36 <__ieee754_sqrt+0x32>
 8018f4a:	2000      	movs	r0, #0
 8018f4c:	4285      	cmp	r5, r0
 8018f4e:	d010      	beq.n	8018f72 <__ieee754_sqrt+0x6e>
 8018f50:	0022      	movs	r2, r4
 8018f52:	002b      	movs	r3, r5
 8018f54:	0020      	movs	r0, r4
 8018f56:	0029      	movs	r1, r5
 8018f58:	f7e9 fdb6 	bl	8002ac8 <__aeabi_dsub>
 8018f5c:	0002      	movs	r2, r0
 8018f5e:	000b      	movs	r3, r1
 8018f60:	f7e8 fea6 	bl	8001cb0 <__aeabi_ddiv>
 8018f64:	e7e5      	b.n	8018f32 <__ieee754_sqrt+0x2e>
 8018f66:	1528      	asrs	r0, r5, #20
 8018f68:	d115      	bne.n	8018f96 <__ieee754_sqrt+0x92>
 8018f6a:	2480      	movs	r4, #128	@ 0x80
 8018f6c:	2100      	movs	r1, #0
 8018f6e:	0364      	lsls	r4, r4, #13
 8018f70:	e007      	b.n	8018f82 <__ieee754_sqrt+0x7e>
 8018f72:	0ada      	lsrs	r2, r3, #11
 8018f74:	3815      	subs	r0, #21
 8018f76:	055b      	lsls	r3, r3, #21
 8018f78:	2a00      	cmp	r2, #0
 8018f7a:	d0fa      	beq.n	8018f72 <__ieee754_sqrt+0x6e>
 8018f7c:	e7f5      	b.n	8018f6a <__ieee754_sqrt+0x66>
 8018f7e:	0052      	lsls	r2, r2, #1
 8018f80:	3101      	adds	r1, #1
 8018f82:	4222      	tst	r2, r4
 8018f84:	d0fb      	beq.n	8018f7e <__ieee754_sqrt+0x7a>
 8018f86:	1e4c      	subs	r4, r1, #1
 8018f88:	1b00      	subs	r0, r0, r4
 8018f8a:	2420      	movs	r4, #32
 8018f8c:	001d      	movs	r5, r3
 8018f8e:	1a64      	subs	r4, r4, r1
 8018f90:	40e5      	lsrs	r5, r4
 8018f92:	408b      	lsls	r3, r1
 8018f94:	432a      	orrs	r2, r5
 8018f96:	494b      	ldr	r1, [pc, #300]	@ (80190c4 <__ieee754_sqrt+0x1c0>)
 8018f98:	0312      	lsls	r2, r2, #12
 8018f9a:	1844      	adds	r4, r0, r1
 8018f9c:	2180      	movs	r1, #128	@ 0x80
 8018f9e:	0b12      	lsrs	r2, r2, #12
 8018fa0:	0349      	lsls	r1, r1, #13
 8018fa2:	4311      	orrs	r1, r2
 8018fa4:	07c0      	lsls	r0, r0, #31
 8018fa6:	d403      	bmi.n	8018fb0 <__ieee754_sqrt+0xac>
 8018fa8:	0fda      	lsrs	r2, r3, #31
 8018faa:	0049      	lsls	r1, r1, #1
 8018fac:	1851      	adds	r1, r2, r1
 8018fae:	005b      	lsls	r3, r3, #1
 8018fb0:	2500      	movs	r5, #0
 8018fb2:	1062      	asrs	r2, r4, #1
 8018fb4:	0049      	lsls	r1, r1, #1
 8018fb6:	2480      	movs	r4, #128	@ 0x80
 8018fb8:	9205      	str	r2, [sp, #20]
 8018fba:	0fda      	lsrs	r2, r3, #31
 8018fbc:	1852      	adds	r2, r2, r1
 8018fbe:	2016      	movs	r0, #22
 8018fc0:	0029      	movs	r1, r5
 8018fc2:	005b      	lsls	r3, r3, #1
 8018fc4:	03a4      	lsls	r4, r4, #14
 8018fc6:	190e      	adds	r6, r1, r4
 8018fc8:	4296      	cmp	r6, r2
 8018fca:	dc02      	bgt.n	8018fd2 <__ieee754_sqrt+0xce>
 8018fcc:	1931      	adds	r1, r6, r4
 8018fce:	1b92      	subs	r2, r2, r6
 8018fd0:	192d      	adds	r5, r5, r4
 8018fd2:	0fde      	lsrs	r6, r3, #31
 8018fd4:	0052      	lsls	r2, r2, #1
 8018fd6:	3801      	subs	r0, #1
 8018fd8:	1992      	adds	r2, r2, r6
 8018fda:	005b      	lsls	r3, r3, #1
 8018fdc:	0864      	lsrs	r4, r4, #1
 8018fde:	2800      	cmp	r0, #0
 8018fe0:	d1f1      	bne.n	8018fc6 <__ieee754_sqrt+0xc2>
 8018fe2:	2620      	movs	r6, #32
 8018fe4:	2780      	movs	r7, #128	@ 0x80
 8018fe6:	0004      	movs	r4, r0
 8018fe8:	9604      	str	r6, [sp, #16]
 8018fea:	063f      	lsls	r7, r7, #24
 8018fec:	19c6      	adds	r6, r0, r7
 8018fee:	46b4      	mov	ip, r6
 8018ff0:	4291      	cmp	r1, r2
 8018ff2:	db02      	blt.n	8018ffa <__ieee754_sqrt+0xf6>
 8018ff4:	d114      	bne.n	8019020 <__ieee754_sqrt+0x11c>
 8018ff6:	429e      	cmp	r6, r3
 8018ff8:	d812      	bhi.n	8019020 <__ieee754_sqrt+0x11c>
 8018ffa:	4660      	mov	r0, ip
 8018ffc:	4666      	mov	r6, ip
 8018ffe:	19c0      	adds	r0, r0, r7
 8019000:	9100      	str	r1, [sp, #0]
 8019002:	2e00      	cmp	r6, #0
 8019004:	da03      	bge.n	801900e <__ieee754_sqrt+0x10a>
 8019006:	43c6      	mvns	r6, r0
 8019008:	0ff6      	lsrs	r6, r6, #31
 801900a:	198e      	adds	r6, r1, r6
 801900c:	9600      	str	r6, [sp, #0]
 801900e:	1a52      	subs	r2, r2, r1
 8019010:	4563      	cmp	r3, ip
 8019012:	4189      	sbcs	r1, r1
 8019014:	4249      	negs	r1, r1
 8019016:	1a52      	subs	r2, r2, r1
 8019018:	4661      	mov	r1, ip
 801901a:	1a5b      	subs	r3, r3, r1
 801901c:	9900      	ldr	r1, [sp, #0]
 801901e:	19e4      	adds	r4, r4, r7
 8019020:	0fde      	lsrs	r6, r3, #31
 8019022:	0052      	lsls	r2, r2, #1
 8019024:	1992      	adds	r2, r2, r6
 8019026:	9e04      	ldr	r6, [sp, #16]
 8019028:	005b      	lsls	r3, r3, #1
 801902a:	3e01      	subs	r6, #1
 801902c:	087f      	lsrs	r7, r7, #1
 801902e:	9604      	str	r6, [sp, #16]
 8019030:	2e00      	cmp	r6, #0
 8019032:	d1db      	bne.n	8018fec <__ieee754_sqrt+0xe8>
 8019034:	431a      	orrs	r2, r3
 8019036:	d01f      	beq.n	8019078 <__ieee754_sqrt+0x174>
 8019038:	4e23      	ldr	r6, [pc, #140]	@ (80190c8 <__ieee754_sqrt+0x1c4>)
 801903a:	4f24      	ldr	r7, [pc, #144]	@ (80190cc <__ieee754_sqrt+0x1c8>)
 801903c:	6830      	ldr	r0, [r6, #0]
 801903e:	6871      	ldr	r1, [r6, #4]
 8019040:	683a      	ldr	r2, [r7, #0]
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	9200      	str	r2, [sp, #0]
 8019046:	9301      	str	r3, [sp, #4]
 8019048:	6832      	ldr	r2, [r6, #0]
 801904a:	6873      	ldr	r3, [r6, #4]
 801904c:	9202      	str	r2, [sp, #8]
 801904e:	9303      	str	r3, [sp, #12]
 8019050:	9a00      	ldr	r2, [sp, #0]
 8019052:	9b01      	ldr	r3, [sp, #4]
 8019054:	f7e9 fd38 	bl	8002ac8 <__aeabi_dsub>
 8019058:	0002      	movs	r2, r0
 801905a:	000b      	movs	r3, r1
 801905c:	9802      	ldr	r0, [sp, #8]
 801905e:	9903      	ldr	r1, [sp, #12]
 8019060:	f7e7 fa04 	bl	800046c <__aeabi_dcmple>
 8019064:	2800      	cmp	r0, #0
 8019066:	d007      	beq.n	8019078 <__ieee754_sqrt+0x174>
 8019068:	6830      	ldr	r0, [r6, #0]
 801906a:	6871      	ldr	r1, [r6, #4]
 801906c:	683a      	ldr	r2, [r7, #0]
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	1c67      	adds	r7, r4, #1
 8019072:	d10f      	bne.n	8019094 <__ieee754_sqrt+0x190>
 8019074:	9c04      	ldr	r4, [sp, #16]
 8019076:	3501      	adds	r5, #1
 8019078:	4b15      	ldr	r3, [pc, #84]	@ (80190d0 <__ieee754_sqrt+0x1cc>)
 801907a:	106a      	asrs	r2, r5, #1
 801907c:	18d2      	adds	r2, r2, r3
 801907e:	0863      	lsrs	r3, r4, #1
 8019080:	07ed      	lsls	r5, r5, #31
 8019082:	d502      	bpl.n	801908a <__ieee754_sqrt+0x186>
 8019084:	2180      	movs	r1, #128	@ 0x80
 8019086:	0609      	lsls	r1, r1, #24
 8019088:	430b      	orrs	r3, r1
 801908a:	9905      	ldr	r1, [sp, #20]
 801908c:	001c      	movs	r4, r3
 801908e:	0509      	lsls	r1, r1, #20
 8019090:	188d      	adds	r5, r1, r2
 8019092:	e750      	b.n	8018f36 <__ieee754_sqrt+0x32>
 8019094:	f7e8 faa8 	bl	80015e8 <__aeabi_dadd>
 8019098:	6877      	ldr	r7, [r6, #4]
 801909a:	6836      	ldr	r6, [r6, #0]
 801909c:	0002      	movs	r2, r0
 801909e:	000b      	movs	r3, r1
 80190a0:	0030      	movs	r0, r6
 80190a2:	0039      	movs	r1, r7
 80190a4:	f7e7 f9d8 	bl	8000458 <__aeabi_dcmplt>
 80190a8:	2800      	cmp	r0, #0
 80190aa:	d004      	beq.n	80190b6 <__ieee754_sqrt+0x1b2>
 80190ac:	3402      	adds	r4, #2
 80190ae:	4263      	negs	r3, r4
 80190b0:	4163      	adcs	r3, r4
 80190b2:	18ed      	adds	r5, r5, r3
 80190b4:	e7e0      	b.n	8019078 <__ieee754_sqrt+0x174>
 80190b6:	2301      	movs	r3, #1
 80190b8:	3401      	adds	r4, #1
 80190ba:	439c      	bics	r4, r3
 80190bc:	e7dc      	b.n	8019078 <__ieee754_sqrt+0x174>
 80190be:	46c0      	nop			@ (mov r8, r8)
 80190c0:	7ff00000 	.word	0x7ff00000
 80190c4:	fffffc01 	.word	0xfffffc01
 80190c8:	20000498 	.word	0x20000498
 80190cc:	20000490 	.word	0x20000490
 80190d0:	3fe00000 	.word	0x3fe00000

080190d4 <__ieee754_sqrtf>:
 80190d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190d6:	0003      	movs	r3, r0
 80190d8:	0042      	lsls	r2, r0, #1
 80190da:	1c04      	adds	r4, r0, #0
 80190dc:	20ff      	movs	r0, #255	@ 0xff
 80190de:	0852      	lsrs	r2, r2, #1
 80190e0:	05c0      	lsls	r0, r0, #23
 80190e2:	4282      	cmp	r2, r0
 80190e4:	d30a      	bcc.n	80190fc <__ieee754_sqrtf+0x28>
 80190e6:	1c21      	adds	r1, r4, #0
 80190e8:	1c20      	adds	r0, r4, #0
 80190ea:	f7e7 fed7 	bl	8000e9c <__aeabi_fmul>
 80190ee:	1c01      	adds	r1, r0, #0
 80190f0:	1c20      	adds	r0, r4, #0
 80190f2:	f7e7 fb63 	bl	80007bc <__aeabi_fadd>
 80190f6:	1c04      	adds	r4, r0, #0
 80190f8:	1c20      	adds	r0, r4, #0
 80190fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80190fc:	2a00      	cmp	r2, #0
 80190fe:	d0fb      	beq.n	80190f8 <__ieee754_sqrtf+0x24>
 8019100:	2c00      	cmp	r4, #0
 8019102:	da07      	bge.n	8019114 <__ieee754_sqrtf+0x40>
 8019104:	1c21      	adds	r1, r4, #0
 8019106:	1c20      	adds	r0, r4, #0
 8019108:	f7e8 f806 	bl	8001118 <__aeabi_fsub>
 801910c:	1c01      	adds	r1, r0, #0
 801910e:	f7e7 fcdf 	bl	8000ad0 <__aeabi_fdiv>
 8019112:	e7f0      	b.n	80190f6 <__ieee754_sqrtf+0x22>
 8019114:	0022      	movs	r2, r4
 8019116:	15e1      	asrs	r1, r4, #23
 8019118:	4002      	ands	r2, r0
 801911a:	4204      	tst	r4, r0
 801911c:	d046      	beq.n	80191ac <__ieee754_sqrtf+0xd8>
 801911e:	2280      	movs	r2, #128	@ 0x80
 8019120:	000f      	movs	r7, r1
 8019122:	025b      	lsls	r3, r3, #9
 8019124:	0a5b      	lsrs	r3, r3, #9
 8019126:	0412      	lsls	r2, r2, #16
 8019128:	3f7f      	subs	r7, #127	@ 0x7f
 801912a:	4313      	orrs	r3, r2
 801912c:	07c9      	lsls	r1, r1, #31
 801912e:	d400      	bmi.n	8019132 <__ieee754_sqrtf+0x5e>
 8019130:	005b      	lsls	r3, r3, #1
 8019132:	2400      	movs	r4, #0
 8019134:	2180      	movs	r1, #128	@ 0x80
 8019136:	2019      	movs	r0, #25
 8019138:	0026      	movs	r6, r4
 801913a:	107f      	asrs	r7, r7, #1
 801913c:	005b      	lsls	r3, r3, #1
 801913e:	0449      	lsls	r1, r1, #17
 8019140:	1875      	adds	r5, r6, r1
 8019142:	001a      	movs	r2, r3
 8019144:	429d      	cmp	r5, r3
 8019146:	dc02      	bgt.n	801914e <__ieee754_sqrtf+0x7a>
 8019148:	186e      	adds	r6, r5, r1
 801914a:	1b5a      	subs	r2, r3, r5
 801914c:	1864      	adds	r4, r4, r1
 801914e:	3801      	subs	r0, #1
 8019150:	0053      	lsls	r3, r2, #1
 8019152:	0849      	lsrs	r1, r1, #1
 8019154:	2800      	cmp	r0, #0
 8019156:	d1f3      	bne.n	8019140 <__ieee754_sqrtf+0x6c>
 8019158:	2a00      	cmp	r2, #0
 801915a:	d019      	beq.n	8019190 <__ieee754_sqrtf+0xbc>
 801915c:	4d17      	ldr	r5, [pc, #92]	@ (80191bc <__ieee754_sqrtf+0xe8>)
 801915e:	4e18      	ldr	r6, [pc, #96]	@ (80191c0 <__ieee754_sqrtf+0xec>)
 8019160:	6828      	ldr	r0, [r5, #0]
 8019162:	6831      	ldr	r1, [r6, #0]
 8019164:	682b      	ldr	r3, [r5, #0]
 8019166:	9301      	str	r3, [sp, #4]
 8019168:	f7e7 ffd6 	bl	8001118 <__aeabi_fsub>
 801916c:	1c01      	adds	r1, r0, #0
 801916e:	9801      	ldr	r0, [sp, #4]
 8019170:	f7e7 f9b6 	bl	80004e0 <__aeabi_fcmple>
 8019174:	2800      	cmp	r0, #0
 8019176:	d00b      	beq.n	8019190 <__ieee754_sqrtf+0xbc>
 8019178:	6828      	ldr	r0, [r5, #0]
 801917a:	6831      	ldr	r1, [r6, #0]
 801917c:	f7e7 fb1e 	bl	80007bc <__aeabi_fadd>
 8019180:	682d      	ldr	r5, [r5, #0]
 8019182:	1c01      	adds	r1, r0, #0
 8019184:	1c28      	adds	r0, r5, #0
 8019186:	f7e7 f9a1 	bl	80004cc <__aeabi_fcmplt>
 801918a:	2800      	cmp	r0, #0
 801918c:	d011      	beq.n	80191b2 <__ieee754_sqrtf+0xde>
 801918e:	3402      	adds	r4, #2
 8019190:	23fc      	movs	r3, #252	@ 0xfc
 8019192:	1064      	asrs	r4, r4, #1
 8019194:	059b      	lsls	r3, r3, #22
 8019196:	18e3      	adds	r3, r4, r3
 8019198:	05fc      	lsls	r4, r7, #23
 801919a:	18e4      	adds	r4, r4, r3
 801919c:	e7ac      	b.n	80190f8 <__ieee754_sqrtf+0x24>
 801919e:	005b      	lsls	r3, r3, #1
 80191a0:	3201      	adds	r2, #1
 80191a2:	4203      	tst	r3, r0
 80191a4:	d0fb      	beq.n	801919e <__ieee754_sqrtf+0xca>
 80191a6:	3a01      	subs	r2, #1
 80191a8:	1a89      	subs	r1, r1, r2
 80191aa:	e7b8      	b.n	801911e <__ieee754_sqrtf+0x4a>
 80191ac:	2080      	movs	r0, #128	@ 0x80
 80191ae:	0400      	lsls	r0, r0, #16
 80191b0:	e7f7      	b.n	80191a2 <__ieee754_sqrtf+0xce>
 80191b2:	2301      	movs	r3, #1
 80191b4:	3401      	adds	r4, #1
 80191b6:	439c      	bics	r4, r3
 80191b8:	e7ea      	b.n	8019190 <__ieee754_sqrtf+0xbc>
 80191ba:	46c0      	nop			@ (mov r8, r8)
 80191bc:	200004a4 	.word	0x200004a4
 80191c0:	200004a0 	.word	0x200004a0

080191c4 <__ieee754_log10>:
 80191c4:	2280      	movs	r2, #128	@ 0x80
 80191c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191c8:	000b      	movs	r3, r1
 80191ca:	0004      	movs	r4, r0
 80191cc:	000d      	movs	r5, r1
 80191ce:	b085      	sub	sp, #20
 80191d0:	0352      	lsls	r2, r2, #13
 80191d2:	4291      	cmp	r1, r2
 80191d4:	da26      	bge.n	8019224 <__ieee754_log10+0x60>
 80191d6:	004a      	lsls	r2, r1, #1
 80191d8:	0852      	lsrs	r2, r2, #1
 80191da:	4302      	orrs	r2, r0
 80191dc:	d107      	bne.n	80191ee <__ieee754_log10+0x2a>
 80191de:	2200      	movs	r2, #0
 80191e0:	2300      	movs	r3, #0
 80191e2:	2000      	movs	r0, #0
 80191e4:	4929      	ldr	r1, [pc, #164]	@ (801928c <__ieee754_log10+0xc8>)
 80191e6:	f7e8 fd63 	bl	8001cb0 <__aeabi_ddiv>
 80191ea:	b005      	add	sp, #20
 80191ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191ee:	2900      	cmp	r1, #0
 80191f0:	da05      	bge.n	80191fe <__ieee754_log10+0x3a>
 80191f2:	0002      	movs	r2, r0
 80191f4:	f7e9 fc68 	bl	8002ac8 <__aeabi_dsub>
 80191f8:	2200      	movs	r2, #0
 80191fa:	2300      	movs	r3, #0
 80191fc:	e7f3      	b.n	80191e6 <__ieee754_log10+0x22>
 80191fe:	2200      	movs	r2, #0
 8019200:	4b23      	ldr	r3, [pc, #140]	@ (8019290 <__ieee754_log10+0xcc>)
 8019202:	f7e9 f999 	bl	8002538 <__aeabi_dmul>
 8019206:	2236      	movs	r2, #54	@ 0x36
 8019208:	0004      	movs	r4, r0
 801920a:	000d      	movs	r5, r1
 801920c:	000b      	movs	r3, r1
 801920e:	4252      	negs	r2, r2
 8019210:	4920      	ldr	r1, [pc, #128]	@ (8019294 <__ieee754_log10+0xd0>)
 8019212:	428b      	cmp	r3, r1
 8019214:	dd08      	ble.n	8019228 <__ieee754_log10+0x64>
 8019216:	0022      	movs	r2, r4
 8019218:	002b      	movs	r3, r5
 801921a:	0020      	movs	r0, r4
 801921c:	0029      	movs	r1, r5
 801921e:	f7e8 f9e3 	bl	80015e8 <__aeabi_dadd>
 8019222:	e7e2      	b.n	80191ea <__ieee754_log10+0x26>
 8019224:	2200      	movs	r2, #0
 8019226:	e7f3      	b.n	8019210 <__ieee754_log10+0x4c>
 8019228:	491b      	ldr	r1, [pc, #108]	@ (8019298 <__ieee754_log10+0xd4>)
 801922a:	1518      	asrs	r0, r3, #20
 801922c:	1840      	adds	r0, r0, r1
 801922e:	1880      	adds	r0, r0, r2
 8019230:	0fc2      	lsrs	r2, r0, #31
 8019232:	031b      	lsls	r3, r3, #12
 8019234:	0b1b      	lsrs	r3, r3, #12
 8019236:	1880      	adds	r0, r0, r2
 8019238:	9203      	str	r2, [sp, #12]
 801923a:	9300      	str	r3, [sp, #0]
 801923c:	f7ea f83e 	bl	80032bc <__aeabi_i2d>
 8019240:	9a03      	ldr	r2, [sp, #12]
 8019242:	4b16      	ldr	r3, [pc, #88]	@ (801929c <__ieee754_log10+0xd8>)
 8019244:	0006      	movs	r6, r0
 8019246:	1a9b      	subs	r3, r3, r2
 8019248:	9a00      	ldr	r2, [sp, #0]
 801924a:	051b      	lsls	r3, r3, #20
 801924c:	431a      	orrs	r2, r3
 801924e:	0015      	movs	r5, r2
 8019250:	4b13      	ldr	r3, [pc, #76]	@ (80192a0 <__ieee754_log10+0xdc>)
 8019252:	4a14      	ldr	r2, [pc, #80]	@ (80192a4 <__ieee754_log10+0xe0>)
 8019254:	000f      	movs	r7, r1
 8019256:	f7e9 f96f 	bl	8002538 <__aeabi_dmul>
 801925a:	9000      	str	r0, [sp, #0]
 801925c:	9101      	str	r1, [sp, #4]
 801925e:	0020      	movs	r0, r4
 8019260:	0029      	movs	r1, r5
 8019262:	f000 f93b 	bl	80194dc <__ieee754_log>
 8019266:	4a10      	ldr	r2, [pc, #64]	@ (80192a8 <__ieee754_log10+0xe4>)
 8019268:	4b10      	ldr	r3, [pc, #64]	@ (80192ac <__ieee754_log10+0xe8>)
 801926a:	f7e9 f965 	bl	8002538 <__aeabi_dmul>
 801926e:	9a00      	ldr	r2, [sp, #0]
 8019270:	9b01      	ldr	r3, [sp, #4]
 8019272:	f7e8 f9b9 	bl	80015e8 <__aeabi_dadd>
 8019276:	4a0e      	ldr	r2, [pc, #56]	@ (80192b0 <__ieee754_log10+0xec>)
 8019278:	4b0e      	ldr	r3, [pc, #56]	@ (80192b4 <__ieee754_log10+0xf0>)
 801927a:	0004      	movs	r4, r0
 801927c:	000d      	movs	r5, r1
 801927e:	0030      	movs	r0, r6
 8019280:	0039      	movs	r1, r7
 8019282:	f7e9 f959 	bl	8002538 <__aeabi_dmul>
 8019286:	0002      	movs	r2, r0
 8019288:	000b      	movs	r3, r1
 801928a:	e7c6      	b.n	801921a <__ieee754_log10+0x56>
 801928c:	c3500000 	.word	0xc3500000
 8019290:	43500000 	.word	0x43500000
 8019294:	7fefffff 	.word	0x7fefffff
 8019298:	fffffc01 	.word	0xfffffc01
 801929c:	000003ff 	.word	0x000003ff
 80192a0:	3d59fef3 	.word	0x3d59fef3
 80192a4:	11f12b36 	.word	0x11f12b36
 80192a8:	1526e50e 	.word	0x1526e50e
 80192ac:	3fdbcb7b 	.word	0x3fdbcb7b
 80192b0:	509f6000 	.word	0x509f6000
 80192b4:	3fd34413 	.word	0x3fd34413

080192b8 <__ieee754_expf>:
 80192b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192ba:	21ff      	movs	r1, #255	@ 0xff
 80192bc:	0043      	lsls	r3, r0, #1
 80192be:	1c04      	adds	r4, r0, #0
 80192c0:	085b      	lsrs	r3, r3, #1
 80192c2:	05c9      	lsls	r1, r1, #23
 80192c4:	428b      	cmp	r3, r1
 80192c6:	d904      	bls.n	80192d2 <__ieee754_expf+0x1a>
 80192c8:	1c01      	adds	r1, r0, #0
 80192ca:	1c20      	adds	r0, r4, #0
 80192cc:	f7e7 fa76 	bl	80007bc <__aeabi_fadd>
 80192d0:	e00d      	b.n	80192ee <__ieee754_expf+0x36>
 80192d2:	0fc6      	lsrs	r6, r0, #31
 80192d4:	428b      	cmp	r3, r1
 80192d6:	d104      	bne.n	80192e2 <__ieee754_expf+0x2a>
 80192d8:	2e00      	cmp	r6, #0
 80192da:	d000      	beq.n	80192de <__ieee754_expf+0x26>
 80192dc:	e0ba      	b.n	8019454 <__ieee754_expf+0x19c>
 80192de:	1c20      	adds	r0, r4, #0
 80192e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80192e2:	495d      	ldr	r1, [pc, #372]	@ (8019458 <__ieee754_expf+0x1a0>)
 80192e4:	4288      	cmp	r0, r1
 80192e6:	dd04      	ble.n	80192f2 <__ieee754_expf+0x3a>
 80192e8:	2000      	movs	r0, #0
 80192ea:	f000 f8f1 	bl	80194d0 <__math_oflowf>
 80192ee:	1c04      	adds	r4, r0, #0
 80192f0:	e7f5      	b.n	80192de <__ieee754_expf+0x26>
 80192f2:	2800      	cmp	r0, #0
 80192f4:	da06      	bge.n	8019304 <__ieee754_expf+0x4c>
 80192f6:	4a59      	ldr	r2, [pc, #356]	@ (801945c <__ieee754_expf+0x1a4>)
 80192f8:	4293      	cmp	r3, r2
 80192fa:	d903      	bls.n	8019304 <__ieee754_expf+0x4c>
 80192fc:	2000      	movs	r0, #0
 80192fe:	f000 f8e1 	bl	80194c4 <__math_uflowf>
 8019302:	e7f4      	b.n	80192ee <__ieee754_expf+0x36>
 8019304:	4a56      	ldr	r2, [pc, #344]	@ (8019460 <__ieee754_expf+0x1a8>)
 8019306:	4293      	cmp	r3, r2
 8019308:	d96e      	bls.n	80193e8 <__ieee754_expf+0x130>
 801930a:	4a56      	ldr	r2, [pc, #344]	@ (8019464 <__ieee754_expf+0x1ac>)
 801930c:	00b5      	lsls	r5, r6, #2
 801930e:	4293      	cmp	r3, r2
 8019310:	d84e      	bhi.n	80193b0 <__ieee754_expf+0xf8>
 8019312:	4b55      	ldr	r3, [pc, #340]	@ (8019468 <__ieee754_expf+0x1b0>)
 8019314:	1c20      	adds	r0, r4, #0
 8019316:	5959      	ldr	r1, [r3, r5]
 8019318:	f7e7 fefe 	bl	8001118 <__aeabi_fsub>
 801931c:	4b53      	ldr	r3, [pc, #332]	@ (801946c <__ieee754_expf+0x1b4>)
 801931e:	1c07      	adds	r7, r0, #0
 8019320:	595b      	ldr	r3, [r3, r5]
 8019322:	2501      	movs	r5, #1
 8019324:	1bad      	subs	r5, r5, r6
 8019326:	9300      	str	r3, [sp, #0]
 8019328:	1bad      	subs	r5, r5, r6
 801932a:	9900      	ldr	r1, [sp, #0]
 801932c:	1c38      	adds	r0, r7, #0
 801932e:	f7e7 fef3 	bl	8001118 <__aeabi_fsub>
 8019332:	1c04      	adds	r4, r0, #0
 8019334:	1c21      	adds	r1, r4, #0
 8019336:	1c20      	adds	r0, r4, #0
 8019338:	f7e7 fdb0 	bl	8000e9c <__aeabi_fmul>
 801933c:	494c      	ldr	r1, [pc, #304]	@ (8019470 <__ieee754_expf+0x1b8>)
 801933e:	1c06      	adds	r6, r0, #0
 8019340:	f7e7 fdac 	bl	8000e9c <__aeabi_fmul>
 8019344:	494b      	ldr	r1, [pc, #300]	@ (8019474 <__ieee754_expf+0x1bc>)
 8019346:	f7e7 fee7 	bl	8001118 <__aeabi_fsub>
 801934a:	1c31      	adds	r1, r6, #0
 801934c:	f7e7 fda6 	bl	8000e9c <__aeabi_fmul>
 8019350:	4949      	ldr	r1, [pc, #292]	@ (8019478 <__ieee754_expf+0x1c0>)
 8019352:	f7e7 fa33 	bl	80007bc <__aeabi_fadd>
 8019356:	1c31      	adds	r1, r6, #0
 8019358:	f7e7 fda0 	bl	8000e9c <__aeabi_fmul>
 801935c:	4947      	ldr	r1, [pc, #284]	@ (801947c <__ieee754_expf+0x1c4>)
 801935e:	f7e7 fedb 	bl	8001118 <__aeabi_fsub>
 8019362:	1c31      	adds	r1, r6, #0
 8019364:	f7e7 fd9a 	bl	8000e9c <__aeabi_fmul>
 8019368:	4945      	ldr	r1, [pc, #276]	@ (8019480 <__ieee754_expf+0x1c8>)
 801936a:	f7e7 fa27 	bl	80007bc <__aeabi_fadd>
 801936e:	1c31      	adds	r1, r6, #0
 8019370:	f7e7 fd94 	bl	8000e9c <__aeabi_fmul>
 8019374:	1c01      	adds	r1, r0, #0
 8019376:	1c20      	adds	r0, r4, #0
 8019378:	f7e7 fece 	bl	8001118 <__aeabi_fsub>
 801937c:	1c01      	adds	r1, r0, #0
 801937e:	1c06      	adds	r6, r0, #0
 8019380:	1c20      	adds	r0, r4, #0
 8019382:	f7e7 fd8b 	bl	8000e9c <__aeabi_fmul>
 8019386:	9001      	str	r0, [sp, #4]
 8019388:	2d00      	cmp	r5, #0
 801938a:	d140      	bne.n	801940e <__ieee754_expf+0x156>
 801938c:	2180      	movs	r1, #128	@ 0x80
 801938e:	1c30      	adds	r0, r6, #0
 8019390:	05c9      	lsls	r1, r1, #23
 8019392:	f7e7 fec1 	bl	8001118 <__aeabi_fsub>
 8019396:	1c01      	adds	r1, r0, #0
 8019398:	9801      	ldr	r0, [sp, #4]
 801939a:	f7e7 fb99 	bl	8000ad0 <__aeabi_fdiv>
 801939e:	1c21      	adds	r1, r4, #0
 80193a0:	f7e7 feba 	bl	8001118 <__aeabi_fsub>
 80193a4:	1c01      	adds	r1, r0, #0
 80193a6:	20fe      	movs	r0, #254	@ 0xfe
 80193a8:	0580      	lsls	r0, r0, #22
 80193aa:	f7e7 feb5 	bl	8001118 <__aeabi_fsub>
 80193ae:	e79e      	b.n	80192ee <__ieee754_expf+0x36>
 80193b0:	4934      	ldr	r1, [pc, #208]	@ (8019484 <__ieee754_expf+0x1cc>)
 80193b2:	1c20      	adds	r0, r4, #0
 80193b4:	f7e7 fd72 	bl	8000e9c <__aeabi_fmul>
 80193b8:	4b33      	ldr	r3, [pc, #204]	@ (8019488 <__ieee754_expf+0x1d0>)
 80193ba:	5959      	ldr	r1, [r3, r5]
 80193bc:	f7e7 f9fe 	bl	80007bc <__aeabi_fadd>
 80193c0:	f7e8 f864 	bl	800148c <__aeabi_f2iz>
 80193c4:	0005      	movs	r5, r0
 80193c6:	f7e8 f881 	bl	80014cc <__aeabi_i2f>
 80193ca:	4930      	ldr	r1, [pc, #192]	@ (801948c <__ieee754_expf+0x1d4>)
 80193cc:	1c06      	adds	r6, r0, #0
 80193ce:	f7e7 fd65 	bl	8000e9c <__aeabi_fmul>
 80193d2:	1c01      	adds	r1, r0, #0
 80193d4:	1c20      	adds	r0, r4, #0
 80193d6:	f7e7 fe9f 	bl	8001118 <__aeabi_fsub>
 80193da:	492d      	ldr	r1, [pc, #180]	@ (8019490 <__ieee754_expf+0x1d8>)
 80193dc:	1c07      	adds	r7, r0, #0
 80193de:	1c30      	adds	r0, r6, #0
 80193e0:	f7e7 fd5c 	bl	8000e9c <__aeabi_fmul>
 80193e4:	9000      	str	r0, [sp, #0]
 80193e6:	e7a0      	b.n	801932a <__ieee754_expf+0x72>
 80193e8:	22d0      	movs	r2, #208	@ 0xd0
 80193ea:	0592      	lsls	r2, r2, #22
 80193ec:	4293      	cmp	r3, r2
 80193ee:	d20c      	bcs.n	801940a <__ieee754_expf+0x152>
 80193f0:	4928      	ldr	r1, [pc, #160]	@ (8019494 <__ieee754_expf+0x1dc>)
 80193f2:	1c20      	adds	r0, r4, #0
 80193f4:	f7e7 f9e2 	bl	80007bc <__aeabi_fadd>
 80193f8:	21fe      	movs	r1, #254	@ 0xfe
 80193fa:	0589      	lsls	r1, r1, #22
 80193fc:	f7e7 f87a 	bl	80004f4 <__aeabi_fcmpgt>
 8019400:	1e05      	subs	r5, r0, #0
 8019402:	d097      	beq.n	8019334 <__ieee754_expf+0x7c>
 8019404:	21fe      	movs	r1, #254	@ 0xfe
 8019406:	0589      	lsls	r1, r1, #22
 8019408:	e75f      	b.n	80192ca <__ieee754_expf+0x12>
 801940a:	2500      	movs	r5, #0
 801940c:	e792      	b.n	8019334 <__ieee754_expf+0x7c>
 801940e:	2080      	movs	r0, #128	@ 0x80
 8019410:	1c31      	adds	r1, r6, #0
 8019412:	05c0      	lsls	r0, r0, #23
 8019414:	f7e7 fe80 	bl	8001118 <__aeabi_fsub>
 8019418:	1c01      	adds	r1, r0, #0
 801941a:	9801      	ldr	r0, [sp, #4]
 801941c:	f7e7 fb58 	bl	8000ad0 <__aeabi_fdiv>
 8019420:	1c01      	adds	r1, r0, #0
 8019422:	9800      	ldr	r0, [sp, #0]
 8019424:	f7e7 fe78 	bl	8001118 <__aeabi_fsub>
 8019428:	1c39      	adds	r1, r7, #0
 801942a:	f7e7 fe75 	bl	8001118 <__aeabi_fsub>
 801942e:	1c01      	adds	r1, r0, #0
 8019430:	20fe      	movs	r0, #254	@ 0xfe
 8019432:	0580      	lsls	r0, r0, #22
 8019434:	f7e7 fe70 	bl	8001118 <__aeabi_fsub>
 8019438:	002b      	movs	r3, r5
 801943a:	337d      	adds	r3, #125	@ 0x7d
 801943c:	db02      	blt.n	8019444 <__ieee754_expf+0x18c>
 801943e:	05ec      	lsls	r4, r5, #23
 8019440:	1824      	adds	r4, r4, r0
 8019442:	e74c      	b.n	80192de <__ieee754_expf+0x26>
 8019444:	21d8      	movs	r1, #216	@ 0xd8
 8019446:	3564      	adds	r5, #100	@ 0x64
 8019448:	05ed      	lsls	r5, r5, #23
 801944a:	1828      	adds	r0, r5, r0
 801944c:	0509      	lsls	r1, r1, #20
 801944e:	f7e7 fd25 	bl	8000e9c <__aeabi_fmul>
 8019452:	e74c      	b.n	80192ee <__ieee754_expf+0x36>
 8019454:	2400      	movs	r4, #0
 8019456:	e742      	b.n	80192de <__ieee754_expf+0x26>
 8019458:	42b17217 	.word	0x42b17217
 801945c:	42cff1b5 	.word	0x42cff1b5
 8019460:	3eb17218 	.word	0x3eb17218
 8019464:	3f851591 	.word	0x3f851591
 8019468:	0801a8e0 	.word	0x0801a8e0
 801946c:	0801a8d8 	.word	0x0801a8d8
 8019470:	3331bb4c 	.word	0x3331bb4c
 8019474:	35ddea0e 	.word	0x35ddea0e
 8019478:	388ab355 	.word	0x388ab355
 801947c:	3b360b61 	.word	0x3b360b61
 8019480:	3e2aaaab 	.word	0x3e2aaaab
 8019484:	3fb8aa3b 	.word	0x3fb8aa3b
 8019488:	0801a8e8 	.word	0x0801a8e8
 801948c:	3f317180 	.word	0x3f317180
 8019490:	3717f7d1 	.word	0x3717f7d1
 8019494:	7149f2ca 	.word	0x7149f2ca

08019498 <with_errnof>:
 8019498:	b570      	push	{r4, r5, r6, lr}
 801949a:	000d      	movs	r5, r1
 801949c:	1c04      	adds	r4, r0, #0
 801949e:	f7fd fb67 	bl	8016b70 <__errno>
 80194a2:	6005      	str	r5, [r0, #0]
 80194a4:	1c20      	adds	r0, r4, #0
 80194a6:	bd70      	pop	{r4, r5, r6, pc}

080194a8 <xflowf>:
 80194a8:	b510      	push	{r4, lr}
 80194aa:	1c0b      	adds	r3, r1, #0
 80194ac:	2800      	cmp	r0, #0
 80194ae:	d002      	beq.n	80194b6 <xflowf+0xe>
 80194b0:	2380      	movs	r3, #128	@ 0x80
 80194b2:	061b      	lsls	r3, r3, #24
 80194b4:	18cb      	adds	r3, r1, r3
 80194b6:	1c18      	adds	r0, r3, #0
 80194b8:	f7e7 fcf0 	bl	8000e9c <__aeabi_fmul>
 80194bc:	2122      	movs	r1, #34	@ 0x22
 80194be:	f7ff ffeb 	bl	8019498 <with_errnof>
 80194c2:	bd10      	pop	{r4, pc}

080194c4 <__math_uflowf>:
 80194c4:	2180      	movs	r1, #128	@ 0x80
 80194c6:	b510      	push	{r4, lr}
 80194c8:	0549      	lsls	r1, r1, #21
 80194ca:	f7ff ffed 	bl	80194a8 <xflowf>
 80194ce:	bd10      	pop	{r4, pc}

080194d0 <__math_oflowf>:
 80194d0:	21e0      	movs	r1, #224	@ 0xe0
 80194d2:	b510      	push	{r4, lr}
 80194d4:	05c9      	lsls	r1, r1, #23
 80194d6:	f7ff ffe7 	bl	80194a8 <xflowf>
 80194da:	bd10      	pop	{r4, pc}

080194dc <__ieee754_log>:
 80194dc:	2380      	movs	r3, #128	@ 0x80
 80194de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194e0:	035b      	lsls	r3, r3, #13
 80194e2:	000e      	movs	r6, r1
 80194e4:	b08d      	sub	sp, #52	@ 0x34
 80194e6:	4299      	cmp	r1, r3
 80194e8:	da23      	bge.n	8019532 <__ieee754_log+0x56>
 80194ea:	004b      	lsls	r3, r1, #1
 80194ec:	085b      	lsrs	r3, r3, #1
 80194ee:	4303      	orrs	r3, r0
 80194f0:	d107      	bne.n	8019502 <__ieee754_log+0x26>
 80194f2:	2200      	movs	r2, #0
 80194f4:	2300      	movs	r3, #0
 80194f6:	2000      	movs	r0, #0
 80194f8:	49b4      	ldr	r1, [pc, #720]	@ (80197cc <__ieee754_log+0x2f0>)
 80194fa:	f7e8 fbd9 	bl	8001cb0 <__aeabi_ddiv>
 80194fe:	b00d      	add	sp, #52	@ 0x34
 8019500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019502:	2900      	cmp	r1, #0
 8019504:	da06      	bge.n	8019514 <__ieee754_log+0x38>
 8019506:	0002      	movs	r2, r0
 8019508:	000b      	movs	r3, r1
 801950a:	f7e9 fadd 	bl	8002ac8 <__aeabi_dsub>
 801950e:	2200      	movs	r2, #0
 8019510:	2300      	movs	r3, #0
 8019512:	e7f2      	b.n	80194fa <__ieee754_log+0x1e>
 8019514:	4bae      	ldr	r3, [pc, #696]	@ (80197d0 <__ieee754_log+0x2f4>)
 8019516:	2200      	movs	r2, #0
 8019518:	f7e9 f80e 	bl	8002538 <__aeabi_dmul>
 801951c:	2336      	movs	r3, #54	@ 0x36
 801951e:	000e      	movs	r6, r1
 8019520:	425b      	negs	r3, r3
 8019522:	4aac      	ldr	r2, [pc, #688]	@ (80197d4 <__ieee754_log+0x2f8>)
 8019524:	4296      	cmp	r6, r2
 8019526:	dd06      	ble.n	8019536 <__ieee754_log+0x5a>
 8019528:	0002      	movs	r2, r0
 801952a:	000b      	movs	r3, r1
 801952c:	f7e8 f85c 	bl	80015e8 <__aeabi_dadd>
 8019530:	e7e5      	b.n	80194fe <__ieee754_log+0x22>
 8019532:	2300      	movs	r3, #0
 8019534:	e7f5      	b.n	8019522 <__ieee754_log+0x46>
 8019536:	4ca8      	ldr	r4, [pc, #672]	@ (80197d8 <__ieee754_log+0x2fc>)
 8019538:	1532      	asrs	r2, r6, #20
 801953a:	1912      	adds	r2, r2, r4
 801953c:	0336      	lsls	r6, r6, #12
 801953e:	4ca7      	ldr	r4, [pc, #668]	@ (80197dc <__ieee754_log+0x300>)
 8019540:	18d2      	adds	r2, r2, r3
 8019542:	0b33      	lsrs	r3, r6, #12
 8019544:	9302      	str	r3, [sp, #8]
 8019546:	191b      	adds	r3, r3, r4
 8019548:	2480      	movs	r4, #128	@ 0x80
 801954a:	0364      	lsls	r4, r4, #13
 801954c:	4023      	ands	r3, r4
 801954e:	4ca4      	ldr	r4, [pc, #656]	@ (80197e0 <__ieee754_log+0x304>)
 8019550:	9d02      	ldr	r5, [sp, #8]
 8019552:	405c      	eors	r4, r3
 8019554:	151b      	asrs	r3, r3, #20
 8019556:	189b      	adds	r3, r3, r2
 8019558:	4325      	orrs	r5, r4
 801955a:	2200      	movs	r2, #0
 801955c:	9300      	str	r3, [sp, #0]
 801955e:	0029      	movs	r1, r5
 8019560:	4b9f      	ldr	r3, [pc, #636]	@ (80197e0 <__ieee754_log+0x304>)
 8019562:	f7e9 fab1 	bl	8002ac8 <__aeabi_dsub>
 8019566:	9b02      	ldr	r3, [sp, #8]
 8019568:	0006      	movs	r6, r0
 801956a:	3302      	adds	r3, #2
 801956c:	031b      	lsls	r3, r3, #12
 801956e:	000f      	movs	r7, r1
 8019570:	2200      	movs	r2, #0
 8019572:	0b1b      	lsrs	r3, r3, #12
 8019574:	2b02      	cmp	r3, #2
 8019576:	dc64      	bgt.n	8019642 <__ieee754_log+0x166>
 8019578:	2300      	movs	r3, #0
 801957a:	f7e6 ff67 	bl	800044c <__aeabi_dcmpeq>
 801957e:	2800      	cmp	r0, #0
 8019580:	d019      	beq.n	80195b6 <__ieee754_log+0xda>
 8019582:	9b00      	ldr	r3, [sp, #0]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d100      	bne.n	801958a <__ieee754_log+0xae>
 8019588:	e11c      	b.n	80197c4 <__ieee754_log+0x2e8>
 801958a:	0018      	movs	r0, r3
 801958c:	f7e9 fe96 	bl	80032bc <__aeabi_i2d>
 8019590:	4a94      	ldr	r2, [pc, #592]	@ (80197e4 <__ieee754_log+0x308>)
 8019592:	4b95      	ldr	r3, [pc, #596]	@ (80197e8 <__ieee754_log+0x30c>)
 8019594:	0004      	movs	r4, r0
 8019596:	000d      	movs	r5, r1
 8019598:	f7e8 ffce 	bl	8002538 <__aeabi_dmul>
 801959c:	4a93      	ldr	r2, [pc, #588]	@ (80197ec <__ieee754_log+0x310>)
 801959e:	0006      	movs	r6, r0
 80195a0:	000f      	movs	r7, r1
 80195a2:	4b93      	ldr	r3, [pc, #588]	@ (80197f0 <__ieee754_log+0x314>)
 80195a4:	0020      	movs	r0, r4
 80195a6:	0029      	movs	r1, r5
 80195a8:	f7e8 ffc6 	bl	8002538 <__aeabi_dmul>
 80195ac:	0002      	movs	r2, r0
 80195ae:	000b      	movs	r3, r1
 80195b0:	0030      	movs	r0, r6
 80195b2:	0039      	movs	r1, r7
 80195b4:	e7ba      	b.n	801952c <__ieee754_log+0x50>
 80195b6:	4a8f      	ldr	r2, [pc, #572]	@ (80197f4 <__ieee754_log+0x318>)
 80195b8:	4b8f      	ldr	r3, [pc, #572]	@ (80197f8 <__ieee754_log+0x31c>)
 80195ba:	0030      	movs	r0, r6
 80195bc:	0039      	movs	r1, r7
 80195be:	f7e8 ffbb 	bl	8002538 <__aeabi_dmul>
 80195c2:	0002      	movs	r2, r0
 80195c4:	000b      	movs	r3, r1
 80195c6:	2000      	movs	r0, #0
 80195c8:	498c      	ldr	r1, [pc, #560]	@ (80197fc <__ieee754_log+0x320>)
 80195ca:	f7e9 fa7d 	bl	8002ac8 <__aeabi_dsub>
 80195ce:	0032      	movs	r2, r6
 80195d0:	0004      	movs	r4, r0
 80195d2:	000d      	movs	r5, r1
 80195d4:	003b      	movs	r3, r7
 80195d6:	0030      	movs	r0, r6
 80195d8:	0039      	movs	r1, r7
 80195da:	f7e8 ffad 	bl	8002538 <__aeabi_dmul>
 80195de:	000b      	movs	r3, r1
 80195e0:	0002      	movs	r2, r0
 80195e2:	0029      	movs	r1, r5
 80195e4:	0020      	movs	r0, r4
 80195e6:	f7e8 ffa7 	bl	8002538 <__aeabi_dmul>
 80195ea:	9b00      	ldr	r3, [sp, #0]
 80195ec:	9002      	str	r0, [sp, #8]
 80195ee:	9103      	str	r1, [sp, #12]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d106      	bne.n	8019602 <__ieee754_log+0x126>
 80195f4:	0002      	movs	r2, r0
 80195f6:	000b      	movs	r3, r1
 80195f8:	0030      	movs	r0, r6
 80195fa:	0039      	movs	r1, r7
 80195fc:	f7e9 fa64 	bl	8002ac8 <__aeabi_dsub>
 8019600:	e77d      	b.n	80194fe <__ieee754_log+0x22>
 8019602:	9800      	ldr	r0, [sp, #0]
 8019604:	f7e9 fe5a 	bl	80032bc <__aeabi_i2d>
 8019608:	4a76      	ldr	r2, [pc, #472]	@ (80197e4 <__ieee754_log+0x308>)
 801960a:	4b77      	ldr	r3, [pc, #476]	@ (80197e8 <__ieee754_log+0x30c>)
 801960c:	0004      	movs	r4, r0
 801960e:	000d      	movs	r5, r1
 8019610:	f7e8 ff92 	bl	8002538 <__aeabi_dmul>
 8019614:	4a75      	ldr	r2, [pc, #468]	@ (80197ec <__ieee754_log+0x310>)
 8019616:	9000      	str	r0, [sp, #0]
 8019618:	9101      	str	r1, [sp, #4]
 801961a:	4b75      	ldr	r3, [pc, #468]	@ (80197f0 <__ieee754_log+0x314>)
 801961c:	0020      	movs	r0, r4
 801961e:	0029      	movs	r1, r5
 8019620:	f7e8 ff8a 	bl	8002538 <__aeabi_dmul>
 8019624:	0002      	movs	r2, r0
 8019626:	000b      	movs	r3, r1
 8019628:	9802      	ldr	r0, [sp, #8]
 801962a:	9903      	ldr	r1, [sp, #12]
 801962c:	f7e9 fa4c 	bl	8002ac8 <__aeabi_dsub>
 8019630:	0032      	movs	r2, r6
 8019632:	003b      	movs	r3, r7
 8019634:	f7e9 fa48 	bl	8002ac8 <__aeabi_dsub>
 8019638:	0002      	movs	r2, r0
 801963a:	000b      	movs	r3, r1
 801963c:	9800      	ldr	r0, [sp, #0]
 801963e:	9901      	ldr	r1, [sp, #4]
 8019640:	e7dc      	b.n	80195fc <__ieee754_log+0x120>
 8019642:	2380      	movs	r3, #128	@ 0x80
 8019644:	05db      	lsls	r3, r3, #23
 8019646:	f7e7 ffcf 	bl	80015e8 <__aeabi_dadd>
 801964a:	0002      	movs	r2, r0
 801964c:	000b      	movs	r3, r1
 801964e:	0030      	movs	r0, r6
 8019650:	0039      	movs	r1, r7
 8019652:	f7e8 fb2d 	bl	8001cb0 <__aeabi_ddiv>
 8019656:	9004      	str	r0, [sp, #16]
 8019658:	9105      	str	r1, [sp, #20]
 801965a:	9800      	ldr	r0, [sp, #0]
 801965c:	f7e9 fe2e 	bl	80032bc <__aeabi_i2d>
 8019660:	9a04      	ldr	r2, [sp, #16]
 8019662:	9b05      	ldr	r3, [sp, #20]
 8019664:	9006      	str	r0, [sp, #24]
 8019666:	9107      	str	r1, [sp, #28]
 8019668:	0010      	movs	r0, r2
 801966a:	0019      	movs	r1, r3
 801966c:	f7e8 ff64 	bl	8002538 <__aeabi_dmul>
 8019670:	4a63      	ldr	r2, [pc, #396]	@ (8019800 <__ieee754_log+0x324>)
 8019672:	9b02      	ldr	r3, [sp, #8]
 8019674:	4694      	mov	ip, r2
 8019676:	4463      	add	r3, ip
 8019678:	0002      	movs	r2, r0
 801967a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801967c:	000b      	movs	r3, r1
 801967e:	9008      	str	r0, [sp, #32]
 8019680:	9109      	str	r1, [sp, #36]	@ 0x24
 8019682:	f7e8 ff59 	bl	8002538 <__aeabi_dmul>
 8019686:	0004      	movs	r4, r0
 8019688:	000d      	movs	r5, r1
 801968a:	4a5e      	ldr	r2, [pc, #376]	@ (8019804 <__ieee754_log+0x328>)
 801968c:	4b5e      	ldr	r3, [pc, #376]	@ (8019808 <__ieee754_log+0x32c>)
 801968e:	f7e8 ff53 	bl	8002538 <__aeabi_dmul>
 8019692:	4a5e      	ldr	r2, [pc, #376]	@ (801980c <__ieee754_log+0x330>)
 8019694:	4b5e      	ldr	r3, [pc, #376]	@ (8019810 <__ieee754_log+0x334>)
 8019696:	f7e7 ffa7 	bl	80015e8 <__aeabi_dadd>
 801969a:	0022      	movs	r2, r4
 801969c:	002b      	movs	r3, r5
 801969e:	f7e8 ff4b 	bl	8002538 <__aeabi_dmul>
 80196a2:	4a5c      	ldr	r2, [pc, #368]	@ (8019814 <__ieee754_log+0x338>)
 80196a4:	4b5c      	ldr	r3, [pc, #368]	@ (8019818 <__ieee754_log+0x33c>)
 80196a6:	f7e7 ff9f 	bl	80015e8 <__aeabi_dadd>
 80196aa:	0022      	movs	r2, r4
 80196ac:	002b      	movs	r3, r5
 80196ae:	f7e8 ff43 	bl	8002538 <__aeabi_dmul>
 80196b2:	4a5a      	ldr	r2, [pc, #360]	@ (801981c <__ieee754_log+0x340>)
 80196b4:	4b5a      	ldr	r3, [pc, #360]	@ (8019820 <__ieee754_log+0x344>)
 80196b6:	f7e7 ff97 	bl	80015e8 <__aeabi_dadd>
 80196ba:	9a08      	ldr	r2, [sp, #32]
 80196bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196be:	f7e8 ff3b 	bl	8002538 <__aeabi_dmul>
 80196c2:	4a58      	ldr	r2, [pc, #352]	@ (8019824 <__ieee754_log+0x348>)
 80196c4:	9008      	str	r0, [sp, #32]
 80196c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80196c8:	4b57      	ldr	r3, [pc, #348]	@ (8019828 <__ieee754_log+0x34c>)
 80196ca:	0020      	movs	r0, r4
 80196cc:	0029      	movs	r1, r5
 80196ce:	f7e8 ff33 	bl	8002538 <__aeabi_dmul>
 80196d2:	4a56      	ldr	r2, [pc, #344]	@ (801982c <__ieee754_log+0x350>)
 80196d4:	4b56      	ldr	r3, [pc, #344]	@ (8019830 <__ieee754_log+0x354>)
 80196d6:	f7e7 ff87 	bl	80015e8 <__aeabi_dadd>
 80196da:	0022      	movs	r2, r4
 80196dc:	002b      	movs	r3, r5
 80196de:	f7e8 ff2b 	bl	8002538 <__aeabi_dmul>
 80196e2:	4a54      	ldr	r2, [pc, #336]	@ (8019834 <__ieee754_log+0x358>)
 80196e4:	4b54      	ldr	r3, [pc, #336]	@ (8019838 <__ieee754_log+0x35c>)
 80196e6:	f7e7 ff7f 	bl	80015e8 <__aeabi_dadd>
 80196ea:	0022      	movs	r2, r4
 80196ec:	002b      	movs	r3, r5
 80196ee:	f7e8 ff23 	bl	8002538 <__aeabi_dmul>
 80196f2:	0002      	movs	r2, r0
 80196f4:	000b      	movs	r3, r1
 80196f6:	9808      	ldr	r0, [sp, #32]
 80196f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80196fa:	f7e7 ff75 	bl	80015e8 <__aeabi_dadd>
 80196fe:	9a02      	ldr	r2, [sp, #8]
 8019700:	4b4e      	ldr	r3, [pc, #312]	@ (801983c <__ieee754_log+0x360>)
 8019702:	0004      	movs	r4, r0
 8019704:	1a9b      	subs	r3, r3, r2
 8019706:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019708:	000d      	movs	r5, r1
 801970a:	4313      	orrs	r3, r2
 801970c:	2b00      	cmp	r3, #0
 801970e:	dd34      	ble.n	801977a <__ieee754_log+0x29e>
 8019710:	2200      	movs	r2, #0
 8019712:	4b3a      	ldr	r3, [pc, #232]	@ (80197fc <__ieee754_log+0x320>)
 8019714:	0030      	movs	r0, r6
 8019716:	0039      	movs	r1, r7
 8019718:	f7e8 ff0e 	bl	8002538 <__aeabi_dmul>
 801971c:	0032      	movs	r2, r6
 801971e:	003b      	movs	r3, r7
 8019720:	f7e8 ff0a 	bl	8002538 <__aeabi_dmul>
 8019724:	0002      	movs	r2, r0
 8019726:	000b      	movs	r3, r1
 8019728:	9002      	str	r0, [sp, #8]
 801972a:	9103      	str	r1, [sp, #12]
 801972c:	0020      	movs	r0, r4
 801972e:	0029      	movs	r1, r5
 8019730:	f7e7 ff5a 	bl	80015e8 <__aeabi_dadd>
 8019734:	9a04      	ldr	r2, [sp, #16]
 8019736:	9b05      	ldr	r3, [sp, #20]
 8019738:	f7e8 fefe 	bl	8002538 <__aeabi_dmul>
 801973c:	9b00      	ldr	r3, [sp, #0]
 801973e:	0004      	movs	r4, r0
 8019740:	000d      	movs	r5, r1
 8019742:	2b00      	cmp	r3, #0
 8019744:	d106      	bne.n	8019754 <__ieee754_log+0x278>
 8019746:	0002      	movs	r2, r0
 8019748:	000b      	movs	r3, r1
 801974a:	9802      	ldr	r0, [sp, #8]
 801974c:	9903      	ldr	r1, [sp, #12]
 801974e:	f7e9 f9bb 	bl	8002ac8 <__aeabi_dsub>
 8019752:	e74f      	b.n	80195f4 <__ieee754_log+0x118>
 8019754:	4a23      	ldr	r2, [pc, #140]	@ (80197e4 <__ieee754_log+0x308>)
 8019756:	4b24      	ldr	r3, [pc, #144]	@ (80197e8 <__ieee754_log+0x30c>)
 8019758:	9806      	ldr	r0, [sp, #24]
 801975a:	9907      	ldr	r1, [sp, #28]
 801975c:	f7e8 feec 	bl	8002538 <__aeabi_dmul>
 8019760:	4a22      	ldr	r2, [pc, #136]	@ (80197ec <__ieee754_log+0x310>)
 8019762:	9000      	str	r0, [sp, #0]
 8019764:	9101      	str	r1, [sp, #4]
 8019766:	9806      	ldr	r0, [sp, #24]
 8019768:	9907      	ldr	r1, [sp, #28]
 801976a:	4b21      	ldr	r3, [pc, #132]	@ (80197f0 <__ieee754_log+0x314>)
 801976c:	f7e8 fee4 	bl	8002538 <__aeabi_dmul>
 8019770:	0022      	movs	r2, r4
 8019772:	002b      	movs	r3, r5
 8019774:	f7e7 ff38 	bl	80015e8 <__aeabi_dadd>
 8019778:	e754      	b.n	8019624 <__ieee754_log+0x148>
 801977a:	0002      	movs	r2, r0
 801977c:	000b      	movs	r3, r1
 801977e:	0030      	movs	r0, r6
 8019780:	0039      	movs	r1, r7
 8019782:	f7e9 f9a1 	bl	8002ac8 <__aeabi_dsub>
 8019786:	9a04      	ldr	r2, [sp, #16]
 8019788:	9b05      	ldr	r3, [sp, #20]
 801978a:	f7e8 fed5 	bl	8002538 <__aeabi_dmul>
 801978e:	9b00      	ldr	r3, [sp, #0]
 8019790:	0004      	movs	r4, r0
 8019792:	000d      	movs	r5, r1
 8019794:	2b00      	cmp	r3, #0
 8019796:	d102      	bne.n	801979e <__ieee754_log+0x2c2>
 8019798:	0002      	movs	r2, r0
 801979a:	000b      	movs	r3, r1
 801979c:	e72c      	b.n	80195f8 <__ieee754_log+0x11c>
 801979e:	4a11      	ldr	r2, [pc, #68]	@ (80197e4 <__ieee754_log+0x308>)
 80197a0:	4b11      	ldr	r3, [pc, #68]	@ (80197e8 <__ieee754_log+0x30c>)
 80197a2:	9806      	ldr	r0, [sp, #24]
 80197a4:	9907      	ldr	r1, [sp, #28]
 80197a6:	f7e8 fec7 	bl	8002538 <__aeabi_dmul>
 80197aa:	4a10      	ldr	r2, [pc, #64]	@ (80197ec <__ieee754_log+0x310>)
 80197ac:	9000      	str	r0, [sp, #0]
 80197ae:	9101      	str	r1, [sp, #4]
 80197b0:	9806      	ldr	r0, [sp, #24]
 80197b2:	9907      	ldr	r1, [sp, #28]
 80197b4:	4b0e      	ldr	r3, [pc, #56]	@ (80197f0 <__ieee754_log+0x314>)
 80197b6:	f7e8 febf 	bl	8002538 <__aeabi_dmul>
 80197ba:	0002      	movs	r2, r0
 80197bc:	000b      	movs	r3, r1
 80197be:	0020      	movs	r0, r4
 80197c0:	0029      	movs	r1, r5
 80197c2:	e733      	b.n	801962c <__ieee754_log+0x150>
 80197c4:	2000      	movs	r0, #0
 80197c6:	2100      	movs	r1, #0
 80197c8:	e699      	b.n	80194fe <__ieee754_log+0x22>
 80197ca:	46c0      	nop			@ (mov r8, r8)
 80197cc:	c3500000 	.word	0xc3500000
 80197d0:	43500000 	.word	0x43500000
 80197d4:	7fefffff 	.word	0x7fefffff
 80197d8:	fffffc01 	.word	0xfffffc01
 80197dc:	00095f64 	.word	0x00095f64
 80197e0:	3ff00000 	.word	0x3ff00000
 80197e4:	fee00000 	.word	0xfee00000
 80197e8:	3fe62e42 	.word	0x3fe62e42
 80197ec:	35793c76 	.word	0x35793c76
 80197f0:	3dea39ef 	.word	0x3dea39ef
 80197f4:	55555555 	.word	0x55555555
 80197f8:	3fd55555 	.word	0x3fd55555
 80197fc:	3fe00000 	.word	0x3fe00000
 8019800:	fff9eb86 	.word	0xfff9eb86
 8019804:	df3e5244 	.word	0xdf3e5244
 8019808:	3fc2f112 	.word	0x3fc2f112
 801980c:	96cb03de 	.word	0x96cb03de
 8019810:	3fc74664 	.word	0x3fc74664
 8019814:	94229359 	.word	0x94229359
 8019818:	3fd24924 	.word	0x3fd24924
 801981c:	55555593 	.word	0x55555593
 8019820:	3fe55555 	.word	0x3fe55555
 8019824:	d078c69f 	.word	0xd078c69f
 8019828:	3fc39a09 	.word	0x3fc39a09
 801982c:	1d8e78af 	.word	0x1d8e78af
 8019830:	3fcc71c5 	.word	0x3fcc71c5
 8019834:	9997fa04 	.word	0x9997fa04
 8019838:	3fd99999 	.word	0x3fd99999
 801983c:	0006b851 	.word	0x0006b851

08019840 <_init>:
 8019840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019842:	46c0      	nop			@ (mov r8, r8)
 8019844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019846:	bc08      	pop	{r3}
 8019848:	469e      	mov	lr, r3
 801984a:	4770      	bx	lr

0801984c <_fini>:
 801984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801984e:	46c0      	nop			@ (mov r8, r8)
 8019850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019852:	bc08      	pop	{r3}
 8019854:	469e      	mov	lr, r3
 8019856:	4770      	bx	lr
