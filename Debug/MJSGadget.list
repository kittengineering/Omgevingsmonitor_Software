
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111b0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  08011270  08011270  00012270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011eb0  08011eb0  00013248  2**0
                  CONTENTS
  4 .ARM          00000008  08011eb0  08011eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011eb8  08011eb8  00013248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011eb8  08011eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011ebc  08011ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  08011ec0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001800  20000248  08012108  00013248  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20001a48  08012108  00013a48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e21d  00000000  00000000  00013270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000517f  00000000  00000000  0003148d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  00036610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f2  00000000  00000000  00037ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae4c  00000000  00000000  000391d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025c71  00000000  00000000  0005401e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec3f  00000000  00000000  00079c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001088ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cac  00000000  00000000  00108914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0010f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000248 	.word	0x20000248
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011258 	.word	0x08011258

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000024c 	.word	0x2000024c
 8000104:	08011258 	.word	0x08011258

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	08011994 	.word	0x08011994
 8000d08:	080119d4 	.word	0x080119d4
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	08011a10 	.word	0x08011a10
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <ESP_Init+0x1c>)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800355a:	4b04      	ldr	r3, [pc, #16]	@ (800356c <ESP_Init+0x20>)
 800355c:	220f      	movs	r2, #15
 800355e:	701a      	strb	r2, [r3, #0]
}
 8003560:	46c0      	nop			@ (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000264 	.word	0x20000264
 800356c:	20000027 	.word	0x20000027

08003570 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint8_t length) {
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	000a      	movs	r2, r1
 800357a:	1cfb      	adds	r3, r7, #3
 800357c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800357e:	4b0f      	ldr	r3, [pc, #60]	@ (80035bc <ESP_Send+0x4c>)
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	1cfb      	adds	r3, r7, #3
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b29a      	uxth	r2, r3
 8003588:	250f      	movs	r5, #15
 800358a:	197c      	adds	r4, r7, r5
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	0019      	movs	r1, r3
 8003590:	f009 f93a 	bl	800c808 <HAL_UART_Transmit_DMA>
 8003594:	0003      	movs	r3, r0
 8003596:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003598:	197b      	adds	r3, r7, r5
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <ESP_Send+0x40>
    Debug("Error in HAL_UART_Transmit_DMA");
 80035a0:	4a07      	ldr	r2, [pc, #28]	@ (80035c0 <ESP_Send+0x50>)
 80035a2:	4b08      	ldr	r3, [pc, #32]	@ (80035c4 <ESP_Send+0x54>)
 80035a4:	0019      	movs	r1, r3
 80035a6:	2003      	movs	r0, #3
 80035a8:	f003 fe84 	bl	80072b4 <CreateLine>
    return false;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e000      	b.n	80035b2 <ESP_Send+0x42>
  }
  return true;
 80035b0:	2301      	movs	r3, #1
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b004      	add	sp, #16
 80035b8:	bdb0      	pop	{r4, r5, r7, pc}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	20000264 	.word	0x20000264
 80035c0:	08011270 	.word	0x08011270
 80035c4:	08011290 	.word	0x08011290

080035c8 <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80035c8:	b5b0      	push	{r4, r5, r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	000a      	movs	r2, r1
 80035d2:	1cfb      	adds	r3, r7, #3
 80035d4:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80035d6:	4b12      	ldr	r3, [pc, #72]	@ (8003620 <ESP_Receive+0x58>)
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80035dc:	4b11      	ldr	r3, [pc, #68]	@ (8003624 <ESP_Receive+0x5c>)
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	1cfb      	adds	r3, r7, #3
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	250f      	movs	r5, #15
 80035e8:	197c      	adds	r4, r7, r5
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0019      	movs	r1, r3
 80035ee:	f009 f99b 	bl	800c928 <HAL_UART_Receive_DMA>
 80035f2:	0003      	movs	r3, r0
 80035f4:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80035f6:	197b      	adds	r3, r7, r5
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <ESP_Receive+0x60>)
 8003600:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <ESP_Receive+0x64>)
 8003602:	0019      	movs	r1, r3
 8003604:	2003      	movs	r0, #3
 8003606:	f003 fe55 	bl	80072b4 <CreateLine>
    RxComplete = true;
 800360a:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <ESP_Receive+0x58>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
    return false;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <ESP_Receive+0x4e>
  }
  return true;
 8003614:	2301      	movs	r3, #1
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bdb0      	pop	{r4, r5, r7, pc}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	20000268 	.word	0x20000268
 8003624:	20000264 	.word	0x20000264
 8003628:	08011294 	.word	0x08011294
 800362c:	08011290 	.word	0x08011290

08003630 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003638:	4b08      	ldr	r3, [pc, #32]	@ (800365c <HAL_UART_RxCpltCallback+0x2c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d108      	bne.n	8003654 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 8003642:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <HAL_UART_RxCpltCallback+0x30>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003648:	4a06      	ldr	r2, [pc, #24]	@ (8003664 <HAL_UART_RxCpltCallback+0x34>)
 800364a:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <HAL_UART_RxCpltCallback+0x38>)
 800364c:	0019      	movs	r1, r3
 800364e:	2003      	movs	r0, #3
 8003650:	f003 fe30 	bl	80072b4 <CreateLine>
  }
}
 8003654:	46c0      	nop			@ (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	b002      	add	sp, #8
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000264 	.word	0x20000264
 8003660:	20000268 	.word	0x20000268
 8003664:	080112b4 	.word	0x080112b4
 8003668:	08011290 	.word	0x08011290

0800366c <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_UART_ErrorCallback+0x20>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d102      	bne.n	8003684 <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 800367e:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <HAL_UART_ErrorCallback+0x24>)
 8003680:	2213      	movs	r2, #19
 8003682:	701a      	strb	r2, [r3, #0]
  }
}
 8003684:	46c0      	nop			@ (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b002      	add	sp, #8
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000264 	.word	0x20000264
 8003690:	20000027 	.word	0x20000027

08003694 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_MAX_BUFFER_SIZE);
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <SetCommandBuffer+0x24>)
 80036a0:	22ff      	movs	r2, #255	@ 0xff
 80036a2:	0018      	movs	r0, r3
 80036a4:	f00b fa6a 	bl	800eb7c <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 80036a8:	4b04      	ldr	r3, [pc, #16]	@ (80036bc <SetCommandBuffer+0x28>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
}
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b002      	add	sp, #8
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	20000378 	.word	0x20000378
 80036bc:	20000477 	.word	0x20000477

080036c0 <ParseBuffer>:

 void ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t command) {
 80036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c2:	46c6      	mov	lr, r8
 80036c4:	b500      	push	{lr}
 80036c6:	b092      	sub	sp, #72	@ 0x48
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	61f8      	str	r0, [r7, #28]
 80036cc:	0008      	movs	r0, r1
 80036ce:	0011      	movs	r1, r2
 80036d0:	261a      	movs	r6, #26
 80036d2:	19bb      	adds	r3, r7, r6
 80036d4:	1c02      	adds	r2, r0, #0
 80036d6:	801a      	strh	r2, [r3, #0]
 80036d8:	2319      	movs	r3, #25
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	1c0a      	adds	r2, r1, #0
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	466b      	mov	r3, sp
 80036e2:	4698      	mov	r8, r3
  char tempBuf[len+1];
 80036e4:	19bb      	adds	r3, r7, r6
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80036ee:	001a      	movs	r2, r3
 80036f0:	60ba      	str	r2, [r7, #8]
 80036f2:	2200      	movs	r2, #0
 80036f4:	60fa      	str	r2, [r7, #12]
 80036f6:	68b8      	ldr	r0, [r7, #8]
 80036f8:	68f9      	ldr	r1, [r7, #12]
 80036fa:	0002      	movs	r2, r0
 80036fc:	0f52      	lsrs	r2, r2, #29
 80036fe:	000e      	movs	r6, r1
 8003700:	00f6      	lsls	r6, r6, #3
 8003702:	617e      	str	r6, [r7, #20]
 8003704:	697e      	ldr	r6, [r7, #20]
 8003706:	4316      	orrs	r6, r2
 8003708:	617e      	str	r6, [r7, #20]
 800370a:	0002      	movs	r2, r0
 800370c:	00d2      	lsls	r2, r2, #3
 800370e:	613a      	str	r2, [r7, #16]
 8003710:	001a      	movs	r2, r3
 8003712:	603a      	str	r2, [r7, #0]
 8003714:	2200      	movs	r2, #0
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	6838      	ldr	r0, [r7, #0]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	0002      	movs	r2, r0
 800371e:	0f52      	lsrs	r2, r2, #29
 8003720:	000e      	movs	r6, r1
 8003722:	00f5      	lsls	r5, r6, #3
 8003724:	4315      	orrs	r5, r2
 8003726:	0002      	movs	r2, r0
 8003728:	00d4      	lsls	r4, r2, #3
 800372a:	3307      	adds	r3, #7
 800372c:	08db      	lsrs	r3, r3, #3
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	466a      	mov	r2, sp
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	469d      	mov	sp, r3
 8003736:	466b      	mov	r3, sp
 8003738:	3300      	adds	r3, #0
 800373a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  bool Received = false;
 800373c:	232f      	movs	r3, #47	@ 0x2f
 800373e:	2118      	movs	r1, #24
 8003740:	185b      	adds	r3, r3, r1
 8003742:	19db      	adds	r3, r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003748:	232c      	movs	r3, #44	@ 0x2c
 800374a:	185b      	adds	r3, r3, r1
 800374c:	19db      	adds	r3, r3, r7
 800374e:	2200      	movs	r2, #0
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	e013      	b.n	800377c <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003754:	202c      	movs	r0, #44	@ 0x2c
 8003756:	2418      	movs	r4, #24
 8003758:	1903      	adds	r3, r0, r4
 800375a:	19db      	adds	r3, r3, r7
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	18d2      	adds	r2, r2, r3
 8003762:	1903      	adds	r3, r0, r4
 8003764:	19db      	adds	r3, r3, r7
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	7811      	ldrb	r1, [r2, #0]
 800376a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800376c:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 800376e:	1903      	adds	r3, r0, r4
 8003770:	19db      	adds	r3, r3, r7
 8003772:	881a      	ldrh	r2, [r3, #0]
 8003774:	1903      	adds	r3, r0, r4
 8003776:	19db      	adds	r3, r3, r7
 8003778:	3201      	adds	r2, #1
 800377a:	801a      	strh	r2, [r3, #0]
 800377c:	232c      	movs	r3, #44	@ 0x2c
 800377e:	2018      	movs	r0, #24
 8003780:	181b      	adds	r3, r3, r0
 8003782:	19da      	adds	r2, r3, r7
 8003784:	211a      	movs	r1, #26
 8003786:	187b      	adds	r3, r7, r1
 8003788:	8812      	ldrh	r2, [r2, #0]
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d3e1      	bcc.n	8003754 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003790:	187b      	adds	r3, r7, r1
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003796:	2100      	movs	r1, #0
 8003798:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 800379a:	2423      	movs	r4, #35	@ 0x23
 800379c:	0006      	movs	r6, r0
 800379e:	19a3      	adds	r3, r4, r6
 80037a0:	19db      	adds	r3, r3, r7
 80037a2:	224e      	movs	r2, #78	@ 0x4e
 80037a4:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  const char OK[] = AT_RESPONSE_OK;
 80037a6:	2014      	movs	r0, #20
 80037a8:	1983      	adds	r3, r0, r6
 80037aa:	19db      	adds	r3, r3, r7
 80037ac:	4a2f      	ldr	r2, [pc, #188]	@ (800386c <ParseBuffer+0x1ac>)
 80037ae:	8811      	ldrh	r1, [r2, #0]
 80037b0:	8019      	strh	r1, [r3, #0]
 80037b2:	7892      	ldrb	r2, [r2, #2]
 80037b4:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80037b6:	250c      	movs	r5, #12
 80037b8:	19ab      	adds	r3, r5, r6
 80037ba:	19db      	adds	r3, r3, r7
 80037bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003870 <ParseBuffer+0x1b0>)
 80037be:	6811      	ldr	r1, [r2, #0]
 80037c0:	6019      	str	r1, [r3, #0]
 80037c2:	8892      	ldrh	r2, [r2, #4]
 80037c4:	809a      	strh	r2, [r3, #4]
  ParsePoint = strstr(tempBuf, OK);
 80037c6:	1983      	adds	r3, r0, r6
 80037c8:	19da      	adds	r2, r3, r7
 80037ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037cc:	0011      	movs	r1, r2
 80037ce:	0018      	movs	r0, r3
 80037d0:	f00b f9e8 	bl	800eba4 <strstr>
 80037d4:	0003      	movs	r3, r0
 80037d6:	637b      	str	r3, [r7, #52]	@ 0x34
  ParsePoint2 = strstr(tempBuf, ERROR);
 80037d8:	19ab      	adds	r3, r5, r6
 80037da:	19da      	adds	r2, r3, r7
 80037dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f00b f9df 	bl	800eba4 <strstr>
 80037e6:	0003      	movs	r3, r0
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
  if(len > 1 ){
 80037ea:	211a      	movs	r1, #26
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d920      	bls.n	8003836 <ParseBuffer+0x176>
    TestChar = *ParsePoint;
 80037f4:	19a3      	adds	r3, r4, r6
 80037f6:	19db      	adds	r3, r3, r7
 80037f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 80037fe:	19a3      	adds	r3, r4, r6
 8003800:	19db      	adds	r3, r3, r7
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b4f      	cmp	r3, #79	@ 0x4f
 8003806:	d104      	bne.n	8003812 <ParseBuffer+0x152>
      Received = true;
 8003808:	232f      	movs	r3, #47	@ 0x2f
 800380a:	199b      	adds	r3, r3, r6
 800380c:	19db      	adds	r3, r3, r7
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003812:	2123      	movs	r1, #35	@ 0x23
 8003814:	2018      	movs	r0, #24
 8003816:	180b      	adds	r3, r1, r0
 8003818:	19db      	adds	r3, r3, r7
 800381a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800381c:	7812      	ldrb	r2, [r2, #0]
 800381e:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003820:	0002      	movs	r2, r0
 8003822:	188b      	adds	r3, r1, r2
 8003824:	19db      	adds	r3, r3, r7
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b45      	cmp	r3, #69	@ 0x45
 800382a:	d104      	bne.n	8003836 <ParseBuffer+0x176>
      Received = false;
 800382c:	232f      	movs	r3, #47	@ 0x2f
 800382e:	189b      	adds	r3, r3, r2
 8003830:	19db      	adds	r3, r3, r7
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
    }
  }
  if(Received){
 8003836:	232f      	movs	r3, #47	@ 0x2f
 8003838:	2218      	movs	r2, #24
 800383a:	189b      	adds	r3, r3, r2
 800383c:	19db      	adds	r3, r3, r7
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <ParseBuffer+0x194>
    EspState = command+1;
 8003844:	2319      	movs	r3, #25
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	3301      	adds	r3, #1
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <ParseBuffer+0x1b4>)
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e004      	b.n	800385e <ParseBuffer+0x19e>
  }
  else{
    EspState = command;
 8003854:	4b07      	ldr	r3, [pc, #28]	@ (8003874 <ParseBuffer+0x1b4>)
 8003856:	2219      	movs	r2, #25
 8003858:	18ba      	adds	r2, r7, r2
 800385a:	7812      	ldrb	r2, [r2, #0]
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	46c5      	mov	sp, r8
//          if (TempIndex >= ESP_MAX_BUFFER_SIZE) {
//              TempIndex = 0;
//          }
//       }
//    }
}
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b012      	add	sp, #72	@ 0x48
 8003866:	bc80      	pop	{r7}
 8003868:	46b8      	mov	r8, r7
 800386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800386c:	080112c0 	.word	0x080112c0
 8003870:	080112c4 	.word	0x080112c4
 8003874:	20000027 	.word	0x20000027

08003878 <PollAwake>:
void PollAwake(){
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800387e:	4b0e      	ldr	r3, [pc, #56]	@ (80038b8 <PollAwake+0x40>)
 8003880:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff ff05 	bl	8003694 <SetCommandBuffer>
  AT_Command_Number = AT_WAKEUP;
 800388a:	4b0c      	ldr	r3, [pc, #48]	@ (80038bc <PollAwake+0x44>)
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	0018      	movs	r0, r3
 8003894:	f7fc fc38 	bl	8000108 <strlen>
 8003898:	0003      	movs	r3, r0
 800389a:	b2da      	uxtb	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7ff fe65 	bl	8003570 <ESP_Send>
 80038a6:	1e03      	subs	r3, r0, #0
 80038a8:	d002      	beq.n	80038b0 <PollAwake+0x38>
    EspState = ESP_STATE_WAIT_FOR_READY;
 80038aa:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <PollAwake+0x48>)
 80038ac:	2210      	movs	r2, #16
 80038ae:	701a      	strb	r2, [r3, #0]
  }
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	080112cc 	.word	0x080112cc
 80038bc:	2000036c 	.word	0x2000036c
 80038c0:	20000027 	.word	0x20000027

080038c4 <RFPower>:
void RFPower(){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80038ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003904 <RFPower+0x40>)
 80038cc:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7ff fedf 	bl	8003694 <SetCommandBuffer>
  AT_Command_Number = AT_SET_RFPOWER;
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <RFPower+0x44>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	0018      	movs	r0, r3
 80038e0:	f7fc fc12 	bl	8000108 <strlen>
 80038e4:	0003      	movs	r3, r0
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0011      	movs	r1, r2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7ff fe3f 	bl	8003570 <ESP_Send>
 80038f2:	1e03      	subs	r3, r0, #0
 80038f4:	d002      	beq.n	80038fc <RFPower+0x38>
    EspState = ESP_STATE_WAIT_FOR_READY;
 80038f6:	4b05      	ldr	r3, [pc, #20]	@ (800390c <RFPower+0x48>)
 80038f8:	2210      	movs	r2, #16
 80038fa:	701a      	strb	r2, [r3, #0]
  }
}
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}
 8003904:	080112d4 	.word	0x080112d4
 8003908:	2000036c 	.word	0x2000036c
 800390c:	20000027 	.word	0x20000027

08003910 <CheckRFPower>:
void CheckRFPower(){
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003916:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <CheckRFPower+0x40>)
 8003918:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0018      	movs	r0, r3
 800391e:	f7ff feb9 	bl	8003694 <SetCommandBuffer>
  AT_Command_Number = AT_CHECK_RFPOWER;
 8003922:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <CheckRFPower+0x44>)
 8003924:	2202      	movs	r2, #2
 8003926:	701a      	strb	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	0018      	movs	r0, r3
 800392c:	f7fc fbec 	bl	8000108 <strlen>
 8003930:	0003      	movs	r3, r0
 8003932:	b2da      	uxtb	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	0011      	movs	r1, r2
 8003938:	0018      	movs	r0, r3
 800393a:	f7ff fe19 	bl	8003570 <ESP_Send>
 800393e:	1e03      	subs	r3, r0, #0
 8003940:	d002      	beq.n	8003948 <CheckRFPower+0x38>
    EspState = ESP_STATE_WAIT_FOR_READY;
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <CheckRFPower+0x48>)
 8003944:	2210      	movs	r2, #16
 8003946:	701a      	strb	r2, [r3, #0]
  }
}
 8003948:	46c0      	nop			@ (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	b002      	add	sp, #8
 800394e:	bd80      	pop	{r7, pc}
 8003950:	080112e4 	.word	0x080112e4
 8003954:	2000036c 	.word	0x2000036c
 8003958:	20000027 	.word	0x20000027

0800395c <ATRestore>:
void ATRestore(){
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003962:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <ATRestore+0x40>)
 8003964:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	0018      	movs	r0, r3
 800396a:	f7ff fe93 	bl	8003694 <SetCommandBuffer>
  AT_Command_Number = AT_RESTORE;
 800396e:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <ATRestore+0x44>)
 8003970:	2203      	movs	r2, #3
 8003972:	701a      	strb	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0018      	movs	r0, r3
 8003978:	f7fc fbc6 	bl	8000108 <strlen>
 800397c:	0003      	movs	r3, r0
 800397e:	b2da      	uxtb	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0011      	movs	r1, r2
 8003984:	0018      	movs	r0, r3
 8003986:	f7ff fdf3 	bl	8003570 <ESP_Send>
 800398a:	1e03      	subs	r3, r0, #0
 800398c:	d002      	beq.n	8003994 <ATRestore+0x38>
    EspState = ESP_STATE_WAIT_FOR_READY;
 800398e:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <ATRestore+0x48>)
 8003990:	2210      	movs	r2, #16
 8003992:	701a      	strb	r2, [r3, #0]
  }
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}
 800399c:	080112f4 	.word	0x080112f4
 80039a0:	2000036c 	.word	0x2000036c
 80039a4:	20000027 	.word	0x20000027

080039a8 <CWINIT>:
void CWINIT(){
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80039ae:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <CWINIT+0x40>)
 80039b0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff fe6d 	bl	8003694 <SetCommandBuffer>
  AT_Command_Number = AT_CWINIT;
 80039ba:	4b0c      	ldr	r3, [pc, #48]	@ (80039ec <CWINIT+0x44>)
 80039bc:	2204      	movs	r2, #4
 80039be:	701a      	strb	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fc fba0 	bl	8000108 <strlen>
 80039c8:	0003      	movs	r3, r0
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	0011      	movs	r1, r2
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7ff fdcd 	bl	8003570 <ESP_Send>
 80039d6:	1e03      	subs	r3, r0, #0
 80039d8:	d002      	beq.n	80039e0 <CWINIT+0x38>
    EspState = ESP_STATE_WAIT_FOR_READY;
 80039da:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <CWINIT+0x48>)
 80039dc:	2210      	movs	r2, #16
 80039de:	701a      	strb	r2, [r3, #0]
  }
}
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	08011304 	.word	0x08011304
 80039ec:	2000036c 	.word	0x2000036c
 80039f0:	20000027 	.word	0x20000027

080039f4 <CWMODE1>:
void CWMODE1(){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80039fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <CWMODE1+0x40>)
 80039fc:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff fe47 	bl	8003694 <SetCommandBuffer>
  AT_Command_Number = AT_CWMODE1;
 8003a06:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <CWMODE1+0x44>)
 8003a08:	2205      	movs	r2, #5
 8003a0a:	701a      	strb	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f7fc fb7a 	bl	8000108 <strlen>
 8003a14:	0003      	movs	r3, r0
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7ff fda7 	bl	8003570 <ESP_Send>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d002      	beq.n	8003a2c <CWMODE1+0x38>
    EspState = ESP_STATE_WAIT_FOR_READY;
 8003a26:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <CWMODE1+0x48>)
 8003a28:	2210      	movs	r2, #16
 8003a2a:	701a      	strb	r2, [r3, #0]
  }
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	08011314 	.word	0x08011314
 8003a38:	2000036c 	.word	0x2000036c
 8003a3c:	20000027 	.word	0x20000027

08003a40 <CWAUTOCONN>:
void CWAUTOCONN(){
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003a46:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <CWAUTOCONN+0x40>)
 8003a48:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7ff fe21 	bl	8003694 <SetCommandBuffer>
  AT_Command_Number = AT_CWAUTOCONN;
 8003a52:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <CWAUTOCONN+0x44>)
 8003a54:	2206      	movs	r2, #6
 8003a56:	701a      	strb	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7fc fb54 	bl	8000108 <strlen>
 8003a60:	0003      	movs	r3, r0
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0011      	movs	r1, r2
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff fd81 	bl	8003570 <ESP_Send>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d002      	beq.n	8003a78 <CWAUTOCONN+0x38>
    EspState = ESP_STATE_WAIT_FOR_READY;
 8003a72:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <CWAUTOCONN+0x48>)
 8003a74:	2210      	movs	r2, #16
 8003a76:	701a      	strb	r2, [r3, #0]
  }
}
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	08011324 	.word	0x08011324
 8003a84:	2000036c 	.word	0x2000036c
 8003a88:	20000027 	.word	0x20000027

08003a8c <CWJAP>:
void CWJAP(){
 8003a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8e:	46c6      	mov	lr, r8
 8003a90:	b500      	push	{lr}
 8003a92:	b0a2      	sub	sp, #136	@ 0x88
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	466b      	mov	r3, sp
 8003a98:	4698      	mov	r8, r3
  char atCommandBuff[100];
  sprintf(atCommandBuff, "AT+CWJAP=%s, %s\r\n", SSID, Password);
 8003a9a:	4b34      	ldr	r3, [pc, #208]	@ (8003b6c <CWJAP+0xe0>)
 8003a9c:	4a34      	ldr	r2, [pc, #208]	@ (8003b70 <CWJAP+0xe4>)
 8003a9e:	4935      	ldr	r1, [pc, #212]	@ (8003b74 <CWJAP+0xe8>)
 8003aa0:	2618      	movs	r6, #24
 8003aa2:	19b8      	adds	r0, r7, r6
 8003aa4:	f00a ffbe 	bl	800ea24 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003aa8:	19bb      	adds	r3, r7, r6
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7fc fb2c 	bl	8000108 <strlen>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	216f      	movs	r1, #111	@ 0x6f
 8003ab4:	0030      	movs	r0, r6
 8003ab6:	180b      	adds	r3, r1, r0
 8003ab8:	19db      	adds	r3, r3, r7
 8003aba:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003abc:	180b      	adds	r3, r1, r0
 8003abe:	19db      	adds	r3, r3, r7
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	1e5a      	subs	r2, r3, #1
 8003ac6:	2180      	movs	r1, #128	@ 0x80
 8003ac8:	1879      	adds	r1, r7, r1
 8003aca:	600a      	str	r2, [r1, #0]
 8003acc:	001a      	movs	r2, r3
 8003ace:	60ba      	str	r2, [r7, #8]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	60fa      	str	r2, [r7, #12]
 8003ad4:	68b8      	ldr	r0, [r7, #8]
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	0002      	movs	r2, r0
 8003ada:	0f52      	lsrs	r2, r2, #29
 8003adc:	000e      	movs	r6, r1
 8003ade:	00f6      	lsls	r6, r6, #3
 8003ae0:	617e      	str	r6, [r7, #20]
 8003ae2:	697e      	ldr	r6, [r7, #20]
 8003ae4:	4316      	orrs	r6, r2
 8003ae6:	617e      	str	r6, [r7, #20]
 8003ae8:	0002      	movs	r2, r0
 8003aea:	00d2      	lsls	r2, r2, #3
 8003aec:	613a      	str	r2, [r7, #16]
 8003aee:	001a      	movs	r2, r3
 8003af0:	603a      	str	r2, [r7, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	6838      	ldr	r0, [r7, #0]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	0002      	movs	r2, r0
 8003afc:	0f52      	lsrs	r2, r2, #29
 8003afe:	000e      	movs	r6, r1
 8003b00:	00f5      	lsls	r5, r6, #3
 8003b02:	4315      	orrs	r5, r2
 8003b04:	0002      	movs	r2, r0
 8003b06:	00d4      	lsls	r4, r2, #3
 8003b08:	3307      	adds	r3, #7
 8003b0a:	08db      	lsrs	r3, r3, #3
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	466a      	mov	r2, sp
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	469d      	mov	sp, r3
 8003b14:	466b      	mov	r3, sp
 8003b16:	3300      	adds	r3, #0
 8003b18:	67fb      	str	r3, [r7, #124]	@ 0x7c
  strncpy(atCommand, atCommandBuff, len);
 8003b1a:	216f      	movs	r1, #111	@ 0x6f
 8003b1c:	2018      	movs	r0, #24
 8003b1e:	180b      	adds	r3, r1, r0
 8003b20:	19db      	adds	r3, r3, r7
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	1839      	adds	r1, r7, r0
 8003b26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f00b f827 	bl	800eb7c <strncpy>
  SetCommandBuffer(atCommand);
 8003b2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fdaf 	bl	8003694 <SetCommandBuffer>
  AT_Command_Number = AT_CWAUTOCONN;
 8003b36:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <CWJAP+0xec>)
 8003b38:	2206      	movs	r2, #6
 8003b3a:	701a      	strb	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003b3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7fc fae2 	bl	8000108 <strlen>
 8003b44:	0003      	movs	r3, r0
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff fd0f 	bl	8003570 <ESP_Send>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d002      	beq.n	8003b5c <CWJAP+0xd0>
    EspState = ESP_STATE_WAIT_FOR_READY;
 8003b56:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <CWJAP+0xf0>)
 8003b58:	2210      	movs	r2, #16
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	46c5      	mov	sp, r8
  }
}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b022      	add	sp, #136	@ 0x88
 8003b64:	bc80      	pop	{r7}
 8003b66:	46b8      	mov	r8, r7
 8003b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	2000000c 	.word	0x2000000c
 8003b70:	20000000 	.word	0x20000000
 8003b74:	08011338 	.word	0x08011338
 8003b78:	2000036c 	.word	0x2000036c
 8003b7c:	20000027 	.word	0x20000027

08003b80 <DMA_ProcessBuffer>:
void DMA_ProcessBuffer(void) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8003b86:	4b3f      	ldr	r3, [pc, #252]	@ (8003c84 <DMA_ProcessBuffer+0x104>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	1dbb      	adds	r3, r7, #6
 8003b90:	21ff      	movs	r1, #255	@ 0xff
 8003b92:	1a8a      	subs	r2, r1, r2
 8003b94:	801a      	strh	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	2bff      	cmp	r3, #255	@ 0xff
 8003b9c:	d902      	bls.n	8003ba4 <DMA_ProcessBuffer+0x24>
      pos = ESP_MAX_BUFFER_SIZE;
 8003b9e:	1dbb      	adds	r3, r7, #6
 8003ba0:	22ff      	movs	r2, #255	@ 0xff
 8003ba2:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8003ba4:	4b38      	ldr	r3, [pc, #224]	@ (8003c88 <DMA_ProcessBuffer+0x108>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	001a      	movs	r2, r3
 8003bac:	1dbb      	adds	r3, r7, #6
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d119      	bne.n	8003be8 <DMA_ProcessBuffer+0x68>
      if(retry >4){
 8003bb4:	4b35      	ldr	r3, [pc, #212]	@ (8003c8c <DMA_ProcessBuffer+0x10c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d907      	bls.n	8003bcc <DMA_ProcessBuffer+0x4c>
        EspState = AT_Command_Number;
 8003bbc:	4b34      	ldr	r3, [pc, #208]	@ (8003c90 <DMA_ProcessBuffer+0x110>)
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	4b34      	ldr	r3, [pc, #208]	@ (8003c94 <DMA_ProcessBuffer+0x114>)
 8003bc2:	701a      	strb	r2, [r3, #0]
        retry = 0;
 8003bc4:	4b31      	ldr	r3, [pc, #196]	@ (8003c8c <DMA_ProcessBuffer+0x10c>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	e00d      	b.n	8003be8 <DMA_ProcessBuffer+0x68>
      }
      else{
        retry ++;
 8003bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8003c8c <DMA_ProcessBuffer+0x10c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c8c <DMA_ProcessBuffer+0x10c>)
 8003bd6:	701a      	strb	r2, [r3, #0]
        ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8003bd8:	f003 ff64 	bl	8007aa4 <HAL_GetTick>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	33f5      	adds	r3, #245	@ 0xf5
 8003be0:	33ff      	adds	r3, #255	@ 0xff
 8003be2:	001a      	movs	r2, r3
 8003be4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c98 <DMA_ProcessBuffer+0x118>)
 8003be6:	601a      	str	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8003be8:	4b27      	ldr	r3, [pc, #156]	@ (8003c88 <DMA_ProcessBuffer+0x108>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	001a      	movs	r2, r3
 8003bf0:	1dbb      	adds	r3, r7, #6
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d041      	beq.n	8003c7c <DMA_ProcessBuffer+0xfc>
      retry = 0;
 8003bf8:	4b24      	ldr	r3, [pc, #144]	@ (8003c8c <DMA_ProcessBuffer+0x10c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8003bfe:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <DMA_ProcessBuffer+0x108>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	001a      	movs	r2, r3
 8003c06:	1dbb      	adds	r3, r7, #6
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d913      	bls.n	8003c36 <DMA_ProcessBuffer+0xb6>
            // Direct parsing
            ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), AT_Command_Number);
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c88 <DMA_ProcessBuffer+0x108>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	001a      	movs	r2, r3
 8003c16:	4b21      	ldr	r3, [pc, #132]	@ (8003c9c <DMA_ProcessBuffer+0x11c>)
 8003c18:	18d0      	adds	r0, r2, r3
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <DMA_ProcessBuffer+0x108>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	001a      	movs	r2, r3
 8003c22:	1dbb      	adds	r3, r7, #6
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	b299      	uxth	r1, r3
 8003c2a:	4b19      	ldr	r3, [pc, #100]	@ (8003c90 <DMA_ProcessBuffer+0x110>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	001a      	movs	r2, r3
 8003c30:	f7ff fd46 	bl	80036c0 <ParseBuffer>
 8003c34:	e01d      	b.n	8003c72 <DMA_ProcessBuffer+0xf2>
        } else {
            // Buffer wrap-around
            ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, AT_Command_Number);
 8003c36:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <DMA_ProcessBuffer+0x108>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	4b17      	ldr	r3, [pc, #92]	@ (8003c9c <DMA_ProcessBuffer+0x11c>)
 8003c40:	18d0      	adds	r0, r2, r3
 8003c42:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <DMA_ProcessBuffer+0x108>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	001a      	movs	r2, r3
 8003c4a:	23ff      	movs	r3, #255	@ 0xff
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	b299      	uxth	r1, r3
 8003c50:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <DMA_ProcessBuffer+0x110>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	001a      	movs	r2, r3
 8003c56:	f7ff fd33 	bl	80036c0 <ParseBuffer>
            if (pos > 0) {
 8003c5a:	1dbb      	adds	r3, r7, #6
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <DMA_ProcessBuffer+0xf2>
                ParseBuffer(&RxBuffer[0], pos, AT_Command_Number);
 8003c62:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <DMA_ProcessBuffer+0x110>)
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	1dbb      	adds	r3, r7, #6
 8003c68:	8819      	ldrh	r1, [r3, #0]
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <DMA_ProcessBuffer+0x11c>)
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f7ff fd27 	bl	80036c0 <ParseBuffer>
            }
        }
        OldPos = pos;
 8003c72:	1dbb      	adds	r3, r7, #6
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	4b03      	ldr	r3, [pc, #12]	@ (8003c88 <DMA_ProcessBuffer+0x108>)
 8003c7a:	701a      	strb	r2, [r3, #0]
    }
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000d58 	.word	0x20000d58
 8003c88:	2000036d 	.word	0x2000036d
 8003c8c:	20000374 	.word	0x20000374
 8003c90:	2000036c 	.word	0x2000036c
 8003c94:	20000027 	.word	0x20000027
 8003c98:	20000370 	.word	0x20000370
 8003c9c:	2000026c 	.word	0x2000026c

08003ca0 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
  switch (EspState) {
 8003ca6:	4b76      	ldr	r3, [pc, #472]	@ (8003e80 <ESP_Upkeep+0x1e0>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b13      	cmp	r3, #19
 8003cac:	d900      	bls.n	8003cb0 <ESP_Upkeep+0x10>
 8003cae:	e0d8      	b.n	8003e62 <ESP_Upkeep+0x1c2>
 8003cb0:	009a      	lsls	r2, r3, #2
 8003cb2:	4b74      	ldr	r3, [pc, #464]	@ (8003e84 <ESP_Upkeep+0x1e4>)
 8003cb4:	18d3      	adds	r3, r2, r3
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8003cba:	4b71      	ldr	r3, [pc, #452]	@ (8003e80 <ESP_Upkeep+0x1e0>)
 8003cbc:	220e      	movs	r2, #14
 8003cbe:	701a      	strb	r2, [r3, #0]
      break;
 8003cc0:	e0da      	b.n	8003e78 <ESP_Upkeep+0x1d8>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      uint8_t offset = 0;
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
//      ATCommands[offset++] = (ATCommands) {};
      // TODO: Add turning on the ESP32 and wait for ready after, so we know for sure that the ESP is on.
      // Initialization state
//      StartUpTime = GetCurrentHalTicks() + ESP_START_UP_TIME;
//      StartUpDone = false;
      if(!EspTurnedOn) {
 8003cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e88 <ESP_Upkeep+0x1e8>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4053      	eors	r3, r2
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01e      	beq.n	8003d14 <ESP_Upkeep+0x74>

        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8003cd6:	2380      	movs	r3, #128	@ 0x80
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	486c      	ldr	r0, [pc, #432]	@ (8003e8c <ESP_Upkeep+0x1ec>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	0019      	movs	r1, r3
 8003ce0:	f004 fcf8 	bl	80086d4 <HAL_GPIO_WritePin>
//        // Turn ESP on.
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	4868      	ldr	r0, [pc, #416]	@ (8003e8c <ESP_Upkeep+0x1ec>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	0019      	movs	r1, r3
 8003cee:	f004 fcf1 	bl	80086d4 <HAL_GPIO_WritePin>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003cf2:	4b67      	ldr	r3, [pc, #412]	@ (8003e90 <ESP_Upkeep+0x1f0>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f004 fceb 	bl	80086d4 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8003cfe:	f003 fed1 	bl	8007aa4 <HAL_GetTick>
 8003d02:	0003      	movs	r3, r0
 8003d04:	22af      	movs	r2, #175	@ 0xaf
 8003d06:	0092      	lsls	r2, r2, #2
 8003d08:	189a      	adds	r2, r3, r2
 8003d0a:	4b62      	ldr	r3, [pc, #392]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003d0c:	601a      	str	r2, [r3, #0]

        EspTurnedOn = true;
 8003d0e:	4b5e      	ldr	r3, [pc, #376]	@ (8003e88 <ESP_Upkeep+0x1e8>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8003d14:	4b60      	ldr	r3, [pc, #384]	@ (8003e98 <ESP_Upkeep+0x1f8>)
 8003d16:	21ff      	movs	r1, #255	@ 0xff
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7ff fc55 	bl	80035c8 <ESP_Receive>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d100      	bne.n	8003d24 <ESP_Upkeep+0x84>
 8003d22:	e0a4      	b.n	8003e6e <ESP_Upkeep+0x1ce>
        EspState = ESP_WAKEUP;
 8003d24:	4b56      	ldr	r3, [pc, #344]	@ (8003e80 <ESP_Upkeep+0x1e0>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003d2a:	e0a0      	b.n	8003e6e <ESP_Upkeep+0x1ce>

    case ESP_WAKEUP:
      if(TimestampIsReached(ESPTimeStamp)){
 8003d2c:	4b59      	ldr	r3, [pc, #356]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f003 fa69 	bl	8007208 <TimestampIsReached>
 8003d36:	1e03      	subs	r3, r0, #0
 8003d38:	d100      	bne.n	8003d3c <ESP_Upkeep+0x9c>
 8003d3a:	e09a      	b.n	8003e72 <ESP_Upkeep+0x1d2>
        PollAwake();
 8003d3c:	f7ff fd9c 	bl	8003878 <PollAwake>
        ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8003d40:	f003 feb0 	bl	8007aa4 <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	330a      	adds	r3, #10
 8003d48:	001a      	movs	r2, r3
 8003d4a:	4b52      	ldr	r3, [pc, #328]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003d4c:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_WAIT_FOR_READY;
 8003d4e:	4b4c      	ldr	r3, [pc, #304]	@ (8003e80 <ESP_Upkeep+0x1e0>)
 8003d50:	2210      	movs	r2, #16
 8003d52:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003d54:	e08d      	b.n	8003e72 <ESP_Upkeep+0x1d2>

    case ESP_STATE_WAIT_FOR_READY:
      // Start parsing to read startup response.
      if(TimestampIsReached(ESPTimeStamp)){
 8003d56:	4b4f      	ldr	r3, [pc, #316]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f003 fa54 	bl	8007208 <TimestampIsReached>
 8003d60:	1e03      	subs	r3, r0, #0
 8003d62:	d100      	bne.n	8003d66 <ESP_Upkeep+0xc6>
 8003d64:	e087      	b.n	8003e76 <ESP_Upkeep+0x1d6>
        DMA_ProcessBuffer();
 8003d66:	f7ff ff0b 	bl	8003b80 <DMA_ProcessBuffer>
      }
      break;
 8003d6a:	e084      	b.n	8003e76 <ESP_Upkeep+0x1d6>

    case ESP_SET_RFPOWER:
      Debug("Setting RF Power");
 8003d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e9c <ESP_Upkeep+0x1fc>)
 8003d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea0 <ESP_Upkeep+0x200>)
 8003d70:	0019      	movs	r1, r3
 8003d72:	2003      	movs	r0, #3
 8003d74:	f003 fa9e 	bl	80072b4 <CreateLine>
      RFPower();
 8003d78:	f7ff fda4 	bl	80038c4 <RFPower>
      ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8003d7c:	f003 fe92 	bl	8007aa4 <HAL_GetTick>
 8003d80:	0003      	movs	r3, r0
 8003d82:	330a      	adds	r3, #10
 8003d84:	001a      	movs	r2, r3
 8003d86:	4b43      	ldr	r3, [pc, #268]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003d88:	601a      	str	r2, [r3, #0]
      break;
 8003d8a:	e075      	b.n	8003e78 <ESP_Upkeep+0x1d8>

    case ESP_CHECK_RFPOWER:
      Debug("Checking RF Power");
 8003d8c:	4a45      	ldr	r2, [pc, #276]	@ (8003ea4 <ESP_Upkeep+0x204>)
 8003d8e:	4b44      	ldr	r3, [pc, #272]	@ (8003ea0 <ESP_Upkeep+0x200>)
 8003d90:	0019      	movs	r1, r3
 8003d92:	2003      	movs	r0, #3
 8003d94:	f003 fa8e 	bl	80072b4 <CreateLine>
      CheckRFPower();
 8003d98:	f7ff fdba 	bl	8003910 <CheckRFPower>
      ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8003d9c:	f003 fe82 	bl	8007aa4 <HAL_GetTick>
 8003da0:	0003      	movs	r3, r0
 8003da2:	330a      	adds	r3, #10
 8003da4:	001a      	movs	r2, r3
 8003da6:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003da8:	601a      	str	r2, [r3, #0]
      break;
 8003daa:	e065      	b.n	8003e78 <ESP_Upkeep+0x1d8>

    case ESP_RESTORE:
      Debug("Restoring ESP");
 8003dac:	4a3e      	ldr	r2, [pc, #248]	@ (8003ea8 <ESP_Upkeep+0x208>)
 8003dae:	4b3c      	ldr	r3, [pc, #240]	@ (8003ea0 <ESP_Upkeep+0x200>)
 8003db0:	0019      	movs	r1, r3
 8003db2:	2003      	movs	r0, #3
 8003db4:	f003 fa7e 	bl	80072b4 <CreateLine>
      ATRestore();
 8003db8:	f7ff fdd0 	bl	800395c <ATRestore>
      ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8003dbc:	f003 fe72 	bl	8007aa4 <HAL_GetTick>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	3332      	adds	r3, #50	@ 0x32
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	4b33      	ldr	r3, [pc, #204]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003dc8:	601a      	str	r2, [r3, #0]
      break;
 8003dca:	e055      	b.n	8003e78 <ESP_Upkeep+0x1d8>

    case ESP_CWINIT:
      Debug("Initializing Wi-Fi");
 8003dcc:	4a37      	ldr	r2, [pc, #220]	@ (8003eac <ESP_Upkeep+0x20c>)
 8003dce:	4b34      	ldr	r3, [pc, #208]	@ (8003ea0 <ESP_Upkeep+0x200>)
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	2003      	movs	r0, #3
 8003dd4:	f003 fa6e 	bl	80072b4 <CreateLine>
      CWINIT();
 8003dd8:	f7ff fde6 	bl	80039a8 <CWINIT>
      ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8003ddc:	f003 fe62 	bl	8007aa4 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	33f5      	adds	r3, #245	@ 0xf5
 8003de4:	33ff      	adds	r3, #255	@ 0xff
 8003de6:	001a      	movs	r2, r3
 8003de8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003dea:	601a      	str	r2, [r3, #0]
      break;
 8003dec:	e044      	b.n	8003e78 <ESP_Upkeep+0x1d8>

    case ESP_CWMODE1:
      Debug("Setting to station mode");
 8003dee:	4a30      	ldr	r2, [pc, #192]	@ (8003eb0 <ESP_Upkeep+0x210>)
 8003df0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea0 <ESP_Upkeep+0x200>)
 8003df2:	0019      	movs	r1, r3
 8003df4:	2003      	movs	r0, #3
 8003df6:	f003 fa5d 	bl	80072b4 <CreateLine>
      CWMODE1();
 8003dfa:	f7ff fdfb 	bl	80039f4 <CWMODE1>
      ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8003dfe:	f003 fe51 	bl	8007aa4 <HAL_GetTick>
 8003e02:	0003      	movs	r3, r0
 8003e04:	330a      	adds	r3, #10
 8003e06:	001a      	movs	r2, r3
 8003e08:	4b22      	ldr	r3, [pc, #136]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003e0a:	601a      	str	r2, [r3, #0]
      break;
 8003e0c:	e034      	b.n	8003e78 <ESP_Upkeep+0x1d8>

    case ESP_CWAUTOCONN:
      Debug("Setting auto connect");
 8003e0e:	4a29      	ldr	r2, [pc, #164]	@ (8003eb4 <ESP_Upkeep+0x214>)
 8003e10:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <ESP_Upkeep+0x200>)
 8003e12:	0019      	movs	r1, r3
 8003e14:	2003      	movs	r0, #3
 8003e16:	f003 fa4d 	bl	80072b4 <CreateLine>
      CWAUTOCONN();
 8003e1a:	f7ff fe11 	bl	8003a40 <CWAUTOCONN>
      ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8003e1e:	f003 fe41 	bl	8007aa4 <HAL_GetTick>
 8003e22:	0003      	movs	r3, r0
 8003e24:	330a      	adds	r3, #10
 8003e26:	001a      	movs	r2, r3
 8003e28:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003e2a:	601a      	str	r2, [r3, #0]
      break;
 8003e2c:	e024      	b.n	8003e78 <ESP_Upkeep+0x1d8>

    case ESP_CWJAP:
      Debug("Connect to Wi-Fi");
 8003e2e:	4a22      	ldr	r2, [pc, #136]	@ (8003eb8 <ESP_Upkeep+0x218>)
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <ESP_Upkeep+0x200>)
 8003e32:	0019      	movs	r1, r3
 8003e34:	2003      	movs	r0, #3
 8003e36:	f003 fa3d 	bl	80072b4 <CreateLine>
      CWJAP();
 8003e3a:	f7ff fe27 	bl	8003a8c <CWJAP>
      ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8003e3e:	f003 fe31 	bl	8007aa4 <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	330a      	adds	r3, #10
 8003e46:	001a      	movs	r2, r3
 8003e48:	4b12      	ldr	r3, [pc, #72]	@ (8003e94 <ESP_Upkeep+0x1f4>)
 8003e4a:	601a      	str	r2, [r3, #0]
      break;
 8003e4c:	e014      	b.n	8003e78 <ESP_Upkeep+0x1d8>

      break;

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8003e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ebc <ESP_Upkeep+0x21c>)
 8003e50:	4b13      	ldr	r3, [pc, #76]	@ (8003ea0 <ESP_Upkeep+0x200>)
 8003e52:	0019      	movs	r1, r3
 8003e54:	2003      	movs	r0, #3
 8003e56:	f003 fa2d 	bl	80072b4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8003e5a:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <ESP_Upkeep+0x1e0>)
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	701a      	strb	r2, [r3, #0]
      break;
 8003e60:	e00a      	b.n	8003e78 <ESP_Upkeep+0x1d8>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <ESP_Upkeep+0x1e0>)
 8003e64:	2213      	movs	r2, #19
 8003e66:	701a      	strb	r2, [r3, #0]
      break;
 8003e68:	e006      	b.n	8003e78 <ESP_Upkeep+0x1d8>
      break;
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	e004      	b.n	8003e78 <ESP_Upkeep+0x1d8>
      break;
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	e002      	b.n	8003e78 <ESP_Upkeep+0x1d8>
      break;
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	e000      	b.n	8003e78 <ESP_Upkeep+0x1d8>
      break;
 8003e76:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003e78:	46c0      	nop			@ (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b002      	add	sp, #8
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000027 	.word	0x20000027
 8003e84:	08011a50 	.word	0x08011a50
 8003e88:	2000036b 	.word	0x2000036b
 8003e8c:	50000800 	.word	0x50000800
 8003e90:	50001c00 	.word	0x50001c00
 8003e94:	20000370 	.word	0x20000370
 8003e98:	2000026c 	.word	0x2000026c
 8003e9c:	0801134c 	.word	0x0801134c
 8003ea0:	08011290 	.word	0x08011290
 8003ea4:	08011360 	.word	0x08011360
 8003ea8:	08011374 	.word	0x08011374
 8003eac:	08011384 	.word	0x08011384
 8003eb0:	08011398 	.word	0x08011398
 8003eb4:	080113b0 	.word	0x080113b0
 8003eb8:	080113c8 	.word	0x080113c8
 8003ebc:	080113dc 	.word	0x080113dc

08003ec0 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8003ec8:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <I2CSensors_Init+0x30>)
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8003ece:	4a09      	ldr	r2, [pc, #36]	@ (8003ef4 <I2CSensors_Init+0x34>)
 8003ed0:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <I2CSensors_Init+0x38>)
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 fa2d 	bl	8004334 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8003eda:	4a06      	ldr	r2, [pc, #24]	@ (8003ef4 <I2CSensors_Init+0x34>)
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <I2CSensors_Init+0x38>)
 8003ede:	0011      	movs	r1, r2
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 f8b0 	bl	8004046 <Gas_Init>
}
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b002      	add	sp, #8
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			@ (mov r8, r8)
 8003ef0:	20000478 	.word	0x20000478
 8003ef4:	08003f51 	.word	0x08003f51
 8003ef8:	08003efd 	.word	0x08003efd

08003efc <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8003efc:	b5b0      	push	{r4, r5, r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6039      	str	r1, [r7, #0]
 8003f04:	0011      	movs	r1, r2
 8003f06:	1dfb      	adds	r3, r7, #7
 8003f08:	1c02      	adds	r2, r0, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	1dbb      	adds	r3, r7, #6
 8003f0e:	1c0a      	adds	r2, r1, #0
 8003f10:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8003f12:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <ReadI2C+0x50>)
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	1dfb      	adds	r3, r7, #7
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	18db      	adds	r3, r3, r3
 8003f1e:	b299      	uxth	r1, r3
 8003f20:	1dbb      	adds	r3, r7, #6
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	250f      	movs	r5, #15
 8003f28:	197c      	adds	r4, r7, r5
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	f004 fd8c 	bl	8008a48 <HAL_I2C_Master_Receive_DMA>
 8003f30:	0003      	movs	r3, r0
 8003f32:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8003f34:	197b      	adds	r3, r7, r5
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <ReadI2C+0x44>
        return false;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <ReadI2C+0x46>
    }
    return true;
 8003f40:	2301      	movs	r3, #1
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b004      	add	sp, #16
 8003f48:	bdb0      	pop	{r4, r5, r7, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	20000478 	.word	0x20000478

08003f50 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8003f50:	b5b0      	push	{r4, r5, r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6039      	str	r1, [r7, #0]
 8003f58:	0011      	movs	r1, r2
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	1c02      	adds	r2, r0, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	1dbb      	adds	r3, r7, #6
 8003f62:	1c0a      	adds	r2, r1, #0
 8003f64:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8003f66:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <WriteI2C+0x50>)
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	1dfb      	adds	r3, r7, #7
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	18db      	adds	r3, r3, r3
 8003f72:	b299      	uxth	r1, r3
 8003f74:	1dbb      	adds	r3, r7, #6
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	250f      	movs	r5, #15
 8003f7c:	197c      	adds	r4, r7, r5
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	f004 fc5c 	bl	800883c <HAL_I2C_Master_Transmit_DMA>
 8003f84:	0003      	movs	r3, r0
 8003f86:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8003f88:	197b      	adds	r3, r7, r5
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <WriteI2C+0x44>
        return false;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <WriteI2C+0x46>
    }
    return true;
 8003f94:	2301      	movs	r3, #1
}
 8003f96:	0018      	movs	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b004      	add	sp, #16
 8003f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	20000478 	.word	0x20000478

08003fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003faa:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <MX_DMA_Init+0x48>)
 8003fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fae:	4b0f      	ldr	r3, [pc, #60]	@ (8003fec <MX_DMA_Init+0x48>)
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <MX_DMA_Init+0x48>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	200a      	movs	r0, #10
 8003fc8:	f003 fe46 	bl	8007c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003fcc:	200a      	movs	r0, #10
 8003fce:	f003 fe58 	bl	8007c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2103      	movs	r1, #3
 8003fd6:	200b      	movs	r0, #11
 8003fd8:	f003 fe3e 	bl	8007c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003fdc:	200b      	movs	r0, #11
 8003fde:	f003 fe50 	bl	8007c82 <HAL_NVIC_EnableIRQ>

}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b002      	add	sp, #8
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	40021000 	.word	0x40021000

08003ff0 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <Gadget_Init+0x3c>)
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	f000 ff08 	bl	8004e14 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s);
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	0011      	movs	r1, r2
 800400a:	0018      	movs	r0, r3
 800400c:	f000 fce4 	bl	80049d8 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff fa9a 	bl	800354c <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8004018:	4a05      	ldr	r2, [pc, #20]	@ (8004030 <Gadget_Init+0x40>)
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <Gadget_Init+0x44>)
 800401c:	0019      	movs	r1, r3
 800401e:	2003      	movs	r0, #3
 8004020:	f003 f948 	bl	80072b4 <CreateLine>
}
 8004024:	46c0      	nop			@ (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b004      	add	sp, #16
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000028 	.word	0x20000028
 8004030:	080113f0 	.word	0x080113f0
 8004034:	08011404 	.word	0x08011404

08004038 <UpkeepGadget>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void UpkeepGadget() {
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 800403c:	f000 fe82 	bl	8004d44 <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8004040:	46c0      	nop			@ (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0011      	movs	r1, r2
 8004056:	0018      	movs	r0, r3
 8004058:	f002 f804 	bl	8006064 <SGP_Init>
}
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}

08004064 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8004068:	f002 f816 	bl	8006098 <SGP_StartMeasurement>
}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	0018      	movs	r0, r3
 800407e:	f002 f87b 	bl	8006178 <SGP_GetMeasurementValues>
 8004082:	0003      	movs	r3, r0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}

0800408c <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8004090:	f002 fa94 	bl	80065bc <SGP_DeviceConnected>
 8004094:	0003      	movs	r3, r0
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b08b      	sub	sp, #44	@ 0x2c
 80040a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a2:	2414      	movs	r4, #20
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	0018      	movs	r0, r3
 80040a8:	2314      	movs	r3, #20
 80040aa:	001a      	movs	r2, r3
 80040ac:	2100      	movs	r1, #0
 80040ae:	f00a fd5d 	bl	800eb6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b2:	4b70      	ldr	r3, [pc, #448]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040b8:	2104      	movs	r1, #4
 80040ba:	430a      	orrs	r2, r1
 80040bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040be:	4b6d      	ldr	r3, [pc, #436]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c2:	2204      	movs	r2, #4
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ce:	4b69      	ldr	r3, [pc, #420]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040d0:	2180      	movs	r1, #128	@ 0x80
 80040d2:	430a      	orrs	r2, r1
 80040d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040d6:	4b67      	ldr	r3, [pc, #412]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	2280      	movs	r2, #128	@ 0x80
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e2:	4b64      	ldr	r3, [pc, #400]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e6:	4b63      	ldr	r3, [pc, #396]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040e8:	2101      	movs	r1, #1
 80040ea:	430a      	orrs	r2, r1
 80040ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80040ee:	4b61      	ldr	r3, [pc, #388]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	2201      	movs	r2, #1
 80040f4:	4013      	ands	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fa:	4b5e      	ldr	r3, [pc, #376]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 80040fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 8004100:	2102      	movs	r1, #2
 8004102:	430a      	orrs	r2, r1
 8004104:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004106:	4b5b      	ldr	r3, [pc, #364]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	2202      	movs	r2, #2
 800410c:	4013      	ands	r3, r2
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004112:	4b58      	ldr	r3, [pc, #352]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 8004114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004116:	4b57      	ldr	r3, [pc, #348]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 8004118:	2108      	movs	r1, #8
 800411a:	430a      	orrs	r2, r1
 800411c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800411e:	4b55      	ldr	r3, [pc, #340]	@ (8004274 <MX_GPIO_Init+0x1d8>)
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	2208      	movs	r2, #8
 8004124:	4013      	ands	r3, r2
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800412a:	4b53      	ldr	r3, [pc, #332]	@ (8004278 <MX_GPIO_Init+0x1dc>)
 800412c:	2201      	movs	r2, #1
 800412e:	2101      	movs	r1, #1
 8004130:	0018      	movs	r0, r3
 8004132:	f004 facf 	bl	80086d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8004136:	4b50      	ldr	r3, [pc, #320]	@ (8004278 <MX_GPIO_Init+0x1dc>)
 8004138:	2200      	movs	r2, #0
 800413a:	2102      	movs	r1, #2
 800413c:	0018      	movs	r0, r3
 800413e:	f004 fac9 	bl	80086d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8004142:	494e      	ldr	r1, [pc, #312]	@ (800427c <MX_GPIO_Init+0x1e0>)
 8004144:	4b4e      	ldr	r3, [pc, #312]	@ (8004280 <MX_GPIO_Init+0x1e4>)
 8004146:	2201      	movs	r2, #1
 8004148:	0018      	movs	r0, r3
 800414a:	f004 fac3 	bl	80086d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800414e:	2380      	movs	r3, #128	@ 0x80
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	484c      	ldr	r0, [pc, #304]	@ (8004284 <MX_GPIO_Init+0x1e8>)
 8004154:	2201      	movs	r2, #1
 8004156:	0019      	movs	r1, r3
 8004158:	f004 fabc 	bl	80086d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC9
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800415c:	193b      	adds	r3, r7, r4
 800415e:	4a4a      	ldr	r2, [pc, #296]	@ (8004288 <MX_GPIO_Init+0x1ec>)
 8004160:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004162:	193b      	adds	r3, r7, r4
 8004164:	2203      	movs	r2, #3
 8004166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	193b      	adds	r3, r7, r4
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800416e:	193b      	adds	r3, r7, r4
 8004170:	4a44      	ldr	r2, [pc, #272]	@ (8004284 <MX_GPIO_Init+0x1e8>)
 8004172:	0019      	movs	r1, r3
 8004174:	0010      	movs	r0, r2
 8004176:	f004 f84d 	bl	8008214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800417a:	193b      	adds	r3, r7, r4
 800417c:	2203      	movs	r2, #3
 800417e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004180:	193b      	adds	r3, r7, r4
 8004182:	2201      	movs	r2, #1
 8004184:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	193b      	adds	r3, r7, r4
 8004188:	2200      	movs	r2, #0
 800418a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418c:	193b      	adds	r3, r7, r4
 800418e:	2200      	movs	r2, #0
 8004190:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004192:	193b      	adds	r3, r7, r4
 8004194:	4a38      	ldr	r2, [pc, #224]	@ (8004278 <MX_GPIO_Init+0x1dc>)
 8004196:	0019      	movs	r1, r3
 8004198:	0010      	movs	r0, r2
 800419a:	f004 f83b 	bl	8008214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 800419e:	193b      	adds	r3, r7, r4
 80041a0:	4a3a      	ldr	r2, [pc, #232]	@ (800428c <MX_GPIO_Init+0x1f0>)
 80041a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041a4:	193b      	adds	r3, r7, r4
 80041a6:	2203      	movs	r2, #3
 80041a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041aa:	193b      	adds	r3, r7, r4
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b0:	193a      	adds	r2, r7, r4
 80041b2:	23a0      	movs	r3, #160	@ 0xa0
 80041b4:	05db      	lsls	r3, r3, #23
 80041b6:	0011      	movs	r1, r2
 80041b8:	0018      	movs	r0, r3
 80041ba:	f004 f82b 	bl	8008214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80041be:	193b      	adds	r3, r7, r4
 80041c0:	22c0      	movs	r2, #192	@ 0xc0
 80041c2:	0052      	lsls	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041c6:	193b      	adds	r3, r7, r4
 80041c8:	2200      	movs	r2, #0
 80041ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	193b      	adds	r3, r7, r4
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d2:	193a      	adds	r2, r7, r4
 80041d4:	23a0      	movs	r3, #160	@ 0xa0
 80041d6:	05db      	lsls	r3, r3, #23
 80041d8:	0011      	movs	r1, r2
 80041da:	0018      	movs	r0, r3
 80041dc:	f004 f81a 	bl	8008214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80041e0:	193b      	adds	r3, r7, r4
 80041e2:	4a26      	ldr	r2, [pc, #152]	@ (800427c <MX_GPIO_Init+0x1e0>)
 80041e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e6:	193b      	adds	r3, r7, r4
 80041e8:	2201      	movs	r2, #1
 80041ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f2:	193b      	adds	r3, r7, r4
 80041f4:	2200      	movs	r2, #0
 80041f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f8:	193b      	adds	r3, r7, r4
 80041fa:	4a21      	ldr	r2, [pc, #132]	@ (8004280 <MX_GPIO_Init+0x1e4>)
 80041fc:	0019      	movs	r1, r3
 80041fe:	0010      	movs	r0, r2
 8004200:	f004 f808 	bl	8008214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8004204:	193b      	adds	r3, r7, r4
 8004206:	4a22      	ldr	r2, [pc, #136]	@ (8004290 <MX_GPIO_Init+0x1f4>)
 8004208:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800420a:	193b      	adds	r3, r7, r4
 800420c:	2203      	movs	r2, #3
 800420e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	193b      	adds	r3, r7, r4
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004216:	193b      	adds	r3, r7, r4
 8004218:	4a19      	ldr	r2, [pc, #100]	@ (8004280 <MX_GPIO_Init+0x1e4>)
 800421a:	0019      	movs	r1, r3
 800421c:	0010      	movs	r0, r2
 800421e:	f003 fff9 	bl	8008214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8004222:	0021      	movs	r1, r4
 8004224:	187b      	adds	r3, r7, r1
 8004226:	2280      	movs	r2, #128	@ 0x80
 8004228:	0112      	lsls	r2, r2, #4
 800422a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800422c:	000c      	movs	r4, r1
 800422e:	193b      	adds	r3, r7, r4
 8004230:	2201      	movs	r2, #1
 8004232:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	193b      	adds	r3, r7, r4
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423a:	193b      	adds	r3, r7, r4
 800423c:	2200      	movs	r2, #0
 800423e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8004240:	193b      	adds	r3, r7, r4
 8004242:	4a10      	ldr	r2, [pc, #64]	@ (8004284 <MX_GPIO_Init+0x1e8>)
 8004244:	0019      	movs	r1, r3
 8004246:	0010      	movs	r0, r2
 8004248:	f003 ffe4 	bl	8008214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800424c:	0021      	movs	r1, r4
 800424e:	187b      	adds	r3, r7, r1
 8004250:	2204      	movs	r2, #4
 8004252:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004254:	187b      	adds	r3, r7, r1
 8004256:	2200      	movs	r2, #0
 8004258:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	187b      	adds	r3, r7, r1
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8004260:	187b      	adds	r3, r7, r1
 8004262:	4a0c      	ldr	r2, [pc, #48]	@ (8004294 <MX_GPIO_Init+0x1f8>)
 8004264:	0019      	movs	r1, r3
 8004266:	0010      	movs	r0, r2
 8004268:	f003 ffd4 	bl	8008214 <HAL_GPIO_Init>

}
 800426c:	46c0      	nop			@ (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b00b      	add	sp, #44	@ 0x2c
 8004272:	bd90      	pop	{r4, r7, pc}
 8004274:	40021000 	.word	0x40021000
 8004278:	50001c00 	.word	0x50001c00
 800427c:	00000301 	.word	0x00000301
 8004280:	50000400 	.word	0x50000400
 8004284:	50000800 	.word	0x50000800
 8004288:	0000323f 	.word	0x0000323f
 800428c:	00008070 	.word	0x00008070
 8004290:	0000403e 	.word	0x0000403e
 8004294:	50000c00 	.word	0x50000c00

08004298 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2100      	movs	r1, #0
 80042a6:	0018      	movs	r0, r3
 80042a8:	f007 fe4e 	bl	800bf48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2108      	movs	r1, #8
 80042b0:	0018      	movs	r0, r3
 80042b2:	f007 fe49 	bl	800bf48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	210c      	movs	r1, #12
 80042ba:	0018      	movs	r0, r3
 80042bc:	f007 fe44 	bl	800bf48 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80042c0:	2380      	movs	r3, #128	@ 0x80
 80042c2:	05db      	lsls	r3, r3, #23
 80042c4:	22fa      	movs	r2, #250	@ 0xfa
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	05db      	lsls	r3, r3, #23
 80042ce:	22fa      	movs	r2, #250	@ 0xfa
 80042d0:	0112      	lsls	r2, r2, #4
 80042d2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80042d4:	2380      	movs	r3, #128	@ 0x80
 80042d6:	05db      	lsls	r3, r3, #23
 80042d8:	22fa      	movs	r2, #250	@ 0xfa
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	05db      	lsls	r3, r3, #23
 80042e2:	22fa      	movs	r2, #250	@ 0xfa
 80042e4:	0112      	lsls	r2, r2, #4
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2100      	movs	r1, #0
 80042ec:	0018      	movs	r0, r3
 80042ee:	f007 fe2b 	bl	800bf48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2104      	movs	r1, #4
 80042f6:	0018      	movs	r0, r3
 80042f8:	f007 fe26 	bl	800bf48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2108      	movs	r1, #8
 8004300:	0018      	movs	r0, r3
 8004302:	f007 fe21 	bl	800bf48 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8004306:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <GPIO_InitPWMLEDs+0x98>)
 8004308:	22fa      	movs	r2, #250	@ 0xfa
 800430a:	0112      	lsls	r2, r2, #4
 800430c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800430e:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <GPIO_InitPWMLEDs+0x98>)
 8004310:	22fa      	movs	r2, #250	@ 0xfa
 8004312:	0112      	lsls	r2, r2, #4
 8004314:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8004316:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <GPIO_InitPWMLEDs+0x98>)
 8004318:	22fa      	movs	r2, #250	@ 0xfa
 800431a:	0112      	lsls	r2, r2, #4
 800431c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800431e:	4b04      	ldr	r3, [pc, #16]	@ (8004330 <GPIO_InitPWMLEDs+0x98>)
 8004320:	22fa      	movs	r2, #250	@ 0xfa
 8004322:	0112      	lsls	r2, r2, #4
 8004324:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	40000400 	.word	0x40000400

08004334 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	0011      	movs	r1, r2
 8004344:	0018      	movs	r0, r3
 8004346:	f003 f90d 	bl	8007564 <HIDS_Init>
}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}

08004352 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8004352:	b580      	push	{r7, lr}
 8004354:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8004356:	f003 f927 	bl	80075a8 <HIDS_StartMeasurement>
}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	0011      	movs	r1, r2
 8004370:	0018      	movs	r0, r3
 8004372:	f003 f9f5 	bl	8007760 <HIDS_GetMeasurementValues>
 8004376:	0003      	movs	r3, r0
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	b002      	add	sp, #8
 800437e:	bd80      	pop	{r7, pc}

08004380 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8004384:	f003 f990 	bl	80076a8 <HIDS_DeviceConnected>
 8004388:	0003      	movs	r3, r0
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004394:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <MX_I2C1_Init+0x74>)
 8004396:	4a1c      	ldr	r2, [pc, #112]	@ (8004408 <MX_I2C1_Init+0x78>)
 8004398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800439a:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <MX_I2C1_Init+0x74>)
 800439c:	4a1b      	ldr	r2, [pc, #108]	@ (800440c <MX_I2C1_Init+0x7c>)
 800439e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80043a0:	4b18      	ldr	r3, [pc, #96]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043a6:	4b17      	ldr	r3, [pc, #92]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043ac:	4b15      	ldr	r3, [pc, #84]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80043b2:	4b14      	ldr	r3, [pc, #80]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043b8:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043be:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043cc:	0018      	movs	r0, r3
 80043ce:	f004 f99f 	bl	8008710 <HAL_I2C_Init>
 80043d2:	1e03      	subs	r3, r0, #0
 80043d4:	d001      	beq.n	80043da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80043d6:	f000 faaf 	bl	8004938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80043da:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043dc:	2100      	movs	r1, #0
 80043de:	0018      	movs	r0, r3
 80043e0:	f006 f90e 	bl	800a600 <HAL_I2CEx_ConfigAnalogFilter>
 80043e4:	1e03      	subs	r3, r0, #0
 80043e6:	d001      	beq.n	80043ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80043e8:	f000 faa6 	bl	8004938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80043ec:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <MX_I2C1_Init+0x74>)
 80043ee:	2100      	movs	r1, #0
 80043f0:	0018      	movs	r0, r3
 80043f2:	f006 f951 	bl	800a698 <HAL_I2CEx_ConfigDigitalFilter>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d001      	beq.n	80043fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80043fa:	f000 fa9d 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	2000047c 	.word	0x2000047c
 8004408:	40005400 	.word	0x40005400
 800440c:	00503d58 	.word	0x00503d58

08004410 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004414:	4b1b      	ldr	r3, [pc, #108]	@ (8004484 <MX_I2C2_Init+0x74>)
 8004416:	4a1c      	ldr	r2, [pc, #112]	@ (8004488 <MX_I2C2_Init+0x78>)
 8004418:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800441a:	4b1a      	ldr	r3, [pc, #104]	@ (8004484 <MX_I2C2_Init+0x74>)
 800441c:	4a1b      	ldr	r2, [pc, #108]	@ (800448c <MX_I2C2_Init+0x7c>)
 800441e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004420:	4b18      	ldr	r3, [pc, #96]	@ (8004484 <MX_I2C2_Init+0x74>)
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004426:	4b17      	ldr	r3, [pc, #92]	@ (8004484 <MX_I2C2_Init+0x74>)
 8004428:	2201      	movs	r2, #1
 800442a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800442c:	4b15      	ldr	r3, [pc, #84]	@ (8004484 <MX_I2C2_Init+0x74>)
 800442e:	2200      	movs	r2, #0
 8004430:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004432:	4b14      	ldr	r3, [pc, #80]	@ (8004484 <MX_I2C2_Init+0x74>)
 8004434:	2200      	movs	r2, #0
 8004436:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004438:	4b12      	ldr	r3, [pc, #72]	@ (8004484 <MX_I2C2_Init+0x74>)
 800443a:	2200      	movs	r2, #0
 800443c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800443e:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <MX_I2C2_Init+0x74>)
 8004440:	2200      	movs	r2, #0
 8004442:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004444:	4b0f      	ldr	r3, [pc, #60]	@ (8004484 <MX_I2C2_Init+0x74>)
 8004446:	2200      	movs	r2, #0
 8004448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800444a:	4b0e      	ldr	r3, [pc, #56]	@ (8004484 <MX_I2C2_Init+0x74>)
 800444c:	0018      	movs	r0, r3
 800444e:	f004 f95f 	bl	8008710 <HAL_I2C_Init>
 8004452:	1e03      	subs	r3, r0, #0
 8004454:	d001      	beq.n	800445a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004456:	f000 fa6f 	bl	8004938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800445a:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <MX_I2C2_Init+0x74>)
 800445c:	2100      	movs	r1, #0
 800445e:	0018      	movs	r0, r3
 8004460:	f006 f8ce 	bl	800a600 <HAL_I2CEx_ConfigAnalogFilter>
 8004464:	1e03      	subs	r3, r0, #0
 8004466:	d001      	beq.n	800446c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004468:	f000 fa66 	bl	8004938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800446c:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <MX_I2C2_Init+0x74>)
 800446e:	2100      	movs	r1, #0
 8004470:	0018      	movs	r0, r3
 8004472:	f006 f911 	bl	800a698 <HAL_I2CEx_ConfigDigitalFilter>
 8004476:	1e03      	subs	r3, r0, #0
 8004478:	d001      	beq.n	800447e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800447a:	f000 fa5d 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	200004d0 	.word	0x200004d0
 8004488:	40005800 	.word	0x40005800
 800448c:	00503d58 	.word	0x00503d58

08004490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b08b      	sub	sp, #44	@ 0x2c
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	2414      	movs	r4, #20
 800449a:	193b      	adds	r3, r7, r4
 800449c:	0018      	movs	r0, r3
 800449e:	2314      	movs	r3, #20
 80044a0:	001a      	movs	r2, r3
 80044a2:	2100      	movs	r1, #0
 80044a4:	f00a fb62 	bl	800eb6c <memset>
  if(i2cHandle->Instance==I2C1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004624 <HAL_I2C_MspInit+0x194>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d000      	beq.n	80044b4 <HAL_I2C_MspInit+0x24>
 80044b2:	e083      	b.n	80045bc <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 80044b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 80044ba:	2102      	movs	r1, #2
 80044bc:	430a      	orrs	r2, r1
 80044be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044c0:	4b59      	ldr	r3, [pc, #356]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044cc:	0021      	movs	r1, r4
 80044ce:	187b      	adds	r3, r7, r1
 80044d0:	22c0      	movs	r2, #192	@ 0xc0
 80044d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044d4:	187b      	adds	r3, r7, r1
 80044d6:	2212      	movs	r2, #18
 80044d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044da:	187b      	adds	r3, r7, r1
 80044dc:	2200      	movs	r2, #0
 80044de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e0:	187b      	adds	r3, r7, r1
 80044e2:	2203      	movs	r2, #3
 80044e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80044e6:	187b      	adds	r3, r7, r1
 80044e8:	2201      	movs	r2, #1
 80044ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ec:	187b      	adds	r3, r7, r1
 80044ee:	4a4f      	ldr	r2, [pc, #316]	@ (800462c <HAL_I2C_MspInit+0x19c>)
 80044f0:	0019      	movs	r1, r3
 80044f2:	0010      	movs	r0, r2
 80044f4:	f003 fe8e 	bl	8008214 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 80044fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 80044fe:	2180      	movs	r1, #128	@ 0x80
 8004500:	0389      	lsls	r1, r1, #14
 8004502:	430a      	orrs	r2, r1
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8004506:	4b4a      	ldr	r3, [pc, #296]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 8004508:	4a4a      	ldr	r2, [pc, #296]	@ (8004634 <HAL_I2C_MspInit+0x1a4>)
 800450a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800450c:	4b48      	ldr	r3, [pc, #288]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 800450e:	2206      	movs	r2, #6
 8004510:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004512:	4b47      	ldr	r3, [pc, #284]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004518:	4b45      	ldr	r3, [pc, #276]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 800451a:	2200      	movs	r2, #0
 800451c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800451e:	4b44      	ldr	r3, [pc, #272]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 8004520:	2280      	movs	r2, #128	@ 0x80
 8004522:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004524:	4b42      	ldr	r3, [pc, #264]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 8004526:	2200      	movs	r2, #0
 8004528:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800452a:	4b41      	ldr	r3, [pc, #260]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 800452c:	2200      	movs	r2, #0
 800452e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004530:	4b3f      	ldr	r3, [pc, #252]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 8004532:	2200      	movs	r2, #0
 8004534:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004536:	4b3e      	ldr	r3, [pc, #248]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 8004538:	2200      	movs	r2, #0
 800453a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800453c:	4b3c      	ldr	r3, [pc, #240]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 800453e:	0018      	movs	r0, r3
 8004540:	f003 fbbc 	bl	8007cbc <HAL_DMA_Init>
 8004544:	1e03      	subs	r3, r0, #0
 8004546:	d001      	beq.n	800454c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8004548:	f000 f9f6 	bl	8004938 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a38      	ldr	r2, [pc, #224]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 8004550:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004552:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <HAL_I2C_MspInit+0x1a0>)
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8004558:	4b37      	ldr	r3, [pc, #220]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 800455a:	4a38      	ldr	r2, [pc, #224]	@ (800463c <HAL_I2C_MspInit+0x1ac>)
 800455c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800455e:	4b36      	ldr	r3, [pc, #216]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 8004560:	2206      	movs	r2, #6
 8004562:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004564:	4b34      	ldr	r3, [pc, #208]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 8004566:	2210      	movs	r2, #16
 8004568:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800456a:	4b33      	ldr	r3, [pc, #204]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 800456c:	2200      	movs	r2, #0
 800456e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004570:	4b31      	ldr	r3, [pc, #196]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 8004572:	2280      	movs	r2, #128	@ 0x80
 8004574:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004576:	4b30      	ldr	r3, [pc, #192]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 8004578:	2200      	movs	r2, #0
 800457a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800457c:	4b2e      	ldr	r3, [pc, #184]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 800457e:	2200      	movs	r2, #0
 8004580:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004582:	4b2d      	ldr	r3, [pc, #180]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 8004584:	2200      	movs	r2, #0
 8004586:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004588:	4b2b      	ldr	r3, [pc, #172]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 800458a:	2200      	movs	r2, #0
 800458c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800458e:	4b2a      	ldr	r3, [pc, #168]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 8004590:	0018      	movs	r0, r3
 8004592:	f003 fb93 	bl	8007cbc <HAL_DMA_Init>
 8004596:	1e03      	subs	r3, r0, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800459a:	f000 f9cd 	bl	8004938 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a25      	ldr	r2, [pc, #148]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 80045a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80045a4:	4b24      	ldr	r3, [pc, #144]	@ (8004638 <HAL_I2C_MspInit+0x1a8>)
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2100      	movs	r1, #0
 80045ae:	2017      	movs	r0, #23
 80045b0:	f003 fb52 	bl	8007c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80045b4:	2017      	movs	r0, #23
 80045b6:	f003 fb64 	bl	8007c82 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80045ba:	e02e      	b.n	800461a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004640 <HAL_I2C_MspInit+0x1b0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d129      	bne.n	800461a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c6:	4b18      	ldr	r3, [pc, #96]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 80045c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ca:	4b17      	ldr	r3, [pc, #92]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 80045cc:	2102      	movs	r1, #2
 80045ce:	430a      	orrs	r2, r1
 80045d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80045d2:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	2202      	movs	r2, #2
 80045d8:	4013      	ands	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80045de:	2114      	movs	r1, #20
 80045e0:	187b      	adds	r3, r7, r1
 80045e2:	22c0      	movs	r2, #192	@ 0xc0
 80045e4:	0112      	lsls	r2, r2, #4
 80045e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	2212      	movs	r2, #18
 80045ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	2203      	movs	r2, #3
 80045f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	2206      	movs	r2, #6
 80045fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004600:	187b      	adds	r3, r7, r1
 8004602:	4a0a      	ldr	r2, [pc, #40]	@ (800462c <HAL_I2C_MspInit+0x19c>)
 8004604:	0019      	movs	r1, r3
 8004606:	0010      	movs	r0, r2
 8004608:	f003 fe04 	bl	8008214 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800460c:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 800460e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_I2C_MspInit+0x198>)
 8004612:	2180      	movs	r1, #128	@ 0x80
 8004614:	03c9      	lsls	r1, r1, #15
 8004616:	430a      	orrs	r2, r1
 8004618:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b00b      	add	sp, #44	@ 0x2c
 8004620:	bd90      	pop	{r4, r7, pc}
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	40005400 	.word	0x40005400
 8004628:	40021000 	.word	0x40021000
 800462c:	50000400 	.word	0x50000400
 8004630:	20000524 	.word	0x20000524
 8004634:	40020030 	.word	0x40020030
 8004638:	2000056c 	.word	0x2000056c
 800463c:	4002001c 	.word	0x4002001c
 8004640:	40005800 	.word	0x40005800

08004644 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8004648:	4b10      	ldr	r3, [pc, #64]	@ (800468c <MX_I2S2_Init+0x48>)
 800464a:	4a11      	ldr	r2, [pc, #68]	@ (8004690 <MX_I2S2_Init+0x4c>)
 800464c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800464e:	4b0f      	ldr	r3, [pc, #60]	@ (800468c <MX_I2S2_Init+0x48>)
 8004650:	22c0      	movs	r2, #192	@ 0xc0
 8004652:	0092      	lsls	r2, r2, #2
 8004654:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8004656:	4b0d      	ldr	r3, [pc, #52]	@ (800468c <MX_I2S2_Init+0x48>)
 8004658:	2210      	movs	r2, #16
 800465a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 800465c:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <MX_I2S2_Init+0x48>)
 800465e:	2205      	movs	r2, #5
 8004660:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8004662:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <MX_I2S2_Init+0x48>)
 8004664:	2200      	movs	r2, #0
 8004666:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8004668:	4b08      	ldr	r3, [pc, #32]	@ (800468c <MX_I2S2_Init+0x48>)
 800466a:	22fa      	movs	r2, #250	@ 0xfa
 800466c:	0152      	lsls	r2, r2, #5
 800466e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8004670:	4b06      	ldr	r3, [pc, #24]	@ (800468c <MX_I2S2_Init+0x48>)
 8004672:	2208      	movs	r2, #8
 8004674:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8004676:	4b05      	ldr	r3, [pc, #20]	@ (800468c <MX_I2S2_Init+0x48>)
 8004678:	0018      	movs	r0, r3
 800467a:	f006 f859 	bl	800a730 <HAL_I2S_Init>
 800467e:	1e03      	subs	r3, r0, #0
 8004680:	d001      	beq.n	8004686 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8004682:	f000 f959 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200005b4 	.word	0x200005b4
 8004690:	40003800 	.word	0x40003800

08004694 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b089      	sub	sp, #36	@ 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469c:	240c      	movs	r4, #12
 800469e:	193b      	adds	r3, r7, r4
 80046a0:	0018      	movs	r0, r3
 80046a2:	2314      	movs	r3, #20
 80046a4:	001a      	movs	r2, r3
 80046a6:	2100      	movs	r1, #0
 80046a8:	f00a fa60 	bl	800eb6c <memset>
  if(i2sHandle->Instance==SPI2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004768 <HAL_I2S_MspInit+0xd4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d154      	bne.n	8004760 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046b6:	4b2d      	ldr	r3, [pc, #180]	@ (800476c <HAL_I2S_MspInit+0xd8>)
 80046b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ba:	4b2c      	ldr	r3, [pc, #176]	@ (800476c <HAL_I2S_MspInit+0xd8>)
 80046bc:	2180      	movs	r1, #128	@ 0x80
 80046be:	01c9      	lsls	r1, r1, #7
 80046c0:	430a      	orrs	r2, r1
 80046c2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c4:	4b29      	ldr	r3, [pc, #164]	@ (800476c <HAL_I2S_MspInit+0xd8>)
 80046c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c8:	4b28      	ldr	r3, [pc, #160]	@ (800476c <HAL_I2S_MspInit+0xd8>)
 80046ca:	2102      	movs	r1, #2
 80046cc:	430a      	orrs	r2, r1
 80046ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046d0:	4b26      	ldr	r3, [pc, #152]	@ (800476c <HAL_I2S_MspInit+0xd8>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d4:	2202      	movs	r2, #2
 80046d6:	4013      	ands	r3, r2
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80046dc:	193b      	adds	r3, r7, r4
 80046de:	22b0      	movs	r2, #176	@ 0xb0
 80046e0:	0212      	lsls	r2, r2, #8
 80046e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e4:	0021      	movs	r1, r4
 80046e6:	187b      	adds	r3, r7, r1
 80046e8:	2202      	movs	r2, #2
 80046ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	187b      	adds	r3, r7, r1
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f2:	187b      	adds	r3, r7, r1
 80046f4:	2200      	movs	r2, #0
 80046f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	2200      	movs	r2, #0
 80046fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046fe:	187b      	adds	r3, r7, r1
 8004700:	4a1b      	ldr	r2, [pc, #108]	@ (8004770 <HAL_I2S_MspInit+0xdc>)
 8004702:	0019      	movs	r1, r3
 8004704:	0010      	movs	r0, r2
 8004706:	f003 fd85 	bl	8008214 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800470a:	4b1a      	ldr	r3, [pc, #104]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 800470c:	4a1a      	ldr	r2, [pc, #104]	@ (8004778 <HAL_I2S_MspInit+0xe4>)
 800470e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8004710:	4b18      	ldr	r3, [pc, #96]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 8004712:	2202      	movs	r2, #2
 8004714:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004716:	4b17      	ldr	r3, [pc, #92]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 8004718:	2200      	movs	r2, #0
 800471a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800471c:	4b15      	ldr	r3, [pc, #84]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 800471e:	2200      	movs	r2, #0
 8004720:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004722:	4b14      	ldr	r3, [pc, #80]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 8004724:	2280      	movs	r2, #128	@ 0x80
 8004726:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004728:	4b12      	ldr	r3, [pc, #72]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 800472a:	2280      	movs	r2, #128	@ 0x80
 800472c:	0052      	lsls	r2, r2, #1
 800472e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004730:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 8004732:	2280      	movs	r2, #128	@ 0x80
 8004734:	00d2      	lsls	r2, r2, #3
 8004736:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8004738:	4b0e      	ldr	r3, [pc, #56]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 800473a:	2220      	movs	r2, #32
 800473c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800473e:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 8004740:	2200      	movs	r2, #0
 8004742:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004744:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 8004746:	0018      	movs	r0, r3
 8004748:	f003 fab8 	bl	8007cbc <HAL_DMA_Init>
 800474c:	1e03      	subs	r3, r0, #0
 800474e:	d001      	beq.n	8004754 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8004750:	f000 f8f2 	bl	8004938 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a07      	ldr	r2, [pc, #28]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <HAL_I2S_MspInit+0xe0>)
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004760:	46c0      	nop			@ (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b009      	add	sp, #36	@ 0x24
 8004766:	bd90      	pop	{r4, r7, pc}
 8004768:	40003800 	.word	0x40003800
 800476c:	40021000 	.word	0x40021000
 8004770:	50000400 	.word	0x50000400
 8004774:	200005f0 	.word	0x200005f0
 8004778:	40020044 	.word	0x40020044

0800477c <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0c      	ldr	r2, [pc, #48]	@ (80047bc <HAL_I2S_MspDeInit+0x40>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d111      	bne.n	80047b2 <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800478e:	4b0c      	ldr	r3, [pc, #48]	@ (80047c0 <HAL_I2S_MspDeInit+0x44>)
 8004790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004792:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <HAL_I2S_MspDeInit+0x44>)
 8004794:	490b      	ldr	r1, [pc, #44]	@ (80047c4 <HAL_I2S_MspDeInit+0x48>)
 8004796:	400a      	ands	r2, r1
 8004798:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 800479a:	23b0      	movs	r3, #176	@ 0xb0
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	4a0a      	ldr	r2, [pc, #40]	@ (80047c8 <HAL_I2S_MspDeInit+0x4c>)
 80047a0:	0019      	movs	r1, r3
 80047a2:	0010      	movs	r0, r2
 80047a4:	f003 feb4 	bl	8008510 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	0018      	movs	r0, r3
 80047ae:	f003 fafd 	bl	8007dac <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b002      	add	sp, #8
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	40003800 	.word	0x40003800
 80047c0:	40021000 	.word	0x40021000
 80047c4:	ffffbfff 	.word	0xffffbfff
 80047c8:	50000400 	.word	0x50000400

080047cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047d2:	f003 f901 	bl	80079d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047d6:	f000 f83d 	bl	8004854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047da:	f7ff fc5f 	bl	800409c <MX_GPIO_Init>
  MX_DMA_Init();
 80047de:	f7ff fbe1 	bl	8003fa4 <MX_DMA_Init>
  MX_I2C1_Init();
 80047e2:	f7ff fdd5 	bl	8004390 <MX_I2C1_Init>
  MX_I2S2_Init();
 80047e6:	f7ff ff2d 	bl	8004644 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80047ea:	f002 fb6d 	bl	8006ec8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80047ee:	f7ff fe0f 	bl	8004410 <MX_I2C2_Init>
  MX_USB_PCD_Init();
 80047f2:	f002 fccb 	bl	800718c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80047f6:	f002 f9e9 	bl	8006bcc <MX_TIM2_Init>
  MX_TIM3_Init();
 80047fa:	f002 fa5b 	bl	8006cb4 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80047fe:	f002 fb97 	bl	8006f30 <MX_USART4_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8004802:	4a0f      	ldr	r2, [pc, #60]	@ (8004840 <main+0x74>)
 8004804:	4b0f      	ldr	r3, [pc, #60]	@ (8004844 <main+0x78>)
 8004806:	0011      	movs	r1, r2
 8004808:	0018      	movs	r0, r3
 800480a:	f7ff fd45 	bl	8004298 <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 800480e:	f003 f949 	bl	8007aa4 <HAL_GetTick>
 8004812:	0003      	movs	r3, r0
 8004814:	22fa      	movs	r2, #250	@ 0xfa
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	4694      	mov	ip, r2
 800481a:	4463      	add	r3, ip
 800481c:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 800481e:	2003      	movs	r0, #3
 8004820:	f002 fdc4 	bl	80073ac <SetVerboseLevel>
  BinaryReleaseInfo();
 8004824:	f002 fdda 	bl	80073dc <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4);
 8004828:	4a07      	ldr	r2, [pc, #28]	@ (8004848 <main+0x7c>)
 800482a:	4908      	ldr	r1, [pc, #32]	@ (800484c <main+0x80>)
 800482c:	4b08      	ldr	r3, [pc, #32]	@ (8004850 <main+0x84>)
 800482e:	0018      	movs	r0, r3
 8004830:	f7ff fbde 	bl	8003ff0 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    UpkeepGadget();
 8004834:	f7ff fc00 	bl	8004038 <UpkeepGadget>
    ESP_Upkeep();
 8004838:	f7ff fa32 	bl	8003ca0 <ESP_Upkeep>
    UpkeepGadget();
 800483c:	46c0      	nop			@ (mov r8, r8)
 800483e:	e7f9      	b.n	8004834 <main+0x68>
 8004840:	20000ba8 	.word	0x20000ba8
 8004844:	20000b68 	.word	0x20000b68
 8004848:	20000ca0 	.word	0x20000ca0
 800484c:	200005b4 	.word	0x200005b4
 8004850:	2000047c 	.word	0x2000047c

08004854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b09d      	sub	sp, #116	@ 0x74
 8004858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800485a:	2438      	movs	r4, #56	@ 0x38
 800485c:	193b      	adds	r3, r7, r4
 800485e:	0018      	movs	r0, r3
 8004860:	2338      	movs	r3, #56	@ 0x38
 8004862:	001a      	movs	r2, r3
 8004864:	2100      	movs	r1, #0
 8004866:	f00a f981 	bl	800eb6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800486a:	2324      	movs	r3, #36	@ 0x24
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	0018      	movs	r0, r3
 8004870:	2314      	movs	r3, #20
 8004872:	001a      	movs	r2, r3
 8004874:	2100      	movs	r1, #0
 8004876:	f00a f979 	bl	800eb6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800487a:	003b      	movs	r3, r7
 800487c:	0018      	movs	r0, r3
 800487e:	2324      	movs	r3, #36	@ 0x24
 8004880:	001a      	movs	r2, r3
 8004882:	2100      	movs	r1, #0
 8004884:	f00a f972 	bl	800eb6c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004888:	4b29      	ldr	r3, [pc, #164]	@ (8004930 <SystemClock_Config+0xdc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a29      	ldr	r2, [pc, #164]	@ (8004934 <SystemClock_Config+0xe0>)
 800488e:	401a      	ands	r2, r3
 8004890:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <SystemClock_Config+0xdc>)
 8004892:	2180      	movs	r1, #128	@ 0x80
 8004894:	0109      	lsls	r1, r1, #4
 8004896:	430a      	orrs	r2, r1
 8004898:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800489a:	0021      	movs	r1, r4
 800489c:	187b      	adds	r3, r7, r1
 800489e:	2222      	movs	r2, #34	@ 0x22
 80048a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048a2:	187b      	adds	r3, r7, r1
 80048a4:	2201      	movs	r2, #1
 80048a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	2210      	movs	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80048ae:	187b      	adds	r3, r7, r1
 80048b0:	2201      	movs	r2, #1
 80048b2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80048b4:	187b      	adds	r3, r7, r1
 80048b6:	2200      	movs	r2, #0
 80048b8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048ba:	187b      	adds	r3, r7, r1
 80048bc:	0018      	movs	r0, r3
 80048be:	f006 fbaf 	bl	800b020 <HAL_RCC_OscConfig>
 80048c2:	1e03      	subs	r3, r0, #0
 80048c4:	d001      	beq.n	80048ca <SystemClock_Config+0x76>
  {
    Error_Handler();
 80048c6:	f000 f837 	bl	8004938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048ca:	2124      	movs	r1, #36	@ 0x24
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	220f      	movs	r2, #15
 80048d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80048d2:	187b      	adds	r3, r7, r1
 80048d4:	2201      	movs	r2, #1
 80048d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048d8:	187b      	adds	r3, r7, r1
 80048da:	2200      	movs	r2, #0
 80048dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80048de:	187b      	adds	r3, r7, r1
 80048e0:	2200      	movs	r2, #0
 80048e2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	2200      	movs	r2, #0
 80048e8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80048ea:	187b      	adds	r3, r7, r1
 80048ec:	2100      	movs	r1, #0
 80048ee:	0018      	movs	r0, r3
 80048f0:	f006 ff6a 	bl	800b7c8 <HAL_RCC_ClockConfig>
 80048f4:	1e03      	subs	r3, r0, #0
 80048f6:	d001      	beq.n	80048fc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80048f8:	f000 f81e 	bl	8004938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80048fc:	003b      	movs	r3, r7
 80048fe:	2249      	movs	r2, #73	@ 0x49
 8004900:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004902:	003b      	movs	r3, r7
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004908:	003b      	movs	r3, r7
 800490a:	2200      	movs	r2, #0
 800490c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800490e:	003b      	movs	r3, r7
 8004910:	2280      	movs	r2, #128	@ 0x80
 8004912:	04d2      	lsls	r2, r2, #19
 8004914:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004916:	003b      	movs	r3, r7
 8004918:	0018      	movs	r0, r3
 800491a:	f007 f979 	bl	800bc10 <HAL_RCCEx_PeriphCLKConfig>
 800491e:	1e03      	subs	r3, r0, #0
 8004920:	d001      	beq.n	8004926 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8004922:	f000 f809 	bl	8004938 <Error_Handler>
  }
}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b01d      	add	sp, #116	@ 0x74
 800492c:	bd90      	pop	{r4, r7, pc}
 800492e:	46c0      	nop			@ (mov r8, r8)
 8004930:	40007000 	.word	0x40007000
 8004934:	ffffe7ff 	.word	0xffffe7ff

08004938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800493c:	b672      	cpsid	i
}
 800493e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	e7fd      	b.n	8004940 <Error_Handler+0x8>

08004944 <HT_StartMeasurementWrapper>:
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8004948:	f7ff fd03 	bl	8004352 <HT_StartMeasurement>
}
 800494c:	46c0      	nop			@ (mov r8, r8)
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8004958:	4a04      	ldr	r2, [pc, #16]	@ (800496c <HT_IsMeasurementDoneWrapper+0x18>)
 800495a:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HT_IsMeasurementDoneWrapper+0x1c>)
 800495c:	0011      	movs	r1, r2
 800495e:	0018      	movs	r0, r3
 8004960:	f7ff fcfe 	bl	8004360 <HT_GetMeasurementValues>
 8004964:	0003      	movs	r3, r0
}
 8004966:	0018      	movs	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	2000063c 	.word	0x2000063c
 8004970:	20000638 	.word	0x20000638

08004974 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8004978:	f7ff fb74 	bl	8004064 <Gas_StartMeasurement>
}
 800497c:	46c0      	nop			@ (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8004988:	4b03      	ldr	r3, [pc, #12]	@ (8004998 <VOC_IsMeasurementDoneWrapper+0x14>)
 800498a:	0018      	movs	r0, r3
 800498c:	f7ff fb71 	bl	8004072 <Gas_GetMeasurementValues>
 8004990:	0003      	movs	r3, r0
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000640 	.word	0x20000640

0800499c <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
}
 80049a0:	46c0      	nop			@ (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 80049a6:	b580      	push	{r7, lr}
 80049a8:	af00      	add	r7, sp, #0
  return true;
 80049aa:	2301      	movs	r3, #1
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 80049b2:	b580      	push	{r7, lr}
 80049b4:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 80049b6:	23fa      	movs	r3, #250	@ 0xfa
 80049b8:	015b      	lsls	r3, r3, #5
 80049ba:	2180      	movs	r1, #128	@ 0x80
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 fb51 	bl	8005064 <MIC_Start>
}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 80049cc:	f000 fbd6 	bl	800517c <MIC_MeasurementDone>
 80049d0:	0003      	movs	r3, r0
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 80049d8:	b5b0      	push	{r4, r5, r7, lr}
 80049da:	b094      	sub	sp, #80	@ 0x50
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  MeasState = MEAS_STATE_INIT;
 80049e2:	4b84      	ldr	r3, [pc, #528]	@ (8004bf4 <Meas_Init+0x21c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80049e8:	4b83      	ldr	r3, [pc, #524]	@ (8004bf8 <Meas_Init+0x220>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <Meas_Init+0x20>
 80049f0:	4b81      	ldr	r3, [pc, #516]	@ (8004bf8 <Meas_Init+0x220>)
 80049f2:	785b      	ldrb	r3, [r3, #1]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d079      	beq.n	8004aec <Meas_Init+0x114>
    I2CSensors_Init(sensorI2C);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7ff fa60 	bl	8003ec0 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8004a00:	f7ff fcbe 	bl	8004380 <HT_DeviceConnected>
 8004a04:	0003      	movs	r3, r0
 8004a06:	001a      	movs	r2, r3
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4053      	eors	r3, r2
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d017      	beq.n	8004a42 <Meas_Init+0x6a>
       Error("Humidity / Temperature sensor NOT connected!");
 8004a12:	4a7a      	ldr	r2, [pc, #488]	@ (8004bfc <Meas_Init+0x224>)
 8004a14:	4b7a      	ldr	r3, [pc, #488]	@ (8004c00 <Meas_Init+0x228>)
 8004a16:	0019      	movs	r1, r3
 8004a18:	2001      	movs	r0, #1
 8004a1a:	f002 fc4b 	bl	80072b4 <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 8004a1e:	4b76      	ldr	r3, [pc, #472]	@ (8004bf8 <Meas_Init+0x220>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
       // HT Device NOT connected, turning LED on RED.
       // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
       TIM2 -> CCR1 = 0;
 8004a24:	2380      	movs	r3, #128	@ 0x80
 8004a26:	05db      	lsls	r3, r3, #23
 8004a28:	2200      	movs	r2, #0
 8004a2a:	635a      	str	r2, [r3, #52]	@ 0x34
       TIM2 -> CCR3 = 4000;
 8004a2c:	2380      	movs	r3, #128	@ 0x80
 8004a2e:	05db      	lsls	r3, r3, #23
 8004a30:	22fa      	movs	r2, #250	@ 0xfa
 8004a32:	0112      	lsls	r2, r2, #4
 8004a34:	63da      	str	r2, [r3, #60]	@ 0x3c
       TIM2 -> CCR4 = 4000;
 8004a36:	2380      	movs	r3, #128	@ 0x80
 8004a38:	05db      	lsls	r3, r3, #23
 8004a3a:	22fa      	movs	r2, #250	@ 0xfa
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a40:	e013      	b.n	8004a6a <Meas_Init+0x92>
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      Debug("Humidity / Temperature sensor initialised.");
 8004a42:	4a70      	ldr	r2, [pc, #448]	@ (8004c04 <Meas_Init+0x22c>)
 8004a44:	4b70      	ldr	r3, [pc, #448]	@ (8004c08 <Meas_Init+0x230>)
 8004a46:	0019      	movs	r1, r3
 8004a48:	2003      	movs	r0, #3
 8004a4a:	f002 fc33 	bl	80072b4 <CreateLine>
      TIM2 -> CCR1 = 4000;
 8004a4e:	2380      	movs	r3, #128	@ 0x80
 8004a50:	05db      	lsls	r3, r3, #23
 8004a52:	22fa      	movs	r2, #250	@ 0xfa
 8004a54:	0112      	lsls	r2, r2, #4
 8004a56:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 8004a58:	2380      	movs	r3, #128	@ 0x80
 8004a5a:	05db      	lsls	r3, r3, #23
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8004a60:	2380      	movs	r3, #128	@ 0x80
 8004a62:	05db      	lsls	r3, r3, #23
 8004a64:	22fa      	movs	r2, #250	@ 0xfa
 8004a66:	0112      	lsls	r2, r2, #4
 8004a68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    if(!Gas_DeviceConnected()) {
 8004a6a:	f7ff fb0f 	bl	800408c <Gas_DeviceConnected>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	001a      	movs	r2, r3
 8004a72:	2301      	movs	r3, #1
 8004a74:	4053      	eors	r3, r2
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01d      	beq.n	8004ab8 <Meas_Init+0xe0>
       Error("SGP device not connected!");
 8004a7c:	4a63      	ldr	r2, [pc, #396]	@ (8004c0c <Meas_Init+0x234>)
 8004a7e:	4b60      	ldr	r3, [pc, #384]	@ (8004c00 <Meas_Init+0x228>)
 8004a80:	0019      	movs	r1, r3
 8004a82:	2001      	movs	r0, #1
 8004a84:	f002 fc16 	bl	80072b4 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8004a88:	4b61      	ldr	r3, [pc, #388]	@ (8004c10 <Meas_Init+0x238>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f003 fe20 	bl	80086d4 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	485d      	ldr	r0, [pc, #372]	@ (8004c10 <Meas_Init+0x238>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	f003 fe19 	bl	80086d4 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	485a      	ldr	r0, [pc, #360]	@ (8004c10 <Meas_Init+0x238>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	0019      	movs	r1, r3
 8004aac:	f003 fe12 	bl	80086d4 <HAL_GPIO_WritePin>
       MeasEnabled.VOC_measurementEnabled = false;
 8004ab0:	4b51      	ldr	r3, [pc, #324]	@ (8004bf8 <Meas_Init+0x220>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	705a      	strb	r2, [r3, #1]
 8004ab6:	e019      	b.n	8004aec <Meas_Init+0x114>
    }else{
      Debug("SGP sensor initialised.");
 8004ab8:	4a56      	ldr	r2, [pc, #344]	@ (8004c14 <Meas_Init+0x23c>)
 8004aba:	4b53      	ldr	r3, [pc, #332]	@ (8004c08 <Meas_Init+0x230>)
 8004abc:	0019      	movs	r1, r3
 8004abe:	2003      	movs	r0, #3
 8004ac0:	f002 fbf8 	bl	80072b4 <CreateLine>
      // HT Device is connected, turning led on GREEN.
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8004ac4:	4b52      	ldr	r3, [pc, #328]	@ (8004c10 <Meas_Init+0x238>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	2101      	movs	r1, #1
 8004aca:	0018      	movs	r0, r3
 8004acc:	f003 fe02 	bl	80086d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8004ad0:	2380      	movs	r3, #128	@ 0x80
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	484e      	ldr	r0, [pc, #312]	@ (8004c10 <Meas_Init+0x238>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	0019      	movs	r1, r3
 8004ada:	f003 fdfb 	bl	80086d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8004ade:	2380      	movs	r3, #128	@ 0x80
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	484b      	ldr	r0, [pc, #300]	@ (8004c10 <Meas_Init+0x238>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	f003 fdf4 	bl	80086d4 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8004aec:	4b42      	ldr	r3, [pc, #264]	@ (8004bf8 <Meas_Init+0x220>)
 8004aee:	78db      	ldrb	r3, [r3, #3]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <Meas_Init+0x124>
    MIC_Init(micI2s);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 f9da 	bl	8004eb0 <MIC_Init>
  }
  uint8_t offset = 0;
 8004afc:	254f      	movs	r5, #79	@ 0x4f
 8004afe:	197b      	adds	r3, r7, r5
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8004b04:	197b      	adds	r3, r7, r5
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	197a      	adds	r2, r7, r5
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	7011      	strb	r1, [r2, #0]
 8004b0e:	4a3a      	ldr	r2, [pc, #232]	@ (8004bf8 <Meas_Init+0x220>)
 8004b10:	7814      	ldrb	r4, [r2, #0]
 8004b12:	4a41      	ldr	r2, [pc, #260]	@ (8004c18 <Meas_Init+0x240>)
 8004b14:	0119      	lsls	r1, r3, #4
 8004b16:	4841      	ldr	r0, [pc, #260]	@ (8004c1c <Meas_Init+0x244>)
 8004b18:	5088      	str	r0, [r1, r2]
 8004b1a:	493f      	ldr	r1, [pc, #252]	@ (8004c18 <Meas_Init+0x240>)
 8004b1c:	011a      	lsls	r2, r3, #4
 8004b1e:	188a      	adds	r2, r1, r2
 8004b20:	3204      	adds	r2, #4
 8004b22:	493f      	ldr	r1, [pc, #252]	@ (8004c20 <Meas_Init+0x248>)
 8004b24:	6011      	str	r1, [r2, #0]
 8004b26:	493c      	ldr	r1, [pc, #240]	@ (8004c18 <Meas_Init+0x240>)
 8004b28:	011a      	lsls	r2, r3, #4
 8004b2a:	188a      	adds	r2, r1, r2
 8004b2c:	3208      	adds	r2, #8
 8004b2e:	493d      	ldr	r1, [pc, #244]	@ (8004c24 <Meas_Init+0x24c>)
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	4a39      	ldr	r2, [pc, #228]	@ (8004c18 <Meas_Init+0x240>)
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	18d3      	adds	r3, r2, r3
 8004b38:	330c      	adds	r3, #12
 8004b3a:	1c22      	adds	r2, r4, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8004b3e:	197b      	adds	r3, r7, r5
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	197a      	adds	r2, r7, r5
 8004b44:	1c59      	adds	r1, r3, #1
 8004b46:	7011      	strb	r1, [r2, #0]
 8004b48:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <Meas_Init+0x220>)
 8004b4a:	7854      	ldrb	r4, [r2, #1]
 8004b4c:	4a32      	ldr	r2, [pc, #200]	@ (8004c18 <Meas_Init+0x240>)
 8004b4e:	0119      	lsls	r1, r3, #4
 8004b50:	4835      	ldr	r0, [pc, #212]	@ (8004c28 <Meas_Init+0x250>)
 8004b52:	5088      	str	r0, [r1, r2]
 8004b54:	4930      	ldr	r1, [pc, #192]	@ (8004c18 <Meas_Init+0x240>)
 8004b56:	011a      	lsls	r2, r3, #4
 8004b58:	188a      	adds	r2, r1, r2
 8004b5a:	3204      	adds	r2, #4
 8004b5c:	4933      	ldr	r1, [pc, #204]	@ (8004c2c <Meas_Init+0x254>)
 8004b5e:	6011      	str	r1, [r2, #0]
 8004b60:	492d      	ldr	r1, [pc, #180]	@ (8004c18 <Meas_Init+0x240>)
 8004b62:	011a      	lsls	r2, r3, #4
 8004b64:	188a      	adds	r2, r1, r2
 8004b66:	3208      	adds	r2, #8
 8004b68:	4931      	ldr	r1, [pc, #196]	@ (8004c30 <Meas_Init+0x258>)
 8004b6a:	6011      	str	r1, [r2, #0]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c18 <Meas_Init+0x240>)
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	18d3      	adds	r3, r2, r3
 8004b72:	330c      	adds	r3, #12
 8004b74:	1c22      	adds	r2, r4, #0
 8004b76:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8004b78:	197b      	adds	r3, r7, r5
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	197a      	adds	r2, r7, r5
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	7011      	strb	r1, [r2, #0]
 8004b82:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <Meas_Init+0x220>)
 8004b84:	7894      	ldrb	r4, [r2, #2]
 8004b86:	4a24      	ldr	r2, [pc, #144]	@ (8004c18 <Meas_Init+0x240>)
 8004b88:	0119      	lsls	r1, r3, #4
 8004b8a:	482a      	ldr	r0, [pc, #168]	@ (8004c34 <Meas_Init+0x25c>)
 8004b8c:	5088      	str	r0, [r1, r2]
 8004b8e:	4922      	ldr	r1, [pc, #136]	@ (8004c18 <Meas_Init+0x240>)
 8004b90:	011a      	lsls	r2, r3, #4
 8004b92:	188a      	adds	r2, r1, r2
 8004b94:	3204      	adds	r2, #4
 8004b96:	4928      	ldr	r1, [pc, #160]	@ (8004c38 <Meas_Init+0x260>)
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	491f      	ldr	r1, [pc, #124]	@ (8004c18 <Meas_Init+0x240>)
 8004b9c:	011a      	lsls	r2, r3, #4
 8004b9e:	188a      	adds	r2, r1, r2
 8004ba0:	3208      	adds	r2, #8
 8004ba2:	4926      	ldr	r1, [pc, #152]	@ (8004c3c <Meas_Init+0x264>)
 8004ba4:	6011      	str	r1, [r2, #0]
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <Meas_Init+0x240>)
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	18d3      	adds	r3, r2, r3
 8004bac:	330c      	adds	r3, #12
 8004bae:	1c22      	adds	r2, r4, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8004bb2:	197b      	adds	r3, r7, r5
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	197a      	adds	r2, r7, r5
 8004bb8:	1c59      	adds	r1, r3, #1
 8004bba:	7011      	strb	r1, [r2, #0]
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf8 <Meas_Init+0x220>)
 8004bbe:	78d4      	ldrb	r4, [r2, #3]
 8004bc0:	4a15      	ldr	r2, [pc, #84]	@ (8004c18 <Meas_Init+0x240>)
 8004bc2:	0119      	lsls	r1, r3, #4
 8004bc4:	481e      	ldr	r0, [pc, #120]	@ (8004c40 <Meas_Init+0x268>)
 8004bc6:	5088      	str	r0, [r1, r2]
 8004bc8:	4913      	ldr	r1, [pc, #76]	@ (8004c18 <Meas_Init+0x240>)
 8004bca:	011a      	lsls	r2, r3, #4
 8004bcc:	188a      	adds	r2, r1, r2
 8004bce:	3204      	adds	r2, #4
 8004bd0:	491c      	ldr	r1, [pc, #112]	@ (8004c44 <Meas_Init+0x26c>)
 8004bd2:	6011      	str	r1, [r2, #0]
 8004bd4:	4910      	ldr	r1, [pc, #64]	@ (8004c18 <Meas_Init+0x240>)
 8004bd6:	011a      	lsls	r2, r3, #4
 8004bd8:	188a      	adds	r2, r1, r2
 8004bda:	3208      	adds	r2, #8
 8004bdc:	491a      	ldr	r1, [pc, #104]	@ (8004c48 <Meas_Init+0x270>)
 8004bde:	6011      	str	r1, [r2, #0]
 8004be0:	4a0d      	ldr	r2, [pc, #52]	@ (8004c18 <Meas_Init+0x240>)
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	18d3      	adds	r3, r2, r3
 8004be6:	330c      	adds	r3, #12
 8004be8:	1c22      	adds	r2, r4, #0
 8004bea:	701a      	strb	r2, [r3, #0]
}
 8004bec:	46c0      	nop			@ (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b014      	add	sp, #80	@ 0x50
 8004bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf4:	2000068c 	.word	0x2000068c
 8004bf8:	20000688 	.word	0x20000688
 8004bfc:	08011408 	.word	0x08011408
 8004c00:	08011438 	.word	0x08011438
 8004c04:	0801143c 	.word	0x0801143c
 8004c08:	08011468 	.word	0x08011468
 8004c0c:	0801146c 	.word	0x0801146c
 8004c10:	50000400 	.word	0x50000400
 8004c14:	08011488 	.word	0x08011488
 8004c18:	20000648 	.word	0x20000648
 8004c1c:	08004945 	.word	0x08004945
 8004c20:	08004955 	.word	0x08004955
 8004c24:	20000644 	.word	0x20000644
 8004c28:	08004975 	.word	0x08004975
 8004c2c:	08004985 	.word	0x08004985
 8004c30:	20000645 	.word	0x20000645
 8004c34:	0800499d 	.word	0x0800499d
 8004c38:	080049a7 	.word	0x080049a7
 8004c3c:	20000646 	.word	0x20000646
 8004c40:	080049b3 	.word	0x080049b3
 8004c44:	080049c9 	.word	0x080049c9
 8004c48:	20000647 	.word	0x20000647

08004c4c <StartMeasurements>:

void StartMeasurements(void) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8004c50:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <StartMeasurements+0x48>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e015      	b.n	8004c84 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8004c58:	4b0e      	ldr	r3, [pc, #56]	@ (8004c94 <StartMeasurements+0x48>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004c98 <StartMeasurements+0x4c>)
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	18d3      	adds	r3, r2, r3
 8004c62:	330c      	adds	r3, #12
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d006      	beq.n	8004c78 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <StartMeasurements+0x48>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	001a      	movs	r2, r3
 8004c70:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <StartMeasurements+0x4c>)
 8004c72:	0112      	lsls	r2, r2, #4
 8004c74:	58d3      	ldr	r3, [r2, r3]
 8004c76:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8004c78:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <StartMeasurements+0x48>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	4b04      	ldr	r3, [pc, #16]	@ (8004c94 <StartMeasurements+0x48>)
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	4b03      	ldr	r3, [pc, #12]	@ (8004c94 <StartMeasurements+0x48>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d9e5      	bls.n	8004c58 <StartMeasurements+0xc>
    }
  }
}
 8004c8c:	46c0      	nop			@ (mov r8, r8)
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	2000068d 	.word	0x2000068d
 8004c98:	20000648 	.word	0x20000648

08004c9c <ResetMeasurements>:

void ResetMeasurements(void) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <ResetMeasurements+0x34>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <ResetMeasurements+0x34>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8004cac:	4b08      	ldr	r3, [pc, #32]	@ (8004cd0 <ResetMeasurements+0x34>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8004cb2:	4b07      	ldr	r3, [pc, #28]	@ (8004cd0 <ResetMeasurements+0x34>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <ResetMeasurements+0x34>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8004cbe:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <ResetMeasurements+0x34>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8004cc4:	4b02      	ldr	r3, [pc, #8]	@ (8004cd0 <ResetMeasurements+0x34>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	73da      	strb	r2, [r3, #15]
}
 8004cca:	46c0      	nop			@ (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000638 	.word	0x20000638

08004cd4 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8004cd8:	4b18      	ldr	r3, [pc, #96]	@ (8004d3c <MeasurementsCompleted+0x68>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e024      	b.n	8004d2a <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8004ce0:	4b16      	ldr	r3, [pc, #88]	@ (8004d3c <MeasurementsCompleted+0x68>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	4a16      	ldr	r2, [pc, #88]	@ (8004d40 <MeasurementsCompleted+0x6c>)
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	18d3      	adds	r3, r2, r3
 8004cea:	330c      	adds	r3, #12
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d015      	beq.n	8004d1e <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8004cf2:	4b12      	ldr	r3, [pc, #72]	@ (8004d3c <MeasurementsCompleted+0x68>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	4a12      	ldr	r2, [pc, #72]	@ (8004d40 <MeasurementsCompleted+0x6c>)
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	18d3      	adds	r3, r2, r3
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4798      	blx	r3
 8004d02:	1e03      	subs	r3, r0, #0
 8004d04:	d009      	beq.n	8004d1a <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <MeasurementsCompleted+0x68>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d40 <MeasurementsCompleted+0x6c>)
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	18d3      	adds	r3, r2, r3
 8004d10:	3308      	adds	r3, #8
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e001      	b.n	8004d1e <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e00a      	b.n	8004d34 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8004d1e:	4b07      	ldr	r3, [pc, #28]	@ (8004d3c <MeasurementsCompleted+0x68>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <MeasurementsCompleted+0x68>)
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <MeasurementsCompleted+0x68>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d9d6      	bls.n	8004ce0 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8004d32:	2301      	movs	r3, #1
}
 8004d34:	0018      	movs	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	2000068d 	.word	0x2000068d
 8004d40:	20000648 	.word	0x20000648

08004d44 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8004d44:	b5b0      	push	{r4, r5, r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8004d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004df4 <Meas_Upkeep+0xb0>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d848      	bhi.n	8004de4 <Meas_Upkeep+0xa0>
 8004d52:	009a      	lsls	r2, r3, #2
 8004d54:	4b28      	ldr	r3, [pc, #160]	@ (8004df8 <Meas_Upkeep+0xb4>)
 8004d56:	18d3      	adds	r3, r2, r3
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 8004d5c:	4a27      	ldr	r2, [pc, #156]	@ (8004dfc <Meas_Upkeep+0xb8>)
 8004d5e:	4b28      	ldr	r3, [pc, #160]	@ (8004e00 <Meas_Upkeep+0xbc>)
 8004d60:	0019      	movs	r1, r3
 8004d62:	2003      	movs	r0, #3
 8004d64:	f002 faa6 	bl	80072b4 <CreateLine>
    break;
 8004d68:	e041      	b.n	8004dee <Meas_Upkeep+0xaa>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8004d6a:	f7ff ff97 	bl	8004c9c <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8004d6e:	4b21      	ldr	r3, [pc, #132]	@ (8004df4 <Meas_Upkeep+0xb0>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]
    break;
 8004d74:	e03b      	b.n	8004dee <Meas_Upkeep+0xaa>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8004d76:	f7ff ff69 	bl	8004c4c <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8004d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004df4 <Meas_Upkeep+0xb0>)
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	701a      	strb	r2, [r3, #0]
   break;
 8004d80:	e035      	b.n	8004dee <Meas_Upkeep+0xaa>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8004d82:	f7ff ffa7 	bl	8004cd4 <MeasurementsCompleted>
 8004d86:	1e03      	subs	r3, r0, #0
 8004d88:	d030      	beq.n	8004dec <Meas_Upkeep+0xa8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8004d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <Meas_Upkeep+0xb0>)
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8004d90:	e02c      	b.n	8004dec <Meas_Upkeep+0xa8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8004d92:	4a1c      	ldr	r2, [pc, #112]	@ (8004e04 <Meas_Upkeep+0xc0>)
 8004d94:	4b1a      	ldr	r3, [pc, #104]	@ (8004e00 <Meas_Upkeep+0xbc>)
 8004d96:	0019      	movs	r1, r3
 8004d98:	2003      	movs	r0, #3
 8004d9a:	f002 fa8b 	bl	80072b4 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e08 <Meas_Upkeep+0xc4>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e0c <Meas_Upkeep+0xc8>)
 8004da4:	4916      	ldr	r1, [pc, #88]	@ (8004e00 <Meas_Upkeep+0xbc>)
 8004da6:	2003      	movs	r0, #3
 8004da8:	f002 fa84 	bl	80072b4 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8004dac:	4b16      	ldr	r3, [pc, #88]	@ (8004e08 <Meas_Upkeep+0xc4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	1c18      	adds	r0, r3, #0
 8004db2:	f7fe fad5 	bl	8003360 <__aeabi_f2d>
 8004db6:	0004      	movs	r4, r0
 8004db8:	000d      	movs	r5, r1
 8004dba:	4b13      	ldr	r3, [pc, #76]	@ (8004e08 <Meas_Upkeep+0xc4>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	1c18      	adds	r0, r3, #0
 8004dc0:	f7fe face 	bl	8003360 <__aeabi_f2d>
 8004dc4:	0002      	movs	r2, r0
 8004dc6:	000b      	movs	r3, r1
 8004dc8:	4811      	ldr	r0, [pc, #68]	@ (8004e10 <Meas_Upkeep+0xcc>)
 8004dca:	490d      	ldr	r1, [pc, #52]	@ (8004e00 <Meas_Upkeep+0xbc>)
 8004dcc:	9202      	str	r2, [sp, #8]
 8004dce:	9303      	str	r3, [sp, #12]
 8004dd0:	9400      	str	r4, [sp, #0]
 8004dd2:	9501      	str	r5, [sp, #4]
 8004dd4:	0002      	movs	r2, r0
 8004dd6:	2003      	movs	r0, #3
 8004dd8:	f002 fa6c 	bl	80072b4 <CreateLine>
    MeasState = MEAS_STATE_INIT;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <Meas_Upkeep+0xb0>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
    break;
 8004de2:	e004      	b.n	8004dee <Meas_Upkeep+0xaa>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8004de4:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <Meas_Upkeep+0xb0>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
    break;
 8004dea:	e000      	b.n	8004dee <Meas_Upkeep+0xaa>
    break;
 8004dec:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004dee:	46c0      	nop			@ (mov r8, r8)
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bdb0      	pop	{r4, r5, r7, pc}
 8004df4:	2000068c 	.word	0x2000068c
 8004df8:	08011aa0 	.word	0x08011aa0
 8004dfc:	080114a0 	.word	0x080114a0
 8004e00:	08011468 	.word	0x08011468
 8004e04:	080114c0 	.word	0x080114c0
 8004e08:	20000638 	.word	0x20000638
 8004e0c:	080114d4 	.word	0x080114d4
 8004e10:	080114ec 	.word	0x080114ec

08004e14 <Meas_SetEnabledSensors>:

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8004e1e:	240f      	movs	r4, #15
 8004e20:	193b      	adds	r3, r7, r4
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8004e26:	4b20      	ldr	r3, [pc, #128]	@ (8004ea8 <Meas_SetEnabledSensors+0x94>)
 8004e28:	1d3a      	adds	r2, r7, #4
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8004e2e:	193b      	adds	r3, r7, r4
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	193a      	adds	r2, r7, r4
 8004e34:	1c59      	adds	r1, r3, #1
 8004e36:	7011      	strb	r1, [r2, #0]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	7819      	ldrb	r1, [r3, #0]
 8004e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004eac <Meas_SetEnabledSensors+0x98>)
 8004e40:	0103      	lsls	r3, r0, #4
 8004e42:	18d3      	adds	r3, r2, r3
 8004e44:	330c      	adds	r3, #12
 8004e46:	1c0a      	adds	r2, r1, #0
 8004e48:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8004e4a:	193b      	adds	r3, r7, r4
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	193a      	adds	r2, r7, r4
 8004e50:	1c59      	adds	r1, r3, #1
 8004e52:	7011      	strb	r1, [r2, #0]
 8004e54:	0018      	movs	r0, r3
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	7859      	ldrb	r1, [r3, #1]
 8004e5a:	4a14      	ldr	r2, [pc, #80]	@ (8004eac <Meas_SetEnabledSensors+0x98>)
 8004e5c:	0103      	lsls	r3, r0, #4
 8004e5e:	18d3      	adds	r3, r2, r3
 8004e60:	330c      	adds	r3, #12
 8004e62:	1c0a      	adds	r2, r1, #0
 8004e64:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8004e66:	193b      	adds	r3, r7, r4
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	193a      	adds	r2, r7, r4
 8004e6c:	1c59      	adds	r1, r3, #1
 8004e6e:	7011      	strb	r1, [r2, #0]
 8004e70:	0018      	movs	r0, r3
 8004e72:	1d3b      	adds	r3, r7, #4
 8004e74:	7899      	ldrb	r1, [r3, #2]
 8004e76:	4a0d      	ldr	r2, [pc, #52]	@ (8004eac <Meas_SetEnabledSensors+0x98>)
 8004e78:	0103      	lsls	r3, r0, #4
 8004e7a:	18d3      	adds	r3, r2, r3
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	1c0a      	adds	r2, r1, #0
 8004e80:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8004e82:	193b      	adds	r3, r7, r4
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	193a      	adds	r2, r7, r4
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	7011      	strb	r1, [r2, #0]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	1d3b      	adds	r3, r7, #4
 8004e90:	78d9      	ldrb	r1, [r3, #3]
 8004e92:	4a06      	ldr	r2, [pc, #24]	@ (8004eac <Meas_SetEnabledSensors+0x98>)
 8004e94:	0103      	lsls	r3, r0, #4
 8004e96:	18d3      	adds	r3, r2, r3
 8004e98:	330c      	adds	r3, #12
 8004e9a:	1c0a      	adds	r2, r1, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b005      	add	sp, #20
 8004ea4:	bd90      	pop	{r4, r7, pc}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	20000688 	.word	0x20000688
 8004eac:	20000648 	.word	0x20000648

08004eb0 <MIC_Init>:
static volatile bool StartUpDone = false;
static volatile bool DataReady = false;
static uint8_t MIC_InitRetries = 0;
static uint8_t MIC_MaxRetries = 3;

void MIC_Init(I2S_HandleTypeDef* i2SHandle) {
 8004eb0:	b5b0      	push	{r4, r5, r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  I2SHandle = i2SHandle;
 8004eb8:	4b42      	ldr	r3, [pc, #264]	@ (8004fc4 <MIC_Init+0x114>)
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8004ebe:	4b41      	ldr	r3, [pc, #260]	@ (8004fc4 <MIC_Init+0x114>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <MIC_Init+0x24>
     Error("Microphone is not initialised.");
 8004ec6:	4a40      	ldr	r2, [pc, #256]	@ (8004fc8 <MIC_Init+0x118>)
 8004ec8:	4b40      	ldr	r3, [pc, #256]	@ (8004fcc <MIC_Init+0x11c>)
 8004eca:	0019      	movs	r1, r3
 8004ecc:	2001      	movs	r0, #1
 8004ece:	f002 f9f1 	bl	80072b4 <CreateLine>
     return;
 8004ed2:	e073      	b.n	8004fbc <MIC_Init+0x10c>
  }
  // Start data receiving to check if MIC is connected.
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples);
 8004ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc4 <MIC_Init+0x114>)
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	4b3d      	ldr	r3, [pc, #244]	@ (8004fd0 <MIC_Init+0x120>)
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	250f      	movs	r5, #15
 8004ede:	197c      	adds	r4, r7, r5
 8004ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd4 <MIC_Init+0x124>)
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	f005 fd42 	bl	800a96c <HAL_I2S_Receive_DMA>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	7023      	strb	r3, [r4, #0]
  if(status == HAL_ERROR) {
 8004eec:	197b      	adds	r3, r7, r5
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d111      	bne.n	8004f18 <MIC_Init+0x68>
    Error("Microphone NOT initialised.");
 8004ef4:	4a38      	ldr	r2, [pc, #224]	@ (8004fd8 <MIC_Init+0x128>)
 8004ef6:	4b35      	ldr	r3, [pc, #212]	@ (8004fcc <MIC_Init+0x11c>)
 8004ef8:	0019      	movs	r1, r3
 8004efa:	2001      	movs	r0, #1
 8004efc:	f002 f9da 	bl	80072b4 <CreateLine>
    // Setting LED to RED to show mic is not working.
    TIM3 -> CCR1 = 2000;
 8004f00:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <MIC_Init+0x12c>)
 8004f02:	22fa      	movs	r2, #250	@ 0xfa
 8004f04:	00d2      	lsls	r2, r2, #3
 8004f06:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 4000;
 8004f08:	4b34      	ldr	r3, [pc, #208]	@ (8004fdc <MIC_Init+0x12c>)
 8004f0a:	22fa      	movs	r2, #250	@ 0xfa
 8004f0c:	0112      	lsls	r2, r2, #4
 8004f0e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8004f10:	4b32      	ldr	r3, [pc, #200]	@ (8004fdc <MIC_Init+0x12c>)
 8004f12:	22fa      	movs	r2, #250	@ 0xfa
 8004f14:	0112      	lsls	r2, r2, #4
 8004f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if(status == HAL_BUSY) {
 8004f18:	230f      	movs	r3, #15
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d135      	bne.n	8004f8e <MIC_Init+0xde>
    Debug("Microphone is BUSY, retrying.");
 8004f22:	4a2f      	ldr	r2, [pc, #188]	@ (8004fe0 <MIC_Init+0x130>)
 8004f24:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe4 <MIC_Init+0x134>)
 8004f26:	0019      	movs	r1, r3
 8004f28:	2003      	movs	r0, #3
 8004f2a:	f002 f9c3 	bl	80072b4 <CreateLine>
    // Setting LED to YELLOW to show mic is busy.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 2000;
 8004f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8004fdc <MIC_Init+0x12c>)
 8004f30:	22fa      	movs	r2, #250	@ 0xfa
 8004f32:	00d2      	lsls	r2, r2, #3
 8004f34:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 8004f36:	4b29      	ldr	r3, [pc, #164]	@ (8004fdc <MIC_Init+0x12c>)
 8004f38:	22fa      	movs	r2, #250	@ 0xfa
 8004f3a:	00d2      	lsls	r2, r2, #3
 8004f3c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8004f3e:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <MIC_Init+0x12c>)
 8004f40:	22fa      	movs	r2, #250	@ 0xfa
 8004f42:	0112      	lsls	r2, r2, #4
 8004f44:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(MIC_InitRetries <= MIC_MaxRetries) {
 8004f46:	4b28      	ldr	r3, [pc, #160]	@ (8004fe8 <MIC_Init+0x138>)
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	4b28      	ldr	r3, [pc, #160]	@ (8004fec <MIC_Init+0x13c>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d80a      	bhi.n	8004f68 <MIC_Init+0xb8>
      MIC_InitRetries += 1;
 8004f52:	4b25      	ldr	r3, [pc, #148]	@ (8004fe8 <MIC_Init+0x138>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	4b23      	ldr	r3, [pc, #140]	@ (8004fe8 <MIC_Init+0x138>)
 8004f5c:	701a      	strb	r2, [r3, #0]
      // Calling function again.
      MIC_Init(i2SHandle);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f7ff ffa5 	bl	8004eb0 <MIC_Init>
 8004f66:	e024      	b.n	8004fb2 <MIC_Init+0x102>
    }else {
      Debug("Microphone is BUSY and is NOT working after retrying.");
 8004f68:	4a21      	ldr	r2, [pc, #132]	@ (8004ff0 <MIC_Init+0x140>)
 8004f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe4 <MIC_Init+0x134>)
 8004f6c:	0019      	movs	r1, r3
 8004f6e:	2003      	movs	r0, #3
 8004f70:	f002 f9a0 	bl	80072b4 <CreateLine>
      // Setting LED to RED to show mic is not working.
      // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
      TIM3 -> CCR1 = 2000;
 8004f74:	4b19      	ldr	r3, [pc, #100]	@ (8004fdc <MIC_Init+0x12c>)
 8004f76:	22fa      	movs	r2, #250	@ 0xfa
 8004f78:	00d2      	lsls	r2, r2, #3
 8004f7a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004f7c:	4b17      	ldr	r3, [pc, #92]	@ (8004fdc <MIC_Init+0x12c>)
 8004f7e:	22fa      	movs	r2, #250	@ 0xfa
 8004f80:	0112      	lsls	r2, r2, #4
 8004f82:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004f84:	4b15      	ldr	r3, [pc, #84]	@ (8004fdc <MIC_Init+0x12c>)
 8004f86:	22fa      	movs	r2, #250	@ 0xfa
 8004f88:	0112      	lsls	r2, r2, #4
 8004f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f8c:	e011      	b.n	8004fb2 <MIC_Init+0x102>
    }
  }else {
    Debug("Microphone initialised.");
 8004f8e:	4a19      	ldr	r2, [pc, #100]	@ (8004ff4 <MIC_Init+0x144>)
 8004f90:	4b14      	ldr	r3, [pc, #80]	@ (8004fe4 <MIC_Init+0x134>)
 8004f92:	0019      	movs	r1, r3
 8004f94:	2003      	movs	r0, #3
 8004f96:	f002 f98d 	bl	80072b4 <CreateLine>
    // Setting LED to GREEN to show mic is working.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 4000;
 8004f9a:	4b10      	ldr	r3, [pc, #64]	@ (8004fdc <MIC_Init+0x12c>)
 8004f9c:	22fa      	movs	r2, #250	@ 0xfa
 8004f9e:	0112      	lsls	r2, r2, #4
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 8004fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8004fdc <MIC_Init+0x12c>)
 8004fa4:	22fa      	movs	r2, #250	@ 0xfa
 8004fa6:	00d2      	lsls	r2, r2, #3
 8004fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8004faa:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <MIC_Init+0x12c>)
 8004fac:	22fa      	movs	r2, #250	@ 0xfa
 8004fae:	0112      	lsls	r2, r2, #4
 8004fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  // Stop DMA
  HAL_I2S_DMAStop(I2SHandle);
 8004fb2:	4b04      	ldr	r3, [pc, #16]	@ (8004fc4 <MIC_Init+0x114>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f005 fd9a 	bl	800aaf0 <HAL_I2S_DMAStop>
}
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b004      	add	sp, #16
 8004fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	20000690 	.word	0x20000690
 8004fc8:	08011520 	.word	0x08011520
 8004fcc:	08011540 	.word	0x08011540
 8004fd0:	2000002c 	.word	0x2000002c
 8004fd4:	20000694 	.word	0x20000694
 8004fd8:	08011544 	.word	0x08011544
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	08011560 	.word	0x08011560
 8004fe4:	08011580 	.word	0x08011580
 8004fe8:	20000a9e 	.word	0x20000a9e
 8004fec:	2000002e 	.word	0x2000002e
 8004ff0:	08011584 	.word	0x08011584
 8004ff4:	080115bc 	.word	0x080115bc

08004ff8 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8005000:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <UpdateSampleRate+0x3c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d00e      	beq.n	800502a <UpdateSampleRate+0x32>
    return;
  }
  HAL_I2S_DeInit(I2SHandle);
 800500c:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <UpdateSampleRate+0x3c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0018      	movs	r0, r3
 8005012:	f005 fc7f 	bl	800a914 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8005016:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <UpdateSampleRate+0x3c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 800501e:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <UpdateSampleRate+0x3c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	0018      	movs	r0, r3
 8005024:	f005 fb84 	bl	800a730 <HAL_I2S_Init>
 8005028:	e000      	b.n	800502c <UpdateSampleRate+0x34>
    return;
 800502a:	46c0      	nop			@ (mov r8, r8)
}
 800502c:	46bd      	mov	sp, r7
 800502e:	b002      	add	sp, #8
 8005030:	bd80      	pop	{r7, pc}
 8005032:	46c0      	nop			@ (mov r8, r8)
 8005034:	20000690 	.word	0x20000690

08005038 <ConvertAudio>:

static uint32_t ConvertAudio(uint16_t* data) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t audioValue = data[1] | (data[0] << 16);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3302      	adds	r3, #2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	001a      	movs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  audioValue = audioValue >> 7;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	09db      	lsrs	r3, r3, #7
 8005056:	60fb      	str	r3, [r7, #12]
  return audioValue;
 8005058:	68fb      	ldr	r3, [r7, #12]
}
 800505a:	0018      	movs	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	b004      	add	sp, #16
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <MIC_Start>:

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8005064:	b590      	push	{r4, r7, lr}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	000a      	movs	r2, r1
 800506e:	1cbb      	adds	r3, r7, #2
 8005070:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8005072:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <MIC_Start+0x84>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 800507a:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <MIC_Start+0x88>)
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <MIC_Start+0x8c>)
 800507e:	0019      	movs	r1, r3
 8005080:	2001      	movs	r0, #1
 8005082:	f002 f917 	bl	80072b4 <CreateLine>
    return;
 8005086:	e02c      	b.n	80050e2 <MIC_Start+0x7e>
  }
  Debug("In mic start");
 8005088:	4a1a      	ldr	r2, [pc, #104]	@ (80050f4 <MIC_Start+0x90>)
 800508a:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <MIC_Start+0x94>)
 800508c:	0019      	movs	r1, r3
 800508e:	2003      	movs	r0, #3
 8005090:	f002 f910 	bl	80072b4 <CreateLine>
  UpdateSampleRate(sampleRate);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	0018      	movs	r0, r3
 8005098:	f7ff ffae 	bl	8004ff8 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 800509c:	4b17      	ldr	r3, [pc, #92]	@ (80050fc <MIC_Start+0x98>)
 800509e:	1cba      	adds	r2, r7, #2
 80050a0:	8812      	ldrh	r2, [r2, #0]
 80050a2:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 80050a4:	f002 f992 	bl	80073cc <GetCurrentHalTicks>
 80050a8:	0002      	movs	r2, r0
 80050aa:	4b15      	ldr	r3, [pc, #84]	@ (8005100 <MIC_Start+0x9c>)
 80050ac:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 80050ae:	4b14      	ldr	r3, [pc, #80]	@ (8005100 <MIC_Start+0x9c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3314      	adds	r3, #20
 80050b4:	001a      	movs	r2, r3
 80050b6:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <MIC_Start+0xa0>)
 80050b8:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 80050ba:	4b13      	ldr	r3, [pc, #76]	@ (8005108 <MIC_Start+0xa4>)
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 80050c0:	4b12      	ldr	r3, [pc, #72]	@ (800510c <MIC_Start+0xa8>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples >> 1);
 80050c6:	4b08      	ldr	r3, [pc, #32]	@ (80050e8 <MIC_Start+0x84>)
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <MIC_Start+0x98>)
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	230f      	movs	r3, #15
 80050d4:	18fc      	adds	r4, r7, r3
 80050d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <MIC_Start+0xac>)
 80050d8:	0019      	movs	r1, r3
 80050da:	f005 fc47 	bl	800a96c <HAL_I2S_Receive_DMA>
 80050de:	0003      	movs	r3, r0
 80050e0:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

//  Info("Status %d", status);

}
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b005      	add	sp, #20
 80050e6:	bd90      	pop	{r4, r7, pc}
 80050e8:	20000690 	.word	0x20000690
 80050ec:	08011520 	.word	0x08011520
 80050f0:	08011540 	.word	0x08011540
 80050f4:	080115d4 	.word	0x080115d4
 80050f8:	08011580 	.word	0x08011580
 80050fc:	2000002c 	.word	0x2000002c
 8005100:	20000a94 	.word	0x20000a94
 8005104:	20000a98 	.word	0x20000a98
 8005108:	20000a9c 	.word	0x20000a9c
 800510c:	20000a9d 	.word	0x20000a9d
 8005110:	20000694 	.word	0x20000694

08005114 <MIC_Print>:
//static void MIC_ProcessFFT() {
//  CalculateFFT();
//}


void MIC_Print(void) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
  Info("New samples");
 800511a:	4a13      	ldr	r2, [pc, #76]	@ (8005168 <MIC_Print+0x54>)
 800511c:	4b13      	ldr	r3, [pc, #76]	@ (800516c <MIC_Print+0x58>)
 800511e:	0019      	movs	r1, r3
 8005120:	2002      	movs	r0, #2
 8005122:	f002 f8c7 	bl	80072b4 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 8005126:	2300      	movs	r3, #0
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	e011      	b.n	8005150 <MIC_Print+0x3c>
    uint32_t sample = ConvertAudio(&AudioRxBuffer[i]);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	005a      	lsls	r2, r3, #1
 8005130:	4b0f      	ldr	r3, [pc, #60]	@ (8005170 <MIC_Print+0x5c>)
 8005132:	18d3      	adds	r3, r2, r3
 8005134:	0018      	movs	r0, r3
 8005136:	f7ff ff7f 	bl	8005038 <ConvertAudio>
 800513a:	0003      	movs	r3, r0
 800513c:	603b      	str	r3, [r7, #0]
    Info("0x%08x", sample);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	4a0c      	ldr	r2, [pc, #48]	@ (8005174 <MIC_Print+0x60>)
 8005142:	490a      	ldr	r1, [pc, #40]	@ (800516c <MIC_Print+0x58>)
 8005144:	2002      	movs	r0, #2
 8005146:	f002 f8b5 	bl	80072b4 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3302      	adds	r3, #2
 800514e:	607b      	str	r3, [r7, #4]
 8005150:	4b09      	ldr	r3, [pc, #36]	@ (8005178 <MIC_Print+0x64>)
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	001a      	movs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4293      	cmp	r3, r2
 800515a:	d3e7      	bcc.n	800512c <MIC_Print+0x18>
  }
}
 800515c:	46c0      	nop			@ (mov r8, r8)
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	b002      	add	sp, #8
 8005164:	bd80      	pop	{r7, pc}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	080115e4 	.word	0x080115e4
 800516c:	080115f0 	.word	0x080115f0
 8005170:	20000694 	.word	0x20000694
 8005174:	080115f4 	.word	0x080115f4
 8005178:	2000002c 	.word	0x2000002c

0800517c <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  if(DataReady) {
 8005180:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <MIC_MeasurementDone+0x30>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <MIC_MeasurementDone+0x28>
    MIC_Print();
 800518a:	f7ff ffc3 	bl	8005114 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples >> 1);
 800518e:	4b08      	ldr	r3, [pc, #32]	@ (80051b0 <MIC_MeasurementDone+0x34>)
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	b29b      	uxth	r3, r3
 8005196:	4a07      	ldr	r2, [pc, #28]	@ (80051b4 <MIC_MeasurementDone+0x38>)
 8005198:	4907      	ldr	r1, [pc, #28]	@ (80051b8 <MIC_MeasurementDone+0x3c>)
 800519a:	2003      	movs	r0, #3
 800519c:	f002 f88a 	bl	80072b4 <CreateLine>
    return true;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <MIC_MeasurementDone+0x2a>
  }
  return false;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20000a9d 	.word	0x20000a9d
 80051b0:	2000002c 	.word	0x2000002c
 80051b4:	080115fc 	.word	0x080115fc
 80051b8:	08011580 	.word	0x08011580

080051bc <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80051c4:	4b10      	ldr	r3, [pc, #64]	@ (8005208 <HAL_I2S_RxCpltCallback+0x4c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d118      	bne.n	8005200 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 80051ce:	4b0f      	ldr	r3, [pc, #60]	@ (800520c <HAL_I2S_RxCpltCallback+0x50>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 80051d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <HAL_I2S_RxCpltCallback+0x4c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	0018      	movs	r0, r3
 80051de:	f005 fc87 	bl	800aaf0 <HAL_I2S_DMAStop>
    DataReady = true;
 80051e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005210 <HAL_I2S_RxCpltCallback+0x54>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e00b      	b.n	8005202 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 80051ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <HAL_I2S_RxCpltCallback+0x58>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	0018      	movs	r0, r3
 80051f0:	f002 f80a 	bl	8007208 <TimestampIsReached>
 80051f4:	1e03      	subs	r3, r0, #0
 80051f6:	d004      	beq.n	8005202 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 80051f8:	4b04      	ldr	r3, [pc, #16]	@ (800520c <HAL_I2S_RxCpltCallback+0x50>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e000      	b.n	8005202 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8005200:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8005202:	46bd      	mov	sp, r7
 8005204:	b002      	add	sp, #8
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000690 	.word	0x20000690
 800520c:	20000a9c 	.word	0x20000a9c
 8005210:	20000a9d 	.word	0x20000a9d
 8005214:	20000a98 	.word	0x20000a98

08005218 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d113      	bne.n	800525e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	22fe      	movs	r2, #254	@ 0xfe
 800523a:	0592      	lsls	r2, r2, #22
 800523c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a1a      	ldr	r2, [pc, #104]	@ (80052ac <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8005242:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a1a      	ldr	r2, [pc, #104]	@ (80052b0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8005248:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4a19      	ldr	r2, [pc, #100]	@ (80052b4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800524e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8005254:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a18      	ldr	r2, [pc, #96]	@ (80052bc <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800525a:	61da      	str	r2, [r3, #28]
 800525c:	e011      	b.n	8005282 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a17      	ldr	r2, [pc, #92]	@ (80052c0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8005262:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4a17      	ldr	r2, [pc, #92]	@ (80052c4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8005268:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a16      	ldr	r2, [pc, #88]	@ (80052c8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800526e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a16      	ldr	r2, [pc, #88]	@ (80052cc <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8005274:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4a15      	ldr	r2, [pc, #84]	@ (80052d0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800527a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a15      	ldr	r2, [pc, #84]	@ (80052d4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8005280:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4a14      	ldr	r2, [pc, #80]	@ (80052d8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8005286:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a14      	ldr	r2, [pc, #80]	@ (80052dc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800528c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4a12      	ldr	r2, [pc, #72]	@ (80052dc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8005292:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8005298:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 f831 	bl	8005304 <GasIndexAlgorithm_reset>
}
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	00002710 	.word	0x00002710
 80052b0:	44340000 	.word	0x44340000
 80052b4:	46859800 	.word	0x46859800
 80052b8:	46a05000 	.word	0x46a05000
 80052bc:	41f00000 	.word	0x41f00000
 80052c0:	42c80000 	.word	0x42c80000
 80052c4:	00004e20 	.word	0x00004e20
 80052c8:	43340000 	.word	0x43340000
 80052cc:	4528c000 	.word	0x4528c000
 80052d0:	45a32000 	.word	0x45a32000
 80052d4:	43aa0000 	.word	0x43aa0000
 80052d8:	43660000 	.word	0x43660000
 80052dc:	41400000 	.word	0x41400000
 80052e0:	42480000 	.word	0x42480000

080052e4 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80052ee:	22fe      	movs	r2, #254	@ 0xfe
 80052f0:	0592      	lsls	r2, r2, #22
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7ff ff8e 	bl	8005218 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80052fc:	46c0      	nop			@ (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	b002      	add	sp, #8
 8005302:	bd80      	pop	{r7, pc}

08005304 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	0018      	movs	r0, r3
 8005322:	f000 f805 	bl	8005330 <GasIndexAlgorithm__init_instances>
}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	46bd      	mov	sp, r7
 800532a:	b002      	add	sp, #8
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	0018      	movs	r0, r3
 800533c:	f000 f8e8 	bl	8005510 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	0018      	movs	r0, r3
 8005344:	f000 f9a6 	bl	8005694 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8005348:	1c04      	adds	r4, r0, #0
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	f000 f9ab 	bl	80056a8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8005352:	1c02      	adds	r2, r0, #0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1c21      	adds	r1, r4, #0
 8005358:	0018      	movs	r0, r3
 800535a:	f000 fc3b 	bl	8005bd4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d107      	bne.n	8005376 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8005366:	23fe      	movs	r3, #254	@ 0xfe
 8005368:	059b      	lsls	r3, r3, #22
 800536a:	4a0a      	ldr	r2, [pc, #40]	@ (8005394 <GasIndexAlgorithm__init_instances+0x64>)
 800536c:	490a      	ldr	r1, [pc, #40]	@ (8005398 <GasIndexAlgorithm__init_instances+0x68>)
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fc86 	bl	8005c80 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8005374:	e005      	b.n	8005382 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8005376:	4b09      	ldr	r3, [pc, #36]	@ (800539c <GasIndexAlgorithm__init_instances+0x6c>)
 8005378:	4a09      	ldr	r2, [pc, #36]	@ (80053a0 <GasIndexAlgorithm__init_instances+0x70>)
 800537a:	490a      	ldr	r1, [pc, #40]	@ (80053a4 <GasIndexAlgorithm__init_instances+0x74>)
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fc7f 	bl	8005c80 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0018      	movs	r0, r3
 8005386:	f000 fd35 	bl	8005df4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800538a:	46c0      	nop			@ (mov r8, r8)
 800538c:	46bd      	mov	sp, r7
 800538e:	b003      	add	sp, #12
 8005390:	bd90      	pop	{r4, r7, pc}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	bc257a78 	.word	0xbc257a78
 8005398:	44198000 	.word	0x44198000
 800539c:	42c80000 	.word	0x42c80000
 80053a0:	bbd4fdf4 	.word	0xbbd4fdf4
 80053a4:	43550000 	.word	0x43550000

080053a8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b8:	4952      	ldr	r1, [pc, #328]	@ (8005504 <GasIndexAlgorithm_process+0x15c>)
 80053ba:	1c18      	adds	r0, r3, #0
 80053bc:	f7fb f890 	bl	80004e0 <__aeabi_fcmple>
 80053c0:	1e03      	subs	r3, r0, #0
 80053c2:	d00c      	beq.n	80053de <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	1c19      	adds	r1, r3, #0
 80053ce:	1c10      	adds	r0, r2, #0
 80053d0:	f7fb f9f4 	bl	80007bc <__aeabi_fadd>
 80053d4:	1c03      	adds	r3, r0, #0
 80053d6:	1c1a      	adds	r2, r3, #0
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	631a      	str	r2, [r3, #48]	@ 0x30
 80053dc:	e080      	b.n	80054e0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	dd25      	ble.n	8005430 <GasIndexAlgorithm_process+0x88>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4a48      	ldr	r2, [pc, #288]	@ (8005508 <GasIndexAlgorithm_process+0x160>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	dc21      	bgt.n	8005430 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	dc04      	bgt.n	8005400 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	e00d      	b.n	800541c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a41      	ldr	r2, [pc, #260]	@ (800550c <GasIndexAlgorithm_process+0x164>)
 8005406:	4694      	mov	ip, r2
 8005408:	4463      	add	r3, ip
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	dd05      	ble.n	800541c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a3d      	ldr	r2, [pc, #244]	@ (800550c <GasIndexAlgorithm_process+0x164>)
 8005416:	4694      	mov	ip, r2
 8005418:	4463      	add	r3, ip
 800541a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	0018      	movs	r0, r3
 8005426:	f7fc f851 	bl	80014cc <__aeabi_i2f>
 800542a:	1c02      	adds	r2, r0, #0
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	0018      	movs	r0, r3
 800543c:	f000 f945 	bl	80056ca <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8005440:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8005442:	d014      	beq.n	800546e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1c11      	adds	r1, r2, #0
 800544c:	0018      	movs	r0, r3
 800544e:	f000 fbd1 	bl	8005bf4 <GasIndexAlgorithm__mox_model__process>
 8005452:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	1c11      	adds	r1, r2, #0
 8005460:	0018      	movs	r0, r3
 8005462:	f000 fc25 	bl	8005cb0 <GasIndexAlgorithm__sigmoid_scaled__process>
 8005466:	1c02      	adds	r2, r0, #0
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	639a      	str	r2, [r3, #56]	@ 0x38
 800546c:	e003      	b.n	8005476 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1c11      	adds	r1, r2, #0
 800547e:	0018      	movs	r0, r3
 8005480:	f000 fcec 	bl	8005e5c <GasIndexAlgorithm__adaptive_lowpass__process>
 8005484:	1c02      	adds	r2, r0, #0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548e:	21fc      	movs	r1, #252	@ 0xfc
 8005490:	0589      	lsls	r1, r1, #22
 8005492:	1c18      	adds	r0, r3, #0
 8005494:	f7fb f81a 	bl	80004cc <__aeabi_fcmplt>
 8005498:	1e03      	subs	r3, r0, #0
 800549a:	d003      	beq.n	80054a4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	22fc      	movs	r2, #252	@ 0xfc
 80054a0:	0592      	lsls	r2, r2, #22
 80054a2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a8:	2100      	movs	r1, #0
 80054aa:	1c18      	adds	r0, r3, #0
 80054ac:	f7fb f822 	bl	80004f4 <__aeabi_fcmpgt>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d015      	beq.n	80054e0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1c11      	adds	r1, r2, #0
 80054bc:	0018      	movs	r0, r3
 80054be:	f000 fa4f 	bl	8005960 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 f8e5 	bl	8005694 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80054ca:	1c04      	adds	r4, r0, #0
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 f8ea 	bl	80056a8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80054d4:	1c02      	adds	r2, r0, #0
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1c21      	adds	r1, r4, #0
 80054da:	0018      	movs	r0, r3
 80054dc:	f000 fb7a 	bl	8005bd4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e4:	21fc      	movs	r1, #252	@ 0xfc
 80054e6:	0589      	lsls	r1, r1, #22
 80054e8:	1c18      	adds	r0, r3, #0
 80054ea:	f7fb f967 	bl	80007bc <__aeabi_fadd>
 80054ee:	1c03      	adds	r3, r0, #0
 80054f0:	1c18      	adds	r0, r3, #0
 80054f2:	f7fb ffcb 	bl	800148c <__aeabi_f2iz>
 80054f6:	0002      	movs	r2, r0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	601a      	str	r2, [r3, #0]
    return;
 80054fc:	46c0      	nop			@ (mov r8, r8)
}
 80054fe:	46bd      	mov	sp, r7
 8005500:	b005      	add	sp, #20
 8005502:	bd90      	pop	{r4, r7, pc}
 8005504:	42340000 	.word	0x42340000
 8005508:	0000fde7 	.word	0x0000fde7
 800550c:	00007fff 	.word	0x00007fff

08005510 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8005510:	b5b0      	push	{r4, r5, r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	223c      	movs	r2, #60	@ 0x3c
 800551c:	2100      	movs	r1, #0
 800551e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4952      	ldr	r1, [pc, #328]	@ (8005684 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800553a:	1c18      	adds	r0, r3, #0
 800553c:	f7fb fac8 	bl	8000ad0 <__aeabi_fdiv>
 8005540:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8005542:	2188      	movs	r1, #136	@ 0x88
 8005544:	05c9      	lsls	r1, r1, #23
 8005546:	1c18      	adds	r0, r3, #0
 8005548:	f7fb fca8 	bl	8000e9c <__aeabi_fmul>
 800554c:	1c03      	adds	r3, r0, #0
 800554e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	494a      	ldr	r1, [pc, #296]	@ (8005684 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800555a:	1c18      	adds	r0, r3, #0
 800555c:	f7fb fab8 	bl	8000ad0 <__aeabi_fdiv>
 8005560:	1c03      	adds	r3, r0, #0
 8005562:	1c19      	adds	r1, r3, #0
 8005564:	1c20      	adds	r0, r4, #0
 8005566:	f7fb f929 	bl	80007bc <__aeabi_fadd>
 800556a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800556c:	1c19      	adds	r1, r3, #0
 800556e:	1c28      	adds	r0, r5, #0
 8005570:	f7fb faae 	bl	8000ad0 <__aeabi_fdiv>
 8005574:	1c03      	adds	r3, r0, #0
 8005576:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4940      	ldr	r1, [pc, #256]	@ (8005684 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8005582:	1c18      	adds	r0, r3, #0
 8005584:	f7fb faa4 	bl	8000ad0 <__aeabi_fdiv>
 8005588:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800558a:	2185      	movs	r1, #133	@ 0x85
 800558c:	05c9      	lsls	r1, r1, #23
 800558e:	1c18      	adds	r0, r3, #0
 8005590:	f7fb fc84 	bl	8000e9c <__aeabi_fmul>
 8005594:	1c03      	adds	r3, r0, #0
 8005596:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4938      	ldr	r1, [pc, #224]	@ (8005684 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80055a2:	1c18      	adds	r0, r3, #0
 80055a4:	f7fb fa94 	bl	8000ad0 <__aeabi_fdiv>
 80055a8:	1c03      	adds	r3, r0, #0
 80055aa:	1c19      	adds	r1, r3, #0
 80055ac:	1c20      	adds	r0, r4, #0
 80055ae:	f7fb f905 	bl	80007bc <__aeabi_fadd>
 80055b2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80055b4:	1c19      	adds	r1, r3, #0
 80055b6:	1c28      	adds	r0, r5, #0
 80055b8:	f7fb fa8a 	bl	8000ad0 <__aeabi_fdiv>
 80055bc:	1c03      	adds	r3, r0, #0
 80055be:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d118      	bne.n	80055fe <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80055d0:	2188      	movs	r1, #136	@ 0x88
 80055d2:	05c9      	lsls	r1, r1, #23
 80055d4:	1c18      	adds	r0, r3, #0
 80055d6:	f7fb fc61 	bl	8000e9c <__aeabi_fmul>
 80055da:	1c03      	adds	r3, r0, #0
 80055dc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 80055e2:	4929      	ldr	r1, [pc, #164]	@ (8005688 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 80055e4:	1c18      	adds	r0, r3, #0
 80055e6:	f7fb f8e9 	bl	80007bc <__aeabi_fadd>
 80055ea:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80055ec:	1c19      	adds	r1, r3, #0
 80055ee:	1c20      	adds	r0, r4, #0
 80055f0:	f7fb fa6e 	bl	8000ad0 <__aeabi_fdiv>
 80055f4:	1c03      	adds	r3, r0, #0
 80055f6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80055fc:	e017      	b.n	800562e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8005602:	2188      	movs	r1, #136	@ 0x88
 8005604:	05c9      	lsls	r1, r1, #23
 8005606:	1c18      	adds	r0, r3, #0
 8005608:	f7fb fc48 	bl	8000e9c <__aeabi_fmul>
 800560c:	1c03      	adds	r3, r0, #0
 800560e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8005614:	491d      	ldr	r1, [pc, #116]	@ (800568c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8005616:	1c18      	adds	r0, r3, #0
 8005618:	f7fb f8d0 	bl	80007bc <__aeabi_fadd>
 800561c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800561e:	1c19      	adds	r1, r3, #0
 8005620:	1c20      	adds	r0, r4, #0
 8005622:	f7fb fa55 	bl	8000ad0 <__aeabi_fdiv>
 8005626:	1c03      	adds	r3, r0, #0
 8005628:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8005632:	2185      	movs	r1, #133	@ 0x85
 8005634:	05c9      	lsls	r1, r1, #23
 8005636:	1c18      	adds	r0, r3, #0
 8005638:	f7fb fc30 	bl	8000e9c <__aeabi_fmul>
 800563c:	1c03      	adds	r3, r0, #0
 800563e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	4912      	ldr	r1, [pc, #72]	@ (8005690 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8005646:	1c18      	adds	r0, r3, #0
 8005648:	f7fb f8b8 	bl	80007bc <__aeabi_fadd>
 800564c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800564e:	1c19      	adds	r1, r3, #0
 8005650:	1c20      	adds	r0, r4, #0
 8005652:	f7fb fa3d 	bl	8000ad0 <__aeabi_fdiv>
 8005656:	1c03      	adds	r3, r0, #0
 8005658:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800567c:	46c0      	nop			@ (mov r8, r8)
 800567e:	46bd      	mov	sp, r7
 8005680:	b002      	add	sp, #8
 8005682:	bdb0      	pop	{r4, r5, r7, pc}
 8005684:	45610000 	.word	0x45610000
 8005688:	44960000 	.word	0x44960000
 800568c:	41a00000 	.word	0x41a00000
 8005690:	451c4000 	.word	0x451c4000

08005694 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 80056a0:	1c18      	adds	r0, r3, #0
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b002      	add	sp, #8
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 80056b8:	1c19      	adds	r1, r3, #0
 80056ba:	1c10      	adds	r0, r2, #0
 80056bc:	f7fb f87e 	bl	80007bc <__aeabi_fadd>
 80056c0:	1c03      	adds	r3, r0, #0
}
 80056c2:	1c18      	adds	r0, r3, #0
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b002      	add	sp, #8
 80056c8:	bd80      	pop	{r7, pc}

080056ca <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	223c      	movs	r2, #60	@ 0x3c
 80056d6:	5c9b      	ldrb	r3, [r3, r2]
}
 80056d8:	0018      	movs	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	b002      	add	sp, #8
 80056de:	bd80      	pop	{r7, pc}

080056e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 80056e0:	b5b0      	push	{r4, r5, r7, lr}
 80056e2:	b08c      	sub	sp, #48	@ 0x30
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80056ec:	1c19      	adds	r1, r3, #0
 80056ee:	4895      	ldr	r0, [pc, #596]	@ (8005944 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80056f0:	f7fb fd12 	bl	8001118 <__aeabi_fsub>
 80056f4:	1c03      	adds	r3, r0, #0
 80056f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056fc:	1c19      	adds	r1, r3, #0
 80056fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005700:	f7fa fef8 	bl	80004f4 <__aeabi_fcmpgt>
 8005704:	1e03      	subs	r3, r0, #0
 8005706:	d00b      	beq.n	8005720 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8005710:	1c19      	adds	r1, r3, #0
 8005712:	1c10      	adds	r0, r2, #0
 8005714:	f7fb f852 	bl	80007bc <__aeabi_fadd>
 8005718:	1c03      	adds	r3, r0, #0
 800571a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005724:	1c19      	adds	r1, r3, #0
 8005726:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005728:	f7fa fee4 	bl	80004f4 <__aeabi_fcmpgt>
 800572c:	1e03      	subs	r3, r0, #0
 800572e:	d00b      	beq.n	8005748 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8005738:	1c19      	adds	r1, r3, #0
 800573a:	1c10      	adds	r0, r2, #0
 800573c:	f7fb f83e 	bl	80007bc <__aeabi_fadd>
 8005740:	1c03      	adds	r3, r0, #0
 8005742:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6959      	ldr	r1, [r3, #20]
 800574c:	4a7e      	ldr	r2, [pc, #504]	@ (8005948 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	0018      	movs	r0, r3
 8005752:	f000 f9f1 	bl	8005b38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	1c11      	adds	r1, r2, #0
 800575e:	0018      	movs	r0, r3
 8005760:	f000 f9fa 	bl	8005b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8005764:	1c03      	adds	r3, r0, #0
 8005766:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8005774:	1c19      	adds	r1, r3, #0
 8005776:	1c10      	adds	r0, r2, #0
 8005778:	f7fb fcce 	bl	8001118 <__aeabi_fsub>
 800577c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800577e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005780:	1c18      	adds	r0, r3, #0
 8005782:	f7fb fb8b 	bl	8000e9c <__aeabi_fmul>
 8005786:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8005788:	1c19      	adds	r1, r3, #0
 800578a:	1c20      	adds	r0, r4, #0
 800578c:	f7fb f816 	bl	80007bc <__aeabi_fadd>
 8005790:	1c03      	adds	r3, r0, #0
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800579c:	1c19      	adds	r1, r3, #0
 800579e:	486b      	ldr	r0, [pc, #428]	@ (800594c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80057a0:	f7fb fcba 	bl	8001118 <__aeabi_fsub>
 80057a4:	1c03      	adds	r3, r0, #0
 80057a6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	1c11      	adds	r1, r2, #0
 80057b0:	0018      	movs	r0, r3
 80057b2:	f000 f9d1 	bl	8005b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80057b6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80057b8:	1c19      	adds	r1, r3, #0
 80057ba:	1c28      	adds	r0, r5, #0
 80057bc:	f7fb fb6e 	bl	8000e9c <__aeabi_fmul>
 80057c0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 80057c2:	1c19      	adds	r1, r3, #0
 80057c4:	1c20      	adds	r0, r4, #0
 80057c6:	f7fa fff9 	bl	80007bc <__aeabi_fadd>
 80057ca:	1c03      	adds	r3, r0, #0
 80057cc:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80057ce:	4a60      	ldr	r2, [pc, #384]	@ (8005950 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80057d0:	6a39      	ldr	r1, [r7, #32]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	0018      	movs	r0, r3
 80057d6:	f000 f9af 	bl	8005b38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	1c11      	adds	r1, r2, #0
 80057e2:	0018      	movs	r0, r3
 80057e4:	f000 f9b8 	bl	8005b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80057e8:	1c03      	adds	r3, r0, #0
 80057ea:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80057ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057ee:	69f8      	ldr	r0, [r7, #28]
 80057f0:	f7fb fb54 	bl	8000e9c <__aeabi_fmul>
 80057f4:	1c03      	adds	r3, r0, #0
 80057f6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6999      	ldr	r1, [r3, #24]
 8005800:	4a51      	ldr	r2, [pc, #324]	@ (8005948 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	0018      	movs	r0, r3
 8005806:	f000 f997 	bl	8005b38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	1c11      	adds	r1, r2, #0
 8005812:	0018      	movs	r0, r3
 8005814:	f000 f9a0 	bl	8005b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8005818:	1c03      	adds	r3, r0, #0
 800581a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8005828:	1c19      	adds	r1, r3, #0
 800582a:	1c10      	adds	r0, r2, #0
 800582c:	f7fb fc74 	bl	8001118 <__aeabi_fsub>
 8005830:	1c03      	adds	r3, r0, #0
 8005832:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8005834:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005836:	69b8      	ldr	r0, [r7, #24]
 8005838:	f7fb fc6e 	bl	8001118 <__aeabi_fsub>
 800583c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800583e:	1c19      	adds	r1, r3, #0
 8005840:	1c28      	adds	r0, r5, #0
 8005842:	f7fb fb2b 	bl	8000e9c <__aeabi_fmul>
 8005846:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8005848:	1c19      	adds	r1, r3, #0
 800584a:	1c20      	adds	r0, r4, #0
 800584c:	f7fa ffb6 	bl	80007bc <__aeabi_fadd>
 8005850:	1c03      	adds	r3, r0, #0
 8005852:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800585c:	1c19      	adds	r1, r3, #0
 800585e:	483b      	ldr	r0, [pc, #236]	@ (800594c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8005860:	f7fb fc5a 	bl	8001118 <__aeabi_fsub>
 8005864:	1c03      	adds	r3, r0, #0
 8005866:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	1c11      	adds	r1, r2, #0
 8005870:	0018      	movs	r0, r3
 8005872:	f000 f971 	bl	8005b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8005876:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8005878:	1c19      	adds	r1, r3, #0
 800587a:	1c28      	adds	r0, r5, #0
 800587c:	f7fb fb0e 	bl	8000e9c <__aeabi_fmul>
 8005880:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8005882:	1c19      	adds	r1, r3, #0
 8005884:	1c20      	adds	r0, r4, #0
 8005886:	f7fa ff99 	bl	80007bc <__aeabi_fadd>
 800588a:	1c03      	adds	r3, r0, #0
 800588c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800588e:	4a30      	ldr	r2, [pc, #192]	@ (8005950 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8005890:	6939      	ldr	r1, [r7, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	0018      	movs	r0, r3
 8005896:	f000 f94f 	bl	8005b38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	1c11      	adds	r1, r2, #0
 80058a2:	0018      	movs	r0, r3
 80058a4:	f000 f958 	bl	8005b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80058a8:	1c03      	adds	r3, r0, #0
 80058aa:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 80058ac:	6979      	ldr	r1, [r7, #20]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7fb faf4 	bl	8000e9c <__aeabi_fmul>
 80058b4:	1c03      	adds	r3, r0, #0
 80058b6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4923      	ldr	r1, [pc, #140]	@ (8005954 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 80058c6:	1c18      	adds	r0, r3, #0
 80058c8:	f7fb f902 	bl	8000ad0 <__aeabi_fdiv>
 80058cc:	1c03      	adds	r3, r0, #0
 80058ce:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 80058d0:	69f9      	ldr	r1, [r7, #28]
 80058d2:	20fe      	movs	r0, #254	@ 0xfe
 80058d4:	0580      	lsls	r0, r0, #22
 80058d6:	f7fb fc1f 	bl	8001118 <__aeabi_fsub>
 80058da:	1c03      	adds	r3, r0, #0
 80058dc:	491e      	ldr	r1, [pc, #120]	@ (8005958 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 80058de:	1c18      	adds	r0, r3, #0
 80058e0:	f7fb fadc 	bl	8000e9c <__aeabi_fmul>
 80058e4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 80058e6:	491d      	ldr	r1, [pc, #116]	@ (800595c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 80058e8:	1c18      	adds	r0, r3, #0
 80058ea:	f7fb fc15 	bl	8001118 <__aeabi_fsub>
 80058ee:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80058f0:	1c19      	adds	r1, r3, #0
 80058f2:	1c28      	adds	r0, r5, #0
 80058f4:	f7fb fad2 	bl	8000e9c <__aeabi_fmul>
 80058f8:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80058fa:	1c19      	adds	r1, r3, #0
 80058fc:	1c20      	adds	r0, r4, #0
 80058fe:	f7fa ff5d 	bl	80007bc <__aeabi_fadd>
 8005902:	1c03      	adds	r3, r0, #0
 8005904:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590e:	2100      	movs	r1, #0
 8005910:	1c18      	adds	r0, r3, #0
 8005912:	f7fa fddb 	bl	80004cc <__aeabi_fcmplt>
 8005916:	1e03      	subs	r3, r0, #0
 8005918:	d002      	beq.n	8005920 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8005928:	1c19      	adds	r1, r3, #0
 800592a:	1c10      	adds	r0, r2, #0
 800592c:	f7fa fde2 	bl	80004f4 <__aeabi_fcmpgt>
 8005930:	1e03      	subs	r3, r0, #0
 8005932:	d100      	bne.n	8005936 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8005934:	e002      	b.n	800593c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800593c:	46c0      	nop			@ (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	b00c      	add	sp, #48	@ 0x30
 8005942:	bdb0      	pop	{r4, r5, r7, pc}
 8005944:	46fffe00 	.word	0x46fffe00
 8005948:	3c23d70a 	.word	0x3c23d70a
 800594c:	43ff0000 	.word	0x43ff0000
 8005950:	3db851ec 	.word	0x3db851ec
 8005954:	42700000 	.word	0x42700000
 8005958:	3fa66666 	.word	0x3fa66666
 800595c:	3e99999a 	.word	0x3e99999a

08005960 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8005960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	223c      	movs	r2, #60	@ 0x3c
 800596e:	5c9b      	ldrb	r3, [r3, r2]
 8005970:	2201      	movs	r2, #1
 8005972:	4053      	eors	r3, r2
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	223c      	movs	r2, #60	@ 0x3c
 800597e:	2101      	movs	r1, #1
 8005980:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800598e:	e0c8      	b.n	8005b22 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	4965      	ldr	r1, [pc, #404]	@ (8005b2c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8005996:	1c18      	adds	r0, r3, #0
 8005998:	f7fa fdb6 	bl	8000508 <__aeabi_fcmpge>
 800599c:	1e03      	subs	r3, r0, #0
 800599e:	d107      	bne.n	80059b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80059a4:	4962      	ldr	r1, [pc, #392]	@ (8005b30 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 80059a6:	1c18      	adds	r0, r3, #0
 80059a8:	f7fa fd9a 	bl	80004e0 <__aeabi_fcmple>
 80059ac:	1e03      	subs	r3, r0, #0
 80059ae:	d00e      	beq.n	80059ce <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80059b8:	1c19      	adds	r1, r3, #0
 80059ba:	1c10      	adds	r0, r2, #0
 80059bc:	f7fa fefe 	bl	80007bc <__aeabi_fadd>
 80059c0:	1c03      	adds	r3, r0, #0
 80059c2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d2:	1c19      	adds	r1, r3, #0
 80059d4:	6838      	ldr	r0, [r7, #0]
 80059d6:	f7fb fb9f 	bl	8001118 <__aeabi_fsub>
 80059da:	1c03      	adds	r3, r0, #0
 80059dc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff fe7d 	bl	80056e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	1c19      	adds	r1, r3, #0
 80059ec:	6838      	ldr	r0, [r7, #0]
 80059ee:	f7fb fb93 	bl	8001118 <__aeabi_fsub>
 80059f2:	1c03      	adds	r3, r0, #0
 80059f4:	2185      	movs	r1, #133	@ 0x85
 80059f6:	05c9      	lsls	r1, r1, #23
 80059f8:	1c18      	adds	r0, r3, #0
 80059fa:	f7fb f869 	bl	8000ad0 <__aeabi_fdiv>
 80059fe:	1c03      	adds	r3, r0, #0
 8005a00:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8005a02:	2100      	movs	r1, #0
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7fa fd61 	bl	80004cc <__aeabi_fcmplt>
 8005a0a:	1e03      	subs	r3, r0, #0
 8005a0c:	d008      	beq.n	8005a20 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	1c18      	adds	r0, r3, #0
 8005a16:	f7fb fb7f 	bl	8001118 <__aeabi_fsub>
 8005a1a:	1c03      	adds	r3, r0, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e007      	b.n	8005a30 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a24:	1c19      	adds	r1, r3, #0
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f7fa fec8 	bl	80007bc <__aeabi_fadd>
 8005a2c:	1c03      	adds	r3, r0, #0
 8005a2e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8005a30:	23fe      	movs	r3, #254	@ 0xfe
 8005a32:	059b      	lsls	r3, r3, #22
 8005a34:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8005a36:	493f      	ldr	r1, [pc, #252]	@ (8005b34 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8005a38:	6978      	ldr	r0, [r7, #20]
 8005a3a:	f7fa fd5b 	bl	80004f4 <__aeabi_fcmpgt>
 8005a3e:	1e03      	subs	r3, r0, #0
 8005a40:	d010      	beq.n	8005a64 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8005a42:	493c      	ldr	r1, [pc, #240]	@ (8005b34 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8005a44:	6978      	ldr	r0, [r7, #20]
 8005a46:	f7fb f843 	bl	8000ad0 <__aeabi_fdiv>
 8005a4a:	1c03      	adds	r3, r0, #0
 8005a4c:	1c1c      	adds	r4, r3, #0
 8005a4e:	4939      	ldr	r1, [pc, #228]	@ (8005b34 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8005a50:	6978      	ldr	r0, [r7, #20]
 8005a52:	f7fb f83d 	bl	8000ad0 <__aeabi_fdiv>
 8005a56:	1c03      	adds	r3, r0, #0
 8005a58:	1c19      	adds	r1, r3, #0
 8005a5a:	1c20      	adds	r0, r4, #0
 8005a5c:	f7fb fa1e 	bl	8000e9c <__aeabi_fmul>
 8005a60:	1c03      	adds	r3, r0, #0
 8005a62:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8005a68:	1c19      	adds	r1, r3, #0
 8005a6a:	2085      	movs	r0, #133	@ 0x85
 8005a6c:	05c0      	lsls	r0, r0, #23
 8005a6e:	f7fb fb53 	bl	8001118 <__aeabi_fsub>
 8005a72:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8005a74:	6939      	ldr	r1, [r7, #16]
 8005a76:	1c18      	adds	r0, r3, #0
 8005a78:	f7fb fa10 	bl	8000e9c <__aeabi_fmul>
 8005a7c:	1c03      	adds	r3, r0, #0
 8005a7e:	1c18      	adds	r0, r3, #0
 8005a80:	f00b fa3a 	bl	8010ef8 <sqrtf>
 8005a84:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8005a8e:	2185      	movs	r1, #133	@ 0x85
 8005a90:	05c9      	lsls	r1, r1, #23
 8005a92:	6938      	ldr	r0, [r7, #16]
 8005a94:	f7fb fa02 	bl	8000e9c <__aeabi_fmul>
 8005a98:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8005a9a:	1c19      	adds	r1, r3, #0
 8005a9c:	1c28      	adds	r0, r5, #0
 8005a9e:	f7fb f817 	bl	8000ad0 <__aeabi_fdiv>
 8005aa2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8005aa4:	1c19      	adds	r1, r3, #0
 8005aa6:	1c20      	adds	r0, r4, #0
 8005aa8:	f7fb f9f8 	bl	8000e9c <__aeabi_fmul>
 8005aac:	1c03      	adds	r3, r0, #0
 8005aae:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab4:	68f9      	ldr	r1, [r7, #12]
 8005ab6:	1c18      	adds	r0, r3, #0
 8005ab8:	f7fb f9f0 	bl	8000e9c <__aeabi_fmul>
 8005abc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8005abe:	6939      	ldr	r1, [r7, #16]
 8005ac0:	1c18      	adds	r0, r3, #0
 8005ac2:	f7fb f805 	bl	8000ad0 <__aeabi_fdiv>
 8005ac6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8005ac8:	68f9      	ldr	r1, [r7, #12]
 8005aca:	1c18      	adds	r0, r3, #0
 8005acc:	f7fb f9e6 	bl	8000e9c <__aeabi_fmul>
 8005ad0:	1c03      	adds	r3, r0, #0
             sqrtf(
 8005ad2:	1c19      	adds	r1, r3, #0
 8005ad4:	1c20      	adds	r0, r4, #0
 8005ad6:	f7fa fe71 	bl	80007bc <__aeabi_fadd>
 8005ada:	1c03      	adds	r3, r0, #0
 8005adc:	1c18      	adds	r0, r3, #0
 8005ade:	f00b fa0b 	bl	8010ef8 <sqrtf>
 8005ae2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8005ae4:	1c19      	adds	r1, r3, #0
 8005ae6:	1c30      	adds	r0, r6, #0
 8005ae8:	f7fb f9d8 	bl	8000e9c <__aeabi_fmul>
 8005aec:	1c03      	adds	r3, r0, #0
 8005aee:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afc:	68f9      	ldr	r1, [r7, #12]
 8005afe:	1c18      	adds	r0, r3, #0
 8005b00:	f7fb f9cc 	bl	8000e9c <__aeabi_fmul>
 8005b04:	1c03      	adds	r3, r0, #0
 8005b06:	2182      	movs	r1, #130	@ 0x82
 8005b08:	05c9      	lsls	r1, r1, #23
 8005b0a:	1c18      	adds	r0, r3, #0
 8005b0c:	f7fa ffe0 	bl	8000ad0 <__aeabi_fdiv>
 8005b10:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8005b12:	1c19      	adds	r1, r3, #0
 8005b14:	1c20      	adds	r0, r4, #0
 8005b16:	f7fa fe51 	bl	80007bc <__aeabi_fadd>
 8005b1a:	1c03      	adds	r3, r0, #0
 8005b1c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	46bd      	mov	sp, r7
 8005b26:	b007      	add	sp, #28
 8005b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b2a:	46c0      	nop			@ (mov r8, r8)
 8005b2c:	42c80000 	.word	0x42c80000
 8005b30:	c2c80000 	.word	0xc2c80000
 8005b34:	44b40000 	.word	0x44b40000

08005b38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b50:	46c0      	nop			@ (mov r8, r8)
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b004      	add	sp, #16
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b6a:	1c19      	adds	r1, r3, #0
 8005b6c:	6838      	ldr	r0, [r7, #0]
 8005b6e:	f7fb fad3 	bl	8001118 <__aeabi_fsub>
 8005b72:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8005b74:	1c19      	adds	r1, r3, #0
 8005b76:	1c20      	adds	r0, r4, #0
 8005b78:	f7fb f990 	bl	8000e9c <__aeabi_fmul>
 8005b7c:	1c03      	adds	r3, r0, #0
 8005b7e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8005b80:	4912      	ldr	r1, [pc, #72]	@ (8005bcc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7fa fca2 	bl	80004cc <__aeabi_fcmplt>
 8005b88:	1e03      	subs	r3, r0, #0
 8005b8a:	d002      	beq.n	8005b92 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8005b8c:	23fe      	movs	r3, #254	@ 0xfe
 8005b8e:	059b      	lsls	r3, r3, #22
 8005b90:	e018      	b.n	8005bc4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8005b92:	490f      	ldr	r1, [pc, #60]	@ (8005bd0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7fa fcad 	bl	80004f4 <__aeabi_fcmpgt>
 8005b9a:	1e03      	subs	r3, r0, #0
 8005b9c:	d001      	beq.n	8005ba2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e010      	b.n	8005bc4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1c18      	adds	r0, r3, #0
 8005ba6:	f00b f97f 	bl	8010ea8 <expf>
 8005baa:	1c03      	adds	r3, r0, #0
 8005bac:	21fe      	movs	r1, #254	@ 0xfe
 8005bae:	0589      	lsls	r1, r1, #22
 8005bb0:	1c18      	adds	r0, r3, #0
 8005bb2:	f7fa fe03 	bl	80007bc <__aeabi_fadd>
 8005bb6:	1c03      	adds	r3, r0, #0
 8005bb8:	1c19      	adds	r1, r3, #0
 8005bba:	20fe      	movs	r0, #254	@ 0xfe
 8005bbc:	0580      	lsls	r0, r0, #22
 8005bbe:	f7fa ff87 	bl	8000ad0 <__aeabi_fdiv>
 8005bc2:	1c03      	adds	r3, r0, #0
    }
}
 8005bc4:	1c18      	adds	r0, r3, #0
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b005      	add	sp, #20
 8005bca:	bd90      	pop	{r4, r7, pc}
 8005bcc:	c2480000 	.word	0xc2480000
 8005bd0:	42480000 	.word	0x42480000

08005bd4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005bec:	46c0      	nop			@ (mov r8, r8)
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b004      	add	sp, #16
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d114      	bne.n	8005c30 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c0a:	1c19      	adds	r1, r3, #0
 8005c0c:	6838      	ldr	r0, [r7, #0]
 8005c0e:	f7fb fa83 	bl	8001118 <__aeabi_fsub>
 8005c12:	1c03      	adds	r3, r0, #0
 8005c14:	4918      	ldr	r1, [pc, #96]	@ (8005c78 <GasIndexAlgorithm__mox_model__process+0x84>)
 8005c16:	1c18      	adds	r0, r3, #0
 8005c18:	f7fa ff5a 	bl	8000ad0 <__aeabi_fdiv>
 8005c1c:	1c03      	adds	r3, r0, #0
 8005c1e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8005c24:	1c19      	adds	r1, r3, #0
 8005c26:	1c10      	adds	r0, r2, #0
 8005c28:	f7fb f938 	bl	8000e9c <__aeabi_fmul>
 8005c2c:	1c03      	adds	r3, r0, #0
 8005c2e:	e01f      	b.n	8005c70 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c34:	1c19      	adds	r1, r3, #0
 8005c36:	6838      	ldr	r0, [r7, #0]
 8005c38:	f7fb fa6e 	bl	8001118 <__aeabi_fsub>
 8005c3c:	1c03      	adds	r3, r0, #0
 8005c3e:	1c1a      	adds	r2, r3, #0
 8005c40:	2380      	movs	r3, #128	@ 0x80
 8005c42:	061b      	lsls	r3, r3, #24
 8005c44:	4053      	eors	r3, r2
 8005c46:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c4c:	490b      	ldr	r1, [pc, #44]	@ (8005c7c <GasIndexAlgorithm__mox_model__process+0x88>)
 8005c4e:	1c18      	adds	r0, r3, #0
 8005c50:	f7fa fdb4 	bl	80007bc <__aeabi_fadd>
 8005c54:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8005c56:	1c19      	adds	r1, r3, #0
 8005c58:	1c20      	adds	r0, r4, #0
 8005c5a:	f7fa ff39 	bl	8000ad0 <__aeabi_fdiv>
 8005c5e:	1c03      	adds	r3, r0, #0
 8005c60:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8005c66:	1c19      	adds	r1, r3, #0
 8005c68:	1c10      	adds	r0, r2, #0
 8005c6a:	f7fb f917 	bl	8000e9c <__aeabi_fmul>
 8005c6e:	1c03      	adds	r3, r0, #0
    }
}
 8005c70:	1c18      	adds	r0, r3, #0
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b003      	add	sp, #12
 8005c76:	bd90      	pop	{r4, r7, pc}
 8005c78:	44fa0000 	.word	0x44fa0000
 8005c7c:	435c0000 	.word	0x435c0000

08005c80 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2180      	movs	r1, #128	@ 0x80
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2184      	movs	r1, #132	@ 0x84
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2188      	movs	r1, #136	@ 0x88
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	505a      	str	r2, [r3, r1]
}
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b004      	add	sp, #16
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2280      	movs	r2, #128	@ 0x80
 8005cbe:	589c      	ldr	r4, [r3, r2]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2284      	movs	r2, #132	@ 0x84
 8005cc4:	589b      	ldr	r3, [r3, r2]
 8005cc6:	1c19      	adds	r1, r3, #0
 8005cc8:	6838      	ldr	r0, [r7, #0]
 8005cca:	f7fb fa25 	bl	8001118 <__aeabi_fsub>
 8005cce:	1c03      	adds	r3, r0, #0
 8005cd0:	1c19      	adds	r1, r3, #0
 8005cd2:	1c20      	adds	r0, r4, #0
 8005cd4:	f7fb f8e2 	bl	8000e9c <__aeabi_fmul>
 8005cd8:	1c03      	adds	r3, r0, #0
 8005cda:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8005cdc:	4940      	ldr	r1, [pc, #256]	@ (8005de0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8005cde:	68b8      	ldr	r0, [r7, #8]
 8005ce0:	f7fa fbf4 	bl	80004cc <__aeabi_fcmplt>
 8005ce4:	1e03      	subs	r3, r0, #0
 8005ce6:	d001      	beq.n	8005cec <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8005ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8005de4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005cea:	e075      	b.n	8005dd8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8005cec:	493e      	ldr	r1, [pc, #248]	@ (8005de8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8005cee:	68b8      	ldr	r0, [r7, #8]
 8005cf0:	f7fa fc00 	bl	80004f4 <__aeabi_fcmpgt>
 8005cf4:	1e03      	subs	r3, r0, #0
 8005cf6:	d001      	beq.n	8005cfc <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e06d      	b.n	8005dd8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	6838      	ldr	r0, [r7, #0]
 8005d00:	f7fa fc02 	bl	8000508 <__aeabi_fcmpge>
 8005d04:	1e03      	subs	r3, r0, #0
 8005d06:	d047      	beq.n	8005d98 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2288      	movs	r2, #136	@ 0x88
 8005d0c:	589b      	ldr	r3, [r3, r2]
 8005d0e:	21fe      	movs	r1, #254	@ 0xfe
 8005d10:	0589      	lsls	r1, r1, #22
 8005d12:	1c18      	adds	r0, r3, #0
 8005d14:	f7fa fbd4 	bl	80004c0 <__aeabi_fcmpeq>
 8005d18:	1e03      	subs	r3, r0, #0
 8005d1a:	d00e      	beq.n	8005d3a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	1c19      	adds	r1, r3, #0
 8005d22:	20fe      	movs	r0, #254	@ 0xfe
 8005d24:	0580      	lsls	r0, r0, #22
 8005d26:	f7fb f9f7 	bl	8001118 <__aeabi_fsub>
 8005d2a:	1c03      	adds	r3, r0, #0
 8005d2c:	492f      	ldr	r1, [pc, #188]	@ (8005dec <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8005d2e:	1c18      	adds	r0, r3, #0
 8005d30:	f7fb f8b4 	bl	8000e9c <__aeabi_fmul>
 8005d34:	1c03      	adds	r3, r0, #0
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e012      	b.n	8005d60 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	492c      	ldr	r1, [pc, #176]	@ (8005df0 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8005d40:	1c18      	adds	r0, r3, #0
 8005d42:	f7fb f8ab 	bl	8000e9c <__aeabi_fmul>
 8005d46:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8005d48:	1c19      	adds	r1, r3, #0
 8005d4a:	4826      	ldr	r0, [pc, #152]	@ (8005de4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005d4c:	f7fb f9e4 	bl	8001118 <__aeabi_fsub>
 8005d50:	1c03      	adds	r3, r0, #0
 8005d52:	2181      	movs	r1, #129	@ 0x81
 8005d54:	05c9      	lsls	r1, r1, #23
 8005d56:	1c18      	adds	r0, r3, #0
 8005d58:	f7fa feba 	bl	8000ad0 <__aeabi_fdiv>
 8005d5c:	1c03      	adds	r3, r0, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8005d60:	4920      	ldr	r1, [pc, #128]	@ (8005de4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7fa fd2a 	bl	80007bc <__aeabi_fadd>
 8005d68:	1c03      	adds	r3, r0, #0
 8005d6a:	1c1c      	adds	r4, r3, #0
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	1c18      	adds	r0, r3, #0
 8005d70:	f00b f89a 	bl	8010ea8 <expf>
 8005d74:	1c03      	adds	r3, r0, #0
 8005d76:	21fe      	movs	r1, #254	@ 0xfe
 8005d78:	0589      	lsls	r1, r1, #22
 8005d7a:	1c18      	adds	r0, r3, #0
 8005d7c:	f7fa fd1e 	bl	80007bc <__aeabi_fadd>
 8005d80:	1c03      	adds	r3, r0, #0
 8005d82:	1c19      	adds	r1, r3, #0
 8005d84:	1c20      	adds	r0, r4, #0
 8005d86:	f7fa fea3 	bl	8000ad0 <__aeabi_fdiv>
 8005d8a:	1c03      	adds	r3, r0, #0
 8005d8c:	68f9      	ldr	r1, [r7, #12]
 8005d8e:	1c18      	adds	r0, r3, #0
 8005d90:	f7fb f9c2 	bl	8001118 <__aeabi_fsub>
 8005d94:	1c03      	adds	r3, r0, #0
 8005d96:	e01f      	b.n	8005dd8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2188      	movs	r1, #136	@ 0x88
 8005da0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8005da2:	1c19      	adds	r1, r3, #0
 8005da4:	1c10      	adds	r0, r2, #0
 8005da6:	f7fa fe93 	bl	8000ad0 <__aeabi_fdiv>
 8005daa:	1c03      	adds	r3, r0, #0
 8005dac:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	1c18      	adds	r0, r3, #0
 8005db2:	f00b f879 	bl	8010ea8 <expf>
 8005db6:	1c03      	adds	r3, r0, #0
 8005db8:	21fe      	movs	r1, #254	@ 0xfe
 8005dba:	0589      	lsls	r1, r1, #22
 8005dbc:	1c18      	adds	r0, r3, #0
 8005dbe:	f7fa fcfd 	bl	80007bc <__aeabi_fadd>
 8005dc2:	1c03      	adds	r3, r0, #0
 8005dc4:	1c19      	adds	r1, r3, #0
 8005dc6:	4807      	ldr	r0, [pc, #28]	@ (8005de4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8005dc8:	f7fa fe82 	bl	8000ad0 <__aeabi_fdiv>
 8005dcc:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8005dce:	1c19      	adds	r1, r3, #0
 8005dd0:	1c20      	adds	r0, r4, #0
 8005dd2:	f7fb f863 	bl	8000e9c <__aeabi_fmul>
 8005dd6:	1c03      	adds	r3, r0, #0
        }
    }
}
 8005dd8:	1c18      	adds	r0, r3, #0
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b005      	add	sp, #20
 8005dde:	bd90      	pop	{r4, r7, pc}
 8005de0:	c2480000 	.word	0xc2480000
 8005de4:	43fa0000 	.word	0x43fa0000
 8005de8:	42480000 	.word	0x42480000
 8005dec:	3f8041ab 	.word	0x3f8041ab
 8005df0:	40a00000 	.word	0x40a00000

08005df4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4913      	ldr	r1, [pc, #76]	@ (8005e54 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8005e06:	1c18      	adds	r0, r3, #0
 8005e08:	f7fa fcd8 	bl	80007bc <__aeabi_fadd>
 8005e0c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8005e0e:	1c19      	adds	r1, r3, #0
 8005e10:	1c20      	adds	r0, r4, #0
 8005e12:	f7fa fe5d 	bl	8000ad0 <__aeabi_fdiv>
 8005e16:	1c03      	adds	r3, r0, #0
 8005e18:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	228c      	movs	r2, #140	@ 0x8c
 8005e1e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	490b      	ldr	r1, [pc, #44]	@ (8005e58 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8005e2a:	1c18      	adds	r0, r3, #0
 8005e2c:	f7fa fcc6 	bl	80007bc <__aeabi_fadd>
 8005e30:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8005e32:	1c19      	adds	r1, r3, #0
 8005e34:	1c20      	adds	r0, r4, #0
 8005e36:	f7fa fe4b 	bl	8000ad0 <__aeabi_fdiv>
 8005e3a:	1c03      	adds	r3, r0, #0
 8005e3c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2290      	movs	r2, #144	@ 0x90
 8005e42:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2294      	movs	r2, #148	@ 0x94
 8005e48:	2100      	movs	r1, #0
 8005e4a:	5499      	strb	r1, [r3, r2]
}
 8005e4c:	46c0      	nop			@ (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b003      	add	sp, #12
 8005e52:	bd90      	pop	{r4, r7, pc}
 8005e54:	41a00000 	.word	0x41a00000
 8005e58:	43fa0000 	.word	0x43fa0000

08005e5c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8005e5c:	b590      	push	{r4, r7, lr}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2294      	movs	r2, #148	@ 0x94
 8005e6a:	5c9b      	ldrb	r3, [r3, r2]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4053      	eors	r3, r2
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2198      	movs	r1, #152	@ 0x98
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	219c      	movs	r1, #156	@ 0x9c
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	21a0      	movs	r1, #160	@ 0xa0
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2294      	movs	r2, #148	@ 0x94
 8005e92:	2101      	movs	r1, #1
 8005e94:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	228c      	movs	r2, #140	@ 0x8c
 8005e9a:	589b      	ldr	r3, [r3, r2]
 8005e9c:	1c19      	adds	r1, r3, #0
 8005e9e:	20fe      	movs	r0, #254	@ 0xfe
 8005ea0:	0580      	lsls	r0, r0, #22
 8005ea2:	f7fb f939 	bl	8001118 <__aeabi_fsub>
 8005ea6:	1c03      	adds	r3, r0, #0
 8005ea8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2298      	movs	r2, #152	@ 0x98
 8005eae:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8005eb0:	1c19      	adds	r1, r3, #0
 8005eb2:	f7fa fff3 	bl	8000e9c <__aeabi_fmul>
 8005eb6:	1c03      	adds	r3, r0, #0
 8005eb8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	228c      	movs	r2, #140	@ 0x8c
 8005ebe:	589b      	ldr	r3, [r3, r2]
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	1c18      	adds	r0, r3, #0
 8005ec4:	f7fa ffea 	bl	8000e9c <__aeabi_fmul>
 8005ec8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8005eca:	1c19      	adds	r1, r3, #0
 8005ecc:	1c20      	adds	r0, r4, #0
 8005ece:	f7fa fc75 	bl	80007bc <__aeabi_fadd>
 8005ed2:	1c03      	adds	r3, r0, #0
 8005ed4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2298      	movs	r2, #152	@ 0x98
 8005eda:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2290      	movs	r2, #144	@ 0x90
 8005ee0:	589b      	ldr	r3, [r3, r2]
 8005ee2:	1c19      	adds	r1, r3, #0
 8005ee4:	20fe      	movs	r0, #254	@ 0xfe
 8005ee6:	0580      	lsls	r0, r0, #22
 8005ee8:	f7fb f916 	bl	8001118 <__aeabi_fsub>
 8005eec:	1c03      	adds	r3, r0, #0
 8005eee:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	229c      	movs	r2, #156	@ 0x9c
 8005ef4:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8005ef6:	1c19      	adds	r1, r3, #0
 8005ef8:	f7fa ffd0 	bl	8000e9c <__aeabi_fmul>
 8005efc:	1c03      	adds	r3, r0, #0
 8005efe:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2290      	movs	r2, #144	@ 0x90
 8005f04:	589b      	ldr	r3, [r3, r2]
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	1c18      	adds	r0, r3, #0
 8005f0a:	f7fa ffc7 	bl	8000e9c <__aeabi_fmul>
 8005f0e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8005f10:	1c19      	adds	r1, r3, #0
 8005f12:	1c20      	adds	r0, r4, #0
 8005f14:	f7fa fc52 	bl	80007bc <__aeabi_fadd>
 8005f18:	1c03      	adds	r3, r0, #0
 8005f1a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	229c      	movs	r2, #156	@ 0x9c
 8005f20:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2298      	movs	r2, #152	@ 0x98
 8005f26:	589a      	ldr	r2, [r3, r2]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	219c      	movs	r1, #156	@ 0x9c
 8005f2c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8005f2e:	1c19      	adds	r1, r3, #0
 8005f30:	1c10      	adds	r0, r2, #0
 8005f32:	f7fb f8f1 	bl	8001118 <__aeabi_fsub>
 8005f36:	1c03      	adds	r3, r0, #0
 8005f38:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6978      	ldr	r0, [r7, #20]
 8005f3e:	f7fa fac5 	bl	80004cc <__aeabi_fcmplt>
 8005f42:	1e03      	subs	r3, r0, #0
 8005f44:	d004      	beq.n	8005f50 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2280      	movs	r2, #128	@ 0x80
 8005f4a:	0612      	lsls	r2, r2, #24
 8005f4c:	4053      	eors	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8005f50:	4923      	ldr	r1, [pc, #140]	@ (8005fe0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f7fa ffa2 	bl	8000e9c <__aeabi_fmul>
 8005f58:	1c03      	adds	r3, r0, #0
 8005f5a:	1c18      	adds	r0, r3, #0
 8005f5c:	f00a ffa4 	bl	8010ea8 <expf>
 8005f60:	1c03      	adds	r3, r0, #0
 8005f62:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8005f64:	491f      	ldr	r1, [pc, #124]	@ (8005fe4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f7fa ff98 	bl	8000e9c <__aeabi_fmul>
 8005f6c:	1c03      	adds	r3, r0, #0
 8005f6e:	491e      	ldr	r1, [pc, #120]	@ (8005fe8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8005f70:	1c18      	adds	r0, r3, #0
 8005f72:	f7fa fc23 	bl	80007bc <__aeabi_fadd>
 8005f76:	1c03      	adds	r3, r0, #0
 8005f78:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685c      	ldr	r4, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	1c18      	adds	r0, r3, #0
 8005f86:	f7fa fc19 	bl	80007bc <__aeabi_fadd>
 8005f8a:	1c03      	adds	r3, r0, #0
 8005f8c:	1c19      	adds	r1, r3, #0
 8005f8e:	1c20      	adds	r0, r4, #0
 8005f90:	f7fa fd9e 	bl	8000ad0 <__aeabi_fdiv>
 8005f94:	1c03      	adds	r3, r0, #0
 8005f96:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	20fe      	movs	r0, #254	@ 0xfe
 8005f9c:	0580      	lsls	r0, r0, #22
 8005f9e:	f7fb f8bb 	bl	8001118 <__aeabi_fsub>
 8005fa2:	1c03      	adds	r3, r0, #0
 8005fa4:	1c18      	adds	r0, r3, #0
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	22a0      	movs	r2, #160	@ 0xa0
 8005faa:	589b      	ldr	r3, [r3, r2]
 8005fac:	1c19      	adds	r1, r3, #0
 8005fae:	f7fa ff75 	bl	8000e9c <__aeabi_fmul>
 8005fb2:	1c03      	adds	r3, r0, #0
 8005fb4:	1c1c      	adds	r4, r3, #0
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	68b8      	ldr	r0, [r7, #8]
 8005fba:	f7fa ff6f 	bl	8000e9c <__aeabi_fmul>
 8005fbe:	1c03      	adds	r3, r0, #0
 8005fc0:	1c19      	adds	r1, r3, #0
 8005fc2:	1c20      	adds	r0, r4, #0
 8005fc4:	f7fa fbfa 	bl	80007bc <__aeabi_fadd>
 8005fc8:	1c03      	adds	r3, r0, #0
 8005fca:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	22a0      	movs	r2, #160	@ 0xa0
 8005fd0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	22a0      	movs	r2, #160	@ 0xa0
 8005fd6:	589b      	ldr	r3, [r3, r2]
}
 8005fd8:	1c18      	adds	r0, r3, #0
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b007      	add	sp, #28
 8005fde:	bd90      	pop	{r4, r7, pc}
 8005fe0:	be4ccccd 	.word	0xbe4ccccd
 8005fe4:	43f00000 	.word	0x43f00000
 8005fe8:	41a00000 	.word	0x41a00000

08005fec <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6039      	str	r1, [r7, #0]
 8005ff4:	0011      	movs	r1, r2
 8005ff6:	1dfb      	adds	r3, r7, #7
 8005ff8:	1c02      	adds	r2, r0, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	1dbb      	adds	r3, r7, #6
 8005ffe:	1c0a      	adds	r2, r1, #0
 8006000:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8006002:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <ReadRegister+0x38>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d008      	beq.n	800601c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800600a:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <ReadRegister+0x38>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	1dba      	adds	r2, r7, #6
 8006010:	7814      	ldrb	r4, [r2, #0]
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	1dfa      	adds	r2, r7, #7
 8006016:	7810      	ldrb	r0, [r2, #0]
 8006018:	0022      	movs	r2, r4
 800601a:	4798      	blx	r3
  }
}
 800601c:	46c0      	nop			@ (mov r8, r8)
 800601e:	46bd      	mov	sp, r7
 8006020:	b003      	add	sp, #12
 8006022:	bd90      	pop	{r4, r7, pc}
 8006024:	20000aa0 	.word	0x20000aa0

08006028 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8006028:	b590      	push	{r4, r7, lr}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6039      	str	r1, [r7, #0]
 8006030:	0011      	movs	r1, r2
 8006032:	1dfb      	adds	r3, r7, #7
 8006034:	1c02      	adds	r2, r0, #0
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	1dbb      	adds	r3, r7, #6
 800603a:	1c0a      	adds	r2, r1, #0
 800603c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800603e:	4b08      	ldr	r3, [pc, #32]	@ (8006060 <WriteRegister+0x38>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d008      	beq.n	8006058 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <WriteRegister+0x38>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	1dba      	adds	r2, r7, #6
 800604c:	7814      	ldrb	r4, [r2, #0]
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	1dfa      	adds	r2, r7, #7
 8006052:	7810      	ldrb	r0, [r2, #0]
 8006054:	0022      	movs	r2, r4
 8006056:	4798      	blx	r3
  }
}
 8006058:	46c0      	nop			@ (mov r8, r8)
 800605a:	46bd      	mov	sp, r7
 800605c:	b003      	add	sp, #12
 800605e:	bd90      	pop	{r4, r7, pc}
 8006060:	20000aa4 	.word	0x20000aa4

08006064 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800606e:	4b07      	ldr	r3, [pc, #28]	@ (800608c <SGP_Init+0x28>)
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8006074:	4b06      	ldr	r3, [pc, #24]	@ (8006090 <SGP_Init+0x2c>)
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800607a:	4b06      	ldr	r3, [pc, #24]	@ (8006094 <SGP_Init+0x30>)
 800607c:	2100      	movs	r1, #0
 800607e:	0018      	movs	r0, r3
 8006080:	f7ff f930 	bl	80052e4 <GasIndexAlgorithm_init>
}
 8006084:	46c0      	nop			@ (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000aa0 	.word	0x20000aa0
 8006090:	20000aa4 	.word	0x20000aa4
 8006094:	20000ab4 	.word	0x20000ab4

08006098 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800609c:	4b13      	ldr	r3, [pc, #76]	@ (80060ec <SGP_StartMeasurement+0x54>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00d      	beq.n	80060c0 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80060a4:	4b12      	ldr	r3, [pc, #72]	@ (80060f0 <SGP_StartMeasurement+0x58>)
 80060a6:	2208      	movs	r2, #8
 80060a8:	0019      	movs	r1, r3
 80060aa:	2059      	movs	r0, #89	@ 0x59
 80060ac:	f7ff ffbc 	bl	8006028 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80060b0:	f001 f98c 	bl	80073cc <GetCurrentHalTicks>
 80060b4:	0003      	movs	r3, r0
 80060b6:	331e      	adds	r3, #30
 80060b8:	001a      	movs	r2, r3
 80060ba:	4b0e      	ldr	r3, [pc, #56]	@ (80060f4 <SGP_StartMeasurement+0x5c>)
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e00c      	b.n	80060da <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80060c0:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <SGP_StartMeasurement+0x60>)
 80060c2:	2208      	movs	r2, #8
 80060c4:	0019      	movs	r1, r3
 80060c6:	2059      	movs	r0, #89	@ 0x59
 80060c8:	f7ff ffae 	bl	8006028 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80060cc:	f001 f97e 	bl	80073cc <GetCurrentHalTicks>
 80060d0:	0003      	movs	r3, r0
 80060d2:	33aa      	adds	r3, #170	@ 0xaa
 80060d4:	001a      	movs	r2, r3
 80060d6:	4b09      	ldr	r3, [pc, #36]	@ (80060fc <SGP_StartMeasurement+0x64>)
 80060d8:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80060da:	4b09      	ldr	r3, [pc, #36]	@ (8006100 <SGP_StartMeasurement+0x68>)
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 80060e0:	4b08      	ldr	r3, [pc, #32]	@ (8006104 <SGP_StartMeasurement+0x6c>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
}
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20000b5c 	.word	0x20000b5c
 80060f0:	20000040 	.word	0x20000040
 80060f4:	20000054 	.word	0x20000054
 80060f8:	20000038 	.word	0x20000038
 80060fc:	2000004c 	.word	0x2000004c
 8006100:	20000ab2 	.word	0x20000ab2
 8006104:	20000ab3 	.word	0x20000ab3

08006108 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
 800610c:	4b04      	ldr	r3, [pc, #16]	@ (8006120 <SGP_HeatedUp+0x18>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	0018      	movs	r0, r3
 8006112:	f001 f879 	bl	8007208 <TimestampIsReached>
 8006116:	0003      	movs	r3, r0
 8006118:	0018      	movs	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	46c0      	nop			@ (mov r8, r8)
 8006120:	2000004c 	.word	0x2000004c

08006124 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8006128:	4b04      	ldr	r3, [pc, #16]	@ (800613c <SGP_MeasurementReady+0x18>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	0018      	movs	r0, r3
 800612e:	f001 f86b 	bl	8007208 <TimestampIsReached>
 8006132:	0003      	movs	r3, r0
}
 8006134:	0018      	movs	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	20000054 	.word	0x20000054

08006140 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8006144:	4b04      	ldr	r3, [pc, #16]	@ (8006158 <SGP_MeasurementDone+0x18>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	0018      	movs	r0, r3
 800614a:	f001 f85d 	bl	8007208 <TimestampIsReached>
 800614e:	0003      	movs	r3, r0
}
 8006150:	0018      	movs	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	20000050 	.word	0x20000050

0800615c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8006160:	4b04      	ldr	r3, [pc, #16]	@ (8006174 <SGP_TurnHeaterOff+0x18>)
 8006162:	2202      	movs	r2, #2
 8006164:	0019      	movs	r1, r3
 8006166:	2059      	movs	r0, #89	@ 0x59
 8006168:	f7ff ff5e 	bl	8006028 <WriteRegister>
}
 800616c:	46c0      	nop			@ (mov r8, r8)
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	20000030 	.word	0x20000030

08006178 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8006178:	b5b0      	push	{r4, r5, r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af02      	add	r7, sp, #8
 800617e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8006180:	f7ff ffc2 	bl	8006108 <SGP_HeatedUp>
 8006184:	1e03      	subs	r3, r0, #0
 8006186:	d038      	beq.n	80061fa <SGP_GetMeasurementValues+0x82>
 8006188:	4bdb      	ldr	r3, [pc, #876]	@ (80064f8 <SGP_GetMeasurementValues+0x380>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2201      	movs	r2, #1
 800618e:	4053      	eors	r3, r2
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d031      	beq.n	80061fa <SGP_GetMeasurementValues+0x82>
 8006196:	4bd9      	ldr	r3, [pc, #868]	@ (80064fc <SGP_GetMeasurementValues+0x384>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2201      	movs	r2, #1
 800619c:	4053      	eors	r3, r2
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d02a      	beq.n	80061fa <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80061a4:	4ad6      	ldr	r2, [pc, #856]	@ (8006500 <SGP_GetMeasurementValues+0x388>)
 80061a6:	4bd7      	ldr	r3, [pc, #860]	@ (8006504 <SGP_GetMeasurementValues+0x38c>)
 80061a8:	0019      	movs	r1, r3
 80061aa:	2003      	movs	r0, #3
 80061ac:	f001 f882 	bl	80072b4 <CreateLine>
    HeatUpIsDone = true;
 80061b0:	4bd1      	ldr	r3, [pc, #836]	@ (80064f8 <SGP_GetMeasurementValues+0x380>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80061b6:	4bd4      	ldr	r3, [pc, #848]	@ (8006508 <SGP_GetMeasurementValues+0x390>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00d      	beq.n	80061da <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80061be:	4bd3      	ldr	r3, [pc, #844]	@ (800650c <SGP_GetMeasurementValues+0x394>)
 80061c0:	2208      	movs	r2, #8
 80061c2:	0019      	movs	r1, r3
 80061c4:	2059      	movs	r0, #89	@ 0x59
 80061c6:	f7ff ff2f 	bl	8006028 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80061ca:	f001 f8ff 	bl	80073cc <GetCurrentHalTicks>
 80061ce:	0003      	movs	r3, r0
 80061d0:	331e      	adds	r3, #30
 80061d2:	001a      	movs	r2, r3
 80061d4:	4bce      	ldr	r3, [pc, #824]	@ (8006510 <SGP_GetMeasurementValues+0x398>)
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e00c      	b.n	80061f4 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80061da:	4bce      	ldr	r3, [pc, #824]	@ (8006514 <SGP_GetMeasurementValues+0x39c>)
 80061dc:	2208      	movs	r2, #8
 80061de:	0019      	movs	r1, r3
 80061e0:	2059      	movs	r0, #89	@ 0x59
 80061e2:	f7ff ff21 	bl	8006028 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80061e6:	f001 f8f1 	bl	80073cc <GetCurrentHalTicks>
 80061ea:	0003      	movs	r3, r0
 80061ec:	331e      	adds	r3, #30
 80061ee:	001a      	movs	r2, r3
 80061f0:	4bc7      	ldr	r3, [pc, #796]	@ (8006510 <SGP_GetMeasurementValues+0x398>)
 80061f2:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 80061f4:	4bc1      	ldr	r3, [pc, #772]	@ (80064fc <SGP_GetMeasurementValues+0x384>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80061fa:	4bbf      	ldr	r3, [pc, #764]	@ (80064f8 <SGP_GetMeasurementValues+0x380>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d100      	bne.n	8006204 <SGP_GetMeasurementValues+0x8c>
 8006202:	e1b5      	b.n	8006570 <SGP_GetMeasurementValues+0x3f8>
 8006204:	f7ff ff8e 	bl	8006124 <SGP_MeasurementReady>
 8006208:	1e03      	subs	r3, r0, #0
 800620a:	d100      	bne.n	800620e <SGP_GetMeasurementValues+0x96>
 800620c:	e1b0      	b.n	8006570 <SGP_GetMeasurementValues+0x3f8>
 800620e:	4bc2      	ldr	r3, [pc, #776]	@ (8006518 <SGP_GetMeasurementValues+0x3a0>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2201      	movs	r2, #1
 8006214:	4053      	eors	r3, r2
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d100      	bne.n	800621e <SGP_GetMeasurementValues+0xa6>
 800621c:	e1a8      	b.n	8006570 <SGP_GetMeasurementValues+0x3f8>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800621e:	4bbf      	ldr	r3, [pc, #764]	@ (800651c <SGP_GetMeasurementValues+0x3a4>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	4abe      	ldr	r2, [pc, #760]	@ (8006520 <SGP_GetMeasurementValues+0x3a8>)
 8006226:	49b7      	ldr	r1, [pc, #732]	@ (8006504 <SGP_GetMeasurementValues+0x38c>)
 8006228:	2003      	movs	r0, #3
 800622a:	f001 f843 	bl	80072b4 <CreateLine>
    MeasurementIsReady = true;
 800622e:	4bba      	ldr	r3, [pc, #744]	@ (8006518 <SGP_GetMeasurementValues+0x3a0>)
 8006230:	2201      	movs	r2, #1
 8006232:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8006234:	4bbb      	ldr	r3, [pc, #748]	@ (8006524 <SGP_GetMeasurementValues+0x3ac>)
 8006236:	2203      	movs	r2, #3
 8006238:	0019      	movs	r1, r3
 800623a:	2059      	movs	r0, #89	@ 0x59
 800623c:	f7ff fed6 	bl	8005fec <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8006240:	4bb8      	ldr	r3, [pc, #736]	@ (8006524 <SGP_GetMeasurementValues+0x3ac>)
 8006242:	2203      	movs	r2, #3
 8006244:	2103      	movs	r1, #3
 8006246:	0018      	movs	r0, r3
 8006248:	f000 f9f8 	bl	800663c <CheckCRC>
 800624c:	0003      	movs	r3, r0
 800624e:	001a      	movs	r2, r3
 8006250:	2301      	movs	r3, #1
 8006252:	4053      	eors	r3, r2
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d02a      	beq.n	80062b0 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800625a:	4ab3      	ldr	r2, [pc, #716]	@ (8006528 <SGP_GetMeasurementValues+0x3b0>)
 800625c:	4bb3      	ldr	r3, [pc, #716]	@ (800652c <SGP_GetMeasurementValues+0x3b4>)
 800625e:	0019      	movs	r1, r3
 8006260:	2001      	movs	r0, #1
 8006262:	f001 f827 	bl	80072b4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8006266:	4ab2      	ldr	r2, [pc, #712]	@ (8006530 <SGP_GetMeasurementValues+0x3b8>)
 8006268:	4bb2      	ldr	r3, [pc, #712]	@ (8006534 <SGP_GetMeasurementValues+0x3bc>)
 800626a:	0019      	movs	r1, r3
 800626c:	2002      	movs	r0, #2
 800626e:	f001 f821 	bl	80072b4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8006272:	230f      	movs	r3, #15
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e012      	b.n	80062a2 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800627c:	240f      	movs	r4, #15
 800627e:	193b      	adds	r3, r7, r4
 8006280:	7818      	ldrb	r0, [r3, #0]
 8006282:	193b      	adds	r3, r7, r4
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	4aa7      	ldr	r2, [pc, #668]	@ (8006524 <SGP_GetMeasurementValues+0x3ac>)
 8006288:	5cd3      	ldrb	r3, [r2, r3]
 800628a:	4aab      	ldr	r2, [pc, #684]	@ (8006538 <SGP_GetMeasurementValues+0x3c0>)
 800628c:	499d      	ldr	r1, [pc, #628]	@ (8006504 <SGP_GetMeasurementValues+0x38c>)
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	0003      	movs	r3, r0
 8006292:	2003      	movs	r0, #3
 8006294:	f001 f80e 	bl	80072b4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8006298:	193b      	adds	r3, r7, r4
 800629a:	781a      	ldrb	r2, [r3, #0]
 800629c:	193b      	adds	r3, r7, r4
 800629e:	3201      	adds	r2, #1
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	230f      	movs	r3, #15
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d9e7      	bls.n	800627c <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e177      	b.n	80065a0 <SGP_GetMeasurementValues+0x428>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80062b0:	f001 f88c 	bl	80073cc <GetCurrentHalTicks>
 80062b4:	0003      	movs	r3, r0
 80062b6:	22fa      	movs	r2, #250	@ 0xfa
 80062b8:	0092      	lsls	r2, r2, #2
 80062ba:	189a      	adds	r2, r3, r2
 80062bc:	4b9f      	ldr	r3, [pc, #636]	@ (800653c <SGP_GetMeasurementValues+0x3c4>)
 80062be:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80062c0:	f7ff ff4c 	bl	800615c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80062c4:	4b95      	ldr	r3, [pc, #596]	@ (800651c <SGP_GetMeasurementValues+0x3a4>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	4b93      	ldr	r3, [pc, #588]	@ (800651c <SGP_GetMeasurementValues+0x3a4>)
 80062ce:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80062d0:	4b92      	ldr	r3, [pc, #584]	@ (800651c <SGP_GetMeasurementValues+0x3a4>)
 80062d2:	781a      	ldrb	r2, [r3, #0]
 80062d4:	4b9a      	ldr	r3, [pc, #616]	@ (8006540 <SGP_GetMeasurementValues+0x3c8>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d200      	bcs.n	80062de <SGP_GetMeasurementValues+0x166>
 80062dc:	e148      	b.n	8006570 <SGP_GetMeasurementValues+0x3f8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80062de:	4b91      	ldr	r3, [pc, #580]	@ (8006524 <SGP_GetMeasurementValues+0x3ac>)
 80062e0:	785b      	ldrb	r3, [r3, #1]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	b21a      	sxth	r2, r3
 80062e6:	4b8f      	ldr	r3, [pc, #572]	@ (8006524 <SGP_GetMeasurementValues+0x3ac>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b21b      	sxth	r3, r3
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b21a      	sxth	r2, r3
 80062f0:	240c      	movs	r4, #12
 80062f2:	193b      	adds	r3, r7, r4
 80062f4:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 80062f6:	193b      	adds	r3, r7, r4
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	4a92      	ldr	r2, [pc, #584]	@ (8006544 <SGP_GetMeasurementValues+0x3cc>)
 80062fc:	4981      	ldr	r1, [pc, #516]	@ (8006504 <SGP_GetMeasurementValues+0x38c>)
 80062fe:	2003      	movs	r0, #3
 8006300:	f000 ffd8 	bl	80072b4 <CreateLine>
      int32_t tempVocIndex = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8006308:	193b      	adds	r3, r7, r4
 800630a:	8819      	ldrh	r1, [r3, #0]
 800630c:	2308      	movs	r3, #8
 800630e:	18fa      	adds	r2, r7, r3
 8006310:	4b8d      	ldr	r3, [pc, #564]	@ (8006548 <SGP_GetMeasurementValues+0x3d0>)
 8006312:	0018      	movs	r0, r3
 8006314:	f7ff f848 	bl	80053a8 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4a8c      	ldr	r2, [pc, #560]	@ (800654c <SGP_GetMeasurementValues+0x3d4>)
 800631c:	4979      	ldr	r1, [pc, #484]	@ (8006504 <SGP_GetMeasurementValues+0x38c>)
 800631e:	2003      	movs	r0, #3
 8006320:	f000 ffc8 	bl	80072b4 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	dd60      	ble.n	80063f4 <SGP_GetMeasurementValues+0x27c>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b64      	cmp	r3, #100	@ 0x64
 8006338:	dc5c      	bgt.n	80063f4 <SGP_GetMeasurementValues+0x27c>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	0018      	movs	r0, r3
 8006340:	f7fc ffbc 	bl	80032bc <__aeabi_i2d>
 8006344:	2200      	movs	r2, #0
 8006346:	4b82      	ldr	r3, [pc, #520]	@ (8006550 <SGP_GetMeasurementValues+0x3d8>)
 8006348:	f7fb fcb2 	bl	8001cb0 <__aeabi_ddiv>
 800634c:	0002      	movs	r2, r0
 800634e:	000b      	movs	r3, r1
 8006350:	2000      	movs	r0, #0
 8006352:	4980      	ldr	r1, [pc, #512]	@ (8006554 <SGP_GetMeasurementValues+0x3dc>)
 8006354:	f7fc fbb8 	bl	8002ac8 <__aeabi_dsub>
 8006358:	0002      	movs	r2, r0
 800635a:	000b      	movs	r3, r1
 800635c:	0014      	movs	r4, r2
 800635e:	001d      	movs	r5, r3
 8006360:	4b7d      	ldr	r3, [pc, #500]	@ (8006558 <SGP_GetMeasurementValues+0x3e0>)
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	0018      	movs	r0, r3
 8006366:	f7fc ffa9 	bl	80032bc <__aeabi_i2d>
 800636a:	0002      	movs	r2, r0
 800636c:	000b      	movs	r3, r1
 800636e:	0020      	movs	r0, r4
 8006370:	0029      	movs	r1, r5
 8006372:	f7fc f8e1 	bl	8002538 <__aeabi_dmul>
 8006376:	0002      	movs	r2, r0
 8006378:	000b      	movs	r3, r1
 800637a:	0010      	movs	r0, r2
 800637c:	0019      	movs	r1, r3
 800637e:	f7fa f933 	bl	80005e8 <__aeabi_d2uiz>
 8006382:	0003      	movs	r3, r0
 8006384:	b29a      	uxth	r2, r3
 8006386:	4b75      	ldr	r3, [pc, #468]	@ (800655c <SGP_GetMeasurementValues+0x3e4>)
 8006388:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	0018      	movs	r0, r3
 8006390:	f7fc ff94 	bl	80032bc <__aeabi_i2d>
 8006394:	2200      	movs	r2, #0
 8006396:	4b6e      	ldr	r3, [pc, #440]	@ (8006550 <SGP_GetMeasurementValues+0x3d8>)
 8006398:	f7fb fc8a 	bl	8001cb0 <__aeabi_ddiv>
 800639c:	0002      	movs	r2, r0
 800639e:	000b      	movs	r3, r1
 80063a0:	0014      	movs	r4, r2
 80063a2:	001d      	movs	r5, r3
 80063a4:	4b6c      	ldr	r3, [pc, #432]	@ (8006558 <SGP_GetMeasurementValues+0x3e0>)
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	0018      	movs	r0, r3
 80063aa:	f7fc ff87 	bl	80032bc <__aeabi_i2d>
 80063ae:	0002      	movs	r2, r0
 80063b0:	000b      	movs	r3, r1
 80063b2:	0020      	movs	r0, r4
 80063b4:	0029      	movs	r1, r5
 80063b6:	f7fc f8bf 	bl	8002538 <__aeabi_dmul>
 80063ba:	0002      	movs	r2, r0
 80063bc:	000b      	movs	r3, r1
 80063be:	0010      	movs	r0, r2
 80063c0:	0019      	movs	r1, r3
 80063c2:	f7fa f911 	bl	80005e8 <__aeabi_d2uiz>
 80063c6:	0003      	movs	r3, r0
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	4b65      	ldr	r3, [pc, #404]	@ (8006560 <SGP_GetMeasurementValues+0x3e8>)
 80063cc:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 80063ce:	4b62      	ldr	r3, [pc, #392]	@ (8006558 <SGP_GetMeasurementValues+0x3e0>)
 80063d0:	881a      	ldrh	r2, [r3, #0]
 80063d2:	4b64      	ldr	r3, [pc, #400]	@ (8006564 <SGP_GetMeasurementValues+0x3ec>)
 80063d4:	801a      	strh	r2, [r3, #0]
      TIM2->CCR1 = Red;
 80063d6:	4b63      	ldr	r3, [pc, #396]	@ (8006564 <SGP_GetMeasurementValues+0x3ec>)
 80063d8:	881a      	ldrh	r2, [r3, #0]
 80063da:	2380      	movs	r3, #128	@ 0x80
 80063dc:	05db      	lsls	r3, r3, #23
 80063de:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2->CCR3 = Green;
 80063e0:	4b5e      	ldr	r3, [pc, #376]	@ (800655c <SGP_GetMeasurementValues+0x3e4>)
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	2380      	movs	r3, #128	@ 0x80
 80063e6:	05db      	lsls	r3, r3, #23
 80063e8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = Blue;
 80063ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006560 <SGP_GetMeasurementValues+0x3e8>)
 80063ec:	881a      	ldrh	r2, [r3, #0]
 80063ee:	2380      	movs	r3, #128	@ 0x80
 80063f0:	05db      	lsls	r3, r3, #23
 80063f2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      if(*vocIndex > 100){
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b64      	cmp	r3, #100	@ 0x64
 80063fa:	dd6c      	ble.n	80064d6 <SGP_GetMeasurementValues+0x35e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	0018      	movs	r0, r3
 8006402:	f7fc ff5b 	bl	80032bc <__aeabi_i2d>
 8006406:	2200      	movs	r2, #0
 8006408:	4b51      	ldr	r3, [pc, #324]	@ (8006550 <SGP_GetMeasurementValues+0x3d8>)
 800640a:	f7fc fb5d 	bl	8002ac8 <__aeabi_dsub>
 800640e:	0002      	movs	r2, r0
 8006410:	000b      	movs	r3, r1
 8006412:	0010      	movs	r0, r2
 8006414:	0019      	movs	r1, r3
 8006416:	2200      	movs	r2, #0
 8006418:	4b53      	ldr	r3, [pc, #332]	@ (8006568 <SGP_GetMeasurementValues+0x3f0>)
 800641a:	f7fb fc49 	bl	8001cb0 <__aeabi_ddiv>
 800641e:	0002      	movs	r2, r0
 8006420:	000b      	movs	r3, r1
 8006422:	0014      	movs	r4, r2
 8006424:	001d      	movs	r5, r3
 8006426:	4b4c      	ldr	r3, [pc, #304]	@ (8006558 <SGP_GetMeasurementValues+0x3e0>)
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	0018      	movs	r0, r3
 800642c:	f7fc ff46 	bl	80032bc <__aeabi_i2d>
 8006430:	0002      	movs	r2, r0
 8006432:	000b      	movs	r3, r1
 8006434:	0020      	movs	r0, r4
 8006436:	0029      	movs	r1, r5
 8006438:	f7fc f87e 	bl	8002538 <__aeabi_dmul>
 800643c:	0002      	movs	r2, r0
 800643e:	000b      	movs	r3, r1
 8006440:	0010      	movs	r0, r2
 8006442:	0019      	movs	r1, r3
 8006444:	f7fa f8d0 	bl	80005e8 <__aeabi_d2uiz>
 8006448:	0003      	movs	r3, r0
 800644a:	b29a      	uxth	r2, r3
 800644c:	4b43      	ldr	r3, [pc, #268]	@ (800655c <SGP_GetMeasurementValues+0x3e4>)
 800644e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	0018      	movs	r0, r3
 8006456:	f7fc ff31 	bl	80032bc <__aeabi_i2d>
 800645a:	2200      	movs	r2, #0
 800645c:	4b3c      	ldr	r3, [pc, #240]	@ (8006550 <SGP_GetMeasurementValues+0x3d8>)
 800645e:	f7fc fb33 	bl	8002ac8 <__aeabi_dsub>
 8006462:	0002      	movs	r2, r0
 8006464:	000b      	movs	r3, r1
 8006466:	0010      	movs	r0, r2
 8006468:	0019      	movs	r1, r3
 800646a:	2200      	movs	r2, #0
 800646c:	4b3e      	ldr	r3, [pc, #248]	@ (8006568 <SGP_GetMeasurementValues+0x3f0>)
 800646e:	f7fb fc1f 	bl	8001cb0 <__aeabi_ddiv>
 8006472:	0002      	movs	r2, r0
 8006474:	000b      	movs	r3, r1
 8006476:	2000      	movs	r0, #0
 8006478:	4936      	ldr	r1, [pc, #216]	@ (8006554 <SGP_GetMeasurementValues+0x3dc>)
 800647a:	f7fc fb25 	bl	8002ac8 <__aeabi_dsub>
 800647e:	0002      	movs	r2, r0
 8006480:	000b      	movs	r3, r1
 8006482:	0014      	movs	r4, r2
 8006484:	001d      	movs	r5, r3
 8006486:	4b34      	ldr	r3, [pc, #208]	@ (8006558 <SGP_GetMeasurementValues+0x3e0>)
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	0018      	movs	r0, r3
 800648c:	f7fc ff16 	bl	80032bc <__aeabi_i2d>
 8006490:	0002      	movs	r2, r0
 8006492:	000b      	movs	r3, r1
 8006494:	0020      	movs	r0, r4
 8006496:	0029      	movs	r1, r5
 8006498:	f7fc f84e 	bl	8002538 <__aeabi_dmul>
 800649c:	0002      	movs	r2, r0
 800649e:	000b      	movs	r3, r1
 80064a0:	0010      	movs	r0, r2
 80064a2:	0019      	movs	r1, r3
 80064a4:	f7fa f8a0 	bl	80005e8 <__aeabi_d2uiz>
 80064a8:	0003      	movs	r3, r0
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006564 <SGP_GetMeasurementValues+0x3ec>)
 80064ae:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 80064b0:	4b29      	ldr	r3, [pc, #164]	@ (8006558 <SGP_GetMeasurementValues+0x3e0>)
 80064b2:	881a      	ldrh	r2, [r3, #0]
 80064b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006560 <SGP_GetMeasurementValues+0x3e8>)
 80064b6:	801a      	strh	r2, [r3, #0]
        TIM2->CCR1 = Red;
 80064b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006564 <SGP_GetMeasurementValues+0x3ec>)
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	2380      	movs	r3, #128	@ 0x80
 80064be:	05db      	lsls	r3, r3, #23
 80064c0:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2->CCR3 = Green;
 80064c2:	4b26      	ldr	r3, [pc, #152]	@ (800655c <SGP_GetMeasurementValues+0x3e4>)
 80064c4:	881a      	ldrh	r2, [r3, #0]
 80064c6:	2380      	movs	r3, #128	@ 0x80
 80064c8:	05db      	lsls	r3, r3, #23
 80064ca:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2->CCR4 = Blue;
 80064cc:	4b24      	ldr	r3, [pc, #144]	@ (8006560 <SGP_GetMeasurementValues+0x3e8>)
 80064ce:	881a      	ldrh	r2, [r3, #0]
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	05db      	lsls	r3, r3, #23
 80064d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      SGP_AmountOfSamplesDone = 0;
 80064d6:	4b11      	ldr	r3, [pc, #68]	@ (800651c <SGP_GetMeasurementValues+0x3a4>)
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 80064dc:	4a23      	ldr	r2, [pc, #140]	@ (800656c <SGP_GetMeasurementValues+0x3f4>)
 80064de:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <SGP_GetMeasurementValues+0x38c>)
 80064e0:	0019      	movs	r1, r3
 80064e2:	2003      	movs	r0, #3
 80064e4:	f000 fee6 	bl	80072b4 <CreateLine>
      HT_MeasurementReceived = false;
 80064e8:	4b07      	ldr	r3, [pc, #28]	@ (8006508 <SGP_GetMeasurementValues+0x390>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80064ee:	4b03      	ldr	r3, [pc, #12]	@ (80064fc <SGP_GetMeasurementValues+0x384>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e053      	b.n	80065a0 <SGP_GetMeasurementValues+0x428>
 80064f8:	20000ab2 	.word	0x20000ab2
 80064fc:	20000b5d 	.word	0x20000b5d
 8006500:	08011628 	.word	0x08011628
 8006504:	08011654 	.word	0x08011654
 8006508:	20000b5c 	.word	0x20000b5c
 800650c:	20000040 	.word	0x20000040
 8006510:	20000054 	.word	0x20000054
 8006514:	20000038 	.word	0x20000038
 8006518:	20000ab3 	.word	0x20000ab3
 800651c:	20000ab1 	.word	0x20000ab1
 8006520:	08011658 	.word	0x08011658
 8006524:	20000aa8 	.word	0x20000aa8
 8006528:	08011688 	.word	0x08011688
 800652c:	080116ac 	.word	0x080116ac
 8006530:	080116b0 	.word	0x080116b0
 8006534:	080116d0 	.word	0x080116d0
 8006538:	080116d4 	.word	0x080116d4
 800653c:	20000050 	.word	0x20000050
 8006540:	20000048 	.word	0x20000048
 8006544:	080116f4 	.word	0x080116f4
 8006548:	20000ab4 	.word	0x20000ab4
 800654c:	08011708 	.word	0x08011708
 8006550:	40590000 	.word	0x40590000
 8006554:	3ff00000 	.word	0x3ff00000
 8006558:	20000058 	.word	0x20000058
 800655c:	20000b62 	.word	0x20000b62
 8006560:	20000b60 	.word	0x20000b60
 8006564:	20000b5e 	.word	0x20000b5e
 8006568:	40790000 	.word	0x40790000
 800656c:	0801171c 	.word	0x0801171c
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8006570:	f7ff fde6 	bl	8006140 <SGP_MeasurementDone>
 8006574:	1e03      	subs	r3, r0, #0
 8006576:	d012      	beq.n	800659e <SGP_GetMeasurementValues+0x426>
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <SGP_GetMeasurementValues+0x430>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00e      	beq.n	800659e <SGP_GetMeasurementValues+0x426>
 8006580:	4b0a      	ldr	r3, [pc, #40]	@ (80065ac <SGP_GetMeasurementValues+0x434>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <SGP_GetMeasurementValues+0x426>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8006588:	4a09      	ldr	r2, [pc, #36]	@ (80065b0 <SGP_GetMeasurementValues+0x438>)
 800658a:	4b0a      	ldr	r3, [pc, #40]	@ (80065b4 <SGP_GetMeasurementValues+0x43c>)
 800658c:	0019      	movs	r1, r3
 800658e:	2003      	movs	r0, #3
 8006590:	f000 fe90 	bl	80072b4 <CreateLine>
    SGP_StartMeasurement();
 8006594:	f7ff fd80 	bl	8006098 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8006598:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <SGP_GetMeasurementValues+0x440>)
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	0018      	movs	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	b004      	add	sp, #16
 80065a6:	bdb0      	pop	{r4, r5, r7, pc}
 80065a8:	20000ab2 	.word	0x20000ab2
 80065ac:	20000ab3 	.word	0x20000ab3
 80065b0:	08011740 	.word	0x08011740
 80065b4:	08011654 	.word	0x08011654
 80065b8:	20000b5d 	.word	0x20000b5d

080065bc <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80065c2:	4b1a      	ldr	r3, [pc, #104]	@ (800662c <SGP_DeviceConnected+0x70>)
 80065c4:	2202      	movs	r2, #2
 80065c6:	0019      	movs	r1, r3
 80065c8:	2059      	movs	r0, #89	@ 0x59
 80065ca:	f7ff fd2d 	bl	8006028 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80065ce:	2001      	movs	r0, #1
 80065d0:	f001 fa72 	bl	8007ab8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80065d4:	4b16      	ldr	r3, [pc, #88]	@ (8006630 <SGP_DeviceConnected+0x74>)
 80065d6:	2209      	movs	r2, #9
 80065d8:	0019      	movs	r1, r3
 80065da:	2059      	movs	r0, #89	@ 0x59
 80065dc:	f7ff fd06 	bl	8005fec <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80065e0:	1dfb      	adds	r3, r7, #7
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e011      	b.n	800660c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80065e8:	1dfb      	adds	r3, r7, #7
 80065ea:	7818      	ldrb	r0, [r3, #0]
 80065ec:	1dfb      	adds	r3, r7, #7
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	4a0f      	ldr	r2, [pc, #60]	@ (8006630 <SGP_DeviceConnected+0x74>)
 80065f2:	5cd3      	ldrb	r3, [r2, r3]
 80065f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006634 <SGP_DeviceConnected+0x78>)
 80065f6:	4910      	ldr	r1, [pc, #64]	@ (8006638 <SGP_DeviceConnected+0x7c>)
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	0003      	movs	r3, r0
 80065fc:	2002      	movs	r0, #2
 80065fe:	f000 fe59 	bl	80072b4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8006602:	1dfb      	adds	r3, r7, #7
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	1dfb      	adds	r3, r7, #7
 8006608:	3201      	adds	r2, #1
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	1dfb      	adds	r3, r7, #7
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d9e9      	bls.n	80065e8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8006614:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <SGP_DeviceConnected+0x74>)
 8006616:	2203      	movs	r2, #3
 8006618:	2109      	movs	r1, #9
 800661a:	0018      	movs	r0, r3
 800661c:	f000 f80e 	bl	800663c <CheckCRC>
 8006620:	0003      	movs	r3, r0
}
 8006622:	0018      	movs	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	b002      	add	sp, #8
 8006628:	bd80      	pop	{r7, pc}
 800662a:	46c0      	nop			@ (mov r8, r8)
 800662c:	20000034 	.word	0x20000034
 8006630:	20000aa8 	.word	0x20000aa8
 8006634:	08011760 	.word	0x08011760
 8006638:	080116d0 	.word	0x080116d0

0800663c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800663c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663e:	b08f      	sub	sp, #60	@ 0x3c
 8006640:	af00      	add	r7, sp, #0
 8006642:	6278      	str	r0, [r7, #36]	@ 0x24
 8006644:	0008      	movs	r0, r1
 8006646:	0011      	movs	r1, r2
 8006648:	2323      	movs	r3, #35	@ 0x23
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	1c02      	adds	r2, r0, #0
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	2322      	movs	r3, #34	@ 0x22
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	1c0a      	adds	r2, r1, #0
 8006656:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8006658:	2317      	movs	r3, #23
 800665a:	2220      	movs	r2, #32
 800665c:	189b      	adds	r3, r3, r2
 800665e:	19db      	adds	r3, r3, r7
 8006660:	2200      	movs	r2, #0
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	e09f      	b.n	80067a6 <CheckCRC+0x16a>
 8006666:	466b      	mov	r3, sp
 8006668:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800666a:	2322      	movs	r3, #34	@ 0x22
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	001a      	movs	r2, r3
 8006672:	3a01      	subs	r2, #1
 8006674:	633a      	str	r2, [r7, #48]	@ 0x30
 8006676:	60bb      	str	r3, [r7, #8]
 8006678:	2200      	movs	r2, #0
 800667a:	60fa      	str	r2, [r7, #12]
 800667c:	68b8      	ldr	r0, [r7, #8]
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	0002      	movs	r2, r0
 8006682:	0f52      	lsrs	r2, r2, #29
 8006684:	000c      	movs	r4, r1
 8006686:	00e4      	lsls	r4, r4, #3
 8006688:	61fc      	str	r4, [r7, #28]
 800668a:	69fc      	ldr	r4, [r7, #28]
 800668c:	4314      	orrs	r4, r2
 800668e:	61fc      	str	r4, [r7, #28]
 8006690:	0002      	movs	r2, r0
 8006692:	00d2      	lsls	r2, r2, #3
 8006694:	61ba      	str	r2, [r7, #24]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	2200      	movs	r2, #0
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	6838      	ldr	r0, [r7, #0]
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	0002      	movs	r2, r0
 80066a2:	0f52      	lsrs	r2, r2, #29
 80066a4:	000c      	movs	r4, r1
 80066a6:	00e4      	lsls	r4, r4, #3
 80066a8:	617c      	str	r4, [r7, #20]
 80066aa:	697c      	ldr	r4, [r7, #20]
 80066ac:	4314      	orrs	r4, r2
 80066ae:	617c      	str	r4, [r7, #20]
 80066b0:	0002      	movs	r2, r0
 80066b2:	00d2      	lsls	r2, r2, #3
 80066b4:	613a      	str	r2, [r7, #16]
 80066b6:	3307      	adds	r3, #7
 80066b8:	08db      	lsrs	r3, r3, #3
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	466a      	mov	r2, sp
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	469d      	mov	sp, r3
 80066c2:	466b      	mov	r3, sp
 80066c4:	3300      	adds	r3, #0
 80066c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80066c8:	2316      	movs	r3, #22
 80066ca:	2220      	movs	r2, #32
 80066cc:	189b      	adds	r3, r3, r2
 80066ce:	19db      	adds	r3, r3, r7
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e01e      	b.n	8006714 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80066d6:	2317      	movs	r3, #23
 80066d8:	2220      	movs	r2, #32
 80066da:	189b      	adds	r3, r3, r2
 80066dc:	19db      	adds	r3, r3, r7
 80066de:	781a      	ldrb	r2, [r3, #0]
 80066e0:	2116      	movs	r1, #22
 80066e2:	2320      	movs	r3, #32
 80066e4:	18cb      	adds	r3, r1, r3
 80066e6:	19db      	adds	r3, r3, r7
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	18d3      	adds	r3, r2, r3
 80066ec:	001a      	movs	r2, r3
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	189a      	adds	r2, r3, r2
 80066f2:	0008      	movs	r0, r1
 80066f4:	2320      	movs	r3, #32
 80066f6:	18cb      	adds	r3, r1, r3
 80066f8:	19db      	adds	r3, r3, r7
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	7811      	ldrb	r1, [r2, #0]
 80066fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006700:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8006702:	2320      	movs	r3, #32
 8006704:	18c3      	adds	r3, r0, r3
 8006706:	19db      	adds	r3, r3, r7
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	2320      	movs	r3, #32
 800670c:	18c3      	adds	r3, r0, r3
 800670e:	19db      	adds	r3, r3, r7
 8006710:	3201      	adds	r2, #1
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	2316      	movs	r3, #22
 8006716:	2220      	movs	r2, #32
 8006718:	189b      	adds	r3, r3, r2
 800671a:	19da      	adds	r2, r3, r7
 800671c:	2322      	movs	r3, #34	@ 0x22
 800671e:	18fb      	adds	r3, r7, r3
 8006720:	7812      	ldrb	r2, [r2, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d3d6      	bcc.n	80066d6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8006728:	2417      	movs	r4, #23
 800672a:	2320      	movs	r3, #32
 800672c:	18e3      	adds	r3, r4, r3
 800672e:	19db      	adds	r3, r3, r7
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	2322      	movs	r3, #34	@ 0x22
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	18d3      	adds	r3, r2, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673e:	18d2      	adds	r2, r2, r3
 8006740:	250b      	movs	r5, #11
 8006742:	2320      	movs	r3, #32
 8006744:	18eb      	adds	r3, r5, r3
 8006746:	19db      	adds	r3, r3, r7
 8006748:	7812      	ldrb	r2, [r2, #0]
 800674a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800674c:	2322      	movs	r3, #34	@ 0x22
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	3b01      	subs	r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	0011      	movs	r1, r2
 800675a:	0018      	movs	r0, r3
 800675c:	f000 f838 	bl	80067d0 <CalculateCRC>
 8006760:	0003      	movs	r3, r0
 8006762:	001a      	movs	r2, r3
 8006764:	2320      	movs	r3, #32
 8006766:	18eb      	adds	r3, r5, r3
 8006768:	19db      	adds	r3, r3, r7
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	4293      	cmp	r3, r2
 800676e:	d00c      	beq.n	800678a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8006770:	2320      	movs	r3, #32
 8006772:	18e3      	adds	r3, r4, r3
 8006774:	19db      	adds	r3, r3, r7
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	4a13      	ldr	r2, [pc, #76]	@ (80067c8 <CheckCRC+0x18c>)
 800677c:	4913      	ldr	r1, [pc, #76]	@ (80067cc <CheckCRC+0x190>)
 800677e:	2001      	movs	r0, #1
 8006780:	f000 fd98 	bl	80072b4 <CreateLine>
      return false;
 8006784:	2300      	movs	r3, #0
 8006786:	46b5      	mov	sp, r6
 8006788:	e019      	b.n	80067be <CheckCRC+0x182>
 800678a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800678c:	2217      	movs	r2, #23
 800678e:	2320      	movs	r3, #32
 8006790:	18d3      	adds	r3, r2, r3
 8006792:	19db      	adds	r3, r3, r7
 8006794:	2120      	movs	r1, #32
 8006796:	1852      	adds	r2, r2, r1
 8006798:	19d1      	adds	r1, r2, r7
 800679a:	2222      	movs	r2, #34	@ 0x22
 800679c:	18ba      	adds	r2, r7, r2
 800679e:	7809      	ldrb	r1, [r1, #0]
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	188a      	adds	r2, r1, r2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	2317      	movs	r3, #23
 80067a8:	2220      	movs	r2, #32
 80067aa:	189b      	adds	r3, r3, r2
 80067ac:	19da      	adds	r2, r3, r7
 80067ae:	2323      	movs	r3, #35	@ 0x23
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d200      	bcs.n	80067bc <CheckCRC+0x180>
 80067ba:	e754      	b.n	8006666 <CheckCRC+0x2a>
    }
  }
  return true;
 80067bc:	2301      	movs	r3, #1
}
 80067be:	0018      	movs	r0, r3
 80067c0:	46bd      	mov	sp, r7
 80067c2:	b00f      	add	sp, #60	@ 0x3c
 80067c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c6:	46c0      	nop			@ (mov r8, r8)
 80067c8:	08011780 	.word	0x08011780
 80067cc:	080116ac 	.word	0x080116ac

080067d0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	000a      	movs	r2, r1
 80067da:	1cfb      	adds	r3, r7, #3
 80067dc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 80067de:	230f      	movs	r3, #15
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	22ff      	movs	r2, #255	@ 0xff
 80067e4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80067e6:	230e      	movs	r3, #14
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e037      	b.n	8006860 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80067f0:	230e      	movs	r3, #14
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	18d3      	adds	r3, r2, r3
 80067fa:	7819      	ldrb	r1, [r3, #0]
 80067fc:	220f      	movs	r2, #15
 80067fe:	18bb      	adds	r3, r7, r2
 8006800:	18ba      	adds	r2, r7, r2
 8006802:	7812      	ldrb	r2, [r2, #0]
 8006804:	404a      	eors	r2, r1
 8006806:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8006808:	230d      	movs	r3, #13
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2200      	movs	r2, #0
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e01b      	b.n	800684a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8006812:	210f      	movs	r1, #15
 8006814:	187b      	adds	r3, r7, r1
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b25b      	sxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	da09      	bge.n	8006832 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800681e:	187b      	adds	r3, r7, r1
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	b25b      	sxtb	r3, r3
 8006826:	2231      	movs	r2, #49	@ 0x31
 8006828:	4053      	eors	r3, r2
 800682a:	b25a      	sxtb	r2, r3
 800682c:	187b      	adds	r3, r7, r1
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	e005      	b.n	800683e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8006832:	230f      	movs	r3, #15
 8006834:	18fa      	adds	r2, r7, r3
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	18db      	adds	r3, r3, r3
 800683c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800683e:	210d      	movs	r1, #13
 8006840:	187b      	adds	r3, r7, r1
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	187b      	adds	r3, r7, r1
 8006846:	3201      	adds	r2, #1
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	230d      	movs	r3, #13
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b07      	cmp	r3, #7
 8006852:	d9de      	bls.n	8006812 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8006854:	210e      	movs	r1, #14
 8006856:	187b      	adds	r3, r7, r1
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	187b      	adds	r3, r7, r1
 800685c:	3201      	adds	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	230e      	movs	r3, #14
 8006862:	18fa      	adds	r2, r7, r3
 8006864:	1cfb      	adds	r3, r7, #3
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d3c0      	bcc.n	80067f0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800686e:	230f      	movs	r3, #15
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	781b      	ldrb	r3, [r3, #0]
}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b004      	add	sp, #16
 800687a:	bd80      	pop	{r7, pc}

0800687c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4936      	ldr	r1, [pc, #216]	@ (8006964 <SGP_GetHT+0xe8>)
 800688c:	1c18      	adds	r0, r3, #0
 800688e:	f7f9 ff95 	bl	80007bc <__aeabi_fadd>
 8006892:	1c03      	adds	r3, r0, #0
 8006894:	4934      	ldr	r1, [pc, #208]	@ (8006968 <SGP_GetHT+0xec>)
 8006896:	1c18      	adds	r0, r3, #0
 8006898:	f7fa f91a 	bl	8000ad0 <__aeabi_fdiv>
 800689c:	1c03      	adds	r3, r0, #0
 800689e:	4933      	ldr	r1, [pc, #204]	@ (800696c <SGP_GetHT+0xf0>)
 80068a0:	1c18      	adds	r0, r3, #0
 80068a2:	f7fa fafb 	bl	8000e9c <__aeabi_fmul>
 80068a6:	1c03      	adds	r3, r0, #0
 80068a8:	1c18      	adds	r0, r3, #0
 80068aa:	f7f9 fe85 	bl	80005b8 <__aeabi_f2uiz>
 80068ae:	0003      	movs	r3, r0
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006970 <SGP_GetHT+0xf4>)
 80068b4:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	492e      	ldr	r1, [pc, #184]	@ (8006974 <SGP_GetHT+0xf8>)
 80068bc:	1c18      	adds	r0, r3, #0
 80068be:	f7fa f907 	bl	8000ad0 <__aeabi_fdiv>
 80068c2:	1c03      	adds	r3, r0, #0
 80068c4:	4929      	ldr	r1, [pc, #164]	@ (800696c <SGP_GetHT+0xf0>)
 80068c6:	1c18      	adds	r0, r3, #0
 80068c8:	f7fa fae8 	bl	8000e9c <__aeabi_fmul>
 80068cc:	1c03      	adds	r3, r0, #0
 80068ce:	1c18      	adds	r0, r3, #0
 80068d0:	f7f9 fe72 	bl	80005b8 <__aeabi_f2uiz>
 80068d4:	0003      	movs	r3, r0
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	4b27      	ldr	r3, [pc, #156]	@ (8006978 <SGP_GetHT+0xfc>)
 80068da:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 80068dc:	4b26      	ldr	r3, [pc, #152]	@ (8006978 <SGP_GetHT+0xfc>)
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	0a1b      	lsrs	r3, r3, #8
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	4b25      	ldr	r3, [pc, #148]	@ (800697c <SGP_GetHT+0x100>)
 80068e8:	709a      	strb	r2, [r3, #2]
 80068ea:	4b24      	ldr	r3, [pc, #144]	@ (800697c <SGP_GetHT+0x100>)
 80068ec:	789a      	ldrb	r2, [r3, #2]
 80068ee:	210c      	movs	r1, #12
 80068f0:	187b      	adds	r3, r7, r1
 80068f2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 80068f4:	4b20      	ldr	r3, [pc, #128]	@ (8006978 <SGP_GetHT+0xfc>)
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4b20      	ldr	r3, [pc, #128]	@ (800697c <SGP_GetHT+0x100>)
 80068fc:	70da      	strb	r2, [r3, #3]
 80068fe:	4b1f      	ldr	r3, [pc, #124]	@ (800697c <SGP_GetHT+0x100>)
 8006900:	78da      	ldrb	r2, [r3, #3]
 8006902:	187b      	adds	r3, r7, r1
 8006904:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8006906:	187b      	adds	r3, r7, r1
 8006908:	2102      	movs	r1, #2
 800690a:	0018      	movs	r0, r3
 800690c:	f7ff ff60 	bl	80067d0 <CalculateCRC>
 8006910:	0003      	movs	r3, r0
 8006912:	001a      	movs	r2, r3
 8006914:	4b19      	ldr	r3, [pc, #100]	@ (800697c <SGP_GetHT+0x100>)
 8006916:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8006918:	4b15      	ldr	r3, [pc, #84]	@ (8006970 <SGP_GetHT+0xf4>)
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	0a1b      	lsrs	r3, r3, #8
 800691e:	b29b      	uxth	r3, r3
 8006920:	b2da      	uxtb	r2, r3
 8006922:	4b16      	ldr	r3, [pc, #88]	@ (800697c <SGP_GetHT+0x100>)
 8006924:	715a      	strb	r2, [r3, #5]
 8006926:	4b15      	ldr	r3, [pc, #84]	@ (800697c <SGP_GetHT+0x100>)
 8006928:	795a      	ldrb	r2, [r3, #5]
 800692a:	2108      	movs	r1, #8
 800692c:	187b      	adds	r3, r7, r1
 800692e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8006930:	4b0f      	ldr	r3, [pc, #60]	@ (8006970 <SGP_GetHT+0xf4>)
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	4b11      	ldr	r3, [pc, #68]	@ (800697c <SGP_GetHT+0x100>)
 8006938:	719a      	strb	r2, [r3, #6]
 800693a:	4b10      	ldr	r3, [pc, #64]	@ (800697c <SGP_GetHT+0x100>)
 800693c:	799a      	ldrb	r2, [r3, #6]
 800693e:	187b      	adds	r3, r7, r1
 8006940:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8006942:	187b      	adds	r3, r7, r1
 8006944:	2102      	movs	r1, #2
 8006946:	0018      	movs	r0, r3
 8006948:	f7ff ff42 	bl	80067d0 <CalculateCRC>
 800694c:	0003      	movs	r3, r0
 800694e:	001a      	movs	r2, r3
 8006950:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <SGP_GetHT+0x100>)
 8006952:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8006954:	4b0a      	ldr	r3, [pc, #40]	@ (8006980 <SGP_GetHT+0x104>)
 8006956:	2201      	movs	r2, #1
 8006958:	701a      	strb	r2, [r3, #0]
}
 800695a:	46c0      	nop			@ (mov r8, r8)
 800695c:	46bd      	mov	sp, r7
 800695e:	b004      	add	sp, #16
 8006960:	bd80      	pop	{r7, pc}
 8006962:	46c0      	nop			@ (mov r8, r8)
 8006964:	42340000 	.word	0x42340000
 8006968:	432f0000 	.word	0x432f0000
 800696c:	477fff00 	.word	0x477fff00
 8006970:	20000b5a 	.word	0x20000b5a
 8006974:	42c80000 	.word	0x42c80000
 8006978:	20000b58 	.word	0x20000b58
 800697c:	20000040 	.word	0x20000040
 8006980:	20000b5c 	.word	0x20000b5c

08006984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006988:	4b07      	ldr	r3, [pc, #28]	@ (80069a8 <HAL_MspInit+0x24>)
 800698a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800698c:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <HAL_MspInit+0x24>)
 800698e:	2101      	movs	r1, #1
 8006990:	430a      	orrs	r2, r1
 8006992:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006994:	4b04      	ldr	r3, [pc, #16]	@ (80069a8 <HAL_MspInit+0x24>)
 8006996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006998:	4b03      	ldr	r3, [pc, #12]	@ (80069a8 <HAL_MspInit+0x24>)
 800699a:	2180      	movs	r1, #128	@ 0x80
 800699c:	0549      	lsls	r1, r1, #21
 800699e:	430a      	orrs	r2, r1
 80069a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069a2:	46c0      	nop			@ (mov r8, r8)
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40021000 	.word	0x40021000

080069ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80069b0:	46c0      	nop			@ (mov r8, r8)
 80069b2:	e7fd      	b.n	80069b0 <NMI_Handler+0x4>

080069b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069b8:	46c0      	nop			@ (mov r8, r8)
 80069ba:	e7fd      	b.n	80069b8 <HardFault_Handler+0x4>

080069bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80069c0:	46c0      	nop			@ (mov r8, r8)
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069d4:	f001 f854 	bl	8007a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069d8:	46c0      	nop			@ (mov r8, r8)
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80069e4:	4b05      	ldr	r3, [pc, #20]	@ (80069fc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80069e6:	0018      	movs	r0, r3
 80069e8:	f001 fb2b 	bl	8008042 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80069ec:	4b04      	ldr	r3, [pc, #16]	@ (8006a00 <DMA1_Channel2_3_IRQHandler+0x20>)
 80069ee:	0018      	movs	r0, r3
 80069f0:	f001 fb27 	bl	8008042 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80069f4:	46c0      	nop			@ (mov r8, r8)
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	46c0      	nop			@ (mov r8, r8)
 80069fc:	2000056c 	.word	0x2000056c
 8006a00:	20000524 	.word	0x20000524

08006a04 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006a08:	4b07      	ldr	r3, [pc, #28]	@ (8006a28 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f001 fb19 	bl	8008042 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8006a10:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8006a12:	0018      	movs	r0, r3
 8006a14:	f001 fb15 	bl	8008042 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8006a18:	4b05      	ldr	r3, [pc, #20]	@ (8006a30 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f001 fb11 	bl	8008042 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8006a20:	46c0      	nop			@ (mov r8, r8)
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	200005f0 	.word	0x200005f0
 8006a2c:	20000d58 	.word	0x20000d58
 8006a30:	20000da0 	.word	0x20000da0

08006a34 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006a38:	4b03      	ldr	r3, [pc, #12]	@ (8006a48 <USART4_5_IRQHandler+0x14>)
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f005 ffd2 	bl	800c9e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8006a40:	46c0      	nop			@ (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	20000ca0 	.word	0x20000ca0

08006a4c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8006a50:	4b09      	ldr	r3, [pc, #36]	@ (8006a78 <I2C1_IRQHandler+0x2c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	23e0      	movs	r3, #224	@ 0xe0
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8006a5e:	4b06      	ldr	r3, [pc, #24]	@ (8006a78 <I2C1_IRQHandler+0x2c>)
 8006a60:	0018      	movs	r0, r3
 8006a62:	f002 f911 	bl	8008c88 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8006a66:	e003      	b.n	8006a70 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8006a68:	4b03      	ldr	r3, [pc, #12]	@ (8006a78 <I2C1_IRQHandler+0x2c>)
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f002 f8f2 	bl	8008c54 <HAL_I2C_EV_IRQHandler>
}
 8006a70:	46c0      	nop			@ (mov r8, r8)
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	46c0      	nop			@ (mov r8, r8)
 8006a78:	2000047c 	.word	0x2000047c

08006a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  return 1;
 8006a80:	2301      	movs	r3, #1
}
 8006a82:	0018      	movs	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <_kill>:

int _kill(int pid, int sig)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006a92:	f008 f8ef 	bl	800ec74 <__errno>
 8006a96:	0003      	movs	r3, r0
 8006a98:	2216      	movs	r2, #22
 8006a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	425b      	negs	r3, r3
}
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b002      	add	sp, #8
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <_exit>:

void _exit (int status)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	425a      	negs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	0011      	movs	r1, r2
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f7ff ffe5 	bl	8006a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006abe:	46c0      	nop			@ (mov r8, r8)
 8006ac0:	e7fd      	b.n	8006abe <_exit+0x16>

08006ac2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	e00a      	b.n	8006aea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006ad4:	e000      	b.n	8006ad8 <_read+0x16>
 8006ad6:	bf00      	nop
 8006ad8:	0001      	movs	r1, r0
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	60ba      	str	r2, [r7, #8]
 8006ae0:	b2ca      	uxtb	r2, r1
 8006ae2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	dbf0      	blt.n	8006ad4 <_read+0x12>
  }

  return len;
 8006af2:	687b      	ldr	r3, [r7, #4]
}
 8006af4:	0018      	movs	r0, r3
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b006      	add	sp, #24
 8006afa:	bd80      	pop	{r7, pc}

08006afc <_close>:
  }
  return len;
}

int _close(int file)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006b04:	2301      	movs	r3, #1
 8006b06:	425b      	negs	r3, r3
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2280      	movs	r2, #128	@ 0x80
 8006b1e:	0192      	lsls	r2, r2, #6
 8006b20:	605a      	str	r2, [r3, #4]
  return 0;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <_isatty>:

int _isatty(int file)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006b34:	2301      	movs	r3, #1
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b002      	add	sp, #8
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	b004      	add	sp, #16
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b5c:	4a14      	ldr	r2, [pc, #80]	@ (8006bb0 <_sbrk+0x5c>)
 8006b5e:	4b15      	ldr	r3, [pc, #84]	@ (8006bb4 <_sbrk+0x60>)
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b68:	4b13      	ldr	r3, [pc, #76]	@ (8006bb8 <_sbrk+0x64>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b70:	4b11      	ldr	r3, [pc, #68]	@ (8006bb8 <_sbrk+0x64>)
 8006b72:	4a12      	ldr	r2, [pc, #72]	@ (8006bbc <_sbrk+0x68>)
 8006b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b76:	4b10      	ldr	r3, [pc, #64]	@ (8006bb8 <_sbrk+0x64>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	18d3      	adds	r3, r2, r3
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d207      	bcs.n	8006b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b84:	f008 f876 	bl	800ec74 <__errno>
 8006b88:	0003      	movs	r3, r0
 8006b8a:	220c      	movs	r2, #12
 8006b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	425b      	negs	r3, r3
 8006b92:	e009      	b.n	8006ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b94:	4b08      	ldr	r3, [pc, #32]	@ (8006bb8 <_sbrk+0x64>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b9a:	4b07      	ldr	r3, [pc, #28]	@ (8006bb8 <_sbrk+0x64>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	18d2      	adds	r2, r2, r3
 8006ba2:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <_sbrk+0x64>)
 8006ba4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
}
 8006ba8:	0018      	movs	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b006      	add	sp, #24
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20005000 	.word	0x20005000
 8006bb4:	00000400 	.word	0x00000400
 8006bb8:	20000b64 	.word	0x20000b64
 8006bbc:	20001a48 	.word	0x20001a48

08006bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006bc4:	46c0      	nop			@ (mov r8, r8)
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bd2:	2310      	movs	r3, #16
 8006bd4:	18fb      	adds	r3, r7, r3
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	2308      	movs	r3, #8
 8006bda:	001a      	movs	r2, r3
 8006bdc:	2100      	movs	r1, #0
 8006bde:	f007 ffc5 	bl	800eb6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006be2:	003b      	movs	r3, r7
 8006be4:	0018      	movs	r0, r3
 8006be6:	2310      	movs	r3, #16
 8006be8:	001a      	movs	r2, r3
 8006bea:	2100      	movs	r1, #0
 8006bec:	f007 ffbe 	bl	800eb6c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006bf2:	2280      	movs	r2, #128	@ 0x80
 8006bf4:	05d2      	lsls	r2, r2, #23
 8006bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006c04:	4b29      	ldr	r3, [pc, #164]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c06:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb0 <MX_TIM2_Init+0xe4>)
 8006c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c0a:	4b28      	ldr	r3, [pc, #160]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c10:	4b26      	ldr	r3, [pc, #152]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006c16:	4b25      	ldr	r3, [pc, #148]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f005 f955 	bl	800bec8 <HAL_TIM_PWM_Init>
 8006c1e:	1e03      	subs	r3, r0, #0
 8006c20:	d001      	beq.n	8006c26 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8006c22:	f7fd fe89 	bl	8004938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c26:	2110      	movs	r1, #16
 8006c28:	187b      	adds	r3, r7, r1
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c2e:	187b      	adds	r3, r7, r1
 8006c30:	2200      	movs	r2, #0
 8006c32:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006c34:	187a      	adds	r2, r7, r1
 8006c36:	4b1d      	ldr	r3, [pc, #116]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c38:	0011      	movs	r1, r2
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f005 fc62 	bl	800c504 <HAL_TIMEx_MasterConfigSynchronization>
 8006c40:	1e03      	subs	r3, r0, #0
 8006c42:	d001      	beq.n	8006c48 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8006c44:	f7fd fe78 	bl	8004938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c48:	003b      	movs	r3, r7
 8006c4a:	2260      	movs	r2, #96	@ 0x60
 8006c4c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006c4e:	003b      	movs	r3, r7
 8006c50:	2200      	movs	r2, #0
 8006c52:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c54:	003b      	movs	r3, r7
 8006c56:	2200      	movs	r2, #0
 8006c58:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c5a:	003b      	movs	r3, r7
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c60:	0039      	movs	r1, r7
 8006c62:	4b12      	ldr	r3, [pc, #72]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	0018      	movs	r0, r3
 8006c68:	f005 fa00 	bl	800c06c <HAL_TIM_PWM_ConfigChannel>
 8006c6c:	1e03      	subs	r3, r0, #0
 8006c6e:	d001      	beq.n	8006c74 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8006c70:	f7fd fe62 	bl	8004938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006c74:	0039      	movs	r1, r7
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c78:	2208      	movs	r2, #8
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f005 f9f6 	bl	800c06c <HAL_TIM_PWM_ConfigChannel>
 8006c80:	1e03      	subs	r3, r0, #0
 8006c82:	d001      	beq.n	8006c88 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8006c84:	f7fd fe58 	bl	8004938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006c88:	0039      	movs	r1, r7
 8006c8a:	4b08      	ldr	r3, [pc, #32]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c8c:	220c      	movs	r2, #12
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f005 f9ec 	bl	800c06c <HAL_TIM_PWM_ConfigChannel>
 8006c94:	1e03      	subs	r3, r0, #0
 8006c96:	d001      	beq.n	8006c9c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8006c98:	f7fd fe4e 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006c9c:	4b03      	ldr	r3, [pc, #12]	@ (8006cac <MX_TIM2_Init+0xe0>)
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 f8aa 	bl	8006df8 <HAL_TIM_MspPostInit>

}
 8006ca4:	46c0      	nop			@ (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b006      	add	sp, #24
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000b68 	.word	0x20000b68
 8006cb0:	0000ffff 	.word	0x0000ffff

08006cb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cba:	2310      	movs	r3, #16
 8006cbc:	18fb      	adds	r3, r7, r3
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	001a      	movs	r2, r3
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f007 ff51 	bl	800eb6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006cca:	003b      	movs	r3, r7
 8006ccc:	0018      	movs	r0, r3
 8006cce:	2310      	movs	r3, #16
 8006cd0:	001a      	movs	r2, r3
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	f007 ff4a 	bl	800eb6c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006cd8:	4b32      	ldr	r3, [pc, #200]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006cda:	4a33      	ldr	r2, [pc, #204]	@ (8006da8 <MX_TIM3_Init+0xf4>)
 8006cdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006cde:	4b31      	ldr	r3, [pc, #196]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006cea:	4b2e      	ldr	r3, [pc, #184]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006cec:	4a2f      	ldr	r2, [pc, #188]	@ (8006dac <MX_TIM3_Init+0xf8>)
 8006cee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006cfc:	4b29      	ldr	r3, [pc, #164]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f005 f8e2 	bl	800bec8 <HAL_TIM_PWM_Init>
 8006d04:	1e03      	subs	r3, r0, #0
 8006d06:	d001      	beq.n	8006d0c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006d08:	f7fd fe16 	bl	8004938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d0c:	2110      	movs	r1, #16
 8006d0e:	187b      	adds	r3, r7, r1
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d14:	187b      	adds	r3, r7, r1
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006d1a:	187a      	adds	r2, r7, r1
 8006d1c:	4b21      	ldr	r3, [pc, #132]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006d1e:	0011      	movs	r1, r2
 8006d20:	0018      	movs	r0, r3
 8006d22:	f005 fbef 	bl	800c504 <HAL_TIMEx_MasterConfigSynchronization>
 8006d26:	1e03      	subs	r3, r0, #0
 8006d28:	d001      	beq.n	8006d2e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8006d2a:	f7fd fe05 	bl	8004938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d2e:	003b      	movs	r3, r7
 8006d30:	2260      	movs	r2, #96	@ 0x60
 8006d32:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006d34:	003b      	movs	r3, r7
 8006d36:	2200      	movs	r2, #0
 8006d38:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d3a:	003b      	movs	r3, r7
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d40:	003b      	movs	r3, r7
 8006d42:	2200      	movs	r2, #0
 8006d44:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d46:	0039      	movs	r1, r7
 8006d48:	4b16      	ldr	r3, [pc, #88]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f005 f98d 	bl	800c06c <HAL_TIM_PWM_ConfigChannel>
 8006d52:	1e03      	subs	r3, r0, #0
 8006d54:	d001      	beq.n	8006d5a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8006d56:	f7fd fdef 	bl	8004938 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8006d5a:	4b12      	ldr	r3, [pc, #72]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006d5c:	2104      	movs	r1, #4
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f005 fc2e 	bl	800c5c0 <HAL_TIMEx_RemapConfig>
 8006d64:	1e03      	subs	r3, r0, #0
 8006d66:	d001      	beq.n	8006d6c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8006d68:	f7fd fde6 	bl	8004938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d6c:	0039      	movs	r1, r7
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006d70:	2204      	movs	r2, #4
 8006d72:	0018      	movs	r0, r3
 8006d74:	f005 f97a 	bl	800c06c <HAL_TIM_PWM_ConfigChannel>
 8006d78:	1e03      	subs	r3, r0, #0
 8006d7a:	d001      	beq.n	8006d80 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8006d7c:	f7fd fddc 	bl	8004938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006d80:	0039      	movs	r1, r7
 8006d82:	4b08      	ldr	r3, [pc, #32]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006d84:	2208      	movs	r2, #8
 8006d86:	0018      	movs	r0, r3
 8006d88:	f005 f970 	bl	800c06c <HAL_TIM_PWM_ConfigChannel>
 8006d8c:	1e03      	subs	r3, r0, #0
 8006d8e:	d001      	beq.n	8006d94 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8006d90:	f7fd fdd2 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006d94:	4b03      	ldr	r3, [pc, #12]	@ (8006da4 <MX_TIM3_Init+0xf0>)
 8006d96:	0018      	movs	r0, r3
 8006d98:	f000 f82e 	bl	8006df8 <HAL_TIM_MspPostInit>

}
 8006d9c:	46c0      	nop			@ (mov r8, r8)
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b006      	add	sp, #24
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000ba8 	.word	0x20000ba8
 8006da8:	40000400 	.word	0x40000400
 8006dac:	0000ffff 	.word	0x0000ffff

08006db0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	2380      	movs	r3, #128	@ 0x80
 8006dbe:	05db      	lsls	r3, r3, #23
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d106      	bne.n	8006dd2 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <HAL_TIM_PWM_MspInit+0x40>)
 8006dc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dc8:	4b09      	ldr	r3, [pc, #36]	@ (8006df0 <HAL_TIM_PWM_MspInit+0x40>)
 8006dca:	2101      	movs	r1, #1
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006dd0:	e00a      	b.n	8006de8 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a07      	ldr	r2, [pc, #28]	@ (8006df4 <HAL_TIM_PWM_MspInit+0x44>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d105      	bne.n	8006de8 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ddc:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <HAL_TIM_PWM_MspInit+0x40>)
 8006dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de0:	4b03      	ldr	r3, [pc, #12]	@ (8006df0 <HAL_TIM_PWM_MspInit+0x40>)
 8006de2:	2102      	movs	r1, #2
 8006de4:	430a      	orrs	r2, r1
 8006de6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006de8:	46c0      	nop			@ (mov r8, r8)
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b002      	add	sp, #8
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40021000 	.word	0x40021000
 8006df4:	40000400 	.word	0x40000400

08006df8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006df8:	b590      	push	{r4, r7, lr}
 8006dfa:	b08b      	sub	sp, #44	@ 0x2c
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e00:	2414      	movs	r4, #20
 8006e02:	193b      	adds	r3, r7, r4
 8006e04:	0018      	movs	r0, r3
 8006e06:	2314      	movs	r3, #20
 8006e08:	001a      	movs	r2, r3
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	f007 feae 	bl	800eb6c <memset>
  if(timHandle->Instance==TIM2)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	2380      	movs	r3, #128	@ 0x80
 8006e16:	05db      	lsls	r3, r3, #23
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d123      	bne.n	8006e64 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e1c:	4b27      	ldr	r3, [pc, #156]	@ (8006ebc <HAL_TIM_MspPostInit+0xc4>)
 8006e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e20:	4b26      	ldr	r3, [pc, #152]	@ (8006ebc <HAL_TIM_MspPostInit+0xc4>)
 8006e22:	2101      	movs	r1, #1
 8006e24:	430a      	orrs	r2, r1
 8006e26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e28:	4b24      	ldr	r3, [pc, #144]	@ (8006ebc <HAL_TIM_MspPostInit+0xc4>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	4013      	ands	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8006e34:	0021      	movs	r1, r4
 8006e36:	187b      	adds	r3, r7, r1
 8006e38:	220d      	movs	r2, #13
 8006e3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3c:	187b      	adds	r3, r7, r1
 8006e3e:	2202      	movs	r2, #2
 8006e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e42:	187b      	adds	r3, r7, r1
 8006e44:	2200      	movs	r2, #0
 8006e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e48:	187b      	adds	r3, r7, r1
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8006e4e:	187b      	adds	r3, r7, r1
 8006e50:	2202      	movs	r2, #2
 8006e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e54:	187a      	adds	r2, r7, r1
 8006e56:	23a0      	movs	r3, #160	@ 0xa0
 8006e58:	05db      	lsls	r3, r3, #23
 8006e5a:	0011      	movs	r1, r2
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f001 f9d9 	bl	8008214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006e62:	e027      	b.n	8006eb4 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a15      	ldr	r2, [pc, #84]	@ (8006ec0 <HAL_TIM_MspPostInit+0xc8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d122      	bne.n	8006eb4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e6e:	4b13      	ldr	r3, [pc, #76]	@ (8006ebc <HAL_TIM_MspPostInit+0xc4>)
 8006e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e72:	4b12      	ldr	r3, [pc, #72]	@ (8006ebc <HAL_TIM_MspPostInit+0xc4>)
 8006e74:	2104      	movs	r1, #4
 8006e76:	430a      	orrs	r2, r1
 8006e78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e7a:	4b10      	ldr	r3, [pc, #64]	@ (8006ebc <HAL_TIM_MspPostInit+0xc4>)
 8006e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7e:	2204      	movs	r2, #4
 8006e80:	4013      	ands	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8006e86:	2114      	movs	r1, #20
 8006e88:	187b      	adds	r3, r7, r1
 8006e8a:	22e0      	movs	r2, #224	@ 0xe0
 8006e8c:	0052      	lsls	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e90:	187b      	adds	r3, r7, r1
 8006e92:	2202      	movs	r2, #2
 8006e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e96:	187b      	adds	r3, r7, r1
 8006e98:	2200      	movs	r2, #0
 8006e9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e9c:	187b      	adds	r3, r7, r1
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006ea2:	187b      	adds	r3, r7, r1
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ea8:	187b      	adds	r3, r7, r1
 8006eaa:	4a06      	ldr	r2, [pc, #24]	@ (8006ec4 <HAL_TIM_MspPostInit+0xcc>)
 8006eac:	0019      	movs	r1, r3
 8006eae:	0010      	movs	r0, r2
 8006eb0:	f001 f9b0 	bl	8008214 <HAL_GPIO_Init>
}
 8006eb4:	46c0      	nop			@ (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b00b      	add	sp, #44	@ 0x2c
 8006eba:	bd90      	pop	{r4, r7, pc}
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	50000800 	.word	0x50000800

08006ec8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ecc:	4b16      	ldr	r3, [pc, #88]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006ece:	4a17      	ldr	r2, [pc, #92]	@ (8006f2c <MX_USART1_UART_Init+0x64>)
 8006ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006ed2:	4b15      	ldr	r3, [pc, #84]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006ed4:	22e1      	movs	r2, #225	@ 0xe1
 8006ed6:	0252      	lsls	r2, r2, #9
 8006ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006eda:	4b13      	ldr	r3, [pc, #76]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006ee0:	4b11      	ldr	r3, [pc, #68]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006ee6:	4b10      	ldr	r3, [pc, #64]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006eec:	4b0e      	ldr	r3, [pc, #56]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006eee:	220c      	movs	r2, #12
 8006ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006efe:	4b0a      	ldr	r3, [pc, #40]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8006f04:	4b08      	ldr	r3, [pc, #32]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006f06:	2208      	movs	r2, #8
 8006f08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8006f0a:	4b07      	ldr	r3, [pc, #28]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006f0c:	2280      	movs	r2, #128	@ 0x80
 8006f0e:	0212      	lsls	r2, r2, #8
 8006f10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f12:	4b05      	ldr	r3, [pc, #20]	@ (8006f28 <MX_USART1_UART_Init+0x60>)
 8006f14:	0018      	movs	r0, r3
 8006f16:	f005 fb71 	bl	800c5fc <HAL_UART_Init>
 8006f1a:	1e03      	subs	r3, r0, #0
 8006f1c:	d001      	beq.n	8006f22 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8006f1e:	f7fd fd0b 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000be8 	.word	0x20000be8
 8006f2c:	40013800 	.word	0x40013800

08006f30 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8006f34:	4b14      	ldr	r3, [pc, #80]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f36:	4a15      	ldr	r2, [pc, #84]	@ (8006f8c <MX_USART4_UART_Init+0x5c>)
 8006f38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8006f3a:	4b13      	ldr	r3, [pc, #76]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f3c:	22e1      	movs	r2, #225	@ 0xe1
 8006f3e:	0252      	lsls	r2, r2, #9
 8006f40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006f42:	4b11      	ldr	r3, [pc, #68]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006f48:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006f54:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f56:	220c      	movs	r2, #12
 8006f58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f60:	4b09      	ldr	r3, [pc, #36]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f66:	4b08      	ldr	r3, [pc, #32]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f6c:	4b06      	ldr	r3, [pc, #24]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006f72:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <MX_USART4_UART_Init+0x58>)
 8006f74:	0018      	movs	r0, r3
 8006f76:	f005 fb41 	bl	800c5fc <HAL_UART_Init>
 8006f7a:	1e03      	subs	r3, r0, #0
 8006f7c:	d001      	beq.n	8006f82 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8006f7e:	f7fd fcdb 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8006f82:	46c0      	nop			@ (mov r8, r8)
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000ca0 	.word	0x20000ca0
 8006f8c:	40004c00 	.word	0x40004c00

08006f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006f90:	b590      	push	{r4, r7, lr}
 8006f92:	b08b      	sub	sp, #44	@ 0x2c
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f98:	2414      	movs	r4, #20
 8006f9a:	193b      	adds	r3, r7, r4
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	2314      	movs	r3, #20
 8006fa0:	001a      	movs	r2, r3
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	f007 fde2 	bl	800eb6c <memset>
  if(uartHandle->Instance==USART1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a6f      	ldr	r2, [pc, #444]	@ (800716c <HAL_UART_MspInit+0x1dc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d12b      	bne.n	800700a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 8006fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 8006fb8:	2180      	movs	r1, #128	@ 0x80
 8006fba:	01c9      	lsls	r1, r1, #7
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fc0:	4b6b      	ldr	r3, [pc, #428]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 8006fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006fcc:	4b68      	ldr	r3, [pc, #416]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006fd8:	193b      	adds	r3, r7, r4
 8006fda:	22c0      	movs	r2, #192	@ 0xc0
 8006fdc:	00d2      	lsls	r2, r2, #3
 8006fde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe0:	0021      	movs	r1, r4
 8006fe2:	187b      	adds	r3, r7, r1
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe8:	187b      	adds	r3, r7, r1
 8006fea:	2200      	movs	r2, #0
 8006fec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fee:	187b      	adds	r3, r7, r1
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006ff4:	187b      	adds	r3, r7, r1
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ffa:	187a      	adds	r2, r7, r1
 8006ffc:	23a0      	movs	r3, #160	@ 0xa0
 8006ffe:	05db      	lsls	r3, r3, #23
 8007000:	0011      	movs	r1, r2
 8007002:	0018      	movs	r0, r3
 8007004:	f001 f906 	bl	8008214 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8007008:	e0ac      	b.n	8007164 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a59      	ldr	r2, [pc, #356]	@ (8007174 <HAL_UART_MspInit+0x1e4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d000      	beq.n	8007016 <HAL_UART_MspInit+0x86>
 8007014:	e0a6      	b.n	8007164 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 8007016:	4b56      	ldr	r3, [pc, #344]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 8007018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800701a:	4b55      	ldr	r3, [pc, #340]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 800701c:	2180      	movs	r1, #128	@ 0x80
 800701e:	0309      	lsls	r1, r1, #12
 8007020:	430a      	orrs	r2, r1
 8007022:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007024:	4b52      	ldr	r3, [pc, #328]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 8007026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007028:	4b51      	ldr	r3, [pc, #324]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 800702a:	2101      	movs	r1, #1
 800702c:	430a      	orrs	r2, r1
 800702e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007030:	4b4f      	ldr	r3, [pc, #316]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 8007032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007034:	2201      	movs	r2, #1
 8007036:	4013      	ands	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800703c:	4b4c      	ldr	r3, [pc, #304]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 800703e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007040:	4b4b      	ldr	r3, [pc, #300]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 8007042:	2104      	movs	r1, #4
 8007044:	430a      	orrs	r2, r1
 8007046:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007048:	4b49      	ldr	r3, [pc, #292]	@ (8007170 <HAL_UART_MspInit+0x1e0>)
 800704a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704c:	2204      	movs	r2, #4
 800704e:	4013      	ands	r3, r2
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007054:	2414      	movs	r4, #20
 8007056:	193b      	adds	r3, r7, r4
 8007058:	2202      	movs	r2, #2
 800705a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705c:	193b      	adds	r3, r7, r4
 800705e:	2202      	movs	r2, #2
 8007060:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007062:	193b      	adds	r3, r7, r4
 8007064:	2200      	movs	r2, #0
 8007066:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007068:	193b      	adds	r3, r7, r4
 800706a:	2203      	movs	r2, #3
 800706c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800706e:	193b      	adds	r3, r7, r4
 8007070:	2206      	movs	r2, #6
 8007072:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007074:	193a      	adds	r2, r7, r4
 8007076:	23a0      	movs	r3, #160	@ 0xa0
 8007078:	05db      	lsls	r3, r3, #23
 800707a:	0011      	movs	r1, r2
 800707c:	0018      	movs	r0, r3
 800707e:	f001 f8c9 	bl	8008214 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007082:	0021      	movs	r1, r4
 8007084:	187b      	adds	r3, r7, r1
 8007086:	2280      	movs	r2, #128	@ 0x80
 8007088:	00d2      	lsls	r2, r2, #3
 800708a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800708c:	187b      	adds	r3, r7, r1
 800708e:	2202      	movs	r2, #2
 8007090:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007092:	187b      	adds	r3, r7, r1
 8007094:	2200      	movs	r2, #0
 8007096:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007098:	187b      	adds	r3, r7, r1
 800709a:	2203      	movs	r2, #3
 800709c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800709e:	187b      	adds	r3, r7, r1
 80070a0:	2206      	movs	r2, #6
 80070a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070a4:	187b      	adds	r3, r7, r1
 80070a6:	4a34      	ldr	r2, [pc, #208]	@ (8007178 <HAL_UART_MspInit+0x1e8>)
 80070a8:	0019      	movs	r1, r3
 80070aa:	0010      	movs	r0, r2
 80070ac:	f001 f8b2 	bl	8008214 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80070b0:	4b32      	ldr	r3, [pc, #200]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070b2:	4a33      	ldr	r2, [pc, #204]	@ (8007180 <HAL_UART_MspInit+0x1f0>)
 80070b4:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80070b6:	4b31      	ldr	r3, [pc, #196]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070b8:	220c      	movs	r2, #12
 80070ba:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070bc:	4b2f      	ldr	r3, [pc, #188]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070be:	2200      	movs	r2, #0
 80070c0:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070c2:	4b2e      	ldr	r3, [pc, #184]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80070c8:	4b2c      	ldr	r3, [pc, #176]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070ca:	2280      	movs	r2, #128	@ 0x80
 80070cc:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070ce:	4b2b      	ldr	r3, [pc, #172]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070d4:	4b29      	ldr	r3, [pc, #164]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80070da:	4b28      	ldr	r3, [pc, #160]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070dc:	2220      	movs	r2, #32
 80070de:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80070e0:	4b26      	ldr	r3, [pc, #152]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80070e6:	4b25      	ldr	r3, [pc, #148]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070e8:	0018      	movs	r0, r3
 80070ea:	f000 fde7 	bl	8007cbc <HAL_DMA_Init>
 80070ee:	1e03      	subs	r3, r0, #0
 80070f0:	d001      	beq.n	80070f6 <HAL_UART_MspInit+0x166>
      Error_Handler();
 80070f2:	f7fd fc21 	bl	8004938 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a20      	ldr	r2, [pc, #128]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80070fc:	4b1f      	ldr	r3, [pc, #124]	@ (800717c <HAL_UART_MspInit+0x1ec>)
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8007102:	4b20      	ldr	r3, [pc, #128]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 8007104:	4a20      	ldr	r2, [pc, #128]	@ (8007188 <HAL_UART_MspInit+0x1f8>)
 8007106:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8007108:	4b1e      	ldr	r3, [pc, #120]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 800710a:	220c      	movs	r2, #12
 800710c:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800710e:	4b1d      	ldr	r3, [pc, #116]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 8007110:	2210      	movs	r2, #16
 8007112:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007114:	4b1b      	ldr	r3, [pc, #108]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 8007116:	2200      	movs	r2, #0
 8007118:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800711a:	4b1a      	ldr	r3, [pc, #104]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 800711c:	2280      	movs	r2, #128	@ 0x80
 800711e:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007120:	4b18      	ldr	r3, [pc, #96]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 8007122:	2200      	movs	r2, #0
 8007124:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007126:	4b17      	ldr	r3, [pc, #92]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 8007128:	2200      	movs	r2, #0
 800712a:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800712c:	4b15      	ldr	r3, [pc, #84]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 800712e:	2200      	movs	r2, #0
 8007130:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007132:	4b14      	ldr	r3, [pc, #80]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 8007134:	2200      	movs	r2, #0
 8007136:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8007138:	4b12      	ldr	r3, [pc, #72]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 800713a:	0018      	movs	r0, r3
 800713c:	f000 fdbe 	bl	8007cbc <HAL_DMA_Init>
 8007140:	1e03      	subs	r3, r0, #0
 8007142:	d001      	beq.n	8007148 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8007144:	f7fd fbf8 	bl	8004938 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a0e      	ldr	r2, [pc, #56]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 800714c:	671a      	str	r2, [r3, #112]	@ 0x70
 800714e:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <HAL_UART_MspInit+0x1f4>)
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8007154:	2200      	movs	r2, #0
 8007156:	2100      	movs	r1, #0
 8007158:	200e      	movs	r0, #14
 800715a:	f000 fd7d 	bl	8007c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800715e:	200e      	movs	r0, #14
 8007160:	f000 fd8f 	bl	8007c82 <HAL_NVIC_EnableIRQ>
}
 8007164:	46c0      	nop			@ (mov r8, r8)
 8007166:	46bd      	mov	sp, r7
 8007168:	b00b      	add	sp, #44	@ 0x2c
 800716a:	bd90      	pop	{r4, r7, pc}
 800716c:	40013800 	.word	0x40013800
 8007170:	40021000 	.word	0x40021000
 8007174:	40004c00 	.word	0x40004c00
 8007178:	50000800 	.word	0x50000800
 800717c:	20000d58 	.word	0x20000d58
 8007180:	4002006c 	.word	0x4002006c
 8007184:	20000da0 	.word	0x20000da0
 8007188:	40020080 	.word	0x40020080

0800718c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8007190:	4b0f      	ldr	r3, [pc, #60]	@ (80071d0 <MX_USB_PCD_Init+0x44>)
 8007192:	4a10      	ldr	r2, [pc, #64]	@ (80071d4 <MX_USB_PCD_Init+0x48>)
 8007194:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007196:	4b0e      	ldr	r3, [pc, #56]	@ (80071d0 <MX_USB_PCD_Init+0x44>)
 8007198:	2208      	movs	r2, #8
 800719a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800719c:	4b0c      	ldr	r3, [pc, #48]	@ (80071d0 <MX_USB_PCD_Init+0x44>)
 800719e:	2202      	movs	r2, #2
 80071a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071a2:	4b0b      	ldr	r3, [pc, #44]	@ (80071d0 <MX_USB_PCD_Init+0x44>)
 80071a4:	2202      	movs	r2, #2
 80071a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80071a8:	4b09      	ldr	r3, [pc, #36]	@ (80071d0 <MX_USB_PCD_Init+0x44>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80071ae:	4b08      	ldr	r3, [pc, #32]	@ (80071d0 <MX_USB_PCD_Init+0x44>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80071b4:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <MX_USB_PCD_Init+0x44>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80071ba:	4b05      	ldr	r3, [pc, #20]	@ (80071d0 <MX_USB_PCD_Init+0x44>)
 80071bc:	0018      	movs	r0, r3
 80071be:	f003 fe05 	bl	800adcc <HAL_PCD_Init>
 80071c2:	1e03      	subs	r3, r0, #0
 80071c4:	d001      	beq.n	80071ca <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80071c6:	f7fd fbb7 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000de8 	.word	0x20000de8
 80071d4:	40005c00 	.word	0x40005c00

080071d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a06      	ldr	r2, [pc, #24]	@ (8007200 <HAL_PCD_MspInit+0x28>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d106      	bne.n	80071f8 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80071ea:	4b06      	ldr	r3, [pc, #24]	@ (8007204 <HAL_PCD_MspInit+0x2c>)
 80071ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ee:	4b05      	ldr	r3, [pc, #20]	@ (8007204 <HAL_PCD_MspInit+0x2c>)
 80071f0:	2180      	movs	r1, #128	@ 0x80
 80071f2:	0409      	lsls	r1, r1, #16
 80071f4:	430a      	orrs	r2, r1
 80071f6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80071f8:	46c0      	nop			@ (mov r8, r8)
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b002      	add	sp, #8
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40005c00 	.word	0x40005c00
 8007204:	40021000 	.word	0x40021000

08007208 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8007210:	f000 fc48 	bl	8007aa4 <HAL_GetTick>
 8007214:	0003      	movs	r3, r0
 8007216:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8007218:	4b1c      	ldr	r3, [pc, #112]	@ (800728c <TimestampIsReached+0x84>)
 800721a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d307      	bcc.n	8007234 <TimestampIsReached+0x2c>
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	429a      	cmp	r2, r3
 800722e:	d901      	bls.n	8007234 <TimestampIsReached+0x2c>
 8007230:	2201      	movs	r2, #1
 8007232:	e000      	b.n	8007236 <TimestampIsReached+0x2e>
 8007234:	2200      	movs	r2, #0
 8007236:	230f      	movs	r3, #15
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	781a      	ldrb	r2, [r3, #0]
 800723e:	2101      	movs	r1, #1
 8007240:	400a      	ands	r2, r1
 8007242:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d207      	bcs.n	800725c <TimestampIsReached+0x54>
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	429a      	cmp	r2, r3
 8007256:	d201      	bcs.n	800725c <TimestampIsReached+0x54>
 8007258:	2201      	movs	r2, #1
 800725a:	e000      	b.n	800725e <TimestampIsReached+0x56>
 800725c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800725e:	200e      	movs	r0, #14
 8007260:	183b      	adds	r3, r7, r0
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	781a      	ldrb	r2, [r3, #0]
 8007266:	2101      	movs	r1, #1
 8007268:	400a      	ands	r2, r1
 800726a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800726c:	230f      	movs	r3, #15
 800726e:	18fb      	adds	r3, r7, r3
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <TimestampIsReached+0x76>
 8007276:	183b      	adds	r3, r7, r0
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8007282:	2300      	movs	r3, #0
}
 8007284:	0018      	movs	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	b006      	add	sp, #24
 800728a:	bd80      	pop	{r7, pc}
 800728c:	7fffffff 	.word	0x7fffffff

08007290 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8007298:	f000 fc04 	bl	8007aa4 <HAL_GetTick>
 800729c:	0002      	movs	r2, r0
 800729e:	4904      	ldr	r1, [pc, #16]	@ (80072b0 <AddTimestamp+0x20>)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	0018      	movs	r0, r3
 80072a4:	f007 fbbe 	bl	800ea24 <siprintf>
}
 80072a8:	46c0      	nop			@ (mov r8, r8)
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b002      	add	sp, #8
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	08011828 	.word	0x08011828

080072b4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80072b4:	b40c      	push	{r2, r3}
 80072b6:	b5b0      	push	{r4, r5, r7, lr}
 80072b8:	4c2b      	ldr	r4, [pc, #172]	@ (8007368 <CreateLine+0xb4>)
 80072ba:	44a5      	add	sp, r4
 80072bc:	af00      	add	r7, sp, #0
 80072be:	0002      	movs	r2, r0
 80072c0:	6039      	str	r1, [r7, #0]
 80072c2:	4b2a      	ldr	r3, [pc, #168]	@ (800736c <CreateLine+0xb8>)
 80072c4:	2182      	movs	r1, #130	@ 0x82
 80072c6:	00c9      	lsls	r1, r1, #3
 80072c8:	185b      	adds	r3, r3, r1
 80072ca:	19db      	adds	r3, r3, r7
 80072cc:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80072ce:	4b28      	ldr	r3, [pc, #160]	@ (8007370 <CreateLine+0xbc>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	4a26      	ldr	r2, [pc, #152]	@ (800736c <CreateLine+0xb8>)
 80072d4:	1852      	adds	r2, r2, r1
 80072d6:	19d2      	adds	r2, r2, r7
 80072d8:	7812      	ldrb	r2, [r2, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d83b      	bhi.n	8007356 <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	4924      	ldr	r1, [pc, #144]	@ (8007374 <CreateLine+0xc0>)
 80072e2:	240c      	movs	r4, #12
 80072e4:	193b      	adds	r3, r7, r4
 80072e6:	0018      	movs	r0, r3
 80072e8:	f007 fb9c 	bl	800ea24 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80072ec:	4b20      	ldr	r3, [pc, #128]	@ (8007370 <CreateLine+0xbc>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d909      	bls.n	8007308 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80072f4:	193b      	adds	r3, r7, r4
 80072f6:	0018      	movs	r0, r3
 80072f8:	f7f8 ff06 	bl	8000108 <strlen>
 80072fc:	0002      	movs	r2, r0
 80072fe:	193b      	adds	r3, r7, r4
 8007300:	189b      	adds	r3, r3, r2
 8007302:	0018      	movs	r0, r3
 8007304:	f7ff ffc4 	bl	8007290 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8007308:	240c      	movs	r4, #12
 800730a:	193b      	adds	r3, r7, r4
 800730c:	0018      	movs	r0, r3
 800730e:	f7f8 fefb 	bl	8000108 <strlen>
 8007312:	0003      	movs	r3, r0
 8007314:	4918      	ldr	r1, [pc, #96]	@ (8007378 <CreateLine+0xc4>)
 8007316:	187a      	adds	r2, r7, r1
 8007318:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800731a:	4b18      	ldr	r3, [pc, #96]	@ (800737c <CreateLine+0xc8>)
 800731c:	2508      	movs	r5, #8
 800731e:	195b      	adds	r3, r3, r5
 8007320:	19db      	adds	r3, r3, r7
 8007322:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8007324:	193a      	adds	r2, r7, r4
 8007326:	187b      	adds	r3, r7, r1
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	18d0      	adds	r0, r2, r3
 800732c:	187b      	adds	r3, r7, r1
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2280      	movs	r2, #128	@ 0x80
 8007332:	00d2      	lsls	r2, r2, #3
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	0019      	movs	r1, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2283      	movs	r2, #131	@ 0x83
 800733c:	00d2      	lsls	r2, r2, #3
 800733e:	1952      	adds	r2, r2, r5
 8007340:	19d2      	adds	r2, r2, r7
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	f007 fc06 	bl	800eb54 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8007348:	193a      	adds	r2, r7, r4
 800734a:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <CreateLine+0xcc>)
 800734c:	0011      	movs	r1, r2
 800734e:	0018      	movs	r0, r3
 8007350:	f007 fb58 	bl	800ea04 <iprintf>
 8007354:	e000      	b.n	8007358 <CreateLine+0xa4>
    return;
 8007356:	46c0      	nop			@ (mov r8, r8)
}
 8007358:	46bd      	mov	sp, r7
 800735a:	2382      	movs	r3, #130	@ 0x82
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	449d      	add	sp, r3
 8007360:	bcb0      	pop	{r4, r5, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	b002      	add	sp, #8
 8007366:	4718      	bx	r3
 8007368:	fffffbf0 	.word	0xfffffbf0
 800736c:	fffffbf7 	.word	0xfffffbf7
 8007370:	20000060 	.word	0x20000060
 8007374:	08011834 	.word	0x08011834
 8007378:	0000040c 	.word	0x0000040c
 800737c:	0000041c 	.word	0x0000041c
 8007380:	08011838 	.word	0x08011838

08007384 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	b29a      	uxth	r2, r3
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	4804      	ldr	r0, [pc, #16]	@ (80073a8 <_write+0x24>)
 8007398:	2364      	movs	r3, #100	@ 0x64
 800739a:	f005 f995 	bl	800c6c8 <HAL_UART_Transmit>
  return count;
 800739e:	687b      	ldr	r3, [r7, #4]
}
 80073a0:	0018      	movs	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	b004      	add	sp, #16
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000be8 	.word	0x20000be8

080073ac <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	0002      	movs	r2, r0
 80073b4:	1dfb      	adds	r3, r7, #7
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	4b03      	ldr	r3, [pc, #12]	@ (80073c8 <SetVerboseLevel+0x1c>)
 80073ba:	1dfa      	adds	r2, r7, #7
 80073bc:	7812      	ldrb	r2, [r2, #0]
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	46c0      	nop			@ (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b002      	add	sp, #8
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000060 	.word	0x20000060

080073cc <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80073d0:	f000 fb68 	bl	8007aa4 <HAL_GetTick>
 80073d4:	0003      	movs	r3, r0
}
 80073d6:	0018      	movs	r0, r3
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 80073e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007420 <BinaryReleaseInfo+0x44>)
 80073e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007424 <BinaryReleaseInfo+0x48>)
 80073e6:	0019      	movs	r1, r3
 80073e8:	2002      	movs	r0, #2
 80073ea:	f7ff ff63 	bl	80072b4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80073ee:	480e      	ldr	r0, [pc, #56]	@ (8007428 <BinaryReleaseInfo+0x4c>)
 80073f0:	4a0e      	ldr	r2, [pc, #56]	@ (800742c <BinaryReleaseInfo+0x50>)
 80073f2:	490c      	ldr	r1, [pc, #48]	@ (8007424 <BinaryReleaseInfo+0x48>)
 80073f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007430 <BinaryReleaseInfo+0x54>)
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	0003      	movs	r3, r0
 80073fa:	2002      	movs	r0, #2
 80073fc:	f7ff ff5a 	bl	80072b4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8007400:	4a0c      	ldr	r2, [pc, #48]	@ (8007434 <BinaryReleaseInfo+0x58>)
 8007402:	4b08      	ldr	r3, [pc, #32]	@ (8007424 <BinaryReleaseInfo+0x48>)
 8007404:	0019      	movs	r1, r3
 8007406:	2002      	movs	r0, #2
 8007408:	f7ff ff54 	bl	80072b4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800740c:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <BinaryReleaseInfo+0x5c>)
 800740e:	4a0b      	ldr	r2, [pc, #44]	@ (800743c <BinaryReleaseInfo+0x60>)
 8007410:	4904      	ldr	r1, [pc, #16]	@ (8007424 <BinaryReleaseInfo+0x48>)
 8007412:	2002      	movs	r0, #2
 8007414:	f7ff ff4e 	bl	80072b4 <CreateLine>
}
 8007418:	46c0      	nop			@ (mov r8, r8)
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	46c0      	nop			@ (mov r8, r8)
 8007420:	08011840 	.word	0x08011840
 8007424:	0801186c 	.word	0x0801186c
 8007428:	08011870 	.word	0x08011870
 800742c:	0801187c 	.word	0x0801187c
 8007430:	08011890 	.word	0x08011890
 8007434:	0801189c 	.word	0x0801189c
 8007438:	080118a8 	.word	0x080118a8
 800743c:	080118b0 	.word	0x080118b0

08007440 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6039      	str	r1, [r7, #0]
 8007448:	0011      	movs	r1, r2
 800744a:	1dfb      	adds	r3, r7, #7
 800744c:	1c02      	adds	r2, r0, #0
 800744e:	701a      	strb	r2, [r3, #0]
 8007450:	1dbb      	adds	r3, r7, #6
 8007452:	1c0a      	adds	r2, r1, #0
 8007454:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8007456:	4b08      	ldr	r3, [pc, #32]	@ (8007478 <ReadRegister+0x38>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 800745e:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <ReadRegister+0x38>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	1dba      	adds	r2, r7, #6
 8007464:	7814      	ldrb	r4, [r2, #0]
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	1dfa      	adds	r2, r7, #7
 800746a:	7810      	ldrb	r0, [r2, #0]
 800746c:	0022      	movs	r2, r4
 800746e:	4798      	blx	r3
	}
}
 8007470:	46c0      	nop			@ (mov r8, r8)
 8007472:	46bd      	mov	sp, r7
 8007474:	b003      	add	sp, #12
 8007476:	bd90      	pop	{r4, r7, pc}
 8007478:	200010dc 	.word	0x200010dc

0800747c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6039      	str	r1, [r7, #0]
 8007484:	0011      	movs	r1, r2
 8007486:	1dfb      	adds	r3, r7, #7
 8007488:	1c02      	adds	r2, r0, #0
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	1dbb      	adds	r3, r7, #6
 800748e:	1c0a      	adds	r2, r1, #0
 8007490:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8007492:	4b08      	ldr	r3, [pc, #32]	@ (80074b4 <WriteRegister+0x38>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d008      	beq.n	80074ac <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800749a:	4b06      	ldr	r3, [pc, #24]	@ (80074b4 <WriteRegister+0x38>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	1dba      	adds	r2, r7, #6
 80074a0:	7814      	ldrb	r4, [r2, #0]
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	1dfa      	adds	r2, r7, #7
 80074a6:	7810      	ldrb	r0, [r2, #0]
 80074a8:	0022      	movs	r2, r4
 80074aa:	4798      	blx	r3
  }
}
 80074ac:	46c0      	nop			@ (mov r8, r8)
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b003      	add	sp, #12
 80074b2:	bd90      	pop	{r4, r7, pc}
 80074b4:	200010e0 	.word	0x200010e0

080074b8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	000a      	movs	r2, r1
 80074c2:	1cfb      	adds	r3, r7, #3
 80074c4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80074c6:	230f      	movs	r3, #15
 80074c8:	18fb      	adds	r3, r7, r3
 80074ca:	22ff      	movs	r2, #255	@ 0xff
 80074cc:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80074ce:	230e      	movs	r3, #14
 80074d0:	18fb      	adds	r3, r7, r3
 80074d2:	2200      	movs	r2, #0
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	e037      	b.n	8007548 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80074d8:	230e      	movs	r3, #14
 80074da:	18fb      	adds	r3, r7, r3
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	18d3      	adds	r3, r2, r3
 80074e2:	7819      	ldrb	r1, [r3, #0]
 80074e4:	220f      	movs	r2, #15
 80074e6:	18bb      	adds	r3, r7, r2
 80074e8:	18ba      	adds	r2, r7, r2
 80074ea:	7812      	ldrb	r2, [r2, #0]
 80074ec:	404a      	eors	r2, r1
 80074ee:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80074f0:	230d      	movs	r3, #13
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	e01b      	b.n	8007532 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80074fa:	210f      	movs	r1, #15
 80074fc:	187b      	adds	r3, r7, r1
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	b25b      	sxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	da09      	bge.n	800751a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8007506:	187b      	adds	r3, r7, r1
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	b25b      	sxtb	r3, r3
 800750e:	2231      	movs	r2, #49	@ 0x31
 8007510:	4053      	eors	r3, r2
 8007512:	b25a      	sxtb	r2, r3
 8007514:	187b      	adds	r3, r7, r1
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	e005      	b.n	8007526 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800751a:	230f      	movs	r3, #15
 800751c:	18fa      	adds	r2, r7, r3
 800751e:	18fb      	adds	r3, r7, r3
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	18db      	adds	r3, r3, r3
 8007524:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8007526:	210d      	movs	r1, #13
 8007528:	187b      	adds	r3, r7, r1
 800752a:	781a      	ldrb	r2, [r3, #0]
 800752c:	187b      	adds	r3, r7, r1
 800752e:	3201      	adds	r2, #1
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	230d      	movs	r3, #13
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b07      	cmp	r3, #7
 800753a:	d9de      	bls.n	80074fa <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800753c:	210e      	movs	r1, #14
 800753e:	187b      	adds	r3, r7, r1
 8007540:	781a      	ldrb	r2, [r3, #0]
 8007542:	187b      	adds	r3, r7, r1
 8007544:	3201      	adds	r2, #1
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	230e      	movs	r3, #14
 800754a:	18fa      	adds	r2, r7, r3
 800754c:	1cfb      	adds	r3, r7, #3
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d3c0      	bcc.n	80074d8 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8007556:	230f      	movs	r3, #15
 8007558:	18fb      	adds	r3, r7, r3
 800755a:	781b      	ldrb	r3, [r3, #0]
}
 800755c:	0018      	movs	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	b004      	add	sp, #16
 8007562:	bd80      	pop	{r7, pc}

08007564 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800756e:	4b0a      	ldr	r3, [pc, #40]	@ (8007598 <HIDS_Init+0x34>)
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8007574:	4b09      	ldr	r3, [pc, #36]	@ (800759c <HIDS_Init+0x38>)
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800757a:	4b09      	ldr	r3, [pc, #36]	@ (80075a0 <HIDS_Init+0x3c>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	0018      	movs	r0, r3
 8007580:	f000 f8d0 	bl	8007724 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8007584:	4b07      	ldr	r3, [pc, #28]	@ (80075a4 <HIDS_Init+0x40>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	0018      	movs	r0, r3
 800758a:	f000 f82b 	bl	80075e4 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800758e:	46c0      	nop			@ (mov r8, r8)
 8007590:	46bd      	mov	sp, r7
 8007592:	b002      	add	sp, #8
 8007594:	bd80      	pop	{r7, pc}
 8007596:	46c0      	nop			@ (mov r8, r8)
 8007598:	200010dc 	.word	0x200010dc
 800759c:	200010e0 	.word	0x200010e0
 80075a0:	20000062 	.word	0x20000062
 80075a4:	20000061 	.word	0x20000061

080075a8 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 80075ac:	f7ff ff0e 	bl	80073cc <GetCurrentHalTicks>
 80075b0:	0002      	movs	r2, r0
 80075b2:	4b08      	ldr	r3, [pc, #32]	@ (80075d4 <HIDS_StartMeasurement+0x2c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	18d2      	adds	r2, r2, r3
 80075b8:	4b07      	ldr	r3, [pc, #28]	@ (80075d8 <HIDS_StartMeasurement+0x30>)
 80075ba:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80075bc:	4b07      	ldr	r3, [pc, #28]	@ (80075dc <HIDS_StartMeasurement+0x34>)
 80075be:	2201      	movs	r2, #1
 80075c0:	0019      	movs	r1, r3
 80075c2:	2044      	movs	r0, #68	@ 0x44
 80075c4:	f7ff ff5a 	bl	800747c <WriteRegister>
  MeasurementDone = false;
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <HIDS_StartMeasurement+0x38>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
}
 80075ce:	46c0      	nop			@ (mov r8, r8)
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000068 	.word	0x20000068
 80075d8:	20000064 	.word	0x20000064
 80075dc:	20000062 	.word	0x20000062
 80075e0:	200010f2 	.word	0x200010f2

080075e4 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	0002      	movs	r2, r0
 80075ec:	1dfb      	adds	r3, r7, #7
 80075ee:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80075f0:	4b03      	ldr	r3, [pc, #12]	@ (8007600 <HIDS_SetHeaterMode+0x1c>)
 80075f2:	1dfa      	adds	r2, r7, #7
 80075f4:	7812      	ldrb	r2, [r2, #0]
 80075f6:	701a      	strb	r2, [r3, #0]
}
 80075f8:	46c0      	nop			@ (mov r8, r8)
 80075fa:	46bd      	mov	sp, r7
 80075fc:	b002      	add	sp, #8
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20000061 	.word	0x20000061

08007604 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8007604:	b590      	push	{r4, r7, lr}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	210c      	movs	r1, #12
 8007612:	187b      	adds	r3, r7, r1
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	785a      	ldrb	r2, [r3, #1]
 800761a:	187b      	adds	r3, r7, r1
 800761c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800761e:	240f      	movs	r4, #15
 8007620:	193b      	adds	r3, r7, r4
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	7892      	ldrb	r2, [r2, #2]
 8007626:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8007628:	187b      	adds	r3, r7, r1
 800762a:	2102      	movs	r1, #2
 800762c:	0018      	movs	r0, r3
 800762e:	f7ff ff43 	bl	80074b8 <CalculateCRC>
 8007632:	0003      	movs	r3, r0
 8007634:	001a      	movs	r2, r3
 8007636:	193b      	adds	r3, r7, r4
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	4293      	cmp	r3, r2
 800763c:	d007      	beq.n	800764e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800763e:	4a17      	ldr	r2, [pc, #92]	@ (800769c <CheckCRC+0x98>)
 8007640:	4b17      	ldr	r3, [pc, #92]	@ (80076a0 <CheckCRC+0x9c>)
 8007642:	0019      	movs	r1, r3
 8007644:	2001      	movs	r0, #1
 8007646:	f7ff fe35 	bl	80072b4 <CreateLine>
		return false;
 800764a:	2300      	movs	r3, #0
 800764c:	e021      	b.n	8007692 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	78da      	ldrb	r2, [r3, #3]
 8007652:	2108      	movs	r1, #8
 8007654:	187b      	adds	r3, r7, r1
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	791a      	ldrb	r2, [r3, #4]
 800765c:	187b      	adds	r3, r7, r1
 800765e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8007660:	240e      	movs	r4, #14
 8007662:	193b      	adds	r3, r7, r4
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	7952      	ldrb	r2, [r2, #5]
 8007668:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800766a:	187b      	adds	r3, r7, r1
 800766c:	2102      	movs	r1, #2
 800766e:	0018      	movs	r0, r3
 8007670:	f7ff ff22 	bl	80074b8 <CalculateCRC>
 8007674:	0003      	movs	r3, r0
 8007676:	001a      	movs	r2, r3
 8007678:	193b      	adds	r3, r7, r4
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	4293      	cmp	r3, r2
 800767e:	d007      	beq.n	8007690 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8007680:	4a08      	ldr	r2, [pc, #32]	@ (80076a4 <CheckCRC+0xa0>)
 8007682:	4b07      	ldr	r3, [pc, #28]	@ (80076a0 <CheckCRC+0x9c>)
 8007684:	0019      	movs	r1, r3
 8007686:	2001      	movs	r0, #1
 8007688:	f7ff fe14 	bl	80072b4 <CreateLine>
		return false;
 800768c:	2300      	movs	r3, #0
 800768e:	e000      	b.n	8007692 <CheckCRC+0x8e>
	}
	return true;
 8007690:	2301      	movs	r3, #1
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b005      	add	sp, #20
 8007698:	bd90      	pop	{r4, r7, pc}
 800769a:	46c0      	nop			@ (mov r8, r8)
 800769c:	080118ec 	.word	0x080118ec
 80076a0:	08011914 	.word	0x08011914
 80076a4:	08011918 	.word	0x08011918

080076a8 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80076ae:	1dbb      	adds	r3, r7, #6
 80076b0:	2289      	movs	r2, #137	@ 0x89
 80076b2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80076b4:	1dbb      	adds	r3, r7, #6
 80076b6:	2201      	movs	r2, #1
 80076b8:	0019      	movs	r1, r3
 80076ba:	2044      	movs	r0, #68	@ 0x44
 80076bc:	f7ff fede 	bl	800747c <WriteRegister>
	HAL_Delay(30);
 80076c0:	201e      	movs	r0, #30
 80076c2:	f000 f9f9 	bl	8007ab8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80076c6:	4b14      	ldr	r3, [pc, #80]	@ (8007718 <HIDS_DeviceConnected+0x70>)
 80076c8:	2206      	movs	r2, #6
 80076ca:	0019      	movs	r1, r3
 80076cc:	2044      	movs	r0, #68	@ 0x44
 80076ce:	f7ff feb7 	bl	8007440 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80076d2:	1dfb      	adds	r3, r7, #7
 80076d4:	2200      	movs	r2, #0
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	e011      	b.n	80076fe <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 80076da:	1dfb      	adds	r3, r7, #7
 80076dc:	7818      	ldrb	r0, [r3, #0]
 80076de:	1dfb      	adds	r3, r7, #7
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007718 <HIDS_DeviceConnected+0x70>)
 80076e4:	5cd3      	ldrb	r3, [r2, r3]
 80076e6:	4a0d      	ldr	r2, [pc, #52]	@ (800771c <HIDS_DeviceConnected+0x74>)
 80076e8:	490d      	ldr	r1, [pc, #52]	@ (8007720 <HIDS_DeviceConnected+0x78>)
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	0003      	movs	r3, r0
 80076ee:	2002      	movs	r0, #2
 80076f0:	f7ff fde0 	bl	80072b4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80076f4:	1dfb      	adds	r3, r7, #7
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	1dfb      	adds	r3, r7, #7
 80076fa:	3201      	adds	r2, #1
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	1dfb      	adds	r3, r7, #7
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b05      	cmp	r3, #5
 8007704:	d9e9      	bls.n	80076da <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8007706:	4b04      	ldr	r3, [pc, #16]	@ (8007718 <HIDS_DeviceConnected+0x70>)
 8007708:	0018      	movs	r0, r3
 800770a:	f7ff ff7b 	bl	8007604 <CheckCRC>
 800770e:	0003      	movs	r3, r0
}
 8007710:	0018      	movs	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	b002      	add	sp, #8
 8007716:	bd80      	pop	{r7, pc}
 8007718:	200010e4 	.word	0x200010e4
 800771c:	08011944 	.word	0x08011944
 8007720:	080118e8 	.word	0x080118e8

08007724 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	0002      	movs	r2, r0
 800772c:	1dfb      	adds	r3, r7, #7
 800772e:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8007730:	4b03      	ldr	r3, [pc, #12]	@ (8007740 <HIDS_SetMeasurementMode+0x1c>)
 8007732:	1dfa      	adds	r2, r7, #7
 8007734:	7812      	ldrb	r2, [r2, #0]
 8007736:	701a      	strb	r2, [r3, #0]
}
 8007738:	46c0      	nop			@ (mov r8, r8)
 800773a:	46bd      	mov	sp, r7
 800773c:	b002      	add	sp, #8
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000062 	.word	0x20000062

08007744 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8007748:	4b04      	ldr	r3, [pc, #16]	@ (800775c <HIDS_MeasurementReady+0x18>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	0018      	movs	r0, r3
 800774e:	f7ff fd5b 	bl	8007208 <TimestampIsReached>
 8007752:	0003      	movs	r3, r0
}
 8007754:	0018      	movs	r0, r3
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	46c0      	nop			@ (mov r8, r8)
 800775c:	20000064 	.word	0x20000064

08007760 <HIDS_GetMeasurementValues>:
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b08c      	sub	sp, #48	@ 0x30
 8007764:	af02      	add	r7, sp, #8
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800776a:	4b7a      	ldr	r3, [pc, #488]	@ (8007954 <HIDS_GetMeasurementValues+0x1f4>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HIDS_GetMeasurementValues+0x16>
 8007772:	2301      	movs	r3, #1
 8007774:	e0ea      	b.n	800794c <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8007776:	f7ff ffe5 	bl	8007744 <HIDS_MeasurementReady>
 800777a:	0003      	movs	r3, r0
 800777c:	001a      	movs	r2, r3
 800777e:	2301      	movs	r3, #1
 8007780:	4053      	eors	r3, r2
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <HIDS_GetMeasurementValues+0x2c>
 8007788:	2300      	movs	r3, #0
 800778a:	e0df      	b.n	800794c <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 800778c:	4b72      	ldr	r3, [pc, #456]	@ (8007958 <HIDS_GetMeasurementValues+0x1f8>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	4b72      	ldr	r3, [pc, #456]	@ (800795c <HIDS_GetMeasurementValues+0x1fc>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	0019      	movs	r1, r3
 8007796:	0010      	movs	r0, r2
 8007798:	f7f8 fcd2 	bl	8000140 <__udivsi3>
 800779c:	0003      	movs	r3, r0
 800779e:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 80077a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	1c58      	adds	r0, r3, #1
 80077a6:	4a6f      	ldr	r2, [pc, #444]	@ (8007964 <HIDS_GetMeasurementValues+0x204>)
 80077a8:	496f      	ldr	r1, [pc, #444]	@ (8007968 <HIDS_GetMeasurementValues+0x208>)
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	0003      	movs	r3, r0
 80077b0:	2003      	movs	r0, #3
 80077b2:	f7ff fd7f 	bl	80072b4 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 80077b6:	4b6d      	ldr	r3, [pc, #436]	@ (800796c <HIDS_GetMeasurementValues+0x20c>)
 80077b8:	2206      	movs	r2, #6
 80077ba:	0019      	movs	r1, r3
 80077bc:	2044      	movs	r0, #68	@ 0x44
 80077be:	f7ff fe3f 	bl	8007440 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 80077c2:	4b6a      	ldr	r3, [pc, #424]	@ (800796c <HIDS_GetMeasurementValues+0x20c>)
 80077c4:	0018      	movs	r0, r3
 80077c6:	f7ff ff1d 	bl	8007604 <CheckCRC>
 80077ca:	0003      	movs	r3, r0
 80077cc:	001a      	movs	r2, r3
 80077ce:	2301      	movs	r3, #1
 80077d0:	4053      	eors	r3, r2
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d011      	beq.n	80077fc <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 80077d8:	2327      	movs	r3, #39	@ 0x27
 80077da:	18fb      	adds	r3, r7, r3
 80077dc:	2200      	movs	r2, #0
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	e005      	b.n	80077ee <HIDS_GetMeasurementValues+0x8e>
 80077e2:	2127      	movs	r1, #39	@ 0x27
 80077e4:	187b      	adds	r3, r7, r1
 80077e6:	781a      	ldrb	r2, [r3, #0]
 80077e8:	187b      	adds	r3, r7, r1
 80077ea:	3201      	adds	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	2327      	movs	r3, #39	@ 0x27
 80077f0:	18fb      	adds	r3, r7, r3
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b05      	cmp	r3, #5
 80077f6:	d9f4      	bls.n	80077e2 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e0a7      	b.n	800794c <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 80077fc:	4b5b      	ldr	r3, [pc, #364]	@ (800796c <HIDS_GetMeasurementValues+0x20c>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	22af      	movs	r2, #175	@ 0xaf
 8007804:	4353      	muls	r3, r2
 8007806:	4a59      	ldr	r2, [pc, #356]	@ (800796c <HIDS_GetMeasurementValues+0x20c>)
 8007808:	7852      	ldrb	r2, [r2, #1]
 800780a:	4313      	orrs	r3, r2
 800780c:	0018      	movs	r0, r3
 800780e:	f7fb fd55 	bl	80032bc <__aeabi_i2d>
 8007812:	2200      	movs	r2, #0
 8007814:	4b56      	ldr	r3, [pc, #344]	@ (8007970 <HIDS_GetMeasurementValues+0x210>)
 8007816:	f7fa fa4b 	bl	8001cb0 <__aeabi_ddiv>
 800781a:	0002      	movs	r2, r0
 800781c:	000b      	movs	r3, r1
 800781e:	0010      	movs	r0, r2
 8007820:	0019      	movs	r1, r3
 8007822:	f7fb fde5 	bl	80033f0 <__aeabi_d2f>
 8007826:	1c03      	adds	r3, r0, #0
 8007828:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800782a:	4952      	ldr	r1, [pc, #328]	@ (8007974 <HIDS_GetMeasurementValues+0x214>)
 800782c:	6938      	ldr	r0, [r7, #16]
 800782e:	f7f9 fc73 	bl	8001118 <__aeabi_fsub>
 8007832:	1c03      	adds	r3, r0, #0
 8007834:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8007836:	4b4d      	ldr	r3, [pc, #308]	@ (800796c <HIDS_GetMeasurementValues+0x20c>)
 8007838:	78db      	ldrb	r3, [r3, #3]
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	4a4b      	ldr	r2, [pc, #300]	@ (800796c <HIDS_GetMeasurementValues+0x20c>)
 800783e:	7912      	ldrb	r2, [r2, #4]
 8007840:	431a      	orrs	r2, r3
 8007842:	0013      	movs	r3, r2
 8007844:	015b      	lsls	r3, r3, #5
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	189b      	adds	r3, r3, r2
 800784c:	0018      	movs	r0, r3
 800784e:	f7fb fd35 	bl	80032bc <__aeabi_i2d>
 8007852:	2200      	movs	r2, #0
 8007854:	4b46      	ldr	r3, [pc, #280]	@ (8007970 <HIDS_GetMeasurementValues+0x210>)
 8007856:	f7fa fa2b 	bl	8001cb0 <__aeabi_ddiv>
 800785a:	0002      	movs	r2, r0
 800785c:	000b      	movs	r3, r1
 800785e:	0010      	movs	r0, r2
 8007860:	0019      	movs	r1, r3
 8007862:	f7fb fdc5 	bl	80033f0 <__aeabi_d2f>
 8007866:	1c03      	adds	r3, r0, #0
 8007868:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800786a:	4943      	ldr	r1, [pc, #268]	@ (8007978 <HIDS_GetMeasurementValues+0x218>)
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f7f9 fc53 	bl	8001118 <__aeabi_fsub>
 8007872:	1c03      	adds	r3, r0, #0
 8007874:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8007876:	4b3a      	ldr	r3, [pc, #232]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	429a      	cmp	r2, r3
 800787e:	d910      	bls.n	80078a2 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 8007880:	4b37      	ldr	r3, [pc, #220]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4b3d      	ldr	r3, [pc, #244]	@ (800797c <HIDS_GetMeasurementValues+0x21c>)
 8007886:	0092      	lsls	r2, r2, #2
 8007888:	6939      	ldr	r1, [r7, #16]
 800788a:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 800788c:	4b34      	ldr	r3, [pc, #208]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b3b      	ldr	r3, [pc, #236]	@ (8007980 <HIDS_GetMeasurementValues+0x220>)
 8007892:	0092      	lsls	r2, r2, #2
 8007894:	68f9      	ldr	r1, [r7, #12]
 8007896:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8007898:	4b31      	ldr	r3, [pc, #196]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	4b30      	ldr	r3, [pc, #192]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 80078a0:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 80078a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d84c      	bhi.n	8007946 <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 80078b4:	2300      	movs	r3, #0
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	e016      	b.n	80078e8 <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 80078ba:	4b30      	ldr	r3, [pc, #192]	@ (800797c <HIDS_GetMeasurementValues+0x21c>)
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	0092      	lsls	r2, r2, #2
 80078c0:	58d3      	ldr	r3, [r2, r3]
 80078c2:	1c19      	adds	r1, r3, #0
 80078c4:	6a38      	ldr	r0, [r7, #32]
 80078c6:	f7f8 ff79 	bl	80007bc <__aeabi_fadd>
 80078ca:	1c03      	adds	r3, r0, #0
 80078cc:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 80078ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007980 <HIDS_GetMeasurementValues+0x220>)
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	0092      	lsls	r2, r2, #2
 80078d4:	58d3      	ldr	r3, [r2, r3]
 80078d6:	1c19      	adds	r1, r3, #0
 80078d8:	69f8      	ldr	r0, [r7, #28]
 80078da:	f7f8 ff6f 	bl	80007bc <__aeabi_fadd>
 80078de:	1c03      	adds	r3, r0, #0
 80078e0:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	3301      	adds	r3, #1
 80078e6:	61bb      	str	r3, [r7, #24]
 80078e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d3e3      	bcc.n	80078ba <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 80078f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	0018      	movs	r0, r3
 80078f8:	f7f9 fe34 	bl	8001564 <__aeabi_ui2f>
 80078fc:	1c03      	adds	r3, r0, #0
 80078fe:	1c19      	adds	r1, r3, #0
 8007900:	6a38      	ldr	r0, [r7, #32]
 8007902:	f7f9 f8e5 	bl	8000ad0 <__aeabi_fdiv>
 8007906:	1c03      	adds	r3, r0, #0
 8007908:	1c1a      	adds	r2, r3, #0
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 800790e:	4b14      	ldr	r3, [pc, #80]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	0018      	movs	r0, r3
 8007914:	f7f9 fe26 	bl	8001564 <__aeabi_ui2f>
 8007918:	1c03      	adds	r3, r0, #0
 800791a:	1c19      	adds	r1, r3, #0
 800791c:	69f8      	ldr	r0, [r7, #28]
 800791e:	f7f9 f8d7 	bl	8000ad0 <__aeabi_fdiv>
 8007922:	1c03      	adds	r3, r0, #0
 8007924:	1c1a      	adds	r2, r3, #0
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	0011      	movs	r1, r2
 8007930:	0018      	movs	r0, r3
 8007932:	f7fe ffa3 	bl	800687c <SGP_GetHT>

    measurements = 0;
 8007936:	4b0a      	ldr	r3, [pc, #40]	@ (8007960 <HIDS_GetMeasurementValues+0x200>)
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 800793c:	4b05      	ldr	r3, [pc, #20]	@ (8007954 <HIDS_GetMeasurementValues+0x1f4>)
 800793e:	2201      	movs	r2, #1
 8007940:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 8007942:	2301      	movs	r3, #1
 8007944:	e002      	b.n	800794c <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8007946:	f7ff fe2f 	bl	80075a8 <HIDS_StartMeasurement>
	return false;
 800794a:	2300      	movs	r3, #0
}
 800794c:	0018      	movs	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	b00a      	add	sp, #40	@ 0x28
 8007952:	bd80      	pop	{r7, pc}
 8007954:	200010f2 	.word	0x200010f2
 8007958:	2000006c 	.word	0x2000006c
 800795c:	20000068 	.word	0x20000068
 8007960:	200010f4 	.word	0x200010f4
 8007964:	08011964 	.word	0x08011964
 8007968:	08011990 	.word	0x08011990
 800796c:	200010ec 	.word	0x200010ec
 8007970:	40efffe0 	.word	0x40efffe0
 8007974:	42340000 	.word	0x42340000
 8007978:	40c00000 	.word	0x40c00000
 800797c:	200010f8 	.word	0x200010f8
 8007980:	200014f8 	.word	0x200014f8

08007984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007984:	480d      	ldr	r0, [pc, #52]	@ (80079bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8007986:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007988:	f7ff f91a 	bl	8006bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800798c:	480c      	ldr	r0, [pc, #48]	@ (80079c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800798e:	490d      	ldr	r1, [pc, #52]	@ (80079c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007990:	4a0d      	ldr	r2, [pc, #52]	@ (80079c8 <LoopForever+0xe>)
  movs r3, #0
 8007992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007994:	e002      	b.n	800799c <LoopCopyDataInit>

08007996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800799a:	3304      	adds	r3, #4

0800799c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800799c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800799e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80079a0:	d3f9      	bcc.n	8007996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80079a2:	4a0a      	ldr	r2, [pc, #40]	@ (80079cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80079a4:	4c0a      	ldr	r4, [pc, #40]	@ (80079d0 <LoopForever+0x16>)
  movs r3, #0
 80079a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079a8:	e001      	b.n	80079ae <LoopFillZerobss>

080079aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079ac:	3204      	adds	r2, #4

080079ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079b0:	d3fb      	bcc.n	80079aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80079b2:	f007 f965 	bl	800ec80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80079b6:	f7fc ff09 	bl	80047cc <main>

080079ba <LoopForever>:

LoopForever:
    b LoopForever
 80079ba:	e7fe      	b.n	80079ba <LoopForever>
   ldr   r0, =_estack
 80079bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80079c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079c4:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80079c8:	08011ec0 	.word	0x08011ec0
  ldr r2, =_sbss
 80079cc:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80079d0:	20001a48 	.word	0x20001a48

080079d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80079d4:	e7fe      	b.n	80079d4 <ADC1_COMP_IRQHandler>
	...

080079d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80079de:	1dfb      	adds	r3, r7, #7
 80079e0:	2200      	movs	r2, #0
 80079e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80079e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007a14 <HAL_Init+0x3c>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007a14 <HAL_Init+0x3c>)
 80079ea:	2140      	movs	r1, #64	@ 0x40
 80079ec:	430a      	orrs	r2, r1
 80079ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80079f0:	2003      	movs	r0, #3
 80079f2:	f000 f811 	bl	8007a18 <HAL_InitTick>
 80079f6:	1e03      	subs	r3, r0, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80079fa:	1dfb      	adds	r3, r7, #7
 80079fc:	2201      	movs	r2, #1
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e001      	b.n	8007a06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007a02:	f7fe ffbf 	bl	8006984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007a06:	1dfb      	adds	r3, r7, #7
 8007a08:	781b      	ldrb	r3, [r3, #0]
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b002      	add	sp, #8
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			@ (mov r8, r8)
 8007a14:	40022000 	.word	0x40022000

08007a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a18:	b590      	push	{r4, r7, lr}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a20:	4b14      	ldr	r3, [pc, #80]	@ (8007a74 <HAL_InitTick+0x5c>)
 8007a22:	681c      	ldr	r4, [r3, #0]
 8007a24:	4b14      	ldr	r3, [pc, #80]	@ (8007a78 <HAL_InitTick+0x60>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	0019      	movs	r1, r3
 8007a2a:	23fa      	movs	r3, #250	@ 0xfa
 8007a2c:	0098      	lsls	r0, r3, #2
 8007a2e:	f7f8 fb87 	bl	8000140 <__udivsi3>
 8007a32:	0003      	movs	r3, r0
 8007a34:	0019      	movs	r1, r3
 8007a36:	0020      	movs	r0, r4
 8007a38:	f7f8 fb82 	bl	8000140 <__udivsi3>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f000 f92f 	bl	8007ca2 <HAL_SYSTICK_Config>
 8007a44:	1e03      	subs	r3, r0, #0
 8007a46:	d001      	beq.n	8007a4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e00f      	b.n	8007a6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d80b      	bhi.n	8007a6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	2301      	movs	r3, #1
 8007a56:	425b      	negs	r3, r3
 8007a58:	2200      	movs	r2, #0
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f000 f8fc 	bl	8007c58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a60:	4b06      	ldr	r3, [pc, #24]	@ (8007a7c <HAL_InitTick+0x64>)
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e000      	b.n	8007a6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b003      	add	sp, #12
 8007a72:	bd90      	pop	{r4, r7, pc}
 8007a74:	2000005c 	.word	0x2000005c
 8007a78:	20000074 	.word	0x20000074
 8007a7c:	20000070 	.word	0x20000070

08007a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a84:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <HAL_IncTick+0x1c>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	001a      	movs	r2, r3
 8007a8a:	4b05      	ldr	r3, [pc, #20]	@ (8007aa0 <HAL_IncTick+0x20>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	18d2      	adds	r2, r2, r3
 8007a90:	4b03      	ldr	r3, [pc, #12]	@ (8007aa0 <HAL_IncTick+0x20>)
 8007a92:	601a      	str	r2, [r3, #0]
}
 8007a94:	46c0      	nop			@ (mov r8, r8)
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	20000074 	.word	0x20000074
 8007aa0:	200018f8 	.word	0x200018f8

08007aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8007aa8:	4b02      	ldr	r3, [pc, #8]	@ (8007ab4 <HAL_GetTick+0x10>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
}
 8007aac:	0018      	movs	r0, r3
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	46c0      	nop			@ (mov r8, r8)
 8007ab4:	200018f8 	.word	0x200018f8

08007ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ac0:	f7ff fff0 	bl	8007aa4 <HAL_GetTick>
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	d005      	beq.n	8007ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8007afc <HAL_Delay+0x44>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	001a      	movs	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	189b      	adds	r3, r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007ade:	46c0      	nop			@ (mov r8, r8)
 8007ae0:	f7ff ffe0 	bl	8007aa4 <HAL_GetTick>
 8007ae4:	0002      	movs	r2, r0
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d8f7      	bhi.n	8007ae0 <HAL_Delay+0x28>
  {
  }
}
 8007af0:	46c0      	nop			@ (mov r8, r8)
 8007af2:	46c0      	nop			@ (mov r8, r8)
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b004      	add	sp, #16
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	46c0      	nop			@ (mov r8, r8)
 8007afc:	20000074 	.word	0x20000074

08007b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	0002      	movs	r2, r0
 8007b08:	1dfb      	adds	r3, r7, #7
 8007b0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007b0c:	1dfb      	adds	r3, r7, #7
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b12:	d809      	bhi.n	8007b28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b14:	1dfb      	adds	r3, r7, #7
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	001a      	movs	r2, r3
 8007b1a:	231f      	movs	r3, #31
 8007b1c:	401a      	ands	r2, r3
 8007b1e:	4b04      	ldr	r3, [pc, #16]	@ (8007b30 <__NVIC_EnableIRQ+0x30>)
 8007b20:	2101      	movs	r1, #1
 8007b22:	4091      	lsls	r1, r2
 8007b24:	000a      	movs	r2, r1
 8007b26:	601a      	str	r2, [r3, #0]
  }
}
 8007b28:	46c0      	nop			@ (mov r8, r8)
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b002      	add	sp, #8
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	e000e100 	.word	0xe000e100

08007b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b34:	b590      	push	{r4, r7, lr}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	0002      	movs	r2, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	1dfb      	adds	r3, r7, #7
 8007b40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007b42:	1dfb      	adds	r3, r7, #7
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b48:	d828      	bhi.n	8007b9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8007c08 <__NVIC_SetPriority+0xd4>)
 8007b4c:	1dfb      	adds	r3, r7, #7
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	b25b      	sxtb	r3, r3
 8007b52:	089b      	lsrs	r3, r3, #2
 8007b54:	33c0      	adds	r3, #192	@ 0xc0
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	589b      	ldr	r3, [r3, r2]
 8007b5a:	1dfa      	adds	r2, r7, #7
 8007b5c:	7812      	ldrb	r2, [r2, #0]
 8007b5e:	0011      	movs	r1, r2
 8007b60:	2203      	movs	r2, #3
 8007b62:	400a      	ands	r2, r1
 8007b64:	00d2      	lsls	r2, r2, #3
 8007b66:	21ff      	movs	r1, #255	@ 0xff
 8007b68:	4091      	lsls	r1, r2
 8007b6a:	000a      	movs	r2, r1
 8007b6c:	43d2      	mvns	r2, r2
 8007b6e:	401a      	ands	r2, r3
 8007b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	019b      	lsls	r3, r3, #6
 8007b76:	22ff      	movs	r2, #255	@ 0xff
 8007b78:	401a      	ands	r2, r3
 8007b7a:	1dfb      	adds	r3, r7, #7
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	0018      	movs	r0, r3
 8007b80:	2303      	movs	r3, #3
 8007b82:	4003      	ands	r3, r0
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007b88:	481f      	ldr	r0, [pc, #124]	@ (8007c08 <__NVIC_SetPriority+0xd4>)
 8007b8a:	1dfb      	adds	r3, r7, #7
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b25b      	sxtb	r3, r3
 8007b90:	089b      	lsrs	r3, r3, #2
 8007b92:	430a      	orrs	r2, r1
 8007b94:	33c0      	adds	r3, #192	@ 0xc0
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007b9a:	e031      	b.n	8007c00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8007c0c <__NVIC_SetPriority+0xd8>)
 8007b9e:	1dfb      	adds	r3, r7, #7
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	0019      	movs	r1, r3
 8007ba4:	230f      	movs	r3, #15
 8007ba6:	400b      	ands	r3, r1
 8007ba8:	3b08      	subs	r3, #8
 8007baa:	089b      	lsrs	r3, r3, #2
 8007bac:	3306      	adds	r3, #6
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	18d3      	adds	r3, r2, r3
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	1dfa      	adds	r2, r7, #7
 8007bb8:	7812      	ldrb	r2, [r2, #0]
 8007bba:	0011      	movs	r1, r2
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	400a      	ands	r2, r1
 8007bc0:	00d2      	lsls	r2, r2, #3
 8007bc2:	21ff      	movs	r1, #255	@ 0xff
 8007bc4:	4091      	lsls	r1, r2
 8007bc6:	000a      	movs	r2, r1
 8007bc8:	43d2      	mvns	r2, r2
 8007bca:	401a      	ands	r2, r3
 8007bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	019b      	lsls	r3, r3, #6
 8007bd2:	22ff      	movs	r2, #255	@ 0xff
 8007bd4:	401a      	ands	r2, r3
 8007bd6:	1dfb      	adds	r3, r7, #7
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	2303      	movs	r3, #3
 8007bde:	4003      	ands	r3, r0
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007be4:	4809      	ldr	r0, [pc, #36]	@ (8007c0c <__NVIC_SetPriority+0xd8>)
 8007be6:	1dfb      	adds	r3, r7, #7
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	001c      	movs	r4, r3
 8007bec:	230f      	movs	r3, #15
 8007bee:	4023      	ands	r3, r4
 8007bf0:	3b08      	subs	r3, #8
 8007bf2:	089b      	lsrs	r3, r3, #2
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	3306      	adds	r3, #6
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	18c3      	adds	r3, r0, r3
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	601a      	str	r2, [r3, #0]
}
 8007c00:	46c0      	nop			@ (mov r8, r8)
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b003      	add	sp, #12
 8007c06:	bd90      	pop	{r4, r7, pc}
 8007c08:	e000e100 	.word	0xe000e100
 8007c0c:	e000ed00 	.word	0xe000ed00

08007c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	1e5a      	subs	r2, r3, #1
 8007c1c:	2380      	movs	r3, #128	@ 0x80
 8007c1e:	045b      	lsls	r3, r3, #17
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d301      	bcc.n	8007c28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c24:	2301      	movs	r3, #1
 8007c26:	e010      	b.n	8007c4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c28:	4b0a      	ldr	r3, [pc, #40]	@ (8007c54 <SysTick_Config+0x44>)
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	3a01      	subs	r2, #1
 8007c2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c30:	2301      	movs	r3, #1
 8007c32:	425b      	negs	r3, r3
 8007c34:	2103      	movs	r1, #3
 8007c36:	0018      	movs	r0, r3
 8007c38:	f7ff ff7c 	bl	8007b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <SysTick_Config+0x44>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c42:	4b04      	ldr	r3, [pc, #16]	@ (8007c54 <SysTick_Config+0x44>)
 8007c44:	2207      	movs	r2, #7
 8007c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b002      	add	sp, #8
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	46c0      	nop			@ (mov r8, r8)
 8007c54:	e000e010 	.word	0xe000e010

08007c58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	210f      	movs	r1, #15
 8007c64:	187b      	adds	r3, r7, r1
 8007c66:	1c02      	adds	r2, r0, #0
 8007c68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	187b      	adds	r3, r7, r1
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	b25b      	sxtb	r3, r3
 8007c72:	0011      	movs	r1, r2
 8007c74:	0018      	movs	r0, r3
 8007c76:	f7ff ff5d 	bl	8007b34 <__NVIC_SetPriority>
}
 8007c7a:	46c0      	nop			@ (mov r8, r8)
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b004      	add	sp, #16
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	0002      	movs	r2, r0
 8007c8a:	1dfb      	adds	r3, r7, #7
 8007c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c8e:	1dfb      	adds	r3, r7, #7
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	b25b      	sxtb	r3, r3
 8007c94:	0018      	movs	r0, r3
 8007c96:	f7ff ff33 	bl	8007b00 <__NVIC_EnableIRQ>
}
 8007c9a:	46c0      	nop			@ (mov r8, r8)
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	b002      	add	sp, #8
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	0018      	movs	r0, r3
 8007cae:	f7ff ffaf 	bl	8007c10 <SysTick_Config>
 8007cb2:	0003      	movs	r3, r0
}
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	b002      	add	sp, #8
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e061      	b.n	8007d92 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a32      	ldr	r2, [pc, #200]	@ (8007d9c <HAL_DMA_Init+0xe0>)
 8007cd4:	4694      	mov	ip, r2
 8007cd6:	4463      	add	r3, ip
 8007cd8:	2114      	movs	r1, #20
 8007cda:	0018      	movs	r0, r3
 8007cdc:	f7f8 fa30 	bl	8000140 <__udivsi3>
 8007ce0:	0003      	movs	r3, r0
 8007ce2:	009a      	lsls	r2, r3, #2
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a2d      	ldr	r2, [pc, #180]	@ (8007da0 <HAL_DMA_Init+0xe4>)
 8007cec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2225      	movs	r2, #37	@ 0x25
 8007cf2:	2102      	movs	r1, #2
 8007cf4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4a28      	ldr	r2, [pc, #160]	@ (8007da4 <HAL_DMA_Init+0xe8>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	2380      	movs	r3, #128	@ 0x80
 8007d42:	01db      	lsls	r3, r3, #7
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d018      	beq.n	8007d7a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007d48:	4b17      	ldr	r3, [pc, #92]	@ (8007da8 <HAL_DMA_Init+0xec>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d50:	211c      	movs	r1, #28
 8007d52:	400b      	ands	r3, r1
 8007d54:	210f      	movs	r1, #15
 8007d56:	4099      	lsls	r1, r3
 8007d58:	000b      	movs	r3, r1
 8007d5a:	43d9      	mvns	r1, r3
 8007d5c:	4b12      	ldr	r3, [pc, #72]	@ (8007da8 <HAL_DMA_Init+0xec>)
 8007d5e:	400a      	ands	r2, r1
 8007d60:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007d62:	4b11      	ldr	r3, [pc, #68]	@ (8007da8 <HAL_DMA_Init+0xec>)
 8007d64:	6819      	ldr	r1, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d6e:	201c      	movs	r0, #28
 8007d70:	4003      	ands	r3, r0
 8007d72:	409a      	lsls	r2, r3
 8007d74:	4b0c      	ldr	r3, [pc, #48]	@ (8007da8 <HAL_DMA_Init+0xec>)
 8007d76:	430a      	orrs	r2, r1
 8007d78:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2225      	movs	r2, #37	@ 0x25
 8007d84:	2101      	movs	r1, #1
 8007d86:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2224      	movs	r2, #36	@ 0x24
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	0018      	movs	r0, r3
 8007d94:	46bd      	mov	sp, r7
 8007d96:	b004      	add	sp, #16
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	46c0      	nop			@ (mov r8, r8)
 8007d9c:	bffdfff8 	.word	0xbffdfff8
 8007da0:	40020000 	.word	0x40020000
 8007da4:	ffff800f 	.word	0xffff800f
 8007da8:	400200a8 	.word	0x400200a8

08007dac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e04a      	b.n	8007e54 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2101      	movs	r1, #1
 8007dca:	438a      	bics	r2, r1
 8007dcc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a22      	ldr	r2, [pc, #136]	@ (8007e5c <HAL_DMA_DeInit+0xb0>)
 8007dd4:	4694      	mov	ip, r2
 8007dd6:	4463      	add	r3, ip
 8007dd8:	2114      	movs	r1, #20
 8007dda:	0018      	movs	r0, r3
 8007ddc:	f7f8 f9b0 	bl	8000140 <__udivsi3>
 8007de0:	0003      	movs	r3, r0
 8007de2:	009a      	lsls	r2, r3, #2
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a1d      	ldr	r2, [pc, #116]	@ (8007e60 <HAL_DMA_DeInit+0xb4>)
 8007dec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dfa:	221c      	movs	r2, #28
 8007dfc:	401a      	ands	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e02:	2101      	movs	r1, #1
 8007e04:	4091      	lsls	r1, r2
 8007e06:	000a      	movs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007e0a:	4b16      	ldr	r3, [pc, #88]	@ (8007e64 <HAL_DMA_DeInit+0xb8>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e12:	211c      	movs	r1, #28
 8007e14:	400b      	ands	r3, r1
 8007e16:	210f      	movs	r1, #15
 8007e18:	4099      	lsls	r1, r3
 8007e1a:	000b      	movs	r3, r1
 8007e1c:	43d9      	mvns	r1, r3
 8007e1e:	4b11      	ldr	r3, [pc, #68]	@ (8007e64 <HAL_DMA_DeInit+0xb8>)
 8007e20:	400a      	ands	r2, r1
 8007e22:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2225      	movs	r2, #37	@ 0x25
 8007e46:	2100      	movs	r1, #0
 8007e48:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2224      	movs	r2, #36	@ 0x24
 8007e4e:	2100      	movs	r1, #0
 8007e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	0018      	movs	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	b002      	add	sp, #8
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	bffdfff8 	.word	0xbffdfff8
 8007e60:	40020000 	.word	0x40020000
 8007e64:	400200a8 	.word	0x400200a8

08007e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e76:	2317      	movs	r3, #23
 8007e78:	18fb      	adds	r3, r7, r3
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2224      	movs	r2, #36	@ 0x24
 8007e82:	5c9b      	ldrb	r3, [r3, r2]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_DMA_Start_IT+0x24>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e04f      	b.n	8007f2c <HAL_DMA_Start_IT+0xc4>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2224      	movs	r2, #36	@ 0x24
 8007e90:	2101      	movs	r1, #1
 8007e92:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2225      	movs	r2, #37	@ 0x25
 8007e98:	5c9b      	ldrb	r3, [r3, r2]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d13a      	bne.n	8007f16 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2225      	movs	r2, #37	@ 0x25
 8007ea4:	2102      	movs	r1, #2
 8007ea6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2101      	movs	r1, #1
 8007eba:	438a      	bics	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f976 	bl	80081b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d008      	beq.n	8007ee4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	210e      	movs	r1, #14
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e00f      	b.n	8007f04 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2104      	movs	r1, #4
 8007ef0:	438a      	bics	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	210a      	movs	r1, #10
 8007f00:	430a      	orrs	r2, r1
 8007f02:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2101      	movs	r1, #1
 8007f10:	430a      	orrs	r2, r1
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e007      	b.n	8007f26 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2224      	movs	r2, #36	@ 0x24
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f1e:	2317      	movs	r3, #23
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	2202      	movs	r2, #2
 8007f24:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8007f26:	2317      	movs	r3, #23
 8007f28:	18fb      	adds	r3, r7, r3
 8007f2a:	781b      	ldrb	r3, [r3, #0]
}
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b006      	add	sp, #24
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3c:	230f      	movs	r3, #15
 8007f3e:	18fb      	adds	r3, r7, r3
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2225      	movs	r2, #37	@ 0x25
 8007f48:	5c9b      	ldrb	r3, [r3, r2]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d008      	beq.n	8007f62 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2204      	movs	r2, #4
 8007f54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2224      	movs	r2, #36	@ 0x24
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e024      	b.n	8007fac <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	210e      	movs	r1, #14
 8007f6e:	438a      	bics	r2, r1
 8007f70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	438a      	bics	r2, r1
 8007f80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f86:	221c      	movs	r2, #28
 8007f88:	401a      	ands	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8e:	2101      	movs	r1, #1
 8007f90:	4091      	lsls	r1, r2
 8007f92:	000a      	movs	r2, r1
 8007f94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2225      	movs	r2, #37	@ 0x25
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2224      	movs	r2, #36	@ 0x24
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	5499      	strb	r1, [r3, r2]

    return status;
 8007fa6:	230f      	movs	r3, #15
 8007fa8:	18fb      	adds	r3, r7, r3
 8007faa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fac:	0018      	movs	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b004      	add	sp, #16
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fbc:	210f      	movs	r1, #15
 8007fbe:	187b      	adds	r3, r7, r1
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2225      	movs	r2, #37	@ 0x25
 8007fc8:	5c9b      	ldrb	r3, [r3, r2]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d006      	beq.n	8007fde <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2204      	movs	r2, #4
 8007fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007fd6:	187b      	adds	r3, r7, r1
 8007fd8:	2201      	movs	r2, #1
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e02a      	b.n	8008034 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	210e      	movs	r1, #14
 8007fea:	438a      	bics	r2, r1
 8007fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	438a      	bics	r2, r1
 8007ffc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008002:	221c      	movs	r2, #28
 8008004:	401a      	ands	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800a:	2101      	movs	r1, #1
 800800c:	4091      	lsls	r1, r2
 800800e:	000a      	movs	r2, r1
 8008010:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2225      	movs	r2, #37	@ 0x25
 8008016:	2101      	movs	r1, #1
 8008018:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2224      	movs	r2, #36	@ 0x24
 800801e:	2100      	movs	r1, #0
 8008020:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	0010      	movs	r0, r2
 8008032:	4798      	blx	r3
    }
  }
  return status;
 8008034:	230f      	movs	r3, #15
 8008036:	18fb      	adds	r3, r7, r3
 8008038:	781b      	ldrb	r3, [r3, #0]
}
 800803a:	0018      	movs	r0, r3
 800803c:	46bd      	mov	sp, r7
 800803e:	b004      	add	sp, #16
 8008040:	bd80      	pop	{r7, pc}

08008042 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800805e:	221c      	movs	r2, #28
 8008060:	4013      	ands	r3, r2
 8008062:	2204      	movs	r2, #4
 8008064:	409a      	lsls	r2, r3
 8008066:	0013      	movs	r3, r2
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4013      	ands	r3, r2
 800806c:	d026      	beq.n	80080bc <HAL_DMA_IRQHandler+0x7a>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2204      	movs	r2, #4
 8008072:	4013      	ands	r3, r2
 8008074:	d022      	beq.n	80080bc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2220      	movs	r2, #32
 800807e:	4013      	ands	r3, r2
 8008080:	d107      	bne.n	8008092 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2104      	movs	r1, #4
 800808e:	438a      	bics	r2, r1
 8008090:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008096:	221c      	movs	r2, #28
 8008098:	401a      	ands	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809e:	2104      	movs	r1, #4
 80080a0:	4091      	lsls	r1, r2
 80080a2:	000a      	movs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d100      	bne.n	80080b0 <HAL_DMA_IRQHandler+0x6e>
 80080ae:	e071      	b.n	8008194 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	0010      	movs	r0, r2
 80080b8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80080ba:	e06b      	b.n	8008194 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c0:	221c      	movs	r2, #28
 80080c2:	4013      	ands	r3, r2
 80080c4:	2202      	movs	r2, #2
 80080c6:	409a      	lsls	r2, r3
 80080c8:	0013      	movs	r3, r2
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4013      	ands	r3, r2
 80080ce:	d02d      	beq.n	800812c <HAL_DMA_IRQHandler+0xea>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2202      	movs	r2, #2
 80080d4:	4013      	ands	r3, r2
 80080d6:	d029      	beq.n	800812c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2220      	movs	r2, #32
 80080e0:	4013      	ands	r3, r2
 80080e2:	d10b      	bne.n	80080fc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	210a      	movs	r1, #10
 80080f0:	438a      	bics	r2, r1
 80080f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2225      	movs	r2, #37	@ 0x25
 80080f8:	2101      	movs	r1, #1
 80080fa:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008100:	221c      	movs	r2, #28
 8008102:	401a      	ands	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008108:	2102      	movs	r1, #2
 800810a:	4091      	lsls	r1, r2
 800810c:	000a      	movs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2224      	movs	r2, #36	@ 0x24
 8008114:	2100      	movs	r1, #0
 8008116:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d039      	beq.n	8008194 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	0010      	movs	r0, r2
 8008128:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800812a:	e033      	b.n	8008194 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008130:	221c      	movs	r2, #28
 8008132:	4013      	ands	r3, r2
 8008134:	2208      	movs	r2, #8
 8008136:	409a      	lsls	r2, r3
 8008138:	0013      	movs	r3, r2
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4013      	ands	r3, r2
 800813e:	d02a      	beq.n	8008196 <HAL_DMA_IRQHandler+0x154>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2208      	movs	r2, #8
 8008144:	4013      	ands	r3, r2
 8008146:	d026      	beq.n	8008196 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	210e      	movs	r1, #14
 8008154:	438a      	bics	r2, r1
 8008156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815c:	221c      	movs	r2, #28
 800815e:	401a      	ands	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008164:	2101      	movs	r1, #1
 8008166:	4091      	lsls	r1, r2
 8008168:	000a      	movs	r2, r1
 800816a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2225      	movs	r2, #37	@ 0x25
 8008176:	2101      	movs	r1, #1
 8008178:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2224      	movs	r2, #36	@ 0x24
 800817e:	2100      	movs	r1, #0
 8008180:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	0010      	movs	r0, r2
 8008192:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008194:	46c0      	nop			@ (mov r8, r8)
 8008196:	46c0      	nop			@ (mov r8, r8)
}
 8008198:	46bd      	mov	sp, r7
 800819a:	b004      	add	sp, #16
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2225      	movs	r2, #37	@ 0x25
 80081aa:	5c9b      	ldrb	r3, [r3, r2]
 80081ac:	b2db      	uxtb	r3, r3
}
 80081ae:	0018      	movs	r0, r3
 80081b0:	46bd      	mov	sp, r7
 80081b2:	b002      	add	sp, #8
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
 80081c2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c8:	221c      	movs	r2, #28
 80081ca:	401a      	ands	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d0:	2101      	movs	r1, #1
 80081d2:	4091      	lsls	r1, r2
 80081d4:	000a      	movs	r2, r1
 80081d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d108      	bne.n	80081fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80081f8:	e007      	b.n	800820a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	60da      	str	r2, [r3, #12]
}
 800820a:	46c0      	nop			@ (mov r8, r8)
 800820c:	46bd      	mov	sp, r7
 800820e:	b004      	add	sp, #16
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800821e:	2300      	movs	r3, #0
 8008220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8008226:	2300      	movs	r3, #0
 8008228:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800822a:	e155      	b.n	80084d8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2101      	movs	r1, #1
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4091      	lsls	r1, r2
 8008236:	000a      	movs	r2, r1
 8008238:	4013      	ands	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d100      	bne.n	8008244 <HAL_GPIO_Init+0x30>
 8008242:	e146      	b.n	80084d2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2203      	movs	r2, #3
 800824a:	4013      	ands	r3, r2
 800824c:	2b01      	cmp	r3, #1
 800824e:	d005      	beq.n	800825c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2203      	movs	r2, #3
 8008256:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008258:	2b02      	cmp	r3, #2
 800825a:	d130      	bne.n	80082be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	2203      	movs	r2, #3
 8008268:	409a      	lsls	r2, r3
 800826a:	0013      	movs	r3, r2
 800826c:	43da      	mvns	r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	4013      	ands	r3, r2
 8008272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	409a      	lsls	r2, r3
 800827e:	0013      	movs	r3, r2
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008292:	2201      	movs	r2, #1
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	409a      	lsls	r2, r3
 8008298:	0013      	movs	r3, r2
 800829a:	43da      	mvns	r2, r3
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	4013      	ands	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	091b      	lsrs	r3, r3, #4
 80082a8:	2201      	movs	r2, #1
 80082aa:	401a      	ands	r2, r3
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	409a      	lsls	r2, r3
 80082b0:	0013      	movs	r3, r2
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2203      	movs	r2, #3
 80082c4:	4013      	ands	r3, r2
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d017      	beq.n	80082fa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	2203      	movs	r2, #3
 80082d6:	409a      	lsls	r2, r3
 80082d8:	0013      	movs	r3, r2
 80082da:	43da      	mvns	r2, r3
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	4013      	ands	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	409a      	lsls	r2, r3
 80082ec:	0013      	movs	r3, r2
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2203      	movs	r2, #3
 8008300:	4013      	ands	r3, r2
 8008302:	2b02      	cmp	r3, #2
 8008304:	d123      	bne.n	800834e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	08da      	lsrs	r2, r3, #3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3208      	adds	r2, #8
 800830e:	0092      	lsls	r2, r2, #2
 8008310:	58d3      	ldr	r3, [r2, r3]
 8008312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2207      	movs	r2, #7
 8008318:	4013      	ands	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	220f      	movs	r2, #15
 800831e:	409a      	lsls	r2, r3
 8008320:	0013      	movs	r3, r2
 8008322:	43da      	mvns	r2, r3
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	4013      	ands	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2107      	movs	r1, #7
 8008332:	400b      	ands	r3, r1
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	409a      	lsls	r2, r3
 8008338:	0013      	movs	r3, r2
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	08da      	lsrs	r2, r3, #3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3208      	adds	r2, #8
 8008348:	0092      	lsls	r2, r2, #2
 800834a:	6939      	ldr	r1, [r7, #16]
 800834c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	2203      	movs	r2, #3
 800835a:	409a      	lsls	r2, r3
 800835c:	0013      	movs	r3, r2
 800835e:	43da      	mvns	r2, r3
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4013      	ands	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2203      	movs	r2, #3
 800836c:	401a      	ands	r2, r3
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	409a      	lsls	r2, r3
 8008374:	0013      	movs	r3, r2
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	23c0      	movs	r3, #192	@ 0xc0
 8008388:	029b      	lsls	r3, r3, #10
 800838a:	4013      	ands	r3, r2
 800838c:	d100      	bne.n	8008390 <HAL_GPIO_Init+0x17c>
 800838e:	e0a0      	b.n	80084d2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008390:	4b57      	ldr	r3, [pc, #348]	@ (80084f0 <HAL_GPIO_Init+0x2dc>)
 8008392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008394:	4b56      	ldr	r3, [pc, #344]	@ (80084f0 <HAL_GPIO_Init+0x2dc>)
 8008396:	2101      	movs	r1, #1
 8008398:	430a      	orrs	r2, r1
 800839a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800839c:	4a55      	ldr	r2, [pc, #340]	@ (80084f4 <HAL_GPIO_Init+0x2e0>)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	089b      	lsrs	r3, r3, #2
 80083a2:	3302      	adds	r3, #2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	589b      	ldr	r3, [r3, r2]
 80083a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2203      	movs	r2, #3
 80083ae:	4013      	ands	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	220f      	movs	r2, #15
 80083b4:	409a      	lsls	r2, r3
 80083b6:	0013      	movs	r3, r2
 80083b8:	43da      	mvns	r2, r3
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4013      	ands	r3, r2
 80083be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	23a0      	movs	r3, #160	@ 0xa0
 80083c4:	05db      	lsls	r3, r3, #23
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d01f      	beq.n	800840a <HAL_GPIO_Init+0x1f6>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a4a      	ldr	r2, [pc, #296]	@ (80084f8 <HAL_GPIO_Init+0x2e4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d019      	beq.n	8008406 <HAL_GPIO_Init+0x1f2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a49      	ldr	r2, [pc, #292]	@ (80084fc <HAL_GPIO_Init+0x2e8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d013      	beq.n	8008402 <HAL_GPIO_Init+0x1ee>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a48      	ldr	r2, [pc, #288]	@ (8008500 <HAL_GPIO_Init+0x2ec>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00d      	beq.n	80083fe <HAL_GPIO_Init+0x1ea>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a47      	ldr	r2, [pc, #284]	@ (8008504 <HAL_GPIO_Init+0x2f0>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d007      	beq.n	80083fa <HAL_GPIO_Init+0x1e6>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a46      	ldr	r2, [pc, #280]	@ (8008508 <HAL_GPIO_Init+0x2f4>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d101      	bne.n	80083f6 <HAL_GPIO_Init+0x1e2>
 80083f2:	2305      	movs	r3, #5
 80083f4:	e00a      	b.n	800840c <HAL_GPIO_Init+0x1f8>
 80083f6:	2306      	movs	r3, #6
 80083f8:	e008      	b.n	800840c <HAL_GPIO_Init+0x1f8>
 80083fa:	2304      	movs	r3, #4
 80083fc:	e006      	b.n	800840c <HAL_GPIO_Init+0x1f8>
 80083fe:	2303      	movs	r3, #3
 8008400:	e004      	b.n	800840c <HAL_GPIO_Init+0x1f8>
 8008402:	2302      	movs	r3, #2
 8008404:	e002      	b.n	800840c <HAL_GPIO_Init+0x1f8>
 8008406:	2301      	movs	r3, #1
 8008408:	e000      	b.n	800840c <HAL_GPIO_Init+0x1f8>
 800840a:	2300      	movs	r3, #0
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	2103      	movs	r1, #3
 8008410:	400a      	ands	r2, r1
 8008412:	0092      	lsls	r2, r2, #2
 8008414:	4093      	lsls	r3, r2
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800841c:	4935      	ldr	r1, [pc, #212]	@ (80084f4 <HAL_GPIO_Init+0x2e0>)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	089b      	lsrs	r3, r3, #2
 8008422:	3302      	adds	r3, #2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800842a:	4b38      	ldr	r3, [pc, #224]	@ (800850c <HAL_GPIO_Init+0x2f8>)
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	43da      	mvns	r2, r3
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	4013      	ands	r3, r2
 8008438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	2380      	movs	r3, #128	@ 0x80
 8008440:	035b      	lsls	r3, r3, #13
 8008442:	4013      	ands	r3, r2
 8008444:	d003      	beq.n	800844e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800844e:	4b2f      	ldr	r3, [pc, #188]	@ (800850c <HAL_GPIO_Init+0x2f8>)
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008454:	4b2d      	ldr	r3, [pc, #180]	@ (800850c <HAL_GPIO_Init+0x2f8>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	43da      	mvns	r2, r3
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	4013      	ands	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	2380      	movs	r3, #128	@ 0x80
 800846a:	039b      	lsls	r3, r3, #14
 800846c:	4013      	ands	r3, r2
 800846e:	d003      	beq.n	8008478 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008478:	4b24      	ldr	r3, [pc, #144]	@ (800850c <HAL_GPIO_Init+0x2f8>)
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800847e:	4b23      	ldr	r3, [pc, #140]	@ (800850c <HAL_GPIO_Init+0x2f8>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	43da      	mvns	r2, r3
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4013      	ands	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	2380      	movs	r3, #128	@ 0x80
 8008494:	029b      	lsls	r3, r3, #10
 8008496:	4013      	ands	r3, r2
 8008498:	d003      	beq.n	80084a2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80084a2:	4b1a      	ldr	r3, [pc, #104]	@ (800850c <HAL_GPIO_Init+0x2f8>)
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80084a8:	4b18      	ldr	r3, [pc, #96]	@ (800850c <HAL_GPIO_Init+0x2f8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	43da      	mvns	r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	4013      	ands	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	2380      	movs	r3, #128	@ 0x80
 80084be:	025b      	lsls	r3, r3, #9
 80084c0:	4013      	ands	r3, r2
 80084c2:	d003      	beq.n	80084cc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80084cc:	4b0f      	ldr	r3, [pc, #60]	@ (800850c <HAL_GPIO_Init+0x2f8>)
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	3301      	adds	r3, #1
 80084d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	40da      	lsrs	r2, r3
 80084e0:	1e13      	subs	r3, r2, #0
 80084e2:	d000      	beq.n	80084e6 <HAL_GPIO_Init+0x2d2>
 80084e4:	e6a2      	b.n	800822c <HAL_GPIO_Init+0x18>
  }
}
 80084e6:	46c0      	nop			@ (mov r8, r8)
 80084e8:	46c0      	nop			@ (mov r8, r8)
 80084ea:	46bd      	mov	sp, r7
 80084ec:	b006      	add	sp, #24
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	40021000 	.word	0x40021000
 80084f4:	40010000 	.word	0x40010000
 80084f8:	50000400 	.word	0x50000400
 80084fc:	50000800 	.word	0x50000800
 8008500:	50000c00 	.word	0x50000c00
 8008504:	50001000 	.word	0x50001000
 8008508:	50001c00 	.word	0x50001c00
 800850c:	40010400 	.word	0x40010400

08008510 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800851e:	2300      	movs	r3, #0
 8008520:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8008522:	2300      	movs	r3, #0
 8008524:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8008526:	e0bc      	b.n	80086a2 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8008528:	2201      	movs	r2, #1
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	409a      	lsls	r2, r3
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	4013      	ands	r3, r2
 8008532:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d100      	bne.n	800853c <HAL_GPIO_DeInit+0x2c>
 800853a:	e0af      	b.n	800869c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800853c:	4a5e      	ldr	r2, [pc, #376]	@ (80086b8 <HAL_GPIO_DeInit+0x1a8>)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	089b      	lsrs	r3, r3, #2
 8008542:	3302      	adds	r3, #2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	589b      	ldr	r3, [r3, r2]
 8008548:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2203      	movs	r2, #3
 800854e:	4013      	ands	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	220f      	movs	r2, #15
 8008554:	409a      	lsls	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4013      	ands	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	23a0      	movs	r3, #160	@ 0xa0
 8008560:	05db      	lsls	r3, r3, #23
 8008562:	429a      	cmp	r2, r3
 8008564:	d01f      	beq.n	80085a6 <HAL_GPIO_DeInit+0x96>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a54      	ldr	r2, [pc, #336]	@ (80086bc <HAL_GPIO_DeInit+0x1ac>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d019      	beq.n	80085a2 <HAL_GPIO_DeInit+0x92>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a53      	ldr	r2, [pc, #332]	@ (80086c0 <HAL_GPIO_DeInit+0x1b0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d013      	beq.n	800859e <HAL_GPIO_DeInit+0x8e>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a52      	ldr	r2, [pc, #328]	@ (80086c4 <HAL_GPIO_DeInit+0x1b4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00d      	beq.n	800859a <HAL_GPIO_DeInit+0x8a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a51      	ldr	r2, [pc, #324]	@ (80086c8 <HAL_GPIO_DeInit+0x1b8>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <HAL_GPIO_DeInit+0x86>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a50      	ldr	r2, [pc, #320]	@ (80086cc <HAL_GPIO_DeInit+0x1bc>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d101      	bne.n	8008592 <HAL_GPIO_DeInit+0x82>
 800858e:	2305      	movs	r3, #5
 8008590:	e00a      	b.n	80085a8 <HAL_GPIO_DeInit+0x98>
 8008592:	2306      	movs	r3, #6
 8008594:	e008      	b.n	80085a8 <HAL_GPIO_DeInit+0x98>
 8008596:	2304      	movs	r3, #4
 8008598:	e006      	b.n	80085a8 <HAL_GPIO_DeInit+0x98>
 800859a:	2303      	movs	r3, #3
 800859c:	e004      	b.n	80085a8 <HAL_GPIO_DeInit+0x98>
 800859e:	2302      	movs	r3, #2
 80085a0:	e002      	b.n	80085a8 <HAL_GPIO_DeInit+0x98>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e000      	b.n	80085a8 <HAL_GPIO_DeInit+0x98>
 80085a6:	2300      	movs	r3, #0
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	2103      	movs	r1, #3
 80085ac:	400a      	ands	r2, r1
 80085ae:	0092      	lsls	r2, r2, #2
 80085b0:	4093      	lsls	r3, r2
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d132      	bne.n	800861e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80085b8:	4b45      	ldr	r3, [pc, #276]	@ (80086d0 <HAL_GPIO_DeInit+0x1c0>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	43d9      	mvns	r1, r3
 80085c0:	4b43      	ldr	r3, [pc, #268]	@ (80086d0 <HAL_GPIO_DeInit+0x1c0>)
 80085c2:	400a      	ands	r2, r1
 80085c4:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80085c6:	4b42      	ldr	r3, [pc, #264]	@ (80086d0 <HAL_GPIO_DeInit+0x1c0>)
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	43d9      	mvns	r1, r3
 80085ce:	4b40      	ldr	r3, [pc, #256]	@ (80086d0 <HAL_GPIO_DeInit+0x1c0>)
 80085d0:	400a      	ands	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80085d4:	4b3e      	ldr	r3, [pc, #248]	@ (80086d0 <HAL_GPIO_DeInit+0x1c0>)
 80085d6:	68da      	ldr	r2, [r3, #12]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	43d9      	mvns	r1, r3
 80085dc:	4b3c      	ldr	r3, [pc, #240]	@ (80086d0 <HAL_GPIO_DeInit+0x1c0>)
 80085de:	400a      	ands	r2, r1
 80085e0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80085e2:	4b3b      	ldr	r3, [pc, #236]	@ (80086d0 <HAL_GPIO_DeInit+0x1c0>)
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	43d9      	mvns	r1, r3
 80085ea:	4b39      	ldr	r3, [pc, #228]	@ (80086d0 <HAL_GPIO_DeInit+0x1c0>)
 80085ec:	400a      	ands	r2, r1
 80085ee:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2203      	movs	r2, #3
 80085f4:	4013      	ands	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	220f      	movs	r2, #15
 80085fa:	409a      	lsls	r2, r3
 80085fc:	0013      	movs	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008600:	4a2d      	ldr	r2, [pc, #180]	@ (80086b8 <HAL_GPIO_DeInit+0x1a8>)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	089b      	lsrs	r3, r3, #2
 8008606:	3302      	adds	r3, #2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	589a      	ldr	r2, [r3, r2]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	43d9      	mvns	r1, r3
 8008610:	4829      	ldr	r0, [pc, #164]	@ (80086b8 <HAL_GPIO_DeInit+0x1a8>)
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	089b      	lsrs	r3, r3, #2
 8008616:	400a      	ands	r2, r1
 8008618:	3302      	adds	r3, #2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	2103      	movs	r1, #3
 8008628:	4099      	lsls	r1, r3
 800862a:	000b      	movs	r3, r1
 800862c:	431a      	orrs	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	08da      	lsrs	r2, r3, #3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3208      	adds	r2, #8
 800863a:	0092      	lsls	r2, r2, #2
 800863c:	58d3      	ldr	r3, [r2, r3]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	2107      	movs	r1, #7
 8008642:	400a      	ands	r2, r1
 8008644:	0092      	lsls	r2, r2, #2
 8008646:	210f      	movs	r1, #15
 8008648:	4091      	lsls	r1, r2
 800864a:	000a      	movs	r2, r1
 800864c:	43d1      	mvns	r1, r2
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	08d2      	lsrs	r2, r2, #3
 8008652:	4019      	ands	r1, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3208      	adds	r2, #8
 8008658:	0092      	lsls	r2, r2, #2
 800865a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	0052      	lsls	r2, r2, #1
 8008664:	2103      	movs	r1, #3
 8008666:	4091      	lsls	r1, r2
 8008668:	000a      	movs	r2, r1
 800866a:	43d2      	mvns	r2, r2
 800866c:	401a      	ands	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	2101      	movs	r1, #1
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4091      	lsls	r1, r2
 800867c:	000a      	movs	r2, r1
 800867e:	43d2      	mvns	r2, r2
 8008680:	401a      	ands	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	0052      	lsls	r2, r2, #1
 800868e:	2103      	movs	r1, #3
 8008690:	4091      	lsls	r1, r2
 8008692:	000a      	movs	r2, r1
 8008694:	43d2      	mvns	r2, r2
 8008696:	401a      	ands	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	3301      	adds	r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	40da      	lsrs	r2, r3
 80086a8:	1e13      	subs	r3, r2, #0
 80086aa:	d000      	beq.n	80086ae <HAL_GPIO_DeInit+0x19e>
 80086ac:	e73c      	b.n	8008528 <HAL_GPIO_DeInit+0x18>
  }
}
 80086ae:	46c0      	nop			@ (mov r8, r8)
 80086b0:	46c0      	nop			@ (mov r8, r8)
 80086b2:	46bd      	mov	sp, r7
 80086b4:	b006      	add	sp, #24
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40010000 	.word	0x40010000
 80086bc:	50000400 	.word	0x50000400
 80086c0:	50000800 	.word	0x50000800
 80086c4:	50000c00 	.word	0x50000c00
 80086c8:	50001000 	.word	0x50001000
 80086cc:	50001c00 	.word	0x50001c00
 80086d0:	40010400 	.word	0x40010400

080086d4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	0008      	movs	r0, r1
 80086de:	0011      	movs	r1, r2
 80086e0:	1cbb      	adds	r3, r7, #2
 80086e2:	1c02      	adds	r2, r0, #0
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	1c7b      	adds	r3, r7, #1
 80086e8:	1c0a      	adds	r2, r1, #0
 80086ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086ec:	1c7b      	adds	r3, r7, #1
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086f4:	1cbb      	adds	r3, r7, #2
 80086f6:	881a      	ldrh	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80086fc:	e003      	b.n	8008706 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80086fe:	1cbb      	adds	r3, r7, #2
 8008700:	881a      	ldrh	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	46bd      	mov	sp, r7
 800870a:	b002      	add	sp, #8
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e082      	b.n	8008828 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2241      	movs	r2, #65	@ 0x41
 8008726:	5c9b      	ldrb	r3, [r3, r2]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d107      	bne.n	800873e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2240      	movs	r2, #64	@ 0x40
 8008732:	2100      	movs	r1, #0
 8008734:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	0018      	movs	r0, r3
 800873a:	f7fb fea9 	bl	8004490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2241      	movs	r2, #65	@ 0x41
 8008742:	2124      	movs	r1, #36	@ 0x24
 8008744:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2101      	movs	r1, #1
 8008752:	438a      	bics	r2, r1
 8008754:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4934      	ldr	r1, [pc, #208]	@ (8008830 <HAL_I2C_Init+0x120>)
 8008760:	400a      	ands	r2, r1
 8008762:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4931      	ldr	r1, [pc, #196]	@ (8008834 <HAL_I2C_Init+0x124>)
 8008770:	400a      	ands	r2, r1
 8008772:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d108      	bne.n	800878e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2180      	movs	r1, #128	@ 0x80
 8008786:	0209      	lsls	r1, r1, #8
 8008788:	430a      	orrs	r2, r1
 800878a:	609a      	str	r2, [r3, #8]
 800878c:	e007      	b.n	800879e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2184      	movs	r1, #132	@ 0x84
 8008798:	0209      	lsls	r1, r1, #8
 800879a:	430a      	orrs	r2, r1
 800879c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d104      	bne.n	80087b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2280      	movs	r2, #128	@ 0x80
 80087ac:	0112      	lsls	r2, r2, #4
 80087ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	491f      	ldr	r1, [pc, #124]	@ (8008838 <HAL_I2C_Init+0x128>)
 80087bc:	430a      	orrs	r2, r1
 80087be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	491a      	ldr	r1, [pc, #104]	@ (8008834 <HAL_I2C_Init+0x124>)
 80087cc:	400a      	ands	r2, r1
 80087ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	691a      	ldr	r2, [r3, #16]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	431a      	orrs	r2, r3
 80087da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	69d9      	ldr	r1, [r3, #28]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1a      	ldr	r2, [r3, #32]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2101      	movs	r1, #1
 8008806:	430a      	orrs	r2, r1
 8008808:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2241      	movs	r2, #65	@ 0x41
 8008814:	2120      	movs	r1, #32
 8008816:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2242      	movs	r2, #66	@ 0x42
 8008822:	2100      	movs	r1, #0
 8008824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	0018      	movs	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	b002      	add	sp, #8
 800882e:	bd80      	pop	{r7, pc}
 8008830:	f0ffffff 	.word	0xf0ffffff
 8008834:	ffff7fff 	.word	0xffff7fff
 8008838:	02008000 	.word	0x02008000

0800883c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800883c:	b5b0      	push	{r4, r5, r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	0008      	movs	r0, r1
 8008846:	607a      	str	r2, [r7, #4]
 8008848:	0019      	movs	r1, r3
 800884a:	230a      	movs	r3, #10
 800884c:	18fb      	adds	r3, r7, r3
 800884e:	1c02      	adds	r2, r0, #0
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	2308      	movs	r3, #8
 8008854:	18fb      	adds	r3, r7, r3
 8008856:	1c0a      	adds	r2, r1, #0
 8008858:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2241      	movs	r2, #65	@ 0x41
 800885e:	5c9b      	ldrb	r3, [r3, r2]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b20      	cmp	r3, #32
 8008864:	d000      	beq.n	8008868 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8008866:	e0dd      	b.n	8008a24 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	699a      	ldr	r2, [r3, #24]
 800886e:	2380      	movs	r3, #128	@ 0x80
 8008870:	021b      	lsls	r3, r3, #8
 8008872:	401a      	ands	r2, r3
 8008874:	2380      	movs	r3, #128	@ 0x80
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	429a      	cmp	r2, r3
 800887a:	d101      	bne.n	8008880 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800887c:	2302      	movs	r3, #2
 800887e:	e0d2      	b.n	8008a26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2240      	movs	r2, #64	@ 0x40
 8008884:	5c9b      	ldrb	r3, [r3, r2]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <HAL_I2C_Master_Transmit_DMA+0x52>
 800888a:	2302      	movs	r3, #2
 800888c:	e0cb      	b.n	8008a26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2240      	movs	r2, #64	@ 0x40
 8008892:	2101      	movs	r1, #1
 8008894:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2241      	movs	r2, #65	@ 0x41
 800889a:	2121      	movs	r1, #33	@ 0x21
 800889c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2242      	movs	r2, #66	@ 0x42
 80088a2:	2110      	movs	r1, #16
 80088a4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2208      	movs	r2, #8
 80088b6:	18ba      	adds	r2, r7, r2
 80088b8:	8812      	ldrh	r2, [r2, #0]
 80088ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4a5c      	ldr	r2, [pc, #368]	@ (8008a30 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80088c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4a5b      	ldr	r2, [pc, #364]	@ (8008a34 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80088c6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2bff      	cmp	r3, #255	@ 0xff
 80088d0:	d906      	bls.n	80088e0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	22ff      	movs	r2, #255	@ 0xff
 80088d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80088d8:	2380      	movs	r3, #128	@ 0x80
 80088da:	045b      	lsls	r3, r3, #17
 80088dc:	617b      	str	r3, [r7, #20]
 80088de:	e007      	b.n	80088f0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80088ea:	2380      	movs	r3, #128	@ 0x80
 80088ec:	049b      	lsls	r3, r3, #18
 80088ee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d100      	bne.n	80088fa <HAL_I2C_Master_Transmit_DMA+0xbe>
 80088f8:	e078      	b.n	80089ec <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d023      	beq.n	800894a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008906:	4a4c      	ldr	r2, [pc, #304]	@ (8008a38 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8008908:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890e:	4a4b      	ldr	r2, [pc, #300]	@ (8008a3c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8008910:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891e:	2200      	movs	r2, #0
 8008920:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3328      	adds	r3, #40	@ 0x28
 800892e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8008934:	2513      	movs	r5, #19
 8008936:	197c      	adds	r4, r7, r5
 8008938:	f7ff fa96 	bl	8007e68 <HAL_DMA_Start_IT>
 800893c:	0003      	movs	r3, r0
 800893e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008940:	197b      	adds	r3, r7, r5
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d13d      	bne.n	80089c4 <HAL_I2C_Master_Transmit_DMA+0x188>
 8008948:	e013      	b.n	8008972 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2241      	movs	r2, #65	@ 0x41
 800894e:	2120      	movs	r1, #32
 8008950:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2242      	movs	r2, #66	@ 0x42
 8008956:	2100      	movs	r1, #0
 8008958:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800895e:	2280      	movs	r2, #128	@ 0x80
 8008960:	431a      	orrs	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2240      	movs	r2, #64	@ 0x40
 800896a:	2100      	movs	r1, #0
 800896c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e059      	b.n	8008a26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008976:	b2da      	uxtb	r2, r3
 8008978:	697c      	ldr	r4, [r7, #20]
 800897a:	230a      	movs	r3, #10
 800897c:	18fb      	adds	r3, r7, r3
 800897e:	8819      	ldrh	r1, [r3, #0]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	4b2f      	ldr	r3, [pc, #188]	@ (8008a40 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	0023      	movs	r3, r4
 8008988:	f001 fd0e 	bl	800a3a8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008990:	b29a      	uxth	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	b29a      	uxth	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2240      	movs	r2, #64	@ 0x40
 80089a2:	2100      	movs	r1, #0
 80089a4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2110      	movs	r1, #16
 80089aa:	0018      	movs	r0, r3
 80089ac:	f001 fd36 	bl	800a41c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2180      	movs	r1, #128	@ 0x80
 80089bc:	01c9      	lsls	r1, r1, #7
 80089be:	430a      	orrs	r2, r1
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e02d      	b.n	8008a20 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2241      	movs	r2, #65	@ 0x41
 80089c8:	2120      	movs	r1, #32
 80089ca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2242      	movs	r2, #66	@ 0x42
 80089d0:	2100      	movs	r1, #0
 80089d2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d8:	2210      	movs	r2, #16
 80089da:	431a      	orrs	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2240      	movs	r2, #64	@ 0x40
 80089e4:	2100      	movs	r1, #0
 80089e6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e01c      	b.n	8008a26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4a15      	ldr	r2, [pc, #84]	@ (8008a44 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80089f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	2380      	movs	r3, #128	@ 0x80
 80089fa:	049c      	lsls	r4, r3, #18
 80089fc:	230a      	movs	r3, #10
 80089fe:	18fb      	adds	r3, r7, r3
 8008a00:	8819      	ldrh	r1, [r3, #0]
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	4b0e      	ldr	r3, [pc, #56]	@ (8008a40 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	0023      	movs	r3, r4
 8008a0a:	f001 fccd 	bl	800a3a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2240      	movs	r2, #64	@ 0x40
 8008a12:	2100      	movs	r1, #0
 8008a14:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2101      	movs	r1, #1
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f001 fcfe 	bl	800a41c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	e000      	b.n	8008a26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008a24:	2302      	movs	r3, #2
  }
}
 8008a26:	0018      	movs	r0, r3
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b006      	add	sp, #24
 8008a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a2e:	46c0      	nop			@ (mov r8, r8)
 8008a30:	ffff0000 	.word	0xffff0000
 8008a34:	08009241 	.word	0x08009241
 8008a38:	0800a1f9 	.word	0x0800a1f9
 8008a3c:	0800a339 	.word	0x0800a339
 8008a40:	80002000 	.word	0x80002000
 8008a44:	08008ded 	.word	0x08008ded

08008a48 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8008a48:	b5b0      	push	{r4, r5, r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	0008      	movs	r0, r1
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	0019      	movs	r1, r3
 8008a56:	230a      	movs	r3, #10
 8008a58:	18fb      	adds	r3, r7, r3
 8008a5a:	1c02      	adds	r2, r0, #0
 8008a5c:	801a      	strh	r2, [r3, #0]
 8008a5e:	2308      	movs	r3, #8
 8008a60:	18fb      	adds	r3, r7, r3
 8008a62:	1c0a      	adds	r2, r1, #0
 8008a64:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2241      	movs	r2, #65	@ 0x41
 8008a6a:	5c9b      	ldrb	r3, [r3, r2]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b20      	cmp	r3, #32
 8008a70:	d000      	beq.n	8008a74 <HAL_I2C_Master_Receive_DMA+0x2c>
 8008a72:	e0dd      	b.n	8008c30 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699a      	ldr	r2, [r3, #24]
 8008a7a:	2380      	movs	r3, #128	@ 0x80
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	401a      	ands	r2, r3
 8008a80:	2380      	movs	r3, #128	@ 0x80
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d101      	bne.n	8008a8c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	e0d2      	b.n	8008c32 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2240      	movs	r2, #64	@ 0x40
 8008a90:	5c9b      	ldrb	r3, [r3, r2]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <HAL_I2C_Master_Receive_DMA+0x52>
 8008a96:	2302      	movs	r3, #2
 8008a98:	e0cb      	b.n	8008c32 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2240      	movs	r2, #64	@ 0x40
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2241      	movs	r2, #65	@ 0x41
 8008aa6:	2122      	movs	r1, #34	@ 0x22
 8008aa8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2242      	movs	r2, #66	@ 0x42
 8008aae:	2110      	movs	r1, #16
 8008ab0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	18ba      	adds	r2, r7, r2
 8008ac4:	8812      	ldrh	r2, [r2, #0]
 8008ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4a5c      	ldr	r2, [pc, #368]	@ (8008c3c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8008acc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4a5b      	ldr	r2, [pc, #364]	@ (8008c40 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8008ad2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2bff      	cmp	r3, #255	@ 0xff
 8008adc:	d906      	bls.n	8008aec <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	22ff      	movs	r2, #255	@ 0xff
 8008ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008ae4:	2380      	movs	r3, #128	@ 0x80
 8008ae6:	045b      	lsls	r3, r3, #17
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e007      	b.n	8008afc <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008af6:	2380      	movs	r3, #128	@ 0x80
 8008af8:	049b      	lsls	r3, r3, #18
 8008afa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d100      	bne.n	8008b06 <HAL_I2C_Master_Receive_DMA+0xbe>
 8008b04:	e078      	b.n	8008bf8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d023      	beq.n	8008b56 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b12:	4a4c      	ldr	r2, [pc, #304]	@ (8008c44 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8008b14:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b1a:	4a4b      	ldr	r2, [pc, #300]	@ (8008c48 <HAL_I2C_Master_Receive_DMA+0x200>)
 8008b1c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b22:	2200      	movs	r2, #0
 8008b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3324      	adds	r3, #36	@ 0x24
 8008b38:	0019      	movs	r1, r3
 8008b3a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008b40:	2513      	movs	r5, #19
 8008b42:	197c      	adds	r4, r7, r5
 8008b44:	f7ff f990 	bl	8007e68 <HAL_DMA_Start_IT>
 8008b48:	0003      	movs	r3, r0
 8008b4a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008b4c:	197b      	adds	r3, r7, r5
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d13d      	bne.n	8008bd0 <HAL_I2C_Master_Receive_DMA+0x188>
 8008b54:	e013      	b.n	8008b7e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2241      	movs	r2, #65	@ 0x41
 8008b5a:	2120      	movs	r1, #32
 8008b5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2242      	movs	r2, #66	@ 0x42
 8008b62:	2100      	movs	r1, #0
 8008b64:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b6a:	2280      	movs	r2, #128	@ 0x80
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2240      	movs	r2, #64	@ 0x40
 8008b76:	2100      	movs	r1, #0
 8008b78:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e059      	b.n	8008c32 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	697c      	ldr	r4, [r7, #20]
 8008b86:	230a      	movs	r3, #10
 8008b88:	18fb      	adds	r3, r7, r3
 8008b8a:	8819      	ldrh	r1, [r3, #0]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008c4c <HAL_I2C_Master_Receive_DMA+0x204>)
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	0023      	movs	r3, r4
 8008b94:	f001 fc08 	bl	800a3a8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2240      	movs	r2, #64	@ 0x40
 8008bae:	2100      	movs	r1, #0
 8008bb0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2110      	movs	r1, #16
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	f001 fc30 	bl	800a41c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2180      	movs	r1, #128	@ 0x80
 8008bc8:	0209      	lsls	r1, r1, #8
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	e02d      	b.n	8008c2c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2241      	movs	r2, #65	@ 0x41
 8008bd4:	2120      	movs	r1, #32
 8008bd6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2242      	movs	r2, #66	@ 0x42
 8008bdc:	2100      	movs	r1, #0
 8008bde:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008be4:	2210      	movs	r2, #16
 8008be6:	431a      	orrs	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2240      	movs	r2, #64	@ 0x40
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e01c      	b.n	8008c32 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4a15      	ldr	r2, [pc, #84]	@ (8008c50 <HAL_I2C_Master_Receive_DMA+0x208>)
 8008bfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	2380      	movs	r3, #128	@ 0x80
 8008c06:	049c      	lsls	r4, r3, #18
 8008c08:	230a      	movs	r3, #10
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	8819      	ldrh	r1, [r3, #0]
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	4b0e      	ldr	r3, [pc, #56]	@ (8008c4c <HAL_I2C_Master_Receive_DMA+0x204>)
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	0023      	movs	r3, r4
 8008c16:	f001 fbc7 	bl	800a3a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2240      	movs	r2, #64	@ 0x40
 8008c1e:	2100      	movs	r1, #0
 8008c20:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2101      	movs	r1, #1
 8008c26:	0018      	movs	r0, r3
 8008c28:	f001 fbf8 	bl	800a41c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e000      	b.n	8008c32 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008c30:	2302      	movs	r3, #2
  }
}
 8008c32:	0018      	movs	r0, r3
 8008c34:	46bd      	mov	sp, r7
 8008c36:	b006      	add	sp, #24
 8008c38:	bdb0      	pop	{r4, r5, r7, pc}
 8008c3a:	46c0      	nop			@ (mov r8, r8)
 8008c3c:	ffff0000 	.word	0xffff0000
 8008c40:	08009241 	.word	0x08009241
 8008c44:	0800a299 	.word	0x0800a299
 8008c48:	0800a339 	.word	0x0800a339
 8008c4c:	80002400 	.word	0x80002400
 8008c50:	08008ded 	.word	0x08008ded

08008c54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d005      	beq.n	8008c80 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
  }
}
 8008c80:	46c0      	nop			@ (mov r8, r8)
 8008c82:	46bd      	mov	sp, r7
 8008c84:	b004      	add	sp, #16
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	2380      	movs	r3, #128	@ 0x80
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	d00e      	beq.n	8008cc8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	2280      	movs	r2, #128	@ 0x80
 8008cae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008cb0:	d00a      	beq.n	8008cc8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2280      	movs	r2, #128	@ 0x80
 8008cc4:	0052      	lsls	r2, r2, #1
 8008cc6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	2380      	movs	r3, #128	@ 0x80
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d00e      	beq.n	8008cf0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2280      	movs	r2, #128	@ 0x80
 8008cd6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008cd8:	d00a      	beq.n	8008cf0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cde:	2208      	movs	r2, #8
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2280      	movs	r2, #128	@ 0x80
 8008cec:	00d2      	lsls	r2, r2, #3
 8008cee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	2380      	movs	r3, #128	@ 0x80
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	d00e      	beq.n	8008d18 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2280      	movs	r2, #128	@ 0x80
 8008cfe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d00:	d00a      	beq.n	8008d18 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d06:	2202      	movs	r2, #2
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2280      	movs	r2, #128	@ 0x80
 8008d14:	0092      	lsls	r2, r2, #2
 8008d16:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d1c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	220b      	movs	r2, #11
 8008d22:	4013      	ands	r3, r2
 8008d24:	d005      	beq.n	8008d32 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	0011      	movs	r1, r2
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f001 f915 	bl	8009f5c <I2C_ITError>
  }
}
 8008d32:	46c0      	nop			@ (mov r8, r8)
 8008d34:	46bd      	mov	sp, r7
 8008d36:	b006      	add	sp, #24
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008d42:	46c0      	nop			@ (mov r8, r8)
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b002      	add	sp, #8
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008d52:	46c0      	nop			@ (mov r8, r8)
 8008d54:	46bd      	mov	sp, r7
 8008d56:	b002      	add	sp, #8
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008d62:	46c0      	nop			@ (mov r8, r8)
 8008d64:	46bd      	mov	sp, r7
 8008d66:	b002      	add	sp, #8
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008d72:	46c0      	nop			@ (mov r8, r8)
 8008d74:	46bd      	mov	sp, r7
 8008d76:	b002      	add	sp, #8
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	0008      	movs	r0, r1
 8008d84:	0011      	movs	r1, r2
 8008d86:	1cfb      	adds	r3, r7, #3
 8008d88:	1c02      	adds	r2, r0, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	003b      	movs	r3, r7
 8008d8e:	1c0a      	adds	r2, r1, #0
 8008d90:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008d92:	46c0      	nop			@ (mov r8, r8)
 8008d94:	46bd      	mov	sp, r7
 8008d96:	b002      	add	sp, #8
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b082      	sub	sp, #8
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008da2:	46c0      	nop			@ (mov r8, r8)
 8008da4:	46bd      	mov	sp, r7
 8008da6:	b002      	add	sp, #8
 8008da8:	bd80      	pop	{r7, pc}

08008daa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008db2:	46c0      	nop			@ (mov r8, r8)
 8008db4:	46bd      	mov	sp, r7
 8008db6:	b002      	add	sp, #8
 8008db8:	bd80      	pop	{r7, pc}

08008dba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008dc2:	46c0      	nop			@ (mov r8, r8)
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	b002      	add	sp, #8
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008dd2:	46c0      	nop			@ (mov r8, r8)
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	b002      	add	sp, #8
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008de2:	46c0      	nop			@ (mov r8, r8)
 8008de4:	46bd      	mov	sp, r7
 8008de6:	b002      	add	sp, #8
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b089      	sub	sp, #36	@ 0x24
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2240      	movs	r2, #64	@ 0x40
 8008e00:	5c9b      	ldrb	r3, [r3, r2]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d101      	bne.n	8008e0a <I2C_Master_ISR_IT+0x1e>
 8008e06:	2302      	movs	r3, #2
 8008e08:	e113      	b.n	8009032 <I2C_Master_ISR_IT+0x246>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2240      	movs	r2, #64	@ 0x40
 8008e0e:	2101      	movs	r1, #1
 8008e10:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2210      	movs	r2, #16
 8008e16:	4013      	ands	r3, r2
 8008e18:	d012      	beq.n	8008e40 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008e20:	d00e      	beq.n	8008e40 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2210      	movs	r2, #16
 8008e28:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e2e:	2204      	movs	r2, #4
 8008e30:	431a      	orrs	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f001 f9ba 	bl	800a1b2 <I2C_Flush_TXDR>
 8008e3e:	e0e5      	b.n	800900c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2204      	movs	r2, #4
 8008e44:	4013      	ands	r3, r2
 8008e46:	d021      	beq.n	8008e8c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2204      	movs	r2, #4
 8008e4c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008e4e:	d01d      	beq.n	8008e8c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2204      	movs	r2, #4
 8008e54:	4393      	bics	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e8a:	e0bf      	b.n	800900c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	4013      	ands	r3, r2
 8008e92:	d01c      	beq.n	8008ece <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e9a:	d018      	beq.n	8008ece <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ecc:	e09e      	b.n	800900c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2280      	movs	r2, #128	@ 0x80
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	d100      	bne.n	8008ed8 <I2C_Master_ISR_IT+0xec>
 8008ed6:	e069      	b.n	8008fac <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2240      	movs	r2, #64	@ 0x40
 8008edc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008ede:	d065      	beq.n	8008fac <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d04a      	beq.n	8008f80 <I2C_Master_ISR_IT+0x194>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d146      	bne.n	8008f80 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	2112      	movs	r1, #18
 8008efc:	187b      	adds	r3, r7, r1
 8008efe:	0592      	lsls	r2, r2, #22
 8008f00:	0d92      	lsrs	r2, r2, #22
 8008f02:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2bff      	cmp	r3, #255	@ 0xff
 8008f0c:	d910      	bls.n	8008f30 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	22ff      	movs	r2, #255	@ 0xff
 8008f12:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	2380      	movs	r3, #128	@ 0x80
 8008f1c:	045c      	lsls	r4, r3, #17
 8008f1e:	187b      	adds	r3, r7, r1
 8008f20:	8819      	ldrh	r1, [r3, #0]
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	2300      	movs	r3, #0
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	0023      	movs	r3, r4
 8008f2a:	f001 fa3d 	bl	800a3a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f2e:	e03c      	b.n	8008faa <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3e:	4a3f      	ldr	r2, [pc, #252]	@ (800903c <I2C_Master_ISR_IT+0x250>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d00e      	beq.n	8008f62 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f48:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008f4e:	2312      	movs	r3, #18
 8008f50:	18fb      	adds	r3, r7, r3
 8008f52:	8819      	ldrh	r1, [r3, #0]
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	2300      	movs	r3, #0
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	0023      	movs	r3, r4
 8008f5c:	f001 fa24 	bl	800a3a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f60:	e023      	b.n	8008faa <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	2380      	movs	r3, #128	@ 0x80
 8008f6a:	049c      	lsls	r4, r3, #18
 8008f6c:	2312      	movs	r3, #18
 8008f6e:	18fb      	adds	r3, r7, r3
 8008f70:	8819      	ldrh	r1, [r3, #0]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	2300      	movs	r3, #0
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	0023      	movs	r3, r4
 8008f7a:	f001 fa15 	bl	800a3a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f7e:	e014      	b.n	8008faa <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	2380      	movs	r3, #128	@ 0x80
 8008f88:	049b      	lsls	r3, r3, #18
 8008f8a:	401a      	ands	r2, r3
 8008f8c:	2380      	movs	r3, #128	@ 0x80
 8008f8e:	049b      	lsls	r3, r3, #18
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d004      	beq.n	8008f9e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	0018      	movs	r0, r3
 8008f98:	f000 fcf4 	bl	8009984 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f9c:	e036      	b.n	800900c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2140      	movs	r1, #64	@ 0x40
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f000 ffda 	bl	8009f5c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fa8:	e030      	b.n	800900c <I2C_Master_ISR_IT+0x220>
 8008faa:	e02f      	b.n	800900c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2240      	movs	r2, #64	@ 0x40
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	d02b      	beq.n	800900c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2240      	movs	r2, #64	@ 0x40
 8008fb8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008fba:	d027      	beq.n	800900c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d11d      	bne.n	8009002 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	2380      	movs	r3, #128	@ 0x80
 8008fce:	049b      	lsls	r3, r3, #18
 8008fd0:	401a      	ands	r2, r3
 8008fd2:	2380      	movs	r3, #128	@ 0x80
 8008fd4:	049b      	lsls	r3, r3, #18
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d018      	beq.n	800900c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fde:	4a17      	ldr	r2, [pc, #92]	@ (800903c <I2C_Master_ISR_IT+0x250>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d109      	bne.n	8008ff8 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2180      	movs	r1, #128	@ 0x80
 8008ff0:	01c9      	lsls	r1, r1, #7
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	605a      	str	r2, [r3, #4]
 8008ff6:	e009      	b.n	800900c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	0018      	movs	r0, r3
 8008ffc:	f000 fcc2 	bl	8009984 <I2C_ITMasterSeqCplt>
 8009000:	e004      	b.n	800900c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2140      	movs	r1, #64	@ 0x40
 8009006:	0018      	movs	r0, r3
 8009008:	f000 ffa8 	bl	8009f5c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	2220      	movs	r2, #32
 8009010:	4013      	ands	r3, r2
 8009012:	d009      	beq.n	8009028 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2220      	movs	r2, #32
 8009018:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800901a:	d005      	beq.n	8009028 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	0011      	movs	r1, r2
 8009022:	0018      	movs	r0, r3
 8009024:	f000 fd54 	bl	8009ad0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2240      	movs	r2, #64	@ 0x40
 800902c:	2100      	movs	r1, #0
 800902e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	0018      	movs	r0, r3
 8009034:	46bd      	mov	sp, r7
 8009036:	b007      	add	sp, #28
 8009038:	bd90      	pop	{r4, r7, pc}
 800903a:	46c0      	nop			@ (mov r8, r8)
 800903c:	ffff0000 	.word	0xffff0000

08009040 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009050:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2240      	movs	r2, #64	@ 0x40
 800905a:	5c9b      	ldrb	r3, [r3, r2]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <I2C_Slave_ISR_IT+0x24>
 8009060:	2302      	movs	r3, #2
 8009062:	e0e6      	b.n	8009232 <I2C_Slave_ISR_IT+0x1f2>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2240      	movs	r2, #64	@ 0x40
 8009068:	2101      	movs	r1, #1
 800906a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2220      	movs	r2, #32
 8009070:	4013      	ands	r3, r2
 8009072:	d009      	beq.n	8009088 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800907a:	d005      	beq.n	8009088 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	0011      	movs	r1, r2
 8009082:	0018      	movs	r0, r3
 8009084:	f000 fdf2 	bl	8009c6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2210      	movs	r2, #16
 800908c:	4013      	ands	r3, r2
 800908e:	d052      	beq.n	8009136 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2210      	movs	r2, #16
 8009094:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009096:	d04e      	beq.n	8009136 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d12d      	bne.n	80090fe <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2241      	movs	r2, #65	@ 0x41
 80090a6:	5c9b      	ldrb	r3, [r3, r2]
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b28      	cmp	r3, #40	@ 0x28
 80090ac:	d10b      	bne.n	80090c6 <I2C_Slave_ISR_IT+0x86>
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	2380      	movs	r3, #128	@ 0x80
 80090b2:	049b      	lsls	r3, r3, #18
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d106      	bne.n	80090c6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	0011      	movs	r1, r2
 80090be:	0018      	movs	r0, r3
 80090c0:	f000 fef4 	bl	8009eac <I2C_ITListenCplt>
 80090c4:	e036      	b.n	8009134 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2241      	movs	r2, #65	@ 0x41
 80090ca:	5c9b      	ldrb	r3, [r3, r2]
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b29      	cmp	r3, #41	@ 0x29
 80090d0:	d110      	bne.n	80090f4 <I2C_Slave_ISR_IT+0xb4>
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	4a59      	ldr	r2, [pc, #356]	@ (800923c <I2C_Slave_ISR_IT+0x1fc>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d00c      	beq.n	80090f4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2210      	movs	r2, #16
 80090e0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f001 f864 	bl	800a1b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	0018      	movs	r0, r3
 80090ee:	f000 fc8b 	bl	8009a08 <I2C_ITSlaveSeqCplt>
 80090f2:	e01f      	b.n	8009134 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2210      	movs	r2, #16
 80090fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80090fc:	e091      	b.n	8009222 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2210      	movs	r2, #16
 8009104:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910a:	2204      	movs	r2, #4
 800910c:	431a      	orrs	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d005      	beq.n	8009124 <I2C_Slave_ISR_IT+0xe4>
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	2380      	movs	r3, #128	@ 0x80
 800911c:	045b      	lsls	r3, r3, #17
 800911e:	429a      	cmp	r2, r3
 8009120:	d000      	beq.n	8009124 <I2C_Slave_ISR_IT+0xe4>
 8009122:	e07e      	b.n	8009222 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	0011      	movs	r1, r2
 800912c:	0018      	movs	r0, r3
 800912e:	f000 ff15 	bl	8009f5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009132:	e076      	b.n	8009222 <I2C_Slave_ISR_IT+0x1e2>
 8009134:	e075      	b.n	8009222 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	2204      	movs	r2, #4
 800913a:	4013      	ands	r3, r2
 800913c:	d02f      	beq.n	800919e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2204      	movs	r2, #4
 8009142:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009144:	d02b      	beq.n	800919e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800914a:	b29b      	uxth	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	d018      	beq.n	8009182 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915a:	b2d2      	uxtb	r2, r2
 800915c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009186:	b29b      	uxth	r3, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	d14c      	bne.n	8009226 <I2C_Slave_ISR_IT+0x1e6>
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	4a2b      	ldr	r2, [pc, #172]	@ (800923c <I2C_Slave_ISR_IT+0x1fc>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d048      	beq.n	8009226 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	0018      	movs	r0, r3
 8009198:	f000 fc36 	bl	8009a08 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800919c:	e043      	b.n	8009226 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	2208      	movs	r2, #8
 80091a2:	4013      	ands	r3, r2
 80091a4:	d00a      	beq.n	80091bc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2208      	movs	r2, #8
 80091aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80091ac:	d006      	beq.n	80091bc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80091ae:	693a      	ldr	r2, [r7, #16]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	0011      	movs	r1, r2
 80091b4:	0018      	movs	r0, r3
 80091b6:	f000 fb41 	bl	800983c <I2C_ITAddrCplt>
 80091ba:	e035      	b.n	8009228 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2202      	movs	r2, #2
 80091c0:	4013      	ands	r3, r2
 80091c2:	d031      	beq.n	8009228 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80091ca:	d02d      	beq.n	8009228 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d018      	beq.n	8009208 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091fe:	3b01      	subs	r3, #1
 8009200:	b29a      	uxth	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009206:	e00f      	b.n	8009228 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	2380      	movs	r3, #128	@ 0x80
 800920c:	045b      	lsls	r3, r3, #17
 800920e:	429a      	cmp	r2, r3
 8009210:	d002      	beq.n	8009218 <I2C_Slave_ISR_IT+0x1d8>
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d107      	bne.n	8009228 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	0018      	movs	r0, r3
 800921c:	f000 fbf4 	bl	8009a08 <I2C_ITSlaveSeqCplt>
 8009220:	e002      	b.n	8009228 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8009222:	46c0      	nop			@ (mov r8, r8)
 8009224:	e000      	b.n	8009228 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8009226:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2240      	movs	r2, #64	@ 0x40
 800922c:	2100      	movs	r1, #0
 800922e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	0018      	movs	r0, r3
 8009234:	46bd      	mov	sp, r7
 8009236:	b006      	add	sp, #24
 8009238:	bd80      	pop	{r7, pc}
 800923a:	46c0      	nop			@ (mov r8, r8)
 800923c:	ffff0000 	.word	0xffff0000

08009240 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b089      	sub	sp, #36	@ 0x24
 8009244:	af02      	add	r7, sp, #8
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2240      	movs	r2, #64	@ 0x40
 8009250:	5c9b      	ldrb	r3, [r3, r2]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <I2C_Master_ISR_DMA+0x1a>
 8009256:	2302      	movs	r3, #2
 8009258:	e0e7      	b.n	800942a <I2C_Master_ISR_DMA+0x1ea>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2240      	movs	r2, #64	@ 0x40
 800925e:	2101      	movs	r1, #1
 8009260:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2210      	movs	r2, #16
 8009266:	4013      	ands	r3, r2
 8009268:	d017      	beq.n	800929a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2210      	movs	r2, #16
 800926e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009270:	d013      	beq.n	800929a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2210      	movs	r2, #16
 8009278:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800927e:	2204      	movs	r2, #4
 8009280:	431a      	orrs	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2120      	movs	r1, #32
 800928a:	0018      	movs	r0, r3
 800928c:	f001 f8c6 	bl	800a41c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	0018      	movs	r0, r3
 8009294:	f000 ff8d 	bl	800a1b2 <I2C_Flush_TXDR>
 8009298:	e0c2      	b.n	8009420 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2280      	movs	r2, #128	@ 0x80
 800929e:	4013      	ands	r3, r2
 80092a0:	d100      	bne.n	80092a4 <I2C_Master_ISR_DMA+0x64>
 80092a2:	e07c      	b.n	800939e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2240      	movs	r2, #64	@ 0x40
 80092a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80092aa:	d100      	bne.n	80092ae <I2C_Master_ISR_DMA+0x6e>
 80092ac:	e077      	b.n	800939e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2140      	movs	r1, #64	@ 0x40
 80092ba:	438a      	bics	r2, r1
 80092bc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d055      	beq.n	8009374 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	2312      	movs	r3, #18
 80092d2:	18fb      	adds	r3, r7, r3
 80092d4:	0592      	lsls	r2, r2, #22
 80092d6:	0d92      	lsrs	r2, r2, #22
 80092d8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2bff      	cmp	r3, #255	@ 0xff
 80092e2:	d906      	bls.n	80092f2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	22ff      	movs	r2, #255	@ 0xff
 80092e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80092ea:	2380      	movs	r3, #128	@ 0x80
 80092ec:	045b      	lsls	r3, r3, #17
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	e010      	b.n	8009314 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009300:	4a4c      	ldr	r2, [pc, #304]	@ (8009434 <I2C_Master_ISR_DMA+0x1f4>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d003      	beq.n	800930e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930a:	617b      	str	r3, [r7, #20]
 800930c:	e002      	b.n	8009314 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800930e:	2380      	movs	r3, #128	@ 0x80
 8009310:	049b      	lsls	r3, r3, #18
 8009312:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009318:	b2da      	uxtb	r2, r3
 800931a:	697c      	ldr	r4, [r7, #20]
 800931c:	2312      	movs	r3, #18
 800931e:	18fb      	adds	r3, r7, r3
 8009320:	8819      	ldrh	r1, [r3, #0]
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	2300      	movs	r3, #0
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	0023      	movs	r3, r4
 800932a:	f001 f83d 	bl	800a3a8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	b29a      	uxth	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2241      	movs	r2, #65	@ 0x41
 8009344:	5c9b      	ldrb	r3, [r3, r2]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b22      	cmp	r3, #34	@ 0x22
 800934a:	d109      	bne.n	8009360 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2180      	movs	r1, #128	@ 0x80
 8009358:	0209      	lsls	r1, r1, #8
 800935a:	430a      	orrs	r2, r1
 800935c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800935e:	e05f      	b.n	8009420 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2180      	movs	r1, #128	@ 0x80
 800936c:	01c9      	lsls	r1, r1, #7
 800936e:	430a      	orrs	r2, r1
 8009370:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009372:	e055      	b.n	8009420 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	2380      	movs	r3, #128	@ 0x80
 800937c:	049b      	lsls	r3, r3, #18
 800937e:	401a      	ands	r2, r3
 8009380:	2380      	movs	r3, #128	@ 0x80
 8009382:	049b      	lsls	r3, r3, #18
 8009384:	429a      	cmp	r2, r3
 8009386:	d004      	beq.n	8009392 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	0018      	movs	r0, r3
 800938c:	f000 fafa 	bl	8009984 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009390:	e046      	b.n	8009420 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2140      	movs	r1, #64	@ 0x40
 8009396:	0018      	movs	r0, r3
 8009398:	f000 fde0 	bl	8009f5c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800939c:	e040      	b.n	8009420 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2240      	movs	r2, #64	@ 0x40
 80093a2:	4013      	ands	r3, r2
 80093a4:	d02c      	beq.n	8009400 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2240      	movs	r2, #64	@ 0x40
 80093aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80093ac:	d028      	beq.n	8009400 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d11d      	bne.n	80093f4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	2380      	movs	r3, #128	@ 0x80
 80093c0:	049b      	lsls	r3, r3, #18
 80093c2:	401a      	ands	r2, r3
 80093c4:	2380      	movs	r3, #128	@ 0x80
 80093c6:	049b      	lsls	r3, r3, #18
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d028      	beq.n	800941e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d0:	4a18      	ldr	r2, [pc, #96]	@ (8009434 <I2C_Master_ISR_DMA+0x1f4>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d109      	bne.n	80093ea <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2180      	movs	r1, #128	@ 0x80
 80093e2:	01c9      	lsls	r1, r1, #7
 80093e4:	430a      	orrs	r2, r1
 80093e6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80093e8:	e019      	b.n	800941e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	0018      	movs	r0, r3
 80093ee:	f000 fac9 	bl	8009984 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80093f2:	e014      	b.n	800941e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2140      	movs	r1, #64	@ 0x40
 80093f8:	0018      	movs	r0, r3
 80093fa:	f000 fdaf 	bl	8009f5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80093fe:	e00e      	b.n	800941e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2220      	movs	r2, #32
 8009404:	4013      	ands	r3, r2
 8009406:	d00b      	beq.n	8009420 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2220      	movs	r2, #32
 800940c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800940e:	d007      	beq.n	8009420 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	0011      	movs	r1, r2
 8009416:	0018      	movs	r0, r3
 8009418:	f000 fb5a 	bl	8009ad0 <I2C_ITMasterCplt>
 800941c:	e000      	b.n	8009420 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800941e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2240      	movs	r2, #64	@ 0x40
 8009424:	2100      	movs	r1, #0
 8009426:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	0018      	movs	r0, r3
 800942c:	46bd      	mov	sp, r7
 800942e:	b007      	add	sp, #28
 8009430:	bd90      	pop	{r4, r7, pc}
 8009432:	46c0      	nop			@ (mov r8, r8)
 8009434:	ffff0000 	.word	0xffff0000

08009438 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009438:	b590      	push	{r4, r7, lr}
 800943a:	b089      	sub	sp, #36	@ 0x24
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009444:	4b88      	ldr	r3, [pc, #544]	@ (8009668 <I2C_Mem_ISR_DMA+0x230>)
 8009446:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2240      	movs	r2, #64	@ 0x40
 800944c:	5c9b      	ldrb	r3, [r3, r2]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d101      	bne.n	8009456 <I2C_Mem_ISR_DMA+0x1e>
 8009452:	2302      	movs	r3, #2
 8009454:	e104      	b.n	8009660 <I2C_Mem_ISR_DMA+0x228>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2240      	movs	r2, #64	@ 0x40
 800945a:	2101      	movs	r1, #1
 800945c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2210      	movs	r2, #16
 8009462:	4013      	ands	r3, r2
 8009464:	d017      	beq.n	8009496 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2210      	movs	r2, #16
 800946a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800946c:	d013      	beq.n	8009496 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2210      	movs	r2, #16
 8009474:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800947a:	2204      	movs	r2, #4
 800947c:	431a      	orrs	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2120      	movs	r1, #32
 8009486:	0018      	movs	r0, r3
 8009488:	f000 ffc8 	bl	800a41c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	0018      	movs	r0, r3
 8009490:	f000 fe8f 	bl	800a1b2 <I2C_Flush_TXDR>
 8009494:	e0df      	b.n	8009656 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2202      	movs	r2, #2
 800949a:	4013      	ands	r3, r2
 800949c:	d00d      	beq.n	80094ba <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2202      	movs	r2, #2
 80094a2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80094a4:	d009      	beq.n	80094ba <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80094ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	4252      	negs	r2, r2
 80094b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80094b8:	e0cd      	b.n	8009656 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2280      	movs	r2, #128	@ 0x80
 80094be:	4013      	ands	r3, r2
 80094c0:	d05e      	beq.n	8009580 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2240      	movs	r2, #64	@ 0x40
 80094c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80094c8:	d05a      	beq.n	8009580 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2110      	movs	r1, #16
 80094ce:	0018      	movs	r0, r3
 80094d0:	f000 ffa4 	bl	800a41c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d04a      	beq.n	8009574 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2bff      	cmp	r3, #255	@ 0xff
 80094e6:	d910      	bls.n	800950a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	22ff      	movs	r2, #255	@ 0xff
 80094ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094f2:	b299      	uxth	r1, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	2380      	movs	r3, #128	@ 0x80
 80094fc:	045b      	lsls	r3, r3, #17
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	2400      	movs	r4, #0
 8009502:	9400      	str	r4, [sp, #0]
 8009504:	f000 ff50 	bl	800a3a8 <I2C_TransferConfig>
 8009508:	e011      	b.n	800952e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800950e:	b29a      	uxth	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009518:	b299      	uxth	r1, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800951e:	b2da      	uxtb	r2, r3
 8009520:	2380      	movs	r3, #128	@ 0x80
 8009522:	049b      	lsls	r3, r3, #18
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	2400      	movs	r4, #0
 8009528:	9400      	str	r4, [sp, #0]
 800952a:	f000 ff3d 	bl	800a3a8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2241      	movs	r2, #65	@ 0x41
 8009544:	5c9b      	ldrb	r3, [r3, r2]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b22      	cmp	r3, #34	@ 0x22
 800954a:	d109      	bne.n	8009560 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2180      	movs	r1, #128	@ 0x80
 8009558:	0209      	lsls	r1, r1, #8
 800955a:	430a      	orrs	r2, r1
 800955c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800955e:	e07a      	b.n	8009656 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2180      	movs	r1, #128	@ 0x80
 800956c:	01c9      	lsls	r1, r1, #7
 800956e:	430a      	orrs	r2, r1
 8009570:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009572:	e070      	b.n	8009656 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2140      	movs	r1, #64	@ 0x40
 8009578:	0018      	movs	r0, r3
 800957a:	f000 fcef 	bl	8009f5c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800957e:	e06a      	b.n	8009656 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2240      	movs	r2, #64	@ 0x40
 8009584:	4013      	ands	r3, r2
 8009586:	d058      	beq.n	800963a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2240      	movs	r2, #64	@ 0x40
 800958c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800958e:	d054      	beq.n	800963a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2241      	movs	r2, #65	@ 0x41
 8009594:	5c9b      	ldrb	r3, [r3, r2]
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b22      	cmp	r3, #34	@ 0x22
 800959a:	d101      	bne.n	80095a0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800959c:	4b33      	ldr	r3, [pc, #204]	@ (800966c <I2C_Mem_ISR_DMA+0x234>)
 800959e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	2bff      	cmp	r3, #255	@ 0xff
 80095a8:	d911      	bls.n	80095ce <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	22ff      	movs	r2, #255	@ 0xff
 80095ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095b4:	b299      	uxth	r1, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	2380      	movs	r3, #128	@ 0x80
 80095be:	045c      	lsls	r4, r3, #17
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	0023      	movs	r3, r4
 80095c8:	f000 feee 	bl	800a3a8 <I2C_TransferConfig>
 80095cc:	e012      	b.n	80095f4 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095dc:	b299      	uxth	r1, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	2380      	movs	r3, #128	@ 0x80
 80095e6:	049c      	lsls	r4, r3, #18
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	0023      	movs	r3, r4
 80095f0:	f000 feda 	bl	800a3a8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	b29a      	uxth	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2241      	movs	r2, #65	@ 0x41
 800960a:	5c9b      	ldrb	r3, [r3, r2]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b22      	cmp	r3, #34	@ 0x22
 8009610:	d109      	bne.n	8009626 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2180      	movs	r1, #128	@ 0x80
 800961e:	0209      	lsls	r1, r1, #8
 8009620:	430a      	orrs	r2, r1
 8009622:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009624:	e017      	b.n	8009656 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2180      	movs	r1, #128	@ 0x80
 8009632:	01c9      	lsls	r1, r1, #7
 8009634:	430a      	orrs	r2, r1
 8009636:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009638:	e00d      	b.n	8009656 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2220      	movs	r2, #32
 800963e:	4013      	ands	r3, r2
 8009640:	d009      	beq.n	8009656 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009648:	d005      	beq.n	8009656 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	0011      	movs	r1, r2
 8009650:	0018      	movs	r0, r3
 8009652:	f000 fa3d 	bl	8009ad0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2240      	movs	r2, #64	@ 0x40
 800965a:	2100      	movs	r1, #0
 800965c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	0018      	movs	r0, r3
 8009662:	46bd      	mov	sp, r7
 8009664:	b007      	add	sp, #28
 8009666:	bd90      	pop	{r4, r7, pc}
 8009668:	80002000 	.word	0x80002000
 800966c:	80002400 	.word	0x80002400

08009670 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009680:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2240      	movs	r2, #64	@ 0x40
 800968a:	5c9b      	ldrb	r3, [r3, r2]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <I2C_Slave_ISR_DMA+0x24>
 8009690:	2302      	movs	r3, #2
 8009692:	e0cd      	b.n	8009830 <I2C_Slave_ISR_DMA+0x1c0>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2240      	movs	r2, #64	@ 0x40
 8009698:	2101      	movs	r1, #1
 800969a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2220      	movs	r2, #32
 80096a0:	4013      	ands	r3, r2
 80096a2:	d009      	beq.n	80096b8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80096aa:	d005      	beq.n	80096b8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	0011      	movs	r1, r2
 80096b2:	0018      	movs	r0, r3
 80096b4:	f000 fada 	bl	8009c6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2210      	movs	r2, #16
 80096bc:	4013      	ands	r3, r2
 80096be:	d100      	bne.n	80096c2 <I2C_Slave_ISR_DMA+0x52>
 80096c0:	e0a3      	b.n	800980a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2210      	movs	r2, #16
 80096c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80096c8:	d100      	bne.n	80096cc <I2C_Slave_ISR_DMA+0x5c>
 80096ca:	e09e      	b.n	800980a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	2380      	movs	r3, #128	@ 0x80
 80096d0:	01db      	lsls	r3, r3, #7
 80096d2:	4013      	ands	r3, r2
 80096d4:	d105      	bne.n	80096e2 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	2380      	movs	r3, #128	@ 0x80
 80096da:	021b      	lsls	r3, r3, #8
 80096dc:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80096de:	d100      	bne.n	80096e2 <I2C_Slave_ISR_DMA+0x72>
 80096e0:	e08c      	b.n	80097fc <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00c      	beq.n	8009704 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	2380      	movs	r3, #128	@ 0x80
 80096ee:	021b      	lsls	r3, r3, #8
 80096f0:	4013      	ands	r3, r2
 80096f2:	d007      	beq.n	8009704 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8009700:	2301      	movs	r3, #1
 8009702:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00c      	beq.n	8009726 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	2380      	movs	r3, #128	@ 0x80
 8009710:	01db      	lsls	r3, r3, #7
 8009712:	4013      	ands	r3, r2
 8009714:	d007      	beq.n	8009726 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8009722:	2301      	movs	r3, #1
 8009724:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d12d      	bne.n	8009788 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2241      	movs	r2, #65	@ 0x41
 8009730:	5c9b      	ldrb	r3, [r3, r2]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b28      	cmp	r3, #40	@ 0x28
 8009736:	d10b      	bne.n	8009750 <I2C_Slave_ISR_DMA+0xe0>
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	2380      	movs	r3, #128	@ 0x80
 800973c:	049b      	lsls	r3, r3, #18
 800973e:	429a      	cmp	r2, r3
 8009740:	d106      	bne.n	8009750 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	0011      	movs	r1, r2
 8009748:	0018      	movs	r0, r3
 800974a:	f000 fbaf 	bl	8009eac <I2C_ITListenCplt>
 800974e:	e054      	b.n	80097fa <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2241      	movs	r2, #65	@ 0x41
 8009754:	5c9b      	ldrb	r3, [r3, r2]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b29      	cmp	r3, #41	@ 0x29
 800975a:	d110      	bne.n	800977e <I2C_Slave_ISR_DMA+0x10e>
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	4a36      	ldr	r2, [pc, #216]	@ (8009838 <I2C_Slave_ISR_DMA+0x1c8>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00c      	beq.n	800977e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2210      	movs	r2, #16
 800976a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	0018      	movs	r0, r3
 8009770:	f000 fd1f 	bl	800a1b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	0018      	movs	r0, r3
 8009778:	f000 f946 	bl	8009a08 <I2C_ITSlaveSeqCplt>
 800977c:	e03d      	b.n	80097fa <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2210      	movs	r2, #16
 8009784:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009786:	e03e      	b.n	8009806 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2210      	movs	r2, #16
 800978e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009794:	2204      	movs	r2, #4
 8009796:	431a      	orrs	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800979c:	2317      	movs	r3, #23
 800979e:	18fb      	adds	r3, r7, r3
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	2141      	movs	r1, #65	@ 0x41
 80097a4:	5c52      	ldrb	r2, [r2, r1]
 80097a6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d004      	beq.n	80097b8 <I2C_Slave_ISR_DMA+0x148>
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	2380      	movs	r3, #128	@ 0x80
 80097b2:	045b      	lsls	r3, r3, #17
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d126      	bne.n	8009806 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80097b8:	2217      	movs	r2, #23
 80097ba:	18bb      	adds	r3, r7, r2
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b21      	cmp	r3, #33	@ 0x21
 80097c0:	d003      	beq.n	80097ca <I2C_Slave_ISR_DMA+0x15a>
 80097c2:	18bb      	adds	r3, r7, r2
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2b29      	cmp	r3, #41	@ 0x29
 80097c8:	d103      	bne.n	80097d2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2221      	movs	r2, #33	@ 0x21
 80097ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80097d0:	e00b      	b.n	80097ea <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80097d2:	2217      	movs	r2, #23
 80097d4:	18bb      	adds	r3, r7, r2
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b22      	cmp	r3, #34	@ 0x22
 80097da:	d003      	beq.n	80097e4 <I2C_Slave_ISR_DMA+0x174>
 80097dc:	18bb      	adds	r3, r7, r2
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097e2:	d102      	bne.n	80097ea <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2222      	movs	r2, #34	@ 0x22
 80097e8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	0011      	movs	r1, r2
 80097f2:	0018      	movs	r0, r3
 80097f4:	f000 fbb2 	bl	8009f5c <I2C_ITError>
      if (treatdmanack == 1U)
 80097f8:	e005      	b.n	8009806 <I2C_Slave_ISR_DMA+0x196>
 80097fa:	e004      	b.n	8009806 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2210      	movs	r2, #16
 8009802:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009804:	e00f      	b.n	8009826 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8009806:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009808:	e00d      	b.n	8009826 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2208      	movs	r2, #8
 800980e:	4013      	ands	r3, r2
 8009810:	d009      	beq.n	8009826 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2208      	movs	r2, #8
 8009816:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009818:	d005      	beq.n	8009826 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	0011      	movs	r1, r2
 8009820:	0018      	movs	r0, r3
 8009822:	f000 f80b 	bl	800983c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2240      	movs	r2, #64	@ 0x40
 800982a:	2100      	movs	r1, #0
 800982c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	0018      	movs	r0, r3
 8009832:	46bd      	mov	sp, r7
 8009834:	b008      	add	sp, #32
 8009836:	bd80      	pop	{r7, pc}
 8009838:	ffff0000 	.word	0xffff0000

0800983c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800983c:	b5b0      	push	{r4, r5, r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2241      	movs	r2, #65	@ 0x41
 800984a:	5c9b      	ldrb	r3, [r3, r2]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	001a      	movs	r2, r3
 8009850:	2328      	movs	r3, #40	@ 0x28
 8009852:	4013      	ands	r3, r2
 8009854:	2b28      	cmp	r3, #40	@ 0x28
 8009856:	d000      	beq.n	800985a <I2C_ITAddrCplt+0x1e>
 8009858:	e088      	b.n	800996c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	0c1b      	lsrs	r3, r3, #16
 8009862:	b2da      	uxtb	r2, r3
 8009864:	250f      	movs	r5, #15
 8009866:	197b      	adds	r3, r7, r5
 8009868:	2101      	movs	r1, #1
 800986a:	400a      	ands	r2, r1
 800986c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	0c1b      	lsrs	r3, r3, #16
 8009876:	b29a      	uxth	r2, r3
 8009878:	200c      	movs	r0, #12
 800987a:	183b      	adds	r3, r7, r0
 800987c:	21fe      	movs	r1, #254	@ 0xfe
 800987e:	400a      	ands	r2, r1
 8009880:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	b29a      	uxth	r2, r3
 800988a:	240a      	movs	r4, #10
 800988c:	193b      	adds	r3, r7, r4
 800988e:	0592      	lsls	r2, r2, #22
 8009890:	0d92      	lsrs	r2, r2, #22
 8009892:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	b29a      	uxth	r2, r3
 800989c:	2308      	movs	r3, #8
 800989e:	18fb      	adds	r3, r7, r3
 80098a0:	21fe      	movs	r1, #254	@ 0xfe
 80098a2:	400a      	ands	r2, r1
 80098a4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d148      	bne.n	8009940 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80098ae:	0021      	movs	r1, r4
 80098b0:	187b      	adds	r3, r7, r1
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	09db      	lsrs	r3, r3, #7
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	183b      	adds	r3, r7, r0
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	4053      	eors	r3, r2
 80098be:	b29b      	uxth	r3, r3
 80098c0:	001a      	movs	r2, r3
 80098c2:	2306      	movs	r3, #6
 80098c4:	4013      	ands	r3, r2
 80098c6:	d120      	bne.n	800990a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80098c8:	183b      	adds	r3, r7, r0
 80098ca:	187a      	adds	r2, r7, r1
 80098cc:	8812      	ldrh	r2, [r2, #0]
 80098ce:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d14c      	bne.n	800997c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2208      	movs	r2, #8
 80098ee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2240      	movs	r2, #64	@ 0x40
 80098f4:	2100      	movs	r1, #0
 80098f6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80098f8:	183b      	adds	r3, r7, r0
 80098fa:	881a      	ldrh	r2, [r3, #0]
 80098fc:	197b      	adds	r3, r7, r5
 80098fe:	7819      	ldrb	r1, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	0018      	movs	r0, r3
 8009904:	f7ff fa39 	bl	8008d7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009908:	e038      	b.n	800997c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800990a:	240c      	movs	r4, #12
 800990c:	193b      	adds	r3, r7, r4
 800990e:	2208      	movs	r2, #8
 8009910:	18ba      	adds	r2, r7, r2
 8009912:	8812      	ldrh	r2, [r2, #0]
 8009914:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009916:	2380      	movs	r3, #128	@ 0x80
 8009918:	021a      	lsls	r2, r3, #8
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	0011      	movs	r1, r2
 800991e:	0018      	movs	r0, r3
 8009920:	f000 fe0a 	bl	800a538 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2240      	movs	r2, #64	@ 0x40
 8009928:	2100      	movs	r1, #0
 800992a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800992c:	193b      	adds	r3, r7, r4
 800992e:	881a      	ldrh	r2, [r3, #0]
 8009930:	230f      	movs	r3, #15
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	7819      	ldrb	r1, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	0018      	movs	r0, r3
 800993a:	f7ff fa1e 	bl	8008d7a <HAL_I2C_AddrCallback>
}
 800993e:	e01d      	b.n	800997c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009940:	2380      	movs	r3, #128	@ 0x80
 8009942:	021a      	lsls	r2, r3, #8
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	0011      	movs	r1, r2
 8009948:	0018      	movs	r0, r3
 800994a:	f000 fdf5 	bl	800a538 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2240      	movs	r2, #64	@ 0x40
 8009952:	2100      	movs	r1, #0
 8009954:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009956:	230c      	movs	r3, #12
 8009958:	18fb      	adds	r3, r7, r3
 800995a:	881a      	ldrh	r2, [r3, #0]
 800995c:	230f      	movs	r3, #15
 800995e:	18fb      	adds	r3, r7, r3
 8009960:	7819      	ldrb	r1, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	0018      	movs	r0, r3
 8009966:	f7ff fa08 	bl	8008d7a <HAL_I2C_AddrCallback>
}
 800996a:	e007      	b.n	800997c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2208      	movs	r2, #8
 8009972:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2240      	movs	r2, #64	@ 0x40
 8009978:	2100      	movs	r1, #0
 800997a:	5499      	strb	r1, [r3, r2]
}
 800997c:	46c0      	nop			@ (mov r8, r8)
 800997e:	46bd      	mov	sp, r7
 8009980:	b004      	add	sp, #16
 8009982:	bdb0      	pop	{r4, r5, r7, pc}

08009984 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2242      	movs	r2, #66	@ 0x42
 8009990:	2100      	movs	r1, #0
 8009992:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2241      	movs	r2, #65	@ 0x41
 8009998:	5c9b      	ldrb	r3, [r3, r2]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b21      	cmp	r3, #33	@ 0x21
 800999e:	d117      	bne.n	80099d0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2241      	movs	r2, #65	@ 0x41
 80099a4:	2120      	movs	r1, #32
 80099a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2211      	movs	r2, #17
 80099ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2101      	movs	r1, #1
 80099b8:	0018      	movs	r0, r3
 80099ba:	f000 fdbd 	bl	800a538 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2240      	movs	r2, #64	@ 0x40
 80099c2:	2100      	movs	r1, #0
 80099c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	0018      	movs	r0, r3
 80099ca:	f7ff f9b6 	bl	8008d3a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80099ce:	e016      	b.n	80099fe <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2241      	movs	r2, #65	@ 0x41
 80099d4:	2120      	movs	r1, #32
 80099d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2212      	movs	r2, #18
 80099dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2102      	movs	r1, #2
 80099e8:	0018      	movs	r0, r3
 80099ea:	f000 fda5 	bl	800a538 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2240      	movs	r2, #64	@ 0x40
 80099f2:	2100      	movs	r1, #0
 80099f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	0018      	movs	r0, r3
 80099fa:	f7ff f9a6 	bl	8008d4a <HAL_I2C_MasterRxCpltCallback>
}
 80099fe:	46c0      	nop			@ (mov r8, r8)
 8009a00:	46bd      	mov	sp, r7
 8009a02:	b002      	add	sp, #8
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2242      	movs	r2, #66	@ 0x42
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	2380      	movs	r3, #128	@ 0x80
 8009a24:	01db      	lsls	r3, r3, #7
 8009a26:	4013      	ands	r3, r2
 8009a28:	d008      	beq.n	8009a3c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4924      	ldr	r1, [pc, #144]	@ (8009ac8 <I2C_ITSlaveSeqCplt+0xc0>)
 8009a36:	400a      	ands	r2, r1
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	e00c      	b.n	8009a56 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	2380      	movs	r3, #128	@ 0x80
 8009a40:	021b      	lsls	r3, r3, #8
 8009a42:	4013      	ands	r3, r2
 8009a44:	d007      	beq.n	8009a56 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	491e      	ldr	r1, [pc, #120]	@ (8009acc <I2C_ITSlaveSeqCplt+0xc4>)
 8009a52:	400a      	ands	r2, r1
 8009a54:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2241      	movs	r2, #65	@ 0x41
 8009a5a:	5c9b      	ldrb	r3, [r3, r2]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b29      	cmp	r3, #41	@ 0x29
 8009a60:	d114      	bne.n	8009a8c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2241      	movs	r2, #65	@ 0x41
 8009a66:	2128      	movs	r1, #40	@ 0x28
 8009a68:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2221      	movs	r2, #33	@ 0x21
 8009a6e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2101      	movs	r1, #1
 8009a74:	0018      	movs	r0, r3
 8009a76:	f000 fd5f 	bl	800a538 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2240      	movs	r2, #64	@ 0x40
 8009a7e:	2100      	movs	r1, #0
 8009a80:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	0018      	movs	r0, r3
 8009a86:	f7ff f968 	bl	8008d5a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009a8a:	e019      	b.n	8009ac0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2241      	movs	r2, #65	@ 0x41
 8009a90:	5c9b      	ldrb	r3, [r3, r2]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a96:	d113      	bne.n	8009ac0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2241      	movs	r2, #65	@ 0x41
 8009a9c:	2128      	movs	r1, #40	@ 0x28
 8009a9e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2222      	movs	r2, #34	@ 0x22
 8009aa4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2102      	movs	r1, #2
 8009aaa:	0018      	movs	r0, r3
 8009aac:	f000 fd44 	bl	800a538 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2240      	movs	r2, #64	@ 0x40
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	0018      	movs	r0, r3
 8009abc:	f7ff f955 	bl	8008d6a <HAL_I2C_SlaveRxCpltCallback>
}
 8009ac0:	46c0      	nop			@ (mov r8, r8)
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	b004      	add	sp, #16
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	ffffbfff 	.word	0xffffbfff
 8009acc:	ffff7fff 	.word	0xffff7fff

08009ad0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2241      	movs	r2, #65	@ 0x41
 8009aea:	5c9b      	ldrb	r3, [r3, r2]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b21      	cmp	r3, #33	@ 0x21
 8009af0:	d108      	bne.n	8009b04 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2101      	movs	r1, #1
 8009af6:	0018      	movs	r0, r3
 8009af8:	f000 fd1e 	bl	800a538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2211      	movs	r2, #17
 8009b00:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b02:	e00d      	b.n	8009b20 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2241      	movs	r2, #65	@ 0x41
 8009b08:	5c9b      	ldrb	r3, [r3, r2]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b22      	cmp	r3, #34	@ 0x22
 8009b0e:	d107      	bne.n	8009b20 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2102      	movs	r1, #2
 8009b14:	0018      	movs	r0, r3
 8009b16:	f000 fd0f 	bl	800a538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2212      	movs	r2, #18
 8009b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	494e      	ldr	r1, [pc, #312]	@ (8009c64 <I2C_ITMasterCplt+0x194>)
 8009b2c:	400a      	ands	r2, r1
 8009b2e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a4b      	ldr	r2, [pc, #300]	@ (8009c68 <I2C_ITMasterCplt+0x198>)
 8009b3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2210      	movs	r2, #16
 8009b40:	4013      	ands	r3, r2
 8009b42:	d009      	beq.n	8009b58 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2210      	movs	r2, #16
 8009b4a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b50:	2204      	movs	r2, #4
 8009b52:	431a      	orrs	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2241      	movs	r2, #65	@ 0x41
 8009b5c:	5c9b      	ldrb	r3, [r3, r2]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b60      	cmp	r3, #96	@ 0x60
 8009b62:	d109      	bne.n	8009b78 <I2C_ITMasterCplt+0xa8>
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2204      	movs	r2, #4
 8009b68:	4013      	ands	r3, r2
 8009b6a:	d005      	beq.n	8009b78 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009b76:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	0018      	movs	r0, r3
 8009b7c:	f000 fb19 	bl	800a1b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b84:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2241      	movs	r2, #65	@ 0x41
 8009b8a:	5c9b      	ldrb	r3, [r3, r2]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b60      	cmp	r3, #96	@ 0x60
 8009b90:	d002      	beq.n	8009b98 <I2C_ITMasterCplt+0xc8>
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d007      	beq.n	8009ba8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	0011      	movs	r1, r2
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f000 f9db 	bl	8009f5c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009ba6:	e058      	b.n	8009c5a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2241      	movs	r2, #65	@ 0x41
 8009bac:	5c9b      	ldrb	r3, [r3, r2]
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b21      	cmp	r3, #33	@ 0x21
 8009bb2:	d126      	bne.n	8009c02 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2241      	movs	r2, #65	@ 0x41
 8009bb8:	2120      	movs	r1, #32
 8009bba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2242      	movs	r2, #66	@ 0x42
 8009bc6:	5c9b      	ldrb	r3, [r3, r2]
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b40      	cmp	r3, #64	@ 0x40
 8009bcc:	d10c      	bne.n	8009be8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2242      	movs	r2, #66	@ 0x42
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2240      	movs	r2, #64	@ 0x40
 8009bda:	2100      	movs	r1, #0
 8009bdc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	0018      	movs	r0, r3
 8009be2:	f7ff f8e2 	bl	8008daa <HAL_I2C_MemTxCpltCallback>
}
 8009be6:	e038      	b.n	8009c5a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2242      	movs	r2, #66	@ 0x42
 8009bec:	2100      	movs	r1, #0
 8009bee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2240      	movs	r2, #64	@ 0x40
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	f7ff f89d 	bl	8008d3a <HAL_I2C_MasterTxCpltCallback>
}
 8009c00:	e02b      	b.n	8009c5a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2241      	movs	r2, #65	@ 0x41
 8009c06:	5c9b      	ldrb	r3, [r3, r2]
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b22      	cmp	r3, #34	@ 0x22
 8009c0c:	d125      	bne.n	8009c5a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2241      	movs	r2, #65	@ 0x41
 8009c12:	2120      	movs	r1, #32
 8009c14:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2242      	movs	r2, #66	@ 0x42
 8009c20:	5c9b      	ldrb	r3, [r3, r2]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b40      	cmp	r3, #64	@ 0x40
 8009c26:	d10c      	bne.n	8009c42 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2242      	movs	r2, #66	@ 0x42
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2240      	movs	r2, #64	@ 0x40
 8009c34:	2100      	movs	r1, #0
 8009c36:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f7ff f8bd 	bl	8008dba <HAL_I2C_MemRxCpltCallback>
}
 8009c40:	e00b      	b.n	8009c5a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2242      	movs	r2, #66	@ 0x42
 8009c46:	2100      	movs	r1, #0
 8009c48:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2240      	movs	r2, #64	@ 0x40
 8009c4e:	2100      	movs	r1, #0
 8009c50:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	0018      	movs	r0, r3
 8009c56:	f7ff f878 	bl	8008d4a <HAL_I2C_MasterRxCpltCallback>
}
 8009c5a:	46c0      	nop			@ (mov r8, r8)
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	b006      	add	sp, #24
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	fe00e800 	.word	0xfe00e800
 8009c68:	ffff0000 	.word	0xffff0000

08009c6c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009c82:	200f      	movs	r0, #15
 8009c84:	183b      	adds	r3, r7, r0
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	2141      	movs	r1, #65	@ 0x41
 8009c8a:	5c52      	ldrb	r2, [r2, r1]
 8009c8c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2220      	movs	r2, #32
 8009c94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009c96:	183b      	adds	r3, r7, r0
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b21      	cmp	r3, #33	@ 0x21
 8009c9c:	d003      	beq.n	8009ca6 <I2C_ITSlaveCplt+0x3a>
 8009c9e:	183b      	adds	r3, r7, r0
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b29      	cmp	r3, #41	@ 0x29
 8009ca4:	d109      	bne.n	8009cba <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009ca6:	4a7b      	ldr	r2, [pc, #492]	@ (8009e94 <I2C_ITSlaveCplt+0x228>)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	0011      	movs	r1, r2
 8009cac:	0018      	movs	r0, r3
 8009cae:	f000 fc43 	bl	800a538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2221      	movs	r2, #33	@ 0x21
 8009cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cb8:	e011      	b.n	8009cde <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009cba:	220f      	movs	r2, #15
 8009cbc:	18bb      	adds	r3, r7, r2
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b22      	cmp	r3, #34	@ 0x22
 8009cc2:	d003      	beq.n	8009ccc <I2C_ITSlaveCplt+0x60>
 8009cc4:	18bb      	adds	r3, r7, r2
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cca:	d108      	bne.n	8009cde <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009ccc:	4a72      	ldr	r2, [pc, #456]	@ (8009e98 <I2C_ITSlaveCplt+0x22c>)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	0011      	movs	r1, r2
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	f000 fc30 	bl	800a538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2222      	movs	r2, #34	@ 0x22
 8009cdc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2180      	movs	r1, #128	@ 0x80
 8009cea:	0209      	lsls	r1, r1, #8
 8009cec:	430a      	orrs	r2, r1
 8009cee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4968      	ldr	r1, [pc, #416]	@ (8009e9c <I2C_ITSlaveCplt+0x230>)
 8009cfc:	400a      	ands	r2, r1
 8009cfe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	0018      	movs	r0, r3
 8009d04:	f000 fa55 	bl	800a1b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	2380      	movs	r3, #128	@ 0x80
 8009d0c:	01db      	lsls	r3, r3, #7
 8009d0e:	4013      	ands	r3, r2
 8009d10:	d013      	beq.n	8009d3a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4960      	ldr	r1, [pc, #384]	@ (8009ea0 <I2C_ITSlaveCplt+0x234>)
 8009d1e:	400a      	ands	r2, r1
 8009d20:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d01f      	beq.n	8009d6a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009d38:	e017      	b.n	8009d6a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	2380      	movs	r3, #128	@ 0x80
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	4013      	ands	r3, r2
 8009d42:	d012      	beq.n	8009d6a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4955      	ldr	r1, [pc, #340]	@ (8009ea4 <I2C_ITSlaveCplt+0x238>)
 8009d50:	400a      	ands	r2, r1
 8009d52:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d006      	beq.n	8009d6a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2204      	movs	r2, #4
 8009d6e:	4013      	ands	r3, r2
 8009d70:	d020      	beq.n	8009db4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2204      	movs	r2, #4
 8009d76:	4393      	bics	r3, r2
 8009d78:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d84:	b2d2      	uxtb	r2, r2
 8009d86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00c      	beq.n	8009db4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	3b01      	subs	r3, #1
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2242      	movs	r2, #66	@ 0x42
 8009dce:	2100      	movs	r1, #0
 8009dd0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d013      	beq.n	8009e08 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	0011      	movs	r1, r2
 8009de8:	0018      	movs	r0, r3
 8009dea:	f000 f8b7 	bl	8009f5c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2241      	movs	r2, #65	@ 0x41
 8009df2:	5c9b      	ldrb	r3, [r3, r2]
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b28      	cmp	r3, #40	@ 0x28
 8009df8:	d147      	bne.n	8009e8a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	0011      	movs	r1, r2
 8009e00:	0018      	movs	r0, r3
 8009e02:	f000 f853 	bl	8009eac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009e06:	e040      	b.n	8009e8a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0c:	4a26      	ldr	r2, [pc, #152]	@ (8009ea8 <I2C_ITSlaveCplt+0x23c>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d016      	beq.n	8009e40 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	0018      	movs	r0, r3
 8009e16:	f7ff fdf7 	bl	8009a08 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a22      	ldr	r2, [pc, #136]	@ (8009ea8 <I2C_ITSlaveCplt+0x23c>)
 8009e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2241      	movs	r2, #65	@ 0x41
 8009e24:	2120      	movs	r1, #32
 8009e26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2240      	movs	r2, #64	@ 0x40
 8009e32:	2100      	movs	r1, #0
 8009e34:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	0018      	movs	r0, r3
 8009e3a:	f7fe ffae 	bl	8008d9a <HAL_I2C_ListenCpltCallback>
}
 8009e3e:	e024      	b.n	8009e8a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2241      	movs	r2, #65	@ 0x41
 8009e44:	5c9b      	ldrb	r3, [r3, r2]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b22      	cmp	r3, #34	@ 0x22
 8009e4a:	d10f      	bne.n	8009e6c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2241      	movs	r2, #65	@ 0x41
 8009e50:	2120      	movs	r1, #32
 8009e52:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2240      	movs	r2, #64	@ 0x40
 8009e5e:	2100      	movs	r1, #0
 8009e60:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	0018      	movs	r0, r3
 8009e66:	f7fe ff80 	bl	8008d6a <HAL_I2C_SlaveRxCpltCallback>
}
 8009e6a:	e00e      	b.n	8009e8a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2241      	movs	r2, #65	@ 0x41
 8009e70:	2120      	movs	r1, #32
 8009e72:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2240      	movs	r2, #64	@ 0x40
 8009e7e:	2100      	movs	r1, #0
 8009e80:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	0018      	movs	r0, r3
 8009e86:	f7fe ff68 	bl	8008d5a <HAL_I2C_SlaveTxCpltCallback>
}
 8009e8a:	46c0      	nop			@ (mov r8, r8)
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b006      	add	sp, #24
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	46c0      	nop			@ (mov r8, r8)
 8009e94:	00008001 	.word	0x00008001
 8009e98:	00008002 	.word	0x00008002
 8009e9c:	fe00e800 	.word	0xfe00e800
 8009ea0:	ffffbfff 	.word	0xffffbfff
 8009ea4:	ffff7fff 	.word	0xffff7fff
 8009ea8:	ffff0000 	.word	0xffff0000

08009eac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a26      	ldr	r2, [pc, #152]	@ (8009f54 <I2C_ITListenCplt+0xa8>)
 8009eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2241      	movs	r2, #65	@ 0x41
 8009ec6:	2120      	movs	r1, #32
 8009ec8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2242      	movs	r2, #66	@ 0x42
 8009ece:	2100      	movs	r1, #0
 8009ed0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2204      	movs	r2, #4
 8009edc:	4013      	ands	r3, r2
 8009ede:	d022      	beq.n	8009f26 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eea:	b2d2      	uxtb	r2, r2
 8009eec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d012      	beq.n	8009f26 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f04:	3b01      	subs	r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	3b01      	subs	r3, #1
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f1e:	2204      	movs	r2, #4
 8009f20:	431a      	orrs	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f26:	4a0c      	ldr	r2, [pc, #48]	@ (8009f58 <I2C_ITListenCplt+0xac>)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	0011      	movs	r1, r2
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f000 fb03 	bl	800a538 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2210      	movs	r2, #16
 8009f38:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2240      	movs	r2, #64	@ 0x40
 8009f3e:	2100      	movs	r1, #0
 8009f40:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	0018      	movs	r0, r3
 8009f46:	f7fe ff28 	bl	8008d9a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009f4a:	46c0      	nop			@ (mov r8, r8)
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	b002      	add	sp, #8
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	46c0      	nop			@ (mov r8, r8)
 8009f54:	ffff0000 	.word	0xffff0000
 8009f58:	00008003 	.word	0x00008003

08009f5c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009f66:	200f      	movs	r0, #15
 8009f68:	183b      	adds	r3, r7, r0
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	2141      	movs	r1, #65	@ 0x41
 8009f6e:	5c52      	ldrb	r2, [r2, r1]
 8009f70:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2242      	movs	r2, #66	@ 0x42
 8009f76:	2100      	movs	r1, #0
 8009f78:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a72      	ldr	r2, [pc, #456]	@ (800a148 <I2C_ITError+0x1ec>)
 8009f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	431a      	orrs	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009f92:	183b      	adds	r3, r7, r0
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	2b28      	cmp	r3, #40	@ 0x28
 8009f98:	d007      	beq.n	8009faa <I2C_ITError+0x4e>
 8009f9a:	183b      	adds	r3, r7, r0
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b29      	cmp	r3, #41	@ 0x29
 8009fa0:	d003      	beq.n	8009faa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009fa2:	183b      	adds	r3, r7, r0
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fa8:	d10c      	bne.n	8009fc4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2103      	movs	r1, #3
 8009fae:	0018      	movs	r0, r3
 8009fb0:	f000 fac2 	bl	800a538 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2241      	movs	r2, #65	@ 0x41
 8009fb8:	2128      	movs	r1, #40	@ 0x28
 8009fba:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a63      	ldr	r2, [pc, #396]	@ (800a14c <I2C_ITError+0x1f0>)
 8009fc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8009fc2:	e032      	b.n	800a02a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009fc4:	4a62      	ldr	r2, [pc, #392]	@ (800a150 <I2C_ITError+0x1f4>)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	0011      	movs	r1, r2
 8009fca:	0018      	movs	r0, r3
 8009fcc:	f000 fab4 	bl	800a538 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	f000 f8ed 	bl	800a1b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2241      	movs	r2, #65	@ 0x41
 8009fdc:	5c9b      	ldrb	r3, [r3, r2]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b60      	cmp	r3, #96	@ 0x60
 8009fe2:	d01f      	beq.n	800a024 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2241      	movs	r2, #65	@ 0x41
 8009fe8:	2120      	movs	r1, #32
 8009fea:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	d114      	bne.n	800a024 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	2210      	movs	r2, #16
 800a002:	4013      	ands	r3, r2
 800a004:	2b10      	cmp	r3, #16
 800a006:	d109      	bne.n	800a01c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2210      	movs	r2, #16
 800a00e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a014:	2204      	movs	r2, #4
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2220      	movs	r2, #32
 800a022:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a02e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a034:	2b00      	cmp	r3, #0
 800a036:	d03b      	beq.n	800a0b0 <I2C_ITError+0x154>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b11      	cmp	r3, #17
 800a03c:	d002      	beq.n	800a044 <I2C_ITError+0xe8>
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b21      	cmp	r3, #33	@ 0x21
 800a042:	d135      	bne.n	800a0b0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	2380      	movs	r3, #128	@ 0x80
 800a04c:	01db      	lsls	r3, r3, #7
 800a04e:	401a      	ands	r2, r3
 800a050:	2380      	movs	r3, #128	@ 0x80
 800a052:	01db      	lsls	r3, r3, #7
 800a054:	429a      	cmp	r2, r3
 800a056:	d107      	bne.n	800a068 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	493c      	ldr	r1, [pc, #240]	@ (800a154 <I2C_ITError+0x1f8>)
 800a064:	400a      	ands	r2, r1
 800a066:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06c:	0018      	movs	r0, r3
 800a06e:	f7fe f896 	bl	800819e <HAL_DMA_GetState>
 800a072:	0003      	movs	r3, r0
 800a074:	2b01      	cmp	r3, #1
 800a076:	d016      	beq.n	800a0a6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07c:	4a36      	ldr	r2, [pc, #216]	@ (800a158 <I2C_ITError+0x1fc>)
 800a07e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2240      	movs	r2, #64	@ 0x40
 800a084:	2100      	movs	r1, #0
 800a086:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08c:	0018      	movs	r0, r3
 800a08e:	f7fd ff91 	bl	8007fb4 <HAL_DMA_Abort_IT>
 800a092:	1e03      	subs	r3, r0, #0
 800a094:	d051      	beq.n	800a13a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a09a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0a4:	e049      	b.n	800a13a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f000 f859 	bl	800a160 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0ae:	e044      	b.n	800a13a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d03b      	beq.n	800a130 <I2C_ITError+0x1d4>
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2b12      	cmp	r3, #18
 800a0bc:	d002      	beq.n	800a0c4 <I2C_ITError+0x168>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b22      	cmp	r3, #34	@ 0x22
 800a0c2:	d135      	bne.n	800a130 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	2380      	movs	r3, #128	@ 0x80
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	401a      	ands	r2, r3
 800a0d0:	2380      	movs	r3, #128	@ 0x80
 800a0d2:	021b      	lsls	r3, r3, #8
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d107      	bne.n	800a0e8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	491e      	ldr	r1, [pc, #120]	@ (800a15c <I2C_ITError+0x200>)
 800a0e4:	400a      	ands	r2, r1
 800a0e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f7fe f856 	bl	800819e <HAL_DMA_GetState>
 800a0f2:	0003      	movs	r3, r0
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d016      	beq.n	800a126 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0fc:	4a16      	ldr	r2, [pc, #88]	@ (800a158 <I2C_ITError+0x1fc>)
 800a0fe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2240      	movs	r2, #64	@ 0x40
 800a104:	2100      	movs	r1, #0
 800a106:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a10c:	0018      	movs	r0, r3
 800a10e:	f7fd ff51 	bl	8007fb4 <HAL_DMA_Abort_IT>
 800a112:	1e03      	subs	r3, r0, #0
 800a114:	d013      	beq.n	800a13e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a11a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a120:	0018      	movs	r0, r3
 800a122:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a124:	e00b      	b.n	800a13e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	0018      	movs	r0, r3
 800a12a:	f000 f819 	bl	800a160 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a12e:	e006      	b.n	800a13e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	0018      	movs	r0, r3
 800a134:	f000 f814 	bl	800a160 <I2C_TreatErrorCallback>
  }
}
 800a138:	e002      	b.n	800a140 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a13a:	46c0      	nop			@ (mov r8, r8)
 800a13c:	e000      	b.n	800a140 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a13e:	46c0      	nop			@ (mov r8, r8)
}
 800a140:	46c0      	nop			@ (mov r8, r8)
 800a142:	46bd      	mov	sp, r7
 800a144:	b004      	add	sp, #16
 800a146:	bd80      	pop	{r7, pc}
 800a148:	ffff0000 	.word	0xffff0000
 800a14c:	08009041 	.word	0x08009041
 800a150:	00008003 	.word	0x00008003
 800a154:	ffffbfff 	.word	0xffffbfff
 800a158:	0800a36b 	.word	0x0800a36b
 800a15c:	ffff7fff 	.word	0xffff7fff

0800a160 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2241      	movs	r2, #65	@ 0x41
 800a16c:	5c9b      	ldrb	r3, [r3, r2]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b60      	cmp	r3, #96	@ 0x60
 800a172:	d10f      	bne.n	800a194 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2241      	movs	r2, #65	@ 0x41
 800a178:	2120      	movs	r1, #32
 800a17a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2240      	movs	r2, #64	@ 0x40
 800a186:	2100      	movs	r1, #0
 800a188:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	0018      	movs	r0, r3
 800a18e:	f7fe fe24 	bl	8008dda <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a192:	e00a      	b.n	800a1aa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2240      	movs	r2, #64	@ 0x40
 800a19e:	2100      	movs	r1, #0
 800a1a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f7fe fe10 	bl	8008dca <HAL_I2C_ErrorCallback>
}
 800a1aa:	46c0      	nop			@ (mov r8, r8)
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	b002      	add	sp, #8
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d103      	bne.n	800a1d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	4013      	ands	r3, r2
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d007      	beq.n	800a1ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	699a      	ldr	r2, [r3, #24]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	619a      	str	r2, [r3, #24]
  }
}
 800a1ee:	46c0      	nop			@ (mov r8, r8)
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	b002      	add	sp, #8
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a204:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4920      	ldr	r1, [pc, #128]	@ (800a294 <I2C_DMAMasterTransmitCplt+0x9c>)
 800a212:	400a      	ands	r2, r1
 800a214:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d105      	bne.n	800a22c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2120      	movs	r1, #32
 800a224:	0018      	movs	r0, r3
 800a226:	f000 f8f9 	bl	800a41c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a22a:	e02e      	b.n	800a28a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a234:	189a      	adds	r2, r3, r2
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a23e:	b29b      	uxth	r3, r3
 800a240:	2bff      	cmp	r3, #255	@ 0xff
 800a242:	d903      	bls.n	800a24c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	22ff      	movs	r2, #255	@ 0xff
 800a248:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a24a:	e004      	b.n	800a256 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a250:	b29a      	uxth	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25e:	0019      	movs	r1, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3328      	adds	r3, #40	@ 0x28
 800a266:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a26c:	f7fd fdfc 	bl	8007e68 <HAL_DMA_Start_IT>
 800a270:	1e03      	subs	r3, r0, #0
 800a272:	d005      	beq.n	800a280 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2110      	movs	r1, #16
 800a278:	0018      	movs	r0, r3
 800a27a:	f7ff fe6f 	bl	8009f5c <I2C_ITError>
}
 800a27e:	e004      	b.n	800a28a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2140      	movs	r1, #64	@ 0x40
 800a284:	0018      	movs	r0, r3
 800a286:	f000 f8c9 	bl	800a41c <I2C_Enable_IRQ>
}
 800a28a:	46c0      	nop			@ (mov r8, r8)
 800a28c:	46bd      	mov	sp, r7
 800a28e:	b004      	add	sp, #16
 800a290:	bd80      	pop	{r7, pc}
 800a292:	46c0      	nop			@ (mov r8, r8)
 800a294:	ffffbfff 	.word	0xffffbfff

0800a298 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4920      	ldr	r1, [pc, #128]	@ (800a334 <I2C_DMAMasterReceiveCplt+0x9c>)
 800a2b2:	400a      	ands	r2, r1
 800a2b4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d105      	bne.n	800a2cc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2120      	movs	r1, #32
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	f000 f8a9 	bl	800a41c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a2ca:	e02e      	b.n	800a32a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a2d4:	189a      	adds	r2, r3, r2
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	2bff      	cmp	r3, #255	@ 0xff
 800a2e2:	d903      	bls.n	800a2ec <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	22ff      	movs	r2, #255	@ 0xff
 800a2e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a2ea:	e004      	b.n	800a2f6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3324      	adds	r3, #36	@ 0x24
 800a300:	0019      	movs	r1, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a306:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a30c:	f7fd fdac 	bl	8007e68 <HAL_DMA_Start_IT>
 800a310:	1e03      	subs	r3, r0, #0
 800a312:	d005      	beq.n	800a320 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2110      	movs	r1, #16
 800a318:	0018      	movs	r0, r3
 800a31a:	f7ff fe1f 	bl	8009f5c <I2C_ITError>
}
 800a31e:	e004      	b.n	800a32a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2140      	movs	r1, #64	@ 0x40
 800a324:	0018      	movs	r0, r3
 800a326:	f000 f879 	bl	800a41c <I2C_Enable_IRQ>
}
 800a32a:	46c0      	nop			@ (mov r8, r8)
 800a32c:	46bd      	mov	sp, r7
 800a32e:	b004      	add	sp, #16
 800a330:	bd80      	pop	{r7, pc}
 800a332:	46c0      	nop			@ (mov r8, r8)
 800a334:	ffff7fff 	.word	0xffff7fff

0800a338 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a344:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2180      	movs	r1, #128	@ 0x80
 800a352:	0209      	lsls	r1, r1, #8
 800a354:	430a      	orrs	r2, r1
 800a356:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2110      	movs	r1, #16
 800a35c:	0018      	movs	r0, r3
 800a35e:	f7ff fdfd 	bl	8009f5c <I2C_ITError>
}
 800a362:	46c0      	nop			@ (mov r8, r8)
 800a364:	46bd      	mov	sp, r7
 800a366:	b004      	add	sp, #16
 800a368:	bd80      	pop	{r7, pc}

0800a36a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a376:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a384:	2200      	movs	r2, #0
 800a386:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d003      	beq.n	800a398 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a394:	2200      	movs	r2, #0
 800a396:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	0018      	movs	r0, r3
 800a39c:	f7ff fee0 	bl	800a160 <I2C_TreatErrorCallback>
}
 800a3a0:	46c0      	nop			@ (mov r8, r8)
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	b004      	add	sp, #16
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	0008      	movs	r0, r1
 800a3b2:	0011      	movs	r1, r2
 800a3b4:	607b      	str	r3, [r7, #4]
 800a3b6:	240a      	movs	r4, #10
 800a3b8:	193b      	adds	r3, r7, r4
 800a3ba:	1c02      	adds	r2, r0, #0
 800a3bc:	801a      	strh	r2, [r3, #0]
 800a3be:	2009      	movs	r0, #9
 800a3c0:	183b      	adds	r3, r7, r0
 800a3c2:	1c0a      	adds	r2, r1, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3c6:	193b      	adds	r3, r7, r4
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	059b      	lsls	r3, r3, #22
 800a3cc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3ce:	183b      	adds	r3, r7, r0
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	0419      	lsls	r1, r3, #16
 800a3d4:	23ff      	movs	r3, #255	@ 0xff
 800a3d6:	041b      	lsls	r3, r3, #16
 800a3d8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3da:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	085b      	lsrs	r3, r3, #1
 800a3e8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3f2:	0d51      	lsrs	r1, r2, #21
 800a3f4:	2280      	movs	r2, #128	@ 0x80
 800a3f6:	00d2      	lsls	r2, r2, #3
 800a3f8:	400a      	ands	r2, r1
 800a3fa:	4907      	ldr	r1, [pc, #28]	@ (800a418 <I2C_TransferConfig+0x70>)
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	43d2      	mvns	r2, r2
 800a400:	401a      	ands	r2, r3
 800a402:	0011      	movs	r1, r2
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a40e:	46c0      	nop			@ (mov r8, r8)
 800a410:	46bd      	mov	sp, r7
 800a412:	b007      	add	sp, #28
 800a414:	bd90      	pop	{r4, r7, pc}
 800a416:	46c0      	nop			@ (mov r8, r8)
 800a418:	03ff63ff 	.word	0x03ff63ff

0800a41c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	000a      	movs	r2, r1
 800a426:	1cbb      	adds	r3, r7, #2
 800a428:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a432:	4b3e      	ldr	r3, [pc, #248]	@ (800a52c <I2C_Enable_IRQ+0x110>)
 800a434:	429a      	cmp	r2, r3
 800a436:	d035      	beq.n	800a4a4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a43c:	4b3c      	ldr	r3, [pc, #240]	@ (800a530 <I2C_Enable_IRQ+0x114>)
 800a43e:	429a      	cmp	r2, r3
 800a440:	d030      	beq.n	800a4a4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a446:	4b3b      	ldr	r3, [pc, #236]	@ (800a534 <I2C_Enable_IRQ+0x118>)
 800a448:	429a      	cmp	r2, r3
 800a44a:	d02b      	beq.n	800a4a4 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a44c:	1cbb      	adds	r3, r7, #2
 800a44e:	2200      	movs	r2, #0
 800a450:	5e9b      	ldrsh	r3, [r3, r2]
 800a452:	2b00      	cmp	r3, #0
 800a454:	da03      	bge.n	800a45e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	22b8      	movs	r2, #184	@ 0xb8
 800a45a:	4313      	orrs	r3, r2
 800a45c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a45e:	1cbb      	adds	r3, r7, #2
 800a460:	881b      	ldrh	r3, [r3, #0]
 800a462:	2201      	movs	r2, #1
 800a464:	4013      	ands	r3, r2
 800a466:	d003      	beq.n	800a470 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	22f2      	movs	r2, #242	@ 0xf2
 800a46c:	4313      	orrs	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a470:	1cbb      	adds	r3, r7, #2
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	2202      	movs	r2, #2
 800a476:	4013      	ands	r3, r2
 800a478:	d003      	beq.n	800a482 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	22f4      	movs	r2, #244	@ 0xf4
 800a47e:	4313      	orrs	r3, r2
 800a480:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a482:	1cbb      	adds	r3, r7, #2
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	2b10      	cmp	r3, #16
 800a488:	d103      	bne.n	800a492 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2290      	movs	r2, #144	@ 0x90
 800a48e:	4313      	orrs	r3, r2
 800a490:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a492:	1cbb      	adds	r3, r7, #2
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	2b20      	cmp	r3, #32
 800a498:	d13c      	bne.n	800a514 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2220      	movs	r2, #32
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a4a2:	e037      	b.n	800a514 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a4a4:	1cbb      	adds	r3, r7, #2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	5e9b      	ldrsh	r3, [r3, r2]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	da03      	bge.n	800a4b6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	22b8      	movs	r2, #184	@ 0xb8
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a4b6:	1cbb      	adds	r3, r7, #2
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	4013      	ands	r3, r2
 800a4be:	d003      	beq.n	800a4c8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	22f2      	movs	r2, #242	@ 0xf2
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a4c8:	1cbb      	adds	r3, r7, #2
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	d003      	beq.n	800a4da <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	22f4      	movs	r2, #244	@ 0xf4
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a4da:	1cbb      	adds	r3, r7, #2
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	2b10      	cmp	r3, #16
 800a4e0:	d103      	bne.n	800a4ea <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2290      	movs	r2, #144	@ 0x90
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a4ea:	1cbb      	adds	r3, r7, #2
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d103      	bne.n	800a4fa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2260      	movs	r2, #96	@ 0x60
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a534 <I2C_Enable_IRQ+0x118>)
 800a500:	429a      	cmp	r2, r3
 800a502:	d007      	beq.n	800a514 <I2C_Enable_IRQ+0xf8>
 800a504:	1cbb      	adds	r3, r7, #2
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	2b40      	cmp	r3, #64	@ 0x40
 800a50a:	d103      	bne.n	800a514 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2240      	movs	r2, #64	@ 0x40
 800a510:	4313      	orrs	r3, r2
 800a512:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6819      	ldr	r1, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	430a      	orrs	r2, r1
 800a522:	601a      	str	r2, [r3, #0]
}
 800a524:	46c0      	nop			@ (mov r8, r8)
 800a526:	46bd      	mov	sp, r7
 800a528:	b004      	add	sp, #16
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	08009241 	.word	0x08009241
 800a530:	08009671 	.word	0x08009671
 800a534:	08009439 	.word	0x08009439

0800a538 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	000a      	movs	r2, r1
 800a542:	1cbb      	adds	r3, r7, #2
 800a544:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800a546:	2300      	movs	r3, #0
 800a548:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a54a:	1cbb      	adds	r3, r7, #2
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	2201      	movs	r2, #1
 800a550:	4013      	ands	r3, r2
 800a552:	d010      	beq.n	800a576 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2242      	movs	r2, #66	@ 0x42
 800a558:	4313      	orrs	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2241      	movs	r2, #65	@ 0x41
 800a560:	5c9b      	ldrb	r3, [r3, r2]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	001a      	movs	r2, r3
 800a566:	2328      	movs	r3, #40	@ 0x28
 800a568:	4013      	ands	r3, r2
 800a56a:	2b28      	cmp	r3, #40	@ 0x28
 800a56c:	d003      	beq.n	800a576 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	22b0      	movs	r2, #176	@ 0xb0
 800a572:	4313      	orrs	r3, r2
 800a574:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a576:	1cbb      	adds	r3, r7, #2
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	2202      	movs	r2, #2
 800a57c:	4013      	ands	r3, r2
 800a57e:	d010      	beq.n	800a5a2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2244      	movs	r2, #68	@ 0x44
 800a584:	4313      	orrs	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2241      	movs	r2, #65	@ 0x41
 800a58c:	5c9b      	ldrb	r3, [r3, r2]
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	001a      	movs	r2, r3
 800a592:	2328      	movs	r3, #40	@ 0x28
 800a594:	4013      	ands	r3, r2
 800a596:	2b28      	cmp	r3, #40	@ 0x28
 800a598:	d003      	beq.n	800a5a2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	22b0      	movs	r2, #176	@ 0xb0
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a5a2:	1cbb      	adds	r3, r7, #2
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	5e9b      	ldrsh	r3, [r3, r2]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	da03      	bge.n	800a5b4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	22b8      	movs	r2, #184	@ 0xb8
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a5b4:	1cbb      	adds	r3, r7, #2
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	2b10      	cmp	r3, #16
 800a5ba:	d103      	bne.n	800a5c4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2290      	movs	r2, #144	@ 0x90
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a5c4:	1cbb      	adds	r3, r7, #2
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	2b20      	cmp	r3, #32
 800a5ca:	d103      	bne.n	800a5d4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a5d4:	1cbb      	adds	r3, r7, #2
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	2b40      	cmp	r3, #64	@ 0x40
 800a5da:	d103      	bne.n	800a5e4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2240      	movs	r2, #64	@ 0x40
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	43d9      	mvns	r1, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	400a      	ands	r2, r1
 800a5f4:	601a      	str	r2, [r3, #0]
}
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	b004      	add	sp, #16
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2241      	movs	r2, #65	@ 0x41
 800a60e:	5c9b      	ldrb	r3, [r3, r2]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2b20      	cmp	r3, #32
 800a614:	d138      	bne.n	800a688 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2240      	movs	r2, #64	@ 0x40
 800a61a:	5c9b      	ldrb	r3, [r3, r2]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a620:	2302      	movs	r3, #2
 800a622:	e032      	b.n	800a68a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2240      	movs	r2, #64	@ 0x40
 800a628:	2101      	movs	r1, #1
 800a62a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2241      	movs	r2, #65	@ 0x41
 800a630:	2124      	movs	r1, #36	@ 0x24
 800a632:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2101      	movs	r1, #1
 800a640:	438a      	bics	r2, r1
 800a642:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4911      	ldr	r1, [pc, #68]	@ (800a694 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800a650:	400a      	ands	r2, r1
 800a652:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6819      	ldr	r1, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	430a      	orrs	r2, r1
 800a662:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2101      	movs	r1, #1
 800a670:	430a      	orrs	r2, r1
 800a672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2241      	movs	r2, #65	@ 0x41
 800a678:	2120      	movs	r1, #32
 800a67a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2240      	movs	r2, #64	@ 0x40
 800a680:	2100      	movs	r1, #0
 800a682:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	e000      	b.n	800a68a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a688:	2302      	movs	r3, #2
  }
}
 800a68a:	0018      	movs	r0, r3
 800a68c:	46bd      	mov	sp, r7
 800a68e:	b002      	add	sp, #8
 800a690:	bd80      	pop	{r7, pc}
 800a692:	46c0      	nop			@ (mov r8, r8)
 800a694:	ffffefff 	.word	0xffffefff

0800a698 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2241      	movs	r2, #65	@ 0x41
 800a6a6:	5c9b      	ldrb	r3, [r3, r2]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b20      	cmp	r3, #32
 800a6ac:	d139      	bne.n	800a722 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2240      	movs	r2, #64	@ 0x40
 800a6b2:	5c9b      	ldrb	r3, [r3, r2]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d101      	bne.n	800a6bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e033      	b.n	800a724 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2240      	movs	r2, #64	@ 0x40
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2241      	movs	r2, #65	@ 0x41
 800a6c8:	2124      	movs	r1, #36	@ 0x24
 800a6ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	438a      	bics	r2, r1
 800a6da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4a11      	ldr	r2, [pc, #68]	@ (800a72c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2101      	movs	r1, #1
 800a70a:	430a      	orrs	r2, r1
 800a70c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2241      	movs	r2, #65	@ 0x41
 800a712:	2120      	movs	r1, #32
 800a714:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2240      	movs	r2, #64	@ 0x40
 800a71a:	2100      	movs	r1, #0
 800a71c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	e000      	b.n	800a724 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a722:	2302      	movs	r3, #2
  }
}
 800a724:	0018      	movs	r0, r3
 800a726:	46bd      	mov	sp, r7
 800a728:	b004      	add	sp, #16
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	fffff0ff 	.word	0xfffff0ff

0800a730 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e0e1      	b.n	800a906 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2235      	movs	r2, #53	@ 0x35
 800a746:	5c9b      	ldrb	r3, [r3, r2]
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d107      	bne.n	800a75e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2234      	movs	r2, #52	@ 0x34
 800a752:	2100      	movs	r1, #0
 800a754:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	0018      	movs	r0, r3
 800a75a:	f7f9 ff9b 	bl	8004694 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2235      	movs	r2, #53	@ 0x35
 800a762:	2102      	movs	r1, #2
 800a764:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69da      	ldr	r2, [r3, #28]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4967      	ldr	r1, [pc, #412]	@ (800a910 <HAL_I2S_Init+0x1e0>)
 800a772:	400a      	ands	r2, r1
 800a774:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2202      	movs	r2, #2
 800a77c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	2b02      	cmp	r3, #2
 800a784:	d073      	beq.n	800a86e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d102      	bne.n	800a794 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800a78e:	2310      	movs	r3, #16
 800a790:	617b      	str	r3, [r7, #20]
 800a792:	e001      	b.n	800a798 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800a794:	2320      	movs	r3, #32
 800a796:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d802      	bhi.n	800a7a6 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800a7a6:	f001 f957 	bl	800ba58 <HAL_RCC_GetSysClockFreq>
 800a7aa:	0003      	movs	r3, r0
 800a7ac:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	691a      	ldr	r2, [r3, #16]
 800a7b2:	2380      	movs	r3, #128	@ 0x80
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d131      	bne.n	800a81e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d016      	beq.n	800a7f0 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	0019      	movs	r1, r3
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7f5 fcb9 	bl	8000140 <__udivsi3>
 800a7ce:	0003      	movs	r3, r0
 800a7d0:	001a      	movs	r2, r3
 800a7d2:	0013      	movs	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	189b      	adds	r3, r3, r2
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	001a      	movs	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	0019      	movs	r1, r3
 800a7e2:	0010      	movs	r0, r2
 800a7e4:	f7f5 fcac 	bl	8000140 <__udivsi3>
 800a7e8:	0003      	movs	r3, r0
 800a7ea:	3305      	adds	r3, #5
 800a7ec:	613b      	str	r3, [r7, #16]
 800a7ee:	e02a      	b.n	800a846 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	0019      	movs	r1, r3
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7f5 fca2 	bl	8000140 <__udivsi3>
 800a7fc:	0003      	movs	r3, r0
 800a7fe:	001a      	movs	r2, r3
 800a800:	0013      	movs	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	189b      	adds	r3, r3, r2
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	001a      	movs	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	0019      	movs	r1, r3
 800a810:	0010      	movs	r0, r2
 800a812:	f7f5 fc95 	bl	8000140 <__udivsi3>
 800a816:	0003      	movs	r3, r0
 800a818:	3305      	adds	r3, #5
 800a81a:	613b      	str	r3, [r7, #16]
 800a81c:	e013      	b.n	800a846 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a81e:	6979      	ldr	r1, [r7, #20]
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7f5 fc8d 	bl	8000140 <__udivsi3>
 800a826:	0003      	movs	r3, r0
 800a828:	001a      	movs	r2, r3
 800a82a:	0013      	movs	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	189b      	adds	r3, r3, r2
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	001a      	movs	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	695b      	ldr	r3, [r3, #20]
 800a838:	0019      	movs	r1, r3
 800a83a:	0010      	movs	r0, r2
 800a83c:	f7f5 fc80 	bl	8000140 <__udivsi3>
 800a840:	0003      	movs	r3, r0
 800a842:	3305      	adds	r3, #5
 800a844:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	210a      	movs	r1, #10
 800a84a:	0018      	movs	r0, r3
 800a84c:	f7f5 fc78 	bl	8000140 <__udivsi3>
 800a850:	0003      	movs	r3, r0
 800a852:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2201      	movs	r2, #1
 800a858:	4013      	ands	r3, r2
 800a85a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	085b      	lsrs	r3, r3, #1
 800a864:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	021b      	lsls	r3, r3, #8
 800a86a:	61bb      	str	r3, [r7, #24]
 800a86c:	e003      	b.n	800a876 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800a86e:	2302      	movs	r3, #2
 800a870:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d902      	bls.n	800a882 <HAL_I2S_Init+0x152>
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	2bff      	cmp	r3, #255	@ 0xff
 800a880:	d907      	bls.n	800a892 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a886:	2210      	movs	r2, #16
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e039      	b.n	800a906 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	691a      	ldr	r2, [r3, #16]
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	431a      	orrs	r2, r3
 800a89a:	0011      	movs	r1, r2
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	69fa      	ldr	r2, [r7, #28]
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	4a18      	ldr	r2, [pc, #96]	@ (800a910 <HAL_I2S_Init+0x1e0>)
 800a8ae:	401a      	ands	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6859      	ldr	r1, [r3, #4]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	4319      	orrs	r1, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	4319      	orrs	r1, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	430b      	orrs	r3, r1
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2180      	movs	r1, #128	@ 0x80
 800a8ce:	0109      	lsls	r1, r1, #4
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	2b30      	cmp	r3, #48	@ 0x30
 800a8da:	d003      	beq.n	800a8e4 <HAL_I2S_Init+0x1b4>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	2bb0      	cmp	r3, #176	@ 0xb0
 800a8e2:	d108      	bne.n	800a8f6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	69da      	ldr	r2, [r3, #28]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2180      	movs	r1, #128	@ 0x80
 800a8f0:	0149      	lsls	r1, r1, #5
 800a8f2:	430a      	orrs	r2, r1
 800a8f4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2235      	movs	r2, #53	@ 0x35
 800a900:	2101      	movs	r1, #1
 800a902:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	0018      	movs	r0, r3
 800a908:	46bd      	mov	sp, r7
 800a90a:	b008      	add	sp, #32
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	46c0      	nop			@ (mov r8, r8)
 800a910:	fffff040 	.word	0xfffff040

0800a914 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e01b      	b.n	800a95e <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2235      	movs	r2, #53	@ 0x35
 800a92a:	2102      	movs	r1, #2
 800a92c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	69da      	ldr	r2, [r3, #28]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	490b      	ldr	r1, [pc, #44]	@ (800a968 <HAL_I2S_DeInit+0x54>)
 800a93a:	400a      	ands	r2, r1
 800a93c:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	0018      	movs	r0, r3
 800a942:	f7f9 ff1b 	bl	800477c <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2235      	movs	r2, #53	@ 0x35
 800a950:	2100      	movs	r1, #0
 800a952:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2234      	movs	r2, #52	@ 0x34
 800a958:	2100      	movs	r1, #0
 800a95a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	0018      	movs	r0, r3
 800a960:	46bd      	mov	sp, r7
 800a962:	b002      	add	sp, #8
 800a964:	bd80      	pop	{r7, pc}
 800a966:	46c0      	nop			@ (mov r8, r8)
 800a968:	fffffbff 	.word	0xfffffbff

0800a96c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	1dbb      	adds	r3, r7, #6
 800a978:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d003      	beq.n	800a988 <HAL_I2S_Receive_DMA+0x1c>
 800a980:	1dbb      	adds	r3, r7, #6
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e0a6      	b.n	800aada <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2234      	movs	r2, #52	@ 0x34
 800a990:	5c9b      	ldrb	r3, [r3, r2]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b01      	cmp	r3, #1
 800a996:	d101      	bne.n	800a99c <HAL_I2S_Receive_DMA+0x30>
 800a998:	2302      	movs	r3, #2
 800a99a:	e09e      	b.n	800aada <HAL_I2S_Receive_DMA+0x16e>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2234      	movs	r2, #52	@ 0x34
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2235      	movs	r2, #53	@ 0x35
 800a9a8:	5c9b      	ldrb	r3, [r3, r2]
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d005      	beq.n	800a9bc <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2234      	movs	r2, #52	@ 0x34
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	e08e      	b.n	800aada <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2235      	movs	r2, #53	@ 0x35
 800a9c0:	2104      	movs	r1, #4
 800a9c2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	2207      	movs	r2, #7
 800a9d8:	4013      	ands	r3, r2
 800a9da:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	2b03      	cmp	r3, #3
 800a9e0:	d002      	beq.n	800a9e8 <HAL_I2S_Receive_DMA+0x7c>
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2b05      	cmp	r3, #5
 800a9e6:	d10c      	bne.n	800aa02 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800a9e8:	1dbb      	adds	r3, r7, #6
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	18db      	adds	r3, r3, r3
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800a9f4:	1dbb      	adds	r3, r7, #6
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	18db      	adds	r3, r3, r3
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa00:	e007      	b.n	800aa12 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	1dba      	adds	r2, r7, #6
 800aa06:	8812      	ldrh	r2, [r2, #0]
 800aa08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	1dba      	adds	r2, r7, #6
 800aa0e:	8812      	ldrh	r2, [r2, #0]
 800aa10:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa16:	4a33      	ldr	r2, [pc, #204]	@ (800aae4 <HAL_I2S_Receive_DMA+0x178>)
 800aa18:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa1e:	4a32      	ldr	r2, [pc, #200]	@ (800aae8 <HAL_I2S_Receive_DMA+0x17c>)
 800aa20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa26:	4a31      	ldr	r2, [pc, #196]	@ (800aaec <HAL_I2S_Receive_DMA+0x180>)
 800aa28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	69da      	ldr	r2, [r3, #28]
 800aa30:	23c0      	movs	r3, #192	@ 0xc0
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	401a      	ands	r2, r3
 800aa36:	23c0      	movs	r3, #192	@ 0xc0
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d10a      	bne.n	800aa54 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800aa3e:	2300      	movs	r3, #0
 800aa40:	613b      	str	r3, [r7, #16]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	613b      	str	r3, [r7, #16]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	613b      	str	r3, [r7, #16]
 800aa52:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	330c      	adds	r3, #12
 800aa5e:	0019      	movs	r1, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa64:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800aa6c:	f7fd f9fc 	bl	8007e68 <HAL_DMA_Start_IT>
 800aa70:	1e03      	subs	r3, r0, #0
 800aa72:	d00f      	beq.n	800aa94 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa78:	2208      	movs	r2, #8
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2235      	movs	r2, #53	@ 0x35
 800aa84:	2101      	movs	r1, #1
 800aa86:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2234      	movs	r2, #52	@ 0x34
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e022      	b.n	800aada <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	69da      	ldr	r2, [r3, #28]
 800aa9a:	2380      	movs	r3, #128	@ 0x80
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	d108      	bne.n	800aab4 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	69da      	ldr	r2, [r3, #28]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2180      	movs	r1, #128	@ 0x80
 800aaae:	00c9      	lsls	r1, r1, #3
 800aab0:	430a      	orrs	r2, r1
 800aab2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	4013      	ands	r3, r2
 800aabe:	d107      	bne.n	800aad0 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2101      	movs	r1, #1
 800aacc:	430a      	orrs	r2, r1
 800aace:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2234      	movs	r2, #52	@ 0x34
 800aad4:	2100      	movs	r1, #0
 800aad6:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	0018      	movs	r0, r3
 800aadc:	46bd      	mov	sp, r7
 800aade:	b006      	add	sp, #24
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	46c0      	nop			@ (mov r8, r8)
 800aae4:	0800aced 	.word	0x0800aced
 800aae8:	0800aca9 	.word	0x0800aca9
 800aaec:	0800ad0b 	.word	0x0800ad0b

0800aaf0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aaf8:	2317      	movs	r3, #23
 800aafa:	18fb      	adds	r3, r7, r3
 800aafc:	2200      	movs	r2, #0
 800aafe:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685a      	ldr	r2, [r3, #4]
 800ab04:	2380      	movs	r3, #128	@ 0x80
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d003      	beq.n	800ab14 <HAL_I2S_DMAStop+0x24>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d158      	bne.n	800abc6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d010      	beq.n	800ab3e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab20:	0018      	movs	r0, r3
 800ab22:	f7fd fa07 	bl	8007f34 <HAL_DMA_Abort>
 800ab26:	1e03      	subs	r3, r0, #0
 800ab28:	d009      	beq.n	800ab3e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2e:	2208      	movs	r2, #8
 800ab30:	431a      	orrs	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800ab36:	2317      	movs	r3, #23
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	2364      	movs	r3, #100	@ 0x64
 800ab42:	2201      	movs	r2, #1
 800ab44:	2102      	movs	r1, #2
 800ab46:	f000 f907 	bl	800ad58 <I2S_WaitFlagStateUntilTimeout>
 800ab4a:	1e03      	subs	r3, r0, #0
 800ab4c:	d00d      	beq.n	800ab6a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab52:	2201      	movs	r2, #1
 800ab54:	431a      	orrs	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2235      	movs	r2, #53	@ 0x35
 800ab5e:	2101      	movs	r1, #1
 800ab60:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800ab62:	2317      	movs	r3, #23
 800ab64:	18fb      	adds	r3, r7, r3
 800ab66:	2201      	movs	r2, #1
 800ab68:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	2364      	movs	r3, #100	@ 0x64
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2180      	movs	r1, #128	@ 0x80
 800ab72:	f000 f8f1 	bl	800ad58 <I2S_WaitFlagStateUntilTimeout>
 800ab76:	1e03      	subs	r3, r0, #0
 800ab78:	d00d      	beq.n	800ab96 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab7e:	2201      	movs	r2, #1
 800ab80:	431a      	orrs	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2235      	movs	r2, #53	@ 0x35
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800ab8e:	2317      	movs	r3, #23
 800ab90:	18fb      	adds	r3, r7, r3
 800ab92:	2201      	movs	r2, #1
 800ab94:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	69da      	ldr	r2, [r3, #28]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4938      	ldr	r1, [pc, #224]	@ (800ac84 <HAL_I2S_DMAStop+0x194>)
 800aba2:	400a      	ands	r2, r1
 800aba4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800aba6:	2300      	movs	r3, #0
 800aba8:	613b      	str	r3, [r7, #16]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	613b      	str	r3, [r7, #16]
 800abb2:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	685a      	ldr	r2, [r3, #4]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2102      	movs	r1, #2
 800abc0:	438a      	bics	r2, r1
 800abc2:	605a      	str	r2, [r3, #4]
 800abc4:	e053      	b.n	800ac6e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	23c0      	movs	r3, #192	@ 0xc0
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	429a      	cmp	r2, r3
 800abd0:	d005      	beq.n	800abde <HAL_I2S_DMAStop+0xee>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	2380      	movs	r3, #128	@ 0x80
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	429a      	cmp	r2, r3
 800abdc:	d147      	bne.n	800ac6e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d010      	beq.n	800ac08 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abea:	0018      	movs	r0, r3
 800abec:	f7fd f9a2 	bl	8007f34 <HAL_DMA_Abort>
 800abf0:	1e03      	subs	r3, r0, #0
 800abf2:	d009      	beq.n	800ac08 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abf8:	2208      	movs	r2, #8
 800abfa:	431a      	orrs	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800ac00:	2317      	movs	r3, #23
 800ac02:	18fb      	adds	r3, r7, r3
 800ac04:	2201      	movs	r2, #1
 800ac06:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	69da      	ldr	r2, [r3, #28]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	491c      	ldr	r1, [pc, #112]	@ (800ac84 <HAL_I2S_DMAStop+0x194>)
 800ac14:	400a      	ands	r2, r1
 800ac16:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2101      	movs	r1, #1
 800ac3a:	438a      	bics	r2, r1
 800ac3c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	2380      	movs	r3, #128	@ 0x80
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d10e      	bne.n	800ac68 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac4e:	2240      	movs	r2, #64	@ 0x40
 800ac50:	431a      	orrs	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2235      	movs	r2, #53	@ 0x35
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800ac5e:	2317      	movs	r3, #23
 800ac60:	18fb      	adds	r3, r7, r3
 800ac62:	2201      	movs	r2, #1
 800ac64:	701a      	strb	r2, [r3, #0]
 800ac66:	e002      	b.n	800ac6e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2235      	movs	r2, #53	@ 0x35
 800ac72:	2101      	movs	r1, #1
 800ac74:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800ac76:	2317      	movs	r3, #23
 800ac78:	18fb      	adds	r3, r7, r3
 800ac7a:	781b      	ldrb	r3, [r3, #0]
}
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	b006      	add	sp, #24
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	fffffbff 	.word	0xfffffbff

0800ac88 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ac90:	46c0      	nop			@ (mov r8, r8)
 800ac92:	46bd      	mov	sp, r7
 800ac94:	b002      	add	sp, #8
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800aca0:	46c0      	nop			@ (mov r8, r8)
 800aca2:	46bd      	mov	sp, r7
 800aca4:	b002      	add	sp, #8
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10e      	bne.n	800acdc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2101      	movs	r1, #1
 800acca:	438a      	bics	r2, r1
 800accc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2235      	movs	r2, #53	@ 0x35
 800acd8:	2101      	movs	r1, #1
 800acda:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	0018      	movs	r0, r3
 800ace0:	f7fa fa6c 	bl	80051bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ace4:	46c0      	nop			@ (mov r8, r8)
 800ace6:	46bd      	mov	sp, r7
 800ace8:	b004      	add	sp, #16
 800acea:	bd80      	pop	{r7, pc}

0800acec <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	0018      	movs	r0, r3
 800acfe:	f7ff ffc3 	bl	800ac88 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ad02:	46c0      	nop			@ (mov r8, r8)
 800ad04:	46bd      	mov	sp, r7
 800ad06:	b004      	add	sp, #16
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2103      	movs	r1, #3
 800ad24:	438a      	bics	r2, r1
 800ad26:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2235      	movs	r2, #53	@ 0x35
 800ad38:	2101      	movs	r1, #1
 800ad3a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad40:	2208      	movs	r2, #8
 800ad42:	431a      	orrs	r2, r3
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	0018      	movs	r0, r3
 800ad4c:	f7ff ffa4 	bl	800ac98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ad50:	46c0      	nop			@ (mov r8, r8)
 800ad52:	46bd      	mov	sp, r7
 800ad54:	b004      	add	sp, #16
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	603b      	str	r3, [r7, #0]
 800ad64:	1dfb      	adds	r3, r7, #7
 800ad66:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad68:	f7fc fe9c 	bl	8007aa4 <HAL_GetTick>
 800ad6c:	0003      	movs	r3, r0
 800ad6e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ad70:	e017      	b.n	800ada2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	d014      	beq.n	800ada2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800ad78:	f7fc fe94 	bl	8007aa4 <HAL_GetTick>
 800ad7c:	0002      	movs	r2, r0
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d902      	bls.n	800ad8e <I2S_WaitFlagStateUntilTimeout+0x36>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2235      	movs	r2, #53	@ 0x35
 800ad92:	2101      	movs	r1, #1
 800ad94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2234      	movs	r2, #52	@ 0x34
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e00f      	b.n	800adc2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	4013      	ands	r3, r2
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	1ad3      	subs	r3, r2, r3
 800adb0:	425a      	negs	r2, r3
 800adb2:	4153      	adcs	r3, r2
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	001a      	movs	r2, r3
 800adb8:	1dfb      	adds	r3, r7, #7
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d1d8      	bne.n	800ad72 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	0018      	movs	r0, r3
 800adc4:	46bd      	mov	sp, r7
 800adc6:	b006      	add	sp, #24
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800adcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adce:	b08b      	sub	sp, #44	@ 0x2c
 800add0:	af06      	add	r7, sp, #24
 800add2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e0f0      	b.n	800afc0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a79      	ldr	r2, [pc, #484]	@ (800afc8 <HAL_PCD_Init+0x1fc>)
 800ade2:	5c9b      	ldrb	r3, [r3, r2]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d108      	bne.n	800adfc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	23aa      	movs	r3, #170	@ 0xaa
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	2100      	movs	r1, #0
 800adf2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	0018      	movs	r0, r3
 800adf8:	f7fc f9ee 	bl	80071d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a72      	ldr	r2, [pc, #456]	@ (800afc8 <HAL_PCD_Init+0x1fc>)
 800ae00:	2103      	movs	r1, #3
 800ae02:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	0018      	movs	r0, r3
 800ae0a:	f003 f893 	bl	800df34 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae0e:	230f      	movs	r3, #15
 800ae10:	18fb      	adds	r3, r7, r3
 800ae12:	2200      	movs	r2, #0
 800ae14:	701a      	strb	r2, [r3, #0]
 800ae16:	e049      	b.n	800aeac <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ae18:	200f      	movs	r0, #15
 800ae1a:	183b      	adds	r3, r7, r0
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	0013      	movs	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	189b      	adds	r3, r3, r2
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	18cb      	adds	r3, r1, r3
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	2201      	movs	r2, #1
 800ae30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ae32:	183b      	adds	r3, r7, r0
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	6879      	ldr	r1, [r7, #4]
 800ae38:	1c5a      	adds	r2, r3, #1
 800ae3a:	0013      	movs	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	189b      	adds	r3, r3, r2
 800ae40:	00db      	lsls	r3, r3, #3
 800ae42:	183a      	adds	r2, r7, r0
 800ae44:	7812      	ldrb	r2, [r2, #0]
 800ae46:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ae48:	183b      	adds	r3, r7, r0
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	0013      	movs	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	189b      	adds	r3, r3, r2
 800ae56:	00db      	lsls	r3, r3, #3
 800ae58:	18cb      	adds	r3, r1, r3
 800ae5a:	3303      	adds	r3, #3
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ae60:	183b      	adds	r3, r7, r0
 800ae62:	781a      	ldrb	r2, [r3, #0]
 800ae64:	6879      	ldr	r1, [r7, #4]
 800ae66:	0013      	movs	r3, r2
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	189b      	adds	r3, r3, r2
 800ae6c:	00db      	lsls	r3, r3, #3
 800ae6e:	18cb      	adds	r3, r1, r3
 800ae70:	3338      	adds	r3, #56	@ 0x38
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ae76:	183b      	adds	r3, r7, r0
 800ae78:	781a      	ldrb	r2, [r3, #0]
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	0013      	movs	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	189b      	adds	r3, r3, r2
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	18cb      	adds	r3, r1, r3
 800ae86:	333c      	adds	r3, #60	@ 0x3c
 800ae88:	2200      	movs	r2, #0
 800ae8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ae8c:	183b      	adds	r3, r7, r0
 800ae8e:	781a      	ldrb	r2, [r3, #0]
 800ae90:	6879      	ldr	r1, [r7, #4]
 800ae92:	0013      	movs	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	189b      	adds	r3, r3, r2
 800ae98:	00db      	lsls	r3, r3, #3
 800ae9a:	18cb      	adds	r3, r1, r3
 800ae9c:	3340      	adds	r3, #64	@ 0x40
 800ae9e:	2200      	movs	r2, #0
 800aea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aea2:	183b      	adds	r3, r7, r0
 800aea4:	781a      	ldrb	r2, [r3, #0]
 800aea6:	183b      	adds	r3, r7, r0
 800aea8:	3201      	adds	r2, #1
 800aeaa:	701a      	strb	r2, [r3, #0]
 800aeac:	210f      	movs	r1, #15
 800aeae:	187b      	adds	r3, r7, r1
 800aeb0:	781a      	ldrb	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d3ae      	bcc.n	800ae18 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aeba:	187b      	adds	r3, r7, r1
 800aebc:	2200      	movs	r2, #0
 800aebe:	701a      	strb	r2, [r3, #0]
 800aec0:	e056      	b.n	800af70 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aec2:	240f      	movs	r4, #15
 800aec4:	193b      	adds	r3, r7, r4
 800aec6:	781a      	ldrb	r2, [r3, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	236a      	movs	r3, #106	@ 0x6a
 800aecc:	33ff      	adds	r3, #255	@ 0xff
 800aece:	0019      	movs	r1, r3
 800aed0:	0013      	movs	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	189b      	adds	r3, r3, r2
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	18c3      	adds	r3, r0, r3
 800aeda:	185b      	adds	r3, r3, r1
 800aedc:	2200      	movs	r2, #0
 800aede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800aee0:	193b      	adds	r3, r7, r4
 800aee2:	781a      	ldrb	r2, [r3, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	23b4      	movs	r3, #180	@ 0xb4
 800aee8:	0059      	lsls	r1, r3, #1
 800aeea:	0013      	movs	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	189b      	adds	r3, r3, r2
 800aef0:	00db      	lsls	r3, r3, #3
 800aef2:	18c3      	adds	r3, r0, r3
 800aef4:	185b      	adds	r3, r3, r1
 800aef6:	193a      	adds	r2, r7, r4
 800aef8:	7812      	ldrb	r2, [r2, #0]
 800aefa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aefc:	193b      	adds	r3, r7, r4
 800aefe:	781a      	ldrb	r2, [r3, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	236c      	movs	r3, #108	@ 0x6c
 800af04:	33ff      	adds	r3, #255	@ 0xff
 800af06:	0019      	movs	r1, r3
 800af08:	0013      	movs	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	189b      	adds	r3, r3, r2
 800af0e:	00db      	lsls	r3, r3, #3
 800af10:	18c3      	adds	r3, r0, r3
 800af12:	185b      	adds	r3, r3, r1
 800af14:	2200      	movs	r2, #0
 800af16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800af18:	193b      	adds	r3, r7, r4
 800af1a:	781a      	ldrb	r2, [r3, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	23bc      	movs	r3, #188	@ 0xbc
 800af20:	0059      	lsls	r1, r3, #1
 800af22:	0013      	movs	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	189b      	adds	r3, r3, r2
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	18c3      	adds	r3, r0, r3
 800af2c:	185b      	adds	r3, r3, r1
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800af32:	193b      	adds	r3, r7, r4
 800af34:	781a      	ldrb	r2, [r3, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	23be      	movs	r3, #190	@ 0xbe
 800af3a:	0059      	lsls	r1, r3, #1
 800af3c:	0013      	movs	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	189b      	adds	r3, r3, r2
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	18c3      	adds	r3, r0, r3
 800af46:	185b      	adds	r3, r3, r1
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800af4c:	193b      	adds	r3, r7, r4
 800af4e:	781a      	ldrb	r2, [r3, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	23c0      	movs	r3, #192	@ 0xc0
 800af54:	0059      	lsls	r1, r3, #1
 800af56:	0013      	movs	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	189b      	adds	r3, r3, r2
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	18c3      	adds	r3, r0, r3
 800af60:	185b      	adds	r3, r3, r1
 800af62:	2200      	movs	r2, #0
 800af64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af66:	193b      	adds	r3, r7, r4
 800af68:	781a      	ldrb	r2, [r3, #0]
 800af6a:	193b      	adds	r3, r7, r4
 800af6c:	3201      	adds	r2, #1
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	230f      	movs	r3, #15
 800af72:	18fb      	adds	r3, r7, r3
 800af74:	781a      	ldrb	r2, [r3, #0]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d3a1      	bcc.n	800aec2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6818      	ldr	r0, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	466a      	mov	r2, sp
 800af86:	0011      	movs	r1, r2
 800af88:	001a      	movs	r2, r3
 800af8a:	3210      	adds	r2, #16
 800af8c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800af8e:	c170      	stmia	r1!, {r4, r5, r6}
 800af90:	ca30      	ldmia	r2!, {r4, r5}
 800af92:	c130      	stmia	r1!, {r4, r5}
 800af94:	6859      	ldr	r1, [r3, #4]
 800af96:	689a      	ldr	r2, [r3, #8]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	f002 ffe5 	bl	800df68 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2224      	movs	r2, #36	@ 0x24
 800afa2:	2100      	movs	r1, #0
 800afa4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a07      	ldr	r2, [pc, #28]	@ (800afc8 <HAL_PCD_Init+0x1fc>)
 800afaa:	2101      	movs	r1, #1
 800afac:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	69db      	ldr	r3, [r3, #28]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d103      	bne.n	800afbe <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	0018      	movs	r0, r3
 800afba:	f000 f807 	bl	800afcc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	0018      	movs	r0, r3
 800afc2:	46bd      	mov	sp, r7
 800afc4:	b005      	add	sp, #20
 800afc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afc8:	000002a9 	.word	0x000002a9

0800afcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	23ba      	movs	r3, #186	@ 0xba
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	2101      	movs	r1, #1
 800afe2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	23b8      	movs	r3, #184	@ 0xb8
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	2100      	movs	r1, #0
 800afec:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2254      	movs	r2, #84	@ 0x54
 800aff2:	5a9b      	ldrh	r3, [r3, r2]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	2201      	movs	r2, #1
 800aff8:	4313      	orrs	r3, r2
 800affa:	b299      	uxth	r1, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2254      	movs	r2, #84	@ 0x54
 800b000:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2254      	movs	r2, #84	@ 0x54
 800b006:	5a9b      	ldrh	r3, [r3, r2]
 800b008:	b29b      	uxth	r3, r3
 800b00a:	2202      	movs	r2, #2
 800b00c:	4313      	orrs	r3, r2
 800b00e:	b299      	uxth	r1, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2254      	movs	r2, #84	@ 0x54
 800b014:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	0018      	movs	r0, r3
 800b01a:	46bd      	mov	sp, r7
 800b01c:	b004      	add	sp, #16
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b020:	b5b0      	push	{r4, r5, r7, lr}
 800b022:	b08a      	sub	sp, #40	@ 0x28
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d102      	bne.n	800b034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	f000 fbbf 	bl	800b7b2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b034:	4bc9      	ldr	r3, [pc, #804]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	220c      	movs	r2, #12
 800b03a:	4013      	ands	r3, r2
 800b03c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b03e:	4bc7      	ldr	r3, [pc, #796]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	2380      	movs	r3, #128	@ 0x80
 800b044:	025b      	lsls	r3, r3, #9
 800b046:	4013      	ands	r3, r2
 800b048:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2201      	movs	r2, #1
 800b050:	4013      	ands	r3, r2
 800b052:	d100      	bne.n	800b056 <HAL_RCC_OscConfig+0x36>
 800b054:	e07e      	b.n	800b154 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d007      	beq.n	800b06c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	2b0c      	cmp	r3, #12
 800b060:	d112      	bne.n	800b088 <HAL_RCC_OscConfig+0x68>
 800b062:	69ba      	ldr	r2, [r7, #24]
 800b064:	2380      	movs	r3, #128	@ 0x80
 800b066:	025b      	lsls	r3, r3, #9
 800b068:	429a      	cmp	r2, r3
 800b06a:	d10d      	bne.n	800b088 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b06c:	4bbb      	ldr	r3, [pc, #748]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	2380      	movs	r3, #128	@ 0x80
 800b072:	029b      	lsls	r3, r3, #10
 800b074:	4013      	ands	r3, r2
 800b076:	d100      	bne.n	800b07a <HAL_RCC_OscConfig+0x5a>
 800b078:	e06b      	b.n	800b152 <HAL_RCC_OscConfig+0x132>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d167      	bne.n	800b152 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	f000 fb95 	bl	800b7b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685a      	ldr	r2, [r3, #4]
 800b08c:	2380      	movs	r3, #128	@ 0x80
 800b08e:	025b      	lsls	r3, r3, #9
 800b090:	429a      	cmp	r2, r3
 800b092:	d107      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x84>
 800b094:	4bb1      	ldr	r3, [pc, #708]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	4bb0      	ldr	r3, [pc, #704]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b09a:	2180      	movs	r1, #128	@ 0x80
 800b09c:	0249      	lsls	r1, r1, #9
 800b09e:	430a      	orrs	r2, r1
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	e027      	b.n	800b0f4 <HAL_RCC_OscConfig+0xd4>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685a      	ldr	r2, [r3, #4]
 800b0a8:	23a0      	movs	r3, #160	@ 0xa0
 800b0aa:	02db      	lsls	r3, r3, #11
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d10e      	bne.n	800b0ce <HAL_RCC_OscConfig+0xae>
 800b0b0:	4baa      	ldr	r3, [pc, #680]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	4ba9      	ldr	r3, [pc, #676]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b0b6:	2180      	movs	r1, #128	@ 0x80
 800b0b8:	02c9      	lsls	r1, r1, #11
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	4ba7      	ldr	r3, [pc, #668]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	4ba6      	ldr	r3, [pc, #664]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b0c4:	2180      	movs	r1, #128	@ 0x80
 800b0c6:	0249      	lsls	r1, r1, #9
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	e012      	b.n	800b0f4 <HAL_RCC_OscConfig+0xd4>
 800b0ce:	4ba3      	ldr	r3, [pc, #652]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4ba2      	ldr	r3, [pc, #648]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b0d4:	49a2      	ldr	r1, [pc, #648]	@ (800b360 <HAL_RCC_OscConfig+0x340>)
 800b0d6:	400a      	ands	r2, r1
 800b0d8:	601a      	str	r2, [r3, #0]
 800b0da:	4ba0      	ldr	r3, [pc, #640]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	2380      	movs	r3, #128	@ 0x80
 800b0e0:	025b      	lsls	r3, r3, #9
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	60fb      	str	r3, [r7, #12]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	4b9c      	ldr	r3, [pc, #624]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	4b9b      	ldr	r3, [pc, #620]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b0ee:	499d      	ldr	r1, [pc, #628]	@ (800b364 <HAL_RCC_OscConfig+0x344>)
 800b0f0:	400a      	ands	r2, r1
 800b0f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d015      	beq.n	800b128 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0fc:	f7fc fcd2 	bl	8007aa4 <HAL_GetTick>
 800b100:	0003      	movs	r3, r0
 800b102:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b104:	e009      	b.n	800b11a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b106:	f7fc fccd 	bl	8007aa4 <HAL_GetTick>
 800b10a:	0002      	movs	r2, r0
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	2b64      	cmp	r3, #100	@ 0x64
 800b112:	d902      	bls.n	800b11a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b114:	2303      	movs	r3, #3
 800b116:	f000 fb4c 	bl	800b7b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b11a:	4b90      	ldr	r3, [pc, #576]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	2380      	movs	r3, #128	@ 0x80
 800b120:	029b      	lsls	r3, r3, #10
 800b122:	4013      	ands	r3, r2
 800b124:	d0ef      	beq.n	800b106 <HAL_RCC_OscConfig+0xe6>
 800b126:	e015      	b.n	800b154 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b128:	f7fc fcbc 	bl	8007aa4 <HAL_GetTick>
 800b12c:	0003      	movs	r3, r0
 800b12e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b130:	e008      	b.n	800b144 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b132:	f7fc fcb7 	bl	8007aa4 <HAL_GetTick>
 800b136:	0002      	movs	r2, r0
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	2b64      	cmp	r3, #100	@ 0x64
 800b13e:	d901      	bls.n	800b144 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800b140:	2303      	movs	r3, #3
 800b142:	e336      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b144:	4b85      	ldr	r3, [pc, #532]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	2380      	movs	r3, #128	@ 0x80
 800b14a:	029b      	lsls	r3, r3, #10
 800b14c:	4013      	ands	r3, r2
 800b14e:	d1f0      	bne.n	800b132 <HAL_RCC_OscConfig+0x112>
 800b150:	e000      	b.n	800b154 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b152:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2202      	movs	r2, #2
 800b15a:	4013      	ands	r3, r2
 800b15c:	d100      	bne.n	800b160 <HAL_RCC_OscConfig+0x140>
 800b15e:	e099      	b.n	800b294 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800b166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b168:	2220      	movs	r2, #32
 800b16a:	4013      	ands	r3, r2
 800b16c:	d009      	beq.n	800b182 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800b16e:	4b7b      	ldr	r3, [pc, #492]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	4b7a      	ldr	r3, [pc, #488]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b174:	2120      	movs	r1, #32
 800b176:	430a      	orrs	r2, r1
 800b178:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	2220      	movs	r2, #32
 800b17e:	4393      	bics	r3, r2
 800b180:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	2b04      	cmp	r3, #4
 800b186:	d005      	beq.n	800b194 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	2b0c      	cmp	r3, #12
 800b18c:	d13e      	bne.n	800b20c <HAL_RCC_OscConfig+0x1ec>
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d13b      	bne.n	800b20c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800b194:	4b71      	ldr	r3, [pc, #452]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2204      	movs	r2, #4
 800b19a:	4013      	ands	r3, r2
 800b19c:	d004      	beq.n	800b1a8 <HAL_RCC_OscConfig+0x188>
 800b19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e304      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1a8:	4b6c      	ldr	r3, [pc, #432]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	4a6e      	ldr	r2, [pc, #440]	@ (800b368 <HAL_RCC_OscConfig+0x348>)
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	0019      	movs	r1, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	021a      	lsls	r2, r3, #8
 800b1b8:	4b68      	ldr	r3, [pc, #416]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800b1be:	4b67      	ldr	r3, [pc, #412]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2209      	movs	r2, #9
 800b1c4:	4393      	bics	r3, r2
 800b1c6:	0019      	movs	r1, r3
 800b1c8:	4b64      	ldr	r3, [pc, #400]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b1ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b1d0:	f000 fc42 	bl	800ba58 <HAL_RCC_GetSysClockFreq>
 800b1d4:	0001      	movs	r1, r0
 800b1d6:	4b61      	ldr	r3, [pc, #388]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	091b      	lsrs	r3, r3, #4
 800b1dc:	220f      	movs	r2, #15
 800b1de:	4013      	ands	r3, r2
 800b1e0:	4a62      	ldr	r2, [pc, #392]	@ (800b36c <HAL_RCC_OscConfig+0x34c>)
 800b1e2:	5cd3      	ldrb	r3, [r2, r3]
 800b1e4:	000a      	movs	r2, r1
 800b1e6:	40da      	lsrs	r2, r3
 800b1e8:	4b61      	ldr	r3, [pc, #388]	@ (800b370 <HAL_RCC_OscConfig+0x350>)
 800b1ea:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800b1ec:	4b61      	ldr	r3, [pc, #388]	@ (800b374 <HAL_RCC_OscConfig+0x354>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2513      	movs	r5, #19
 800b1f2:	197c      	adds	r4, r7, r5
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f7fc fc0f 	bl	8007a18 <HAL_InitTick>
 800b1fa:	0003      	movs	r3, r0
 800b1fc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800b1fe:	197b      	adds	r3, r7, r5
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d046      	beq.n	800b294 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800b206:	197b      	adds	r3, r7, r5
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	e2d2      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d027      	beq.n	800b262 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800b212:	4b52      	ldr	r3, [pc, #328]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2209      	movs	r2, #9
 800b218:	4393      	bics	r3, r2
 800b21a:	0019      	movs	r1, r3
 800b21c:	4b4f      	ldr	r3, [pc, #316]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b220:	430a      	orrs	r2, r1
 800b222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b224:	f7fc fc3e 	bl	8007aa4 <HAL_GetTick>
 800b228:	0003      	movs	r3, r0
 800b22a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b22c:	e008      	b.n	800b240 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b22e:	f7fc fc39 	bl	8007aa4 <HAL_GetTick>
 800b232:	0002      	movs	r2, r0
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d901      	bls.n	800b240 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e2b8      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b240:	4b46      	ldr	r3, [pc, #280]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2204      	movs	r2, #4
 800b246:	4013      	ands	r3, r2
 800b248:	d0f1      	beq.n	800b22e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b24a:	4b44      	ldr	r3, [pc, #272]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	4a46      	ldr	r2, [pc, #280]	@ (800b368 <HAL_RCC_OscConfig+0x348>)
 800b250:	4013      	ands	r3, r2
 800b252:	0019      	movs	r1, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	021a      	lsls	r2, r3, #8
 800b25a:	4b40      	ldr	r3, [pc, #256]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b25c:	430a      	orrs	r2, r1
 800b25e:	605a      	str	r2, [r3, #4]
 800b260:	e018      	b.n	800b294 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b262:	4b3e      	ldr	r3, [pc, #248]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	4b3d      	ldr	r3, [pc, #244]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b268:	2101      	movs	r1, #1
 800b26a:	438a      	bics	r2, r1
 800b26c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b26e:	f7fc fc19 	bl	8007aa4 <HAL_GetTick>
 800b272:	0003      	movs	r3, r0
 800b274:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b276:	e008      	b.n	800b28a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b278:	f7fc fc14 	bl	8007aa4 <HAL_GetTick>
 800b27c:	0002      	movs	r2, r0
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	2b02      	cmp	r3, #2
 800b284:	d901      	bls.n	800b28a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800b286:	2303      	movs	r3, #3
 800b288:	e293      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b28a:	4b34      	ldr	r3, [pc, #208]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2204      	movs	r2, #4
 800b290:	4013      	ands	r3, r2
 800b292:	d1f1      	bne.n	800b278 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2210      	movs	r2, #16
 800b29a:	4013      	ands	r3, r2
 800b29c:	d100      	bne.n	800b2a0 <HAL_RCC_OscConfig+0x280>
 800b29e:	e0a2      	b.n	800b3e6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d140      	bne.n	800b328 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b2a6:	4b2d      	ldr	r3, [pc, #180]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	2380      	movs	r3, #128	@ 0x80
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	d005      	beq.n	800b2be <HAL_RCC_OscConfig+0x29e>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d101      	bne.n	800b2be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e279      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b2be:	4b27      	ldr	r3, [pc, #156]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	4a2d      	ldr	r2, [pc, #180]	@ (800b378 <HAL_RCC_OscConfig+0x358>)
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	0019      	movs	r1, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2cc:	4b23      	ldr	r3, [pc, #140]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b2ce:	430a      	orrs	r2, r1
 800b2d0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b2d2:	4b22      	ldr	r3, [pc, #136]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	021b      	lsls	r3, r3, #8
 800b2d8:	0a19      	lsrs	r1, r3, #8
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	061a      	lsls	r2, r3, #24
 800b2e0:	4b1e      	ldr	r3, [pc, #120]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ea:	0b5b      	lsrs	r3, r3, #13
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	2280      	movs	r2, #128	@ 0x80
 800b2f0:	0212      	lsls	r2, r2, #8
 800b2f2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800b2f4:	4b19      	ldr	r3, [pc, #100]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	091b      	lsrs	r3, r3, #4
 800b2fa:	210f      	movs	r1, #15
 800b2fc:	400b      	ands	r3, r1
 800b2fe:	491b      	ldr	r1, [pc, #108]	@ (800b36c <HAL_RCC_OscConfig+0x34c>)
 800b300:	5ccb      	ldrb	r3, [r1, r3]
 800b302:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800b304:	4b1a      	ldr	r3, [pc, #104]	@ (800b370 <HAL_RCC_OscConfig+0x350>)
 800b306:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800b308:	4b1a      	ldr	r3, [pc, #104]	@ (800b374 <HAL_RCC_OscConfig+0x354>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2513      	movs	r5, #19
 800b30e:	197c      	adds	r4, r7, r5
 800b310:	0018      	movs	r0, r3
 800b312:	f7fc fb81 	bl	8007a18 <HAL_InitTick>
 800b316:	0003      	movs	r3, r0
 800b318:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800b31a:	197b      	adds	r3, r7, r5
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d061      	beq.n	800b3e6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800b322:	197b      	adds	r3, r7, r5
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	e244      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	69db      	ldr	r3, [r3, #28]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d040      	beq.n	800b3b2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b330:	4b0a      	ldr	r3, [pc, #40]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	4b09      	ldr	r3, [pc, #36]	@ (800b35c <HAL_RCC_OscConfig+0x33c>)
 800b336:	2180      	movs	r1, #128	@ 0x80
 800b338:	0049      	lsls	r1, r1, #1
 800b33a:	430a      	orrs	r2, r1
 800b33c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b33e:	f7fc fbb1 	bl	8007aa4 <HAL_GetTick>
 800b342:	0003      	movs	r3, r0
 800b344:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b346:	e019      	b.n	800b37c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b348:	f7fc fbac 	bl	8007aa4 <HAL_GetTick>
 800b34c:	0002      	movs	r2, r0
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d912      	bls.n	800b37c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e22b      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
 800b35a:	46c0      	nop			@ (mov r8, r8)
 800b35c:	40021000 	.word	0x40021000
 800b360:	fffeffff 	.word	0xfffeffff
 800b364:	fffbffff 	.word	0xfffbffff
 800b368:	ffffe0ff 	.word	0xffffe0ff
 800b36c:	08011ab8 	.word	0x08011ab8
 800b370:	2000005c 	.word	0x2000005c
 800b374:	20000070 	.word	0x20000070
 800b378:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b37c:	4bca      	ldr	r3, [pc, #808]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	2380      	movs	r3, #128	@ 0x80
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4013      	ands	r3, r2
 800b386:	d0df      	beq.n	800b348 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b388:	4bc7      	ldr	r3, [pc, #796]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	4ac7      	ldr	r2, [pc, #796]	@ (800b6ac <HAL_RCC_OscConfig+0x68c>)
 800b38e:	4013      	ands	r3, r2
 800b390:	0019      	movs	r1, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b396:	4bc4      	ldr	r3, [pc, #784]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b398:	430a      	orrs	r2, r1
 800b39a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b39c:	4bc2      	ldr	r3, [pc, #776]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	021b      	lsls	r3, r3, #8
 800b3a2:	0a19      	lsrs	r1, r3, #8
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	061a      	lsls	r2, r3, #24
 800b3aa:	4bbf      	ldr	r3, [pc, #764]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	605a      	str	r2, [r3, #4]
 800b3b0:	e019      	b.n	800b3e6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b3b2:	4bbd      	ldr	r3, [pc, #756]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	4bbc      	ldr	r3, [pc, #752]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b3b8:	49bd      	ldr	r1, [pc, #756]	@ (800b6b0 <HAL_RCC_OscConfig+0x690>)
 800b3ba:	400a      	ands	r2, r1
 800b3bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3be:	f7fc fb71 	bl	8007aa4 <HAL_GetTick>
 800b3c2:	0003      	movs	r3, r0
 800b3c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800b3c6:	e008      	b.n	800b3da <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b3c8:	f7fc fb6c 	bl	8007aa4 <HAL_GetTick>
 800b3cc:	0002      	movs	r2, r0
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d901      	bls.n	800b3da <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	e1eb      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800b3da:	4bb3      	ldr	r3, [pc, #716]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	2380      	movs	r3, #128	@ 0x80
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	d1f0      	bne.n	800b3c8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2208      	movs	r2, #8
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	d036      	beq.n	800b45e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	695b      	ldr	r3, [r3, #20]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d019      	beq.n	800b42c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b3f8:	4bab      	ldr	r3, [pc, #684]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b3fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3fc:	4baa      	ldr	r3, [pc, #680]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b3fe:	2101      	movs	r1, #1
 800b400:	430a      	orrs	r2, r1
 800b402:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b404:	f7fc fb4e 	bl	8007aa4 <HAL_GetTick>
 800b408:	0003      	movs	r3, r0
 800b40a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b40c:	e008      	b.n	800b420 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b40e:	f7fc fb49 	bl	8007aa4 <HAL_GetTick>
 800b412:	0002      	movs	r2, r0
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d901      	bls.n	800b420 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e1c8      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b420:	4ba1      	ldr	r3, [pc, #644]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b424:	2202      	movs	r2, #2
 800b426:	4013      	ands	r3, r2
 800b428:	d0f1      	beq.n	800b40e <HAL_RCC_OscConfig+0x3ee>
 800b42a:	e018      	b.n	800b45e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b42c:	4b9e      	ldr	r3, [pc, #632]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b42e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b430:	4b9d      	ldr	r3, [pc, #628]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b432:	2101      	movs	r1, #1
 800b434:	438a      	bics	r2, r1
 800b436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b438:	f7fc fb34 	bl	8007aa4 <HAL_GetTick>
 800b43c:	0003      	movs	r3, r0
 800b43e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b440:	e008      	b.n	800b454 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b442:	f7fc fb2f 	bl	8007aa4 <HAL_GetTick>
 800b446:	0002      	movs	r2, r0
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d901      	bls.n	800b454 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e1ae      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b454:	4b94      	ldr	r3, [pc, #592]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b458:	2202      	movs	r2, #2
 800b45a:	4013      	ands	r3, r2
 800b45c:	d1f1      	bne.n	800b442 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2204      	movs	r2, #4
 800b464:	4013      	ands	r3, r2
 800b466:	d100      	bne.n	800b46a <HAL_RCC_OscConfig+0x44a>
 800b468:	e0ae      	b.n	800b5c8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b46a:	2023      	movs	r0, #35	@ 0x23
 800b46c:	183b      	adds	r3, r7, r0
 800b46e:	2200      	movs	r2, #0
 800b470:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b472:	4b8d      	ldr	r3, [pc, #564]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b476:	2380      	movs	r3, #128	@ 0x80
 800b478:	055b      	lsls	r3, r3, #21
 800b47a:	4013      	ands	r3, r2
 800b47c:	d109      	bne.n	800b492 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b47e:	4b8a      	ldr	r3, [pc, #552]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b480:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b482:	4b89      	ldr	r3, [pc, #548]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b484:	2180      	movs	r1, #128	@ 0x80
 800b486:	0549      	lsls	r1, r1, #21
 800b488:	430a      	orrs	r2, r1
 800b48a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800b48c:	183b      	adds	r3, r7, r0
 800b48e:	2201      	movs	r2, #1
 800b490:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b492:	4b88      	ldr	r3, [pc, #544]	@ (800b6b4 <HAL_RCC_OscConfig+0x694>)
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	2380      	movs	r3, #128	@ 0x80
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	4013      	ands	r3, r2
 800b49c:	d11a      	bne.n	800b4d4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b49e:	4b85      	ldr	r3, [pc, #532]	@ (800b6b4 <HAL_RCC_OscConfig+0x694>)
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	4b84      	ldr	r3, [pc, #528]	@ (800b6b4 <HAL_RCC_OscConfig+0x694>)
 800b4a4:	2180      	movs	r1, #128	@ 0x80
 800b4a6:	0049      	lsls	r1, r1, #1
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b4ac:	f7fc fafa 	bl	8007aa4 <HAL_GetTick>
 800b4b0:	0003      	movs	r3, r0
 800b4b2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4b4:	e008      	b.n	800b4c8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4b6:	f7fc faf5 	bl	8007aa4 <HAL_GetTick>
 800b4ba:	0002      	movs	r2, r0
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	2b64      	cmp	r3, #100	@ 0x64
 800b4c2:	d901      	bls.n	800b4c8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e174      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4c8:	4b7a      	ldr	r3, [pc, #488]	@ (800b6b4 <HAL_RCC_OscConfig+0x694>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	2380      	movs	r3, #128	@ 0x80
 800b4ce:	005b      	lsls	r3, r3, #1
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	d0f0      	beq.n	800b4b6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689a      	ldr	r2, [r3, #8]
 800b4d8:	2380      	movs	r3, #128	@ 0x80
 800b4da:	005b      	lsls	r3, r3, #1
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d107      	bne.n	800b4f0 <HAL_RCC_OscConfig+0x4d0>
 800b4e0:	4b71      	ldr	r3, [pc, #452]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b4e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4e4:	4b70      	ldr	r3, [pc, #448]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b4e6:	2180      	movs	r1, #128	@ 0x80
 800b4e8:	0049      	lsls	r1, r1, #1
 800b4ea:	430a      	orrs	r2, r1
 800b4ec:	651a      	str	r2, [r3, #80]	@ 0x50
 800b4ee:	e031      	b.n	800b554 <HAL_RCC_OscConfig+0x534>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10c      	bne.n	800b512 <HAL_RCC_OscConfig+0x4f2>
 800b4f8:	4b6b      	ldr	r3, [pc, #428]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b4fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4fc:	4b6a      	ldr	r3, [pc, #424]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b4fe:	496c      	ldr	r1, [pc, #432]	@ (800b6b0 <HAL_RCC_OscConfig+0x690>)
 800b500:	400a      	ands	r2, r1
 800b502:	651a      	str	r2, [r3, #80]	@ 0x50
 800b504:	4b68      	ldr	r3, [pc, #416]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b508:	4b67      	ldr	r3, [pc, #412]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b50a:	496b      	ldr	r1, [pc, #428]	@ (800b6b8 <HAL_RCC_OscConfig+0x698>)
 800b50c:	400a      	ands	r2, r1
 800b50e:	651a      	str	r2, [r3, #80]	@ 0x50
 800b510:	e020      	b.n	800b554 <HAL_RCC_OscConfig+0x534>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689a      	ldr	r2, [r3, #8]
 800b516:	23a0      	movs	r3, #160	@ 0xa0
 800b518:	00db      	lsls	r3, r3, #3
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d10e      	bne.n	800b53c <HAL_RCC_OscConfig+0x51c>
 800b51e:	4b62      	ldr	r3, [pc, #392]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b522:	4b61      	ldr	r3, [pc, #388]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b524:	2180      	movs	r1, #128	@ 0x80
 800b526:	00c9      	lsls	r1, r1, #3
 800b528:	430a      	orrs	r2, r1
 800b52a:	651a      	str	r2, [r3, #80]	@ 0x50
 800b52c:	4b5e      	ldr	r3, [pc, #376]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b52e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b530:	4b5d      	ldr	r3, [pc, #372]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b532:	2180      	movs	r1, #128	@ 0x80
 800b534:	0049      	lsls	r1, r1, #1
 800b536:	430a      	orrs	r2, r1
 800b538:	651a      	str	r2, [r3, #80]	@ 0x50
 800b53a:	e00b      	b.n	800b554 <HAL_RCC_OscConfig+0x534>
 800b53c:	4b5a      	ldr	r3, [pc, #360]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b53e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b540:	4b59      	ldr	r3, [pc, #356]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b542:	495b      	ldr	r1, [pc, #364]	@ (800b6b0 <HAL_RCC_OscConfig+0x690>)
 800b544:	400a      	ands	r2, r1
 800b546:	651a      	str	r2, [r3, #80]	@ 0x50
 800b548:	4b57      	ldr	r3, [pc, #348]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b54a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b54c:	4b56      	ldr	r3, [pc, #344]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b54e:	495a      	ldr	r1, [pc, #360]	@ (800b6b8 <HAL_RCC_OscConfig+0x698>)
 800b550:	400a      	ands	r2, r1
 800b552:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d015      	beq.n	800b588 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b55c:	f7fc faa2 	bl	8007aa4 <HAL_GetTick>
 800b560:	0003      	movs	r3, r0
 800b562:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b564:	e009      	b.n	800b57a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b566:	f7fc fa9d 	bl	8007aa4 <HAL_GetTick>
 800b56a:	0002      	movs	r2, r0
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	4a52      	ldr	r2, [pc, #328]	@ (800b6bc <HAL_RCC_OscConfig+0x69c>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d901      	bls.n	800b57a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e11b      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b57a:	4b4b      	ldr	r3, [pc, #300]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b57c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b57e:	2380      	movs	r3, #128	@ 0x80
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4013      	ands	r3, r2
 800b584:	d0ef      	beq.n	800b566 <HAL_RCC_OscConfig+0x546>
 800b586:	e014      	b.n	800b5b2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b588:	f7fc fa8c 	bl	8007aa4 <HAL_GetTick>
 800b58c:	0003      	movs	r3, r0
 800b58e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b590:	e009      	b.n	800b5a6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b592:	f7fc fa87 	bl	8007aa4 <HAL_GetTick>
 800b596:	0002      	movs	r2, r0
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	4a47      	ldr	r2, [pc, #284]	@ (800b6bc <HAL_RCC_OscConfig+0x69c>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d901      	bls.n	800b5a6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e105      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b5a6:	4b40      	ldr	r3, [pc, #256]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b5a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5aa:	2380      	movs	r3, #128	@ 0x80
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	d1ef      	bne.n	800b592 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b5b2:	2323      	movs	r3, #35	@ 0x23
 800b5b4:	18fb      	adds	r3, r7, r3
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d105      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5bc:	4b3a      	ldr	r3, [pc, #232]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b5be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5c0:	4b39      	ldr	r3, [pc, #228]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b5c2:	493f      	ldr	r1, [pc, #252]	@ (800b6c0 <HAL_RCC_OscConfig+0x6a0>)
 800b5c4:	400a      	ands	r2, r1
 800b5c6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	d049      	beq.n	800b666 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d026      	beq.n	800b628 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800b5da:	4b33      	ldr	r3, [pc, #204]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b5dc:	689a      	ldr	r2, [r3, #8]
 800b5de:	4b32      	ldr	r3, [pc, #200]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	430a      	orrs	r2, r1
 800b5e4:	609a      	str	r2, [r3, #8]
 800b5e6:	4b30      	ldr	r3, [pc, #192]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b5e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	635a      	str	r2, [r3, #52]	@ 0x34
 800b5f2:	4b34      	ldr	r3, [pc, #208]	@ (800b6c4 <HAL_RCC_OscConfig+0x6a4>)
 800b5f4:	6a1a      	ldr	r2, [r3, #32]
 800b5f6:	4b33      	ldr	r3, [pc, #204]	@ (800b6c4 <HAL_RCC_OscConfig+0x6a4>)
 800b5f8:	2180      	movs	r1, #128	@ 0x80
 800b5fa:	0189      	lsls	r1, r1, #6
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b600:	f7fc fa50 	bl	8007aa4 <HAL_GetTick>
 800b604:	0003      	movs	r3, r0
 800b606:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b608:	e008      	b.n	800b61c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b60a:	f7fc fa4b 	bl	8007aa4 <HAL_GetTick>
 800b60e:	0002      	movs	r2, r0
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	2b02      	cmp	r3, #2
 800b616:	d901      	bls.n	800b61c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800b618:	2303      	movs	r3, #3
 800b61a:	e0ca      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b61c:	4b22      	ldr	r3, [pc, #136]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	2202      	movs	r2, #2
 800b622:	4013      	ands	r3, r2
 800b624:	d0f1      	beq.n	800b60a <HAL_RCC_OscConfig+0x5ea>
 800b626:	e01e      	b.n	800b666 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800b628:	4b1f      	ldr	r3, [pc, #124]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b62a:	689a      	ldr	r2, [r3, #8]
 800b62c:	4b1e      	ldr	r3, [pc, #120]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b62e:	2101      	movs	r1, #1
 800b630:	438a      	bics	r2, r1
 800b632:	609a      	str	r2, [r3, #8]
 800b634:	4b23      	ldr	r3, [pc, #140]	@ (800b6c4 <HAL_RCC_OscConfig+0x6a4>)
 800b636:	6a1a      	ldr	r2, [r3, #32]
 800b638:	4b22      	ldr	r3, [pc, #136]	@ (800b6c4 <HAL_RCC_OscConfig+0x6a4>)
 800b63a:	4923      	ldr	r1, [pc, #140]	@ (800b6c8 <HAL_RCC_OscConfig+0x6a8>)
 800b63c:	400a      	ands	r2, r1
 800b63e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b640:	f7fc fa30 	bl	8007aa4 <HAL_GetTick>
 800b644:	0003      	movs	r3, r0
 800b646:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b648:	e008      	b.n	800b65c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b64a:	f7fc fa2b 	bl	8007aa4 <HAL_GetTick>
 800b64e:	0002      	movs	r2, r0
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	2b02      	cmp	r3, #2
 800b656:	d901      	bls.n	800b65c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800b658:	2303      	movs	r3, #3
 800b65a:	e0aa      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b65c:	4b12      	ldr	r3, [pc, #72]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	2202      	movs	r2, #2
 800b662:	4013      	ands	r3, r2
 800b664:	d1f1      	bne.n	800b64a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d100      	bne.n	800b670 <HAL_RCC_OscConfig+0x650>
 800b66e:	e09f      	b.n	800b7b0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	2b0c      	cmp	r3, #12
 800b674:	d100      	bne.n	800b678 <HAL_RCC_OscConfig+0x658>
 800b676:	e078      	b.n	800b76a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d159      	bne.n	800b734 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b680:	4b09      	ldr	r3, [pc, #36]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	4b08      	ldr	r3, [pc, #32]	@ (800b6a8 <HAL_RCC_OscConfig+0x688>)
 800b686:	4911      	ldr	r1, [pc, #68]	@ (800b6cc <HAL_RCC_OscConfig+0x6ac>)
 800b688:	400a      	ands	r2, r1
 800b68a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b68c:	f7fc fa0a 	bl	8007aa4 <HAL_GetTick>
 800b690:	0003      	movs	r3, r0
 800b692:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b694:	e01c      	b.n	800b6d0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b696:	f7fc fa05 	bl	8007aa4 <HAL_GetTick>
 800b69a:	0002      	movs	r2, r0
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d915      	bls.n	800b6d0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e084      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
 800b6a8:	40021000 	.word	0x40021000
 800b6ac:	ffff1fff 	.word	0xffff1fff
 800b6b0:	fffffeff 	.word	0xfffffeff
 800b6b4:	40007000 	.word	0x40007000
 800b6b8:	fffffbff 	.word	0xfffffbff
 800b6bc:	00001388 	.word	0x00001388
 800b6c0:	efffffff 	.word	0xefffffff
 800b6c4:	40010000 	.word	0x40010000
 800b6c8:	ffffdfff 	.word	0xffffdfff
 800b6cc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b6d0:	4b3a      	ldr	r3, [pc, #232]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	2380      	movs	r3, #128	@ 0x80
 800b6d6:	049b      	lsls	r3, r3, #18
 800b6d8:	4013      	ands	r3, r2
 800b6da:	d1dc      	bne.n	800b696 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b6dc:	4b37      	ldr	r3, [pc, #220]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	4a37      	ldr	r2, [pc, #220]	@ (800b7c0 <HAL_RCC_OscConfig+0x7a0>)
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	0019      	movs	r1, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6f4:	431a      	orrs	r2, r3
 800b6f6:	4b31      	ldr	r3, [pc, #196]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b6f8:	430a      	orrs	r2, r1
 800b6fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	4b2e      	ldr	r3, [pc, #184]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b702:	2180      	movs	r1, #128	@ 0x80
 800b704:	0449      	lsls	r1, r1, #17
 800b706:	430a      	orrs	r2, r1
 800b708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b70a:	f7fc f9cb 	bl	8007aa4 <HAL_GetTick>
 800b70e:	0003      	movs	r3, r0
 800b710:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800b712:	e008      	b.n	800b726 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b714:	f7fc f9c6 	bl	8007aa4 <HAL_GetTick>
 800b718:	0002      	movs	r2, r0
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d901      	bls.n	800b726 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800b722:	2303      	movs	r3, #3
 800b724:	e045      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800b726:	4b25      	ldr	r3, [pc, #148]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	2380      	movs	r3, #128	@ 0x80
 800b72c:	049b      	lsls	r3, r3, #18
 800b72e:	4013      	ands	r3, r2
 800b730:	d0f0      	beq.n	800b714 <HAL_RCC_OscConfig+0x6f4>
 800b732:	e03d      	b.n	800b7b0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b734:	4b21      	ldr	r3, [pc, #132]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	4b20      	ldr	r3, [pc, #128]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b73a:	4922      	ldr	r1, [pc, #136]	@ (800b7c4 <HAL_RCC_OscConfig+0x7a4>)
 800b73c:	400a      	ands	r2, r1
 800b73e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b740:	f7fc f9b0 	bl	8007aa4 <HAL_GetTick>
 800b744:	0003      	movs	r3, r0
 800b746:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b748:	e008      	b.n	800b75c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b74a:	f7fc f9ab 	bl	8007aa4 <HAL_GetTick>
 800b74e:	0002      	movs	r2, r0
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	2b02      	cmp	r3, #2
 800b756:	d901      	bls.n	800b75c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e02a      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b75c:	4b17      	ldr	r3, [pc, #92]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	2380      	movs	r3, #128	@ 0x80
 800b762:	049b      	lsls	r3, r3, #18
 800b764:	4013      	ands	r3, r2
 800b766:	d1f0      	bne.n	800b74a <HAL_RCC_OscConfig+0x72a>
 800b768:	e022      	b.n	800b7b0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d101      	bne.n	800b776 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e01d      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b776:	4b11      	ldr	r3, [pc, #68]	@ (800b7bc <HAL_RCC_OscConfig+0x79c>)
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b77c:	69ba      	ldr	r2, [r7, #24]
 800b77e:	2380      	movs	r3, #128	@ 0x80
 800b780:	025b      	lsls	r3, r3, #9
 800b782:	401a      	ands	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b788:	429a      	cmp	r2, r3
 800b78a:	d10f      	bne.n	800b7ac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b78c:	69ba      	ldr	r2, [r7, #24]
 800b78e:	23f0      	movs	r3, #240	@ 0xf0
 800b790:	039b      	lsls	r3, r3, #14
 800b792:	401a      	ands	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b798:	429a      	cmp	r2, r3
 800b79a:	d107      	bne.n	800b7ac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800b79c:	69ba      	ldr	r2, [r7, #24]
 800b79e:	23c0      	movs	r3, #192	@ 0xc0
 800b7a0:	041b      	lsls	r3, r3, #16
 800b7a2:	401a      	ands	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d001      	beq.n	800b7b0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e000      	b.n	800b7b2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	0018      	movs	r0, r3
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	b00a      	add	sp, #40	@ 0x28
 800b7b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b7ba:	46c0      	nop			@ (mov r8, r8)
 800b7bc:	40021000 	.word	0x40021000
 800b7c0:	ff02ffff 	.word	0xff02ffff
 800b7c4:	feffffff 	.word	0xfeffffff

0800b7c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7c8:	b5b0      	push	{r4, r5, r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e128      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b7dc:	4b96      	ldr	r3, [pc, #600]	@ (800ba38 <HAL_RCC_ClockConfig+0x270>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d91e      	bls.n	800b828 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7ea:	4b93      	ldr	r3, [pc, #588]	@ (800ba38 <HAL_RCC_ClockConfig+0x270>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	4393      	bics	r3, r2
 800b7f2:	0019      	movs	r1, r3
 800b7f4:	4b90      	ldr	r3, [pc, #576]	@ (800ba38 <HAL_RCC_ClockConfig+0x270>)
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	430a      	orrs	r2, r1
 800b7fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b7fc:	f7fc f952 	bl	8007aa4 <HAL_GetTick>
 800b800:	0003      	movs	r3, r0
 800b802:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b804:	e009      	b.n	800b81a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b806:	f7fc f94d 	bl	8007aa4 <HAL_GetTick>
 800b80a:	0002      	movs	r2, r0
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	4a8a      	ldr	r2, [pc, #552]	@ (800ba3c <HAL_RCC_ClockConfig+0x274>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d901      	bls.n	800b81a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e109      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b81a:	4b87      	ldr	r3, [pc, #540]	@ (800ba38 <HAL_RCC_ClockConfig+0x270>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2201      	movs	r2, #1
 800b820:	4013      	ands	r3, r2
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	429a      	cmp	r2, r3
 800b826:	d1ee      	bne.n	800b806 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2202      	movs	r2, #2
 800b82e:	4013      	ands	r3, r2
 800b830:	d009      	beq.n	800b846 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b832:	4b83      	ldr	r3, [pc, #524]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	22f0      	movs	r2, #240	@ 0xf0
 800b838:	4393      	bics	r3, r2
 800b83a:	0019      	movs	r1, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	4b7f      	ldr	r3, [pc, #508]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b842:	430a      	orrs	r2, r1
 800b844:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2201      	movs	r2, #1
 800b84c:	4013      	ands	r3, r2
 800b84e:	d100      	bne.n	800b852 <HAL_RCC_ClockConfig+0x8a>
 800b850:	e089      	b.n	800b966 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	2b02      	cmp	r3, #2
 800b858:	d107      	bne.n	800b86a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b85a:	4b79      	ldr	r3, [pc, #484]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	2380      	movs	r3, #128	@ 0x80
 800b860:	029b      	lsls	r3, r3, #10
 800b862:	4013      	ands	r3, r2
 800b864:	d120      	bne.n	800b8a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e0e1      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d107      	bne.n	800b882 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b872:	4b73      	ldr	r3, [pc, #460]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	2380      	movs	r3, #128	@ 0x80
 800b878:	049b      	lsls	r3, r3, #18
 800b87a:	4013      	ands	r3, r2
 800b87c:	d114      	bne.n	800b8a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e0d5      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d106      	bne.n	800b898 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b88a:	4b6d      	ldr	r3, [pc, #436]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2204      	movs	r2, #4
 800b890:	4013      	ands	r3, r2
 800b892:	d109      	bne.n	800b8a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	e0ca      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b898:	4b69      	ldr	r3, [pc, #420]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	2380      	movs	r3, #128	@ 0x80
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	d101      	bne.n	800b8a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e0c2      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b8a8:	4b65      	ldr	r3, [pc, #404]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	4393      	bics	r3, r2
 800b8b0:	0019      	movs	r1, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	4b62      	ldr	r3, [pc, #392]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b8b8:	430a      	orrs	r2, r1
 800b8ba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b8bc:	f7fc f8f2 	bl	8007aa4 <HAL_GetTick>
 800b8c0:	0003      	movs	r3, r0
 800b8c2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d111      	bne.n	800b8f0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b8cc:	e009      	b.n	800b8e2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8ce:	f7fc f8e9 	bl	8007aa4 <HAL_GetTick>
 800b8d2:	0002      	movs	r2, r0
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	4a58      	ldr	r2, [pc, #352]	@ (800ba3c <HAL_RCC_ClockConfig+0x274>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d901      	bls.n	800b8e2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e0a5      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b8e2:	4b57      	ldr	r3, [pc, #348]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	220c      	movs	r2, #12
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	2b08      	cmp	r3, #8
 800b8ec:	d1ef      	bne.n	800b8ce <HAL_RCC_ClockConfig+0x106>
 800b8ee:	e03a      	b.n	800b966 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	2b03      	cmp	r3, #3
 800b8f6:	d111      	bne.n	800b91c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b8f8:	e009      	b.n	800b90e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8fa:	f7fc f8d3 	bl	8007aa4 <HAL_GetTick>
 800b8fe:	0002      	movs	r2, r0
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	4a4d      	ldr	r2, [pc, #308]	@ (800ba3c <HAL_RCC_ClockConfig+0x274>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d901      	bls.n	800b90e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800b90a:	2303      	movs	r3, #3
 800b90c:	e08f      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b90e:	4b4c      	ldr	r3, [pc, #304]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	220c      	movs	r2, #12
 800b914:	4013      	ands	r3, r2
 800b916:	2b0c      	cmp	r3, #12
 800b918:	d1ef      	bne.n	800b8fa <HAL_RCC_ClockConfig+0x132>
 800b91a:	e024      	b.n	800b966 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d11b      	bne.n	800b95c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b924:	e009      	b.n	800b93a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b926:	f7fc f8bd 	bl	8007aa4 <HAL_GetTick>
 800b92a:	0002      	movs	r2, r0
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	4a42      	ldr	r2, [pc, #264]	@ (800ba3c <HAL_RCC_ClockConfig+0x274>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d901      	bls.n	800b93a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800b936:	2303      	movs	r3, #3
 800b938:	e079      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b93a:	4b41      	ldr	r3, [pc, #260]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	220c      	movs	r2, #12
 800b940:	4013      	ands	r3, r2
 800b942:	2b04      	cmp	r3, #4
 800b944:	d1ef      	bne.n	800b926 <HAL_RCC_ClockConfig+0x15e>
 800b946:	e00e      	b.n	800b966 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b948:	f7fc f8ac 	bl	8007aa4 <HAL_GetTick>
 800b94c:	0002      	movs	r2, r0
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	4a3a      	ldr	r2, [pc, #232]	@ (800ba3c <HAL_RCC_ClockConfig+0x274>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d901      	bls.n	800b95c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e068      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b95c:	4b38      	ldr	r3, [pc, #224]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	220c      	movs	r2, #12
 800b962:	4013      	ands	r3, r2
 800b964:	d1f0      	bne.n	800b948 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b966:	4b34      	ldr	r3, [pc, #208]	@ (800ba38 <HAL_RCC_ClockConfig+0x270>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2201      	movs	r2, #1
 800b96c:	4013      	ands	r3, r2
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	429a      	cmp	r2, r3
 800b972:	d21e      	bcs.n	800b9b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b974:	4b30      	ldr	r3, [pc, #192]	@ (800ba38 <HAL_RCC_ClockConfig+0x270>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2201      	movs	r2, #1
 800b97a:	4393      	bics	r3, r2
 800b97c:	0019      	movs	r1, r3
 800b97e:	4b2e      	ldr	r3, [pc, #184]	@ (800ba38 <HAL_RCC_ClockConfig+0x270>)
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b986:	f7fc f88d 	bl	8007aa4 <HAL_GetTick>
 800b98a:	0003      	movs	r3, r0
 800b98c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b98e:	e009      	b.n	800b9a4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b990:	f7fc f888 	bl	8007aa4 <HAL_GetTick>
 800b994:	0002      	movs	r2, r0
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	4a28      	ldr	r2, [pc, #160]	@ (800ba3c <HAL_RCC_ClockConfig+0x274>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d901      	bls.n	800b9a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e044      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9a4:	4b24      	ldr	r3, [pc, #144]	@ (800ba38 <HAL_RCC_ClockConfig+0x270>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d1ee      	bne.n	800b990 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2204      	movs	r2, #4
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	d009      	beq.n	800b9d0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9bc:	4b20      	ldr	r3, [pc, #128]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	4a20      	ldr	r2, [pc, #128]	@ (800ba44 <HAL_RCC_ClockConfig+0x27c>)
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	0019      	movs	r1, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68da      	ldr	r2, [r3, #12]
 800b9ca:	4b1d      	ldr	r3, [pc, #116]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b9cc:	430a      	orrs	r2, r1
 800b9ce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2208      	movs	r2, #8
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	d00a      	beq.n	800b9f0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b9da:	4b19      	ldr	r3, [pc, #100]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	4a1a      	ldr	r2, [pc, #104]	@ (800ba48 <HAL_RCC_ClockConfig+0x280>)
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	0019      	movs	r1, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	00da      	lsls	r2, r3, #3
 800b9ea:	4b15      	ldr	r3, [pc, #84]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b9ec:	430a      	orrs	r2, r1
 800b9ee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b9f0:	f000 f832 	bl	800ba58 <HAL_RCC_GetSysClockFreq>
 800b9f4:	0001      	movs	r1, r0
 800b9f6:	4b12      	ldr	r3, [pc, #72]	@ (800ba40 <HAL_RCC_ClockConfig+0x278>)
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	091b      	lsrs	r3, r3, #4
 800b9fc:	220f      	movs	r2, #15
 800b9fe:	4013      	ands	r3, r2
 800ba00:	4a12      	ldr	r2, [pc, #72]	@ (800ba4c <HAL_RCC_ClockConfig+0x284>)
 800ba02:	5cd3      	ldrb	r3, [r2, r3]
 800ba04:	000a      	movs	r2, r1
 800ba06:	40da      	lsrs	r2, r3
 800ba08:	4b11      	ldr	r3, [pc, #68]	@ (800ba50 <HAL_RCC_ClockConfig+0x288>)
 800ba0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ba0c:	4b11      	ldr	r3, [pc, #68]	@ (800ba54 <HAL_RCC_ClockConfig+0x28c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	250b      	movs	r5, #11
 800ba12:	197c      	adds	r4, r7, r5
 800ba14:	0018      	movs	r0, r3
 800ba16:	f7fb ffff 	bl	8007a18 <HAL_InitTick>
 800ba1a:	0003      	movs	r3, r0
 800ba1c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800ba1e:	197b      	adds	r3, r7, r5
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800ba26:	197b      	adds	r3, r7, r5
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	e000      	b.n	800ba2e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	0018      	movs	r0, r3
 800ba30:	46bd      	mov	sp, r7
 800ba32:	b004      	add	sp, #16
 800ba34:	bdb0      	pop	{r4, r5, r7, pc}
 800ba36:	46c0      	nop			@ (mov r8, r8)
 800ba38:	40022000 	.word	0x40022000
 800ba3c:	00001388 	.word	0x00001388
 800ba40:	40021000 	.word	0x40021000
 800ba44:	fffff8ff 	.word	0xfffff8ff
 800ba48:	ffffc7ff 	.word	0xffffc7ff
 800ba4c:	08011ab8 	.word	0x08011ab8
 800ba50:	2000005c 	.word	0x2000005c
 800ba54:	20000070 	.word	0x20000070

0800ba58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba58:	b5b0      	push	{r4, r5, r7, lr}
 800ba5a:	b08e      	sub	sp, #56	@ 0x38
 800ba5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800ba5e:	4b4c      	ldr	r3, [pc, #304]	@ (800bb90 <HAL_RCC_GetSysClockFreq+0x138>)
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ba64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba66:	230c      	movs	r3, #12
 800ba68:	4013      	ands	r3, r2
 800ba6a:	2b0c      	cmp	r3, #12
 800ba6c:	d014      	beq.n	800ba98 <HAL_RCC_GetSysClockFreq+0x40>
 800ba6e:	d900      	bls.n	800ba72 <HAL_RCC_GetSysClockFreq+0x1a>
 800ba70:	e07b      	b.n	800bb6a <HAL_RCC_GetSysClockFreq+0x112>
 800ba72:	2b04      	cmp	r3, #4
 800ba74:	d002      	beq.n	800ba7c <HAL_RCC_GetSysClockFreq+0x24>
 800ba76:	2b08      	cmp	r3, #8
 800ba78:	d00b      	beq.n	800ba92 <HAL_RCC_GetSysClockFreq+0x3a>
 800ba7a:	e076      	b.n	800bb6a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800ba7c:	4b44      	ldr	r3, [pc, #272]	@ (800bb90 <HAL_RCC_GetSysClockFreq+0x138>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2210      	movs	r2, #16
 800ba82:	4013      	ands	r3, r2
 800ba84:	d002      	beq.n	800ba8c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800ba86:	4b43      	ldr	r3, [pc, #268]	@ (800bb94 <HAL_RCC_GetSysClockFreq+0x13c>)
 800ba88:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800ba8a:	e07c      	b.n	800bb86 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800ba8c:	4b42      	ldr	r3, [pc, #264]	@ (800bb98 <HAL_RCC_GetSysClockFreq+0x140>)
 800ba8e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ba90:	e079      	b.n	800bb86 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ba92:	4b42      	ldr	r3, [pc, #264]	@ (800bb9c <HAL_RCC_GetSysClockFreq+0x144>)
 800ba94:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ba96:	e076      	b.n	800bb86 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800ba98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9a:	0c9a      	lsrs	r2, r3, #18
 800ba9c:	230f      	movs	r3, #15
 800ba9e:	401a      	ands	r2, r3
 800baa0:	4b3f      	ldr	r3, [pc, #252]	@ (800bba0 <HAL_RCC_GetSysClockFreq+0x148>)
 800baa2:	5c9b      	ldrb	r3, [r3, r2]
 800baa4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800baa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa8:	0d9a      	lsrs	r2, r3, #22
 800baaa:	2303      	movs	r3, #3
 800baac:	4013      	ands	r3, r2
 800baae:	3301      	adds	r3, #1
 800bab0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bab2:	4b37      	ldr	r3, [pc, #220]	@ (800bb90 <HAL_RCC_GetSysClockFreq+0x138>)
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	2380      	movs	r3, #128	@ 0x80
 800bab8:	025b      	lsls	r3, r3, #9
 800baba:	4013      	ands	r3, r2
 800babc:	d01a      	beq.n	800baf4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800babe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac0:	61bb      	str	r3, [r7, #24]
 800bac2:	2300      	movs	r3, #0
 800bac4:	61fb      	str	r3, [r7, #28]
 800bac6:	4a35      	ldr	r2, [pc, #212]	@ (800bb9c <HAL_RCC_GetSysClockFreq+0x144>)
 800bac8:	2300      	movs	r3, #0
 800baca:	69b8      	ldr	r0, [r7, #24]
 800bacc:	69f9      	ldr	r1, [r7, #28]
 800bace:	f7f4 fd45 	bl	800055c <__aeabi_lmul>
 800bad2:	0002      	movs	r2, r0
 800bad4:	000b      	movs	r3, r1
 800bad6:	0010      	movs	r0, r2
 800bad8:	0019      	movs	r1, r3
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	613b      	str	r3, [r7, #16]
 800bade:	2300      	movs	r3, #0
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f7f4 fd19 	bl	800051c <__aeabi_uldivmod>
 800baea:	0002      	movs	r2, r0
 800baec:	000b      	movs	r3, r1
 800baee:	0013      	movs	r3, r2
 800baf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800baf2:	e037      	b.n	800bb64 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800baf4:	4b26      	ldr	r3, [pc, #152]	@ (800bb90 <HAL_RCC_GetSysClockFreq+0x138>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2210      	movs	r2, #16
 800bafa:	4013      	ands	r3, r2
 800bafc:	d01a      	beq.n	800bb34 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800bafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb00:	60bb      	str	r3, [r7, #8]
 800bb02:	2300      	movs	r3, #0
 800bb04:	60fb      	str	r3, [r7, #12]
 800bb06:	4a23      	ldr	r2, [pc, #140]	@ (800bb94 <HAL_RCC_GetSysClockFreq+0x13c>)
 800bb08:	2300      	movs	r3, #0
 800bb0a:	68b8      	ldr	r0, [r7, #8]
 800bb0c:	68f9      	ldr	r1, [r7, #12]
 800bb0e:	f7f4 fd25 	bl	800055c <__aeabi_lmul>
 800bb12:	0002      	movs	r2, r0
 800bb14:	000b      	movs	r3, r1
 800bb16:	0010      	movs	r0, r2
 800bb18:	0019      	movs	r1, r3
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	607b      	str	r3, [r7, #4]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f7f4 fcf9 	bl	800051c <__aeabi_uldivmod>
 800bb2a:	0002      	movs	r2, r0
 800bb2c:	000b      	movs	r3, r1
 800bb2e:	0013      	movs	r3, r2
 800bb30:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb32:	e017      	b.n	800bb64 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800bb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb36:	0018      	movs	r0, r3
 800bb38:	2300      	movs	r3, #0
 800bb3a:	0019      	movs	r1, r3
 800bb3c:	4a16      	ldr	r2, [pc, #88]	@ (800bb98 <HAL_RCC_GetSysClockFreq+0x140>)
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f7f4 fd0c 	bl	800055c <__aeabi_lmul>
 800bb44:	0002      	movs	r2, r0
 800bb46:	000b      	movs	r3, r1
 800bb48:	0010      	movs	r0, r2
 800bb4a:	0019      	movs	r1, r3
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4e:	001c      	movs	r4, r3
 800bb50:	2300      	movs	r3, #0
 800bb52:	001d      	movs	r5, r3
 800bb54:	0022      	movs	r2, r4
 800bb56:	002b      	movs	r3, r5
 800bb58:	f7f4 fce0 	bl	800051c <__aeabi_uldivmod>
 800bb5c:	0002      	movs	r2, r0
 800bb5e:	000b      	movs	r3, r1
 800bb60:	0013      	movs	r3, r2
 800bb62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800bb64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb66:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800bb68:	e00d      	b.n	800bb86 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800bb6a:	4b09      	ldr	r3, [pc, #36]	@ (800bb90 <HAL_RCC_GetSysClockFreq+0x138>)
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	0b5b      	lsrs	r3, r3, #13
 800bb70:	2207      	movs	r2, #7
 800bb72:	4013      	ands	r3, r2
 800bb74:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	2280      	movs	r2, #128	@ 0x80
 800bb7c:	0212      	lsls	r2, r2, #8
 800bb7e:	409a      	lsls	r2, r3
 800bb80:	0013      	movs	r3, r2
 800bb82:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800bb84:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800bb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800bb88:	0018      	movs	r0, r3
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	b00e      	add	sp, #56	@ 0x38
 800bb8e:	bdb0      	pop	{r4, r5, r7, pc}
 800bb90:	40021000 	.word	0x40021000
 800bb94:	003d0900 	.word	0x003d0900
 800bb98:	00f42400 	.word	0x00f42400
 800bb9c:	007a1200 	.word	0x007a1200
 800bba0:	08011ad0 	.word	0x08011ad0

0800bba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bba8:	4b02      	ldr	r3, [pc, #8]	@ (800bbb4 <HAL_RCC_GetHCLKFreq+0x10>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
}
 800bbac:	0018      	movs	r0, r3
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	46c0      	nop			@ (mov r8, r8)
 800bbb4:	2000005c 	.word	0x2000005c

0800bbb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bbbc:	f7ff fff2 	bl	800bba4 <HAL_RCC_GetHCLKFreq>
 800bbc0:	0001      	movs	r1, r0
 800bbc2:	4b06      	ldr	r3, [pc, #24]	@ (800bbdc <HAL_RCC_GetPCLK1Freq+0x24>)
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	0a1b      	lsrs	r3, r3, #8
 800bbc8:	2207      	movs	r2, #7
 800bbca:	4013      	ands	r3, r2
 800bbcc:	4a04      	ldr	r2, [pc, #16]	@ (800bbe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bbce:	5cd3      	ldrb	r3, [r2, r3]
 800bbd0:	40d9      	lsrs	r1, r3
 800bbd2:	000b      	movs	r3, r1
}
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	46c0      	nop			@ (mov r8, r8)
 800bbdc:	40021000 	.word	0x40021000
 800bbe0:	08011ac8 	.word	0x08011ac8

0800bbe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bbe8:	f7ff ffdc 	bl	800bba4 <HAL_RCC_GetHCLKFreq>
 800bbec:	0001      	movs	r1, r0
 800bbee:	4b06      	ldr	r3, [pc, #24]	@ (800bc08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	0adb      	lsrs	r3, r3, #11
 800bbf4:	2207      	movs	r2, #7
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	4a04      	ldr	r2, [pc, #16]	@ (800bc0c <HAL_RCC_GetPCLK2Freq+0x28>)
 800bbfa:	5cd3      	ldrb	r3, [r2, r3]
 800bbfc:	40d9      	lsrs	r1, r3
 800bbfe:	000b      	movs	r3, r1
}
 800bc00:	0018      	movs	r0, r3
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	46c0      	nop			@ (mov r8, r8)
 800bc08:	40021000 	.word	0x40021000
 800bc0c:	08011ac8 	.word	0x08011ac8

0800bc10 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800bc18:	2017      	movs	r0, #23
 800bc1a:	183b      	adds	r3, r7, r0
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2220      	movs	r2, #32
 800bc26:	4013      	ands	r3, r2
 800bc28:	d100      	bne.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800bc2a:	e0c7      	b.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc2c:	4b9b      	ldr	r3, [pc, #620]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bc2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc30:	2380      	movs	r3, #128	@ 0x80
 800bc32:	055b      	lsls	r3, r3, #21
 800bc34:	4013      	ands	r3, r2
 800bc36:	d109      	bne.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc38:	4b98      	ldr	r3, [pc, #608]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bc3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc3c:	4b97      	ldr	r3, [pc, #604]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bc3e:	2180      	movs	r1, #128	@ 0x80
 800bc40:	0549      	lsls	r1, r1, #21
 800bc42:	430a      	orrs	r2, r1
 800bc44:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800bc46:	183b      	adds	r3, r7, r0
 800bc48:	2201      	movs	r2, #1
 800bc4a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc4c:	4b94      	ldr	r3, [pc, #592]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	2380      	movs	r3, #128	@ 0x80
 800bc52:	005b      	lsls	r3, r3, #1
 800bc54:	4013      	ands	r3, r2
 800bc56:	d11a      	bne.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc58:	4b91      	ldr	r3, [pc, #580]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	4b90      	ldr	r3, [pc, #576]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800bc5e:	2180      	movs	r1, #128	@ 0x80
 800bc60:	0049      	lsls	r1, r1, #1
 800bc62:	430a      	orrs	r2, r1
 800bc64:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc66:	f7fb ff1d 	bl	8007aa4 <HAL_GetTick>
 800bc6a:	0003      	movs	r3, r0
 800bc6c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc6e:	e008      	b.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc70:	f7fb ff18 	bl	8007aa4 <HAL_GetTick>
 800bc74:	0002      	movs	r2, r0
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	2b64      	cmp	r3, #100	@ 0x64
 800bc7c:	d901      	bls.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e107      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc82:	4b87      	ldr	r3, [pc, #540]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	2380      	movs	r3, #128	@ 0x80
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	d0f0      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800bc8e:	4b83      	ldr	r3, [pc, #524]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	23c0      	movs	r3, #192	@ 0xc0
 800bc94:	039b      	lsls	r3, r3, #14
 800bc96:	4013      	ands	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	23c0      	movs	r3, #192	@ 0xc0
 800bca0:	039b      	lsls	r3, r3, #14
 800bca2:	4013      	ands	r3, r2
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d013      	beq.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	23c0      	movs	r3, #192	@ 0xc0
 800bcb0:	029b      	lsls	r3, r3, #10
 800bcb2:	401a      	ands	r2, r3
 800bcb4:	23c0      	movs	r3, #192	@ 0xc0
 800bcb6:	029b      	lsls	r3, r3, #10
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d10a      	bne.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcbc:	4b77      	ldr	r3, [pc, #476]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	2380      	movs	r3, #128	@ 0x80
 800bcc2:	029b      	lsls	r3, r3, #10
 800bcc4:	401a      	ands	r2, r3
 800bcc6:	2380      	movs	r3, #128	@ 0x80
 800bcc8:	029b      	lsls	r3, r3, #10
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d101      	bne.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e0df      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800bcd2:	4b72      	ldr	r3, [pc, #456]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bcd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcd6:	23c0      	movs	r3, #192	@ 0xc0
 800bcd8:	029b      	lsls	r3, r3, #10
 800bcda:	4013      	ands	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d03b      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	23c0      	movs	r3, #192	@ 0xc0
 800bcea:	029b      	lsls	r3, r3, #10
 800bcec:	4013      	ands	r3, r2
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d033      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2220      	movs	r2, #32
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	d02e      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800bcfe:	4b67      	ldr	r3, [pc, #412]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd02:	4a68      	ldr	r2, [pc, #416]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800bd04:	4013      	ands	r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bd08:	4b64      	ldr	r3, [pc, #400]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd0c:	4b63      	ldr	r3, [pc, #396]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd0e:	2180      	movs	r1, #128	@ 0x80
 800bd10:	0309      	lsls	r1, r1, #12
 800bd12:	430a      	orrs	r2, r1
 800bd14:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bd16:	4b61      	ldr	r3, [pc, #388]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd1a:	4b60      	ldr	r3, [pc, #384]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd1c:	4962      	ldr	r1, [pc, #392]	@ (800bea8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800bd1e:	400a      	ands	r2, r1
 800bd20:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800bd22:	4b5e      	ldr	r3, [pc, #376]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	2380      	movs	r3, #128	@ 0x80
 800bd2c:	005b      	lsls	r3, r3, #1
 800bd2e:	4013      	ands	r3, r2
 800bd30:	d014      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd32:	f7fb feb7 	bl	8007aa4 <HAL_GetTick>
 800bd36:	0003      	movs	r3, r0
 800bd38:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd3a:	e009      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd3c:	f7fb feb2 	bl	8007aa4 <HAL_GetTick>
 800bd40:	0002      	movs	r2, r0
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	4a59      	ldr	r2, [pc, #356]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d901      	bls.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	e0a0      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd50:	4b52      	ldr	r3, [pc, #328]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd54:	2380      	movs	r3, #128	@ 0x80
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4013      	ands	r3, r2
 800bd5a:	d0ef      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2220      	movs	r2, #32
 800bd62:	4013      	ands	r3, r2
 800bd64:	d01f      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	23c0      	movs	r3, #192	@ 0xc0
 800bd6c:	029b      	lsls	r3, r3, #10
 800bd6e:	401a      	ands	r2, r3
 800bd70:	23c0      	movs	r3, #192	@ 0xc0
 800bd72:	029b      	lsls	r3, r3, #10
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d10c      	bne.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800bd78:	4b48      	ldr	r3, [pc, #288]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a4c      	ldr	r2, [pc, #304]	@ (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800bd7e:	4013      	ands	r3, r2
 800bd80:	0019      	movs	r1, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	685a      	ldr	r2, [r3, #4]
 800bd86:	23c0      	movs	r3, #192	@ 0xc0
 800bd88:	039b      	lsls	r3, r3, #14
 800bd8a:	401a      	ands	r2, r3
 800bd8c:	4b43      	ldr	r3, [pc, #268]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd8e:	430a      	orrs	r2, r1
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	4b42      	ldr	r3, [pc, #264]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bd94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	685a      	ldr	r2, [r3, #4]
 800bd9a:	23c0      	movs	r3, #192	@ 0xc0
 800bd9c:	029b      	lsls	r3, r3, #10
 800bd9e:	401a      	ands	r2, r3
 800bda0:	4b3e      	ldr	r3, [pc, #248]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bda2:	430a      	orrs	r2, r1
 800bda4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800bda6:	2317      	movs	r3, #23
 800bda8:	18fb      	adds	r3, r7, r3
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d105      	bne.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdb0:	4b3a      	ldr	r3, [pc, #232]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bdb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdb4:	4b39      	ldr	r3, [pc, #228]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bdb6:	493f      	ldr	r1, [pc, #252]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800bdb8:	400a      	ands	r2, r1
 800bdba:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	d009      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bdc6:	4b35      	ldr	r3, [pc, #212]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bdc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdca:	2203      	movs	r2, #3
 800bdcc:	4393      	bics	r3, r2
 800bdce:	0019      	movs	r1, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	4b31      	ldr	r3, [pc, #196]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2202      	movs	r2, #2
 800bde0:	4013      	ands	r3, r2
 800bde2:	d009      	beq.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bde4:	4b2d      	ldr	r3, [pc, #180]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bde6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bde8:	220c      	movs	r2, #12
 800bdea:	4393      	bics	r3, r2
 800bdec:	0019      	movs	r1, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68da      	ldr	r2, [r3, #12]
 800bdf2:	4b2a      	ldr	r3, [pc, #168]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2204      	movs	r2, #4
 800bdfe:	4013      	ands	r3, r2
 800be00:	d009      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be02:	4b26      	ldr	r3, [pc, #152]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be06:	4a2c      	ldr	r2, [pc, #176]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800be08:	4013      	ands	r3, r2
 800be0a:	0019      	movs	r1, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	691a      	ldr	r2, [r3, #16]
 800be10:	4b22      	ldr	r3, [pc, #136]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be12:	430a      	orrs	r2, r1
 800be14:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2208      	movs	r2, #8
 800be1c:	4013      	ands	r3, r2
 800be1e:	d009      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800be20:	4b1e      	ldr	r3, [pc, #120]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be24:	4a25      	ldr	r2, [pc, #148]	@ (800bebc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800be26:	4013      	ands	r3, r2
 800be28:	0019      	movs	r1, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	695a      	ldr	r2, [r3, #20]
 800be2e:	4b1b      	ldr	r3, [pc, #108]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be30:	430a      	orrs	r2, r1
 800be32:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	2380      	movs	r3, #128	@ 0x80
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	4013      	ands	r3, r2
 800be3e:	d009      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be40:	4b16      	ldr	r3, [pc, #88]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be44:	4a17      	ldr	r2, [pc, #92]	@ (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800be46:	4013      	ands	r3, r2
 800be48:	0019      	movs	r1, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	699a      	ldr	r2, [r3, #24]
 800be4e:	4b13      	ldr	r3, [pc, #76]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be50:	430a      	orrs	r2, r1
 800be52:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2240      	movs	r2, #64	@ 0x40
 800be5a:	4013      	ands	r3, r2
 800be5c:	d009      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be5e:	4b0f      	ldr	r3, [pc, #60]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be62:	4a17      	ldr	r2, [pc, #92]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800be64:	4013      	ands	r3, r2
 800be66:	0019      	movs	r1, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a1a      	ldr	r2, [r3, #32]
 800be6c:	4b0b      	ldr	r3, [pc, #44]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be6e:	430a      	orrs	r2, r1
 800be70:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2280      	movs	r2, #128	@ 0x80
 800be78:	4013      	ands	r3, r2
 800be7a:	d009      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800be7c:	4b07      	ldr	r3, [pc, #28]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be80:	4a10      	ldr	r2, [pc, #64]	@ (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800be82:	4013      	ands	r3, r2
 800be84:	0019      	movs	r1, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	69da      	ldr	r2, [r3, #28]
 800be8a:	4b04      	ldr	r3, [pc, #16]	@ (800be9c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800be8c:	430a      	orrs	r2, r1
 800be8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	0018      	movs	r0, r3
 800be94:	46bd      	mov	sp, r7
 800be96:	b006      	add	sp, #24
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	46c0      	nop			@ (mov r8, r8)
 800be9c:	40021000 	.word	0x40021000
 800bea0:	40007000 	.word	0x40007000
 800bea4:	fffcffff 	.word	0xfffcffff
 800bea8:	fff7ffff 	.word	0xfff7ffff
 800beac:	00001388 	.word	0x00001388
 800beb0:	ffcfffff 	.word	0xffcfffff
 800beb4:	efffffff 	.word	0xefffffff
 800beb8:	fffff3ff 	.word	0xfffff3ff
 800bebc:	ffffcfff 	.word	0xffffcfff
 800bec0:	fbffffff 	.word	0xfbffffff
 800bec4:	fff3ffff 	.word	0xfff3ffff

0800bec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e032      	b.n	800bf40 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2239      	movs	r2, #57	@ 0x39
 800bede:	5c9b      	ldrb	r3, [r3, r2]
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d107      	bne.n	800bef6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2238      	movs	r2, #56	@ 0x38
 800beea:	2100      	movs	r1, #0
 800beec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	0018      	movs	r0, r3
 800bef2:	f7fa ff5d 	bl	8006db0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2239      	movs	r2, #57	@ 0x39
 800befa:	2102      	movs	r1, #2
 800befc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	3304      	adds	r3, #4
 800bf06:	0019      	movs	r1, r3
 800bf08:	0010      	movs	r0, r2
 800bf0a:	f000 f975 	bl	800c1f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	223e      	movs	r2, #62	@ 0x3e
 800bf12:	2101      	movs	r1, #1
 800bf14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	223a      	movs	r2, #58	@ 0x3a
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	5499      	strb	r1, [r3, r2]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	223b      	movs	r2, #59	@ 0x3b
 800bf22:	2101      	movs	r1, #1
 800bf24:	5499      	strb	r1, [r3, r2]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	223c      	movs	r2, #60	@ 0x3c
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	5499      	strb	r1, [r3, r2]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	223d      	movs	r2, #61	@ 0x3d
 800bf32:	2101      	movs	r1, #1
 800bf34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2239      	movs	r2, #57	@ 0x39
 800bf3a:	2101      	movs	r1, #1
 800bf3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	0018      	movs	r0, r3
 800bf42:	46bd      	mov	sp, r7
 800bf44:	b002      	add	sp, #8
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d108      	bne.n	800bf6a <HAL_TIM_PWM_Start+0x22>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	223a      	movs	r2, #58	@ 0x3a
 800bf5c:	5c9b      	ldrb	r3, [r3, r2]
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	3b01      	subs	r3, #1
 800bf62:	1e5a      	subs	r2, r3, #1
 800bf64:	4193      	sbcs	r3, r2
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	e01f      	b.n	800bfaa <HAL_TIM_PWM_Start+0x62>
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	2b04      	cmp	r3, #4
 800bf6e:	d108      	bne.n	800bf82 <HAL_TIM_PWM_Start+0x3a>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	223b      	movs	r2, #59	@ 0x3b
 800bf74:	5c9b      	ldrb	r3, [r3, r2]
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	1e5a      	subs	r2, r3, #1
 800bf7c:	4193      	sbcs	r3, r2
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	e013      	b.n	800bfaa <HAL_TIM_PWM_Start+0x62>
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2b08      	cmp	r3, #8
 800bf86:	d108      	bne.n	800bf9a <HAL_TIM_PWM_Start+0x52>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	223c      	movs	r2, #60	@ 0x3c
 800bf8c:	5c9b      	ldrb	r3, [r3, r2]
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	3b01      	subs	r3, #1
 800bf92:	1e5a      	subs	r2, r3, #1
 800bf94:	4193      	sbcs	r3, r2
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	e007      	b.n	800bfaa <HAL_TIM_PWM_Start+0x62>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	223d      	movs	r2, #61	@ 0x3d
 800bf9e:	5c9b      	ldrb	r3, [r3, r2]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	1e5a      	subs	r2, r3, #1
 800bfa6:	4193      	sbcs	r3, r2
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e052      	b.n	800c058 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <HAL_TIM_PWM_Start+0x7a>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	223a      	movs	r2, #58	@ 0x3a
 800bfbc:	2102      	movs	r1, #2
 800bfbe:	5499      	strb	r1, [r3, r2]
 800bfc0:	e013      	b.n	800bfea <HAL_TIM_PWM_Start+0xa2>
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b04      	cmp	r3, #4
 800bfc6:	d104      	bne.n	800bfd2 <HAL_TIM_PWM_Start+0x8a>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	223b      	movs	r2, #59	@ 0x3b
 800bfcc:	2102      	movs	r1, #2
 800bfce:	5499      	strb	r1, [r3, r2]
 800bfd0:	e00b      	b.n	800bfea <HAL_TIM_PWM_Start+0xa2>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b08      	cmp	r3, #8
 800bfd6:	d104      	bne.n	800bfe2 <HAL_TIM_PWM_Start+0x9a>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	223c      	movs	r2, #60	@ 0x3c
 800bfdc:	2102      	movs	r1, #2
 800bfde:	5499      	strb	r1, [r3, r2]
 800bfe0:	e003      	b.n	800bfea <HAL_TIM_PWM_Start+0xa2>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	223d      	movs	r2, #61	@ 0x3d
 800bfe6:	2102      	movs	r1, #2
 800bfe8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	2201      	movs	r2, #1
 800bff2:	0018      	movs	r0, r3
 800bff4:	f000 fa62 	bl	800c4bc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	2380      	movs	r3, #128	@ 0x80
 800bffe:	05db      	lsls	r3, r3, #23
 800c000:	429a      	cmp	r2, r3
 800c002:	d00e      	beq.n	800c022 <HAL_TIM_PWM_Start+0xda>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a15      	ldr	r2, [pc, #84]	@ (800c060 <HAL_TIM_PWM_Start+0x118>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d009      	beq.n	800c022 <HAL_TIM_PWM_Start+0xda>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a14      	ldr	r2, [pc, #80]	@ (800c064 <HAL_TIM_PWM_Start+0x11c>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d004      	beq.n	800c022 <HAL_TIM_PWM_Start+0xda>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a12      	ldr	r2, [pc, #72]	@ (800c068 <HAL_TIM_PWM_Start+0x120>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d111      	bne.n	800c046 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	2207      	movs	r2, #7
 800c02a:	4013      	ands	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2b06      	cmp	r3, #6
 800c032:	d010      	beq.n	800c056 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2101      	movs	r1, #1
 800c040:	430a      	orrs	r2, r1
 800c042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c044:	e007      	b.n	800c056 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2101      	movs	r1, #1
 800c052:	430a      	orrs	r2, r1
 800c054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	0018      	movs	r0, r3
 800c05a:	46bd      	mov	sp, r7
 800c05c:	b004      	add	sp, #16
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	40000400 	.word	0x40000400
 800c064:	40010800 	.word	0x40010800
 800c068:	40011400 	.word	0x40011400

0800c06c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c078:	2317      	movs	r3, #23
 800c07a:	18fb      	adds	r3, r7, r3
 800c07c:	2200      	movs	r2, #0
 800c07e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2238      	movs	r2, #56	@ 0x38
 800c084:	5c9b      	ldrb	r3, [r3, r2]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d101      	bne.n	800c08e <HAL_TIM_PWM_ConfigChannel+0x22>
 800c08a:	2302      	movs	r3, #2
 800c08c:	e0ad      	b.n	800c1ea <HAL_TIM_PWM_ConfigChannel+0x17e>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2238      	movs	r2, #56	@ 0x38
 800c092:	2101      	movs	r1, #1
 800c094:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b0c      	cmp	r3, #12
 800c09a:	d100      	bne.n	800c09e <HAL_TIM_PWM_ConfigChannel+0x32>
 800c09c:	e076      	b.n	800c18c <HAL_TIM_PWM_ConfigChannel+0x120>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b0c      	cmp	r3, #12
 800c0a2:	d900      	bls.n	800c0a6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800c0a4:	e095      	b.n	800c1d2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2b08      	cmp	r3, #8
 800c0aa:	d04e      	beq.n	800c14a <HAL_TIM_PWM_ConfigChannel+0xde>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b08      	cmp	r3, #8
 800c0b0:	d900      	bls.n	800c0b4 <HAL_TIM_PWM_ConfigChannel+0x48>
 800c0b2:	e08e      	b.n	800c1d2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <HAL_TIM_PWM_ConfigChannel+0x56>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b04      	cmp	r3, #4
 800c0be:	d021      	beq.n	800c104 <HAL_TIM_PWM_ConfigChannel+0x98>
 800c0c0:	e087      	b.n	800c1d2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	0011      	movs	r1, r2
 800c0ca:	0018      	movs	r0, r3
 800c0cc:	f000 f8f2 	bl	800c2b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2108      	movs	r1, #8
 800c0dc:	430a      	orrs	r2, r1
 800c0de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	699a      	ldr	r2, [r3, #24]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2104      	movs	r1, #4
 800c0ec:	438a      	bics	r2, r1
 800c0ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6999      	ldr	r1, [r3, #24]
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	68da      	ldr	r2, [r3, #12]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	430a      	orrs	r2, r1
 800c100:	619a      	str	r2, [r3, #24]
      break;
 800c102:	e06b      	b.n	800c1dc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	0011      	movs	r1, r2
 800c10c:	0018      	movs	r0, r3
 800c10e:	f000 f90d 	bl	800c32c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	699a      	ldr	r2, [r3, #24]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2180      	movs	r1, #128	@ 0x80
 800c11e:	0109      	lsls	r1, r1, #4
 800c120:	430a      	orrs	r2, r1
 800c122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	699a      	ldr	r2, [r3, #24]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4931      	ldr	r1, [pc, #196]	@ (800c1f4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800c130:	400a      	ands	r2, r1
 800c132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	6999      	ldr	r1, [r3, #24]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	021a      	lsls	r2, r3, #8
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	619a      	str	r2, [r3, #24]
      break;
 800c148:	e048      	b.n	800c1dc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	0011      	movs	r1, r2
 800c152:	0018      	movs	r0, r3
 800c154:	f000 f92c 	bl	800c3b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	69da      	ldr	r2, [r3, #28]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2108      	movs	r1, #8
 800c164:	430a      	orrs	r2, r1
 800c166:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	69da      	ldr	r2, [r3, #28]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2104      	movs	r1, #4
 800c174:	438a      	bics	r2, r1
 800c176:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	69d9      	ldr	r1, [r3, #28]
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	61da      	str	r2, [r3, #28]
      break;
 800c18a:	e027      	b.n	800c1dc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	0011      	movs	r1, r2
 800c194:	0018      	movs	r0, r3
 800c196:	f000 f94b 	bl	800c430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	69da      	ldr	r2, [r3, #28]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2180      	movs	r1, #128	@ 0x80
 800c1a6:	0109      	lsls	r1, r1, #4
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	69da      	ldr	r2, [r3, #28]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	490f      	ldr	r1, [pc, #60]	@ (800c1f4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800c1b8:	400a      	ands	r2, r1
 800c1ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	69d9      	ldr	r1, [r3, #28]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	021a      	lsls	r2, r3, #8
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	61da      	str	r2, [r3, #28]
      break;
 800c1d0:	e004      	b.n	800c1dc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800c1d2:	2317      	movs	r3, #23
 800c1d4:	18fb      	adds	r3, r7, r3
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	701a      	strb	r2, [r3, #0]
      break;
 800c1da:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2238      	movs	r2, #56	@ 0x38
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	5499      	strb	r1, [r3, r2]

  return status;
 800c1e4:	2317      	movs	r3, #23
 800c1e6:	18fb      	adds	r3, r7, r3
 800c1e8:	781b      	ldrb	r3, [r3, #0]
}
 800c1ea:	0018      	movs	r0, r3
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	b006      	add	sp, #24
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	46c0      	nop			@ (mov r8, r8)
 800c1f4:	fffffbff 	.word	0xfffffbff

0800c1f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	2380      	movs	r3, #128	@ 0x80
 800c20c:	05db      	lsls	r3, r3, #23
 800c20e:	429a      	cmp	r2, r3
 800c210:	d00b      	beq.n	800c22a <TIM_Base_SetConfig+0x32>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a23      	ldr	r2, [pc, #140]	@ (800c2a4 <TIM_Base_SetConfig+0xac>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d007      	beq.n	800c22a <TIM_Base_SetConfig+0x32>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a22      	ldr	r2, [pc, #136]	@ (800c2a8 <TIM_Base_SetConfig+0xb0>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d003      	beq.n	800c22a <TIM_Base_SetConfig+0x32>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a21      	ldr	r2, [pc, #132]	@ (800c2ac <TIM_Base_SetConfig+0xb4>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d108      	bne.n	800c23c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2270      	movs	r2, #112	@ 0x70
 800c22e:	4393      	bics	r3, r2
 800c230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	2380      	movs	r3, #128	@ 0x80
 800c240:	05db      	lsls	r3, r3, #23
 800c242:	429a      	cmp	r2, r3
 800c244:	d00b      	beq.n	800c25e <TIM_Base_SetConfig+0x66>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a16      	ldr	r2, [pc, #88]	@ (800c2a4 <TIM_Base_SetConfig+0xac>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d007      	beq.n	800c25e <TIM_Base_SetConfig+0x66>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a15      	ldr	r2, [pc, #84]	@ (800c2a8 <TIM_Base_SetConfig+0xb0>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d003      	beq.n	800c25e <TIM_Base_SetConfig+0x66>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a14      	ldr	r2, [pc, #80]	@ (800c2ac <TIM_Base_SetConfig+0xb4>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d108      	bne.n	800c270 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	4a13      	ldr	r2, [pc, #76]	@ (800c2b0 <TIM_Base_SetConfig+0xb8>)
 800c262:	4013      	ands	r3, r2
 800c264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2280      	movs	r2, #128	@ 0x80
 800c274:	4393      	bics	r3, r2
 800c276:	001a      	movs	r2, r3
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	4313      	orrs	r3, r2
 800c27e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	689a      	ldr	r2, [r3, #8]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	615a      	str	r2, [r3, #20]
}
 800c29c:	46c0      	nop			@ (mov r8, r8)
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	b004      	add	sp, #16
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	40000400 	.word	0x40000400
 800c2a8:	40010800 	.word	0x40010800
 800c2ac:	40011400 	.word	0x40011400
 800c2b0:	fffffcff 	.word	0xfffffcff

0800c2b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	4393      	bics	r3, r2
 800c2c6:	001a      	movs	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2270      	movs	r2, #112	@ 0x70
 800c2e2:	4393      	bics	r3, r2
 800c2e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	4393      	bics	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	4393      	bics	r3, r2
 800c2fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	697a      	ldr	r2, [r7, #20]
 800c306:	4313      	orrs	r3, r2
 800c308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	621a      	str	r2, [r3, #32]
}
 800c324:	46c0      	nop			@ (mov r8, r8)
 800c326:	46bd      	mov	sp, r7
 800c328:	b006      	add	sp, #24
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	2210      	movs	r2, #16
 800c33c:	4393      	bics	r3, r2
 800c33e:	001a      	movs	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a1b      	ldr	r3, [r3, #32]
 800c348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	699b      	ldr	r3, [r3, #24]
 800c354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4a13      	ldr	r2, [pc, #76]	@ (800c3a8 <TIM_OC2_SetConfig+0x7c>)
 800c35a:	4013      	ands	r3, r2
 800c35c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4a12      	ldr	r2, [pc, #72]	@ (800c3ac <TIM_OC2_SetConfig+0x80>)
 800c362:	4013      	ands	r3, r2
 800c364:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	021b      	lsls	r3, r3, #8
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	4313      	orrs	r3, r2
 800c370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2220      	movs	r2, #32
 800c376:	4393      	bics	r3, r2
 800c378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	011b      	lsls	r3, r3, #4
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	4313      	orrs	r3, r2
 800c384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	685a      	ldr	r2, [r3, #4]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	697a      	ldr	r2, [r7, #20]
 800c39e:	621a      	str	r2, [r3, #32]
}
 800c3a0:	46c0      	nop			@ (mov r8, r8)
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	b006      	add	sp, #24
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	ffff8fff 	.word	0xffff8fff
 800c3ac:	fffffcff 	.word	0xfffffcff

0800c3b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	4a1a      	ldr	r2, [pc, #104]	@ (800c428 <TIM_OC3_SetConfig+0x78>)
 800c3c0:	401a      	ands	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	69db      	ldr	r3, [r3, #28]
 800c3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2270      	movs	r2, #112	@ 0x70
 800c3dc:	4393      	bics	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2203      	movs	r2, #3
 800c3e4:	4393      	bics	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c42c <TIM_OC3_SetConfig+0x7c>)
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	021b      	lsls	r3, r3, #8
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	4313      	orrs	r3, r2
 800c404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	685a      	ldr	r2, [r3, #4]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	621a      	str	r2, [r3, #32]
}
 800c420:	46c0      	nop			@ (mov r8, r8)
 800c422:	46bd      	mov	sp, r7
 800c424:	b006      	add	sp, #24
 800c426:	bd80      	pop	{r7, pc}
 800c428:	fffffeff 	.word	0xfffffeff
 800c42c:	fffffdff 	.word	0xfffffdff

0800c430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	4a1b      	ldr	r2, [pc, #108]	@ (800c4ac <TIM_OC4_SetConfig+0x7c>)
 800c440:	401a      	ands	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	69db      	ldr	r3, [r3, #28]
 800c456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4a15      	ldr	r2, [pc, #84]	@ (800c4b0 <TIM_OC4_SetConfig+0x80>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4a14      	ldr	r2, [pc, #80]	@ (800c4b4 <TIM_OC4_SetConfig+0x84>)
 800c464:	4013      	ands	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	021b      	lsls	r3, r3, #8
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	4313      	orrs	r3, r2
 800c472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	4a10      	ldr	r2, [pc, #64]	@ (800c4b8 <TIM_OC4_SetConfig+0x88>)
 800c478:	4013      	ands	r3, r2
 800c47a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	031b      	lsls	r3, r3, #12
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	4313      	orrs	r3, r2
 800c486:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	685a      	ldr	r2, [r3, #4]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	621a      	str	r2, [r3, #32]
}
 800c4a2:	46c0      	nop			@ (mov r8, r8)
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	b006      	add	sp, #24
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	46c0      	nop			@ (mov r8, r8)
 800c4ac:	ffffefff 	.word	0xffffefff
 800c4b0:	ffff8fff 	.word	0xffff8fff
 800c4b4:	fffffcff 	.word	0xfffffcff
 800c4b8:	ffffdfff 	.word	0xffffdfff

0800c4bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	221f      	movs	r2, #31
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	409a      	lsls	r2, r3
 800c4d2:	0013      	movs	r3, r2
 800c4d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6a1b      	ldr	r3, [r3, #32]
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	43d2      	mvns	r2, r2
 800c4de:	401a      	ands	r2, r3
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6a1a      	ldr	r2, [r3, #32]
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	211f      	movs	r1, #31
 800c4ec:	400b      	ands	r3, r1
 800c4ee:	6879      	ldr	r1, [r7, #4]
 800c4f0:	4099      	lsls	r1, r3
 800c4f2:	000b      	movs	r3, r1
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	621a      	str	r2, [r3, #32]
}
 800c4fa:	46c0      	nop			@ (mov r8, r8)
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	b006      	add	sp, #24
 800c500:	bd80      	pop	{r7, pc}
	...

0800c504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2238      	movs	r2, #56	@ 0x38
 800c512:	5c9b      	ldrb	r3, [r3, r2]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d101      	bne.n	800c51c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c518:	2302      	movs	r3, #2
 800c51a:	e047      	b.n	800c5ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2238      	movs	r2, #56	@ 0x38
 800c520:	2101      	movs	r1, #1
 800c522:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2239      	movs	r2, #57	@ 0x39
 800c528:	2102      	movs	r1, #2
 800c52a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2270      	movs	r2, #112	@ 0x70
 800c540:	4393      	bics	r3, r2
 800c542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	2380      	movs	r3, #128	@ 0x80
 800c55c:	05db      	lsls	r3, r3, #23
 800c55e:	429a      	cmp	r2, r3
 800c560:	d00e      	beq.n	800c580 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a13      	ldr	r2, [pc, #76]	@ (800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d009      	beq.n	800c580 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a11      	ldr	r2, [pc, #68]	@ (800c5b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d004      	beq.n	800c580 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a10      	ldr	r2, [pc, #64]	@ (800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d10c      	bne.n	800c59a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2280      	movs	r2, #128	@ 0x80
 800c584:	4393      	bics	r3, r2
 800c586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	4313      	orrs	r3, r2
 800c590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2239      	movs	r2, #57	@ 0x39
 800c59e:	2101      	movs	r1, #1
 800c5a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2238      	movs	r2, #56	@ 0x38
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	0018      	movs	r0, r3
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	b004      	add	sp, #16
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	40000400 	.word	0x40000400
 800c5b8:	40010800 	.word	0x40010800
 800c5bc:	40011400 	.word	0x40011400

0800c5c0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2238      	movs	r2, #56	@ 0x38
 800c5ce:	5c9b      	ldrb	r3, [r3, r2]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d101      	bne.n	800c5d8 <HAL_TIMEx_RemapConfig+0x18>
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	e00c      	b.n	800c5f2 <HAL_TIMEx_RemapConfig+0x32>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2238      	movs	r2, #56	@ 0x38
 800c5dc:	2101      	movs	r1, #1
 800c5de:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2238      	movs	r2, #56	@ 0x38
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	0018      	movs	r0, r3
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	b002      	add	sp, #8
 800c5f8:	bd80      	pop	{r7, pc}
	...

0800c5fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e053      	b.n	800c6b6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c612:	2b00      	cmp	r3, #0
 800c614:	d116      	bne.n	800c644 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2278      	movs	r2, #120	@ 0x78
 800c61a:	2100      	movs	r1, #0
 800c61c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	0018      	movs	r0, r3
 800c622:	f000 fd07 	bl	800d034 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	22b0      	movs	r2, #176	@ 0xb0
 800c62a:	589b      	ldr	r3, [r3, r2]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d103      	bne.n	800c638 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	21b0      	movs	r1, #176	@ 0xb0
 800c634:	4a22      	ldr	r2, [pc, #136]	@ (800c6c0 <HAL_UART_Init+0xc4>)
 800c636:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	22b0      	movs	r2, #176	@ 0xb0
 800c63c:	589b      	ldr	r3, [r3, r2]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	0010      	movs	r0, r2
 800c642:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2224      	movs	r2, #36	@ 0x24
 800c648:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2101      	movs	r1, #1
 800c656:	438a      	bics	r2, r1
 800c658:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	0018      	movs	r0, r3
 800c65e:	f000 fd2d 	bl	800d0bc <UART_SetConfig>
 800c662:	0003      	movs	r3, r0
 800c664:	2b01      	cmp	r3, #1
 800c666:	d101      	bne.n	800c66c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	e024      	b.n	800c6b6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c670:	2b00      	cmp	r3, #0
 800c672:	d003      	beq.n	800c67c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	0018      	movs	r0, r3
 800c678:	f000 ffbe 	bl	800d5f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	490f      	ldr	r1, [pc, #60]	@ (800c6c4 <HAL_UART_Init+0xc8>)
 800c688:	400a      	ands	r2, r1
 800c68a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	689a      	ldr	r2, [r3, #8]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	212a      	movs	r1, #42	@ 0x2a
 800c698:	438a      	bics	r2, r1
 800c69a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2101      	movs	r1, #1
 800c6a8:	430a      	orrs	r2, r1
 800c6aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	0018      	movs	r0, r3
 800c6b0:	f001 f856 	bl	800d760 <UART_CheckIdleState>
 800c6b4:	0003      	movs	r3, r0
}
 800c6b6:	0018      	movs	r0, r3
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	b002      	add	sp, #8
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	46c0      	nop			@ (mov r8, r8)
 800c6c0:	08006f91 	.word	0x08006f91
 800c6c4:	ffffb7ff 	.word	0xffffb7ff

0800c6c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08a      	sub	sp, #40	@ 0x28
 800c6cc:	af02      	add	r7, sp, #8
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	603b      	str	r3, [r7, #0]
 800c6d4:	1dbb      	adds	r3, r7, #6
 800c6d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6dc:	2b20      	cmp	r3, #32
 800c6de:	d000      	beq.n	800c6e2 <HAL_UART_Transmit+0x1a>
 800c6e0:	e08c      	b.n	800c7fc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d003      	beq.n	800c6f0 <HAL_UART_Transmit+0x28>
 800c6e8:	1dbb      	adds	r3, r7, #6
 800c6ea:	881b      	ldrh	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e084      	b.n	800c7fe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	689a      	ldr	r2, [r3, #8]
 800c6f8:	2380      	movs	r3, #128	@ 0x80
 800c6fa:	015b      	lsls	r3, r3, #5
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d109      	bne.n	800c714 <HAL_UART_Transmit+0x4c>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d105      	bne.n	800c714 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	2201      	movs	r2, #1
 800c70c:	4013      	ands	r3, r2
 800c70e:	d001      	beq.n	800c714 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	e074      	b.n	800c7fe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2284      	movs	r2, #132	@ 0x84
 800c718:	2100      	movs	r1, #0
 800c71a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2221      	movs	r2, #33	@ 0x21
 800c720:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c722:	f7fb f9bf 	bl	8007aa4 <HAL_GetTick>
 800c726:	0003      	movs	r3, r0
 800c728:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	1dba      	adds	r2, r7, #6
 800c72e:	2150      	movs	r1, #80	@ 0x50
 800c730:	8812      	ldrh	r2, [r2, #0]
 800c732:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	1dba      	adds	r2, r7, #6
 800c738:	2152      	movs	r1, #82	@ 0x52
 800c73a:	8812      	ldrh	r2, [r2, #0]
 800c73c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	689a      	ldr	r2, [r3, #8]
 800c742:	2380      	movs	r3, #128	@ 0x80
 800c744:	015b      	lsls	r3, r3, #5
 800c746:	429a      	cmp	r2, r3
 800c748:	d108      	bne.n	800c75c <HAL_UART_Transmit+0x94>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d104      	bne.n	800c75c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800c752:	2300      	movs	r3, #0
 800c754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	61bb      	str	r3, [r7, #24]
 800c75a:	e003      	b.n	800c764 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c760:	2300      	movs	r3, #0
 800c762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c764:	e02f      	b.n	800c7c6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	0013      	movs	r3, r2
 800c770:	2200      	movs	r2, #0
 800c772:	2180      	movs	r1, #128	@ 0x80
 800c774:	f001 f89c 	bl	800d8b0 <UART_WaitOnFlagUntilTimeout>
 800c778:	1e03      	subs	r3, r0, #0
 800c77a:	d004      	beq.n	800c786 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2220      	movs	r2, #32
 800c780:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c782:	2303      	movs	r3, #3
 800c784:	e03b      	b.n	800c7fe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10b      	bne.n	800c7a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	001a      	movs	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	05d2      	lsls	r2, r2, #23
 800c798:	0dd2      	lsrs	r2, r2, #23
 800c79a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	3302      	adds	r3, #2
 800c7a0:	61bb      	str	r3, [r7, #24]
 800c7a2:	e007      	b.n	800c7b4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	781a      	ldrb	r2, [r3, #0]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2252      	movs	r2, #82	@ 0x52
 800c7b8:	5a9b      	ldrh	r3, [r3, r2]
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	b299      	uxth	r1, r3
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2252      	movs	r2, #82	@ 0x52
 800c7c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2252      	movs	r2, #82	@ 0x52
 800c7ca:	5a9b      	ldrh	r3, [r3, r2]
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1c9      	bne.n	800c766 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7d2:	697a      	ldr	r2, [r7, #20]
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	0013      	movs	r3, r2
 800c7dc:	2200      	movs	r2, #0
 800c7de:	2140      	movs	r1, #64	@ 0x40
 800c7e0:	f001 f866 	bl	800d8b0 <UART_WaitOnFlagUntilTimeout>
 800c7e4:	1e03      	subs	r3, r0, #0
 800c7e6:	d004      	beq.n	800c7f2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2220      	movs	r2, #32
 800c7ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e005      	b.n	800c7fe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2220      	movs	r2, #32
 800c7f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	e000      	b.n	800c7fe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800c7fc:	2302      	movs	r3, #2
  }
}
 800c7fe:	0018      	movs	r0, r3
 800c800:	46bd      	mov	sp, r7
 800c802:	b008      	add	sp, #32
 800c804:	bd80      	pop	{r7, pc}
	...

0800c808 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b088      	sub	sp, #32
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	1dbb      	adds	r3, r7, #6
 800c814:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c81a:	2b20      	cmp	r3, #32
 800c81c:	d000      	beq.n	800c820 <HAL_UART_Transmit_DMA+0x18>
 800c81e:	e077      	b.n	800c910 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <HAL_UART_Transmit_DMA+0x26>
 800c826:	1dbb      	adds	r3, r7, #6
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	e06f      	b.n	800c912 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	689a      	ldr	r2, [r3, #8]
 800c836:	2380      	movs	r3, #128	@ 0x80
 800c838:	015b      	lsls	r3, r3, #5
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d109      	bne.n	800c852 <HAL_UART_Transmit_DMA+0x4a>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d105      	bne.n	800c852 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	2201      	movs	r2, #1
 800c84a:	4013      	ands	r3, r2
 800c84c:	d001      	beq.n	800c852 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	e05f      	b.n	800c912 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	1dba      	adds	r2, r7, #6
 800c85c:	2150      	movs	r1, #80	@ 0x50
 800c85e:	8812      	ldrh	r2, [r2, #0]
 800c860:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	1dba      	adds	r2, r7, #6
 800c866:	2152      	movs	r1, #82	@ 0x52
 800c868:	8812      	ldrh	r2, [r2, #0]
 800c86a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2284      	movs	r2, #132	@ 0x84
 800c870:	2100      	movs	r1, #0
 800c872:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2221      	movs	r2, #33	@ 0x21
 800c878:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d027      	beq.n	800c8d2 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c886:	4a25      	ldr	r2, [pc, #148]	@ (800c91c <HAL_UART_Transmit_DMA+0x114>)
 800c888:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c88e:	4a24      	ldr	r2, [pc, #144]	@ (800c920 <HAL_UART_Transmit_DMA+0x118>)
 800c890:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c896:	4a23      	ldr	r2, [pc, #140]	@ (800c924 <HAL_UART_Transmit_DMA+0x11c>)
 800c898:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c89e:	2200      	movs	r2, #0
 800c8a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8aa:	0019      	movs	r1, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	3328      	adds	r3, #40	@ 0x28
 800c8b2:	001a      	movs	r2, r3
 800c8b4:	1dbb      	adds	r3, r7, #6
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	f7fb fad6 	bl	8007e68 <HAL_DMA_Start_IT>
 800c8bc:	1e03      	subs	r3, r0, #0
 800c8be:	d008      	beq.n	800c8d2 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2284      	movs	r2, #132	@ 0x84
 800c8c4:	2110      	movs	r1, #16
 800c8c6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2220      	movs	r2, #32
 800c8cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e01f      	b.n	800c912 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2240      	movs	r2, #64	@ 0x40
 800c8d8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8da:	f3ef 8310 	mrs	r3, PRIMASK
 800c8de:	613b      	str	r3, [r7, #16]
  return(result);
 800c8e0:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c8e2:	61fb      	str	r3, [r7, #28]
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f383 8810 	msr	PRIMASK, r3
}
 800c8ee:	46c0      	nop			@ (mov r8, r8)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	689a      	ldr	r2, [r3, #8]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2180      	movs	r1, #128	@ 0x80
 800c8fc:	430a      	orrs	r2, r1
 800c8fe:	609a      	str	r2, [r3, #8]
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	f383 8810 	msr	PRIMASK, r3
}
 800c90a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	e000      	b.n	800c912 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800c910:	2302      	movs	r3, #2
  }
}
 800c912:	0018      	movs	r0, r3
 800c914:	46bd      	mov	sp, r7
 800c916:	b008      	add	sp, #32
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	46c0      	nop			@ (mov r8, r8)
 800c91c:	0800dbd5 	.word	0x0800dbd5
 800c920:	0800dc71 	.word	0x0800dc71
 800c924:	0800de11 	.word	0x0800de11

0800c928 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b088      	sub	sp, #32
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	1dbb      	adds	r3, r7, #6
 800c934:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2280      	movs	r2, #128	@ 0x80
 800c93a:	589b      	ldr	r3, [r3, r2]
 800c93c:	2b20      	cmp	r3, #32
 800c93e:	d14a      	bne.n	800c9d6 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d003      	beq.n	800c94e <HAL_UART_Receive_DMA+0x26>
 800c946:	1dbb      	adds	r3, r7, #6
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d101      	bne.n	800c952 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	e042      	b.n	800c9d8 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	689a      	ldr	r2, [r3, #8]
 800c956:	2380      	movs	r3, #128	@ 0x80
 800c958:	015b      	lsls	r3, r3, #5
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d109      	bne.n	800c972 <HAL_UART_Receive_DMA+0x4a>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d105      	bne.n	800c972 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	2201      	movs	r2, #1
 800c96a:	4013      	ands	r3, r2
 800c96c:	d001      	beq.n	800c972 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	e032      	b.n	800c9d8 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a18      	ldr	r2, [pc, #96]	@ (800c9e0 <HAL_UART_Receive_DMA+0xb8>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d020      	beq.n	800c9c4 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	685a      	ldr	r2, [r3, #4]
 800c988:	2380      	movs	r3, #128	@ 0x80
 800c98a:	041b      	lsls	r3, r3, #16
 800c98c:	4013      	ands	r3, r2
 800c98e:	d019      	beq.n	800c9c4 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c990:	f3ef 8310 	mrs	r3, PRIMASK
 800c994:	613b      	str	r3, [r7, #16]
  return(result);
 800c996:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c998:	61fb      	str	r3, [r7, #28]
 800c99a:	2301      	movs	r3, #1
 800c99c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f383 8810 	msr	PRIMASK, r3
}
 800c9a4:	46c0      	nop			@ (mov r8, r8)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2180      	movs	r1, #128	@ 0x80
 800c9b2:	04c9      	lsls	r1, r1, #19
 800c9b4:	430a      	orrs	r2, r1
 800c9b6:	601a      	str	r2, [r3, #0]
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	f383 8810 	msr	PRIMASK, r3
}
 800c9c2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c9c4:	1dbb      	adds	r3, r7, #6
 800c9c6:	881a      	ldrh	r2, [r3, #0]
 800c9c8:	68b9      	ldr	r1, [r7, #8]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	0018      	movs	r0, r3
 800c9ce:	f000 ffd9 	bl	800d984 <UART_Start_Receive_DMA>
 800c9d2:	0003      	movs	r3, r0
 800c9d4:	e000      	b.n	800c9d8 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800c9d6:	2302      	movs	r3, #2
  }
}
 800c9d8:	0018      	movs	r0, r3
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	b008      	add	sp, #32
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	40004800 	.word	0x40004800

0800c9e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c9e4:	b590      	push	{r4, r7, lr}
 800c9e6:	b0ab      	sub	sp, #172	@ 0xac
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	22a4      	movs	r2, #164	@ 0xa4
 800c9f4:	18b9      	adds	r1, r7, r2
 800c9f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	20a0      	movs	r0, #160	@ 0xa0
 800ca00:	1839      	adds	r1, r7, r0
 800ca02:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	219c      	movs	r1, #156	@ 0x9c
 800ca0c:	1879      	adds	r1, r7, r1
 800ca0e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca10:	0011      	movs	r1, r2
 800ca12:	18bb      	adds	r3, r7, r2
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a9c      	ldr	r2, [pc, #624]	@ (800cc88 <HAL_UART_IRQHandler+0x2a4>)
 800ca18:	4013      	ands	r3, r2
 800ca1a:	2298      	movs	r2, #152	@ 0x98
 800ca1c:	18bc      	adds	r4, r7, r2
 800ca1e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800ca20:	18bb      	adds	r3, r7, r2
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d114      	bne.n	800ca52 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ca28:	187b      	adds	r3, r7, r1
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2220      	movs	r2, #32
 800ca2e:	4013      	ands	r3, r2
 800ca30:	d00f      	beq.n	800ca52 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ca32:	183b      	adds	r3, r7, r0
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2220      	movs	r2, #32
 800ca38:	4013      	ands	r3, r2
 800ca3a:	d00a      	beq.n	800ca52 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d100      	bne.n	800ca46 <HAL_UART_IRQHandler+0x62>
 800ca44:	e2aa      	b.n	800cf9c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	0010      	movs	r0, r2
 800ca4e:	4798      	blx	r3
      }
      return;
 800ca50:	e2a4      	b.n	800cf9c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ca52:	2398      	movs	r3, #152	@ 0x98
 800ca54:	18fb      	adds	r3, r7, r3
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d100      	bne.n	800ca5e <HAL_UART_IRQHandler+0x7a>
 800ca5c:	e11a      	b.n	800cc94 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ca5e:	239c      	movs	r3, #156	@ 0x9c
 800ca60:	18fb      	adds	r3, r7, r3
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2201      	movs	r2, #1
 800ca66:	4013      	ands	r3, r2
 800ca68:	d106      	bne.n	800ca78 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ca6a:	23a0      	movs	r3, #160	@ 0xa0
 800ca6c:	18fb      	adds	r3, r7, r3
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a86      	ldr	r2, [pc, #536]	@ (800cc8c <HAL_UART_IRQHandler+0x2a8>)
 800ca72:	4013      	ands	r3, r2
 800ca74:	d100      	bne.n	800ca78 <HAL_UART_IRQHandler+0x94>
 800ca76:	e10d      	b.n	800cc94 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca78:	23a4      	movs	r3, #164	@ 0xa4
 800ca7a:	18fb      	adds	r3, r7, r3
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	4013      	ands	r3, r2
 800ca82:	d012      	beq.n	800caaa <HAL_UART_IRQHandler+0xc6>
 800ca84:	23a0      	movs	r3, #160	@ 0xa0
 800ca86:	18fb      	adds	r3, r7, r3
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	2380      	movs	r3, #128	@ 0x80
 800ca8c:	005b      	lsls	r3, r3, #1
 800ca8e:	4013      	ands	r3, r2
 800ca90:	d00b      	beq.n	800caaa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2201      	movs	r2, #1
 800ca98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2284      	movs	r2, #132	@ 0x84
 800ca9e:	589b      	ldr	r3, [r3, r2]
 800caa0:	2201      	movs	r2, #1
 800caa2:	431a      	orrs	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2184      	movs	r1, #132	@ 0x84
 800caa8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caaa:	23a4      	movs	r3, #164	@ 0xa4
 800caac:	18fb      	adds	r3, r7, r3
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2202      	movs	r2, #2
 800cab2:	4013      	ands	r3, r2
 800cab4:	d011      	beq.n	800cada <HAL_UART_IRQHandler+0xf6>
 800cab6:	239c      	movs	r3, #156	@ 0x9c
 800cab8:	18fb      	adds	r3, r7, r3
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2201      	movs	r2, #1
 800cabe:	4013      	ands	r3, r2
 800cac0:	d00b      	beq.n	800cada <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2202      	movs	r2, #2
 800cac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2284      	movs	r2, #132	@ 0x84
 800cace:	589b      	ldr	r3, [r3, r2]
 800cad0:	2204      	movs	r2, #4
 800cad2:	431a      	orrs	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2184      	movs	r1, #132	@ 0x84
 800cad8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cada:	23a4      	movs	r3, #164	@ 0xa4
 800cadc:	18fb      	adds	r3, r7, r3
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2204      	movs	r2, #4
 800cae2:	4013      	ands	r3, r2
 800cae4:	d011      	beq.n	800cb0a <HAL_UART_IRQHandler+0x126>
 800cae6:	239c      	movs	r3, #156	@ 0x9c
 800cae8:	18fb      	adds	r3, r7, r3
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2201      	movs	r2, #1
 800caee:	4013      	ands	r3, r2
 800caf0:	d00b      	beq.n	800cb0a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2204      	movs	r2, #4
 800caf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2284      	movs	r2, #132	@ 0x84
 800cafe:	589b      	ldr	r3, [r3, r2]
 800cb00:	2202      	movs	r2, #2
 800cb02:	431a      	orrs	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2184      	movs	r1, #132	@ 0x84
 800cb08:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb0a:	23a4      	movs	r3, #164	@ 0xa4
 800cb0c:	18fb      	adds	r3, r7, r3
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2208      	movs	r2, #8
 800cb12:	4013      	ands	r3, r2
 800cb14:	d017      	beq.n	800cb46 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cb16:	23a0      	movs	r3, #160	@ 0xa0
 800cb18:	18fb      	adds	r3, r7, r3
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2220      	movs	r2, #32
 800cb1e:	4013      	ands	r3, r2
 800cb20:	d105      	bne.n	800cb2e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cb22:	239c      	movs	r3, #156	@ 0x9c
 800cb24:	18fb      	adds	r3, r7, r3
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cb2c:	d00b      	beq.n	800cb46 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2208      	movs	r2, #8
 800cb34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2284      	movs	r2, #132	@ 0x84
 800cb3a:	589b      	ldr	r3, [r3, r2]
 800cb3c:	2208      	movs	r2, #8
 800cb3e:	431a      	orrs	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2184      	movs	r1, #132	@ 0x84
 800cb44:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb46:	23a4      	movs	r3, #164	@ 0xa4
 800cb48:	18fb      	adds	r3, r7, r3
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	2380      	movs	r3, #128	@ 0x80
 800cb4e:	011b      	lsls	r3, r3, #4
 800cb50:	4013      	ands	r3, r2
 800cb52:	d013      	beq.n	800cb7c <HAL_UART_IRQHandler+0x198>
 800cb54:	23a0      	movs	r3, #160	@ 0xa0
 800cb56:	18fb      	adds	r3, r7, r3
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	2380      	movs	r3, #128	@ 0x80
 800cb5c:	04db      	lsls	r3, r3, #19
 800cb5e:	4013      	ands	r3, r2
 800cb60:	d00c      	beq.n	800cb7c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2280      	movs	r2, #128	@ 0x80
 800cb68:	0112      	lsls	r2, r2, #4
 800cb6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2284      	movs	r2, #132	@ 0x84
 800cb70:	589b      	ldr	r3, [r3, r2]
 800cb72:	2220      	movs	r2, #32
 800cb74:	431a      	orrs	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2184      	movs	r1, #132	@ 0x84
 800cb7a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2284      	movs	r2, #132	@ 0x84
 800cb80:	589b      	ldr	r3, [r3, r2]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d100      	bne.n	800cb88 <HAL_UART_IRQHandler+0x1a4>
 800cb86:	e20b      	b.n	800cfa0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cb88:	23a4      	movs	r3, #164	@ 0xa4
 800cb8a:	18fb      	adds	r3, r7, r3
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2220      	movs	r2, #32
 800cb90:	4013      	ands	r3, r2
 800cb92:	d00e      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cb94:	23a0      	movs	r3, #160	@ 0xa0
 800cb96:	18fb      	adds	r3, r7, r3
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2220      	movs	r2, #32
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	d008      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d004      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	0010      	movs	r0, r2
 800cbb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2284      	movs	r2, #132	@ 0x84
 800cbb6:	589b      	ldr	r3, [r3, r2]
 800cbb8:	2194      	movs	r1, #148	@ 0x94
 800cbba:	187a      	adds	r2, r7, r1
 800cbbc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	2240      	movs	r2, #64	@ 0x40
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	2b40      	cmp	r3, #64	@ 0x40
 800cbca:	d004      	beq.n	800cbd6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cbcc:	187b      	adds	r3, r7, r1
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2228      	movs	r2, #40	@ 0x28
 800cbd2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbd4:	d04b      	beq.n	800cc6e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	0018      	movs	r0, r3
 800cbda:	f000 ff97 	bl	800db0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	2240      	movs	r2, #64	@ 0x40
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	2b40      	cmp	r3, #64	@ 0x40
 800cbea:	d139      	bne.n	800cc60 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbec:	f3ef 8310 	mrs	r3, PRIMASK
 800cbf0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800cbf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbf4:	2090      	movs	r0, #144	@ 0x90
 800cbf6:	183a      	adds	r2, r7, r0
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc00:	f383 8810 	msr	PRIMASK, r3
}
 800cc04:	46c0      	nop			@ (mov r8, r8)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	689a      	ldr	r2, [r3, #8]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2140      	movs	r1, #64	@ 0x40
 800cc12:	438a      	bics	r2, r1
 800cc14:	609a      	str	r2, [r3, #8]
 800cc16:	183b      	adds	r3, r7, r0
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc1e:	f383 8810 	msr	PRIMASK, r3
}
 800cc22:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d012      	beq.n	800cc52 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc30:	4a17      	ldr	r2, [pc, #92]	@ (800cc90 <HAL_UART_IRQHandler+0x2ac>)
 800cc32:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc38:	0018      	movs	r0, r3
 800cc3a:	f7fb f9bb 	bl	8007fb4 <HAL_DMA_Abort_IT>
 800cc3e:	1e03      	subs	r3, r0, #0
 800cc40:	d020      	beq.n	800cc84 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc4c:	0018      	movs	r0, r3
 800cc4e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc50:	e018      	b.n	800cc84 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2298      	movs	r2, #152	@ 0x98
 800cc56:	589b      	ldr	r3, [r3, r2]
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	0010      	movs	r0, r2
 800cc5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc5e:	e011      	b.n	800cc84 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2298      	movs	r2, #152	@ 0x98
 800cc64:	589b      	ldr	r3, [r3, r2]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	0010      	movs	r0, r2
 800cc6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc6c:	e00a      	b.n	800cc84 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2298      	movs	r2, #152	@ 0x98
 800cc72:	589b      	ldr	r3, [r3, r2]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	0010      	movs	r0, r2
 800cc78:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2284      	movs	r2, #132	@ 0x84
 800cc7e:	2100      	movs	r1, #0
 800cc80:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800cc82:	e18d      	b.n	800cfa0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc84:	46c0      	nop			@ (mov r8, r8)
    return;
 800cc86:	e18b      	b.n	800cfa0 <HAL_UART_IRQHandler+0x5bc>
 800cc88:	0000080f 	.word	0x0000080f
 800cc8c:	04000120 	.word	0x04000120
 800cc90:	0800de99 	.word	0x0800de99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d000      	beq.n	800cc9e <HAL_UART_IRQHandler+0x2ba>
 800cc9c:	e13d      	b.n	800cf1a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cc9e:	23a4      	movs	r3, #164	@ 0xa4
 800cca0:	18fb      	adds	r3, r7, r3
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2210      	movs	r2, #16
 800cca6:	4013      	ands	r3, r2
 800cca8:	d100      	bne.n	800ccac <HAL_UART_IRQHandler+0x2c8>
 800ccaa:	e136      	b.n	800cf1a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ccac:	23a0      	movs	r3, #160	@ 0xa0
 800ccae:	18fb      	adds	r3, r7, r3
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2210      	movs	r2, #16
 800ccb4:	4013      	ands	r3, r2
 800ccb6:	d100      	bne.n	800ccba <HAL_UART_IRQHandler+0x2d6>
 800ccb8:	e12f      	b.n	800cf1a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2210      	movs	r2, #16
 800ccc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	2240      	movs	r2, #64	@ 0x40
 800ccca:	4013      	ands	r3, r2
 800cccc:	2b40      	cmp	r3, #64	@ 0x40
 800ccce:	d000      	beq.n	800ccd2 <HAL_UART_IRQHandler+0x2ee>
 800ccd0:	e0a2      	b.n	800ce18 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685a      	ldr	r2, [r3, #4]
 800ccda:	217e      	movs	r1, #126	@ 0x7e
 800ccdc:	187b      	adds	r3, r7, r1
 800ccde:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800cce0:	187b      	adds	r3, r7, r1
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d100      	bne.n	800ccea <HAL_UART_IRQHandler+0x306>
 800cce8:	e15c      	b.n	800cfa4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2258      	movs	r2, #88	@ 0x58
 800ccee:	5a9b      	ldrh	r3, [r3, r2]
 800ccf0:	187a      	adds	r2, r7, r1
 800ccf2:	8812      	ldrh	r2, [r2, #0]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d300      	bcc.n	800ccfa <HAL_UART_IRQHandler+0x316>
 800ccf8:	e154      	b.n	800cfa4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	187a      	adds	r2, r7, r1
 800ccfe:	215a      	movs	r1, #90	@ 0x5a
 800cd00:	8812      	ldrh	r2, [r2, #0]
 800cd02:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2220      	movs	r2, #32
 800cd0e:	4013      	ands	r3, r2
 800cd10:	d16f      	bne.n	800cdf2 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd12:	f3ef 8310 	mrs	r3, PRIMASK
 800cd16:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd22:	f383 8810 	msr	PRIMASK, r3
}
 800cd26:	46c0      	nop			@ (mov r8, r8)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	49a0      	ldr	r1, [pc, #640]	@ (800cfb4 <HAL_UART_IRQHandler+0x5d0>)
 800cd34:	400a      	ands	r2, r1
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3e:	f383 8810 	msr	PRIMASK, r3
}
 800cd42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd44:	f3ef 8310 	mrs	r3, PRIMASK
 800cd48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800cd4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd4c:	677b      	str	r3, [r7, #116]	@ 0x74
 800cd4e:	2301      	movs	r3, #1
 800cd50:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd54:	f383 8810 	msr	PRIMASK, r3
}
 800cd58:	46c0      	nop			@ (mov r8, r8)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	689a      	ldr	r2, [r3, #8]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2101      	movs	r1, #1
 800cd66:	438a      	bics	r2, r1
 800cd68:	609a      	str	r2, [r3, #8]
 800cd6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd6c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd70:	f383 8810 	msr	PRIMASK, r3
}
 800cd74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd76:	f3ef 8310 	mrs	r3, PRIMASK
 800cd7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800cd7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd7e:	673b      	str	r3, [r7, #112]	@ 0x70
 800cd80:	2301      	movs	r3, #1
 800cd82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd86:	f383 8810 	msr	PRIMASK, r3
}
 800cd8a:	46c0      	nop			@ (mov r8, r8)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689a      	ldr	r2, [r3, #8]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2140      	movs	r1, #64	@ 0x40
 800cd98:	438a      	bics	r2, r1
 800cd9a:	609a      	str	r2, [r3, #8]
 800cd9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd9e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cda0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cda2:	f383 8810 	msr	PRIMASK, r3
}
 800cda6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2280      	movs	r2, #128	@ 0x80
 800cdac:	2120      	movs	r1, #32
 800cdae:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdb6:	f3ef 8310 	mrs	r3, PRIMASK
 800cdba:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800cdbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cdc6:	f383 8810 	msr	PRIMASK, r3
}
 800cdca:	46c0      	nop			@ (mov r8, r8)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2110      	movs	r1, #16
 800cdd8:	438a      	bics	r2, r1
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cde0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cde2:	f383 8810 	msr	PRIMASK, r3
}
 800cde6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdec:	0018      	movs	r0, r3
 800cdee:	f7fb f8a1 	bl	8007f34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	22ac      	movs	r2, #172	@ 0xac
 800cdfc:	589b      	ldr	r3, [r3, r2]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	2158      	movs	r1, #88	@ 0x58
 800ce02:	5a51      	ldrh	r1, [r2, r1]
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	205a      	movs	r0, #90	@ 0x5a
 800ce08:	5a12      	ldrh	r2, [r2, r0]
 800ce0a:	b292      	uxth	r2, r2
 800ce0c:	1a8a      	subs	r2, r1, r2
 800ce0e:	b291      	uxth	r1, r2
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	0010      	movs	r0, r2
 800ce14:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce16:	e0c5      	b.n	800cfa4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2258      	movs	r2, #88	@ 0x58
 800ce1c:	5a99      	ldrh	r1, [r3, r2]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	225a      	movs	r2, #90	@ 0x5a
 800ce22:	5a9b      	ldrh	r3, [r3, r2]
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	208e      	movs	r0, #142	@ 0x8e
 800ce28:	183b      	adds	r3, r7, r0
 800ce2a:	1a8a      	subs	r2, r1, r2
 800ce2c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	225a      	movs	r2, #90	@ 0x5a
 800ce32:	5a9b      	ldrh	r3, [r3, r2]
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d100      	bne.n	800ce3c <HAL_UART_IRQHandler+0x458>
 800ce3a:	e0b5      	b.n	800cfa8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800ce3c:	183b      	adds	r3, r7, r0
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d100      	bne.n	800ce46 <HAL_UART_IRQHandler+0x462>
 800ce44:	e0b0      	b.n	800cfa8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce46:	f3ef 8310 	mrs	r3, PRIMASK
 800ce4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce4e:	2488      	movs	r4, #136	@ 0x88
 800ce50:	193a      	adds	r2, r7, r4
 800ce52:	6013      	str	r3, [r2, #0]
 800ce54:	2301      	movs	r3, #1
 800ce56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	f383 8810 	msr	PRIMASK, r3
}
 800ce5e:	46c0      	nop			@ (mov r8, r8)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4953      	ldr	r1, [pc, #332]	@ (800cfb8 <HAL_UART_IRQHandler+0x5d4>)
 800ce6c:	400a      	ands	r2, r1
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	193b      	adds	r3, r7, r4
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	f383 8810 	msr	PRIMASK, r3
}
 800ce7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ce82:	61bb      	str	r3, [r7, #24]
  return(result);
 800ce84:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce86:	2484      	movs	r4, #132	@ 0x84
 800ce88:	193a      	adds	r2, r7, r4
 800ce8a:	6013      	str	r3, [r2, #0]
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	f383 8810 	msr	PRIMASK, r3
}
 800ce96:	46c0      	nop			@ (mov r8, r8)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	689a      	ldr	r2, [r3, #8]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2101      	movs	r1, #1
 800cea4:	438a      	bics	r2, r1
 800cea6:	609a      	str	r2, [r3, #8]
 800cea8:	193b      	adds	r3, r7, r4
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceae:	6a3b      	ldr	r3, [r7, #32]
 800ceb0:	f383 8810 	msr	PRIMASK, r3
}
 800ceb4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2280      	movs	r2, #128	@ 0x80
 800ceba:	2120      	movs	r1, #32
 800cebc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceca:	f3ef 8310 	mrs	r3, PRIMASK
 800cece:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ced0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ced2:	2480      	movs	r4, #128	@ 0x80
 800ced4:	193a      	adds	r2, r7, r4
 800ced6:	6013      	str	r3, [r2, #0]
 800ced8:	2301      	movs	r3, #1
 800ceda:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cede:	f383 8810 	msr	PRIMASK, r3
}
 800cee2:	46c0      	nop			@ (mov r8, r8)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2110      	movs	r1, #16
 800cef0:	438a      	bics	r2, r1
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	193b      	adds	r3, r7, r4
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cefc:	f383 8810 	msr	PRIMASK, r3
}
 800cf00:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2202      	movs	r2, #2
 800cf06:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	22ac      	movs	r2, #172	@ 0xac
 800cf0c:	589b      	ldr	r3, [r3, r2]
 800cf0e:	183a      	adds	r2, r7, r0
 800cf10:	8811      	ldrh	r1, [r2, #0]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	0010      	movs	r0, r2
 800cf16:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf18:	e046      	b.n	800cfa8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cf1a:	23a4      	movs	r3, #164	@ 0xa4
 800cf1c:	18fb      	adds	r3, r7, r3
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	2380      	movs	r3, #128	@ 0x80
 800cf22:	035b      	lsls	r3, r3, #13
 800cf24:	4013      	ands	r3, r2
 800cf26:	d012      	beq.n	800cf4e <HAL_UART_IRQHandler+0x56a>
 800cf28:	239c      	movs	r3, #156	@ 0x9c
 800cf2a:	18fb      	adds	r3, r7, r3
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	2380      	movs	r3, #128	@ 0x80
 800cf30:	03db      	lsls	r3, r3, #15
 800cf32:	4013      	ands	r3, r2
 800cf34:	d00b      	beq.n	800cf4e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2280      	movs	r2, #128	@ 0x80
 800cf3c:	0352      	lsls	r2, r2, #13
 800cf3e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	22a8      	movs	r2, #168	@ 0xa8
 800cf44:	589b      	ldr	r3, [r3, r2]
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	0010      	movs	r0, r2
 800cf4a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf4c:	e02f      	b.n	800cfae <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cf4e:	23a4      	movs	r3, #164	@ 0xa4
 800cf50:	18fb      	adds	r3, r7, r3
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2280      	movs	r2, #128	@ 0x80
 800cf56:	4013      	ands	r3, r2
 800cf58:	d00f      	beq.n	800cf7a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cf5a:	23a0      	movs	r3, #160	@ 0xa0
 800cf5c:	18fb      	adds	r3, r7, r3
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2280      	movs	r2, #128	@ 0x80
 800cf62:	4013      	ands	r3, r2
 800cf64:	d009      	beq.n	800cf7a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d01e      	beq.n	800cfac <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	0010      	movs	r0, r2
 800cf76:	4798      	blx	r3
    }
    return;
 800cf78:	e018      	b.n	800cfac <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf7a:	23a4      	movs	r3, #164	@ 0xa4
 800cf7c:	18fb      	adds	r3, r7, r3
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2240      	movs	r2, #64	@ 0x40
 800cf82:	4013      	ands	r3, r2
 800cf84:	d013      	beq.n	800cfae <HAL_UART_IRQHandler+0x5ca>
 800cf86:	23a0      	movs	r3, #160	@ 0xa0
 800cf88:	18fb      	adds	r3, r7, r3
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2240      	movs	r2, #64	@ 0x40
 800cf8e:	4013      	ands	r3, r2
 800cf90:	d00d      	beq.n	800cfae <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	0018      	movs	r0, r3
 800cf96:	f000 ff98 	bl	800deca <UART_EndTransmit_IT>
    return;
 800cf9a:	e008      	b.n	800cfae <HAL_UART_IRQHandler+0x5ca>
      return;
 800cf9c:	46c0      	nop			@ (mov r8, r8)
 800cf9e:	e006      	b.n	800cfae <HAL_UART_IRQHandler+0x5ca>
    return;
 800cfa0:	46c0      	nop			@ (mov r8, r8)
 800cfa2:	e004      	b.n	800cfae <HAL_UART_IRQHandler+0x5ca>
      return;
 800cfa4:	46c0      	nop			@ (mov r8, r8)
 800cfa6:	e002      	b.n	800cfae <HAL_UART_IRQHandler+0x5ca>
      return;
 800cfa8:	46c0      	nop			@ (mov r8, r8)
 800cfaa:	e000      	b.n	800cfae <HAL_UART_IRQHandler+0x5ca>
    return;
 800cfac:	46c0      	nop			@ (mov r8, r8)
  }

}
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	b02b      	add	sp, #172	@ 0xac
 800cfb2:	bd90      	pop	{r4, r7, pc}
 800cfb4:	fffffeff 	.word	0xfffffeff
 800cfb8:	fffffedf 	.word	0xfffffedf

0800cfbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cfc4:	46c0      	nop			@ (mov r8, r8)
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	b002      	add	sp, #8
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfd4:	46c0      	nop			@ (mov r8, r8)
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	b002      	add	sp, #8
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfe4:	46c0      	nop			@ (mov r8, r8)
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	b002      	add	sp, #8
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800cff4:	46c0      	nop			@ (mov r8, r8)
 800cff6:	46bd      	mov	sp, r7
 800cff8:	b002      	add	sp, #8
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d004:	46c0      	nop			@ (mov r8, r8)
 800d006:	46bd      	mov	sp, r7
 800d008:	b002      	add	sp, #8
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d014:	46c0      	nop			@ (mov r8, r8)
 800d016:	46bd      	mov	sp, r7
 800d018:	b002      	add	sp, #8
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	000a      	movs	r2, r1
 800d026:	1cbb      	adds	r3, r7, #2
 800d028:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d02a:	46c0      	nop			@ (mov r8, r8)
 800d02c:	46bd      	mov	sp, r7
 800d02e:	b002      	add	sp, #8
 800d030:	bd80      	pop	{r7, pc}
	...

0800d034 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2188      	movs	r1, #136	@ 0x88
 800d040:	4a14      	ldr	r2, [pc, #80]	@ (800d094 <UART_InitCallbacksToDefault+0x60>)
 800d042:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	218c      	movs	r1, #140	@ 0x8c
 800d048:	4a13      	ldr	r2, [pc, #76]	@ (800d098 <UART_InitCallbacksToDefault+0x64>)
 800d04a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2190      	movs	r1, #144	@ 0x90
 800d050:	4a12      	ldr	r2, [pc, #72]	@ (800d09c <UART_InitCallbacksToDefault+0x68>)
 800d052:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2194      	movs	r1, #148	@ 0x94
 800d058:	4a11      	ldr	r2, [pc, #68]	@ (800d0a0 <UART_InitCallbacksToDefault+0x6c>)
 800d05a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2198      	movs	r1, #152	@ 0x98
 800d060:	4a10      	ldr	r2, [pc, #64]	@ (800d0a4 <UART_InitCallbacksToDefault+0x70>)
 800d062:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	219c      	movs	r1, #156	@ 0x9c
 800d068:	4a0f      	ldr	r2, [pc, #60]	@ (800d0a8 <UART_InitCallbacksToDefault+0x74>)
 800d06a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	21a0      	movs	r1, #160	@ 0xa0
 800d070:	4a0e      	ldr	r2, [pc, #56]	@ (800d0ac <UART_InitCallbacksToDefault+0x78>)
 800d072:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	21a4      	movs	r1, #164	@ 0xa4
 800d078:	4a0d      	ldr	r2, [pc, #52]	@ (800d0b0 <UART_InitCallbacksToDefault+0x7c>)
 800d07a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	21a8      	movs	r1, #168	@ 0xa8
 800d080:	4a0c      	ldr	r2, [pc, #48]	@ (800d0b4 <UART_InitCallbacksToDefault+0x80>)
 800d082:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	21ac      	movs	r1, #172	@ 0xac
 800d088:	4a0b      	ldr	r2, [pc, #44]	@ (800d0b8 <UART_InitCallbacksToDefault+0x84>)
 800d08a:	505a      	str	r2, [r3, r1]

}
 800d08c:	46c0      	nop			@ (mov r8, r8)
 800d08e:	46bd      	mov	sp, r7
 800d090:	b002      	add	sp, #8
 800d092:	bd80      	pop	{r7, pc}
 800d094:	0800cfcd 	.word	0x0800cfcd
 800d098:	0800cfbd 	.word	0x0800cfbd
 800d09c:	0800cfdd 	.word	0x0800cfdd
 800d0a0:	08003631 	.word	0x08003631
 800d0a4:	0800366d 	.word	0x0800366d
 800d0a8:	0800cfed 	.word	0x0800cfed
 800d0ac:	0800cffd 	.word	0x0800cffd
 800d0b0:	0800d00d 	.word	0x0800d00d
 800d0b4:	0800df25 	.word	0x0800df25
 800d0b8:	0800d01d 	.word	0x0800d01d

0800d0bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0bc:	b5b0      	push	{r4, r5, r7, lr}
 800d0be:	b08e      	sub	sp, #56	@ 0x38
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0c4:	231a      	movs	r3, #26
 800d0c6:	2218      	movs	r2, #24
 800d0c8:	189b      	adds	r3, r3, r2
 800d0ca:	19db      	adds	r3, r3, r7
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	689a      	ldr	r2, [r3, #8]
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	431a      	orrs	r2, r3
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	431a      	orrs	r2, r3
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4ac3      	ldr	r2, [pc, #780]	@ (800d3fc <UART_SetConfig+0x340>)
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	0019      	movs	r1, r3
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0fa:	430a      	orrs	r2, r1
 800d0fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	4abe      	ldr	r2, [pc, #760]	@ (800d400 <UART_SetConfig+0x344>)
 800d106:	4013      	ands	r3, r2
 800d108:	0019      	movs	r1, r3
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	68da      	ldr	r2, [r3, #12]
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	430a      	orrs	r2, r1
 800d114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	699b      	ldr	r3, [r3, #24]
 800d11a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4ab8      	ldr	r2, [pc, #736]	@ (800d404 <UART_SetConfig+0x348>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d004      	beq.n	800d130 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	6a1b      	ldr	r3, [r3, #32]
 800d12a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d12c:	4313      	orrs	r3, r2
 800d12e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	4ab4      	ldr	r2, [pc, #720]	@ (800d408 <UART_SetConfig+0x34c>)
 800d138:	4013      	ands	r3, r2
 800d13a:	0019      	movs	r1, r3
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d142:	430a      	orrs	r2, r1
 800d144:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4ab0      	ldr	r2, [pc, #704]	@ (800d40c <UART_SetConfig+0x350>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d131      	bne.n	800d1b4 <UART_SetConfig+0xf8>
 800d150:	4baf      	ldr	r3, [pc, #700]	@ (800d410 <UART_SetConfig+0x354>)
 800d152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d154:	2203      	movs	r2, #3
 800d156:	4013      	ands	r3, r2
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d01d      	beq.n	800d198 <UART_SetConfig+0xdc>
 800d15c:	d823      	bhi.n	800d1a6 <UART_SetConfig+0xea>
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d00c      	beq.n	800d17c <UART_SetConfig+0xc0>
 800d162:	d820      	bhi.n	800d1a6 <UART_SetConfig+0xea>
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <UART_SetConfig+0xb2>
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d00e      	beq.n	800d18a <UART_SetConfig+0xce>
 800d16c:	e01b      	b.n	800d1a6 <UART_SetConfig+0xea>
 800d16e:	231b      	movs	r3, #27
 800d170:	2218      	movs	r2, #24
 800d172:	189b      	adds	r3, r3, r2
 800d174:	19db      	adds	r3, r3, r7
 800d176:	2201      	movs	r2, #1
 800d178:	701a      	strb	r2, [r3, #0]
 800d17a:	e0b4      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d17c:	231b      	movs	r3, #27
 800d17e:	2218      	movs	r2, #24
 800d180:	189b      	adds	r3, r3, r2
 800d182:	19db      	adds	r3, r3, r7
 800d184:	2202      	movs	r2, #2
 800d186:	701a      	strb	r2, [r3, #0]
 800d188:	e0ad      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d18a:	231b      	movs	r3, #27
 800d18c:	2218      	movs	r2, #24
 800d18e:	189b      	adds	r3, r3, r2
 800d190:	19db      	adds	r3, r3, r7
 800d192:	2204      	movs	r2, #4
 800d194:	701a      	strb	r2, [r3, #0]
 800d196:	e0a6      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d198:	231b      	movs	r3, #27
 800d19a:	2218      	movs	r2, #24
 800d19c:	189b      	adds	r3, r3, r2
 800d19e:	19db      	adds	r3, r3, r7
 800d1a0:	2208      	movs	r2, #8
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	e09f      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d1a6:	231b      	movs	r3, #27
 800d1a8:	2218      	movs	r2, #24
 800d1aa:	189b      	adds	r3, r3, r2
 800d1ac:	19db      	adds	r3, r3, r7
 800d1ae:	2210      	movs	r2, #16
 800d1b0:	701a      	strb	r2, [r3, #0]
 800d1b2:	e098      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a96      	ldr	r2, [pc, #600]	@ (800d414 <UART_SetConfig+0x358>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d131      	bne.n	800d222 <UART_SetConfig+0x166>
 800d1be:	4b94      	ldr	r3, [pc, #592]	@ (800d410 <UART_SetConfig+0x354>)
 800d1c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1c2:	220c      	movs	r2, #12
 800d1c4:	4013      	ands	r3, r2
 800d1c6:	2b0c      	cmp	r3, #12
 800d1c8:	d01d      	beq.n	800d206 <UART_SetConfig+0x14a>
 800d1ca:	d823      	bhi.n	800d214 <UART_SetConfig+0x158>
 800d1cc:	2b08      	cmp	r3, #8
 800d1ce:	d00c      	beq.n	800d1ea <UART_SetConfig+0x12e>
 800d1d0:	d820      	bhi.n	800d214 <UART_SetConfig+0x158>
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <UART_SetConfig+0x120>
 800d1d6:	2b04      	cmp	r3, #4
 800d1d8:	d00e      	beq.n	800d1f8 <UART_SetConfig+0x13c>
 800d1da:	e01b      	b.n	800d214 <UART_SetConfig+0x158>
 800d1dc:	231b      	movs	r3, #27
 800d1de:	2218      	movs	r2, #24
 800d1e0:	189b      	adds	r3, r3, r2
 800d1e2:	19db      	adds	r3, r3, r7
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	701a      	strb	r2, [r3, #0]
 800d1e8:	e07d      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d1ea:	231b      	movs	r3, #27
 800d1ec:	2218      	movs	r2, #24
 800d1ee:	189b      	adds	r3, r3, r2
 800d1f0:	19db      	adds	r3, r3, r7
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	701a      	strb	r2, [r3, #0]
 800d1f6:	e076      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d1f8:	231b      	movs	r3, #27
 800d1fa:	2218      	movs	r2, #24
 800d1fc:	189b      	adds	r3, r3, r2
 800d1fe:	19db      	adds	r3, r3, r7
 800d200:	2204      	movs	r2, #4
 800d202:	701a      	strb	r2, [r3, #0]
 800d204:	e06f      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d206:	231b      	movs	r3, #27
 800d208:	2218      	movs	r2, #24
 800d20a:	189b      	adds	r3, r3, r2
 800d20c:	19db      	adds	r3, r3, r7
 800d20e:	2208      	movs	r2, #8
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e068      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d214:	231b      	movs	r3, #27
 800d216:	2218      	movs	r2, #24
 800d218:	189b      	adds	r3, r3, r2
 800d21a:	19db      	adds	r3, r3, r7
 800d21c:	2210      	movs	r2, #16
 800d21e:	701a      	strb	r2, [r3, #0]
 800d220:	e061      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a7c      	ldr	r2, [pc, #496]	@ (800d418 <UART_SetConfig+0x35c>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d106      	bne.n	800d23a <UART_SetConfig+0x17e>
 800d22c:	231b      	movs	r3, #27
 800d22e:	2218      	movs	r2, #24
 800d230:	189b      	adds	r3, r3, r2
 800d232:	19db      	adds	r3, r3, r7
 800d234:	2200      	movs	r2, #0
 800d236:	701a      	strb	r2, [r3, #0]
 800d238:	e055      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4a77      	ldr	r2, [pc, #476]	@ (800d41c <UART_SetConfig+0x360>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d106      	bne.n	800d252 <UART_SetConfig+0x196>
 800d244:	231b      	movs	r3, #27
 800d246:	2218      	movs	r2, #24
 800d248:	189b      	adds	r3, r3, r2
 800d24a:	19db      	adds	r3, r3, r7
 800d24c:	2200      	movs	r2, #0
 800d24e:	701a      	strb	r2, [r3, #0]
 800d250:	e049      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a6b      	ldr	r2, [pc, #428]	@ (800d404 <UART_SetConfig+0x348>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d13e      	bne.n	800d2da <UART_SetConfig+0x21e>
 800d25c:	4b6c      	ldr	r3, [pc, #432]	@ (800d410 <UART_SetConfig+0x354>)
 800d25e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d260:	23c0      	movs	r3, #192	@ 0xc0
 800d262:	011b      	lsls	r3, r3, #4
 800d264:	4013      	ands	r3, r2
 800d266:	22c0      	movs	r2, #192	@ 0xc0
 800d268:	0112      	lsls	r2, r2, #4
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d027      	beq.n	800d2be <UART_SetConfig+0x202>
 800d26e:	22c0      	movs	r2, #192	@ 0xc0
 800d270:	0112      	lsls	r2, r2, #4
 800d272:	4293      	cmp	r3, r2
 800d274:	d82a      	bhi.n	800d2cc <UART_SetConfig+0x210>
 800d276:	2280      	movs	r2, #128	@ 0x80
 800d278:	0112      	lsls	r2, r2, #4
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d011      	beq.n	800d2a2 <UART_SetConfig+0x1e6>
 800d27e:	2280      	movs	r2, #128	@ 0x80
 800d280:	0112      	lsls	r2, r2, #4
 800d282:	4293      	cmp	r3, r2
 800d284:	d822      	bhi.n	800d2cc <UART_SetConfig+0x210>
 800d286:	2b00      	cmp	r3, #0
 800d288:	d004      	beq.n	800d294 <UART_SetConfig+0x1d8>
 800d28a:	2280      	movs	r2, #128	@ 0x80
 800d28c:	00d2      	lsls	r2, r2, #3
 800d28e:	4293      	cmp	r3, r2
 800d290:	d00e      	beq.n	800d2b0 <UART_SetConfig+0x1f4>
 800d292:	e01b      	b.n	800d2cc <UART_SetConfig+0x210>
 800d294:	231b      	movs	r3, #27
 800d296:	2218      	movs	r2, #24
 800d298:	189b      	adds	r3, r3, r2
 800d29a:	19db      	adds	r3, r3, r7
 800d29c:	2200      	movs	r2, #0
 800d29e:	701a      	strb	r2, [r3, #0]
 800d2a0:	e021      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d2a2:	231b      	movs	r3, #27
 800d2a4:	2218      	movs	r2, #24
 800d2a6:	189b      	adds	r3, r3, r2
 800d2a8:	19db      	adds	r3, r3, r7
 800d2aa:	2202      	movs	r2, #2
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	e01a      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d2b0:	231b      	movs	r3, #27
 800d2b2:	2218      	movs	r2, #24
 800d2b4:	189b      	adds	r3, r3, r2
 800d2b6:	19db      	adds	r3, r3, r7
 800d2b8:	2204      	movs	r2, #4
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	e013      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d2be:	231b      	movs	r3, #27
 800d2c0:	2218      	movs	r2, #24
 800d2c2:	189b      	adds	r3, r3, r2
 800d2c4:	19db      	adds	r3, r3, r7
 800d2c6:	2208      	movs	r2, #8
 800d2c8:	701a      	strb	r2, [r3, #0]
 800d2ca:	e00c      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d2cc:	231b      	movs	r3, #27
 800d2ce:	2218      	movs	r2, #24
 800d2d0:	189b      	adds	r3, r3, r2
 800d2d2:	19db      	adds	r3, r3, r7
 800d2d4:	2210      	movs	r2, #16
 800d2d6:	701a      	strb	r2, [r3, #0]
 800d2d8:	e005      	b.n	800d2e6 <UART_SetConfig+0x22a>
 800d2da:	231b      	movs	r3, #27
 800d2dc:	2218      	movs	r2, #24
 800d2de:	189b      	adds	r3, r3, r2
 800d2e0:	19db      	adds	r3, r3, r7
 800d2e2:	2210      	movs	r2, #16
 800d2e4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2e6:	69fb      	ldr	r3, [r7, #28]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a46      	ldr	r2, [pc, #280]	@ (800d404 <UART_SetConfig+0x348>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d000      	beq.n	800d2f2 <UART_SetConfig+0x236>
 800d2f0:	e09a      	b.n	800d428 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d2f2:	231b      	movs	r3, #27
 800d2f4:	2218      	movs	r2, #24
 800d2f6:	189b      	adds	r3, r3, r2
 800d2f8:	19db      	adds	r3, r3, r7
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	2b08      	cmp	r3, #8
 800d2fe:	d01d      	beq.n	800d33c <UART_SetConfig+0x280>
 800d300:	dc20      	bgt.n	800d344 <UART_SetConfig+0x288>
 800d302:	2b04      	cmp	r3, #4
 800d304:	d015      	beq.n	800d332 <UART_SetConfig+0x276>
 800d306:	dc1d      	bgt.n	800d344 <UART_SetConfig+0x288>
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <UART_SetConfig+0x256>
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	d005      	beq.n	800d31c <UART_SetConfig+0x260>
 800d310:	e018      	b.n	800d344 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d312:	f7fe fc51 	bl	800bbb8 <HAL_RCC_GetPCLK1Freq>
 800d316:	0003      	movs	r3, r0
 800d318:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d31a:	e01c      	b.n	800d356 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d31c:	4b3c      	ldr	r3, [pc, #240]	@ (800d410 <UART_SetConfig+0x354>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2210      	movs	r2, #16
 800d322:	4013      	ands	r3, r2
 800d324:	d002      	beq.n	800d32c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800d326:	4b3e      	ldr	r3, [pc, #248]	@ (800d420 <UART_SetConfig+0x364>)
 800d328:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d32a:	e014      	b.n	800d356 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800d32c:	4b3d      	ldr	r3, [pc, #244]	@ (800d424 <UART_SetConfig+0x368>)
 800d32e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d330:	e011      	b.n	800d356 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d332:	f7fe fb91 	bl	800ba58 <HAL_RCC_GetSysClockFreq>
 800d336:	0003      	movs	r3, r0
 800d338:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d33a:	e00c      	b.n	800d356 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d33c:	2380      	movs	r3, #128	@ 0x80
 800d33e:	021b      	lsls	r3, r3, #8
 800d340:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d342:	e008      	b.n	800d356 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800d344:	2300      	movs	r3, #0
 800d346:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800d348:	231a      	movs	r3, #26
 800d34a:	2218      	movs	r2, #24
 800d34c:	189b      	adds	r3, r3, r2
 800d34e:	19db      	adds	r3, r3, r7
 800d350:	2201      	movs	r2, #1
 800d352:	701a      	strb	r2, [r3, #0]
        break;
 800d354:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d100      	bne.n	800d35e <UART_SetConfig+0x2a2>
 800d35c:	e133      	b.n	800d5c6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	685a      	ldr	r2, [r3, #4]
 800d362:	0013      	movs	r3, r2
 800d364:	005b      	lsls	r3, r3, #1
 800d366:	189b      	adds	r3, r3, r2
 800d368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d305      	bcc.n	800d37a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d376:	429a      	cmp	r2, r3
 800d378:	d906      	bls.n	800d388 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800d37a:	231a      	movs	r3, #26
 800d37c:	2218      	movs	r2, #24
 800d37e:	189b      	adds	r3, r3, r2
 800d380:	19db      	adds	r3, r3, r7
 800d382:	2201      	movs	r2, #1
 800d384:	701a      	strb	r2, [r3, #0]
 800d386:	e11e      	b.n	800d5c6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38a:	613b      	str	r3, [r7, #16]
 800d38c:	2300      	movs	r3, #0
 800d38e:	617b      	str	r3, [r7, #20]
 800d390:	6939      	ldr	r1, [r7, #16]
 800d392:	697a      	ldr	r2, [r7, #20]
 800d394:	000b      	movs	r3, r1
 800d396:	0e1b      	lsrs	r3, r3, #24
 800d398:	0010      	movs	r0, r2
 800d39a:	0205      	lsls	r5, r0, #8
 800d39c:	431d      	orrs	r5, r3
 800d39e:	000b      	movs	r3, r1
 800d3a0:	021c      	lsls	r4, r3, #8
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	085b      	lsrs	r3, r3, #1
 800d3a8:	60bb      	str	r3, [r7, #8]
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	60fb      	str	r3, [r7, #12]
 800d3ae:	68b8      	ldr	r0, [r7, #8]
 800d3b0:	68f9      	ldr	r1, [r7, #12]
 800d3b2:	1900      	adds	r0, r0, r4
 800d3b4:	4169      	adcs	r1, r5
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	603b      	str	r3, [r7, #0]
 800d3bc:	2300      	movs	r3, #0
 800d3be:	607b      	str	r3, [r7, #4]
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f7f3 f8aa 	bl	800051c <__aeabi_uldivmod>
 800d3c8:	0002      	movs	r2, r0
 800d3ca:	000b      	movs	r3, r1
 800d3cc:	0013      	movs	r3, r2
 800d3ce:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d3d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3d2:	23c0      	movs	r3, #192	@ 0xc0
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d309      	bcc.n	800d3ee <UART_SetConfig+0x332>
 800d3da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3dc:	2380      	movs	r3, #128	@ 0x80
 800d3de:	035b      	lsls	r3, r3, #13
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d204      	bcs.n	800d3ee <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3ea:	60da      	str	r2, [r3, #12]
 800d3ec:	e0eb      	b.n	800d5c6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800d3ee:	231a      	movs	r3, #26
 800d3f0:	2218      	movs	r2, #24
 800d3f2:	189b      	adds	r3, r3, r2
 800d3f4:	19db      	adds	r3, r3, r7
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	701a      	strb	r2, [r3, #0]
 800d3fa:	e0e4      	b.n	800d5c6 <UART_SetConfig+0x50a>
 800d3fc:	efff69f3 	.word	0xefff69f3
 800d400:	ffffcfff 	.word	0xffffcfff
 800d404:	40004800 	.word	0x40004800
 800d408:	fffff4ff 	.word	0xfffff4ff
 800d40c:	40013800 	.word	0x40013800
 800d410:	40021000 	.word	0x40021000
 800d414:	40004400 	.word	0x40004400
 800d418:	40004c00 	.word	0x40004c00
 800d41c:	40005000 	.word	0x40005000
 800d420:	003d0900 	.word	0x003d0900
 800d424:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	69da      	ldr	r2, [r3, #28]
 800d42c:	2380      	movs	r3, #128	@ 0x80
 800d42e:	021b      	lsls	r3, r3, #8
 800d430:	429a      	cmp	r2, r3
 800d432:	d000      	beq.n	800d436 <UART_SetConfig+0x37a>
 800d434:	e070      	b.n	800d518 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800d436:	231b      	movs	r3, #27
 800d438:	2218      	movs	r2, #24
 800d43a:	189b      	adds	r3, r3, r2
 800d43c:	19db      	adds	r3, r3, r7
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b08      	cmp	r3, #8
 800d442:	d822      	bhi.n	800d48a <UART_SetConfig+0x3ce>
 800d444:	009a      	lsls	r2, r3, #2
 800d446:	4b67      	ldr	r3, [pc, #412]	@ (800d5e4 <UART_SetConfig+0x528>)
 800d448:	18d3      	adds	r3, r2, r3
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d44e:	f7fe fbb3 	bl	800bbb8 <HAL_RCC_GetPCLK1Freq>
 800d452:	0003      	movs	r3, r0
 800d454:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d456:	e021      	b.n	800d49c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d458:	f7fe fbc4 	bl	800bbe4 <HAL_RCC_GetPCLK2Freq>
 800d45c:	0003      	movs	r3, r0
 800d45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d460:	e01c      	b.n	800d49c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d462:	4b61      	ldr	r3, [pc, #388]	@ (800d5e8 <UART_SetConfig+0x52c>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2210      	movs	r2, #16
 800d468:	4013      	ands	r3, r2
 800d46a:	d002      	beq.n	800d472 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800d46c:	4b5f      	ldr	r3, [pc, #380]	@ (800d5ec <UART_SetConfig+0x530>)
 800d46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d470:	e014      	b.n	800d49c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800d472:	4b5f      	ldr	r3, [pc, #380]	@ (800d5f0 <UART_SetConfig+0x534>)
 800d474:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d476:	e011      	b.n	800d49c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d478:	f7fe faee 	bl	800ba58 <HAL_RCC_GetSysClockFreq>
 800d47c:	0003      	movs	r3, r0
 800d47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d480:	e00c      	b.n	800d49c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d482:	2380      	movs	r3, #128	@ 0x80
 800d484:	021b      	lsls	r3, r3, #8
 800d486:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d488:	e008      	b.n	800d49c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800d48a:	2300      	movs	r3, #0
 800d48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800d48e:	231a      	movs	r3, #26
 800d490:	2218      	movs	r2, #24
 800d492:	189b      	adds	r3, r3, r2
 800d494:	19db      	adds	r3, r3, r7
 800d496:	2201      	movs	r2, #1
 800d498:	701a      	strb	r2, [r3, #0]
        break;
 800d49a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d100      	bne.n	800d4a4 <UART_SetConfig+0x3e8>
 800d4a2:	e090      	b.n	800d5c6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a6:	005a      	lsls	r2, r3, #1
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	085b      	lsrs	r3, r3, #1
 800d4ae:	18d2      	adds	r2, r2, r3
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	0019      	movs	r1, r3
 800d4b6:	0010      	movs	r0, r2
 800d4b8:	f7f2 fe42 	bl	8000140 <__udivsi3>
 800d4bc:	0003      	movs	r3, r0
 800d4be:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c2:	2b0f      	cmp	r3, #15
 800d4c4:	d921      	bls.n	800d50a <UART_SetConfig+0x44e>
 800d4c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4c8:	2380      	movs	r3, #128	@ 0x80
 800d4ca:	025b      	lsls	r3, r3, #9
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d21c      	bcs.n	800d50a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	200e      	movs	r0, #14
 800d4d6:	2418      	movs	r4, #24
 800d4d8:	1903      	adds	r3, r0, r4
 800d4da:	19db      	adds	r3, r3, r7
 800d4dc:	210f      	movs	r1, #15
 800d4de:	438a      	bics	r2, r1
 800d4e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e4:	085b      	lsrs	r3, r3, #1
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	2207      	movs	r2, #7
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	b299      	uxth	r1, r3
 800d4ee:	1903      	adds	r3, r0, r4
 800d4f0:	19db      	adds	r3, r3, r7
 800d4f2:	1902      	adds	r2, r0, r4
 800d4f4:	19d2      	adds	r2, r2, r7
 800d4f6:	8812      	ldrh	r2, [r2, #0]
 800d4f8:	430a      	orrs	r2, r1
 800d4fa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	1902      	adds	r2, r0, r4
 800d502:	19d2      	adds	r2, r2, r7
 800d504:	8812      	ldrh	r2, [r2, #0]
 800d506:	60da      	str	r2, [r3, #12]
 800d508:	e05d      	b.n	800d5c6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800d50a:	231a      	movs	r3, #26
 800d50c:	2218      	movs	r2, #24
 800d50e:	189b      	adds	r3, r3, r2
 800d510:	19db      	adds	r3, r3, r7
 800d512:	2201      	movs	r2, #1
 800d514:	701a      	strb	r2, [r3, #0]
 800d516:	e056      	b.n	800d5c6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d518:	231b      	movs	r3, #27
 800d51a:	2218      	movs	r2, #24
 800d51c:	189b      	adds	r3, r3, r2
 800d51e:	19db      	adds	r3, r3, r7
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2b08      	cmp	r3, #8
 800d524:	d822      	bhi.n	800d56c <UART_SetConfig+0x4b0>
 800d526:	009a      	lsls	r2, r3, #2
 800d528:	4b32      	ldr	r3, [pc, #200]	@ (800d5f4 <UART_SetConfig+0x538>)
 800d52a:	18d3      	adds	r3, r2, r3
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d530:	f7fe fb42 	bl	800bbb8 <HAL_RCC_GetPCLK1Freq>
 800d534:	0003      	movs	r3, r0
 800d536:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d538:	e021      	b.n	800d57e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d53a:	f7fe fb53 	bl	800bbe4 <HAL_RCC_GetPCLK2Freq>
 800d53e:	0003      	movs	r3, r0
 800d540:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d542:	e01c      	b.n	800d57e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d544:	4b28      	ldr	r3, [pc, #160]	@ (800d5e8 <UART_SetConfig+0x52c>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2210      	movs	r2, #16
 800d54a:	4013      	ands	r3, r2
 800d54c:	d002      	beq.n	800d554 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800d54e:	4b27      	ldr	r3, [pc, #156]	@ (800d5ec <UART_SetConfig+0x530>)
 800d550:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d552:	e014      	b.n	800d57e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800d554:	4b26      	ldr	r3, [pc, #152]	@ (800d5f0 <UART_SetConfig+0x534>)
 800d556:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d558:	e011      	b.n	800d57e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d55a:	f7fe fa7d 	bl	800ba58 <HAL_RCC_GetSysClockFreq>
 800d55e:	0003      	movs	r3, r0
 800d560:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d562:	e00c      	b.n	800d57e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d564:	2380      	movs	r3, #128	@ 0x80
 800d566:	021b      	lsls	r3, r3, #8
 800d568:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800d56a:	e008      	b.n	800d57e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800d56c:	2300      	movs	r3, #0
 800d56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800d570:	231a      	movs	r3, #26
 800d572:	2218      	movs	r2, #24
 800d574:	189b      	adds	r3, r3, r2
 800d576:	19db      	adds	r3, r3, r7
 800d578:	2201      	movs	r2, #1
 800d57a:	701a      	strb	r2, [r3, #0]
        break;
 800d57c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d020      	beq.n	800d5c6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	085a      	lsrs	r2, r3, #1
 800d58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58c:	18d2      	adds	r2, r2, r3
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	0019      	movs	r1, r3
 800d594:	0010      	movs	r0, r2
 800d596:	f7f2 fdd3 	bl	8000140 <__udivsi3>
 800d59a:	0003      	movs	r3, r0
 800d59c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a0:	2b0f      	cmp	r3, #15
 800d5a2:	d90a      	bls.n	800d5ba <UART_SetConfig+0x4fe>
 800d5a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5a6:	2380      	movs	r3, #128	@ 0x80
 800d5a8:	025b      	lsls	r3, r3, #9
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d205      	bcs.n	800d5ba <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	60da      	str	r2, [r3, #12]
 800d5b8:	e005      	b.n	800d5c6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800d5ba:	231a      	movs	r3, #26
 800d5bc:	2218      	movs	r2, #24
 800d5be:	189b      	adds	r3, r3, r2
 800d5c0:	19db      	adds	r3, r3, r7
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d5d2:	231a      	movs	r3, #26
 800d5d4:	2218      	movs	r2, #24
 800d5d6:	189b      	adds	r3, r3, r2
 800d5d8:	19db      	adds	r3, r3, r7
 800d5da:	781b      	ldrb	r3, [r3, #0]
}
 800d5dc:	0018      	movs	r0, r3
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	b00e      	add	sp, #56	@ 0x38
 800d5e2:	bdb0      	pop	{r4, r5, r7, pc}
 800d5e4:	08011adc 	.word	0x08011adc
 800d5e8:	40021000 	.word	0x40021000
 800d5ec:	003d0900 	.word	0x003d0900
 800d5f0:	00f42400 	.word	0x00f42400
 800d5f4:	08011b00 	.word	0x08011b00

0800d5f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d604:	2201      	movs	r2, #1
 800d606:	4013      	ands	r3, r2
 800d608:	d00b      	beq.n	800d622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	4a4a      	ldr	r2, [pc, #296]	@ (800d73c <UART_AdvFeatureConfig+0x144>)
 800d612:	4013      	ands	r3, r2
 800d614:	0019      	movs	r1, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	430a      	orrs	r2, r1
 800d620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d626:	2202      	movs	r2, #2
 800d628:	4013      	ands	r3, r2
 800d62a:	d00b      	beq.n	800d644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	4a43      	ldr	r2, [pc, #268]	@ (800d740 <UART_AdvFeatureConfig+0x148>)
 800d634:	4013      	ands	r3, r2
 800d636:	0019      	movs	r1, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	430a      	orrs	r2, r1
 800d642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d648:	2204      	movs	r2, #4
 800d64a:	4013      	ands	r3, r2
 800d64c:	d00b      	beq.n	800d666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	4a3b      	ldr	r2, [pc, #236]	@ (800d744 <UART_AdvFeatureConfig+0x14c>)
 800d656:	4013      	ands	r3, r2
 800d658:	0019      	movs	r1, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	430a      	orrs	r2, r1
 800d664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d66a:	2208      	movs	r2, #8
 800d66c:	4013      	ands	r3, r2
 800d66e:	d00b      	beq.n	800d688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	4a34      	ldr	r2, [pc, #208]	@ (800d748 <UART_AdvFeatureConfig+0x150>)
 800d678:	4013      	ands	r3, r2
 800d67a:	0019      	movs	r1, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	430a      	orrs	r2, r1
 800d686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d68c:	2210      	movs	r2, #16
 800d68e:	4013      	ands	r3, r2
 800d690:	d00b      	beq.n	800d6aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	4a2c      	ldr	r2, [pc, #176]	@ (800d74c <UART_AdvFeatureConfig+0x154>)
 800d69a:	4013      	ands	r3, r2
 800d69c:	0019      	movs	r1, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	430a      	orrs	r2, r1
 800d6a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	d00b      	beq.n	800d6cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	4a25      	ldr	r2, [pc, #148]	@ (800d750 <UART_AdvFeatureConfig+0x158>)
 800d6bc:	4013      	ands	r3, r2
 800d6be:	0019      	movs	r1, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	430a      	orrs	r2, r1
 800d6ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6d0:	2240      	movs	r2, #64	@ 0x40
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	d01d      	beq.n	800d712 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	4a1d      	ldr	r2, [pc, #116]	@ (800d754 <UART_AdvFeatureConfig+0x15c>)
 800d6de:	4013      	ands	r3, r2
 800d6e0:	0019      	movs	r1, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	430a      	orrs	r2, r1
 800d6ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d6f2:	2380      	movs	r3, #128	@ 0x80
 800d6f4:	035b      	lsls	r3, r3, #13
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d10b      	bne.n	800d712 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	4a15      	ldr	r2, [pc, #84]	@ (800d758 <UART_AdvFeatureConfig+0x160>)
 800d702:	4013      	ands	r3, r2
 800d704:	0019      	movs	r1, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	430a      	orrs	r2, r1
 800d710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d716:	2280      	movs	r2, #128	@ 0x80
 800d718:	4013      	ands	r3, r2
 800d71a:	d00b      	beq.n	800d734 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	4a0e      	ldr	r2, [pc, #56]	@ (800d75c <UART_AdvFeatureConfig+0x164>)
 800d724:	4013      	ands	r3, r2
 800d726:	0019      	movs	r1, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	430a      	orrs	r2, r1
 800d732:	605a      	str	r2, [r3, #4]
  }
}
 800d734:	46c0      	nop			@ (mov r8, r8)
 800d736:	46bd      	mov	sp, r7
 800d738:	b002      	add	sp, #8
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	fffdffff 	.word	0xfffdffff
 800d740:	fffeffff 	.word	0xfffeffff
 800d744:	fffbffff 	.word	0xfffbffff
 800d748:	ffff7fff 	.word	0xffff7fff
 800d74c:	ffffefff 	.word	0xffffefff
 800d750:	ffffdfff 	.word	0xffffdfff
 800d754:	ffefffff 	.word	0xffefffff
 800d758:	ff9fffff 	.word	0xff9fffff
 800d75c:	fff7ffff 	.word	0xfff7ffff

0800d760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b092      	sub	sp, #72	@ 0x48
 800d764:	af02      	add	r7, sp, #8
 800d766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2284      	movs	r2, #132	@ 0x84
 800d76c:	2100      	movs	r1, #0
 800d76e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d770:	f7fa f998 	bl	8007aa4 <HAL_GetTick>
 800d774:	0003      	movs	r3, r0
 800d776:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2208      	movs	r2, #8
 800d780:	4013      	ands	r3, r2
 800d782:	2b08      	cmp	r3, #8
 800d784:	d12c      	bne.n	800d7e0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d788:	2280      	movs	r2, #128	@ 0x80
 800d78a:	0391      	lsls	r1, r2, #14
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	4a46      	ldr	r2, [pc, #280]	@ (800d8a8 <UART_CheckIdleState+0x148>)
 800d790:	9200      	str	r2, [sp, #0]
 800d792:	2200      	movs	r2, #0
 800d794:	f000 f88c 	bl	800d8b0 <UART_WaitOnFlagUntilTimeout>
 800d798:	1e03      	subs	r3, r0, #0
 800d79a:	d021      	beq.n	800d7e0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d79c:	f3ef 8310 	mrs	r3, PRIMASK
 800d7a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d7a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ac:	f383 8810 	msr	PRIMASK, r3
}
 800d7b0:	46c0      	nop			@ (mov r8, r8)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2180      	movs	r1, #128	@ 0x80
 800d7be:	438a      	bics	r2, r1
 800d7c0:	601a      	str	r2, [r3, #0]
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c8:	f383 8810 	msr	PRIMASK, r3
}
 800d7cc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2220      	movs	r2, #32
 800d7d2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2278      	movs	r2, #120	@ 0x78
 800d7d8:	2100      	movs	r1, #0
 800d7da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7dc:	2303      	movs	r3, #3
 800d7de:	e05f      	b.n	800d8a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2204      	movs	r2, #4
 800d7e8:	4013      	ands	r3, r2
 800d7ea:	2b04      	cmp	r3, #4
 800d7ec:	d146      	bne.n	800d87c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7f0:	2280      	movs	r2, #128	@ 0x80
 800d7f2:	03d1      	lsls	r1, r2, #15
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	4a2c      	ldr	r2, [pc, #176]	@ (800d8a8 <UART_CheckIdleState+0x148>)
 800d7f8:	9200      	str	r2, [sp, #0]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f000 f858 	bl	800d8b0 <UART_WaitOnFlagUntilTimeout>
 800d800:	1e03      	subs	r3, r0, #0
 800d802:	d03b      	beq.n	800d87c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d804:	f3ef 8310 	mrs	r3, PRIMASK
 800d808:	60fb      	str	r3, [r7, #12]
  return(result);
 800d80a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d80c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d80e:	2301      	movs	r3, #1
 800d810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	f383 8810 	msr	PRIMASK, r3
}
 800d818:	46c0      	nop			@ (mov r8, r8)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4921      	ldr	r1, [pc, #132]	@ (800d8ac <UART_CheckIdleState+0x14c>)
 800d826:	400a      	ands	r2, r1
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	f383 8810 	msr	PRIMASK, r3
}
 800d834:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d836:	f3ef 8310 	mrs	r3, PRIMASK
 800d83a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d83c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d83e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d840:	2301      	movs	r3, #1
 800d842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	f383 8810 	msr	PRIMASK, r3
}
 800d84a:	46c0      	nop			@ (mov r8, r8)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	689a      	ldr	r2, [r3, #8]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2101      	movs	r1, #1
 800d858:	438a      	bics	r2, r1
 800d85a:	609a      	str	r2, [r3, #8]
 800d85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	f383 8810 	msr	PRIMASK, r3
}
 800d866:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2280      	movs	r2, #128	@ 0x80
 800d86c:	2120      	movs	r1, #32
 800d86e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2278      	movs	r2, #120	@ 0x78
 800d874:	2100      	movs	r1, #0
 800d876:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d878:	2303      	movs	r3, #3
 800d87a:	e011      	b.n	800d8a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2220      	movs	r2, #32
 800d880:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2280      	movs	r2, #128	@ 0x80
 800d886:	2120      	movs	r1, #32
 800d888:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2278      	movs	r2, #120	@ 0x78
 800d89a:	2100      	movs	r1, #0
 800d89c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	0018      	movs	r0, r3
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	b010      	add	sp, #64	@ 0x40
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	01ffffff 	.word	0x01ffffff
 800d8ac:	fffffedf 	.word	0xfffffedf

0800d8b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	603b      	str	r3, [r7, #0]
 800d8bc:	1dfb      	adds	r3, r7, #7
 800d8be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8c0:	e04b      	b.n	800d95a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	d048      	beq.n	800d95a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8c8:	f7fa f8ec 	bl	8007aa4 <HAL_GetTick>
 800d8cc:	0002      	movs	r2, r0
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d302      	bcc.n	800d8de <UART_WaitOnFlagUntilTimeout+0x2e>
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	e04b      	b.n	800d97a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2204      	movs	r2, #4
 800d8ea:	4013      	ands	r3, r2
 800d8ec:	d035      	beq.n	800d95a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	69db      	ldr	r3, [r3, #28]
 800d8f4:	2208      	movs	r2, #8
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	2b08      	cmp	r3, #8
 800d8fa:	d111      	bne.n	800d920 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2208      	movs	r2, #8
 800d902:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	0018      	movs	r0, r3
 800d908:	f000 f900 	bl	800db0c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2284      	movs	r2, #132	@ 0x84
 800d910:	2108      	movs	r1, #8
 800d912:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2278      	movs	r2, #120	@ 0x78
 800d918:	2100      	movs	r1, #0
 800d91a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e02c      	b.n	800d97a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	69da      	ldr	r2, [r3, #28]
 800d926:	2380      	movs	r3, #128	@ 0x80
 800d928:	011b      	lsls	r3, r3, #4
 800d92a:	401a      	ands	r2, r3
 800d92c:	2380      	movs	r3, #128	@ 0x80
 800d92e:	011b      	lsls	r3, r3, #4
 800d930:	429a      	cmp	r2, r3
 800d932:	d112      	bne.n	800d95a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2280      	movs	r2, #128	@ 0x80
 800d93a:	0112      	lsls	r2, r2, #4
 800d93c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	0018      	movs	r0, r3
 800d942:	f000 f8e3 	bl	800db0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2284      	movs	r2, #132	@ 0x84
 800d94a:	2120      	movs	r1, #32
 800d94c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2278      	movs	r2, #120	@ 0x78
 800d952:	2100      	movs	r1, #0
 800d954:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d956:	2303      	movs	r3, #3
 800d958:	e00f      	b.n	800d97a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	69db      	ldr	r3, [r3, #28]
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	4013      	ands	r3, r2
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	1ad3      	subs	r3, r2, r3
 800d968:	425a      	negs	r2, r3
 800d96a:	4153      	adcs	r3, r2
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	001a      	movs	r2, r3
 800d970:	1dfb      	adds	r3, r7, #7
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	429a      	cmp	r2, r3
 800d976:	d0a4      	beq.n	800d8c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	0018      	movs	r0, r3
 800d97c:	46bd      	mov	sp, r7
 800d97e:	b004      	add	sp, #16
 800d980:	bd80      	pop	{r7, pc}
	...

0800d984 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b090      	sub	sp, #64	@ 0x40
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	1dbb      	adds	r3, r7, #6
 800d990:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	1dba      	adds	r2, r7, #6
 800d99c:	2158      	movs	r1, #88	@ 0x58
 800d99e:	8812      	ldrh	r2, [r2, #0]
 800d9a0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2284      	movs	r2, #132	@ 0x84
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2280      	movs	r2, #128	@ 0x80
 800d9ae:	2122      	movs	r1, #34	@ 0x22
 800d9b0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d028      	beq.n	800da0c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9be:	4a3e      	ldr	r2, [pc, #248]	@ (800dab8 <UART_Start_Receive_DMA+0x134>)
 800d9c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9c6:	4a3d      	ldr	r2, [pc, #244]	@ (800dabc <UART_Start_Receive_DMA+0x138>)
 800d9c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9ce:	4a3c      	ldr	r2, [pc, #240]	@ (800dac0 <UART_Start_Receive_DMA+0x13c>)
 800d9d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	3324      	adds	r3, #36	@ 0x24
 800d9e4:	0019      	movs	r1, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ea:	001a      	movs	r2, r3
 800d9ec:	1dbb      	adds	r3, r7, #6
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	f7fa fa3a 	bl	8007e68 <HAL_DMA_Start_IT>
 800d9f4:	1e03      	subs	r3, r0, #0
 800d9f6:	d009      	beq.n	800da0c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2284      	movs	r2, #132	@ 0x84
 800d9fc:	2110      	movs	r1, #16
 800d9fe:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2280      	movs	r2, #128	@ 0x80
 800da04:	2120      	movs	r1, #32
 800da06:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800da08:	2301      	movs	r3, #1
 800da0a:	e050      	b.n	800daae <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d019      	beq.n	800da48 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da14:	f3ef 8310 	mrs	r3, PRIMASK
 800da18:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800da1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da1e:	2301      	movs	r3, #1
 800da20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da24:	f383 8810 	msr	PRIMASK, r3
}
 800da28:	46c0      	nop			@ (mov r8, r8)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2180      	movs	r1, #128	@ 0x80
 800da36:	0049      	lsls	r1, r1, #1
 800da38:	430a      	orrs	r2, r1
 800da3a:	601a      	str	r2, [r3, #0]
 800da3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da3e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da42:	f383 8810 	msr	PRIMASK, r3
}
 800da46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da48:	f3ef 8310 	mrs	r3, PRIMASK
 800da4c:	613b      	str	r3, [r7, #16]
  return(result);
 800da4e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da50:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da52:	2301      	movs	r3, #1
 800da54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	f383 8810 	msr	PRIMASK, r3
}
 800da5c:	46c0      	nop			@ (mov r8, r8)
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	689a      	ldr	r2, [r3, #8]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2101      	movs	r1, #1
 800da6a:	430a      	orrs	r2, r1
 800da6c:	609a      	str	r2, [r3, #8]
 800da6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	f383 8810 	msr	PRIMASK, r3
}
 800da78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da7a:	f3ef 8310 	mrs	r3, PRIMASK
 800da7e:	61fb      	str	r3, [r7, #28]
  return(result);
 800da80:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da82:	637b      	str	r3, [r7, #52]	@ 0x34
 800da84:	2301      	movs	r3, #1
 800da86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	f383 8810 	msr	PRIMASK, r3
}
 800da8e:	46c0      	nop			@ (mov r8, r8)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	689a      	ldr	r2, [r3, #8]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2140      	movs	r1, #64	@ 0x40
 800da9c:	430a      	orrs	r2, r1
 800da9e:	609a      	str	r2, [r3, #8]
 800daa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa6:	f383 8810 	msr	PRIMASK, r3
}
 800daaa:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	0018      	movs	r0, r3
 800dab0:	46bd      	mov	sp, r7
 800dab2:	b010      	add	sp, #64	@ 0x40
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	46c0      	nop			@ (mov r8, r8)
 800dab8:	0800dc95 	.word	0x0800dc95
 800dabc:	0800ddc9 	.word	0x0800ddc9
 800dac0:	0800de11 	.word	0x0800de11

0800dac4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b086      	sub	sp, #24
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dacc:	f3ef 8310 	mrs	r3, PRIMASK
 800dad0:	60bb      	str	r3, [r7, #8]
  return(result);
 800dad2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dad4:	617b      	str	r3, [r7, #20]
 800dad6:	2301      	movs	r3, #1
 800dad8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f383 8810 	msr	PRIMASK, r3
}
 800dae0:	46c0      	nop			@ (mov r8, r8)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	21c0      	movs	r1, #192	@ 0xc0
 800daee:	438a      	bics	r2, r1
 800daf0:	601a      	str	r2, [r3, #0]
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	f383 8810 	msr	PRIMASK, r3
}
 800dafc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2220      	movs	r2, #32
 800db02:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800db04:	46c0      	nop			@ (mov r8, r8)
 800db06:	46bd      	mov	sp, r7
 800db08:	b006      	add	sp, #24
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08e      	sub	sp, #56	@ 0x38
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db14:	f3ef 8310 	mrs	r3, PRIMASK
 800db18:	617b      	str	r3, [r7, #20]
  return(result);
 800db1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800db1e:	2301      	movs	r3, #1
 800db20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	f383 8810 	msr	PRIMASK, r3
}
 800db28:	46c0      	nop			@ (mov r8, r8)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4926      	ldr	r1, [pc, #152]	@ (800dbd0 <UART_EndRxTransfer+0xc4>)
 800db36:	400a      	ands	r2, r1
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	f383 8810 	msr	PRIMASK, r3
}
 800db44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db46:	f3ef 8310 	mrs	r3, PRIMASK
 800db4a:	623b      	str	r3, [r7, #32]
  return(result);
 800db4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800db50:	2301      	movs	r3, #1
 800db52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db56:	f383 8810 	msr	PRIMASK, r3
}
 800db5a:	46c0      	nop			@ (mov r8, r8)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	689a      	ldr	r2, [r3, #8]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2101      	movs	r1, #1
 800db68:	438a      	bics	r2, r1
 800db6a:	609a      	str	r2, [r3, #8]
 800db6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db72:	f383 8810 	msr	PRIMASK, r3
}
 800db76:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d118      	bne.n	800dbb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db80:	f3ef 8310 	mrs	r3, PRIMASK
 800db84:	60bb      	str	r3, [r7, #8]
  return(result);
 800db86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db8a:	2301      	movs	r3, #1
 800db8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f383 8810 	msr	PRIMASK, r3
}
 800db94:	46c0      	nop			@ (mov r8, r8)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2110      	movs	r1, #16
 800dba2:	438a      	bics	r2, r1
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	f383 8810 	msr	PRIMASK, r3
}
 800dbb0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2280      	movs	r2, #128	@ 0x80
 800dbb6:	2120      	movs	r1, #32
 800dbb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800dbc6:	46c0      	nop			@ (mov r8, r8)
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	b00e      	add	sp, #56	@ 0x38
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	46c0      	nop			@ (mov r8, r8)
 800dbd0:	fffffedf 	.word	0xfffffedf

0800dbd4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08c      	sub	sp, #48	@ 0x30
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2220      	movs	r2, #32
 800dbea:	4013      	ands	r3, r2
 800dbec:	d135      	bne.n	800dc5a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800dbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf0:	2252      	movs	r2, #82	@ 0x52
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbf6:	f3ef 8310 	mrs	r3, PRIMASK
 800dbfa:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbfc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dbfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc00:	2301      	movs	r3, #1
 800dc02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	f383 8810 	msr	PRIMASK, r3
}
 800dc0a:	46c0      	nop			@ (mov r8, r8)
 800dc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	689a      	ldr	r2, [r3, #8]
 800dc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2180      	movs	r1, #128	@ 0x80
 800dc18:	438a      	bics	r2, r1
 800dc1a:	609a      	str	r2, [r3, #8]
 800dc1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	f383 8810 	msr	PRIMASK, r3
}
 800dc26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc28:	f3ef 8310 	mrs	r3, PRIMASK
 800dc2c:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc2e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc30:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc32:	2301      	movs	r3, #1
 800dc34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	f383 8810 	msr	PRIMASK, r3
}
 800dc3c:	46c0      	nop			@ (mov r8, r8)
 800dc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2140      	movs	r1, #64	@ 0x40
 800dc4a:	430a      	orrs	r2, r1
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc52:	6a3b      	ldr	r3, [r7, #32]
 800dc54:	f383 8810 	msr	PRIMASK, r3
}
 800dc58:	e006      	b.n	800dc68 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800dc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc5c:	228c      	movs	r2, #140	@ 0x8c
 800dc5e:	589b      	ldr	r3, [r3, r2]
 800dc60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc62:	0010      	movs	r0, r2
 800dc64:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc66:	46c0      	nop			@ (mov r8, r8)
 800dc68:	46c0      	nop			@ (mov r8, r8)
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	b00c      	add	sp, #48	@ 0x30
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2288      	movs	r2, #136	@ 0x88
 800dc82:	589b      	ldr	r3, [r3, r2]
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	0010      	movs	r0, r2
 800dc88:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc8a:	46c0      	nop			@ (mov r8, r8)
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	b004      	add	sp, #16
 800dc90:	bd80      	pop	{r7, pc}
	...

0800dc94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b094      	sub	sp, #80	@ 0x50
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2220      	movs	r2, #32
 800dcaa:	4013      	ands	r3, r2
 800dcac:	d16f      	bne.n	800dd8e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800dcae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcb0:	225a      	movs	r2, #90	@ 0x5a
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcb6:	f3ef 8310 	mrs	r3, PRIMASK
 800dcba:	61bb      	str	r3, [r7, #24]
  return(result);
 800dcbc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dcbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	f383 8810 	msr	PRIMASK, r3
}
 800dcca:	46c0      	nop			@ (mov r8, r8)
 800dccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	493b      	ldr	r1, [pc, #236]	@ (800ddc4 <UART_DMAReceiveCplt+0x130>)
 800dcd8:	400a      	ands	r2, r1
 800dcda:	601a      	str	r2, [r3, #0]
 800dcdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcde:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dce0:	6a3b      	ldr	r3, [r7, #32]
 800dce2:	f383 8810 	msr	PRIMASK, r3
}
 800dce6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dce8:	f3ef 8310 	mrs	r3, PRIMASK
 800dcec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800dcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf8:	f383 8810 	msr	PRIMASK, r3
}
 800dcfc:	46c0      	nop			@ (mov r8, r8)
 800dcfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	689a      	ldr	r2, [r3, #8]
 800dd04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2101      	movs	r1, #1
 800dd0a:	438a      	bics	r2, r1
 800dd0c:	609a      	str	r2, [r3, #8]
 800dd0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd14:	f383 8810 	msr	PRIMASK, r3
}
 800dd18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd1a:	f3ef 8310 	mrs	r3, PRIMASK
 800dd1e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800dd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd22:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd24:	2301      	movs	r3, #1
 800dd26:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd2a:	f383 8810 	msr	PRIMASK, r3
}
 800dd2e:	46c0      	nop			@ (mov r8, r8)
 800dd30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	689a      	ldr	r2, [r3, #8]
 800dd36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2140      	movs	r1, #64	@ 0x40
 800dd3c:	438a      	bics	r2, r1
 800dd3e:	609a      	str	r2, [r3, #8]
 800dd40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd42:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd46:	f383 8810 	msr	PRIMASK, r3
}
 800dd4a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd4e:	2280      	movs	r2, #128	@ 0x80
 800dd50:	2120      	movs	r1, #32
 800dd52:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d118      	bne.n	800dd8e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd5c:	f3ef 8310 	mrs	r3, PRIMASK
 800dd60:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd62:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd66:	2301      	movs	r3, #1
 800dd68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	f383 8810 	msr	PRIMASK, r3
}
 800dd70:	46c0      	nop			@ (mov r8, r8)
 800dd72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2110      	movs	r1, #16
 800dd7e:	438a      	bics	r2, r1
 800dd80:	601a      	str	r2, [r3, #0]
 800dd82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	f383 8810 	msr	PRIMASK, r3
}
 800dd8c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd90:	2200      	movs	r2, #0
 800dd92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d109      	bne.n	800ddb0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800dd9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd9e:	22ac      	movs	r2, #172	@ 0xac
 800dda0:	589b      	ldr	r3, [r3, r2]
 800dda2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dda4:	2158      	movs	r1, #88	@ 0x58
 800dda6:	5a51      	ldrh	r1, [r2, r1]
 800dda8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ddaa:	0010      	movs	r0, r2
 800ddac:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ddae:	e005      	b.n	800ddbc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800ddb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddb2:	2294      	movs	r2, #148	@ 0x94
 800ddb4:	589b      	ldr	r3, [r3, r2]
 800ddb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ddb8:	0010      	movs	r0, r2
 800ddba:	4798      	blx	r3
}
 800ddbc:	46c0      	nop			@ (mov r8, r8)
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	b014      	add	sp, #80	@ 0x50
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	fffffeff 	.word	0xfffffeff

0800ddc8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddd4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d10b      	bne.n	800ddfc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	22ac      	movs	r2, #172	@ 0xac
 800dde8:	589b      	ldr	r3, [r3, r2]
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	2158      	movs	r1, #88	@ 0x58
 800ddee:	5a52      	ldrh	r2, [r2, r1]
 800ddf0:	0852      	lsrs	r2, r2, #1
 800ddf2:	b291      	uxth	r1, r2
 800ddf4:	68fa      	ldr	r2, [r7, #12]
 800ddf6:	0010      	movs	r0, r2
 800ddf8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ddfa:	e005      	b.n	800de08 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2290      	movs	r2, #144	@ 0x90
 800de00:	589b      	ldr	r3, [r3, r2]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	0010      	movs	r0, r2
 800de06:	4798      	blx	r3
}
 800de08:	46c0      	nop			@ (mov r8, r8)
 800de0a:	46bd      	mov	sp, r7
 800de0c:	b004      	add	sp, #16
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de1c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800de22:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	2280      	movs	r2, #128	@ 0x80
 800de28:	589b      	ldr	r3, [r3, r2]
 800de2a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	2280      	movs	r2, #128	@ 0x80
 800de34:	4013      	ands	r3, r2
 800de36:	2b80      	cmp	r3, #128	@ 0x80
 800de38:	d10a      	bne.n	800de50 <UART_DMAError+0x40>
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	2b21      	cmp	r3, #33	@ 0x21
 800de3e:	d107      	bne.n	800de50 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	2252      	movs	r2, #82	@ 0x52
 800de44:	2100      	movs	r1, #0
 800de46:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	0018      	movs	r0, r3
 800de4c:	f7ff fe3a 	bl	800dac4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	2240      	movs	r2, #64	@ 0x40
 800de58:	4013      	ands	r3, r2
 800de5a:	2b40      	cmp	r3, #64	@ 0x40
 800de5c:	d10a      	bne.n	800de74 <UART_DMAError+0x64>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b22      	cmp	r3, #34	@ 0x22
 800de62:	d107      	bne.n	800de74 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	225a      	movs	r2, #90	@ 0x5a
 800de68:	2100      	movs	r1, #0
 800de6a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	0018      	movs	r0, r3
 800de70:	f7ff fe4c 	bl	800db0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	2284      	movs	r2, #132	@ 0x84
 800de78:	589b      	ldr	r3, [r3, r2]
 800de7a:	2210      	movs	r2, #16
 800de7c:	431a      	orrs	r2, r3
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	2184      	movs	r1, #132	@ 0x84
 800de82:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	2298      	movs	r2, #152	@ 0x98
 800de88:	589b      	ldr	r3, [r3, r2]
 800de8a:	697a      	ldr	r2, [r7, #20]
 800de8c:	0010      	movs	r0, r2
 800de8e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de90:	46c0      	nop			@ (mov r8, r8)
 800de92:	46bd      	mov	sp, r7
 800de94:	b006      	add	sp, #24
 800de96:	bd80      	pop	{r7, pc}

0800de98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	225a      	movs	r2, #90	@ 0x5a
 800deaa:	2100      	movs	r1, #0
 800deac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2252      	movs	r2, #82	@ 0x52
 800deb2:	2100      	movs	r1, #0
 800deb4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2298      	movs	r2, #152	@ 0x98
 800deba:	589b      	ldr	r3, [r3, r2]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	0010      	movs	r0, r2
 800dec0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dec2:	46c0      	nop			@ (mov r8, r8)
 800dec4:	46bd      	mov	sp, r7
 800dec6:	b004      	add	sp, #16
 800dec8:	bd80      	pop	{r7, pc}

0800deca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b086      	sub	sp, #24
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ded2:	f3ef 8310 	mrs	r3, PRIMASK
 800ded6:	60bb      	str	r3, [r7, #8]
  return(result);
 800ded8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800deda:	617b      	str	r3, [r7, #20]
 800dedc:	2301      	movs	r3, #1
 800dede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f383 8810 	msr	PRIMASK, r3
}
 800dee6:	46c0      	nop			@ (mov r8, r8)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2140      	movs	r1, #64	@ 0x40
 800def4:	438a      	bics	r2, r1
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	f383 8810 	msr	PRIMASK, r3
}
 800df02:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2220      	movs	r2, #32
 800df08:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	228c      	movs	r2, #140	@ 0x8c
 800df14:	589b      	ldr	r3, [r3, r2]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	0010      	movs	r0, r2
 800df1a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df1c:	46c0      	nop			@ (mov r8, r8)
 800df1e:	46bd      	mov	sp, r7
 800df20:	b006      	add	sp, #24
 800df22:	bd80      	pop	{r7, pc}

0800df24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800df2c:	46c0      	nop			@ (mov r8, r8)
 800df2e:	46bd      	mov	sp, r7
 800df30:	b002      	add	sp, #8
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800df3c:	4b09      	ldr	r3, [pc, #36]	@ (800df64 <USB_DisableGlobalInt+0x30>)
 800df3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2240      	movs	r2, #64	@ 0x40
 800df44:	5a9b      	ldrh	r3, [r3, r2]
 800df46:	b29b      	uxth	r3, r3
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	b292      	uxth	r2, r2
 800df4c:	43d2      	mvns	r2, r2
 800df4e:	b292      	uxth	r2, r2
 800df50:	4013      	ands	r3, r2
 800df52:	b299      	uxth	r1, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2240      	movs	r2, #64	@ 0x40
 800df58:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	0018      	movs	r0, r3
 800df5e:	46bd      	mov	sp, r7
 800df60:	b004      	add	sp, #16
 800df62:	bd80      	pop	{r7, pc}
 800df64:	0000bf80 	.word	0x0000bf80

0800df68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800df68:	b084      	sub	sp, #16
 800df6a:	b590      	push	{r4, r7, lr}
 800df6c:	b083      	sub	sp, #12
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
 800df72:	2004      	movs	r0, #4
 800df74:	2410      	movs	r4, #16
 800df76:	1900      	adds	r0, r0, r4
 800df78:	2408      	movs	r4, #8
 800df7a:	46a4      	mov	ip, r4
 800df7c:	44bc      	add	ip, r7
 800df7e:	4460      	add	r0, ip
 800df80:	6001      	str	r1, [r0, #0]
 800df82:	6042      	str	r2, [r0, #4]
 800df84:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2240      	movs	r2, #64	@ 0x40
 800df8a:	2101      	movs	r1, #1
 800df8c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2240      	movs	r2, #64	@ 0x40
 800df92:	2100      	movs	r1, #0
 800df94:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2244      	movs	r2, #68	@ 0x44
 800df9a:	2100      	movs	r1, #0
 800df9c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2250      	movs	r2, #80	@ 0x50
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	0018      	movs	r0, r3
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	b003      	add	sp, #12
 800dfae:	bc90      	pop	{r4, r7}
 800dfb0:	bc08      	pop	{r3}
 800dfb2:	b004      	add	sp, #16
 800dfb4:	4718      	bx	r3

0800dfb6 <__cvt>:
 800dfb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfb8:	001f      	movs	r7, r3
 800dfba:	2300      	movs	r3, #0
 800dfbc:	0016      	movs	r6, r2
 800dfbe:	b08b      	sub	sp, #44	@ 0x2c
 800dfc0:	429f      	cmp	r7, r3
 800dfc2:	da04      	bge.n	800dfce <__cvt+0x18>
 800dfc4:	2180      	movs	r1, #128	@ 0x80
 800dfc6:	0609      	lsls	r1, r1, #24
 800dfc8:	187b      	adds	r3, r7, r1
 800dfca:	001f      	movs	r7, r3
 800dfcc:	232d      	movs	r3, #45	@ 0x2d
 800dfce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dfd0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800dfd2:	7013      	strb	r3, [r2, #0]
 800dfd4:	2320      	movs	r3, #32
 800dfd6:	2203      	movs	r2, #3
 800dfd8:	439d      	bics	r5, r3
 800dfda:	2d46      	cmp	r5, #70	@ 0x46
 800dfdc:	d007      	beq.n	800dfee <__cvt+0x38>
 800dfde:	002b      	movs	r3, r5
 800dfe0:	3b45      	subs	r3, #69	@ 0x45
 800dfe2:	4259      	negs	r1, r3
 800dfe4:	414b      	adcs	r3, r1
 800dfe6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800dfe8:	3a01      	subs	r2, #1
 800dfea:	18cb      	adds	r3, r1, r3
 800dfec:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfee:	ab09      	add	r3, sp, #36	@ 0x24
 800dff0:	9304      	str	r3, [sp, #16]
 800dff2:	ab08      	add	r3, sp, #32
 800dff4:	9303      	str	r3, [sp, #12]
 800dff6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dff8:	9200      	str	r2, [sp, #0]
 800dffa:	9302      	str	r3, [sp, #8]
 800dffc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dffe:	0032      	movs	r2, r6
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	003b      	movs	r3, r7
 800e004:	f000 fefc 	bl	800ee00 <_dtoa_r>
 800e008:	0004      	movs	r4, r0
 800e00a:	2d47      	cmp	r5, #71	@ 0x47
 800e00c:	d11b      	bne.n	800e046 <__cvt+0x90>
 800e00e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e010:	07db      	lsls	r3, r3, #31
 800e012:	d511      	bpl.n	800e038 <__cvt+0x82>
 800e014:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e016:	18c3      	adds	r3, r0, r3
 800e018:	9307      	str	r3, [sp, #28]
 800e01a:	2200      	movs	r2, #0
 800e01c:	2300      	movs	r3, #0
 800e01e:	0030      	movs	r0, r6
 800e020:	0039      	movs	r1, r7
 800e022:	f7f2 fa13 	bl	800044c <__aeabi_dcmpeq>
 800e026:	2800      	cmp	r0, #0
 800e028:	d001      	beq.n	800e02e <__cvt+0x78>
 800e02a:	9b07      	ldr	r3, [sp, #28]
 800e02c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e02e:	2230      	movs	r2, #48	@ 0x30
 800e030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e032:	9907      	ldr	r1, [sp, #28]
 800e034:	428b      	cmp	r3, r1
 800e036:	d320      	bcc.n	800e07a <__cvt+0xc4>
 800e038:	0020      	movs	r0, r4
 800e03a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e03c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e03e:	1b1b      	subs	r3, r3, r4
 800e040:	6013      	str	r3, [r2, #0]
 800e042:	b00b      	add	sp, #44	@ 0x2c
 800e044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e046:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e048:	18c3      	adds	r3, r0, r3
 800e04a:	9307      	str	r3, [sp, #28]
 800e04c:	2d46      	cmp	r5, #70	@ 0x46
 800e04e:	d1e4      	bne.n	800e01a <__cvt+0x64>
 800e050:	7803      	ldrb	r3, [r0, #0]
 800e052:	2b30      	cmp	r3, #48	@ 0x30
 800e054:	d10c      	bne.n	800e070 <__cvt+0xba>
 800e056:	2200      	movs	r2, #0
 800e058:	2300      	movs	r3, #0
 800e05a:	0030      	movs	r0, r6
 800e05c:	0039      	movs	r1, r7
 800e05e:	f7f2 f9f5 	bl	800044c <__aeabi_dcmpeq>
 800e062:	2800      	cmp	r0, #0
 800e064:	d104      	bne.n	800e070 <__cvt+0xba>
 800e066:	2301      	movs	r3, #1
 800e068:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e06a:	1a9b      	subs	r3, r3, r2
 800e06c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e072:	9a07      	ldr	r2, [sp, #28]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	18d3      	adds	r3, r2, r3
 800e078:	e7ce      	b.n	800e018 <__cvt+0x62>
 800e07a:	1c59      	adds	r1, r3, #1
 800e07c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e07e:	701a      	strb	r2, [r3, #0]
 800e080:	e7d6      	b.n	800e030 <__cvt+0x7a>

0800e082 <__exponent>:
 800e082:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e084:	232b      	movs	r3, #43	@ 0x2b
 800e086:	0005      	movs	r5, r0
 800e088:	000c      	movs	r4, r1
 800e08a:	b085      	sub	sp, #20
 800e08c:	7002      	strb	r2, [r0, #0]
 800e08e:	2900      	cmp	r1, #0
 800e090:	da01      	bge.n	800e096 <__exponent+0x14>
 800e092:	424c      	negs	r4, r1
 800e094:	3302      	adds	r3, #2
 800e096:	706b      	strb	r3, [r5, #1]
 800e098:	2c09      	cmp	r4, #9
 800e09a:	dd2c      	ble.n	800e0f6 <__exponent+0x74>
 800e09c:	ab02      	add	r3, sp, #8
 800e09e:	1dde      	adds	r6, r3, #7
 800e0a0:	0020      	movs	r0, r4
 800e0a2:	210a      	movs	r1, #10
 800e0a4:	f7f2 f9bc 	bl	8000420 <__aeabi_idivmod>
 800e0a8:	0037      	movs	r7, r6
 800e0aa:	3130      	adds	r1, #48	@ 0x30
 800e0ac:	3e01      	subs	r6, #1
 800e0ae:	0020      	movs	r0, r4
 800e0b0:	7031      	strb	r1, [r6, #0]
 800e0b2:	210a      	movs	r1, #10
 800e0b4:	9401      	str	r4, [sp, #4]
 800e0b6:	f7f2 f8cd 	bl	8000254 <__divsi3>
 800e0ba:	9b01      	ldr	r3, [sp, #4]
 800e0bc:	0004      	movs	r4, r0
 800e0be:	2b63      	cmp	r3, #99	@ 0x63
 800e0c0:	dcee      	bgt.n	800e0a0 <__exponent+0x1e>
 800e0c2:	1eba      	subs	r2, r7, #2
 800e0c4:	1ca8      	adds	r0, r5, #2
 800e0c6:	0001      	movs	r1, r0
 800e0c8:	0013      	movs	r3, r2
 800e0ca:	3430      	adds	r4, #48	@ 0x30
 800e0cc:	7014      	strb	r4, [r2, #0]
 800e0ce:	ac02      	add	r4, sp, #8
 800e0d0:	3407      	adds	r4, #7
 800e0d2:	429c      	cmp	r4, r3
 800e0d4:	d80a      	bhi.n	800e0ec <__exponent+0x6a>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	42a2      	cmp	r2, r4
 800e0da:	d803      	bhi.n	800e0e4 <__exponent+0x62>
 800e0dc:	3309      	adds	r3, #9
 800e0de:	aa02      	add	r2, sp, #8
 800e0e0:	189b      	adds	r3, r3, r2
 800e0e2:	1bdb      	subs	r3, r3, r7
 800e0e4:	18c0      	adds	r0, r0, r3
 800e0e6:	1b40      	subs	r0, r0, r5
 800e0e8:	b005      	add	sp, #20
 800e0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ec:	781c      	ldrb	r4, [r3, #0]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	700c      	strb	r4, [r1, #0]
 800e0f2:	3101      	adds	r1, #1
 800e0f4:	e7eb      	b.n	800e0ce <__exponent+0x4c>
 800e0f6:	2330      	movs	r3, #48	@ 0x30
 800e0f8:	18e4      	adds	r4, r4, r3
 800e0fa:	70ab      	strb	r3, [r5, #2]
 800e0fc:	1d28      	adds	r0, r5, #4
 800e0fe:	70ec      	strb	r4, [r5, #3]
 800e100:	e7f1      	b.n	800e0e6 <__exponent+0x64>
	...

0800e104 <_printf_float>:
 800e104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e106:	b097      	sub	sp, #92	@ 0x5c
 800e108:	000d      	movs	r5, r1
 800e10a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e10c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800e10e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e110:	9009      	str	r0, [sp, #36]	@ 0x24
 800e112:	f000 fd5d 	bl	800ebd0 <_localeconv_r>
 800e116:	6803      	ldr	r3, [r0, #0]
 800e118:	0018      	movs	r0, r3
 800e11a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e11c:	f7f1 fff4 	bl	8000108 <strlen>
 800e120:	2300      	movs	r3, #0
 800e122:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e124:	9314      	str	r3, [sp, #80]	@ 0x50
 800e126:	7e2b      	ldrb	r3, [r5, #24]
 800e128:	2207      	movs	r2, #7
 800e12a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e12c:	682b      	ldr	r3, [r5, #0]
 800e12e:	930e      	str	r3, [sp, #56]	@ 0x38
 800e130:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	05c9      	lsls	r1, r1, #23
 800e136:	d545      	bpl.n	800e1c4 <_printf_float+0xc0>
 800e138:	189b      	adds	r3, r3, r2
 800e13a:	4393      	bics	r3, r2
 800e13c:	001a      	movs	r2, r3
 800e13e:	3208      	adds	r2, #8
 800e140:	6022      	str	r2, [r4, #0]
 800e142:	2201      	movs	r2, #1
 800e144:	681e      	ldr	r6, [r3, #0]
 800e146:	685f      	ldr	r7, [r3, #4]
 800e148:	007b      	lsls	r3, r7, #1
 800e14a:	085b      	lsrs	r3, r3, #1
 800e14c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e14e:	9610      	str	r6, [sp, #64]	@ 0x40
 800e150:	64ae      	str	r6, [r5, #72]	@ 0x48
 800e152:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800e154:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e156:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e158:	4ba7      	ldr	r3, [pc, #668]	@ (800e3f8 <_printf_float+0x2f4>)
 800e15a:	4252      	negs	r2, r2
 800e15c:	f7f5 f850 	bl	8003200 <__aeabi_dcmpun>
 800e160:	2800      	cmp	r0, #0
 800e162:	d131      	bne.n	800e1c8 <_printf_float+0xc4>
 800e164:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e166:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e168:	2201      	movs	r2, #1
 800e16a:	4ba3      	ldr	r3, [pc, #652]	@ (800e3f8 <_printf_float+0x2f4>)
 800e16c:	4252      	negs	r2, r2
 800e16e:	f7f2 f97d 	bl	800046c <__aeabi_dcmple>
 800e172:	2800      	cmp	r0, #0
 800e174:	d128      	bne.n	800e1c8 <_printf_float+0xc4>
 800e176:	2200      	movs	r2, #0
 800e178:	2300      	movs	r3, #0
 800e17a:	0030      	movs	r0, r6
 800e17c:	0039      	movs	r1, r7
 800e17e:	f7f2 f96b 	bl	8000458 <__aeabi_dcmplt>
 800e182:	2800      	cmp	r0, #0
 800e184:	d003      	beq.n	800e18e <_printf_float+0x8a>
 800e186:	002b      	movs	r3, r5
 800e188:	222d      	movs	r2, #45	@ 0x2d
 800e18a:	3343      	adds	r3, #67	@ 0x43
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e190:	4f9a      	ldr	r7, [pc, #616]	@ (800e3fc <_printf_float+0x2f8>)
 800e192:	2b47      	cmp	r3, #71	@ 0x47
 800e194:	d900      	bls.n	800e198 <_printf_float+0x94>
 800e196:	4f9a      	ldr	r7, [pc, #616]	@ (800e400 <_printf_float+0x2fc>)
 800e198:	2303      	movs	r3, #3
 800e19a:	2400      	movs	r4, #0
 800e19c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e19e:	612b      	str	r3, [r5, #16]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	439a      	bics	r2, r3
 800e1a4:	602a      	str	r2, [r5, #0]
 800e1a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1a8:	0029      	movs	r1, r5
 800e1aa:	9300      	str	r3, [sp, #0]
 800e1ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1b0:	aa15      	add	r2, sp, #84	@ 0x54
 800e1b2:	f000 f9e5 	bl	800e580 <_printf_common>
 800e1b6:	3001      	adds	r0, #1
 800e1b8:	d000      	beq.n	800e1bc <_printf_float+0xb8>
 800e1ba:	e09f      	b.n	800e2fc <_printf_float+0x1f8>
 800e1bc:	2001      	movs	r0, #1
 800e1be:	4240      	negs	r0, r0
 800e1c0:	b017      	add	sp, #92	@ 0x5c
 800e1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c4:	3307      	adds	r3, #7
 800e1c6:	e7b8      	b.n	800e13a <_printf_float+0x36>
 800e1c8:	0032      	movs	r2, r6
 800e1ca:	003b      	movs	r3, r7
 800e1cc:	0030      	movs	r0, r6
 800e1ce:	0039      	movs	r1, r7
 800e1d0:	f7f5 f816 	bl	8003200 <__aeabi_dcmpun>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d00b      	beq.n	800e1f0 <_printf_float+0xec>
 800e1d8:	2f00      	cmp	r7, #0
 800e1da:	da03      	bge.n	800e1e4 <_printf_float+0xe0>
 800e1dc:	002b      	movs	r3, r5
 800e1de:	222d      	movs	r2, #45	@ 0x2d
 800e1e0:	3343      	adds	r3, #67	@ 0x43
 800e1e2:	701a      	strb	r2, [r3, #0]
 800e1e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1e6:	4f87      	ldr	r7, [pc, #540]	@ (800e404 <_printf_float+0x300>)
 800e1e8:	2b47      	cmp	r3, #71	@ 0x47
 800e1ea:	d9d5      	bls.n	800e198 <_printf_float+0x94>
 800e1ec:	4f86      	ldr	r7, [pc, #536]	@ (800e408 <_printf_float+0x304>)
 800e1ee:	e7d3      	b.n	800e198 <_printf_float+0x94>
 800e1f0:	2220      	movs	r2, #32
 800e1f2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800e1f4:	686b      	ldr	r3, [r5, #4]
 800e1f6:	4394      	bics	r4, r2
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	d146      	bne.n	800e28a <_printf_float+0x186>
 800e1fc:	3307      	adds	r3, #7
 800e1fe:	606b      	str	r3, [r5, #4]
 800e200:	2380      	movs	r3, #128	@ 0x80
 800e202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e204:	00db      	lsls	r3, r3, #3
 800e206:	4313      	orrs	r3, r2
 800e208:	2200      	movs	r2, #0
 800e20a:	602b      	str	r3, [r5, #0]
 800e20c:	9206      	str	r2, [sp, #24]
 800e20e:	aa14      	add	r2, sp, #80	@ 0x50
 800e210:	9205      	str	r2, [sp, #20]
 800e212:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e214:	a90a      	add	r1, sp, #40	@ 0x28
 800e216:	9204      	str	r2, [sp, #16]
 800e218:	aa13      	add	r2, sp, #76	@ 0x4c
 800e21a:	9203      	str	r2, [sp, #12]
 800e21c:	2223      	movs	r2, #35	@ 0x23
 800e21e:	1852      	adds	r2, r2, r1
 800e220:	9202      	str	r2, [sp, #8]
 800e222:	9301      	str	r3, [sp, #4]
 800e224:	686b      	ldr	r3, [r5, #4]
 800e226:	0032      	movs	r2, r6
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e22c:	003b      	movs	r3, r7
 800e22e:	f7ff fec2 	bl	800dfb6 <__cvt>
 800e232:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e234:	0007      	movs	r7, r0
 800e236:	2c47      	cmp	r4, #71	@ 0x47
 800e238:	d12d      	bne.n	800e296 <_printf_float+0x192>
 800e23a:	1cd3      	adds	r3, r2, #3
 800e23c:	db02      	blt.n	800e244 <_printf_float+0x140>
 800e23e:	686b      	ldr	r3, [r5, #4]
 800e240:	429a      	cmp	r2, r3
 800e242:	dd48      	ble.n	800e2d6 <_printf_float+0x1d2>
 800e244:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e246:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e248:	3b02      	subs	r3, #2
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e24e:	0028      	movs	r0, r5
 800e250:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e252:	3901      	subs	r1, #1
 800e254:	3050      	adds	r0, #80	@ 0x50
 800e256:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e258:	f7ff ff13 	bl	800e082 <__exponent>
 800e25c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e25e:	0004      	movs	r4, r0
 800e260:	1813      	adds	r3, r2, r0
 800e262:	612b      	str	r3, [r5, #16]
 800e264:	2a01      	cmp	r2, #1
 800e266:	dc02      	bgt.n	800e26e <_printf_float+0x16a>
 800e268:	682a      	ldr	r2, [r5, #0]
 800e26a:	07d2      	lsls	r2, r2, #31
 800e26c:	d501      	bpl.n	800e272 <_printf_float+0x16e>
 800e26e:	3301      	adds	r3, #1
 800e270:	612b      	str	r3, [r5, #16]
 800e272:	2323      	movs	r3, #35	@ 0x23
 800e274:	aa0a      	add	r2, sp, #40	@ 0x28
 800e276:	189b      	adds	r3, r3, r2
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d100      	bne.n	800e280 <_printf_float+0x17c>
 800e27e:	e792      	b.n	800e1a6 <_printf_float+0xa2>
 800e280:	002b      	movs	r3, r5
 800e282:	222d      	movs	r2, #45	@ 0x2d
 800e284:	3343      	adds	r3, #67	@ 0x43
 800e286:	701a      	strb	r2, [r3, #0]
 800e288:	e78d      	b.n	800e1a6 <_printf_float+0xa2>
 800e28a:	2c47      	cmp	r4, #71	@ 0x47
 800e28c:	d1b8      	bne.n	800e200 <_printf_float+0xfc>
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1b6      	bne.n	800e200 <_printf_float+0xfc>
 800e292:	3301      	adds	r3, #1
 800e294:	e7b3      	b.n	800e1fe <_printf_float+0xfa>
 800e296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e298:	0011      	movs	r1, r2
 800e29a:	2b65      	cmp	r3, #101	@ 0x65
 800e29c:	d9d7      	bls.n	800e24e <_printf_float+0x14a>
 800e29e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2a0:	2b66      	cmp	r3, #102	@ 0x66
 800e2a2:	d11a      	bne.n	800e2da <_printf_float+0x1d6>
 800e2a4:	686b      	ldr	r3, [r5, #4]
 800e2a6:	2a00      	cmp	r2, #0
 800e2a8:	dd09      	ble.n	800e2be <_printf_float+0x1ba>
 800e2aa:	612a      	str	r2, [r5, #16]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d102      	bne.n	800e2b6 <_printf_float+0x1b2>
 800e2b0:	6829      	ldr	r1, [r5, #0]
 800e2b2:	07c9      	lsls	r1, r1, #31
 800e2b4:	d50b      	bpl.n	800e2ce <_printf_float+0x1ca>
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	189b      	adds	r3, r3, r2
 800e2ba:	612b      	str	r3, [r5, #16]
 800e2bc:	e007      	b.n	800e2ce <_printf_float+0x1ca>
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d103      	bne.n	800e2ca <_printf_float+0x1c6>
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	6829      	ldr	r1, [r5, #0]
 800e2c6:	4211      	tst	r1, r2
 800e2c8:	d000      	beq.n	800e2cc <_printf_float+0x1c8>
 800e2ca:	1c9a      	adds	r2, r3, #2
 800e2cc:	612a      	str	r2, [r5, #16]
 800e2ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e2d0:	2400      	movs	r4, #0
 800e2d2:	65ab      	str	r3, [r5, #88]	@ 0x58
 800e2d4:	e7cd      	b.n	800e272 <_printf_float+0x16e>
 800e2d6:	2367      	movs	r3, #103	@ 0x67
 800e2d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e2dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e2de:	4299      	cmp	r1, r3
 800e2e0:	db06      	blt.n	800e2f0 <_printf_float+0x1ec>
 800e2e2:	682b      	ldr	r3, [r5, #0]
 800e2e4:	6129      	str	r1, [r5, #16]
 800e2e6:	07db      	lsls	r3, r3, #31
 800e2e8:	d5f1      	bpl.n	800e2ce <_printf_float+0x1ca>
 800e2ea:	3101      	adds	r1, #1
 800e2ec:	6129      	str	r1, [r5, #16]
 800e2ee:	e7ee      	b.n	800e2ce <_printf_float+0x1ca>
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	2900      	cmp	r1, #0
 800e2f4:	dce0      	bgt.n	800e2b8 <_printf_float+0x1b4>
 800e2f6:	1892      	adds	r2, r2, r2
 800e2f8:	1a52      	subs	r2, r2, r1
 800e2fa:	e7dd      	b.n	800e2b8 <_printf_float+0x1b4>
 800e2fc:	682a      	ldr	r2, [r5, #0]
 800e2fe:	0553      	lsls	r3, r2, #21
 800e300:	d408      	bmi.n	800e314 <_printf_float+0x210>
 800e302:	692b      	ldr	r3, [r5, #16]
 800e304:	003a      	movs	r2, r7
 800e306:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e308:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e30a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e30c:	47a0      	blx	r4
 800e30e:	3001      	adds	r0, #1
 800e310:	d129      	bne.n	800e366 <_printf_float+0x262>
 800e312:	e753      	b.n	800e1bc <_printf_float+0xb8>
 800e314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e316:	2b65      	cmp	r3, #101	@ 0x65
 800e318:	d800      	bhi.n	800e31c <_printf_float+0x218>
 800e31a:	e0da      	b.n	800e4d2 <_printf_float+0x3ce>
 800e31c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800e31e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e320:	2200      	movs	r2, #0
 800e322:	2300      	movs	r3, #0
 800e324:	f7f2 f892 	bl	800044c <__aeabi_dcmpeq>
 800e328:	2800      	cmp	r0, #0
 800e32a:	d033      	beq.n	800e394 <_printf_float+0x290>
 800e32c:	2301      	movs	r3, #1
 800e32e:	4a37      	ldr	r2, [pc, #220]	@ (800e40c <_printf_float+0x308>)
 800e330:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e334:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e336:	47a0      	blx	r4
 800e338:	3001      	adds	r0, #1
 800e33a:	d100      	bne.n	800e33e <_printf_float+0x23a>
 800e33c:	e73e      	b.n	800e1bc <_printf_float+0xb8>
 800e33e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800e340:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e342:	42b3      	cmp	r3, r6
 800e344:	db02      	blt.n	800e34c <_printf_float+0x248>
 800e346:	682b      	ldr	r3, [r5, #0]
 800e348:	07db      	lsls	r3, r3, #31
 800e34a:	d50c      	bpl.n	800e366 <_printf_float+0x262>
 800e34c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e34e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e354:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e356:	47a0      	blx	r4
 800e358:	2400      	movs	r4, #0
 800e35a:	3001      	adds	r0, #1
 800e35c:	d100      	bne.n	800e360 <_printf_float+0x25c>
 800e35e:	e72d      	b.n	800e1bc <_printf_float+0xb8>
 800e360:	1e73      	subs	r3, r6, #1
 800e362:	42a3      	cmp	r3, r4
 800e364:	dc0a      	bgt.n	800e37c <_printf_float+0x278>
 800e366:	682b      	ldr	r3, [r5, #0]
 800e368:	079b      	lsls	r3, r3, #30
 800e36a:	d500      	bpl.n	800e36e <_printf_float+0x26a>
 800e36c:	e105      	b.n	800e57a <_printf_float+0x476>
 800e36e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e370:	68e8      	ldr	r0, [r5, #12]
 800e372:	4298      	cmp	r0, r3
 800e374:	db00      	blt.n	800e378 <_printf_float+0x274>
 800e376:	e723      	b.n	800e1c0 <_printf_float+0xbc>
 800e378:	0018      	movs	r0, r3
 800e37a:	e721      	b.n	800e1c0 <_printf_float+0xbc>
 800e37c:	002a      	movs	r2, r5
 800e37e:	2301      	movs	r3, #1
 800e380:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e384:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e386:	321a      	adds	r2, #26
 800e388:	47b8      	blx	r7
 800e38a:	3001      	adds	r0, #1
 800e38c:	d100      	bne.n	800e390 <_printf_float+0x28c>
 800e38e:	e715      	b.n	800e1bc <_printf_float+0xb8>
 800e390:	3401      	adds	r4, #1
 800e392:	e7e5      	b.n	800e360 <_printf_float+0x25c>
 800e394:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e396:	2b00      	cmp	r3, #0
 800e398:	dc3a      	bgt.n	800e410 <_printf_float+0x30c>
 800e39a:	2301      	movs	r3, #1
 800e39c:	4a1b      	ldr	r2, [pc, #108]	@ (800e40c <_printf_float+0x308>)
 800e39e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e3a4:	47a0      	blx	r4
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	d100      	bne.n	800e3ac <_printf_float+0x2a8>
 800e3aa:	e707      	b.n	800e1bc <_printf_float+0xb8>
 800e3ac:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800e3ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3b0:	4333      	orrs	r3, r6
 800e3b2:	d102      	bne.n	800e3ba <_printf_float+0x2b6>
 800e3b4:	682b      	ldr	r3, [r5, #0]
 800e3b6:	07db      	lsls	r3, r3, #31
 800e3b8:	d5d5      	bpl.n	800e366 <_printf_float+0x262>
 800e3ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e3be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e3c4:	47a0      	blx	r4
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	d100      	bne.n	800e3ce <_printf_float+0x2ca>
 800e3cc:	e6f6      	b.n	800e1bc <_printf_float+0xb8>
 800e3ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e3d4:	425b      	negs	r3, r3
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	dc01      	bgt.n	800e3de <_printf_float+0x2da>
 800e3da:	0033      	movs	r3, r6
 800e3dc:	e792      	b.n	800e304 <_printf_float+0x200>
 800e3de:	002a      	movs	r2, r5
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e3e8:	321a      	adds	r2, #26
 800e3ea:	47a0      	blx	r4
 800e3ec:	3001      	adds	r0, #1
 800e3ee:	d100      	bne.n	800e3f2 <_printf_float+0x2ee>
 800e3f0:	e6e4      	b.n	800e1bc <_printf_float+0xb8>
 800e3f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	e7ea      	b.n	800e3ce <_printf_float+0x2ca>
 800e3f8:	7fefffff 	.word	0x7fefffff
 800e3fc:	08011b24 	.word	0x08011b24
 800e400:	08011b28 	.word	0x08011b28
 800e404:	08011b2c 	.word	0x08011b2c
 800e408:	08011b30 	.word	0x08011b30
 800e40c:	08011b34 	.word	0x08011b34
 800e410:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e412:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800e414:	930c      	str	r3, [sp, #48]	@ 0x30
 800e416:	429e      	cmp	r6, r3
 800e418:	dd00      	ble.n	800e41c <_printf_float+0x318>
 800e41a:	001e      	movs	r6, r3
 800e41c:	2e00      	cmp	r6, #0
 800e41e:	dc31      	bgt.n	800e484 <_printf_float+0x380>
 800e420:	43f3      	mvns	r3, r6
 800e422:	2400      	movs	r4, #0
 800e424:	17db      	asrs	r3, r3, #31
 800e426:	4033      	ands	r3, r6
 800e428:	930e      	str	r3, [sp, #56]	@ 0x38
 800e42a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800e42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e42e:	1af3      	subs	r3, r6, r3
 800e430:	42a3      	cmp	r3, r4
 800e432:	dc30      	bgt.n	800e496 <_printf_float+0x392>
 800e434:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e436:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e438:	429a      	cmp	r2, r3
 800e43a:	dc38      	bgt.n	800e4ae <_printf_float+0x3aa>
 800e43c:	682b      	ldr	r3, [r5, #0]
 800e43e:	07db      	lsls	r3, r3, #31
 800e440:	d435      	bmi.n	800e4ae <_printf_float+0x3aa>
 800e442:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e444:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e446:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e448:	1b9b      	subs	r3, r3, r6
 800e44a:	1b14      	subs	r4, r2, r4
 800e44c:	429c      	cmp	r4, r3
 800e44e:	dd00      	ble.n	800e452 <_printf_float+0x34e>
 800e450:	001c      	movs	r4, r3
 800e452:	2c00      	cmp	r4, #0
 800e454:	dc34      	bgt.n	800e4c0 <_printf_float+0x3bc>
 800e456:	43e3      	mvns	r3, r4
 800e458:	2600      	movs	r6, #0
 800e45a:	17db      	asrs	r3, r3, #31
 800e45c:	401c      	ands	r4, r3
 800e45e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e460:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	1b1b      	subs	r3, r3, r4
 800e466:	42b3      	cmp	r3, r6
 800e468:	dc00      	bgt.n	800e46c <_printf_float+0x368>
 800e46a:	e77c      	b.n	800e366 <_printf_float+0x262>
 800e46c:	002a      	movs	r2, r5
 800e46e:	2301      	movs	r3, #1
 800e470:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e474:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e476:	321a      	adds	r2, #26
 800e478:	47b8      	blx	r7
 800e47a:	3001      	adds	r0, #1
 800e47c:	d100      	bne.n	800e480 <_printf_float+0x37c>
 800e47e:	e69d      	b.n	800e1bc <_printf_float+0xb8>
 800e480:	3601      	adds	r6, #1
 800e482:	e7ec      	b.n	800e45e <_printf_float+0x35a>
 800e484:	0033      	movs	r3, r6
 800e486:	003a      	movs	r2, r7
 800e488:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e48a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e48c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e48e:	47a0      	blx	r4
 800e490:	3001      	adds	r0, #1
 800e492:	d1c5      	bne.n	800e420 <_printf_float+0x31c>
 800e494:	e692      	b.n	800e1bc <_printf_float+0xb8>
 800e496:	002a      	movs	r2, r5
 800e498:	2301      	movs	r3, #1
 800e49a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e49c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e49e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e4a0:	321a      	adds	r2, #26
 800e4a2:	47b0      	blx	r6
 800e4a4:	3001      	adds	r0, #1
 800e4a6:	d100      	bne.n	800e4aa <_printf_float+0x3a6>
 800e4a8:	e688      	b.n	800e1bc <_printf_float+0xb8>
 800e4aa:	3401      	adds	r4, #1
 800e4ac:	e7bd      	b.n	800e42a <_printf_float+0x326>
 800e4ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e4b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e4b8:	47a0      	blx	r4
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	d1c1      	bne.n	800e442 <_printf_float+0x33e>
 800e4be:	e67d      	b.n	800e1bc <_printf_float+0xb8>
 800e4c0:	19ba      	adds	r2, r7, r6
 800e4c2:	0023      	movs	r3, r4
 800e4c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4c8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e4ca:	47b0      	blx	r6
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	d1c2      	bne.n	800e456 <_printf_float+0x352>
 800e4d0:	e674      	b.n	800e1bc <_printf_float+0xb8>
 800e4d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e4d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	dc02      	bgt.n	800e4e0 <_printf_float+0x3dc>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	421a      	tst	r2, r3
 800e4de:	d039      	beq.n	800e554 <_printf_float+0x450>
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	003a      	movs	r2, r7
 800e4e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e4ea:	47b0      	blx	r6
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	d100      	bne.n	800e4f2 <_printf_float+0x3ee>
 800e4f0:	e664      	b.n	800e1bc <_printf_float+0xb8>
 800e4f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e4f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4fa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e4fc:	47b0      	blx	r6
 800e4fe:	3001      	adds	r0, #1
 800e500:	d100      	bne.n	800e504 <_printf_float+0x400>
 800e502:	e65b      	b.n	800e1bc <_printf_float+0xb8>
 800e504:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800e506:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e50a:	2200      	movs	r2, #0
 800e50c:	3b01      	subs	r3, #1
 800e50e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e510:	2300      	movs	r3, #0
 800e512:	f7f1 ff9b 	bl	800044c <__aeabi_dcmpeq>
 800e516:	2800      	cmp	r0, #0
 800e518:	d11a      	bne.n	800e550 <_printf_float+0x44c>
 800e51a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e51c:	1c7a      	adds	r2, r7, #1
 800e51e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e520:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e522:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e524:	47b0      	blx	r6
 800e526:	3001      	adds	r0, #1
 800e528:	d10e      	bne.n	800e548 <_printf_float+0x444>
 800e52a:	e647      	b.n	800e1bc <_printf_float+0xb8>
 800e52c:	002a      	movs	r2, r5
 800e52e:	2301      	movs	r3, #1
 800e530:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e534:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e536:	321a      	adds	r2, #26
 800e538:	47b8      	blx	r7
 800e53a:	3001      	adds	r0, #1
 800e53c:	d100      	bne.n	800e540 <_printf_float+0x43c>
 800e53e:	e63d      	b.n	800e1bc <_printf_float+0xb8>
 800e540:	3601      	adds	r6, #1
 800e542:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e544:	429e      	cmp	r6, r3
 800e546:	dbf1      	blt.n	800e52c <_printf_float+0x428>
 800e548:	002a      	movs	r2, r5
 800e54a:	0023      	movs	r3, r4
 800e54c:	3250      	adds	r2, #80	@ 0x50
 800e54e:	e6da      	b.n	800e306 <_printf_float+0x202>
 800e550:	2600      	movs	r6, #0
 800e552:	e7f6      	b.n	800e542 <_printf_float+0x43e>
 800e554:	003a      	movs	r2, r7
 800e556:	e7e2      	b.n	800e51e <_printf_float+0x41a>
 800e558:	002a      	movs	r2, r5
 800e55a:	2301      	movs	r3, #1
 800e55c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e55e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e560:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e562:	3219      	adds	r2, #25
 800e564:	47b0      	blx	r6
 800e566:	3001      	adds	r0, #1
 800e568:	d100      	bne.n	800e56c <_printf_float+0x468>
 800e56a:	e627      	b.n	800e1bc <_printf_float+0xb8>
 800e56c:	3401      	adds	r4, #1
 800e56e:	68eb      	ldr	r3, [r5, #12]
 800e570:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e572:	1a9b      	subs	r3, r3, r2
 800e574:	42a3      	cmp	r3, r4
 800e576:	dcef      	bgt.n	800e558 <_printf_float+0x454>
 800e578:	e6f9      	b.n	800e36e <_printf_float+0x26a>
 800e57a:	2400      	movs	r4, #0
 800e57c:	e7f7      	b.n	800e56e <_printf_float+0x46a>
 800e57e:	46c0      	nop			@ (mov r8, r8)

0800e580 <_printf_common>:
 800e580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e582:	0016      	movs	r6, r2
 800e584:	9301      	str	r3, [sp, #4]
 800e586:	688a      	ldr	r2, [r1, #8]
 800e588:	690b      	ldr	r3, [r1, #16]
 800e58a:	000c      	movs	r4, r1
 800e58c:	9000      	str	r0, [sp, #0]
 800e58e:	4293      	cmp	r3, r2
 800e590:	da00      	bge.n	800e594 <_printf_common+0x14>
 800e592:	0013      	movs	r3, r2
 800e594:	0022      	movs	r2, r4
 800e596:	6033      	str	r3, [r6, #0]
 800e598:	3243      	adds	r2, #67	@ 0x43
 800e59a:	7812      	ldrb	r2, [r2, #0]
 800e59c:	2a00      	cmp	r2, #0
 800e59e:	d001      	beq.n	800e5a4 <_printf_common+0x24>
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	6033      	str	r3, [r6, #0]
 800e5a4:	6823      	ldr	r3, [r4, #0]
 800e5a6:	069b      	lsls	r3, r3, #26
 800e5a8:	d502      	bpl.n	800e5b0 <_printf_common+0x30>
 800e5aa:	6833      	ldr	r3, [r6, #0]
 800e5ac:	3302      	adds	r3, #2
 800e5ae:	6033      	str	r3, [r6, #0]
 800e5b0:	6822      	ldr	r2, [r4, #0]
 800e5b2:	2306      	movs	r3, #6
 800e5b4:	0015      	movs	r5, r2
 800e5b6:	401d      	ands	r5, r3
 800e5b8:	421a      	tst	r2, r3
 800e5ba:	d027      	beq.n	800e60c <_printf_common+0x8c>
 800e5bc:	0023      	movs	r3, r4
 800e5be:	3343      	adds	r3, #67	@ 0x43
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	1e5a      	subs	r2, r3, #1
 800e5c4:	4193      	sbcs	r3, r2
 800e5c6:	6822      	ldr	r2, [r4, #0]
 800e5c8:	0692      	lsls	r2, r2, #26
 800e5ca:	d430      	bmi.n	800e62e <_printf_common+0xae>
 800e5cc:	0022      	movs	r2, r4
 800e5ce:	9901      	ldr	r1, [sp, #4]
 800e5d0:	9800      	ldr	r0, [sp, #0]
 800e5d2:	9d08      	ldr	r5, [sp, #32]
 800e5d4:	3243      	adds	r2, #67	@ 0x43
 800e5d6:	47a8      	blx	r5
 800e5d8:	3001      	adds	r0, #1
 800e5da:	d025      	beq.n	800e628 <_printf_common+0xa8>
 800e5dc:	2206      	movs	r2, #6
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	2500      	movs	r5, #0
 800e5e2:	4013      	ands	r3, r2
 800e5e4:	2b04      	cmp	r3, #4
 800e5e6:	d105      	bne.n	800e5f4 <_printf_common+0x74>
 800e5e8:	6833      	ldr	r3, [r6, #0]
 800e5ea:	68e5      	ldr	r5, [r4, #12]
 800e5ec:	1aed      	subs	r5, r5, r3
 800e5ee:	43eb      	mvns	r3, r5
 800e5f0:	17db      	asrs	r3, r3, #31
 800e5f2:	401d      	ands	r5, r3
 800e5f4:	68a3      	ldr	r3, [r4, #8]
 800e5f6:	6922      	ldr	r2, [r4, #16]
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	dd01      	ble.n	800e600 <_printf_common+0x80>
 800e5fc:	1a9b      	subs	r3, r3, r2
 800e5fe:	18ed      	adds	r5, r5, r3
 800e600:	2600      	movs	r6, #0
 800e602:	42b5      	cmp	r5, r6
 800e604:	d120      	bne.n	800e648 <_printf_common+0xc8>
 800e606:	2000      	movs	r0, #0
 800e608:	e010      	b.n	800e62c <_printf_common+0xac>
 800e60a:	3501      	adds	r5, #1
 800e60c:	68e3      	ldr	r3, [r4, #12]
 800e60e:	6832      	ldr	r2, [r6, #0]
 800e610:	1a9b      	subs	r3, r3, r2
 800e612:	42ab      	cmp	r3, r5
 800e614:	ddd2      	ble.n	800e5bc <_printf_common+0x3c>
 800e616:	0022      	movs	r2, r4
 800e618:	2301      	movs	r3, #1
 800e61a:	9901      	ldr	r1, [sp, #4]
 800e61c:	9800      	ldr	r0, [sp, #0]
 800e61e:	9f08      	ldr	r7, [sp, #32]
 800e620:	3219      	adds	r2, #25
 800e622:	47b8      	blx	r7
 800e624:	3001      	adds	r0, #1
 800e626:	d1f0      	bne.n	800e60a <_printf_common+0x8a>
 800e628:	2001      	movs	r0, #1
 800e62a:	4240      	negs	r0, r0
 800e62c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e62e:	2030      	movs	r0, #48	@ 0x30
 800e630:	18e1      	adds	r1, r4, r3
 800e632:	3143      	adds	r1, #67	@ 0x43
 800e634:	7008      	strb	r0, [r1, #0]
 800e636:	0021      	movs	r1, r4
 800e638:	1c5a      	adds	r2, r3, #1
 800e63a:	3145      	adds	r1, #69	@ 0x45
 800e63c:	7809      	ldrb	r1, [r1, #0]
 800e63e:	18a2      	adds	r2, r4, r2
 800e640:	3243      	adds	r2, #67	@ 0x43
 800e642:	3302      	adds	r3, #2
 800e644:	7011      	strb	r1, [r2, #0]
 800e646:	e7c1      	b.n	800e5cc <_printf_common+0x4c>
 800e648:	0022      	movs	r2, r4
 800e64a:	2301      	movs	r3, #1
 800e64c:	9901      	ldr	r1, [sp, #4]
 800e64e:	9800      	ldr	r0, [sp, #0]
 800e650:	9f08      	ldr	r7, [sp, #32]
 800e652:	321a      	adds	r2, #26
 800e654:	47b8      	blx	r7
 800e656:	3001      	adds	r0, #1
 800e658:	d0e6      	beq.n	800e628 <_printf_common+0xa8>
 800e65a:	3601      	adds	r6, #1
 800e65c:	e7d1      	b.n	800e602 <_printf_common+0x82>
	...

0800e660 <_printf_i>:
 800e660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e662:	b08b      	sub	sp, #44	@ 0x2c
 800e664:	9206      	str	r2, [sp, #24]
 800e666:	000a      	movs	r2, r1
 800e668:	3243      	adds	r2, #67	@ 0x43
 800e66a:	9307      	str	r3, [sp, #28]
 800e66c:	9005      	str	r0, [sp, #20]
 800e66e:	9203      	str	r2, [sp, #12]
 800e670:	7e0a      	ldrb	r2, [r1, #24]
 800e672:	000c      	movs	r4, r1
 800e674:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e676:	2a78      	cmp	r2, #120	@ 0x78
 800e678:	d809      	bhi.n	800e68e <_printf_i+0x2e>
 800e67a:	2a62      	cmp	r2, #98	@ 0x62
 800e67c:	d80b      	bhi.n	800e696 <_printf_i+0x36>
 800e67e:	2a00      	cmp	r2, #0
 800e680:	d100      	bne.n	800e684 <_printf_i+0x24>
 800e682:	e0bc      	b.n	800e7fe <_printf_i+0x19e>
 800e684:	497b      	ldr	r1, [pc, #492]	@ (800e874 <_printf_i+0x214>)
 800e686:	9104      	str	r1, [sp, #16]
 800e688:	2a58      	cmp	r2, #88	@ 0x58
 800e68a:	d100      	bne.n	800e68e <_printf_i+0x2e>
 800e68c:	e090      	b.n	800e7b0 <_printf_i+0x150>
 800e68e:	0025      	movs	r5, r4
 800e690:	3542      	adds	r5, #66	@ 0x42
 800e692:	702a      	strb	r2, [r5, #0]
 800e694:	e022      	b.n	800e6dc <_printf_i+0x7c>
 800e696:	0010      	movs	r0, r2
 800e698:	3863      	subs	r0, #99	@ 0x63
 800e69a:	2815      	cmp	r0, #21
 800e69c:	d8f7      	bhi.n	800e68e <_printf_i+0x2e>
 800e69e:	f7f1 fd45 	bl	800012c <__gnu_thumb1_case_shi>
 800e6a2:	0016      	.short	0x0016
 800e6a4:	fff6001f 	.word	0xfff6001f
 800e6a8:	fff6fff6 	.word	0xfff6fff6
 800e6ac:	001ffff6 	.word	0x001ffff6
 800e6b0:	fff6fff6 	.word	0xfff6fff6
 800e6b4:	fff6fff6 	.word	0xfff6fff6
 800e6b8:	003600a1 	.word	0x003600a1
 800e6bc:	fff60080 	.word	0xfff60080
 800e6c0:	00b2fff6 	.word	0x00b2fff6
 800e6c4:	0036fff6 	.word	0x0036fff6
 800e6c8:	fff6fff6 	.word	0xfff6fff6
 800e6cc:	0084      	.short	0x0084
 800e6ce:	0025      	movs	r5, r4
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	3542      	adds	r5, #66	@ 0x42
 800e6d4:	1d11      	adds	r1, r2, #4
 800e6d6:	6019      	str	r1, [r3, #0]
 800e6d8:	6813      	ldr	r3, [r2, #0]
 800e6da:	702b      	strb	r3, [r5, #0]
 800e6dc:	2301      	movs	r3, #1
 800e6de:	e0a0      	b.n	800e822 <_printf_i+0x1c2>
 800e6e0:	6818      	ldr	r0, [r3, #0]
 800e6e2:	6809      	ldr	r1, [r1, #0]
 800e6e4:	1d02      	adds	r2, r0, #4
 800e6e6:	060d      	lsls	r5, r1, #24
 800e6e8:	d50b      	bpl.n	800e702 <_printf_i+0xa2>
 800e6ea:	6806      	ldr	r6, [r0, #0]
 800e6ec:	601a      	str	r2, [r3, #0]
 800e6ee:	2e00      	cmp	r6, #0
 800e6f0:	da03      	bge.n	800e6fa <_printf_i+0x9a>
 800e6f2:	232d      	movs	r3, #45	@ 0x2d
 800e6f4:	9a03      	ldr	r2, [sp, #12]
 800e6f6:	4276      	negs	r6, r6
 800e6f8:	7013      	strb	r3, [r2, #0]
 800e6fa:	4b5e      	ldr	r3, [pc, #376]	@ (800e874 <_printf_i+0x214>)
 800e6fc:	270a      	movs	r7, #10
 800e6fe:	9304      	str	r3, [sp, #16]
 800e700:	e018      	b.n	800e734 <_printf_i+0xd4>
 800e702:	6806      	ldr	r6, [r0, #0]
 800e704:	601a      	str	r2, [r3, #0]
 800e706:	0649      	lsls	r1, r1, #25
 800e708:	d5f1      	bpl.n	800e6ee <_printf_i+0x8e>
 800e70a:	b236      	sxth	r6, r6
 800e70c:	e7ef      	b.n	800e6ee <_printf_i+0x8e>
 800e70e:	6808      	ldr	r0, [r1, #0]
 800e710:	6819      	ldr	r1, [r3, #0]
 800e712:	c940      	ldmia	r1!, {r6}
 800e714:	0605      	lsls	r5, r0, #24
 800e716:	d402      	bmi.n	800e71e <_printf_i+0xbe>
 800e718:	0640      	lsls	r0, r0, #25
 800e71a:	d500      	bpl.n	800e71e <_printf_i+0xbe>
 800e71c:	b2b6      	uxth	r6, r6
 800e71e:	6019      	str	r1, [r3, #0]
 800e720:	4b54      	ldr	r3, [pc, #336]	@ (800e874 <_printf_i+0x214>)
 800e722:	270a      	movs	r7, #10
 800e724:	9304      	str	r3, [sp, #16]
 800e726:	2a6f      	cmp	r2, #111	@ 0x6f
 800e728:	d100      	bne.n	800e72c <_printf_i+0xcc>
 800e72a:	3f02      	subs	r7, #2
 800e72c:	0023      	movs	r3, r4
 800e72e:	2200      	movs	r2, #0
 800e730:	3343      	adds	r3, #67	@ 0x43
 800e732:	701a      	strb	r2, [r3, #0]
 800e734:	6863      	ldr	r3, [r4, #4]
 800e736:	60a3      	str	r3, [r4, #8]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	db03      	blt.n	800e744 <_printf_i+0xe4>
 800e73c:	2104      	movs	r1, #4
 800e73e:	6822      	ldr	r2, [r4, #0]
 800e740:	438a      	bics	r2, r1
 800e742:	6022      	str	r2, [r4, #0]
 800e744:	2e00      	cmp	r6, #0
 800e746:	d102      	bne.n	800e74e <_printf_i+0xee>
 800e748:	9d03      	ldr	r5, [sp, #12]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00c      	beq.n	800e768 <_printf_i+0x108>
 800e74e:	9d03      	ldr	r5, [sp, #12]
 800e750:	0030      	movs	r0, r6
 800e752:	0039      	movs	r1, r7
 800e754:	f7f1 fd7a 	bl	800024c <__aeabi_uidivmod>
 800e758:	9b04      	ldr	r3, [sp, #16]
 800e75a:	3d01      	subs	r5, #1
 800e75c:	5c5b      	ldrb	r3, [r3, r1]
 800e75e:	702b      	strb	r3, [r5, #0]
 800e760:	0033      	movs	r3, r6
 800e762:	0006      	movs	r6, r0
 800e764:	429f      	cmp	r7, r3
 800e766:	d9f3      	bls.n	800e750 <_printf_i+0xf0>
 800e768:	2f08      	cmp	r7, #8
 800e76a:	d109      	bne.n	800e780 <_printf_i+0x120>
 800e76c:	6823      	ldr	r3, [r4, #0]
 800e76e:	07db      	lsls	r3, r3, #31
 800e770:	d506      	bpl.n	800e780 <_printf_i+0x120>
 800e772:	6862      	ldr	r2, [r4, #4]
 800e774:	6923      	ldr	r3, [r4, #16]
 800e776:	429a      	cmp	r2, r3
 800e778:	dc02      	bgt.n	800e780 <_printf_i+0x120>
 800e77a:	2330      	movs	r3, #48	@ 0x30
 800e77c:	3d01      	subs	r5, #1
 800e77e:	702b      	strb	r3, [r5, #0]
 800e780:	9b03      	ldr	r3, [sp, #12]
 800e782:	1b5b      	subs	r3, r3, r5
 800e784:	6123      	str	r3, [r4, #16]
 800e786:	9b07      	ldr	r3, [sp, #28]
 800e788:	0021      	movs	r1, r4
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	9805      	ldr	r0, [sp, #20]
 800e78e:	9b06      	ldr	r3, [sp, #24]
 800e790:	aa09      	add	r2, sp, #36	@ 0x24
 800e792:	f7ff fef5 	bl	800e580 <_printf_common>
 800e796:	3001      	adds	r0, #1
 800e798:	d148      	bne.n	800e82c <_printf_i+0x1cc>
 800e79a:	2001      	movs	r0, #1
 800e79c:	4240      	negs	r0, r0
 800e79e:	b00b      	add	sp, #44	@ 0x2c
 800e7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7a2:	2220      	movs	r2, #32
 800e7a4:	6809      	ldr	r1, [r1, #0]
 800e7a6:	430a      	orrs	r2, r1
 800e7a8:	6022      	str	r2, [r4, #0]
 800e7aa:	2278      	movs	r2, #120	@ 0x78
 800e7ac:	4932      	ldr	r1, [pc, #200]	@ (800e878 <_printf_i+0x218>)
 800e7ae:	9104      	str	r1, [sp, #16]
 800e7b0:	0021      	movs	r1, r4
 800e7b2:	3145      	adds	r1, #69	@ 0x45
 800e7b4:	700a      	strb	r2, [r1, #0]
 800e7b6:	6819      	ldr	r1, [r3, #0]
 800e7b8:	6822      	ldr	r2, [r4, #0]
 800e7ba:	c940      	ldmia	r1!, {r6}
 800e7bc:	0610      	lsls	r0, r2, #24
 800e7be:	d402      	bmi.n	800e7c6 <_printf_i+0x166>
 800e7c0:	0650      	lsls	r0, r2, #25
 800e7c2:	d500      	bpl.n	800e7c6 <_printf_i+0x166>
 800e7c4:	b2b6      	uxth	r6, r6
 800e7c6:	6019      	str	r1, [r3, #0]
 800e7c8:	07d3      	lsls	r3, r2, #31
 800e7ca:	d502      	bpl.n	800e7d2 <_printf_i+0x172>
 800e7cc:	2320      	movs	r3, #32
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	2e00      	cmp	r6, #0
 800e7d4:	d001      	beq.n	800e7da <_printf_i+0x17a>
 800e7d6:	2710      	movs	r7, #16
 800e7d8:	e7a8      	b.n	800e72c <_printf_i+0xcc>
 800e7da:	2220      	movs	r2, #32
 800e7dc:	6823      	ldr	r3, [r4, #0]
 800e7de:	4393      	bics	r3, r2
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	e7f8      	b.n	800e7d6 <_printf_i+0x176>
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	680d      	ldr	r5, [r1, #0]
 800e7e8:	1d10      	adds	r0, r2, #4
 800e7ea:	6949      	ldr	r1, [r1, #20]
 800e7ec:	6018      	str	r0, [r3, #0]
 800e7ee:	6813      	ldr	r3, [r2, #0]
 800e7f0:	062e      	lsls	r6, r5, #24
 800e7f2:	d501      	bpl.n	800e7f8 <_printf_i+0x198>
 800e7f4:	6019      	str	r1, [r3, #0]
 800e7f6:	e002      	b.n	800e7fe <_printf_i+0x19e>
 800e7f8:	066d      	lsls	r5, r5, #25
 800e7fa:	d5fb      	bpl.n	800e7f4 <_printf_i+0x194>
 800e7fc:	8019      	strh	r1, [r3, #0]
 800e7fe:	2300      	movs	r3, #0
 800e800:	9d03      	ldr	r5, [sp, #12]
 800e802:	6123      	str	r3, [r4, #16]
 800e804:	e7bf      	b.n	800e786 <_printf_i+0x126>
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	1d11      	adds	r1, r2, #4
 800e80a:	6019      	str	r1, [r3, #0]
 800e80c:	6815      	ldr	r5, [r2, #0]
 800e80e:	2100      	movs	r1, #0
 800e810:	0028      	movs	r0, r5
 800e812:	6862      	ldr	r2, [r4, #4]
 800e814:	f000 fa5b 	bl	800ecce <memchr>
 800e818:	2800      	cmp	r0, #0
 800e81a:	d001      	beq.n	800e820 <_printf_i+0x1c0>
 800e81c:	1b40      	subs	r0, r0, r5
 800e81e:	6060      	str	r0, [r4, #4]
 800e820:	6863      	ldr	r3, [r4, #4]
 800e822:	6123      	str	r3, [r4, #16]
 800e824:	2300      	movs	r3, #0
 800e826:	9a03      	ldr	r2, [sp, #12]
 800e828:	7013      	strb	r3, [r2, #0]
 800e82a:	e7ac      	b.n	800e786 <_printf_i+0x126>
 800e82c:	002a      	movs	r2, r5
 800e82e:	6923      	ldr	r3, [r4, #16]
 800e830:	9906      	ldr	r1, [sp, #24]
 800e832:	9805      	ldr	r0, [sp, #20]
 800e834:	9d07      	ldr	r5, [sp, #28]
 800e836:	47a8      	blx	r5
 800e838:	3001      	adds	r0, #1
 800e83a:	d0ae      	beq.n	800e79a <_printf_i+0x13a>
 800e83c:	6823      	ldr	r3, [r4, #0]
 800e83e:	079b      	lsls	r3, r3, #30
 800e840:	d415      	bmi.n	800e86e <_printf_i+0x20e>
 800e842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e844:	68e0      	ldr	r0, [r4, #12]
 800e846:	4298      	cmp	r0, r3
 800e848:	daa9      	bge.n	800e79e <_printf_i+0x13e>
 800e84a:	0018      	movs	r0, r3
 800e84c:	e7a7      	b.n	800e79e <_printf_i+0x13e>
 800e84e:	0022      	movs	r2, r4
 800e850:	2301      	movs	r3, #1
 800e852:	9906      	ldr	r1, [sp, #24]
 800e854:	9805      	ldr	r0, [sp, #20]
 800e856:	9e07      	ldr	r6, [sp, #28]
 800e858:	3219      	adds	r2, #25
 800e85a:	47b0      	blx	r6
 800e85c:	3001      	adds	r0, #1
 800e85e:	d09c      	beq.n	800e79a <_printf_i+0x13a>
 800e860:	3501      	adds	r5, #1
 800e862:	68e3      	ldr	r3, [r4, #12]
 800e864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e866:	1a9b      	subs	r3, r3, r2
 800e868:	42ab      	cmp	r3, r5
 800e86a:	dcf0      	bgt.n	800e84e <_printf_i+0x1ee>
 800e86c:	e7e9      	b.n	800e842 <_printf_i+0x1e2>
 800e86e:	2500      	movs	r5, #0
 800e870:	e7f7      	b.n	800e862 <_printf_i+0x202>
 800e872:	46c0      	nop			@ (mov r8, r8)
 800e874:	08011b36 	.word	0x08011b36
 800e878:	08011b47 	.word	0x08011b47

0800e87c <std>:
 800e87c:	2300      	movs	r3, #0
 800e87e:	b510      	push	{r4, lr}
 800e880:	0004      	movs	r4, r0
 800e882:	6003      	str	r3, [r0, #0]
 800e884:	6043      	str	r3, [r0, #4]
 800e886:	6083      	str	r3, [r0, #8]
 800e888:	8181      	strh	r1, [r0, #12]
 800e88a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e88c:	81c2      	strh	r2, [r0, #14]
 800e88e:	6103      	str	r3, [r0, #16]
 800e890:	6143      	str	r3, [r0, #20]
 800e892:	6183      	str	r3, [r0, #24]
 800e894:	0019      	movs	r1, r3
 800e896:	2208      	movs	r2, #8
 800e898:	305c      	adds	r0, #92	@ 0x5c
 800e89a:	f000 f967 	bl	800eb6c <memset>
 800e89e:	4b0b      	ldr	r3, [pc, #44]	@ (800e8cc <std+0x50>)
 800e8a0:	6224      	str	r4, [r4, #32]
 800e8a2:	6263      	str	r3, [r4, #36]	@ 0x24
 800e8a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e8d0 <std+0x54>)
 800e8a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e8a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e8d4 <std+0x58>)
 800e8aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e8d8 <std+0x5c>)
 800e8ae:	6323      	str	r3, [r4, #48]	@ 0x30
 800e8b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e8dc <std+0x60>)
 800e8b2:	429c      	cmp	r4, r3
 800e8b4:	d005      	beq.n	800e8c2 <std+0x46>
 800e8b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e8e0 <std+0x64>)
 800e8b8:	429c      	cmp	r4, r3
 800e8ba:	d002      	beq.n	800e8c2 <std+0x46>
 800e8bc:	4b09      	ldr	r3, [pc, #36]	@ (800e8e4 <std+0x68>)
 800e8be:	429c      	cmp	r4, r3
 800e8c0:	d103      	bne.n	800e8ca <std+0x4e>
 800e8c2:	0020      	movs	r0, r4
 800e8c4:	3058      	adds	r0, #88	@ 0x58
 800e8c6:	f000 f9ff 	bl	800ecc8 <__retarget_lock_init_recursive>
 800e8ca:	bd10      	pop	{r4, pc}
 800e8cc:	0800ea65 	.word	0x0800ea65
 800e8d0:	0800ea8d 	.word	0x0800ea8d
 800e8d4:	0800eac5 	.word	0x0800eac5
 800e8d8:	0800eaf1 	.word	0x0800eaf1
 800e8dc:	200018fc 	.word	0x200018fc
 800e8e0:	20001964 	.word	0x20001964
 800e8e4:	200019cc 	.word	0x200019cc

0800e8e8 <stdio_exit_handler>:
 800e8e8:	b510      	push	{r4, lr}
 800e8ea:	4a03      	ldr	r2, [pc, #12]	@ (800e8f8 <stdio_exit_handler+0x10>)
 800e8ec:	4903      	ldr	r1, [pc, #12]	@ (800e8fc <stdio_exit_handler+0x14>)
 800e8ee:	4804      	ldr	r0, [pc, #16]	@ (800e900 <stdio_exit_handler+0x18>)
 800e8f0:	f000 f86c 	bl	800e9cc <_fwalk_sglue>
 800e8f4:	bd10      	pop	{r4, pc}
 800e8f6:	46c0      	nop			@ (mov r8, r8)
 800e8f8:	20000078 	.word	0x20000078
 800e8fc:	0801098d 	.word	0x0801098d
 800e900:	20000088 	.word	0x20000088

0800e904 <cleanup_stdio>:
 800e904:	6841      	ldr	r1, [r0, #4]
 800e906:	4b0b      	ldr	r3, [pc, #44]	@ (800e934 <cleanup_stdio+0x30>)
 800e908:	b510      	push	{r4, lr}
 800e90a:	0004      	movs	r4, r0
 800e90c:	4299      	cmp	r1, r3
 800e90e:	d001      	beq.n	800e914 <cleanup_stdio+0x10>
 800e910:	f002 f83c 	bl	801098c <_fflush_r>
 800e914:	68a1      	ldr	r1, [r4, #8]
 800e916:	4b08      	ldr	r3, [pc, #32]	@ (800e938 <cleanup_stdio+0x34>)
 800e918:	4299      	cmp	r1, r3
 800e91a:	d002      	beq.n	800e922 <cleanup_stdio+0x1e>
 800e91c:	0020      	movs	r0, r4
 800e91e:	f002 f835 	bl	801098c <_fflush_r>
 800e922:	68e1      	ldr	r1, [r4, #12]
 800e924:	4b05      	ldr	r3, [pc, #20]	@ (800e93c <cleanup_stdio+0x38>)
 800e926:	4299      	cmp	r1, r3
 800e928:	d002      	beq.n	800e930 <cleanup_stdio+0x2c>
 800e92a:	0020      	movs	r0, r4
 800e92c:	f002 f82e 	bl	801098c <_fflush_r>
 800e930:	bd10      	pop	{r4, pc}
 800e932:	46c0      	nop			@ (mov r8, r8)
 800e934:	200018fc 	.word	0x200018fc
 800e938:	20001964 	.word	0x20001964
 800e93c:	200019cc 	.word	0x200019cc

0800e940 <global_stdio_init.part.0>:
 800e940:	b510      	push	{r4, lr}
 800e942:	4b09      	ldr	r3, [pc, #36]	@ (800e968 <global_stdio_init.part.0+0x28>)
 800e944:	4a09      	ldr	r2, [pc, #36]	@ (800e96c <global_stdio_init.part.0+0x2c>)
 800e946:	2104      	movs	r1, #4
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	4809      	ldr	r0, [pc, #36]	@ (800e970 <global_stdio_init.part.0+0x30>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	f7ff ff95 	bl	800e87c <std>
 800e952:	2201      	movs	r2, #1
 800e954:	2109      	movs	r1, #9
 800e956:	4807      	ldr	r0, [pc, #28]	@ (800e974 <global_stdio_init.part.0+0x34>)
 800e958:	f7ff ff90 	bl	800e87c <std>
 800e95c:	2202      	movs	r2, #2
 800e95e:	2112      	movs	r1, #18
 800e960:	4805      	ldr	r0, [pc, #20]	@ (800e978 <global_stdio_init.part.0+0x38>)
 800e962:	f7ff ff8b 	bl	800e87c <std>
 800e966:	bd10      	pop	{r4, pc}
 800e968:	20001a34 	.word	0x20001a34
 800e96c:	0800e8e9 	.word	0x0800e8e9
 800e970:	200018fc 	.word	0x200018fc
 800e974:	20001964 	.word	0x20001964
 800e978:	200019cc 	.word	0x200019cc

0800e97c <__sfp_lock_acquire>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	4802      	ldr	r0, [pc, #8]	@ (800e988 <__sfp_lock_acquire+0xc>)
 800e980:	f000 f9a3 	bl	800ecca <__retarget_lock_acquire_recursive>
 800e984:	bd10      	pop	{r4, pc}
 800e986:	46c0      	nop			@ (mov r8, r8)
 800e988:	20001a3d 	.word	0x20001a3d

0800e98c <__sfp_lock_release>:
 800e98c:	b510      	push	{r4, lr}
 800e98e:	4802      	ldr	r0, [pc, #8]	@ (800e998 <__sfp_lock_release+0xc>)
 800e990:	f000 f99c 	bl	800eccc <__retarget_lock_release_recursive>
 800e994:	bd10      	pop	{r4, pc}
 800e996:	46c0      	nop			@ (mov r8, r8)
 800e998:	20001a3d 	.word	0x20001a3d

0800e99c <__sinit>:
 800e99c:	b510      	push	{r4, lr}
 800e99e:	0004      	movs	r4, r0
 800e9a0:	f7ff ffec 	bl	800e97c <__sfp_lock_acquire>
 800e9a4:	6a23      	ldr	r3, [r4, #32]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d002      	beq.n	800e9b0 <__sinit+0x14>
 800e9aa:	f7ff ffef 	bl	800e98c <__sfp_lock_release>
 800e9ae:	bd10      	pop	{r4, pc}
 800e9b0:	4b04      	ldr	r3, [pc, #16]	@ (800e9c4 <__sinit+0x28>)
 800e9b2:	6223      	str	r3, [r4, #32]
 800e9b4:	4b04      	ldr	r3, [pc, #16]	@ (800e9c8 <__sinit+0x2c>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d1f6      	bne.n	800e9aa <__sinit+0xe>
 800e9bc:	f7ff ffc0 	bl	800e940 <global_stdio_init.part.0>
 800e9c0:	e7f3      	b.n	800e9aa <__sinit+0xe>
 800e9c2:	46c0      	nop			@ (mov r8, r8)
 800e9c4:	0800e905 	.word	0x0800e905
 800e9c8:	20001a34 	.word	0x20001a34

0800e9cc <_fwalk_sglue>:
 800e9cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9ce:	0014      	movs	r4, r2
 800e9d0:	2600      	movs	r6, #0
 800e9d2:	9000      	str	r0, [sp, #0]
 800e9d4:	9101      	str	r1, [sp, #4]
 800e9d6:	68a5      	ldr	r5, [r4, #8]
 800e9d8:	6867      	ldr	r7, [r4, #4]
 800e9da:	3f01      	subs	r7, #1
 800e9dc:	d504      	bpl.n	800e9e8 <_fwalk_sglue+0x1c>
 800e9de:	6824      	ldr	r4, [r4, #0]
 800e9e0:	2c00      	cmp	r4, #0
 800e9e2:	d1f8      	bne.n	800e9d6 <_fwalk_sglue+0xa>
 800e9e4:	0030      	movs	r0, r6
 800e9e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e9e8:	89ab      	ldrh	r3, [r5, #12]
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d908      	bls.n	800ea00 <_fwalk_sglue+0x34>
 800e9ee:	220e      	movs	r2, #14
 800e9f0:	5eab      	ldrsh	r3, [r5, r2]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	d004      	beq.n	800ea00 <_fwalk_sglue+0x34>
 800e9f6:	0029      	movs	r1, r5
 800e9f8:	9800      	ldr	r0, [sp, #0]
 800e9fa:	9b01      	ldr	r3, [sp, #4]
 800e9fc:	4798      	blx	r3
 800e9fe:	4306      	orrs	r6, r0
 800ea00:	3568      	adds	r5, #104	@ 0x68
 800ea02:	e7ea      	b.n	800e9da <_fwalk_sglue+0xe>

0800ea04 <iprintf>:
 800ea04:	b40f      	push	{r0, r1, r2, r3}
 800ea06:	b507      	push	{r0, r1, r2, lr}
 800ea08:	4905      	ldr	r1, [pc, #20]	@ (800ea20 <iprintf+0x1c>)
 800ea0a:	ab04      	add	r3, sp, #16
 800ea0c:	6808      	ldr	r0, [r1, #0]
 800ea0e:	cb04      	ldmia	r3!, {r2}
 800ea10:	6881      	ldr	r1, [r0, #8]
 800ea12:	9301      	str	r3, [sp, #4]
 800ea14:	f001 fe18 	bl	8010648 <_vfiprintf_r>
 800ea18:	b003      	add	sp, #12
 800ea1a:	bc08      	pop	{r3}
 800ea1c:	b004      	add	sp, #16
 800ea1e:	4718      	bx	r3
 800ea20:	20000084 	.word	0x20000084

0800ea24 <siprintf>:
 800ea24:	b40e      	push	{r1, r2, r3}
 800ea26:	b500      	push	{lr}
 800ea28:	490b      	ldr	r1, [pc, #44]	@ (800ea58 <siprintf+0x34>)
 800ea2a:	b09c      	sub	sp, #112	@ 0x70
 800ea2c:	ab1d      	add	r3, sp, #116	@ 0x74
 800ea2e:	9002      	str	r0, [sp, #8]
 800ea30:	9006      	str	r0, [sp, #24]
 800ea32:	9107      	str	r1, [sp, #28]
 800ea34:	9104      	str	r1, [sp, #16]
 800ea36:	4809      	ldr	r0, [pc, #36]	@ (800ea5c <siprintf+0x38>)
 800ea38:	4909      	ldr	r1, [pc, #36]	@ (800ea60 <siprintf+0x3c>)
 800ea3a:	cb04      	ldmia	r3!, {r2}
 800ea3c:	9105      	str	r1, [sp, #20]
 800ea3e:	6800      	ldr	r0, [r0, #0]
 800ea40:	a902      	add	r1, sp, #8
 800ea42:	9301      	str	r3, [sp, #4]
 800ea44:	f001 fcda 	bl	80103fc <_svfiprintf_r>
 800ea48:	2200      	movs	r2, #0
 800ea4a:	9b02      	ldr	r3, [sp, #8]
 800ea4c:	701a      	strb	r2, [r3, #0]
 800ea4e:	b01c      	add	sp, #112	@ 0x70
 800ea50:	bc08      	pop	{r3}
 800ea52:	b003      	add	sp, #12
 800ea54:	4718      	bx	r3
 800ea56:	46c0      	nop			@ (mov r8, r8)
 800ea58:	7fffffff 	.word	0x7fffffff
 800ea5c:	20000084 	.word	0x20000084
 800ea60:	ffff0208 	.word	0xffff0208

0800ea64 <__sread>:
 800ea64:	b570      	push	{r4, r5, r6, lr}
 800ea66:	000c      	movs	r4, r1
 800ea68:	250e      	movs	r5, #14
 800ea6a:	5f49      	ldrsh	r1, [r1, r5]
 800ea6c:	f000 f8da 	bl	800ec24 <_read_r>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	db03      	blt.n	800ea7c <__sread+0x18>
 800ea74:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ea76:	181b      	adds	r3, r3, r0
 800ea78:	6563      	str	r3, [r4, #84]	@ 0x54
 800ea7a:	bd70      	pop	{r4, r5, r6, pc}
 800ea7c:	89a3      	ldrh	r3, [r4, #12]
 800ea7e:	4a02      	ldr	r2, [pc, #8]	@ (800ea88 <__sread+0x24>)
 800ea80:	4013      	ands	r3, r2
 800ea82:	81a3      	strh	r3, [r4, #12]
 800ea84:	e7f9      	b.n	800ea7a <__sread+0x16>
 800ea86:	46c0      	nop			@ (mov r8, r8)
 800ea88:	ffffefff 	.word	0xffffefff

0800ea8c <__swrite>:
 800ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8e:	001f      	movs	r7, r3
 800ea90:	898b      	ldrh	r3, [r1, #12]
 800ea92:	0005      	movs	r5, r0
 800ea94:	000c      	movs	r4, r1
 800ea96:	0016      	movs	r6, r2
 800ea98:	05db      	lsls	r3, r3, #23
 800ea9a:	d505      	bpl.n	800eaa8 <__swrite+0x1c>
 800ea9c:	230e      	movs	r3, #14
 800ea9e:	5ec9      	ldrsh	r1, [r1, r3]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	2302      	movs	r3, #2
 800eaa4:	f000 f8aa 	bl	800ebfc <_lseek_r>
 800eaa8:	89a3      	ldrh	r3, [r4, #12]
 800eaaa:	4a05      	ldr	r2, [pc, #20]	@ (800eac0 <__swrite+0x34>)
 800eaac:	0028      	movs	r0, r5
 800eaae:	4013      	ands	r3, r2
 800eab0:	81a3      	strh	r3, [r4, #12]
 800eab2:	0032      	movs	r2, r6
 800eab4:	230e      	movs	r3, #14
 800eab6:	5ee1      	ldrsh	r1, [r4, r3]
 800eab8:	003b      	movs	r3, r7
 800eaba:	f000 f8c7 	bl	800ec4c <_write_r>
 800eabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eac0:	ffffefff 	.word	0xffffefff

0800eac4 <__sseek>:
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	000c      	movs	r4, r1
 800eac8:	250e      	movs	r5, #14
 800eaca:	5f49      	ldrsh	r1, [r1, r5]
 800eacc:	f000 f896 	bl	800ebfc <_lseek_r>
 800ead0:	89a3      	ldrh	r3, [r4, #12]
 800ead2:	1c42      	adds	r2, r0, #1
 800ead4:	d103      	bne.n	800eade <__sseek+0x1a>
 800ead6:	4a05      	ldr	r2, [pc, #20]	@ (800eaec <__sseek+0x28>)
 800ead8:	4013      	ands	r3, r2
 800eada:	81a3      	strh	r3, [r4, #12]
 800eadc:	bd70      	pop	{r4, r5, r6, pc}
 800eade:	2280      	movs	r2, #128	@ 0x80
 800eae0:	0152      	lsls	r2, r2, #5
 800eae2:	4313      	orrs	r3, r2
 800eae4:	81a3      	strh	r3, [r4, #12]
 800eae6:	6560      	str	r0, [r4, #84]	@ 0x54
 800eae8:	e7f8      	b.n	800eadc <__sseek+0x18>
 800eaea:	46c0      	nop			@ (mov r8, r8)
 800eaec:	ffffefff 	.word	0xffffefff

0800eaf0 <__sclose>:
 800eaf0:	b510      	push	{r4, lr}
 800eaf2:	230e      	movs	r3, #14
 800eaf4:	5ec9      	ldrsh	r1, [r1, r3]
 800eaf6:	f000 f86f 	bl	800ebd8 <_close_r>
 800eafa:	bd10      	pop	{r4, pc}

0800eafc <_vsniprintf_r>:
 800eafc:	b530      	push	{r4, r5, lr}
 800eafe:	0014      	movs	r4, r2
 800eb00:	0005      	movs	r5, r0
 800eb02:	001a      	movs	r2, r3
 800eb04:	b09b      	sub	sp, #108	@ 0x6c
 800eb06:	2c00      	cmp	r4, #0
 800eb08:	da05      	bge.n	800eb16 <_vsniprintf_r+0x1a>
 800eb0a:	238b      	movs	r3, #139	@ 0x8b
 800eb0c:	6003      	str	r3, [r0, #0]
 800eb0e:	2001      	movs	r0, #1
 800eb10:	4240      	negs	r0, r0
 800eb12:	b01b      	add	sp, #108	@ 0x6c
 800eb14:	bd30      	pop	{r4, r5, pc}
 800eb16:	2382      	movs	r3, #130	@ 0x82
 800eb18:	4668      	mov	r0, sp
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	8183      	strh	r3, [r0, #12]
 800eb1e:	2300      	movs	r3, #0
 800eb20:	9100      	str	r1, [sp, #0]
 800eb22:	9104      	str	r1, [sp, #16]
 800eb24:	429c      	cmp	r4, r3
 800eb26:	d000      	beq.n	800eb2a <_vsniprintf_r+0x2e>
 800eb28:	1e63      	subs	r3, r4, #1
 800eb2a:	9302      	str	r3, [sp, #8]
 800eb2c:	9305      	str	r3, [sp, #20]
 800eb2e:	2301      	movs	r3, #1
 800eb30:	4669      	mov	r1, sp
 800eb32:	425b      	negs	r3, r3
 800eb34:	81cb      	strh	r3, [r1, #14]
 800eb36:	0028      	movs	r0, r5
 800eb38:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800eb3a:	f001 fc5f 	bl	80103fc <_svfiprintf_r>
 800eb3e:	1c43      	adds	r3, r0, #1
 800eb40:	da01      	bge.n	800eb46 <_vsniprintf_r+0x4a>
 800eb42:	238b      	movs	r3, #139	@ 0x8b
 800eb44:	602b      	str	r3, [r5, #0]
 800eb46:	2c00      	cmp	r4, #0
 800eb48:	d0e3      	beq.n	800eb12 <_vsniprintf_r+0x16>
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	9b00      	ldr	r3, [sp, #0]
 800eb4e:	701a      	strb	r2, [r3, #0]
 800eb50:	e7df      	b.n	800eb12 <_vsniprintf_r+0x16>
	...

0800eb54 <vsniprintf>:
 800eb54:	b513      	push	{r0, r1, r4, lr}
 800eb56:	4c04      	ldr	r4, [pc, #16]	@ (800eb68 <vsniprintf+0x14>)
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	0013      	movs	r3, r2
 800eb5c:	000a      	movs	r2, r1
 800eb5e:	0001      	movs	r1, r0
 800eb60:	6820      	ldr	r0, [r4, #0]
 800eb62:	f7ff ffcb 	bl	800eafc <_vsniprintf_r>
 800eb66:	bd16      	pop	{r1, r2, r4, pc}
 800eb68:	20000084 	.word	0x20000084

0800eb6c <memset>:
 800eb6c:	0003      	movs	r3, r0
 800eb6e:	1882      	adds	r2, r0, r2
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d100      	bne.n	800eb76 <memset+0xa>
 800eb74:	4770      	bx	lr
 800eb76:	7019      	strb	r1, [r3, #0]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	e7f9      	b.n	800eb70 <memset+0x4>

0800eb7c <strncpy>:
 800eb7c:	0003      	movs	r3, r0
 800eb7e:	b530      	push	{r4, r5, lr}
 800eb80:	001d      	movs	r5, r3
 800eb82:	2a00      	cmp	r2, #0
 800eb84:	d006      	beq.n	800eb94 <strncpy+0x18>
 800eb86:	780c      	ldrb	r4, [r1, #0]
 800eb88:	3a01      	subs	r2, #1
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	702c      	strb	r4, [r5, #0]
 800eb8e:	3101      	adds	r1, #1
 800eb90:	2c00      	cmp	r4, #0
 800eb92:	d1f5      	bne.n	800eb80 <strncpy+0x4>
 800eb94:	2100      	movs	r1, #0
 800eb96:	189a      	adds	r2, r3, r2
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d100      	bne.n	800eb9e <strncpy+0x22>
 800eb9c:	bd30      	pop	{r4, r5, pc}
 800eb9e:	7019      	strb	r1, [r3, #0]
 800eba0:	3301      	adds	r3, #1
 800eba2:	e7f9      	b.n	800eb98 <strncpy+0x1c>

0800eba4 <strstr>:
 800eba4:	780a      	ldrb	r2, [r1, #0]
 800eba6:	b530      	push	{r4, r5, lr}
 800eba8:	2a00      	cmp	r2, #0
 800ebaa:	d10c      	bne.n	800ebc6 <strstr+0x22>
 800ebac:	bd30      	pop	{r4, r5, pc}
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d108      	bne.n	800ebc4 <strstr+0x20>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	5ccc      	ldrb	r4, [r1, r3]
 800ebb6:	2c00      	cmp	r4, #0
 800ebb8:	d0f8      	beq.n	800ebac <strstr+0x8>
 800ebba:	5cc5      	ldrb	r5, [r0, r3]
 800ebbc:	42a5      	cmp	r5, r4
 800ebbe:	d101      	bne.n	800ebc4 <strstr+0x20>
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	e7f7      	b.n	800ebb4 <strstr+0x10>
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	7803      	ldrb	r3, [r0, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1f0      	bne.n	800ebae <strstr+0xa>
 800ebcc:	0018      	movs	r0, r3
 800ebce:	e7ed      	b.n	800ebac <strstr+0x8>

0800ebd0 <_localeconv_r>:
 800ebd0:	4800      	ldr	r0, [pc, #0]	@ (800ebd4 <_localeconv_r+0x4>)
 800ebd2:	4770      	bx	lr
 800ebd4:	200001c4 	.word	0x200001c4

0800ebd8 <_close_r>:
 800ebd8:	2300      	movs	r3, #0
 800ebda:	b570      	push	{r4, r5, r6, lr}
 800ebdc:	4d06      	ldr	r5, [pc, #24]	@ (800ebf8 <_close_r+0x20>)
 800ebde:	0004      	movs	r4, r0
 800ebe0:	0008      	movs	r0, r1
 800ebe2:	602b      	str	r3, [r5, #0]
 800ebe4:	f7f7 ff8a 	bl	8006afc <_close>
 800ebe8:	1c43      	adds	r3, r0, #1
 800ebea:	d103      	bne.n	800ebf4 <_close_r+0x1c>
 800ebec:	682b      	ldr	r3, [r5, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d000      	beq.n	800ebf4 <_close_r+0x1c>
 800ebf2:	6023      	str	r3, [r4, #0]
 800ebf4:	bd70      	pop	{r4, r5, r6, pc}
 800ebf6:	46c0      	nop			@ (mov r8, r8)
 800ebf8:	20001a38 	.word	0x20001a38

0800ebfc <_lseek_r>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	0004      	movs	r4, r0
 800ec00:	0008      	movs	r0, r1
 800ec02:	0011      	movs	r1, r2
 800ec04:	001a      	movs	r2, r3
 800ec06:	2300      	movs	r3, #0
 800ec08:	4d05      	ldr	r5, [pc, #20]	@ (800ec20 <_lseek_r+0x24>)
 800ec0a:	602b      	str	r3, [r5, #0]
 800ec0c:	f7f7 ff97 	bl	8006b3e <_lseek>
 800ec10:	1c43      	adds	r3, r0, #1
 800ec12:	d103      	bne.n	800ec1c <_lseek_r+0x20>
 800ec14:	682b      	ldr	r3, [r5, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d000      	beq.n	800ec1c <_lseek_r+0x20>
 800ec1a:	6023      	str	r3, [r4, #0]
 800ec1c:	bd70      	pop	{r4, r5, r6, pc}
 800ec1e:	46c0      	nop			@ (mov r8, r8)
 800ec20:	20001a38 	.word	0x20001a38

0800ec24 <_read_r>:
 800ec24:	b570      	push	{r4, r5, r6, lr}
 800ec26:	0004      	movs	r4, r0
 800ec28:	0008      	movs	r0, r1
 800ec2a:	0011      	movs	r1, r2
 800ec2c:	001a      	movs	r2, r3
 800ec2e:	2300      	movs	r3, #0
 800ec30:	4d05      	ldr	r5, [pc, #20]	@ (800ec48 <_read_r+0x24>)
 800ec32:	602b      	str	r3, [r5, #0]
 800ec34:	f7f7 ff45 	bl	8006ac2 <_read>
 800ec38:	1c43      	adds	r3, r0, #1
 800ec3a:	d103      	bne.n	800ec44 <_read_r+0x20>
 800ec3c:	682b      	ldr	r3, [r5, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d000      	beq.n	800ec44 <_read_r+0x20>
 800ec42:	6023      	str	r3, [r4, #0]
 800ec44:	bd70      	pop	{r4, r5, r6, pc}
 800ec46:	46c0      	nop			@ (mov r8, r8)
 800ec48:	20001a38 	.word	0x20001a38

0800ec4c <_write_r>:
 800ec4c:	b570      	push	{r4, r5, r6, lr}
 800ec4e:	0004      	movs	r4, r0
 800ec50:	0008      	movs	r0, r1
 800ec52:	0011      	movs	r1, r2
 800ec54:	001a      	movs	r2, r3
 800ec56:	2300      	movs	r3, #0
 800ec58:	4d05      	ldr	r5, [pc, #20]	@ (800ec70 <_write_r+0x24>)
 800ec5a:	602b      	str	r3, [r5, #0]
 800ec5c:	f7f8 fb92 	bl	8007384 <_write>
 800ec60:	1c43      	adds	r3, r0, #1
 800ec62:	d103      	bne.n	800ec6c <_write_r+0x20>
 800ec64:	682b      	ldr	r3, [r5, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d000      	beq.n	800ec6c <_write_r+0x20>
 800ec6a:	6023      	str	r3, [r4, #0]
 800ec6c:	bd70      	pop	{r4, r5, r6, pc}
 800ec6e:	46c0      	nop			@ (mov r8, r8)
 800ec70:	20001a38 	.word	0x20001a38

0800ec74 <__errno>:
 800ec74:	4b01      	ldr	r3, [pc, #4]	@ (800ec7c <__errno+0x8>)
 800ec76:	6818      	ldr	r0, [r3, #0]
 800ec78:	4770      	bx	lr
 800ec7a:	46c0      	nop			@ (mov r8, r8)
 800ec7c:	20000084 	.word	0x20000084

0800ec80 <__libc_init_array>:
 800ec80:	b570      	push	{r4, r5, r6, lr}
 800ec82:	2600      	movs	r6, #0
 800ec84:	4c0c      	ldr	r4, [pc, #48]	@ (800ecb8 <__libc_init_array+0x38>)
 800ec86:	4d0d      	ldr	r5, [pc, #52]	@ (800ecbc <__libc_init_array+0x3c>)
 800ec88:	1b64      	subs	r4, r4, r5
 800ec8a:	10a4      	asrs	r4, r4, #2
 800ec8c:	42a6      	cmp	r6, r4
 800ec8e:	d109      	bne.n	800eca4 <__libc_init_array+0x24>
 800ec90:	2600      	movs	r6, #0
 800ec92:	f002 fae1 	bl	8011258 <_init>
 800ec96:	4c0a      	ldr	r4, [pc, #40]	@ (800ecc0 <__libc_init_array+0x40>)
 800ec98:	4d0a      	ldr	r5, [pc, #40]	@ (800ecc4 <__libc_init_array+0x44>)
 800ec9a:	1b64      	subs	r4, r4, r5
 800ec9c:	10a4      	asrs	r4, r4, #2
 800ec9e:	42a6      	cmp	r6, r4
 800eca0:	d105      	bne.n	800ecae <__libc_init_array+0x2e>
 800eca2:	bd70      	pop	{r4, r5, r6, pc}
 800eca4:	00b3      	lsls	r3, r6, #2
 800eca6:	58eb      	ldr	r3, [r5, r3]
 800eca8:	4798      	blx	r3
 800ecaa:	3601      	adds	r6, #1
 800ecac:	e7ee      	b.n	800ec8c <__libc_init_array+0xc>
 800ecae:	00b3      	lsls	r3, r6, #2
 800ecb0:	58eb      	ldr	r3, [r5, r3]
 800ecb2:	4798      	blx	r3
 800ecb4:	3601      	adds	r6, #1
 800ecb6:	e7f2      	b.n	800ec9e <__libc_init_array+0x1e>
 800ecb8:	08011eb8 	.word	0x08011eb8
 800ecbc:	08011eb8 	.word	0x08011eb8
 800ecc0:	08011ebc 	.word	0x08011ebc
 800ecc4:	08011eb8 	.word	0x08011eb8

0800ecc8 <__retarget_lock_init_recursive>:
 800ecc8:	4770      	bx	lr

0800ecca <__retarget_lock_acquire_recursive>:
 800ecca:	4770      	bx	lr

0800eccc <__retarget_lock_release_recursive>:
 800eccc:	4770      	bx	lr

0800ecce <memchr>:
 800ecce:	b2c9      	uxtb	r1, r1
 800ecd0:	1882      	adds	r2, r0, r2
 800ecd2:	4290      	cmp	r0, r2
 800ecd4:	d101      	bne.n	800ecda <memchr+0xc>
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	4770      	bx	lr
 800ecda:	7803      	ldrb	r3, [r0, #0]
 800ecdc:	428b      	cmp	r3, r1
 800ecde:	d0fb      	beq.n	800ecd8 <memchr+0xa>
 800ece0:	3001      	adds	r0, #1
 800ece2:	e7f6      	b.n	800ecd2 <memchr+0x4>

0800ece4 <quorem>:
 800ece4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ece6:	6902      	ldr	r2, [r0, #16]
 800ece8:	690f      	ldr	r7, [r1, #16]
 800ecea:	b087      	sub	sp, #28
 800ecec:	0006      	movs	r6, r0
 800ecee:	000b      	movs	r3, r1
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	9102      	str	r1, [sp, #8]
 800ecf4:	42ba      	cmp	r2, r7
 800ecf6:	db6d      	blt.n	800edd4 <quorem+0xf0>
 800ecf8:	3f01      	subs	r7, #1
 800ecfa:	00bc      	lsls	r4, r7, #2
 800ecfc:	3314      	adds	r3, #20
 800ecfe:	9305      	str	r3, [sp, #20]
 800ed00:	191b      	adds	r3, r3, r4
 800ed02:	9303      	str	r3, [sp, #12]
 800ed04:	0033      	movs	r3, r6
 800ed06:	3314      	adds	r3, #20
 800ed08:	191c      	adds	r4, r3, r4
 800ed0a:	9301      	str	r3, [sp, #4]
 800ed0c:	6823      	ldr	r3, [r4, #0]
 800ed0e:	9304      	str	r3, [sp, #16]
 800ed10:	9b03      	ldr	r3, [sp, #12]
 800ed12:	9804      	ldr	r0, [sp, #16]
 800ed14:	681d      	ldr	r5, [r3, #0]
 800ed16:	3501      	adds	r5, #1
 800ed18:	0029      	movs	r1, r5
 800ed1a:	f7f1 fa11 	bl	8000140 <__udivsi3>
 800ed1e:	9b04      	ldr	r3, [sp, #16]
 800ed20:	9000      	str	r0, [sp, #0]
 800ed22:	42ab      	cmp	r3, r5
 800ed24:	d32b      	bcc.n	800ed7e <quorem+0x9a>
 800ed26:	9b05      	ldr	r3, [sp, #20]
 800ed28:	9d01      	ldr	r5, [sp, #4]
 800ed2a:	469c      	mov	ip, r3
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	9305      	str	r3, [sp, #20]
 800ed30:	9304      	str	r3, [sp, #16]
 800ed32:	4662      	mov	r2, ip
 800ed34:	ca08      	ldmia	r2!, {r3}
 800ed36:	6828      	ldr	r0, [r5, #0]
 800ed38:	4694      	mov	ip, r2
 800ed3a:	9a00      	ldr	r2, [sp, #0]
 800ed3c:	b299      	uxth	r1, r3
 800ed3e:	4351      	muls	r1, r2
 800ed40:	9a05      	ldr	r2, [sp, #20]
 800ed42:	0c1b      	lsrs	r3, r3, #16
 800ed44:	1889      	adds	r1, r1, r2
 800ed46:	9a00      	ldr	r2, [sp, #0]
 800ed48:	4353      	muls	r3, r2
 800ed4a:	0c0a      	lsrs	r2, r1, #16
 800ed4c:	189b      	adds	r3, r3, r2
 800ed4e:	0c1a      	lsrs	r2, r3, #16
 800ed50:	b289      	uxth	r1, r1
 800ed52:	9205      	str	r2, [sp, #20]
 800ed54:	b282      	uxth	r2, r0
 800ed56:	1a52      	subs	r2, r2, r1
 800ed58:	9904      	ldr	r1, [sp, #16]
 800ed5a:	0c00      	lsrs	r0, r0, #16
 800ed5c:	1852      	adds	r2, r2, r1
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	1411      	asrs	r1, r2, #16
 800ed62:	1ac3      	subs	r3, r0, r3
 800ed64:	185b      	adds	r3, r3, r1
 800ed66:	1419      	asrs	r1, r3, #16
 800ed68:	b292      	uxth	r2, r2
 800ed6a:	041b      	lsls	r3, r3, #16
 800ed6c:	431a      	orrs	r2, r3
 800ed6e:	9b03      	ldr	r3, [sp, #12]
 800ed70:	9104      	str	r1, [sp, #16]
 800ed72:	c504      	stmia	r5!, {r2}
 800ed74:	4563      	cmp	r3, ip
 800ed76:	d2dc      	bcs.n	800ed32 <quorem+0x4e>
 800ed78:	6823      	ldr	r3, [r4, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d030      	beq.n	800ede0 <quorem+0xfc>
 800ed7e:	0030      	movs	r0, r6
 800ed80:	9902      	ldr	r1, [sp, #8]
 800ed82:	f001 f9c5 	bl	8010110 <__mcmp>
 800ed86:	2800      	cmp	r0, #0
 800ed88:	db23      	blt.n	800edd2 <quorem+0xee>
 800ed8a:	0034      	movs	r4, r6
 800ed8c:	2500      	movs	r5, #0
 800ed8e:	9902      	ldr	r1, [sp, #8]
 800ed90:	3414      	adds	r4, #20
 800ed92:	3114      	adds	r1, #20
 800ed94:	6823      	ldr	r3, [r4, #0]
 800ed96:	c901      	ldmia	r1!, {r0}
 800ed98:	9302      	str	r3, [sp, #8]
 800ed9a:	466b      	mov	r3, sp
 800ed9c:	891b      	ldrh	r3, [r3, #8]
 800ed9e:	b282      	uxth	r2, r0
 800eda0:	1a9a      	subs	r2, r3, r2
 800eda2:	9b02      	ldr	r3, [sp, #8]
 800eda4:	1952      	adds	r2, r2, r5
 800eda6:	0c00      	lsrs	r0, r0, #16
 800eda8:	0c1b      	lsrs	r3, r3, #16
 800edaa:	1a1b      	subs	r3, r3, r0
 800edac:	1410      	asrs	r0, r2, #16
 800edae:	181b      	adds	r3, r3, r0
 800edb0:	141d      	asrs	r5, r3, #16
 800edb2:	b292      	uxth	r2, r2
 800edb4:	041b      	lsls	r3, r3, #16
 800edb6:	431a      	orrs	r2, r3
 800edb8:	9b03      	ldr	r3, [sp, #12]
 800edba:	c404      	stmia	r4!, {r2}
 800edbc:	428b      	cmp	r3, r1
 800edbe:	d2e9      	bcs.n	800ed94 <quorem+0xb0>
 800edc0:	9a01      	ldr	r2, [sp, #4]
 800edc2:	00bb      	lsls	r3, r7, #2
 800edc4:	18d3      	adds	r3, r2, r3
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	2a00      	cmp	r2, #0
 800edca:	d013      	beq.n	800edf4 <quorem+0x110>
 800edcc:	9b00      	ldr	r3, [sp, #0]
 800edce:	3301      	adds	r3, #1
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	9800      	ldr	r0, [sp, #0]
 800edd4:	b007      	add	sp, #28
 800edd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edd8:	6823      	ldr	r3, [r4, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d104      	bne.n	800ede8 <quorem+0x104>
 800edde:	3f01      	subs	r7, #1
 800ede0:	9b01      	ldr	r3, [sp, #4]
 800ede2:	3c04      	subs	r4, #4
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	d3f7      	bcc.n	800edd8 <quorem+0xf4>
 800ede8:	6137      	str	r7, [r6, #16]
 800edea:	e7c8      	b.n	800ed7e <quorem+0x9a>
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	2a00      	cmp	r2, #0
 800edf0:	d104      	bne.n	800edfc <quorem+0x118>
 800edf2:	3f01      	subs	r7, #1
 800edf4:	9a01      	ldr	r2, [sp, #4]
 800edf6:	3b04      	subs	r3, #4
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d3f7      	bcc.n	800edec <quorem+0x108>
 800edfc:	6137      	str	r7, [r6, #16]
 800edfe:	e7e5      	b.n	800edcc <quorem+0xe8>

0800ee00 <_dtoa_r>:
 800ee00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee02:	0014      	movs	r4, r2
 800ee04:	001d      	movs	r5, r3
 800ee06:	69c6      	ldr	r6, [r0, #28]
 800ee08:	b09d      	sub	sp, #116	@ 0x74
 800ee0a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ee0c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800ee0e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800ee10:	9003      	str	r0, [sp, #12]
 800ee12:	2e00      	cmp	r6, #0
 800ee14:	d10f      	bne.n	800ee36 <_dtoa_r+0x36>
 800ee16:	2010      	movs	r0, #16
 800ee18:	f000 fe30 	bl	800fa7c <malloc>
 800ee1c:	9b03      	ldr	r3, [sp, #12]
 800ee1e:	1e02      	subs	r2, r0, #0
 800ee20:	61d8      	str	r0, [r3, #28]
 800ee22:	d104      	bne.n	800ee2e <_dtoa_r+0x2e>
 800ee24:	21ef      	movs	r1, #239	@ 0xef
 800ee26:	4bc7      	ldr	r3, [pc, #796]	@ (800f144 <_dtoa_r+0x344>)
 800ee28:	48c7      	ldr	r0, [pc, #796]	@ (800f148 <_dtoa_r+0x348>)
 800ee2a:	f001 feab 	bl	8010b84 <__assert_func>
 800ee2e:	6046      	str	r6, [r0, #4]
 800ee30:	6086      	str	r6, [r0, #8]
 800ee32:	6006      	str	r6, [r0, #0]
 800ee34:	60c6      	str	r6, [r0, #12]
 800ee36:	9b03      	ldr	r3, [sp, #12]
 800ee38:	69db      	ldr	r3, [r3, #28]
 800ee3a:	6819      	ldr	r1, [r3, #0]
 800ee3c:	2900      	cmp	r1, #0
 800ee3e:	d00b      	beq.n	800ee58 <_dtoa_r+0x58>
 800ee40:	685a      	ldr	r2, [r3, #4]
 800ee42:	2301      	movs	r3, #1
 800ee44:	4093      	lsls	r3, r2
 800ee46:	604a      	str	r2, [r1, #4]
 800ee48:	608b      	str	r3, [r1, #8]
 800ee4a:	9803      	ldr	r0, [sp, #12]
 800ee4c:	f000 ff16 	bl	800fc7c <_Bfree>
 800ee50:	2200      	movs	r2, #0
 800ee52:	9b03      	ldr	r3, [sp, #12]
 800ee54:	69db      	ldr	r3, [r3, #28]
 800ee56:	601a      	str	r2, [r3, #0]
 800ee58:	2d00      	cmp	r5, #0
 800ee5a:	da1e      	bge.n	800ee9a <_dtoa_r+0x9a>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	603b      	str	r3, [r7, #0]
 800ee60:	006b      	lsls	r3, r5, #1
 800ee62:	085b      	lsrs	r3, r3, #1
 800ee64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee66:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ee68:	4bb8      	ldr	r3, [pc, #736]	@ (800f14c <_dtoa_r+0x34c>)
 800ee6a:	4ab8      	ldr	r2, [pc, #736]	@ (800f14c <_dtoa_r+0x34c>)
 800ee6c:	403b      	ands	r3, r7
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d116      	bne.n	800eea0 <_dtoa_r+0xa0>
 800ee72:	4bb7      	ldr	r3, [pc, #732]	@ (800f150 <_dtoa_r+0x350>)
 800ee74:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ee76:	6013      	str	r3, [r2, #0]
 800ee78:	033b      	lsls	r3, r7, #12
 800ee7a:	0b1b      	lsrs	r3, r3, #12
 800ee7c:	4323      	orrs	r3, r4
 800ee7e:	d101      	bne.n	800ee84 <_dtoa_r+0x84>
 800ee80:	f000 fd83 	bl	800f98a <_dtoa_r+0xb8a>
 800ee84:	4bb3      	ldr	r3, [pc, #716]	@ (800f154 <_dtoa_r+0x354>)
 800ee86:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ee88:	9308      	str	r3, [sp, #32]
 800ee8a:	2a00      	cmp	r2, #0
 800ee8c:	d002      	beq.n	800ee94 <_dtoa_r+0x94>
 800ee8e:	4bb2      	ldr	r3, [pc, #712]	@ (800f158 <_dtoa_r+0x358>)
 800ee90:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ee92:	6013      	str	r3, [r2, #0]
 800ee94:	9808      	ldr	r0, [sp, #32]
 800ee96:	b01d      	add	sp, #116	@ 0x74
 800ee98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	603b      	str	r3, [r7, #0]
 800ee9e:	e7e2      	b.n	800ee66 <_dtoa_r+0x66>
 800eea0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eea2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eea4:	9212      	str	r2, [sp, #72]	@ 0x48
 800eea6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eea8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800eeaa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800eeac:	2200      	movs	r2, #0
 800eeae:	2300      	movs	r3, #0
 800eeb0:	f7f1 facc 	bl	800044c <__aeabi_dcmpeq>
 800eeb4:	1e06      	subs	r6, r0, #0
 800eeb6:	d00b      	beq.n	800eed0 <_dtoa_r+0xd0>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800eebc:	6013      	str	r3, [r2, #0]
 800eebe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <_dtoa_r+0xca>
 800eec4:	4ba5      	ldr	r3, [pc, #660]	@ (800f15c <_dtoa_r+0x35c>)
 800eec6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800eec8:	6013      	str	r3, [r2, #0]
 800eeca:	4ba5      	ldr	r3, [pc, #660]	@ (800f160 <_dtoa_r+0x360>)
 800eecc:	9308      	str	r3, [sp, #32]
 800eece:	e7e1      	b.n	800ee94 <_dtoa_r+0x94>
 800eed0:	ab1a      	add	r3, sp, #104	@ 0x68
 800eed2:	9301      	str	r3, [sp, #4]
 800eed4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	9803      	ldr	r0, [sp, #12]
 800eeda:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800eedc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eede:	f001 f9cd 	bl	801027c <__d2b>
 800eee2:	007a      	lsls	r2, r7, #1
 800eee4:	9005      	str	r0, [sp, #20]
 800eee6:	0d52      	lsrs	r2, r2, #21
 800eee8:	d100      	bne.n	800eeec <_dtoa_r+0xec>
 800eeea:	e07b      	b.n	800efe4 <_dtoa_r+0x1e4>
 800eeec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eeee:	9618      	str	r6, [sp, #96]	@ 0x60
 800eef0:	0319      	lsls	r1, r3, #12
 800eef2:	4b9c      	ldr	r3, [pc, #624]	@ (800f164 <_dtoa_r+0x364>)
 800eef4:	0b09      	lsrs	r1, r1, #12
 800eef6:	430b      	orrs	r3, r1
 800eef8:	499b      	ldr	r1, [pc, #620]	@ (800f168 <_dtoa_r+0x368>)
 800eefa:	1857      	adds	r7, r2, r1
 800eefc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800eefe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ef00:	0019      	movs	r1, r3
 800ef02:	2200      	movs	r2, #0
 800ef04:	4b99      	ldr	r3, [pc, #612]	@ (800f16c <_dtoa_r+0x36c>)
 800ef06:	f7f3 fddf 	bl	8002ac8 <__aeabi_dsub>
 800ef0a:	4a99      	ldr	r2, [pc, #612]	@ (800f170 <_dtoa_r+0x370>)
 800ef0c:	4b99      	ldr	r3, [pc, #612]	@ (800f174 <_dtoa_r+0x374>)
 800ef0e:	f7f3 fb13 	bl	8002538 <__aeabi_dmul>
 800ef12:	4a99      	ldr	r2, [pc, #612]	@ (800f178 <_dtoa_r+0x378>)
 800ef14:	4b99      	ldr	r3, [pc, #612]	@ (800f17c <_dtoa_r+0x37c>)
 800ef16:	f7f2 fb67 	bl	80015e8 <__aeabi_dadd>
 800ef1a:	0004      	movs	r4, r0
 800ef1c:	0038      	movs	r0, r7
 800ef1e:	000d      	movs	r5, r1
 800ef20:	f7f4 f9cc 	bl	80032bc <__aeabi_i2d>
 800ef24:	4a96      	ldr	r2, [pc, #600]	@ (800f180 <_dtoa_r+0x380>)
 800ef26:	4b97      	ldr	r3, [pc, #604]	@ (800f184 <_dtoa_r+0x384>)
 800ef28:	f7f3 fb06 	bl	8002538 <__aeabi_dmul>
 800ef2c:	0002      	movs	r2, r0
 800ef2e:	000b      	movs	r3, r1
 800ef30:	0020      	movs	r0, r4
 800ef32:	0029      	movs	r1, r5
 800ef34:	f7f2 fb58 	bl	80015e8 <__aeabi_dadd>
 800ef38:	0004      	movs	r4, r0
 800ef3a:	000d      	movs	r5, r1
 800ef3c:	f7f4 f982 	bl	8003244 <__aeabi_d2iz>
 800ef40:	2200      	movs	r2, #0
 800ef42:	9004      	str	r0, [sp, #16]
 800ef44:	2300      	movs	r3, #0
 800ef46:	0020      	movs	r0, r4
 800ef48:	0029      	movs	r1, r5
 800ef4a:	f7f1 fa85 	bl	8000458 <__aeabi_dcmplt>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d00b      	beq.n	800ef6a <_dtoa_r+0x16a>
 800ef52:	9804      	ldr	r0, [sp, #16]
 800ef54:	f7f4 f9b2 	bl	80032bc <__aeabi_i2d>
 800ef58:	002b      	movs	r3, r5
 800ef5a:	0022      	movs	r2, r4
 800ef5c:	f7f1 fa76 	bl	800044c <__aeabi_dcmpeq>
 800ef60:	4243      	negs	r3, r0
 800ef62:	4158      	adcs	r0, r3
 800ef64:	9b04      	ldr	r3, [sp, #16]
 800ef66:	1a1b      	subs	r3, r3, r0
 800ef68:	9304      	str	r3, [sp, #16]
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ef6e:	9b04      	ldr	r3, [sp, #16]
 800ef70:	2b16      	cmp	r3, #22
 800ef72:	d810      	bhi.n	800ef96 <_dtoa_r+0x196>
 800ef74:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ef76:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ef78:	9a04      	ldr	r2, [sp, #16]
 800ef7a:	4b83      	ldr	r3, [pc, #524]	@ (800f188 <_dtoa_r+0x388>)
 800ef7c:	00d2      	lsls	r2, r2, #3
 800ef7e:	189b      	adds	r3, r3, r2
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	f7f1 fa68 	bl	8000458 <__aeabi_dcmplt>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d047      	beq.n	800f01c <_dtoa_r+0x21c>
 800ef8c:	9b04      	ldr	r3, [sp, #16]
 800ef8e:	3b01      	subs	r3, #1
 800ef90:	9304      	str	r3, [sp, #16]
 800ef92:	2300      	movs	r3, #0
 800ef94:	9315      	str	r3, [sp, #84]	@ 0x54
 800ef96:	2200      	movs	r2, #0
 800ef98:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ef9a:	9206      	str	r2, [sp, #24]
 800ef9c:	1bdb      	subs	r3, r3, r7
 800ef9e:	1e5a      	subs	r2, r3, #1
 800efa0:	d53e      	bpl.n	800f020 <_dtoa_r+0x220>
 800efa2:	2201      	movs	r2, #1
 800efa4:	1ad3      	subs	r3, r2, r3
 800efa6:	9306      	str	r3, [sp, #24]
 800efa8:	2300      	movs	r3, #0
 800efaa:	930d      	str	r3, [sp, #52]	@ 0x34
 800efac:	9b04      	ldr	r3, [sp, #16]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	db38      	blt.n	800f024 <_dtoa_r+0x224>
 800efb2:	9a04      	ldr	r2, [sp, #16]
 800efb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800efb6:	4694      	mov	ip, r2
 800efb8:	4463      	add	r3, ip
 800efba:	930d      	str	r3, [sp, #52]	@ 0x34
 800efbc:	2300      	movs	r3, #0
 800efbe:	9214      	str	r2, [sp, #80]	@ 0x50
 800efc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efc2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800efc4:	2401      	movs	r4, #1
 800efc6:	2b09      	cmp	r3, #9
 800efc8:	d867      	bhi.n	800f09a <_dtoa_r+0x29a>
 800efca:	2b05      	cmp	r3, #5
 800efcc:	dd02      	ble.n	800efd4 <_dtoa_r+0x1d4>
 800efce:	2400      	movs	r4, #0
 800efd0:	3b04      	subs	r3, #4
 800efd2:	9322      	str	r3, [sp, #136]	@ 0x88
 800efd4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800efd6:	1e98      	subs	r0, r3, #2
 800efd8:	2803      	cmp	r0, #3
 800efda:	d867      	bhi.n	800f0ac <_dtoa_r+0x2ac>
 800efdc:	f7f1 f89c 	bl	8000118 <__gnu_thumb1_case_uqi>
 800efe0:	5b383a2b 	.word	0x5b383a2b
 800efe4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800efe6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800efe8:	18f6      	adds	r6, r6, r3
 800efea:	4b68      	ldr	r3, [pc, #416]	@ (800f18c <_dtoa_r+0x38c>)
 800efec:	18f2      	adds	r2, r6, r3
 800efee:	2a20      	cmp	r2, #32
 800eff0:	dd0f      	ble.n	800f012 <_dtoa_r+0x212>
 800eff2:	2340      	movs	r3, #64	@ 0x40
 800eff4:	1a9b      	subs	r3, r3, r2
 800eff6:	409f      	lsls	r7, r3
 800eff8:	4b65      	ldr	r3, [pc, #404]	@ (800f190 <_dtoa_r+0x390>)
 800effa:	0038      	movs	r0, r7
 800effc:	18f3      	adds	r3, r6, r3
 800effe:	40dc      	lsrs	r4, r3
 800f000:	4320      	orrs	r0, r4
 800f002:	f7f4 f989 	bl	8003318 <__aeabi_ui2d>
 800f006:	2201      	movs	r2, #1
 800f008:	4b62      	ldr	r3, [pc, #392]	@ (800f194 <_dtoa_r+0x394>)
 800f00a:	1e77      	subs	r7, r6, #1
 800f00c:	18cb      	adds	r3, r1, r3
 800f00e:	9218      	str	r2, [sp, #96]	@ 0x60
 800f010:	e776      	b.n	800ef00 <_dtoa_r+0x100>
 800f012:	2320      	movs	r3, #32
 800f014:	0020      	movs	r0, r4
 800f016:	1a9b      	subs	r3, r3, r2
 800f018:	4098      	lsls	r0, r3
 800f01a:	e7f2      	b.n	800f002 <_dtoa_r+0x202>
 800f01c:	9015      	str	r0, [sp, #84]	@ 0x54
 800f01e:	e7ba      	b.n	800ef96 <_dtoa_r+0x196>
 800f020:	920d      	str	r2, [sp, #52]	@ 0x34
 800f022:	e7c3      	b.n	800efac <_dtoa_r+0x1ac>
 800f024:	9b06      	ldr	r3, [sp, #24]
 800f026:	9a04      	ldr	r2, [sp, #16]
 800f028:	1a9b      	subs	r3, r3, r2
 800f02a:	9306      	str	r3, [sp, #24]
 800f02c:	4253      	negs	r3, r2
 800f02e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f030:	2300      	movs	r3, #0
 800f032:	9314      	str	r3, [sp, #80]	@ 0x50
 800f034:	e7c5      	b.n	800efc2 <_dtoa_r+0x1c2>
 800f036:	2300      	movs	r3, #0
 800f038:	9310      	str	r3, [sp, #64]	@ 0x40
 800f03a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f03c:	930e      	str	r3, [sp, #56]	@ 0x38
 800f03e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f040:	2b00      	cmp	r3, #0
 800f042:	dc13      	bgt.n	800f06c <_dtoa_r+0x26c>
 800f044:	2301      	movs	r3, #1
 800f046:	001a      	movs	r2, r3
 800f048:	930e      	str	r3, [sp, #56]	@ 0x38
 800f04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f04c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800f04e:	e00d      	b.n	800f06c <_dtoa_r+0x26c>
 800f050:	2301      	movs	r3, #1
 800f052:	e7f1      	b.n	800f038 <_dtoa_r+0x238>
 800f054:	2300      	movs	r3, #0
 800f056:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f058:	9310      	str	r3, [sp, #64]	@ 0x40
 800f05a:	4694      	mov	ip, r2
 800f05c:	9b04      	ldr	r3, [sp, #16]
 800f05e:	4463      	add	r3, ip
 800f060:	930e      	str	r3, [sp, #56]	@ 0x38
 800f062:	3301      	adds	r3, #1
 800f064:	9309      	str	r3, [sp, #36]	@ 0x24
 800f066:	2b00      	cmp	r3, #0
 800f068:	dc00      	bgt.n	800f06c <_dtoa_r+0x26c>
 800f06a:	2301      	movs	r3, #1
 800f06c:	9a03      	ldr	r2, [sp, #12]
 800f06e:	2100      	movs	r1, #0
 800f070:	69d0      	ldr	r0, [r2, #28]
 800f072:	2204      	movs	r2, #4
 800f074:	0015      	movs	r5, r2
 800f076:	3514      	adds	r5, #20
 800f078:	429d      	cmp	r5, r3
 800f07a:	d91b      	bls.n	800f0b4 <_dtoa_r+0x2b4>
 800f07c:	6041      	str	r1, [r0, #4]
 800f07e:	9803      	ldr	r0, [sp, #12]
 800f080:	f000 fdb8 	bl	800fbf4 <_Balloc>
 800f084:	9008      	str	r0, [sp, #32]
 800f086:	2800      	cmp	r0, #0
 800f088:	d117      	bne.n	800f0ba <_dtoa_r+0x2ba>
 800f08a:	21b0      	movs	r1, #176	@ 0xb0
 800f08c:	4b42      	ldr	r3, [pc, #264]	@ (800f198 <_dtoa_r+0x398>)
 800f08e:	482e      	ldr	r0, [pc, #184]	@ (800f148 <_dtoa_r+0x348>)
 800f090:	9a08      	ldr	r2, [sp, #32]
 800f092:	31ff      	adds	r1, #255	@ 0xff
 800f094:	e6c9      	b.n	800ee2a <_dtoa_r+0x2a>
 800f096:	2301      	movs	r3, #1
 800f098:	e7dd      	b.n	800f056 <_dtoa_r+0x256>
 800f09a:	2300      	movs	r3, #0
 800f09c:	9410      	str	r4, [sp, #64]	@ 0x40
 800f09e:	9322      	str	r3, [sp, #136]	@ 0x88
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	930e      	str	r3, [sp, #56]	@ 0x38
 800f0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	3313      	adds	r3, #19
 800f0aa:	e7cf      	b.n	800f04c <_dtoa_r+0x24c>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800f0b0:	3b02      	subs	r3, #2
 800f0b2:	e7f6      	b.n	800f0a2 <_dtoa_r+0x2a2>
 800f0b4:	3101      	adds	r1, #1
 800f0b6:	0052      	lsls	r2, r2, #1
 800f0b8:	e7dc      	b.n	800f074 <_dtoa_r+0x274>
 800f0ba:	9b03      	ldr	r3, [sp, #12]
 800f0bc:	9a08      	ldr	r2, [sp, #32]
 800f0be:	69db      	ldr	r3, [r3, #28]
 800f0c0:	601a      	str	r2, [r3, #0]
 800f0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0c4:	2b0e      	cmp	r3, #14
 800f0c6:	d900      	bls.n	800f0ca <_dtoa_r+0x2ca>
 800f0c8:	e0d9      	b.n	800f27e <_dtoa_r+0x47e>
 800f0ca:	2c00      	cmp	r4, #0
 800f0cc:	d100      	bne.n	800f0d0 <_dtoa_r+0x2d0>
 800f0ce:	e0d6      	b.n	800f27e <_dtoa_r+0x47e>
 800f0d0:	9b04      	ldr	r3, [sp, #16]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	dd64      	ble.n	800f1a0 <_dtoa_r+0x3a0>
 800f0d6:	210f      	movs	r1, #15
 800f0d8:	9a04      	ldr	r2, [sp, #16]
 800f0da:	4b2b      	ldr	r3, [pc, #172]	@ (800f188 <_dtoa_r+0x388>)
 800f0dc:	400a      	ands	r2, r1
 800f0de:	00d2      	lsls	r2, r2, #3
 800f0e0:	189b      	adds	r3, r3, r2
 800f0e2:	681e      	ldr	r6, [r3, #0]
 800f0e4:	685f      	ldr	r7, [r3, #4]
 800f0e6:	9b04      	ldr	r3, [sp, #16]
 800f0e8:	2402      	movs	r4, #2
 800f0ea:	111d      	asrs	r5, r3, #4
 800f0ec:	05db      	lsls	r3, r3, #23
 800f0ee:	d50a      	bpl.n	800f106 <_dtoa_r+0x306>
 800f0f0:	4b2a      	ldr	r3, [pc, #168]	@ (800f19c <_dtoa_r+0x39c>)
 800f0f2:	400d      	ands	r5, r1
 800f0f4:	6a1a      	ldr	r2, [r3, #32]
 800f0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f0fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f0fc:	f7f2 fdd8 	bl	8001cb0 <__aeabi_ddiv>
 800f100:	900a      	str	r0, [sp, #40]	@ 0x28
 800f102:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f104:	3401      	adds	r4, #1
 800f106:	4b25      	ldr	r3, [pc, #148]	@ (800f19c <_dtoa_r+0x39c>)
 800f108:	930c      	str	r3, [sp, #48]	@ 0x30
 800f10a:	2d00      	cmp	r5, #0
 800f10c:	d108      	bne.n	800f120 <_dtoa_r+0x320>
 800f10e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f110:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f112:	0032      	movs	r2, r6
 800f114:	003b      	movs	r3, r7
 800f116:	f7f2 fdcb 	bl	8001cb0 <__aeabi_ddiv>
 800f11a:	900a      	str	r0, [sp, #40]	@ 0x28
 800f11c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f11e:	e05a      	b.n	800f1d6 <_dtoa_r+0x3d6>
 800f120:	2301      	movs	r3, #1
 800f122:	421d      	tst	r5, r3
 800f124:	d009      	beq.n	800f13a <_dtoa_r+0x33a>
 800f126:	18e4      	adds	r4, r4, r3
 800f128:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f12a:	0030      	movs	r0, r6
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	0039      	movs	r1, r7
 800f132:	f7f3 fa01 	bl	8002538 <__aeabi_dmul>
 800f136:	0006      	movs	r6, r0
 800f138:	000f      	movs	r7, r1
 800f13a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f13c:	106d      	asrs	r5, r5, #1
 800f13e:	3308      	adds	r3, #8
 800f140:	e7e2      	b.n	800f108 <_dtoa_r+0x308>
 800f142:	46c0      	nop			@ (mov r8, r8)
 800f144:	08011b65 	.word	0x08011b65
 800f148:	08011b7c 	.word	0x08011b7c
 800f14c:	7ff00000 	.word	0x7ff00000
 800f150:	0000270f 	.word	0x0000270f
 800f154:	08011b61 	.word	0x08011b61
 800f158:	08011b64 	.word	0x08011b64
 800f15c:	08011b35 	.word	0x08011b35
 800f160:	08011b34 	.word	0x08011b34
 800f164:	3ff00000 	.word	0x3ff00000
 800f168:	fffffc01 	.word	0xfffffc01
 800f16c:	3ff80000 	.word	0x3ff80000
 800f170:	636f4361 	.word	0x636f4361
 800f174:	3fd287a7 	.word	0x3fd287a7
 800f178:	8b60c8b3 	.word	0x8b60c8b3
 800f17c:	3fc68a28 	.word	0x3fc68a28
 800f180:	509f79fb 	.word	0x509f79fb
 800f184:	3fd34413 	.word	0x3fd34413
 800f188:	08011c78 	.word	0x08011c78
 800f18c:	00000432 	.word	0x00000432
 800f190:	00000412 	.word	0x00000412
 800f194:	fe100000 	.word	0xfe100000
 800f198:	08011bd4 	.word	0x08011bd4
 800f19c:	08011c50 	.word	0x08011c50
 800f1a0:	9b04      	ldr	r3, [sp, #16]
 800f1a2:	2402      	movs	r4, #2
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d016      	beq.n	800f1d6 <_dtoa_r+0x3d6>
 800f1a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f1aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f1ac:	220f      	movs	r2, #15
 800f1ae:	425d      	negs	r5, r3
 800f1b0:	402a      	ands	r2, r5
 800f1b2:	4bd7      	ldr	r3, [pc, #860]	@ (800f510 <_dtoa_r+0x710>)
 800f1b4:	00d2      	lsls	r2, r2, #3
 800f1b6:	189b      	adds	r3, r3, r2
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	f7f3 f9bc 	bl	8002538 <__aeabi_dmul>
 800f1c0:	2701      	movs	r7, #1
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f1c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f1c8:	4ed2      	ldr	r6, [pc, #840]	@ (800f514 <_dtoa_r+0x714>)
 800f1ca:	112d      	asrs	r5, r5, #4
 800f1cc:	2d00      	cmp	r5, #0
 800f1ce:	d000      	beq.n	800f1d2 <_dtoa_r+0x3d2>
 800f1d0:	e0ba      	b.n	800f348 <_dtoa_r+0x548>
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d1a1      	bne.n	800f11a <_dtoa_r+0x31a>
 800f1d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f1d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f1da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d100      	bne.n	800f1e2 <_dtoa_r+0x3e2>
 800f1e0:	e0bd      	b.n	800f35e <_dtoa_r+0x55e>
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	0030      	movs	r0, r6
 800f1e6:	0039      	movs	r1, r7
 800f1e8:	4bcb      	ldr	r3, [pc, #812]	@ (800f518 <_dtoa_r+0x718>)
 800f1ea:	f7f1 f935 	bl	8000458 <__aeabi_dcmplt>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	d100      	bne.n	800f1f4 <_dtoa_r+0x3f4>
 800f1f2:	e0b4      	b.n	800f35e <_dtoa_r+0x55e>
 800f1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d100      	bne.n	800f1fc <_dtoa_r+0x3fc>
 800f1fa:	e0b0      	b.n	800f35e <_dtoa_r+0x55e>
 800f1fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	dd39      	ble.n	800f276 <_dtoa_r+0x476>
 800f202:	9b04      	ldr	r3, [sp, #16]
 800f204:	2200      	movs	r2, #0
 800f206:	3b01      	subs	r3, #1
 800f208:	930c      	str	r3, [sp, #48]	@ 0x30
 800f20a:	0030      	movs	r0, r6
 800f20c:	4bc3      	ldr	r3, [pc, #780]	@ (800f51c <_dtoa_r+0x71c>)
 800f20e:	0039      	movs	r1, r7
 800f210:	f7f3 f992 	bl	8002538 <__aeabi_dmul>
 800f214:	900a      	str	r0, [sp, #40]	@ 0x28
 800f216:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f21a:	3401      	adds	r4, #1
 800f21c:	0020      	movs	r0, r4
 800f21e:	9311      	str	r3, [sp, #68]	@ 0x44
 800f220:	f7f4 f84c 	bl	80032bc <__aeabi_i2d>
 800f224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f228:	f7f3 f986 	bl	8002538 <__aeabi_dmul>
 800f22c:	4bbc      	ldr	r3, [pc, #752]	@ (800f520 <_dtoa_r+0x720>)
 800f22e:	2200      	movs	r2, #0
 800f230:	f7f2 f9da 	bl	80015e8 <__aeabi_dadd>
 800f234:	4bbb      	ldr	r3, [pc, #748]	@ (800f524 <_dtoa_r+0x724>)
 800f236:	0006      	movs	r6, r0
 800f238:	18cf      	adds	r7, r1, r3
 800f23a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d000      	beq.n	800f242 <_dtoa_r+0x442>
 800f240:	e091      	b.n	800f366 <_dtoa_r+0x566>
 800f242:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f244:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f246:	2200      	movs	r2, #0
 800f248:	4bb7      	ldr	r3, [pc, #732]	@ (800f528 <_dtoa_r+0x728>)
 800f24a:	f7f3 fc3d 	bl	8002ac8 <__aeabi_dsub>
 800f24e:	0032      	movs	r2, r6
 800f250:	003b      	movs	r3, r7
 800f252:	0004      	movs	r4, r0
 800f254:	000d      	movs	r5, r1
 800f256:	f7f1 f913 	bl	8000480 <__aeabi_dcmpgt>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d000      	beq.n	800f260 <_dtoa_r+0x460>
 800f25e:	e29d      	b.n	800f79c <_dtoa_r+0x99c>
 800f260:	2180      	movs	r1, #128	@ 0x80
 800f262:	0609      	lsls	r1, r1, #24
 800f264:	187b      	adds	r3, r7, r1
 800f266:	0032      	movs	r2, r6
 800f268:	0020      	movs	r0, r4
 800f26a:	0029      	movs	r1, r5
 800f26c:	f7f1 f8f4 	bl	8000458 <__aeabi_dcmplt>
 800f270:	2800      	cmp	r0, #0
 800f272:	d000      	beq.n	800f276 <_dtoa_r+0x476>
 800f274:	e130      	b.n	800f4d8 <_dtoa_r+0x6d8>
 800f276:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f278:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f27a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f27c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f27e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f280:	2b00      	cmp	r3, #0
 800f282:	da00      	bge.n	800f286 <_dtoa_r+0x486>
 800f284:	e177      	b.n	800f576 <_dtoa_r+0x776>
 800f286:	9a04      	ldr	r2, [sp, #16]
 800f288:	2a0e      	cmp	r2, #14
 800f28a:	dd00      	ble.n	800f28e <_dtoa_r+0x48e>
 800f28c:	e173      	b.n	800f576 <_dtoa_r+0x776>
 800f28e:	4ba0      	ldr	r3, [pc, #640]	@ (800f510 <_dtoa_r+0x710>)
 800f290:	00d2      	lsls	r2, r2, #3
 800f292:	189b      	adds	r3, r3, r2
 800f294:	685c      	ldr	r4, [r3, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	9306      	str	r3, [sp, #24]
 800f29a:	9407      	str	r4, [sp, #28]
 800f29c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	da03      	bge.n	800f2aa <_dtoa_r+0x4aa>
 800f2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	dc00      	bgt.n	800f2aa <_dtoa_r+0x4aa>
 800f2a8:	e106      	b.n	800f4b8 <_dtoa_r+0x6b8>
 800f2aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f2ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2b0:	9d08      	ldr	r5, [sp, #32]
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	195b      	adds	r3, r3, r5
 800f2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2b8:	9a06      	ldr	r2, [sp, #24]
 800f2ba:	9b07      	ldr	r3, [sp, #28]
 800f2bc:	0030      	movs	r0, r6
 800f2be:	0039      	movs	r1, r7
 800f2c0:	f7f2 fcf6 	bl	8001cb0 <__aeabi_ddiv>
 800f2c4:	f7f3 ffbe 	bl	8003244 <__aeabi_d2iz>
 800f2c8:	9009      	str	r0, [sp, #36]	@ 0x24
 800f2ca:	f7f3 fff7 	bl	80032bc <__aeabi_i2d>
 800f2ce:	9a06      	ldr	r2, [sp, #24]
 800f2d0:	9b07      	ldr	r3, [sp, #28]
 800f2d2:	f7f3 f931 	bl	8002538 <__aeabi_dmul>
 800f2d6:	0002      	movs	r2, r0
 800f2d8:	000b      	movs	r3, r1
 800f2da:	0030      	movs	r0, r6
 800f2dc:	0039      	movs	r1, r7
 800f2de:	f7f3 fbf3 	bl	8002ac8 <__aeabi_dsub>
 800f2e2:	002b      	movs	r3, r5
 800f2e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2e6:	3501      	adds	r5, #1
 800f2e8:	3230      	adds	r2, #48	@ 0x30
 800f2ea:	701a      	strb	r2, [r3, #0]
 800f2ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2ee:	002c      	movs	r4, r5
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d000      	beq.n	800f2f6 <_dtoa_r+0x4f6>
 800f2f4:	e131      	b.n	800f55a <_dtoa_r+0x75a>
 800f2f6:	0002      	movs	r2, r0
 800f2f8:	000b      	movs	r3, r1
 800f2fa:	f7f2 f975 	bl	80015e8 <__aeabi_dadd>
 800f2fe:	9a06      	ldr	r2, [sp, #24]
 800f300:	9b07      	ldr	r3, [sp, #28]
 800f302:	0006      	movs	r6, r0
 800f304:	000f      	movs	r7, r1
 800f306:	f7f1 f8bb 	bl	8000480 <__aeabi_dcmpgt>
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d000      	beq.n	800f310 <_dtoa_r+0x510>
 800f30e:	e10f      	b.n	800f530 <_dtoa_r+0x730>
 800f310:	9a06      	ldr	r2, [sp, #24]
 800f312:	9b07      	ldr	r3, [sp, #28]
 800f314:	0030      	movs	r0, r6
 800f316:	0039      	movs	r1, r7
 800f318:	f7f1 f898 	bl	800044c <__aeabi_dcmpeq>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d003      	beq.n	800f328 <_dtoa_r+0x528>
 800f320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f322:	07dd      	lsls	r5, r3, #31
 800f324:	d500      	bpl.n	800f328 <_dtoa_r+0x528>
 800f326:	e103      	b.n	800f530 <_dtoa_r+0x730>
 800f328:	9905      	ldr	r1, [sp, #20]
 800f32a:	9803      	ldr	r0, [sp, #12]
 800f32c:	f000 fca6 	bl	800fc7c <_Bfree>
 800f330:	2300      	movs	r3, #0
 800f332:	7023      	strb	r3, [r4, #0]
 800f334:	9b04      	ldr	r3, [sp, #16]
 800f336:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f338:	3301      	adds	r3, #1
 800f33a:	6013      	str	r3, [r2, #0]
 800f33c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d100      	bne.n	800f344 <_dtoa_r+0x544>
 800f342:	e5a7      	b.n	800ee94 <_dtoa_r+0x94>
 800f344:	601c      	str	r4, [r3, #0]
 800f346:	e5a5      	b.n	800ee94 <_dtoa_r+0x94>
 800f348:	423d      	tst	r5, r7
 800f34a:	d005      	beq.n	800f358 <_dtoa_r+0x558>
 800f34c:	6832      	ldr	r2, [r6, #0]
 800f34e:	6873      	ldr	r3, [r6, #4]
 800f350:	f7f3 f8f2 	bl	8002538 <__aeabi_dmul>
 800f354:	003b      	movs	r3, r7
 800f356:	3401      	adds	r4, #1
 800f358:	106d      	asrs	r5, r5, #1
 800f35a:	3608      	adds	r6, #8
 800f35c:	e736      	b.n	800f1cc <_dtoa_r+0x3cc>
 800f35e:	9b04      	ldr	r3, [sp, #16]
 800f360:	930c      	str	r3, [sp, #48]	@ 0x30
 800f362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f364:	e75a      	b.n	800f21c <_dtoa_r+0x41c>
 800f366:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f368:	4b69      	ldr	r3, [pc, #420]	@ (800f510 <_dtoa_r+0x710>)
 800f36a:	3a01      	subs	r2, #1
 800f36c:	00d2      	lsls	r2, r2, #3
 800f36e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f370:	189b      	adds	r3, r3, r2
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	2900      	cmp	r1, #0
 800f378:	d04c      	beq.n	800f414 <_dtoa_r+0x614>
 800f37a:	2000      	movs	r0, #0
 800f37c:	496b      	ldr	r1, [pc, #428]	@ (800f52c <_dtoa_r+0x72c>)
 800f37e:	f7f2 fc97 	bl	8001cb0 <__aeabi_ddiv>
 800f382:	0032      	movs	r2, r6
 800f384:	003b      	movs	r3, r7
 800f386:	f7f3 fb9f 	bl	8002ac8 <__aeabi_dsub>
 800f38a:	9a08      	ldr	r2, [sp, #32]
 800f38c:	0006      	movs	r6, r0
 800f38e:	4694      	mov	ip, r2
 800f390:	000f      	movs	r7, r1
 800f392:	9b08      	ldr	r3, [sp, #32]
 800f394:	9316      	str	r3, [sp, #88]	@ 0x58
 800f396:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f398:	4463      	add	r3, ip
 800f39a:	9311      	str	r3, [sp, #68]	@ 0x44
 800f39c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f39e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f3a0:	f7f3 ff50 	bl	8003244 <__aeabi_d2iz>
 800f3a4:	0005      	movs	r5, r0
 800f3a6:	f7f3 ff89 	bl	80032bc <__aeabi_i2d>
 800f3aa:	0002      	movs	r2, r0
 800f3ac:	000b      	movs	r3, r1
 800f3ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f3b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f3b2:	f7f3 fb89 	bl	8002ac8 <__aeabi_dsub>
 800f3b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f3b8:	3530      	adds	r5, #48	@ 0x30
 800f3ba:	1c5c      	adds	r4, r3, #1
 800f3bc:	701d      	strb	r5, [r3, #0]
 800f3be:	0032      	movs	r2, r6
 800f3c0:	003b      	movs	r3, r7
 800f3c2:	900a      	str	r0, [sp, #40]	@ 0x28
 800f3c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f3c6:	f7f1 f847 	bl	8000458 <__aeabi_dcmplt>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	d16a      	bne.n	800f4a4 <_dtoa_r+0x6a4>
 800f3ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f3d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	4950      	ldr	r1, [pc, #320]	@ (800f518 <_dtoa_r+0x718>)
 800f3d6:	f7f3 fb77 	bl	8002ac8 <__aeabi_dsub>
 800f3da:	0032      	movs	r2, r6
 800f3dc:	003b      	movs	r3, r7
 800f3de:	f7f1 f83b 	bl	8000458 <__aeabi_dcmplt>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d000      	beq.n	800f3e8 <_dtoa_r+0x5e8>
 800f3e6:	e0a5      	b.n	800f534 <_dtoa_r+0x734>
 800f3e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f3ea:	42a3      	cmp	r3, r4
 800f3ec:	d100      	bne.n	800f3f0 <_dtoa_r+0x5f0>
 800f3ee:	e742      	b.n	800f276 <_dtoa_r+0x476>
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	0030      	movs	r0, r6
 800f3f4:	0039      	movs	r1, r7
 800f3f6:	4b49      	ldr	r3, [pc, #292]	@ (800f51c <_dtoa_r+0x71c>)
 800f3f8:	f7f3 f89e 	bl	8002538 <__aeabi_dmul>
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	0006      	movs	r6, r0
 800f400:	000f      	movs	r7, r1
 800f402:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f404:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f406:	4b45      	ldr	r3, [pc, #276]	@ (800f51c <_dtoa_r+0x71c>)
 800f408:	f7f3 f896 	bl	8002538 <__aeabi_dmul>
 800f40c:	9416      	str	r4, [sp, #88]	@ 0x58
 800f40e:	900a      	str	r0, [sp, #40]	@ 0x28
 800f410:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f412:	e7c3      	b.n	800f39c <_dtoa_r+0x59c>
 800f414:	0030      	movs	r0, r6
 800f416:	0039      	movs	r1, r7
 800f418:	f7f3 f88e 	bl	8002538 <__aeabi_dmul>
 800f41c:	9d08      	ldr	r5, [sp, #32]
 800f41e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f420:	002b      	movs	r3, r5
 800f422:	4694      	mov	ip, r2
 800f424:	9016      	str	r0, [sp, #88]	@ 0x58
 800f426:	9117      	str	r1, [sp, #92]	@ 0x5c
 800f428:	4463      	add	r3, ip
 800f42a:	9319      	str	r3, [sp, #100]	@ 0x64
 800f42c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f42e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f430:	f7f3 ff08 	bl	8003244 <__aeabi_d2iz>
 800f434:	0004      	movs	r4, r0
 800f436:	f7f3 ff41 	bl	80032bc <__aeabi_i2d>
 800f43a:	000b      	movs	r3, r1
 800f43c:	0002      	movs	r2, r0
 800f43e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f440:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f442:	f7f3 fb41 	bl	8002ac8 <__aeabi_dsub>
 800f446:	3430      	adds	r4, #48	@ 0x30
 800f448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f44a:	702c      	strb	r4, [r5, #0]
 800f44c:	3501      	adds	r5, #1
 800f44e:	0006      	movs	r6, r0
 800f450:	000f      	movs	r7, r1
 800f452:	42ab      	cmp	r3, r5
 800f454:	d129      	bne.n	800f4aa <_dtoa_r+0x6aa>
 800f456:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f458:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800f45a:	9b08      	ldr	r3, [sp, #32]
 800f45c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800f45e:	469c      	mov	ip, r3
 800f460:	2200      	movs	r2, #0
 800f462:	4b32      	ldr	r3, [pc, #200]	@ (800f52c <_dtoa_r+0x72c>)
 800f464:	4464      	add	r4, ip
 800f466:	f7f2 f8bf 	bl	80015e8 <__aeabi_dadd>
 800f46a:	0002      	movs	r2, r0
 800f46c:	000b      	movs	r3, r1
 800f46e:	0030      	movs	r0, r6
 800f470:	0039      	movs	r1, r7
 800f472:	f7f1 f805 	bl	8000480 <__aeabi_dcmpgt>
 800f476:	2800      	cmp	r0, #0
 800f478:	d15c      	bne.n	800f534 <_dtoa_r+0x734>
 800f47a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f47c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f47e:	2000      	movs	r0, #0
 800f480:	492a      	ldr	r1, [pc, #168]	@ (800f52c <_dtoa_r+0x72c>)
 800f482:	f7f3 fb21 	bl	8002ac8 <__aeabi_dsub>
 800f486:	0002      	movs	r2, r0
 800f488:	000b      	movs	r3, r1
 800f48a:	0030      	movs	r0, r6
 800f48c:	0039      	movs	r1, r7
 800f48e:	f7f0 ffe3 	bl	8000458 <__aeabi_dcmplt>
 800f492:	2800      	cmp	r0, #0
 800f494:	d100      	bne.n	800f498 <_dtoa_r+0x698>
 800f496:	e6ee      	b.n	800f276 <_dtoa_r+0x476>
 800f498:	0023      	movs	r3, r4
 800f49a:	3c01      	subs	r4, #1
 800f49c:	7822      	ldrb	r2, [r4, #0]
 800f49e:	2a30      	cmp	r2, #48	@ 0x30
 800f4a0:	d0fa      	beq.n	800f498 <_dtoa_r+0x698>
 800f4a2:	001c      	movs	r4, r3
 800f4a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4a6:	9304      	str	r3, [sp, #16]
 800f4a8:	e73e      	b.n	800f328 <_dtoa_r+0x528>
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	4b1b      	ldr	r3, [pc, #108]	@ (800f51c <_dtoa_r+0x71c>)
 800f4ae:	f7f3 f843 	bl	8002538 <__aeabi_dmul>
 800f4b2:	900a      	str	r0, [sp, #40]	@ 0x28
 800f4b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f4b6:	e7b9      	b.n	800f42c <_dtoa_r+0x62c>
 800f4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d10c      	bne.n	800f4d8 <_dtoa_r+0x6d8>
 800f4be:	9806      	ldr	r0, [sp, #24]
 800f4c0:	9907      	ldr	r1, [sp, #28]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	4b18      	ldr	r3, [pc, #96]	@ (800f528 <_dtoa_r+0x728>)
 800f4c6:	f7f3 f837 	bl	8002538 <__aeabi_dmul>
 800f4ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4ce:	f7f0 ffe1 	bl	8000494 <__aeabi_dcmpge>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d100      	bne.n	800f4d8 <_dtoa_r+0x6d8>
 800f4d6:	e164      	b.n	800f7a2 <_dtoa_r+0x9a2>
 800f4d8:	2600      	movs	r6, #0
 800f4da:	0037      	movs	r7, r6
 800f4dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f4de:	9c08      	ldr	r4, [sp, #32]
 800f4e0:	43db      	mvns	r3, r3
 800f4e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9304      	str	r3, [sp, #16]
 800f4e8:	0031      	movs	r1, r6
 800f4ea:	9803      	ldr	r0, [sp, #12]
 800f4ec:	f000 fbc6 	bl	800fc7c <_Bfree>
 800f4f0:	2f00      	cmp	r7, #0
 800f4f2:	d0d7      	beq.n	800f4a4 <_dtoa_r+0x6a4>
 800f4f4:	9b04      	ldr	r3, [sp, #16]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d005      	beq.n	800f506 <_dtoa_r+0x706>
 800f4fa:	42bb      	cmp	r3, r7
 800f4fc:	d003      	beq.n	800f506 <_dtoa_r+0x706>
 800f4fe:	0019      	movs	r1, r3
 800f500:	9803      	ldr	r0, [sp, #12]
 800f502:	f000 fbbb 	bl	800fc7c <_Bfree>
 800f506:	0039      	movs	r1, r7
 800f508:	9803      	ldr	r0, [sp, #12]
 800f50a:	f000 fbb7 	bl	800fc7c <_Bfree>
 800f50e:	e7c9      	b.n	800f4a4 <_dtoa_r+0x6a4>
 800f510:	08011c78 	.word	0x08011c78
 800f514:	08011c50 	.word	0x08011c50
 800f518:	3ff00000 	.word	0x3ff00000
 800f51c:	40240000 	.word	0x40240000
 800f520:	401c0000 	.word	0x401c0000
 800f524:	fcc00000 	.word	0xfcc00000
 800f528:	40140000 	.word	0x40140000
 800f52c:	3fe00000 	.word	0x3fe00000
 800f530:	9b04      	ldr	r3, [sp, #16]
 800f532:	930c      	str	r3, [sp, #48]	@ 0x30
 800f534:	0023      	movs	r3, r4
 800f536:	001c      	movs	r4, r3
 800f538:	3b01      	subs	r3, #1
 800f53a:	781a      	ldrb	r2, [r3, #0]
 800f53c:	2a39      	cmp	r2, #57	@ 0x39
 800f53e:	d108      	bne.n	800f552 <_dtoa_r+0x752>
 800f540:	9a08      	ldr	r2, [sp, #32]
 800f542:	429a      	cmp	r2, r3
 800f544:	d1f7      	bne.n	800f536 <_dtoa_r+0x736>
 800f546:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f548:	9908      	ldr	r1, [sp, #32]
 800f54a:	3201      	adds	r2, #1
 800f54c:	920c      	str	r2, [sp, #48]	@ 0x30
 800f54e:	2230      	movs	r2, #48	@ 0x30
 800f550:	700a      	strb	r2, [r1, #0]
 800f552:	781a      	ldrb	r2, [r3, #0]
 800f554:	3201      	adds	r2, #1
 800f556:	701a      	strb	r2, [r3, #0]
 800f558:	e7a4      	b.n	800f4a4 <_dtoa_r+0x6a4>
 800f55a:	2200      	movs	r2, #0
 800f55c:	4bc6      	ldr	r3, [pc, #792]	@ (800f878 <_dtoa_r+0xa78>)
 800f55e:	f7f2 ffeb 	bl	8002538 <__aeabi_dmul>
 800f562:	2200      	movs	r2, #0
 800f564:	2300      	movs	r3, #0
 800f566:	0006      	movs	r6, r0
 800f568:	000f      	movs	r7, r1
 800f56a:	f7f0 ff6f 	bl	800044c <__aeabi_dcmpeq>
 800f56e:	2800      	cmp	r0, #0
 800f570:	d100      	bne.n	800f574 <_dtoa_r+0x774>
 800f572:	e6a1      	b.n	800f2b8 <_dtoa_r+0x4b8>
 800f574:	e6d8      	b.n	800f328 <_dtoa_r+0x528>
 800f576:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800f578:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800f57a:	9c06      	ldr	r4, [sp, #24]
 800f57c:	2f00      	cmp	r7, #0
 800f57e:	d014      	beq.n	800f5aa <_dtoa_r+0x7aa>
 800f580:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f582:	2a01      	cmp	r2, #1
 800f584:	dd00      	ble.n	800f588 <_dtoa_r+0x788>
 800f586:	e0c8      	b.n	800f71a <_dtoa_r+0x91a>
 800f588:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f58a:	2a00      	cmp	r2, #0
 800f58c:	d100      	bne.n	800f590 <_dtoa_r+0x790>
 800f58e:	e0be      	b.n	800f70e <_dtoa_r+0x90e>
 800f590:	4aba      	ldr	r2, [pc, #744]	@ (800f87c <_dtoa_r+0xa7c>)
 800f592:	189b      	adds	r3, r3, r2
 800f594:	9a06      	ldr	r2, [sp, #24]
 800f596:	2101      	movs	r1, #1
 800f598:	18d2      	adds	r2, r2, r3
 800f59a:	9206      	str	r2, [sp, #24]
 800f59c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f59e:	9803      	ldr	r0, [sp, #12]
 800f5a0:	18d3      	adds	r3, r2, r3
 800f5a2:	930d      	str	r3, [sp, #52]	@ 0x34
 800f5a4:	f000 fc22 	bl	800fdec <__i2b>
 800f5a8:	0007      	movs	r7, r0
 800f5aa:	2c00      	cmp	r4, #0
 800f5ac:	d00e      	beq.n	800f5cc <_dtoa_r+0x7cc>
 800f5ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	dd0b      	ble.n	800f5cc <_dtoa_r+0x7cc>
 800f5b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5b6:	0023      	movs	r3, r4
 800f5b8:	4294      	cmp	r4, r2
 800f5ba:	dd00      	ble.n	800f5be <_dtoa_r+0x7be>
 800f5bc:	0013      	movs	r3, r2
 800f5be:	9a06      	ldr	r2, [sp, #24]
 800f5c0:	1ae4      	subs	r4, r4, r3
 800f5c2:	1ad2      	subs	r2, r2, r3
 800f5c4:	9206      	str	r2, [sp, #24]
 800f5c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	930d      	str	r3, [sp, #52]	@ 0x34
 800f5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d01f      	beq.n	800f612 <_dtoa_r+0x812>
 800f5d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d100      	bne.n	800f5da <_dtoa_r+0x7da>
 800f5d8:	e0b5      	b.n	800f746 <_dtoa_r+0x946>
 800f5da:	2d00      	cmp	r5, #0
 800f5dc:	d010      	beq.n	800f600 <_dtoa_r+0x800>
 800f5de:	0039      	movs	r1, r7
 800f5e0:	002a      	movs	r2, r5
 800f5e2:	9803      	ldr	r0, [sp, #12]
 800f5e4:	f000 fccc 	bl	800ff80 <__pow5mult>
 800f5e8:	9a05      	ldr	r2, [sp, #20]
 800f5ea:	0001      	movs	r1, r0
 800f5ec:	0007      	movs	r7, r0
 800f5ee:	9803      	ldr	r0, [sp, #12]
 800f5f0:	f000 fc14 	bl	800fe1c <__multiply>
 800f5f4:	0006      	movs	r6, r0
 800f5f6:	9905      	ldr	r1, [sp, #20]
 800f5f8:	9803      	ldr	r0, [sp, #12]
 800f5fa:	f000 fb3f 	bl	800fc7c <_Bfree>
 800f5fe:	9605      	str	r6, [sp, #20]
 800f600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f602:	1b5a      	subs	r2, r3, r5
 800f604:	42ab      	cmp	r3, r5
 800f606:	d004      	beq.n	800f612 <_dtoa_r+0x812>
 800f608:	9905      	ldr	r1, [sp, #20]
 800f60a:	9803      	ldr	r0, [sp, #12]
 800f60c:	f000 fcb8 	bl	800ff80 <__pow5mult>
 800f610:	9005      	str	r0, [sp, #20]
 800f612:	2101      	movs	r1, #1
 800f614:	9803      	ldr	r0, [sp, #12]
 800f616:	f000 fbe9 	bl	800fdec <__i2b>
 800f61a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f61c:	0006      	movs	r6, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d100      	bne.n	800f624 <_dtoa_r+0x824>
 800f622:	e1bc      	b.n	800f99e <_dtoa_r+0xb9e>
 800f624:	001a      	movs	r2, r3
 800f626:	0001      	movs	r1, r0
 800f628:	9803      	ldr	r0, [sp, #12]
 800f62a:	f000 fca9 	bl	800ff80 <__pow5mult>
 800f62e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f630:	0006      	movs	r6, r0
 800f632:	2500      	movs	r5, #0
 800f634:	2b01      	cmp	r3, #1
 800f636:	dc16      	bgt.n	800f666 <_dtoa_r+0x866>
 800f638:	2500      	movs	r5, #0
 800f63a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f63c:	42ab      	cmp	r3, r5
 800f63e:	d10e      	bne.n	800f65e <_dtoa_r+0x85e>
 800f640:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f642:	031b      	lsls	r3, r3, #12
 800f644:	42ab      	cmp	r3, r5
 800f646:	d10a      	bne.n	800f65e <_dtoa_r+0x85e>
 800f648:	4b8d      	ldr	r3, [pc, #564]	@ (800f880 <_dtoa_r+0xa80>)
 800f64a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f64c:	4213      	tst	r3, r2
 800f64e:	d006      	beq.n	800f65e <_dtoa_r+0x85e>
 800f650:	9b06      	ldr	r3, [sp, #24]
 800f652:	3501      	adds	r5, #1
 800f654:	3301      	adds	r3, #1
 800f656:	9306      	str	r3, [sp, #24]
 800f658:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f65a:	3301      	adds	r3, #1
 800f65c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f65e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f660:	2001      	movs	r0, #1
 800f662:	2b00      	cmp	r3, #0
 800f664:	d008      	beq.n	800f678 <_dtoa_r+0x878>
 800f666:	6933      	ldr	r3, [r6, #16]
 800f668:	3303      	adds	r3, #3
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	18f3      	adds	r3, r6, r3
 800f66e:	6858      	ldr	r0, [r3, #4]
 800f670:	f000 fb6c 	bl	800fd4c <__hi0bits>
 800f674:	2320      	movs	r3, #32
 800f676:	1a18      	subs	r0, r3, r0
 800f678:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f67a:	1818      	adds	r0, r3, r0
 800f67c:	0002      	movs	r2, r0
 800f67e:	231f      	movs	r3, #31
 800f680:	401a      	ands	r2, r3
 800f682:	4218      	tst	r0, r3
 800f684:	d065      	beq.n	800f752 <_dtoa_r+0x952>
 800f686:	3301      	adds	r3, #1
 800f688:	1a9b      	subs	r3, r3, r2
 800f68a:	2b04      	cmp	r3, #4
 800f68c:	dd5d      	ble.n	800f74a <_dtoa_r+0x94a>
 800f68e:	231c      	movs	r3, #28
 800f690:	1a9b      	subs	r3, r3, r2
 800f692:	9a06      	ldr	r2, [sp, #24]
 800f694:	18e4      	adds	r4, r4, r3
 800f696:	18d2      	adds	r2, r2, r3
 800f698:	9206      	str	r2, [sp, #24]
 800f69a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f69c:	18d3      	adds	r3, r2, r3
 800f69e:	930d      	str	r3, [sp, #52]	@ 0x34
 800f6a0:	9b06      	ldr	r3, [sp, #24]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	dd05      	ble.n	800f6b2 <_dtoa_r+0x8b2>
 800f6a6:	001a      	movs	r2, r3
 800f6a8:	9905      	ldr	r1, [sp, #20]
 800f6aa:	9803      	ldr	r0, [sp, #12]
 800f6ac:	f000 fcc4 	bl	8010038 <__lshift>
 800f6b0:	9005      	str	r0, [sp, #20]
 800f6b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	dd05      	ble.n	800f6c4 <_dtoa_r+0x8c4>
 800f6b8:	0031      	movs	r1, r6
 800f6ba:	001a      	movs	r2, r3
 800f6bc:	9803      	ldr	r0, [sp, #12]
 800f6be:	f000 fcbb 	bl	8010038 <__lshift>
 800f6c2:	0006      	movs	r6, r0
 800f6c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d045      	beq.n	800f756 <_dtoa_r+0x956>
 800f6ca:	0031      	movs	r1, r6
 800f6cc:	9805      	ldr	r0, [sp, #20]
 800f6ce:	f000 fd1f 	bl	8010110 <__mcmp>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	da3f      	bge.n	800f756 <_dtoa_r+0x956>
 800f6d6:	9b04      	ldr	r3, [sp, #16]
 800f6d8:	220a      	movs	r2, #10
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6de:	9905      	ldr	r1, [sp, #20]
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9803      	ldr	r0, [sp, #12]
 800f6e4:	f000 faee 	bl	800fcc4 <__multadd>
 800f6e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f6ea:	9005      	str	r0, [sp, #20]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d100      	bne.n	800f6f2 <_dtoa_r+0x8f2>
 800f6f0:	e15c      	b.n	800f9ac <_dtoa_r+0xbac>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	0039      	movs	r1, r7
 800f6f6:	220a      	movs	r2, #10
 800f6f8:	9803      	ldr	r0, [sp, #12]
 800f6fa:	f000 fae3 	bl	800fcc4 <__multadd>
 800f6fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f700:	0007      	movs	r7, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	dc55      	bgt.n	800f7b2 <_dtoa_r+0x9b2>
 800f706:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f708:	2b02      	cmp	r3, #2
 800f70a:	dc2d      	bgt.n	800f768 <_dtoa_r+0x968>
 800f70c:	e051      	b.n	800f7b2 <_dtoa_r+0x9b2>
 800f70e:	2336      	movs	r3, #54	@ 0x36
 800f710:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f712:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800f714:	9c06      	ldr	r4, [sp, #24]
 800f716:	1a9b      	subs	r3, r3, r2
 800f718:	e73c      	b.n	800f594 <_dtoa_r+0x794>
 800f71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f71c:	1e5d      	subs	r5, r3, #1
 800f71e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f720:	42ab      	cmp	r3, r5
 800f722:	db08      	blt.n	800f736 <_dtoa_r+0x936>
 800f724:	1b5d      	subs	r5, r3, r5
 800f726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f728:	9c06      	ldr	r4, [sp, #24]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	db00      	blt.n	800f730 <_dtoa_r+0x930>
 800f72e:	e731      	b.n	800f594 <_dtoa_r+0x794>
 800f730:	1ae4      	subs	r4, r4, r3
 800f732:	2300      	movs	r3, #0
 800f734:	e72e      	b.n	800f594 <_dtoa_r+0x794>
 800f736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f738:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f73a:	1aeb      	subs	r3, r5, r3
 800f73c:	18d3      	adds	r3, r2, r3
 800f73e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f740:	9314      	str	r3, [sp, #80]	@ 0x50
 800f742:	2500      	movs	r5, #0
 800f744:	e7ef      	b.n	800f726 <_dtoa_r+0x926>
 800f746:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f748:	e75e      	b.n	800f608 <_dtoa_r+0x808>
 800f74a:	2b04      	cmp	r3, #4
 800f74c:	d0a8      	beq.n	800f6a0 <_dtoa_r+0x8a0>
 800f74e:	331c      	adds	r3, #28
 800f750:	e79f      	b.n	800f692 <_dtoa_r+0x892>
 800f752:	0013      	movs	r3, r2
 800f754:	e7fb      	b.n	800f74e <_dtoa_r+0x94e>
 800f756:	9b04      	ldr	r3, [sp, #16]
 800f758:	930c      	str	r3, [sp, #48]	@ 0x30
 800f75a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f75c:	930e      	str	r3, [sp, #56]	@ 0x38
 800f75e:	2b00      	cmp	r3, #0
 800f760:	dc23      	bgt.n	800f7aa <_dtoa_r+0x9aa>
 800f762:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f764:	2b02      	cmp	r3, #2
 800f766:	dd20      	ble.n	800f7aa <_dtoa_r+0x9aa>
 800f768:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d000      	beq.n	800f770 <_dtoa_r+0x970>
 800f76e:	e6b5      	b.n	800f4dc <_dtoa_r+0x6dc>
 800f770:	0031      	movs	r1, r6
 800f772:	2205      	movs	r2, #5
 800f774:	9803      	ldr	r0, [sp, #12]
 800f776:	f000 faa5 	bl	800fcc4 <__multadd>
 800f77a:	0006      	movs	r6, r0
 800f77c:	0001      	movs	r1, r0
 800f77e:	9805      	ldr	r0, [sp, #20]
 800f780:	f000 fcc6 	bl	8010110 <__mcmp>
 800f784:	2800      	cmp	r0, #0
 800f786:	dc00      	bgt.n	800f78a <_dtoa_r+0x98a>
 800f788:	e6a8      	b.n	800f4dc <_dtoa_r+0x6dc>
 800f78a:	9b08      	ldr	r3, [sp, #32]
 800f78c:	9a08      	ldr	r2, [sp, #32]
 800f78e:	1c5c      	adds	r4, r3, #1
 800f790:	2331      	movs	r3, #49	@ 0x31
 800f792:	7013      	strb	r3, [r2, #0]
 800f794:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f796:	3301      	adds	r3, #1
 800f798:	930c      	str	r3, [sp, #48]	@ 0x30
 800f79a:	e6a3      	b.n	800f4e4 <_dtoa_r+0x6e4>
 800f79c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800f79e:	0037      	movs	r7, r6
 800f7a0:	e7f3      	b.n	800f78a <_dtoa_r+0x98a>
 800f7a2:	9b04      	ldr	r3, [sp, #16]
 800f7a4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800f7a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7a8:	e7f9      	b.n	800f79e <_dtoa_r+0x99e>
 800f7aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d100      	bne.n	800f7b2 <_dtoa_r+0x9b2>
 800f7b0:	e100      	b.n	800f9b4 <_dtoa_r+0xbb4>
 800f7b2:	2c00      	cmp	r4, #0
 800f7b4:	dd05      	ble.n	800f7c2 <_dtoa_r+0x9c2>
 800f7b6:	0039      	movs	r1, r7
 800f7b8:	0022      	movs	r2, r4
 800f7ba:	9803      	ldr	r0, [sp, #12]
 800f7bc:	f000 fc3c 	bl	8010038 <__lshift>
 800f7c0:	0007      	movs	r7, r0
 800f7c2:	0038      	movs	r0, r7
 800f7c4:	2d00      	cmp	r5, #0
 800f7c6:	d018      	beq.n	800f7fa <_dtoa_r+0x9fa>
 800f7c8:	6879      	ldr	r1, [r7, #4]
 800f7ca:	9803      	ldr	r0, [sp, #12]
 800f7cc:	f000 fa12 	bl	800fbf4 <_Balloc>
 800f7d0:	1e04      	subs	r4, r0, #0
 800f7d2:	d105      	bne.n	800f7e0 <_dtoa_r+0x9e0>
 800f7d4:	0022      	movs	r2, r4
 800f7d6:	4b2b      	ldr	r3, [pc, #172]	@ (800f884 <_dtoa_r+0xa84>)
 800f7d8:	482b      	ldr	r0, [pc, #172]	@ (800f888 <_dtoa_r+0xa88>)
 800f7da:	492c      	ldr	r1, [pc, #176]	@ (800f88c <_dtoa_r+0xa8c>)
 800f7dc:	f7ff fb25 	bl	800ee2a <_dtoa_r+0x2a>
 800f7e0:	0039      	movs	r1, r7
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	310c      	adds	r1, #12
 800f7e6:	3202      	adds	r2, #2
 800f7e8:	0092      	lsls	r2, r2, #2
 800f7ea:	300c      	adds	r0, #12
 800f7ec:	f001 f9c0 	bl	8010b70 <memcpy>
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	0021      	movs	r1, r4
 800f7f4:	9803      	ldr	r0, [sp, #12]
 800f7f6:	f000 fc1f 	bl	8010038 <__lshift>
 800f7fa:	9b08      	ldr	r3, [sp, #32]
 800f7fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7fe:	9306      	str	r3, [sp, #24]
 800f800:	3b01      	subs	r3, #1
 800f802:	189b      	adds	r3, r3, r2
 800f804:	2201      	movs	r2, #1
 800f806:	9704      	str	r7, [sp, #16]
 800f808:	0007      	movs	r7, r0
 800f80a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f80c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f80e:	4013      	ands	r3, r2
 800f810:	930e      	str	r3, [sp, #56]	@ 0x38
 800f812:	0031      	movs	r1, r6
 800f814:	9805      	ldr	r0, [sp, #20]
 800f816:	f7ff fa65 	bl	800ece4 <quorem>
 800f81a:	9904      	ldr	r1, [sp, #16]
 800f81c:	0005      	movs	r5, r0
 800f81e:	900a      	str	r0, [sp, #40]	@ 0x28
 800f820:	9805      	ldr	r0, [sp, #20]
 800f822:	f000 fc75 	bl	8010110 <__mcmp>
 800f826:	003a      	movs	r2, r7
 800f828:	900d      	str	r0, [sp, #52]	@ 0x34
 800f82a:	0031      	movs	r1, r6
 800f82c:	9803      	ldr	r0, [sp, #12]
 800f82e:	f000 fc8b 	bl	8010148 <__mdiff>
 800f832:	2201      	movs	r2, #1
 800f834:	68c3      	ldr	r3, [r0, #12]
 800f836:	0004      	movs	r4, r0
 800f838:	3530      	adds	r5, #48	@ 0x30
 800f83a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d104      	bne.n	800f84a <_dtoa_r+0xa4a>
 800f840:	0001      	movs	r1, r0
 800f842:	9805      	ldr	r0, [sp, #20]
 800f844:	f000 fc64 	bl	8010110 <__mcmp>
 800f848:	9009      	str	r0, [sp, #36]	@ 0x24
 800f84a:	0021      	movs	r1, r4
 800f84c:	9803      	ldr	r0, [sp, #12]
 800f84e:	f000 fa15 	bl	800fc7c <_Bfree>
 800f852:	9b06      	ldr	r3, [sp, #24]
 800f854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f856:	1c5c      	adds	r4, r3, #1
 800f858:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f85a:	4313      	orrs	r3, r2
 800f85c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f85e:	4313      	orrs	r3, r2
 800f860:	d116      	bne.n	800f890 <_dtoa_r+0xa90>
 800f862:	2d39      	cmp	r5, #57	@ 0x39
 800f864:	d02f      	beq.n	800f8c6 <_dtoa_r+0xac6>
 800f866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f868:	2b00      	cmp	r3, #0
 800f86a:	dd01      	ble.n	800f870 <_dtoa_r+0xa70>
 800f86c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800f86e:	3531      	adds	r5, #49	@ 0x31
 800f870:	9b06      	ldr	r3, [sp, #24]
 800f872:	701d      	strb	r5, [r3, #0]
 800f874:	e638      	b.n	800f4e8 <_dtoa_r+0x6e8>
 800f876:	46c0      	nop			@ (mov r8, r8)
 800f878:	40240000 	.word	0x40240000
 800f87c:	00000433 	.word	0x00000433
 800f880:	7ff00000 	.word	0x7ff00000
 800f884:	08011bd4 	.word	0x08011bd4
 800f888:	08011b7c 	.word	0x08011b7c
 800f88c:	000002ef 	.word	0x000002ef
 800f890:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f892:	2b00      	cmp	r3, #0
 800f894:	db04      	blt.n	800f8a0 <_dtoa_r+0xaa0>
 800f896:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f898:	4313      	orrs	r3, r2
 800f89a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f89c:	4313      	orrs	r3, r2
 800f89e:	d11e      	bne.n	800f8de <_dtoa_r+0xade>
 800f8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	dde4      	ble.n	800f870 <_dtoa_r+0xa70>
 800f8a6:	9905      	ldr	r1, [sp, #20]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	9803      	ldr	r0, [sp, #12]
 800f8ac:	f000 fbc4 	bl	8010038 <__lshift>
 800f8b0:	0031      	movs	r1, r6
 800f8b2:	9005      	str	r0, [sp, #20]
 800f8b4:	f000 fc2c 	bl	8010110 <__mcmp>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	dc02      	bgt.n	800f8c2 <_dtoa_r+0xac2>
 800f8bc:	d1d8      	bne.n	800f870 <_dtoa_r+0xa70>
 800f8be:	07eb      	lsls	r3, r5, #31
 800f8c0:	d5d6      	bpl.n	800f870 <_dtoa_r+0xa70>
 800f8c2:	2d39      	cmp	r5, #57	@ 0x39
 800f8c4:	d1d2      	bne.n	800f86c <_dtoa_r+0xa6c>
 800f8c6:	2339      	movs	r3, #57	@ 0x39
 800f8c8:	9a06      	ldr	r2, [sp, #24]
 800f8ca:	7013      	strb	r3, [r2, #0]
 800f8cc:	0023      	movs	r3, r4
 800f8ce:	001c      	movs	r4, r3
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	781a      	ldrb	r2, [r3, #0]
 800f8d4:	2a39      	cmp	r2, #57	@ 0x39
 800f8d6:	d04f      	beq.n	800f978 <_dtoa_r+0xb78>
 800f8d8:	3201      	adds	r2, #1
 800f8da:	701a      	strb	r2, [r3, #0]
 800f8dc:	e604      	b.n	800f4e8 <_dtoa_r+0x6e8>
 800f8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	dd03      	ble.n	800f8ec <_dtoa_r+0xaec>
 800f8e4:	2d39      	cmp	r5, #57	@ 0x39
 800f8e6:	d0ee      	beq.n	800f8c6 <_dtoa_r+0xac6>
 800f8e8:	3501      	adds	r5, #1
 800f8ea:	e7c1      	b.n	800f870 <_dtoa_r+0xa70>
 800f8ec:	9b06      	ldr	r3, [sp, #24]
 800f8ee:	9a06      	ldr	r2, [sp, #24]
 800f8f0:	701d      	strb	r5, [r3, #0]
 800f8f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d02a      	beq.n	800f94e <_dtoa_r+0xb4e>
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	220a      	movs	r2, #10
 800f8fc:	9905      	ldr	r1, [sp, #20]
 800f8fe:	9803      	ldr	r0, [sp, #12]
 800f900:	f000 f9e0 	bl	800fcc4 <__multadd>
 800f904:	9b04      	ldr	r3, [sp, #16]
 800f906:	9005      	str	r0, [sp, #20]
 800f908:	42bb      	cmp	r3, r7
 800f90a:	d109      	bne.n	800f920 <_dtoa_r+0xb20>
 800f90c:	2300      	movs	r3, #0
 800f90e:	220a      	movs	r2, #10
 800f910:	9904      	ldr	r1, [sp, #16]
 800f912:	9803      	ldr	r0, [sp, #12]
 800f914:	f000 f9d6 	bl	800fcc4 <__multadd>
 800f918:	9004      	str	r0, [sp, #16]
 800f91a:	0007      	movs	r7, r0
 800f91c:	9406      	str	r4, [sp, #24]
 800f91e:	e778      	b.n	800f812 <_dtoa_r+0xa12>
 800f920:	9904      	ldr	r1, [sp, #16]
 800f922:	2300      	movs	r3, #0
 800f924:	220a      	movs	r2, #10
 800f926:	9803      	ldr	r0, [sp, #12]
 800f928:	f000 f9cc 	bl	800fcc4 <__multadd>
 800f92c:	2300      	movs	r3, #0
 800f92e:	9004      	str	r0, [sp, #16]
 800f930:	220a      	movs	r2, #10
 800f932:	0039      	movs	r1, r7
 800f934:	9803      	ldr	r0, [sp, #12]
 800f936:	f000 f9c5 	bl	800fcc4 <__multadd>
 800f93a:	e7ee      	b.n	800f91a <_dtoa_r+0xb1a>
 800f93c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f93e:	2401      	movs	r4, #1
 800f940:	2b00      	cmp	r3, #0
 800f942:	dd00      	ble.n	800f946 <_dtoa_r+0xb46>
 800f944:	001c      	movs	r4, r3
 800f946:	9b08      	ldr	r3, [sp, #32]
 800f948:	191c      	adds	r4, r3, r4
 800f94a:	2300      	movs	r3, #0
 800f94c:	9304      	str	r3, [sp, #16]
 800f94e:	9905      	ldr	r1, [sp, #20]
 800f950:	2201      	movs	r2, #1
 800f952:	9803      	ldr	r0, [sp, #12]
 800f954:	f000 fb70 	bl	8010038 <__lshift>
 800f958:	0031      	movs	r1, r6
 800f95a:	9005      	str	r0, [sp, #20]
 800f95c:	f000 fbd8 	bl	8010110 <__mcmp>
 800f960:	2800      	cmp	r0, #0
 800f962:	dcb3      	bgt.n	800f8cc <_dtoa_r+0xacc>
 800f964:	d101      	bne.n	800f96a <_dtoa_r+0xb6a>
 800f966:	07ed      	lsls	r5, r5, #31
 800f968:	d4b0      	bmi.n	800f8cc <_dtoa_r+0xacc>
 800f96a:	0023      	movs	r3, r4
 800f96c:	001c      	movs	r4, r3
 800f96e:	3b01      	subs	r3, #1
 800f970:	781a      	ldrb	r2, [r3, #0]
 800f972:	2a30      	cmp	r2, #48	@ 0x30
 800f974:	d0fa      	beq.n	800f96c <_dtoa_r+0xb6c>
 800f976:	e5b7      	b.n	800f4e8 <_dtoa_r+0x6e8>
 800f978:	9a08      	ldr	r2, [sp, #32]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d1a7      	bne.n	800f8ce <_dtoa_r+0xace>
 800f97e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f980:	3301      	adds	r3, #1
 800f982:	930c      	str	r3, [sp, #48]	@ 0x30
 800f984:	2331      	movs	r3, #49	@ 0x31
 800f986:	7013      	strb	r3, [r2, #0]
 800f988:	e5ae      	b.n	800f4e8 <_dtoa_r+0x6e8>
 800f98a:	4b15      	ldr	r3, [pc, #84]	@ (800f9e0 <_dtoa_r+0xbe0>)
 800f98c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f98e:	9308      	str	r3, [sp, #32]
 800f990:	4b14      	ldr	r3, [pc, #80]	@ (800f9e4 <_dtoa_r+0xbe4>)
 800f992:	2a00      	cmp	r2, #0
 800f994:	d001      	beq.n	800f99a <_dtoa_r+0xb9a>
 800f996:	f7ff fa7b 	bl	800ee90 <_dtoa_r+0x90>
 800f99a:	f7ff fa7b 	bl	800ee94 <_dtoa_r+0x94>
 800f99e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	dc00      	bgt.n	800f9a6 <_dtoa_r+0xba6>
 800f9a4:	e648      	b.n	800f638 <_dtoa_r+0x838>
 800f9a6:	2001      	movs	r0, #1
 800f9a8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f9aa:	e665      	b.n	800f678 <_dtoa_r+0x878>
 800f9ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	dc00      	bgt.n	800f9b4 <_dtoa_r+0xbb4>
 800f9b2:	e6d6      	b.n	800f762 <_dtoa_r+0x962>
 800f9b4:	2400      	movs	r4, #0
 800f9b6:	0031      	movs	r1, r6
 800f9b8:	9805      	ldr	r0, [sp, #20]
 800f9ba:	f7ff f993 	bl	800ece4 <quorem>
 800f9be:	9b08      	ldr	r3, [sp, #32]
 800f9c0:	3030      	adds	r0, #48	@ 0x30
 800f9c2:	5518      	strb	r0, [r3, r4]
 800f9c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9c6:	3401      	adds	r4, #1
 800f9c8:	0005      	movs	r5, r0
 800f9ca:	429c      	cmp	r4, r3
 800f9cc:	dab6      	bge.n	800f93c <_dtoa_r+0xb3c>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	220a      	movs	r2, #10
 800f9d2:	9905      	ldr	r1, [sp, #20]
 800f9d4:	9803      	ldr	r0, [sp, #12]
 800f9d6:	f000 f975 	bl	800fcc4 <__multadd>
 800f9da:	9005      	str	r0, [sp, #20]
 800f9dc:	e7eb      	b.n	800f9b6 <_dtoa_r+0xbb6>
 800f9de:	46c0      	nop			@ (mov r8, r8)
 800f9e0:	08011b58 	.word	0x08011b58
 800f9e4:	08011b60 	.word	0x08011b60

0800f9e8 <_free_r>:
 800f9e8:	b570      	push	{r4, r5, r6, lr}
 800f9ea:	0005      	movs	r5, r0
 800f9ec:	1e0c      	subs	r4, r1, #0
 800f9ee:	d010      	beq.n	800fa12 <_free_r+0x2a>
 800f9f0:	3c04      	subs	r4, #4
 800f9f2:	6823      	ldr	r3, [r4, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	da00      	bge.n	800f9fa <_free_r+0x12>
 800f9f8:	18e4      	adds	r4, r4, r3
 800f9fa:	0028      	movs	r0, r5
 800f9fc:	f000 f8ea 	bl	800fbd4 <__malloc_lock>
 800fa00:	4a1d      	ldr	r2, [pc, #116]	@ (800fa78 <_free_r+0x90>)
 800fa02:	6813      	ldr	r3, [r2, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d105      	bne.n	800fa14 <_free_r+0x2c>
 800fa08:	6063      	str	r3, [r4, #4]
 800fa0a:	6014      	str	r4, [r2, #0]
 800fa0c:	0028      	movs	r0, r5
 800fa0e:	f000 f8e9 	bl	800fbe4 <__malloc_unlock>
 800fa12:	bd70      	pop	{r4, r5, r6, pc}
 800fa14:	42a3      	cmp	r3, r4
 800fa16:	d908      	bls.n	800fa2a <_free_r+0x42>
 800fa18:	6820      	ldr	r0, [r4, #0]
 800fa1a:	1821      	adds	r1, r4, r0
 800fa1c:	428b      	cmp	r3, r1
 800fa1e:	d1f3      	bne.n	800fa08 <_free_r+0x20>
 800fa20:	6819      	ldr	r1, [r3, #0]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	1809      	adds	r1, r1, r0
 800fa26:	6021      	str	r1, [r4, #0]
 800fa28:	e7ee      	b.n	800fa08 <_free_r+0x20>
 800fa2a:	001a      	movs	r2, r3
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d001      	beq.n	800fa36 <_free_r+0x4e>
 800fa32:	42a3      	cmp	r3, r4
 800fa34:	d9f9      	bls.n	800fa2a <_free_r+0x42>
 800fa36:	6811      	ldr	r1, [r2, #0]
 800fa38:	1850      	adds	r0, r2, r1
 800fa3a:	42a0      	cmp	r0, r4
 800fa3c:	d10b      	bne.n	800fa56 <_free_r+0x6e>
 800fa3e:	6820      	ldr	r0, [r4, #0]
 800fa40:	1809      	adds	r1, r1, r0
 800fa42:	1850      	adds	r0, r2, r1
 800fa44:	6011      	str	r1, [r2, #0]
 800fa46:	4283      	cmp	r3, r0
 800fa48:	d1e0      	bne.n	800fa0c <_free_r+0x24>
 800fa4a:	6818      	ldr	r0, [r3, #0]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	1841      	adds	r1, r0, r1
 800fa50:	6011      	str	r1, [r2, #0]
 800fa52:	6053      	str	r3, [r2, #4]
 800fa54:	e7da      	b.n	800fa0c <_free_r+0x24>
 800fa56:	42a0      	cmp	r0, r4
 800fa58:	d902      	bls.n	800fa60 <_free_r+0x78>
 800fa5a:	230c      	movs	r3, #12
 800fa5c:	602b      	str	r3, [r5, #0]
 800fa5e:	e7d5      	b.n	800fa0c <_free_r+0x24>
 800fa60:	6820      	ldr	r0, [r4, #0]
 800fa62:	1821      	adds	r1, r4, r0
 800fa64:	428b      	cmp	r3, r1
 800fa66:	d103      	bne.n	800fa70 <_free_r+0x88>
 800fa68:	6819      	ldr	r1, [r3, #0]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	1809      	adds	r1, r1, r0
 800fa6e:	6021      	str	r1, [r4, #0]
 800fa70:	6063      	str	r3, [r4, #4]
 800fa72:	6054      	str	r4, [r2, #4]
 800fa74:	e7ca      	b.n	800fa0c <_free_r+0x24>
 800fa76:	46c0      	nop			@ (mov r8, r8)
 800fa78:	20001a44 	.word	0x20001a44

0800fa7c <malloc>:
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	4b03      	ldr	r3, [pc, #12]	@ (800fa8c <malloc+0x10>)
 800fa80:	0001      	movs	r1, r0
 800fa82:	6818      	ldr	r0, [r3, #0]
 800fa84:	f000 f826 	bl	800fad4 <_malloc_r>
 800fa88:	bd10      	pop	{r4, pc}
 800fa8a:	46c0      	nop			@ (mov r8, r8)
 800fa8c:	20000084 	.word	0x20000084

0800fa90 <sbrk_aligned>:
 800fa90:	b570      	push	{r4, r5, r6, lr}
 800fa92:	4e0f      	ldr	r6, [pc, #60]	@ (800fad0 <sbrk_aligned+0x40>)
 800fa94:	000d      	movs	r5, r1
 800fa96:	6831      	ldr	r1, [r6, #0]
 800fa98:	0004      	movs	r4, r0
 800fa9a:	2900      	cmp	r1, #0
 800fa9c:	d102      	bne.n	800faa4 <sbrk_aligned+0x14>
 800fa9e:	f001 f855 	bl	8010b4c <_sbrk_r>
 800faa2:	6030      	str	r0, [r6, #0]
 800faa4:	0029      	movs	r1, r5
 800faa6:	0020      	movs	r0, r4
 800faa8:	f001 f850 	bl	8010b4c <_sbrk_r>
 800faac:	1c43      	adds	r3, r0, #1
 800faae:	d103      	bne.n	800fab8 <sbrk_aligned+0x28>
 800fab0:	2501      	movs	r5, #1
 800fab2:	426d      	negs	r5, r5
 800fab4:	0028      	movs	r0, r5
 800fab6:	bd70      	pop	{r4, r5, r6, pc}
 800fab8:	2303      	movs	r3, #3
 800faba:	1cc5      	adds	r5, r0, #3
 800fabc:	439d      	bics	r5, r3
 800fabe:	42a8      	cmp	r0, r5
 800fac0:	d0f8      	beq.n	800fab4 <sbrk_aligned+0x24>
 800fac2:	1a29      	subs	r1, r5, r0
 800fac4:	0020      	movs	r0, r4
 800fac6:	f001 f841 	bl	8010b4c <_sbrk_r>
 800faca:	3001      	adds	r0, #1
 800facc:	d1f2      	bne.n	800fab4 <sbrk_aligned+0x24>
 800face:	e7ef      	b.n	800fab0 <sbrk_aligned+0x20>
 800fad0:	20001a40 	.word	0x20001a40

0800fad4 <_malloc_r>:
 800fad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fad6:	2203      	movs	r2, #3
 800fad8:	1ccb      	adds	r3, r1, #3
 800fada:	4393      	bics	r3, r2
 800fadc:	3308      	adds	r3, #8
 800fade:	0005      	movs	r5, r0
 800fae0:	001f      	movs	r7, r3
 800fae2:	2b0c      	cmp	r3, #12
 800fae4:	d234      	bcs.n	800fb50 <_malloc_r+0x7c>
 800fae6:	270c      	movs	r7, #12
 800fae8:	42b9      	cmp	r1, r7
 800faea:	d833      	bhi.n	800fb54 <_malloc_r+0x80>
 800faec:	0028      	movs	r0, r5
 800faee:	f000 f871 	bl	800fbd4 <__malloc_lock>
 800faf2:	4e37      	ldr	r6, [pc, #220]	@ (800fbd0 <_malloc_r+0xfc>)
 800faf4:	6833      	ldr	r3, [r6, #0]
 800faf6:	001c      	movs	r4, r3
 800faf8:	2c00      	cmp	r4, #0
 800fafa:	d12f      	bne.n	800fb5c <_malloc_r+0x88>
 800fafc:	0039      	movs	r1, r7
 800fafe:	0028      	movs	r0, r5
 800fb00:	f7ff ffc6 	bl	800fa90 <sbrk_aligned>
 800fb04:	0004      	movs	r4, r0
 800fb06:	1c43      	adds	r3, r0, #1
 800fb08:	d15f      	bne.n	800fbca <_malloc_r+0xf6>
 800fb0a:	6834      	ldr	r4, [r6, #0]
 800fb0c:	9400      	str	r4, [sp, #0]
 800fb0e:	9b00      	ldr	r3, [sp, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d14a      	bne.n	800fbaa <_malloc_r+0xd6>
 800fb14:	2c00      	cmp	r4, #0
 800fb16:	d052      	beq.n	800fbbe <_malloc_r+0xea>
 800fb18:	6823      	ldr	r3, [r4, #0]
 800fb1a:	0028      	movs	r0, r5
 800fb1c:	18e3      	adds	r3, r4, r3
 800fb1e:	9900      	ldr	r1, [sp, #0]
 800fb20:	9301      	str	r3, [sp, #4]
 800fb22:	f001 f813 	bl	8010b4c <_sbrk_r>
 800fb26:	9b01      	ldr	r3, [sp, #4]
 800fb28:	4283      	cmp	r3, r0
 800fb2a:	d148      	bne.n	800fbbe <_malloc_r+0xea>
 800fb2c:	6823      	ldr	r3, [r4, #0]
 800fb2e:	0028      	movs	r0, r5
 800fb30:	1aff      	subs	r7, r7, r3
 800fb32:	0039      	movs	r1, r7
 800fb34:	f7ff ffac 	bl	800fa90 <sbrk_aligned>
 800fb38:	3001      	adds	r0, #1
 800fb3a:	d040      	beq.n	800fbbe <_malloc_r+0xea>
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	19db      	adds	r3, r3, r7
 800fb40:	6023      	str	r3, [r4, #0]
 800fb42:	6833      	ldr	r3, [r6, #0]
 800fb44:	685a      	ldr	r2, [r3, #4]
 800fb46:	2a00      	cmp	r2, #0
 800fb48:	d133      	bne.n	800fbb2 <_malloc_r+0xde>
 800fb4a:	9b00      	ldr	r3, [sp, #0]
 800fb4c:	6033      	str	r3, [r6, #0]
 800fb4e:	e019      	b.n	800fb84 <_malloc_r+0xb0>
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	dac9      	bge.n	800fae8 <_malloc_r+0x14>
 800fb54:	230c      	movs	r3, #12
 800fb56:	602b      	str	r3, [r5, #0]
 800fb58:	2000      	movs	r0, #0
 800fb5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb5c:	6821      	ldr	r1, [r4, #0]
 800fb5e:	1bc9      	subs	r1, r1, r7
 800fb60:	d420      	bmi.n	800fba4 <_malloc_r+0xd0>
 800fb62:	290b      	cmp	r1, #11
 800fb64:	d90a      	bls.n	800fb7c <_malloc_r+0xa8>
 800fb66:	19e2      	adds	r2, r4, r7
 800fb68:	6027      	str	r7, [r4, #0]
 800fb6a:	42a3      	cmp	r3, r4
 800fb6c:	d104      	bne.n	800fb78 <_malloc_r+0xa4>
 800fb6e:	6032      	str	r2, [r6, #0]
 800fb70:	6863      	ldr	r3, [r4, #4]
 800fb72:	6011      	str	r1, [r2, #0]
 800fb74:	6053      	str	r3, [r2, #4]
 800fb76:	e005      	b.n	800fb84 <_malloc_r+0xb0>
 800fb78:	605a      	str	r2, [r3, #4]
 800fb7a:	e7f9      	b.n	800fb70 <_malloc_r+0x9c>
 800fb7c:	6862      	ldr	r2, [r4, #4]
 800fb7e:	42a3      	cmp	r3, r4
 800fb80:	d10e      	bne.n	800fba0 <_malloc_r+0xcc>
 800fb82:	6032      	str	r2, [r6, #0]
 800fb84:	0028      	movs	r0, r5
 800fb86:	f000 f82d 	bl	800fbe4 <__malloc_unlock>
 800fb8a:	0020      	movs	r0, r4
 800fb8c:	2207      	movs	r2, #7
 800fb8e:	300b      	adds	r0, #11
 800fb90:	1d23      	adds	r3, r4, #4
 800fb92:	4390      	bics	r0, r2
 800fb94:	1ac2      	subs	r2, r0, r3
 800fb96:	4298      	cmp	r0, r3
 800fb98:	d0df      	beq.n	800fb5a <_malloc_r+0x86>
 800fb9a:	1a1b      	subs	r3, r3, r0
 800fb9c:	50a3      	str	r3, [r4, r2]
 800fb9e:	e7dc      	b.n	800fb5a <_malloc_r+0x86>
 800fba0:	605a      	str	r2, [r3, #4]
 800fba2:	e7ef      	b.n	800fb84 <_malloc_r+0xb0>
 800fba4:	0023      	movs	r3, r4
 800fba6:	6864      	ldr	r4, [r4, #4]
 800fba8:	e7a6      	b.n	800faf8 <_malloc_r+0x24>
 800fbaa:	9c00      	ldr	r4, [sp, #0]
 800fbac:	6863      	ldr	r3, [r4, #4]
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	e7ad      	b.n	800fb0e <_malloc_r+0x3a>
 800fbb2:	001a      	movs	r2, r3
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	42a3      	cmp	r3, r4
 800fbb8:	d1fb      	bne.n	800fbb2 <_malloc_r+0xde>
 800fbba:	2300      	movs	r3, #0
 800fbbc:	e7da      	b.n	800fb74 <_malloc_r+0xa0>
 800fbbe:	230c      	movs	r3, #12
 800fbc0:	0028      	movs	r0, r5
 800fbc2:	602b      	str	r3, [r5, #0]
 800fbc4:	f000 f80e 	bl	800fbe4 <__malloc_unlock>
 800fbc8:	e7c6      	b.n	800fb58 <_malloc_r+0x84>
 800fbca:	6007      	str	r7, [r0, #0]
 800fbcc:	e7da      	b.n	800fb84 <_malloc_r+0xb0>
 800fbce:	46c0      	nop			@ (mov r8, r8)
 800fbd0:	20001a44 	.word	0x20001a44

0800fbd4 <__malloc_lock>:
 800fbd4:	b510      	push	{r4, lr}
 800fbd6:	4802      	ldr	r0, [pc, #8]	@ (800fbe0 <__malloc_lock+0xc>)
 800fbd8:	f7ff f877 	bl	800ecca <__retarget_lock_acquire_recursive>
 800fbdc:	bd10      	pop	{r4, pc}
 800fbde:	46c0      	nop			@ (mov r8, r8)
 800fbe0:	20001a3c 	.word	0x20001a3c

0800fbe4 <__malloc_unlock>:
 800fbe4:	b510      	push	{r4, lr}
 800fbe6:	4802      	ldr	r0, [pc, #8]	@ (800fbf0 <__malloc_unlock+0xc>)
 800fbe8:	f7ff f870 	bl	800eccc <__retarget_lock_release_recursive>
 800fbec:	bd10      	pop	{r4, pc}
 800fbee:	46c0      	nop			@ (mov r8, r8)
 800fbf0:	20001a3c 	.word	0x20001a3c

0800fbf4 <_Balloc>:
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	69c5      	ldr	r5, [r0, #28]
 800fbf8:	0006      	movs	r6, r0
 800fbfa:	000c      	movs	r4, r1
 800fbfc:	2d00      	cmp	r5, #0
 800fbfe:	d10e      	bne.n	800fc1e <_Balloc+0x2a>
 800fc00:	2010      	movs	r0, #16
 800fc02:	f7ff ff3b 	bl	800fa7c <malloc>
 800fc06:	1e02      	subs	r2, r0, #0
 800fc08:	61f0      	str	r0, [r6, #28]
 800fc0a:	d104      	bne.n	800fc16 <_Balloc+0x22>
 800fc0c:	216b      	movs	r1, #107	@ 0x6b
 800fc0e:	4b19      	ldr	r3, [pc, #100]	@ (800fc74 <_Balloc+0x80>)
 800fc10:	4819      	ldr	r0, [pc, #100]	@ (800fc78 <_Balloc+0x84>)
 800fc12:	f000 ffb7 	bl	8010b84 <__assert_func>
 800fc16:	6045      	str	r5, [r0, #4]
 800fc18:	6085      	str	r5, [r0, #8]
 800fc1a:	6005      	str	r5, [r0, #0]
 800fc1c:	60c5      	str	r5, [r0, #12]
 800fc1e:	69f5      	ldr	r5, [r6, #28]
 800fc20:	68eb      	ldr	r3, [r5, #12]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d013      	beq.n	800fc4e <_Balloc+0x5a>
 800fc26:	69f3      	ldr	r3, [r6, #28]
 800fc28:	00a2      	lsls	r2, r4, #2
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	189b      	adds	r3, r3, r2
 800fc2e:	6818      	ldr	r0, [r3, #0]
 800fc30:	2800      	cmp	r0, #0
 800fc32:	d118      	bne.n	800fc66 <_Balloc+0x72>
 800fc34:	2101      	movs	r1, #1
 800fc36:	000d      	movs	r5, r1
 800fc38:	40a5      	lsls	r5, r4
 800fc3a:	1d6a      	adds	r2, r5, #5
 800fc3c:	0030      	movs	r0, r6
 800fc3e:	0092      	lsls	r2, r2, #2
 800fc40:	f000 ffbe 	bl	8010bc0 <_calloc_r>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	d00c      	beq.n	800fc62 <_Balloc+0x6e>
 800fc48:	6044      	str	r4, [r0, #4]
 800fc4a:	6085      	str	r5, [r0, #8]
 800fc4c:	e00d      	b.n	800fc6a <_Balloc+0x76>
 800fc4e:	2221      	movs	r2, #33	@ 0x21
 800fc50:	2104      	movs	r1, #4
 800fc52:	0030      	movs	r0, r6
 800fc54:	f000 ffb4 	bl	8010bc0 <_calloc_r>
 800fc58:	69f3      	ldr	r3, [r6, #28]
 800fc5a:	60e8      	str	r0, [r5, #12]
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d1e1      	bne.n	800fc26 <_Balloc+0x32>
 800fc62:	2000      	movs	r0, #0
 800fc64:	bd70      	pop	{r4, r5, r6, pc}
 800fc66:	6802      	ldr	r2, [r0, #0]
 800fc68:	601a      	str	r2, [r3, #0]
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	6103      	str	r3, [r0, #16]
 800fc6e:	60c3      	str	r3, [r0, #12]
 800fc70:	e7f8      	b.n	800fc64 <_Balloc+0x70>
 800fc72:	46c0      	nop			@ (mov r8, r8)
 800fc74:	08011b65 	.word	0x08011b65
 800fc78:	08011be5 	.word	0x08011be5

0800fc7c <_Bfree>:
 800fc7c:	b570      	push	{r4, r5, r6, lr}
 800fc7e:	69c6      	ldr	r6, [r0, #28]
 800fc80:	0005      	movs	r5, r0
 800fc82:	000c      	movs	r4, r1
 800fc84:	2e00      	cmp	r6, #0
 800fc86:	d10e      	bne.n	800fca6 <_Bfree+0x2a>
 800fc88:	2010      	movs	r0, #16
 800fc8a:	f7ff fef7 	bl	800fa7c <malloc>
 800fc8e:	1e02      	subs	r2, r0, #0
 800fc90:	61e8      	str	r0, [r5, #28]
 800fc92:	d104      	bne.n	800fc9e <_Bfree+0x22>
 800fc94:	218f      	movs	r1, #143	@ 0x8f
 800fc96:	4b09      	ldr	r3, [pc, #36]	@ (800fcbc <_Bfree+0x40>)
 800fc98:	4809      	ldr	r0, [pc, #36]	@ (800fcc0 <_Bfree+0x44>)
 800fc9a:	f000 ff73 	bl	8010b84 <__assert_func>
 800fc9e:	6046      	str	r6, [r0, #4]
 800fca0:	6086      	str	r6, [r0, #8]
 800fca2:	6006      	str	r6, [r0, #0]
 800fca4:	60c6      	str	r6, [r0, #12]
 800fca6:	2c00      	cmp	r4, #0
 800fca8:	d007      	beq.n	800fcba <_Bfree+0x3e>
 800fcaa:	69eb      	ldr	r3, [r5, #28]
 800fcac:	6862      	ldr	r2, [r4, #4]
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	0092      	lsls	r2, r2, #2
 800fcb2:	189b      	adds	r3, r3, r2
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	6022      	str	r2, [r4, #0]
 800fcb8:	601c      	str	r4, [r3, #0]
 800fcba:	bd70      	pop	{r4, r5, r6, pc}
 800fcbc:	08011b65 	.word	0x08011b65
 800fcc0:	08011be5 	.word	0x08011be5

0800fcc4 <__multadd>:
 800fcc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcc6:	000f      	movs	r7, r1
 800fcc8:	9001      	str	r0, [sp, #4]
 800fcca:	000c      	movs	r4, r1
 800fccc:	001e      	movs	r6, r3
 800fcce:	2000      	movs	r0, #0
 800fcd0:	690d      	ldr	r5, [r1, #16]
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	3001      	adds	r0, #1
 800fcd8:	b299      	uxth	r1, r3
 800fcda:	4351      	muls	r1, r2
 800fcdc:	0c1b      	lsrs	r3, r3, #16
 800fcde:	4353      	muls	r3, r2
 800fce0:	1989      	adds	r1, r1, r6
 800fce2:	0c0e      	lsrs	r6, r1, #16
 800fce4:	199b      	adds	r3, r3, r6
 800fce6:	0c1e      	lsrs	r6, r3, #16
 800fce8:	b289      	uxth	r1, r1
 800fcea:	041b      	lsls	r3, r3, #16
 800fcec:	185b      	adds	r3, r3, r1
 800fcee:	c708      	stmia	r7!, {r3}
 800fcf0:	4285      	cmp	r5, r0
 800fcf2:	dcef      	bgt.n	800fcd4 <__multadd+0x10>
 800fcf4:	2e00      	cmp	r6, #0
 800fcf6:	d022      	beq.n	800fd3e <__multadd+0x7a>
 800fcf8:	68a3      	ldr	r3, [r4, #8]
 800fcfa:	42ab      	cmp	r3, r5
 800fcfc:	dc19      	bgt.n	800fd32 <__multadd+0x6e>
 800fcfe:	6861      	ldr	r1, [r4, #4]
 800fd00:	9801      	ldr	r0, [sp, #4]
 800fd02:	3101      	adds	r1, #1
 800fd04:	f7ff ff76 	bl	800fbf4 <_Balloc>
 800fd08:	1e07      	subs	r7, r0, #0
 800fd0a:	d105      	bne.n	800fd18 <__multadd+0x54>
 800fd0c:	003a      	movs	r2, r7
 800fd0e:	21ba      	movs	r1, #186	@ 0xba
 800fd10:	4b0c      	ldr	r3, [pc, #48]	@ (800fd44 <__multadd+0x80>)
 800fd12:	480d      	ldr	r0, [pc, #52]	@ (800fd48 <__multadd+0x84>)
 800fd14:	f000 ff36 	bl	8010b84 <__assert_func>
 800fd18:	0021      	movs	r1, r4
 800fd1a:	6922      	ldr	r2, [r4, #16]
 800fd1c:	310c      	adds	r1, #12
 800fd1e:	3202      	adds	r2, #2
 800fd20:	0092      	lsls	r2, r2, #2
 800fd22:	300c      	adds	r0, #12
 800fd24:	f000 ff24 	bl	8010b70 <memcpy>
 800fd28:	0021      	movs	r1, r4
 800fd2a:	9801      	ldr	r0, [sp, #4]
 800fd2c:	f7ff ffa6 	bl	800fc7c <_Bfree>
 800fd30:	003c      	movs	r4, r7
 800fd32:	1d2b      	adds	r3, r5, #4
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	18e3      	adds	r3, r4, r3
 800fd38:	3501      	adds	r5, #1
 800fd3a:	605e      	str	r6, [r3, #4]
 800fd3c:	6125      	str	r5, [r4, #16]
 800fd3e:	0020      	movs	r0, r4
 800fd40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd42:	46c0      	nop			@ (mov r8, r8)
 800fd44:	08011bd4 	.word	0x08011bd4
 800fd48:	08011be5 	.word	0x08011be5

0800fd4c <__hi0bits>:
 800fd4c:	2280      	movs	r2, #128	@ 0x80
 800fd4e:	0003      	movs	r3, r0
 800fd50:	0252      	lsls	r2, r2, #9
 800fd52:	2000      	movs	r0, #0
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d201      	bcs.n	800fd5c <__hi0bits+0x10>
 800fd58:	041b      	lsls	r3, r3, #16
 800fd5a:	3010      	adds	r0, #16
 800fd5c:	2280      	movs	r2, #128	@ 0x80
 800fd5e:	0452      	lsls	r2, r2, #17
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d201      	bcs.n	800fd68 <__hi0bits+0x1c>
 800fd64:	3008      	adds	r0, #8
 800fd66:	021b      	lsls	r3, r3, #8
 800fd68:	2280      	movs	r2, #128	@ 0x80
 800fd6a:	0552      	lsls	r2, r2, #21
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d201      	bcs.n	800fd74 <__hi0bits+0x28>
 800fd70:	3004      	adds	r0, #4
 800fd72:	011b      	lsls	r3, r3, #4
 800fd74:	2280      	movs	r2, #128	@ 0x80
 800fd76:	05d2      	lsls	r2, r2, #23
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d201      	bcs.n	800fd80 <__hi0bits+0x34>
 800fd7c:	3002      	adds	r0, #2
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	db03      	blt.n	800fd8c <__hi0bits+0x40>
 800fd84:	3001      	adds	r0, #1
 800fd86:	4213      	tst	r3, r2
 800fd88:	d100      	bne.n	800fd8c <__hi0bits+0x40>
 800fd8a:	2020      	movs	r0, #32
 800fd8c:	4770      	bx	lr

0800fd8e <__lo0bits>:
 800fd8e:	6803      	ldr	r3, [r0, #0]
 800fd90:	0001      	movs	r1, r0
 800fd92:	2207      	movs	r2, #7
 800fd94:	0018      	movs	r0, r3
 800fd96:	4010      	ands	r0, r2
 800fd98:	4213      	tst	r3, r2
 800fd9a:	d00d      	beq.n	800fdb8 <__lo0bits+0x2a>
 800fd9c:	3a06      	subs	r2, #6
 800fd9e:	2000      	movs	r0, #0
 800fda0:	4213      	tst	r3, r2
 800fda2:	d105      	bne.n	800fdb0 <__lo0bits+0x22>
 800fda4:	3002      	adds	r0, #2
 800fda6:	4203      	tst	r3, r0
 800fda8:	d003      	beq.n	800fdb2 <__lo0bits+0x24>
 800fdaa:	40d3      	lsrs	r3, r2
 800fdac:	0010      	movs	r0, r2
 800fdae:	600b      	str	r3, [r1, #0]
 800fdb0:	4770      	bx	lr
 800fdb2:	089b      	lsrs	r3, r3, #2
 800fdb4:	600b      	str	r3, [r1, #0]
 800fdb6:	e7fb      	b.n	800fdb0 <__lo0bits+0x22>
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	2a00      	cmp	r2, #0
 800fdbc:	d101      	bne.n	800fdc2 <__lo0bits+0x34>
 800fdbe:	2010      	movs	r0, #16
 800fdc0:	0c1b      	lsrs	r3, r3, #16
 800fdc2:	b2da      	uxtb	r2, r3
 800fdc4:	2a00      	cmp	r2, #0
 800fdc6:	d101      	bne.n	800fdcc <__lo0bits+0x3e>
 800fdc8:	3008      	adds	r0, #8
 800fdca:	0a1b      	lsrs	r3, r3, #8
 800fdcc:	071a      	lsls	r2, r3, #28
 800fdce:	d101      	bne.n	800fdd4 <__lo0bits+0x46>
 800fdd0:	3004      	adds	r0, #4
 800fdd2:	091b      	lsrs	r3, r3, #4
 800fdd4:	079a      	lsls	r2, r3, #30
 800fdd6:	d101      	bne.n	800fddc <__lo0bits+0x4e>
 800fdd8:	3002      	adds	r0, #2
 800fdda:	089b      	lsrs	r3, r3, #2
 800fddc:	07da      	lsls	r2, r3, #31
 800fdde:	d4e9      	bmi.n	800fdb4 <__lo0bits+0x26>
 800fde0:	3001      	adds	r0, #1
 800fde2:	085b      	lsrs	r3, r3, #1
 800fde4:	d1e6      	bne.n	800fdb4 <__lo0bits+0x26>
 800fde6:	2020      	movs	r0, #32
 800fde8:	e7e2      	b.n	800fdb0 <__lo0bits+0x22>
	...

0800fdec <__i2b>:
 800fdec:	b510      	push	{r4, lr}
 800fdee:	000c      	movs	r4, r1
 800fdf0:	2101      	movs	r1, #1
 800fdf2:	f7ff feff 	bl	800fbf4 <_Balloc>
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d107      	bne.n	800fe0a <__i2b+0x1e>
 800fdfa:	2146      	movs	r1, #70	@ 0x46
 800fdfc:	4c05      	ldr	r4, [pc, #20]	@ (800fe14 <__i2b+0x28>)
 800fdfe:	0002      	movs	r2, r0
 800fe00:	4b05      	ldr	r3, [pc, #20]	@ (800fe18 <__i2b+0x2c>)
 800fe02:	0020      	movs	r0, r4
 800fe04:	31ff      	adds	r1, #255	@ 0xff
 800fe06:	f000 febd 	bl	8010b84 <__assert_func>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	6144      	str	r4, [r0, #20]
 800fe0e:	6103      	str	r3, [r0, #16]
 800fe10:	bd10      	pop	{r4, pc}
 800fe12:	46c0      	nop			@ (mov r8, r8)
 800fe14:	08011be5 	.word	0x08011be5
 800fe18:	08011bd4 	.word	0x08011bd4

0800fe1c <__multiply>:
 800fe1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe1e:	0014      	movs	r4, r2
 800fe20:	690a      	ldr	r2, [r1, #16]
 800fe22:	6923      	ldr	r3, [r4, #16]
 800fe24:	000d      	movs	r5, r1
 800fe26:	b08b      	sub	sp, #44	@ 0x2c
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	db02      	blt.n	800fe32 <__multiply+0x16>
 800fe2c:	0023      	movs	r3, r4
 800fe2e:	000c      	movs	r4, r1
 800fe30:	001d      	movs	r5, r3
 800fe32:	6927      	ldr	r7, [r4, #16]
 800fe34:	692e      	ldr	r6, [r5, #16]
 800fe36:	6861      	ldr	r1, [r4, #4]
 800fe38:	19bb      	adds	r3, r7, r6
 800fe3a:	9303      	str	r3, [sp, #12]
 800fe3c:	68a3      	ldr	r3, [r4, #8]
 800fe3e:	19ba      	adds	r2, r7, r6
 800fe40:	4293      	cmp	r3, r2
 800fe42:	da00      	bge.n	800fe46 <__multiply+0x2a>
 800fe44:	3101      	adds	r1, #1
 800fe46:	f7ff fed5 	bl	800fbf4 <_Balloc>
 800fe4a:	9002      	str	r0, [sp, #8]
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d106      	bne.n	800fe5e <__multiply+0x42>
 800fe50:	21b1      	movs	r1, #177	@ 0xb1
 800fe52:	4b49      	ldr	r3, [pc, #292]	@ (800ff78 <__multiply+0x15c>)
 800fe54:	4849      	ldr	r0, [pc, #292]	@ (800ff7c <__multiply+0x160>)
 800fe56:	9a02      	ldr	r2, [sp, #8]
 800fe58:	0049      	lsls	r1, r1, #1
 800fe5a:	f000 fe93 	bl	8010b84 <__assert_func>
 800fe5e:	9b02      	ldr	r3, [sp, #8]
 800fe60:	2200      	movs	r2, #0
 800fe62:	3314      	adds	r3, #20
 800fe64:	469c      	mov	ip, r3
 800fe66:	19bb      	adds	r3, r7, r6
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	4463      	add	r3, ip
 800fe6c:	9304      	str	r3, [sp, #16]
 800fe6e:	4663      	mov	r3, ip
 800fe70:	9904      	ldr	r1, [sp, #16]
 800fe72:	428b      	cmp	r3, r1
 800fe74:	d32a      	bcc.n	800fecc <__multiply+0xb0>
 800fe76:	0023      	movs	r3, r4
 800fe78:	00bf      	lsls	r7, r7, #2
 800fe7a:	3314      	adds	r3, #20
 800fe7c:	3514      	adds	r5, #20
 800fe7e:	9308      	str	r3, [sp, #32]
 800fe80:	00b6      	lsls	r6, r6, #2
 800fe82:	19db      	adds	r3, r3, r7
 800fe84:	9305      	str	r3, [sp, #20]
 800fe86:	19ab      	adds	r3, r5, r6
 800fe88:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe8a:	2304      	movs	r3, #4
 800fe8c:	9306      	str	r3, [sp, #24]
 800fe8e:	0023      	movs	r3, r4
 800fe90:	9a05      	ldr	r2, [sp, #20]
 800fe92:	3315      	adds	r3, #21
 800fe94:	9501      	str	r5, [sp, #4]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d305      	bcc.n	800fea6 <__multiply+0x8a>
 800fe9a:	1b13      	subs	r3, r2, r4
 800fe9c:	3b15      	subs	r3, #21
 800fe9e:	089b      	lsrs	r3, r3, #2
 800fea0:	3301      	adds	r3, #1
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	9306      	str	r3, [sp, #24]
 800fea6:	9b01      	ldr	r3, [sp, #4]
 800fea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800feaa:	4293      	cmp	r3, r2
 800feac:	d310      	bcc.n	800fed0 <__multiply+0xb4>
 800feae:	9b03      	ldr	r3, [sp, #12]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	dd05      	ble.n	800fec0 <__multiply+0xa4>
 800feb4:	9b04      	ldr	r3, [sp, #16]
 800feb6:	3b04      	subs	r3, #4
 800feb8:	9304      	str	r3, [sp, #16]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d056      	beq.n	800ff6e <__multiply+0x152>
 800fec0:	9b02      	ldr	r3, [sp, #8]
 800fec2:	9a03      	ldr	r2, [sp, #12]
 800fec4:	0018      	movs	r0, r3
 800fec6:	611a      	str	r2, [r3, #16]
 800fec8:	b00b      	add	sp, #44	@ 0x2c
 800feca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fecc:	c304      	stmia	r3!, {r2}
 800fece:	e7cf      	b.n	800fe70 <__multiply+0x54>
 800fed0:	9b01      	ldr	r3, [sp, #4]
 800fed2:	6818      	ldr	r0, [r3, #0]
 800fed4:	b280      	uxth	r0, r0
 800fed6:	2800      	cmp	r0, #0
 800fed8:	d01e      	beq.n	800ff18 <__multiply+0xfc>
 800feda:	4667      	mov	r7, ip
 800fedc:	2500      	movs	r5, #0
 800fede:	9e08      	ldr	r6, [sp, #32]
 800fee0:	ce02      	ldmia	r6!, {r1}
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	9307      	str	r3, [sp, #28]
 800fee6:	b28b      	uxth	r3, r1
 800fee8:	4343      	muls	r3, r0
 800feea:	001a      	movs	r2, r3
 800feec:	466b      	mov	r3, sp
 800feee:	0c09      	lsrs	r1, r1, #16
 800fef0:	8b9b      	ldrh	r3, [r3, #28]
 800fef2:	4341      	muls	r1, r0
 800fef4:	18d3      	adds	r3, r2, r3
 800fef6:	9a07      	ldr	r2, [sp, #28]
 800fef8:	195b      	adds	r3, r3, r5
 800fefa:	0c12      	lsrs	r2, r2, #16
 800fefc:	1889      	adds	r1, r1, r2
 800fefe:	0c1a      	lsrs	r2, r3, #16
 800ff00:	188a      	adds	r2, r1, r2
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	0c15      	lsrs	r5, r2, #16
 800ff06:	0412      	lsls	r2, r2, #16
 800ff08:	431a      	orrs	r2, r3
 800ff0a:	9b05      	ldr	r3, [sp, #20]
 800ff0c:	c704      	stmia	r7!, {r2}
 800ff0e:	42b3      	cmp	r3, r6
 800ff10:	d8e6      	bhi.n	800fee0 <__multiply+0xc4>
 800ff12:	4663      	mov	r3, ip
 800ff14:	9a06      	ldr	r2, [sp, #24]
 800ff16:	509d      	str	r5, [r3, r2]
 800ff18:	9b01      	ldr	r3, [sp, #4]
 800ff1a:	6818      	ldr	r0, [r3, #0]
 800ff1c:	0c00      	lsrs	r0, r0, #16
 800ff1e:	d020      	beq.n	800ff62 <__multiply+0x146>
 800ff20:	4663      	mov	r3, ip
 800ff22:	0025      	movs	r5, r4
 800ff24:	4661      	mov	r1, ip
 800ff26:	2700      	movs	r7, #0
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	3514      	adds	r5, #20
 800ff2c:	682a      	ldr	r2, [r5, #0]
 800ff2e:	680e      	ldr	r6, [r1, #0]
 800ff30:	b292      	uxth	r2, r2
 800ff32:	4342      	muls	r2, r0
 800ff34:	0c36      	lsrs	r6, r6, #16
 800ff36:	1992      	adds	r2, r2, r6
 800ff38:	19d2      	adds	r2, r2, r7
 800ff3a:	0416      	lsls	r6, r2, #16
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	431e      	orrs	r6, r3
 800ff40:	600e      	str	r6, [r1, #0]
 800ff42:	cd40      	ldmia	r5!, {r6}
 800ff44:	684b      	ldr	r3, [r1, #4]
 800ff46:	0c36      	lsrs	r6, r6, #16
 800ff48:	4346      	muls	r6, r0
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	0c12      	lsrs	r2, r2, #16
 800ff4e:	18f3      	adds	r3, r6, r3
 800ff50:	189b      	adds	r3, r3, r2
 800ff52:	9a05      	ldr	r2, [sp, #20]
 800ff54:	0c1f      	lsrs	r7, r3, #16
 800ff56:	3104      	adds	r1, #4
 800ff58:	42aa      	cmp	r2, r5
 800ff5a:	d8e7      	bhi.n	800ff2c <__multiply+0x110>
 800ff5c:	4662      	mov	r2, ip
 800ff5e:	9906      	ldr	r1, [sp, #24]
 800ff60:	5053      	str	r3, [r2, r1]
 800ff62:	9b01      	ldr	r3, [sp, #4]
 800ff64:	3304      	adds	r3, #4
 800ff66:	9301      	str	r3, [sp, #4]
 800ff68:	2304      	movs	r3, #4
 800ff6a:	449c      	add	ip, r3
 800ff6c:	e79b      	b.n	800fea6 <__multiply+0x8a>
 800ff6e:	9b03      	ldr	r3, [sp, #12]
 800ff70:	3b01      	subs	r3, #1
 800ff72:	9303      	str	r3, [sp, #12]
 800ff74:	e79b      	b.n	800feae <__multiply+0x92>
 800ff76:	46c0      	nop			@ (mov r8, r8)
 800ff78:	08011bd4 	.word	0x08011bd4
 800ff7c:	08011be5 	.word	0x08011be5

0800ff80 <__pow5mult>:
 800ff80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff82:	2303      	movs	r3, #3
 800ff84:	0015      	movs	r5, r2
 800ff86:	0007      	movs	r7, r0
 800ff88:	000e      	movs	r6, r1
 800ff8a:	401a      	ands	r2, r3
 800ff8c:	421d      	tst	r5, r3
 800ff8e:	d008      	beq.n	800ffa2 <__pow5mult+0x22>
 800ff90:	4925      	ldr	r1, [pc, #148]	@ (8010028 <__pow5mult+0xa8>)
 800ff92:	3a01      	subs	r2, #1
 800ff94:	0092      	lsls	r2, r2, #2
 800ff96:	5852      	ldr	r2, [r2, r1]
 800ff98:	2300      	movs	r3, #0
 800ff9a:	0031      	movs	r1, r6
 800ff9c:	f7ff fe92 	bl	800fcc4 <__multadd>
 800ffa0:	0006      	movs	r6, r0
 800ffa2:	10ad      	asrs	r5, r5, #2
 800ffa4:	d03d      	beq.n	8010022 <__pow5mult+0xa2>
 800ffa6:	69fc      	ldr	r4, [r7, #28]
 800ffa8:	2c00      	cmp	r4, #0
 800ffaa:	d10f      	bne.n	800ffcc <__pow5mult+0x4c>
 800ffac:	2010      	movs	r0, #16
 800ffae:	f7ff fd65 	bl	800fa7c <malloc>
 800ffb2:	1e02      	subs	r2, r0, #0
 800ffb4:	61f8      	str	r0, [r7, #28]
 800ffb6:	d105      	bne.n	800ffc4 <__pow5mult+0x44>
 800ffb8:	21b4      	movs	r1, #180	@ 0xb4
 800ffba:	4b1c      	ldr	r3, [pc, #112]	@ (801002c <__pow5mult+0xac>)
 800ffbc:	481c      	ldr	r0, [pc, #112]	@ (8010030 <__pow5mult+0xb0>)
 800ffbe:	31ff      	adds	r1, #255	@ 0xff
 800ffc0:	f000 fde0 	bl	8010b84 <__assert_func>
 800ffc4:	6044      	str	r4, [r0, #4]
 800ffc6:	6084      	str	r4, [r0, #8]
 800ffc8:	6004      	str	r4, [r0, #0]
 800ffca:	60c4      	str	r4, [r0, #12]
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	689c      	ldr	r4, [r3, #8]
 800ffd0:	9301      	str	r3, [sp, #4]
 800ffd2:	2c00      	cmp	r4, #0
 800ffd4:	d108      	bne.n	800ffe8 <__pow5mult+0x68>
 800ffd6:	0038      	movs	r0, r7
 800ffd8:	4916      	ldr	r1, [pc, #88]	@ (8010034 <__pow5mult+0xb4>)
 800ffda:	f7ff ff07 	bl	800fdec <__i2b>
 800ffde:	9b01      	ldr	r3, [sp, #4]
 800ffe0:	0004      	movs	r4, r0
 800ffe2:	6098      	str	r0, [r3, #8]
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	6003      	str	r3, [r0, #0]
 800ffe8:	2301      	movs	r3, #1
 800ffea:	421d      	tst	r5, r3
 800ffec:	d00a      	beq.n	8010004 <__pow5mult+0x84>
 800ffee:	0031      	movs	r1, r6
 800fff0:	0022      	movs	r2, r4
 800fff2:	0038      	movs	r0, r7
 800fff4:	f7ff ff12 	bl	800fe1c <__multiply>
 800fff8:	0031      	movs	r1, r6
 800fffa:	9001      	str	r0, [sp, #4]
 800fffc:	0038      	movs	r0, r7
 800fffe:	f7ff fe3d 	bl	800fc7c <_Bfree>
 8010002:	9e01      	ldr	r6, [sp, #4]
 8010004:	106d      	asrs	r5, r5, #1
 8010006:	d00c      	beq.n	8010022 <__pow5mult+0xa2>
 8010008:	6820      	ldr	r0, [r4, #0]
 801000a:	2800      	cmp	r0, #0
 801000c:	d107      	bne.n	801001e <__pow5mult+0x9e>
 801000e:	0022      	movs	r2, r4
 8010010:	0021      	movs	r1, r4
 8010012:	0038      	movs	r0, r7
 8010014:	f7ff ff02 	bl	800fe1c <__multiply>
 8010018:	2300      	movs	r3, #0
 801001a:	6020      	str	r0, [r4, #0]
 801001c:	6003      	str	r3, [r0, #0]
 801001e:	0004      	movs	r4, r0
 8010020:	e7e2      	b.n	800ffe8 <__pow5mult+0x68>
 8010022:	0030      	movs	r0, r6
 8010024:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010026:	46c0      	nop			@ (mov r8, r8)
 8010028:	08011c40 	.word	0x08011c40
 801002c:	08011b65 	.word	0x08011b65
 8010030:	08011be5 	.word	0x08011be5
 8010034:	00000271 	.word	0x00000271

08010038 <__lshift>:
 8010038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801003a:	000c      	movs	r4, r1
 801003c:	0016      	movs	r6, r2
 801003e:	6923      	ldr	r3, [r4, #16]
 8010040:	1157      	asrs	r7, r2, #5
 8010042:	b085      	sub	sp, #20
 8010044:	18fb      	adds	r3, r7, r3
 8010046:	9301      	str	r3, [sp, #4]
 8010048:	3301      	adds	r3, #1
 801004a:	9300      	str	r3, [sp, #0]
 801004c:	6849      	ldr	r1, [r1, #4]
 801004e:	68a3      	ldr	r3, [r4, #8]
 8010050:	9002      	str	r0, [sp, #8]
 8010052:	9a00      	ldr	r2, [sp, #0]
 8010054:	4293      	cmp	r3, r2
 8010056:	db10      	blt.n	801007a <__lshift+0x42>
 8010058:	9802      	ldr	r0, [sp, #8]
 801005a:	f7ff fdcb 	bl	800fbf4 <_Balloc>
 801005e:	2300      	movs	r3, #0
 8010060:	0001      	movs	r1, r0
 8010062:	0005      	movs	r5, r0
 8010064:	001a      	movs	r2, r3
 8010066:	3114      	adds	r1, #20
 8010068:	4298      	cmp	r0, r3
 801006a:	d10c      	bne.n	8010086 <__lshift+0x4e>
 801006c:	21ef      	movs	r1, #239	@ 0xef
 801006e:	002a      	movs	r2, r5
 8010070:	4b25      	ldr	r3, [pc, #148]	@ (8010108 <__lshift+0xd0>)
 8010072:	4826      	ldr	r0, [pc, #152]	@ (801010c <__lshift+0xd4>)
 8010074:	0049      	lsls	r1, r1, #1
 8010076:	f000 fd85 	bl	8010b84 <__assert_func>
 801007a:	3101      	adds	r1, #1
 801007c:	005b      	lsls	r3, r3, #1
 801007e:	e7e8      	b.n	8010052 <__lshift+0x1a>
 8010080:	0098      	lsls	r0, r3, #2
 8010082:	500a      	str	r2, [r1, r0]
 8010084:	3301      	adds	r3, #1
 8010086:	42bb      	cmp	r3, r7
 8010088:	dbfa      	blt.n	8010080 <__lshift+0x48>
 801008a:	43fb      	mvns	r3, r7
 801008c:	17db      	asrs	r3, r3, #31
 801008e:	401f      	ands	r7, r3
 8010090:	00bf      	lsls	r7, r7, #2
 8010092:	0023      	movs	r3, r4
 8010094:	201f      	movs	r0, #31
 8010096:	19c9      	adds	r1, r1, r7
 8010098:	0037      	movs	r7, r6
 801009a:	6922      	ldr	r2, [r4, #16]
 801009c:	3314      	adds	r3, #20
 801009e:	0092      	lsls	r2, r2, #2
 80100a0:	189a      	adds	r2, r3, r2
 80100a2:	4007      	ands	r7, r0
 80100a4:	4206      	tst	r6, r0
 80100a6:	d029      	beq.n	80100fc <__lshift+0xc4>
 80100a8:	3001      	adds	r0, #1
 80100aa:	1bc0      	subs	r0, r0, r7
 80100ac:	9003      	str	r0, [sp, #12]
 80100ae:	468c      	mov	ip, r1
 80100b0:	2000      	movs	r0, #0
 80100b2:	681e      	ldr	r6, [r3, #0]
 80100b4:	40be      	lsls	r6, r7
 80100b6:	4306      	orrs	r6, r0
 80100b8:	4660      	mov	r0, ip
 80100ba:	c040      	stmia	r0!, {r6}
 80100bc:	4684      	mov	ip, r0
 80100be:	9e03      	ldr	r6, [sp, #12]
 80100c0:	cb01      	ldmia	r3!, {r0}
 80100c2:	40f0      	lsrs	r0, r6
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d8f4      	bhi.n	80100b2 <__lshift+0x7a>
 80100c8:	0026      	movs	r6, r4
 80100ca:	3615      	adds	r6, #21
 80100cc:	2304      	movs	r3, #4
 80100ce:	42b2      	cmp	r2, r6
 80100d0:	d304      	bcc.n	80100dc <__lshift+0xa4>
 80100d2:	1b13      	subs	r3, r2, r4
 80100d4:	3b15      	subs	r3, #21
 80100d6:	089b      	lsrs	r3, r3, #2
 80100d8:	3301      	adds	r3, #1
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	50c8      	str	r0, [r1, r3]
 80100de:	2800      	cmp	r0, #0
 80100e0:	d002      	beq.n	80100e8 <__lshift+0xb0>
 80100e2:	9b01      	ldr	r3, [sp, #4]
 80100e4:	3302      	adds	r3, #2
 80100e6:	9300      	str	r3, [sp, #0]
 80100e8:	9b00      	ldr	r3, [sp, #0]
 80100ea:	9802      	ldr	r0, [sp, #8]
 80100ec:	3b01      	subs	r3, #1
 80100ee:	0021      	movs	r1, r4
 80100f0:	612b      	str	r3, [r5, #16]
 80100f2:	f7ff fdc3 	bl	800fc7c <_Bfree>
 80100f6:	0028      	movs	r0, r5
 80100f8:	b005      	add	sp, #20
 80100fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100fc:	cb01      	ldmia	r3!, {r0}
 80100fe:	c101      	stmia	r1!, {r0}
 8010100:	429a      	cmp	r2, r3
 8010102:	d8fb      	bhi.n	80100fc <__lshift+0xc4>
 8010104:	e7f0      	b.n	80100e8 <__lshift+0xb0>
 8010106:	46c0      	nop			@ (mov r8, r8)
 8010108:	08011bd4 	.word	0x08011bd4
 801010c:	08011be5 	.word	0x08011be5

08010110 <__mcmp>:
 8010110:	b530      	push	{r4, r5, lr}
 8010112:	690b      	ldr	r3, [r1, #16]
 8010114:	6904      	ldr	r4, [r0, #16]
 8010116:	0002      	movs	r2, r0
 8010118:	1ae0      	subs	r0, r4, r3
 801011a:	429c      	cmp	r4, r3
 801011c:	d10f      	bne.n	801013e <__mcmp+0x2e>
 801011e:	3214      	adds	r2, #20
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	3114      	adds	r1, #20
 8010124:	0014      	movs	r4, r2
 8010126:	18c9      	adds	r1, r1, r3
 8010128:	18d2      	adds	r2, r2, r3
 801012a:	3a04      	subs	r2, #4
 801012c:	3904      	subs	r1, #4
 801012e:	6815      	ldr	r5, [r2, #0]
 8010130:	680b      	ldr	r3, [r1, #0]
 8010132:	429d      	cmp	r5, r3
 8010134:	d004      	beq.n	8010140 <__mcmp+0x30>
 8010136:	2001      	movs	r0, #1
 8010138:	429d      	cmp	r5, r3
 801013a:	d200      	bcs.n	801013e <__mcmp+0x2e>
 801013c:	3802      	subs	r0, #2
 801013e:	bd30      	pop	{r4, r5, pc}
 8010140:	4294      	cmp	r4, r2
 8010142:	d3f2      	bcc.n	801012a <__mcmp+0x1a>
 8010144:	e7fb      	b.n	801013e <__mcmp+0x2e>
	...

08010148 <__mdiff>:
 8010148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801014a:	000c      	movs	r4, r1
 801014c:	b087      	sub	sp, #28
 801014e:	9000      	str	r0, [sp, #0]
 8010150:	0011      	movs	r1, r2
 8010152:	0020      	movs	r0, r4
 8010154:	0017      	movs	r7, r2
 8010156:	f7ff ffdb 	bl	8010110 <__mcmp>
 801015a:	1e05      	subs	r5, r0, #0
 801015c:	d110      	bne.n	8010180 <__mdiff+0x38>
 801015e:	0001      	movs	r1, r0
 8010160:	9800      	ldr	r0, [sp, #0]
 8010162:	f7ff fd47 	bl	800fbf4 <_Balloc>
 8010166:	1e02      	subs	r2, r0, #0
 8010168:	d104      	bne.n	8010174 <__mdiff+0x2c>
 801016a:	4b40      	ldr	r3, [pc, #256]	@ (801026c <__mdiff+0x124>)
 801016c:	4840      	ldr	r0, [pc, #256]	@ (8010270 <__mdiff+0x128>)
 801016e:	4941      	ldr	r1, [pc, #260]	@ (8010274 <__mdiff+0x12c>)
 8010170:	f000 fd08 	bl	8010b84 <__assert_func>
 8010174:	2301      	movs	r3, #1
 8010176:	6145      	str	r5, [r0, #20]
 8010178:	6103      	str	r3, [r0, #16]
 801017a:	0010      	movs	r0, r2
 801017c:	b007      	add	sp, #28
 801017e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010180:	2600      	movs	r6, #0
 8010182:	42b0      	cmp	r0, r6
 8010184:	da03      	bge.n	801018e <__mdiff+0x46>
 8010186:	0023      	movs	r3, r4
 8010188:	003c      	movs	r4, r7
 801018a:	001f      	movs	r7, r3
 801018c:	3601      	adds	r6, #1
 801018e:	6861      	ldr	r1, [r4, #4]
 8010190:	9800      	ldr	r0, [sp, #0]
 8010192:	f7ff fd2f 	bl	800fbf4 <_Balloc>
 8010196:	1e02      	subs	r2, r0, #0
 8010198:	d103      	bne.n	80101a2 <__mdiff+0x5a>
 801019a:	4b34      	ldr	r3, [pc, #208]	@ (801026c <__mdiff+0x124>)
 801019c:	4834      	ldr	r0, [pc, #208]	@ (8010270 <__mdiff+0x128>)
 801019e:	4936      	ldr	r1, [pc, #216]	@ (8010278 <__mdiff+0x130>)
 80101a0:	e7e6      	b.n	8010170 <__mdiff+0x28>
 80101a2:	6923      	ldr	r3, [r4, #16]
 80101a4:	3414      	adds	r4, #20
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	18e3      	adds	r3, r4, r3
 80101ac:	0021      	movs	r1, r4
 80101ae:	9401      	str	r4, [sp, #4]
 80101b0:	003c      	movs	r4, r7
 80101b2:	9302      	str	r3, [sp, #8]
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	3414      	adds	r4, #20
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	18e3      	adds	r3, r4, r3
 80101bc:	9303      	str	r3, [sp, #12]
 80101be:	0003      	movs	r3, r0
 80101c0:	60c6      	str	r6, [r0, #12]
 80101c2:	468c      	mov	ip, r1
 80101c4:	2000      	movs	r0, #0
 80101c6:	3314      	adds	r3, #20
 80101c8:	9304      	str	r3, [sp, #16]
 80101ca:	9305      	str	r3, [sp, #20]
 80101cc:	4663      	mov	r3, ip
 80101ce:	cb20      	ldmia	r3!, {r5}
 80101d0:	b2a9      	uxth	r1, r5
 80101d2:	000e      	movs	r6, r1
 80101d4:	469c      	mov	ip, r3
 80101d6:	cc08      	ldmia	r4!, {r3}
 80101d8:	0c2d      	lsrs	r5, r5, #16
 80101da:	b299      	uxth	r1, r3
 80101dc:	1a71      	subs	r1, r6, r1
 80101de:	1809      	adds	r1, r1, r0
 80101e0:	0c1b      	lsrs	r3, r3, #16
 80101e2:	1408      	asrs	r0, r1, #16
 80101e4:	1aeb      	subs	r3, r5, r3
 80101e6:	181b      	adds	r3, r3, r0
 80101e8:	1418      	asrs	r0, r3, #16
 80101ea:	b289      	uxth	r1, r1
 80101ec:	041b      	lsls	r3, r3, #16
 80101ee:	4319      	orrs	r1, r3
 80101f0:	9b05      	ldr	r3, [sp, #20]
 80101f2:	c302      	stmia	r3!, {r1}
 80101f4:	9305      	str	r3, [sp, #20]
 80101f6:	9b03      	ldr	r3, [sp, #12]
 80101f8:	42a3      	cmp	r3, r4
 80101fa:	d8e7      	bhi.n	80101cc <__mdiff+0x84>
 80101fc:	0039      	movs	r1, r7
 80101fe:	9c03      	ldr	r4, [sp, #12]
 8010200:	3115      	adds	r1, #21
 8010202:	2304      	movs	r3, #4
 8010204:	428c      	cmp	r4, r1
 8010206:	d304      	bcc.n	8010212 <__mdiff+0xca>
 8010208:	1be3      	subs	r3, r4, r7
 801020a:	3b15      	subs	r3, #21
 801020c:	089b      	lsrs	r3, r3, #2
 801020e:	3301      	adds	r3, #1
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	9901      	ldr	r1, [sp, #4]
 8010214:	18cd      	adds	r5, r1, r3
 8010216:	9904      	ldr	r1, [sp, #16]
 8010218:	002e      	movs	r6, r5
 801021a:	18cb      	adds	r3, r1, r3
 801021c:	001f      	movs	r7, r3
 801021e:	9902      	ldr	r1, [sp, #8]
 8010220:	428e      	cmp	r6, r1
 8010222:	d311      	bcc.n	8010248 <__mdiff+0x100>
 8010224:	9c02      	ldr	r4, [sp, #8]
 8010226:	1ee9      	subs	r1, r5, #3
 8010228:	2000      	movs	r0, #0
 801022a:	428c      	cmp	r4, r1
 801022c:	d304      	bcc.n	8010238 <__mdiff+0xf0>
 801022e:	0021      	movs	r1, r4
 8010230:	3103      	adds	r1, #3
 8010232:	1b49      	subs	r1, r1, r5
 8010234:	0889      	lsrs	r1, r1, #2
 8010236:	0088      	lsls	r0, r1, #2
 8010238:	181b      	adds	r3, r3, r0
 801023a:	3b04      	subs	r3, #4
 801023c:	6819      	ldr	r1, [r3, #0]
 801023e:	2900      	cmp	r1, #0
 8010240:	d010      	beq.n	8010264 <__mdiff+0x11c>
 8010242:	9b00      	ldr	r3, [sp, #0]
 8010244:	6113      	str	r3, [r2, #16]
 8010246:	e798      	b.n	801017a <__mdiff+0x32>
 8010248:	4684      	mov	ip, r0
 801024a:	ce02      	ldmia	r6!, {r1}
 801024c:	b288      	uxth	r0, r1
 801024e:	4460      	add	r0, ip
 8010250:	1400      	asrs	r0, r0, #16
 8010252:	0c0c      	lsrs	r4, r1, #16
 8010254:	1904      	adds	r4, r0, r4
 8010256:	4461      	add	r1, ip
 8010258:	1420      	asrs	r0, r4, #16
 801025a:	b289      	uxth	r1, r1
 801025c:	0424      	lsls	r4, r4, #16
 801025e:	4321      	orrs	r1, r4
 8010260:	c702      	stmia	r7!, {r1}
 8010262:	e7dc      	b.n	801021e <__mdiff+0xd6>
 8010264:	9900      	ldr	r1, [sp, #0]
 8010266:	3901      	subs	r1, #1
 8010268:	9100      	str	r1, [sp, #0]
 801026a:	e7e6      	b.n	801023a <__mdiff+0xf2>
 801026c:	08011bd4 	.word	0x08011bd4
 8010270:	08011be5 	.word	0x08011be5
 8010274:	00000237 	.word	0x00000237
 8010278:	00000245 	.word	0x00000245

0801027c <__d2b>:
 801027c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801027e:	2101      	movs	r1, #1
 8010280:	0016      	movs	r6, r2
 8010282:	001f      	movs	r7, r3
 8010284:	f7ff fcb6 	bl	800fbf4 <_Balloc>
 8010288:	1e04      	subs	r4, r0, #0
 801028a:	d105      	bne.n	8010298 <__d2b+0x1c>
 801028c:	0022      	movs	r2, r4
 801028e:	4b25      	ldr	r3, [pc, #148]	@ (8010324 <__d2b+0xa8>)
 8010290:	4825      	ldr	r0, [pc, #148]	@ (8010328 <__d2b+0xac>)
 8010292:	4926      	ldr	r1, [pc, #152]	@ (801032c <__d2b+0xb0>)
 8010294:	f000 fc76 	bl	8010b84 <__assert_func>
 8010298:	033b      	lsls	r3, r7, #12
 801029a:	007d      	lsls	r5, r7, #1
 801029c:	0b1b      	lsrs	r3, r3, #12
 801029e:	0d6d      	lsrs	r5, r5, #21
 80102a0:	d002      	beq.n	80102a8 <__d2b+0x2c>
 80102a2:	2280      	movs	r2, #128	@ 0x80
 80102a4:	0352      	lsls	r2, r2, #13
 80102a6:	4313      	orrs	r3, r2
 80102a8:	9301      	str	r3, [sp, #4]
 80102aa:	2e00      	cmp	r6, #0
 80102ac:	d025      	beq.n	80102fa <__d2b+0x7e>
 80102ae:	4668      	mov	r0, sp
 80102b0:	9600      	str	r6, [sp, #0]
 80102b2:	f7ff fd6c 	bl	800fd8e <__lo0bits>
 80102b6:	9b01      	ldr	r3, [sp, #4]
 80102b8:	9900      	ldr	r1, [sp, #0]
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d01b      	beq.n	80102f6 <__d2b+0x7a>
 80102be:	2220      	movs	r2, #32
 80102c0:	001e      	movs	r6, r3
 80102c2:	1a12      	subs	r2, r2, r0
 80102c4:	4096      	lsls	r6, r2
 80102c6:	0032      	movs	r2, r6
 80102c8:	40c3      	lsrs	r3, r0
 80102ca:	430a      	orrs	r2, r1
 80102cc:	6162      	str	r2, [r4, #20]
 80102ce:	9301      	str	r3, [sp, #4]
 80102d0:	9e01      	ldr	r6, [sp, #4]
 80102d2:	61a6      	str	r6, [r4, #24]
 80102d4:	1e73      	subs	r3, r6, #1
 80102d6:	419e      	sbcs	r6, r3
 80102d8:	3601      	adds	r6, #1
 80102da:	6126      	str	r6, [r4, #16]
 80102dc:	2d00      	cmp	r5, #0
 80102de:	d014      	beq.n	801030a <__d2b+0x8e>
 80102e0:	2635      	movs	r6, #53	@ 0x35
 80102e2:	4b13      	ldr	r3, [pc, #76]	@ (8010330 <__d2b+0xb4>)
 80102e4:	18ed      	adds	r5, r5, r3
 80102e6:	9b08      	ldr	r3, [sp, #32]
 80102e8:	182d      	adds	r5, r5, r0
 80102ea:	601d      	str	r5, [r3, #0]
 80102ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ee:	1a36      	subs	r6, r6, r0
 80102f0:	601e      	str	r6, [r3, #0]
 80102f2:	0020      	movs	r0, r4
 80102f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80102f6:	6161      	str	r1, [r4, #20]
 80102f8:	e7ea      	b.n	80102d0 <__d2b+0x54>
 80102fa:	a801      	add	r0, sp, #4
 80102fc:	f7ff fd47 	bl	800fd8e <__lo0bits>
 8010300:	9b01      	ldr	r3, [sp, #4]
 8010302:	2601      	movs	r6, #1
 8010304:	6163      	str	r3, [r4, #20]
 8010306:	3020      	adds	r0, #32
 8010308:	e7e7      	b.n	80102da <__d2b+0x5e>
 801030a:	4b0a      	ldr	r3, [pc, #40]	@ (8010334 <__d2b+0xb8>)
 801030c:	18c0      	adds	r0, r0, r3
 801030e:	9b08      	ldr	r3, [sp, #32]
 8010310:	6018      	str	r0, [r3, #0]
 8010312:	4b09      	ldr	r3, [pc, #36]	@ (8010338 <__d2b+0xbc>)
 8010314:	18f3      	adds	r3, r6, r3
 8010316:	009b      	lsls	r3, r3, #2
 8010318:	18e3      	adds	r3, r4, r3
 801031a:	6958      	ldr	r0, [r3, #20]
 801031c:	f7ff fd16 	bl	800fd4c <__hi0bits>
 8010320:	0176      	lsls	r6, r6, #5
 8010322:	e7e3      	b.n	80102ec <__d2b+0x70>
 8010324:	08011bd4 	.word	0x08011bd4
 8010328:	08011be5 	.word	0x08011be5
 801032c:	0000030f 	.word	0x0000030f
 8010330:	fffffbcd 	.word	0xfffffbcd
 8010334:	fffffbce 	.word	0xfffffbce
 8010338:	3fffffff 	.word	0x3fffffff

0801033c <__ssputs_r>:
 801033c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801033e:	688e      	ldr	r6, [r1, #8]
 8010340:	b085      	sub	sp, #20
 8010342:	001f      	movs	r7, r3
 8010344:	000c      	movs	r4, r1
 8010346:	680b      	ldr	r3, [r1, #0]
 8010348:	9002      	str	r0, [sp, #8]
 801034a:	9203      	str	r2, [sp, #12]
 801034c:	42be      	cmp	r6, r7
 801034e:	d830      	bhi.n	80103b2 <__ssputs_r+0x76>
 8010350:	210c      	movs	r1, #12
 8010352:	5e62      	ldrsh	r2, [r4, r1]
 8010354:	2190      	movs	r1, #144	@ 0x90
 8010356:	00c9      	lsls	r1, r1, #3
 8010358:	420a      	tst	r2, r1
 801035a:	d028      	beq.n	80103ae <__ssputs_r+0x72>
 801035c:	2003      	movs	r0, #3
 801035e:	6921      	ldr	r1, [r4, #16]
 8010360:	1a5b      	subs	r3, r3, r1
 8010362:	9301      	str	r3, [sp, #4]
 8010364:	6963      	ldr	r3, [r4, #20]
 8010366:	4343      	muls	r3, r0
 8010368:	9801      	ldr	r0, [sp, #4]
 801036a:	0fdd      	lsrs	r5, r3, #31
 801036c:	18ed      	adds	r5, r5, r3
 801036e:	1c7b      	adds	r3, r7, #1
 8010370:	181b      	adds	r3, r3, r0
 8010372:	106d      	asrs	r5, r5, #1
 8010374:	42ab      	cmp	r3, r5
 8010376:	d900      	bls.n	801037a <__ssputs_r+0x3e>
 8010378:	001d      	movs	r5, r3
 801037a:	0552      	lsls	r2, r2, #21
 801037c:	d528      	bpl.n	80103d0 <__ssputs_r+0x94>
 801037e:	0029      	movs	r1, r5
 8010380:	9802      	ldr	r0, [sp, #8]
 8010382:	f7ff fba7 	bl	800fad4 <_malloc_r>
 8010386:	1e06      	subs	r6, r0, #0
 8010388:	d02c      	beq.n	80103e4 <__ssputs_r+0xa8>
 801038a:	9a01      	ldr	r2, [sp, #4]
 801038c:	6921      	ldr	r1, [r4, #16]
 801038e:	f000 fbef 	bl	8010b70 <memcpy>
 8010392:	89a2      	ldrh	r2, [r4, #12]
 8010394:	4b18      	ldr	r3, [pc, #96]	@ (80103f8 <__ssputs_r+0xbc>)
 8010396:	401a      	ands	r2, r3
 8010398:	2380      	movs	r3, #128	@ 0x80
 801039a:	4313      	orrs	r3, r2
 801039c:	81a3      	strh	r3, [r4, #12]
 801039e:	9b01      	ldr	r3, [sp, #4]
 80103a0:	6126      	str	r6, [r4, #16]
 80103a2:	18f6      	adds	r6, r6, r3
 80103a4:	6026      	str	r6, [r4, #0]
 80103a6:	003e      	movs	r6, r7
 80103a8:	6165      	str	r5, [r4, #20]
 80103aa:	1aed      	subs	r5, r5, r3
 80103ac:	60a5      	str	r5, [r4, #8]
 80103ae:	42be      	cmp	r6, r7
 80103b0:	d900      	bls.n	80103b4 <__ssputs_r+0x78>
 80103b2:	003e      	movs	r6, r7
 80103b4:	0032      	movs	r2, r6
 80103b6:	9903      	ldr	r1, [sp, #12]
 80103b8:	6820      	ldr	r0, [r4, #0]
 80103ba:	f000 fbb3 	bl	8010b24 <memmove>
 80103be:	2000      	movs	r0, #0
 80103c0:	68a3      	ldr	r3, [r4, #8]
 80103c2:	1b9b      	subs	r3, r3, r6
 80103c4:	60a3      	str	r3, [r4, #8]
 80103c6:	6823      	ldr	r3, [r4, #0]
 80103c8:	199b      	adds	r3, r3, r6
 80103ca:	6023      	str	r3, [r4, #0]
 80103cc:	b005      	add	sp, #20
 80103ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103d0:	002a      	movs	r2, r5
 80103d2:	9802      	ldr	r0, [sp, #8]
 80103d4:	f000 fc33 	bl	8010c3e <_realloc_r>
 80103d8:	1e06      	subs	r6, r0, #0
 80103da:	d1e0      	bne.n	801039e <__ssputs_r+0x62>
 80103dc:	6921      	ldr	r1, [r4, #16]
 80103de:	9802      	ldr	r0, [sp, #8]
 80103e0:	f7ff fb02 	bl	800f9e8 <_free_r>
 80103e4:	230c      	movs	r3, #12
 80103e6:	2001      	movs	r0, #1
 80103e8:	9a02      	ldr	r2, [sp, #8]
 80103ea:	4240      	negs	r0, r0
 80103ec:	6013      	str	r3, [r2, #0]
 80103ee:	89a2      	ldrh	r2, [r4, #12]
 80103f0:	3334      	adds	r3, #52	@ 0x34
 80103f2:	4313      	orrs	r3, r2
 80103f4:	81a3      	strh	r3, [r4, #12]
 80103f6:	e7e9      	b.n	80103cc <__ssputs_r+0x90>
 80103f8:	fffffb7f 	.word	0xfffffb7f

080103fc <_svfiprintf_r>:
 80103fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103fe:	b0a1      	sub	sp, #132	@ 0x84
 8010400:	9003      	str	r0, [sp, #12]
 8010402:	001d      	movs	r5, r3
 8010404:	898b      	ldrh	r3, [r1, #12]
 8010406:	000f      	movs	r7, r1
 8010408:	0016      	movs	r6, r2
 801040a:	061b      	lsls	r3, r3, #24
 801040c:	d511      	bpl.n	8010432 <_svfiprintf_r+0x36>
 801040e:	690b      	ldr	r3, [r1, #16]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d10e      	bne.n	8010432 <_svfiprintf_r+0x36>
 8010414:	2140      	movs	r1, #64	@ 0x40
 8010416:	f7ff fb5d 	bl	800fad4 <_malloc_r>
 801041a:	6038      	str	r0, [r7, #0]
 801041c:	6138      	str	r0, [r7, #16]
 801041e:	2800      	cmp	r0, #0
 8010420:	d105      	bne.n	801042e <_svfiprintf_r+0x32>
 8010422:	230c      	movs	r3, #12
 8010424:	9a03      	ldr	r2, [sp, #12]
 8010426:	6013      	str	r3, [r2, #0]
 8010428:	2001      	movs	r0, #1
 801042a:	4240      	negs	r0, r0
 801042c:	e0cf      	b.n	80105ce <_svfiprintf_r+0x1d2>
 801042e:	2340      	movs	r3, #64	@ 0x40
 8010430:	617b      	str	r3, [r7, #20]
 8010432:	2300      	movs	r3, #0
 8010434:	ac08      	add	r4, sp, #32
 8010436:	6163      	str	r3, [r4, #20]
 8010438:	3320      	adds	r3, #32
 801043a:	7663      	strb	r3, [r4, #25]
 801043c:	3310      	adds	r3, #16
 801043e:	76a3      	strb	r3, [r4, #26]
 8010440:	9507      	str	r5, [sp, #28]
 8010442:	0035      	movs	r5, r6
 8010444:	782b      	ldrb	r3, [r5, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <_svfiprintf_r+0x52>
 801044a:	2b25      	cmp	r3, #37	@ 0x25
 801044c:	d148      	bne.n	80104e0 <_svfiprintf_r+0xe4>
 801044e:	1bab      	subs	r3, r5, r6
 8010450:	9305      	str	r3, [sp, #20]
 8010452:	42b5      	cmp	r5, r6
 8010454:	d00b      	beq.n	801046e <_svfiprintf_r+0x72>
 8010456:	0032      	movs	r2, r6
 8010458:	0039      	movs	r1, r7
 801045a:	9803      	ldr	r0, [sp, #12]
 801045c:	f7ff ff6e 	bl	801033c <__ssputs_r>
 8010460:	3001      	adds	r0, #1
 8010462:	d100      	bne.n	8010466 <_svfiprintf_r+0x6a>
 8010464:	e0ae      	b.n	80105c4 <_svfiprintf_r+0x1c8>
 8010466:	6963      	ldr	r3, [r4, #20]
 8010468:	9a05      	ldr	r2, [sp, #20]
 801046a:	189b      	adds	r3, r3, r2
 801046c:	6163      	str	r3, [r4, #20]
 801046e:	782b      	ldrb	r3, [r5, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d100      	bne.n	8010476 <_svfiprintf_r+0x7a>
 8010474:	e0a6      	b.n	80105c4 <_svfiprintf_r+0x1c8>
 8010476:	2201      	movs	r2, #1
 8010478:	2300      	movs	r3, #0
 801047a:	4252      	negs	r2, r2
 801047c:	6062      	str	r2, [r4, #4]
 801047e:	a904      	add	r1, sp, #16
 8010480:	3254      	adds	r2, #84	@ 0x54
 8010482:	1852      	adds	r2, r2, r1
 8010484:	1c6e      	adds	r6, r5, #1
 8010486:	6023      	str	r3, [r4, #0]
 8010488:	60e3      	str	r3, [r4, #12]
 801048a:	60a3      	str	r3, [r4, #8]
 801048c:	7013      	strb	r3, [r2, #0]
 801048e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010490:	4b54      	ldr	r3, [pc, #336]	@ (80105e4 <_svfiprintf_r+0x1e8>)
 8010492:	2205      	movs	r2, #5
 8010494:	0018      	movs	r0, r3
 8010496:	7831      	ldrb	r1, [r6, #0]
 8010498:	9305      	str	r3, [sp, #20]
 801049a:	f7fe fc18 	bl	800ecce <memchr>
 801049e:	1c75      	adds	r5, r6, #1
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d11f      	bne.n	80104e4 <_svfiprintf_r+0xe8>
 80104a4:	6822      	ldr	r2, [r4, #0]
 80104a6:	06d3      	lsls	r3, r2, #27
 80104a8:	d504      	bpl.n	80104b4 <_svfiprintf_r+0xb8>
 80104aa:	2353      	movs	r3, #83	@ 0x53
 80104ac:	a904      	add	r1, sp, #16
 80104ae:	185b      	adds	r3, r3, r1
 80104b0:	2120      	movs	r1, #32
 80104b2:	7019      	strb	r1, [r3, #0]
 80104b4:	0713      	lsls	r3, r2, #28
 80104b6:	d504      	bpl.n	80104c2 <_svfiprintf_r+0xc6>
 80104b8:	2353      	movs	r3, #83	@ 0x53
 80104ba:	a904      	add	r1, sp, #16
 80104bc:	185b      	adds	r3, r3, r1
 80104be:	212b      	movs	r1, #43	@ 0x2b
 80104c0:	7019      	strb	r1, [r3, #0]
 80104c2:	7833      	ldrb	r3, [r6, #0]
 80104c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80104c6:	d016      	beq.n	80104f6 <_svfiprintf_r+0xfa>
 80104c8:	0035      	movs	r5, r6
 80104ca:	2100      	movs	r1, #0
 80104cc:	200a      	movs	r0, #10
 80104ce:	68e3      	ldr	r3, [r4, #12]
 80104d0:	782a      	ldrb	r2, [r5, #0]
 80104d2:	1c6e      	adds	r6, r5, #1
 80104d4:	3a30      	subs	r2, #48	@ 0x30
 80104d6:	2a09      	cmp	r2, #9
 80104d8:	d950      	bls.n	801057c <_svfiprintf_r+0x180>
 80104da:	2900      	cmp	r1, #0
 80104dc:	d111      	bne.n	8010502 <_svfiprintf_r+0x106>
 80104de:	e017      	b.n	8010510 <_svfiprintf_r+0x114>
 80104e0:	3501      	adds	r5, #1
 80104e2:	e7af      	b.n	8010444 <_svfiprintf_r+0x48>
 80104e4:	9b05      	ldr	r3, [sp, #20]
 80104e6:	6822      	ldr	r2, [r4, #0]
 80104e8:	1ac0      	subs	r0, r0, r3
 80104ea:	2301      	movs	r3, #1
 80104ec:	4083      	lsls	r3, r0
 80104ee:	4313      	orrs	r3, r2
 80104f0:	002e      	movs	r6, r5
 80104f2:	6023      	str	r3, [r4, #0]
 80104f4:	e7cc      	b.n	8010490 <_svfiprintf_r+0x94>
 80104f6:	9b07      	ldr	r3, [sp, #28]
 80104f8:	1d19      	adds	r1, r3, #4
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	9107      	str	r1, [sp, #28]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	db01      	blt.n	8010506 <_svfiprintf_r+0x10a>
 8010502:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010504:	e004      	b.n	8010510 <_svfiprintf_r+0x114>
 8010506:	425b      	negs	r3, r3
 8010508:	60e3      	str	r3, [r4, #12]
 801050a:	2302      	movs	r3, #2
 801050c:	4313      	orrs	r3, r2
 801050e:	6023      	str	r3, [r4, #0]
 8010510:	782b      	ldrb	r3, [r5, #0]
 8010512:	2b2e      	cmp	r3, #46	@ 0x2e
 8010514:	d10c      	bne.n	8010530 <_svfiprintf_r+0x134>
 8010516:	786b      	ldrb	r3, [r5, #1]
 8010518:	2b2a      	cmp	r3, #42	@ 0x2a
 801051a:	d134      	bne.n	8010586 <_svfiprintf_r+0x18a>
 801051c:	9b07      	ldr	r3, [sp, #28]
 801051e:	3502      	adds	r5, #2
 8010520:	1d1a      	adds	r2, r3, #4
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	9207      	str	r2, [sp, #28]
 8010526:	2b00      	cmp	r3, #0
 8010528:	da01      	bge.n	801052e <_svfiprintf_r+0x132>
 801052a:	2301      	movs	r3, #1
 801052c:	425b      	negs	r3, r3
 801052e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010530:	4e2d      	ldr	r6, [pc, #180]	@ (80105e8 <_svfiprintf_r+0x1ec>)
 8010532:	2203      	movs	r2, #3
 8010534:	0030      	movs	r0, r6
 8010536:	7829      	ldrb	r1, [r5, #0]
 8010538:	f7fe fbc9 	bl	800ecce <memchr>
 801053c:	2800      	cmp	r0, #0
 801053e:	d006      	beq.n	801054e <_svfiprintf_r+0x152>
 8010540:	2340      	movs	r3, #64	@ 0x40
 8010542:	1b80      	subs	r0, r0, r6
 8010544:	4083      	lsls	r3, r0
 8010546:	6822      	ldr	r2, [r4, #0]
 8010548:	3501      	adds	r5, #1
 801054a:	4313      	orrs	r3, r2
 801054c:	6023      	str	r3, [r4, #0]
 801054e:	7829      	ldrb	r1, [r5, #0]
 8010550:	2206      	movs	r2, #6
 8010552:	4826      	ldr	r0, [pc, #152]	@ (80105ec <_svfiprintf_r+0x1f0>)
 8010554:	1c6e      	adds	r6, r5, #1
 8010556:	7621      	strb	r1, [r4, #24]
 8010558:	f7fe fbb9 	bl	800ecce <memchr>
 801055c:	2800      	cmp	r0, #0
 801055e:	d038      	beq.n	80105d2 <_svfiprintf_r+0x1d6>
 8010560:	4b23      	ldr	r3, [pc, #140]	@ (80105f0 <_svfiprintf_r+0x1f4>)
 8010562:	2b00      	cmp	r3, #0
 8010564:	d122      	bne.n	80105ac <_svfiprintf_r+0x1b0>
 8010566:	2207      	movs	r2, #7
 8010568:	9b07      	ldr	r3, [sp, #28]
 801056a:	3307      	adds	r3, #7
 801056c:	4393      	bics	r3, r2
 801056e:	3308      	adds	r3, #8
 8010570:	9307      	str	r3, [sp, #28]
 8010572:	6963      	ldr	r3, [r4, #20]
 8010574:	9a04      	ldr	r2, [sp, #16]
 8010576:	189b      	adds	r3, r3, r2
 8010578:	6163      	str	r3, [r4, #20]
 801057a:	e762      	b.n	8010442 <_svfiprintf_r+0x46>
 801057c:	4343      	muls	r3, r0
 801057e:	0035      	movs	r5, r6
 8010580:	2101      	movs	r1, #1
 8010582:	189b      	adds	r3, r3, r2
 8010584:	e7a4      	b.n	80104d0 <_svfiprintf_r+0xd4>
 8010586:	2300      	movs	r3, #0
 8010588:	200a      	movs	r0, #10
 801058a:	0019      	movs	r1, r3
 801058c:	3501      	adds	r5, #1
 801058e:	6063      	str	r3, [r4, #4]
 8010590:	782a      	ldrb	r2, [r5, #0]
 8010592:	1c6e      	adds	r6, r5, #1
 8010594:	3a30      	subs	r2, #48	@ 0x30
 8010596:	2a09      	cmp	r2, #9
 8010598:	d903      	bls.n	80105a2 <_svfiprintf_r+0x1a6>
 801059a:	2b00      	cmp	r3, #0
 801059c:	d0c8      	beq.n	8010530 <_svfiprintf_r+0x134>
 801059e:	9109      	str	r1, [sp, #36]	@ 0x24
 80105a0:	e7c6      	b.n	8010530 <_svfiprintf_r+0x134>
 80105a2:	4341      	muls	r1, r0
 80105a4:	0035      	movs	r5, r6
 80105a6:	2301      	movs	r3, #1
 80105a8:	1889      	adds	r1, r1, r2
 80105aa:	e7f1      	b.n	8010590 <_svfiprintf_r+0x194>
 80105ac:	aa07      	add	r2, sp, #28
 80105ae:	9200      	str	r2, [sp, #0]
 80105b0:	0021      	movs	r1, r4
 80105b2:	003a      	movs	r2, r7
 80105b4:	4b0f      	ldr	r3, [pc, #60]	@ (80105f4 <_svfiprintf_r+0x1f8>)
 80105b6:	9803      	ldr	r0, [sp, #12]
 80105b8:	f7fd fda4 	bl	800e104 <_printf_float>
 80105bc:	9004      	str	r0, [sp, #16]
 80105be:	9b04      	ldr	r3, [sp, #16]
 80105c0:	3301      	adds	r3, #1
 80105c2:	d1d6      	bne.n	8010572 <_svfiprintf_r+0x176>
 80105c4:	89bb      	ldrh	r3, [r7, #12]
 80105c6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80105c8:	065b      	lsls	r3, r3, #25
 80105ca:	d500      	bpl.n	80105ce <_svfiprintf_r+0x1d2>
 80105cc:	e72c      	b.n	8010428 <_svfiprintf_r+0x2c>
 80105ce:	b021      	add	sp, #132	@ 0x84
 80105d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105d2:	aa07      	add	r2, sp, #28
 80105d4:	9200      	str	r2, [sp, #0]
 80105d6:	0021      	movs	r1, r4
 80105d8:	003a      	movs	r2, r7
 80105da:	4b06      	ldr	r3, [pc, #24]	@ (80105f4 <_svfiprintf_r+0x1f8>)
 80105dc:	9803      	ldr	r0, [sp, #12]
 80105de:	f7fe f83f 	bl	800e660 <_printf_i>
 80105e2:	e7eb      	b.n	80105bc <_svfiprintf_r+0x1c0>
 80105e4:	08011d40 	.word	0x08011d40
 80105e8:	08011d46 	.word	0x08011d46
 80105ec:	08011d4a 	.word	0x08011d4a
 80105f0:	0800e105 	.word	0x0800e105
 80105f4:	0801033d 	.word	0x0801033d

080105f8 <__sfputc_r>:
 80105f8:	6893      	ldr	r3, [r2, #8]
 80105fa:	b510      	push	{r4, lr}
 80105fc:	3b01      	subs	r3, #1
 80105fe:	6093      	str	r3, [r2, #8]
 8010600:	2b00      	cmp	r3, #0
 8010602:	da04      	bge.n	801060e <__sfputc_r+0x16>
 8010604:	6994      	ldr	r4, [r2, #24]
 8010606:	42a3      	cmp	r3, r4
 8010608:	db07      	blt.n	801061a <__sfputc_r+0x22>
 801060a:	290a      	cmp	r1, #10
 801060c:	d005      	beq.n	801061a <__sfputc_r+0x22>
 801060e:	6813      	ldr	r3, [r2, #0]
 8010610:	1c58      	adds	r0, r3, #1
 8010612:	6010      	str	r0, [r2, #0]
 8010614:	7019      	strb	r1, [r3, #0]
 8010616:	0008      	movs	r0, r1
 8010618:	bd10      	pop	{r4, pc}
 801061a:	f000 f9e2 	bl	80109e2 <__swbuf_r>
 801061e:	0001      	movs	r1, r0
 8010620:	e7f9      	b.n	8010616 <__sfputc_r+0x1e>

08010622 <__sfputs_r>:
 8010622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010624:	0006      	movs	r6, r0
 8010626:	000f      	movs	r7, r1
 8010628:	0014      	movs	r4, r2
 801062a:	18d5      	adds	r5, r2, r3
 801062c:	42ac      	cmp	r4, r5
 801062e:	d101      	bne.n	8010634 <__sfputs_r+0x12>
 8010630:	2000      	movs	r0, #0
 8010632:	e007      	b.n	8010644 <__sfputs_r+0x22>
 8010634:	7821      	ldrb	r1, [r4, #0]
 8010636:	003a      	movs	r2, r7
 8010638:	0030      	movs	r0, r6
 801063a:	f7ff ffdd 	bl	80105f8 <__sfputc_r>
 801063e:	3401      	adds	r4, #1
 8010640:	1c43      	adds	r3, r0, #1
 8010642:	d1f3      	bne.n	801062c <__sfputs_r+0xa>
 8010644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010648 <_vfiprintf_r>:
 8010648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801064a:	b0a1      	sub	sp, #132	@ 0x84
 801064c:	000f      	movs	r7, r1
 801064e:	0015      	movs	r5, r2
 8010650:	001e      	movs	r6, r3
 8010652:	9003      	str	r0, [sp, #12]
 8010654:	2800      	cmp	r0, #0
 8010656:	d004      	beq.n	8010662 <_vfiprintf_r+0x1a>
 8010658:	6a03      	ldr	r3, [r0, #32]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d101      	bne.n	8010662 <_vfiprintf_r+0x1a>
 801065e:	f7fe f99d 	bl	800e99c <__sinit>
 8010662:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010664:	07db      	lsls	r3, r3, #31
 8010666:	d405      	bmi.n	8010674 <_vfiprintf_r+0x2c>
 8010668:	89bb      	ldrh	r3, [r7, #12]
 801066a:	059b      	lsls	r3, r3, #22
 801066c:	d402      	bmi.n	8010674 <_vfiprintf_r+0x2c>
 801066e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010670:	f7fe fb2b 	bl	800ecca <__retarget_lock_acquire_recursive>
 8010674:	89bb      	ldrh	r3, [r7, #12]
 8010676:	071b      	lsls	r3, r3, #28
 8010678:	d502      	bpl.n	8010680 <_vfiprintf_r+0x38>
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d113      	bne.n	80106a8 <_vfiprintf_r+0x60>
 8010680:	0039      	movs	r1, r7
 8010682:	9803      	ldr	r0, [sp, #12]
 8010684:	f000 f9f0 	bl	8010a68 <__swsetup_r>
 8010688:	2800      	cmp	r0, #0
 801068a:	d00d      	beq.n	80106a8 <_vfiprintf_r+0x60>
 801068c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801068e:	07db      	lsls	r3, r3, #31
 8010690:	d503      	bpl.n	801069a <_vfiprintf_r+0x52>
 8010692:	2001      	movs	r0, #1
 8010694:	4240      	negs	r0, r0
 8010696:	b021      	add	sp, #132	@ 0x84
 8010698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801069a:	89bb      	ldrh	r3, [r7, #12]
 801069c:	059b      	lsls	r3, r3, #22
 801069e:	d4f8      	bmi.n	8010692 <_vfiprintf_r+0x4a>
 80106a0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80106a2:	f7fe fb13 	bl	800eccc <__retarget_lock_release_recursive>
 80106a6:	e7f4      	b.n	8010692 <_vfiprintf_r+0x4a>
 80106a8:	2300      	movs	r3, #0
 80106aa:	ac08      	add	r4, sp, #32
 80106ac:	6163      	str	r3, [r4, #20]
 80106ae:	3320      	adds	r3, #32
 80106b0:	7663      	strb	r3, [r4, #25]
 80106b2:	3310      	adds	r3, #16
 80106b4:	76a3      	strb	r3, [r4, #26]
 80106b6:	9607      	str	r6, [sp, #28]
 80106b8:	002e      	movs	r6, r5
 80106ba:	7833      	ldrb	r3, [r6, #0]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d001      	beq.n	80106c4 <_vfiprintf_r+0x7c>
 80106c0:	2b25      	cmp	r3, #37	@ 0x25
 80106c2:	d148      	bne.n	8010756 <_vfiprintf_r+0x10e>
 80106c4:	1b73      	subs	r3, r6, r5
 80106c6:	9305      	str	r3, [sp, #20]
 80106c8:	42ae      	cmp	r6, r5
 80106ca:	d00b      	beq.n	80106e4 <_vfiprintf_r+0x9c>
 80106cc:	002a      	movs	r2, r5
 80106ce:	0039      	movs	r1, r7
 80106d0:	9803      	ldr	r0, [sp, #12]
 80106d2:	f7ff ffa6 	bl	8010622 <__sfputs_r>
 80106d6:	3001      	adds	r0, #1
 80106d8:	d100      	bne.n	80106dc <_vfiprintf_r+0x94>
 80106da:	e0ae      	b.n	801083a <_vfiprintf_r+0x1f2>
 80106dc:	6963      	ldr	r3, [r4, #20]
 80106de:	9a05      	ldr	r2, [sp, #20]
 80106e0:	189b      	adds	r3, r3, r2
 80106e2:	6163      	str	r3, [r4, #20]
 80106e4:	7833      	ldrb	r3, [r6, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d100      	bne.n	80106ec <_vfiprintf_r+0xa4>
 80106ea:	e0a6      	b.n	801083a <_vfiprintf_r+0x1f2>
 80106ec:	2201      	movs	r2, #1
 80106ee:	2300      	movs	r3, #0
 80106f0:	4252      	negs	r2, r2
 80106f2:	6062      	str	r2, [r4, #4]
 80106f4:	a904      	add	r1, sp, #16
 80106f6:	3254      	adds	r2, #84	@ 0x54
 80106f8:	1852      	adds	r2, r2, r1
 80106fa:	1c75      	adds	r5, r6, #1
 80106fc:	6023      	str	r3, [r4, #0]
 80106fe:	60e3      	str	r3, [r4, #12]
 8010700:	60a3      	str	r3, [r4, #8]
 8010702:	7013      	strb	r3, [r2, #0]
 8010704:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010706:	4b59      	ldr	r3, [pc, #356]	@ (801086c <_vfiprintf_r+0x224>)
 8010708:	2205      	movs	r2, #5
 801070a:	0018      	movs	r0, r3
 801070c:	7829      	ldrb	r1, [r5, #0]
 801070e:	9305      	str	r3, [sp, #20]
 8010710:	f7fe fadd 	bl	800ecce <memchr>
 8010714:	1c6e      	adds	r6, r5, #1
 8010716:	2800      	cmp	r0, #0
 8010718:	d11f      	bne.n	801075a <_vfiprintf_r+0x112>
 801071a:	6822      	ldr	r2, [r4, #0]
 801071c:	06d3      	lsls	r3, r2, #27
 801071e:	d504      	bpl.n	801072a <_vfiprintf_r+0xe2>
 8010720:	2353      	movs	r3, #83	@ 0x53
 8010722:	a904      	add	r1, sp, #16
 8010724:	185b      	adds	r3, r3, r1
 8010726:	2120      	movs	r1, #32
 8010728:	7019      	strb	r1, [r3, #0]
 801072a:	0713      	lsls	r3, r2, #28
 801072c:	d504      	bpl.n	8010738 <_vfiprintf_r+0xf0>
 801072e:	2353      	movs	r3, #83	@ 0x53
 8010730:	a904      	add	r1, sp, #16
 8010732:	185b      	adds	r3, r3, r1
 8010734:	212b      	movs	r1, #43	@ 0x2b
 8010736:	7019      	strb	r1, [r3, #0]
 8010738:	782b      	ldrb	r3, [r5, #0]
 801073a:	2b2a      	cmp	r3, #42	@ 0x2a
 801073c:	d016      	beq.n	801076c <_vfiprintf_r+0x124>
 801073e:	002e      	movs	r6, r5
 8010740:	2100      	movs	r1, #0
 8010742:	200a      	movs	r0, #10
 8010744:	68e3      	ldr	r3, [r4, #12]
 8010746:	7832      	ldrb	r2, [r6, #0]
 8010748:	1c75      	adds	r5, r6, #1
 801074a:	3a30      	subs	r2, #48	@ 0x30
 801074c:	2a09      	cmp	r2, #9
 801074e:	d950      	bls.n	80107f2 <_vfiprintf_r+0x1aa>
 8010750:	2900      	cmp	r1, #0
 8010752:	d111      	bne.n	8010778 <_vfiprintf_r+0x130>
 8010754:	e017      	b.n	8010786 <_vfiprintf_r+0x13e>
 8010756:	3601      	adds	r6, #1
 8010758:	e7af      	b.n	80106ba <_vfiprintf_r+0x72>
 801075a:	9b05      	ldr	r3, [sp, #20]
 801075c:	6822      	ldr	r2, [r4, #0]
 801075e:	1ac0      	subs	r0, r0, r3
 8010760:	2301      	movs	r3, #1
 8010762:	4083      	lsls	r3, r0
 8010764:	4313      	orrs	r3, r2
 8010766:	0035      	movs	r5, r6
 8010768:	6023      	str	r3, [r4, #0]
 801076a:	e7cc      	b.n	8010706 <_vfiprintf_r+0xbe>
 801076c:	9b07      	ldr	r3, [sp, #28]
 801076e:	1d19      	adds	r1, r3, #4
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	9107      	str	r1, [sp, #28]
 8010774:	2b00      	cmp	r3, #0
 8010776:	db01      	blt.n	801077c <_vfiprintf_r+0x134>
 8010778:	930b      	str	r3, [sp, #44]	@ 0x2c
 801077a:	e004      	b.n	8010786 <_vfiprintf_r+0x13e>
 801077c:	425b      	negs	r3, r3
 801077e:	60e3      	str	r3, [r4, #12]
 8010780:	2302      	movs	r3, #2
 8010782:	4313      	orrs	r3, r2
 8010784:	6023      	str	r3, [r4, #0]
 8010786:	7833      	ldrb	r3, [r6, #0]
 8010788:	2b2e      	cmp	r3, #46	@ 0x2e
 801078a:	d10c      	bne.n	80107a6 <_vfiprintf_r+0x15e>
 801078c:	7873      	ldrb	r3, [r6, #1]
 801078e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010790:	d134      	bne.n	80107fc <_vfiprintf_r+0x1b4>
 8010792:	9b07      	ldr	r3, [sp, #28]
 8010794:	3602      	adds	r6, #2
 8010796:	1d1a      	adds	r2, r3, #4
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	9207      	str	r2, [sp, #28]
 801079c:	2b00      	cmp	r3, #0
 801079e:	da01      	bge.n	80107a4 <_vfiprintf_r+0x15c>
 80107a0:	2301      	movs	r3, #1
 80107a2:	425b      	negs	r3, r3
 80107a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80107a6:	4d32      	ldr	r5, [pc, #200]	@ (8010870 <_vfiprintf_r+0x228>)
 80107a8:	2203      	movs	r2, #3
 80107aa:	0028      	movs	r0, r5
 80107ac:	7831      	ldrb	r1, [r6, #0]
 80107ae:	f7fe fa8e 	bl	800ecce <memchr>
 80107b2:	2800      	cmp	r0, #0
 80107b4:	d006      	beq.n	80107c4 <_vfiprintf_r+0x17c>
 80107b6:	2340      	movs	r3, #64	@ 0x40
 80107b8:	1b40      	subs	r0, r0, r5
 80107ba:	4083      	lsls	r3, r0
 80107bc:	6822      	ldr	r2, [r4, #0]
 80107be:	3601      	adds	r6, #1
 80107c0:	4313      	orrs	r3, r2
 80107c2:	6023      	str	r3, [r4, #0]
 80107c4:	7831      	ldrb	r1, [r6, #0]
 80107c6:	2206      	movs	r2, #6
 80107c8:	482a      	ldr	r0, [pc, #168]	@ (8010874 <_vfiprintf_r+0x22c>)
 80107ca:	1c75      	adds	r5, r6, #1
 80107cc:	7621      	strb	r1, [r4, #24]
 80107ce:	f7fe fa7e 	bl	800ecce <memchr>
 80107d2:	2800      	cmp	r0, #0
 80107d4:	d040      	beq.n	8010858 <_vfiprintf_r+0x210>
 80107d6:	4b28      	ldr	r3, [pc, #160]	@ (8010878 <_vfiprintf_r+0x230>)
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d122      	bne.n	8010822 <_vfiprintf_r+0x1da>
 80107dc:	2207      	movs	r2, #7
 80107de:	9b07      	ldr	r3, [sp, #28]
 80107e0:	3307      	adds	r3, #7
 80107e2:	4393      	bics	r3, r2
 80107e4:	3308      	adds	r3, #8
 80107e6:	9307      	str	r3, [sp, #28]
 80107e8:	6963      	ldr	r3, [r4, #20]
 80107ea:	9a04      	ldr	r2, [sp, #16]
 80107ec:	189b      	adds	r3, r3, r2
 80107ee:	6163      	str	r3, [r4, #20]
 80107f0:	e762      	b.n	80106b8 <_vfiprintf_r+0x70>
 80107f2:	4343      	muls	r3, r0
 80107f4:	002e      	movs	r6, r5
 80107f6:	2101      	movs	r1, #1
 80107f8:	189b      	adds	r3, r3, r2
 80107fa:	e7a4      	b.n	8010746 <_vfiprintf_r+0xfe>
 80107fc:	2300      	movs	r3, #0
 80107fe:	200a      	movs	r0, #10
 8010800:	0019      	movs	r1, r3
 8010802:	3601      	adds	r6, #1
 8010804:	6063      	str	r3, [r4, #4]
 8010806:	7832      	ldrb	r2, [r6, #0]
 8010808:	1c75      	adds	r5, r6, #1
 801080a:	3a30      	subs	r2, #48	@ 0x30
 801080c:	2a09      	cmp	r2, #9
 801080e:	d903      	bls.n	8010818 <_vfiprintf_r+0x1d0>
 8010810:	2b00      	cmp	r3, #0
 8010812:	d0c8      	beq.n	80107a6 <_vfiprintf_r+0x15e>
 8010814:	9109      	str	r1, [sp, #36]	@ 0x24
 8010816:	e7c6      	b.n	80107a6 <_vfiprintf_r+0x15e>
 8010818:	4341      	muls	r1, r0
 801081a:	002e      	movs	r6, r5
 801081c:	2301      	movs	r3, #1
 801081e:	1889      	adds	r1, r1, r2
 8010820:	e7f1      	b.n	8010806 <_vfiprintf_r+0x1be>
 8010822:	aa07      	add	r2, sp, #28
 8010824:	9200      	str	r2, [sp, #0]
 8010826:	0021      	movs	r1, r4
 8010828:	003a      	movs	r2, r7
 801082a:	4b14      	ldr	r3, [pc, #80]	@ (801087c <_vfiprintf_r+0x234>)
 801082c:	9803      	ldr	r0, [sp, #12]
 801082e:	f7fd fc69 	bl	800e104 <_printf_float>
 8010832:	9004      	str	r0, [sp, #16]
 8010834:	9b04      	ldr	r3, [sp, #16]
 8010836:	3301      	adds	r3, #1
 8010838:	d1d6      	bne.n	80107e8 <_vfiprintf_r+0x1a0>
 801083a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801083c:	07db      	lsls	r3, r3, #31
 801083e:	d405      	bmi.n	801084c <_vfiprintf_r+0x204>
 8010840:	89bb      	ldrh	r3, [r7, #12]
 8010842:	059b      	lsls	r3, r3, #22
 8010844:	d402      	bmi.n	801084c <_vfiprintf_r+0x204>
 8010846:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010848:	f7fe fa40 	bl	800eccc <__retarget_lock_release_recursive>
 801084c:	89bb      	ldrh	r3, [r7, #12]
 801084e:	065b      	lsls	r3, r3, #25
 8010850:	d500      	bpl.n	8010854 <_vfiprintf_r+0x20c>
 8010852:	e71e      	b.n	8010692 <_vfiprintf_r+0x4a>
 8010854:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010856:	e71e      	b.n	8010696 <_vfiprintf_r+0x4e>
 8010858:	aa07      	add	r2, sp, #28
 801085a:	9200      	str	r2, [sp, #0]
 801085c:	0021      	movs	r1, r4
 801085e:	003a      	movs	r2, r7
 8010860:	4b06      	ldr	r3, [pc, #24]	@ (801087c <_vfiprintf_r+0x234>)
 8010862:	9803      	ldr	r0, [sp, #12]
 8010864:	f7fd fefc 	bl	800e660 <_printf_i>
 8010868:	e7e3      	b.n	8010832 <_vfiprintf_r+0x1ea>
 801086a:	46c0      	nop			@ (mov r8, r8)
 801086c:	08011d40 	.word	0x08011d40
 8010870:	08011d46 	.word	0x08011d46
 8010874:	08011d4a 	.word	0x08011d4a
 8010878:	0800e105 	.word	0x0800e105
 801087c:	08010623 	.word	0x08010623

08010880 <__sflush_r>:
 8010880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010882:	220c      	movs	r2, #12
 8010884:	5e8b      	ldrsh	r3, [r1, r2]
 8010886:	0005      	movs	r5, r0
 8010888:	000c      	movs	r4, r1
 801088a:	071a      	lsls	r2, r3, #28
 801088c:	d456      	bmi.n	801093c <__sflush_r+0xbc>
 801088e:	684a      	ldr	r2, [r1, #4]
 8010890:	2a00      	cmp	r2, #0
 8010892:	dc02      	bgt.n	801089a <__sflush_r+0x1a>
 8010894:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8010896:	2a00      	cmp	r2, #0
 8010898:	dd4e      	ble.n	8010938 <__sflush_r+0xb8>
 801089a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801089c:	2f00      	cmp	r7, #0
 801089e:	d04b      	beq.n	8010938 <__sflush_r+0xb8>
 80108a0:	2200      	movs	r2, #0
 80108a2:	2080      	movs	r0, #128	@ 0x80
 80108a4:	682e      	ldr	r6, [r5, #0]
 80108a6:	602a      	str	r2, [r5, #0]
 80108a8:	001a      	movs	r2, r3
 80108aa:	0140      	lsls	r0, r0, #5
 80108ac:	6a21      	ldr	r1, [r4, #32]
 80108ae:	4002      	ands	r2, r0
 80108b0:	4203      	tst	r3, r0
 80108b2:	d033      	beq.n	801091c <__sflush_r+0x9c>
 80108b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80108b6:	89a3      	ldrh	r3, [r4, #12]
 80108b8:	075b      	lsls	r3, r3, #29
 80108ba:	d506      	bpl.n	80108ca <__sflush_r+0x4a>
 80108bc:	6863      	ldr	r3, [r4, #4]
 80108be:	1ad2      	subs	r2, r2, r3
 80108c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d001      	beq.n	80108ca <__sflush_r+0x4a>
 80108c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80108c8:	1ad2      	subs	r2, r2, r3
 80108ca:	2300      	movs	r3, #0
 80108cc:	0028      	movs	r0, r5
 80108ce:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80108d0:	6a21      	ldr	r1, [r4, #32]
 80108d2:	47b8      	blx	r7
 80108d4:	89a2      	ldrh	r2, [r4, #12]
 80108d6:	1c43      	adds	r3, r0, #1
 80108d8:	d106      	bne.n	80108e8 <__sflush_r+0x68>
 80108da:	6829      	ldr	r1, [r5, #0]
 80108dc:	291d      	cmp	r1, #29
 80108de:	d846      	bhi.n	801096e <__sflush_r+0xee>
 80108e0:	4b29      	ldr	r3, [pc, #164]	@ (8010988 <__sflush_r+0x108>)
 80108e2:	410b      	asrs	r3, r1
 80108e4:	07db      	lsls	r3, r3, #31
 80108e6:	d442      	bmi.n	801096e <__sflush_r+0xee>
 80108e8:	2300      	movs	r3, #0
 80108ea:	6063      	str	r3, [r4, #4]
 80108ec:	6923      	ldr	r3, [r4, #16]
 80108ee:	6023      	str	r3, [r4, #0]
 80108f0:	04d2      	lsls	r2, r2, #19
 80108f2:	d505      	bpl.n	8010900 <__sflush_r+0x80>
 80108f4:	1c43      	adds	r3, r0, #1
 80108f6:	d102      	bne.n	80108fe <__sflush_r+0x7e>
 80108f8:	682b      	ldr	r3, [r5, #0]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d100      	bne.n	8010900 <__sflush_r+0x80>
 80108fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8010900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010902:	602e      	str	r6, [r5, #0]
 8010904:	2900      	cmp	r1, #0
 8010906:	d017      	beq.n	8010938 <__sflush_r+0xb8>
 8010908:	0023      	movs	r3, r4
 801090a:	3344      	adds	r3, #68	@ 0x44
 801090c:	4299      	cmp	r1, r3
 801090e:	d002      	beq.n	8010916 <__sflush_r+0x96>
 8010910:	0028      	movs	r0, r5
 8010912:	f7ff f869 	bl	800f9e8 <_free_r>
 8010916:	2300      	movs	r3, #0
 8010918:	6363      	str	r3, [r4, #52]	@ 0x34
 801091a:	e00d      	b.n	8010938 <__sflush_r+0xb8>
 801091c:	2301      	movs	r3, #1
 801091e:	0028      	movs	r0, r5
 8010920:	47b8      	blx	r7
 8010922:	0002      	movs	r2, r0
 8010924:	1c43      	adds	r3, r0, #1
 8010926:	d1c6      	bne.n	80108b6 <__sflush_r+0x36>
 8010928:	682b      	ldr	r3, [r5, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d0c3      	beq.n	80108b6 <__sflush_r+0x36>
 801092e:	2b1d      	cmp	r3, #29
 8010930:	d001      	beq.n	8010936 <__sflush_r+0xb6>
 8010932:	2b16      	cmp	r3, #22
 8010934:	d11a      	bne.n	801096c <__sflush_r+0xec>
 8010936:	602e      	str	r6, [r5, #0]
 8010938:	2000      	movs	r0, #0
 801093a:	e01e      	b.n	801097a <__sflush_r+0xfa>
 801093c:	690e      	ldr	r6, [r1, #16]
 801093e:	2e00      	cmp	r6, #0
 8010940:	d0fa      	beq.n	8010938 <__sflush_r+0xb8>
 8010942:	680f      	ldr	r7, [r1, #0]
 8010944:	600e      	str	r6, [r1, #0]
 8010946:	1bba      	subs	r2, r7, r6
 8010948:	9201      	str	r2, [sp, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	079b      	lsls	r3, r3, #30
 801094e:	d100      	bne.n	8010952 <__sflush_r+0xd2>
 8010950:	694a      	ldr	r2, [r1, #20]
 8010952:	60a2      	str	r2, [r4, #8]
 8010954:	9b01      	ldr	r3, [sp, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	ddee      	ble.n	8010938 <__sflush_r+0xb8>
 801095a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801095c:	0032      	movs	r2, r6
 801095e:	001f      	movs	r7, r3
 8010960:	0028      	movs	r0, r5
 8010962:	9b01      	ldr	r3, [sp, #4]
 8010964:	6a21      	ldr	r1, [r4, #32]
 8010966:	47b8      	blx	r7
 8010968:	2800      	cmp	r0, #0
 801096a:	dc07      	bgt.n	801097c <__sflush_r+0xfc>
 801096c:	89a2      	ldrh	r2, [r4, #12]
 801096e:	2340      	movs	r3, #64	@ 0x40
 8010970:	2001      	movs	r0, #1
 8010972:	4313      	orrs	r3, r2
 8010974:	b21b      	sxth	r3, r3
 8010976:	81a3      	strh	r3, [r4, #12]
 8010978:	4240      	negs	r0, r0
 801097a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801097c:	9b01      	ldr	r3, [sp, #4]
 801097e:	1836      	adds	r6, r6, r0
 8010980:	1a1b      	subs	r3, r3, r0
 8010982:	9301      	str	r3, [sp, #4]
 8010984:	e7e6      	b.n	8010954 <__sflush_r+0xd4>
 8010986:	46c0      	nop			@ (mov r8, r8)
 8010988:	dfbffffe 	.word	0xdfbffffe

0801098c <_fflush_r>:
 801098c:	690b      	ldr	r3, [r1, #16]
 801098e:	b570      	push	{r4, r5, r6, lr}
 8010990:	0005      	movs	r5, r0
 8010992:	000c      	movs	r4, r1
 8010994:	2b00      	cmp	r3, #0
 8010996:	d102      	bne.n	801099e <_fflush_r+0x12>
 8010998:	2500      	movs	r5, #0
 801099a:	0028      	movs	r0, r5
 801099c:	bd70      	pop	{r4, r5, r6, pc}
 801099e:	2800      	cmp	r0, #0
 80109a0:	d004      	beq.n	80109ac <_fflush_r+0x20>
 80109a2:	6a03      	ldr	r3, [r0, #32]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d101      	bne.n	80109ac <_fflush_r+0x20>
 80109a8:	f7fd fff8 	bl	800e99c <__sinit>
 80109ac:	220c      	movs	r2, #12
 80109ae:	5ea3      	ldrsh	r3, [r4, r2]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d0f1      	beq.n	8010998 <_fflush_r+0xc>
 80109b4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80109b6:	07d2      	lsls	r2, r2, #31
 80109b8:	d404      	bmi.n	80109c4 <_fflush_r+0x38>
 80109ba:	059b      	lsls	r3, r3, #22
 80109bc:	d402      	bmi.n	80109c4 <_fflush_r+0x38>
 80109be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80109c0:	f7fe f983 	bl	800ecca <__retarget_lock_acquire_recursive>
 80109c4:	0028      	movs	r0, r5
 80109c6:	0021      	movs	r1, r4
 80109c8:	f7ff ff5a 	bl	8010880 <__sflush_r>
 80109cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80109ce:	0005      	movs	r5, r0
 80109d0:	07db      	lsls	r3, r3, #31
 80109d2:	d4e2      	bmi.n	801099a <_fflush_r+0xe>
 80109d4:	89a3      	ldrh	r3, [r4, #12]
 80109d6:	059b      	lsls	r3, r3, #22
 80109d8:	d4df      	bmi.n	801099a <_fflush_r+0xe>
 80109da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80109dc:	f7fe f976 	bl	800eccc <__retarget_lock_release_recursive>
 80109e0:	e7db      	b.n	801099a <_fflush_r+0xe>

080109e2 <__swbuf_r>:
 80109e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e4:	0006      	movs	r6, r0
 80109e6:	000d      	movs	r5, r1
 80109e8:	0014      	movs	r4, r2
 80109ea:	2800      	cmp	r0, #0
 80109ec:	d004      	beq.n	80109f8 <__swbuf_r+0x16>
 80109ee:	6a03      	ldr	r3, [r0, #32]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <__swbuf_r+0x16>
 80109f4:	f7fd ffd2 	bl	800e99c <__sinit>
 80109f8:	69a3      	ldr	r3, [r4, #24]
 80109fa:	60a3      	str	r3, [r4, #8]
 80109fc:	89a3      	ldrh	r3, [r4, #12]
 80109fe:	071b      	lsls	r3, r3, #28
 8010a00:	d502      	bpl.n	8010a08 <__swbuf_r+0x26>
 8010a02:	6923      	ldr	r3, [r4, #16]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d109      	bne.n	8010a1c <__swbuf_r+0x3a>
 8010a08:	0021      	movs	r1, r4
 8010a0a:	0030      	movs	r0, r6
 8010a0c:	f000 f82c 	bl	8010a68 <__swsetup_r>
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d003      	beq.n	8010a1c <__swbuf_r+0x3a>
 8010a14:	2501      	movs	r5, #1
 8010a16:	426d      	negs	r5, r5
 8010a18:	0028      	movs	r0, r5
 8010a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a1c:	6923      	ldr	r3, [r4, #16]
 8010a1e:	6820      	ldr	r0, [r4, #0]
 8010a20:	b2ef      	uxtb	r7, r5
 8010a22:	1ac0      	subs	r0, r0, r3
 8010a24:	6963      	ldr	r3, [r4, #20]
 8010a26:	b2ed      	uxtb	r5, r5
 8010a28:	4283      	cmp	r3, r0
 8010a2a:	dc05      	bgt.n	8010a38 <__swbuf_r+0x56>
 8010a2c:	0021      	movs	r1, r4
 8010a2e:	0030      	movs	r0, r6
 8010a30:	f7ff ffac 	bl	801098c <_fflush_r>
 8010a34:	2800      	cmp	r0, #0
 8010a36:	d1ed      	bne.n	8010a14 <__swbuf_r+0x32>
 8010a38:	68a3      	ldr	r3, [r4, #8]
 8010a3a:	3001      	adds	r0, #1
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	60a3      	str	r3, [r4, #8]
 8010a40:	6823      	ldr	r3, [r4, #0]
 8010a42:	1c5a      	adds	r2, r3, #1
 8010a44:	6022      	str	r2, [r4, #0]
 8010a46:	701f      	strb	r7, [r3, #0]
 8010a48:	6963      	ldr	r3, [r4, #20]
 8010a4a:	4283      	cmp	r3, r0
 8010a4c:	d004      	beq.n	8010a58 <__swbuf_r+0x76>
 8010a4e:	89a3      	ldrh	r3, [r4, #12]
 8010a50:	07db      	lsls	r3, r3, #31
 8010a52:	d5e1      	bpl.n	8010a18 <__swbuf_r+0x36>
 8010a54:	2d0a      	cmp	r5, #10
 8010a56:	d1df      	bne.n	8010a18 <__swbuf_r+0x36>
 8010a58:	0021      	movs	r1, r4
 8010a5a:	0030      	movs	r0, r6
 8010a5c:	f7ff ff96 	bl	801098c <_fflush_r>
 8010a60:	2800      	cmp	r0, #0
 8010a62:	d0d9      	beq.n	8010a18 <__swbuf_r+0x36>
 8010a64:	e7d6      	b.n	8010a14 <__swbuf_r+0x32>
	...

08010a68 <__swsetup_r>:
 8010a68:	4b2d      	ldr	r3, [pc, #180]	@ (8010b20 <__swsetup_r+0xb8>)
 8010a6a:	b570      	push	{r4, r5, r6, lr}
 8010a6c:	0005      	movs	r5, r0
 8010a6e:	6818      	ldr	r0, [r3, #0]
 8010a70:	000c      	movs	r4, r1
 8010a72:	2800      	cmp	r0, #0
 8010a74:	d004      	beq.n	8010a80 <__swsetup_r+0x18>
 8010a76:	6a03      	ldr	r3, [r0, #32]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d101      	bne.n	8010a80 <__swsetup_r+0x18>
 8010a7c:	f7fd ff8e 	bl	800e99c <__sinit>
 8010a80:	230c      	movs	r3, #12
 8010a82:	5ee2      	ldrsh	r2, [r4, r3]
 8010a84:	0713      	lsls	r3, r2, #28
 8010a86:	d423      	bmi.n	8010ad0 <__swsetup_r+0x68>
 8010a88:	06d3      	lsls	r3, r2, #27
 8010a8a:	d407      	bmi.n	8010a9c <__swsetup_r+0x34>
 8010a8c:	2309      	movs	r3, #9
 8010a8e:	602b      	str	r3, [r5, #0]
 8010a90:	2340      	movs	r3, #64	@ 0x40
 8010a92:	2001      	movs	r0, #1
 8010a94:	4313      	orrs	r3, r2
 8010a96:	81a3      	strh	r3, [r4, #12]
 8010a98:	4240      	negs	r0, r0
 8010a9a:	e03a      	b.n	8010b12 <__swsetup_r+0xaa>
 8010a9c:	0752      	lsls	r2, r2, #29
 8010a9e:	d513      	bpl.n	8010ac8 <__swsetup_r+0x60>
 8010aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010aa2:	2900      	cmp	r1, #0
 8010aa4:	d008      	beq.n	8010ab8 <__swsetup_r+0x50>
 8010aa6:	0023      	movs	r3, r4
 8010aa8:	3344      	adds	r3, #68	@ 0x44
 8010aaa:	4299      	cmp	r1, r3
 8010aac:	d002      	beq.n	8010ab4 <__swsetup_r+0x4c>
 8010aae:	0028      	movs	r0, r5
 8010ab0:	f7fe ff9a 	bl	800f9e8 <_free_r>
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ab8:	2224      	movs	r2, #36	@ 0x24
 8010aba:	89a3      	ldrh	r3, [r4, #12]
 8010abc:	4393      	bics	r3, r2
 8010abe:	81a3      	strh	r3, [r4, #12]
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	6063      	str	r3, [r4, #4]
 8010ac4:	6923      	ldr	r3, [r4, #16]
 8010ac6:	6023      	str	r3, [r4, #0]
 8010ac8:	2308      	movs	r3, #8
 8010aca:	89a2      	ldrh	r2, [r4, #12]
 8010acc:	4313      	orrs	r3, r2
 8010ace:	81a3      	strh	r3, [r4, #12]
 8010ad0:	6923      	ldr	r3, [r4, #16]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d10b      	bne.n	8010aee <__swsetup_r+0x86>
 8010ad6:	21a0      	movs	r1, #160	@ 0xa0
 8010ad8:	2280      	movs	r2, #128	@ 0x80
 8010ada:	89a3      	ldrh	r3, [r4, #12]
 8010adc:	0089      	lsls	r1, r1, #2
 8010ade:	0092      	lsls	r2, r2, #2
 8010ae0:	400b      	ands	r3, r1
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d003      	beq.n	8010aee <__swsetup_r+0x86>
 8010ae6:	0021      	movs	r1, r4
 8010ae8:	0028      	movs	r0, r5
 8010aea:	f000 f91f 	bl	8010d2c <__smakebuf_r>
 8010aee:	230c      	movs	r3, #12
 8010af0:	5ee2      	ldrsh	r2, [r4, r3]
 8010af2:	2101      	movs	r1, #1
 8010af4:	0013      	movs	r3, r2
 8010af6:	400b      	ands	r3, r1
 8010af8:	420a      	tst	r2, r1
 8010afa:	d00b      	beq.n	8010b14 <__swsetup_r+0xac>
 8010afc:	2300      	movs	r3, #0
 8010afe:	60a3      	str	r3, [r4, #8]
 8010b00:	6963      	ldr	r3, [r4, #20]
 8010b02:	425b      	negs	r3, r3
 8010b04:	61a3      	str	r3, [r4, #24]
 8010b06:	2000      	movs	r0, #0
 8010b08:	6923      	ldr	r3, [r4, #16]
 8010b0a:	4283      	cmp	r3, r0
 8010b0c:	d101      	bne.n	8010b12 <__swsetup_r+0xaa>
 8010b0e:	0613      	lsls	r3, r2, #24
 8010b10:	d4be      	bmi.n	8010a90 <__swsetup_r+0x28>
 8010b12:	bd70      	pop	{r4, r5, r6, pc}
 8010b14:	0791      	lsls	r1, r2, #30
 8010b16:	d400      	bmi.n	8010b1a <__swsetup_r+0xb2>
 8010b18:	6963      	ldr	r3, [r4, #20]
 8010b1a:	60a3      	str	r3, [r4, #8]
 8010b1c:	e7f3      	b.n	8010b06 <__swsetup_r+0x9e>
 8010b1e:	46c0      	nop			@ (mov r8, r8)
 8010b20:	20000084 	.word	0x20000084

08010b24 <memmove>:
 8010b24:	b510      	push	{r4, lr}
 8010b26:	4288      	cmp	r0, r1
 8010b28:	d806      	bhi.n	8010b38 <memmove+0x14>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d008      	beq.n	8010b42 <memmove+0x1e>
 8010b30:	5ccc      	ldrb	r4, [r1, r3]
 8010b32:	54c4      	strb	r4, [r0, r3]
 8010b34:	3301      	adds	r3, #1
 8010b36:	e7f9      	b.n	8010b2c <memmove+0x8>
 8010b38:	188b      	adds	r3, r1, r2
 8010b3a:	4298      	cmp	r0, r3
 8010b3c:	d2f5      	bcs.n	8010b2a <memmove+0x6>
 8010b3e:	3a01      	subs	r2, #1
 8010b40:	d200      	bcs.n	8010b44 <memmove+0x20>
 8010b42:	bd10      	pop	{r4, pc}
 8010b44:	5c8b      	ldrb	r3, [r1, r2]
 8010b46:	5483      	strb	r3, [r0, r2]
 8010b48:	e7f9      	b.n	8010b3e <memmove+0x1a>
	...

08010b4c <_sbrk_r>:
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	b570      	push	{r4, r5, r6, lr}
 8010b50:	4d06      	ldr	r5, [pc, #24]	@ (8010b6c <_sbrk_r+0x20>)
 8010b52:	0004      	movs	r4, r0
 8010b54:	0008      	movs	r0, r1
 8010b56:	602b      	str	r3, [r5, #0]
 8010b58:	f7f5 fffc 	bl	8006b54 <_sbrk>
 8010b5c:	1c43      	adds	r3, r0, #1
 8010b5e:	d103      	bne.n	8010b68 <_sbrk_r+0x1c>
 8010b60:	682b      	ldr	r3, [r5, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d000      	beq.n	8010b68 <_sbrk_r+0x1c>
 8010b66:	6023      	str	r3, [r4, #0]
 8010b68:	bd70      	pop	{r4, r5, r6, pc}
 8010b6a:	46c0      	nop			@ (mov r8, r8)
 8010b6c:	20001a38 	.word	0x20001a38

08010b70 <memcpy>:
 8010b70:	2300      	movs	r3, #0
 8010b72:	b510      	push	{r4, lr}
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d100      	bne.n	8010b7a <memcpy+0xa>
 8010b78:	bd10      	pop	{r4, pc}
 8010b7a:	5ccc      	ldrb	r4, [r1, r3]
 8010b7c:	54c4      	strb	r4, [r0, r3]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	e7f8      	b.n	8010b74 <memcpy+0x4>
	...

08010b84 <__assert_func>:
 8010b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010b86:	0014      	movs	r4, r2
 8010b88:	001a      	movs	r2, r3
 8010b8a:	4b09      	ldr	r3, [pc, #36]	@ (8010bb0 <__assert_func+0x2c>)
 8010b8c:	0005      	movs	r5, r0
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	000e      	movs	r6, r1
 8010b92:	68d8      	ldr	r0, [r3, #12]
 8010b94:	4b07      	ldr	r3, [pc, #28]	@ (8010bb4 <__assert_func+0x30>)
 8010b96:	2c00      	cmp	r4, #0
 8010b98:	d101      	bne.n	8010b9e <__assert_func+0x1a>
 8010b9a:	4b07      	ldr	r3, [pc, #28]	@ (8010bb8 <__assert_func+0x34>)
 8010b9c:	001c      	movs	r4, r3
 8010b9e:	4907      	ldr	r1, [pc, #28]	@ (8010bbc <__assert_func+0x38>)
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	9402      	str	r4, [sp, #8]
 8010ba4:	002b      	movs	r3, r5
 8010ba6:	9600      	str	r6, [sp, #0]
 8010ba8:	f000 f886 	bl	8010cb8 <fiprintf>
 8010bac:	f000 f924 	bl	8010df8 <abort>
 8010bb0:	20000084 	.word	0x20000084
 8010bb4:	08011d5b 	.word	0x08011d5b
 8010bb8:	08011d96 	.word	0x08011d96
 8010bbc:	08011d68 	.word	0x08011d68

08010bc0 <_calloc_r>:
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	0c0b      	lsrs	r3, r1, #16
 8010bc4:	0c15      	lsrs	r5, r2, #16
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d11e      	bne.n	8010c08 <_calloc_r+0x48>
 8010bca:	2d00      	cmp	r5, #0
 8010bcc:	d10c      	bne.n	8010be8 <_calloc_r+0x28>
 8010bce:	b289      	uxth	r1, r1
 8010bd0:	b294      	uxth	r4, r2
 8010bd2:	434c      	muls	r4, r1
 8010bd4:	0021      	movs	r1, r4
 8010bd6:	f7fe ff7d 	bl	800fad4 <_malloc_r>
 8010bda:	1e05      	subs	r5, r0, #0
 8010bdc:	d01a      	beq.n	8010c14 <_calloc_r+0x54>
 8010bde:	0022      	movs	r2, r4
 8010be0:	2100      	movs	r1, #0
 8010be2:	f7fd ffc3 	bl	800eb6c <memset>
 8010be6:	e016      	b.n	8010c16 <_calloc_r+0x56>
 8010be8:	1c2b      	adds	r3, r5, #0
 8010bea:	1c0c      	adds	r4, r1, #0
 8010bec:	b289      	uxth	r1, r1
 8010bee:	b292      	uxth	r2, r2
 8010bf0:	434a      	muls	r2, r1
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	b2a1      	uxth	r1, r4
 8010bf6:	4359      	muls	r1, r3
 8010bf8:	0c14      	lsrs	r4, r2, #16
 8010bfa:	190c      	adds	r4, r1, r4
 8010bfc:	0c23      	lsrs	r3, r4, #16
 8010bfe:	d107      	bne.n	8010c10 <_calloc_r+0x50>
 8010c00:	0424      	lsls	r4, r4, #16
 8010c02:	b292      	uxth	r2, r2
 8010c04:	4314      	orrs	r4, r2
 8010c06:	e7e5      	b.n	8010bd4 <_calloc_r+0x14>
 8010c08:	2d00      	cmp	r5, #0
 8010c0a:	d101      	bne.n	8010c10 <_calloc_r+0x50>
 8010c0c:	1c14      	adds	r4, r2, #0
 8010c0e:	e7ed      	b.n	8010bec <_calloc_r+0x2c>
 8010c10:	230c      	movs	r3, #12
 8010c12:	6003      	str	r3, [r0, #0]
 8010c14:	2500      	movs	r5, #0
 8010c16:	0028      	movs	r0, r5
 8010c18:	bd70      	pop	{r4, r5, r6, pc}

08010c1a <__ascii_mbtowc>:
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	2900      	cmp	r1, #0
 8010c1e:	d100      	bne.n	8010c22 <__ascii_mbtowc+0x8>
 8010c20:	a901      	add	r1, sp, #4
 8010c22:	1e10      	subs	r0, r2, #0
 8010c24:	d006      	beq.n	8010c34 <__ascii_mbtowc+0x1a>
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d006      	beq.n	8010c38 <__ascii_mbtowc+0x1e>
 8010c2a:	7813      	ldrb	r3, [r2, #0]
 8010c2c:	600b      	str	r3, [r1, #0]
 8010c2e:	7810      	ldrb	r0, [r2, #0]
 8010c30:	1e43      	subs	r3, r0, #1
 8010c32:	4198      	sbcs	r0, r3
 8010c34:	b002      	add	sp, #8
 8010c36:	4770      	bx	lr
 8010c38:	2002      	movs	r0, #2
 8010c3a:	4240      	negs	r0, r0
 8010c3c:	e7fa      	b.n	8010c34 <__ascii_mbtowc+0x1a>

08010c3e <_realloc_r>:
 8010c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c40:	0006      	movs	r6, r0
 8010c42:	000c      	movs	r4, r1
 8010c44:	0015      	movs	r5, r2
 8010c46:	2900      	cmp	r1, #0
 8010c48:	d105      	bne.n	8010c56 <_realloc_r+0x18>
 8010c4a:	0011      	movs	r1, r2
 8010c4c:	f7fe ff42 	bl	800fad4 <_malloc_r>
 8010c50:	0004      	movs	r4, r0
 8010c52:	0020      	movs	r0, r4
 8010c54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010c56:	2a00      	cmp	r2, #0
 8010c58:	d103      	bne.n	8010c62 <_realloc_r+0x24>
 8010c5a:	f7fe fec5 	bl	800f9e8 <_free_r>
 8010c5e:	2400      	movs	r4, #0
 8010c60:	e7f7      	b.n	8010c52 <_realloc_r+0x14>
 8010c62:	f000 f8d0 	bl	8010e06 <_malloc_usable_size_r>
 8010c66:	0007      	movs	r7, r0
 8010c68:	4285      	cmp	r5, r0
 8010c6a:	d802      	bhi.n	8010c72 <_realloc_r+0x34>
 8010c6c:	0843      	lsrs	r3, r0, #1
 8010c6e:	42ab      	cmp	r3, r5
 8010c70:	d3ef      	bcc.n	8010c52 <_realloc_r+0x14>
 8010c72:	0029      	movs	r1, r5
 8010c74:	0030      	movs	r0, r6
 8010c76:	f7fe ff2d 	bl	800fad4 <_malloc_r>
 8010c7a:	9001      	str	r0, [sp, #4]
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	d0ee      	beq.n	8010c5e <_realloc_r+0x20>
 8010c80:	002a      	movs	r2, r5
 8010c82:	42bd      	cmp	r5, r7
 8010c84:	d900      	bls.n	8010c88 <_realloc_r+0x4a>
 8010c86:	003a      	movs	r2, r7
 8010c88:	0021      	movs	r1, r4
 8010c8a:	9801      	ldr	r0, [sp, #4]
 8010c8c:	f7ff ff70 	bl	8010b70 <memcpy>
 8010c90:	0021      	movs	r1, r4
 8010c92:	0030      	movs	r0, r6
 8010c94:	f7fe fea8 	bl	800f9e8 <_free_r>
 8010c98:	9c01      	ldr	r4, [sp, #4]
 8010c9a:	e7da      	b.n	8010c52 <_realloc_r+0x14>

08010c9c <__ascii_wctomb>:
 8010c9c:	0003      	movs	r3, r0
 8010c9e:	1e08      	subs	r0, r1, #0
 8010ca0:	d005      	beq.n	8010cae <__ascii_wctomb+0x12>
 8010ca2:	2aff      	cmp	r2, #255	@ 0xff
 8010ca4:	d904      	bls.n	8010cb0 <__ascii_wctomb+0x14>
 8010ca6:	228a      	movs	r2, #138	@ 0x8a
 8010ca8:	2001      	movs	r0, #1
 8010caa:	601a      	str	r2, [r3, #0]
 8010cac:	4240      	negs	r0, r0
 8010cae:	4770      	bx	lr
 8010cb0:	2001      	movs	r0, #1
 8010cb2:	700a      	strb	r2, [r1, #0]
 8010cb4:	e7fb      	b.n	8010cae <__ascii_wctomb+0x12>
	...

08010cb8 <fiprintf>:
 8010cb8:	b40e      	push	{r1, r2, r3}
 8010cba:	b517      	push	{r0, r1, r2, r4, lr}
 8010cbc:	4c05      	ldr	r4, [pc, #20]	@ (8010cd4 <fiprintf+0x1c>)
 8010cbe:	ab05      	add	r3, sp, #20
 8010cc0:	cb04      	ldmia	r3!, {r2}
 8010cc2:	0001      	movs	r1, r0
 8010cc4:	6820      	ldr	r0, [r4, #0]
 8010cc6:	9301      	str	r3, [sp, #4]
 8010cc8:	f7ff fcbe 	bl	8010648 <_vfiprintf_r>
 8010ccc:	bc1e      	pop	{r1, r2, r3, r4}
 8010cce:	bc08      	pop	{r3}
 8010cd0:	b003      	add	sp, #12
 8010cd2:	4718      	bx	r3
 8010cd4:	20000084 	.word	0x20000084

08010cd8 <__swhatbuf_r>:
 8010cd8:	b570      	push	{r4, r5, r6, lr}
 8010cda:	000e      	movs	r6, r1
 8010cdc:	001d      	movs	r5, r3
 8010cde:	230e      	movs	r3, #14
 8010ce0:	5ec9      	ldrsh	r1, [r1, r3]
 8010ce2:	0014      	movs	r4, r2
 8010ce4:	b096      	sub	sp, #88	@ 0x58
 8010ce6:	2900      	cmp	r1, #0
 8010ce8:	da0c      	bge.n	8010d04 <__swhatbuf_r+0x2c>
 8010cea:	89b2      	ldrh	r2, [r6, #12]
 8010cec:	2380      	movs	r3, #128	@ 0x80
 8010cee:	0011      	movs	r1, r2
 8010cf0:	4019      	ands	r1, r3
 8010cf2:	421a      	tst	r2, r3
 8010cf4:	d114      	bne.n	8010d20 <__swhatbuf_r+0x48>
 8010cf6:	2380      	movs	r3, #128	@ 0x80
 8010cf8:	00db      	lsls	r3, r3, #3
 8010cfa:	2000      	movs	r0, #0
 8010cfc:	6029      	str	r1, [r5, #0]
 8010cfe:	6023      	str	r3, [r4, #0]
 8010d00:	b016      	add	sp, #88	@ 0x58
 8010d02:	bd70      	pop	{r4, r5, r6, pc}
 8010d04:	466a      	mov	r2, sp
 8010d06:	f000 f853 	bl	8010db0 <_fstat_r>
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	dbed      	blt.n	8010cea <__swhatbuf_r+0x12>
 8010d0e:	23f0      	movs	r3, #240	@ 0xf0
 8010d10:	9901      	ldr	r1, [sp, #4]
 8010d12:	021b      	lsls	r3, r3, #8
 8010d14:	4019      	ands	r1, r3
 8010d16:	4b04      	ldr	r3, [pc, #16]	@ (8010d28 <__swhatbuf_r+0x50>)
 8010d18:	18c9      	adds	r1, r1, r3
 8010d1a:	424b      	negs	r3, r1
 8010d1c:	4159      	adcs	r1, r3
 8010d1e:	e7ea      	b.n	8010cf6 <__swhatbuf_r+0x1e>
 8010d20:	2100      	movs	r1, #0
 8010d22:	2340      	movs	r3, #64	@ 0x40
 8010d24:	e7e9      	b.n	8010cfa <__swhatbuf_r+0x22>
 8010d26:	46c0      	nop			@ (mov r8, r8)
 8010d28:	ffffe000 	.word	0xffffe000

08010d2c <__smakebuf_r>:
 8010d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d2e:	2602      	movs	r6, #2
 8010d30:	898b      	ldrh	r3, [r1, #12]
 8010d32:	0005      	movs	r5, r0
 8010d34:	000c      	movs	r4, r1
 8010d36:	b085      	sub	sp, #20
 8010d38:	4233      	tst	r3, r6
 8010d3a:	d007      	beq.n	8010d4c <__smakebuf_r+0x20>
 8010d3c:	0023      	movs	r3, r4
 8010d3e:	3347      	adds	r3, #71	@ 0x47
 8010d40:	6023      	str	r3, [r4, #0]
 8010d42:	6123      	str	r3, [r4, #16]
 8010d44:	2301      	movs	r3, #1
 8010d46:	6163      	str	r3, [r4, #20]
 8010d48:	b005      	add	sp, #20
 8010d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d4c:	ab03      	add	r3, sp, #12
 8010d4e:	aa02      	add	r2, sp, #8
 8010d50:	f7ff ffc2 	bl	8010cd8 <__swhatbuf_r>
 8010d54:	9f02      	ldr	r7, [sp, #8]
 8010d56:	9001      	str	r0, [sp, #4]
 8010d58:	0039      	movs	r1, r7
 8010d5a:	0028      	movs	r0, r5
 8010d5c:	f7fe feba 	bl	800fad4 <_malloc_r>
 8010d60:	2800      	cmp	r0, #0
 8010d62:	d108      	bne.n	8010d76 <__smakebuf_r+0x4a>
 8010d64:	220c      	movs	r2, #12
 8010d66:	5ea3      	ldrsh	r3, [r4, r2]
 8010d68:	059a      	lsls	r2, r3, #22
 8010d6a:	d4ed      	bmi.n	8010d48 <__smakebuf_r+0x1c>
 8010d6c:	2203      	movs	r2, #3
 8010d6e:	4393      	bics	r3, r2
 8010d70:	431e      	orrs	r6, r3
 8010d72:	81a6      	strh	r6, [r4, #12]
 8010d74:	e7e2      	b.n	8010d3c <__smakebuf_r+0x10>
 8010d76:	2380      	movs	r3, #128	@ 0x80
 8010d78:	89a2      	ldrh	r2, [r4, #12]
 8010d7a:	6020      	str	r0, [r4, #0]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	81a3      	strh	r3, [r4, #12]
 8010d80:	9b03      	ldr	r3, [sp, #12]
 8010d82:	6120      	str	r0, [r4, #16]
 8010d84:	6167      	str	r7, [r4, #20]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d00c      	beq.n	8010da4 <__smakebuf_r+0x78>
 8010d8a:	0028      	movs	r0, r5
 8010d8c:	230e      	movs	r3, #14
 8010d8e:	5ee1      	ldrsh	r1, [r4, r3]
 8010d90:	f000 f820 	bl	8010dd4 <_isatty_r>
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d005      	beq.n	8010da4 <__smakebuf_r+0x78>
 8010d98:	2303      	movs	r3, #3
 8010d9a:	89a2      	ldrh	r2, [r4, #12]
 8010d9c:	439a      	bics	r2, r3
 8010d9e:	3b02      	subs	r3, #2
 8010da0:	4313      	orrs	r3, r2
 8010da2:	81a3      	strh	r3, [r4, #12]
 8010da4:	89a3      	ldrh	r3, [r4, #12]
 8010da6:	9a01      	ldr	r2, [sp, #4]
 8010da8:	4313      	orrs	r3, r2
 8010daa:	81a3      	strh	r3, [r4, #12]
 8010dac:	e7cc      	b.n	8010d48 <__smakebuf_r+0x1c>
	...

08010db0 <_fstat_r>:
 8010db0:	2300      	movs	r3, #0
 8010db2:	b570      	push	{r4, r5, r6, lr}
 8010db4:	4d06      	ldr	r5, [pc, #24]	@ (8010dd0 <_fstat_r+0x20>)
 8010db6:	0004      	movs	r4, r0
 8010db8:	0008      	movs	r0, r1
 8010dba:	0011      	movs	r1, r2
 8010dbc:	602b      	str	r3, [r5, #0]
 8010dbe:	f7f5 fea7 	bl	8006b10 <_fstat>
 8010dc2:	1c43      	adds	r3, r0, #1
 8010dc4:	d103      	bne.n	8010dce <_fstat_r+0x1e>
 8010dc6:	682b      	ldr	r3, [r5, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d000      	beq.n	8010dce <_fstat_r+0x1e>
 8010dcc:	6023      	str	r3, [r4, #0]
 8010dce:	bd70      	pop	{r4, r5, r6, pc}
 8010dd0:	20001a38 	.word	0x20001a38

08010dd4 <_isatty_r>:
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	b570      	push	{r4, r5, r6, lr}
 8010dd8:	4d06      	ldr	r5, [pc, #24]	@ (8010df4 <_isatty_r+0x20>)
 8010dda:	0004      	movs	r4, r0
 8010ddc:	0008      	movs	r0, r1
 8010dde:	602b      	str	r3, [r5, #0]
 8010de0:	f7f5 fea4 	bl	8006b2c <_isatty>
 8010de4:	1c43      	adds	r3, r0, #1
 8010de6:	d103      	bne.n	8010df0 <_isatty_r+0x1c>
 8010de8:	682b      	ldr	r3, [r5, #0]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d000      	beq.n	8010df0 <_isatty_r+0x1c>
 8010dee:	6023      	str	r3, [r4, #0]
 8010df0:	bd70      	pop	{r4, r5, r6, pc}
 8010df2:	46c0      	nop			@ (mov r8, r8)
 8010df4:	20001a38 	.word	0x20001a38

08010df8 <abort>:
 8010df8:	2006      	movs	r0, #6
 8010dfa:	b510      	push	{r4, lr}
 8010dfc:	f000 f834 	bl	8010e68 <raise>
 8010e00:	2001      	movs	r0, #1
 8010e02:	f7f5 fe51 	bl	8006aa8 <_exit>

08010e06 <_malloc_usable_size_r>:
 8010e06:	1f0b      	subs	r3, r1, #4
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	1f18      	subs	r0, r3, #4
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	da01      	bge.n	8010e14 <_malloc_usable_size_r+0xe>
 8010e10:	580b      	ldr	r3, [r1, r0]
 8010e12:	18c0      	adds	r0, r0, r3
 8010e14:	4770      	bx	lr

08010e16 <_raise_r>:
 8010e16:	b570      	push	{r4, r5, r6, lr}
 8010e18:	0004      	movs	r4, r0
 8010e1a:	000d      	movs	r5, r1
 8010e1c:	291f      	cmp	r1, #31
 8010e1e:	d904      	bls.n	8010e2a <_raise_r+0x14>
 8010e20:	2316      	movs	r3, #22
 8010e22:	6003      	str	r3, [r0, #0]
 8010e24:	2001      	movs	r0, #1
 8010e26:	4240      	negs	r0, r0
 8010e28:	bd70      	pop	{r4, r5, r6, pc}
 8010e2a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d004      	beq.n	8010e3a <_raise_r+0x24>
 8010e30:	008a      	lsls	r2, r1, #2
 8010e32:	189b      	adds	r3, r3, r2
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	2a00      	cmp	r2, #0
 8010e38:	d108      	bne.n	8010e4c <_raise_r+0x36>
 8010e3a:	0020      	movs	r0, r4
 8010e3c:	f000 f830 	bl	8010ea0 <_getpid_r>
 8010e40:	002a      	movs	r2, r5
 8010e42:	0001      	movs	r1, r0
 8010e44:	0020      	movs	r0, r4
 8010e46:	f000 f819 	bl	8010e7c <_kill_r>
 8010e4a:	e7ed      	b.n	8010e28 <_raise_r+0x12>
 8010e4c:	2a01      	cmp	r2, #1
 8010e4e:	d009      	beq.n	8010e64 <_raise_r+0x4e>
 8010e50:	1c51      	adds	r1, r2, #1
 8010e52:	d103      	bne.n	8010e5c <_raise_r+0x46>
 8010e54:	2316      	movs	r3, #22
 8010e56:	6003      	str	r3, [r0, #0]
 8010e58:	2001      	movs	r0, #1
 8010e5a:	e7e5      	b.n	8010e28 <_raise_r+0x12>
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	0028      	movs	r0, r5
 8010e60:	6019      	str	r1, [r3, #0]
 8010e62:	4790      	blx	r2
 8010e64:	2000      	movs	r0, #0
 8010e66:	e7df      	b.n	8010e28 <_raise_r+0x12>

08010e68 <raise>:
 8010e68:	b510      	push	{r4, lr}
 8010e6a:	4b03      	ldr	r3, [pc, #12]	@ (8010e78 <raise+0x10>)
 8010e6c:	0001      	movs	r1, r0
 8010e6e:	6818      	ldr	r0, [r3, #0]
 8010e70:	f7ff ffd1 	bl	8010e16 <_raise_r>
 8010e74:	bd10      	pop	{r4, pc}
 8010e76:	46c0      	nop			@ (mov r8, r8)
 8010e78:	20000084 	.word	0x20000084

08010e7c <_kill_r>:
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	b570      	push	{r4, r5, r6, lr}
 8010e80:	4d06      	ldr	r5, [pc, #24]	@ (8010e9c <_kill_r+0x20>)
 8010e82:	0004      	movs	r4, r0
 8010e84:	0008      	movs	r0, r1
 8010e86:	0011      	movs	r1, r2
 8010e88:	602b      	str	r3, [r5, #0]
 8010e8a:	f7f5 fdfd 	bl	8006a88 <_kill>
 8010e8e:	1c43      	adds	r3, r0, #1
 8010e90:	d103      	bne.n	8010e9a <_kill_r+0x1e>
 8010e92:	682b      	ldr	r3, [r5, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d000      	beq.n	8010e9a <_kill_r+0x1e>
 8010e98:	6023      	str	r3, [r4, #0]
 8010e9a:	bd70      	pop	{r4, r5, r6, pc}
 8010e9c:	20001a38 	.word	0x20001a38

08010ea0 <_getpid_r>:
 8010ea0:	b510      	push	{r4, lr}
 8010ea2:	f7f5 fdeb 	bl	8006a7c <_getpid>
 8010ea6:	bd10      	pop	{r4, pc}

08010ea8 <expf>:
 8010ea8:	b570      	push	{r4, r5, r6, lr}
 8010eaa:	1c04      	adds	r4, r0, #0
 8010eac:	f000 f8c2 	bl	8011034 <__ieee754_expf>
 8010eb0:	1c05      	adds	r5, r0, #0
 8010eb2:	1c20      	adds	r0, r4, #0
 8010eb4:	f000 f83c 	bl	8010f30 <finitef>
 8010eb8:	2800      	cmp	r0, #0
 8010eba:	d00b      	beq.n	8010ed4 <expf+0x2c>
 8010ebc:	490c      	ldr	r1, [pc, #48]	@ (8010ef0 <expf+0x48>)
 8010ebe:	1c20      	adds	r0, r4, #0
 8010ec0:	f7ef fb18 	bl	80004f4 <__aeabi_fcmpgt>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	d007      	beq.n	8010ed8 <expf+0x30>
 8010ec8:	f7fd fed4 	bl	800ec74 <__errno>
 8010ecc:	25ff      	movs	r5, #255	@ 0xff
 8010ece:	2322      	movs	r3, #34	@ 0x22
 8010ed0:	05ed      	lsls	r5, r5, #23
 8010ed2:	6003      	str	r3, [r0, #0]
 8010ed4:	1c28      	adds	r0, r5, #0
 8010ed6:	bd70      	pop	{r4, r5, r6, pc}
 8010ed8:	4906      	ldr	r1, [pc, #24]	@ (8010ef4 <expf+0x4c>)
 8010eda:	1c20      	adds	r0, r4, #0
 8010edc:	f7ef faf6 	bl	80004cc <__aeabi_fcmplt>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d0f7      	beq.n	8010ed4 <expf+0x2c>
 8010ee4:	f7fd fec6 	bl	800ec74 <__errno>
 8010ee8:	2322      	movs	r3, #34	@ 0x22
 8010eea:	2500      	movs	r5, #0
 8010eec:	6003      	str	r3, [r0, #0]
 8010eee:	e7f1      	b.n	8010ed4 <expf+0x2c>
 8010ef0:	42b17217 	.word	0x42b17217
 8010ef4:	c2cff1b5 	.word	0xc2cff1b5

08010ef8 <sqrtf>:
 8010ef8:	b570      	push	{r4, r5, r6, lr}
 8010efa:	1c05      	adds	r5, r0, #0
 8010efc:	f000 f822 	bl	8010f44 <__ieee754_sqrtf>
 8010f00:	1c29      	adds	r1, r5, #0
 8010f02:	1c04      	adds	r4, r0, #0
 8010f04:	1c28      	adds	r0, r5, #0
 8010f06:	f7f0 faab 	bl	8001460 <__aeabi_fcmpun>
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	d10e      	bne.n	8010f2c <sqrtf+0x34>
 8010f0e:	2100      	movs	r1, #0
 8010f10:	1c28      	adds	r0, r5, #0
 8010f12:	f7ef fadb 	bl	80004cc <__aeabi_fcmplt>
 8010f16:	2800      	cmp	r0, #0
 8010f18:	d008      	beq.n	8010f2c <sqrtf+0x34>
 8010f1a:	f7fd feab 	bl	800ec74 <__errno>
 8010f1e:	2321      	movs	r3, #33	@ 0x21
 8010f20:	2100      	movs	r1, #0
 8010f22:	6003      	str	r3, [r0, #0]
 8010f24:	1c08      	adds	r0, r1, #0
 8010f26:	f7ef fdd3 	bl	8000ad0 <__aeabi_fdiv>
 8010f2a:	1c04      	adds	r4, r0, #0
 8010f2c:	1c20      	adds	r0, r4, #0
 8010f2e:	bd70      	pop	{r4, r5, r6, pc}

08010f30 <finitef>:
 8010f30:	22ff      	movs	r2, #255	@ 0xff
 8010f32:	0043      	lsls	r3, r0, #1
 8010f34:	085b      	lsrs	r3, r3, #1
 8010f36:	2001      	movs	r0, #1
 8010f38:	05d2      	lsls	r2, r2, #23
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	db00      	blt.n	8010f40 <finitef+0x10>
 8010f3e:	2000      	movs	r0, #0
 8010f40:	4770      	bx	lr
	...

08010f44 <__ieee754_sqrtf>:
 8010f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f46:	0003      	movs	r3, r0
 8010f48:	0042      	lsls	r2, r0, #1
 8010f4a:	1c04      	adds	r4, r0, #0
 8010f4c:	20ff      	movs	r0, #255	@ 0xff
 8010f4e:	0852      	lsrs	r2, r2, #1
 8010f50:	05c0      	lsls	r0, r0, #23
 8010f52:	4282      	cmp	r2, r0
 8010f54:	d30a      	bcc.n	8010f6c <__ieee754_sqrtf+0x28>
 8010f56:	1c21      	adds	r1, r4, #0
 8010f58:	1c20      	adds	r0, r4, #0
 8010f5a:	f7ef ff9f 	bl	8000e9c <__aeabi_fmul>
 8010f5e:	1c01      	adds	r1, r0, #0
 8010f60:	1c20      	adds	r0, r4, #0
 8010f62:	f7ef fc2b 	bl	80007bc <__aeabi_fadd>
 8010f66:	1c04      	adds	r4, r0, #0
 8010f68:	1c20      	adds	r0, r4, #0
 8010f6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f6c:	2a00      	cmp	r2, #0
 8010f6e:	d0fb      	beq.n	8010f68 <__ieee754_sqrtf+0x24>
 8010f70:	2c00      	cmp	r4, #0
 8010f72:	da07      	bge.n	8010f84 <__ieee754_sqrtf+0x40>
 8010f74:	1c21      	adds	r1, r4, #0
 8010f76:	1c20      	adds	r0, r4, #0
 8010f78:	f7f0 f8ce 	bl	8001118 <__aeabi_fsub>
 8010f7c:	1c01      	adds	r1, r0, #0
 8010f7e:	f7ef fda7 	bl	8000ad0 <__aeabi_fdiv>
 8010f82:	e7f0      	b.n	8010f66 <__ieee754_sqrtf+0x22>
 8010f84:	0022      	movs	r2, r4
 8010f86:	15e1      	asrs	r1, r4, #23
 8010f88:	4002      	ands	r2, r0
 8010f8a:	4204      	tst	r4, r0
 8010f8c:	d046      	beq.n	801101c <__ieee754_sqrtf+0xd8>
 8010f8e:	2280      	movs	r2, #128	@ 0x80
 8010f90:	000f      	movs	r7, r1
 8010f92:	025b      	lsls	r3, r3, #9
 8010f94:	0a5b      	lsrs	r3, r3, #9
 8010f96:	0412      	lsls	r2, r2, #16
 8010f98:	3f7f      	subs	r7, #127	@ 0x7f
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	07c9      	lsls	r1, r1, #31
 8010f9e:	d400      	bmi.n	8010fa2 <__ieee754_sqrtf+0x5e>
 8010fa0:	005b      	lsls	r3, r3, #1
 8010fa2:	2400      	movs	r4, #0
 8010fa4:	2180      	movs	r1, #128	@ 0x80
 8010fa6:	2019      	movs	r0, #25
 8010fa8:	0026      	movs	r6, r4
 8010faa:	107f      	asrs	r7, r7, #1
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	0449      	lsls	r1, r1, #17
 8010fb0:	1875      	adds	r5, r6, r1
 8010fb2:	001a      	movs	r2, r3
 8010fb4:	429d      	cmp	r5, r3
 8010fb6:	dc02      	bgt.n	8010fbe <__ieee754_sqrtf+0x7a>
 8010fb8:	186e      	adds	r6, r5, r1
 8010fba:	1b5a      	subs	r2, r3, r5
 8010fbc:	1864      	adds	r4, r4, r1
 8010fbe:	3801      	subs	r0, #1
 8010fc0:	0053      	lsls	r3, r2, #1
 8010fc2:	0849      	lsrs	r1, r1, #1
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	d1f3      	bne.n	8010fb0 <__ieee754_sqrtf+0x6c>
 8010fc8:	2a00      	cmp	r2, #0
 8010fca:	d019      	beq.n	8011000 <__ieee754_sqrtf+0xbc>
 8010fcc:	4d17      	ldr	r5, [pc, #92]	@ (801102c <__ieee754_sqrtf+0xe8>)
 8010fce:	4e18      	ldr	r6, [pc, #96]	@ (8011030 <__ieee754_sqrtf+0xec>)
 8010fd0:	6828      	ldr	r0, [r5, #0]
 8010fd2:	6831      	ldr	r1, [r6, #0]
 8010fd4:	682b      	ldr	r3, [r5, #0]
 8010fd6:	9301      	str	r3, [sp, #4]
 8010fd8:	f7f0 f89e 	bl	8001118 <__aeabi_fsub>
 8010fdc:	1c01      	adds	r1, r0, #0
 8010fde:	9801      	ldr	r0, [sp, #4]
 8010fe0:	f7ef fa7e 	bl	80004e0 <__aeabi_fcmple>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	d00b      	beq.n	8011000 <__ieee754_sqrtf+0xbc>
 8010fe8:	6828      	ldr	r0, [r5, #0]
 8010fea:	6831      	ldr	r1, [r6, #0]
 8010fec:	f7ef fbe6 	bl	80007bc <__aeabi_fadd>
 8010ff0:	682d      	ldr	r5, [r5, #0]
 8010ff2:	1c01      	adds	r1, r0, #0
 8010ff4:	1c28      	adds	r0, r5, #0
 8010ff6:	f7ef fa69 	bl	80004cc <__aeabi_fcmplt>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d011      	beq.n	8011022 <__ieee754_sqrtf+0xde>
 8010ffe:	3402      	adds	r4, #2
 8011000:	23fc      	movs	r3, #252	@ 0xfc
 8011002:	1064      	asrs	r4, r4, #1
 8011004:	059b      	lsls	r3, r3, #22
 8011006:	18e3      	adds	r3, r4, r3
 8011008:	05fc      	lsls	r4, r7, #23
 801100a:	18e4      	adds	r4, r4, r3
 801100c:	e7ac      	b.n	8010f68 <__ieee754_sqrtf+0x24>
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	3201      	adds	r2, #1
 8011012:	4203      	tst	r3, r0
 8011014:	d0fb      	beq.n	801100e <__ieee754_sqrtf+0xca>
 8011016:	3a01      	subs	r2, #1
 8011018:	1a89      	subs	r1, r1, r2
 801101a:	e7b8      	b.n	8010f8e <__ieee754_sqrtf+0x4a>
 801101c:	2080      	movs	r0, #128	@ 0x80
 801101e:	0400      	lsls	r0, r0, #16
 8011020:	e7f7      	b.n	8011012 <__ieee754_sqrtf+0xce>
 8011022:	2301      	movs	r3, #1
 8011024:	3401      	adds	r4, #1
 8011026:	439c      	bics	r4, r3
 8011028:	e7ea      	b.n	8011000 <__ieee754_sqrtf+0xbc>
 801102a:	46c0      	nop			@ (mov r8, r8)
 801102c:	20000244 	.word	0x20000244
 8011030:	20000240 	.word	0x20000240

08011034 <__ieee754_expf>:
 8011034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011036:	21ff      	movs	r1, #255	@ 0xff
 8011038:	0043      	lsls	r3, r0, #1
 801103a:	1c04      	adds	r4, r0, #0
 801103c:	085b      	lsrs	r3, r3, #1
 801103e:	05c9      	lsls	r1, r1, #23
 8011040:	428b      	cmp	r3, r1
 8011042:	d904      	bls.n	801104e <__ieee754_expf+0x1a>
 8011044:	1c01      	adds	r1, r0, #0
 8011046:	1c20      	adds	r0, r4, #0
 8011048:	f7ef fbb8 	bl	80007bc <__aeabi_fadd>
 801104c:	e00d      	b.n	801106a <__ieee754_expf+0x36>
 801104e:	0fc6      	lsrs	r6, r0, #31
 8011050:	428b      	cmp	r3, r1
 8011052:	d104      	bne.n	801105e <__ieee754_expf+0x2a>
 8011054:	2e00      	cmp	r6, #0
 8011056:	d000      	beq.n	801105a <__ieee754_expf+0x26>
 8011058:	e0ba      	b.n	80111d0 <__ieee754_expf+0x19c>
 801105a:	1c20      	adds	r0, r4, #0
 801105c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801105e:	495d      	ldr	r1, [pc, #372]	@ (80111d4 <__ieee754_expf+0x1a0>)
 8011060:	4288      	cmp	r0, r1
 8011062:	dd04      	ble.n	801106e <__ieee754_expf+0x3a>
 8011064:	2000      	movs	r0, #0
 8011066:	f000 f8f1 	bl	801124c <__math_oflowf>
 801106a:	1c04      	adds	r4, r0, #0
 801106c:	e7f5      	b.n	801105a <__ieee754_expf+0x26>
 801106e:	2800      	cmp	r0, #0
 8011070:	da06      	bge.n	8011080 <__ieee754_expf+0x4c>
 8011072:	4a59      	ldr	r2, [pc, #356]	@ (80111d8 <__ieee754_expf+0x1a4>)
 8011074:	4293      	cmp	r3, r2
 8011076:	d903      	bls.n	8011080 <__ieee754_expf+0x4c>
 8011078:	2000      	movs	r0, #0
 801107a:	f000 f8e1 	bl	8011240 <__math_uflowf>
 801107e:	e7f4      	b.n	801106a <__ieee754_expf+0x36>
 8011080:	4a56      	ldr	r2, [pc, #344]	@ (80111dc <__ieee754_expf+0x1a8>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d96e      	bls.n	8011164 <__ieee754_expf+0x130>
 8011086:	4a56      	ldr	r2, [pc, #344]	@ (80111e0 <__ieee754_expf+0x1ac>)
 8011088:	00b5      	lsls	r5, r6, #2
 801108a:	4293      	cmp	r3, r2
 801108c:	d84e      	bhi.n	801112c <__ieee754_expf+0xf8>
 801108e:	4b55      	ldr	r3, [pc, #340]	@ (80111e4 <__ieee754_expf+0x1b0>)
 8011090:	1c20      	adds	r0, r4, #0
 8011092:	5959      	ldr	r1, [r3, r5]
 8011094:	f7f0 f840 	bl	8001118 <__aeabi_fsub>
 8011098:	4b53      	ldr	r3, [pc, #332]	@ (80111e8 <__ieee754_expf+0x1b4>)
 801109a:	1c07      	adds	r7, r0, #0
 801109c:	595b      	ldr	r3, [r3, r5]
 801109e:	2501      	movs	r5, #1
 80110a0:	1bad      	subs	r5, r5, r6
 80110a2:	9300      	str	r3, [sp, #0]
 80110a4:	1bad      	subs	r5, r5, r6
 80110a6:	9900      	ldr	r1, [sp, #0]
 80110a8:	1c38      	adds	r0, r7, #0
 80110aa:	f7f0 f835 	bl	8001118 <__aeabi_fsub>
 80110ae:	1c04      	adds	r4, r0, #0
 80110b0:	1c21      	adds	r1, r4, #0
 80110b2:	1c20      	adds	r0, r4, #0
 80110b4:	f7ef fef2 	bl	8000e9c <__aeabi_fmul>
 80110b8:	494c      	ldr	r1, [pc, #304]	@ (80111ec <__ieee754_expf+0x1b8>)
 80110ba:	1c06      	adds	r6, r0, #0
 80110bc:	f7ef feee 	bl	8000e9c <__aeabi_fmul>
 80110c0:	494b      	ldr	r1, [pc, #300]	@ (80111f0 <__ieee754_expf+0x1bc>)
 80110c2:	f7f0 f829 	bl	8001118 <__aeabi_fsub>
 80110c6:	1c31      	adds	r1, r6, #0
 80110c8:	f7ef fee8 	bl	8000e9c <__aeabi_fmul>
 80110cc:	4949      	ldr	r1, [pc, #292]	@ (80111f4 <__ieee754_expf+0x1c0>)
 80110ce:	f7ef fb75 	bl	80007bc <__aeabi_fadd>
 80110d2:	1c31      	adds	r1, r6, #0
 80110d4:	f7ef fee2 	bl	8000e9c <__aeabi_fmul>
 80110d8:	4947      	ldr	r1, [pc, #284]	@ (80111f8 <__ieee754_expf+0x1c4>)
 80110da:	f7f0 f81d 	bl	8001118 <__aeabi_fsub>
 80110de:	1c31      	adds	r1, r6, #0
 80110e0:	f7ef fedc 	bl	8000e9c <__aeabi_fmul>
 80110e4:	4945      	ldr	r1, [pc, #276]	@ (80111fc <__ieee754_expf+0x1c8>)
 80110e6:	f7ef fb69 	bl	80007bc <__aeabi_fadd>
 80110ea:	1c31      	adds	r1, r6, #0
 80110ec:	f7ef fed6 	bl	8000e9c <__aeabi_fmul>
 80110f0:	1c01      	adds	r1, r0, #0
 80110f2:	1c20      	adds	r0, r4, #0
 80110f4:	f7f0 f810 	bl	8001118 <__aeabi_fsub>
 80110f8:	1c01      	adds	r1, r0, #0
 80110fa:	1c06      	adds	r6, r0, #0
 80110fc:	1c20      	adds	r0, r4, #0
 80110fe:	f7ef fecd 	bl	8000e9c <__aeabi_fmul>
 8011102:	9001      	str	r0, [sp, #4]
 8011104:	2d00      	cmp	r5, #0
 8011106:	d140      	bne.n	801118a <__ieee754_expf+0x156>
 8011108:	2180      	movs	r1, #128	@ 0x80
 801110a:	1c30      	adds	r0, r6, #0
 801110c:	05c9      	lsls	r1, r1, #23
 801110e:	f7f0 f803 	bl	8001118 <__aeabi_fsub>
 8011112:	1c01      	adds	r1, r0, #0
 8011114:	9801      	ldr	r0, [sp, #4]
 8011116:	f7ef fcdb 	bl	8000ad0 <__aeabi_fdiv>
 801111a:	1c21      	adds	r1, r4, #0
 801111c:	f7ef fffc 	bl	8001118 <__aeabi_fsub>
 8011120:	1c01      	adds	r1, r0, #0
 8011122:	20fe      	movs	r0, #254	@ 0xfe
 8011124:	0580      	lsls	r0, r0, #22
 8011126:	f7ef fff7 	bl	8001118 <__aeabi_fsub>
 801112a:	e79e      	b.n	801106a <__ieee754_expf+0x36>
 801112c:	4934      	ldr	r1, [pc, #208]	@ (8011200 <__ieee754_expf+0x1cc>)
 801112e:	1c20      	adds	r0, r4, #0
 8011130:	f7ef feb4 	bl	8000e9c <__aeabi_fmul>
 8011134:	4b33      	ldr	r3, [pc, #204]	@ (8011204 <__ieee754_expf+0x1d0>)
 8011136:	5959      	ldr	r1, [r3, r5]
 8011138:	f7ef fb40 	bl	80007bc <__aeabi_fadd>
 801113c:	f7f0 f9a6 	bl	800148c <__aeabi_f2iz>
 8011140:	0005      	movs	r5, r0
 8011142:	f7f0 f9c3 	bl	80014cc <__aeabi_i2f>
 8011146:	4930      	ldr	r1, [pc, #192]	@ (8011208 <__ieee754_expf+0x1d4>)
 8011148:	1c06      	adds	r6, r0, #0
 801114a:	f7ef fea7 	bl	8000e9c <__aeabi_fmul>
 801114e:	1c01      	adds	r1, r0, #0
 8011150:	1c20      	adds	r0, r4, #0
 8011152:	f7ef ffe1 	bl	8001118 <__aeabi_fsub>
 8011156:	492d      	ldr	r1, [pc, #180]	@ (801120c <__ieee754_expf+0x1d8>)
 8011158:	1c07      	adds	r7, r0, #0
 801115a:	1c30      	adds	r0, r6, #0
 801115c:	f7ef fe9e 	bl	8000e9c <__aeabi_fmul>
 8011160:	9000      	str	r0, [sp, #0]
 8011162:	e7a0      	b.n	80110a6 <__ieee754_expf+0x72>
 8011164:	22d0      	movs	r2, #208	@ 0xd0
 8011166:	0592      	lsls	r2, r2, #22
 8011168:	4293      	cmp	r3, r2
 801116a:	d20c      	bcs.n	8011186 <__ieee754_expf+0x152>
 801116c:	4928      	ldr	r1, [pc, #160]	@ (8011210 <__ieee754_expf+0x1dc>)
 801116e:	1c20      	adds	r0, r4, #0
 8011170:	f7ef fb24 	bl	80007bc <__aeabi_fadd>
 8011174:	21fe      	movs	r1, #254	@ 0xfe
 8011176:	0589      	lsls	r1, r1, #22
 8011178:	f7ef f9bc 	bl	80004f4 <__aeabi_fcmpgt>
 801117c:	1e05      	subs	r5, r0, #0
 801117e:	d097      	beq.n	80110b0 <__ieee754_expf+0x7c>
 8011180:	21fe      	movs	r1, #254	@ 0xfe
 8011182:	0589      	lsls	r1, r1, #22
 8011184:	e75f      	b.n	8011046 <__ieee754_expf+0x12>
 8011186:	2500      	movs	r5, #0
 8011188:	e792      	b.n	80110b0 <__ieee754_expf+0x7c>
 801118a:	2080      	movs	r0, #128	@ 0x80
 801118c:	1c31      	adds	r1, r6, #0
 801118e:	05c0      	lsls	r0, r0, #23
 8011190:	f7ef ffc2 	bl	8001118 <__aeabi_fsub>
 8011194:	1c01      	adds	r1, r0, #0
 8011196:	9801      	ldr	r0, [sp, #4]
 8011198:	f7ef fc9a 	bl	8000ad0 <__aeabi_fdiv>
 801119c:	1c01      	adds	r1, r0, #0
 801119e:	9800      	ldr	r0, [sp, #0]
 80111a0:	f7ef ffba 	bl	8001118 <__aeabi_fsub>
 80111a4:	1c39      	adds	r1, r7, #0
 80111a6:	f7ef ffb7 	bl	8001118 <__aeabi_fsub>
 80111aa:	1c01      	adds	r1, r0, #0
 80111ac:	20fe      	movs	r0, #254	@ 0xfe
 80111ae:	0580      	lsls	r0, r0, #22
 80111b0:	f7ef ffb2 	bl	8001118 <__aeabi_fsub>
 80111b4:	002b      	movs	r3, r5
 80111b6:	337d      	adds	r3, #125	@ 0x7d
 80111b8:	db02      	blt.n	80111c0 <__ieee754_expf+0x18c>
 80111ba:	05ec      	lsls	r4, r5, #23
 80111bc:	1824      	adds	r4, r4, r0
 80111be:	e74c      	b.n	801105a <__ieee754_expf+0x26>
 80111c0:	21d8      	movs	r1, #216	@ 0xd8
 80111c2:	3564      	adds	r5, #100	@ 0x64
 80111c4:	05ed      	lsls	r5, r5, #23
 80111c6:	1828      	adds	r0, r5, r0
 80111c8:	0509      	lsls	r1, r1, #20
 80111ca:	f7ef fe67 	bl	8000e9c <__aeabi_fmul>
 80111ce:	e74c      	b.n	801106a <__ieee754_expf+0x36>
 80111d0:	2400      	movs	r4, #0
 80111d2:	e742      	b.n	801105a <__ieee754_expf+0x26>
 80111d4:	42b17217 	.word	0x42b17217
 80111d8:	42cff1b5 	.word	0x42cff1b5
 80111dc:	3eb17218 	.word	0x3eb17218
 80111e0:	3f851591 	.word	0x3f851591
 80111e4:	08011ea0 	.word	0x08011ea0
 80111e8:	08011e98 	.word	0x08011e98
 80111ec:	3331bb4c 	.word	0x3331bb4c
 80111f0:	35ddea0e 	.word	0x35ddea0e
 80111f4:	388ab355 	.word	0x388ab355
 80111f8:	3b360b61 	.word	0x3b360b61
 80111fc:	3e2aaaab 	.word	0x3e2aaaab
 8011200:	3fb8aa3b 	.word	0x3fb8aa3b
 8011204:	08011ea8 	.word	0x08011ea8
 8011208:	3f317180 	.word	0x3f317180
 801120c:	3717f7d1 	.word	0x3717f7d1
 8011210:	7149f2ca 	.word	0x7149f2ca

08011214 <with_errnof>:
 8011214:	b570      	push	{r4, r5, r6, lr}
 8011216:	000d      	movs	r5, r1
 8011218:	1c04      	adds	r4, r0, #0
 801121a:	f7fd fd2b 	bl	800ec74 <__errno>
 801121e:	6005      	str	r5, [r0, #0]
 8011220:	1c20      	adds	r0, r4, #0
 8011222:	bd70      	pop	{r4, r5, r6, pc}

08011224 <xflowf>:
 8011224:	b510      	push	{r4, lr}
 8011226:	1c0b      	adds	r3, r1, #0
 8011228:	2800      	cmp	r0, #0
 801122a:	d002      	beq.n	8011232 <xflowf+0xe>
 801122c:	2380      	movs	r3, #128	@ 0x80
 801122e:	061b      	lsls	r3, r3, #24
 8011230:	18cb      	adds	r3, r1, r3
 8011232:	1c18      	adds	r0, r3, #0
 8011234:	f7ef fe32 	bl	8000e9c <__aeabi_fmul>
 8011238:	2122      	movs	r1, #34	@ 0x22
 801123a:	f7ff ffeb 	bl	8011214 <with_errnof>
 801123e:	bd10      	pop	{r4, pc}

08011240 <__math_uflowf>:
 8011240:	2180      	movs	r1, #128	@ 0x80
 8011242:	b510      	push	{r4, lr}
 8011244:	0549      	lsls	r1, r1, #21
 8011246:	f7ff ffed 	bl	8011224 <xflowf>
 801124a:	bd10      	pop	{r4, pc}

0801124c <__math_oflowf>:
 801124c:	21e0      	movs	r1, #224	@ 0xe0
 801124e:	b510      	push	{r4, lr}
 8011250:	05c9      	lsls	r1, r1, #23
 8011252:	f7ff ffe7 	bl	8011224 <xflowf>
 8011256:	bd10      	pop	{r4, pc}

08011258 <_init>:
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	46c0      	nop			@ (mov r8, r8)
 801125c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801125e:	bc08      	pop	{r3}
 8011260:	469e      	mov	lr, r3
 8011262:	4770      	bx	lr

08011264 <_fini>:
 8011264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011266:	46c0      	nop			@ (mov r8, r8)
 8011268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801126a:	bc08      	pop	{r3}
 801126c:	469e      	mov	lr, r3
 801126e:	4770      	bx	lr
