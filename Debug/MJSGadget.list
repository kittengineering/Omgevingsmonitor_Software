
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001acf0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  0801adb0  0801adb0  0001bdb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c038  0801c038  0001e3c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c038  0801c038  0001d038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c040  0801c040  0001e3c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c040  0801c040  0001d040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c044  0801c044  0001d044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c8  20000000  0801c048  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d44  200003c8  0801c410  0001e3c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000410c  0801c410  0001f10c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001e3c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b4f2  00000000  00000000  0001e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007fc3  00000000  00000000  000498e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f0  00000000  00000000  000518a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c12  00000000  00000000  00053d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ed4  00000000  00000000  000559aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a373  00000000  00000000  0007687e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d508  00000000  00000000  000b0bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e0f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009824  00000000  00000000  0014e13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00157960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c8 	.word	0x200003c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801ad98 	.word	0x0801ad98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003cc 	.word	0x200003cc
 8000104:	0801ad98 	.word	0x0801ad98

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801b928 	.word	0x0801b928
 8000d08:	0801b968 	.word	0x0801b968
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801b9a4 	.word	0x0801b9a4
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003560:	f007 fd14 	bl	800af8c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003564:	2316      	movs	r3, #22
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e015      	b.n	800359a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2416      	movs	r4, #22
 8003574:	193b      	adds	r3, r7, r4
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2000      	movs	r0, #0
 8003582:	f007 fd6b 	bl	800b05c <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800358e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003590:	193b      	adds	r3, r7, r4
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	3201      	adds	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	2316      	movs	r3, #22
 800359c:	18fa      	adds	r2, r7, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e2      	bcc.n	800356e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80035a8:	f007 fd1e 	bl	800afe8 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	200003e4 	.word	0x200003e4

080035bc <WriteUint8ArrayEepromSafe>:

uint32_t WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	0019      	movs	r1, r3
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ffb0 	bl	800354c <WriteUint8ArrayEeprom>
    }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e010      	b.n	8003630 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800360e:	2016      	movs	r0, #22
 8003610:	183b      	adds	r3, r7, r0
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	0019      	movs	r1, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	3201      	adds	r2, #1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2316      	movs	r3, #22
 8003632:	18fa      	adds	r2, r7, r3
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e7      	bcc.n	800360e <ReadUint8ArrayEEprom+0x18>
    }
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003656:	f007 fc99 	bl	800af8c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800365a:	230e      	movs	r3, #14
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e00c      	b.n	800367e <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003664:	240e      	movs	r4, #14
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f007 fcc8 	bl	800b004 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003674:	193b      	adds	r3, r7, r4
 8003676:	193a      	adds	r2, r7, r4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	3204      	adds	r2, #4
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	230e      	movs	r3, #14
 8003680:	18fa      	adds	r2, r7, r3
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3eb      	bcc.n	8003664 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800368c:	f007 fcac 	bl	800afe8 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b005      	add	sp, #20
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800369c:	f001 ff5e 	bl	800555c <ReadBatteryVoltage>
 80036a0:	1c02      	adds	r2, r0, #0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <setCharges+0x20>)
 80036a4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80036a6:	f001 ffbb 	bl	8005620 <ReadSolarVoltage>
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <setCharges+0x24>)
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	2000050c 	.word	0x2000050c
 80036bc:	20000510 	.word	0x20000510

080036c0 <ESP_GetHT>:

void ESP_GetHT(float temp, float humid){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <ESP_GetHT+0x20>)
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036d0:	4b04      	ldr	r3, [pc, #16]	@ (80036e4 <ESP_GetHT+0x24>)
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b002      	add	sp, #8
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	20000504 	.word	0x20000504
 80036e4:	20000508 	.word	0x20000508

080036e8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	1dbb      	adds	r3, r7, #6
 80036f4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036f6:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <setMeasurement+0x2c>)
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <setMeasurement+0x30>)
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <setMeasurement+0x34>)
 8003704:	1dba      	adds	r2, r7, #6
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	801a      	strh	r2, [r3, #0]
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	20000504 	.word	0x20000504
 8003718:	20000508 	.word	0x20000508
 800371c:	20000514 	.word	0x20000514

08003720 <setMic>:
void setMic(float dB){
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003728:	4b03      	ldr	r3, [pc, #12]	@ (8003738 <setMic+0x18>)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	20000518 	.word	0x20000518

0800373c <SetConfigMode>:

void SetConfigMode(){
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003740:	4b02      	ldr	r3, [pc, #8]	@ (800374c <SetConfigMode+0x10>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
}
 8003746:	46c0      	nop			@ (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200004f2 	.word	0x200004f2

08003750 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003754:	f006 fbe6 	bl	8009f24 <HAL_GetUIDw0>
 8003758:	0002      	movs	r2, r0
 800375a:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <ESP_GetUID+0x28>)
 800375c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800375e:	f006 fbeb 	bl	8009f38 <HAL_GetUIDw1>
 8003762:	0002      	movs	r2, r0
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <ESP_GetUID+0x28>)
 8003766:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003768:	f006 fbf0 	bl	8009f4c <HAL_GetUIDw2>
 800376c:	0002      	movs	r2, r0
 800376e:	4b02      	ldr	r3, [pc, #8]	@ (8003778 <ESP_GetUID+0x28>)
 8003770:	609a      	str	r2, [r3, #8]
}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200004f8 	.word	0x200004f8

0800377c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <ESP_Init+0x20>)
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800378a:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <ESP_Init+0x24>)
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003790:	f7ff ffde 	bl	8003750 <ESP_GetUID>
}
 8003794:	46c0      	nop			@ (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200003e8 	.word	0x200003e8
 80037a0:	2000001d 	.word	0x2000001d

080037a4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80037a4:	b5b0      	push	{r4, r5, r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	000a      	movs	r2, r1
 80037ae:	1cbb      	adds	r3, r7, #2
 80037b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80037b2:	4b0e      	ldr	r3, [pc, #56]	@ (80037ec <ESP_Send+0x48>)
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	250f      	movs	r5, #15
 80037b8:	197c      	adds	r4, r7, r5
 80037ba:	1cbb      	adds	r3, r7, #2
 80037bc:	881a      	ldrh	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0019      	movs	r1, r3
 80037c2:	f00d fecf 	bl	8011564 <HAL_UART_Transmit_DMA>
 80037c6:	0003      	movs	r3, r0
 80037c8:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037ca:	197b      	adds	r3, r7, r5
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80037d2:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <ESP_Send+0x4c>)
 80037d4:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <ESP_Send+0x50>)
 80037d6:	0019      	movs	r1, r3
 80037d8:	2003      	movs	r0, #3
 80037da:	f005 ffef 	bl	80097bc <CreateLine>
    return false;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <ESP_Send+0x40>
  }
  return true;
 80037e2:	2301      	movs	r3, #1
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bdb0      	pop	{r4, r5, r7, pc}
 80037ec:	200003e8 	.word	0x200003e8
 80037f0:	0801adb0 	.word	0x0801adb0
 80037f4:	0801add0 	.word	0x0801add0

080037f8 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	000a      	movs	r2, r1
 8003802:	1cfb      	adds	r3, r7, #3
 8003804:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <ESP_Receive+0x58>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 800380c:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <ESP_Receive+0x5c>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	1cfb      	adds	r3, r7, #3
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b29a      	uxth	r2, r3
 8003816:	250f      	movs	r5, #15
 8003818:	197c      	adds	r4, r7, r5
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0019      	movs	r1, r3
 800381e:	f00d ff31 	bl	8011684 <HAL_UART_Receive_DMA>
 8003822:	0003      	movs	r3, r0
 8003824:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003826:	197b      	adds	r3, r7, r5
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 800382e:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <ESP_Receive+0x60>)
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <ESP_Receive+0x64>)
 8003832:	0019      	movs	r1, r3
 8003834:	2003      	movs	r0, #3
 8003836:	f005 ffc1 	bl	80097bc <CreateLine>
    RxComplete = true;
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <ESP_Receive+0x58>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
    return false;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <ESP_Receive+0x4e>
  }
  return true;
 8003844:	2301      	movs	r3, #1
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bdb0      	pop	{r4, r5, r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	200003ec 	.word	0x200003ec
 8003854:	200003e8 	.word	0x200003e8
 8003858:	0801add4 	.word	0x0801add4
 800385c:	0801add0 	.word	0x0801add0

08003860 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003868:	4b08      	ldr	r3, [pc, #32]	@ (800388c <HAL_UART_RxCpltCallback+0x2c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d108      	bne.n	8003884 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 8003872:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <HAL_UART_RxCpltCallback+0x30>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003878:	4a06      	ldr	r2, [pc, #24]	@ (8003894 <HAL_UART_RxCpltCallback+0x34>)
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <HAL_UART_RxCpltCallback+0x38>)
 800387c:	0019      	movs	r1, r3
 800387e:	2003      	movs	r0, #3
 8003880:	f005 ff9c 	bl	80097bc <CreateLine>
  }
}
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}
 800388c:	200003e8 	.word	0x200003e8
 8003890:	200003ec 	.word	0x200003ec
 8003894:	0801adf4 	.word	0x0801adf4
 8003898:	0801add0 	.word	0x0801add0

0800389c <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80038a4:	4b07      	ldr	r3, [pc, #28]	@ (80038c4 <HAL_UART_ErrorCallback+0x28>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d105      	bne.n	80038ba <HAL_UART_ErrorCallback+0x1e>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("An error has ocurred");
 80038ae:	4a06      	ldr	r2, [pc, #24]	@ (80038c8 <HAL_UART_ErrorCallback+0x2c>)
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_UART_ErrorCallback+0x30>)
 80038b2:	0019      	movs	r1, r3
 80038b4:	2003      	movs	r0, #3
 80038b6:	f005 ff81 	bl	80097bc <CreateLine>
  }
}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200003e8 	.word	0x200003e8
 80038c8:	0801ae00 	.word	0x0801ae00
 80038cc:	0801add0 	.word	0x0801add0

080038d0 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e010      	b.n	8003902 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	001a      	movs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1898      	adds	r0, r3, r2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	001a      	movs	r2, r3
 80038f4:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <uint8ArrayToString+0x44>)
 80038f6:	0019      	movs	r1, r3
 80038f8:	f014 fab0 	bl	8017e5c <siprintf>
  for (int i = 0; i < 12; i++)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b0b      	cmp	r3, #11
 8003906:	ddeb      	ble.n	80038e0 <uint8ArrayToString+0x10>
  }
}
 8003908:	46c0      	nop			@ (mov r8, r8)
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b004      	add	sp, #16
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	0801ae18 	.word	0x0801ae18

08003918 <CreateMessage>:
uint16_t CreateMessage(){
 8003918:	b5b0      	push	{r4, r5, r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af04      	add	r7, sp, #16
  uint16_t messageLength = 0;
 800391e:	1dbb      	adds	r3, r7, #6
 8003920:	2200      	movs	r2, #0
 8003922:	801a      	strh	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003924:	4b95      	ldr	r3, [pc, #596]	@ (8003b7c <CreateMessage+0x264>)
 8003926:	4896      	ldr	r0, [pc, #600]	@ (8003b80 <CreateMessage+0x268>)
 8003928:	220c      	movs	r2, #12
 800392a:	0019      	movs	r1, r3
 800392c:	f7ff fe63 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003930:	4b94      	ldr	r3, [pc, #592]	@ (8003b84 <CreateMessage+0x26c>)
 8003932:	4895      	ldr	r0, [pc, #596]	@ (8003b88 <CreateMessage+0x270>)
 8003934:	220c      	movs	r2, #12
 8003936:	0019      	movs	r1, r3
 8003938:	f7ff fe5d 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 800393c:	4b93      	ldr	r3, [pc, #588]	@ (8003b8c <CreateMessage+0x274>)
 800393e:	4894      	ldr	r0, [pc, #592]	@ (8003b90 <CreateMessage+0x278>)
 8003940:	220c      	movs	r2, #12
 8003942:	0019      	movs	r1, r3
 8003944:	f7ff fe57 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003948:	4b92      	ldr	r3, [pc, #584]	@ (8003b94 <CreateMessage+0x27c>)
 800394a:	4893      	ldr	r0, [pc, #588]	@ (8003b98 <CreateMessage+0x280>)
 800394c:	220c      	movs	r2, #12
 800394e:	0019      	movs	r1, r3
 8003950:	f7ff fe51 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003954:	4b91      	ldr	r3, [pc, #580]	@ (8003b9c <CreateMessage+0x284>)
 8003956:	4892      	ldr	r0, [pc, #584]	@ (8003ba0 <CreateMessage+0x288>)
 8003958:	220c      	movs	r2, #12
 800395a:	0019      	movs	r1, r3
 800395c:	f7ff fe4b 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003960:	4b90      	ldr	r3, [pc, #576]	@ (8003ba4 <CreateMessage+0x28c>)
 8003962:	4891      	ldr	r0, [pc, #580]	@ (8003ba8 <CreateMessage+0x290>)
 8003964:	221e      	movs	r2, #30
 8003966:	0019      	movs	r1, r3
 8003968:	f7ff fe45 	bl	80035f6 <ReadUint8ArrayEEprom>
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 800396c:	f7ff fe94 	bl	8003698 <setCharges>
//  sprintf(messagePart5, "\"name\":\"battery\", \"id\": \"%lu\", \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%3.2f", uid[2], (char*)nameConfig, Buffer, batteryCharge);
//  messageLength += strlen(messagePart5);
//  messageLength += 20;
//  return(messageLength);

  memset(message, 0, sizeof(message));
 8003970:	2380      	movs	r3, #128	@ 0x80
 8003972:	00da      	lsls	r2, r3, #3
 8003974:	4b8d      	ldr	r3, [pc, #564]	@ (8003bac <CreateMessage+0x294>)
 8003976:	2100      	movs	r1, #0
 8003978:	0018      	movs	r0, r3
 800397a:	f014 fb13 	bl	8017fa4 <memset>
  uint16_t index = 0;
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	2200      	movs	r2, #0
 8003982:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	4b88      	ldr	r3, [pc, #544]	@ (8003bac <CreateMessage+0x294>)
 800398a:	18d3      	adds	r3, r2, r3
 800398c:	4a88      	ldr	r2, [pc, #544]	@ (8003bb0 <CreateMessage+0x298>)
 800398e:	0011      	movs	r1, r2
 8003990:	0018      	movs	r0, r3
 8003992:	f014 fa63 	bl	8017e5c <siprintf>
  index = strlen(message);
 8003996:	4b85      	ldr	r3, [pc, #532]	@ (8003bac <CreateMessage+0x294>)
 8003998:	0018      	movs	r0, r3
 800399a:	f7fc fbb5 	bl	8000108 <strlen>
 800399e:	0002      	movs	r2, r0
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 80039a4:	4a75      	ldr	r2, [pc, #468]	@ (8003b7c <CreateMessage+0x264>)
 80039a6:	4b83      	ldr	r3, [pc, #524]	@ (8003bb4 <CreateMessage+0x29c>)
 80039a8:	0011      	movs	r1, r2
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7ff ff90 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	4b7d      	ldr	r3, [pc, #500]	@ (8003bac <CreateMessage+0x294>)
 80039b6:	18d4      	adds	r4, r2, r3
 80039b8:	4b7f      	ldr	r3, [pc, #508]	@ (8003bb8 <CreateMessage+0x2a0>)
 80039ba:	689d      	ldr	r5, [r3, #8]
 80039bc:	4b7f      	ldr	r3, [pc, #508]	@ (8003bbc <CreateMessage+0x2a4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	1c18      	adds	r0, r3, #0
 80039c2:	f7ff fccd 	bl	8003360 <__aeabi_f2d>
 80039c6:	0002      	movs	r2, r0
 80039c8:	000b      	movs	r3, r1
 80039ca:	4876      	ldr	r0, [pc, #472]	@ (8003ba4 <CreateMessage+0x28c>)
 80039cc:	497c      	ldr	r1, [pc, #496]	@ (8003bc0 <CreateMessage+0x2a8>)
 80039ce:	9202      	str	r2, [sp, #8]
 80039d0:	9303      	str	r3, [sp, #12]
 80039d2:	4b78      	ldr	r3, [pc, #480]	@ (8003bb4 <CreateMessage+0x29c>)
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	0003      	movs	r3, r0
 80039d8:	002a      	movs	r2, r5
 80039da:	0020      	movs	r0, r4
 80039dc:	f014 fa3e 	bl	8017e5c <siprintf>
  index = strlen(message);
 80039e0:	4b72      	ldr	r3, [pc, #456]	@ (8003bac <CreateMessage+0x294>)
 80039e2:	0018      	movs	r0, r3
 80039e4:	f7fc fb90 	bl	8000108 <strlen>
 80039e8:	0002      	movs	r2, r0
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 80039ee:	4a65      	ldr	r2, [pc, #404]	@ (8003b84 <CreateMessage+0x26c>)
 80039f0:	4b70      	ldr	r3, [pc, #448]	@ (8003bb4 <CreateMessage+0x29c>)
 80039f2:	0011      	movs	r1, r2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7ff ff6b 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	881a      	ldrh	r2, [r3, #0]
 80039fe:	4b6b      	ldr	r3, [pc, #428]	@ (8003bac <CreateMessage+0x294>)
 8003a00:	18d4      	adds	r4, r2, r3
 8003a02:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003a04:	689d      	ldr	r5, [r3, #8]
 8003a06:	4b6f      	ldr	r3, [pc, #444]	@ (8003bc4 <CreateMessage+0x2ac>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	1c18      	adds	r0, r3, #0
 8003a0c:	f7ff fca8 	bl	8003360 <__aeabi_f2d>
 8003a10:	0002      	movs	r2, r0
 8003a12:	000b      	movs	r3, r1
 8003a14:	4863      	ldr	r0, [pc, #396]	@ (8003ba4 <CreateMessage+0x28c>)
 8003a16:	496c      	ldr	r1, [pc, #432]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003a18:	9202      	str	r2, [sp, #8]
 8003a1a:	9303      	str	r3, [sp, #12]
 8003a1c:	4b65      	ldr	r3, [pc, #404]	@ (8003bb4 <CreateMessage+0x29c>)
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	0003      	movs	r3, r0
 8003a22:	002a      	movs	r2, r5
 8003a24:	0020      	movs	r0, r4
 8003a26:	f014 fa19 	bl	8017e5c <siprintf>
  index = strlen(message);
 8003a2a:	4b60      	ldr	r3, [pc, #384]	@ (8003bac <CreateMessage+0x294>)
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7fc fb6b 	bl	8000108 <strlen>
 8003a32:	0002      	movs	r2, r0
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003a38:	4a54      	ldr	r2, [pc, #336]	@ (8003b8c <CreateMessage+0x274>)
 8003a3a:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb4 <CreateMessage+0x29c>)
 8003a3c:	0011      	movs	r1, r2
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7ff ff46 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	4b58      	ldr	r3, [pc, #352]	@ (8003bac <CreateMessage+0x294>)
 8003a4a:	18d4      	adds	r4, r2, r3
 8003a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003a4e:	689d      	ldr	r5, [r3, #8]
 8003a50:	4b5e      	ldr	r3, [pc, #376]	@ (8003bcc <CreateMessage+0x2b4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	1c18      	adds	r0, r3, #0
 8003a56:	f7ff fc83 	bl	8003360 <__aeabi_f2d>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	000b      	movs	r3, r1
 8003a5e:	4851      	ldr	r0, [pc, #324]	@ (8003ba4 <CreateMessage+0x28c>)
 8003a60:	495b      	ldr	r1, [pc, #364]	@ (8003bd0 <CreateMessage+0x2b8>)
 8003a62:	9202      	str	r2, [sp, #8]
 8003a64:	9303      	str	r3, [sp, #12]
 8003a66:	4b53      	ldr	r3, [pc, #332]	@ (8003bb4 <CreateMessage+0x29c>)
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	002a      	movs	r2, r5
 8003a6e:	0020      	movs	r0, r4
 8003a70:	f014 f9f4 	bl	8017e5c <siprintf>
  index = strlen(message);
 8003a74:	4b4d      	ldr	r3, [pc, #308]	@ (8003bac <CreateMessage+0x294>)
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7fc fb46 	bl	8000108 <strlen>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003a82:	4a44      	ldr	r2, [pc, #272]	@ (8003b94 <CreateMessage+0x27c>)
 8003a84:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb4 <CreateMessage+0x29c>)
 8003a86:	0011      	movs	r1, r2
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff ff21 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	881a      	ldrh	r2, [r3, #0]
 8003a92:	4b46      	ldr	r3, [pc, #280]	@ (8003bac <CreateMessage+0x294>)
 8003a94:	18d0      	adds	r0, r2, r3
 8003a96:	4b48      	ldr	r3, [pc, #288]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd4 <CreateMessage+0x2bc>)
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	4c41      	ldr	r4, [pc, #260]	@ (8003ba4 <CreateMessage+0x28c>)
 8003aa0:	494d      	ldr	r1, [pc, #308]	@ (8003bd8 <CreateMessage+0x2c0>)
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	4b43      	ldr	r3, [pc, #268]	@ (8003bb4 <CreateMessage+0x29c>)
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	0023      	movs	r3, r4
 8003aaa:	f014 f9d7 	bl	8017e5c <siprintf>
  index = strlen(message);
 8003aae:	4b3f      	ldr	r3, [pc, #252]	@ (8003bac <CreateMessage+0x294>)
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7fc fb29 	bl	8000108 <strlen>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, batteryConfig);
 8003abc:	4a37      	ldr	r2, [pc, #220]	@ (8003b9c <CreateMessage+0x284>)
 8003abe:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb4 <CreateMessage+0x29c>)
 8003ac0:	0011      	movs	r1, r2
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f7ff ff04 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	4b37      	ldr	r3, [pc, #220]	@ (8003bac <CreateMessage+0x294>)
 8003ace:	18d4      	adds	r4, r2, r3
 8003ad0:	4b39      	ldr	r3, [pc, #228]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003ad2:	689d      	ldr	r5, [r3, #8]
 8003ad4:	4b41      	ldr	r3, [pc, #260]	@ (8003bdc <CreateMessage+0x2c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1c18      	adds	r0, r3, #0
 8003ada:	f7ff fc41 	bl	8003360 <__aeabi_f2d>
 8003ade:	0002      	movs	r2, r0
 8003ae0:	000b      	movs	r3, r1
 8003ae2:	4830      	ldr	r0, [pc, #192]	@ (8003ba4 <CreateMessage+0x28c>)
 8003ae4:	493e      	ldr	r1, [pc, #248]	@ (8003be0 <CreateMessage+0x2c8>)
 8003ae6:	9202      	str	r2, [sp, #8]
 8003ae8:	9303      	str	r3, [sp, #12]
 8003aea:	4b32      	ldr	r3, [pc, #200]	@ (8003bb4 <CreateMessage+0x29c>)
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	0003      	movs	r3, r0
 8003af0:	002a      	movs	r2, r5
 8003af2:	0020      	movs	r0, r4
 8003af4:	f014 f9b2 	bl	8017e5c <siprintf>
  index = strlen(message);
 8003af8:	4b2c      	ldr	r3, [pc, #176]	@ (8003bac <CreateMessage+0x294>)
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7fc fb04 	bl	8000108 <strlen>
 8003b00:	0002      	movs	r2, r0
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, solarConfig);
 8003b06:	4a37      	ldr	r2, [pc, #220]	@ (8003be4 <CreateMessage+0x2cc>)
 8003b08:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <CreateMessage+0x29c>)
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7ff fedf 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	881a      	ldrh	r2, [r3, #0]
 8003b16:	4b25      	ldr	r3, [pc, #148]	@ (8003bac <CreateMessage+0x294>)
 8003b18:	18d4      	adds	r4, r2, r3
 8003b1a:	4b27      	ldr	r3, [pc, #156]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003b1c:	689d      	ldr	r5, [r3, #8]
 8003b1e:	4b32      	ldr	r3, [pc, #200]	@ (8003be8 <CreateMessage+0x2d0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1c18      	adds	r0, r3, #0
 8003b24:	f7ff fc1c 	bl	8003360 <__aeabi_f2d>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	000b      	movs	r3, r1
 8003b2c:	481d      	ldr	r0, [pc, #116]	@ (8003ba4 <CreateMessage+0x28c>)
 8003b2e:	492f      	ldr	r1, [pc, #188]	@ (8003bec <CreateMessage+0x2d4>)
 8003b30:	9202      	str	r2, [sp, #8]
 8003b32:	9303      	str	r3, [sp, #12]
 8003b34:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb4 <CreateMessage+0x29c>)
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	0003      	movs	r3, r0
 8003b3a:	002a      	movs	r2, r5
 8003b3c:	0020      	movs	r0, r4
 8003b3e:	f014 f98d 	bl	8017e5c <siprintf>
  index = strlen(message);
 8003b42:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <CreateMessage+0x294>)
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7fc fadf 	bl	8000108 <strlen>
 8003b4a:	0002      	movs	r2, r0
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	801a      	strh	r2, [r3, #0]

  index = sprintf(&message[index], "]");
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <CreateMessage+0x294>)
 8003b56:	18d3      	adds	r3, r2, r3
 8003b58:	4a25      	ldr	r2, [pc, #148]	@ (8003bf0 <CreateMessage+0x2d8>)
 8003b5a:	0011      	movs	r1, r2
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f014 f97d 	bl	8017e5c <siprintf>
 8003b62:	0002      	movs	r2, r0
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003b68:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <CreateMessage+0x294>)
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7fc facc 	bl	8000108 <strlen>
 8003b70:	0003      	movs	r3, r0
 8003b72:	b29b      	uxth	r3, r3
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b002      	add	sp, #8
 8003b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b7c:	20000b38 	.word	0x20000b38
 8003b80:	0808000c 	.word	0x0808000c
 8003b84:	20000b44 	.word	0x20000b44
 8003b88:	08080018 	.word	0x08080018
 8003b8c:	20000b50 	.word	0x20000b50
 8003b90:	08080048 	.word	0x08080048
 8003b94:	20000b5c 	.word	0x20000b5c
 8003b98:	08080030 	.word	0x08080030
 8003b9c:	20000b68 	.word	0x20000b68
 8003ba0:	0808006c 	.word	0x0808006c
 8003ba4:	20000b74 	.word	0x20000b74
 8003ba8:	08080090 	.word	0x08080090
 8003bac:	2000051c 	.word	0x2000051c
 8003bb0:	0801ae20 	.word	0x0801ae20
 8003bb4:	20000b94 	.word	0x20000b94
 8003bb8:	200004f8 	.word	0x200004f8
 8003bbc:	20000504 	.word	0x20000504
 8003bc0:	0801ae24 	.word	0x0801ae24
 8003bc4:	20000508 	.word	0x20000508
 8003bc8:	0801ae78 	.word	0x0801ae78
 8003bcc:	20000518 	.word	0x20000518
 8003bd0:	0801aed0 	.word	0x0801aed0
 8003bd4:	20000514 	.word	0x20000514
 8003bd8:	0801af28 	.word	0x0801af28
 8003bdc:	2000050c 	.word	0x2000050c
 8003be0:	0801af7c 	.word	0x0801af7c
 8003be4:	20000bb0 	.word	0x20000bb0
 8003be8:	20000510 	.word	0x20000510
 8003bec:	0801afdc 	.word	0x0801afdc
 8003bf0:	0801b038 	.word	0x0801b038

08003bf4 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003bfc:	2380      	movs	r3, #128	@ 0x80
 8003bfe:	009a      	lsls	r2, r3, #2
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <SetCommandBuffer+0x24>)
 8003c04:	0018      	movs	r0, r3
 8003c06:	f014 f9e3 	bl	8017fd0 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003c0a:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <SetCommandBuffer+0x28>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20000930 	.word	0x20000930
 8003c1c:	20000b30 	.word	0x20000b30

08003c20 <StartProg>:
void StartProg(){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003c24:	2064      	movs	r0, #100	@ 0x64
 8003c26:	f006 f959 	bl	8009edc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <StartProg+0x60>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2101      	movs	r1, #1
 8003c30:	0018      	movs	r0, r3
 8003c32:	f007 fce8 	bl	800b606 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003c36:	2064      	movs	r0, #100	@ 0x64
 8003c38:	f006 f950 	bl	8009edc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003c3c:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <StartProg+0x60>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2102      	movs	r1, #2
 8003c42:	0018      	movs	r0, r3
 8003c44:	f007 fcdf 	bl	800b606 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003c48:	23fa      	movs	r3, #250	@ 0xfa
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f006 f945 	bl	8009edc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <StartProg+0x60>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	2101      	movs	r1, #1
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f007 fcd4 	bl	800b606 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003c5e:	23fa      	movs	r3, #250	@ 0xfa
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	0018      	movs	r0, r3
 8003c64:	f006 f93a 	bl	8009edc <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <StartProg+0x60>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	2102      	movs	r1, #2
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f007 fcc9 	bl	800b606 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003c74:	2028      	movs	r0, #40	@ 0x28
 8003c76:	f006 f931 	bl	8009edc <HAL_Delay>
}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	50001c00 	.word	0x50001c00

08003c84 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c86:	46c6      	mov	lr, r8
 8003c88:	b500      	push	{lr}
 8003c8a:	b09a      	sub	sp, #104	@ 0x68
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	61f8      	str	r0, [r7, #28]
 8003c90:	0008      	movs	r0, r1
 8003c92:	0011      	movs	r1, r2
 8003c94:	261a      	movs	r6, #26
 8003c96:	19bb      	adds	r3, r7, r6
 8003c98:	1c02      	adds	r2, r0, #0
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	2319      	movs	r3, #25
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	1c0a      	adds	r2, r1, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	466b      	mov	r3, sp
 8003ca6:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003ca8:	19bb      	adds	r3, r7, r6
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	1e5a      	subs	r2, r3, #1
 8003cb0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	60ba      	str	r2, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60fa      	str	r2, [r7, #12]
 8003cba:	68b8      	ldr	r0, [r7, #8]
 8003cbc:	68f9      	ldr	r1, [r7, #12]
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	0f52      	lsrs	r2, r2, #29
 8003cc2:	000e      	movs	r6, r1
 8003cc4:	00f6      	lsls	r6, r6, #3
 8003cc6:	617e      	str	r6, [r7, #20]
 8003cc8:	697e      	ldr	r6, [r7, #20]
 8003cca:	4316      	orrs	r6, r2
 8003ccc:	617e      	str	r6, [r7, #20]
 8003cce:	0002      	movs	r2, r0
 8003cd0:	00d2      	lsls	r2, r2, #3
 8003cd2:	613a      	str	r2, [r7, #16]
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	603a      	str	r2, [r7, #0]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	6838      	ldr	r0, [r7, #0]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	0f52      	lsrs	r2, r2, #29
 8003ce4:	000e      	movs	r6, r1
 8003ce6:	00f5      	lsls	r5, r6, #3
 8003ce8:	4315      	orrs	r5, r2
 8003cea:	0002      	movs	r2, r0
 8003cec:	00d4      	lsls	r4, r2, #3
 8003cee:	3307      	adds	r3, #7
 8003cf0:	08db      	lsrs	r3, r3, #3
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	466a      	mov	r2, sp
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	469d      	mov	sp, r3
 8003cfa:	466b      	mov	r3, sp
 8003cfc:	3300      	adds	r3, #0
 8003cfe:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003d00:	234f      	movs	r3, #79	@ 0x4f
 8003d02:	2118      	movs	r1, #24
 8003d04:	185b      	adds	r3, r3, r1
 8003d06:	19db      	adds	r3, r3, r7
 8003d08:	2203      	movs	r2, #3
 8003d0a:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003d0c:	234c      	movs	r3, #76	@ 0x4c
 8003d0e:	185b      	adds	r3, r3, r1
 8003d10:	19db      	adds	r3, r3, r7
 8003d12:	2200      	movs	r2, #0
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	e013      	b.n	8003d40 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003d18:	204c      	movs	r0, #76	@ 0x4c
 8003d1a:	2418      	movs	r4, #24
 8003d1c:	1903      	adds	r3, r0, r4
 8003d1e:	19db      	adds	r3, r3, r7
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	18d2      	adds	r2, r2, r3
 8003d26:	1903      	adds	r3, r0, r4
 8003d28:	19db      	adds	r3, r3, r7
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	7811      	ldrb	r1, [r2, #0]
 8003d2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d30:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003d32:	1903      	adds	r3, r0, r4
 8003d34:	19db      	adds	r3, r3, r7
 8003d36:	881a      	ldrh	r2, [r3, #0]
 8003d38:	1903      	adds	r3, r0, r4
 8003d3a:	19db      	adds	r3, r3, r7
 8003d3c:	3201      	adds	r2, #1
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	234c      	movs	r3, #76	@ 0x4c
 8003d42:	2018      	movs	r0, #24
 8003d44:	181b      	adds	r3, r3, r0
 8003d46:	19da      	adds	r2, r3, r7
 8003d48:	211a      	movs	r1, #26
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	8812      	ldrh	r2, [r2, #0]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d3e1      	bcc.n	8003d18 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003d5e:	233f      	movs	r3, #63	@ 0x3f
 8003d60:	0006      	movs	r6, r0
 8003d62:	199b      	adds	r3, r3, r6
 8003d64:	19db      	adds	r3, r3, r7
 8003d66:	224e      	movs	r2, #78	@ 0x4e
 8003d68:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003d6a:	2530      	movs	r5, #48	@ 0x30
 8003d6c:	19ab      	adds	r3, r5, r6
 8003d6e:	19db      	adds	r3, r3, r7
 8003d70:	4a60      	ldr	r2, [pc, #384]	@ (8003ef4 <ParseBuffer+0x270>)
 8003d72:	8811      	ldrh	r1, [r2, #0]
 8003d74:	8019      	strh	r1, [r3, #0]
 8003d76:	7892      	ldrb	r2, [r2, #2]
 8003d78:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003d7a:	2328      	movs	r3, #40	@ 0x28
 8003d7c:	199b      	adds	r3, r3, r6
 8003d7e:	19db      	adds	r3, r3, r7
 8003d80:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef8 <ParseBuffer+0x274>)
 8003d82:	6811      	ldr	r1, [r2, #0]
 8003d84:	6019      	str	r1, [r3, #0]
 8003d86:	8892      	ldrh	r2, [r2, #4]
 8003d88:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	199b      	adds	r3, r3, r6
 8003d8e:	19db      	adds	r3, r3, r7
 8003d90:	4a5a      	ldr	r2, [pc, #360]	@ (8003efc <ParseBuffer+0x278>)
 8003d92:	6811      	ldr	r1, [r2, #0]
 8003d94:	6019      	str	r1, [r3, #0]
 8003d96:	8892      	ldrh	r2, [r2, #4]
 8003d98:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003d9a:	231c      	movs	r3, #28
 8003d9c:	199b      	adds	r3, r3, r6
 8003d9e:	19db      	adds	r3, r3, r7
 8003da0:	223e      	movs	r2, #62	@ 0x3e
 8003da2:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003da4:	230c      	movs	r3, #12
 8003da6:	199b      	adds	r3, r3, r6
 8003da8:	19db      	adds	r3, r3, r7
 8003daa:	4a55      	ldr	r2, [pc, #340]	@ (8003f00 <ParseBuffer+0x27c>)
 8003dac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003dae:	c313      	stmia	r3!, {r0, r1, r4}
 8003db0:	8811      	ldrh	r1, [r2, #0]
 8003db2:	8019      	strh	r1, [r3, #0]
 8003db4:	7892      	ldrb	r2, [r2, #2]
 8003db6:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003db8:	2319      	movs	r3, #25
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003dc2:	19ab      	adds	r3, r5, r6
 8003dc4:	19da      	adds	r2, r3, r7
 8003dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc8:	0011      	movs	r1, r2
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f014 f914 	bl	8017ff8 <strstr>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003dd4:	2319      	movs	r3, #25
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10a      	bne.n	8003df4 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003dde:	2320      	movs	r3, #32
 8003de0:	2218      	movs	r2, #24
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	19da      	adds	r2, r3, r7
 8003de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f014 f904 	bl	8017ff8 <strstr>
 8003df0:	0003      	movs	r3, r0
 8003df2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003df4:	2319      	movs	r3, #25
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d10a      	bne.n	8003e14 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003dfe:	231c      	movs	r3, #28
 8003e00:	2218      	movs	r2, #24
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	19da      	adds	r2, r3, r7
 8003e06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e08:	0011      	movs	r1, r2
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f014 f8f4 	bl	8017ff8 <strstr>
 8003e10:	0003      	movs	r3, r0
 8003e12:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003e14:	2328      	movs	r3, #40	@ 0x28
 8003e16:	2418      	movs	r4, #24
 8003e18:	191b      	adds	r3, r3, r4
 8003e1a:	19da      	adds	r2, r3, r7
 8003e1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e1e:	0011      	movs	r1, r2
 8003e20:	0018      	movs	r0, r3
 8003e22:	f014 f8e9 	bl	8017ff8 <strstr>
 8003e26:	0003      	movs	r3, r0
 8003e28:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	191b      	adds	r3, r3, r4
 8003e2e:	19da      	adds	r2, r3, r7
 8003e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e32:	0011      	movs	r1, r2
 8003e34:	0018      	movs	r0, r3
 8003e36:	f014 f8df 	bl	8017ff8 <strstr>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003e3e:	231a      	movs	r3, #26
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d948      	bls.n	8003eda <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003e48:	213f      	movs	r1, #63	@ 0x3f
 8003e4a:	190b      	adds	r3, r1, r4
 8003e4c:	19db      	adds	r3, r3, r7
 8003e4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e50:	7812      	ldrb	r2, [r2, #0]
 8003e52:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003e54:	190b      	adds	r3, r1, r4
 8003e56:	19db      	adds	r3, r3, r7
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003e5c:	d104      	bne.n	8003e68 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003e5e:	234f      	movs	r3, #79	@ 0x4f
 8003e60:	191b      	adds	r3, r3, r4
 8003e62:	19db      	adds	r3, r3, r7
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003e68:	233f      	movs	r3, #63	@ 0x3f
 8003e6a:	2218      	movs	r2, #24
 8003e6c:	189b      	adds	r3, r3, r2
 8003e6e:	19db      	adds	r3, r3, r7
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b72      	cmp	r3, #114	@ 0x72
 8003e74:	d104      	bne.n	8003e80 <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003e76:	234f      	movs	r3, #79	@ 0x4f
 8003e78:	189b      	adds	r3, r3, r2
 8003e7a:	19db      	adds	r3, r3, r7
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003e80:	233f      	movs	r3, #63	@ 0x3f
 8003e82:	2218      	movs	r2, #24
 8003e84:	189b      	adds	r3, r3, r2
 8003e86:	19db      	adds	r3, r3, r7
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e8c:	d104      	bne.n	8003e98 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003e8e:	234f      	movs	r3, #79	@ 0x4f
 8003e90:	189b      	adds	r3, r3, r2
 8003e92:	19db      	adds	r3, r3, r7
 8003e94:	2205      	movs	r2, #5
 8003e96:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003e98:	213f      	movs	r1, #63	@ 0x3f
 8003e9a:	2018      	movs	r0, #24
 8003e9c:	180b      	adds	r3, r1, r0
 8003e9e:	19db      	adds	r3, r3, r7
 8003ea0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003ea6:	0002      	movs	r2, r0
 8003ea8:	188b      	adds	r3, r1, r2
 8003eaa:	19db      	adds	r3, r3, r7
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b45      	cmp	r3, #69	@ 0x45
 8003eb0:	d104      	bne.n	8003ebc <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003eb2:	234f      	movs	r3, #79	@ 0x4f
 8003eb4:	189b      	adds	r3, r3, r2
 8003eb6:	19db      	adds	r3, r3, r7
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003ebc:	213f      	movs	r1, #63	@ 0x3f
 8003ebe:	2018      	movs	r0, #24
 8003ec0:	180b      	adds	r3, r1, r0
 8003ec2:	19db      	adds	r3, r3, r7
 8003ec4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ec6:	7812      	ldrb	r2, [r2, #0]
 8003ec8:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003eca:	180b      	adds	r3, r1, r0
 8003ecc:	19db      	adds	r3, r3, r7
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b57      	cmp	r3, #87	@ 0x57
 8003ed2:	d102      	bne.n	8003eda <ParseBuffer+0x256>
      ConnectionMade = true;
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <ParseBuffer+0x280>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003eda:	234f      	movs	r3, #79	@ 0x4f
 8003edc:	2218      	movs	r2, #24
 8003ede:	189b      	adds	r3, r3, r2
 8003ee0:	19db      	adds	r3, r3, r7
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	46c5      	mov	sp, r8

}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b01a      	add	sp, #104	@ 0x68
 8003eec:	bc80      	pop	{r7}
 8003eee:	46b8      	mov	r8, r7
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	0801b03c 	.word	0x0801b03c
 8003ef8:	0801b040 	.word	0x0801b040
 8003efc:	0801b048 	.word	0x0801b048
 8003f00:	0801b050 	.word	0x0801b050
 8003f04:	200004f3 	.word	0x200004f3

08003f08 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <PollAwake+0x3c>)
 8003f10:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff fe6d 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7fc f8f3 	bl	8000108 <strlen>
 8003f22:	0003      	movs	r3, r0
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0011      	movs	r1, r2
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f7ff fc3a 	bl	80037a4 <ESP_Send>
 8003f30:	1e03      	subs	r3, r0, #0
 8003f32:	d001      	beq.n	8003f38 <PollAwake+0x30>
    return true;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <PollAwake+0x32>
  }
  else{
    return false;
 8003f38:	2300      	movs	r3, #0
  }
}
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b002      	add	sp, #8
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	0801b060 	.word	0x0801b060

08003f48 <RFPower>:
bool RFPower(){
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <RFPower+0x3c>)
 8003f50:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff fe4d 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7fc f8d3 	bl	8000108 <strlen>
 8003f62:	0003      	movs	r3, r0
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0011      	movs	r1, r2
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7ff fc1a 	bl	80037a4 <ESP_Send>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d001      	beq.n	8003f78 <RFPower+0x30>
    return true;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <RFPower+0x32>
  }
  else{
    return false;
 8003f78:	2300      	movs	r3, #0
  }
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b002      	add	sp, #8
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	0801b068 	.word	0x0801b068

08003f88 <CheckRFPower>:
bool CheckRFPower(){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc4 <CheckRFPower+0x3c>)
 8003f90:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7ff fe2d 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7fc f8b3 	bl	8000108 <strlen>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	0011      	movs	r1, r2
 8003faa:	0018      	movs	r0, r3
 8003fac:	f7ff fbfa 	bl	80037a4 <ESP_Send>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d001      	beq.n	8003fb8 <CheckRFPower+0x30>
    return true;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <CheckRFPower+0x32>
  }
  else{
    return false;
 8003fb8:	2300      	movs	r3, #0
  }
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b002      	add	sp, #8
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	0801b078 	.word	0x0801b078

08003fc8 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <ATRestore+0x3c>)
 8003fd0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7ff fe0d 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fc f893 	bl	8000108 <strlen>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0011      	movs	r1, r2
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7ff fbda 	bl	80037a4 <ESP_Send>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <ATRestore+0x30>
    return true;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <ATRestore+0x32>
  }
  else{
    return false;
 8003ff8:	2300      	movs	r3, #0
  }
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b002      	add	sp, #8
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	0801b088 	.word	0x0801b088

08004008 <CWINIT>:
bool CWINIT(){
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <CWINIT+0x3c>)
 8004010:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff fded 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f7fc f873 	bl	8000108 <strlen>
 8004022:	0003      	movs	r3, r0
 8004024:	b29a      	uxth	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0011      	movs	r1, r2
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fbba 	bl	80037a4 <ESP_Send>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d001      	beq.n	8004038 <CWINIT+0x30>
    return true;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <CWINIT+0x32>
  }
  else{
    return false;
 8004038:	2300      	movs	r3, #0
  }
}
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	0801b098 	.word	0x0801b098

08004048 <CWMODE1>:
bool CWMODE1(){
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <CWMODE1+0x3c>)
 8004050:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0018      	movs	r0, r3
 8004056:	f7ff fdcd 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f7fc f853 	bl	8000108 <strlen>
 8004062:	0003      	movs	r3, r0
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0011      	movs	r1, r2
 800406a:	0018      	movs	r0, r3
 800406c:	f7ff fb9a 	bl	80037a4 <ESP_Send>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d001      	beq.n	8004078 <CWMODE1+0x30>
    return true;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <CWMODE1+0x32>
  }
  else{
    return false;
 8004078:	2300      	movs	r3, #0
  }
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	0801b0a8 	.word	0x0801b0a8

08004088 <CWMODE2>:
bool CWMODE2(){
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800408e:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <CWMODE2+0x3c>)
 8004090:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff fdad 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0018      	movs	r0, r3
 800409e:	f7fc f833 	bl	8000108 <strlen>
 80040a2:	0003      	movs	r3, r0
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0011      	movs	r1, r2
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7ff fb7a 	bl	80037a4 <ESP_Send>
 80040b0:	1e03      	subs	r3, r0, #0
 80040b2:	d001      	beq.n	80040b8 <CWMODE2+0x30>
    return true;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <CWMODE2+0x32>
  }
  else{
    return false;
 80040b8:	2300      	movs	r3, #0
  }
}
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b002      	add	sp, #8
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	0801b0b8 	.word	0x0801b0b8

080040c8 <CWAUTOCONN>:
bool CWAUTOCONN(){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80040ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <CWAUTOCONN+0x3c>)
 80040d0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff fd8d 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7fc f813 	bl	8000108 <strlen>
 80040e2:	0003      	movs	r3, r0
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0011      	movs	r1, r2
 80040ea:	0018      	movs	r0, r3
 80040ec:	f7ff fb5a 	bl	80037a4 <ESP_Send>
 80040f0:	1e03      	subs	r3, r0, #0
 80040f2:	d001      	beq.n	80040f8 <CWAUTOCONN+0x30>
    return true;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <CWAUTOCONN+0x32>
  }
  else{
    return false;
 80040f8:	2300      	movs	r3, #0
  }
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b002      	add	sp, #8
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	0801b0c8 	.word	0x0801b0c8

08004108 <CWJAP>:
bool CWJAP(){
 8004108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410a:	46c6      	mov	lr, r8
 800410c:	b500      	push	{lr}
 800410e:	b0a2      	sub	sp, #136	@ 0x88
 8004110:	af00      	add	r7, sp, #0
 8004112:	466b      	mov	r3, sp
 8004114:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004116:	2618      	movs	r6, #24
 8004118:	19bb      	adds	r3, r7, r6
 800411a:	2264      	movs	r2, #100	@ 0x64
 800411c:	2100      	movs	r1, #0
 800411e:	0018      	movs	r0, r3
 8004120:	f013 ff40 	bl	8017fa4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004124:	4b35      	ldr	r3, [pc, #212]	@ (80041fc <CWJAP+0xf4>)
 8004126:	4a36      	ldr	r2, [pc, #216]	@ (8004200 <CWJAP+0xf8>)
 8004128:	4936      	ldr	r1, [pc, #216]	@ (8004204 <CWJAP+0xfc>)
 800412a:	19b8      	adds	r0, r7, r6
 800412c:	f013 fe96 	bl	8017e5c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004130:	19bb      	adds	r3, r7, r6
 8004132:	0018      	movs	r0, r3
 8004134:	f7fb ffe8 	bl	8000108 <strlen>
 8004138:	0002      	movs	r2, r0
 800413a:	216f      	movs	r1, #111	@ 0x6f
 800413c:	0030      	movs	r0, r6
 800413e:	180b      	adds	r3, r1, r0
 8004140:	19db      	adds	r3, r3, r7
 8004142:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004144:	180b      	adds	r3, r1, r0
 8004146:	19db      	adds	r3, r3, r7
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	3301      	adds	r3, #1
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	2180      	movs	r1, #128	@ 0x80
 8004150:	1879      	adds	r1, r7, r1
 8004152:	600a      	str	r2, [r1, #0]
 8004154:	001a      	movs	r2, r3
 8004156:	60ba      	str	r2, [r7, #8]
 8004158:	2200      	movs	r2, #0
 800415a:	60fa      	str	r2, [r7, #12]
 800415c:	68b8      	ldr	r0, [r7, #8]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	0002      	movs	r2, r0
 8004162:	0f52      	lsrs	r2, r2, #29
 8004164:	000e      	movs	r6, r1
 8004166:	00f6      	lsls	r6, r6, #3
 8004168:	617e      	str	r6, [r7, #20]
 800416a:	697e      	ldr	r6, [r7, #20]
 800416c:	4316      	orrs	r6, r2
 800416e:	617e      	str	r6, [r7, #20]
 8004170:	0002      	movs	r2, r0
 8004172:	00d2      	lsls	r2, r2, #3
 8004174:	613a      	str	r2, [r7, #16]
 8004176:	001a      	movs	r2, r3
 8004178:	603a      	str	r2, [r7, #0]
 800417a:	2200      	movs	r2, #0
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	6838      	ldr	r0, [r7, #0]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	0002      	movs	r2, r0
 8004184:	0f52      	lsrs	r2, r2, #29
 8004186:	000e      	movs	r6, r1
 8004188:	00f5      	lsls	r5, r6, #3
 800418a:	4315      	orrs	r5, r2
 800418c:	0002      	movs	r2, r0
 800418e:	00d4      	lsls	r4, r2, #3
 8004190:	3307      	adds	r3, #7
 8004192:	08db      	lsrs	r3, r3, #3
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	466a      	mov	r2, sp
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	469d      	mov	sp, r3
 800419c:	466b      	mov	r3, sp
 800419e:	3300      	adds	r3, #0
 80041a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80041a2:	246f      	movs	r4, #111	@ 0x6f
 80041a4:	2518      	movs	r5, #24
 80041a6:	1963      	adds	r3, r4, r5
 80041a8:	19db      	adds	r3, r3, r7
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	3301      	adds	r3, #1
 80041ae:	001a      	movs	r2, r3
 80041b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041b2:	2100      	movs	r1, #0
 80041b4:	0018      	movs	r0, r3
 80041b6:	f013 fef5 	bl	8017fa4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80041ba:	1963      	adds	r3, r4, r5
 80041bc:	19db      	adds	r3, r3, r7
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	1979      	adds	r1, r7, r5
 80041c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041c4:	0018      	movs	r0, r3
 80041c6:	f013 ff03 	bl	8017fd0 <strncpy>
  SetCommandBuffer(atCommand);
 80041ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7ff fd11 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80041d2:	1963      	adds	r3, r4, r5
 80041d4:	19db      	adds	r3, r3, r7
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	b29a      	uxth	r2, r3
 80041da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041dc:	0011      	movs	r1, r2
 80041de:	0018      	movs	r0, r3
 80041e0:	f7ff fae0 	bl	80037a4 <ESP_Send>
 80041e4:	1e03      	subs	r3, r0, #0
 80041e6:	d001      	beq.n	80041ec <CWJAP+0xe4>
    return true;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <CWJAP+0xe6>
  }
  else{
    return false;
 80041ec:	2300      	movs	r3, #0
 80041ee:	46c5      	mov	sp, r8
  }
}
 80041f0:	0018      	movs	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b022      	add	sp, #136	@ 0x88
 80041f6:	bc80      	pop	{r7}
 80041f8:	46b8      	mov	r8, r7
 80041fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041fc:	0801b9f0 	.word	0x0801b9f0
 8004200:	0801b9e4 	.word	0x0801b9e4
 8004204:	0801b0dc 	.word	0x0801b0dc

08004208 <CWMODE3>:
bool CWMODE3(){
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800420e:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <CWMODE3+0x3c>)
 8004210:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff fced 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f7fb ff73 	bl	8000108 <strlen>
 8004222:	0003      	movs	r3, r0
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0011      	movs	r1, r2
 800422a:	0018      	movs	r0, r3
 800422c:	f7ff faba 	bl	80037a4 <ESP_Send>
 8004230:	1e03      	subs	r3, r0, #0
 8004232:	d001      	beq.n	8004238 <CWMODE3+0x30>
    return true;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <CWMODE3+0x32>
  }
  else{
    return false;
 8004238:	2300      	movs	r3, #0
  }
}
 800423a:	0018      	movs	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	b002      	add	sp, #8
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	0801b0f4 	.word	0x0801b0f4

08004248 <CWSAP>:
bool CWSAP(){
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800424e:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <CWSAP+0x3c>)
 8004250:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff fccd 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	0018      	movs	r0, r3
 800425e:	f7fb ff53 	bl	8000108 <strlen>
 8004262:	0003      	movs	r3, r0
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	0011      	movs	r1, r2
 800426a:	0018      	movs	r0, r3
 800426c:	f7ff fa9a 	bl	80037a4 <ESP_Send>
 8004270:	1e03      	subs	r3, r0, #0
 8004272:	d001      	beq.n	8004278 <CWSAP+0x30>
    return true;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <CWSAP+0x32>
  }
  else{
    return false;
 8004278:	2300      	movs	r3, #0
  }
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b002      	add	sp, #8
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	0801b104 	.word	0x0801b104

08004288 <CIPMUX>:
bool CIPMUX(){
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800428e:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <CIPMUX+0x3c>)
 8004290:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f7ff fcad 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	0018      	movs	r0, r3
 800429e:	f7fb ff33 	bl	8000108 <strlen>
 80042a2:	0003      	movs	r3, r0
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	0011      	movs	r1, r2
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7ff fa7a 	bl	80037a4 <ESP_Send>
 80042b0:	1e03      	subs	r3, r0, #0
 80042b2:	d001      	beq.n	80042b8 <CIPMUX+0x30>
    return true;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <CIPMUX+0x32>
  }
  else{
    return false;
 80042b8:	2300      	movs	r3, #0
  }
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b002      	add	sp, #8
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	0801b128 	.word	0x0801b128

080042c8 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <WEBSERVER+0x3c>)
 80042d0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff fc8d 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f7fb ff13 	bl	8000108 <strlen>
 80042e2:	0003      	movs	r3, r0
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0011      	movs	r1, r2
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7ff fa5a 	bl	80037a4 <ESP_Send>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d001      	beq.n	80042f8 <WEBSERVER+0x30>
    return true;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <WEBSERVER+0x32>
  }
  else{
    return false;
 80042f8:	2300      	movs	r3, #0
  }
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b002      	add	sp, #8
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	0801b138 	.word	0x0801b138

08004308 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b0c5      	sub	sp, #276	@ 0x114
 800430c:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800430e:	2380      	movs	r3, #128	@ 0x80
 8004310:	005a      	lsls	r2, r3, #1
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	2100      	movs	r1, #0
 8004316:	0018      	movs	r0, r3
 8004318:	f013 fe44 	bl	8017fa4 <memset>
  uint16_t length = CreateMessage();
 800431c:	1dfc      	adds	r4, r7, #7
 800431e:	34ff      	adds	r4, #255	@ 0xff
 8004320:	f7ff fafa 	bl	8003918 <CreateMessage>
 8004324:	0003      	movs	r3, r0
 8004326:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004328:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <HTTPCPOST+0xa4>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HTTPCPOST+0x3a>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004330:	1dfb      	adds	r3, r7, #7
 8004332:	33ff      	adds	r3, #255	@ 0xff
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	4a1e      	ldr	r2, [pc, #120]	@ (80043b0 <HTTPCPOST+0xa8>)
 8004338:	491e      	ldr	r1, [pc, #120]	@ (80043b4 <HTTPCPOST+0xac>)
 800433a:	1d38      	adds	r0, r7, #4
 800433c:	f013 fd8e 	bl	8017e5c <siprintf>
 8004340:	e016      	b.n	8004370 <HTTPCPOST+0x68>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004342:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <HTTPCPOST+0xb0>)
 8004344:	481d      	ldr	r0, [pc, #116]	@ (80043bc <HTTPCPOST+0xb4>)
 8004346:	220c      	movs	r2, #12
 8004348:	0019      	movs	r1, r3
 800434a:	f7ff f954 	bl	80035f6 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 800434e:	4a1a      	ldr	r2, [pc, #104]	@ (80043b8 <HTTPCPOST+0xb0>)
 8004350:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <HTTPCPOST+0xb8>)
 8004352:	0011      	movs	r1, r2
 8004354:	0018      	movs	r0, r3
 8004356:	f7ff fabb 	bl	80038d0 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 800435a:	1dfb      	adds	r3, r7, #7
 800435c:	33ff      	adds	r3, #255	@ 0xff
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	4c17      	ldr	r4, [pc, #92]	@ (80043c0 <HTTPCPOST+0xb8>)
 8004362:	4a18      	ldr	r2, [pc, #96]	@ (80043c4 <HTTPCPOST+0xbc>)
 8004364:	4918      	ldr	r1, [pc, #96]	@ (80043c8 <HTTPCPOST+0xc0>)
 8004366:	1d38      	adds	r0, r7, #4
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	0023      	movs	r3, r4
 800436c:	f013 fd76 	bl	8017e5c <siprintf>
  }
    uint16_t len = strlen(atCommandBuff);
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	0018      	movs	r0, r3
 8004374:	f7fb fec8 	bl	8000108 <strlen>
 8004378:	0002      	movs	r2, r0
 800437a:	1d7b      	adds	r3, r7, #5
 800437c:	33ff      	adds	r3, #255	@ 0xff
 800437e:	801a      	strh	r2, [r3, #0]
  //char atCommand[len+1];
  //strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	0018      	movs	r0, r3
 8004384:	f7ff fc36 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004388:	1d7b      	adds	r3, r7, #5
 800438a:	33ff      	adds	r3, #255	@ 0xff
 800438c:	881a      	ldrh	r2, [r3, #0]
 800438e:	1d3b      	adds	r3, r7, #4
 8004390:	0011      	movs	r1, r2
 8004392:	0018      	movs	r0, r3
 8004394:	f7ff fa06 	bl	80037a4 <ESP_Send>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d001      	beq.n	80043a0 <HTTPCPOST+0x98>
    return true;
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HTTPCPOST+0x9a>
  }
  else{
    return false;
 80043a0:	2300      	movs	r3, #0
  }
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b043      	add	sp, #268	@ 0x10c
 80043a8:	bd90      	pop	{r4, r7, pc}
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	200004f4 	.word	0x200004f4
 80043b0:	0801ba08 	.word	0x0801ba08
 80043b4:	0801b150 	.word	0x0801b150
 80043b8:	20000bbc 	.word	0x20000bbc
 80043bc:	08080000 	.word	0x08080000
 80043c0:	20000bc8 	.word	0x20000bc8
 80043c4:	0801ba44 	.word	0x0801ba44
 80043c8:	0801b188 	.word	0x0801b188

080043cc <SENDDATA>:
bool SENDDATA(){
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	4c14      	ldr	r4, [pc, #80]	@ (8004420 <SENDDATA+0x54>)
 80043d0:	44a5      	add	sp, r4
 80043d2:	af00      	add	r7, sp, #0
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 80043d4:	23a4      	movs	r3, #164	@ 0xa4
 80043d6:	009a      	lsls	r2, r3, #2
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	2100      	movs	r1, #0
 80043dc:	0018      	movs	r0, r3
 80043de:	f013 fde1 	bl	8017fa4 <memset>
  //sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
  uint16_t len = strlen(message);
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <SENDDATA+0x58>)
 80043e4:	0018      	movs	r0, r3
 80043e6:	f7fb fe8f 	bl	8000108 <strlen>
 80043ea:	0002      	movs	r2, r0
 80043ec:	4c0e      	ldr	r4, [pc, #56]	@ (8004428 <SENDDATA+0x5c>)
 80043ee:	193b      	adds	r3, r7, r4
 80043f0:	801a      	strh	r2, [r3, #0]
  //char atCommand[len+1];
  //memset(atCommand, '\0', len+1);
  //1strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	0018      	movs	r0, r3
 80043f6:	f7ff fbfd 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)message, len)) {
 80043fa:	193b      	adds	r3, r7, r4
 80043fc:	881a      	ldrh	r2, [r3, #0]
 80043fe:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <SENDDATA+0x58>)
 8004400:	0011      	movs	r1, r2
 8004402:	0018      	movs	r0, r3
 8004404:	f7ff f9ce 	bl	80037a4 <ESP_Send>
 8004408:	1e03      	subs	r3, r0, #0
 800440a:	d001      	beq.n	8004410 <SENDDATA+0x44>
    return true;
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <SENDDATA+0x46>
  }
  else{
    return false;
 8004410:	2300      	movs	r3, #0
  }
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	23a7      	movs	r3, #167	@ 0xa7
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	449d      	add	sp, r3
 800441c:	bd90      	pop	{r4, r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	fffffd64 	.word	0xfffffd64
 8004424:	2000051c 	.word	0x2000051c
 8004428:	00000296 	.word	0x00000296

0800442c <SLEEP>:
bool SLEEP(){
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004432:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <SLEEP+0x3c>)
 8004434:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff fbdb 	bl	8003bf4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	0018      	movs	r0, r3
 8004442:	f7fb fe61 	bl	8000108 <strlen>
 8004446:	0003      	movs	r3, r0
 8004448:	b29a      	uxth	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0011      	movs	r1, r2
 800444e:	0018      	movs	r0, r3
 8004450:	f7ff f9a8 	bl	80037a4 <ESP_Send>
 8004454:	1e03      	subs	r3, r0, #0
 8004456:	d001      	beq.n	800445c <SLEEP+0x30>
    return true;
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <SLEEP+0x32>
  }
  else{
    return false;
 800445c:	2300      	movs	r3, #0
  }
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b002      	add	sp, #8
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	0801b1c8 	.word	0x0801b1c8

0800446c <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 800446c:	b5b0      	push	{r4, r5, r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	0002      	movs	r2, r0
 8004474:	1dfb      	adds	r3, r7, #7
 8004476:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004478:	4b50      	ldr	r3, [pc, #320]	@ (80045bc <DMA_ProcessBuffer+0x150>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	210e      	movs	r1, #14
 8004482:	187b      	adds	r3, r7, r1
 8004484:	43d2      	mvns	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004488:	200f      	movs	r0, #15
 800448a:	183b      	adds	r3, r7, r0
 800448c:	2203      	movs	r2, #3
 800448e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 8004490:	4b4b      	ldr	r3, [pc, #300]	@ (80045c0 <DMA_ProcessBuffer+0x154>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	187a      	adds	r2, r7, r1
 8004498:	7812      	ldrb	r2, [r2, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d131      	bne.n	8004502 <DMA_ProcessBuffer+0x96>
      if(retry >4){
 800449e:	4b49      	ldr	r3, [pc, #292]	@ (80045c4 <DMA_ProcessBuffer+0x158>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d91b      	bls.n	80044de <DMA_ProcessBuffer+0x72>
        retry = 0;
 80044a6:	4b47      	ldr	r3, [pc, #284]	@ (80045c4 <DMA_ProcessBuffer+0x158>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80044ac:	4b46      	ldr	r3, [pc, #280]	@ (80045c8 <DMA_ProcessBuffer+0x15c>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <DMA_ProcessBuffer+0x56>
 80044b4:	4b45      	ldr	r3, [pc, #276]	@ (80045cc <DMA_ProcessBuffer+0x160>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 80044bc:	183b      	adds	r3, r7, r0
 80044be:	2207      	movs	r2, #7
 80044c0:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80044c2:	4b41      	ldr	r3, [pc, #260]	@ (80045c8 <DMA_ProcessBuffer+0x15c>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d104      	bne.n	80044d4 <DMA_ProcessBuffer+0x68>
          status = RECEIVE_STATUS_HOME;
 80044ca:	230f      	movs	r3, #15
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	2208      	movs	r2, #8
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e016      	b.n	8004502 <DMA_ProcessBuffer+0x96>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80044d4:	230f      	movs	r3, #15
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	2206      	movs	r2, #6
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e011      	b.n	8004502 <DMA_ProcessBuffer+0x96>
        }
      }
     else{
       retry ++;
 80044de:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <DMA_ProcessBuffer+0x158>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4b37      	ldr	r3, [pc, #220]	@ (80045c4 <DMA_ProcessBuffer+0x158>)
 80044e8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80044ea:	f005 fced 	bl	8009ec8 <HAL_GetTick>
 80044ee:	0003      	movs	r3, r0
 80044f0:	33f5      	adds	r3, #245	@ 0xf5
 80044f2:	33ff      	adds	r3, #255	@ 0xff
 80044f4:	001a      	movs	r2, r3
 80044f6:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <DMA_ProcessBuffer+0x164>)
 80044f8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80044fa:	230f      	movs	r3, #15
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	2204      	movs	r2, #4
 8004500:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004502:	4b2f      	ldr	r3, [pc, #188]	@ (80045c0 <DMA_ProcessBuffer+0x154>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	210e      	movs	r1, #14
 800450a:	187a      	adds	r2, r7, r1
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d048      	beq.n	80045a4 <DMA_ProcessBuffer+0x138>
      retry = 0;
 8004512:	4b2c      	ldr	r3, [pc, #176]	@ (80045c4 <DMA_ProcessBuffer+0x158>)
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004518:	4b29      	ldr	r3, [pc, #164]	@ (80045c0 <DMA_ProcessBuffer+0x154>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	187a      	adds	r2, r7, r1
 8004520:	7812      	ldrb	r2, [r2, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d917      	bls.n	8004556 <DMA_ProcessBuffer+0xea>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004526:	4b26      	ldr	r3, [pc, #152]	@ (80045c0 <DMA_ProcessBuffer+0x154>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	001a      	movs	r2, r3
 800452e:	4b29      	ldr	r3, [pc, #164]	@ (80045d4 <DMA_ProcessBuffer+0x168>)
 8004530:	18d0      	adds	r0, r2, r3
 8004532:	187b      	adds	r3, r7, r1
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	4a21      	ldr	r2, [pc, #132]	@ (80045c0 <DMA_ProcessBuffer+0x154>)
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	b299      	uxth	r1, r3
 8004542:	230f      	movs	r3, #15
 8004544:	18fc      	adds	r4, r7, r3
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	001a      	movs	r2, r3
 800454c:	f7ff fb9a 	bl	8003c84 <ParseBuffer>
 8004550:	0003      	movs	r3, r0
 8004552:	7023      	strb	r3, [r4, #0]
 8004554:	e026      	b.n	80045a4 <DMA_ProcessBuffer+0x138>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004556:	4b1a      	ldr	r3, [pc, #104]	@ (80045c0 <DMA_ProcessBuffer+0x154>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	001a      	movs	r2, r3
 800455e:	4b1d      	ldr	r3, [pc, #116]	@ (80045d4 <DMA_ProcessBuffer+0x168>)
 8004560:	18d0      	adds	r0, r2, r3
 8004562:	4b17      	ldr	r3, [pc, #92]	@ (80045c0 <DMA_ProcessBuffer+0x154>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	001a      	movs	r2, r3
 800456a:	23ff      	movs	r3, #255	@ 0xff
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	b299      	uxth	r1, r3
 8004570:	250f      	movs	r5, #15
 8004572:	197c      	adds	r4, r7, r5
 8004574:	1dfb      	adds	r3, r7, #7
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	001a      	movs	r2, r3
 800457a:	f7ff fb83 	bl	8003c84 <ParseBuffer>
 800457e:	0003      	movs	r3, r0
 8004580:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 8004582:	220e      	movs	r2, #14
 8004584:	18bb      	adds	r3, r7, r2
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <DMA_ProcessBuffer+0x138>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 800458c:	18bb      	adds	r3, r7, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b299      	uxth	r1, r3
 8004592:	197c      	adds	r4, r7, r5
 8004594:	1dfb      	adds	r3, r7, #7
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	4b0e      	ldr	r3, [pc, #56]	@ (80045d4 <DMA_ProcessBuffer+0x168>)
 800459a:	0018      	movs	r0, r3
 800459c:	f7ff fb72 	bl	8003c84 <ParseBuffer>
 80045a0:	0003      	movs	r3, r0
 80045a2:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 80045a4:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <DMA_ProcessBuffer+0x154>)
 80045a6:	220e      	movs	r2, #14
 80045a8:	18ba      	adds	r2, r7, r2
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	701a      	strb	r2, [r3, #0]
    return status;
 80045ae:	230f      	movs	r3, #15
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	781b      	ldrb	r3, [r3, #0]
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b004      	add	sp, #16
 80045ba:	bdb0      	pop	{r4, r5, r7, pc}
 80045bc:	20002c5c 	.word	0x20002c5c
 80045c0:	20000927 	.word	0x20000927
 80045c4:	2000092c 	.word	0x2000092c
 80045c8:	20000b32 	.word	0x20000b32
 80045cc:	20000000 	.word	0x20000000
 80045d0:	20000928 	.word	0x20000928
 80045d4:	200003f0 	.word	0x200003f0

080045d8 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	0002      	movs	r2, r0
 80045e0:	1dfb      	adds	r3, r7, #7
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	1dbb      	adds	r3, r7, #6
 80045e6:	1c0a      	adds	r2, r1, #0
 80045e8:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80045ea:	210f      	movs	r1, #15
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80045f2:	1dbb      	adds	r3, r7, #6
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	1dfa      	adds	r2, r7, #7
 80045fe:	7812      	ldrb	r2, [r2, #0]
 8004600:	4251      	negs	r1, r2
 8004602:	414a      	adcs	r2, r1
 8004604:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004606:	1dbb      	adds	r3, r7, #6
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800460e:	230f      	movs	r3, #15
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	1dfa      	adds	r2, r7, #7
 8004614:	7812      	ldrb	r2, [r2, #0]
 8004616:	3a02      	subs	r2, #2
 8004618:	4251      	negs	r1, r2
 800461a:	414a      	adcs	r2, r1
 800461c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800461e:	1dbb      	adds	r3, r7, #6
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004626:	230f      	movs	r3, #15
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	1dfa      	adds	r2, r7, #7
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	3a05      	subs	r2, #5
 8004630:	4251      	negs	r1, r2
 8004632:	414a      	adcs	r2, r1
 8004634:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004636:	230f      	movs	r3, #15
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	781b      	ldrb	r3, [r3, #0]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bd80      	pop	{r7, pc}

08004644 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	0002      	movs	r2, r0
 800464c:	1dfb      	adds	r3, r7, #7
 800464e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004650:	230f      	movs	r3, #15
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004658:	1dfb      	adds	r3, r7, #7
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b0f      	cmp	r3, #15
 800465e:	d900      	bls.n	8004662 <AT_Send+0x1e>
 8004660:	e14a      	b.n	80048f8 <AT_Send+0x2b4>
 8004662:	009a      	lsls	r2, r3, #2
 8004664:	4ba8      	ldr	r3, [pc, #672]	@ (8004908 <AT_Send+0x2c4>)
 8004666:	18d3      	adds	r3, r2, r3
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 800466c:	4ba7      	ldr	r3, [pc, #668]	@ (800490c <AT_Send+0x2c8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0018      	movs	r0, r3
 8004672:	f005 f84d 	bl	8009710 <TimestampIsReached>
 8004676:	1e03      	subs	r3, r0, #0
 8004678:	d100      	bne.n	800467c <AT_Send+0x38>
 800467a:	e13c      	b.n	80048f6 <AT_Send+0x2b2>
    ATCommandSend = PollAwake();
 800467c:	230f      	movs	r3, #15
 800467e:	18fc      	adds	r4, r7, r3
 8004680:	f7ff fc42 	bl	8003f08 <PollAwake>
 8004684:	0003      	movs	r3, r0
 8004686:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004688:	f005 fc1e 	bl	8009ec8 <HAL_GetTick>
 800468c:	0003      	movs	r3, r0
 800468e:	3332      	adds	r3, #50	@ 0x32
 8004690:	001a      	movs	r2, r3
 8004692:	4b9e      	ldr	r3, [pc, #632]	@ (800490c <AT_Send+0x2c8>)
 8004694:	601a      	str	r2, [r3, #0]
  }
  break;
 8004696:	e12e      	b.n	80048f6 <AT_Send+0x2b2>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004698:	4a9d      	ldr	r2, [pc, #628]	@ (8004910 <AT_Send+0x2cc>)
 800469a:	4b9e      	ldr	r3, [pc, #632]	@ (8004914 <AT_Send+0x2d0>)
 800469c:	0019      	movs	r1, r3
 800469e:	2003      	movs	r0, #3
 80046a0:	f005 f88c 	bl	80097bc <CreateLine>
    ATCommandSend = RFPower();
 80046a4:	230f      	movs	r3, #15
 80046a6:	18fc      	adds	r4, r7, r3
 80046a8:	f7ff fc4e 	bl	8003f48 <RFPower>
 80046ac:	0003      	movs	r3, r0
 80046ae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046b0:	f005 fc0a 	bl	8009ec8 <HAL_GetTick>
 80046b4:	0003      	movs	r3, r0
 80046b6:	330a      	adds	r3, #10
 80046b8:	001a      	movs	r2, r3
 80046ba:	4b94      	ldr	r3, [pc, #592]	@ (800490c <AT_Send+0x2c8>)
 80046bc:	601a      	str	r2, [r3, #0]
    break;
 80046be:	e11b      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 80046c0:	4a95      	ldr	r2, [pc, #596]	@ (8004918 <AT_Send+0x2d4>)
 80046c2:	4b94      	ldr	r3, [pc, #592]	@ (8004914 <AT_Send+0x2d0>)
 80046c4:	0019      	movs	r1, r3
 80046c6:	2003      	movs	r0, #3
 80046c8:	f005 f878 	bl	80097bc <CreateLine>
    ATCommandSend = CheckRFPower();
 80046cc:	230f      	movs	r3, #15
 80046ce:	18fc      	adds	r4, r7, r3
 80046d0:	f7ff fc5a 	bl	8003f88 <CheckRFPower>
 80046d4:	0003      	movs	r3, r0
 80046d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046d8:	f005 fbf6 	bl	8009ec8 <HAL_GetTick>
 80046dc:	0003      	movs	r3, r0
 80046de:	330a      	adds	r3, #10
 80046e0:	001a      	movs	r2, r3
 80046e2:	4b8a      	ldr	r3, [pc, #552]	@ (800490c <AT_Send+0x2c8>)
 80046e4:	601a      	str	r2, [r3, #0]
    break;
 80046e6:	e107      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_RESTORE:
    Debug("Restoring ESP");
 80046e8:	4a8c      	ldr	r2, [pc, #560]	@ (800491c <AT_Send+0x2d8>)
 80046ea:	4b8a      	ldr	r3, [pc, #552]	@ (8004914 <AT_Send+0x2d0>)
 80046ec:	0019      	movs	r1, r3
 80046ee:	2003      	movs	r0, #3
 80046f0:	f005 f864 	bl	80097bc <CreateLine>
    ATCommandSend = ATRestore();
 80046f4:	230f      	movs	r3, #15
 80046f6:	18fc      	adds	r4, r7, r3
 80046f8:	f7ff fc66 	bl	8003fc8 <ATRestore>
 80046fc:	0003      	movs	r3, r0
 80046fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004700:	f005 fbe2 	bl	8009ec8 <HAL_GetTick>
 8004704:	0003      	movs	r3, r0
 8004706:	3332      	adds	r3, #50	@ 0x32
 8004708:	001a      	movs	r2, r3
 800470a:	4b80      	ldr	r3, [pc, #512]	@ (800490c <AT_Send+0x2c8>)
 800470c:	601a      	str	r2, [r3, #0]
    break;
 800470e:	e0f3      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004710:	4a83      	ldr	r2, [pc, #524]	@ (8004920 <AT_Send+0x2dc>)
 8004712:	4b80      	ldr	r3, [pc, #512]	@ (8004914 <AT_Send+0x2d0>)
 8004714:	0019      	movs	r1, r3
 8004716:	2003      	movs	r0, #3
 8004718:	f005 f850 	bl	80097bc <CreateLine>
    ATCommandSend = CWINIT();
 800471c:	230f      	movs	r3, #15
 800471e:	18fc      	adds	r4, r7, r3
 8004720:	f7ff fc72 	bl	8004008 <CWINIT>
 8004724:	0003      	movs	r3, r0
 8004726:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004728:	f005 fbce 	bl	8009ec8 <HAL_GetTick>
 800472c:	0003      	movs	r3, r0
 800472e:	33f5      	adds	r3, #245	@ 0xf5
 8004730:	33ff      	adds	r3, #255	@ 0xff
 8004732:	001a      	movs	r2, r3
 8004734:	4b75      	ldr	r3, [pc, #468]	@ (800490c <AT_Send+0x2c8>)
 8004736:	601a      	str	r2, [r3, #0]
    break;
 8004738:	e0de      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 800473a:	4a7a      	ldr	r2, [pc, #488]	@ (8004924 <AT_Send+0x2e0>)
 800473c:	4b75      	ldr	r3, [pc, #468]	@ (8004914 <AT_Send+0x2d0>)
 800473e:	0019      	movs	r1, r3
 8004740:	2003      	movs	r0, #3
 8004742:	f005 f83b 	bl	80097bc <CreateLine>
    ATCommandSend = CWMODE1();
 8004746:	230f      	movs	r3, #15
 8004748:	18fc      	adds	r4, r7, r3
 800474a:	f7ff fc7d 	bl	8004048 <CWMODE1>
 800474e:	0003      	movs	r3, r0
 8004750:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004752:	f005 fbb9 	bl	8009ec8 <HAL_GetTick>
 8004756:	0003      	movs	r3, r0
 8004758:	330a      	adds	r3, #10
 800475a:	001a      	movs	r2, r3
 800475c:	4b6b      	ldr	r3, [pc, #428]	@ (800490c <AT_Send+0x2c8>)
 800475e:	601a      	str	r2, [r3, #0]
    break;
 8004760:	e0ca      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004762:	4a70      	ldr	r2, [pc, #448]	@ (8004924 <AT_Send+0x2e0>)
 8004764:	4b6b      	ldr	r3, [pc, #428]	@ (8004914 <AT_Send+0x2d0>)
 8004766:	0019      	movs	r1, r3
 8004768:	2003      	movs	r0, #3
 800476a:	f005 f827 	bl	80097bc <CreateLine>
    ATCommandSend = CWMODE2();
 800476e:	230f      	movs	r3, #15
 8004770:	18fc      	adds	r4, r7, r3
 8004772:	f7ff fc89 	bl	8004088 <CWMODE2>
 8004776:	0003      	movs	r3, r0
 8004778:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800477a:	f005 fba5 	bl	8009ec8 <HAL_GetTick>
 800477e:	0003      	movs	r3, r0
 8004780:	330a      	adds	r3, #10
 8004782:	001a      	movs	r2, r3
 8004784:	4b61      	ldr	r3, [pc, #388]	@ (800490c <AT_Send+0x2c8>)
 8004786:	601a      	str	r2, [r3, #0]
    break;
 8004788:	e0b6      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 800478a:	4a67      	ldr	r2, [pc, #412]	@ (8004928 <AT_Send+0x2e4>)
 800478c:	4b61      	ldr	r3, [pc, #388]	@ (8004914 <AT_Send+0x2d0>)
 800478e:	0019      	movs	r1, r3
 8004790:	2003      	movs	r0, #3
 8004792:	f005 f813 	bl	80097bc <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004796:	230f      	movs	r3, #15
 8004798:	18fc      	adds	r4, r7, r3
 800479a:	f7ff fc95 	bl	80040c8 <CWAUTOCONN>
 800479e:	0003      	movs	r3, r0
 80047a0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047a2:	f005 fb91 	bl	8009ec8 <HAL_GetTick>
 80047a6:	0003      	movs	r3, r0
 80047a8:	330a      	adds	r3, #10
 80047aa:	001a      	movs	r2, r3
 80047ac:	4b57      	ldr	r3, [pc, #348]	@ (800490c <AT_Send+0x2c8>)
 80047ae:	601a      	str	r2, [r3, #0]
    break;
 80047b0:	e0a2      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80047b2:	4a5e      	ldr	r2, [pc, #376]	@ (800492c <AT_Send+0x2e8>)
 80047b4:	4b57      	ldr	r3, [pc, #348]	@ (8004914 <AT_Send+0x2d0>)
 80047b6:	0019      	movs	r1, r3
 80047b8:	2003      	movs	r0, #3
 80047ba:	f004 ffff 	bl	80097bc <CreateLine>
    ATCommandSend = CWJAP();
 80047be:	230f      	movs	r3, #15
 80047c0:	18fc      	adds	r4, r7, r3
 80047c2:	f7ff fca1 	bl	8004108 <CWJAP>
 80047c6:	0003      	movs	r3, r0
 80047c8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80047ca:	f005 fb7d 	bl	8009ec8 <HAL_GetTick>
 80047ce:	0003      	movs	r3, r0
 80047d0:	3332      	adds	r3, #50	@ 0x32
 80047d2:	001a      	movs	r2, r3
 80047d4:	4b4d      	ldr	r3, [pc, #308]	@ (800490c <AT_Send+0x2c8>)
 80047d6:	601a      	str	r2, [r3, #0]
    break;
 80047d8:	e08e      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80047da:	4a55      	ldr	r2, [pc, #340]	@ (8004930 <AT_Send+0x2ec>)
 80047dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004914 <AT_Send+0x2d0>)
 80047de:	0019      	movs	r1, r3
 80047e0:	2003      	movs	r0, #3
 80047e2:	f004 ffeb 	bl	80097bc <CreateLine>
    ATCommandSend = CWMODE3();
 80047e6:	230f      	movs	r3, #15
 80047e8:	18fc      	adds	r4, r7, r3
 80047ea:	f7ff fd0d 	bl	8004208 <CWMODE3>
 80047ee:	0003      	movs	r3, r0
 80047f0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047f2:	f005 fb69 	bl	8009ec8 <HAL_GetTick>
 80047f6:	0003      	movs	r3, r0
 80047f8:	330a      	adds	r3, #10
 80047fa:	001a      	movs	r2, r3
 80047fc:	4b43      	ldr	r3, [pc, #268]	@ (800490c <AT_Send+0x2c8>)
 80047fe:	601a      	str	r2, [r3, #0]
    break;
 8004800:	e07a      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004802:	4a4c      	ldr	r2, [pc, #304]	@ (8004934 <AT_Send+0x2f0>)
 8004804:	4b43      	ldr	r3, [pc, #268]	@ (8004914 <AT_Send+0x2d0>)
 8004806:	0019      	movs	r1, r3
 8004808:	2003      	movs	r0, #3
 800480a:	f004 ffd7 	bl	80097bc <CreateLine>
    ATCommandSend = CWSAP();
 800480e:	230f      	movs	r3, #15
 8004810:	18fc      	adds	r4, r7, r3
 8004812:	f7ff fd19 	bl	8004248 <CWSAP>
 8004816:	0003      	movs	r3, r0
 8004818:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800481a:	f005 fb55 	bl	8009ec8 <HAL_GetTick>
 800481e:	0003      	movs	r3, r0
 8004820:	330a      	adds	r3, #10
 8004822:	001a      	movs	r2, r3
 8004824:	4b39      	ldr	r3, [pc, #228]	@ (800490c <AT_Send+0x2c8>)
 8004826:	601a      	str	r2, [r3, #0]
    break;
 8004828:	e066      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 800482a:	4a43      	ldr	r2, [pc, #268]	@ (8004938 <AT_Send+0x2f4>)
 800482c:	4b39      	ldr	r3, [pc, #228]	@ (8004914 <AT_Send+0x2d0>)
 800482e:	0019      	movs	r1, r3
 8004830:	2003      	movs	r0, #3
 8004832:	f004 ffc3 	bl	80097bc <CreateLine>
    ATCommandSend = CIPMUX();
 8004836:	230f      	movs	r3, #15
 8004838:	18fc      	adds	r4, r7, r3
 800483a:	f7ff fd25 	bl	8004288 <CIPMUX>
 800483e:	0003      	movs	r3, r0
 8004840:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004842:	f005 fb41 	bl	8009ec8 <HAL_GetTick>
 8004846:	0003      	movs	r3, r0
 8004848:	330a      	adds	r3, #10
 800484a:	001a      	movs	r2, r3
 800484c:	4b2f      	ldr	r3, [pc, #188]	@ (800490c <AT_Send+0x2c8>)
 800484e:	601a      	str	r2, [r3, #0]
    break;
 8004850:	e052      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 8004852:	4a37      	ldr	r2, [pc, #220]	@ (8004930 <AT_Send+0x2ec>)
 8004854:	4b2f      	ldr	r3, [pc, #188]	@ (8004914 <AT_Send+0x2d0>)
 8004856:	0019      	movs	r1, r3
 8004858:	2003      	movs	r0, #3
 800485a:	f004 ffaf 	bl	80097bc <CreateLine>
    ATCommandSend = WEBSERVER();
 800485e:	230f      	movs	r3, #15
 8004860:	18fc      	adds	r4, r7, r3
 8004862:	f7ff fd31 	bl	80042c8 <WEBSERVER>
 8004866:	0003      	movs	r3, r0
 8004868:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800486a:	f005 fb2d 	bl	8009ec8 <HAL_GetTick>
 800486e:	0003      	movs	r3, r0
 8004870:	330a      	adds	r3, #10
 8004872:	001a      	movs	r2, r3
 8004874:	4b25      	ldr	r3, [pc, #148]	@ (800490c <AT_Send+0x2c8>)
 8004876:	601a      	str	r2, [r3, #0]
    break;
 8004878:	e03e      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 800487a:	4a2d      	ldr	r2, [pc, #180]	@ (8004930 <AT_Send+0x2ec>)
 800487c:	4b25      	ldr	r3, [pc, #148]	@ (8004914 <AT_Send+0x2d0>)
 800487e:	0019      	movs	r1, r3
 8004880:	2003      	movs	r0, #3
 8004882:	f004 ff9b 	bl	80097bc <CreateLine>
    ATCommandSend = HTTPCPOST();
 8004886:	230f      	movs	r3, #15
 8004888:	18fc      	adds	r4, r7, r3
 800488a:	f7ff fd3d 	bl	8004308 <HTTPCPOST>
 800488e:	0003      	movs	r3, r0
 8004890:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004892:	f005 fb19 	bl	8009ec8 <HAL_GetTick>
 8004896:	0003      	movs	r3, r0
 8004898:	33f5      	adds	r3, #245	@ 0xf5
 800489a:	33ff      	adds	r3, #255	@ 0xff
 800489c:	001a      	movs	r2, r3
 800489e:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <AT_Send+0x2c8>)
 80048a0:	601a      	str	r2, [r3, #0]
    break;
 80048a2:	e029      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_SENDDATA:
    Debug("Send the data");
 80048a4:	4a25      	ldr	r2, [pc, #148]	@ (800493c <AT_Send+0x2f8>)
 80048a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <AT_Send+0x2d0>)
 80048a8:	0019      	movs	r1, r3
 80048aa:	2003      	movs	r0, #3
 80048ac:	f004 ff86 	bl	80097bc <CreateLine>
    ATCommandSend = SENDDATA();
 80048b0:	230f      	movs	r3, #15
 80048b2:	18fc      	adds	r4, r7, r3
 80048b4:	f7ff fd8a 	bl	80043cc <SENDDATA>
 80048b8:	0003      	movs	r3, r0
 80048ba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80048bc:	f005 fb04 	bl	8009ec8 <HAL_GetTick>
 80048c0:	0003      	movs	r3, r0
 80048c2:	33f5      	adds	r3, #245	@ 0xf5
 80048c4:	33ff      	adds	r3, #255	@ 0xff
 80048c6:	001a      	movs	r2, r3
 80048c8:	4b10      	ldr	r3, [pc, #64]	@ (800490c <AT_Send+0x2c8>)
 80048ca:	601a      	str	r2, [r3, #0]
    break;
 80048cc:	e014      	b.n	80048f8 <AT_Send+0x2b4>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80048ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <AT_Send+0x2fc>)
 80048d0:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <AT_Send+0x2d0>)
 80048d2:	0019      	movs	r1, r3
 80048d4:	2003      	movs	r0, #3
 80048d6:	f004 ff71 	bl	80097bc <CreateLine>
    ATCommandSend = SLEEP();
 80048da:	230f      	movs	r3, #15
 80048dc:	18fc      	adds	r4, r7, r3
 80048de:	f7ff fda5 	bl	800442c <SLEEP>
 80048e2:	0003      	movs	r3, r0
 80048e4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80048e6:	f005 faef 	bl	8009ec8 <HAL_GetTick>
 80048ea:	0003      	movs	r3, r0
 80048ec:	330a      	adds	r3, #10
 80048ee:	001a      	movs	r2, r3
 80048f0:	4b06      	ldr	r3, [pc, #24]	@ (800490c <AT_Send+0x2c8>)
 80048f2:	601a      	str	r2, [r3, #0]
    break;
 80048f4:	e000      	b.n	80048f8 <AT_Send+0x2b4>
  break;
 80048f6:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80048f8:	230f      	movs	r3, #15
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	781b      	ldrb	r3, [r3, #0]
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b005      	add	sp, #20
 8004904:	bd90      	pop	{r4, r7, pc}
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	0801ba6c 	.word	0x0801ba6c
 800490c:	20000928 	.word	0x20000928
 8004910:	0801b1d8 	.word	0x0801b1d8
 8004914:	0801add0 	.word	0x0801add0
 8004918:	0801b1ec 	.word	0x0801b1ec
 800491c:	0801b200 	.word	0x0801b200
 8004920:	0801b210 	.word	0x0801b210
 8004924:	0801b224 	.word	0x0801b224
 8004928:	0801b23c 	.word	0x0801b23c
 800492c:	0801b254 	.word	0x0801b254
 8004930:	0801b268 	.word	0x0801b268
 8004934:	0801b284 	.word	0x0801b284
 8004938:	0801b2a0 	.word	0x0801b2a0
 800493c:	0801b2c4 	.word	0x0801b2c4
 8004940:	0801b2d4 	.word	0x0801b2d4

08004944 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800494a:	1dfb      	adds	r3, r7, #7
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004950:	4b79      	ldr	r3, [pc, #484]	@ (8004b38 <ESP_WakeTest+0x1f4>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b05      	cmp	r3, #5
 8004956:	d900      	bls.n	800495a <ESP_WakeTest+0x16>
 8004958:	e0d4      	b.n	8004b04 <ESP_WakeTest+0x1c0>
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	4b77      	ldr	r3, [pc, #476]	@ (8004b3c <ESP_WakeTest+0x1f8>)
 800495e:	18d3      	adds	r3, r2, r3
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004964:	4b76      	ldr	r3, [pc, #472]	@ (8004b40 <ESP_WakeTest+0x1fc>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2201      	movs	r2, #1
 800496a:	4053      	eors	r3, r2
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d036      	beq.n	80049e0 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004972:	2380      	movs	r3, #128	@ 0x80
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	4873      	ldr	r0, [pc, #460]	@ (8004b44 <ESP_WakeTest+0x200>)
 8004978:	2200      	movs	r2, #0
 800497a:	0019      	movs	r1, r3
 800497c:	f006 fe43 	bl	800b606 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004980:	2032      	movs	r0, #50	@ 0x32
 8004982:	f005 faab 	bl	8009edc <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004986:	2380      	movs	r3, #128	@ 0x80
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	486e      	ldr	r0, [pc, #440]	@ (8004b44 <ESP_WakeTest+0x200>)
 800498c:	2201      	movs	r2, #1
 800498e:	0019      	movs	r1, r3
 8004990:	f006 fe39 	bl	800b606 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004994:	200a      	movs	r0, #10
 8004996:	f005 faa1 	bl	8009edc <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800499a:	4b6b      	ldr	r3, [pc, #428]	@ (8004b48 <ESP_WakeTest+0x204>)
 800499c:	2200      	movs	r2, #0
 800499e:	2101      	movs	r1, #1
 80049a0:	0018      	movs	r0, r3
 80049a2:	f006 fe30 	bl	800b606 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80049a6:	200a      	movs	r0, #10
 80049a8:	f005 fa98 	bl	8009edc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80049ac:	4b66      	ldr	r3, [pc, #408]	@ (8004b48 <ESP_WakeTest+0x204>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	2102      	movs	r1, #2
 80049b2:	0018      	movs	r0, r3
 80049b4:	f006 fe27 	bl	800b606 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80049b8:	200a      	movs	r0, #10
 80049ba:	f005 fa8f 	bl	8009edc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80049be:	4b62      	ldr	r3, [pc, #392]	@ (8004b48 <ESP_WakeTest+0x204>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	2101      	movs	r1, #1
 80049c4:	0018      	movs	r0, r3
 80049c6:	f006 fe1e 	bl	800b606 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80049ca:	f005 fa7d 	bl	8009ec8 <HAL_GetTick>
 80049ce:	0003      	movs	r3, r0
 80049d0:	22af      	movs	r2, #175	@ 0xaf
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	189a      	adds	r2, r3, r2
 80049d6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b4c <ESP_WakeTest+0x208>)
 80049d8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80049da:	4b59      	ldr	r3, [pc, #356]	@ (8004b40 <ESP_WakeTest+0x1fc>)
 80049dc:	2201      	movs	r2, #1
 80049de:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80049e0:	4b5b      	ldr	r3, [pc, #364]	@ (8004b50 <ESP_WakeTest+0x20c>)
 80049e2:	21ff      	movs	r1, #255	@ 0xff
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fe ff07 	bl	80037f8 <ESP_Receive>
 80049ea:	1e03      	subs	r3, r0, #0
 80049ec:	d100      	bne.n	80049f0 <ESP_WakeTest+0xac>
 80049ee:	e099      	b.n	8004b24 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 80049f0:	4b51      	ldr	r3, [pc, #324]	@ (8004b38 <ESP_WakeTest+0x1f4>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80049f6:	e095      	b.n	8004b24 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80049f8:	4b54      	ldr	r3, [pc, #336]	@ (8004b4c <ESP_WakeTest+0x208>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f004 fe87 	bl	8009710 <TimestampIsReached>
 8004a02:	1e03      	subs	r3, r0, #0
 8004a04:	d100      	bne.n	8004a08 <ESP_WakeTest+0xc4>
 8004a06:	e08f      	b.n	8004b28 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004a08:	4b52      	ldr	r3, [pc, #328]	@ (8004b54 <ESP_WakeTest+0x210>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	1dfc      	adds	r4, r7, #7
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7ff fe18 	bl	8004644 <AT_Send>
 8004a14:	0003      	movs	r3, r0
 8004a16:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004a18:	1dfb      	adds	r3, r7, #7
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d100      	bne.n	8004a22 <ESP_WakeTest+0xde>
 8004a20:	e082      	b.n	8004b28 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 8004a22:	4b45      	ldr	r3, [pc, #276]	@ (8004b38 <ESP_WakeTest+0x1f4>)
 8004a24:	2202      	movs	r2, #2
 8004a26:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004a28:	e07e      	b.n	8004b28 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004a2a:	4b48      	ldr	r3, [pc, #288]	@ (8004b4c <ESP_WakeTest+0x208>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f004 fe6e 	bl	8009710 <TimestampIsReached>
 8004a34:	1e03      	subs	r3, r0, #0
 8004a36:	d100      	bne.n	8004a3a <ESP_WakeTest+0xf6>
 8004a38:	e078      	b.n	8004b2c <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004a3a:	4b47      	ldr	r3, [pc, #284]	@ (8004b58 <ESP_WakeTest+0x214>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7ff fd14 	bl	800446c <DMA_ProcessBuffer>
 8004a44:	0003      	movs	r3, r0
 8004a46:	001a      	movs	r2, r3
 8004a48:	4b44      	ldr	r3, [pc, #272]	@ (8004b5c <ESP_WakeTest+0x218>)
 8004a4a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004a4c:	4b43      	ldr	r3, [pc, #268]	@ (8004b5c <ESP_WakeTest+0x218>)
 8004a4e:	781a      	ldrb	r2, [r3, #0]
 8004a50:	4b41      	ldr	r3, [pc, #260]	@ (8004b58 <ESP_WakeTest+0x214>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	1dbc      	adds	r4, r7, #6
 8004a56:	0019      	movs	r1, r3
 8004a58:	0010      	movs	r0, r2
 8004a5a:	f7ff fdbd 	bl	80045d8 <ATCompare>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004a62:	4b3e      	ldr	r3, [pc, #248]	@ (8004b5c <ESP_WakeTest+0x218>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d102      	bne.n	8004a70 <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 8004a6a:	4b33      	ldr	r3, [pc, #204]	@ (8004b38 <ESP_WakeTest+0x1f4>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004a70:	4b3a      	ldr	r3, [pc, #232]	@ (8004b5c <ESP_WakeTest+0x218>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b07      	cmp	r3, #7
 8004a76:	d104      	bne.n	8004a82 <ESP_WakeTest+0x13e>
          StartProg();
 8004a78:	f7ff f8d2 	bl	8003c20 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b38 <ESP_WakeTest+0x1f4>)
 8004a7e:	2205      	movs	r2, #5
 8004a80:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004a82:	4b36      	ldr	r3, [pc, #216]	@ (8004b5c <ESP_WakeTest+0x218>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d109      	bne.n	8004a9e <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004a8a:	f005 fa1d 	bl	8009ec8 <HAL_GetTick>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	3332      	adds	r3, #50	@ 0x32
 8004a92:	001a      	movs	r2, r3
 8004a94:	4b2d      	ldr	r3, [pc, #180]	@ (8004b4c <ESP_WakeTest+0x208>)
 8004a96:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004a98:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <ESP_WakeTest+0x1f4>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004a9e:	1dbb      	adds	r3, r7, #6
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d042      	beq.n	8004b2c <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004aa6:	4b24      	ldr	r3, [pc, #144]	@ (8004b38 <ESP_WakeTest+0x1f4>)
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004aac:	e03e      	b.n	8004b2c <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004aae:	4b2c      	ldr	r3, [pc, #176]	@ (8004b60 <ESP_WakeTest+0x21c>)
 8004ab0:	22fa      	movs	r2, #250	@ 0xfa
 8004ab2:	0112      	lsls	r2, r2, #4
 8004ab4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b60 <ESP_WakeTest+0x21c>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004abc:	4b28      	ldr	r3, [pc, #160]	@ (8004b60 <ESP_WakeTest+0x21c>)
 8004abe:	22fa      	movs	r2, #250	@ 0xfa
 8004ac0:	0112      	lsls	r2, r2, #4
 8004ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b38 <ESP_WakeTest+0x1f4>)
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	701a      	strb	r2, [r3, #0]

      break;
 8004aca:	e030      	b.n	8004b2e <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004acc:	4b25      	ldr	r3, [pc, #148]	@ (8004b64 <ESP_WakeTest+0x220>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b40 <ESP_WakeTest+0x1fc>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b48 <ESP_WakeTest+0x204>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	2101      	movs	r1, #1
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f006 fd91 	bl	800b606 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004ae4:	2380      	movs	r3, #128	@ 0x80
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	4816      	ldr	r0, [pc, #88]	@ (8004b44 <ESP_WakeTest+0x200>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	0019      	movs	r1, r3
 8004aee:	f006 fd8a 	bl	800b606 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004af2:	4b15      	ldr	r3, [pc, #84]	@ (8004b48 <ESP_WakeTest+0x204>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	2102      	movs	r1, #2
 8004af8:	0018      	movs	r0, r3
 8004afa:	f006 fd84 	bl	800b606 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004afe:	f001 ffb7 	bl	8006a70 <SetESPMeasurementDone>
      break;
 8004b02:	e014      	b.n	8004b2e <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	@ (8004b38 <ESP_WakeTest+0x1f4>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	701a      	strb	r2, [r3, #0]
      break;
 8004b0a:	e010      	b.n	8004b2e <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004b0c:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <ESP_WakeTest+0x21c>)
 8004b0e:	22fa      	movs	r2, #250	@ 0xfa
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004b14:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <ESP_WakeTest+0x21c>)
 8004b16:	22fa      	movs	r2, #250	@ 0xfa
 8004b18:	0112      	lsls	r2, r2, #4
 8004b1a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004b1c:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <ESP_WakeTest+0x21c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004b22:	e004      	b.n	8004b2e <ESP_WakeTest+0x1ea>
      break;
 8004b24:	46c0      	nop			@ (mov r8, r8)
 8004b26:	e002      	b.n	8004b2e <ESP_WakeTest+0x1ea>
      break;
 8004b28:	46c0      	nop			@ (mov r8, r8)
 8004b2a:	e000      	b.n	8004b2e <ESP_WakeTest+0x1ea>
      break;
 8004b2c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b003      	add	sp, #12
 8004b34:	bd90      	pop	{r4, r7, pc}
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	20000b34 	.word	0x20000b34
 8004b3c:	0801baac 	.word	0x0801baac
 8004b40:	200004ef 	.word	0x200004ef
 8004b44:	50000800 	.word	0x50000800
 8004b48:	50001c00 	.word	0x50001c00
 8004b4c:	20000928 	.word	0x20000928
 8004b50:	200003f0 	.word	0x200003f0
 8004b54:	20000b32 	.word	0x20000b32
 8004b58:	20000b31 	.word	0x20000b31
 8004b5c:	2000001e 	.word	0x2000001e
 8004b60:	40000400 	.word	0x40000400
 8004b64:	20000000 	.word	0x20000000

08004b68 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004b6e:	1dfb      	adds	r3, r7, #7
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004b74:	4bd2      	ldr	r3, [pc, #840]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b0e      	cmp	r3, #14
 8004b7a:	d900      	bls.n	8004b7e <ESP_Upkeep+0x16>
 8004b7c:	e234      	b.n	8004fe8 <ESP_Upkeep+0x480>
 8004b7e:	009a      	lsls	r2, r3, #2
 8004b80:	4bd0      	ldr	r3, [pc, #832]	@ (8004ec4 <ESP_Upkeep+0x35c>)
 8004b82:	18d3      	adds	r3, r2, r3
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004b88:	4bcd      	ldr	r3, [pc, #820]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
      break;
 8004b8e:	e242      	b.n	8005016 <ESP_Upkeep+0x4ae>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004b90:	4bcd      	ldr	r3, [pc, #820]	@ (8004ec8 <ESP_Upkeep+0x360>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2201      	movs	r2, #1
 8004b96:	4053      	eors	r3, r2
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d036      	beq.n	8004c0c <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004b9e:	2380      	movs	r3, #128	@ 0x80
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	48ca      	ldr	r0, [pc, #808]	@ (8004ecc <ESP_Upkeep+0x364>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	f006 fd2d 	bl	800b606 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004bac:	2001      	movs	r0, #1
 8004bae:	f005 f995 	bl	8009edc <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004bb2:	2380      	movs	r3, #128	@ 0x80
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	48c5      	ldr	r0, [pc, #788]	@ (8004ecc <ESP_Upkeep+0x364>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	0019      	movs	r1, r3
 8004bbc:	f006 fd23 	bl	800b606 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	f005 f98b 	bl	8009edc <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004bc6:	4bc2      	ldr	r3, [pc, #776]	@ (8004ed0 <ESP_Upkeep+0x368>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2101      	movs	r1, #1
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f006 fd1a 	bl	800b606 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f005 f982 	bl	8009edc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004bd8:	4bbd      	ldr	r3, [pc, #756]	@ (8004ed0 <ESP_Upkeep+0x368>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	2102      	movs	r1, #2
 8004bde:	0018      	movs	r0, r3
 8004be0:	f006 fd11 	bl	800b606 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004be4:	2001      	movs	r0, #1
 8004be6:	f005 f979 	bl	8009edc <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004bea:	4bb9      	ldr	r3, [pc, #740]	@ (8004ed0 <ESP_Upkeep+0x368>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	2101      	movs	r1, #1
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f006 fd08 	bl	800b606 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004bf6:	f005 f967 	bl	8009ec8 <HAL_GetTick>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	22af      	movs	r2, #175	@ 0xaf
 8004bfe:	0092      	lsls	r2, r2, #2
 8004c00:	189a      	adds	r2, r3, r2
 8004c02:	4bb4      	ldr	r3, [pc, #720]	@ (8004ed4 <ESP_Upkeep+0x36c>)
 8004c04:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004c06:	4bb0      	ldr	r3, [pc, #704]	@ (8004ec8 <ESP_Upkeep+0x360>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004c0c:	4bb2      	ldr	r3, [pc, #712]	@ (8004ed8 <ESP_Upkeep+0x370>)
 8004c0e:	21ff      	movs	r1, #255	@ 0xff
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7fe fdf1 	bl	80037f8 <ESP_Receive>
 8004c16:	1e03      	subs	r3, r0, #0
 8004c18:	d100      	bne.n	8004c1c <ESP_Upkeep+0xb4>
 8004c1a:	e1f1      	b.n	8005000 <ESP_Upkeep+0x498>
        EspState = ESP_STATE_MODE_SELECT;
 8004c1c:	4ba8      	ldr	r3, [pc, #672]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004c1e:	220b      	movs	r2, #11
 8004c20:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004c22:	e1ed      	b.n	8005000 <ESP_Upkeep+0x498>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004c24:	4bad      	ldr	r3, [pc, #692]	@ (8004edc <ESP_Upkeep+0x374>)
 8004c26:	2209      	movs	r2, #9
 8004c28:	2110      	movs	r1, #16
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f013 f9ba 	bl	8017fa4 <memset>
      if(!InitIsDone || WifiReset){
 8004c30:	4bab      	ldr	r3, [pc, #684]	@ (8004ee0 <ESP_Upkeep+0x378>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2201      	movs	r2, #1
 8004c36:	4053      	eors	r3, r2
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <ESP_Upkeep+0xde>
 8004c3e:	4ba9      	ldr	r3, [pc, #676]	@ (8004ee4 <ESP_Upkeep+0x37c>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01a      	beq.n	8004c7c <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 7);
 8004c46:	4ba5      	ldr	r3, [pc, #660]	@ (8004edc <ESP_Upkeep+0x374>)
 8004c48:	4aa7      	ldr	r2, [pc, #668]	@ (8004ee8 <ESP_Upkeep+0x380>)
 8004c4a:	6811      	ldr	r1, [r2, #0]
 8004c4c:	6019      	str	r1, [r3, #0]
 8004c4e:	8891      	ldrh	r1, [r2, #4]
 8004c50:	8099      	strh	r1, [r3, #4]
 8004c52:	7992      	ldrb	r2, [r2, #6]
 8004c54:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8004c56:	4b9a      	ldr	r3, [pc, #616]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004c58:	2204      	movs	r2, #4
 8004c5a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004c5c:	4ba3      	ldr	r3, [pc, #652]	@ (8004eec <ESP_Upkeep+0x384>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004c62:	4ba3      	ldr	r3, [pc, #652]	@ (8004ef0 <ESP_Upkeep+0x388>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004c68:	4ba0      	ldr	r3, [pc, #640]	@ (8004eec <ESP_Upkeep+0x384>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	001a      	movs	r2, r3
 8004c6e:	4b9b      	ldr	r3, [pc, #620]	@ (8004edc <ESP_Upkeep+0x374>)
 8004c70:	5c9a      	ldrb	r2, [r3, r2]
 8004c72:	4ba0      	ldr	r3, [pc, #640]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004c74:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c76:	4ba0      	ldr	r3, [pc, #640]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004c7c:	4b98      	ldr	r3, [pc, #608]	@ (8004ee0 <ESP_Upkeep+0x378>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01f      	beq.n	8004cc4 <ESP_Upkeep+0x15c>
 8004c84:	4b9d      	ldr	r3, [pc, #628]	@ (8004efc <ESP_Upkeep+0x394>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4053      	eors	r3, r2
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d018      	beq.n	8004cc4 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004c92:	4b92      	ldr	r3, [pc, #584]	@ (8004edc <ESP_Upkeep+0x374>)
 8004c94:	4a9a      	ldr	r2, [pc, #616]	@ (8004f00 <ESP_Upkeep+0x398>)
 8004c96:	6811      	ldr	r1, [r2, #0]
 8004c98:	6019      	str	r1, [r3, #0]
 8004c9a:	8892      	ldrh	r2, [r2, #4]
 8004c9c:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004c9e:	4b88      	ldr	r3, [pc, #544]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004ca4:	4b91      	ldr	r3, [pc, #580]	@ (8004eec <ESP_Upkeep+0x384>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004caa:	4b91      	ldr	r3, [pc, #580]	@ (8004ef0 <ESP_Upkeep+0x388>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004cb0:	4b8e      	ldr	r3, [pc, #568]	@ (8004eec <ESP_Upkeep+0x384>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	001a      	movs	r2, r3
 8004cb6:	4b89      	ldr	r3, [pc, #548]	@ (8004edc <ESP_Upkeep+0x374>)
 8004cb8:	5c9a      	ldrb	r2, [r3, r2]
 8004cba:	4b8e      	ldr	r3, [pc, #568]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004cbc:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004cbe:	4b8e      	ldr	r3, [pc, #568]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004cc4:	4b86      	ldr	r3, [pc, #536]	@ (8004ee0 <ESP_Upkeep+0x378>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d025      	beq.n	8004d18 <ESP_Upkeep+0x1b0>
 8004ccc:	4b8b      	ldr	r3, [pc, #556]	@ (8004efc <ESP_Upkeep+0x394>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d021      	beq.n	8004d18 <ESP_Upkeep+0x1b0>
 8004cd4:	4b83      	ldr	r3, [pc, #524]	@ (8004ee4 <ESP_Upkeep+0x37c>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4053      	eors	r3, r2
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01a      	beq.n	8004d18 <ESP_Upkeep+0x1b0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004ce2:	4b7e      	ldr	r3, [pc, #504]	@ (8004edc <ESP_Upkeep+0x374>)
 8004ce4:	4a87      	ldr	r2, [pc, #540]	@ (8004f04 <ESP_Upkeep+0x39c>)
 8004ce6:	8811      	ldrh	r1, [r2, #0]
 8004ce8:	8019      	strh	r1, [r3, #0]
 8004cea:	7892      	ldrb	r2, [r2, #2]
 8004cec:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004cee:	4b74      	ldr	r3, [pc, #464]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004cf0:	2204      	movs	r2, #4
 8004cf2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004cf4:	4b7d      	ldr	r3, [pc, #500]	@ (8004eec <ESP_Upkeep+0x384>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004cfa:	4b7d      	ldr	r3, [pc, #500]	@ (8004ef0 <ESP_Upkeep+0x388>)
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004d00:	f003 ff8e 	bl	8008c20 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004d04:	4b79      	ldr	r3, [pc, #484]	@ (8004eec <ESP_Upkeep+0x384>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	001a      	movs	r2, r3
 8004d0a:	4b74      	ldr	r3, [pc, #464]	@ (8004edc <ESP_Upkeep+0x374>)
 8004d0c:	5c9a      	ldrb	r2, [r3, r2]
 8004d0e:	4b79      	ldr	r3, [pc, #484]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004d10:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d12:	4b79      	ldr	r3, [pc, #484]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004d18:	4b7b      	ldr	r3, [pc, #492]	@ (8004f08 <ESP_Upkeep+0x3a0>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d100      	bne.n	8004d22 <ESP_Upkeep+0x1ba>
 8004d20:	e170      	b.n	8005004 <ESP_Upkeep+0x49c>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8004d22:	4b6e      	ldr	r3, [pc, #440]	@ (8004edc <ESP_Upkeep+0x374>)
 8004d24:	4a79      	ldr	r2, [pc, #484]	@ (8004f0c <ESP_Upkeep+0x3a4>)
 8004d26:	6811      	ldr	r1, [r2, #0]
 8004d28:	6019      	str	r1, [r3, #0]
 8004d2a:	7912      	ldrb	r2, [r2, #4]
 8004d2c:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004d2e:	4b64      	ldr	r3, [pc, #400]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004d30:	2204      	movs	r2, #4
 8004d32:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004d34:	4b6d      	ldr	r3, [pc, #436]	@ (8004eec <ESP_Upkeep+0x384>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8004d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ef0 <ESP_Upkeep+0x388>)
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004d40:	f003 ff6e 	bl	8008c20 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004d44:	4b69      	ldr	r3, [pc, #420]	@ (8004eec <ESP_Upkeep+0x384>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	001a      	movs	r2, r3
 8004d4a:	4b64      	ldr	r3, [pc, #400]	@ (8004edc <ESP_Upkeep+0x374>)
 8004d4c:	5c9a      	ldrb	r2, [r3, r2]
 8004d4e:	4b69      	ldr	r3, [pc, #420]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004d50:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d52:	4b69      	ldr	r3, [pc, #420]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004d58:	e154      	b.n	8005004 <ESP_Upkeep+0x49c>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004d5a:	4b66      	ldr	r3, [pc, #408]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	1dfc      	adds	r4, r7, #7
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7ff fc6f 	bl	8004644 <AT_Send>
 8004d66:	0003      	movs	r3, r0
 8004d68:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004d6a:	1dfb      	adds	r3, r7, #7
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d100      	bne.n	8004d74 <ESP_Upkeep+0x20c>
 8004d72:	e149      	b.n	8005008 <ESP_Upkeep+0x4a0>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004d74:	4b52      	ldr	r3, [pc, #328]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004d76:	2203      	movs	r2, #3
 8004d78:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004d7a:	e145      	b.n	8005008 <ESP_Upkeep+0x4a0>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004d7c:	4b55      	ldr	r3, [pc, #340]	@ (8004ed4 <ESP_Upkeep+0x36c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f004 fcc5 	bl	8009710 <TimestampIsReached>
 8004d86:	1e03      	subs	r3, r0, #0
 8004d88:	d100      	bne.n	8004d8c <ESP_Upkeep+0x224>
 8004d8a:	e13f      	b.n	800500c <ESP_Upkeep+0x4a4>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff fb6b 	bl	800446c <DMA_ProcessBuffer>
 8004d96:	0003      	movs	r3, r0
 8004d98:	001a      	movs	r2, r3
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004f10 <ESP_Upkeep+0x3a8>)
 8004d9c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004d9e:	4b5c      	ldr	r3, [pc, #368]	@ (8004f10 <ESP_Upkeep+0x3a8>)
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	4b55      	ldr	r3, [pc, #340]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	1dbc      	adds	r4, r7, #6
 8004da8:	0019      	movs	r1, r3
 8004daa:	0010      	movs	r0, r2
 8004dac:	f7ff fc14 	bl	80045d8 <ATCompare>
 8004db0:	0003      	movs	r3, r0
 8004db2:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004db4:	4b56      	ldr	r3, [pc, #344]	@ (8004f10 <ESP_Upkeep+0x3a8>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d10f      	bne.n	8004ddc <ESP_Upkeep+0x274>
          if(ATCommand == AT_SENDDATA){
 8004dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b0e      	cmp	r3, #14
 8004dc2:	d108      	bne.n	8004dd6 <ESP_Upkeep+0x26e>
            ATCommand = AT_HTTPCPOST;
 8004dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004dc6:	220d      	movs	r2, #13
 8004dc8:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004dca:	4b4b      	ldr	r3, [pc, #300]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004dcc:	2202      	movs	r2, #2
 8004dce:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8004dd0:	4b46      	ldr	r3, [pc, #280]	@ (8004eec <ESP_Upkeep+0x384>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8004dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004dd8:	2204      	movs	r2, #4
 8004dda:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8004f10 <ESP_Upkeep+0x3a8>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d106      	bne.n	8004df2 <ESP_Upkeep+0x28a>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004de4:	f005 f870 	bl	8009ec8 <HAL_GetTick>
 8004de8:	0003      	movs	r3, r0
 8004dea:	330a      	adds	r3, #10
 8004dec:	001a      	movs	r2, r3
 8004dee:	4b39      	ldr	r3, [pc, #228]	@ (8004ed4 <ESP_Upkeep+0x36c>)
 8004df0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004df2:	4b47      	ldr	r3, [pc, #284]	@ (8004f10 <ESP_Upkeep+0x3a8>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b06      	cmp	r3, #6
 8004df8:	d116      	bne.n	8004e28 <ESP_Upkeep+0x2c0>
          if(ATCommand != AT_SENDDATA){
 8004dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b0e      	cmp	r3, #14
 8004e00:	d003      	beq.n	8004e0a <ESP_Upkeep+0x2a2>
            EspState = ESP_STATE_SEND;
 8004e02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004e04:	2204      	movs	r2, #4
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e00e      	b.n	8004e28 <ESP_Upkeep+0x2c0>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004e0c:	220d      	movs	r2, #13
 8004e0e:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004e10:	4b36      	ldr	r3, [pc, #216]	@ (8004eec <ESP_Upkeep+0x384>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	4b34      	ldr	r3, [pc, #208]	@ (8004eec <ESP_Upkeep+0x384>)
 8004e1a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004e1c:	4b36      	ldr	r3, [pc, #216]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004e1e:	2202      	movs	r2, #2
 8004e20:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004e22:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004e24:	2204      	movs	r2, #4
 8004e26:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004e28:	1dbb      	adds	r3, r7, #6
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d100      	bne.n	8004e32 <ESP_Upkeep+0x2ca>
 8004e30:	e0ec      	b.n	800500c <ESP_Upkeep+0x4a4>
          EspState = ESP_STATE_NEXT_AT;
 8004e32:	4b23      	ldr	r3, [pc, #140]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004e34:	2205      	movs	r2, #5
 8004e36:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004e38:	e0e8      	b.n	800500c <ESP_Upkeep+0x4a4>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004eec <ESP_Upkeep+0x384>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b2a      	ldr	r3, [pc, #168]	@ (8004eec <ESP_Upkeep+0x384>)
 8004e44:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004e46:	4b29      	ldr	r3, [pc, #164]	@ (8004eec <ESP_Upkeep+0x384>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	001a      	movs	r2, r3
 8004e4c:	4b23      	ldr	r3, [pc, #140]	@ (8004edc <ESP_Upkeep+0x374>)
 8004e4e:	5c9a      	ldrb	r2, [r3, r2]
 8004e50:	4b28      	ldr	r3, [pc, #160]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004e52:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004e54:	4b27      	ldr	r3, [pc, #156]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d102      	bne.n	8004e62 <ESP_Upkeep+0x2fa>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004e5c:	4b26      	ldr	r3, [pc, #152]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004e62:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b0d      	cmp	r3, #13
 8004e68:	d102      	bne.n	8004e70 <ESP_Upkeep+0x308>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004e6a:	4b23      	ldr	r3, [pc, #140]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004e70:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b0d      	cmp	r3, #13
 8004e76:	d006      	beq.n	8004e86 <ESP_Upkeep+0x31e>
 8004e78:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d002      	beq.n	8004e86 <ESP_Upkeep+0x31e>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004e80:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef8 <ESP_Upkeep+0x390>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004e86:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004e88:	2204      	movs	r2, #4
 8004e8a:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004e8c:	4b19      	ldr	r3, [pc, #100]	@ (8004ef4 <ESP_Upkeep+0x38c>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d000      	beq.n	8004e96 <ESP_Upkeep+0x32e>
 8004e94:	e0bc      	b.n	8005010 <ESP_Upkeep+0x4a8>
        if(Mode == AT_MODE_SEND){
 8004e96:	4b16      	ldr	r3, [pc, #88]	@ (8004ef0 <ESP_Upkeep+0x388>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d10c      	bne.n	8004eb8 <ESP_Upkeep+0x350>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004e9e:	f005 f813 	bl	8009ec8 <HAL_GetTick>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f14 <ESP_Upkeep+0x3ac>)
 8004ea6:	189a      	adds	r2, r3, r2
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed4 <ESP_Upkeep+0x36c>)
 8004eaa:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8004eac:	f003 feca 	bl	8008c44 <ResetESPIndicator>
          EspState = ESP_STATE_DEINIT;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004eb2:	220d      	movs	r2, #13
 8004eb4:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8004eb6:	e0ab      	b.n	8005010 <ESP_Upkeep+0x4a8>
          EspState = ESP_STATE_RESET;
 8004eb8:	4b01      	ldr	r3, [pc, #4]	@ (8004ec0 <ESP_Upkeep+0x358>)
 8004eba:	2209      	movs	r2, #9
 8004ebc:	701a      	strb	r2, [r3, #0]
    break;
 8004ebe:	e0a7      	b.n	8005010 <ESP_Upkeep+0x4a8>
 8004ec0:	2000001d 	.word	0x2000001d
 8004ec4:	0801bac4 	.word	0x0801bac4
 8004ec8:	200004ef 	.word	0x200004ef
 8004ecc:	50000800 	.word	0x50000800
 8004ed0:	50001c00 	.word	0x50001c00
 8004ed4:	20000928 	.word	0x20000928
 8004ed8:	200003f0 	.word	0x200003f0
 8004edc:	2000091c 	.word	0x2000091c
 8004ee0:	200004f0 	.word	0x200004f0
 8004ee4:	200004f1 	.word	0x200004f1
 8004ee8:	20000004 	.word	0x20000004
 8004eec:	20000926 	.word	0x20000926
 8004ef0:	20000b33 	.word	0x20000b33
 8004ef4:	20000b32 	.word	0x20000b32
 8004ef8:	20000b31 	.word	0x20000b31
 8004efc:	200004f3 	.word	0x200004f3
 8004f00:	20000010 	.word	0x20000010
 8004f04:	2000000c 	.word	0x2000000c
 8004f08:	200004f2 	.word	0x200004f2
 8004f0c:	20000018 	.word	0x20000018
 8004f10:	2000001f 	.word	0x2000001f
 8004f14:	000493e0 	.word	0x000493e0

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8004f18:	4b41      	ldr	r3, [pc, #260]	@ (8005020 <ESP_Upkeep+0x4b8>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004f1e:	4b41      	ldr	r3, [pc, #260]	@ (8005024 <ESP_Upkeep+0x4bc>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	2101      	movs	r1, #1
 8004f24:	0018      	movs	r0, r3
 8004f26:	f006 fb6e 	bl	800b606 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	f004 ffd6 	bl	8009edc <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	483c      	ldr	r0, [pc, #240]	@ (8005028 <ESP_Upkeep+0x4c0>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	0019      	movs	r1, r3
 8004f3a:	f006 fb64 	bl	800b606 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004f3e:	2001      	movs	r0, #1
 8004f40:	f004 ffcc 	bl	8009edc <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004f44:	4b37      	ldr	r3, [pc, #220]	@ (8005024 <ESP_Upkeep+0x4bc>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	2102      	movs	r1, #2
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f006 fb5b 	bl	800b606 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8004f50:	4b36      	ldr	r3, [pc, #216]	@ (800502c <ESP_Upkeep+0x4c4>)
 8004f52:	2209      	movs	r2, #9
 8004f54:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8004f56:	2001      	movs	r0, #1
 8004f58:	f004 ffc0 	bl	8009edc <HAL_Delay>
      break;
 8004f5c:	e05b      	b.n	8005016 <ESP_Upkeep+0x4ae>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8004f5e:	4b34      	ldr	r3, [pc, #208]	@ (8005030 <ESP_Upkeep+0x4c8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	0018      	movs	r0, r3
 8004f64:	f004 fbd4 	bl	8009710 <TimestampIsReached>
 8004f68:	1e03      	subs	r3, r0, #0
 8004f6a:	d103      	bne.n	8004f74 <ESP_Upkeep+0x40c>
 8004f6c:	4b31      	ldr	r3, [pc, #196]	@ (8005034 <ESP_Upkeep+0x4cc>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d04f      	beq.n	8005014 <ESP_Upkeep+0x4ac>
        if(Mode == AT_MODE_INIT){
 8004f74:	4b30      	ldr	r3, [pc, #192]	@ (8005038 <ESP_Upkeep+0x4d0>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <ESP_Upkeep+0x420>
          InitIsDone = true;
 8004f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800503c <ESP_Upkeep+0x4d4>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004f82:	4b2a      	ldr	r3, [pc, #168]	@ (800502c <ESP_Upkeep+0x4c4>)
 8004f84:	220b      	movs	r2, #11
 8004f86:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004f88:	4b2b      	ldr	r3, [pc, #172]	@ (8005038 <ESP_Upkeep+0x4d0>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d105      	bne.n	8004f9c <ESP_Upkeep+0x434>
          ConnectionMade = true;
 8004f90:	4b2b      	ldr	r3, [pc, #172]	@ (8005040 <ESP_Upkeep+0x4d8>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004f96:	4b25      	ldr	r3, [pc, #148]	@ (800502c <ESP_Upkeep+0x4c4>)
 8004f98:	220b      	movs	r2, #11
 8004f9a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8004f9c:	4b26      	ldr	r3, [pc, #152]	@ (8005038 <ESP_Upkeep+0x4d0>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d102      	bne.n	8004faa <ESP_Upkeep+0x442>
          EspState = ESP_STATE_INIT;
 8004fa4:	4b21      	ldr	r3, [pc, #132]	@ (800502c <ESP_Upkeep+0x4c4>)
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8004faa:	4b23      	ldr	r3, [pc, #140]	@ (8005038 <ESP_Upkeep+0x4d0>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d130      	bne.n	8005014 <ESP_Upkeep+0x4ac>
          EspState = ESP_STATE_CONFIG;
 8004fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800502c <ESP_Upkeep+0x4c4>)
 8004fb4:	220e      	movs	r2, #14
 8004fb6:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 8004fb8:	e02c      	b.n	8005014 <ESP_Upkeep+0x4ac>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 8004fba:	4a22      	ldr	r2, [pc, #136]	@ (8005044 <ESP_Upkeep+0x4dc>)
 8004fbc:	4b22      	ldr	r3, [pc, #136]	@ (8005048 <ESP_Upkeep+0x4e0>)
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	2003      	movs	r0, #3
 8004fc2:	f004 fbfb 	bl	80097bc <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8004fc6:	f011 fd4d 	bl	8016a64 <GetUsbRxPointer>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 f8b3 	bl	8005138 <Process_PC_Config>

      break;
 8004fd2:	e020      	b.n	8005016 <ESP_Upkeep+0x4ae>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800504c <ESP_Upkeep+0x4e4>)
 8004fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005048 <ESP_Upkeep+0x4e0>)
 8004fd8:	0019      	movs	r1, r3
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f004 fbee 	bl	80097bc <CreateLine>
      EspState = ESP_STATE_INIT;
 8004fe0:	4b12      	ldr	r3, [pc, #72]	@ (800502c <ESP_Upkeep+0x4c4>)
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	701a      	strb	r2, [r3, #0]
      break;
 8004fe6:	e016      	b.n	8005016 <ESP_Upkeep+0x4ae>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 8004fe8:	4a19      	ldr	r2, [pc, #100]	@ (8005050 <ESP_Upkeep+0x4e8>)
 8004fea:	4b17      	ldr	r3, [pc, #92]	@ (8005048 <ESP_Upkeep+0x4e0>)
 8004fec:	0019      	movs	r1, r3
 8004fee:	2003      	movs	r0, #3
 8004ff0:	f004 fbe4 	bl	80097bc <CreateLine>
      EspState = ESP_STATE_ERROR;
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <ESP_Upkeep+0x4c4>)
 8004ff6:	2207      	movs	r2, #7
 8004ff8:	701a      	strb	r2, [r3, #0]
      break;
 8004ffa:	e00c      	b.n	8005016 <ESP_Upkeep+0x4ae>
      break;
 8004ffc:	46c0      	nop			@ (mov r8, r8)
 8004ffe:	e00a      	b.n	8005016 <ESP_Upkeep+0x4ae>
      break;
 8005000:	46c0      	nop			@ (mov r8, r8)
 8005002:	e008      	b.n	8005016 <ESP_Upkeep+0x4ae>
    break;
 8005004:	46c0      	nop			@ (mov r8, r8)
 8005006:	e006      	b.n	8005016 <ESP_Upkeep+0x4ae>
         break;
 8005008:	46c0      	nop			@ (mov r8, r8)
 800500a:	e004      	b.n	8005016 <ESP_Upkeep+0x4ae>
      break;
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	e002      	b.n	8005016 <ESP_Upkeep+0x4ae>
    break;
 8005010:	46c0      	nop			@ (mov r8, r8)
 8005012:	e000      	b.n	8005016 <ESP_Upkeep+0x4ae>
      break;
 8005014:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	b003      	add	sp, #12
 800501c:	bd90      	pop	{r4, r7, pc}
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	200004ef 	.word	0x200004ef
 8005024:	50001c00 	.word	0x50001c00
 8005028:	50000800 	.word	0x50000800
 800502c:	2000001d 	.word	0x2000001d
 8005030:	20000928 	.word	0x20000928
 8005034:	200004f2 	.word	0x200004f2
 8005038:	20000b33 	.word	0x20000b33
 800503c:	200004f0 	.word	0x200004f0
 8005040:	200004f3 	.word	0x200004f3
 8005044:	0801b2f8 	.word	0x0801b2f8
 8005048:	0801add0 	.word	0x0801add0
 800504c:	0801b310 	.word	0x0801b310
 8005050:	0801b324 	.word	0x0801b324

08005054 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 800505c:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <I2CSensors_Init+0x30>)
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005062:	4a09      	ldr	r2, [pc, #36]	@ (8005088 <I2CSensors_Init+0x34>)
 8005064:	4b09      	ldr	r3, [pc, #36]	@ (800508c <I2CSensors_Init+0x38>)
 8005066:	0011      	movs	r1, r2
 8005068:	0018      	movs	r0, r3
 800506a:	f000 fe0d 	bl	8005c88 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 800506e:	4a06      	ldr	r2, [pc, #24]	@ (8005088 <I2CSensors_Init+0x34>)
 8005070:	4b06      	ldr	r3, [pc, #24]	@ (800508c <I2CSensors_Init+0x38>)
 8005072:	0011      	movs	r1, r2
 8005074:	0018      	movs	r0, r3
 8005076:	f000 fc77 	bl	8005968 <Gas_Init>
}
 800507a:	46c0      	nop			@ (mov r8, r8)
 800507c:	46bd      	mov	sp, r7
 800507e:	b002      	add	sp, #8
 8005080:	bd80      	pop	{r7, pc}
 8005082:	46c0      	nop			@ (mov r8, r8)
 8005084:	20000be4 	.word	0x20000be4
 8005088:	080050e5 	.word	0x080050e5
 800508c:	08005091 	.word	0x08005091

08005090 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005090:	b5b0      	push	{r4, r5, r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6039      	str	r1, [r7, #0]
 8005098:	0011      	movs	r1, r2
 800509a:	1dfb      	adds	r3, r7, #7
 800509c:	1c02      	adds	r2, r0, #0
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	1dbb      	adds	r3, r7, #6
 80050a2:	1c0a      	adds	r2, r1, #0
 80050a4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <ReadI2C+0x50>)
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	1dfb      	adds	r3, r7, #7
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	18db      	adds	r3, r3, r3
 80050b2:	b299      	uxth	r1, r3
 80050b4:	1dbb      	adds	r3, r7, #6
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	250f      	movs	r5, #15
 80050bc:	197c      	adds	r4, r7, r5
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	f006 fc5a 	bl	800b978 <HAL_I2C_Master_Receive_DMA>
 80050c4:	0003      	movs	r3, r0
 80050c6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80050c8:	197b      	adds	r3, r7, r5
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <ReadI2C+0x44>
        return false;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <ReadI2C+0x46>
    }
    return true;
 80050d4:	2301      	movs	r3, #1
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b004      	add	sp, #16
 80050dc:	bdb0      	pop	{r4, r5, r7, pc}
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	20000be4 	.word	0x20000be4

080050e4 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80050e4:	b5b0      	push	{r4, r5, r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6039      	str	r1, [r7, #0]
 80050ec:	0011      	movs	r1, r2
 80050ee:	1dfb      	adds	r3, r7, #7
 80050f0:	1c02      	adds	r2, r0, #0
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	1dbb      	adds	r3, r7, #6
 80050f6:	1c0a      	adds	r2, r1, #0
 80050f8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80050fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005134 <WriteI2C+0x50>)
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	1dfb      	adds	r3, r7, #7
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	18db      	adds	r3, r3, r3
 8005106:	b299      	uxth	r1, r3
 8005108:	1dbb      	adds	r3, r7, #6
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	250f      	movs	r5, #15
 8005110:	197c      	adds	r4, r7, r5
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	f006 fb2a 	bl	800b76c <HAL_I2C_Master_Transmit_DMA>
 8005118:	0003      	movs	r3, r0
 800511a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800511c:	197b      	adds	r3, r7, r5
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <WriteI2C+0x44>
        return false;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <WriteI2C+0x46>
    }
    return true;
 8005128:	2301      	movs	r3, #1
}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b004      	add	sp, #16
 8005130:	bdb0      	pop	{r4, r5, r7, pc}
 8005132:	46c0      	nop			@ (mov r8, r8)
 8005134:	20000be4 	.word	0x20000be4

08005138 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b0c3      	sub	sp, #268	@ 0x10c
 800513c:	af3e      	add	r7, sp, #248	@ 0xf8
 800513e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005140:	f011 fcb0 	bl	8016aa4 <GetUsbRxDataSize>
 8005144:	0003      	movs	r3, r0
 8005146:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b05      	cmp	r3, #5
 800514c:	d971      	bls.n	8005232 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2123      	movs	r1, #35	@ 0x23
 8005152:	0018      	movs	r0, r3
 8005154:	f012 ff2e 	bl	8017fb4 <strchr>
 8005158:	0003      	movs	r3, r0
 800515a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d065      	beq.n	800522e <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	785a      	ldrb	r2, [r3, #1]
 8005166:	4b34      	ldr	r3, [pc, #208]	@ (8005238 <Process_PC_Config+0x100>)
 8005168:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	789a      	ldrb	r2, [r3, #2]
 800516e:	4b32      	ldr	r3, [pc, #200]	@ (8005238 <Process_PC_Config+0x100>)
 8005170:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005172:	4b31      	ldr	r3, [pc, #196]	@ (8005238 <Process_PC_Config+0x100>)
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	3305      	adds	r3, #5
 8005178:	001a      	movs	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4293      	cmp	r3, r2
 800517e:	d351      	bcc.n	8005224 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	1cd9      	adds	r1, r3, #3
 8005184:	4b2c      	ldr	r3, [pc, #176]	@ (8005238 <Process_PC_Config+0x100>)
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	001a      	movs	r2, r3
 800518a:	4b2c      	ldr	r3, [pc, #176]	@ (800523c <Process_PC_Config+0x104>)
 800518c:	0018      	movs	r0, r3
 800518e:	f012 ffd3 	bl	8018138 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005192:	4b29      	ldr	r3, [pc, #164]	@ (8005238 <Process_PC_Config+0x100>)
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	3303      	adds	r3, #3
 8005198:	001a      	movs	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	189b      	adds	r3, r3, r2
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	b21a      	sxth	r2, r3
 80051a4:	4b24      	ldr	r3, [pc, #144]	@ (8005238 <Process_PC_Config+0x100>)
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	3304      	adds	r3, #4
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	18cb      	adds	r3, r1, r3
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	b21b      	sxth	r3, r3
 80051b2:	4313      	orrs	r3, r2
 80051b4:	b21b      	sxth	r3, r3
 80051b6:	b299      	uxth	r1, r3
 80051b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005238 <Process_PC_Config+0x100>)
 80051ba:	2381      	movs	r3, #129	@ 0x81
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80051c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005238 <Process_PC_Config+0x100>)
 80051c2:	2381      	movs	r3, #129	@ 0x81
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	5ad4      	ldrh	r4, [r2, r3]
 80051c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005238 <Process_PC_Config+0x100>)
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	3303      	adds	r3, #3
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	0011      	movs	r1, r2
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 f975 	bl	80054c4 <CRC16_ARC>
 80051da:	0003      	movs	r3, r0
 80051dc:	429c      	cmp	r4, r3
 80051de:	d007      	beq.n	80051f0 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80051e0:	4b15      	ldr	r3, [pc, #84]	@ (8005238 <Process_PC_Config+0x100>)
 80051e2:	785a      	ldrb	r2, [r3, #1]
 80051e4:	4b15      	ldr	r3, [pc, #84]	@ (800523c <Process_PC_Config+0x104>)
 80051e6:	0019      	movs	r1, r3
 80051e8:	2001      	movs	r0, #1
 80051ea:	f000 f919 	bl	8005420 <Create_Message>
 80051ee:	e016      	b.n	800521e <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80051f0:	4c11      	ldr	r4, [pc, #68]	@ (8005238 <Process_PC_Config+0x100>)
 80051f2:	466b      	mov	r3, sp
 80051f4:	0018      	movs	r0, r3
 80051f6:	0023      	movs	r3, r4
 80051f8:	3310      	adds	r3, #16
 80051fa:	22f4      	movs	r2, #244	@ 0xf4
 80051fc:	0019      	movs	r1, r3
 80051fe:	f012 ff9b 	bl	8018138 <memcpy>
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	6861      	ldr	r1, [r4, #4]
 8005206:	68a2      	ldr	r2, [r4, #8]
 8005208:	68e3      	ldr	r3, [r4, #12]
 800520a:	f000 f819 	bl	8005240 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 800520e:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <Process_PC_Config+0x100>)
 8005210:	7818      	ldrb	r0, [r3, #0]
 8005212:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <Process_PC_Config+0x100>)
 8005214:	785a      	ldrb	r2, [r3, #1]
 8005216:	4b09      	ldr	r3, [pc, #36]	@ (800523c <Process_PC_Config+0x104>)
 8005218:	0019      	movs	r1, r3
 800521a:	f000 f901 	bl	8005420 <Create_Message>
                }
                ResetUsbRxDataSize();
 800521e:	f011 fc29 	bl	8016a74 <ResetUsbRxDataSize>
                return;
 8005222:	e006      	b.n	8005232 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	0018      	movs	r0, r3
 8005228:	f011 fc46 	bl	8016ab8 <GetUsbRxNextChunk>
 800522c:	e001      	b.n	8005232 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 800522e:	f011 fc21 	bl	8016a74 <ResetUsbRxDataSize>
        }
    }
}
 8005232:	46bd      	mov	sp, r7
 8005234:	b005      	add	sp, #20
 8005236:	bd90      	pop	{r4, r7, pc}
 8005238:	20000be8 	.word	0x20000be8
 800523c:	20000bea 	.word	0x20000bea

08005240 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005240:	b084      	sub	sp, #16
 8005242:	b5b0      	push	{r4, r5, r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	2518      	movs	r5, #24
 800524a:	197c      	adds	r4, r7, r5
 800524c:	6020      	str	r0, [r4, #0]
 800524e:	6061      	str	r1, [r4, #4]
 8005250:	60a2      	str	r2, [r4, #8]
 8005252:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005254:	197b      	adds	r3, r7, r5
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2bfe      	cmp	r3, #254	@ 0xfe
 800525a:	d100      	bne.n	800525e <ProcessCmd+0x1e>
 800525c:	e09c      	b.n	8005398 <ProcessCmd+0x158>
 800525e:	dd00      	ble.n	8005262 <ProcessCmd+0x22>
 8005260:	e0bc      	b.n	80053dc <ProcessCmd+0x19c>
 8005262:	2b0c      	cmp	r3, #12
 8005264:	dc0a      	bgt.n	800527c <ProcessCmd+0x3c>
 8005266:	2b00      	cmp	r3, #0
 8005268:	da00      	bge.n	800526c <ProcessCmd+0x2c>
 800526a:	e0b7      	b.n	80053dc <ProcessCmd+0x19c>
 800526c:	2b0c      	cmp	r3, #12
 800526e:	d900      	bls.n	8005272 <ProcessCmd+0x32>
 8005270:	e0b4      	b.n	80053dc <ProcessCmd+0x19c>
 8005272:	009a      	lsls	r2, r3, #2
 8005274:	4b5d      	ldr	r3, [pc, #372]	@ (80053ec <ProcessCmd+0x1ac>)
 8005276:	18d3      	adds	r3, r2, r3
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	469f      	mov	pc, r3
 800527c:	2bfd      	cmp	r3, #253	@ 0xfd
 800527e:	d100      	bne.n	8005282 <ProcessCmd+0x42>
 8005280:	e084      	b.n	800538c <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005282:	e0ab      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005284:	2118      	movs	r1, #24
 8005286:	187b      	adds	r3, r7, r1
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	001a      	movs	r2, r3
 800528c:	187b      	adds	r3, r7, r1
 800528e:	1c99      	adds	r1, r3, #2
 8005290:	4857      	ldr	r0, [pc, #348]	@ (80053f0 <ProcessCmd+0x1b0>)
 8005292:	230c      	movs	r3, #12
 8005294:	f7fe f992 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005298:	e0a0      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800529a:	2118      	movs	r1, #24
 800529c:	187b      	adds	r3, r7, r1
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	001a      	movs	r2, r3
 80052a2:	187b      	adds	r3, r7, r1
 80052a4:	1c99      	adds	r1, r3, #2
 80052a6:	4853      	ldr	r0, [pc, #332]	@ (80053f4 <ProcessCmd+0x1b4>)
 80052a8:	230c      	movs	r3, #12
 80052aa:	f7fe f987 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052ae:	e095      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80052b0:	2118      	movs	r1, #24
 80052b2:	187b      	adds	r3, r7, r1
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	001a      	movs	r2, r3
 80052b8:	187b      	adds	r3, r7, r1
 80052ba:	1c99      	adds	r1, r3, #2
 80052bc:	484e      	ldr	r0, [pc, #312]	@ (80053f8 <ProcessCmd+0x1b8>)
 80052be:	230c      	movs	r3, #12
 80052c0:	f7fe f97c 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052c4:	e08a      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80052c6:	2118      	movs	r1, #24
 80052c8:	187b      	adds	r3, r7, r1
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	001a      	movs	r2, r3
 80052ce:	187b      	adds	r3, r7, r1
 80052d0:	1c99      	adds	r1, r3, #2
 80052d2:	484a      	ldr	r0, [pc, #296]	@ (80053fc <ProcessCmd+0x1bc>)
 80052d4:	230c      	movs	r3, #12
 80052d6:	f7fe f971 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052da:	e07f      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80052dc:	2118      	movs	r1, #24
 80052de:	187b      	adds	r3, r7, r1
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	001a      	movs	r2, r3
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	1c99      	adds	r1, r3, #2
 80052e8:	4845      	ldr	r0, [pc, #276]	@ (8005400 <ProcessCmd+0x1c0>)
 80052ea:	230c      	movs	r3, #12
 80052ec:	f7fe f966 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052f0:	e074      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80052f2:	2118      	movs	r1, #24
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	001a      	movs	r2, r3
 80052fa:	187b      	adds	r3, r7, r1
 80052fc:	1c99      	adds	r1, r3, #2
 80052fe:	4841      	ldr	r0, [pc, #260]	@ (8005404 <ProcessCmd+0x1c4>)
 8005300:	230c      	movs	r3, #12
 8005302:	f7fe f95b 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005306:	e069      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005308:	2118      	movs	r1, #24
 800530a:	187b      	adds	r3, r7, r1
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	001a      	movs	r2, r3
 8005310:	187b      	adds	r3, r7, r1
 8005312:	1c99      	adds	r1, r3, #2
 8005314:	483c      	ldr	r0, [pc, #240]	@ (8005408 <ProcessCmd+0x1c8>)
 8005316:	230c      	movs	r3, #12
 8005318:	f7fe f950 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800531c:	e05e      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 800531e:	2118      	movs	r1, #24
 8005320:	187b      	adds	r3, r7, r1
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	001a      	movs	r2, r3
 8005326:	187b      	adds	r3, r7, r1
 8005328:	1c99      	adds	r1, r3, #2
 800532a:	4838      	ldr	r0, [pc, #224]	@ (800540c <ProcessCmd+0x1cc>)
 800532c:	231e      	movs	r3, #30
 800532e:	f7fe f945 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005332:	e053      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005334:	2118      	movs	r1, #24
 8005336:	187b      	adds	r3, r7, r1
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	001a      	movs	r2, r3
 800533c:	187b      	adds	r3, r7, r1
 800533e:	1c99      	adds	r1, r3, #2
 8005340:	4833      	ldr	r0, [pc, #204]	@ (8005410 <ProcessCmd+0x1d0>)
 8005342:	230c      	movs	r3, #12
 8005344:	f7fe f93a 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005348:	e048      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800534a:	2118      	movs	r1, #24
 800534c:	187b      	adds	r3, r7, r1
 800534e:	785b      	ldrb	r3, [r3, #1]
 8005350:	001a      	movs	r2, r3
 8005352:	187b      	adds	r3, r7, r1
 8005354:	1c99      	adds	r1, r3, #2
 8005356:	482f      	ldr	r0, [pc, #188]	@ (8005414 <ProcessCmd+0x1d4>)
 8005358:	230c      	movs	r3, #12
 800535a:	f7fe f92f 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800535e:	e03d      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005360:	2118      	movs	r1, #24
 8005362:	187b      	adds	r3, r7, r1
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	001a      	movs	r2, r3
 8005368:	187b      	adds	r3, r7, r1
 800536a:	1c99      	adds	r1, r3, #2
 800536c:	482a      	ldr	r0, [pc, #168]	@ (8005418 <ProcessCmd+0x1d8>)
 800536e:	230c      	movs	r3, #12
 8005370:	f7fe f924 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005374:	e032      	b.n	80053dc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005376:	2118      	movs	r1, #24
 8005378:	187b      	adds	r3, r7, r1
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	001a      	movs	r2, r3
 800537e:	187b      	adds	r3, r7, r1
 8005380:	1c99      	adds	r1, r3, #2
 8005382:	4826      	ldr	r0, [pc, #152]	@ (800541c <ProcessCmd+0x1dc>)
 8005384:	230c      	movs	r3, #12
 8005386:	f7fe f919 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800538a:	e027      	b.n	80053dc <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 800538c:	4b18      	ldr	r3, [pc, #96]	@ (80053f0 <ProcessCmd+0x1b0>)
 800538e:	21ba      	movs	r1, #186	@ 0xba
 8005390:	0018      	movs	r0, r3
 8005392:	f7fe f959 	bl	8003648 <ClearEEprom>
        break;
 8005396:	e021      	b.n	80053dc <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005398:	2118      	movs	r1, #24
 800539a:	187b      	adds	r3, r7, r1
 800539c:	789b      	ldrb	r3, [r3, #2]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	b21a      	sxth	r2, r3
 80053a2:	187b      	adds	r3, r7, r1
 80053a4:	78db      	ldrb	r3, [r3, #3]
 80053a6:	b21b      	sxth	r3, r3
 80053a8:	4313      	orrs	r3, r2
 80053aa:	b21a      	sxth	r2, r3
 80053ac:	1dbb      	adds	r3, r7, #6
 80053ae:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80053b0:	1dbb      	adds	r3, r7, #6
 80053b2:	881a      	ldrh	r2, [r3, #0]
 80053b4:	23c0      	movs	r3, #192	@ 0xc0
 80053b6:	015b      	lsls	r3, r3, #5
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d207      	bcs.n	80053cc <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 80053bc:	1dbb      	adds	r3, r7, #6
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	4a0b      	ldr	r2, [pc, #44]	@ (80053f0 <ProcessCmd+0x1b0>)
 80053c2:	0019      	movs	r1, r3
 80053c4:	0010      	movs	r0, r2
 80053c6:	f7fe f93f 	bl	8003648 <ClearEEprom>
            break;
 80053ca:	e006      	b.n	80053da <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80053cc:	23c0      	movs	r3, #192	@ 0xc0
 80053ce:	015b      	lsls	r3, r3, #5
 80053d0:	4a07      	ldr	r2, [pc, #28]	@ (80053f0 <ProcessCmd+0x1b0>)
 80053d2:	0019      	movs	r1, r3
 80053d4:	0010      	movs	r0, r2
 80053d6:	f7fe f937 	bl	8003648 <ClearEEprom>
            break;
 80053da:	46c0      	nop			@ (mov r8, r8)
}
 80053dc:	46c0      	nop			@ (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b002      	add	sp, #8
 80053e2:	bcb0      	pop	{r4, r5, r7}
 80053e4:	bc08      	pop	{r3}
 80053e6:	b004      	add	sp, #16
 80053e8:	4718      	bx	r3
 80053ea:	46c0      	nop			@ (mov r8, r8)
 80053ec:	0801bb00 	.word	0x0801bb00
 80053f0:	08080000 	.word	0x08080000
 80053f4:	0808000c 	.word	0x0808000c
 80053f8:	08080018 	.word	0x08080018
 80053fc:	08080024 	.word	0x08080024
 8005400:	08080030 	.word	0x08080030
 8005404:	0808003c 	.word	0x0808003c
 8005408:	08080048 	.word	0x08080048
 800540c:	08080090 	.word	0x08080090
 8005410:	08080078 	.word	0x08080078
 8005414:	0808006c 	.word	0x0808006c
 8005418:	08080060 	.word	0x08080060
 800541c:	08080054 	.word	0x08080054

08005420 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6039      	str	r1, [r7, #0]
 8005428:	0011      	movs	r1, r2
 800542a:	1dfb      	adds	r3, r7, #7
 800542c:	1c02      	adds	r2, r0, #0
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	1dbb      	adds	r3, r7, #6
 8005432:	1c0a      	adds	r2, r1, #0
 8005434:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005436:	2223      	movs	r2, #35	@ 0x23
 8005438:	4b20      	ldr	r3, [pc, #128]	@ (80054bc <Create_Message+0x9c>)
 800543a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 800543c:	4b1f      	ldr	r3, [pc, #124]	@ (80054bc <Create_Message+0x9c>)
 800543e:	1dfa      	adds	r2, r7, #7
 8005440:	7812      	ldrb	r2, [r2, #0]
 8005442:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005444:	4b1d      	ldr	r3, [pc, #116]	@ (80054bc <Create_Message+0x9c>)
 8005446:	1dba      	adds	r2, r7, #6
 8005448:	7812      	ldrb	r2, [r2, #0]
 800544a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800544c:	1dbb      	adds	r3, r7, #6
 800544e:	781a      	ldrb	r2, [r3, #0]
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4b1b      	ldr	r3, [pc, #108]	@ (80054c0 <Create_Message+0xa0>)
 8005454:	0018      	movs	r0, r3
 8005456:	f012 fe6f 	bl	8018138 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800545a:	1dbb      	adds	r3, r7, #6
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b29a      	uxth	r2, r3
 8005460:	250e      	movs	r5, #14
 8005462:	197b      	adds	r3, r7, r5
 8005464:	3203      	adds	r2, #3
 8005466:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005468:	260c      	movs	r6, #12
 800546a:	19bc      	adds	r4, r7, r6
 800546c:	197b      	adds	r3, r7, r5
 800546e:	881a      	ldrh	r2, [r3, #0]
 8005470:	4b12      	ldr	r3, [pc, #72]	@ (80054bc <Create_Message+0x9c>)
 8005472:	0011      	movs	r1, r2
 8005474:	0018      	movs	r0, r3
 8005476:	f000 f825 	bl	80054c4 <CRC16_ARC>
 800547a:	0003      	movs	r3, r0
 800547c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800547e:	0030      	movs	r0, r6
 8005480:	183b      	adds	r3, r7, r0
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	b29a      	uxth	r2, r3
 8005488:	197b      	adds	r3, r7, r5
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b2d1      	uxtb	r1, r2
 800548e:	4a0b      	ldr	r2, [pc, #44]	@ (80054bc <Create_Message+0x9c>)
 8005490:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005492:	197b      	adds	r3, r7, r5
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	183a      	adds	r2, r7, r0
 800549a:	8812      	ldrh	r2, [r2, #0]
 800549c:	b2d1      	uxtb	r1, r2
 800549e:	4a07      	ldr	r2, [pc, #28]	@ (80054bc <Create_Message+0x9c>)
 80054a0:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80054a2:	197b      	adds	r3, r7, r5
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	3302      	adds	r3, #2
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	4b04      	ldr	r3, [pc, #16]	@ (80054bc <Create_Message+0x9c>)
 80054ac:	0011      	movs	r1, r2
 80054ae:	0018      	movs	r0, r3
 80054b0:	f011 fa9e 	bl	80169f0 <CDC_Transmit_FS>
}
 80054b4:	46c0      	nop			@ (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b005      	add	sp, #20
 80054ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054bc:	20000cec 	.word	0x20000cec
 80054c0:	20000cef 	.word	0x20000cef

080054c4 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	000a      	movs	r2, r1
 80054ce:	1cbb      	adds	r3, r7, #2
 80054d0:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80054d2:	2316      	movs	r3, #22
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	2200      	movs	r2, #0
 80054d8:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	e02e      	b.n	800553e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	18d3      	adds	r3, r2, r3
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	0019      	movs	r1, r3
 80054ea:	2216      	movs	r2, #22
 80054ec:	18bb      	adds	r3, r7, r2
 80054ee:	18ba      	adds	r2, r7, r2
 80054f0:	8812      	ldrh	r2, [r2, #0]
 80054f2:	404a      	eors	r2, r1
 80054f4:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e01a      	b.n	8005532 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80054fc:	2116      	movs	r1, #22
 80054fe:	187b      	adds	r3, r7, r1
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	2201      	movs	r2, #1
 8005504:	4013      	ands	r3, r2
 8005506:	d00b      	beq.n	8005520 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005508:	187b      	adds	r3, r7, r1
 800550a:	187a      	adds	r2, r7, r1
 800550c:	8812      	ldrh	r2, [r2, #0]
 800550e:	0852      	lsrs	r2, r2, #1
 8005510:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005512:	187b      	adds	r3, r7, r1
 8005514:	187a      	adds	r2, r7, r1
 8005516:	8812      	ldrh	r2, [r2, #0]
 8005518:	490f      	ldr	r1, [pc, #60]	@ (8005558 <CRC16_ARC+0x94>)
 800551a:	404a      	eors	r2, r1
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	e005      	b.n	800552c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005520:	2216      	movs	r2, #22
 8005522:	18bb      	adds	r3, r7, r2
 8005524:	18ba      	adds	r2, r7, r2
 8005526:	8812      	ldrh	r2, [r2, #0]
 8005528:	0852      	lsrs	r2, r2, #1
 800552a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b07      	cmp	r3, #7
 8005536:	dde1      	ble.n	80054fc <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	3301      	adds	r3, #1
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	1cbb      	adds	r3, r7, #2
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	dbcb      	blt.n	80054e0 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005548:	2316      	movs	r3, #22
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	881b      	ldrh	r3, [r3, #0]
}
 800554e:	0018      	movs	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	b006      	add	sp, #24
 8005554:	bd80      	pop	{r7, pc}
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	ffffa001 	.word	0xffffa001

0800555c <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005560:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <ReadBatteryVoltage+0xa0>)
 8005562:	4a27      	ldr	r2, [pc, #156]	@ (8005600 <ReadBatteryVoltage+0xa4>)
 8005564:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005566:	4b25      	ldr	r3, [pc, #148]	@ (80055fc <ReadBatteryVoltage+0xa0>)
 8005568:	2280      	movs	r2, #128	@ 0x80
 800556a:	0152      	lsls	r2, r2, #5
 800556c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800556e:	4a23      	ldr	r2, [pc, #140]	@ (80055fc <ReadBatteryVoltage+0xa0>)
 8005570:	4b24      	ldr	r3, [pc, #144]	@ (8005604 <ReadBatteryVoltage+0xa8>)
 8005572:	0011      	movs	r1, r2
 8005574:	0018      	movs	r0, r3
 8005576:	f004 ff63 	bl	800a440 <HAL_ADC_ConfigChannel>
 800557a:	1e03      	subs	r3, r0, #0
 800557c:	d001      	beq.n	8005582 <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 800557e:	f000 ff03 	bl	8006388 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005582:	4b20      	ldr	r3, [pc, #128]	@ (8005604 <ReadBatteryVoltage+0xa8>)
 8005584:	0018      	movs	r0, r3
 8005586:	f004 fe5f 	bl	800a248 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 800558a:	4b1e      	ldr	r3, [pc, #120]	@ (8005604 <ReadBatteryVoltage+0xa8>)
 800558c:	2101      	movs	r1, #1
 800558e:	0018      	movs	r0, r3
 8005590:	f004 feae 	bl	800a2f0 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005594:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <ReadBatteryVoltage+0xa8>)
 8005596:	0018      	movs	r0, r3
 8005598:	f004 ff46 	bl	800a428 <HAL_ADC_GetValue>
 800559c:	0002      	movs	r2, r0
 800559e:	4b1a      	ldr	r3, [pc, #104]	@ (8005608 <ReadBatteryVoltage+0xac>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4353      	muls	r3, r2
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	4919      	ldr	r1, [pc, #100]	@ (800560c <ReadBatteryVoltage+0xb0>)
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7fa fdc9 	bl	8000140 <__udivsi3>
 80055ae:	0003      	movs	r3, r0
 80055b0:	001a      	movs	r2, r3
 80055b2:	4b17      	ldr	r3, [pc, #92]	@ (8005610 <ReadBatteryVoltage+0xb4>)
 80055b4:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 80055b6:	4b16      	ldr	r3, [pc, #88]	@ (8005610 <ReadBatteryVoltage+0xb4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7fb ffd2 	bl	8001564 <__aeabi_ui2f>
 80055c0:	1c03      	adds	r3, r0, #0
 80055c2:	4914      	ldr	r1, [pc, #80]	@ (8005614 <ReadBatteryVoltage+0xb8>)
 80055c4:	1c18      	adds	r0, r3, #0
 80055c6:	f7fb fa83 	bl	8000ad0 <__aeabi_fdiv>
 80055ca:	1c03      	adds	r3, r0, #0
 80055cc:	1c1a      	adds	r2, r3, #0
 80055ce:	4b12      	ldr	r3, [pc, #72]	@ (8005618 <ReadBatteryVoltage+0xbc>)
 80055d0:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 80055d2:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <ReadBatteryVoltage+0xa0>)
 80055d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005600 <ReadBatteryVoltage+0xa4>)
 80055d6:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80055d8:	4b08      	ldr	r3, [pc, #32]	@ (80055fc <ReadBatteryVoltage+0xa0>)
 80055da:	4a10      	ldr	r2, [pc, #64]	@ (800561c <ReadBatteryVoltage+0xc0>)
 80055dc:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80055de:	4a07      	ldr	r2, [pc, #28]	@ (80055fc <ReadBatteryVoltage+0xa0>)
 80055e0:	4b08      	ldr	r3, [pc, #32]	@ (8005604 <ReadBatteryVoltage+0xa8>)
 80055e2:	0011      	movs	r1, r2
 80055e4:	0018      	movs	r0, r3
 80055e6:	f004 ff2b 	bl	800a440 <HAL_ADC_ConfigChannel>
 80055ea:	1e03      	subs	r3, r0, #0
 80055ec:	d001      	beq.n	80055f2 <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 80055ee:	f000 fecb 	bl	8006388 <Error_Handler>
   }
   return trueValue;
 80055f2:	4b09      	ldr	r3, [pc, #36]	@ (8005618 <ReadBatteryVoltage+0xbc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 }
 80055f6:	1c18      	adds	r0, r3, #0
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000df4 	.word	0x20000df4
 8005600:	38004000 	.word	0x38004000
 8005604:	20000e0c 	.word	0x20000e0c
 8005608:	20000020 	.word	0x20000020
 800560c:	00000fff 	.word	0x00000fff
 8005610:	20000dfc 	.word	0x20000dfc
 8005614:	447a0000 	.word	0x447a0000
 8005618:	20000e00 	.word	0x20000e00
 800561c:	00001001 	.word	0x00001001

08005620 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005624:	4b27      	ldr	r3, [pc, #156]	@ (80056c4 <ReadSolarVoltage+0xa4>)
 8005626:	4a28      	ldr	r2, [pc, #160]	@ (80056c8 <ReadSolarVoltage+0xa8>)
 8005628:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800562a:	4b26      	ldr	r3, [pc, #152]	@ (80056c4 <ReadSolarVoltage+0xa4>)
 800562c:	2280      	movs	r2, #128	@ 0x80
 800562e:	0152      	lsls	r2, r2, #5
 8005630:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005632:	4a24      	ldr	r2, [pc, #144]	@ (80056c4 <ReadSolarVoltage+0xa4>)
 8005634:	4b25      	ldr	r3, [pc, #148]	@ (80056cc <ReadSolarVoltage+0xac>)
 8005636:	0011      	movs	r1, r2
 8005638:	0018      	movs	r0, r3
 800563a:	f004 ff01 	bl	800a440 <HAL_ADC_ConfigChannel>
 800563e:	1e03      	subs	r3, r0, #0
 8005640:	d001      	beq.n	8005646 <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005642:	f000 fea1 	bl	8006388 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005646:	4b21      	ldr	r3, [pc, #132]	@ (80056cc <ReadSolarVoltage+0xac>)
 8005648:	0018      	movs	r0, r3
 800564a:	f004 fdfd 	bl	800a248 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 800564e:	4b1f      	ldr	r3, [pc, #124]	@ (80056cc <ReadSolarVoltage+0xac>)
 8005650:	2101      	movs	r1, #1
 8005652:	0018      	movs	r0, r3
 8005654:	f004 fe4c 	bl	800a2f0 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005658:	4b1c      	ldr	r3, [pc, #112]	@ (80056cc <ReadSolarVoltage+0xac>)
 800565a:	0018      	movs	r0, r3
 800565c:	f004 fee4 	bl	800a428 <HAL_ADC_GetValue>
 8005660:	0002      	movs	r2, r0
 8005662:	4b1b      	ldr	r3, [pc, #108]	@ (80056d0 <ReadSolarVoltage+0xb0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	435a      	muls	r2, r3
 8005668:	0013      	movs	r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	189b      	adds	r3, r3, r2
 800566e:	4919      	ldr	r1, [pc, #100]	@ (80056d4 <ReadSolarVoltage+0xb4>)
 8005670:	0018      	movs	r0, r3
 8005672:	f7fa fd65 	bl	8000140 <__udivsi3>
 8005676:	0003      	movs	r3, r0
 8005678:	001a      	movs	r2, r3
 800567a:	4b17      	ldr	r3, [pc, #92]	@ (80056d8 <ReadSolarVoltage+0xb8>)
 800567c:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 800567e:	4b16      	ldr	r3, [pc, #88]	@ (80056d8 <ReadSolarVoltage+0xb8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	0018      	movs	r0, r3
 8005684:	f7fb ff6e 	bl	8001564 <__aeabi_ui2f>
 8005688:	1c03      	adds	r3, r0, #0
 800568a:	4914      	ldr	r1, [pc, #80]	@ (80056dc <ReadSolarVoltage+0xbc>)
 800568c:	1c18      	adds	r0, r3, #0
 800568e:	f7fb fa1f 	bl	8000ad0 <__aeabi_fdiv>
 8005692:	1c03      	adds	r3, r0, #0
 8005694:	1c1a      	adds	r2, r3, #0
 8005696:	4b12      	ldr	r3, [pc, #72]	@ (80056e0 <ReadSolarVoltage+0xc0>)
 8005698:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 800569a:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <ReadSolarVoltage+0xa4>)
 800569c:	4a0a      	ldr	r2, [pc, #40]	@ (80056c8 <ReadSolarVoltage+0xa8>)
 800569e:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80056a0:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <ReadSolarVoltage+0xa4>)
 80056a2:	4a10      	ldr	r2, [pc, #64]	@ (80056e4 <ReadSolarVoltage+0xc4>)
 80056a4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80056a6:	4a07      	ldr	r2, [pc, #28]	@ (80056c4 <ReadSolarVoltage+0xa4>)
 80056a8:	4b08      	ldr	r3, [pc, #32]	@ (80056cc <ReadSolarVoltage+0xac>)
 80056aa:	0011      	movs	r1, r2
 80056ac:	0018      	movs	r0, r3
 80056ae:	f004 fec7 	bl	800a440 <HAL_ADC_ConfigChannel>
 80056b2:	1e03      	subs	r3, r0, #0
 80056b4:	d001      	beq.n	80056ba <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 80056b6:	f000 fe67 	bl	8006388 <Error_Handler>
   }
   return trueValue;
 80056ba:	4b09      	ldr	r3, [pc, #36]	@ (80056e0 <ReadSolarVoltage+0xc0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 }
 80056be:	1c18      	adds	r0, r3, #0
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000df4 	.word	0x20000df4
 80056c8:	3c008000 	.word	0x3c008000
 80056cc:	20000e0c 	.word	0x20000e0c
 80056d0:	20000020 	.word	0x20000020
 80056d4:	00000fff 	.word	0x00000fff
 80056d8:	20000e04 	.word	0x20000e04
 80056dc:	447a0000 	.word	0x447a0000
 80056e0:	20000e08 	.word	0x20000e08
 80056e4:	00001001 	.word	0x00001001

080056e8 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 80056ec:	23a0      	movs	r3, #160	@ 0xa0
 80056ee:	05db      	lsls	r3, r3, #23
 80056f0:	2180      	movs	r1, #128	@ 0x80
 80056f2:	0018      	movs	r0, r3
 80056f4:	f005 ff6a 	bl	800b5cc <HAL_GPIO_ReadPin>
 80056f8:	0003      	movs	r3, r0
 80056fa:	1e5a      	subs	r2, r3, #1
 80056fc:	4193      	sbcs	r3, r2
 80056fe:	b2db      	uxtb	r3, r3
}
 8005700:	0018      	movs	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005706:	b580      	push	{r7, lr}
 8005708:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800570a:	2380      	movs	r3, #128	@ 0x80
 800570c:	021a      	lsls	r2, r3, #8
 800570e:	23a0      	movs	r3, #160	@ 0xa0
 8005710:	05db      	lsls	r3, r3, #23
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f005 ff59 	bl	800b5cc <HAL_GPIO_ReadPin>
 800571a:	0003      	movs	r3, r0
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	4193      	sbcs	r3, r2
 8005720:	b2db      	uxtb	r3, r3
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 800572c:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <UserButton_Pressed+0x1c>)
 800572e:	2104      	movs	r1, #4
 8005730:	0018      	movs	r0, r3
 8005732:	f005 ff4b 	bl	800b5cc <HAL_GPIO_ReadPin>
 8005736:	0003      	movs	r3, r0
 8005738:	425a      	negs	r2, r3
 800573a:	4153      	adcs	r3, r2
 800573c:	b2db      	uxtb	r3, r3
}
 800573e:	0018      	movs	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	50000c00 	.word	0x50000c00

08005748 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800574e:	003b      	movs	r3, r7
 8005750:	0018      	movs	r0, r3
 8005752:	2308      	movs	r3, #8
 8005754:	001a      	movs	r2, r3
 8005756:	2100      	movs	r1, #0
 8005758:	f012 fc24 	bl	8017fa4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800575c:	4b30      	ldr	r3, [pc, #192]	@ (8005820 <MX_ADC_Init+0xd8>)
 800575e:	4a31      	ldr	r2, [pc, #196]	@ (8005824 <MX_ADC_Init+0xdc>)
 8005760:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8005762:	4b2f      	ldr	r3, [pc, #188]	@ (8005820 <MX_ADC_Init+0xd8>)
 8005764:	2200      	movs	r2, #0
 8005766:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8005768:	4b2d      	ldr	r3, [pc, #180]	@ (8005820 <MX_ADC_Init+0xd8>)
 800576a:	22c0      	movs	r2, #192	@ 0xc0
 800576c:	0612      	lsls	r2, r2, #24
 800576e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005770:	4b2b      	ldr	r3, [pc, #172]	@ (8005820 <MX_ADC_Init+0xd8>)
 8005772:	2200      	movs	r2, #0
 8005774:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005776:	4b2a      	ldr	r3, [pc, #168]	@ (8005820 <MX_ADC_Init+0xd8>)
 8005778:	2200      	movs	r2, #0
 800577a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800577c:	4b28      	ldr	r3, [pc, #160]	@ (8005820 <MX_ADC_Init+0xd8>)
 800577e:	2201      	movs	r2, #1
 8005780:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005782:	4b27      	ldr	r3, [pc, #156]	@ (8005820 <MX_ADC_Init+0xd8>)
 8005784:	2200      	movs	r2, #0
 8005786:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005788:	4b25      	ldr	r3, [pc, #148]	@ (8005820 <MX_ADC_Init+0xd8>)
 800578a:	2220      	movs	r2, #32
 800578c:	2100      	movs	r1, #0
 800578e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8005790:	4b23      	ldr	r3, [pc, #140]	@ (8005820 <MX_ADC_Init+0xd8>)
 8005792:	2221      	movs	r2, #33	@ 0x21
 8005794:	2101      	movs	r1, #1
 8005796:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005798:	4b21      	ldr	r3, [pc, #132]	@ (8005820 <MX_ADC_Init+0xd8>)
 800579a:	2200      	movs	r2, #0
 800579c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800579e:	4b20      	ldr	r3, [pc, #128]	@ (8005820 <MX_ADC_Init+0xd8>)
 80057a0:	22c2      	movs	r2, #194	@ 0xc2
 80057a2:	32ff      	adds	r2, #255	@ 0xff
 80057a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80057a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005820 <MX_ADC_Init+0xd8>)
 80057a8:	222c      	movs	r2, #44	@ 0x2c
 80057aa:	2100      	movs	r1, #0
 80057ac:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80057ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005820 <MX_ADC_Init+0xd8>)
 80057b0:	2204      	movs	r2, #4
 80057b2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80057b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005820 <MX_ADC_Init+0xd8>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80057ba:	4b19      	ldr	r3, [pc, #100]	@ (8005820 <MX_ADC_Init+0xd8>)
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80057c0:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <MX_ADC_Init+0xd8>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80057c6:	4b16      	ldr	r3, [pc, #88]	@ (8005820 <MX_ADC_Init+0xd8>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80057cc:	4b14      	ldr	r3, [pc, #80]	@ (8005820 <MX_ADC_Init+0xd8>)
 80057ce:	0018      	movs	r0, r3
 80057d0:	f004 fbc6 	bl	8009f60 <HAL_ADC_Init>
 80057d4:	1e03      	subs	r3, r0, #0
 80057d6:	d001      	beq.n	80057dc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80057d8:	f000 fdd6 	bl	8006388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80057dc:	003b      	movs	r3, r7
 80057de:	4a12      	ldr	r2, [pc, #72]	@ (8005828 <MX_ADC_Init+0xe0>)
 80057e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80057e2:	003b      	movs	r3, r7
 80057e4:	2280      	movs	r2, #128	@ 0x80
 80057e6:	0152      	lsls	r2, r2, #5
 80057e8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057ea:	003a      	movs	r2, r7
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <MX_ADC_Init+0xd8>)
 80057ee:	0011      	movs	r1, r2
 80057f0:	0018      	movs	r0, r3
 80057f2:	f004 fe25 	bl	800a440 <HAL_ADC_ConfigChannel>
 80057f6:	1e03      	subs	r3, r0, #0
 80057f8:	d001      	beq.n	80057fe <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80057fa:	f000 fdc5 	bl	8006388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80057fe:	003b      	movs	r3, r7
 8005800:	4a0a      	ldr	r2, [pc, #40]	@ (800582c <MX_ADC_Init+0xe4>)
 8005802:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005804:	003a      	movs	r2, r7
 8005806:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <MX_ADC_Init+0xd8>)
 8005808:	0011      	movs	r1, r2
 800580a:	0018      	movs	r0, r3
 800580c:	f004 fe18 	bl	800a440 <HAL_ADC_ConfigChannel>
 8005810:	1e03      	subs	r3, r0, #0
 8005812:	d001      	beq.n	8005818 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8005814:	f000 fdb8 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005818:	46c0      	nop			@ (mov r8, r8)
 800581a:	46bd      	mov	sp, r7
 800581c:	b002      	add	sp, #8
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000e0c 	.word	0x20000e0c
 8005824:	40012400 	.word	0x40012400
 8005828:	38004000 	.word	0x38004000
 800582c:	3c008000 	.word	0x3c008000

08005830 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b089      	sub	sp, #36	@ 0x24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005838:	240c      	movs	r4, #12
 800583a:	193b      	adds	r3, r7, r4
 800583c:	0018      	movs	r0, r3
 800583e:	2314      	movs	r3, #20
 8005840:	001a      	movs	r2, r3
 8005842:	2100      	movs	r1, #0
 8005844:	f012 fbae 	bl	8017fa4 <memset>
  if(adcHandle->Instance==ADC1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a14      	ldr	r2, [pc, #80]	@ (80058a0 <HAL_ADC_MspInit+0x70>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d121      	bne.n	8005896 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005852:	4b14      	ldr	r3, [pc, #80]	@ (80058a4 <HAL_ADC_MspInit+0x74>)
 8005854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005856:	4b13      	ldr	r3, [pc, #76]	@ (80058a4 <HAL_ADC_MspInit+0x74>)
 8005858:	2180      	movs	r1, #128	@ 0x80
 800585a:	0089      	lsls	r1, r1, #2
 800585c:	430a      	orrs	r2, r1
 800585e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005860:	4b10      	ldr	r3, [pc, #64]	@ (80058a4 <HAL_ADC_MspInit+0x74>)
 8005862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005864:	4b0f      	ldr	r3, [pc, #60]	@ (80058a4 <HAL_ADC_MspInit+0x74>)
 8005866:	2104      	movs	r1, #4
 8005868:	430a      	orrs	r2, r1
 800586a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800586c:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <HAL_ADC_MspInit+0x74>)
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	2204      	movs	r2, #4
 8005872:	4013      	ands	r3, r2
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005878:	193b      	adds	r3, r7, r4
 800587a:	2230      	movs	r2, #48	@ 0x30
 800587c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800587e:	193b      	adds	r3, r7, r4
 8005880:	2203      	movs	r2, #3
 8005882:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005884:	193b      	adds	r3, r7, r4
 8005886:	2200      	movs	r2, #0
 8005888:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800588a:	193b      	adds	r3, r7, r4
 800588c:	4a06      	ldr	r2, [pc, #24]	@ (80058a8 <HAL_ADC_MspInit+0x78>)
 800588e:	0019      	movs	r1, r3
 8005890:	0010      	movs	r0, r2
 8005892:	f005 fc3b 	bl	800b10c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	46bd      	mov	sp, r7
 800589a:	b009      	add	sp, #36	@ 0x24
 800589c:	bd90      	pop	{r4, r7, pc}
 800589e:	46c0      	nop			@ (mov r8, r8)
 80058a0:	40012400 	.word	0x40012400
 80058a4:	40021000 	.word	0x40021000
 80058a8:	50000800 	.word	0x50000800

080058ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80058b2:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <MX_DMA_Init+0x48>)
 80058b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b6:	4b0f      	ldr	r3, [pc, #60]	@ (80058f4 <MX_DMA_Init+0x48>)
 80058b8:	2101      	movs	r1, #1
 80058ba:	430a      	orrs	r2, r1
 80058bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80058be:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <MX_DMA_Init+0x48>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	2201      	movs	r2, #1
 80058c4:	4013      	ands	r3, r2
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80058ca:	2200      	movs	r2, #0
 80058cc:	2100      	movs	r1, #0
 80058ce:	200a      	movs	r0, #10
 80058d0:	f004 ff70 	bl	800a7b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80058d4:	200a      	movs	r0, #10
 80058d6:	f004 ff82 	bl	800a7de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80058da:	2200      	movs	r2, #0
 80058dc:	2103      	movs	r1, #3
 80058de:	200b      	movs	r0, #11
 80058e0:	f004 ff68 	bl	800a7b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80058e4:	200b      	movs	r0, #11
 80058e6:	f004 ff7a 	bl	800a7de <HAL_NVIC_EnableIRQ>

}
 80058ea:	46c0      	nop			@ (mov r8, r8)
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b002      	add	sp, #8
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	40021000 	.word	0x40021000

080058f8 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8005906:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <Gadget_Init+0x40>)
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f001 f863 	bl	80069d4 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	0018      	movs	r0, r3
 8005916:	f000 fdab 	bl	8006470 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	0018      	movs	r0, r3
 800591e:	f7fd ff2d 	bl	800377c <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005922:	4a06      	ldr	r2, [pc, #24]	@ (800593c <Gadget_Init+0x44>)
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <Gadget_Init+0x48>)
 8005926:	0019      	movs	r1, r3
 8005928:	2003      	movs	r0, #3
 800592a:	f003 ff47 	bl	80097bc <CreateLine>
}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b004      	add	sp, #16
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			@ (mov r8, r8)
 8005938:	20000024 	.word	0x20000024
 800593c:	0801b33c 	.word	0x0801b33c
 8005940:	0801b350 	.word	0x0801b350

08005944 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  Meas_Test();
 8005948:	f000 fec8 	bl	80066dc <Meas_Test>
}
 800594c:	46c0      	nop			@ (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <UpkeepGadget>:

void UpkeepGadget() {
 8005952:	b580      	push	{r7, lr}
 8005954:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 8005956:	f000 ffaf 	bl	80068b8 <Meas_Upkeep>
  Mic_Upkeep();
 800595a:	f000 ff61 	bl	8006820 <Mic_Upkeep>
  status_Upkeep();
 800595e:	f003 fa43 	bl	8008de8 <status_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	0011      	movs	r1, r2
 8005978:	0018      	movs	r0, r3
 800597a:	f002 fb93 	bl	80080a4 <SGP_Init>
}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}

08005986 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005986:	b580      	push	{r7, lr}
 8005988:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 800598a:	f002 fba5 	bl	80080d8 <SGP_StartMeasurement>
}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	0018      	movs	r0, r3
 80059a0:	f002 fc0a 	bl	80081b8 <SGP_GetMeasurementValues>
 80059a4:	0003      	movs	r3, r0
}
 80059a6:	0018      	movs	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b002      	add	sp, #8
 80059ac:	bd80      	pop	{r7, pc}

080059ae <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 80059ae:	b580      	push	{r7, lr}
 80059b0:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 80059b2:	f002 fe17 	bl	80085e4 <SGP_DeviceConnected>
 80059b6:	0003      	movs	r3, r0
}
 80059b8:	0018      	movs	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80059c0:	b590      	push	{r4, r7, lr}
 80059c2:	b08b      	sub	sp, #44	@ 0x2c
 80059c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c6:	2414      	movs	r4, #20
 80059c8:	193b      	adds	r3, r7, r4
 80059ca:	0018      	movs	r0, r3
 80059cc:	2314      	movs	r3, #20
 80059ce:	001a      	movs	r2, r3
 80059d0:	2100      	movs	r1, #0
 80059d2:	f012 fae7 	bl	8017fa4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059d6:	4b7c      	ldr	r3, [pc, #496]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 80059d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059da:	4b7b      	ldr	r3, [pc, #492]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 80059dc:	2104      	movs	r1, #4
 80059de:	430a      	orrs	r2, r1
 80059e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80059e2:	4b79      	ldr	r3, [pc, #484]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 80059e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e6:	2204      	movs	r2, #4
 80059e8:	4013      	ands	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80059ee:	4b76      	ldr	r3, [pc, #472]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 80059f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f2:	4b75      	ldr	r3, [pc, #468]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 80059f4:	2180      	movs	r1, #128	@ 0x80
 80059f6:	430a      	orrs	r2, r1
 80059f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80059fa:	4b73      	ldr	r3, [pc, #460]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fe:	2280      	movs	r2, #128	@ 0x80
 8005a00:	4013      	ands	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a06:	4b70      	ldr	r3, [pc, #448]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 8005a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a12:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	2201      	movs	r2, #1
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 8005a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a22:	4b69      	ldr	r3, [pc, #420]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 8005a24:	2102      	movs	r1, #2
 8005a26:	430a      	orrs	r2, r1
 8005a28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a2a:	4b67      	ldr	r3, [pc, #412]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	2202      	movs	r2, #2
 8005a30:	4013      	ands	r3, r2
 8005a32:	607b      	str	r3, [r7, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a36:	4b64      	ldr	r3, [pc, #400]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 8005a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3a:	4b63      	ldr	r3, [pc, #396]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 8005a3c:	2108      	movs	r1, #8
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a42:	4b61      	ldr	r3, [pc, #388]	@ (8005bc8 <MX_GPIO_Init+0x208>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	2208      	movs	r2, #8
 8005a48:	4013      	ands	r3, r2
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8005bcc <MX_GPIO_Init+0x20c>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	2101      	movs	r1, #1
 8005a54:	0018      	movs	r0, r3
 8005a56:	f005 fdd6 	bl	800b606 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bcc <MX_GPIO_Init+0x20c>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2102      	movs	r1, #2
 8005a60:	0018      	movs	r0, r3
 8005a62:	f005 fdd0 	bl	800b606 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005a66:	495a      	ldr	r1, [pc, #360]	@ (8005bd0 <MX_GPIO_Init+0x210>)
 8005a68:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd4 <MX_GPIO_Init+0x214>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f005 fdca 	bl	800b606 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005a72:	2380      	movs	r3, #128	@ 0x80
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	4858      	ldr	r0, [pc, #352]	@ (8005bd8 <MX_GPIO_Init+0x218>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	f005 fdc3 	bl	800b606 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	015b      	lsls	r3, r3, #5
 8005a84:	4854      	ldr	r0, [pc, #336]	@ (8005bd8 <MX_GPIO_Init+0x218>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	0019      	movs	r1, r3
 8005a8a:	f005 fdbc 	bl	800b606 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8005a8e:	193b      	adds	r3, r7, r4
 8005a90:	4a52      	ldr	r2, [pc, #328]	@ (8005bdc <MX_GPIO_Init+0x21c>)
 8005a92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a94:	193b      	adds	r3, r7, r4
 8005a96:	2203      	movs	r2, #3
 8005a98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9a:	193b      	adds	r3, r7, r4
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aa0:	193b      	adds	r3, r7, r4
 8005aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8005bd8 <MX_GPIO_Init+0x218>)
 8005aa4:	0019      	movs	r1, r3
 8005aa6:	0010      	movs	r0, r2
 8005aa8:	f005 fb30 	bl	800b10c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8005aac:	193b      	adds	r3, r7, r4
 8005aae:	2203      	movs	r2, #3
 8005ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ab2:	193b      	adds	r3, r7, r4
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab8:	193b      	adds	r3, r7, r4
 8005aba:	2200      	movs	r2, #0
 8005abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005abe:	193b      	adds	r3, r7, r4
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005ac4:	193b      	adds	r3, r7, r4
 8005ac6:	4a41      	ldr	r2, [pc, #260]	@ (8005bcc <MX_GPIO_Init+0x20c>)
 8005ac8:	0019      	movs	r1, r3
 8005aca:	0010      	movs	r0, r2
 8005acc:	f005 fb1e 	bl	800b10c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005ad0:	193b      	adds	r3, r7, r4
 8005ad2:	2270      	movs	r2, #112	@ 0x70
 8005ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ad6:	193b      	adds	r3, r7, r4
 8005ad8:	2203      	movs	r2, #3
 8005ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005adc:	193b      	adds	r3, r7, r4
 8005ade:	2200      	movs	r2, #0
 8005ae0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae2:	193a      	adds	r2, r7, r4
 8005ae4:	23a0      	movs	r3, #160	@ 0xa0
 8005ae6:	05db      	lsls	r3, r3, #23
 8005ae8:	0011      	movs	r1, r2
 8005aea:	0018      	movs	r0, r3
 8005aec:	f005 fb0e 	bl	800b10c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8005af0:	193b      	adds	r3, r7, r4
 8005af2:	4a3b      	ldr	r2, [pc, #236]	@ (8005be0 <MX_GPIO_Init+0x220>)
 8005af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005af6:	193b      	adds	r3, r7, r4
 8005af8:	2200      	movs	r2, #0
 8005afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005afc:	193b      	adds	r3, r7, r4
 8005afe:	2200      	movs	r2, #0
 8005b00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b02:	193a      	adds	r2, r7, r4
 8005b04:	23a0      	movs	r3, #160	@ 0xa0
 8005b06:	05db      	lsls	r3, r3, #23
 8005b08:	0011      	movs	r1, r2
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f005 fafe 	bl	800b10c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005b10:	193b      	adds	r3, r7, r4
 8005b12:	4a2f      	ldr	r2, [pc, #188]	@ (8005bd0 <MX_GPIO_Init+0x210>)
 8005b14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b16:	193b      	adds	r3, r7, r4
 8005b18:	2201      	movs	r2, #1
 8005b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1c:	193b      	adds	r3, r7, r4
 8005b1e:	2200      	movs	r2, #0
 8005b20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b22:	193b      	adds	r3, r7, r4
 8005b24:	2200      	movs	r2, #0
 8005b26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b28:	193b      	adds	r3, r7, r4
 8005b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd4 <MX_GPIO_Init+0x214>)
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	0010      	movs	r0, r2
 8005b30:	f005 faec 	bl	800b10c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005b34:	193b      	adds	r3, r7, r4
 8005b36:	4a2b      	ldr	r2, [pc, #172]	@ (8005be4 <MX_GPIO_Init+0x224>)
 8005b38:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b3a:	193b      	adds	r3, r7, r4
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b40:	193b      	adds	r3, r7, r4
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b46:	193b      	adds	r3, r7, r4
 8005b48:	4a22      	ldr	r2, [pc, #136]	@ (8005bd4 <MX_GPIO_Init+0x214>)
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	0010      	movs	r0, r2
 8005b4e:	f005 fadd 	bl	800b10c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005b52:	0021      	movs	r1, r4
 8005b54:	187b      	adds	r3, r7, r1
 8005b56:	2280      	movs	r2, #128	@ 0x80
 8005b58:	0092      	lsls	r2, r2, #2
 8005b5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b5c:	000c      	movs	r4, r1
 8005b5e:	193b      	adds	r3, r7, r4
 8005b60:	2200      	movs	r2, #0
 8005b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b64:	193b      	adds	r3, r7, r4
 8005b66:	2200      	movs	r2, #0
 8005b68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8005b6a:	193b      	adds	r3, r7, r4
 8005b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd8 <MX_GPIO_Init+0x218>)
 8005b6e:	0019      	movs	r1, r3
 8005b70:	0010      	movs	r0, r2
 8005b72:	f005 facb 	bl	800b10c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005b76:	0021      	movs	r1, r4
 8005b78:	187b      	adds	r3, r7, r1
 8005b7a:	22c0      	movs	r2, #192	@ 0xc0
 8005b7c:	0152      	lsls	r2, r2, #5
 8005b7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b80:	000c      	movs	r4, r1
 8005b82:	193b      	adds	r3, r7, r4
 8005b84:	2201      	movs	r2, #1
 8005b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b88:	193b      	adds	r3, r7, r4
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b8e:	193b      	adds	r3, r7, r4
 8005b90:	2200      	movs	r2, #0
 8005b92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b94:	193b      	adds	r3, r7, r4
 8005b96:	4a10      	ldr	r2, [pc, #64]	@ (8005bd8 <MX_GPIO_Init+0x218>)
 8005b98:	0019      	movs	r1, r3
 8005b9a:	0010      	movs	r0, r2
 8005b9c:	f005 fab6 	bl	800b10c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005ba0:	0021      	movs	r1, r4
 8005ba2:	187b      	adds	r3, r7, r1
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ba8:	187b      	adds	r3, r7, r1
 8005baa:	2200      	movs	r2, #0
 8005bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bae:	187b      	adds	r3, r7, r1
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005bb4:	187b      	adds	r3, r7, r1
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005be8 <MX_GPIO_Init+0x228>)
 8005bb8:	0019      	movs	r1, r3
 8005bba:	0010      	movs	r0, r2
 8005bbc:	f005 faa6 	bl	800b10c <HAL_GPIO_Init>

}
 8005bc0:	46c0      	nop			@ (mov r8, r8)
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b00b      	add	sp, #44	@ 0x2c
 8005bc6:	bd90      	pop	{r4, r7, pc}
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	50001c00 	.word	0x50001c00
 8005bd0:	00000301 	.word	0x00000301
 8005bd4:	50000400 	.word	0x50000400
 8005bd8:	50000800 	.word	0x50000800
 8005bdc:	0000200c 	.word	0x0000200c
 8005be0:	00008180 	.word	0x00008180
 8005be4:	0000403e 	.word	0x0000403e
 8005be8:	50000c00 	.word	0x50000c00

08005bec <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f00b f852 	bl	8010ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2108      	movs	r1, #8
 8005c04:	0018      	movs	r0, r3
 8005c06:	f00b f84d 	bl	8010ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	210c      	movs	r1, #12
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f00b f848 	bl	8010ca4 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	05db      	lsls	r3, r3, #23
 8005c18:	22fa      	movs	r2, #250	@ 0xfa
 8005c1a:	0112      	lsls	r2, r2, #4
 8005c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8005c1e:	2380      	movs	r3, #128	@ 0x80
 8005c20:	05db      	lsls	r3, r3, #23
 8005c22:	22fa      	movs	r2, #250	@ 0xfa
 8005c24:	0112      	lsls	r2, r2, #4
 8005c26:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005c28:	2380      	movs	r3, #128	@ 0x80
 8005c2a:	05db      	lsls	r3, r3, #23
 8005c2c:	22fa      	movs	r2, #250	@ 0xfa
 8005c2e:	0112      	lsls	r2, r2, #4
 8005c30:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005c32:	2380      	movs	r3, #128	@ 0x80
 8005c34:	05db      	lsls	r3, r3, #23
 8005c36:	22fa      	movs	r2, #250	@ 0xfa
 8005c38:	0112      	lsls	r2, r2, #4
 8005c3a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2100      	movs	r1, #0
 8005c40:	0018      	movs	r0, r3
 8005c42:	f00b f82f 	bl	8010ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2104      	movs	r1, #4
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f00b f82a 	bl	8010ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2108      	movs	r1, #8
 8005c54:	0018      	movs	r0, r3
 8005c56:	f00b f825 	bl	8010ca4 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c84 <GPIO_InitPWMLEDs+0x98>)
 8005c5c:	22fa      	movs	r2, #250	@ 0xfa
 8005c5e:	0112      	lsls	r2, r2, #4
 8005c60:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005c62:	4b08      	ldr	r3, [pc, #32]	@ (8005c84 <GPIO_InitPWMLEDs+0x98>)
 8005c64:	22fa      	movs	r2, #250	@ 0xfa
 8005c66:	0112      	lsls	r2, r2, #4
 8005c68:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005c6a:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <GPIO_InitPWMLEDs+0x98>)
 8005c6c:	22fa      	movs	r2, #250	@ 0xfa
 8005c6e:	0112      	lsls	r2, r2, #4
 8005c70:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005c72:	4b04      	ldr	r3, [pc, #16]	@ (8005c84 <GPIO_InitPWMLEDs+0x98>)
 8005c74:	22fa      	movs	r2, #250	@ 0xfa
 8005c76:	0112      	lsls	r2, r2, #4
 8005c78:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005c7a:	46c0      	nop			@ (mov r8, r8)
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b002      	add	sp, #8
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	40000400 	.word	0x40000400

08005c88 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	0011      	movs	r1, r2
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f003 fed5 	bl	8009a48 <HIDS_Init>
}
 8005c9e:	46c0      	nop			@ (mov r8, r8)
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b002      	add	sp, #8
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005caa:	f003 feef 	bl	8009a8c <HIDS_StartMeasurement>
}
 8005cae:	46c0      	nop			@ (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	0011      	movs	r1, r2
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f003 ffbd 	bl	8009c44 <HIDS_GetMeasurementValues>
 8005cca:	0003      	movs	r3, r0
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b002      	add	sp, #8
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005cd8:	f003 ff58 	bl	8009b8c <HIDS_DeviceConnected>
 8005cdc:	0003      	movs	r3, r0
}
 8005cde:	0018      	movs	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005cea:	4a1c      	ldr	r2, [pc, #112]	@ (8005d5c <MX_I2C1_Init+0x78>)
 8005cec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005cee:	4b1a      	ldr	r3, [pc, #104]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <MX_I2C1_Init+0x7c>)
 8005cf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005cf4:	4b18      	ldr	r3, [pc, #96]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005cfa:	4b17      	ldr	r3, [pc, #92]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d00:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005d06:	4b14      	ldr	r3, [pc, #80]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d0c:	4b12      	ldr	r3, [pc, #72]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d12:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d18:	4b0f      	ldr	r3, [pc, #60]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005d20:	0018      	movs	r0, r3
 8005d22:	f005 fc8d 	bl	800b640 <HAL_I2C_Init>
 8005d26:	1e03      	subs	r3, r0, #0
 8005d28:	d001      	beq.n	8005d2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005d2a:	f000 fb2d 	bl	8006388 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005d30:	2100      	movs	r1, #0
 8005d32:	0018      	movs	r0, r3
 8005d34:	f007 fbfc 	bl	800d530 <HAL_I2CEx_ConfigAnalogFilter>
 8005d38:	1e03      	subs	r3, r0, #0
 8005d3a:	d001      	beq.n	8005d40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005d3c:	f000 fb24 	bl	8006388 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005d40:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <MX_I2C1_Init+0x74>)
 8005d42:	2100      	movs	r1, #0
 8005d44:	0018      	movs	r0, r3
 8005d46:	f007 fc3f 	bl	800d5c8 <HAL_I2CEx_ConfigDigitalFilter>
 8005d4a:	1e03      	subs	r3, r0, #0
 8005d4c:	d001      	beq.n	8005d52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005d4e:	f000 fb1b 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d52:	46c0      	nop			@ (mov r8, r8)
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000e68 	.word	0x20000e68
 8005d5c:	40005400 	.word	0x40005400
 8005d60:	00503d58 	.word	0x00503d58

08005d64 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005d68:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <MX_I2C2_Init+0x78>)
 8005d6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005d70:	4a1b      	ldr	r2, [pc, #108]	@ (8005de0 <MX_I2C2_Init+0x7c>)
 8005d72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005d74:	4b18      	ldr	r3, [pc, #96]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d7a:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d80:	4b15      	ldr	r3, [pc, #84]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005d86:	4b14      	ldr	r3, [pc, #80]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d8c:	4b12      	ldr	r3, [pc, #72]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d92:	4b11      	ldr	r3, [pc, #68]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d98:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005da0:	0018      	movs	r0, r3
 8005da2:	f005 fc4d 	bl	800b640 <HAL_I2C_Init>
 8005da6:	1e03      	subs	r3, r0, #0
 8005da8:	d001      	beq.n	8005dae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005daa:	f000 faed 	bl	8006388 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005dae:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005db0:	2100      	movs	r1, #0
 8005db2:	0018      	movs	r0, r3
 8005db4:	f007 fbbc 	bl	800d530 <HAL_I2CEx_ConfigAnalogFilter>
 8005db8:	1e03      	subs	r3, r0, #0
 8005dba:	d001      	beq.n	8005dc0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005dbc:	f000 fae4 	bl	8006388 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005dc0:	4b05      	ldr	r3, [pc, #20]	@ (8005dd8 <MX_I2C2_Init+0x74>)
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f007 fbff 	bl	800d5c8 <HAL_I2CEx_ConfigDigitalFilter>
 8005dca:	1e03      	subs	r3, r0, #0
 8005dcc:	d001      	beq.n	8005dd2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005dce:	f000 fadb 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005dd2:	46c0      	nop			@ (mov r8, r8)
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000ebc 	.word	0x20000ebc
 8005ddc:	40005800 	.word	0x40005800
 8005de0:	00503d58 	.word	0x00503d58

08005de4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005de4:	b590      	push	{r4, r7, lr}
 8005de6:	b08b      	sub	sp, #44	@ 0x2c
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dec:	2414      	movs	r4, #20
 8005dee:	193b      	adds	r3, r7, r4
 8005df0:	0018      	movs	r0, r3
 8005df2:	2314      	movs	r3, #20
 8005df4:	001a      	movs	r2, r3
 8005df6:	2100      	movs	r1, #0
 8005df8:	f012 f8d4 	bl	8017fa4 <memset>
  if(i2cHandle->Instance==I2C1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a5d      	ldr	r2, [pc, #372]	@ (8005f78 <HAL_I2C_MspInit+0x194>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d000      	beq.n	8005e08 <HAL_I2C_MspInit+0x24>
 8005e06:	e083      	b.n	8005f10 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e08:	4b5c      	ldr	r3, [pc, #368]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005e0e:	2102      	movs	r1, #2
 8005e10:	430a      	orrs	r2, r1
 8005e12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005e14:	4b59      	ldr	r3, [pc, #356]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e18:	2202      	movs	r2, #2
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e20:	0021      	movs	r1, r4
 8005e22:	187b      	adds	r3, r7, r1
 8005e24:	22c0      	movs	r2, #192	@ 0xc0
 8005e26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e28:	187b      	adds	r3, r7, r1
 8005e2a:	2212      	movs	r2, #18
 8005e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2e:	187b      	adds	r3, r7, r1
 8005e30:	2200      	movs	r2, #0
 8005e32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	2203      	movs	r2, #3
 8005e38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e40:	187b      	adds	r3, r7, r1
 8005e42:	4a4f      	ldr	r2, [pc, #316]	@ (8005f80 <HAL_I2C_MspInit+0x19c>)
 8005e44:	0019      	movs	r1, r3
 8005e46:	0010      	movs	r0, r2
 8005e48:	f005 f960 	bl	800b10c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e50:	4b4a      	ldr	r3, [pc, #296]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005e52:	2180      	movs	r1, #128	@ 0x80
 8005e54:	0389      	lsls	r1, r1, #14
 8005e56:	430a      	orrs	r2, r1
 8005e58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8005e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f88 <HAL_I2C_MspInit+0x1a4>)
 8005e5e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005e60:	4b48      	ldr	r3, [pc, #288]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e62:	2206      	movs	r2, #6
 8005e64:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e66:	4b47      	ldr	r3, [pc, #284]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e6c:	4b45      	ldr	r3, [pc, #276]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e72:	4b44      	ldr	r3, [pc, #272]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e74:	2280      	movs	r2, #128	@ 0x80
 8005e76:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e78:	4b42      	ldr	r3, [pc, #264]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e7e:	4b41      	ldr	r3, [pc, #260]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005e84:	4b3f      	ldr	r3, [pc, #252]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005e90:	4b3c      	ldr	r3, [pc, #240]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005e92:	0018      	movs	r0, r3
 8005e94:	f004 fcc0 	bl	800a818 <HAL_DMA_Init>
 8005e98:	1e03      	subs	r3, r0, #0
 8005e9a:	d001      	beq.n	8005ea0 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005e9c:	f000 fa74 	bl	8006388 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a38      	ldr	r2, [pc, #224]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005ea6:	4b37      	ldr	r3, [pc, #220]	@ (8005f84 <HAL_I2C_MspInit+0x1a0>)
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005eac:	4b37      	ldr	r3, [pc, #220]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005eae:	4a38      	ldr	r2, [pc, #224]	@ (8005f90 <HAL_I2C_MspInit+0x1ac>)
 8005eb0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8005eb2:	4b36      	ldr	r3, [pc, #216]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005eb4:	2206      	movs	r2, #6
 8005eb6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eb8:	4b34      	ldr	r3, [pc, #208]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005eba:	2210      	movs	r2, #16
 8005ebc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ebe:	4b33      	ldr	r3, [pc, #204]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ec4:	4b31      	ldr	r3, [pc, #196]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005ec6:	2280      	movs	r2, #128	@ 0x80
 8005ec8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eca:	4b30      	ldr	r3, [pc, #192]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005edc:	4b2b      	ldr	r3, [pc, #172]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f004 fc97 	bl	800a818 <HAL_DMA_Init>
 8005eea:	1e03      	subs	r3, r0, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8005eee:	f000 fa4b 	bl	8006388 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a25      	ldr	r2, [pc, #148]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005ef6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ef8:	4b24      	ldr	r3, [pc, #144]	@ (8005f8c <HAL_I2C_MspInit+0x1a8>)
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005efe:	2200      	movs	r2, #0
 8005f00:	2100      	movs	r1, #0
 8005f02:	2017      	movs	r0, #23
 8005f04:	f004 fc56 	bl	800a7b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005f08:	2017      	movs	r0, #23
 8005f0a:	f004 fc68 	bl	800a7de <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005f0e:	e02e      	b.n	8005f6e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1f      	ldr	r2, [pc, #124]	@ (8005f94 <HAL_I2C_MspInit+0x1b0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d129      	bne.n	8005f6e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f1a:	4b18      	ldr	r3, [pc, #96]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1e:	4b17      	ldr	r3, [pc, #92]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005f20:	2102      	movs	r1, #2
 8005f22:	430a      	orrs	r2, r1
 8005f24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005f26:	4b15      	ldr	r3, [pc, #84]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005f32:	2114      	movs	r1, #20
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	22c0      	movs	r2, #192	@ 0xc0
 8005f38:	0112      	lsls	r2, r2, #4
 8005f3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f3c:	187b      	adds	r3, r7, r1
 8005f3e:	2212      	movs	r2, #18
 8005f40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f42:	187b      	adds	r3, r7, r1
 8005f44:	2200      	movs	r2, #0
 8005f46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f48:	187b      	adds	r3, r7, r1
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005f4e:	187b      	adds	r3, r7, r1
 8005f50:	2206      	movs	r2, #6
 8005f52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	4a0a      	ldr	r2, [pc, #40]	@ (8005f80 <HAL_I2C_MspInit+0x19c>)
 8005f58:	0019      	movs	r1, r3
 8005f5a:	0010      	movs	r0, r2
 8005f5c:	f005 f8d6 	bl	800b10c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005f60:	4b06      	ldr	r3, [pc, #24]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f64:	4b05      	ldr	r3, [pc, #20]	@ (8005f7c <HAL_I2C_MspInit+0x198>)
 8005f66:	2180      	movs	r1, #128	@ 0x80
 8005f68:	03c9      	lsls	r1, r1, #15
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b00b      	add	sp, #44	@ 0x2c
 8005f74:	bd90      	pop	{r4, r7, pc}
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	40005400 	.word	0x40005400
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	50000400 	.word	0x50000400
 8005f84:	20000f10 	.word	0x20000f10
 8005f88:	40020030 	.word	0x40020030
 8005f8c:	20000f58 	.word	0x20000f58
 8005f90:	4002001c 	.word	0x4002001c
 8005f94:	40005800 	.word	0x40005800

08005f98 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005f9c:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <MX_I2S2_Init+0x48>)
 8005f9e:	4a11      	ldr	r2, [pc, #68]	@ (8005fe4 <MX_I2S2_Init+0x4c>)
 8005fa0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe0 <MX_I2S2_Init+0x48>)
 8005fa4:	22c0      	movs	r2, #192	@ 0xc0
 8005fa6:	0092      	lsls	r2, r2, #2
 8005fa8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8005faa:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe0 <MX_I2S2_Init+0x48>)
 8005fac:	2210      	movs	r2, #16
 8005fae:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <MX_I2S2_Init+0x48>)
 8005fb2:	2205      	movs	r2, #5
 8005fb4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe0 <MX_I2S2_Init+0x48>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005fbc:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <MX_I2S2_Init+0x48>)
 8005fbe:	22fa      	movs	r2, #250	@ 0xfa
 8005fc0:	0152      	lsls	r2, r2, #5
 8005fc2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <MX_I2S2_Init+0x48>)
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005fca:	4b05      	ldr	r3, [pc, #20]	@ (8005fe0 <MX_I2S2_Init+0x48>)
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f007 fb47 	bl	800d660 <HAL_I2S_Init>
 8005fd2:	1e03      	subs	r3, r0, #0
 8005fd4:	d001      	beq.n	8005fda <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8005fd6:	f000 f9d7 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005fda:	46c0      	nop			@ (mov r8, r8)
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000fa0 	.word	0x20000fa0
 8005fe4:	40003800 	.word	0x40003800

08005fe8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005fe8:	b590      	push	{r4, r7, lr}
 8005fea:	b089      	sub	sp, #36	@ 0x24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff0:	240c      	movs	r4, #12
 8005ff2:	193b      	adds	r3, r7, r4
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	2314      	movs	r3, #20
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	f011 ffd2 	bl	8017fa4 <memset>
  if(i2sHandle->Instance==SPI2)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2d      	ldr	r2, [pc, #180]	@ (80060bc <HAL_I2S_MspInit+0xd4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d154      	bne.n	80060b4 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800600a:	4b2d      	ldr	r3, [pc, #180]	@ (80060c0 <HAL_I2S_MspInit+0xd8>)
 800600c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800600e:	4b2c      	ldr	r3, [pc, #176]	@ (80060c0 <HAL_I2S_MspInit+0xd8>)
 8006010:	2180      	movs	r1, #128	@ 0x80
 8006012:	01c9      	lsls	r1, r1, #7
 8006014:	430a      	orrs	r2, r1
 8006016:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006018:	4b29      	ldr	r3, [pc, #164]	@ (80060c0 <HAL_I2S_MspInit+0xd8>)
 800601a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601c:	4b28      	ldr	r3, [pc, #160]	@ (80060c0 <HAL_I2S_MspInit+0xd8>)
 800601e:	2102      	movs	r1, #2
 8006020:	430a      	orrs	r2, r1
 8006022:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006024:	4b26      	ldr	r3, [pc, #152]	@ (80060c0 <HAL_I2S_MspInit+0xd8>)
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	2202      	movs	r2, #2
 800602a:	4013      	ands	r3, r2
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006030:	193b      	adds	r3, r7, r4
 8006032:	22b0      	movs	r2, #176	@ 0xb0
 8006034:	0212      	lsls	r2, r2, #8
 8006036:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006038:	0021      	movs	r1, r4
 800603a:	187b      	adds	r3, r7, r1
 800603c:	2202      	movs	r2, #2
 800603e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006040:	187b      	adds	r3, r7, r1
 8006042:	2200      	movs	r2, #0
 8006044:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006046:	187b      	adds	r3, r7, r1
 8006048:	2200      	movs	r2, #0
 800604a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800604c:	187b      	adds	r3, r7, r1
 800604e:	2200      	movs	r2, #0
 8006050:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006052:	187b      	adds	r3, r7, r1
 8006054:	4a1b      	ldr	r2, [pc, #108]	@ (80060c4 <HAL_I2S_MspInit+0xdc>)
 8006056:	0019      	movs	r1, r3
 8006058:	0010      	movs	r0, r2
 800605a:	f005 f857 	bl	800b10c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800605e:	4b1a      	ldr	r3, [pc, #104]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 8006060:	4a1a      	ldr	r2, [pc, #104]	@ (80060cc <HAL_I2S_MspInit+0xe4>)
 8006062:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006064:	4b18      	ldr	r3, [pc, #96]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 8006066:	2202      	movs	r2, #2
 8006068:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800606a:	4b17      	ldr	r3, [pc, #92]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 800606c:	2200      	movs	r2, #0
 800606e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006070:	4b15      	ldr	r3, [pc, #84]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 8006072:	2200      	movs	r2, #0
 8006074:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006076:	4b14      	ldr	r3, [pc, #80]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 8006078:	2280      	movs	r2, #128	@ 0x80
 800607a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800607c:	4b12      	ldr	r3, [pc, #72]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 800607e:	2280      	movs	r2, #128	@ 0x80
 8006080:	0052      	lsls	r2, r2, #1
 8006082:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006084:	4b10      	ldr	r3, [pc, #64]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 8006086:	2280      	movs	r2, #128	@ 0x80
 8006088:	00d2      	lsls	r2, r2, #3
 800608a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800608c:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 800608e:	2220      	movs	r2, #32
 8006090:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 8006094:	2200      	movs	r2, #0
 8006096:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006098:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 800609a:	0018      	movs	r0, r3
 800609c:	f004 fbbc 	bl	800a818 <HAL_DMA_Init>
 80060a0:	1e03      	subs	r3, r0, #0
 80060a2:	d001      	beq.n	80060a8 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 80060a4:	f000 f970 	bl	8006388 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a07      	ldr	r2, [pc, #28]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 80060ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80060ae:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <HAL_I2S_MspInit+0xe0>)
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80060b4:	46c0      	nop			@ (mov r8, r8)
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b009      	add	sp, #36	@ 0x24
 80060ba:	bd90      	pop	{r4, r7, pc}
 80060bc:	40003800 	.word	0x40003800
 80060c0:	40021000 	.word	0x40021000
 80060c4:	50000400 	.word	0x50000400
 80060c8:	20000fdc 	.word	0x20000fdc
 80060cc:	40020044 	.word	0x40020044

080060d0 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006110 <HAL_I2S_MspDeInit+0x40>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d111      	bne.n	8006106 <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80060e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006114 <HAL_I2S_MspDeInit+0x44>)
 80060e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <HAL_I2S_MspDeInit+0x44>)
 80060e8:	490b      	ldr	r1, [pc, #44]	@ (8006118 <HAL_I2S_MspDeInit+0x48>)
 80060ea:	400a      	ands	r2, r1
 80060ec:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80060ee:	23b0      	movs	r3, #176	@ 0xb0
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	4a0a      	ldr	r2, [pc, #40]	@ (800611c <HAL_I2S_MspDeInit+0x4c>)
 80060f4:	0019      	movs	r1, r3
 80060f6:	0010      	movs	r0, r2
 80060f8:	f005 f986 	bl	800b408 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006100:	0018      	movs	r0, r3
 8006102:	f004 fc01 	bl	800a908 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	46bd      	mov	sp, r7
 800610a:	b002      	add	sp, #8
 800610c:	bd80      	pop	{r7, pc}
 800610e:	46c0      	nop			@ (mov r8, r8)
 8006110:	40003800 	.word	0x40003800
 8006114:	40021000 	.word	0x40021000
 8006118:	ffffbfff 	.word	0xffffbfff
 800611c:	50000400 	.word	0x50000400

08006120 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  testDone = true;
 8006124:	4b1e      	ldr	r3, [pc, #120]	@ (80061a0 <SetTestDone+0x80>)
 8006126:	2201      	movs	r2, #1
 8006128:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 800612a:	23fa      	movs	r3, #250	@ 0xfa
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	0018      	movs	r0, r3
 8006130:	f003 fed4 	bl	8009edc <HAL_Delay>
  SetDBLED(false, false, true);
 8006134:	2201      	movs	r2, #1
 8006136:	2100      	movs	r1, #0
 8006138:	2000      	movs	r0, #0
 800613a:	f002 fcbb 	bl	8008ab4 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 800613e:	4a19      	ldr	r2, [pc, #100]	@ (80061a4 <SetTestDone+0x84>)
 8006140:	23fa      	movs	r3, #250	@ 0xfa
 8006142:	0119      	lsls	r1, r3, #4
 8006144:	23fa      	movs	r3, #250	@ 0xfa
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	0018      	movs	r0, r3
 800614a:	f002 fc85 	bl	8008a58 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 800614e:	4a15      	ldr	r2, [pc, #84]	@ (80061a4 <SetTestDone+0x84>)
 8006150:	23fa      	movs	r3, #250	@ 0xfa
 8006152:	0119      	lsls	r1, r3, #4
 8006154:	23fa      	movs	r3, #250	@ 0xfa
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	0018      	movs	r0, r3
 800615a:	f002 fcef 	bl	8008b3c <SetVocLED>
  HAL_Delay(1000);
 800615e:	23fa      	movs	r3, #250	@ 0xfa
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	0018      	movs	r0, r3
 8006164:	f003 feba 	bl	8009edc <HAL_Delay>
  SetDBLED(false, false, false);
 8006168:	2200      	movs	r2, #0
 800616a:	2100      	movs	r1, #0
 800616c:	2000      	movs	r0, #0
 800616e:	f002 fca1 	bl	8008ab4 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8006172:	23fa      	movs	r3, #250	@ 0xfa
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	23fa      	movs	r3, #250	@ 0xfa
 8006178:	0119      	lsls	r1, r3, #4
 800617a:	23fa      	movs	r3, #250	@ 0xfa
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	0018      	movs	r0, r3
 8006180:	f002 fc6a 	bl	8008a58 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8006184:	23fa      	movs	r3, #250	@ 0xfa
 8006186:	011a      	lsls	r2, r3, #4
 8006188:	23fa      	movs	r3, #250	@ 0xfa
 800618a:	0119      	lsls	r1, r3, #4
 800618c:	23fa      	movs	r3, #250	@ 0xfa
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	0018      	movs	r0, r3
 8006192:	f002 fcd3 	bl	8008b3c <SetVocLED>
  InitDone();
 8006196:	f002 fc09 	bl	80089ac <InitDone>
}
 800619a:	46c0      	nop			@ (mov r8, r8)
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20001024 	.word	0x20001024
 80061a4:	00000bb8 	.word	0x00000bb8

080061a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80061ac:	f003 fe26 	bl	8009dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061b0:	f000 f864 	bl	800627c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061b4:	f7ff fc04 	bl	80059c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80061b8:	f7ff fb78 	bl	80058ac <MX_DMA_Init>
  MX_I2C1_Init();
 80061bc:	f7ff fd92 	bl	8005ce4 <MX_I2C1_Init>
  MX_I2S2_Init();
 80061c0:	f7ff feea 	bl	8005f98 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80061c4:	f003 f910 	bl	80093e8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80061c8:	f7ff fdcc 	bl	8005d64 <MX_I2C2_Init>
  MX_TIM2_Init();
 80061cc:	f002 ff58 	bl	8009080 <MX_TIM2_Init>
  MX_TIM3_Init();
 80061d0:	f002 ffca 	bl	8009168 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80061d4:	f003 f93c 	bl	8009450 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80061d8:	f7ff fab6 	bl	8005748 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80061dc:	f010 fb68 	bl	80168b0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80061e0:	f000 ffee 	bl	80071c0 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80061e4:	f003 f8ca 	bl	800937c <MX_LPUART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80061e8:	4a1c      	ldr	r2, [pc, #112]	@ (800625c <main+0xb4>)
 80061ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006260 <main+0xb8>)
 80061ec:	0011      	movs	r1, r2
 80061ee:	0018      	movs	r0, r3
 80061f0:	f7ff fcfc 	bl	8005bec <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 80061f4:	f7ff fa98 	bl	8005728 <UserButton_Pressed>
 80061f8:	1e03      	subs	r3, r0, #0
 80061fa:	d004      	beq.n	8006206 <main+0x5e>
    EnableESPProg();
 80061fc:	f010 fc28 	bl	8016a50 <EnableESPProg>
    ESP_Programming = true;
 8006200:	4b18      	ldr	r3, [pc, #96]	@ (8006264 <main+0xbc>)
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8006206:	2003      	movs	r0, #3
 8006208:	f003 fb3a 	bl	8009880 <SetVerboseLevel>
  BinaryReleaseInfo();
 800620c:	f003 fb50 	bl	80098b0 <BinaryReleaseInfo>
  //InitClock(&hrtc);
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8006210:	4b15      	ldr	r3, [pc, #84]	@ (8006268 <main+0xc0>)
 8006212:	4a16      	ldr	r2, [pc, #88]	@ (800626c <main+0xc4>)
 8006214:	4916      	ldr	r1, [pc, #88]	@ (8006270 <main+0xc8>)
 8006216:	4817      	ldr	r0, [pc, #92]	@ (8006274 <main+0xcc>)
 8006218:	f7ff fb6e 	bl	80058f8 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming){
 800621c:	4b16      	ldr	r3, [pc, #88]	@ (8006278 <main+0xd0>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <main+0x92>
 8006224:	4b0f      	ldr	r3, [pc, #60]	@ (8006264 <main+0xbc>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2201      	movs	r2, #1
 800622a:	4053      	eors	r3, r2
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <main+0x92>
      UpkeepGadget();
 8006232:	f7ff fb8e 	bl	8005952 <UpkeepGadget>
      ESP_Upkeep();
 8006236:	f7fe fc97 	bl	8004b68 <ESP_Upkeep>
    }
    if(!testDone && !ESP_Programming){
 800623a:	4b0f      	ldr	r3, [pc, #60]	@ (8006278 <main+0xd0>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2201      	movs	r2, #1
 8006240:	4053      	eors	r3, r2
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0e9      	beq.n	800621c <main+0x74>
 8006248:	4b06      	ldr	r3, [pc, #24]	@ (8006264 <main+0xbc>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	4053      	eors	r3, r2
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0e2      	beq.n	800621c <main+0x74>
      Gadget_Test();
 8006256:	f7ff fb75 	bl	8005944 <Gadget_Test>
    if(testDone && !ESP_Programming){
 800625a:	e7df      	b.n	800621c <main+0x74>
 800625c:	200029f4 	.word	0x200029f4
 8006260:	200029b4 	.word	0x200029b4
 8006264:	20001025 	.word	0x20001025
 8006268:	20000e0c 	.word	0x20000e0c
 800626c:	20002ba4 	.word	0x20002ba4
 8006270:	20000fa0 	.word	0x20000fa0
 8006274:	20000e68 	.word	0x20000e68
 8006278:	20001024 	.word	0x20001024

0800627c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800627c:	b590      	push	{r4, r7, lr}
 800627e:	b09d      	sub	sp, #116	@ 0x74
 8006280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006282:	2438      	movs	r4, #56	@ 0x38
 8006284:	193b      	adds	r3, r7, r4
 8006286:	0018      	movs	r0, r3
 8006288:	2338      	movs	r3, #56	@ 0x38
 800628a:	001a      	movs	r2, r3
 800628c:	2100      	movs	r1, #0
 800628e:	f011 fe89 	bl	8017fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006292:	2324      	movs	r3, #36	@ 0x24
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	0018      	movs	r0, r3
 8006298:	2314      	movs	r3, #20
 800629a:	001a      	movs	r2, r3
 800629c:	2100      	movs	r1, #0
 800629e:	f011 fe81 	bl	8017fa4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80062a2:	003b      	movs	r3, r7
 80062a4:	0018      	movs	r0, r3
 80062a6:	2324      	movs	r3, #36	@ 0x24
 80062a8:	001a      	movs	r2, r3
 80062aa:	2100      	movs	r1, #0
 80062ac:	f011 fe7a 	bl	8017fa4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80062b0:	4b32      	ldr	r3, [pc, #200]	@ (800637c <SystemClock_Config+0x100>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a32      	ldr	r2, [pc, #200]	@ (8006380 <SystemClock_Config+0x104>)
 80062b6:	401a      	ands	r2, r3
 80062b8:	4b30      	ldr	r3, [pc, #192]	@ (800637c <SystemClock_Config+0x100>)
 80062ba:	2180      	movs	r1, #128	@ 0x80
 80062bc:	0109      	lsls	r1, r1, #4
 80062be:	430a      	orrs	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80062c2:	f009 fb6d 	bl	800f9a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80062c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006384 <SystemClock_Config+0x108>)
 80062c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006384 <SystemClock_Config+0x108>)
 80062cc:	492c      	ldr	r1, [pc, #176]	@ (8006380 <SystemClock_Config+0x104>)
 80062ce:	400a      	ands	r2, r1
 80062d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80062d2:	193b      	adds	r3, r7, r4
 80062d4:	2226      	movs	r2, #38	@ 0x26
 80062d6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80062d8:	193b      	adds	r3, r7, r4
 80062da:	2280      	movs	r2, #128	@ 0x80
 80062dc:	0052      	lsls	r2, r2, #1
 80062de:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80062e0:	0021      	movs	r1, r4
 80062e2:	187b      	adds	r3, r7, r1
 80062e4:	2201      	movs	r2, #1
 80062e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80062e8:	187b      	adds	r3, r7, r1
 80062ea:	2210      	movs	r2, #16
 80062ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80062ee:	187b      	adds	r3, r7, r1
 80062f0:	2201      	movs	r2, #1
 80062f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	2200      	movs	r2, #0
 80062f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062fa:	187b      	adds	r3, r7, r1
 80062fc:	0018      	movs	r0, r3
 80062fe:	f009 fb5d 	bl	800f9bc <HAL_RCC_OscConfig>
 8006302:	1e03      	subs	r3, r0, #0
 8006304:	d001      	beq.n	800630a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8006306:	f000 f83f 	bl	8006388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800630a:	2124      	movs	r1, #36	@ 0x24
 800630c:	187b      	adds	r3, r7, r1
 800630e:	220f      	movs	r2, #15
 8006310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006312:	187b      	adds	r3, r7, r1
 8006314:	2201      	movs	r2, #1
 8006316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006318:	187b      	adds	r3, r7, r1
 800631a:	2200      	movs	r2, #0
 800631c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800631e:	187b      	adds	r3, r7, r1
 8006320:	2200      	movs	r2, #0
 8006322:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006324:	187b      	adds	r3, r7, r1
 8006326:	2200      	movs	r2, #0
 8006328:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800632a:	187b      	adds	r3, r7, r1
 800632c:	2100      	movs	r1, #0
 800632e:	0018      	movs	r0, r3
 8006330:	f009 ff18 	bl	8010164 <HAL_RCC_ClockConfig>
 8006334:	1e03      	subs	r3, r0, #0
 8006336:	d001      	beq.n	800633c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006338:	f000 f826 	bl	8006388 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800633c:	003b      	movs	r3, r7
 800633e:	226d      	movs	r2, #109	@ 0x6d
 8006340:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006342:	003b      	movs	r3, r7
 8006344:	2200      	movs	r2, #0
 8006346:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006348:	003b      	movs	r3, r7
 800634a:	2200      	movs	r2, #0
 800634c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800634e:	003b      	movs	r3, r7
 8006350:	2200      	movs	r2, #0
 8006352:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006354:	003b      	movs	r3, r7
 8006356:	2280      	movs	r2, #128	@ 0x80
 8006358:	0252      	lsls	r2, r2, #9
 800635a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800635c:	003b      	movs	r3, r7
 800635e:	2280      	movs	r2, #128	@ 0x80
 8006360:	04d2      	lsls	r2, r2, #19
 8006362:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006364:	003b      	movs	r3, r7
 8006366:	0018      	movs	r0, r3
 8006368:	f00a f920 	bl	80105ac <HAL_RCCEx_PeriphCLKConfig>
 800636c:	1e03      	subs	r3, r0, #0
 800636e:	d001      	beq.n	8006374 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8006370:	f000 f80a 	bl	8006388 <Error_Handler>
  }
}
 8006374:	46c0      	nop			@ (mov r8, r8)
 8006376:	46bd      	mov	sp, r7
 8006378:	b01d      	add	sp, #116	@ 0x74
 800637a:	bd90      	pop	{r4, r7, pc}
 800637c:	40007000 	.word	0x40007000
 8006380:	ffffe7ff 	.word	0xffffe7ff
 8006384:	40021000 	.word	0x40021000

08006388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800638c:	b672      	cpsid	i
}
 800638e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006390:	46c0      	nop			@ (mov r8, r8)
 8006392:	e7fd      	b.n	8006390 <Error_Handler+0x8>

08006394 <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8006398:	f7ff fc85 	bl	8005ca6 <HT_StartMeasurement>
}
 800639c:	46c0      	nop			@ (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 80063a8:	4a04      	ldr	r2, [pc, #16]	@ (80063bc <HT_IsMeasurementDoneWrapper+0x18>)
 80063aa:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <HT_IsMeasurementDoneWrapper+0x1c>)
 80063ac:	0011      	movs	r1, r2
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7ff fc80 	bl	8005cb4 <HT_GetMeasurementValues>
 80063b4:	0003      	movs	r3, r0
}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	2000102c 	.word	0x2000102c
 80063c0:	20001028 	.word	0x20001028

080063c4 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 80063c8:	f7ff fadd 	bl	8005986 <Gas_StartMeasurement>
}
 80063cc:	46c0      	nop			@ (mov r8, r8)
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 80063d8:	4b03      	ldr	r3, [pc, #12]	@ (80063e8 <VOC_IsMeasurementDoneWrapper+0x14>)
 80063da:	0018      	movs	r0, r3
 80063dc:	f7ff fada 	bl	8005994 <Gas_GetMeasurementValues>
 80063e0:	0003      	movs	r3, r0
}
 80063e2:	0018      	movs	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20001030 	.word	0x20001030

080063ec <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
}
 80063f0:	46c0      	nop			@ (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 80063f6:	b580      	push	{r7, lr}
 80063f8:	af00      	add	r7, sp, #0
  return true;
 80063fa:	2301      	movs	r3, #1
}
 80063fc:	0018      	movs	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8006402:	b580      	push	{r7, lr}
 8006404:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 8006406:	23fa      	movs	r3, #250	@ 0xfa
 8006408:	015b      	lsls	r3, r3, #5
 800640a:	2180      	movs	r1, #128	@ 0x80
 800640c:	0018      	movs	r0, r3
 800640e:	f000 fb9f 	bl	8006b50 <MIC_Start>
}
 8006412:	46c0      	nop			@ (mov r8, r8)
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 800641c:	f000 fdfa 	bl	8007014 <MIC_MeasurementDone>
 8006420:	0003      	movs	r3, r0
}
 8006422:	0018      	movs	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <Meas_TestStart>:
void Meas_TestStart(){
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 800642c:	f7ff ffe9 	bl	8006402 <MIC_StartMeasurementWrapper>
}
 8006430:	46c0      	nop			@ (mov r8, r8)
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8006436:	b580      	push	{r7, lr}
 8006438:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 800643a:	f000 fe0b 	bl	8007054 <MIC_TestMeasurementDone>
 800643e:	0003      	movs	r3, r0
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <testInit>:
void testInit(){
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 800644c:	4b07      	ldr	r3, [pc, #28]	@ (800646c <testInit+0x24>)
 800644e:	2200      	movs	r2, #0
 8006450:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8006452:	4b06      	ldr	r3, [pc, #24]	@ (800646c <testInit+0x24>)
 8006454:	2200      	movs	r2, #0
 8006456:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8006458:	4b04      	ldr	r3, [pc, #16]	@ (800646c <testInit+0x24>)
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 800645e:	4b03      	ldr	r3, [pc, #12]	@ (800646c <testInit+0x24>)
 8006460:	2200      	movs	r2, #0
 8006462:	705a      	strb	r2, [r3, #1]
}
 8006464:	46c0      	nop			@ (mov r8, r8)
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	2000106c 	.word	0x2000106c

08006470 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8006470:	b5b0      	push	{r4, r5, r7, lr}
 8006472:	b092      	sub	sp, #72	@ 0x48
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 800647c:	4b6f      	ldr	r3, [pc, #444]	@ (800663c <Meas_Init+0x1cc>)
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
  testInit();
 8006482:	f7ff ffe1 	bl	8006448 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8006486:	4b6e      	ldr	r3, [pc, #440]	@ (8006640 <Meas_Init+0x1d0>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <Meas_Init+0x26>
 800648e:	4b6c      	ldr	r3, [pc, #432]	@ (8006640 <Meas_Init+0x1d0>)
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d068      	beq.n	8006568 <Meas_Init+0xf8>
    I2CSensors_Init(sensorI2C);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	0018      	movs	r0, r3
 800649a:	f7fe fddb 	bl	8005054 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 800649e:	f7ff fc19 	bl	8005cd4 <HT_DeviceConnected>
 80064a2:	0003      	movs	r3, r0
 80064a4:	001a      	movs	r2, r3
 80064a6:	2301      	movs	r3, #1
 80064a8:	4053      	eors	r3, r2
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00c      	beq.n	80064ca <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 80064b0:	4a64      	ldr	r2, [pc, #400]	@ (8006644 <Meas_Init+0x1d4>)
 80064b2:	4b65      	ldr	r3, [pc, #404]	@ (8006648 <Meas_Init+0x1d8>)
 80064b4:	0019      	movs	r1, r3
 80064b6:	2001      	movs	r0, #1
 80064b8:	f003 f980 	bl	80097bc <CreateLine>
       MeasTest.HT_Tested = false;
 80064bc:	4b63      	ldr	r3, [pc, #396]	@ (800664c <Meas_Init+0x1dc>)
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 80064c2:	4b5f      	ldr	r3, [pc, #380]	@ (8006640 <Meas_Init+0x1d0>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	e008      	b.n	80064dc <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 80064ca:	4b60      	ldr	r3, [pc, #384]	@ (800664c <Meas_Init+0x1dc>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 80064d0:	4a5f      	ldr	r2, [pc, #380]	@ (8006650 <Meas_Init+0x1e0>)
 80064d2:	4b60      	ldr	r3, [pc, #384]	@ (8006654 <Meas_Init+0x1e4>)
 80064d4:	0019      	movs	r1, r3
 80064d6:	2003      	movs	r0, #3
 80064d8:	f003 f970 	bl	80097bc <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 80064dc:	f7ff fa67 	bl	80059ae <Gas_DeviceConnected>
 80064e0:	0003      	movs	r3, r0
 80064e2:	001a      	movs	r2, r3
 80064e4:	2301      	movs	r3, #1
 80064e6:	4053      	eors	r3, r2
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00c      	beq.n	8006508 <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 80064ee:	4b57      	ldr	r3, [pc, #348]	@ (800664c <Meas_Init+0x1dc>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 80064f4:	4a58      	ldr	r2, [pc, #352]	@ (8006658 <Meas_Init+0x1e8>)
 80064f6:	4b54      	ldr	r3, [pc, #336]	@ (8006648 <Meas_Init+0x1d8>)
 80064f8:	0019      	movs	r1, r3
 80064fa:	2001      	movs	r0, #1
 80064fc:	f003 f95e 	bl	80097bc <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8006500:	4b4f      	ldr	r3, [pc, #316]	@ (8006640 <Meas_Init+0x1d0>)
 8006502:	2200      	movs	r2, #0
 8006504:	705a      	strb	r2, [r3, #1]
 8006506:	e008      	b.n	800651a <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 8006508:	4b50      	ldr	r3, [pc, #320]	@ (800664c <Meas_Init+0x1dc>)
 800650a:	2201      	movs	r2, #1
 800650c:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 800650e:	4a53      	ldr	r2, [pc, #332]	@ (800665c <Meas_Init+0x1ec>)
 8006510:	4b50      	ldr	r3, [pc, #320]	@ (8006654 <Meas_Init+0x1e4>)
 8006512:	0019      	movs	r1, r3
 8006514:	2003      	movs	r0, #3
 8006516:	f003 f951 	bl	80097bc <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 800651a:	4b4c      	ldr	r3, [pc, #304]	@ (800664c <Meas_Init+0x1dc>)
 800651c:	785b      	ldrb	r3, [r3, #1]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <Meas_Init+0xc6>
 8006522:	4b4a      	ldr	r3, [pc, #296]	@ (800664c <Meas_Init+0x1dc>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <Meas_Init+0xc6>
      SetDBLED(false, true, false);
 800652a:	2200      	movs	r2, #0
 800652c:	2101      	movs	r1, #1
 800652e:	2000      	movs	r0, #0
 8006530:	f002 fac0 	bl	8008ab4 <SetDBLED>
 8006534:	e018      	b.n	8006568 <Meas_Init+0xf8>
    }
    else{
      SetDBLED(true, false, false);
 8006536:	2200      	movs	r2, #0
 8006538:	2100      	movs	r1, #0
 800653a:	2001      	movs	r0, #1
 800653c:	f002 faba 	bl	8008ab4 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006540:	4b47      	ldr	r3, [pc, #284]	@ (8006660 <Meas_Init+0x1f0>)
 8006542:	2200      	movs	r2, #0
 8006544:	2101      	movs	r1, #1
 8006546:	0018      	movs	r0, r3
 8006548:	f005 f85d 	bl	800b606 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800654c:	2380      	movs	r3, #128	@ 0x80
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	4843      	ldr	r0, [pc, #268]	@ (8006660 <Meas_Init+0x1f0>)
 8006552:	2201      	movs	r2, #1
 8006554:	0019      	movs	r1, r3
 8006556:	f005 f856 	bl	800b606 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800655a:	2380      	movs	r3, #128	@ 0x80
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4840      	ldr	r0, [pc, #256]	@ (8006660 <Meas_Init+0x1f0>)
 8006560:	2201      	movs	r2, #1
 8006562:	0019      	movs	r1, r3
 8006564:	f005 f84f 	bl	800b606 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8006568:	4b35      	ldr	r3, [pc, #212]	@ (8006640 <Meas_Init+0x1d0>)
 800656a:	78db      	ldrb	r3, [r3, #3]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <Meas_Init+0x10c>
    MIC_Init(micI2s);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	0018      	movs	r0, r3
 8006574:	f000 fa86 	bl	8006a84 <MIC_Init>
    Meas_TestStart();
 8006578:	f7ff ff56 	bl	8006428 <Meas_TestStart>
  }
  uint8_t offset = 0;
 800657c:	2547      	movs	r5, #71	@ 0x47
 800657e:	197b      	adds	r3, r7, r5
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8006584:	197b      	adds	r3, r7, r5
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	197a      	adds	r2, r7, r5
 800658a:	1c59      	adds	r1, r3, #1
 800658c:	7011      	strb	r1, [r2, #0]
 800658e:	4a2c      	ldr	r2, [pc, #176]	@ (8006640 <Meas_Init+0x1d0>)
 8006590:	7814      	ldrb	r4, [r2, #0]
 8006592:	4a34      	ldr	r2, [pc, #208]	@ (8006664 <Meas_Init+0x1f4>)
 8006594:	0119      	lsls	r1, r3, #4
 8006596:	4834      	ldr	r0, [pc, #208]	@ (8006668 <Meas_Init+0x1f8>)
 8006598:	5088      	str	r0, [r1, r2]
 800659a:	4932      	ldr	r1, [pc, #200]	@ (8006664 <Meas_Init+0x1f4>)
 800659c:	011a      	lsls	r2, r3, #4
 800659e:	188a      	adds	r2, r1, r2
 80065a0:	3204      	adds	r2, #4
 80065a2:	4932      	ldr	r1, [pc, #200]	@ (800666c <Meas_Init+0x1fc>)
 80065a4:	6011      	str	r1, [r2, #0]
 80065a6:	492f      	ldr	r1, [pc, #188]	@ (8006664 <Meas_Init+0x1f4>)
 80065a8:	011a      	lsls	r2, r3, #4
 80065aa:	188a      	adds	r2, r1, r2
 80065ac:	3208      	adds	r2, #8
 80065ae:	4930      	ldr	r1, [pc, #192]	@ (8006670 <Meas_Init+0x200>)
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006664 <Meas_Init+0x1f4>)
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	18d3      	adds	r3, r2, r3
 80065b8:	330c      	adds	r3, #12
 80065ba:	1c22      	adds	r2, r4, #0
 80065bc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80065be:	197b      	adds	r3, r7, r5
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	197a      	adds	r2, r7, r5
 80065c4:	1c59      	adds	r1, r3, #1
 80065c6:	7011      	strb	r1, [r2, #0]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006640 <Meas_Init+0x1d0>)
 80065ca:	7854      	ldrb	r4, [r2, #1]
 80065cc:	4a25      	ldr	r2, [pc, #148]	@ (8006664 <Meas_Init+0x1f4>)
 80065ce:	0119      	lsls	r1, r3, #4
 80065d0:	4828      	ldr	r0, [pc, #160]	@ (8006674 <Meas_Init+0x204>)
 80065d2:	5088      	str	r0, [r1, r2]
 80065d4:	4923      	ldr	r1, [pc, #140]	@ (8006664 <Meas_Init+0x1f4>)
 80065d6:	011a      	lsls	r2, r3, #4
 80065d8:	188a      	adds	r2, r1, r2
 80065da:	3204      	adds	r2, #4
 80065dc:	4926      	ldr	r1, [pc, #152]	@ (8006678 <Meas_Init+0x208>)
 80065de:	6011      	str	r1, [r2, #0]
 80065e0:	4920      	ldr	r1, [pc, #128]	@ (8006664 <Meas_Init+0x1f4>)
 80065e2:	011a      	lsls	r2, r3, #4
 80065e4:	188a      	adds	r2, r1, r2
 80065e6:	3208      	adds	r2, #8
 80065e8:	4924      	ldr	r1, [pc, #144]	@ (800667c <Meas_Init+0x20c>)
 80065ea:	6011      	str	r1, [r2, #0]
 80065ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006664 <Meas_Init+0x1f4>)
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	18d3      	adds	r3, r2, r3
 80065f2:	330c      	adds	r3, #12
 80065f4:	1c22      	adds	r2, r4, #0
 80065f6:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 80065f8:	197b      	adds	r3, r7, r5
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	197a      	adds	r2, r7, r5
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	7011      	strb	r1, [r2, #0]
 8006602:	4a0f      	ldr	r2, [pc, #60]	@ (8006640 <Meas_Init+0x1d0>)
 8006604:	7894      	ldrb	r4, [r2, #2]
 8006606:	4a17      	ldr	r2, [pc, #92]	@ (8006664 <Meas_Init+0x1f4>)
 8006608:	0119      	lsls	r1, r3, #4
 800660a:	481d      	ldr	r0, [pc, #116]	@ (8006680 <Meas_Init+0x210>)
 800660c:	5088      	str	r0, [r1, r2]
 800660e:	4915      	ldr	r1, [pc, #84]	@ (8006664 <Meas_Init+0x1f4>)
 8006610:	011a      	lsls	r2, r3, #4
 8006612:	188a      	adds	r2, r1, r2
 8006614:	3204      	adds	r2, #4
 8006616:	491b      	ldr	r1, [pc, #108]	@ (8006684 <Meas_Init+0x214>)
 8006618:	6011      	str	r1, [r2, #0]
 800661a:	4912      	ldr	r1, [pc, #72]	@ (8006664 <Meas_Init+0x1f4>)
 800661c:	011a      	lsls	r2, r3, #4
 800661e:	188a      	adds	r2, r1, r2
 8006620:	3208      	adds	r2, #8
 8006622:	4919      	ldr	r1, [pc, #100]	@ (8006688 <Meas_Init+0x218>)
 8006624:	6011      	str	r1, [r2, #0]
 8006626:	4a0f      	ldr	r2, [pc, #60]	@ (8006664 <Meas_Init+0x1f4>)
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	18d3      	adds	r3, r2, r3
 800662c:	330c      	adds	r3, #12
 800662e:	1c22      	adds	r2, r4, #0
 8006630:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	46bd      	mov	sp, r7
 8006636:	b012      	add	sp, #72	@ 0x48
 8006638:	bdb0      	pop	{r4, r5, r7, pc}
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	20001070 	.word	0x20001070
 8006640:	20001068 	.word	0x20001068
 8006644:	0801b354 	.word	0x0801b354
 8006648:	0801b384 	.word	0x0801b384
 800664c:	2000106c 	.word	0x2000106c
 8006650:	0801b388 	.word	0x0801b388
 8006654:	0801b3b4 	.word	0x0801b3b4
 8006658:	0801b3b8 	.word	0x0801b3b8
 800665c:	0801b3d4 	.word	0x0801b3d4
 8006660:	50000400 	.word	0x50000400
 8006664:	20001038 	.word	0x20001038
 8006668:	08006395 	.word	0x08006395
 800666c:	080063a5 	.word	0x080063a5
 8006670:	20001034 	.word	0x20001034
 8006674:	080063c5 	.word	0x080063c5
 8006678:	080063d5 	.word	0x080063d5
 800667c:	20001035 	.word	0x20001035
 8006680:	080063ed 	.word	0x080063ed
 8006684:	080063f7 	.word	0x080063f7
 8006688:	20001036 	.word	0x20001036

0800668c <StartMeasurements>:

void StartMeasurements(void) {
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006690:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <StartMeasurements+0x48>)
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	e015      	b.n	80066c4 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006698:	4b0e      	ldr	r3, [pc, #56]	@ (80066d4 <StartMeasurements+0x48>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	4a0e      	ldr	r2, [pc, #56]	@ (80066d8 <StartMeasurements+0x4c>)
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	18d3      	adds	r3, r2, r3
 80066a2:	330c      	adds	r3, #12
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d006      	beq.n	80066b8 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80066aa:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <StartMeasurements+0x48>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	001a      	movs	r2, r3
 80066b0:	4b09      	ldr	r3, [pc, #36]	@ (80066d8 <StartMeasurements+0x4c>)
 80066b2:	0112      	lsls	r2, r2, #4
 80066b4:	58d3      	ldr	r3, [r2, r3]
 80066b6:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80066b8:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <StartMeasurements+0x48>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	4b04      	ldr	r3, [pc, #16]	@ (80066d4 <StartMeasurements+0x48>)
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	4b03      	ldr	r3, [pc, #12]	@ (80066d4 <StartMeasurements+0x48>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d9e5      	bls.n	8006698 <StartMeasurements+0xc>
    }
  }
}
 80066cc:	46c0      	nop			@ (mov r8, r8)
 80066ce:	46c0      	nop			@ (mov r8, r8)
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20001072 	.word	0x20001072
 80066d8:	20001038 	.word	0x20001038

080066dc <Meas_Test>:

void Meas_Test(){
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 80066e0:	4b21      	ldr	r3, [pc, #132]	@ (8006768 <Meas_Test+0x8c>)
 80066e2:	78db      	ldrb	r3, [r3, #3]
 80066e4:	2201      	movs	r2, #1
 80066e6:	4053      	eors	r3, r2
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <Meas_Test+0x16>
    ESP_WakeTest();
 80066ee:	f7fe f929 	bl	8004944 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 80066f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006768 <Meas_Test+0x8c>)
 80066f4:	789b      	ldrb	r3, [r3, #2]
 80066f6:	2201      	movs	r2, #1
 80066f8:	4053      	eors	r3, r2
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d017      	beq.n	8006730 <Meas_Test+0x54>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8006700:	f7ff fe99 	bl	8006436 <MIC_IsTestMeasurementDoneWrapper>
 8006704:	1e03      	subs	r3, r0, #0
 8006706:	d00b      	beq.n	8006720 <Meas_Test+0x44>
      MeasTest.MIC_Tested = true;
 8006708:	4b17      	ldr	r3, [pc, #92]	@ (8006768 <Meas_Test+0x8c>)
 800670a:	2201      	movs	r2, #1
 800670c:	709a      	strb	r2, [r3, #2]
      SetStatusLED(4000, 3000, 4000);
 800670e:	23fa      	movs	r3, #250	@ 0xfa
 8006710:	011a      	lsls	r2, r3, #4
 8006712:	4916      	ldr	r1, [pc, #88]	@ (800676c <Meas_Test+0x90>)
 8006714:	23fa      	movs	r3, #250	@ 0xfa
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	0018      	movs	r0, r3
 800671a:	f002 f99d 	bl	8008a58 <SetStatusLED>
 800671e:	e007      	b.n	8006730 <Meas_Test+0x54>
    }
    else{
      SetStatusLED(3000, 4000, 4000);
 8006720:	23fa      	movs	r3, #250	@ 0xfa
 8006722:	011a      	lsls	r2, r3, #4
 8006724:	23fa      	movs	r3, #250	@ 0xfa
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	4810      	ldr	r0, [pc, #64]	@ (800676c <Meas_Test+0x90>)
 800672a:	0019      	movs	r1, r3
 800672c:	f002 f994 	bl	8008a58 <SetStatusLED>
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8006730:	4b0d      	ldr	r3, [pc, #52]	@ (8006768 <Meas_Test+0x8c>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d013      	beq.n	8006760 <Meas_Test+0x84>
 8006738:	4b0b      	ldr	r3, [pc, #44]	@ (8006768 <Meas_Test+0x8c>)
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00f      	beq.n	8006760 <Meas_Test+0x84>
 8006740:	4b09      	ldr	r3, [pc, #36]	@ (8006768 <Meas_Test+0x8c>)
 8006742:	78db      	ldrb	r3, [r3, #3]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <Meas_Test+0x84>
 8006748:	4b07      	ldr	r3, [pc, #28]	@ (8006768 <Meas_Test+0x8c>)
 800674a:	789b      	ldrb	r3, [r3, #2]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <Meas_Test+0x84>
    Debug("Test completed");
 8006750:	4a07      	ldr	r2, [pc, #28]	@ (8006770 <Meas_Test+0x94>)
 8006752:	4b08      	ldr	r3, [pc, #32]	@ (8006774 <Meas_Test+0x98>)
 8006754:	0019      	movs	r1, r3
 8006756:	2003      	movs	r0, #3
 8006758:	f003 f830 	bl	80097bc <CreateLine>
    SetTestDone();
 800675c:	f7ff fce0 	bl	8006120 <SetTestDone>
  }
}
 8006760:	46c0      	nop			@ (mov r8, r8)
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	46c0      	nop			@ (mov r8, r8)
 8006768:	2000106c 	.word	0x2000106c
 800676c:	00000bb8 	.word	0x00000bb8
 8006770:	0801b3ec 	.word	0x0801b3ec
 8006774:	0801b3b4 	.word	0x0801b3b4

08006778 <ResetMeasurements>:
void ResetMeasurements(void) {
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 800677c:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <ResetMeasurements+0x34>)
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8006782:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <ResetMeasurements+0x34>)
 8006784:	2200      	movs	r2, #0
 8006786:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006788:	4b08      	ldr	r3, [pc, #32]	@ (80067ac <ResetMeasurements+0x34>)
 800678a:	2200      	movs	r2, #0
 800678c:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 800678e:	4b07      	ldr	r3, [pc, #28]	@ (80067ac <ResetMeasurements+0x34>)
 8006790:	2200      	movs	r2, #0
 8006792:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006794:	4b05      	ldr	r3, [pc, #20]	@ (80067ac <ResetMeasurements+0x34>)
 8006796:	2200      	movs	r2, #0
 8006798:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 800679a:	4b04      	ldr	r3, [pc, #16]	@ (80067ac <ResetMeasurements+0x34>)
 800679c:	2200      	movs	r2, #0
 800679e:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 80067a0:	4b02      	ldr	r3, [pc, #8]	@ (80067ac <ResetMeasurements+0x34>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	73da      	strb	r2, [r3, #15]
}
 80067a6:	46c0      	nop			@ (mov r8, r8)
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20001028 	.word	0x20001028

080067b0 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80067b4:	4b18      	ldr	r3, [pc, #96]	@ (8006818 <MeasurementsCompleted+0x68>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	e024      	b.n	8006806 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80067bc:	4b16      	ldr	r3, [pc, #88]	@ (8006818 <MeasurementsCompleted+0x68>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	4a16      	ldr	r2, [pc, #88]	@ (800681c <MeasurementsCompleted+0x6c>)
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	18d3      	adds	r3, r2, r3
 80067c6:	330c      	adds	r3, #12
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d015      	beq.n	80067fa <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 80067ce:	4b12      	ldr	r3, [pc, #72]	@ (8006818 <MeasurementsCompleted+0x68>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	4a12      	ldr	r2, [pc, #72]	@ (800681c <MeasurementsCompleted+0x6c>)
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	18d3      	adds	r3, r2, r3
 80067d8:	3304      	adds	r3, #4
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4798      	blx	r3
 80067de:	1e03      	subs	r3, r0, #0
 80067e0:	d009      	beq.n	80067f6 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 80067e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006818 <MeasurementsCompleted+0x68>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	4a0d      	ldr	r2, [pc, #52]	@ (800681c <MeasurementsCompleted+0x6c>)
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	18d3      	adds	r3, r2, r3
 80067ec:	3308      	adds	r3, #8
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2201      	movs	r2, #1
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	e001      	b.n	80067fa <MeasurementsCompleted+0x4a>
      }else {
        return false;
 80067f6:	2300      	movs	r3, #0
 80067f8:	e00a      	b.n	8006810 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80067fa:	4b07      	ldr	r3, [pc, #28]	@ (8006818 <MeasurementsCompleted+0x68>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	b2da      	uxtb	r2, r3
 8006802:	4b05      	ldr	r3, [pc, #20]	@ (8006818 <MeasurementsCompleted+0x68>)
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	4b04      	ldr	r3, [pc, #16]	@ (8006818 <MeasurementsCompleted+0x68>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d9d6      	bls.n	80067bc <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 800680e:	2301      	movs	r3, #1
}
 8006810:	0018      	movs	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	20001072 	.word	0x20001072
 800681c:	20001038 	.word	0x20001038

08006820 <Mic_Upkeep>:

void Mic_Upkeep(){
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  switch(MicState){
 8006824:	4b20      	ldr	r3, [pc, #128]	@ (80068a8 <Mic_Upkeep+0x88>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b03      	cmp	r3, #3
 800682a:	d022      	beq.n	8006872 <Mic_Upkeep+0x52>
 800682c:	dc2c      	bgt.n	8006888 <Mic_Upkeep+0x68>
 800682e:	2b02      	cmp	r3, #2
 8006830:	d00f      	beq.n	8006852 <Mic_Upkeep+0x32>
 8006832:	dc29      	bgt.n	8006888 <Mic_Upkeep+0x68>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <Mic_Upkeep+0x1e>
 8006838:	2b01      	cmp	r3, #1
 800683a:	d004      	beq.n	8006846 <Mic_Upkeep+0x26>
 800683c:	e024      	b.n	8006888 <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 800683e:	4b1a      	ldr	r3, [pc, #104]	@ (80068a8 <Mic_Upkeep+0x88>)
 8006840:	2201      	movs	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]
    break;
 8006844:	e02d      	b.n	80068a2 <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 8006846:	f7ff fddc 	bl	8006402 <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800684a:	4b17      	ldr	r3, [pc, #92]	@ (80068a8 <Mic_Upkeep+0x88>)
 800684c:	2202      	movs	r2, #2
 800684e:	701a      	strb	r2, [r3, #0]
    break;
 8006850:	e027      	b.n	80068a2 <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 8006852:	f7ff fde1 	bl	8006418 <MIC_IsMeasurementDoneWrapper>
 8006856:	1e03      	subs	r3, r0, #0
 8006858:	d020      	beq.n	800689c <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 800685a:	4b13      	ldr	r3, [pc, #76]	@ (80068a8 <Mic_Upkeep+0x88>)
 800685c:	2203      	movs	r2, #3
 800685e:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 8006860:	f003 fb32 	bl	8009ec8 <HAL_GetTick>
 8006864:	0003      	movs	r3, r0
 8006866:	22fa      	movs	r2, #250	@ 0xfa
 8006868:	0092      	lsls	r2, r2, #2
 800686a:	189a      	adds	r2, r3, r2
 800686c:	4b0f      	ldr	r3, [pc, #60]	@ (80068ac <Mic_Upkeep+0x8c>)
 800686e:	601a      	str	r2, [r3, #0]
    }
    break;
 8006870:	e014      	b.n	800689c <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8006872:	4b0e      	ldr	r3, [pc, #56]	@ (80068ac <Mic_Upkeep+0x8c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	0018      	movs	r0, r3
 8006878:	f002 ff4a 	bl	8009710 <TimestampIsReached>
 800687c:	1e03      	subs	r3, r0, #0
 800687e:	d00f      	beq.n	80068a0 <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 8006880:	4b09      	ldr	r3, [pc, #36]	@ (80068a8 <Mic_Upkeep+0x88>)
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006886:	e00b      	b.n	80068a0 <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006888:	4a09      	ldr	r2, [pc, #36]	@ (80068b0 <Mic_Upkeep+0x90>)
 800688a:	4b0a      	ldr	r3, [pc, #40]	@ (80068b4 <Mic_Upkeep+0x94>)
 800688c:	0019      	movs	r1, r3
 800688e:	2003      	movs	r0, #3
 8006890:	f002 ff94 	bl	80097bc <CreateLine>
    MicState = MIC_STATE_INIT;
 8006894:	4b04      	ldr	r3, [pc, #16]	@ (80068a8 <Mic_Upkeep+0x88>)
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]
    break;
 800689a:	e002      	b.n	80068a2 <Mic_Upkeep+0x82>
    break;
 800689c:	46c0      	nop			@ (mov r8, r8)
 800689e:	e000      	b.n	80068a2 <Mic_Upkeep+0x82>
    break;
 80068a0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80068a2:	46c0      	nop			@ (mov r8, r8)
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20001071 	.word	0x20001071
 80068ac:	20001078 	.word	0x20001078
 80068b0:	0801b3fc 	.word	0x0801b3fc
 80068b4:	0801b3b4 	.word	0x0801b3b4

080068b8 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

void Meas_Upkeep(void) {
 80068b8:	b5b0      	push	{r4, r5, r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af04      	add	r7, sp, #16
  switch(MeasState) {
 80068be:	4b3b      	ldr	r3, [pc, #236]	@ (80069ac <Meas_Upkeep+0xf4>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b06      	cmp	r3, #6
 80068c4:	d868      	bhi.n	8006998 <Meas_Upkeep+0xe0>
 80068c6:	009a      	lsls	r2, r3, #2
 80068c8:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <Meas_Upkeep+0xf8>)
 80068ca:	18d3      	adds	r3, r2, r3
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 80068d0:	4a38      	ldr	r2, [pc, #224]	@ (80069b4 <Meas_Upkeep+0xfc>)
 80068d2:	4b39      	ldr	r3, [pc, #228]	@ (80069b8 <Meas_Upkeep+0x100>)
 80068d4:	0019      	movs	r1, r3
 80068d6:	2003      	movs	r0, #3
 80068d8:	f002 ff70 	bl	80097bc <CreateLine>
    break;
 80068dc:	e063      	b.n	80069a6 <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80068de:	f7ff ff4b 	bl	8006778 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80068e2:	4b32      	ldr	r3, [pc, #200]	@ (80069ac <Meas_Upkeep+0xf4>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	701a      	strb	r2, [r3, #0]
    break;
 80068e8:	e05d      	b.n	80069a6 <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80068ea:	f7ff fecf 	bl	800668c <StartMeasurements>
    SetMeasurementIndicator();
 80068ee:	f002 f953 	bl	8008b98 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80068f2:	4b2e      	ldr	r3, [pc, #184]	@ (80069ac <Meas_Upkeep+0xf4>)
 80068f4:	2202      	movs	r2, #2
 80068f6:	701a      	strb	r2, [r3, #0]
   break;
 80068f8:	e055      	b.n	80069a6 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80068fa:	f7ff ff59 	bl	80067b0 <MeasurementsCompleted>
 80068fe:	1e03      	subs	r3, r0, #0
 8006900:	d04e      	beq.n	80069a0 <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8006902:	4b2a      	ldr	r3, [pc, #168]	@ (80069ac <Meas_Upkeep+0xf4>)
 8006904:	2203      	movs	r2, #3
 8006906:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006908:	e04a      	b.n	80069a0 <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 800690a:	4a2c      	ldr	r2, [pc, #176]	@ (80069bc <Meas_Upkeep+0x104>)
 800690c:	4b2a      	ldr	r3, [pc, #168]	@ (80069b8 <Meas_Upkeep+0x100>)
 800690e:	0019      	movs	r1, r3
 8006910:	2003      	movs	r0, #3
 8006912:	f002 ff53 	bl	80097bc <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8006916:	4b2a      	ldr	r3, [pc, #168]	@ (80069c0 <Meas_Upkeep+0x108>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4a2a      	ldr	r2, [pc, #168]	@ (80069c4 <Meas_Upkeep+0x10c>)
 800691c:	4926      	ldr	r1, [pc, #152]	@ (80069b8 <Meas_Upkeep+0x100>)
 800691e:	2003      	movs	r0, #3
 8006920:	f002 ff4c 	bl	80097bc <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8006924:	4b26      	ldr	r3, [pc, #152]	@ (80069c0 <Meas_Upkeep+0x108>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	1c18      	adds	r0, r3, #0
 800692a:	f7fc fd19 	bl	8003360 <__aeabi_f2d>
 800692e:	0004      	movs	r4, r0
 8006930:	000d      	movs	r5, r1
 8006932:	4b23      	ldr	r3, [pc, #140]	@ (80069c0 <Meas_Upkeep+0x108>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	1c18      	adds	r0, r3, #0
 8006938:	f7fc fd12 	bl	8003360 <__aeabi_f2d>
 800693c:	0002      	movs	r2, r0
 800693e:	000b      	movs	r3, r1
 8006940:	4821      	ldr	r0, [pc, #132]	@ (80069c8 <Meas_Upkeep+0x110>)
 8006942:	491d      	ldr	r1, [pc, #116]	@ (80069b8 <Meas_Upkeep+0x100>)
 8006944:	9202      	str	r2, [sp, #8]
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	9400      	str	r4, [sp, #0]
 800694a:	9501      	str	r5, [sp, #4]
 800694c:	0002      	movs	r2, r0
 800694e:	2003      	movs	r0, #3
 8006950:	f002 ff34 	bl	80097bc <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006954:	4b1a      	ldr	r3, [pc, #104]	@ (80069c0 <Meas_Upkeep+0x108>)
 8006956:	6858      	ldr	r0, [r3, #4]
 8006958:	4b19      	ldr	r3, [pc, #100]	@ (80069c0 <Meas_Upkeep+0x108>)
 800695a:	6819      	ldr	r1, [r3, #0]
 800695c:	4b18      	ldr	r3, [pc, #96]	@ (80069c0 <Meas_Upkeep+0x108>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	b29b      	uxth	r3, r3
 8006962:	001a      	movs	r2, r3
 8006964:	f7fc fec0 	bl	80036e8 <setMeasurement>
    ResetMeasurementIndicator();
 8006968:	f002 f928 	bl	8008bbc <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 800696c:	f003 faac 	bl	8009ec8 <HAL_GetTick>
 8006970:	0003      	movs	r3, r0
 8006972:	4a16      	ldr	r2, [pc, #88]	@ (80069cc <Meas_Upkeep+0x114>)
 8006974:	189a      	adds	r2, r3, r2
 8006976:	4b16      	ldr	r3, [pc, #88]	@ (80069d0 <Meas_Upkeep+0x118>)
 8006978:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 800697a:	4b0c      	ldr	r3, [pc, #48]	@ (80069ac <Meas_Upkeep+0xf4>)
 800697c:	2206      	movs	r2, #6
 800697e:	701a      	strb	r2, [r3, #0]
    break;
 8006980:	e011      	b.n	80069a6 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8006982:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <Meas_Upkeep+0x118>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	0018      	movs	r0, r3
 8006988:	f002 fec2 	bl	8009710 <TimestampIsReached>
 800698c:	1e03      	subs	r3, r0, #0
 800698e:	d009      	beq.n	80069a4 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8006990:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <Meas_Upkeep+0xf4>)
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
    }

    break;
 8006996:	e005      	b.n	80069a4 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006998:	4b04      	ldr	r3, [pc, #16]	@ (80069ac <Meas_Upkeep+0xf4>)
 800699a:	2200      	movs	r2, #0
 800699c:	701a      	strb	r2, [r3, #0]
    break;
 800699e:	e002      	b.n	80069a6 <Meas_Upkeep+0xee>
    break;
 80069a0:	46c0      	nop			@ (mov r8, r8)
 80069a2:	e000      	b.n	80069a6 <Meas_Upkeep+0xee>
    break;
 80069a4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bdb0      	pop	{r4, r5, r7, pc}
 80069ac:	20001070 	.word	0x20001070
 80069b0:	0801bb34 	.word	0x0801bb34
 80069b4:	0801b41c 	.word	0x0801b41c
 80069b8:	0801b3b4 	.word	0x0801b3b4
 80069bc:	0801b43c 	.word	0x0801b43c
 80069c0:	20001028 	.word	0x20001028
 80069c4:	0801b450 	.word	0x0801b450
 80069c8:	0801b468 	.word	0x0801b468
 80069cc:	00002710 	.word	0x00002710
 80069d0:	20001074 	.word	0x20001074

080069d4 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80069d4:	b590      	push	{r4, r7, lr}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80069de:	240f      	movs	r4, #15
 80069e0:	193b      	adds	r3, r7, r4
 80069e2:	2200      	movs	r2, #0
 80069e4:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80069e6:	4b20      	ldr	r3, [pc, #128]	@ (8006a68 <Meas_SetEnabledSensors+0x94>)
 80069e8:	1d3a      	adds	r2, r7, #4
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80069ee:	193b      	adds	r3, r7, r4
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	193a      	adds	r2, r7, r4
 80069f4:	1c59      	adds	r1, r3, #1
 80069f6:	7011      	strb	r1, [r2, #0]
 80069f8:	0018      	movs	r0, r3
 80069fa:	1d3b      	adds	r3, r7, #4
 80069fc:	7819      	ldrb	r1, [r3, #0]
 80069fe:	4a1b      	ldr	r2, [pc, #108]	@ (8006a6c <Meas_SetEnabledSensors+0x98>)
 8006a00:	0103      	lsls	r3, r0, #4
 8006a02:	18d3      	adds	r3, r2, r3
 8006a04:	330c      	adds	r3, #12
 8006a06:	1c0a      	adds	r2, r1, #0
 8006a08:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8006a0a:	193b      	adds	r3, r7, r4
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	193a      	adds	r2, r7, r4
 8006a10:	1c59      	adds	r1, r3, #1
 8006a12:	7011      	strb	r1, [r2, #0]
 8006a14:	0018      	movs	r0, r3
 8006a16:	1d3b      	adds	r3, r7, #4
 8006a18:	7859      	ldrb	r1, [r3, #1]
 8006a1a:	4a14      	ldr	r2, [pc, #80]	@ (8006a6c <Meas_SetEnabledSensors+0x98>)
 8006a1c:	0103      	lsls	r3, r0, #4
 8006a1e:	18d3      	adds	r3, r2, r3
 8006a20:	330c      	adds	r3, #12
 8006a22:	1c0a      	adds	r2, r1, #0
 8006a24:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	193a      	adds	r2, r7, r4
 8006a2c:	1c59      	adds	r1, r3, #1
 8006a2e:	7011      	strb	r1, [r2, #0]
 8006a30:	0018      	movs	r0, r3
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	7899      	ldrb	r1, [r3, #2]
 8006a36:	4a0d      	ldr	r2, [pc, #52]	@ (8006a6c <Meas_SetEnabledSensors+0x98>)
 8006a38:	0103      	lsls	r3, r0, #4
 8006a3a:	18d3      	adds	r3, r2, r3
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	1c0a      	adds	r2, r1, #0
 8006a40:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8006a42:	193b      	adds	r3, r7, r4
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	193a      	adds	r2, r7, r4
 8006a48:	1c59      	adds	r1, r3, #1
 8006a4a:	7011      	strb	r1, [r2, #0]
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	1d3b      	adds	r3, r7, #4
 8006a50:	78d9      	ldrb	r1, [r3, #3]
 8006a52:	4a06      	ldr	r2, [pc, #24]	@ (8006a6c <Meas_SetEnabledSensors+0x98>)
 8006a54:	0103      	lsls	r3, r0, #4
 8006a56:	18d3      	adds	r3, r2, r3
 8006a58:	330c      	adds	r3, #12
 8006a5a:	1c0a      	adds	r2, r1, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
}
 8006a5e:	46c0      	nop			@ (mov r8, r8)
 8006a60:	46bd      	mov	sp, r7
 8006a62:	b005      	add	sp, #20
 8006a64:	bd90      	pop	{r4, r7, pc}
 8006a66:	46c0      	nop			@ (mov r8, r8)
 8006a68:	20001068 	.word	0x20001068
 8006a6c:	20001038 	.word	0x20001038

08006a70 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006a74:	4b02      	ldr	r3, [pc, #8]	@ (8006a80 <SetESPMeasurementDone+0x10>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	70da      	strb	r2, [r3, #3]
}
 8006a7a:	46c0      	nop			@ (mov r8, r8)
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	2000106c 	.word	0x2000106c

08006a84 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	4b03      	ldr	r3, [pc, #12]	@ (8006a9c <MIC_Init+0x18>)
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	46bd      	mov	sp, r7
 8006a96:	b002      	add	sp, #8
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	46c0      	nop			@ (mov r8, r8)
 8006a9c:	2000107c 	.word	0x2000107c

08006aa0 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8006adc <UpdateSampleRate+0x3c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d00e      	beq.n	8006ad2 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006ab4:	4b09      	ldr	r3, [pc, #36]	@ (8006adc <UpdateSampleRate+0x3c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f006 fec3 	bl	800d844 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006abe:	4b07      	ldr	r3, [pc, #28]	@ (8006adc <UpdateSampleRate+0x3c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006ac6:	4b05      	ldr	r3, [pc, #20]	@ (8006adc <UpdateSampleRate+0x3c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	0018      	movs	r0, r3
 8006acc:	f006 fdc8 	bl	800d660 <HAL_I2S_Init>
 8006ad0:	e000      	b.n	8006ad4 <UpdateSampleRate+0x34>
    return;
 8006ad2:	46c0      	nop			@ (mov r8, r8)
}
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b002      	add	sp, #8
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	46c0      	nop			@ (mov r8, r8)
 8006adc:	2000107c 	.word	0x2000107c

08006ae0 <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006ae8:	4b18      	ldr	r3, [pc, #96]	@ (8006b4c <ConvertAudio+0x6c>)
 8006aea:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	5e9b      	ldrsh	r3, [r3, r2]
 8006afa:	025b      	lsls	r3, r3, #9
 8006afc:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3302      	adds	r3, #2
 8006b02:	2200      	movs	r2, #0
 8006b04:	5e9b      	ldrsh	r3, [r3, r2]
 8006b06:	11db      	asrs	r3, r3, #7
 8006b08:	05db      	lsls	r3, r3, #23
 8006b0a:	0ddb      	lsrs	r3, r3, #23
 8006b0c:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	2380      	movs	r3, #128	@ 0x80
 8006b1a:	041b      	lsls	r3, r3, #16
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	d004      	beq.n	8006b2a <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	22ff      	movs	r2, #255	@ 0xff
 8006b24:	0612      	lsls	r2, r2, #24
 8006b26:	4313      	orrs	r3, r2
 8006b28:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006b2e:	68b8      	ldr	r0, [r7, #8]
 8006b30:	f7fa fccc 	bl	80014cc <__aeabi_i2f>
 8006b34:	1c03      	adds	r3, r0, #0
 8006b36:	69b9      	ldr	r1, [r7, #24]
 8006b38:	1c18      	adds	r0, r3, #0
 8006b3a:	f7f9 ffc9 	bl	8000ad0 <__aeabi_fdiv>
 8006b3e:	1c03      	adds	r3, r0, #0
 8006b40:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006b42:	697b      	ldr	r3, [r7, #20]
}
 8006b44:	1c18      	adds	r0, r3, #0
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b008      	add	sp, #32
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	4afffffe 	.word	0x4afffffe

08006b50 <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006b50:	b5b0      	push	{r4, r5, r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	000a      	movs	r2, r1
 8006b5a:	1cbb      	adds	r3, r7, #2
 8006b5c:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8006b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006bdc <MIC_Start+0x8c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006b66:	4a1e      	ldr	r2, [pc, #120]	@ (8006be0 <MIC_Start+0x90>)
 8006b68:	4b1e      	ldr	r3, [pc, #120]	@ (8006be4 <MIC_Start+0x94>)
 8006b6a:	0019      	movs	r1, r3
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	f002 fe25 	bl	80097bc <CreateLine>
    return;
 8006b72:	e02f      	b.n	8006bd4 <MIC_Start+0x84>
  }
  SetMICIndicator();
 8006b74:	f002 f832 	bl	8008bdc <SetMICIndicator>
  Debug("In mic start");
 8006b78:	4a1b      	ldr	r2, [pc, #108]	@ (8006be8 <MIC_Start+0x98>)
 8006b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8006bec <MIC_Start+0x9c>)
 8006b7c:	0019      	movs	r1, r3
 8006b7e:	2003      	movs	r0, #3
 8006b80:	f002 fe1c 	bl	80097bc <CreateLine>
  UpdateSampleRate(sampleRate);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	0018      	movs	r0, r3
 8006b88:	f7ff ff8a 	bl	8006aa0 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006b8c:	4b18      	ldr	r3, [pc, #96]	@ (8006bf0 <MIC_Start+0xa0>)
 8006b8e:	1cba      	adds	r2, r7, #2
 8006b90:	8812      	ldrh	r2, [r2, #0]
 8006b92:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006b94:	f003 f998 	bl	8009ec8 <HAL_GetTick>
 8006b98:	0003      	movs	r3, r0
 8006b9a:	3314      	adds	r3, #20
 8006b9c:	001a      	movs	r2, r3
 8006b9e:	4b15      	ldr	r3, [pc, #84]	@ (8006bf4 <MIC_Start+0xa4>)
 8006ba0:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006ba2:	4b15      	ldr	r3, [pc, #84]	@ (8006bf8 <MIC_Start+0xa8>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006ba8:	4b14      	ldr	r3, [pc, #80]	@ (8006bfc <MIC_Start+0xac>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006bae:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <MIC_Start+0x8c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	250f      	movs	r5, #15
 8006bb4:	197c      	adds	r4, r7, r5
 8006bb6:	2280      	movs	r2, #128	@ 0x80
 8006bb8:	00d2      	lsls	r2, r2, #3
 8006bba:	4911      	ldr	r1, [pc, #68]	@ (8006c00 <MIC_Start+0xb0>)
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f006 fe6d 	bl	800d89c <HAL_I2S_Receive_DMA>
 8006bc2:	0003      	movs	r3, r0
 8006bc4:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006bc6:	197b      	adds	r3, r7, r5
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	4a0e      	ldr	r2, [pc, #56]	@ (8006c04 <MIC_Start+0xb4>)
 8006bcc:	490e      	ldr	r1, [pc, #56]	@ (8006c08 <MIC_Start+0xb8>)
 8006bce:	2002      	movs	r0, #2
 8006bd0:	f002 fdf4 	bl	80097bc <CreateLine>
}
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b004      	add	sp, #16
 8006bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8006bda:	46c0      	nop			@ (mov r8, r8)
 8006bdc:	2000107c 	.word	0x2000107c
 8006be0:	0801b49c 	.word	0x0801b49c
 8006be4:	0801b4bc 	.word	0x0801b4bc
 8006be8:	0801b4c0 	.word	0x0801b4c0
 8006bec:	0801b4d0 	.word	0x0801b4d0
 8006bf0:	20000028 	.word	0x20000028
 8006bf4:	20002080 	.word	0x20002080
 8006bf8:	20002084 	.word	0x20002084
 8006bfc:	20002085 	.word	0x20002085
 8006c00:	20001080 	.word	0x20001080
 8006c04:	0801b4d4 	.word	0x0801b4d4
 8006c08:	0801b4e0 	.word	0x0801b4e0

08006c0c <MinimalValue>:

float MinimalValue(uint16_t length){
 8006c0c:	b590      	push	{r4, r7, lr}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	0002      	movs	r2, r0
 8006c14:	1dbb      	adds	r3, r7, #6
 8006c16:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006c18:	23fe      	movs	r3, #254	@ 0xfe
 8006c1a:	059b      	lsls	r3, r3, #22
 8006c1c:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006c1e:	230a      	movs	r3, #10
 8006c20:	18fb      	adds	r3, r7, r3
 8006c22:	2200      	movs	r2, #0
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	e01c      	b.n	8006c62 <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006c28:	240a      	movs	r4, #10
 8006c2a:	193b      	adds	r3, r7, r4
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	5e9a      	ldrsh	r2, [r3, r2]
 8006c30:	4b12      	ldr	r3, [pc, #72]	@ (8006c7c <MinimalValue+0x70>)
 8006c32:	0092      	lsls	r2, r2, #2
 8006c34:	58d3      	ldr	r3, [r2, r3]
 8006c36:	1c19      	adds	r1, r3, #0
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7f9 fc5b 	bl	80004f4 <__aeabi_fcmpgt>
 8006c3e:	1e03      	subs	r3, r0, #0
 8006c40:	d006      	beq.n	8006c50 <MinimalValue+0x44>
      MinVal = sample[i];
 8006c42:	193b      	adds	r3, r7, r4
 8006c44:	2200      	movs	r2, #0
 8006c46:	5e9a      	ldrsh	r2, [r3, r2]
 8006c48:	4b0c      	ldr	r3, [pc, #48]	@ (8006c7c <MinimalValue+0x70>)
 8006c4a:	0092      	lsls	r2, r2, #2
 8006c4c:	58d3      	ldr	r3, [r2, r3]
 8006c4e:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006c50:	210a      	movs	r1, #10
 8006c52:	187b      	adds	r3, r7, r1
 8006c54:	2200      	movs	r2, #0
 8006c56:	5e9b      	ldrsh	r3, [r3, r2]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	187b      	adds	r3, r7, r1
 8006c60:	801a      	strh	r2, [r3, #0]
 8006c62:	230a      	movs	r3, #10
 8006c64:	18fb      	adds	r3, r7, r3
 8006c66:	2200      	movs	r2, #0
 8006c68:	5e9a      	ldrsh	r2, [r3, r2]
 8006c6a:	1dbb      	adds	r3, r7, #6
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	dbda      	blt.n	8006c28 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 8006c72:	68fb      	ldr	r3, [r7, #12]
}
 8006c74:	1c18      	adds	r0, r3, #0
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b005      	add	sp, #20
 8006c7a:	bd90      	pop	{r4, r7, pc}
 8006c7c:	200020bc 	.word	0x200020bc

08006c80 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	0002      	movs	r2, r0
 8006c88:	1dbb      	adds	r3, r7, #6
 8006c8a:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006c8c:	4b18      	ldr	r3, [pc, #96]	@ (8006cf0 <MaximalValue+0x70>)
 8006c8e:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006c90:	230a      	movs	r3, #10
 8006c92:	18fb      	adds	r3, r7, r3
 8006c94:	2200      	movs	r2, #0
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	e01c      	b.n	8006cd4 <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006c9a:	240a      	movs	r4, #10
 8006c9c:	193b      	adds	r3, r7, r4
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	5e9a      	ldrsh	r2, [r3, r2]
 8006ca2:	4b14      	ldr	r3, [pc, #80]	@ (8006cf4 <MaximalValue+0x74>)
 8006ca4:	0092      	lsls	r2, r2, #2
 8006ca6:	58d3      	ldr	r3, [r2, r3]
 8006ca8:	1c19      	adds	r1, r3, #0
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7f9 fc0e 	bl	80004cc <__aeabi_fcmplt>
 8006cb0:	1e03      	subs	r3, r0, #0
 8006cb2:	d006      	beq.n	8006cc2 <MaximalValue+0x42>
      MaxVal = sample[i];
 8006cb4:	193b      	adds	r3, r7, r4
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	5e9a      	ldrsh	r2, [r3, r2]
 8006cba:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf4 <MaximalValue+0x74>)
 8006cbc:	0092      	lsls	r2, r2, #2
 8006cbe:	58d3      	ldr	r3, [r2, r3]
 8006cc0:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006cc2:	210a      	movs	r1, #10
 8006cc4:	187b      	adds	r3, r7, r1
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	5e9b      	ldrsh	r3, [r3, r2]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3301      	adds	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	187b      	adds	r3, r7, r1
 8006cd2:	801a      	strh	r2, [r3, #0]
 8006cd4:	230a      	movs	r3, #10
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	2200      	movs	r2, #0
 8006cda:	5e9a      	ldrsh	r2, [r3, r2]
 8006cdc:	1dbb      	adds	r3, r7, #6
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	dbda      	blt.n	8006c9a <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
}
 8006ce6:	1c18      	adds	r0, r3, #0
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b005      	add	sp, #20
 8006cec:	bd90      	pop	{r4, r7, pc}
 8006cee:	46c0      	nop			@ (mov r8, r8)
 8006cf0:	bf800000 	.word	0xbf800000
 8006cf4:	200020bc 	.word	0x200020bc

08006cf8 <MIC_Check>:
bool MIC_Check(void) {
 8006cf8:	b5b0      	push	{r4, r5, r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006cfe:	4a25      	ldr	r2, [pc, #148]	@ (8006d94 <MIC_Check+0x9c>)
 8006d00:	4b25      	ldr	r3, [pc, #148]	@ (8006d98 <MIC_Check+0xa0>)
 8006d02:	0019      	movs	r1, r3
 8006d04:	2002      	movs	r0, #2
 8006d06:	f002 fd59 	bl	80097bc <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d0a:	230e      	movs	r3, #14
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	2200      	movs	r2, #0
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e016      	b.n	8006d42 <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006d14:	210e      	movs	r1, #14
 8006d16:	187b      	adds	r3, r7, r1
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	005a      	lsls	r2, r3, #1
 8006d20:	4b1e      	ldr	r3, [pc, #120]	@ (8006d9c <MIC_Check+0xa4>)
 8006d22:	18d2      	adds	r2, r2, r3
 8006d24:	000d      	movs	r5, r1
 8006d26:	187b      	adds	r3, r7, r1
 8006d28:	881c      	ldrh	r4, [r3, #0]
 8006d2a:	0010      	movs	r0, r2
 8006d2c:	f7ff fed8 	bl	8006ae0 <ConvertAudio>
 8006d30:	1c01      	adds	r1, r0, #0
 8006d32:	4b1b      	ldr	r3, [pc, #108]	@ (8006da0 <MIC_Check+0xa8>)
 8006d34:	00a2      	lsls	r2, r4, #2
 8006d36:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d38:	197b      	adds	r3, r7, r5
 8006d3a:	197a      	adds	r2, r7, r5
 8006d3c:	8812      	ldrh	r2, [r2, #0]
 8006d3e:	3201      	adds	r2, #1
 8006d40:	801a      	strh	r2, [r3, #0]
 8006d42:	230e      	movs	r3, #14
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	881a      	ldrh	r2, [r3, #0]
 8006d48:	2380      	movs	r3, #128	@ 0x80
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d3e1      	bcc.n	8006d14 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006d50:	2380      	movs	r3, #128	@ 0x80
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	0018      	movs	r0, r3
 8006d56:	f7ff ff93 	bl	8006c80 <MaximalValue>
 8006d5a:	1c03      	adds	r3, r0, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006d5e:	2380      	movs	r3, #128	@ 0x80
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	0018      	movs	r0, r3
 8006d64:	f7ff ff52 	bl	8006c0c <MinimalValue>
 8006d68:	1c03      	adds	r3, r0, #0
 8006d6a:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	68b8      	ldr	r0, [r7, #8]
 8006d70:	f7f9 fbc0 	bl	80004f4 <__aeabi_fcmpgt>
 8006d74:	1e03      	subs	r3, r0, #0
 8006d76:	d105      	bne.n	8006d84 <MIC_Check+0x8c>
 8006d78:	2100      	movs	r1, #0
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7f9 fba6 	bl	80004cc <__aeabi_fcmplt>
 8006d80:	1e03      	subs	r3, r0, #0
 8006d82:	d001      	beq.n	8006d88 <MIC_Check+0x90>
    return(true);
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <MIC_Check+0x92>
  }
  return(false);
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	b004      	add	sp, #16
 8006d90:	bdb0      	pop	{r4, r5, r7, pc}
 8006d92:	46c0      	nop			@ (mov r8, r8)
 8006d94:	0801b4e4 	.word	0x0801b4e4
 8006d98:	0801b4e0 	.word	0x0801b4e0
 8006d9c:	20001080 	.word	0x20001080
 8006da0:	200020bc 	.word	0x200020bc

08006da4 <MIC_Print>:
void MIC_Print(void) {
 8006da4:	b590      	push	{r4, r7, lr}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
  Info("New samples");
 8006daa:	4a8a      	ldr	r2, [pc, #552]	@ (8006fd4 <MIC_Print+0x230>)
 8006dac:	4b8a      	ldr	r3, [pc, #552]	@ (8006fd8 <MIC_Print+0x234>)
 8006dae:	0019      	movs	r1, r3
 8006db0:	2002      	movs	r0, #2
 8006db2:	f002 fd03 	bl	80097bc <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006db6:	1dbb      	adds	r3, r7, #6
 8006db8:	2200      	movs	r2, #0
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	e014      	b.n	8006de8 <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006dbe:	1dbb      	adds	r3, r7, #6
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	005a      	lsls	r2, r3, #1
 8006dc8:	4b84      	ldr	r3, [pc, #528]	@ (8006fdc <MIC_Print+0x238>)
 8006dca:	18d2      	adds	r2, r2, r3
 8006dcc:	1dbb      	adds	r3, r7, #6
 8006dce:	881c      	ldrh	r4, [r3, #0]
 8006dd0:	0010      	movs	r0, r2
 8006dd2:	f7ff fe85 	bl	8006ae0 <ConvertAudio>
 8006dd6:	1c01      	adds	r1, r0, #0
 8006dd8:	4b81      	ldr	r3, [pc, #516]	@ (8006fe0 <MIC_Print+0x23c>)
 8006dda:	00a2      	lsls	r2, r4, #2
 8006ddc:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006dde:	1dbb      	adds	r3, r7, #6
 8006de0:	1dba      	adds	r2, r7, #6
 8006de2:	8812      	ldrh	r2, [r2, #0]
 8006de4:	3201      	adds	r2, #1
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	1dbb      	adds	r3, r7, #6
 8006dea:	881a      	ldrh	r2, [r3, #0]
 8006dec:	2380      	movs	r3, #128	@ 0x80
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d3e4      	bcc.n	8006dbe <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 8006df4:	f000 f976 	bl	80070e4 <MIC_GetDB>
 8006df8:	1c02      	adds	r2, r0, #0
 8006dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8006fe4 <MIC_Print+0x240>)
 8006dfc:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 8006dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8006fe8 <MIC_Print+0x244>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b09      	cmp	r3, #9
 8006e04:	d80e      	bhi.n	8006e24 <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 8006e06:	4b78      	ldr	r3, [pc, #480]	@ (8006fe8 <MIC_Print+0x244>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	001a      	movs	r2, r3
 8006e0c:	4b75      	ldr	r3, [pc, #468]	@ (8006fe4 <MIC_Print+0x240>)
 8006e0e:	6819      	ldr	r1, [r3, #0]
 8006e10:	4b76      	ldr	r3, [pc, #472]	@ (8006fec <MIC_Print+0x248>)
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006e16:	4b74      	ldr	r3, [pc, #464]	@ (8006fe8 <MIC_Print+0x244>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	4b72      	ldr	r3, [pc, #456]	@ (8006fe8 <MIC_Print+0x244>)
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e013      	b.n	8006e4c <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 8006e24:	4b70      	ldr	r3, [pc, #448]	@ (8006fe8 <MIC_Print+0x244>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8006e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe8 <MIC_Print+0x244>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	001a      	movs	r2, r3
 8006e30:	4b6c      	ldr	r3, [pc, #432]	@ (8006fe4 <MIC_Print+0x240>)
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	4b6d      	ldr	r3, [pc, #436]	@ (8006fec <MIC_Print+0x248>)
 8006e36:	0092      	lsls	r2, r2, #2
 8006e38:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006e3a:	4b6b      	ldr	r3, [pc, #428]	@ (8006fe8 <MIC_Print+0x244>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	4b69      	ldr	r3, [pc, #420]	@ (8006fe8 <MIC_Print+0x244>)
 8006e44:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8006e46:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff0 <MIC_Print+0x24c>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8006e4c:	4b68      	ldr	r3, [pc, #416]	@ (8006ff0 <MIC_Print+0x24c>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2201      	movs	r2, #1
 8006e52:	4053      	eors	r3, r2
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <MIC_Print+0xc2>
    setMic(dBc);
 8006e5a:	4b62      	ldr	r3, [pc, #392]	@ (8006fe4 <MIC_Print+0x240>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	1c18      	adds	r0, r3, #0
 8006e60:	f7fc fc5e 	bl	8003720 <setMic>
 8006e64:	e02d      	b.n	8006ec2 <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 8006e66:	4b63      	ldr	r3, [pc, #396]	@ (8006ff4 <MIC_Print+0x250>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e6c:	1d7b      	adds	r3, r7, #5
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	e013      	b.n	8006e9c <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 8006e74:	1d7b      	adds	r3, r7, #5
 8006e76:	781a      	ldrb	r2, [r3, #0]
 8006e78:	4b5c      	ldr	r3, [pc, #368]	@ (8006fec <MIC_Print+0x248>)
 8006e7a:	0092      	lsls	r2, r2, #2
 8006e7c:	58d2      	ldr	r2, [r2, r3]
 8006e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8006ff4 <MIC_Print+0x250>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	1c19      	adds	r1, r3, #0
 8006e84:	1c10      	adds	r0, r2, #0
 8006e86:	f7f9 fc99 	bl	80007bc <__aeabi_fadd>
 8006e8a:	1c03      	adds	r3, r0, #0
 8006e8c:	1c1a      	adds	r2, r3, #0
 8006e8e:	4b59      	ldr	r3, [pc, #356]	@ (8006ff4 <MIC_Print+0x250>)
 8006e90:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e92:	1d7b      	adds	r3, r7, #5
 8006e94:	781a      	ldrb	r2, [r3, #0]
 8006e96:	1d7b      	adds	r3, r7, #5
 8006e98:	3201      	adds	r2, #1
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	1d7b      	adds	r3, r7, #5
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b09      	cmp	r3, #9
 8006ea2:	d9e7      	bls.n	8006e74 <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 8006ea4:	4b53      	ldr	r3, [pc, #332]	@ (8006ff4 <MIC_Print+0x250>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4953      	ldr	r1, [pc, #332]	@ (8006ff8 <MIC_Print+0x254>)
 8006eaa:	1c18      	adds	r0, r3, #0
 8006eac:	f7f9 fe10 	bl	8000ad0 <__aeabi_fdiv>
 8006eb0:	1c03      	adds	r3, r0, #0
 8006eb2:	1c1a      	adds	r2, r3, #0
 8006eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8006ff4 <MIC_Print+0x250>)
 8006eb6:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 8006eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8006ff4 <MIC_Print+0x250>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	1c18      	adds	r0, r3, #0
 8006ebe:	f7fc fc2f 	bl	8003720 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8006ec2:	4b48      	ldr	r3, [pc, #288]	@ (8006fe4 <MIC_Print+0x240>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	494d      	ldr	r1, [pc, #308]	@ (8006ffc <MIC_Print+0x258>)
 8006ec8:	1c18      	adds	r0, r3, #0
 8006eca:	f7f9 fb13 	bl	80004f4 <__aeabi_fcmpgt>
 8006ece:	1e03      	subs	r3, r0, #0
 8006ed0:	d004      	beq.n	8006edc <MIC_Print+0x138>
    SetDBLED(true, true, true);
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	f001 fdec 	bl	8008ab4 <SetDBLED>
  }
  if(dBc < 85 && dBc >= 80){ //red
 8006edc:	4b41      	ldr	r3, [pc, #260]	@ (8006fe4 <MIC_Print+0x240>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4946      	ldr	r1, [pc, #280]	@ (8006ffc <MIC_Print+0x258>)
 8006ee2:	1c18      	adds	r0, r3, #0
 8006ee4:	f7f9 faf2 	bl	80004cc <__aeabi_fcmplt>
 8006ee8:	1e03      	subs	r3, r0, #0
 8006eea:	d00c      	beq.n	8006f06 <MIC_Print+0x162>
 8006eec:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe4 <MIC_Print+0x240>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4943      	ldr	r1, [pc, #268]	@ (8007000 <MIC_Print+0x25c>)
 8006ef2:	1c18      	adds	r0, r3, #0
 8006ef4:	f7f9 fb08 	bl	8000508 <__aeabi_fcmpge>
 8006ef8:	1e03      	subs	r3, r0, #0
 8006efa:	d004      	beq.n	8006f06 <MIC_Print+0x162>
    SetDBLED(true, false, false);
 8006efc:	2200      	movs	r2, #0
 8006efe:	2100      	movs	r1, #0
 8006f00:	2001      	movs	r0, #1
 8006f02:	f001 fdd7 	bl	8008ab4 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 75){//purple
 8006f06:	4b37      	ldr	r3, [pc, #220]	@ (8006fe4 <MIC_Print+0x240>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	493d      	ldr	r1, [pc, #244]	@ (8007000 <MIC_Print+0x25c>)
 8006f0c:	1c18      	adds	r0, r3, #0
 8006f0e:	f7f9 fadd 	bl	80004cc <__aeabi_fcmplt>
 8006f12:	1e03      	subs	r3, r0, #0
 8006f14:	d00c      	beq.n	8006f30 <MIC_Print+0x18c>
 8006f16:	4b33      	ldr	r3, [pc, #204]	@ (8006fe4 <MIC_Print+0x240>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	493a      	ldr	r1, [pc, #232]	@ (8007004 <MIC_Print+0x260>)
 8006f1c:	1c18      	adds	r0, r3, #0
 8006f1e:	f7f9 faf3 	bl	8000508 <__aeabi_fcmpge>
 8006f22:	1e03      	subs	r3, r0, #0
 8006f24:	d004      	beq.n	8006f30 <MIC_Print+0x18c>
    SetDBLED(true, false, true);
 8006f26:	2201      	movs	r2, #1
 8006f28:	2100      	movs	r1, #0
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	f001 fdc2 	bl	8008ab4 <SetDBLED>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 8006f30:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe4 <MIC_Print+0x240>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4933      	ldr	r1, [pc, #204]	@ (8007004 <MIC_Print+0x260>)
 8006f36:	1c18      	adds	r0, r3, #0
 8006f38:	f7f9 fac8 	bl	80004cc <__aeabi_fcmplt>
 8006f3c:	1e03      	subs	r3, r0, #0
 8006f3e:	d00c      	beq.n	8006f5a <MIC_Print+0x1b6>
 8006f40:	4b28      	ldr	r3, [pc, #160]	@ (8006fe4 <MIC_Print+0x240>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4930      	ldr	r1, [pc, #192]	@ (8007008 <MIC_Print+0x264>)
 8006f46:	1c18      	adds	r0, r3, #0
 8006f48:	f7f9 fade 	bl	8000508 <__aeabi_fcmpge>
 8006f4c:	1e03      	subs	r3, r0, #0
 8006f4e:	d004      	beq.n	8006f5a <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 8006f50:	2200      	movs	r2, #0
 8006f52:	2101      	movs	r1, #1
 8006f54:	2001      	movs	r0, #1
 8006f56:	f001 fdad 	bl	8008ab4 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 65){//Green
 8006f5a:	4b22      	ldr	r3, [pc, #136]	@ (8006fe4 <MIC_Print+0x240>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	492a      	ldr	r1, [pc, #168]	@ (8007008 <MIC_Print+0x264>)
 8006f60:	1c18      	adds	r0, r3, #0
 8006f62:	f7f9 fab3 	bl	80004cc <__aeabi_fcmplt>
 8006f66:	1e03      	subs	r3, r0, #0
 8006f68:	d00c      	beq.n	8006f84 <MIC_Print+0x1e0>
 8006f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe4 <MIC_Print+0x240>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4927      	ldr	r1, [pc, #156]	@ (800700c <MIC_Print+0x268>)
 8006f70:	1c18      	adds	r0, r3, #0
 8006f72:	f7f9 fac9 	bl	8000508 <__aeabi_fcmpge>
 8006f76:	1e03      	subs	r3, r0, #0
 8006f78:	d004      	beq.n	8006f84 <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f001 fd98 	bl	8008ab4 <SetDBLED>
  }
  if(dBc < 65 && dBc >= 60){//blue
 8006f84:	4b17      	ldr	r3, [pc, #92]	@ (8006fe4 <MIC_Print+0x240>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4920      	ldr	r1, [pc, #128]	@ (800700c <MIC_Print+0x268>)
 8006f8a:	1c18      	adds	r0, r3, #0
 8006f8c:	f7f9 fa9e 	bl	80004cc <__aeabi_fcmplt>
 8006f90:	1e03      	subs	r3, r0, #0
 8006f92:	d00c      	beq.n	8006fae <MIC_Print+0x20a>
 8006f94:	4b13      	ldr	r3, [pc, #76]	@ (8006fe4 <MIC_Print+0x240>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	491d      	ldr	r1, [pc, #116]	@ (8007010 <MIC_Print+0x26c>)
 8006f9a:	1c18      	adds	r0, r3, #0
 8006f9c:	f7f9 fab4 	bl	8000508 <__aeabi_fcmpge>
 8006fa0:	1e03      	subs	r3, r0, #0
 8006fa2:	d004      	beq.n	8006fae <MIC_Print+0x20a>
    SetDBLED(false, false, true);
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f001 fd83 	bl	8008ab4 <SetDBLED>
  }
  if(dBc < 60){//light blue
 8006fae:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <MIC_Print+0x240>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4917      	ldr	r1, [pc, #92]	@ (8007010 <MIC_Print+0x26c>)
 8006fb4:	1c18      	adds	r0, r3, #0
 8006fb6:	f7f9 fa89 	bl	80004cc <__aeabi_fcmplt>
 8006fba:	1e03      	subs	r3, r0, #0
 8006fbc:	d100      	bne.n	8006fc0 <MIC_Print+0x21c>
    SetDBLED(false, true, true);
  }


  //FFT();
}
 8006fbe:	e004      	b.n	8006fca <MIC_Print+0x226>
    SetDBLED(false, true, true);
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	f001 fd75 	bl	8008ab4 <SetDBLED>
}
 8006fca:	46c0      	nop			@ (mov r8, r8)
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b003      	add	sp, #12
 8006fd0:	bd90      	pop	{r4, r7, pc}
 8006fd2:	46c0      	nop			@ (mov r8, r8)
 8006fd4:	0801b4e4 	.word	0x0801b4e4
 8006fd8:	0801b4e0 	.word	0x0801b4e0
 8006fdc:	20001080 	.word	0x20001080
 8006fe0:	200020bc 	.word	0x200020bc
 8006fe4:	20002088 	.word	0x20002088
 8006fe8:	200020b8 	.word	0x200020b8
 8006fec:	2000208c 	.word	0x2000208c
 8006ff0:	200020b9 	.word	0x200020b9
 8006ff4:	200020b4 	.word	0x200020b4
 8006ff8:	41200000 	.word	0x41200000
 8006ffc:	42aa0000 	.word	0x42aa0000
 8007000:	42a00000 	.word	0x42a00000
 8007004:	42960000 	.word	0x42960000
 8007008:	428c0000 	.word	0x428c0000
 800700c:	42820000 	.word	0x42820000
 8007010:	42700000 	.word	0x42700000

08007014 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  if(DataReady) {
 8007018:	4b0a      	ldr	r3, [pc, #40]	@ (8007044 <MIC_MeasurementDone+0x30>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00c      	beq.n	800703c <MIC_MeasurementDone+0x28>
    MIC_Print();
 8007022:	f7ff febf 	bl	8006da4 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 8007026:	4b08      	ldr	r3, [pc, #32]	@ (8007048 <MIC_MeasurementDone+0x34>)
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	4a08      	ldr	r2, [pc, #32]	@ (800704c <MIC_MeasurementDone+0x38>)
 800702c:	4908      	ldr	r1, [pc, #32]	@ (8007050 <MIC_MeasurementDone+0x3c>)
 800702e:	2003      	movs	r0, #3
 8007030:	f002 fbc4 	bl	80097bc <CreateLine>
    ResetMICIndicator();
 8007034:	f001 fde4 	bl	8008c00 <ResetMICIndicator>
    return true;
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <MIC_MeasurementDone+0x2a>
  }
  return false;
 800703c:	2300      	movs	r3, #0
}
 800703e:	0018      	movs	r0, r3
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20002085 	.word	0x20002085
 8007048:	20000028 	.word	0x20000028
 800704c:	0801b4f0 	.word	0x0801b4f0
 8007050:	0801b4d0 	.word	0x0801b4d0

08007054 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 8007054:	b590      	push	{r4, r7, lr}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 800705a:	4b0a      	ldr	r3, [pc, #40]	@ (8007084 <MIC_TestMeasurementDone+0x30>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d009      	beq.n	8007078 <MIC_TestMeasurementDone+0x24>
    Check = MIC_Check();
 8007064:	1dfc      	adds	r4, r7, #7
 8007066:	f7ff fe47 	bl	8006cf8 <MIC_Check>
 800706a:	0003      	movs	r3, r0
 800706c:	7023      	strb	r3, [r4, #0]
    ResetMICIndicator();
 800706e:	f001 fdc7 	bl	8008c00 <ResetMICIndicator>
    return Check;
 8007072:	1dfb      	adds	r3, r7, #7
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	e000      	b.n	800707a <MIC_TestMeasurementDone+0x26>
  }
  return false;
 8007078:	2300      	movs	r3, #0
}
 800707a:	0018      	movs	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	b003      	add	sp, #12
 8007080:	bd90      	pop	{r4, r7, pc}
 8007082:	46c0      	nop			@ (mov r8, r8)
 8007084:	20002085 	.word	0x20002085

08007088 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8007090:	4b10      	ldr	r3, [pc, #64]	@ (80070d4 <HAL_I2S_RxCpltCallback+0x4c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d118      	bne.n	80070cc <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 800709a:	4b0f      	ldr	r3, [pc, #60]	@ (80070d8 <HAL_I2S_RxCpltCallback+0x50>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d008      	beq.n	80070b6 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 80070a4:	4b0b      	ldr	r3, [pc, #44]	@ (80070d4 <HAL_I2S_RxCpltCallback+0x4c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	0018      	movs	r0, r3
 80070aa:	f006 fcb9 	bl	800da20 <HAL_I2S_DMAStop>
    DataReady = true;
 80070ae:	4b0b      	ldr	r3, [pc, #44]	@ (80070dc <HAL_I2S_RxCpltCallback+0x54>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	e00b      	b.n	80070ce <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 80070b6:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <HAL_I2S_RxCpltCallback+0x58>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	0018      	movs	r0, r3
 80070bc:	f002 fb28 	bl	8009710 <TimestampIsReached>
 80070c0:	1e03      	subs	r3, r0, #0
 80070c2:	d004      	beq.n	80070ce <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 80070c4:	4b04      	ldr	r3, [pc, #16]	@ (80070d8 <HAL_I2S_RxCpltCallback+0x50>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e000      	b.n	80070ce <HAL_I2S_RxCpltCallback+0x46>
    return;
 80070cc:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b002      	add	sp, #8
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	2000107c 	.word	0x2000107c
 80070d8:	20002084 	.word	0x20002084
 80070dc:	20002085 	.word	0x20002085
 80070e0:	20002080 	.word	0x20002080

080070e4 <MIC_GetDB>:

float MIC_GetDB(void) {
 80070e4:	b590      	push	{r4, r7, lr}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 80070ee:	2300      	movs	r3, #0
 80070f0:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80070f2:	230a      	movs	r3, #10
 80070f4:	18fb      	adds	r3, r7, r3
 80070f6:	2280      	movs	r2, #128	@ 0x80
 80070f8:	0052      	lsls	r2, r2, #1
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e019      	b.n	8007132 <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 80070fe:	240a      	movs	r4, #10
 8007100:	193b      	adds	r3, r7, r4
 8007102:	881a      	ldrh	r2, [r3, #0]
 8007104:	4b2b      	ldr	r3, [pc, #172]	@ (80071b4 <MIC_GetDB+0xd0>)
 8007106:	0092      	lsls	r2, r2, #2
 8007108:	58d0      	ldr	r0, [r2, r3]
 800710a:	193b      	adds	r3, r7, r4
 800710c:	881a      	ldrh	r2, [r3, #0]
 800710e:	4b29      	ldr	r3, [pc, #164]	@ (80071b4 <MIC_GetDB+0xd0>)
 8007110:	0092      	lsls	r2, r2, #2
 8007112:	58d3      	ldr	r3, [r2, r3]
 8007114:	1c19      	adds	r1, r3, #0
 8007116:	f7f9 fec1 	bl	8000e9c <__aeabi_fmul>
 800711a:	1c03      	adds	r3, r0, #0
 800711c:	1c19      	adds	r1, r3, #0
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7f9 fb4c 	bl	80007bc <__aeabi_fadd>
 8007124:	1c03      	adds	r3, r0, #0
 8007126:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 8007128:	193b      	adds	r3, r7, r4
 800712a:	881a      	ldrh	r2, [r3, #0]
 800712c:	193b      	adds	r3, r7, r4
 800712e:	3201      	adds	r2, #1
 8007130:	801a      	strh	r2, [r3, #0]
 8007132:	230a      	movs	r3, #10
 8007134:	18fb      	adds	r3, r7, r3
 8007136:	881a      	ldrh	r2, [r3, #0]
 8007138:	2380      	movs	r3, #128	@ 0x80
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	429a      	cmp	r2, r3
 800713e:	d3de      	bcc.n	80070fe <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 8007140:	2187      	movs	r1, #135	@ 0x87
 8007142:	05c9      	lsls	r1, r1, #23
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f7f9 fcc3 	bl	8000ad0 <__aeabi_fdiv>
 800714a:	1c03      	adds	r3, r0, #0
 800714c:	1c18      	adds	r0, r3, #0
 800714e:	f7fc f907 	bl	8003360 <__aeabi_f2d>
 8007152:	0002      	movs	r2, r0
 8007154:	000b      	movs	r3, r1
 8007156:	0010      	movs	r0, r2
 8007158:	0019      	movs	r1, r3
 800715a:	f013 f905 	bl	801a368 <sqrt>
 800715e:	0002      	movs	r2, r0
 8007160:	000b      	movs	r3, r1
 8007162:	0010      	movs	r0, r2
 8007164:	0019      	movs	r1, r3
 8007166:	f7fc f943 	bl	80033f0 <__aeabi_d2f>
 800716a:	1c03      	adds	r3, r0, #0
 800716c:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 800716e:	6838      	ldr	r0, [r7, #0]
 8007170:	f7fc f8f6 	bl	8003360 <__aeabi_f2d>
 8007174:	0002      	movs	r2, r0
 8007176:	000b      	movs	r3, r1
 8007178:	0010      	movs	r0, r2
 800717a:	0019      	movs	r1, r3
 800717c:	f013 f8be 	bl	801a2fc <log10>
 8007180:	2200      	movs	r2, #0
 8007182:	4b0d      	ldr	r3, [pc, #52]	@ (80071b8 <MIC_GetDB+0xd4>)
 8007184:	f7fb f9d8 	bl	8002538 <__aeabi_dmul>
 8007188:	0002      	movs	r2, r0
 800718a:	000b      	movs	r3, r1
 800718c:	0010      	movs	r0, r2
 800718e:	0019      	movs	r1, r3
 8007190:	2200      	movs	r2, #0
 8007192:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <MIC_GetDB+0xd8>)
 8007194:	f7fa fa28 	bl	80015e8 <__aeabi_dadd>
 8007198:	0002      	movs	r2, r0
 800719a:	000b      	movs	r3, r1
 800719c:	0010      	movs	r0, r2
 800719e:	0019      	movs	r1, r3
 80071a0:	f7fc f926 	bl	80033f0 <__aeabi_d2f>
 80071a4:	1c03      	adds	r3, r0, #0
 80071a6:	607b      	str	r3, [r7, #4]

    return dBValue;
 80071a8:	687b      	ldr	r3, [r7, #4]
}
 80071aa:	1c18      	adds	r0, r3, #0
 80071ac:	46bd      	mov	sp, r7
 80071ae:	b005      	add	sp, #20
 80071b0:	bd90      	pop	{r4, r7, pc}
 80071b2:	46c0      	nop			@ (mov r8, r8)
 80071b4:	200020bc 	.word	0x200020bc
 80071b8:	40340000 	.word	0x40340000
 80071bc:	405e0000 	.word	0x405e0000

080071c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80071c4:	4b16      	ldr	r3, [pc, #88]	@ (8007220 <MX_RTC_Init+0x60>)
 80071c6:	4a17      	ldr	r2, [pc, #92]	@ (8007224 <MX_RTC_Init+0x64>)
 80071c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80071ca:	4b15      	ldr	r3, [pc, #84]	@ (8007220 <MX_RTC_Init+0x60>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80071d0:	4b13      	ldr	r3, [pc, #76]	@ (8007220 <MX_RTC_Init+0x60>)
 80071d2:	227f      	movs	r2, #127	@ 0x7f
 80071d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80071d6:	4b12      	ldr	r3, [pc, #72]	@ (8007220 <MX_RTC_Init+0x60>)
 80071d8:	22ff      	movs	r2, #255	@ 0xff
 80071da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80071dc:	4b10      	ldr	r3, [pc, #64]	@ (8007220 <MX_RTC_Init+0x60>)
 80071de:	2200      	movs	r2, #0
 80071e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80071e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007220 <MX_RTC_Init+0x60>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80071e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007220 <MX_RTC_Init+0x60>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80071ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007220 <MX_RTC_Init+0x60>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80071f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007220 <MX_RTC_Init+0x60>)
 80071f6:	0018      	movs	r0, r3
 80071f8:	f009 fb34 	bl	8010864 <HAL_RTC_Init>
 80071fc:	1e03      	subs	r3, r0, #0
 80071fe:	d001      	beq.n	8007204 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007200:	f7ff f8c2 	bl	8006388 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8007204:	4b06      	ldr	r3, [pc, #24]	@ (8007220 <MX_RTC_Init+0x60>)
 8007206:	2200      	movs	r2, #0
 8007208:	2100      	movs	r1, #0
 800720a:	0018      	movs	r0, r3
 800720c:	f009 fc5c 	bl	8010ac8 <HAL_RTCEx_SetWakeUpTimer>
 8007210:	1e03      	subs	r3, r0, #0
 8007212:	d001      	beq.n	8007218 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8007214:	f7ff f8b8 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007218:	46c0      	nop			@ (mov r8, r8)
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	46c0      	nop			@ (mov r8, r8)
 8007220:	200028bc 	.word	0x200028bc
 8007224:	40002800 	.word	0x40002800

08007228 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a06      	ldr	r2, [pc, #24]	@ (8007250 <HAL_RTC_MspInit+0x28>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d106      	bne.n	8007248 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800723a:	4b06      	ldr	r3, [pc, #24]	@ (8007254 <HAL_RTC_MspInit+0x2c>)
 800723c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800723e:	4b05      	ldr	r3, [pc, #20]	@ (8007254 <HAL_RTC_MspInit+0x2c>)
 8007240:	2180      	movs	r1, #128	@ 0x80
 8007242:	02c9      	lsls	r1, r1, #11
 8007244:	430a      	orrs	r2, r1
 8007246:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007248:	46c0      	nop			@ (mov r8, r8)
 800724a:	46bd      	mov	sp, r7
 800724c:	b002      	add	sp, #8
 800724e:	bd80      	pop	{r7, pc}
 8007250:	40002800 	.word	0x40002800
 8007254:	40021000 	.word	0x40021000

08007258 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d113      	bne.n	800729e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	22fe      	movs	r2, #254	@ 0xfe
 800727a:	0592      	lsls	r2, r2, #22
 800727c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4a1a      	ldr	r2, [pc, #104]	@ (80072ec <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8007282:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4a1a      	ldr	r2, [pc, #104]	@ (80072f0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8007288:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a19      	ldr	r2, [pc, #100]	@ (80072f4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800728e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a19      	ldr	r2, [pc, #100]	@ (80072f8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8007294:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4a18      	ldr	r2, [pc, #96]	@ (80072fc <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800729a:	61da      	str	r2, [r3, #28]
 800729c:	e011      	b.n	80072c2 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4a17      	ldr	r2, [pc, #92]	@ (8007300 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 80072a2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4a17      	ldr	r2, [pc, #92]	@ (8007304 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80072a8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4a16      	ldr	r2, [pc, #88]	@ (8007308 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80072ae:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a16      	ldr	r2, [pc, #88]	@ (800730c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80072b4:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4a15      	ldr	r2, [pc, #84]	@ (8007310 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80072ba:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a15      	ldr	r2, [pc, #84]	@ (8007314 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80072c0:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a14      	ldr	r2, [pc, #80]	@ (8007318 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80072c6:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4a14      	ldr	r2, [pc, #80]	@ (800731c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80072cc:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4a12      	ldr	r2, [pc, #72]	@ (800731c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80072d2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4a12      	ldr	r2, [pc, #72]	@ (8007320 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80072d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	0018      	movs	r0, r3
 80072de:	f000 f831 	bl	8007344 <GasIndexAlgorithm_reset>
}
 80072e2:	46c0      	nop			@ (mov r8, r8)
 80072e4:	46bd      	mov	sp, r7
 80072e6:	b004      	add	sp, #16
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	46c0      	nop			@ (mov r8, r8)
 80072ec:	00002710 	.word	0x00002710
 80072f0:	44340000 	.word	0x44340000
 80072f4:	46859800 	.word	0x46859800
 80072f8:	46a05000 	.word	0x46a05000
 80072fc:	41f00000 	.word	0x41f00000
 8007300:	42c80000 	.word	0x42c80000
 8007304:	00004e20 	.word	0x00004e20
 8007308:	43340000 	.word	0x43340000
 800730c:	4528c000 	.word	0x4528c000
 8007310:	45a32000 	.word	0x45a32000
 8007314:	43aa0000 	.word	0x43aa0000
 8007318:	43660000 	.word	0x43660000
 800731c:	41400000 	.word	0x41400000
 8007320:	42480000 	.word	0x42480000

08007324 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800732e:	22fe      	movs	r2, #254	@ 0xfe
 8007330:	0592      	lsls	r2, r2, #22
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	0018      	movs	r0, r3
 8007338:	f7ff ff8e 	bl	8007258 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800733c:	46c0      	nop			@ (mov r8, r8)
 800733e:	46bd      	mov	sp, r7
 8007340:	b002      	add	sp, #8
 8007342:	bd80      	pop	{r7, pc}

08007344 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	0018      	movs	r0, r3
 8007362:	f000 f805 	bl	8007370 <GasIndexAlgorithm__init_instances>
}
 8007366:	46c0      	nop			@ (mov r8, r8)
 8007368:	46bd      	mov	sp, r7
 800736a:	b002      	add	sp, #8
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	0018      	movs	r0, r3
 800737c:	f000 f8e8 	bl	8007550 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	0018      	movs	r0, r3
 8007384:	f000 f9a6 	bl	80076d4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007388:	1c04      	adds	r4, r0, #0
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	0018      	movs	r0, r3
 800738e:	f000 f9ab 	bl	80076e8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007392:	1c02      	adds	r2, r0, #0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	1c21      	adds	r1, r4, #0
 8007398:	0018      	movs	r0, r3
 800739a:	f000 fc3b 	bl	8007c14 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d107      	bne.n	80073b6 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80073a6:	23fe      	movs	r3, #254	@ 0xfe
 80073a8:	059b      	lsls	r3, r3, #22
 80073aa:	4a0a      	ldr	r2, [pc, #40]	@ (80073d4 <GasIndexAlgorithm__init_instances+0x64>)
 80073ac:	490a      	ldr	r1, [pc, #40]	@ (80073d8 <GasIndexAlgorithm__init_instances+0x68>)
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fc86 	bl	8007cc0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80073b4:	e005      	b.n	80073c2 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80073b6:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <GasIndexAlgorithm__init_instances+0x6c>)
 80073b8:	4a09      	ldr	r2, [pc, #36]	@ (80073e0 <GasIndexAlgorithm__init_instances+0x70>)
 80073ba:	490a      	ldr	r1, [pc, #40]	@ (80073e4 <GasIndexAlgorithm__init_instances+0x74>)
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc7f 	bl	8007cc0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f000 fd35 	bl	8007e34 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 80073ca:	46c0      	nop			@ (mov r8, r8)
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b003      	add	sp, #12
 80073d0:	bd90      	pop	{r4, r7, pc}
 80073d2:	46c0      	nop			@ (mov r8, r8)
 80073d4:	bc257a78 	.word	0xbc257a78
 80073d8:	44198000 	.word	0x44198000
 80073dc:	42c80000 	.word	0x42c80000
 80073e0:	bbd4fdf4 	.word	0xbbd4fdf4
 80073e4:	43550000 	.word	0x43550000

080073e8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f8:	4952      	ldr	r1, [pc, #328]	@ (8007544 <GasIndexAlgorithm_process+0x15c>)
 80073fa:	1c18      	adds	r0, r3, #0
 80073fc:	f7f9 f870 	bl	80004e0 <__aeabi_fcmple>
 8007400:	1e03      	subs	r3, r0, #0
 8007402:	d00c      	beq.n	800741e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	1c19      	adds	r1, r3, #0
 800740e:	1c10      	adds	r0, r2, #0
 8007410:	f7f9 f9d4 	bl	80007bc <__aeabi_fadd>
 8007414:	1c03      	adds	r3, r0, #0
 8007416:	1c1a      	adds	r2, r3, #0
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	631a      	str	r2, [r3, #48]	@ 0x30
 800741c:	e080      	b.n	8007520 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	dd25      	ble.n	8007470 <GasIndexAlgorithm_process+0x88>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4a48      	ldr	r2, [pc, #288]	@ (8007548 <GasIndexAlgorithm_process+0x160>)
 8007428:	4293      	cmp	r3, r2
 800742a:	dc21      	bgt.n	8007470 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	dc04      	bgt.n	8007440 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60bb      	str	r3, [r7, #8]
 800743e:	e00d      	b.n	800745c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	4a41      	ldr	r2, [pc, #260]	@ (800754c <GasIndexAlgorithm_process+0x164>)
 8007446:	4694      	mov	ip, r2
 8007448:	4463      	add	r3, ip
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	429a      	cmp	r2, r3
 800744e:	dd05      	ble.n	800745c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	4a3d      	ldr	r2, [pc, #244]	@ (800754c <GasIndexAlgorithm_process+0x164>)
 8007456:	4694      	mov	ip, r2
 8007458:	4463      	add	r3, ip
 800745a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	0018      	movs	r0, r3
 8007466:	f7fa f831 	bl	80014cc <__aeabi_i2f>
 800746a:	1c02      	adds	r2, r0, #0
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	0018      	movs	r0, r3
 800747c:	f000 f945 	bl	800770a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8007480:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8007482:	d014      	beq.n	80074ae <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	1c11      	adds	r1, r2, #0
 800748c:	0018      	movs	r0, r3
 800748e:	f000 fbd1 	bl	8007c34 <GasIndexAlgorithm__mox_model__process>
 8007492:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	1c11      	adds	r1, r2, #0
 80074a0:	0018      	movs	r0, r3
 80074a2:	f000 fc25 	bl	8007cf0 <GasIndexAlgorithm__sigmoid_scaled__process>
 80074a6:	1c02      	adds	r2, r0, #0
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80074ac:	e003      	b.n	80074b6 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	1c11      	adds	r1, r2, #0
 80074be:	0018      	movs	r0, r3
 80074c0:	f000 fcec 	bl	8007e9c <GasIndexAlgorithm__adaptive_lowpass__process>
 80074c4:	1c02      	adds	r2, r0, #0
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ce:	21fc      	movs	r1, #252	@ 0xfc
 80074d0:	0589      	lsls	r1, r1, #22
 80074d2:	1c18      	adds	r0, r3, #0
 80074d4:	f7f8 fffa 	bl	80004cc <__aeabi_fcmplt>
 80074d8:	1e03      	subs	r3, r0, #0
 80074da:	d003      	beq.n	80074e4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	22fc      	movs	r2, #252	@ 0xfc
 80074e0:	0592      	lsls	r2, r2, #22
 80074e2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e8:	2100      	movs	r1, #0
 80074ea:	1c18      	adds	r0, r3, #0
 80074ec:	f7f9 f802 	bl	80004f4 <__aeabi_fcmpgt>
 80074f0:	1e03      	subs	r3, r0, #0
 80074f2:	d015      	beq.n	8007520 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	1c11      	adds	r1, r2, #0
 80074fc:	0018      	movs	r0, r3
 80074fe:	f000 fa4f 	bl	80079a0 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	0018      	movs	r0, r3
 8007506:	f000 f8e5 	bl	80076d4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800750a:	1c04      	adds	r4, r0, #0
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	0018      	movs	r0, r3
 8007510:	f000 f8ea 	bl	80076e8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007514:	1c02      	adds	r2, r0, #0
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	1c21      	adds	r1, r4, #0
 800751a:	0018      	movs	r0, r3
 800751c:	f000 fb7a 	bl	8007c14 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	21fc      	movs	r1, #252	@ 0xfc
 8007526:	0589      	lsls	r1, r1, #22
 8007528:	1c18      	adds	r0, r3, #0
 800752a:	f7f9 f947 	bl	80007bc <__aeabi_fadd>
 800752e:	1c03      	adds	r3, r0, #0
 8007530:	1c18      	adds	r0, r3, #0
 8007532:	f7f9 ffab 	bl	800148c <__aeabi_f2iz>
 8007536:	0002      	movs	r2, r0
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	601a      	str	r2, [r3, #0]
    return;
 800753c:	46c0      	nop			@ (mov r8, r8)
}
 800753e:	46bd      	mov	sp, r7
 8007540:	b005      	add	sp, #20
 8007542:	bd90      	pop	{r4, r7, pc}
 8007544:	42340000 	.word	0x42340000
 8007548:	0000fde7 	.word	0x0000fde7
 800754c:	00007fff 	.word	0x00007fff

08007550 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007550:	b5b0      	push	{r4, r5, r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	223c      	movs	r2, #60	@ 0x3c
 800755c:	2100      	movs	r1, #0
 800755e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	4952      	ldr	r1, [pc, #328]	@ (80076c4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800757a:	1c18      	adds	r0, r3, #0
 800757c:	f7f9 faa8 	bl	8000ad0 <__aeabi_fdiv>
 8007580:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007582:	2188      	movs	r1, #136	@ 0x88
 8007584:	05c9      	lsls	r1, r1, #23
 8007586:	1c18      	adds	r0, r3, #0
 8007588:	f7f9 fc88 	bl	8000e9c <__aeabi_fmul>
 800758c:	1c03      	adds	r3, r0, #0
 800758e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	494a      	ldr	r1, [pc, #296]	@ (80076c4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800759a:	1c18      	adds	r0, r3, #0
 800759c:	f7f9 fa98 	bl	8000ad0 <__aeabi_fdiv>
 80075a0:	1c03      	adds	r3, r0, #0
 80075a2:	1c19      	adds	r1, r3, #0
 80075a4:	1c20      	adds	r0, r4, #0
 80075a6:	f7f9 f909 	bl	80007bc <__aeabi_fadd>
 80075aa:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80075ac:	1c19      	adds	r1, r3, #0
 80075ae:	1c28      	adds	r0, r5, #0
 80075b0:	f7f9 fa8e 	bl	8000ad0 <__aeabi_fdiv>
 80075b4:	1c03      	adds	r3, r0, #0
 80075b6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4940      	ldr	r1, [pc, #256]	@ (80076c4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80075c2:	1c18      	adds	r0, r3, #0
 80075c4:	f7f9 fa84 	bl	8000ad0 <__aeabi_fdiv>
 80075c8:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80075ca:	2185      	movs	r1, #133	@ 0x85
 80075cc:	05c9      	lsls	r1, r1, #23
 80075ce:	1c18      	adds	r0, r3, #0
 80075d0:	f7f9 fc64 	bl	8000e9c <__aeabi_fmul>
 80075d4:	1c03      	adds	r3, r0, #0
 80075d6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4938      	ldr	r1, [pc, #224]	@ (80076c4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80075e2:	1c18      	adds	r0, r3, #0
 80075e4:	f7f9 fa74 	bl	8000ad0 <__aeabi_fdiv>
 80075e8:	1c03      	adds	r3, r0, #0
 80075ea:	1c19      	adds	r1, r3, #0
 80075ec:	1c20      	adds	r0, r4, #0
 80075ee:	f7f9 f8e5 	bl	80007bc <__aeabi_fadd>
 80075f2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80075f4:	1c19      	adds	r1, r3, #0
 80075f6:	1c28      	adds	r0, r5, #0
 80075f8:	f7f9 fa6a 	bl	8000ad0 <__aeabi_fdiv>
 80075fc:	1c03      	adds	r3, r0, #0
 80075fe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d118      	bne.n	800763e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007610:	2188      	movs	r1, #136	@ 0x88
 8007612:	05c9      	lsls	r1, r1, #23
 8007614:	1c18      	adds	r0, r3, #0
 8007616:	f7f9 fc41 	bl	8000e9c <__aeabi_fmul>
 800761a:	1c03      	adds	r3, r0, #0
 800761c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8007622:	4929      	ldr	r1, [pc, #164]	@ (80076c8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8007624:	1c18      	adds	r0, r3, #0
 8007626:	f7f9 f8c9 	bl	80007bc <__aeabi_fadd>
 800762a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800762c:	1c19      	adds	r1, r3, #0
 800762e:	1c20      	adds	r0, r4, #0
 8007630:	f7f9 fa4e 	bl	8000ad0 <__aeabi_fdiv>
 8007634:	1c03      	adds	r3, r0, #0
 8007636:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	655a      	str	r2, [r3, #84]	@ 0x54
 800763c:	e017      	b.n	800766e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007642:	2188      	movs	r1, #136	@ 0x88
 8007644:	05c9      	lsls	r1, r1, #23
 8007646:	1c18      	adds	r0, r3, #0
 8007648:	f7f9 fc28 	bl	8000e9c <__aeabi_fmul>
 800764c:	1c03      	adds	r3, r0, #0
 800764e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8007654:	491d      	ldr	r1, [pc, #116]	@ (80076cc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8007656:	1c18      	adds	r0, r3, #0
 8007658:	f7f9 f8b0 	bl	80007bc <__aeabi_fadd>
 800765c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800765e:	1c19      	adds	r1, r3, #0
 8007660:	1c20      	adds	r0, r4, #0
 8007662:	f7f9 fa35 	bl	8000ad0 <__aeabi_fdiv>
 8007666:	1c03      	adds	r3, r0, #0
 8007668:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007672:	2185      	movs	r1, #133	@ 0x85
 8007674:	05c9      	lsls	r1, r1, #23
 8007676:	1c18      	adds	r0, r3, #0
 8007678:	f7f9 fc10 	bl	8000e9c <__aeabi_fmul>
 800767c:	1c03      	adds	r3, r0, #0
 800767e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	4912      	ldr	r1, [pc, #72]	@ (80076d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8007686:	1c18      	adds	r0, r3, #0
 8007688:	f7f9 f898 	bl	80007bc <__aeabi_fadd>
 800768c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800768e:	1c19      	adds	r1, r3, #0
 8007690:	1c20      	adds	r0, r4, #0
 8007692:	f7f9 fa1d 	bl	8000ad0 <__aeabi_fdiv>
 8007696:	1c03      	adds	r3, r0, #0
 8007698:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80076bc:	46c0      	nop			@ (mov r8, r8)
 80076be:	46bd      	mov	sp, r7
 80076c0:	b002      	add	sp, #8
 80076c2:	bdb0      	pop	{r4, r5, r7, pc}
 80076c4:	45610000 	.word	0x45610000
 80076c8:	44960000 	.word	0x44960000
 80076cc:	41a00000 	.word	0x41a00000
 80076d0:	451c4000 	.word	0x451c4000

080076d4 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 80076e0:	1c18      	adds	r0, r3, #0
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b002      	add	sp, #8
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 80076f8:	1c19      	adds	r1, r3, #0
 80076fa:	1c10      	adds	r0, r2, #0
 80076fc:	f7f9 f85e 	bl	80007bc <__aeabi_fadd>
 8007700:	1c03      	adds	r3, r0, #0
}
 8007702:	1c18      	adds	r0, r3, #0
 8007704:	46bd      	mov	sp, r7
 8007706:	b002      	add	sp, #8
 8007708:	bd80      	pop	{r7, pc}

0800770a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	223c      	movs	r2, #60	@ 0x3c
 8007716:	5c9b      	ldrb	r3, [r3, r2]
}
 8007718:	0018      	movs	r0, r3
 800771a:	46bd      	mov	sp, r7
 800771c:	b002      	add	sp, #8
 800771e:	bd80      	pop	{r7, pc}

08007720 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8007720:	b5b0      	push	{r4, r5, r7, lr}
 8007722:	b08c      	sub	sp, #48	@ 0x30
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800772c:	1c19      	adds	r1, r3, #0
 800772e:	4895      	ldr	r0, [pc, #596]	@ (8007984 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8007730:	f7f9 fcf2 	bl	8001118 <__aeabi_fsub>
 8007734:	1c03      	adds	r3, r0, #0
 8007736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800773c:	1c19      	adds	r1, r3, #0
 800773e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007740:	f7f8 fed8 	bl	80004f4 <__aeabi_fcmpgt>
 8007744:	1e03      	subs	r3, r0, #0
 8007746:	d00b      	beq.n	8007760 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007750:	1c19      	adds	r1, r3, #0
 8007752:	1c10      	adds	r0, r2, #0
 8007754:	f7f9 f832 	bl	80007bc <__aeabi_fadd>
 8007758:	1c03      	adds	r3, r0, #0
 800775a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007764:	1c19      	adds	r1, r3, #0
 8007766:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007768:	f7f8 fec4 	bl	80004f4 <__aeabi_fcmpgt>
 800776c:	1e03      	subs	r3, r0, #0
 800776e:	d00b      	beq.n	8007788 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007778:	1c19      	adds	r1, r3, #0
 800777a:	1c10      	adds	r0, r2, #0
 800777c:	f7f9 f81e 	bl	80007bc <__aeabi_fadd>
 8007780:	1c03      	adds	r3, r0, #0
 8007782:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6959      	ldr	r1, [r3, #20]
 800778c:	4a7e      	ldr	r2, [pc, #504]	@ (8007988 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	0018      	movs	r0, r3
 8007792:	f000 f9f1 	bl	8007b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	1c11      	adds	r1, r2, #0
 800779e:	0018      	movs	r0, r3
 80077a0:	f000 f9fa 	bl	8007b98 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80077a4:	1c03      	adds	r3, r0, #0
 80077a6:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80077b4:	1c19      	adds	r1, r3, #0
 80077b6:	1c10      	adds	r0, r2, #0
 80077b8:	f7f9 fcae 	bl	8001118 <__aeabi_fsub>
 80077bc:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80077be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077c0:	1c18      	adds	r0, r3, #0
 80077c2:	f7f9 fb6b 	bl	8000e9c <__aeabi_fmul>
 80077c6:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80077c8:	1c19      	adds	r1, r3, #0
 80077ca:	1c20      	adds	r0, r4, #0
 80077cc:	f7f8 fff6 	bl	80007bc <__aeabi_fadd>
 80077d0:	1c03      	adds	r3, r0, #0
 80077d2:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80077dc:	1c19      	adds	r1, r3, #0
 80077de:	486b      	ldr	r0, [pc, #428]	@ (800798c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80077e0:	f7f9 fc9a 	bl	8001118 <__aeabi_fsub>
 80077e4:	1c03      	adds	r3, r0, #0
 80077e6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	1c11      	adds	r1, r2, #0
 80077f0:	0018      	movs	r0, r3
 80077f2:	f000 f9d1 	bl	8007b98 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80077f6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80077f8:	1c19      	adds	r1, r3, #0
 80077fa:	1c28      	adds	r0, r5, #0
 80077fc:	f7f9 fb4e 	bl	8000e9c <__aeabi_fmul>
 8007800:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8007802:	1c19      	adds	r1, r3, #0
 8007804:	1c20      	adds	r0, r4, #0
 8007806:	f7f8 ffd9 	bl	80007bc <__aeabi_fadd>
 800780a:	1c03      	adds	r3, r0, #0
 800780c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800780e:	4a60      	ldr	r2, [pc, #384]	@ (8007990 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007810:	6a39      	ldr	r1, [r7, #32]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	0018      	movs	r0, r3
 8007816:	f000 f9af 	bl	8007b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	1c11      	adds	r1, r2, #0
 8007822:	0018      	movs	r0, r3
 8007824:	f000 f9b8 	bl	8007b98 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007828:	1c03      	adds	r3, r0, #0
 800782a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800782c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800782e:	69f8      	ldr	r0, [r7, #28]
 8007830:	f7f9 fb34 	bl	8000e9c <__aeabi_fmul>
 8007834:	1c03      	adds	r3, r0, #0
 8007836:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6999      	ldr	r1, [r3, #24]
 8007840:	4a51      	ldr	r2, [pc, #324]	@ (8007988 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	0018      	movs	r0, r3
 8007846:	f000 f997 	bl	8007b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	1c11      	adds	r1, r2, #0
 8007852:	0018      	movs	r0, r3
 8007854:	f000 f9a0 	bl	8007b98 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007858:	1c03      	adds	r3, r0, #0
 800785a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007868:	1c19      	adds	r1, r3, #0
 800786a:	1c10      	adds	r0, r2, #0
 800786c:	f7f9 fc54 	bl	8001118 <__aeabi_fsub>
 8007870:	1c03      	adds	r3, r0, #0
 8007872:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8007874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007876:	69b8      	ldr	r0, [r7, #24]
 8007878:	f7f9 fc4e 	bl	8001118 <__aeabi_fsub>
 800787c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800787e:	1c19      	adds	r1, r3, #0
 8007880:	1c28      	adds	r0, r5, #0
 8007882:	f7f9 fb0b 	bl	8000e9c <__aeabi_fmul>
 8007886:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007888:	1c19      	adds	r1, r3, #0
 800788a:	1c20      	adds	r0, r4, #0
 800788c:	f7f8 ff96 	bl	80007bc <__aeabi_fadd>
 8007890:	1c03      	adds	r3, r0, #0
 8007892:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800789c:	1c19      	adds	r1, r3, #0
 800789e:	483b      	ldr	r0, [pc, #236]	@ (800798c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80078a0:	f7f9 fc3a 	bl	8001118 <__aeabi_fsub>
 80078a4:	1c03      	adds	r3, r0, #0
 80078a6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	1c11      	adds	r1, r2, #0
 80078b0:	0018      	movs	r0, r3
 80078b2:	f000 f971 	bl	8007b98 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80078b6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80078b8:	1c19      	adds	r1, r3, #0
 80078ba:	1c28      	adds	r0, r5, #0
 80078bc:	f7f9 faee 	bl	8000e9c <__aeabi_fmul>
 80078c0:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80078c2:	1c19      	adds	r1, r3, #0
 80078c4:	1c20      	adds	r0, r4, #0
 80078c6:	f7f8 ff79 	bl	80007bc <__aeabi_fadd>
 80078ca:	1c03      	adds	r3, r0, #0
 80078cc:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80078ce:	4a30      	ldr	r2, [pc, #192]	@ (8007990 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80078d0:	6939      	ldr	r1, [r7, #16]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	0018      	movs	r0, r3
 80078d6:	f000 f94f 	bl	8007b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	1c11      	adds	r1, r2, #0
 80078e2:	0018      	movs	r0, r3
 80078e4:	f000 f958 	bl	8007b98 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80078e8:	1c03      	adds	r3, r0, #0
 80078ea:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 80078ec:	6979      	ldr	r1, [r7, #20]
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7f9 fad4 	bl	8000e9c <__aeabi_fmul>
 80078f4:	1c03      	adds	r3, r0, #0
 80078f6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	4923      	ldr	r1, [pc, #140]	@ (8007994 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007906:	1c18      	adds	r0, r3, #0
 8007908:	f7f9 f8e2 	bl	8000ad0 <__aeabi_fdiv>
 800790c:	1c03      	adds	r3, r0, #0
 800790e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	20fe      	movs	r0, #254	@ 0xfe
 8007914:	0580      	lsls	r0, r0, #22
 8007916:	f7f9 fbff 	bl	8001118 <__aeabi_fsub>
 800791a:	1c03      	adds	r3, r0, #0
 800791c:	491e      	ldr	r1, [pc, #120]	@ (8007998 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800791e:	1c18      	adds	r0, r3, #0
 8007920:	f7f9 fabc 	bl	8000e9c <__aeabi_fmul>
 8007924:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007926:	491d      	ldr	r1, [pc, #116]	@ (800799c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007928:	1c18      	adds	r0, r3, #0
 800792a:	f7f9 fbf5 	bl	8001118 <__aeabi_fsub>
 800792e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007930:	1c19      	adds	r1, r3, #0
 8007932:	1c28      	adds	r0, r5, #0
 8007934:	f7f9 fab2 	bl	8000e9c <__aeabi_fmul>
 8007938:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800793a:	1c19      	adds	r1, r3, #0
 800793c:	1c20      	adds	r0, r4, #0
 800793e:	f7f8 ff3d 	bl	80007bc <__aeabi_fadd>
 8007942:	1c03      	adds	r3, r0, #0
 8007944:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800794e:	2100      	movs	r1, #0
 8007950:	1c18      	adds	r0, r3, #0
 8007952:	f7f8 fdbb 	bl	80004cc <__aeabi_fcmplt>
 8007956:	1e03      	subs	r3, r0, #0
 8007958:	d002      	beq.n	8007960 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007968:	1c19      	adds	r1, r3, #0
 800796a:	1c10      	adds	r0, r2, #0
 800796c:	f7f8 fdc2 	bl	80004f4 <__aeabi_fcmpgt>
 8007970:	1e03      	subs	r3, r0, #0
 8007972:	d100      	bne.n	8007976 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007974:	e002      	b.n	800797c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800797c:	46c0      	nop			@ (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	b00c      	add	sp, #48	@ 0x30
 8007982:	bdb0      	pop	{r4, r5, r7, pc}
 8007984:	46fffe00 	.word	0x46fffe00
 8007988:	3c23d70a 	.word	0x3c23d70a
 800798c:	43ff0000 	.word	0x43ff0000
 8007990:	3db851ec 	.word	0x3db851ec
 8007994:	42700000 	.word	0x42700000
 8007998:	3fa66666 	.word	0x3fa66666
 800799c:	3e99999a 	.word	0x3e99999a

080079a0 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80079a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	223c      	movs	r2, #60	@ 0x3c
 80079ae:	5c9b      	ldrb	r3, [r3, r2]
 80079b0:	2201      	movs	r2, #1
 80079b2:	4053      	eors	r3, r2
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	223c      	movs	r2, #60	@ 0x3c
 80079be:	2101      	movs	r1, #1
 80079c0:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 80079ce:	e0c8      	b.n	8007b62 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d4:	4965      	ldr	r1, [pc, #404]	@ (8007b6c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 80079d6:	1c18      	adds	r0, r3, #0
 80079d8:	f7f8 fd96 	bl	8000508 <__aeabi_fcmpge>
 80079dc:	1e03      	subs	r3, r0, #0
 80079de:	d107      	bne.n	80079f0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80079e4:	4962      	ldr	r1, [pc, #392]	@ (8007b70 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 80079e6:	1c18      	adds	r0, r3, #0
 80079e8:	f7f8 fd7a 	bl	80004e0 <__aeabi_fcmple>
 80079ec:	1e03      	subs	r3, r0, #0
 80079ee:	d00e      	beq.n	8007a0e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80079f8:	1c19      	adds	r1, r3, #0
 80079fa:	1c10      	adds	r0, r2, #0
 80079fc:	f7f8 fede 	bl	80007bc <__aeabi_fadd>
 8007a00:	1c03      	adds	r3, r0, #0
 8007a02:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a12:	1c19      	adds	r1, r3, #0
 8007a14:	6838      	ldr	r0, [r7, #0]
 8007a16:	f7f9 fb7f 	bl	8001118 <__aeabi_fsub>
 8007a1a:	1c03      	adds	r3, r0, #0
 8007a1c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	0018      	movs	r0, r3
 8007a22:	f7ff fe7d 	bl	8007720 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2a:	1c19      	adds	r1, r3, #0
 8007a2c:	6838      	ldr	r0, [r7, #0]
 8007a2e:	f7f9 fb73 	bl	8001118 <__aeabi_fsub>
 8007a32:	1c03      	adds	r3, r0, #0
 8007a34:	2185      	movs	r1, #133	@ 0x85
 8007a36:	05c9      	lsls	r1, r1, #23
 8007a38:	1c18      	adds	r0, r3, #0
 8007a3a:	f7f9 f849 	bl	8000ad0 <__aeabi_fdiv>
 8007a3e:	1c03      	adds	r3, r0, #0
 8007a40:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007a42:	2100      	movs	r1, #0
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7f8 fd41 	bl	80004cc <__aeabi_fcmplt>
 8007a4a:	1e03      	subs	r3, r0, #0
 8007a4c:	d008      	beq.n	8007a60 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a52:	68f9      	ldr	r1, [r7, #12]
 8007a54:	1c18      	adds	r0, r3, #0
 8007a56:	f7f9 fb5f 	bl	8001118 <__aeabi_fsub>
 8007a5a:	1c03      	adds	r3, r0, #0
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e007      	b.n	8007a70 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a64:	1c19      	adds	r1, r3, #0
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7f8 fea8 	bl	80007bc <__aeabi_fadd>
 8007a6c:	1c03      	adds	r3, r0, #0
 8007a6e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007a70:	23fe      	movs	r3, #254	@ 0xfe
 8007a72:	059b      	lsls	r3, r3, #22
 8007a74:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007a76:	493f      	ldr	r1, [pc, #252]	@ (8007b74 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007a78:	6978      	ldr	r0, [r7, #20]
 8007a7a:	f7f8 fd3b 	bl	80004f4 <__aeabi_fcmpgt>
 8007a7e:	1e03      	subs	r3, r0, #0
 8007a80:	d010      	beq.n	8007aa4 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007a82:	493c      	ldr	r1, [pc, #240]	@ (8007b74 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007a84:	6978      	ldr	r0, [r7, #20]
 8007a86:	f7f9 f823 	bl	8000ad0 <__aeabi_fdiv>
 8007a8a:	1c03      	adds	r3, r0, #0
 8007a8c:	1c1c      	adds	r4, r3, #0
 8007a8e:	4939      	ldr	r1, [pc, #228]	@ (8007b74 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007a90:	6978      	ldr	r0, [r7, #20]
 8007a92:	f7f9 f81d 	bl	8000ad0 <__aeabi_fdiv>
 8007a96:	1c03      	adds	r3, r0, #0
 8007a98:	1c19      	adds	r1, r3, #0
 8007a9a:	1c20      	adds	r0, r4, #0
 8007a9c:	f7f9 f9fe 	bl	8000e9c <__aeabi_fmul>
 8007aa0:	1c03      	adds	r3, r0, #0
 8007aa2:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007aa8:	1c19      	adds	r1, r3, #0
 8007aaa:	2085      	movs	r0, #133	@ 0x85
 8007aac:	05c0      	lsls	r0, r0, #23
 8007aae:	f7f9 fb33 	bl	8001118 <__aeabi_fsub>
 8007ab2:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007ab4:	6939      	ldr	r1, [r7, #16]
 8007ab6:	1c18      	adds	r0, r3, #0
 8007ab8:	f7f9 f9f0 	bl	8000e9c <__aeabi_fmul>
 8007abc:	1c03      	adds	r3, r0, #0
 8007abe:	1c18      	adds	r0, r3, #0
 8007ac0:	f012 fca0 	bl	801a404 <sqrtf>
 8007ac4:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007ace:	2185      	movs	r1, #133	@ 0x85
 8007ad0:	05c9      	lsls	r1, r1, #23
 8007ad2:	6938      	ldr	r0, [r7, #16]
 8007ad4:	f7f9 f9e2 	bl	8000e9c <__aeabi_fmul>
 8007ad8:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007ada:	1c19      	adds	r1, r3, #0
 8007adc:	1c28      	adds	r0, r5, #0
 8007ade:	f7f8 fff7 	bl	8000ad0 <__aeabi_fdiv>
 8007ae2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007ae4:	1c19      	adds	r1, r3, #0
 8007ae6:	1c20      	adds	r0, r4, #0
 8007ae8:	f7f9 f9d8 	bl	8000e9c <__aeabi_fmul>
 8007aec:	1c03      	adds	r3, r0, #0
 8007aee:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007af4:	68f9      	ldr	r1, [r7, #12]
 8007af6:	1c18      	adds	r0, r3, #0
 8007af8:	f7f9 f9d0 	bl	8000e9c <__aeabi_fmul>
 8007afc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007afe:	6939      	ldr	r1, [r7, #16]
 8007b00:	1c18      	adds	r0, r3, #0
 8007b02:	f7f8 ffe5 	bl	8000ad0 <__aeabi_fdiv>
 8007b06:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007b08:	68f9      	ldr	r1, [r7, #12]
 8007b0a:	1c18      	adds	r0, r3, #0
 8007b0c:	f7f9 f9c6 	bl	8000e9c <__aeabi_fmul>
 8007b10:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007b12:	1c19      	adds	r1, r3, #0
 8007b14:	1c20      	adds	r0, r4, #0
 8007b16:	f7f8 fe51 	bl	80007bc <__aeabi_fadd>
 8007b1a:	1c03      	adds	r3, r0, #0
 8007b1c:	1c18      	adds	r0, r3, #0
 8007b1e:	f012 fc71 	bl	801a404 <sqrtf>
 8007b22:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007b24:	1c19      	adds	r1, r3, #0
 8007b26:	1c30      	adds	r0, r6, #0
 8007b28:	f7f9 f9b8 	bl	8000e9c <__aeabi_fmul>
 8007b2c:	1c03      	adds	r3, r0, #0
 8007b2e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b3c:	68f9      	ldr	r1, [r7, #12]
 8007b3e:	1c18      	adds	r0, r3, #0
 8007b40:	f7f9 f9ac 	bl	8000e9c <__aeabi_fmul>
 8007b44:	1c03      	adds	r3, r0, #0
 8007b46:	2182      	movs	r1, #130	@ 0x82
 8007b48:	05c9      	lsls	r1, r1, #23
 8007b4a:	1c18      	adds	r0, r3, #0
 8007b4c:	f7f8 ffc0 	bl	8000ad0 <__aeabi_fdiv>
 8007b50:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007b52:	1c19      	adds	r1, r3, #0
 8007b54:	1c20      	adds	r0, r4, #0
 8007b56:	f7f8 fe31 	bl	80007bc <__aeabi_fadd>
 8007b5a:	1c03      	adds	r3, r0, #0
 8007b5c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007b62:	46c0      	nop			@ (mov r8, r8)
 8007b64:	46bd      	mov	sp, r7
 8007b66:	b007      	add	sp, #28
 8007b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b6a:	46c0      	nop			@ (mov r8, r8)
 8007b6c:	42c80000 	.word	0x42c80000
 8007b70:	c2c80000 	.word	0xc2c80000
 8007b74:	44b40000 	.word	0x44b40000

08007b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b90:	46c0      	nop			@ (mov r8, r8)
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b004      	add	sp, #16
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007b98:	b590      	push	{r4, r7, lr}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007baa:	1c19      	adds	r1, r3, #0
 8007bac:	6838      	ldr	r0, [r7, #0]
 8007bae:	f7f9 fab3 	bl	8001118 <__aeabi_fsub>
 8007bb2:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007bb4:	1c19      	adds	r1, r3, #0
 8007bb6:	1c20      	adds	r0, r4, #0
 8007bb8:	f7f9 f970 	bl	8000e9c <__aeabi_fmul>
 8007bbc:	1c03      	adds	r3, r0, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007bc0:	4912      	ldr	r1, [pc, #72]	@ (8007c0c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7f8 fc82 	bl	80004cc <__aeabi_fcmplt>
 8007bc8:	1e03      	subs	r3, r0, #0
 8007bca:	d002      	beq.n	8007bd2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007bcc:	23fe      	movs	r3, #254	@ 0xfe
 8007bce:	059b      	lsls	r3, r3, #22
 8007bd0:	e018      	b.n	8007c04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007bd2:	490f      	ldr	r1, [pc, #60]	@ (8007c10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f7f8 fc8d 	bl	80004f4 <__aeabi_fcmpgt>
 8007bda:	1e03      	subs	r3, r0, #0
 8007bdc:	d001      	beq.n	8007be2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8007bde:	2300      	movs	r3, #0
 8007be0:	e010      	b.n	8007c04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1c18      	adds	r0, r3, #0
 8007be6:	f012 fbe5 	bl	801a3b4 <expf>
 8007bea:	1c03      	adds	r3, r0, #0
 8007bec:	21fe      	movs	r1, #254	@ 0xfe
 8007bee:	0589      	lsls	r1, r1, #22
 8007bf0:	1c18      	adds	r0, r3, #0
 8007bf2:	f7f8 fde3 	bl	80007bc <__aeabi_fadd>
 8007bf6:	1c03      	adds	r3, r0, #0
 8007bf8:	1c19      	adds	r1, r3, #0
 8007bfa:	20fe      	movs	r0, #254	@ 0xfe
 8007bfc:	0580      	lsls	r0, r0, #22
 8007bfe:	f7f8 ff67 	bl	8000ad0 <__aeabi_fdiv>
 8007c02:	1c03      	adds	r3, r0, #0
    }
}
 8007c04:	1c18      	adds	r0, r3, #0
 8007c06:	46bd      	mov	sp, r7
 8007c08:	b005      	add	sp, #20
 8007c0a:	bd90      	pop	{r4, r7, pc}
 8007c0c:	c2480000 	.word	0xc2480000
 8007c10:	42480000 	.word	0x42480000

08007c14 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007c2c:	46c0      	nop			@ (mov r8, r8)
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	b004      	add	sp, #16
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007c34:	b590      	push	{r4, r7, lr}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d114      	bne.n	8007c70 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c4a:	1c19      	adds	r1, r3, #0
 8007c4c:	6838      	ldr	r0, [r7, #0]
 8007c4e:	f7f9 fa63 	bl	8001118 <__aeabi_fsub>
 8007c52:	1c03      	adds	r3, r0, #0
 8007c54:	4918      	ldr	r1, [pc, #96]	@ (8007cb8 <GasIndexAlgorithm__mox_model__process+0x84>)
 8007c56:	1c18      	adds	r0, r3, #0
 8007c58:	f7f8 ff3a 	bl	8000ad0 <__aeabi_fdiv>
 8007c5c:	1c03      	adds	r3, r0, #0
 8007c5e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007c64:	1c19      	adds	r1, r3, #0
 8007c66:	1c10      	adds	r0, r2, #0
 8007c68:	f7f9 f918 	bl	8000e9c <__aeabi_fmul>
 8007c6c:	1c03      	adds	r3, r0, #0
 8007c6e:	e01f      	b.n	8007cb0 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c74:	1c19      	adds	r1, r3, #0
 8007c76:	6838      	ldr	r0, [r7, #0]
 8007c78:	f7f9 fa4e 	bl	8001118 <__aeabi_fsub>
 8007c7c:	1c03      	adds	r3, r0, #0
 8007c7e:	1c1a      	adds	r2, r3, #0
 8007c80:	2380      	movs	r3, #128	@ 0x80
 8007c82:	061b      	lsls	r3, r3, #24
 8007c84:	4053      	eors	r3, r2
 8007c86:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c8c:	490b      	ldr	r1, [pc, #44]	@ (8007cbc <GasIndexAlgorithm__mox_model__process+0x88>)
 8007c8e:	1c18      	adds	r0, r3, #0
 8007c90:	f7f8 fd94 	bl	80007bc <__aeabi_fadd>
 8007c94:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007c96:	1c19      	adds	r1, r3, #0
 8007c98:	1c20      	adds	r0, r4, #0
 8007c9a:	f7f8 ff19 	bl	8000ad0 <__aeabi_fdiv>
 8007c9e:	1c03      	adds	r3, r0, #0
 8007ca0:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007ca6:	1c19      	adds	r1, r3, #0
 8007ca8:	1c10      	adds	r0, r2, #0
 8007caa:	f7f9 f8f7 	bl	8000e9c <__aeabi_fmul>
 8007cae:	1c03      	adds	r3, r0, #0
    }
}
 8007cb0:	1c18      	adds	r0, r3, #0
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	b003      	add	sp, #12
 8007cb6:	bd90      	pop	{r4, r7, pc}
 8007cb8:	44fa0000 	.word	0x44fa0000
 8007cbc:	435c0000 	.word	0x435c0000

08007cc0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2180      	movs	r1, #128	@ 0x80
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2184      	movs	r1, #132	@ 0x84
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2188      	movs	r1, #136	@ 0x88
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	505a      	str	r2, [r3, r1]
}
 8007ce6:	46c0      	nop			@ (mov r8, r8)
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b004      	add	sp, #16
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2280      	movs	r2, #128	@ 0x80
 8007cfe:	589c      	ldr	r4, [r3, r2]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2284      	movs	r2, #132	@ 0x84
 8007d04:	589b      	ldr	r3, [r3, r2]
 8007d06:	1c19      	adds	r1, r3, #0
 8007d08:	6838      	ldr	r0, [r7, #0]
 8007d0a:	f7f9 fa05 	bl	8001118 <__aeabi_fsub>
 8007d0e:	1c03      	adds	r3, r0, #0
 8007d10:	1c19      	adds	r1, r3, #0
 8007d12:	1c20      	adds	r0, r4, #0
 8007d14:	f7f9 f8c2 	bl	8000e9c <__aeabi_fmul>
 8007d18:	1c03      	adds	r3, r0, #0
 8007d1a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007d1c:	4940      	ldr	r1, [pc, #256]	@ (8007e20 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007d1e:	68b8      	ldr	r0, [r7, #8]
 8007d20:	f7f8 fbd4 	bl	80004cc <__aeabi_fcmplt>
 8007d24:	1e03      	subs	r3, r0, #0
 8007d26:	d001      	beq.n	8007d2c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007d28:	4b3e      	ldr	r3, [pc, #248]	@ (8007e24 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007d2a:	e075      	b.n	8007e18 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007d2c:	493e      	ldr	r1, [pc, #248]	@ (8007e28 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007d2e:	68b8      	ldr	r0, [r7, #8]
 8007d30:	f7f8 fbe0 	bl	80004f4 <__aeabi_fcmpgt>
 8007d34:	1e03      	subs	r3, r0, #0
 8007d36:	d001      	beq.n	8007d3c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	e06d      	b.n	8007e18 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	6838      	ldr	r0, [r7, #0]
 8007d40:	f7f8 fbe2 	bl	8000508 <__aeabi_fcmpge>
 8007d44:	1e03      	subs	r3, r0, #0
 8007d46:	d047      	beq.n	8007dd8 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2288      	movs	r2, #136	@ 0x88
 8007d4c:	589b      	ldr	r3, [r3, r2]
 8007d4e:	21fe      	movs	r1, #254	@ 0xfe
 8007d50:	0589      	lsls	r1, r1, #22
 8007d52:	1c18      	adds	r0, r3, #0
 8007d54:	f7f8 fbb4 	bl	80004c0 <__aeabi_fcmpeq>
 8007d58:	1e03      	subs	r3, r0, #0
 8007d5a:	d00e      	beq.n	8007d7a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	1c19      	adds	r1, r3, #0
 8007d62:	20fe      	movs	r0, #254	@ 0xfe
 8007d64:	0580      	lsls	r0, r0, #22
 8007d66:	f7f9 f9d7 	bl	8001118 <__aeabi_fsub>
 8007d6a:	1c03      	adds	r3, r0, #0
 8007d6c:	492f      	ldr	r1, [pc, #188]	@ (8007e2c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8007d6e:	1c18      	adds	r0, r3, #0
 8007d70:	f7f9 f894 	bl	8000e9c <__aeabi_fmul>
 8007d74:	1c03      	adds	r3, r0, #0
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e012      	b.n	8007da0 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	492c      	ldr	r1, [pc, #176]	@ (8007e30 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007d80:	1c18      	adds	r0, r3, #0
 8007d82:	f7f9 f88b 	bl	8000e9c <__aeabi_fmul>
 8007d86:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8007d88:	1c19      	adds	r1, r3, #0
 8007d8a:	4826      	ldr	r0, [pc, #152]	@ (8007e24 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007d8c:	f7f9 f9c4 	bl	8001118 <__aeabi_fsub>
 8007d90:	1c03      	adds	r3, r0, #0
 8007d92:	2181      	movs	r1, #129	@ 0x81
 8007d94:	05c9      	lsls	r1, r1, #23
 8007d96:	1c18      	adds	r0, r3, #0
 8007d98:	f7f8 fe9a 	bl	8000ad0 <__aeabi_fdiv>
 8007d9c:	1c03      	adds	r3, r0, #0
 8007d9e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007da0:	4920      	ldr	r1, [pc, #128]	@ (8007e24 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7f8 fd0a 	bl	80007bc <__aeabi_fadd>
 8007da8:	1c03      	adds	r3, r0, #0
 8007daa:	1c1c      	adds	r4, r3, #0
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	1c18      	adds	r0, r3, #0
 8007db0:	f012 fb00 	bl	801a3b4 <expf>
 8007db4:	1c03      	adds	r3, r0, #0
 8007db6:	21fe      	movs	r1, #254	@ 0xfe
 8007db8:	0589      	lsls	r1, r1, #22
 8007dba:	1c18      	adds	r0, r3, #0
 8007dbc:	f7f8 fcfe 	bl	80007bc <__aeabi_fadd>
 8007dc0:	1c03      	adds	r3, r0, #0
 8007dc2:	1c19      	adds	r1, r3, #0
 8007dc4:	1c20      	adds	r0, r4, #0
 8007dc6:	f7f8 fe83 	bl	8000ad0 <__aeabi_fdiv>
 8007dca:	1c03      	adds	r3, r0, #0
 8007dcc:	68f9      	ldr	r1, [r7, #12]
 8007dce:	1c18      	adds	r0, r3, #0
 8007dd0:	f7f9 f9a2 	bl	8001118 <__aeabi_fsub>
 8007dd4:	1c03      	adds	r3, r0, #0
 8007dd6:	e01f      	b.n	8007e18 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2188      	movs	r1, #136	@ 0x88
 8007de0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8007de2:	1c19      	adds	r1, r3, #0
 8007de4:	1c10      	adds	r0, r2, #0
 8007de6:	f7f8 fe73 	bl	8000ad0 <__aeabi_fdiv>
 8007dea:	1c03      	adds	r3, r0, #0
 8007dec:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	1c18      	adds	r0, r3, #0
 8007df2:	f012 fadf 	bl	801a3b4 <expf>
 8007df6:	1c03      	adds	r3, r0, #0
 8007df8:	21fe      	movs	r1, #254	@ 0xfe
 8007dfa:	0589      	lsls	r1, r1, #22
 8007dfc:	1c18      	adds	r0, r3, #0
 8007dfe:	f7f8 fcdd 	bl	80007bc <__aeabi_fadd>
 8007e02:	1c03      	adds	r3, r0, #0
 8007e04:	1c19      	adds	r1, r3, #0
 8007e06:	4807      	ldr	r0, [pc, #28]	@ (8007e24 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007e08:	f7f8 fe62 	bl	8000ad0 <__aeabi_fdiv>
 8007e0c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007e0e:	1c19      	adds	r1, r3, #0
 8007e10:	1c20      	adds	r0, r4, #0
 8007e12:	f7f9 f843 	bl	8000e9c <__aeabi_fmul>
 8007e16:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007e18:	1c18      	adds	r0, r3, #0
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	b005      	add	sp, #20
 8007e1e:	bd90      	pop	{r4, r7, pc}
 8007e20:	c2480000 	.word	0xc2480000
 8007e24:	43fa0000 	.word	0x43fa0000
 8007e28:	42480000 	.word	0x42480000
 8007e2c:	3f8041ab 	.word	0x3f8041ab
 8007e30:	40a00000 	.word	0x40a00000

08007e34 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007e34:	b590      	push	{r4, r7, lr}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4913      	ldr	r1, [pc, #76]	@ (8007e94 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8007e46:	1c18      	adds	r0, r3, #0
 8007e48:	f7f8 fcb8 	bl	80007bc <__aeabi_fadd>
 8007e4c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007e4e:	1c19      	adds	r1, r3, #0
 8007e50:	1c20      	adds	r0, r4, #0
 8007e52:	f7f8 fe3d 	bl	8000ad0 <__aeabi_fdiv>
 8007e56:	1c03      	adds	r3, r0, #0
 8007e58:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	228c      	movs	r2, #140	@ 0x8c
 8007e5e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	490b      	ldr	r1, [pc, #44]	@ (8007e98 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8007e6a:	1c18      	adds	r0, r3, #0
 8007e6c:	f7f8 fca6 	bl	80007bc <__aeabi_fadd>
 8007e70:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007e72:	1c19      	adds	r1, r3, #0
 8007e74:	1c20      	adds	r0, r4, #0
 8007e76:	f7f8 fe2b 	bl	8000ad0 <__aeabi_fdiv>
 8007e7a:	1c03      	adds	r3, r0, #0
 8007e7c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2290      	movs	r2, #144	@ 0x90
 8007e82:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2294      	movs	r2, #148	@ 0x94
 8007e88:	2100      	movs	r1, #0
 8007e8a:	5499      	strb	r1, [r3, r2]
}
 8007e8c:	46c0      	nop			@ (mov r8, r8)
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b003      	add	sp, #12
 8007e92:	bd90      	pop	{r4, r7, pc}
 8007e94:	41a00000 	.word	0x41a00000
 8007e98:	43fa0000 	.word	0x43fa0000

08007e9c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8007e9c:	b590      	push	{r4, r7, lr}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2294      	movs	r2, #148	@ 0x94
 8007eaa:	5c9b      	ldrb	r3, [r3, r2]
 8007eac:	2201      	movs	r2, #1
 8007eae:	4053      	eors	r3, r2
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00f      	beq.n	8007ed6 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2198      	movs	r1, #152	@ 0x98
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	219c      	movs	r1, #156	@ 0x9c
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	21a0      	movs	r1, #160	@ 0xa0
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2294      	movs	r2, #148	@ 0x94
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	228c      	movs	r2, #140	@ 0x8c
 8007eda:	589b      	ldr	r3, [r3, r2]
 8007edc:	1c19      	adds	r1, r3, #0
 8007ede:	20fe      	movs	r0, #254	@ 0xfe
 8007ee0:	0580      	lsls	r0, r0, #22
 8007ee2:	f7f9 f919 	bl	8001118 <__aeabi_fsub>
 8007ee6:	1c03      	adds	r3, r0, #0
 8007ee8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2298      	movs	r2, #152	@ 0x98
 8007eee:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007ef0:	1c19      	adds	r1, r3, #0
 8007ef2:	f7f8 ffd3 	bl	8000e9c <__aeabi_fmul>
 8007ef6:	1c03      	adds	r3, r0, #0
 8007ef8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	228c      	movs	r2, #140	@ 0x8c
 8007efe:	589b      	ldr	r3, [r3, r2]
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	1c18      	adds	r0, r3, #0
 8007f04:	f7f8 ffca 	bl	8000e9c <__aeabi_fmul>
 8007f08:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8007f0a:	1c19      	adds	r1, r3, #0
 8007f0c:	1c20      	adds	r0, r4, #0
 8007f0e:	f7f8 fc55 	bl	80007bc <__aeabi_fadd>
 8007f12:	1c03      	adds	r3, r0, #0
 8007f14:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2298      	movs	r2, #152	@ 0x98
 8007f1a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2290      	movs	r2, #144	@ 0x90
 8007f20:	589b      	ldr	r3, [r3, r2]
 8007f22:	1c19      	adds	r1, r3, #0
 8007f24:	20fe      	movs	r0, #254	@ 0xfe
 8007f26:	0580      	lsls	r0, r0, #22
 8007f28:	f7f9 f8f6 	bl	8001118 <__aeabi_fsub>
 8007f2c:	1c03      	adds	r3, r0, #0
 8007f2e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	229c      	movs	r2, #156	@ 0x9c
 8007f34:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007f36:	1c19      	adds	r1, r3, #0
 8007f38:	f7f8 ffb0 	bl	8000e9c <__aeabi_fmul>
 8007f3c:	1c03      	adds	r3, r0, #0
 8007f3e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2290      	movs	r2, #144	@ 0x90
 8007f44:	589b      	ldr	r3, [r3, r2]
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	1c18      	adds	r0, r3, #0
 8007f4a:	f7f8 ffa7 	bl	8000e9c <__aeabi_fmul>
 8007f4e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8007f50:	1c19      	adds	r1, r3, #0
 8007f52:	1c20      	adds	r0, r4, #0
 8007f54:	f7f8 fc32 	bl	80007bc <__aeabi_fadd>
 8007f58:	1c03      	adds	r3, r0, #0
 8007f5a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	229c      	movs	r2, #156	@ 0x9c
 8007f60:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2298      	movs	r2, #152	@ 0x98
 8007f66:	589a      	ldr	r2, [r3, r2]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	219c      	movs	r1, #156	@ 0x9c
 8007f6c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8007f6e:	1c19      	adds	r1, r3, #0
 8007f70:	1c10      	adds	r0, r2, #0
 8007f72:	f7f9 f8d1 	bl	8001118 <__aeabi_fsub>
 8007f76:	1c03      	adds	r3, r0, #0
 8007f78:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	6978      	ldr	r0, [r7, #20]
 8007f7e:	f7f8 faa5 	bl	80004cc <__aeabi_fcmplt>
 8007f82:	1e03      	subs	r3, r0, #0
 8007f84:	d004      	beq.n	8007f90 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2280      	movs	r2, #128	@ 0x80
 8007f8a:	0612      	lsls	r2, r2, #24
 8007f8c:	4053      	eors	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8007f90:	4923      	ldr	r1, [pc, #140]	@ (8008020 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8007f92:	6978      	ldr	r0, [r7, #20]
 8007f94:	f7f8 ff82 	bl	8000e9c <__aeabi_fmul>
 8007f98:	1c03      	adds	r3, r0, #0
 8007f9a:	1c18      	adds	r0, r3, #0
 8007f9c:	f012 fa0a 	bl	801a3b4 <expf>
 8007fa0:	1c03      	adds	r3, r0, #0
 8007fa2:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8007fa4:	491f      	ldr	r1, [pc, #124]	@ (8008024 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8007fa6:	6938      	ldr	r0, [r7, #16]
 8007fa8:	f7f8 ff78 	bl	8000e9c <__aeabi_fmul>
 8007fac:	1c03      	adds	r3, r0, #0
 8007fae:	491e      	ldr	r1, [pc, #120]	@ (8008028 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8007fb0:	1c18      	adds	r0, r3, #0
 8007fb2:	f7f8 fc03 	bl	80007bc <__aeabi_fadd>
 8007fb6:	1c03      	adds	r3, r0, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685c      	ldr	r4, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	68f9      	ldr	r1, [r7, #12]
 8007fc4:	1c18      	adds	r0, r3, #0
 8007fc6:	f7f8 fbf9 	bl	80007bc <__aeabi_fadd>
 8007fca:	1c03      	adds	r3, r0, #0
 8007fcc:	1c19      	adds	r1, r3, #0
 8007fce:	1c20      	adds	r0, r4, #0
 8007fd0:	f7f8 fd7e 	bl	8000ad0 <__aeabi_fdiv>
 8007fd4:	1c03      	adds	r3, r0, #0
 8007fd6:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	20fe      	movs	r0, #254	@ 0xfe
 8007fdc:	0580      	lsls	r0, r0, #22
 8007fde:	f7f9 f89b 	bl	8001118 <__aeabi_fsub>
 8007fe2:	1c03      	adds	r3, r0, #0
 8007fe4:	1c18      	adds	r0, r3, #0
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	22a0      	movs	r2, #160	@ 0xa0
 8007fea:	589b      	ldr	r3, [r3, r2]
 8007fec:	1c19      	adds	r1, r3, #0
 8007fee:	f7f8 ff55 	bl	8000e9c <__aeabi_fmul>
 8007ff2:	1c03      	adds	r3, r0, #0
 8007ff4:	1c1c      	adds	r4, r3, #0
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	68b8      	ldr	r0, [r7, #8]
 8007ffa:	f7f8 ff4f 	bl	8000e9c <__aeabi_fmul>
 8007ffe:	1c03      	adds	r3, r0, #0
 8008000:	1c19      	adds	r1, r3, #0
 8008002:	1c20      	adds	r0, r4, #0
 8008004:	f7f8 fbda 	bl	80007bc <__aeabi_fadd>
 8008008:	1c03      	adds	r3, r0, #0
 800800a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	22a0      	movs	r2, #160	@ 0xa0
 8008010:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	22a0      	movs	r2, #160	@ 0xa0
 8008016:	589b      	ldr	r3, [r3, r2]
}
 8008018:	1c18      	adds	r0, r3, #0
 800801a:	46bd      	mov	sp, r7
 800801c:	b007      	add	sp, #28
 800801e:	bd90      	pop	{r4, r7, pc}
 8008020:	be4ccccd 	.word	0xbe4ccccd
 8008024:	43f00000 	.word	0x43f00000
 8008028:	41a00000 	.word	0x41a00000

0800802c <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6039      	str	r1, [r7, #0]
 8008034:	0011      	movs	r1, r2
 8008036:	1dfb      	adds	r3, r7, #7
 8008038:	1c02      	adds	r2, r0, #0
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	1dbb      	adds	r3, r7, #6
 800803e:	1c0a      	adds	r2, r1, #0
 8008040:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008042:	4b08      	ldr	r3, [pc, #32]	@ (8008064 <ReadRegister+0x38>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d008      	beq.n	800805c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800804a:	4b06      	ldr	r3, [pc, #24]	@ (8008064 <ReadRegister+0x38>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	1dba      	adds	r2, r7, #6
 8008050:	7814      	ldrb	r4, [r2, #0]
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	1dfa      	adds	r2, r7, #7
 8008056:	7810      	ldrb	r0, [r2, #0]
 8008058:	0022      	movs	r2, r4
 800805a:	4798      	blx	r3
  }
}
 800805c:	46c0      	nop			@ (mov r8, r8)
 800805e:	46bd      	mov	sp, r7
 8008060:	b003      	add	sp, #12
 8008062:	bd90      	pop	{r4, r7, pc}
 8008064:	200028e0 	.word	0x200028e0

08008068 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008068:	b590      	push	{r4, r7, lr}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6039      	str	r1, [r7, #0]
 8008070:	0011      	movs	r1, r2
 8008072:	1dfb      	adds	r3, r7, #7
 8008074:	1c02      	adds	r2, r0, #0
 8008076:	701a      	strb	r2, [r3, #0]
 8008078:	1dbb      	adds	r3, r7, #6
 800807a:	1c0a      	adds	r2, r1, #0
 800807c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800807e:	4b08      	ldr	r3, [pc, #32]	@ (80080a0 <WriteRegister+0x38>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d008      	beq.n	8008098 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008086:	4b06      	ldr	r3, [pc, #24]	@ (80080a0 <WriteRegister+0x38>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	1dba      	adds	r2, r7, #6
 800808c:	7814      	ldrb	r4, [r2, #0]
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	1dfa      	adds	r2, r7, #7
 8008092:	7810      	ldrb	r0, [r2, #0]
 8008094:	0022      	movs	r2, r4
 8008096:	4798      	blx	r3
  }
}
 8008098:	46c0      	nop			@ (mov r8, r8)
 800809a:	46bd      	mov	sp, r7
 800809c:	b003      	add	sp, #12
 800809e:	bd90      	pop	{r4, r7, pc}
 80080a0:	200028e4 	.word	0x200028e4

080080a4 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80080ae:	4b07      	ldr	r3, [pc, #28]	@ (80080cc <SGP_Init+0x28>)
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80080b4:	4b06      	ldr	r3, [pc, #24]	@ (80080d0 <SGP_Init+0x2c>)
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80080ba:	4b06      	ldr	r3, [pc, #24]	@ (80080d4 <SGP_Init+0x30>)
 80080bc:	2100      	movs	r1, #0
 80080be:	0018      	movs	r0, r3
 80080c0:	f7ff f930 	bl	8007324 <GasIndexAlgorithm_init>
}
 80080c4:	46c0      	nop			@ (mov r8, r8)
 80080c6:	46bd      	mov	sp, r7
 80080c8:	b002      	add	sp, #8
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	200028e0 	.word	0x200028e0
 80080d0:	200028e4 	.word	0x200028e4
 80080d4:	200028f4 	.word	0x200028f4

080080d8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80080dc:	4b13      	ldr	r3, [pc, #76]	@ (800812c <SGP_StartMeasurement+0x54>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00d      	beq.n	8008100 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80080e4:	4b12      	ldr	r3, [pc, #72]	@ (8008130 <SGP_StartMeasurement+0x58>)
 80080e6:	2208      	movs	r2, #8
 80080e8:	0019      	movs	r1, r3
 80080ea:	2059      	movs	r0, #89	@ 0x59
 80080ec:	f7ff ffbc 	bl	8008068 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80080f0:	f001 fbd6 	bl	80098a0 <GetCurrentHalTicks>
 80080f4:	0003      	movs	r3, r0
 80080f6:	331e      	adds	r3, #30
 80080f8:	001a      	movs	r2, r3
 80080fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008134 <SGP_StartMeasurement+0x5c>)
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	e00c      	b.n	800811a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008100:	4b0d      	ldr	r3, [pc, #52]	@ (8008138 <SGP_StartMeasurement+0x60>)
 8008102:	2208      	movs	r2, #8
 8008104:	0019      	movs	r1, r3
 8008106:	2059      	movs	r0, #89	@ 0x59
 8008108:	f7ff ffae 	bl	8008068 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800810c:	f001 fbc8 	bl	80098a0 <GetCurrentHalTicks>
 8008110:	0003      	movs	r3, r0
 8008112:	33aa      	adds	r3, #170	@ 0xaa
 8008114:	001a      	movs	r2, r3
 8008116:	4b09      	ldr	r3, [pc, #36]	@ (800813c <SGP_StartMeasurement+0x64>)
 8008118:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800811a:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <SGP_StartMeasurement+0x68>)
 800811c:	2200      	movs	r2, #0
 800811e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8008120:	4b08      	ldr	r3, [pc, #32]	@ (8008144 <SGP_StartMeasurement+0x6c>)
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
}
 8008126:	46c0      	nop			@ (mov r8, r8)
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	2000299c 	.word	0x2000299c
 8008130:	2000003c 	.word	0x2000003c
 8008134:	20000050 	.word	0x20000050
 8008138:	20000034 	.word	0x20000034
 800813c:	20000048 	.word	0x20000048
 8008140:	200028f2 	.word	0x200028f2
 8008144:	200028f3 	.word	0x200028f3

08008148 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
 800814c:	4b04      	ldr	r3, [pc, #16]	@ (8008160 <SGP_HeatedUp+0x18>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	0018      	movs	r0, r3
 8008152:	f001 fadd 	bl	8009710 <TimestampIsReached>
 8008156:	0003      	movs	r3, r0
 8008158:	0018      	movs	r0, r3
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			@ (mov r8, r8)
 8008160:	20000048 	.word	0x20000048

08008164 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8008168:	4b04      	ldr	r3, [pc, #16]	@ (800817c <SGP_MeasurementReady+0x18>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	0018      	movs	r0, r3
 800816e:	f001 facf 	bl	8009710 <TimestampIsReached>
 8008172:	0003      	movs	r3, r0
}
 8008174:	0018      	movs	r0, r3
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	46c0      	nop			@ (mov r8, r8)
 800817c:	20000050 	.word	0x20000050

08008180 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8008184:	4b04      	ldr	r3, [pc, #16]	@ (8008198 <SGP_MeasurementDone+0x18>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	0018      	movs	r0, r3
 800818a:	f001 fac1 	bl	8009710 <TimestampIsReached>
 800818e:	0003      	movs	r3, r0
}
 8008190:	0018      	movs	r0, r3
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	2000004c 	.word	0x2000004c

0800819c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80081a0:	4b04      	ldr	r3, [pc, #16]	@ (80081b4 <SGP_TurnHeaterOff+0x18>)
 80081a2:	2202      	movs	r2, #2
 80081a4:	0019      	movs	r1, r3
 80081a6:	2059      	movs	r0, #89	@ 0x59
 80081a8:	f7ff ff5e 	bl	8008068 <WriteRegister>
}
 80081ac:	46c0      	nop			@ (mov r8, r8)
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	46c0      	nop			@ (mov r8, r8)
 80081b4:	2000002c 	.word	0x2000002c

080081b8 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80081b8:	b5b0      	push	{r4, r5, r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af02      	add	r7, sp, #8
 80081be:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80081c0:	f7ff ffc2 	bl	8008148 <SGP_HeatedUp>
 80081c4:	1e03      	subs	r3, r0, #0
 80081c6:	d038      	beq.n	800823a <SGP_GetMeasurementValues+0x82>
 80081c8:	4bd5      	ldr	r3, [pc, #852]	@ (8008520 <SGP_GetMeasurementValues+0x368>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2201      	movs	r2, #1
 80081ce:	4053      	eors	r3, r2
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d031      	beq.n	800823a <SGP_GetMeasurementValues+0x82>
 80081d6:	4bd3      	ldr	r3, [pc, #844]	@ (8008524 <SGP_GetMeasurementValues+0x36c>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2201      	movs	r2, #1
 80081dc:	4053      	eors	r3, r2
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d02a      	beq.n	800823a <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80081e4:	4ad0      	ldr	r2, [pc, #832]	@ (8008528 <SGP_GetMeasurementValues+0x370>)
 80081e6:	4bd1      	ldr	r3, [pc, #836]	@ (800852c <SGP_GetMeasurementValues+0x374>)
 80081e8:	0019      	movs	r1, r3
 80081ea:	2003      	movs	r0, #3
 80081ec:	f001 fae6 	bl	80097bc <CreateLine>
    HeatUpIsDone = true;
 80081f0:	4bcb      	ldr	r3, [pc, #812]	@ (8008520 <SGP_GetMeasurementValues+0x368>)
 80081f2:	2201      	movs	r2, #1
 80081f4:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80081f6:	4bce      	ldr	r3, [pc, #824]	@ (8008530 <SGP_GetMeasurementValues+0x378>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00d      	beq.n	800821a <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80081fe:	4bcd      	ldr	r3, [pc, #820]	@ (8008534 <SGP_GetMeasurementValues+0x37c>)
 8008200:	2208      	movs	r2, #8
 8008202:	0019      	movs	r1, r3
 8008204:	2059      	movs	r0, #89	@ 0x59
 8008206:	f7ff ff2f 	bl	8008068 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800820a:	f001 fb49 	bl	80098a0 <GetCurrentHalTicks>
 800820e:	0003      	movs	r3, r0
 8008210:	331e      	adds	r3, #30
 8008212:	001a      	movs	r2, r3
 8008214:	4bc8      	ldr	r3, [pc, #800]	@ (8008538 <SGP_GetMeasurementValues+0x380>)
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e00c      	b.n	8008234 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800821a:	4bc8      	ldr	r3, [pc, #800]	@ (800853c <SGP_GetMeasurementValues+0x384>)
 800821c:	2208      	movs	r2, #8
 800821e:	0019      	movs	r1, r3
 8008220:	2059      	movs	r0, #89	@ 0x59
 8008222:	f7ff ff21 	bl	8008068 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008226:	f001 fb3b 	bl	80098a0 <GetCurrentHalTicks>
 800822a:	0003      	movs	r3, r0
 800822c:	331e      	adds	r3, #30
 800822e:	001a      	movs	r2, r3
 8008230:	4bc1      	ldr	r3, [pc, #772]	@ (8008538 <SGP_GetMeasurementValues+0x380>)
 8008232:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8008234:	4bbb      	ldr	r3, [pc, #748]	@ (8008524 <SGP_GetMeasurementValues+0x36c>)
 8008236:	2201      	movs	r2, #1
 8008238:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800823a:	4bb9      	ldr	r3, [pc, #740]	@ (8008520 <SGP_GetMeasurementValues+0x368>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d100      	bne.n	8008244 <SGP_GetMeasurementValues+0x8c>
 8008242:	e1a9      	b.n	8008598 <SGP_GetMeasurementValues+0x3e0>
 8008244:	f7ff ff8e 	bl	8008164 <SGP_MeasurementReady>
 8008248:	1e03      	subs	r3, r0, #0
 800824a:	d100      	bne.n	800824e <SGP_GetMeasurementValues+0x96>
 800824c:	e1a4      	b.n	8008598 <SGP_GetMeasurementValues+0x3e0>
 800824e:	4bbc      	ldr	r3, [pc, #752]	@ (8008540 <SGP_GetMeasurementValues+0x388>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2201      	movs	r2, #1
 8008254:	4053      	eors	r3, r2
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d100      	bne.n	800825e <SGP_GetMeasurementValues+0xa6>
 800825c:	e19c      	b.n	8008598 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800825e:	4bb9      	ldr	r3, [pc, #740]	@ (8008544 <SGP_GetMeasurementValues+0x38c>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	3301      	adds	r3, #1
 8008264:	4ab8      	ldr	r2, [pc, #736]	@ (8008548 <SGP_GetMeasurementValues+0x390>)
 8008266:	49b1      	ldr	r1, [pc, #708]	@ (800852c <SGP_GetMeasurementValues+0x374>)
 8008268:	2003      	movs	r0, #3
 800826a:	f001 faa7 	bl	80097bc <CreateLine>
    MeasurementIsReady = true;
 800826e:	4bb4      	ldr	r3, [pc, #720]	@ (8008540 <SGP_GetMeasurementValues+0x388>)
 8008270:	2201      	movs	r2, #1
 8008272:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8008274:	4bb5      	ldr	r3, [pc, #724]	@ (800854c <SGP_GetMeasurementValues+0x394>)
 8008276:	2203      	movs	r2, #3
 8008278:	0019      	movs	r1, r3
 800827a:	2059      	movs	r0, #89	@ 0x59
 800827c:	f7ff fed6 	bl	800802c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8008280:	4bb2      	ldr	r3, [pc, #712]	@ (800854c <SGP_GetMeasurementValues+0x394>)
 8008282:	2203      	movs	r2, #3
 8008284:	2103      	movs	r1, #3
 8008286:	0018      	movs	r0, r3
 8008288:	f000 f9ec 	bl	8008664 <CheckCRC>
 800828c:	0003      	movs	r3, r0
 800828e:	001a      	movs	r2, r3
 8008290:	2301      	movs	r3, #1
 8008292:	4053      	eors	r3, r2
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d02a      	beq.n	80082f0 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800829a:	4aad      	ldr	r2, [pc, #692]	@ (8008550 <SGP_GetMeasurementValues+0x398>)
 800829c:	4bad      	ldr	r3, [pc, #692]	@ (8008554 <SGP_GetMeasurementValues+0x39c>)
 800829e:	0019      	movs	r1, r3
 80082a0:	2001      	movs	r0, #1
 80082a2:	f001 fa8b 	bl	80097bc <CreateLine>
      Info("SGP_Measure buffer structure:");
 80082a6:	4aac      	ldr	r2, [pc, #688]	@ (8008558 <SGP_GetMeasurementValues+0x3a0>)
 80082a8:	4bac      	ldr	r3, [pc, #688]	@ (800855c <SGP_GetMeasurementValues+0x3a4>)
 80082aa:	0019      	movs	r1, r3
 80082ac:	2002      	movs	r0, #2
 80082ae:	f001 fa85 	bl	80097bc <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80082b2:	230f      	movs	r3, #15
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	2200      	movs	r2, #0
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	e012      	b.n	80082e2 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80082bc:	240f      	movs	r4, #15
 80082be:	193b      	adds	r3, r7, r4
 80082c0:	7818      	ldrb	r0, [r3, #0]
 80082c2:	193b      	adds	r3, r7, r4
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	4aa1      	ldr	r2, [pc, #644]	@ (800854c <SGP_GetMeasurementValues+0x394>)
 80082c8:	5cd3      	ldrb	r3, [r2, r3]
 80082ca:	4aa5      	ldr	r2, [pc, #660]	@ (8008560 <SGP_GetMeasurementValues+0x3a8>)
 80082cc:	4997      	ldr	r1, [pc, #604]	@ (800852c <SGP_GetMeasurementValues+0x374>)
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	0003      	movs	r3, r0
 80082d2:	2003      	movs	r0, #3
 80082d4:	f001 fa72 	bl	80097bc <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80082d8:	193b      	adds	r3, r7, r4
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	193b      	adds	r3, r7, r4
 80082de:	3201      	adds	r2, #1
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	230f      	movs	r3, #15
 80082e4:	18fb      	adds	r3, r7, r3
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d9e7      	bls.n	80082bc <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80082ec:	2300      	movs	r3, #0
 80082ee:	e16b      	b.n	80085c8 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80082f0:	f001 fad6 	bl	80098a0 <GetCurrentHalTicks>
 80082f4:	0003      	movs	r3, r0
 80082f6:	22fa      	movs	r2, #250	@ 0xfa
 80082f8:	0092      	lsls	r2, r2, #2
 80082fa:	189a      	adds	r2, r3, r2
 80082fc:	4b99      	ldr	r3, [pc, #612]	@ (8008564 <SGP_GetMeasurementValues+0x3ac>)
 80082fe:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8008300:	f7ff ff4c 	bl	800819c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8008304:	4b8f      	ldr	r3, [pc, #572]	@ (8008544 <SGP_GetMeasurementValues+0x38c>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	b2da      	uxtb	r2, r3
 800830c:	4b8d      	ldr	r3, [pc, #564]	@ (8008544 <SGP_GetMeasurementValues+0x38c>)
 800830e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8008310:	4b8c      	ldr	r3, [pc, #560]	@ (8008544 <SGP_GetMeasurementValues+0x38c>)
 8008312:	781a      	ldrb	r2, [r3, #0]
 8008314:	4b94      	ldr	r3, [pc, #592]	@ (8008568 <SGP_GetMeasurementValues+0x3b0>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d200      	bcs.n	800831e <SGP_GetMeasurementValues+0x166>
 800831c:	e13c      	b.n	8008598 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800831e:	4b8b      	ldr	r3, [pc, #556]	@ (800854c <SGP_GetMeasurementValues+0x394>)
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	021b      	lsls	r3, r3, #8
 8008324:	b21a      	sxth	r2, r3
 8008326:	4b89      	ldr	r3, [pc, #548]	@ (800854c <SGP_GetMeasurementValues+0x394>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	b21b      	sxth	r3, r3
 800832c:	4313      	orrs	r3, r2
 800832e:	b21a      	sxth	r2, r3
 8008330:	240c      	movs	r4, #12
 8008332:	193b      	adds	r3, r7, r4
 8008334:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8008336:	193b      	adds	r3, r7, r4
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	4a8c      	ldr	r2, [pc, #560]	@ (800856c <SGP_GetMeasurementValues+0x3b4>)
 800833c:	497b      	ldr	r1, [pc, #492]	@ (800852c <SGP_GetMeasurementValues+0x374>)
 800833e:	2003      	movs	r0, #3
 8008340:	f001 fa3c 	bl	80097bc <CreateLine>
      int32_t tempVocIndex = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8008348:	193b      	adds	r3, r7, r4
 800834a:	8819      	ldrh	r1, [r3, #0]
 800834c:	2308      	movs	r3, #8
 800834e:	18fa      	adds	r2, r7, r3
 8008350:	4b87      	ldr	r3, [pc, #540]	@ (8008570 <SGP_GetMeasurementValues+0x3b8>)
 8008352:	0018      	movs	r0, r3
 8008354:	f7ff f848 	bl	80073e8 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4a86      	ldr	r2, [pc, #536]	@ (8008574 <SGP_GetMeasurementValues+0x3bc>)
 800835c:	4973      	ldr	r1, [pc, #460]	@ (800852c <SGP_GetMeasurementValues+0x374>)
 800835e:	2003      	movs	r0, #3
 8008360:	f001 fa2c 	bl	80097bc <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	dd5a      	ble.n	8008428 <SGP_GetMeasurementValues+0x270>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b64      	cmp	r3, #100	@ 0x64
 8008378:	dc56      	bgt.n	8008428 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	0018      	movs	r0, r3
 8008380:	f7fa ff9c 	bl	80032bc <__aeabi_i2d>
 8008384:	2200      	movs	r2, #0
 8008386:	4b7c      	ldr	r3, [pc, #496]	@ (8008578 <SGP_GetMeasurementValues+0x3c0>)
 8008388:	f7f9 fc92 	bl	8001cb0 <__aeabi_ddiv>
 800838c:	0002      	movs	r2, r0
 800838e:	000b      	movs	r3, r1
 8008390:	2000      	movs	r0, #0
 8008392:	497a      	ldr	r1, [pc, #488]	@ (800857c <SGP_GetMeasurementValues+0x3c4>)
 8008394:	f7fa fb98 	bl	8002ac8 <__aeabi_dsub>
 8008398:	0002      	movs	r2, r0
 800839a:	000b      	movs	r3, r1
 800839c:	0014      	movs	r4, r2
 800839e:	001d      	movs	r5, r3
 80083a0:	4b77      	ldr	r3, [pc, #476]	@ (8008580 <SGP_GetMeasurementValues+0x3c8>)
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	0018      	movs	r0, r3
 80083a6:	f7fa ff89 	bl	80032bc <__aeabi_i2d>
 80083aa:	0002      	movs	r2, r0
 80083ac:	000b      	movs	r3, r1
 80083ae:	0020      	movs	r0, r4
 80083b0:	0029      	movs	r1, r5
 80083b2:	f7fa f8c1 	bl	8002538 <__aeabi_dmul>
 80083b6:	0002      	movs	r2, r0
 80083b8:	000b      	movs	r3, r1
 80083ba:	0010      	movs	r0, r2
 80083bc:	0019      	movs	r1, r3
 80083be:	f7f8 f913 	bl	80005e8 <__aeabi_d2uiz>
 80083c2:	0003      	movs	r3, r0
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	4b6f      	ldr	r3, [pc, #444]	@ (8008584 <SGP_GetMeasurementValues+0x3cc>)
 80083c8:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	0018      	movs	r0, r3
 80083d0:	f7fa ff74 	bl	80032bc <__aeabi_i2d>
 80083d4:	2200      	movs	r2, #0
 80083d6:	4b68      	ldr	r3, [pc, #416]	@ (8008578 <SGP_GetMeasurementValues+0x3c0>)
 80083d8:	f7f9 fc6a 	bl	8001cb0 <__aeabi_ddiv>
 80083dc:	0002      	movs	r2, r0
 80083de:	000b      	movs	r3, r1
 80083e0:	0014      	movs	r4, r2
 80083e2:	001d      	movs	r5, r3
 80083e4:	4b66      	ldr	r3, [pc, #408]	@ (8008580 <SGP_GetMeasurementValues+0x3c8>)
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	0018      	movs	r0, r3
 80083ea:	f7fa ff67 	bl	80032bc <__aeabi_i2d>
 80083ee:	0002      	movs	r2, r0
 80083f0:	000b      	movs	r3, r1
 80083f2:	0020      	movs	r0, r4
 80083f4:	0029      	movs	r1, r5
 80083f6:	f7fa f89f 	bl	8002538 <__aeabi_dmul>
 80083fa:	0002      	movs	r2, r0
 80083fc:	000b      	movs	r3, r1
 80083fe:	0010      	movs	r0, r2
 8008400:	0019      	movs	r1, r3
 8008402:	f7f8 f8f1 	bl	80005e8 <__aeabi_d2uiz>
 8008406:	0003      	movs	r3, r0
 8008408:	b29a      	uxth	r2, r3
 800840a:	4b5f      	ldr	r3, [pc, #380]	@ (8008588 <SGP_GetMeasurementValues+0x3d0>)
 800840c:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800840e:	4b5c      	ldr	r3, [pc, #368]	@ (8008580 <SGP_GetMeasurementValues+0x3c8>)
 8008410:	881a      	ldrh	r2, [r3, #0]
 8008412:	4b5e      	ldr	r3, [pc, #376]	@ (800858c <SGP_GetMeasurementValues+0x3d4>)
 8008414:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 8008416:	4b5d      	ldr	r3, [pc, #372]	@ (800858c <SGP_GetMeasurementValues+0x3d4>)
 8008418:	8818      	ldrh	r0, [r3, #0]
 800841a:	4b5a      	ldr	r3, [pc, #360]	@ (8008584 <SGP_GetMeasurementValues+0x3cc>)
 800841c:	8819      	ldrh	r1, [r3, #0]
 800841e:	4b5a      	ldr	r3, [pc, #360]	@ (8008588 <SGP_GetMeasurementValues+0x3d0>)
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	001a      	movs	r2, r3
 8008424:	f000 fb8a 	bl	8008b3c <SetVocLED>
      }
      if(*vocIndex > 100){
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b64      	cmp	r3, #100	@ 0x64
 800842e:	dd66      	ble.n	80084fe <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	0018      	movs	r0, r3
 8008436:	f7fa ff41 	bl	80032bc <__aeabi_i2d>
 800843a:	2200      	movs	r2, #0
 800843c:	4b4e      	ldr	r3, [pc, #312]	@ (8008578 <SGP_GetMeasurementValues+0x3c0>)
 800843e:	f7fa fb43 	bl	8002ac8 <__aeabi_dsub>
 8008442:	0002      	movs	r2, r0
 8008444:	000b      	movs	r3, r1
 8008446:	0010      	movs	r0, r2
 8008448:	0019      	movs	r1, r3
 800844a:	2200      	movs	r2, #0
 800844c:	4b50      	ldr	r3, [pc, #320]	@ (8008590 <SGP_GetMeasurementValues+0x3d8>)
 800844e:	f7f9 fc2f 	bl	8001cb0 <__aeabi_ddiv>
 8008452:	0002      	movs	r2, r0
 8008454:	000b      	movs	r3, r1
 8008456:	0014      	movs	r4, r2
 8008458:	001d      	movs	r5, r3
 800845a:	4b49      	ldr	r3, [pc, #292]	@ (8008580 <SGP_GetMeasurementValues+0x3c8>)
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	0018      	movs	r0, r3
 8008460:	f7fa ff2c 	bl	80032bc <__aeabi_i2d>
 8008464:	0002      	movs	r2, r0
 8008466:	000b      	movs	r3, r1
 8008468:	0020      	movs	r0, r4
 800846a:	0029      	movs	r1, r5
 800846c:	f7fa f864 	bl	8002538 <__aeabi_dmul>
 8008470:	0002      	movs	r2, r0
 8008472:	000b      	movs	r3, r1
 8008474:	0010      	movs	r0, r2
 8008476:	0019      	movs	r1, r3
 8008478:	f7f8 f8b6 	bl	80005e8 <__aeabi_d2uiz>
 800847c:	0003      	movs	r3, r0
 800847e:	b29a      	uxth	r2, r3
 8008480:	4b40      	ldr	r3, [pc, #256]	@ (8008584 <SGP_GetMeasurementValues+0x3cc>)
 8008482:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	0018      	movs	r0, r3
 800848a:	f7fa ff17 	bl	80032bc <__aeabi_i2d>
 800848e:	2200      	movs	r2, #0
 8008490:	4b39      	ldr	r3, [pc, #228]	@ (8008578 <SGP_GetMeasurementValues+0x3c0>)
 8008492:	f7fa fb19 	bl	8002ac8 <__aeabi_dsub>
 8008496:	0002      	movs	r2, r0
 8008498:	000b      	movs	r3, r1
 800849a:	0010      	movs	r0, r2
 800849c:	0019      	movs	r1, r3
 800849e:	2200      	movs	r2, #0
 80084a0:	4b3b      	ldr	r3, [pc, #236]	@ (8008590 <SGP_GetMeasurementValues+0x3d8>)
 80084a2:	f7f9 fc05 	bl	8001cb0 <__aeabi_ddiv>
 80084a6:	0002      	movs	r2, r0
 80084a8:	000b      	movs	r3, r1
 80084aa:	2000      	movs	r0, #0
 80084ac:	4933      	ldr	r1, [pc, #204]	@ (800857c <SGP_GetMeasurementValues+0x3c4>)
 80084ae:	f7fa fb0b 	bl	8002ac8 <__aeabi_dsub>
 80084b2:	0002      	movs	r2, r0
 80084b4:	000b      	movs	r3, r1
 80084b6:	0014      	movs	r4, r2
 80084b8:	001d      	movs	r5, r3
 80084ba:	4b31      	ldr	r3, [pc, #196]	@ (8008580 <SGP_GetMeasurementValues+0x3c8>)
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	0018      	movs	r0, r3
 80084c0:	f7fa fefc 	bl	80032bc <__aeabi_i2d>
 80084c4:	0002      	movs	r2, r0
 80084c6:	000b      	movs	r3, r1
 80084c8:	0020      	movs	r0, r4
 80084ca:	0029      	movs	r1, r5
 80084cc:	f7fa f834 	bl	8002538 <__aeabi_dmul>
 80084d0:	0002      	movs	r2, r0
 80084d2:	000b      	movs	r3, r1
 80084d4:	0010      	movs	r0, r2
 80084d6:	0019      	movs	r1, r3
 80084d8:	f7f8 f886 	bl	80005e8 <__aeabi_d2uiz>
 80084dc:	0003      	movs	r3, r0
 80084de:	b29a      	uxth	r2, r3
 80084e0:	4b2a      	ldr	r3, [pc, #168]	@ (800858c <SGP_GetMeasurementValues+0x3d4>)
 80084e2:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 80084e4:	4b26      	ldr	r3, [pc, #152]	@ (8008580 <SGP_GetMeasurementValues+0x3c8>)
 80084e6:	881a      	ldrh	r2, [r3, #0]
 80084e8:	4b27      	ldr	r3, [pc, #156]	@ (8008588 <SGP_GetMeasurementValues+0x3d0>)
 80084ea:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 80084ec:	4b27      	ldr	r3, [pc, #156]	@ (800858c <SGP_GetMeasurementValues+0x3d4>)
 80084ee:	8818      	ldrh	r0, [r3, #0]
 80084f0:	4b24      	ldr	r3, [pc, #144]	@ (8008584 <SGP_GetMeasurementValues+0x3cc>)
 80084f2:	8819      	ldrh	r1, [r3, #0]
 80084f4:	4b24      	ldr	r3, [pc, #144]	@ (8008588 <SGP_GetMeasurementValues+0x3d0>)
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	001a      	movs	r2, r3
 80084fa:	f000 fb1f 	bl	8008b3c <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 80084fe:	4b11      	ldr	r3, [pc, #68]	@ (8008544 <SGP_GetMeasurementValues+0x38c>)
 8008500:	2200      	movs	r2, #0
 8008502:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8008504:	4a23      	ldr	r2, [pc, #140]	@ (8008594 <SGP_GetMeasurementValues+0x3dc>)
 8008506:	4b09      	ldr	r3, [pc, #36]	@ (800852c <SGP_GetMeasurementValues+0x374>)
 8008508:	0019      	movs	r1, r3
 800850a:	2003      	movs	r0, #3
 800850c:	f001 f956 	bl	80097bc <CreateLine>
      HT_MeasurementReceived = false;
 8008510:	4b07      	ldr	r3, [pc, #28]	@ (8008530 <SGP_GetMeasurementValues+0x378>)
 8008512:	2200      	movs	r2, #0
 8008514:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8008516:	4b03      	ldr	r3, [pc, #12]	@ (8008524 <SGP_GetMeasurementValues+0x36c>)
 8008518:	2200      	movs	r2, #0
 800851a:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800851c:	2301      	movs	r3, #1
 800851e:	e053      	b.n	80085c8 <SGP_GetMeasurementValues+0x410>
 8008520:	200028f2 	.word	0x200028f2
 8008524:	2000299d 	.word	0x2000299d
 8008528:	0801b51c 	.word	0x0801b51c
 800852c:	0801b548 	.word	0x0801b548
 8008530:	2000299c 	.word	0x2000299c
 8008534:	2000003c 	.word	0x2000003c
 8008538:	20000050 	.word	0x20000050
 800853c:	20000034 	.word	0x20000034
 8008540:	200028f3 	.word	0x200028f3
 8008544:	200028f1 	.word	0x200028f1
 8008548:	0801b54c 	.word	0x0801b54c
 800854c:	200028e8 	.word	0x200028e8
 8008550:	0801b57c 	.word	0x0801b57c
 8008554:	0801b5a0 	.word	0x0801b5a0
 8008558:	0801b5a4 	.word	0x0801b5a4
 800855c:	0801b5c4 	.word	0x0801b5c4
 8008560:	0801b5c8 	.word	0x0801b5c8
 8008564:	2000004c 	.word	0x2000004c
 8008568:	20000044 	.word	0x20000044
 800856c:	0801b5e8 	.word	0x0801b5e8
 8008570:	200028f4 	.word	0x200028f4
 8008574:	0801b5fc 	.word	0x0801b5fc
 8008578:	40590000 	.word	0x40590000
 800857c:	3ff00000 	.word	0x3ff00000
 8008580:	20000054 	.word	0x20000054
 8008584:	200029a2 	.word	0x200029a2
 8008588:	200029a0 	.word	0x200029a0
 800858c:	2000299e 	.word	0x2000299e
 8008590:	40790000 	.word	0x40790000
 8008594:	0801b610 	.word	0x0801b610
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8008598:	f7ff fdf2 	bl	8008180 <SGP_MeasurementDone>
 800859c:	1e03      	subs	r3, r0, #0
 800859e:	d012      	beq.n	80085c6 <SGP_GetMeasurementValues+0x40e>
 80085a0:	4b0b      	ldr	r3, [pc, #44]	@ (80085d0 <SGP_GetMeasurementValues+0x418>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00e      	beq.n	80085c6 <SGP_GetMeasurementValues+0x40e>
 80085a8:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <SGP_GetMeasurementValues+0x41c>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80085b0:	4a09      	ldr	r2, [pc, #36]	@ (80085d8 <SGP_GetMeasurementValues+0x420>)
 80085b2:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <SGP_GetMeasurementValues+0x424>)
 80085b4:	0019      	movs	r1, r3
 80085b6:	2003      	movs	r0, #3
 80085b8:	f001 f900 	bl	80097bc <CreateLine>
    SGP_StartMeasurement();
 80085bc:	f7ff fd8c 	bl	80080d8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80085c0:	4b07      	ldr	r3, [pc, #28]	@ (80085e0 <SGP_GetMeasurementValues+0x428>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	0018      	movs	r0, r3
 80085ca:	46bd      	mov	sp, r7
 80085cc:	b004      	add	sp, #16
 80085ce:	bdb0      	pop	{r4, r5, r7, pc}
 80085d0:	200028f2 	.word	0x200028f2
 80085d4:	200028f3 	.word	0x200028f3
 80085d8:	0801b634 	.word	0x0801b634
 80085dc:	0801b548 	.word	0x0801b548
 80085e0:	2000299d 	.word	0x2000299d

080085e4 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80085ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008654 <SGP_DeviceConnected+0x70>)
 80085ec:	2202      	movs	r2, #2
 80085ee:	0019      	movs	r1, r3
 80085f0:	2059      	movs	r0, #89	@ 0x59
 80085f2:	f7ff fd39 	bl	8008068 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80085f6:	2001      	movs	r0, #1
 80085f8:	f001 fc70 	bl	8009edc <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80085fc:	4b16      	ldr	r3, [pc, #88]	@ (8008658 <SGP_DeviceConnected+0x74>)
 80085fe:	2209      	movs	r2, #9
 8008600:	0019      	movs	r1, r3
 8008602:	2059      	movs	r0, #89	@ 0x59
 8008604:	f7ff fd12 	bl	800802c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8008608:	1dfb      	adds	r3, r7, #7
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	e011      	b.n	8008634 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8008610:	1dfb      	adds	r3, r7, #7
 8008612:	7818      	ldrb	r0, [r3, #0]
 8008614:	1dfb      	adds	r3, r7, #7
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	4a0f      	ldr	r2, [pc, #60]	@ (8008658 <SGP_DeviceConnected+0x74>)
 800861a:	5cd3      	ldrb	r3, [r2, r3]
 800861c:	4a0f      	ldr	r2, [pc, #60]	@ (800865c <SGP_DeviceConnected+0x78>)
 800861e:	4910      	ldr	r1, [pc, #64]	@ (8008660 <SGP_DeviceConnected+0x7c>)
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	0003      	movs	r3, r0
 8008624:	2002      	movs	r0, #2
 8008626:	f001 f8c9 	bl	80097bc <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800862a:	1dfb      	adds	r3, r7, #7
 800862c:	781a      	ldrb	r2, [r3, #0]
 800862e:	1dfb      	adds	r3, r7, #7
 8008630:	3201      	adds	r2, #1
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	1dfb      	adds	r3, r7, #7
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b08      	cmp	r3, #8
 800863a:	d9e9      	bls.n	8008610 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800863c:	4b06      	ldr	r3, [pc, #24]	@ (8008658 <SGP_DeviceConnected+0x74>)
 800863e:	2203      	movs	r2, #3
 8008640:	2109      	movs	r1, #9
 8008642:	0018      	movs	r0, r3
 8008644:	f000 f80e 	bl	8008664 <CheckCRC>
 8008648:	0003      	movs	r3, r0
}
 800864a:	0018      	movs	r0, r3
 800864c:	46bd      	mov	sp, r7
 800864e:	b002      	add	sp, #8
 8008650:	bd80      	pop	{r7, pc}
 8008652:	46c0      	nop			@ (mov r8, r8)
 8008654:	20000030 	.word	0x20000030
 8008658:	200028e8 	.word	0x200028e8
 800865c:	0801b654 	.word	0x0801b654
 8008660:	0801b5c4 	.word	0x0801b5c4

08008664 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8008664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008666:	b08f      	sub	sp, #60	@ 0x3c
 8008668:	af00      	add	r7, sp, #0
 800866a:	6278      	str	r0, [r7, #36]	@ 0x24
 800866c:	0008      	movs	r0, r1
 800866e:	0011      	movs	r1, r2
 8008670:	2323      	movs	r3, #35	@ 0x23
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	1c02      	adds	r2, r0, #0
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	2322      	movs	r3, #34	@ 0x22
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	1c0a      	adds	r2, r1, #0
 800867e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008680:	2317      	movs	r3, #23
 8008682:	2220      	movs	r2, #32
 8008684:	189b      	adds	r3, r3, r2
 8008686:	19db      	adds	r3, r3, r7
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e09f      	b.n	80087ce <CheckCRC+0x16a>
 800868e:	466b      	mov	r3, sp
 8008690:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8008692:	2322      	movs	r3, #34	@ 0x22
 8008694:	18fb      	adds	r3, r7, r3
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	001a      	movs	r2, r3
 800869a:	3a01      	subs	r2, #1
 800869c:	633a      	str	r2, [r7, #48]	@ 0x30
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	2200      	movs	r2, #0
 80086a2:	60fa      	str	r2, [r7, #12]
 80086a4:	68b8      	ldr	r0, [r7, #8]
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	0002      	movs	r2, r0
 80086aa:	0f52      	lsrs	r2, r2, #29
 80086ac:	000c      	movs	r4, r1
 80086ae:	00e4      	lsls	r4, r4, #3
 80086b0:	61fc      	str	r4, [r7, #28]
 80086b2:	69fc      	ldr	r4, [r7, #28]
 80086b4:	4314      	orrs	r4, r2
 80086b6:	61fc      	str	r4, [r7, #28]
 80086b8:	0002      	movs	r2, r0
 80086ba:	00d2      	lsls	r2, r2, #3
 80086bc:	61ba      	str	r2, [r7, #24]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	2200      	movs	r2, #0
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	6838      	ldr	r0, [r7, #0]
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	0002      	movs	r2, r0
 80086ca:	0f52      	lsrs	r2, r2, #29
 80086cc:	000c      	movs	r4, r1
 80086ce:	00e4      	lsls	r4, r4, #3
 80086d0:	617c      	str	r4, [r7, #20]
 80086d2:	697c      	ldr	r4, [r7, #20]
 80086d4:	4314      	orrs	r4, r2
 80086d6:	617c      	str	r4, [r7, #20]
 80086d8:	0002      	movs	r2, r0
 80086da:	00d2      	lsls	r2, r2, #3
 80086dc:	613a      	str	r2, [r7, #16]
 80086de:	3307      	adds	r3, #7
 80086e0:	08db      	lsrs	r3, r3, #3
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	466a      	mov	r2, sp
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	469d      	mov	sp, r3
 80086ea:	466b      	mov	r3, sp
 80086ec:	3300      	adds	r3, #0
 80086ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80086f0:	2316      	movs	r3, #22
 80086f2:	2220      	movs	r2, #32
 80086f4:	189b      	adds	r3, r3, r2
 80086f6:	19db      	adds	r3, r3, r7
 80086f8:	2200      	movs	r2, #0
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	e01e      	b.n	800873c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80086fe:	2317      	movs	r3, #23
 8008700:	2220      	movs	r2, #32
 8008702:	189b      	adds	r3, r3, r2
 8008704:	19db      	adds	r3, r3, r7
 8008706:	781a      	ldrb	r2, [r3, #0]
 8008708:	2116      	movs	r1, #22
 800870a:	2320      	movs	r3, #32
 800870c:	18cb      	adds	r3, r1, r3
 800870e:	19db      	adds	r3, r3, r7
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	18d3      	adds	r3, r2, r3
 8008714:	001a      	movs	r2, r3
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	189a      	adds	r2, r3, r2
 800871a:	0008      	movs	r0, r1
 800871c:	2320      	movs	r3, #32
 800871e:	18cb      	adds	r3, r1, r3
 8008720:	19db      	adds	r3, r3, r7
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	7811      	ldrb	r1, [r2, #0]
 8008726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008728:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800872a:	2320      	movs	r3, #32
 800872c:	18c3      	adds	r3, r0, r3
 800872e:	19db      	adds	r3, r3, r7
 8008730:	781a      	ldrb	r2, [r3, #0]
 8008732:	2320      	movs	r3, #32
 8008734:	18c3      	adds	r3, r0, r3
 8008736:	19db      	adds	r3, r3, r7
 8008738:	3201      	adds	r2, #1
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	2316      	movs	r3, #22
 800873e:	2220      	movs	r2, #32
 8008740:	189b      	adds	r3, r3, r2
 8008742:	19da      	adds	r2, r3, r7
 8008744:	2322      	movs	r3, #34	@ 0x22
 8008746:	18fb      	adds	r3, r7, r3
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d3d6      	bcc.n	80086fe <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8008750:	2417      	movs	r4, #23
 8008752:	2320      	movs	r3, #32
 8008754:	18e3      	adds	r3, r4, r3
 8008756:	19db      	adds	r3, r3, r7
 8008758:	781a      	ldrb	r2, [r3, #0]
 800875a:	2322      	movs	r3, #34	@ 0x22
 800875c:	18fb      	adds	r3, r7, r3
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	18d3      	adds	r3, r2, r3
 8008762:	3b01      	subs	r3, #1
 8008764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008766:	18d2      	adds	r2, r2, r3
 8008768:	250b      	movs	r5, #11
 800876a:	2320      	movs	r3, #32
 800876c:	18eb      	adds	r3, r5, r3
 800876e:	19db      	adds	r3, r3, r7
 8008770:	7812      	ldrb	r2, [r2, #0]
 8008772:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8008774:	2322      	movs	r3, #34	@ 0x22
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	3b01      	subs	r3, #1
 800877c:	b2da      	uxtb	r2, r3
 800877e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008780:	0011      	movs	r1, r2
 8008782:	0018      	movs	r0, r3
 8008784:	f000 f838 	bl	80087f8 <CalculateCRC>
 8008788:	0003      	movs	r3, r0
 800878a:	001a      	movs	r2, r3
 800878c:	2320      	movs	r3, #32
 800878e:	18eb      	adds	r3, r5, r3
 8008790:	19db      	adds	r3, r3, r7
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	4293      	cmp	r3, r2
 8008796:	d00c      	beq.n	80087b2 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008798:	2320      	movs	r3, #32
 800879a:	18e3      	adds	r3, r4, r3
 800879c:	19db      	adds	r3, r3, r7
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	4a13      	ldr	r2, [pc, #76]	@ (80087f0 <CheckCRC+0x18c>)
 80087a4:	4913      	ldr	r1, [pc, #76]	@ (80087f4 <CheckCRC+0x190>)
 80087a6:	2001      	movs	r0, #1
 80087a8:	f001 f808 	bl	80097bc <CreateLine>
      return false;
 80087ac:	2300      	movs	r3, #0
 80087ae:	46b5      	mov	sp, r6
 80087b0:	e019      	b.n	80087e6 <CheckCRC+0x182>
 80087b2:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80087b4:	2217      	movs	r2, #23
 80087b6:	2320      	movs	r3, #32
 80087b8:	18d3      	adds	r3, r2, r3
 80087ba:	19db      	adds	r3, r3, r7
 80087bc:	2120      	movs	r1, #32
 80087be:	1852      	adds	r2, r2, r1
 80087c0:	19d1      	adds	r1, r2, r7
 80087c2:	2222      	movs	r2, #34	@ 0x22
 80087c4:	18ba      	adds	r2, r7, r2
 80087c6:	7809      	ldrb	r1, [r1, #0]
 80087c8:	7812      	ldrb	r2, [r2, #0]
 80087ca:	188a      	adds	r2, r1, r2
 80087cc:	701a      	strb	r2, [r3, #0]
 80087ce:	2317      	movs	r3, #23
 80087d0:	2220      	movs	r2, #32
 80087d2:	189b      	adds	r3, r3, r2
 80087d4:	19da      	adds	r2, r3, r7
 80087d6:	2323      	movs	r3, #35	@ 0x23
 80087d8:	18fb      	adds	r3, r7, r3
 80087da:	7812      	ldrb	r2, [r2, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d200      	bcs.n	80087e4 <CheckCRC+0x180>
 80087e2:	e754      	b.n	800868e <CheckCRC+0x2a>
    }
  }
  return true;
 80087e4:	2301      	movs	r3, #1
}
 80087e6:	0018      	movs	r0, r3
 80087e8:	46bd      	mov	sp, r7
 80087ea:	b00f      	add	sp, #60	@ 0x3c
 80087ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ee:	46c0      	nop			@ (mov r8, r8)
 80087f0:	0801b674 	.word	0x0801b674
 80087f4:	0801b5a0 	.word	0x0801b5a0

080087f8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	000a      	movs	r2, r1
 8008802:	1cfb      	adds	r3, r7, #3
 8008804:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008806:	230f      	movs	r3, #15
 8008808:	18fb      	adds	r3, r7, r3
 800880a:	22ff      	movs	r2, #255	@ 0xff
 800880c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800880e:	230e      	movs	r3, #14
 8008810:	18fb      	adds	r3, r7, r3
 8008812:	2200      	movs	r2, #0
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	e037      	b.n	8008888 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008818:	230e      	movs	r3, #14
 800881a:	18fb      	adds	r3, r7, r3
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	18d3      	adds	r3, r2, r3
 8008822:	7819      	ldrb	r1, [r3, #0]
 8008824:	220f      	movs	r2, #15
 8008826:	18bb      	adds	r3, r7, r2
 8008828:	18ba      	adds	r2, r7, r2
 800882a:	7812      	ldrb	r2, [r2, #0]
 800882c:	404a      	eors	r2, r1
 800882e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008830:	230d      	movs	r3, #13
 8008832:	18fb      	adds	r3, r7, r3
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	e01b      	b.n	8008872 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800883a:	210f      	movs	r1, #15
 800883c:	187b      	adds	r3, r7, r1
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	b25b      	sxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	da09      	bge.n	800885a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8008846:	187b      	adds	r3, r7, r1
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	b25b      	sxtb	r3, r3
 800884e:	2231      	movs	r2, #49	@ 0x31
 8008850:	4053      	eors	r3, r2
 8008852:	b25a      	sxtb	r2, r3
 8008854:	187b      	adds	r3, r7, r1
 8008856:	701a      	strb	r2, [r3, #0]
 8008858:	e005      	b.n	8008866 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800885a:	230f      	movs	r3, #15
 800885c:	18fa      	adds	r2, r7, r3
 800885e:	18fb      	adds	r3, r7, r3
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	18db      	adds	r3, r3, r3
 8008864:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008866:	210d      	movs	r1, #13
 8008868:	187b      	adds	r3, r7, r1
 800886a:	781a      	ldrb	r2, [r3, #0]
 800886c:	187b      	adds	r3, r7, r1
 800886e:	3201      	adds	r2, #1
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	230d      	movs	r3, #13
 8008874:	18fb      	adds	r3, r7, r3
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b07      	cmp	r3, #7
 800887a:	d9de      	bls.n	800883a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800887c:	210e      	movs	r1, #14
 800887e:	187b      	adds	r3, r7, r1
 8008880:	781a      	ldrb	r2, [r3, #0]
 8008882:	187b      	adds	r3, r7, r1
 8008884:	3201      	adds	r2, #1
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	230e      	movs	r3, #14
 800888a:	18fa      	adds	r2, r7, r3
 800888c:	1cfb      	adds	r3, r7, #3
 800888e:	7812      	ldrb	r2, [r2, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d3c0      	bcc.n	8008818 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008896:	230f      	movs	r3, #15
 8008898:	18fb      	adds	r3, r7, r3
 800889a:	781b      	ldrb	r3, [r3, #0]
}
 800889c:	0018      	movs	r0, r3
 800889e:	46bd      	mov	sp, r7
 80088a0:	b004      	add	sp, #16
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4936      	ldr	r1, [pc, #216]	@ (800898c <SGP_GetHT+0xe8>)
 80088b4:	1c18      	adds	r0, r3, #0
 80088b6:	f7f7 ff81 	bl	80007bc <__aeabi_fadd>
 80088ba:	1c03      	adds	r3, r0, #0
 80088bc:	4934      	ldr	r1, [pc, #208]	@ (8008990 <SGP_GetHT+0xec>)
 80088be:	1c18      	adds	r0, r3, #0
 80088c0:	f7f8 f906 	bl	8000ad0 <__aeabi_fdiv>
 80088c4:	1c03      	adds	r3, r0, #0
 80088c6:	4933      	ldr	r1, [pc, #204]	@ (8008994 <SGP_GetHT+0xf0>)
 80088c8:	1c18      	adds	r0, r3, #0
 80088ca:	f7f8 fae7 	bl	8000e9c <__aeabi_fmul>
 80088ce:	1c03      	adds	r3, r0, #0
 80088d0:	1c18      	adds	r0, r3, #0
 80088d2:	f7f7 fe71 	bl	80005b8 <__aeabi_f2uiz>
 80088d6:	0003      	movs	r3, r0
 80088d8:	b29a      	uxth	r2, r3
 80088da:	4b2f      	ldr	r3, [pc, #188]	@ (8008998 <SGP_GetHT+0xf4>)
 80088dc:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	492e      	ldr	r1, [pc, #184]	@ (800899c <SGP_GetHT+0xf8>)
 80088e4:	1c18      	adds	r0, r3, #0
 80088e6:	f7f8 f8f3 	bl	8000ad0 <__aeabi_fdiv>
 80088ea:	1c03      	adds	r3, r0, #0
 80088ec:	4929      	ldr	r1, [pc, #164]	@ (8008994 <SGP_GetHT+0xf0>)
 80088ee:	1c18      	adds	r0, r3, #0
 80088f0:	f7f8 fad4 	bl	8000e9c <__aeabi_fmul>
 80088f4:	1c03      	adds	r3, r0, #0
 80088f6:	1c18      	adds	r0, r3, #0
 80088f8:	f7f7 fe5e 	bl	80005b8 <__aeabi_f2uiz>
 80088fc:	0003      	movs	r3, r0
 80088fe:	b29a      	uxth	r2, r3
 8008900:	4b27      	ldr	r3, [pc, #156]	@ (80089a0 <SGP_GetHT+0xfc>)
 8008902:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008904:	4b26      	ldr	r3, [pc, #152]	@ (80089a0 <SGP_GetHT+0xfc>)
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	0a1b      	lsrs	r3, r3, #8
 800890a:	b29b      	uxth	r3, r3
 800890c:	b2da      	uxtb	r2, r3
 800890e:	4b25      	ldr	r3, [pc, #148]	@ (80089a4 <SGP_GetHT+0x100>)
 8008910:	709a      	strb	r2, [r3, #2]
 8008912:	4b24      	ldr	r3, [pc, #144]	@ (80089a4 <SGP_GetHT+0x100>)
 8008914:	789a      	ldrb	r2, [r3, #2]
 8008916:	210c      	movs	r1, #12
 8008918:	187b      	adds	r3, r7, r1
 800891a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800891c:	4b20      	ldr	r3, [pc, #128]	@ (80089a0 <SGP_GetHT+0xfc>)
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	b2da      	uxtb	r2, r3
 8008922:	4b20      	ldr	r3, [pc, #128]	@ (80089a4 <SGP_GetHT+0x100>)
 8008924:	70da      	strb	r2, [r3, #3]
 8008926:	4b1f      	ldr	r3, [pc, #124]	@ (80089a4 <SGP_GetHT+0x100>)
 8008928:	78da      	ldrb	r2, [r3, #3]
 800892a:	187b      	adds	r3, r7, r1
 800892c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800892e:	187b      	adds	r3, r7, r1
 8008930:	2102      	movs	r1, #2
 8008932:	0018      	movs	r0, r3
 8008934:	f7ff ff60 	bl	80087f8 <CalculateCRC>
 8008938:	0003      	movs	r3, r0
 800893a:	001a      	movs	r2, r3
 800893c:	4b19      	ldr	r3, [pc, #100]	@ (80089a4 <SGP_GetHT+0x100>)
 800893e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008940:	4b15      	ldr	r3, [pc, #84]	@ (8008998 <SGP_GetHT+0xf4>)
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	0a1b      	lsrs	r3, r3, #8
 8008946:	b29b      	uxth	r3, r3
 8008948:	b2da      	uxtb	r2, r3
 800894a:	4b16      	ldr	r3, [pc, #88]	@ (80089a4 <SGP_GetHT+0x100>)
 800894c:	715a      	strb	r2, [r3, #5]
 800894e:	4b15      	ldr	r3, [pc, #84]	@ (80089a4 <SGP_GetHT+0x100>)
 8008950:	795a      	ldrb	r2, [r3, #5]
 8008952:	2108      	movs	r1, #8
 8008954:	187b      	adds	r3, r7, r1
 8008956:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008958:	4b0f      	ldr	r3, [pc, #60]	@ (8008998 <SGP_GetHT+0xf4>)
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b2da      	uxtb	r2, r3
 800895e:	4b11      	ldr	r3, [pc, #68]	@ (80089a4 <SGP_GetHT+0x100>)
 8008960:	719a      	strb	r2, [r3, #6]
 8008962:	4b10      	ldr	r3, [pc, #64]	@ (80089a4 <SGP_GetHT+0x100>)
 8008964:	799a      	ldrb	r2, [r3, #6]
 8008966:	187b      	adds	r3, r7, r1
 8008968:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800896a:	187b      	adds	r3, r7, r1
 800896c:	2102      	movs	r1, #2
 800896e:	0018      	movs	r0, r3
 8008970:	f7ff ff42 	bl	80087f8 <CalculateCRC>
 8008974:	0003      	movs	r3, r0
 8008976:	001a      	movs	r2, r3
 8008978:	4b0a      	ldr	r3, [pc, #40]	@ (80089a4 <SGP_GetHT+0x100>)
 800897a:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800897c:	4b0a      	ldr	r3, [pc, #40]	@ (80089a8 <SGP_GetHT+0x104>)
 800897e:	2201      	movs	r2, #1
 8008980:	701a      	strb	r2, [r3, #0]
}
 8008982:	46c0      	nop			@ (mov r8, r8)
 8008984:	46bd      	mov	sp, r7
 8008986:	b004      	add	sp, #16
 8008988:	bd80      	pop	{r7, pc}
 800898a:	46c0      	nop			@ (mov r8, r8)
 800898c:	42340000 	.word	0x42340000
 8008990:	432f0000 	.word	0x432f0000
 8008994:	477fff00 	.word	0x477fff00
 8008998:	2000299a 	.word	0x2000299a
 800899c:	42c80000 	.word	0x42c80000
 80089a0:	20002998 	.word	0x20002998
 80089a4:	2000003c 	.word	0x2000003c
 80089a8:	2000299c 	.word	0x2000299c

080089ac <InitDone>:
bool LEDGood = false;
bool init = true;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  init = false;
 80089b0:	4b02      	ldr	r3, [pc, #8]	@ (80089bc <InitDone+0x10>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
}
 80089b6:	46c0      	nop			@ (mov r8, r8)
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20000056 	.word	0x20000056

080089c0 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 80089c6:	f7fc fdc9 	bl	800555c <ReadBatteryVoltage>
 80089ca:	1c03      	adds	r3, r0, #0
 80089cc:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 80089ce:	491f      	ldr	r1, [pc, #124]	@ (8008a4c <batteryChargeCheck+0x8c>)
 80089d0:	6838      	ldr	r0, [r7, #0]
 80089d2:	f7f7 fd7b 	bl	80004cc <__aeabi_fcmplt>
 80089d6:	1e03      	subs	r3, r0, #0
 80089d8:	d002      	beq.n	80089e0 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 80089da:	1dfb      	adds	r3, r7, #7
 80089dc:	2200      	movs	r2, #0
 80089de:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 80089e0:	6838      	ldr	r0, [r7, #0]
 80089e2:	f7fa fcbd 	bl	8003360 <__aeabi_f2d>
 80089e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008a50 <batteryChargeCheck+0x90>)
 80089e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a54 <batteryChargeCheck+0x94>)
 80089ea:	f7f7 fd35 	bl	8000458 <__aeabi_dcmplt>
 80089ee:	1e03      	subs	r3, r0, #0
 80089f0:	d008      	beq.n	8008a04 <batteryChargeCheck+0x44>
 80089f2:	4916      	ldr	r1, [pc, #88]	@ (8008a4c <batteryChargeCheck+0x8c>)
 80089f4:	6838      	ldr	r0, [r7, #0]
 80089f6:	f7f7 fd87 	bl	8000508 <__aeabi_fcmpge>
 80089fa:	1e03      	subs	r3, r0, #0
 80089fc:	d002      	beq.n	8008a04 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 80089fe:	1dfb      	adds	r3, r7, #7
 8008a00:	2202      	movs	r2, #2
 8008a02:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8008a04:	2181      	movs	r1, #129	@ 0x81
 8008a06:	05c9      	lsls	r1, r1, #23
 8008a08:	6838      	ldr	r0, [r7, #0]
 8008a0a:	f7f7 fd5f 	bl	80004cc <__aeabi_fcmplt>
 8008a0e:	1e03      	subs	r3, r0, #0
 8008a10:	d00b      	beq.n	8008a2a <batteryChargeCheck+0x6a>
 8008a12:	6838      	ldr	r0, [r7, #0]
 8008a14:	f7fa fca4 	bl	8003360 <__aeabi_f2d>
 8008a18:	4a0d      	ldr	r2, [pc, #52]	@ (8008a50 <batteryChargeCheck+0x90>)
 8008a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a54 <batteryChargeCheck+0x94>)
 8008a1c:	f7f7 fd3a 	bl	8000494 <__aeabi_dcmpge>
 8008a20:	1e03      	subs	r3, r0, #0
 8008a22:	d002      	beq.n	8008a2a <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8008a24:	1dfb      	adds	r3, r7, #7
 8008a26:	2203      	movs	r2, #3
 8008a28:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8008a2a:	2181      	movs	r1, #129	@ 0x81
 8008a2c:	05c9      	lsls	r1, r1, #23
 8008a2e:	6838      	ldr	r0, [r7, #0]
 8008a30:	f7f7 fd6a 	bl	8000508 <__aeabi_fcmpge>
 8008a34:	1e03      	subs	r3, r0, #0
 8008a36:	d002      	beq.n	8008a3e <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8008a38:	1dfb      	adds	r3, r7, #7
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8008a3e:	1dfb      	adds	r3, r7, #7
 8008a40:	781b      	ldrb	r3, [r3, #0]
}
 8008a42:	0018      	movs	r0, r3
 8008a44:	46bd      	mov	sp, r7
 8008a46:	b002      	add	sp, #8
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	46c0      	nop			@ (mov r8, r8)
 8008a4c:	40600000 	.word	0x40600000
 8008a50:	9999999a 	.word	0x9999999a
 8008a54:	400d9999 	.word	0x400d9999

08008a58 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8008a58:	b590      	push	{r4, r7, lr}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	0004      	movs	r4, r0
 8008a60:	0008      	movs	r0, r1
 8008a62:	0011      	movs	r1, r2
 8008a64:	1dbb      	adds	r3, r7, #6
 8008a66:	1c22      	adds	r2, r4, #0
 8008a68:	801a      	strh	r2, [r3, #0]
 8008a6a:	1d3b      	adds	r3, r7, #4
 8008a6c:	1c02      	adds	r2, r0, #0
 8008a6e:	801a      	strh	r2, [r3, #0]
 8008a70:	1cbb      	adds	r3, r7, #2
 8008a72:	1c0a      	adds	r2, r1, #0
 8008a74:	801a      	strh	r2, [r3, #0]
  if(LEDGood || init){
 8008a76:	4b0d      	ldr	r3, [pc, #52]	@ (8008aac <SetStatusLED+0x54>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d103      	bne.n	8008a86 <SetStatusLED+0x2e>
 8008a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab0 <SetStatusLED+0x58>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00e      	beq.n	8008aa4 <SetStatusLED+0x4c>
    TIM2 -> CCR1 = red;
 8008a86:	2380      	movs	r3, #128	@ 0x80
 8008a88:	05db      	lsls	r3, r3, #23
 8008a8a:	1dba      	adds	r2, r7, #6
 8008a8c:	8812      	ldrh	r2, [r2, #0]
 8008a8e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8008a90:	2380      	movs	r3, #128	@ 0x80
 8008a92:	05db      	lsls	r3, r3, #23
 8008a94:	1d3a      	adds	r2, r7, #4
 8008a96:	8812      	ldrh	r2, [r2, #0]
 8008a98:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8008a9a:	2380      	movs	r3, #128	@ 0x80
 8008a9c:	05db      	lsls	r3, r3, #23
 8008a9e:	1cba      	adds	r2, r7, #2
 8008aa0:	8812      	ldrh	r2, [r2, #0]
 8008aa2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008aa4:	46c0      	nop			@ (mov r8, r8)
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	b003      	add	sp, #12
 8008aaa:	bd90      	pop	{r4, r7, pc}
 8008aac:	200029a5 	.word	0x200029a5
 8008ab0:	20000056 	.word	0x20000056

08008ab4 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	0004      	movs	r4, r0
 8008abc:	0008      	movs	r0, r1
 8008abe:	0011      	movs	r1, r2
 8008ac0:	1dfb      	adds	r3, r7, #7
 8008ac2:	1c22      	adds	r2, r4, #0
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	1dbb      	adds	r3, r7, #6
 8008ac8:	1c02      	adds	r2, r0, #0
 8008aca:	701a      	strb	r2, [r3, #0]
 8008acc:	1d7b      	adds	r3, r7, #5
 8008ace:	1c0a      	adds	r2, r1, #0
 8008ad0:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(LEDGood || init){
 8008ad2:	4b17      	ldr	r3, [pc, #92]	@ (8008b30 <SetDBLED+0x7c>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d103      	bne.n	8008ae2 <SetDBLED+0x2e>
 8008ada:	4b16      	ldr	r3, [pc, #88]	@ (8008b34 <SetDBLED+0x80>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d022      	beq.n	8008b28 <SetDBLED+0x74>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8008ae2:	1dfb      	adds	r3, r7, #7
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	4053      	eors	r3, r2
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	001a      	movs	r2, r3
 8008aee:	4b12      	ldr	r3, [pc, #72]	@ (8008b38 <SetDBLED+0x84>)
 8008af0:	2101      	movs	r1, #1
 8008af2:	0018      	movs	r0, r3
 8008af4:	f002 fd87 	bl	800b606 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8008af8:	1dbb      	adds	r3, r7, #6
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2201      	movs	r2, #1
 8008afe:	4053      	eors	r3, r2
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	001a      	movs	r2, r3
 8008b04:	2380      	movs	r3, #128	@ 0x80
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	480b      	ldr	r0, [pc, #44]	@ (8008b38 <SetDBLED+0x84>)
 8008b0a:	0019      	movs	r1, r3
 8008b0c:	f002 fd7b 	bl	800b606 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8008b10:	1d7b      	adds	r3, r7, #5
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2201      	movs	r2, #1
 8008b16:	4053      	eors	r3, r2
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	001a      	movs	r2, r3
 8008b1c:	2380      	movs	r3, #128	@ 0x80
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4805      	ldr	r0, [pc, #20]	@ (8008b38 <SetDBLED+0x84>)
 8008b22:	0019      	movs	r1, r3
 8008b24:	f002 fd6f 	bl	800b606 <HAL_GPIO_WritePin>
  }
}
 8008b28:	46c0      	nop			@ (mov r8, r8)
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	b003      	add	sp, #12
 8008b2e:	bd90      	pop	{r4, r7, pc}
 8008b30:	200029a5 	.word	0x200029a5
 8008b34:	20000056 	.word	0x20000056
 8008b38:	50000400 	.word	0x50000400

08008b3c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8008b3c:	b590      	push	{r4, r7, lr}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	0004      	movs	r4, r0
 8008b44:	0008      	movs	r0, r1
 8008b46:	0011      	movs	r1, r2
 8008b48:	1dbb      	adds	r3, r7, #6
 8008b4a:	1c22      	adds	r2, r4, #0
 8008b4c:	801a      	strh	r2, [r3, #0]
 8008b4e:	1d3b      	adds	r3, r7, #4
 8008b50:	1c02      	adds	r2, r0, #0
 8008b52:	801a      	strh	r2, [r3, #0]
 8008b54:	1cbb      	adds	r3, r7, #2
 8008b56:	1c0a      	adds	r2, r1, #0
 8008b58:	801a      	strh	r2, [r3, #0]
  if(LEDGood || init){
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b8c <SetVocLED+0x50>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <SetVocLED+0x2e>
 8008b62:	4b0b      	ldr	r3, [pc, #44]	@ (8008b90 <SetVocLED+0x54>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00b      	beq.n	8008b82 <SetVocLED+0x46>
    TIM3 -> CCR1 = red;
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b94 <SetVocLED+0x58>)
 8008b6c:	1dba      	adds	r2, r7, #6
 8008b6e:	8812      	ldrh	r2, [r2, #0]
 8008b70:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8008b72:	4b08      	ldr	r3, [pc, #32]	@ (8008b94 <SetVocLED+0x58>)
 8008b74:	1d3a      	adds	r2, r7, #4
 8008b76:	8812      	ldrh	r2, [r2, #0]
 8008b78:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8008b7a:	4b06      	ldr	r3, [pc, #24]	@ (8008b94 <SetVocLED+0x58>)
 8008b7c:	1cba      	adds	r2, r7, #2
 8008b7e:	8812      	ldrh	r2, [r2, #0]
 8008b80:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008b82:	46c0      	nop			@ (mov r8, r8)
 8008b84:	46bd      	mov	sp, r7
 8008b86:	b003      	add	sp, #12
 8008b88:	bd90      	pop	{r4, r7, pc}
 8008b8a:	46c0      	nop			@ (mov r8, r8)
 8008b8c:	200029a5 	.word	0x200029a5
 8008b90:	20000056 	.word	0x20000056
 8008b94:	40000400 	.word	0x40000400

08008b98 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008b9c:	4b05      	ldr	r3, [pc, #20]	@ (8008bb4 <SetMeasurementIndicator+0x1c>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <SetMeasurementIndicator+0x14>
    TIM2 -> CCR3 = 3000;
 8008ba4:	2380      	movs	r3, #128	@ 0x80
 8008ba6:	05db      	lsls	r3, r3, #23
 8008ba8:	4a03      	ldr	r2, [pc, #12]	@ (8008bb8 <SetMeasurementIndicator+0x20>)
 8008baa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008bac:	46c0      	nop			@ (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	46c0      	nop			@ (mov r8, r8)
 8008bb4:	200029a5 	.word	0x200029a5
 8008bb8:	00000bb8 	.word	0x00000bb8

08008bbc <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008bc0:	4b05      	ldr	r3, [pc, #20]	@ (8008bd8 <ResetMeasurementIndicator+0x1c>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d004      	beq.n	8008bd2 <ResetMeasurementIndicator+0x16>
    TIM2 -> CCR3 = 4000;
 8008bc8:	2380      	movs	r3, #128	@ 0x80
 8008bca:	05db      	lsls	r3, r3, #23
 8008bcc:	22fa      	movs	r2, #250	@ 0xfa
 8008bce:	0112      	lsls	r2, r2, #4
 8008bd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008bd2:	46c0      	nop			@ (mov r8, r8)
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	200029a5 	.word	0x200029a5

08008bdc <SetMICIndicator>:
void SetMICIndicator(){
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008be0:	4b05      	ldr	r3, [pc, #20]	@ (8008bf8 <SetMICIndicator+0x1c>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <SetMICIndicator+0x14>
    TIM2 -> CCR1 = 3000;
 8008be8:	2380      	movs	r3, #128	@ 0x80
 8008bea:	05db      	lsls	r3, r3, #23
 8008bec:	4a03      	ldr	r2, [pc, #12]	@ (8008bfc <SetMICIndicator+0x20>)
 8008bee:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008bf0:	46c0      	nop			@ (mov r8, r8)
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	46c0      	nop			@ (mov r8, r8)
 8008bf8:	200029a5 	.word	0x200029a5
 8008bfc:	00000bb8 	.word	0x00000bb8

08008c00 <ResetMICIndicator>:
void ResetMICIndicator(){
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008c04:	4b05      	ldr	r3, [pc, #20]	@ (8008c1c <ResetMICIndicator+0x1c>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <ResetMICIndicator+0x16>
    TIM2 -> CCR1 = 4000;
 8008c0c:	2380      	movs	r3, #128	@ 0x80
 8008c0e:	05db      	lsls	r3, r3, #23
 8008c10:	22fa      	movs	r2, #250	@ 0xfa
 8008c12:	0112      	lsls	r2, r2, #4
 8008c14:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008c16:	46c0      	nop			@ (mov r8, r8)
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	200029a5 	.word	0x200029a5

08008c20 <SetESPIndicator>:
void SetESPIndicator(){
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008c24:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <SetESPIndicator+0x1c>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <SetESPIndicator+0x14>
    TIM2 -> CCR4 = 3000;
 8008c2c:	2380      	movs	r3, #128	@ 0x80
 8008c2e:	05db      	lsls	r3, r3, #23
 8008c30:	4a03      	ldr	r2, [pc, #12]	@ (8008c40 <SetESPIndicator+0x20>)
 8008c32:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008c34:	46c0      	nop			@ (mov r8, r8)
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	46c0      	nop			@ (mov r8, r8)
 8008c3c:	200029a5 	.word	0x200029a5
 8008c40:	00000bb8 	.word	0x00000bb8

08008c44 <ResetESPIndicator>:
void ResetESPIndicator(){
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008c48:	4b05      	ldr	r3, [pc, #20]	@ (8008c60 <ResetESPIndicator+0x1c>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d004      	beq.n	8008c5a <ResetESPIndicator+0x16>
    TIM2 -> CCR4 = 4000;
 8008c50:	2380      	movs	r3, #128	@ 0x80
 8008c52:	05db      	lsls	r3, r3, #23
 8008c54:	22fa      	movs	r2, #250	@ 0xfa
 8008c56:	0112      	lsls	r2, r2, #4
 8008c58:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008c5a:	46c0      	nop			@ (mov r8, r8)
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	200029a5 	.word	0x200029a5

08008c64 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0
  SetStatusLED(4000,4000,4000);
 8008c68:	23fa      	movs	r3, #250	@ 0xfa
 8008c6a:	011a      	lsls	r2, r3, #4
 8008c6c:	23fa      	movs	r3, #250	@ 0xfa
 8008c6e:	0119      	lsls	r1, r3, #4
 8008c70:	23fa      	movs	r3, #250	@ 0xfa
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	0018      	movs	r0, r3
 8008c76:	f7ff feef 	bl	8008a58 <SetStatusLED>
  SetDBLED(false,false,false);
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	2000      	movs	r0, #0
 8008c80:	f7ff ff18 	bl	8008ab4 <SetDBLED>
  SetVocLED(4000,4000,4000);
 8008c84:	23fa      	movs	r3, #250	@ 0xfa
 8008c86:	011a      	lsls	r2, r3, #4
 8008c88:	23fa      	movs	r3, #250	@ 0xfa
 8008c8a:	0119      	lsls	r1, r3, #4
 8008c8c:	23fa      	movs	r3, #250	@ 0xfa
 8008c8e:	011b      	lsls	r3, r3, #4
 8008c90:	0018      	movs	r0, r3
 8008c92:	f7ff ff53 	bl	8008b3c <SetVocLED>
return;
 8008c96:	46c0      	nop			@ (mov r8, r8)
}
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <powerCheck>:

Battery_Status powerCheck(){
 8008c9c:	b590      	push	{r4, r7, lr}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
  PowerStamp = HAL_GetTick() + 10000;
 8008ca2:	f001 f911 	bl	8009ec8 <HAL_GetTick>
 8008ca6:	0003      	movs	r3, r0
 8008ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8008ce8 <powerCheck+0x4c>)
 8008caa:	189a      	adds	r2, r3, r2
 8008cac:	4b0f      	ldr	r3, [pc, #60]	@ (8008cec <powerCheck+0x50>)
 8008cae:	601a      	str	r2, [r3, #0]
  Battery_Status status;
  if(Check_USB_PowerOn()){
 8008cb0:	f7fc fd1a 	bl	80056e8 <Check_USB_PowerOn>
 8008cb4:	1e03      	subs	r3, r0, #0
 8008cb6:	d006      	beq.n	8008cc6 <powerCheck+0x2a>
    status = USB_PLUGGED_IN;
 8008cb8:	1dfb      	adds	r3, r7, #7
 8008cba:	2201      	movs	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
    LEDGood = true;
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf0 <powerCheck+0x54>)
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	e009      	b.n	8008cda <powerCheck+0x3e>
  }
  else{
    status = batteryChargeCheck();
 8008cc6:	1dfc      	adds	r4, r7, #7
 8008cc8:	f7ff fe7a 	bl	80089c0 <batteryChargeCheck>
 8008ccc:	0003      	movs	r3, r0
 8008cce:	7023      	strb	r3, [r4, #0]
    SetLEDsOff();
 8008cd0:	f7ff ffc8 	bl	8008c64 <SetLEDsOff>
    LEDGood = false;
 8008cd4:	4b06      	ldr	r3, [pc, #24]	@ (8008cf0 <powerCheck+0x54>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]

  }
  return status;
 8008cda:	1dfb      	adds	r3, r7, #7
 8008cdc:	781b      	ldrb	r3, [r3, #0]
}
 8008cde:	0018      	movs	r0, r3
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	b003      	add	sp, #12
 8008ce4:	bd90      	pop	{r4, r7, pc}
 8008ce6:	46c0      	nop			@ (mov r8, r8)
 8008ce8:	00002710 	.word	0x00002710
 8008cec:	200029ac 	.word	0x200029ac
 8008cf0:	200029a5 	.word	0x200029a5

08008cf4 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	0002      	movs	r2, r0
 8008cfc:	1dfb      	adds	r3, r7, #7
 8008cfe:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8008d00:	1dfb      	adds	r3, r7, #7
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d105      	bne.n	8008d14 <powerDisplay+0x20>
    Debug("LEDS are okay");
 8008d08:	4a18      	ldr	r2, [pc, #96]	@ (8008d6c <powerDisplay+0x78>)
 8008d0a:	4b19      	ldr	r3, [pc, #100]	@ (8008d70 <powerDisplay+0x7c>)
 8008d0c:	0019      	movs	r1, r3
 8008d0e:	2003      	movs	r0, #3
 8008d10:	f000 fd54 	bl	80097bc <CreateLine>

  }
  if(status == BATTERY_FULL){
 8008d14:	1dfb      	adds	r3, r7, #7
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d105      	bne.n	8008d28 <powerDisplay+0x34>
    Debug("Battery fully charged");
 8008d1c:	4a15      	ldr	r2, [pc, #84]	@ (8008d74 <powerDisplay+0x80>)
 8008d1e:	4b14      	ldr	r3, [pc, #80]	@ (8008d70 <powerDisplay+0x7c>)
 8008d20:	0019      	movs	r1, r3
 8008d22:	2003      	movs	r0, #3
 8008d24:	f000 fd4a 	bl	80097bc <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8008d28:	1dfb      	adds	r3, r7, #7
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d105      	bne.n	8008d3c <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8008d30:	4a11      	ldr	r2, [pc, #68]	@ (8008d78 <powerDisplay+0x84>)
 8008d32:	4b0f      	ldr	r3, [pc, #60]	@ (8008d70 <powerDisplay+0x7c>)
 8008d34:	0019      	movs	r1, r3
 8008d36:	2003      	movs	r0, #3
 8008d38:	f000 fd40 	bl	80097bc <CreateLine>
  }
  if(status == BATTERY_LOW){
 8008d3c:	1dfb      	adds	r3, r7, #7
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d105      	bne.n	8008d50 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8008d44:	4a0d      	ldr	r2, [pc, #52]	@ (8008d7c <powerDisplay+0x88>)
 8008d46:	4b0a      	ldr	r3, [pc, #40]	@ (8008d70 <powerDisplay+0x7c>)
 8008d48:	0019      	movs	r1, r3
 8008d4a:	2003      	movs	r0, #3
 8008d4c:	f000 fd36 	bl	80097bc <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8008d50:	1dfb      	adds	r3, r7, #7
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d105      	bne.n	8008d64 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8008d58:	4a09      	ldr	r2, [pc, #36]	@ (8008d80 <powerDisplay+0x8c>)
 8008d5a:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <powerDisplay+0x7c>)
 8008d5c:	0019      	movs	r1, r3
 8008d5e:	2003      	movs	r0, #3
 8008d60:	f000 fd2c 	bl	80097bc <CreateLine>
  }
}
 8008d64:	46c0      	nop			@ (mov r8, r8)
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b002      	add	sp, #8
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	0801b71c 	.word	0x0801b71c
 8008d70:	0801b72c 	.word	0x0801b72c
 8008d74:	0801b730 	.word	0x0801b730
 8008d78:	0801b748 	.word	0x0801b748
 8008d7c:	0801b768 	.word	0x0801b768
 8008d80:	0801b780 	.word	0x0801b780

08008d84 <configCheck>:

void configCheck(){
 8008d84:	b580      	push	{r7, lr}
 8008d86:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8008d88:	f7fc fcbd 	bl	8005706 <BootButton_Pressed>
 8008d8c:	1e03      	subs	r3, r0, #0
 8008d8e:	d007      	beq.n	8008da0 <configCheck+0x1c>
 8008d90:	f7fc fcca 	bl	8005728 <UserButton_Pressed>
 8008d94:	1e03      	subs	r3, r0, #0
 8008d96:	d003      	beq.n	8008da0 <configCheck+0x1c>
    configSet = true;
 8008d98:	4b11      	ldr	r3, [pc, #68]	@ (8008de0 <configCheck+0x5c>)
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	e00a      	b.n	8008db6 <configCheck+0x32>
  }
  else{
    configSet = false;
 8008da0:	4b0f      	ldr	r3, [pc, #60]	@ (8008de0 <configCheck+0x5c>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8008da6:	f001 f88f 	bl	8009ec8 <HAL_GetTick>
 8008daa:	0003      	movs	r3, r0
 8008dac:	22fa      	movs	r2, #250	@ 0xfa
 8008dae:	00d2      	lsls	r2, r2, #3
 8008db0:	189a      	adds	r2, r3, r2
 8008db2:	4b0c      	ldr	r3, [pc, #48]	@ (8008de4 <configCheck+0x60>)
 8008db4:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8008db6:	4b0a      	ldr	r3, [pc, #40]	@ (8008de0 <configCheck+0x5c>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00d      	beq.n	8008dda <configCheck+0x56>
 8008dbe:	4b09      	ldr	r3, [pc, #36]	@ (8008de4 <configCheck+0x60>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f000 fca4 	bl	8009710 <TimestampIsReached>
 8008dc8:	1e03      	subs	r3, r0, #0
 8008dca:	d006      	beq.n	8008dda <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 8008dcc:	f7fa fcb6 	bl	800373c <SetConfigMode>
    SetDBLED(true, true, true);
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	f7ff fe6d 	bl	8008ab4 <SetDBLED>
  }
}
 8008dda:	46c0      	nop			@ (mov r8, r8)
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	200029a4 	.word	0x200029a4
 8008de4:	200029a8 	.word	0x200029a8

08008de8 <status_Upkeep>:
  //RTC_SetWakeUpTimer(RTC_Handler, 300000);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void status_Upkeep(){
 8008de8:	b590      	push	{r4, r7, lr}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
  Battery_Status status;
  configCheck();
 8008dee:	f7ff ffc9 	bl	8008d84 <configCheck>
//  UpdateClock();
  if(TimestampIsReached(PowerStamp)){
 8008df2:	4b0a      	ldr	r3, [pc, #40]	@ (8008e1c <status_Upkeep+0x34>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	0018      	movs	r0, r3
 8008df8:	f000 fc8a 	bl	8009710 <TimestampIsReached>
 8008dfc:	1e03      	subs	r3, r0, #0
 8008dfe:	d009      	beq.n	8008e14 <status_Upkeep+0x2c>
    status = powerCheck();
 8008e00:	1dfc      	adds	r4, r7, #7
 8008e02:	f7ff ff4b 	bl	8008c9c <powerCheck>
 8008e06:	0003      	movs	r3, r0
 8008e08:	7023      	strb	r3, [r4, #0]
    powerDisplay(status);
 8008e0a:	1dfb      	adds	r3, r7, #7
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f7ff ff70 	bl	8008cf4 <powerDisplay>
  }

}
 8008e14:	46c0      	nop			@ (mov r8, r8)
 8008e16:	46bd      	mov	sp, r7
 8008e18:	b003      	add	sp, #12
 8008e1a:	bd90      	pop	{r4, r7, pc}
 8008e1c:	200029ac 	.word	0x200029ac

08008e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e24:	4b07      	ldr	r3, [pc, #28]	@ (8008e44 <HAL_MspInit+0x24>)
 8008e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e28:	4b06      	ldr	r3, [pc, #24]	@ (8008e44 <HAL_MspInit+0x24>)
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e30:	4b04      	ldr	r3, [pc, #16]	@ (8008e44 <HAL_MspInit+0x24>)
 8008e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e34:	4b03      	ldr	r3, [pc, #12]	@ (8008e44 <HAL_MspInit+0x24>)
 8008e36:	2180      	movs	r1, #128	@ 0x80
 8008e38:	0549      	lsls	r1, r1, #21
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e3e:	46c0      	nop			@ (mov r8, r8)
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	40021000 	.word	0x40021000

08008e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008e4c:	46c0      	nop			@ (mov r8, r8)
 8008e4e:	e7fd      	b.n	8008e4c <NMI_Handler+0x4>

08008e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e54:	46c0      	nop			@ (mov r8, r8)
 8008e56:	e7fd      	b.n	8008e54 <HardFault_Handler+0x4>

08008e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008e5c:	46c0      	nop			@ (mov r8, r8)
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008e66:	46c0      	nop			@ (mov r8, r8)
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008e70:	f001 f818 	bl	8009ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008e74:	46c0      	nop			@ (mov r8, r8)
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008e80:	4b05      	ldr	r3, [pc, #20]	@ (8008e98 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8008e82:	0018      	movs	r0, r3
 8008e84:	f001 fe8b 	bl	800ab9e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008e88:	4b04      	ldr	r3, [pc, #16]	@ (8008e9c <DMA1_Channel2_3_IRQHandler+0x20>)
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f001 fe87 	bl	800ab9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008e90:	46c0      	nop			@ (mov r8, r8)
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	46c0      	nop			@ (mov r8, r8)
 8008e98:	20000f58 	.word	0x20000f58
 8008e9c:	20000f10 	.word	0x20000f10

08008ea0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008ea4:	4b07      	ldr	r3, [pc, #28]	@ (8008ec4 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f001 fe79 	bl	800ab9e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8008eac:	4b06      	ldr	r3, [pc, #24]	@ (8008ec8 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8008eae:	0018      	movs	r0, r3
 8008eb0:	f001 fe75 	bl	800ab9e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8008eb4:	4b05      	ldr	r3, [pc, #20]	@ (8008ecc <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	f001 fe71 	bl	800ab9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008ebc:	46c0      	nop			@ (mov r8, r8)
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	46c0      	nop			@ (mov r8, r8)
 8008ec4:	20000fdc 	.word	0x20000fdc
 8008ec8:	20002c5c 	.word	0x20002c5c
 8008ecc:	20002ca4 	.word	0x20002ca4

08008ed0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008ed4:	4b03      	ldr	r3, [pc, #12]	@ (8008ee4 <USART4_5_IRQHandler+0x14>)
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f008 fc32 	bl	8011740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8008edc:	46c0      	nop			@ (mov r8, r8)
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	46c0      	nop			@ (mov r8, r8)
 8008ee4:	20002ba4 	.word	0x20002ba4

08008ee8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8008eec:	4b09      	ldr	r3, [pc, #36]	@ (8008f14 <I2C1_IRQHandler+0x2c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699a      	ldr	r2, [r3, #24]
 8008ef2:	23e0      	movs	r3, #224	@ 0xe0
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	d004      	beq.n	8008f04 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8008efa:	4b06      	ldr	r3, [pc, #24]	@ (8008f14 <I2C1_IRQHandler+0x2c>)
 8008efc:	0018      	movs	r0, r3
 8008efe:	f002 fe5b 	bl	800bbb8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8008f02:	e003      	b.n	8008f0c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008f04:	4b03      	ldr	r3, [pc, #12]	@ (8008f14 <I2C1_IRQHandler+0x2c>)
 8008f06:	0018      	movs	r0, r3
 8008f08:	f002 fe3c 	bl	800bb84 <HAL_I2C_EV_IRQHandler>
}
 8008f0c:	46c0      	nop			@ (mov r8, r8)
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	46c0      	nop			@ (mov r8, r8)
 8008f14:	20000e68 	.word	0x20000e68

08008f18 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008f1c:	4b03      	ldr	r3, [pc, #12]	@ (8008f2c <USB_IRQHandler+0x14>)
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f005 f812 	bl	800df48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8008f24:	46c0      	nop			@ (mov r8, r8)
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	46c0      	nop			@ (mov r8, r8)
 8008f2c:	20003aac 	.word	0x20003aac

08008f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
  return 1;
 8008f34:	2301      	movs	r3, #1
}
 8008f36:	0018      	movs	r0, r3
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <_kill>:

int _kill(int pid, int sig)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008f46:	f00f f8bf 	bl	80180c8 <__errno>
 8008f4a:	0003      	movs	r3, r0
 8008f4c:	2216      	movs	r2, #22
 8008f4e:	601a      	str	r2, [r3, #0]
  return -1;
 8008f50:	2301      	movs	r3, #1
 8008f52:	425b      	negs	r3, r3
}
 8008f54:	0018      	movs	r0, r3
 8008f56:	46bd      	mov	sp, r7
 8008f58:	b002      	add	sp, #8
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <_exit>:

void _exit (int status)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008f64:	2301      	movs	r3, #1
 8008f66:	425a      	negs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	0011      	movs	r1, r2
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f7ff ffe5 	bl	8008f3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8008f72:	46c0      	nop			@ (mov r8, r8)
 8008f74:	e7fd      	b.n	8008f72 <_exit+0x16>

08008f76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f82:	2300      	movs	r3, #0
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e00a      	b.n	8008f9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008f88:	e000      	b.n	8008f8c <_read+0x16>
 8008f8a:	bf00      	nop
 8008f8c:	0001      	movs	r1, r0
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	1c5a      	adds	r2, r3, #1
 8008f92:	60ba      	str	r2, [r7, #8]
 8008f94:	b2ca      	uxtb	r2, r1
 8008f96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	dbf0      	blt.n	8008f88 <_read+0x12>
  }

  return len;
 8008fa6:	687b      	ldr	r3, [r7, #4]
}
 8008fa8:	0018      	movs	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b006      	add	sp, #24
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	425b      	negs	r3, r3
}
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	b002      	add	sp, #8
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2280      	movs	r2, #128	@ 0x80
 8008fd2:	0192      	lsls	r2, r2, #6
 8008fd4:	605a      	str	r2, [r3, #4]
  return 0;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	0018      	movs	r0, r3
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	b002      	add	sp, #8
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <_isatty>:

int _isatty(int file)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008fe8:	2301      	movs	r3, #1
}
 8008fea:	0018      	movs	r0, r3
 8008fec:	46bd      	mov	sp, r7
 8008fee:	b002      	add	sp, #8
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	0018      	movs	r0, r3
 8009002:	46bd      	mov	sp, r7
 8009004:	b004      	add	sp, #16
 8009006:	bd80      	pop	{r7, pc}

08009008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009010:	4a14      	ldr	r2, [pc, #80]	@ (8009064 <_sbrk+0x5c>)
 8009012:	4b15      	ldr	r3, [pc, #84]	@ (8009068 <_sbrk+0x60>)
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800901c:	4b13      	ldr	r3, [pc, #76]	@ (800906c <_sbrk+0x64>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009024:	4b11      	ldr	r3, [pc, #68]	@ (800906c <_sbrk+0x64>)
 8009026:	4a12      	ldr	r2, [pc, #72]	@ (8009070 <_sbrk+0x68>)
 8009028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800902a:	4b10      	ldr	r3, [pc, #64]	@ (800906c <_sbrk+0x64>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	18d3      	adds	r3, r2, r3
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	429a      	cmp	r2, r3
 8009036:	d207      	bcs.n	8009048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009038:	f00f f846 	bl	80180c8 <__errno>
 800903c:	0003      	movs	r3, r0
 800903e:	220c      	movs	r2, #12
 8009040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009042:	2301      	movs	r3, #1
 8009044:	425b      	negs	r3, r3
 8009046:	e009      	b.n	800905c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009048:	4b08      	ldr	r3, [pc, #32]	@ (800906c <_sbrk+0x64>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800904e:	4b07      	ldr	r3, [pc, #28]	@ (800906c <_sbrk+0x64>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	18d2      	adds	r2, r2, r3
 8009056:	4b05      	ldr	r3, [pc, #20]	@ (800906c <_sbrk+0x64>)
 8009058:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800905a:	68fb      	ldr	r3, [r7, #12]
}
 800905c:	0018      	movs	r0, r3
 800905e:	46bd      	mov	sp, r7
 8009060:	b006      	add	sp, #24
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20005000 	.word	0x20005000
 8009068:	00000400 	.word	0x00000400
 800906c:	200029b0 	.word	0x200029b0
 8009070:	20004110 	.word	0x20004110

08009074 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009078:	46c0      	nop			@ (mov r8, r8)
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009086:	2310      	movs	r3, #16
 8009088:	18fb      	adds	r3, r7, r3
 800908a:	0018      	movs	r0, r3
 800908c:	2308      	movs	r3, #8
 800908e:	001a      	movs	r2, r3
 8009090:	2100      	movs	r1, #0
 8009092:	f00e ff87 	bl	8017fa4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009096:	003b      	movs	r3, r7
 8009098:	0018      	movs	r0, r3
 800909a:	2310      	movs	r3, #16
 800909c:	001a      	movs	r2, r3
 800909e:	2100      	movs	r1, #0
 80090a0:	f00e ff80 	bl	8017fa4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80090a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009160 <MX_TIM2_Init+0xe0>)
 80090a6:	2280      	movs	r2, #128	@ 0x80
 80090a8:	05d2      	lsls	r2, r2, #23
 80090aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80090ac:	4b2c      	ldr	r3, [pc, #176]	@ (8009160 <MX_TIM2_Init+0xe0>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090b2:	4b2b      	ldr	r3, [pc, #172]	@ (8009160 <MX_TIM2_Init+0xe0>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80090b8:	4b29      	ldr	r3, [pc, #164]	@ (8009160 <MX_TIM2_Init+0xe0>)
 80090ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009164 <MX_TIM2_Init+0xe4>)
 80090bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090be:	4b28      	ldr	r3, [pc, #160]	@ (8009160 <MX_TIM2_Init+0xe0>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090c4:	4b26      	ldr	r3, [pc, #152]	@ (8009160 <MX_TIM2_Init+0xe0>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80090ca:	4b25      	ldr	r3, [pc, #148]	@ (8009160 <MX_TIM2_Init+0xe0>)
 80090cc:	0018      	movs	r0, r3
 80090ce:	f007 fda9 	bl	8010c24 <HAL_TIM_PWM_Init>
 80090d2:	1e03      	subs	r3, r0, #0
 80090d4:	d001      	beq.n	80090da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80090d6:	f7fd f957 	bl	8006388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090da:	2110      	movs	r1, #16
 80090dc:	187b      	adds	r3, r7, r1
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090e2:	187b      	adds	r3, r7, r1
 80090e4:	2200      	movs	r2, #0
 80090e6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80090e8:	187a      	adds	r2, r7, r1
 80090ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009160 <MX_TIM2_Init+0xe0>)
 80090ec:	0011      	movs	r1, r2
 80090ee:	0018      	movs	r0, r3
 80090f0:	f008 f8b6 	bl	8011260 <HAL_TIMEx_MasterConfigSynchronization>
 80090f4:	1e03      	subs	r3, r0, #0
 80090f6:	d001      	beq.n	80090fc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80090f8:	f7fd f946 	bl	8006388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80090fc:	003b      	movs	r3, r7
 80090fe:	2260      	movs	r2, #96	@ 0x60
 8009100:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009102:	003b      	movs	r3, r7
 8009104:	2200      	movs	r2, #0
 8009106:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009108:	003b      	movs	r3, r7
 800910a:	2200      	movs	r2, #0
 800910c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800910e:	003b      	movs	r3, r7
 8009110:	2200      	movs	r2, #0
 8009112:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009114:	0039      	movs	r1, r7
 8009116:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <MX_TIM2_Init+0xe0>)
 8009118:	2200      	movs	r2, #0
 800911a:	0018      	movs	r0, r3
 800911c:	f007 fe54 	bl	8010dc8 <HAL_TIM_PWM_ConfigChannel>
 8009120:	1e03      	subs	r3, r0, #0
 8009122:	d001      	beq.n	8009128 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8009124:	f7fd f930 	bl	8006388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009128:	0039      	movs	r1, r7
 800912a:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <MX_TIM2_Init+0xe0>)
 800912c:	2208      	movs	r2, #8
 800912e:	0018      	movs	r0, r3
 8009130:	f007 fe4a 	bl	8010dc8 <HAL_TIM_PWM_ConfigChannel>
 8009134:	1e03      	subs	r3, r0, #0
 8009136:	d001      	beq.n	800913c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8009138:	f7fd f926 	bl	8006388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800913c:	0039      	movs	r1, r7
 800913e:	4b08      	ldr	r3, [pc, #32]	@ (8009160 <MX_TIM2_Init+0xe0>)
 8009140:	220c      	movs	r2, #12
 8009142:	0018      	movs	r0, r3
 8009144:	f007 fe40 	bl	8010dc8 <HAL_TIM_PWM_ConfigChannel>
 8009148:	1e03      	subs	r3, r0, #0
 800914a:	d001      	beq.n	8009150 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800914c:	f7fd f91c 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009150:	4b03      	ldr	r3, [pc, #12]	@ (8009160 <MX_TIM2_Init+0xe0>)
 8009152:	0018      	movs	r0, r3
 8009154:	f000 f8aa 	bl	80092ac <HAL_TIM_MspPostInit>

}
 8009158:	46c0      	nop			@ (mov r8, r8)
 800915a:	46bd      	mov	sp, r7
 800915c:	b006      	add	sp, #24
 800915e:	bd80      	pop	{r7, pc}
 8009160:	200029b4 	.word	0x200029b4
 8009164:	0000ffff 	.word	0x0000ffff

08009168 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800916e:	2310      	movs	r3, #16
 8009170:	18fb      	adds	r3, r7, r3
 8009172:	0018      	movs	r0, r3
 8009174:	2308      	movs	r3, #8
 8009176:	001a      	movs	r2, r3
 8009178:	2100      	movs	r1, #0
 800917a:	f00e ff13 	bl	8017fa4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800917e:	003b      	movs	r3, r7
 8009180:	0018      	movs	r0, r3
 8009182:	2310      	movs	r3, #16
 8009184:	001a      	movs	r2, r3
 8009186:	2100      	movs	r1, #0
 8009188:	f00e ff0c 	bl	8017fa4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800918c:	4b32      	ldr	r3, [pc, #200]	@ (8009258 <MX_TIM3_Init+0xf0>)
 800918e:	4a33      	ldr	r2, [pc, #204]	@ (800925c <MX_TIM3_Init+0xf4>)
 8009190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009192:	4b31      	ldr	r3, [pc, #196]	@ (8009258 <MX_TIM3_Init+0xf0>)
 8009194:	2200      	movs	r2, #0
 8009196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009198:	4b2f      	ldr	r3, [pc, #188]	@ (8009258 <MX_TIM3_Init+0xf0>)
 800919a:	2200      	movs	r2, #0
 800919c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800919e:	4b2e      	ldr	r3, [pc, #184]	@ (8009258 <MX_TIM3_Init+0xf0>)
 80091a0:	4a2f      	ldr	r2, [pc, #188]	@ (8009260 <MX_TIM3_Init+0xf8>)
 80091a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091a4:	4b2c      	ldr	r3, [pc, #176]	@ (8009258 <MX_TIM3_Init+0xf0>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80091aa:	4b2b      	ldr	r3, [pc, #172]	@ (8009258 <MX_TIM3_Init+0xf0>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80091b0:	4b29      	ldr	r3, [pc, #164]	@ (8009258 <MX_TIM3_Init+0xf0>)
 80091b2:	0018      	movs	r0, r3
 80091b4:	f007 fd36 	bl	8010c24 <HAL_TIM_PWM_Init>
 80091b8:	1e03      	subs	r3, r0, #0
 80091ba:	d001      	beq.n	80091c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80091bc:	f7fd f8e4 	bl	8006388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091c0:	2110      	movs	r1, #16
 80091c2:	187b      	adds	r3, r7, r1
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091c8:	187b      	adds	r3, r7, r1
 80091ca:	2200      	movs	r2, #0
 80091cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80091ce:	187a      	adds	r2, r7, r1
 80091d0:	4b21      	ldr	r3, [pc, #132]	@ (8009258 <MX_TIM3_Init+0xf0>)
 80091d2:	0011      	movs	r1, r2
 80091d4:	0018      	movs	r0, r3
 80091d6:	f008 f843 	bl	8011260 <HAL_TIMEx_MasterConfigSynchronization>
 80091da:	1e03      	subs	r3, r0, #0
 80091dc:	d001      	beq.n	80091e2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80091de:	f7fd f8d3 	bl	8006388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80091e2:	003b      	movs	r3, r7
 80091e4:	2260      	movs	r2, #96	@ 0x60
 80091e6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80091e8:	003b      	movs	r3, r7
 80091ea:	2200      	movs	r2, #0
 80091ec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80091ee:	003b      	movs	r3, r7
 80091f0:	2200      	movs	r2, #0
 80091f2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80091f4:	003b      	movs	r3, r7
 80091f6:	2200      	movs	r2, #0
 80091f8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80091fa:	0039      	movs	r1, r7
 80091fc:	4b16      	ldr	r3, [pc, #88]	@ (8009258 <MX_TIM3_Init+0xf0>)
 80091fe:	2200      	movs	r2, #0
 8009200:	0018      	movs	r0, r3
 8009202:	f007 fde1 	bl	8010dc8 <HAL_TIM_PWM_ConfigChannel>
 8009206:	1e03      	subs	r3, r0, #0
 8009208:	d001      	beq.n	800920e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800920a:	f7fd f8bd 	bl	8006388 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800920e:	4b12      	ldr	r3, [pc, #72]	@ (8009258 <MX_TIM3_Init+0xf0>)
 8009210:	2104      	movs	r1, #4
 8009212:	0018      	movs	r0, r3
 8009214:	f008 f882 	bl	801131c <HAL_TIMEx_RemapConfig>
 8009218:	1e03      	subs	r3, r0, #0
 800921a:	d001      	beq.n	8009220 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800921c:	f7fd f8b4 	bl	8006388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009220:	0039      	movs	r1, r7
 8009222:	4b0d      	ldr	r3, [pc, #52]	@ (8009258 <MX_TIM3_Init+0xf0>)
 8009224:	2204      	movs	r2, #4
 8009226:	0018      	movs	r0, r3
 8009228:	f007 fdce 	bl	8010dc8 <HAL_TIM_PWM_ConfigChannel>
 800922c:	1e03      	subs	r3, r0, #0
 800922e:	d001      	beq.n	8009234 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009230:	f7fd f8aa 	bl	8006388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009234:	0039      	movs	r1, r7
 8009236:	4b08      	ldr	r3, [pc, #32]	@ (8009258 <MX_TIM3_Init+0xf0>)
 8009238:	2208      	movs	r2, #8
 800923a:	0018      	movs	r0, r3
 800923c:	f007 fdc4 	bl	8010dc8 <HAL_TIM_PWM_ConfigChannel>
 8009240:	1e03      	subs	r3, r0, #0
 8009242:	d001      	beq.n	8009248 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8009244:	f7fd f8a0 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009248:	4b03      	ldr	r3, [pc, #12]	@ (8009258 <MX_TIM3_Init+0xf0>)
 800924a:	0018      	movs	r0, r3
 800924c:	f000 f82e 	bl	80092ac <HAL_TIM_MspPostInit>

}
 8009250:	46c0      	nop			@ (mov r8, r8)
 8009252:	46bd      	mov	sp, r7
 8009254:	b006      	add	sp, #24
 8009256:	bd80      	pop	{r7, pc}
 8009258:	200029f4 	.word	0x200029f4
 800925c:	40000400 	.word	0x40000400
 8009260:	0000ffff 	.word	0x0000ffff

08009264 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	2380      	movs	r3, #128	@ 0x80
 8009272:	05db      	lsls	r3, r3, #23
 8009274:	429a      	cmp	r2, r3
 8009276:	d106      	bne.n	8009286 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009278:	4b0a      	ldr	r3, [pc, #40]	@ (80092a4 <HAL_TIM_PWM_MspInit+0x40>)
 800927a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800927c:	4b09      	ldr	r3, [pc, #36]	@ (80092a4 <HAL_TIM_PWM_MspInit+0x40>)
 800927e:	2101      	movs	r1, #1
 8009280:	430a      	orrs	r2, r1
 8009282:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8009284:	e00a      	b.n	800929c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a07      	ldr	r2, [pc, #28]	@ (80092a8 <HAL_TIM_PWM_MspInit+0x44>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d105      	bne.n	800929c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009290:	4b04      	ldr	r3, [pc, #16]	@ (80092a4 <HAL_TIM_PWM_MspInit+0x40>)
 8009292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009294:	4b03      	ldr	r3, [pc, #12]	@ (80092a4 <HAL_TIM_PWM_MspInit+0x40>)
 8009296:	2102      	movs	r1, #2
 8009298:	430a      	orrs	r2, r1
 800929a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800929c:	46c0      	nop			@ (mov r8, r8)
 800929e:	46bd      	mov	sp, r7
 80092a0:	b002      	add	sp, #8
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	40021000 	.word	0x40021000
 80092a8:	40000400 	.word	0x40000400

080092ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80092ac:	b590      	push	{r4, r7, lr}
 80092ae:	b08b      	sub	sp, #44	@ 0x2c
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092b4:	2414      	movs	r4, #20
 80092b6:	193b      	adds	r3, r7, r4
 80092b8:	0018      	movs	r0, r3
 80092ba:	2314      	movs	r3, #20
 80092bc:	001a      	movs	r2, r3
 80092be:	2100      	movs	r1, #0
 80092c0:	f00e fe70 	bl	8017fa4 <memset>
  if(timHandle->Instance==TIM2)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	2380      	movs	r3, #128	@ 0x80
 80092ca:	05db      	lsls	r3, r3, #23
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d123      	bne.n	8009318 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092d0:	4b27      	ldr	r3, [pc, #156]	@ (8009370 <HAL_TIM_MspPostInit+0xc4>)
 80092d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d4:	4b26      	ldr	r3, [pc, #152]	@ (8009370 <HAL_TIM_MspPostInit+0xc4>)
 80092d6:	2101      	movs	r1, #1
 80092d8:	430a      	orrs	r2, r1
 80092da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80092dc:	4b24      	ldr	r3, [pc, #144]	@ (8009370 <HAL_TIM_MspPostInit+0xc4>)
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	2201      	movs	r2, #1
 80092e2:	4013      	ands	r3, r2
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80092e8:	0021      	movs	r1, r4
 80092ea:	187b      	adds	r3, r7, r1
 80092ec:	220d      	movs	r2, #13
 80092ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092f0:	187b      	adds	r3, r7, r1
 80092f2:	2202      	movs	r2, #2
 80092f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092f6:	187b      	adds	r3, r7, r1
 80092f8:	2200      	movs	r2, #0
 80092fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092fc:	187b      	adds	r3, r7, r1
 80092fe:	2200      	movs	r2, #0
 8009300:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8009302:	187b      	adds	r3, r7, r1
 8009304:	2202      	movs	r2, #2
 8009306:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009308:	187a      	adds	r2, r7, r1
 800930a:	23a0      	movs	r3, #160	@ 0xa0
 800930c:	05db      	lsls	r3, r3, #23
 800930e:	0011      	movs	r1, r2
 8009310:	0018      	movs	r0, r3
 8009312:	f001 fefb 	bl	800b10c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009316:	e027      	b.n	8009368 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a15      	ldr	r2, [pc, #84]	@ (8009374 <HAL_TIM_MspPostInit+0xc8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d122      	bne.n	8009368 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009322:	4b13      	ldr	r3, [pc, #76]	@ (8009370 <HAL_TIM_MspPostInit+0xc4>)
 8009324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009326:	4b12      	ldr	r3, [pc, #72]	@ (8009370 <HAL_TIM_MspPostInit+0xc4>)
 8009328:	2104      	movs	r1, #4
 800932a:	430a      	orrs	r2, r1
 800932c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800932e:	4b10      	ldr	r3, [pc, #64]	@ (8009370 <HAL_TIM_MspPostInit+0xc4>)
 8009330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009332:	2204      	movs	r2, #4
 8009334:	4013      	ands	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800933a:	2114      	movs	r1, #20
 800933c:	187b      	adds	r3, r7, r1
 800933e:	22e0      	movs	r2, #224	@ 0xe0
 8009340:	0052      	lsls	r2, r2, #1
 8009342:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009344:	187b      	adds	r3, r7, r1
 8009346:	2202      	movs	r2, #2
 8009348:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800934a:	187b      	adds	r3, r7, r1
 800934c:	2200      	movs	r2, #0
 800934e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009350:	187b      	adds	r3, r7, r1
 8009352:	2200      	movs	r2, #0
 8009354:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009356:	187b      	adds	r3, r7, r1
 8009358:	2202      	movs	r2, #2
 800935a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800935c:	187b      	adds	r3, r7, r1
 800935e:	4a06      	ldr	r2, [pc, #24]	@ (8009378 <HAL_TIM_MspPostInit+0xcc>)
 8009360:	0019      	movs	r1, r3
 8009362:	0010      	movs	r0, r2
 8009364:	f001 fed2 	bl	800b10c <HAL_GPIO_Init>
}
 8009368:	46c0      	nop			@ (mov r8, r8)
 800936a:	46bd      	mov	sp, r7
 800936c:	b00b      	add	sp, #44	@ 0x2c
 800936e:	bd90      	pop	{r4, r7, pc}
 8009370:	40021000 	.word	0x40021000
 8009374:	40000400 	.word	0x40000400
 8009378:	50000800 	.word	0x50000800

0800937c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009380:	4b17      	ldr	r3, [pc, #92]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 8009382:	4a18      	ldr	r2, [pc, #96]	@ (80093e4 <MX_LPUART1_UART_Init+0x68>)
 8009384:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8009386:	4b16      	ldr	r3, [pc, #88]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 8009388:	22e1      	movs	r2, #225	@ 0xe1
 800938a:	0252      	lsls	r2, r2, #9
 800938c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800938e:	4b14      	ldr	r3, [pc, #80]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 8009390:	2200      	movs	r2, #0
 8009392:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009394:	4b12      	ldr	r3, [pc, #72]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 8009396:	2200      	movs	r2, #0
 8009398:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800939a:	4b11      	ldr	r3, [pc, #68]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 800939c:	2200      	movs	r2, #0
 800939e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80093a0:	4b0f      	ldr	r3, [pc, #60]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 80093a2:	220c      	movs	r2, #12
 80093a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80093a6:	4b0e      	ldr	r3, [pc, #56]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80093ac:	4b0c      	ldr	r3, [pc, #48]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80093b2:	4b0b      	ldr	r3, [pc, #44]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 80093b4:	2218      	movs	r2, #24
 80093b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80093b8:	4b09      	ldr	r3, [pc, #36]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 80093ba:	2280      	movs	r2, #128	@ 0x80
 80093bc:	0212      	lsls	r2, r2, #8
 80093be:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80093c0:	4b07      	ldr	r3, [pc, #28]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 80093c2:	2280      	movs	r2, #128	@ 0x80
 80093c4:	0152      	lsls	r2, r2, #5
 80093c6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80093c8:	4b05      	ldr	r3, [pc, #20]	@ (80093e0 <MX_LPUART1_UART_Init+0x64>)
 80093ca:	0018      	movs	r0, r3
 80093cc:	f007 ffc4 	bl	8011358 <HAL_UART_Init>
 80093d0:	1e03      	subs	r3, r0, #0
 80093d2:	d001      	beq.n	80093d8 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 80093d4:	f7fc ffd8 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80093d8:	46c0      	nop			@ (mov r8, r8)
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	46c0      	nop			@ (mov r8, r8)
 80093e0:	20002a34 	.word	0x20002a34
 80093e4:	40004800 	.word	0x40004800

080093e8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80093ec:	4b16      	ldr	r3, [pc, #88]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 80093ee:	4a17      	ldr	r2, [pc, #92]	@ (800944c <MX_USART1_UART_Init+0x64>)
 80093f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80093f2:	4b15      	ldr	r3, [pc, #84]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 80093f4:	22e1      	movs	r2, #225	@ 0xe1
 80093f6:	0252      	lsls	r2, r2, #9
 80093f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80093fa:	4b13      	ldr	r3, [pc, #76]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009400:	4b11      	ldr	r3, [pc, #68]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 8009402:	2200      	movs	r2, #0
 8009404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009406:	4b10      	ldr	r3, [pc, #64]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 8009408:	2200      	movs	r2, #0
 800940a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800940c:	4b0e      	ldr	r3, [pc, #56]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 800940e:	220c      	movs	r2, #12
 8009410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009412:	4b0d      	ldr	r3, [pc, #52]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 8009414:	2200      	movs	r2, #0
 8009416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009418:	4b0b      	ldr	r3, [pc, #44]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 800941a:	2200      	movs	r2, #0
 800941c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800941e:	4b0a      	ldr	r3, [pc, #40]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 8009420:	2200      	movs	r2, #0
 8009422:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8009424:	4b08      	ldr	r3, [pc, #32]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 8009426:	2208      	movs	r2, #8
 8009428:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800942a:	4b07      	ldr	r3, [pc, #28]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 800942c:	2280      	movs	r2, #128	@ 0x80
 800942e:	0212      	lsls	r2, r2, #8
 8009430:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009432:	4b05      	ldr	r3, [pc, #20]	@ (8009448 <MX_USART1_UART_Init+0x60>)
 8009434:	0018      	movs	r0, r3
 8009436:	f007 ff8f 	bl	8011358 <HAL_UART_Init>
 800943a:	1e03      	subs	r3, r0, #0
 800943c:	d001      	beq.n	8009442 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800943e:	f7fc ffa3 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009442:	46c0      	nop			@ (mov r8, r8)
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20002aec 	.word	0x20002aec
 800944c:	40013800 	.word	0x40013800

08009450 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8009454:	4b14      	ldr	r3, [pc, #80]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 8009456:	4a15      	ldr	r2, [pc, #84]	@ (80094ac <MX_USART4_UART_Init+0x5c>)
 8009458:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800945a:	4b13      	ldr	r3, [pc, #76]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 800945c:	22e1      	movs	r2, #225	@ 0xe1
 800945e:	0252      	lsls	r2, r2, #9
 8009460:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009462:	4b11      	ldr	r3, [pc, #68]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 8009464:	2200      	movs	r2, #0
 8009466:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009468:	4b0f      	ldr	r3, [pc, #60]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 800946a:	2200      	movs	r2, #0
 800946c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800946e:	4b0e      	ldr	r3, [pc, #56]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 8009470:	2200      	movs	r2, #0
 8009472:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009474:	4b0c      	ldr	r3, [pc, #48]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 8009476:	220c      	movs	r2, #12
 8009478:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800947a:	4b0b      	ldr	r3, [pc, #44]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 800947c:	2200      	movs	r2, #0
 800947e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009480:	4b09      	ldr	r3, [pc, #36]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 8009482:	2200      	movs	r2, #0
 8009484:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009486:	4b08      	ldr	r3, [pc, #32]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 8009488:	2200      	movs	r2, #0
 800948a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800948c:	4b06      	ldr	r3, [pc, #24]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 800948e:	2200      	movs	r2, #0
 8009490:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009492:	4b05      	ldr	r3, [pc, #20]	@ (80094a8 <MX_USART4_UART_Init+0x58>)
 8009494:	0018      	movs	r0, r3
 8009496:	f007 ff5f 	bl	8011358 <HAL_UART_Init>
 800949a:	1e03      	subs	r3, r0, #0
 800949c:	d001      	beq.n	80094a2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800949e:	f7fc ff73 	bl	8006388 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80094a2:	46c0      	nop			@ (mov r8, r8)
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20002ba4 	.word	0x20002ba4
 80094ac:	40004c00 	.word	0x40004c00

080094b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80094b0:	b590      	push	{r4, r7, lr}
 80094b2:	b08d      	sub	sp, #52	@ 0x34
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094b8:	241c      	movs	r4, #28
 80094ba:	193b      	adds	r3, r7, r4
 80094bc:	0018      	movs	r0, r3
 80094be:	2314      	movs	r3, #20
 80094c0:	001a      	movs	r2, r3
 80094c2:	2100      	movs	r1, #0
 80094c4:	f00e fd6e 	bl	8017fa4 <memset>
  if(uartHandle->Instance==LPUART1)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a87      	ldr	r2, [pc, #540]	@ (80096ec <HAL_UART_MspInit+0x23c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d129      	bne.n	8009526 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80094d2:	4b87      	ldr	r3, [pc, #540]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80094d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094d6:	4b86      	ldr	r3, [pc, #536]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80094d8:	2180      	movs	r1, #128	@ 0x80
 80094da:	02c9      	lsls	r1, r1, #11
 80094dc:	430a      	orrs	r2, r1
 80094de:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80094e0:	4b83      	ldr	r3, [pc, #524]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80094e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e4:	4b82      	ldr	r3, [pc, #520]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80094e6:	2104      	movs	r1, #4
 80094e8:	430a      	orrs	r2, r1
 80094ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094ec:	4b80      	ldr	r3, [pc, #512]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80094ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f0:	2204      	movs	r2, #4
 80094f2:	4013      	ands	r3, r2
 80094f4:	61bb      	str	r3, [r7, #24]
 80094f6:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80094f8:	0021      	movs	r1, r4
 80094fa:	187b      	adds	r3, r7, r1
 80094fc:	2203      	movs	r2, #3
 80094fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009500:	187b      	adds	r3, r7, r1
 8009502:	2202      	movs	r2, #2
 8009504:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009506:	187b      	adds	r3, r7, r1
 8009508:	2200      	movs	r2, #0
 800950a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800950c:	187b      	adds	r3, r7, r1
 800950e:	2203      	movs	r2, #3
 8009510:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8009512:	187b      	adds	r3, r7, r1
 8009514:	2206      	movs	r2, #6
 8009516:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009518:	187b      	adds	r3, r7, r1
 800951a:	4a76      	ldr	r2, [pc, #472]	@ (80096f4 <HAL_UART_MspInit+0x244>)
 800951c:	0019      	movs	r1, r3
 800951e:	0010      	movs	r0, r2
 8009520:	f001 fdf4 	bl	800b10c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8009524:	e0dd      	b.n	80096e2 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a73      	ldr	r2, [pc, #460]	@ (80096f8 <HAL_UART_MspInit+0x248>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d12b      	bne.n	8009588 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8009530:	4b6f      	ldr	r3, [pc, #444]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 8009532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009534:	4b6e      	ldr	r3, [pc, #440]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 8009536:	2180      	movs	r1, #128	@ 0x80
 8009538:	01c9      	lsls	r1, r1, #7
 800953a:	430a      	orrs	r2, r1
 800953c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800953e:	4b6c      	ldr	r3, [pc, #432]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 8009540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009542:	4b6b      	ldr	r3, [pc, #428]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 8009544:	2101      	movs	r1, #1
 8009546:	430a      	orrs	r2, r1
 8009548:	62da      	str	r2, [r3, #44]	@ 0x2c
 800954a:	4b69      	ldr	r3, [pc, #420]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 800954c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954e:	2201      	movs	r2, #1
 8009550:	4013      	ands	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009556:	211c      	movs	r1, #28
 8009558:	187b      	adds	r3, r7, r1
 800955a:	22c0      	movs	r2, #192	@ 0xc0
 800955c:	00d2      	lsls	r2, r2, #3
 800955e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009560:	187b      	adds	r3, r7, r1
 8009562:	2202      	movs	r2, #2
 8009564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009566:	187b      	adds	r3, r7, r1
 8009568:	2200      	movs	r2, #0
 800956a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800956c:	187b      	adds	r3, r7, r1
 800956e:	2203      	movs	r2, #3
 8009570:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8009572:	187b      	adds	r3, r7, r1
 8009574:	2204      	movs	r2, #4
 8009576:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009578:	187a      	adds	r2, r7, r1
 800957a:	23a0      	movs	r3, #160	@ 0xa0
 800957c:	05db      	lsls	r3, r3, #23
 800957e:	0011      	movs	r1, r2
 8009580:	0018      	movs	r0, r3
 8009582:	f001 fdc3 	bl	800b10c <HAL_GPIO_Init>
}
 8009586:	e0ac      	b.n	80096e2 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a5b      	ldr	r2, [pc, #364]	@ (80096fc <HAL_UART_MspInit+0x24c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d000      	beq.n	8009594 <HAL_UART_MspInit+0xe4>
 8009592:	e0a6      	b.n	80096e2 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 8009594:	4b56      	ldr	r3, [pc, #344]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 8009596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009598:	4b55      	ldr	r3, [pc, #340]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 800959a:	2180      	movs	r1, #128	@ 0x80
 800959c:	0309      	lsls	r1, r1, #12
 800959e:	430a      	orrs	r2, r1
 80095a0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095a2:	4b53      	ldr	r3, [pc, #332]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80095a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a6:	4b52      	ldr	r3, [pc, #328]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80095a8:	2101      	movs	r1, #1
 80095aa:	430a      	orrs	r2, r1
 80095ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80095ae:	4b50      	ldr	r3, [pc, #320]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80095b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b2:	2201      	movs	r2, #1
 80095b4:	4013      	ands	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]
 80095b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80095ba:	4b4d      	ldr	r3, [pc, #308]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80095bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095be:	4b4c      	ldr	r3, [pc, #304]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80095c0:	2104      	movs	r1, #4
 80095c2:	430a      	orrs	r2, r1
 80095c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80095c6:	4b4a      	ldr	r3, [pc, #296]	@ (80096f0 <HAL_UART_MspInit+0x240>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ca:	2204      	movs	r2, #4
 80095cc:	4013      	ands	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]
 80095d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80095d2:	241c      	movs	r4, #28
 80095d4:	193b      	adds	r3, r7, r4
 80095d6:	2202      	movs	r2, #2
 80095d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095da:	193b      	adds	r3, r7, r4
 80095dc:	2202      	movs	r2, #2
 80095de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095e0:	193b      	adds	r3, r7, r4
 80095e2:	2200      	movs	r2, #0
 80095e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095e6:	193b      	adds	r3, r7, r4
 80095e8:	2203      	movs	r2, #3
 80095ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80095ec:	193b      	adds	r3, r7, r4
 80095ee:	2206      	movs	r2, #6
 80095f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095f2:	193a      	adds	r2, r7, r4
 80095f4:	23a0      	movs	r3, #160	@ 0xa0
 80095f6:	05db      	lsls	r3, r3, #23
 80095f8:	0011      	movs	r1, r2
 80095fa:	0018      	movs	r0, r3
 80095fc:	f001 fd86 	bl	800b10c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009600:	0021      	movs	r1, r4
 8009602:	187b      	adds	r3, r7, r1
 8009604:	2280      	movs	r2, #128	@ 0x80
 8009606:	00d2      	lsls	r2, r2, #3
 8009608:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800960a:	187b      	adds	r3, r7, r1
 800960c:	2202      	movs	r2, #2
 800960e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009610:	187b      	adds	r3, r7, r1
 8009612:	2200      	movs	r2, #0
 8009614:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009616:	187b      	adds	r3, r7, r1
 8009618:	2203      	movs	r2, #3
 800961a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800961c:	187b      	adds	r3, r7, r1
 800961e:	2206      	movs	r2, #6
 8009620:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009622:	187b      	adds	r3, r7, r1
 8009624:	4a33      	ldr	r2, [pc, #204]	@ (80096f4 <HAL_UART_MspInit+0x244>)
 8009626:	0019      	movs	r1, r3
 8009628:	0010      	movs	r0, r2
 800962a:	f001 fd6f 	bl	800b10c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800962e:	4b34      	ldr	r3, [pc, #208]	@ (8009700 <HAL_UART_MspInit+0x250>)
 8009630:	4a34      	ldr	r2, [pc, #208]	@ (8009704 <HAL_UART_MspInit+0x254>)
 8009632:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8009634:	4b32      	ldr	r3, [pc, #200]	@ (8009700 <HAL_UART_MspInit+0x250>)
 8009636:	220c      	movs	r2, #12
 8009638:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800963a:	4b31      	ldr	r3, [pc, #196]	@ (8009700 <HAL_UART_MspInit+0x250>)
 800963c:	2200      	movs	r2, #0
 800963e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009640:	4b2f      	ldr	r3, [pc, #188]	@ (8009700 <HAL_UART_MspInit+0x250>)
 8009642:	2200      	movs	r2, #0
 8009644:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009646:	4b2e      	ldr	r3, [pc, #184]	@ (8009700 <HAL_UART_MspInit+0x250>)
 8009648:	2280      	movs	r2, #128	@ 0x80
 800964a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800964c:	4b2c      	ldr	r3, [pc, #176]	@ (8009700 <HAL_UART_MspInit+0x250>)
 800964e:	2200      	movs	r2, #0
 8009650:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009652:	4b2b      	ldr	r3, [pc, #172]	@ (8009700 <HAL_UART_MspInit+0x250>)
 8009654:	2200      	movs	r2, #0
 8009656:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8009658:	4b29      	ldr	r3, [pc, #164]	@ (8009700 <HAL_UART_MspInit+0x250>)
 800965a:	2220      	movs	r2, #32
 800965c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800965e:	4b28      	ldr	r3, [pc, #160]	@ (8009700 <HAL_UART_MspInit+0x250>)
 8009660:	2200      	movs	r2, #0
 8009662:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8009664:	4b26      	ldr	r3, [pc, #152]	@ (8009700 <HAL_UART_MspInit+0x250>)
 8009666:	0018      	movs	r0, r3
 8009668:	f001 f8d6 	bl	800a818 <HAL_DMA_Init>
 800966c:	1e03      	subs	r3, r0, #0
 800966e:	d001      	beq.n	8009674 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8009670:	f7fc fe8a 	bl	8006388 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a22      	ldr	r2, [pc, #136]	@ (8009700 <HAL_UART_MspInit+0x250>)
 8009678:	675a      	str	r2, [r3, #116]	@ 0x74
 800967a:	4b21      	ldr	r3, [pc, #132]	@ (8009700 <HAL_UART_MspInit+0x250>)
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8009680:	4b21      	ldr	r3, [pc, #132]	@ (8009708 <HAL_UART_MspInit+0x258>)
 8009682:	4a22      	ldr	r2, [pc, #136]	@ (800970c <HAL_UART_MspInit+0x25c>)
 8009684:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8009686:	4b20      	ldr	r3, [pc, #128]	@ (8009708 <HAL_UART_MspInit+0x258>)
 8009688:	220c      	movs	r2, #12
 800968a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800968c:	4b1e      	ldr	r3, [pc, #120]	@ (8009708 <HAL_UART_MspInit+0x258>)
 800968e:	2210      	movs	r2, #16
 8009690:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009692:	4b1d      	ldr	r3, [pc, #116]	@ (8009708 <HAL_UART_MspInit+0x258>)
 8009694:	2200      	movs	r2, #0
 8009696:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009698:	4b1b      	ldr	r3, [pc, #108]	@ (8009708 <HAL_UART_MspInit+0x258>)
 800969a:	2280      	movs	r2, #128	@ 0x80
 800969c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800969e:	4b1a      	ldr	r3, [pc, #104]	@ (8009708 <HAL_UART_MspInit+0x258>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80096a4:	4b18      	ldr	r3, [pc, #96]	@ (8009708 <HAL_UART_MspInit+0x258>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80096aa:	4b17      	ldr	r3, [pc, #92]	@ (8009708 <HAL_UART_MspInit+0x258>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80096b0:	4b15      	ldr	r3, [pc, #84]	@ (8009708 <HAL_UART_MspInit+0x258>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80096b6:	4b14      	ldr	r3, [pc, #80]	@ (8009708 <HAL_UART_MspInit+0x258>)
 80096b8:	0018      	movs	r0, r3
 80096ba:	f001 f8ad 	bl	800a818 <HAL_DMA_Init>
 80096be:	1e03      	subs	r3, r0, #0
 80096c0:	d001      	beq.n	80096c6 <HAL_UART_MspInit+0x216>
      Error_Handler();
 80096c2:	f7fc fe61 	bl	8006388 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a0f      	ldr	r2, [pc, #60]	@ (8009708 <HAL_UART_MspInit+0x258>)
 80096ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80096cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009708 <HAL_UART_MspInit+0x258>)
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80096d2:	2200      	movs	r2, #0
 80096d4:	2100      	movs	r1, #0
 80096d6:	200e      	movs	r0, #14
 80096d8:	f001 f86c 	bl	800a7b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80096dc:	200e      	movs	r0, #14
 80096de:	f001 f87e 	bl	800a7de <HAL_NVIC_EnableIRQ>
}
 80096e2:	46c0      	nop			@ (mov r8, r8)
 80096e4:	46bd      	mov	sp, r7
 80096e6:	b00d      	add	sp, #52	@ 0x34
 80096e8:	bd90      	pop	{r4, r7, pc}
 80096ea:	46c0      	nop			@ (mov r8, r8)
 80096ec:	40004800 	.word	0x40004800
 80096f0:	40021000 	.word	0x40021000
 80096f4:	50000800 	.word	0x50000800
 80096f8:	40013800 	.word	0x40013800
 80096fc:	40004c00 	.word	0x40004c00
 8009700:	20002c5c 	.word	0x20002c5c
 8009704:	4002006c 	.word	0x4002006c
 8009708:	20002ca4 	.word	0x20002ca4
 800970c:	40020080 	.word	0x40020080

08009710 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 50

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8009718:	f000 fbd6 	bl	8009ec8 <HAL_GetTick>
 800971c:	0003      	movs	r3, r0
 800971e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8009720:	4b1c      	ldr	r3, [pc, #112]	@ (8009794 <TimestampIsReached+0x84>)
 8009722:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	429a      	cmp	r2, r3
 800972a:	d307      	bcc.n	800973c <TimestampIsReached+0x2c>
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	429a      	cmp	r2, r3
 8009736:	d901      	bls.n	800973c <TimestampIsReached+0x2c>
 8009738:	2201      	movs	r2, #1
 800973a:	e000      	b.n	800973e <TimestampIsReached+0x2e>
 800973c:	2200      	movs	r2, #0
 800973e:	230f      	movs	r3, #15
 8009740:	18fb      	adds	r3, r7, r3
 8009742:	701a      	strb	r2, [r3, #0]
 8009744:	781a      	ldrb	r2, [r3, #0]
 8009746:	2101      	movs	r1, #1
 8009748:	400a      	ands	r2, r1
 800974a:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d207      	bcs.n	8009764 <TimestampIsReached+0x54>
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	429a      	cmp	r2, r3
 800975e:	d201      	bcs.n	8009764 <TimestampIsReached+0x54>
 8009760:	2201      	movs	r2, #1
 8009762:	e000      	b.n	8009766 <TimestampIsReached+0x56>
 8009764:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8009766:	200e      	movs	r0, #14
 8009768:	183b      	adds	r3, r7, r0
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	781a      	ldrb	r2, [r3, #0]
 800976e:	2101      	movs	r1, #1
 8009770:	400a      	ands	r2, r1
 8009772:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8009774:	230f      	movs	r3, #15
 8009776:	18fb      	adds	r3, r7, r3
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d103      	bne.n	8009786 <TimestampIsReached+0x76>
 800977e:	183b      	adds	r3, r7, r0
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8009786:	2301      	movs	r3, #1
 8009788:	e000      	b.n	800978c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800978a:	2300      	movs	r3, #0
}
 800978c:	0018      	movs	r0, r3
 800978e:	46bd      	mov	sp, r7
 8009790:	b006      	add	sp, #24
 8009792:	bd80      	pop	{r7, pc}
 8009794:	7fffffff 	.word	0x7fffffff

08009798 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80097a0:	f000 fb92 	bl	8009ec8 <HAL_GetTick>
 80097a4:	0002      	movs	r2, r0
 80097a6:	4904      	ldr	r1, [pc, #16]	@ (80097b8 <AddTimestamp+0x20>)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	0018      	movs	r0, r3
 80097ac:	f00e fb56 	bl	8017e5c <siprintf>
}
 80097b0:	46c0      	nop			@ (mov r8, r8)
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b002      	add	sp, #8
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	0801b7a4 	.word	0x0801b7a4

080097bc <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80097bc:	b40c      	push	{r2, r3}
 80097be:	b590      	push	{r4, r7, lr}
 80097c0:	b093      	sub	sp, #76	@ 0x4c
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	0002      	movs	r2, r0
 80097c6:	6039      	str	r1, [r7, #0]
 80097c8:	1dfb      	adds	r3, r7, #7
 80097ca:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80097cc:	4b1f      	ldr	r3, [pc, #124]	@ (800984c <CreateLine+0x90>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	1dfa      	adds	r2, r7, #7
 80097d2:	7812      	ldrb	r2, [r2, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d832      	bhi.n	800983e <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	491d      	ldr	r1, [pc, #116]	@ (8009850 <CreateLine+0x94>)
 80097dc:	2410      	movs	r4, #16
 80097de:	193b      	adds	r3, r7, r4
 80097e0:	0018      	movs	r0, r3
 80097e2:	f00e fb3b 	bl	8017e5c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80097e6:	4b19      	ldr	r3, [pc, #100]	@ (800984c <CreateLine+0x90>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d909      	bls.n	8009802 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80097ee:	193b      	adds	r3, r7, r4
 80097f0:	0018      	movs	r0, r3
 80097f2:	f7f6 fc89 	bl	8000108 <strlen>
 80097f6:	0002      	movs	r2, r0
 80097f8:	193b      	adds	r3, r7, r4
 80097fa:	189b      	adds	r3, r3, r2
 80097fc:	0018      	movs	r0, r3
 80097fe:	f7ff ffcb 	bl	8009798 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8009802:	2410      	movs	r4, #16
 8009804:	193b      	adds	r3, r7, r4
 8009806:	0018      	movs	r0, r3
 8009808:	f7f6 fc7e 	bl	8000108 <strlen>
 800980c:	0003      	movs	r3, r0
 800980e:	647b      	str	r3, [r7, #68]	@ 0x44

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8009810:	2354      	movs	r3, #84	@ 0x54
 8009812:	2208      	movs	r2, #8
 8009814:	189b      	adds	r3, r3, r2
 8009816:	19db      	adds	r3, r3, r7
 8009818:	60fb      	str	r3, [r7, #12]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800981a:	193a      	adds	r2, r7, r4
 800981c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800981e:	18d0      	adds	r0, r2, r3
 8009820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009822:	2232      	movs	r2, #50	@ 0x32
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	0019      	movs	r1, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800982c:	f00e fbae 	bl	8017f8c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8009830:	193a      	adds	r2, r7, r4
 8009832:	4b08      	ldr	r3, [pc, #32]	@ (8009854 <CreateLine+0x98>)
 8009834:	0011      	movs	r1, r2
 8009836:	0018      	movs	r0, r3
 8009838:	f00e fb00 	bl	8017e3c <iprintf>
 800983c:	e000      	b.n	8009840 <CreateLine+0x84>
    return;
 800983e:	46c0      	nop			@ (mov r8, r8)
}
 8009840:	46bd      	mov	sp, r7
 8009842:	b013      	add	sp, #76	@ 0x4c
 8009844:	bc90      	pop	{r4, r7}
 8009846:	bc08      	pop	{r3}
 8009848:	b002      	add	sp, #8
 800984a:	4718      	bx	r3
 800984c:	2000005c 	.word	0x2000005c
 8009850:	0801b7b0 	.word	0x0801b7b0
 8009854:	0801b7b4 	.word	0x0801b7b4

08009858 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	b29a      	uxth	r2, r3
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	4804      	ldr	r0, [pc, #16]	@ (800987c <_write+0x24>)
 800986c:	2364      	movs	r3, #100	@ 0x64
 800986e:	f007 fdd9 	bl	8011424 <HAL_UART_Transmit>
  return count;
 8009872:	687b      	ldr	r3, [r7, #4]
}
 8009874:	0018      	movs	r0, r3
 8009876:	46bd      	mov	sp, r7
 8009878:	b004      	add	sp, #16
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20002aec 	.word	0x20002aec

08009880 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	0002      	movs	r2, r0
 8009888:	1dfb      	adds	r3, r7, #7
 800988a:	701a      	strb	r2, [r3, #0]
 800988c:	4b03      	ldr	r3, [pc, #12]	@ (800989c <SetVerboseLevel+0x1c>)
 800988e:	1dfa      	adds	r2, r7, #7
 8009890:	7812      	ldrb	r2, [r2, #0]
 8009892:	701a      	strb	r2, [r3, #0]
 8009894:	46c0      	nop			@ (mov r8, r8)
 8009896:	46bd      	mov	sp, r7
 8009898:	b002      	add	sp, #8
 800989a:	bd80      	pop	{r7, pc}
 800989c:	2000005c 	.word	0x2000005c

080098a0 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80098a4:	f000 fb10 	bl	8009ec8 <HAL_GetTick>
 80098a8:	0003      	movs	r3, r0
}
 80098aa:	0018      	movs	r0, r3
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 80098b6:	4a0f      	ldr	r2, [pc, #60]	@ (80098f4 <BinaryReleaseInfo+0x44>)
 80098b8:	4b0f      	ldr	r3, [pc, #60]	@ (80098f8 <BinaryReleaseInfo+0x48>)
 80098ba:	0019      	movs	r1, r3
 80098bc:	2002      	movs	r0, #2
 80098be:	f7ff ff7d 	bl	80097bc <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80098c2:	480e      	ldr	r0, [pc, #56]	@ (80098fc <BinaryReleaseInfo+0x4c>)
 80098c4:	4a0e      	ldr	r2, [pc, #56]	@ (8009900 <BinaryReleaseInfo+0x50>)
 80098c6:	490c      	ldr	r1, [pc, #48]	@ (80098f8 <BinaryReleaseInfo+0x48>)
 80098c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009904 <BinaryReleaseInfo+0x54>)
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	0003      	movs	r3, r0
 80098ce:	2002      	movs	r0, #2
 80098d0:	f7ff ff74 	bl	80097bc <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 80098d4:	4a0c      	ldr	r2, [pc, #48]	@ (8009908 <BinaryReleaseInfo+0x58>)
 80098d6:	4b08      	ldr	r3, [pc, #32]	@ (80098f8 <BinaryReleaseInfo+0x48>)
 80098d8:	0019      	movs	r1, r3
 80098da:	2002      	movs	r0, #2
 80098dc:	f7ff ff6e 	bl	80097bc <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 80098e0:	4b0a      	ldr	r3, [pc, #40]	@ (800990c <BinaryReleaseInfo+0x5c>)
 80098e2:	4a0b      	ldr	r2, [pc, #44]	@ (8009910 <BinaryReleaseInfo+0x60>)
 80098e4:	4904      	ldr	r1, [pc, #16]	@ (80098f8 <BinaryReleaseInfo+0x48>)
 80098e6:	2002      	movs	r0, #2
 80098e8:	f7ff ff68 	bl	80097bc <CreateLine>
}
 80098ec:	46c0      	nop			@ (mov r8, r8)
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	46c0      	nop			@ (mov r8, r8)
 80098f4:	0801b7bc 	.word	0x0801b7bc
 80098f8:	0801b7e8 	.word	0x0801b7e8
 80098fc:	0801b7ec 	.word	0x0801b7ec
 8009900:	0801b7f8 	.word	0x0801b7f8
 8009904:	0801b80c 	.word	0x0801b80c
 8009908:	0801b818 	.word	0x0801b818
 800990c:	0801b824 	.word	0x0801b824
 8009910:	0801b82c 	.word	0x0801b82c

08009914 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009914:	b590      	push	{r4, r7, lr}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6039      	str	r1, [r7, #0]
 800991c:	0011      	movs	r1, r2
 800991e:	1dfb      	adds	r3, r7, #7
 8009920:	1c02      	adds	r2, r0, #0
 8009922:	701a      	strb	r2, [r3, #0]
 8009924:	1dbb      	adds	r3, r7, #6
 8009926:	1c0a      	adds	r2, r1, #0
 8009928:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800992a:	4b0a      	ldr	r3, [pc, #40]	@ (8009954 <ReadRegister+0x40>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8009932:	4b08      	ldr	r3, [pc, #32]	@ (8009954 <ReadRegister+0x40>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	1dba      	adds	r2, r7, #6
 8009938:	7814      	ldrb	r4, [r2, #0]
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	1dfa      	adds	r2, r7, #7
 800993e:	7810      	ldrb	r0, [r2, #0]
 8009940:	0022      	movs	r2, r4
 8009942:	4798      	blx	r3
 8009944:	0003      	movs	r3, r0
 8009946:	e000      	b.n	800994a <ReadRegister+0x36>
	}
	return false;
 8009948:	2300      	movs	r3, #0
}
 800994a:	0018      	movs	r0, r3
 800994c:	46bd      	mov	sp, r7
 800994e:	b003      	add	sp, #12
 8009950:	bd90      	pop	{r4, r7, pc}
 8009952:	46c0      	nop			@ (mov r8, r8)
 8009954:	20002cec 	.word	0x20002cec

08009958 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009958:	b590      	push	{r4, r7, lr}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6039      	str	r1, [r7, #0]
 8009960:	0011      	movs	r1, r2
 8009962:	1dfb      	adds	r3, r7, #7
 8009964:	1c02      	adds	r2, r0, #0
 8009966:	701a      	strb	r2, [r3, #0]
 8009968:	1dbb      	adds	r3, r7, #6
 800996a:	1c0a      	adds	r2, r1, #0
 800996c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800996e:	4b0a      	ldr	r3, [pc, #40]	@ (8009998 <WriteRegister+0x40>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8009976:	4b08      	ldr	r3, [pc, #32]	@ (8009998 <WriteRegister+0x40>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	1dba      	adds	r2, r7, #6
 800997c:	7814      	ldrb	r4, [r2, #0]
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	1dfa      	adds	r2, r7, #7
 8009982:	7810      	ldrb	r0, [r2, #0]
 8009984:	0022      	movs	r2, r4
 8009986:	4798      	blx	r3
 8009988:	0003      	movs	r3, r0
 800998a:	e000      	b.n	800998e <WriteRegister+0x36>
  }
  return false;
 800998c:	2300      	movs	r3, #0
}
 800998e:	0018      	movs	r0, r3
 8009990:	46bd      	mov	sp, r7
 8009992:	b003      	add	sp, #12
 8009994:	bd90      	pop	{r4, r7, pc}
 8009996:	46c0      	nop			@ (mov r8, r8)
 8009998:	20002cf0 	.word	0x20002cf0

0800999c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	000a      	movs	r2, r1
 80099a6:	1cfb      	adds	r3, r7, #3
 80099a8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80099aa:	230f      	movs	r3, #15
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	22ff      	movs	r2, #255	@ 0xff
 80099b0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80099b2:	230e      	movs	r3, #14
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	2200      	movs	r2, #0
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	e037      	b.n	8009a2c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80099bc:	230e      	movs	r3, #14
 80099be:	18fb      	adds	r3, r7, r3
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	18d3      	adds	r3, r2, r3
 80099c6:	7819      	ldrb	r1, [r3, #0]
 80099c8:	220f      	movs	r2, #15
 80099ca:	18bb      	adds	r3, r7, r2
 80099cc:	18ba      	adds	r2, r7, r2
 80099ce:	7812      	ldrb	r2, [r2, #0]
 80099d0:	404a      	eors	r2, r1
 80099d2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80099d4:	230d      	movs	r3, #13
 80099d6:	18fb      	adds	r3, r7, r3
 80099d8:	2200      	movs	r2, #0
 80099da:	701a      	strb	r2, [r3, #0]
 80099dc:	e01b      	b.n	8009a16 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80099de:	210f      	movs	r1, #15
 80099e0:	187b      	adds	r3, r7, r1
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	b25b      	sxtb	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	da09      	bge.n	80099fe <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80099ea:	187b      	adds	r3, r7, r1
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	b25b      	sxtb	r3, r3
 80099f2:	2231      	movs	r2, #49	@ 0x31
 80099f4:	4053      	eors	r3, r2
 80099f6:	b25a      	sxtb	r2, r3
 80099f8:	187b      	adds	r3, r7, r1
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	e005      	b.n	8009a0a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80099fe:	230f      	movs	r3, #15
 8009a00:	18fa      	adds	r2, r7, r3
 8009a02:	18fb      	adds	r3, r7, r3
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	18db      	adds	r3, r3, r3
 8009a08:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009a0a:	210d      	movs	r1, #13
 8009a0c:	187b      	adds	r3, r7, r1
 8009a0e:	781a      	ldrb	r2, [r3, #0]
 8009a10:	187b      	adds	r3, r7, r1
 8009a12:	3201      	adds	r2, #1
 8009a14:	701a      	strb	r2, [r3, #0]
 8009a16:	230d      	movs	r3, #13
 8009a18:	18fb      	adds	r3, r7, r3
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b07      	cmp	r3, #7
 8009a1e:	d9de      	bls.n	80099de <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009a20:	210e      	movs	r1, #14
 8009a22:	187b      	adds	r3, r7, r1
 8009a24:	781a      	ldrb	r2, [r3, #0]
 8009a26:	187b      	adds	r3, r7, r1
 8009a28:	3201      	adds	r2, #1
 8009a2a:	701a      	strb	r2, [r3, #0]
 8009a2c:	230e      	movs	r3, #14
 8009a2e:	18fa      	adds	r2, r7, r3
 8009a30:	1cfb      	adds	r3, r7, #3
 8009a32:	7812      	ldrb	r2, [r2, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d3c0      	bcc.n	80099bc <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8009a3a:	230f      	movs	r3, #15
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	781b      	ldrb	r3, [r3, #0]
}
 8009a40:	0018      	movs	r0, r3
 8009a42:	46bd      	mov	sp, r7
 8009a44:	b004      	add	sp, #16
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8009a52:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <HIDS_Init+0x34>)
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8009a58:	4b09      	ldr	r3, [pc, #36]	@ (8009a80 <HIDS_Init+0x38>)
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8009a5e:	4b09      	ldr	r3, [pc, #36]	@ (8009a84 <HIDS_Init+0x3c>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	0018      	movs	r0, r3
 8009a64:	f000 f8d0 	bl	8009c08 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8009a68:	4b07      	ldr	r3, [pc, #28]	@ (8009a88 <HIDS_Init+0x40>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f000 f82b 	bl	8009ac8 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8009a72:	46c0      	nop			@ (mov r8, r8)
 8009a74:	46bd      	mov	sp, r7
 8009a76:	b002      	add	sp, #8
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	46c0      	nop			@ (mov r8, r8)
 8009a7c:	20002cec 	.word	0x20002cec
 8009a80:	20002cf0 	.word	0x20002cf0
 8009a84:	2000005e 	.word	0x2000005e
 8009a88:	2000005d 	.word	0x2000005d

08009a8c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8009a90:	f7ff ff06 	bl	80098a0 <GetCurrentHalTicks>
 8009a94:	0002      	movs	r2, r0
 8009a96:	4b08      	ldr	r3, [pc, #32]	@ (8009ab8 <HIDS_StartMeasurement+0x2c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	18d2      	adds	r2, r2, r3
 8009a9c:	4b07      	ldr	r3, [pc, #28]	@ (8009abc <HIDS_StartMeasurement+0x30>)
 8009a9e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8009aa0:	4b07      	ldr	r3, [pc, #28]	@ (8009ac0 <HIDS_StartMeasurement+0x34>)
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	0019      	movs	r1, r3
 8009aa6:	2044      	movs	r0, #68	@ 0x44
 8009aa8:	f7ff ff56 	bl	8009958 <WriteRegister>
  MeasurementDone = false;
 8009aac:	4b05      	ldr	r3, [pc, #20]	@ (8009ac4 <HIDS_StartMeasurement+0x38>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
}
 8009ab2:	46c0      	nop			@ (mov r8, r8)
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	20000064 	.word	0x20000064
 8009abc:	20000060 	.word	0x20000060
 8009ac0:	2000005e 	.word	0x2000005e
 8009ac4:	20002d02 	.word	0x20002d02

08009ac8 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	0002      	movs	r2, r0
 8009ad0:	1dfb      	adds	r3, r7, #7
 8009ad2:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8009ad4:	4b03      	ldr	r3, [pc, #12]	@ (8009ae4 <HIDS_SetHeaterMode+0x1c>)
 8009ad6:	1dfa      	adds	r2, r7, #7
 8009ad8:	7812      	ldrb	r2, [r2, #0]
 8009ada:	701a      	strb	r2, [r3, #0]
}
 8009adc:	46c0      	nop			@ (mov r8, r8)
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	b002      	add	sp, #8
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	2000005d 	.word	0x2000005d

08009ae8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	781a      	ldrb	r2, [r3, #0]
 8009af4:	210c      	movs	r1, #12
 8009af6:	187b      	adds	r3, r7, r1
 8009af8:	701a      	strb	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	785a      	ldrb	r2, [r3, #1]
 8009afe:	187b      	adds	r3, r7, r1
 8009b00:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8009b02:	240f      	movs	r4, #15
 8009b04:	193b      	adds	r3, r7, r4
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	7892      	ldrb	r2, [r2, #2]
 8009b0a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8009b0c:	187b      	adds	r3, r7, r1
 8009b0e:	2102      	movs	r1, #2
 8009b10:	0018      	movs	r0, r3
 8009b12:	f7ff ff43 	bl	800999c <CalculateCRC>
 8009b16:	0003      	movs	r3, r0
 8009b18:	001a      	movs	r2, r3
 8009b1a:	193b      	adds	r3, r7, r4
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d007      	beq.n	8009b32 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8009b22:	4a17      	ldr	r2, [pc, #92]	@ (8009b80 <CheckCRC+0x98>)
 8009b24:	4b17      	ldr	r3, [pc, #92]	@ (8009b84 <CheckCRC+0x9c>)
 8009b26:	0019      	movs	r1, r3
 8009b28:	2001      	movs	r0, #1
 8009b2a:	f7ff fe47 	bl	80097bc <CreateLine>
		return false;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e021      	b.n	8009b76 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	78da      	ldrb	r2, [r3, #3]
 8009b36:	2108      	movs	r1, #8
 8009b38:	187b      	adds	r3, r7, r1
 8009b3a:	701a      	strb	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	791a      	ldrb	r2, [r3, #4]
 8009b40:	187b      	adds	r3, r7, r1
 8009b42:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8009b44:	240e      	movs	r4, #14
 8009b46:	193b      	adds	r3, r7, r4
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	7952      	ldrb	r2, [r2, #5]
 8009b4c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8009b4e:	187b      	adds	r3, r7, r1
 8009b50:	2102      	movs	r1, #2
 8009b52:	0018      	movs	r0, r3
 8009b54:	f7ff ff22 	bl	800999c <CalculateCRC>
 8009b58:	0003      	movs	r3, r0
 8009b5a:	001a      	movs	r2, r3
 8009b5c:	193b      	adds	r3, r7, r4
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d007      	beq.n	8009b74 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8009b64:	4a08      	ldr	r2, [pc, #32]	@ (8009b88 <CheckCRC+0xa0>)
 8009b66:	4b07      	ldr	r3, [pc, #28]	@ (8009b84 <CheckCRC+0x9c>)
 8009b68:	0019      	movs	r1, r3
 8009b6a:	2001      	movs	r0, #1
 8009b6c:	f7ff fe26 	bl	80097bc <CreateLine>
		return false;
 8009b70:	2300      	movs	r3, #0
 8009b72:	e000      	b.n	8009b76 <CheckCRC+0x8e>
	}
	return true;
 8009b74:	2301      	movs	r3, #1
}
 8009b76:	0018      	movs	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	b005      	add	sp, #20
 8009b7c:	bd90      	pop	{r4, r7, pc}
 8009b7e:	46c0      	nop			@ (mov r8, r8)
 8009b80:	0801b868 	.word	0x0801b868
 8009b84:	0801b890 	.word	0x0801b890
 8009b88:	0801b894 	.word	0x0801b894

08009b8c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8009b92:	1dbb      	adds	r3, r7, #6
 8009b94:	2289      	movs	r2, #137	@ 0x89
 8009b96:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8009b98:	1dbb      	adds	r3, r7, #6
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	0019      	movs	r1, r3
 8009b9e:	2044      	movs	r0, #68	@ 0x44
 8009ba0:	f7ff feda 	bl	8009958 <WriteRegister>
	HAL_Delay(30);
 8009ba4:	201e      	movs	r0, #30
 8009ba6:	f000 f999 	bl	8009edc <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8009baa:	4b14      	ldr	r3, [pc, #80]	@ (8009bfc <HIDS_DeviceConnected+0x70>)
 8009bac:	2206      	movs	r2, #6
 8009bae:	0019      	movs	r1, r3
 8009bb0:	2044      	movs	r0, #68	@ 0x44
 8009bb2:	f7ff feaf 	bl	8009914 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009bb6:	1dfb      	adds	r3, r7, #7
 8009bb8:	2200      	movs	r2, #0
 8009bba:	701a      	strb	r2, [r3, #0]
 8009bbc:	e011      	b.n	8009be2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8009bbe:	1dfb      	adds	r3, r7, #7
 8009bc0:	7818      	ldrb	r0, [r3, #0]
 8009bc2:	1dfb      	adds	r3, r7, #7
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8009bfc <HIDS_DeviceConnected+0x70>)
 8009bc8:	5cd3      	ldrb	r3, [r2, r3]
 8009bca:	4a0d      	ldr	r2, [pc, #52]	@ (8009c00 <HIDS_DeviceConnected+0x74>)
 8009bcc:	490d      	ldr	r1, [pc, #52]	@ (8009c04 <HIDS_DeviceConnected+0x78>)
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	0003      	movs	r3, r0
 8009bd2:	2002      	movs	r0, #2
 8009bd4:	f7ff fdf2 	bl	80097bc <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009bd8:	1dfb      	adds	r3, r7, #7
 8009bda:	781a      	ldrb	r2, [r3, #0]
 8009bdc:	1dfb      	adds	r3, r7, #7
 8009bde:	3201      	adds	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	1dfb      	adds	r3, r7, #7
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2b05      	cmp	r3, #5
 8009be8:	d9e9      	bls.n	8009bbe <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8009bea:	4b04      	ldr	r3, [pc, #16]	@ (8009bfc <HIDS_DeviceConnected+0x70>)
 8009bec:	0018      	movs	r0, r3
 8009bee:	f7ff ff7b 	bl	8009ae8 <CheckCRC>
 8009bf2:	0003      	movs	r3, r0
}
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b002      	add	sp, #8
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20002cf4 	.word	0x20002cf4
 8009c00:	0801b8c0 	.word	0x0801b8c0
 8009c04:	0801b864 	.word	0x0801b864

08009c08 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	0002      	movs	r2, r0
 8009c10:	1dfb      	adds	r3, r7, #7
 8009c12:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8009c14:	4b03      	ldr	r3, [pc, #12]	@ (8009c24 <HIDS_SetMeasurementMode+0x1c>)
 8009c16:	1dfa      	adds	r2, r7, #7
 8009c18:	7812      	ldrb	r2, [r2, #0]
 8009c1a:	701a      	strb	r2, [r3, #0]
}
 8009c1c:	46c0      	nop			@ (mov r8, r8)
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	b002      	add	sp, #8
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	2000005e 	.word	0x2000005e

08009c28 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8009c2c:	4b04      	ldr	r3, [pc, #16]	@ (8009c40 <HIDS_MeasurementReady+0x18>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	0018      	movs	r0, r3
 8009c32:	f7ff fd6d 	bl	8009710 <TimestampIsReached>
 8009c36:	0003      	movs	r3, r0
}
 8009c38:	0018      	movs	r0, r3
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	46c0      	nop			@ (mov r8, r8)
 8009c40:	20000060 	.word	0x20000060

08009c44 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8009c44:	b590      	push	{r4, r7, lr}
 8009c46:	b089      	sub	sp, #36	@ 0x24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8009c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8009d88 <HIDS_GetMeasurementValues+0x144>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <HIDS_GetMeasurementValues+0x16>
 8009c56:	2301      	movs	r3, #1
 8009c58:	e091      	b.n	8009d7e <HIDS_GetMeasurementValues+0x13a>
  if(!HIDS_MeasurementReady()) return false;
 8009c5a:	f7ff ffe5 	bl	8009c28 <HIDS_MeasurementReady>
 8009c5e:	0003      	movs	r3, r0
 8009c60:	001a      	movs	r2, r3
 8009c62:	2301      	movs	r3, #1
 8009c64:	4053      	eors	r3, r2
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <HIDS_GetMeasurementValues+0x2c>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	e086      	b.n	8009d7e <HIDS_GetMeasurementValues+0x13a>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8009c70:	4b46      	ldr	r3, [pc, #280]	@ (8009d8c <HIDS_GetMeasurementValues+0x148>)
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	4b46      	ldr	r3, [pc, #280]	@ (8009d90 <HIDS_GetMeasurementValues+0x14c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	0019      	movs	r1, r3
 8009c7a:	0010      	movs	r0, r2
 8009c7c:	f7f6 fa60 	bl	8000140 <__udivsi3>
 8009c80:	0003      	movs	r3, r0
 8009c82:	61bb      	str	r3, [r7, #24]
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8009c84:	2317      	movs	r3, #23
 8009c86:	18fc      	adds	r4, r7, r3
 8009c88:	4b42      	ldr	r3, [pc, #264]	@ (8009d94 <HIDS_GetMeasurementValues+0x150>)
 8009c8a:	2206      	movs	r2, #6
 8009c8c:	0019      	movs	r1, r3
 8009c8e:	2044      	movs	r0, #68	@ 0x44
 8009c90:	f7ff fe40 	bl	8009914 <ReadRegister>
 8009c94:	0003      	movs	r3, r0
 8009c96:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 8009c98:	4b3e      	ldr	r3, [pc, #248]	@ (8009d94 <HIDS_GetMeasurementValues+0x150>)
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	f7ff ff24 	bl	8009ae8 <CheckCRC>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	001a      	movs	r2, r3
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4053      	eors	r3, r2
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d011      	beq.n	8009cd2 <HIDS_GetMeasurementValues+0x8e>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8009cae:	231f      	movs	r3, #31
 8009cb0:	18fb      	adds	r3, r7, r3
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	701a      	strb	r2, [r3, #0]
 8009cb6:	e005      	b.n	8009cc4 <HIDS_GetMeasurementValues+0x80>
 8009cb8:	211f      	movs	r1, #31
 8009cba:	187b      	adds	r3, r7, r1
 8009cbc:	781a      	ldrb	r2, [r3, #0]
 8009cbe:	187b      	adds	r3, r7, r1
 8009cc0:	3201      	adds	r2, #1
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	231f      	movs	r3, #31
 8009cc6:	18fb      	adds	r3, r7, r3
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	2b05      	cmp	r3, #5
 8009ccc:	d9f4      	bls.n	8009cb8 <HIDS_GetMeasurementValues+0x74>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e055      	b.n	8009d7e <HIDS_GetMeasurementValues+0x13a>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8009cd2:	4b30      	ldr	r3, [pc, #192]	@ (8009d94 <HIDS_GetMeasurementValues+0x150>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	021b      	lsls	r3, r3, #8
 8009cd8:	22af      	movs	r2, #175	@ 0xaf
 8009cda:	4353      	muls	r3, r2
 8009cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8009d94 <HIDS_GetMeasurementValues+0x150>)
 8009cde:	7852      	ldrb	r2, [r2, #1]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f7f9 faea 	bl	80032bc <__aeabi_i2d>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4b2b      	ldr	r3, [pc, #172]	@ (8009d98 <HIDS_GetMeasurementValues+0x154>)
 8009cec:	f7f7 ffe0 	bl	8001cb0 <__aeabi_ddiv>
 8009cf0:	0002      	movs	r2, r0
 8009cf2:	000b      	movs	r3, r1
 8009cf4:	0010      	movs	r0, r2
 8009cf6:	0019      	movs	r1, r3
 8009cf8:	f7f9 fb7a 	bl	80033f0 <__aeabi_d2f>
 8009cfc:	1c03      	adds	r3, r0, #0
 8009cfe:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8009d00:	4926      	ldr	r1, [pc, #152]	@ (8009d9c <HIDS_GetMeasurementValues+0x158>)
 8009d02:	6938      	ldr	r0, [r7, #16]
 8009d04:	f7f7 fa08 	bl	8001118 <__aeabi_fsub>
 8009d08:	1c03      	adds	r3, r0, #0
 8009d0a:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8009d0c:	4b21      	ldr	r3, [pc, #132]	@ (8009d94 <HIDS_GetMeasurementValues+0x150>)
 8009d0e:	78db      	ldrb	r3, [r3, #3]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	4a20      	ldr	r2, [pc, #128]	@ (8009d94 <HIDS_GetMeasurementValues+0x150>)
 8009d14:	7912      	ldrb	r2, [r2, #4]
 8009d16:	431a      	orrs	r2, r3
 8009d18:	0013      	movs	r3, r2
 8009d1a:	015b      	lsls	r3, r3, #5
 8009d1c:	1a9b      	subs	r3, r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	189b      	adds	r3, r3, r2
 8009d22:	0018      	movs	r0, r3
 8009d24:	f7f9 faca 	bl	80032bc <__aeabi_i2d>
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d98 <HIDS_GetMeasurementValues+0x154>)
 8009d2c:	f7f7 ffc0 	bl	8001cb0 <__aeabi_ddiv>
 8009d30:	0002      	movs	r2, r0
 8009d32:	000b      	movs	r3, r1
 8009d34:	0010      	movs	r0, r2
 8009d36:	0019      	movs	r1, r3
 8009d38:	f7f9 fb5a 	bl	80033f0 <__aeabi_d2f>
 8009d3c:	1c03      	adds	r3, r0, #0
 8009d3e:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8009d40:	4917      	ldr	r1, [pc, #92]	@ (8009da0 <HIDS_GetMeasurementValues+0x15c>)
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7f7 f9e8 	bl	8001118 <__aeabi_fsub>
 8009d48:	1c03      	adds	r3, r0, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	0011      	movs	r1, r2
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f7fe fda0 	bl	80088a4 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	1c11      	adds	r1, r2, #0
 8009d6a:	1c18      	adds	r0, r3, #0
 8009d6c:	f7f9 fca8 	bl	80036c0 <ESP_GetHT>

   measurements = 0;
 8009d70:	4b0c      	ldr	r3, [pc, #48]	@ (8009da4 <HIDS_GetMeasurementValues+0x160>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 8009d76:	4b04      	ldr	r3, [pc, #16]	@ (8009d88 <HIDS_GetMeasurementValues+0x144>)
 8009d78:	2201      	movs	r2, #1
 8009d7a:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8009d7c:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8009d7e:	0018      	movs	r0, r3
 8009d80:	46bd      	mov	sp, r7
 8009d82:	b009      	add	sp, #36	@ 0x24
 8009d84:	bd90      	pop	{r4, r7, pc}
 8009d86:	46c0      	nop			@ (mov r8, r8)
 8009d88:	20002d02 	.word	0x20002d02
 8009d8c:	20000068 	.word	0x20000068
 8009d90:	20000064 	.word	0x20000064
 8009d94:	20002cfc 	.word	0x20002cfc
 8009d98:	40efffe0 	.word	0x40efffe0
 8009d9c:	42340000 	.word	0x42340000
 8009da0:	40c00000 	.word	0x40c00000
 8009da4:	20002d04 	.word	0x20002d04

08009da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009da8:	480d      	ldr	r0, [pc, #52]	@ (8009de0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009daa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009dac:	f7ff f962 	bl	8009074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009db0:	480c      	ldr	r0, [pc, #48]	@ (8009de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8009db2:	490d      	ldr	r1, [pc, #52]	@ (8009de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009db4:	4a0d      	ldr	r2, [pc, #52]	@ (8009dec <LoopForever+0xe>)
  movs r3, #0
 8009db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009db8:	e002      	b.n	8009dc0 <LoopCopyDataInit>

08009dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009dbe:	3304      	adds	r3, #4

08009dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009dc4:	d3f9      	bcc.n	8009dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8009df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8009df4 <LoopForever+0x16>)
  movs r3, #0
 8009dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009dcc:	e001      	b.n	8009dd2 <LoopFillZerobss>

08009dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009dd0:	3204      	adds	r2, #4

08009dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009dd4:	d3fb      	bcc.n	8009dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009dd6:	f00e f97d 	bl	80180d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009dda:	f7fc f9e5 	bl	80061a8 <main>

08009dde <LoopForever>:

LoopForever:
    b LoopForever
 8009dde:	e7fe      	b.n	8009dde <LoopForever>
   ldr   r0, =_estack
 8009de0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8009de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009de8:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8009dec:	0801c048 	.word	0x0801c048
  ldr r2, =_sbss
 8009df0:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8009df4:	2000410c 	.word	0x2000410c

08009df8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009df8:	e7fe      	b.n	8009df8 <ADC1_COMP_IRQHandler>
	...

08009dfc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009e02:	1dfb      	adds	r3, r7, #7
 8009e04:	2200      	movs	r2, #0
 8009e06:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009e08:	4b0b      	ldr	r3, [pc, #44]	@ (8009e38 <HAL_Init+0x3c>)
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e38 <HAL_Init+0x3c>)
 8009e0e:	2140      	movs	r1, #64	@ 0x40
 8009e10:	430a      	orrs	r2, r1
 8009e12:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009e14:	2003      	movs	r0, #3
 8009e16:	f000 f811 	bl	8009e3c <HAL_InitTick>
 8009e1a:	1e03      	subs	r3, r0, #0
 8009e1c:	d003      	beq.n	8009e26 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8009e1e:	1dfb      	adds	r3, r7, #7
 8009e20:	2201      	movs	r2, #1
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	e001      	b.n	8009e2a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009e26:	f7fe fffb 	bl	8008e20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009e2a:	1dfb      	adds	r3, r7, #7
 8009e2c:	781b      	ldrb	r3, [r3, #0]
}
 8009e2e:	0018      	movs	r0, r3
 8009e30:	46bd      	mov	sp, r7
 8009e32:	b002      	add	sp, #8
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	46c0      	nop			@ (mov r8, r8)
 8009e38:	40022000 	.word	0x40022000

08009e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e3c:	b590      	push	{r4, r7, lr}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e44:	4b14      	ldr	r3, [pc, #80]	@ (8009e98 <HAL_InitTick+0x5c>)
 8009e46:	681c      	ldr	r4, [r3, #0]
 8009e48:	4b14      	ldr	r3, [pc, #80]	@ (8009e9c <HAL_InitTick+0x60>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	0019      	movs	r1, r3
 8009e4e:	23fa      	movs	r3, #250	@ 0xfa
 8009e50:	0098      	lsls	r0, r3, #2
 8009e52:	f7f6 f975 	bl	8000140 <__udivsi3>
 8009e56:	0003      	movs	r3, r0
 8009e58:	0019      	movs	r1, r3
 8009e5a:	0020      	movs	r0, r4
 8009e5c:	f7f6 f970 	bl	8000140 <__udivsi3>
 8009e60:	0003      	movs	r3, r0
 8009e62:	0018      	movs	r0, r3
 8009e64:	f000 fccb 	bl	800a7fe <HAL_SYSTICK_Config>
 8009e68:	1e03      	subs	r3, r0, #0
 8009e6a:	d001      	beq.n	8009e70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e00f      	b.n	8009e90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d80b      	bhi.n	8009e8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009e76:	6879      	ldr	r1, [r7, #4]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	425b      	negs	r3, r3
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f000 fc98 	bl	800a7b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009e84:	4b06      	ldr	r3, [pc, #24]	@ (8009ea0 <HAL_InitTick+0x64>)
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e000      	b.n	8009e90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
}
 8009e90:	0018      	movs	r0, r3
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b003      	add	sp, #12
 8009e96:	bd90      	pop	{r4, r7, pc}
 8009e98:	20000058 	.word	0x20000058
 8009e9c:	20000070 	.word	0x20000070
 8009ea0:	2000006c 	.word	0x2000006c

08009ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ea8:	4b05      	ldr	r3, [pc, #20]	@ (8009ec0 <HAL_IncTick+0x1c>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	001a      	movs	r2, r3
 8009eae:	4b05      	ldr	r3, [pc, #20]	@ (8009ec4 <HAL_IncTick+0x20>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	18d2      	adds	r2, r2, r3
 8009eb4:	4b03      	ldr	r3, [pc, #12]	@ (8009ec4 <HAL_IncTick+0x20>)
 8009eb6:	601a      	str	r2, [r3, #0]
}
 8009eb8:	46c0      	nop			@ (mov r8, r8)
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	46c0      	nop			@ (mov r8, r8)
 8009ec0:	20000070 	.word	0x20000070
 8009ec4:	20002d08 	.word	0x20002d08

08009ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  return uwTick;
 8009ecc:	4b02      	ldr	r3, [pc, #8]	@ (8009ed8 <HAL_GetTick+0x10>)
 8009ece:	681b      	ldr	r3, [r3, #0]
}
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	46c0      	nop			@ (mov r8, r8)
 8009ed8:	20002d08 	.word	0x20002d08

08009edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ee4:	f7ff fff0 	bl	8009ec8 <HAL_GetTick>
 8009ee8:	0003      	movs	r3, r0
 8009eea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	d005      	beq.n	8009f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8009f20 <HAL_Delay+0x44>)
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	001a      	movs	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	189b      	adds	r3, r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f02:	46c0      	nop			@ (mov r8, r8)
 8009f04:	f7ff ffe0 	bl	8009ec8 <HAL_GetTick>
 8009f08:	0002      	movs	r2, r0
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d8f7      	bhi.n	8009f04 <HAL_Delay+0x28>
  {
  }
}
 8009f14:	46c0      	nop			@ (mov r8, r8)
 8009f16:	46c0      	nop			@ (mov r8, r8)
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	b004      	add	sp, #16
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	46c0      	nop			@ (mov r8, r8)
 8009f20:	20000070 	.word	0x20000070

08009f24 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8009f28:	4b02      	ldr	r3, [pc, #8]	@ (8009f34 <HAL_GetUIDw0+0x10>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
}
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	46c0      	nop			@ (mov r8, r8)
 8009f34:	1ff80050 	.word	0x1ff80050

08009f38 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8009f3c:	4b02      	ldr	r3, [pc, #8]	@ (8009f48 <HAL_GetUIDw1+0x10>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
}
 8009f40:	0018      	movs	r0, r3
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	46c0      	nop			@ (mov r8, r8)
 8009f48:	1ff80054 	.word	0x1ff80054

08009f4c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8009f50:	4b02      	ldr	r3, [pc, #8]	@ (8009f5c <HAL_GetUIDw2+0x10>)
 8009f52:	681b      	ldr	r3, [r3, #0]
}
 8009f54:	0018      	movs	r0, r3
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	46c0      	nop			@ (mov r8, r8)
 8009f5c:	1ff80064 	.word	0x1ff80064

08009f60 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d101      	bne.n	8009f72 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e159      	b.n	800a226 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2250      	movs	r2, #80	@ 0x50
 8009f84:	2100      	movs	r1, #0
 8009f86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f7fb fc50 	bl	8005830 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f94:	2210      	movs	r2, #16
 8009f96:	4013      	ands	r3, r2
 8009f98:	2b10      	cmp	r3, #16
 8009f9a:	d005      	beq.n	8009fa8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009fa6:	d00b      	beq.n	8009fc0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fac:	2210      	movs	r2, #16
 8009fae:	431a      	orrs	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2250      	movs	r2, #80	@ 0x50
 8009fb8:	2100      	movs	r1, #0
 8009fba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e132      	b.n	800a226 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fc4:	4a9a      	ldr	r2, [pc, #616]	@ (800a230 <HAL_ADC_Init+0x2d0>)
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	2202      	movs	r2, #2
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	2203      	movs	r2, #3
 8009fd8:	4013      	ands	r3, r2
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d108      	bne.n	8009ff0 <HAL_ADC_Init+0x90>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d101      	bne.n	8009ff0 <HAL_ADC_Init+0x90>
 8009fec:	2301      	movs	r3, #1
 8009fee:	e000      	b.n	8009ff2 <HAL_ADC_Init+0x92>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d149      	bne.n	800a08a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	23c0      	movs	r3, #192	@ 0xc0
 8009ffc:	061b      	lsls	r3, r3, #24
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d00b      	beq.n	800a01a <HAL_ADC_Init+0xba>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	2380      	movs	r3, #128	@ 0x80
 800a008:	05db      	lsls	r3, r3, #23
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d005      	beq.n	800a01a <HAL_ADC_Init+0xba>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	2380      	movs	r3, #128	@ 0x80
 800a014:	061b      	lsls	r3, r3, #24
 800a016:	429a      	cmp	r2, r3
 800a018:	d111      	bne.n	800a03e <HAL_ADC_Init+0xde>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	691a      	ldr	r2, [r3, #16]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	0092      	lsls	r2, r2, #2
 800a026:	0892      	lsrs	r2, r2, #2
 800a028:	611a      	str	r2, [r3, #16]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6919      	ldr	r1, [r3, #16]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	611a      	str	r2, [r3, #16]
 800a03c:	e014      	b.n	800a068 <HAL_ADC_Init+0x108>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	691a      	ldr	r2, [r3, #16]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	0092      	lsls	r2, r2, #2
 800a04a:	0892      	lsrs	r2, r2, #2
 800a04c:	611a      	str	r2, [r3, #16]
 800a04e:	4b79      	ldr	r3, [pc, #484]	@ (800a234 <HAL_ADC_Init+0x2d4>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b78      	ldr	r3, [pc, #480]	@ (800a234 <HAL_ADC_Init+0x2d4>)
 800a054:	4978      	ldr	r1, [pc, #480]	@ (800a238 <HAL_ADC_Init+0x2d8>)
 800a056:	400a      	ands	r2, r1
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	4b76      	ldr	r3, [pc, #472]	@ (800a234 <HAL_ADC_Init+0x2d4>)
 800a05c:	6819      	ldr	r1, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	4b74      	ldr	r3, [pc, #464]	@ (800a234 <HAL_ADC_Init+0x2d4>)
 800a064:	430a      	orrs	r2, r1
 800a066:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2118      	movs	r1, #24
 800a074:	438a      	bics	r2, r1
 800a076:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68d9      	ldr	r1, [r3, #12]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800a08a:	4b6a      	ldr	r3, [pc, #424]	@ (800a234 <HAL_ADC_Init+0x2d4>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	4b69      	ldr	r3, [pc, #420]	@ (800a234 <HAL_ADC_Init+0x2d4>)
 800a090:	496a      	ldr	r1, [pc, #424]	@ (800a23c <HAL_ADC_Init+0x2dc>)
 800a092:	400a      	ands	r2, r1
 800a094:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800a096:	4b67      	ldr	r3, [pc, #412]	@ (800a234 <HAL_ADC_Init+0x2d4>)
 800a098:	6819      	ldr	r1, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a09e:	065a      	lsls	r2, r3, #25
 800a0a0:	4b64      	ldr	r3, [pc, #400]	@ (800a234 <HAL_ADC_Init+0x2d4>)
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689a      	ldr	r2, [r3, #8]
 800a0ac:	2380      	movs	r3, #128	@ 0x80
 800a0ae:	055b      	lsls	r3, r3, #21
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	d108      	bne.n	800a0c6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2180      	movs	r1, #128	@ 0x80
 800a0c0:	0549      	lsls	r1, r1, #21
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	495b      	ldr	r1, [pc, #364]	@ (800a240 <HAL_ADC_Init+0x2e0>)
 800a0d2:	400a      	ands	r2, r1
 800a0d4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68d9      	ldr	r1, [r3, #12]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d101      	bne.n	800a0ec <HAL_ADC_Init+0x18c>
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	e000      	b.n	800a0ee <HAL_ADC_Init+0x18e>
 800a0ec:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a0ee:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2020      	movs	r0, #32
 800a0f4:	5c1b      	ldrb	r3, [r3, r0]
 800a0f6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a0f8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	202c      	movs	r0, #44	@ 0x2c
 800a0fe:	5c1b      	ldrb	r3, [r3, r0]
 800a100:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a102:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a108:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800a110:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a118:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a126:	23c2      	movs	r3, #194	@ 0xc2
 800a128:	33ff      	adds	r3, #255	@ 0xff
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d00b      	beq.n	800a146 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68d9      	ldr	r1, [r3, #12]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a13c:	431a      	orrs	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2221      	movs	r2, #33	@ 0x21
 800a14a:	5c9b      	ldrb	r3, [r3, r2]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d11a      	bne.n	800a186 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	5c9b      	ldrb	r3, [r3, r2]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d109      	bne.n	800a16e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68da      	ldr	r2, [r3, #12]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2180      	movs	r1, #128	@ 0x80
 800a166:	0249      	lsls	r1, r1, #9
 800a168:	430a      	orrs	r2, r1
 800a16a:	60da      	str	r2, [r3, #12]
 800a16c:	e00b      	b.n	800a186 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a172:	2220      	movs	r2, #32
 800a174:	431a      	orrs	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a17e:	2201      	movs	r2, #1
 800a180:	431a      	orrs	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d11f      	bne.n	800a1ce <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	691a      	ldr	r2, [r3, #16]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	492a      	ldr	r1, [pc, #168]	@ (800a244 <HAL_ADC_Init+0x2e4>)
 800a19a:	400a      	ands	r2, r1
 800a19c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6919      	ldr	r1, [r3, #16]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a1ac:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800a1b2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	691a      	ldr	r2, [r3, #16]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	611a      	str	r2, [r3, #16]
 800a1cc:	e00e      	b.n	800a1ec <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d107      	bne.n	800a1ec <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691a      	ldr	r2, [r3, #16]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	438a      	bics	r2, r1
 800a1ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	695a      	ldr	r2, [r3, #20]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2107      	movs	r1, #7
 800a1f8:	438a      	bics	r2, r1
 800a1fa:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6959      	ldr	r1, [r3, #20]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	430a      	orrs	r2, r1
 800a20c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a218:	2203      	movs	r2, #3
 800a21a:	4393      	bics	r3, r2
 800a21c:	2201      	movs	r2, #1
 800a21e:	431a      	orrs	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	0018      	movs	r0, r3
 800a228:	46bd      	mov	sp, r7
 800a22a:	b002      	add	sp, #8
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	46c0      	nop			@ (mov r8, r8)
 800a230:	fffffefd 	.word	0xfffffefd
 800a234:	40012708 	.word	0x40012708
 800a238:	ffc3ffff 	.word	0xffc3ffff
 800a23c:	fdffffff 	.word	0xfdffffff
 800a240:	fffe0219 	.word	0xfffe0219
 800a244:	fffffc03 	.word	0xfffffc03

0800a248 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a248:	b590      	push	{r4, r7, lr}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a250:	230f      	movs	r3, #15
 800a252:	18fb      	adds	r3, r7, r3
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	2204      	movs	r2, #4
 800a260:	4013      	ands	r3, r2
 800a262:	d138      	bne.n	800a2d6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2250      	movs	r2, #80	@ 0x50
 800a268:	5c9b      	ldrb	r3, [r3, r2]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d101      	bne.n	800a272 <HAL_ADC_Start+0x2a>
 800a26e:	2302      	movs	r3, #2
 800a270:	e038      	b.n	800a2e4 <HAL_ADC_Start+0x9c>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2250      	movs	r2, #80	@ 0x50
 800a276:	2101      	movs	r1, #1
 800a278:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d007      	beq.n	800a292 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800a282:	230f      	movs	r3, #15
 800a284:	18fc      	adds	r4, r7, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	0018      	movs	r0, r3
 800a28a:	f000 f95f 	bl	800a54c <ADC_Enable>
 800a28e:	0003      	movs	r3, r0
 800a290:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a292:	230f      	movs	r3, #15
 800a294:	18fb      	adds	r3, r7, r3
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d120      	bne.n	800a2de <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2a0:	4a12      	ldr	r2, [pc, #72]	@ (800a2ec <HAL_ADC_Start+0xa4>)
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	2280      	movs	r2, #128	@ 0x80
 800a2a6:	0052      	lsls	r2, r2, #1
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2250      	movs	r2, #80	@ 0x50
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	221c      	movs	r2, #28
 800a2c2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2104      	movs	r1, #4
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	609a      	str	r2, [r3, #8]
 800a2d4:	e003      	b.n	800a2de <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a2d6:	230f      	movs	r3, #15
 800a2d8:	18fb      	adds	r3, r7, r3
 800a2da:	2202      	movs	r2, #2
 800a2dc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a2de:	230f      	movs	r3, #15
 800a2e0:	18fb      	adds	r3, r7, r3
 800a2e2:	781b      	ldrb	r3, [r3, #0]
}
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	b005      	add	sp, #20
 800a2ea:	bd90      	pop	{r4, r7, pc}
 800a2ec:	fffff0fe 	.word	0xfffff0fe

0800a2f0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	2b08      	cmp	r3, #8
 800a308:	d102      	bne.n	800a310 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800a30a:	2308      	movs	r3, #8
 800a30c:	60fb      	str	r3, [r7, #12]
 800a30e:	e014      	b.n	800a33a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	2201      	movs	r2, #1
 800a318:	4013      	ands	r3, r2
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d10b      	bne.n	800a336 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a322:	2220      	movs	r2, #32
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2250      	movs	r2, #80	@ 0x50
 800a32e:	2100      	movs	r1, #0
 800a330:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e072      	b.n	800a41c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800a336:	230c      	movs	r3, #12
 800a338:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a33a:	f7ff fdc5 	bl	8009ec8 <HAL_GetTick>
 800a33e:	0003      	movs	r3, r0
 800a340:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a342:	e01f      	b.n	800a384 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	3301      	adds	r3, #1
 800a348:	d01c      	beq.n	800a384 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d007      	beq.n	800a360 <HAL_ADC_PollForConversion+0x70>
 800a350:	f7ff fdba 	bl	8009ec8 <HAL_GetTick>
 800a354:	0002      	movs	r2, r0
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d211      	bcs.n	800a384 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	4013      	ands	r3, r2
 800a36a:	d10b      	bne.n	800a384 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a370:	2204      	movs	r2, #4
 800a372:	431a      	orrs	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2250      	movs	r2, #80	@ 0x50
 800a37c:	2100      	movs	r1, #0
 800a37e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e04b      	b.n	800a41c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	4013      	ands	r3, r2
 800a38e:	d0d9      	beq.n	800a344 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a394:	2280      	movs	r2, #128	@ 0x80
 800a396:	0092      	lsls	r2, r2, #2
 800a398:	431a      	orrs	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68da      	ldr	r2, [r3, #12]
 800a3a4:	23c0      	movs	r3, #192	@ 0xc0
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	d12e      	bne.n	800a40a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d129      	bne.n	800a40a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2208      	movs	r2, #8
 800a3be:	4013      	ands	r3, r2
 800a3c0:	2b08      	cmp	r3, #8
 800a3c2:	d122      	bne.n	800a40a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	2204      	movs	r2, #4
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	d110      	bne.n	800a3f2 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	210c      	movs	r1, #12
 800a3dc:	438a      	bics	r2, r1
 800a3de:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e4:	4a0f      	ldr	r2, [pc, #60]	@ (800a424 <HAL_ADC_PollForConversion+0x134>)
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	655a      	str	r2, [r3, #84]	@ 0x54
 800a3f0:	e00b      	b.n	800a40a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	431a      	orrs	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a402:	2201      	movs	r2, #1
 800a404:	431a      	orrs	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d103      	bne.n	800a41a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	220c      	movs	r2, #12
 800a418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	0018      	movs	r0, r3
 800a41e:	46bd      	mov	sp, r7
 800a420:	b004      	add	sp, #16
 800a422:	bd80      	pop	{r7, pc}
 800a424:	fffffefe 	.word	0xfffffefe

0800a428 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a436:	0018      	movs	r0, r3
 800a438:	46bd      	mov	sp, r7
 800a43a:	b002      	add	sp, #8
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2250      	movs	r2, #80	@ 0x50
 800a44e:	5c9b      	ldrb	r3, [r3, r2]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d101      	bne.n	800a458 <HAL_ADC_ConfigChannel+0x18>
 800a454:	2302      	movs	r3, #2
 800a456:	e06c      	b.n	800a532 <HAL_ADC_ConfigChannel+0xf2>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2250      	movs	r2, #80	@ 0x50
 800a45c:	2101      	movs	r1, #1
 800a45e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	2204      	movs	r2, #4
 800a468:	4013      	ands	r3, r2
 800a46a:	d00b      	beq.n	800a484 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a470:	2220      	movs	r2, #32
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2250      	movs	r2, #80	@ 0x50
 800a47c:	2100      	movs	r1, #0
 800a47e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e056      	b.n	800a532 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	4a2c      	ldr	r2, [pc, #176]	@ (800a53c <HAL_ADC_ConfigChannel+0xfc>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d028      	beq.n	800a4e0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	035b      	lsls	r3, r3, #13
 800a49a:	0b5a      	lsrs	r2, r3, #13
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	2380      	movs	r3, #128	@ 0x80
 800a4aa:	02db      	lsls	r3, r3, #11
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	d009      	beq.n	800a4c4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800a4b0:	4b23      	ldr	r3, [pc, #140]	@ (800a540 <HAL_ADC_ConfigChannel+0x100>)
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	4b22      	ldr	r3, [pc, #136]	@ (800a540 <HAL_ADC_ConfigChannel+0x100>)
 800a4b6:	2180      	movs	r1, #128	@ 0x80
 800a4b8:	0409      	lsls	r1, r1, #16
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800a4be:	200a      	movs	r0, #10
 800a4c0:	f000 f8ac 	bl	800a61c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	2380      	movs	r3, #128	@ 0x80
 800a4ca:	029b      	lsls	r3, r3, #10
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	d02b      	beq.n	800a528 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800a4d0:	4b1b      	ldr	r3, [pc, #108]	@ (800a540 <HAL_ADC_ConfigChannel+0x100>)
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a540 <HAL_ADC_ConfigChannel+0x100>)
 800a4d6:	2180      	movs	r1, #128	@ 0x80
 800a4d8:	03c9      	lsls	r1, r1, #15
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	e023      	b.n	800a528 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	035b      	lsls	r3, r3, #13
 800a4ec:	0b5b      	lsrs	r3, r3, #13
 800a4ee:	43d9      	mvns	r1, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	400a      	ands	r2, r1
 800a4f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	2380      	movs	r3, #128	@ 0x80
 800a4fe:	02db      	lsls	r3, r3, #11
 800a500:	4013      	ands	r3, r2
 800a502:	d005      	beq.n	800a510 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800a504:	4b0e      	ldr	r3, [pc, #56]	@ (800a540 <HAL_ADC_ConfigChannel+0x100>)
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	4b0d      	ldr	r3, [pc, #52]	@ (800a540 <HAL_ADC_ConfigChannel+0x100>)
 800a50a:	490e      	ldr	r1, [pc, #56]	@ (800a544 <HAL_ADC_ConfigChannel+0x104>)
 800a50c:	400a      	ands	r2, r1
 800a50e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	2380      	movs	r3, #128	@ 0x80
 800a516:	029b      	lsls	r3, r3, #10
 800a518:	4013      	ands	r3, r2
 800a51a:	d005      	beq.n	800a528 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800a51c:	4b08      	ldr	r3, [pc, #32]	@ (800a540 <HAL_ADC_ConfigChannel+0x100>)
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	4b07      	ldr	r3, [pc, #28]	@ (800a540 <HAL_ADC_ConfigChannel+0x100>)
 800a522:	4909      	ldr	r1, [pc, #36]	@ (800a548 <HAL_ADC_ConfigChannel+0x108>)
 800a524:	400a      	ands	r2, r1
 800a526:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2250      	movs	r2, #80	@ 0x50
 800a52c:	2100      	movs	r1, #0
 800a52e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	0018      	movs	r0, r3
 800a534:	46bd      	mov	sp, r7
 800a536:	b002      	add	sp, #8
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	46c0      	nop			@ (mov r8, r8)
 800a53c:	00001001 	.word	0x00001001
 800a540:	40012708 	.word	0x40012708
 800a544:	ff7fffff 	.word	0xff7fffff
 800a548:	ffbfffff 	.word	0xffbfffff

0800a54c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	2203      	movs	r2, #3
 800a560:	4013      	ands	r3, r2
 800a562:	2b01      	cmp	r3, #1
 800a564:	d108      	bne.n	800a578 <ADC_Enable+0x2c>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2201      	movs	r2, #1
 800a56e:	4013      	ands	r3, r2
 800a570:	2b01      	cmp	r3, #1
 800a572:	d101      	bne.n	800a578 <ADC_Enable+0x2c>
 800a574:	2301      	movs	r3, #1
 800a576:	e000      	b.n	800a57a <ADC_Enable+0x2e>
 800a578:	2300      	movs	r3, #0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d146      	bne.n	800a60c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	4a24      	ldr	r2, [pc, #144]	@ (800a618 <ADC_Enable+0xcc>)
 800a586:	4013      	ands	r3, r2
 800a588:	d00d      	beq.n	800a5a6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a58e:	2210      	movs	r2, #16
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a59a:	2201      	movs	r2, #1
 800a59c:	431a      	orrs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e033      	b.n	800a60e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800a5b6:	2001      	movs	r0, #1
 800a5b8:	f000 f830 	bl	800a61c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800a5bc:	f7ff fc84 	bl	8009ec8 <HAL_GetTick>
 800a5c0:	0003      	movs	r3, r0
 800a5c2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a5c4:	e01b      	b.n	800a5fe <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a5c6:	f7ff fc7f 	bl	8009ec8 <HAL_GetTick>
 800a5ca:	0002      	movs	r2, r0
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	2b0a      	cmp	r3, #10
 800a5d2:	d914      	bls.n	800a5fe <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	4013      	ands	r3, r2
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d00d      	beq.n	800a5fe <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5e6:	2210      	movs	r2, #16
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e007      	b.n	800a60e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2201      	movs	r2, #1
 800a606:	4013      	ands	r3, r2
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d1dc      	bne.n	800a5c6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	0018      	movs	r0, r3
 800a610:	46bd      	mov	sp, r7
 800a612:	b004      	add	sp, #16
 800a614:	bd80      	pop	{r7, pc}
 800a616:	46c0      	nop			@ (mov r8, r8)
 800a618:	80000017 	.word	0x80000017

0800a61c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800a624:	4b0b      	ldr	r3, [pc, #44]	@ (800a654 <ADC_DelayMicroSecond+0x38>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	490b      	ldr	r1, [pc, #44]	@ (800a658 <ADC_DelayMicroSecond+0x3c>)
 800a62a:	0018      	movs	r0, r3
 800a62c:	f7f5 fd88 	bl	8000140 <__udivsi3>
 800a630:	0003      	movs	r3, r0
 800a632:	001a      	movs	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4353      	muls	r3, r2
 800a638:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800a63a:	e002      	b.n	800a642 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3b01      	subs	r3, #1
 800a640:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1f9      	bne.n	800a63c <ADC_DelayMicroSecond+0x20>
  }
}
 800a648:	46c0      	nop			@ (mov r8, r8)
 800a64a:	46c0      	nop			@ (mov r8, r8)
 800a64c:	46bd      	mov	sp, r7
 800a64e:	b004      	add	sp, #16
 800a650:	bd80      	pop	{r7, pc}
 800a652:	46c0      	nop			@ (mov r8, r8)
 800a654:	20000058 	.word	0x20000058
 800a658:	000f4240 	.word	0x000f4240

0800a65c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	0002      	movs	r2, r0
 800a664:	1dfb      	adds	r3, r7, #7
 800a666:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a668:	1dfb      	adds	r3, r7, #7
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a66e:	d809      	bhi.n	800a684 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a670:	1dfb      	adds	r3, r7, #7
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	001a      	movs	r2, r3
 800a676:	231f      	movs	r3, #31
 800a678:	401a      	ands	r2, r3
 800a67a:	4b04      	ldr	r3, [pc, #16]	@ (800a68c <__NVIC_EnableIRQ+0x30>)
 800a67c:	2101      	movs	r1, #1
 800a67e:	4091      	lsls	r1, r2
 800a680:	000a      	movs	r2, r1
 800a682:	601a      	str	r2, [r3, #0]
  }
}
 800a684:	46c0      	nop			@ (mov r8, r8)
 800a686:	46bd      	mov	sp, r7
 800a688:	b002      	add	sp, #8
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	e000e100 	.word	0xe000e100

0800a690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a690:	b590      	push	{r4, r7, lr}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	0002      	movs	r2, r0
 800a698:	6039      	str	r1, [r7, #0]
 800a69a:	1dfb      	adds	r3, r7, #7
 800a69c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a69e:	1dfb      	adds	r3, r7, #7
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6a4:	d828      	bhi.n	800a6f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a6a6:	4a2f      	ldr	r2, [pc, #188]	@ (800a764 <__NVIC_SetPriority+0xd4>)
 800a6a8:	1dfb      	adds	r3, r7, #7
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	b25b      	sxtb	r3, r3
 800a6ae:	089b      	lsrs	r3, r3, #2
 800a6b0:	33c0      	adds	r3, #192	@ 0xc0
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	589b      	ldr	r3, [r3, r2]
 800a6b6:	1dfa      	adds	r2, r7, #7
 800a6b8:	7812      	ldrb	r2, [r2, #0]
 800a6ba:	0011      	movs	r1, r2
 800a6bc:	2203      	movs	r2, #3
 800a6be:	400a      	ands	r2, r1
 800a6c0:	00d2      	lsls	r2, r2, #3
 800a6c2:	21ff      	movs	r1, #255	@ 0xff
 800a6c4:	4091      	lsls	r1, r2
 800a6c6:	000a      	movs	r2, r1
 800a6c8:	43d2      	mvns	r2, r2
 800a6ca:	401a      	ands	r2, r3
 800a6cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	019b      	lsls	r3, r3, #6
 800a6d2:	22ff      	movs	r2, #255	@ 0xff
 800a6d4:	401a      	ands	r2, r3
 800a6d6:	1dfb      	adds	r3, r7, #7
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	0018      	movs	r0, r3
 800a6dc:	2303      	movs	r3, #3
 800a6de:	4003      	ands	r3, r0
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a6e4:	481f      	ldr	r0, [pc, #124]	@ (800a764 <__NVIC_SetPriority+0xd4>)
 800a6e6:	1dfb      	adds	r3, r7, #7
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	b25b      	sxtb	r3, r3
 800a6ec:	089b      	lsrs	r3, r3, #2
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	33c0      	adds	r3, #192	@ 0xc0
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800a6f6:	e031      	b.n	800a75c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a6f8:	4a1b      	ldr	r2, [pc, #108]	@ (800a768 <__NVIC_SetPriority+0xd8>)
 800a6fa:	1dfb      	adds	r3, r7, #7
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	0019      	movs	r1, r3
 800a700:	230f      	movs	r3, #15
 800a702:	400b      	ands	r3, r1
 800a704:	3b08      	subs	r3, #8
 800a706:	089b      	lsrs	r3, r3, #2
 800a708:	3306      	adds	r3, #6
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	18d3      	adds	r3, r2, r3
 800a70e:	3304      	adds	r3, #4
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	1dfa      	adds	r2, r7, #7
 800a714:	7812      	ldrb	r2, [r2, #0]
 800a716:	0011      	movs	r1, r2
 800a718:	2203      	movs	r2, #3
 800a71a:	400a      	ands	r2, r1
 800a71c:	00d2      	lsls	r2, r2, #3
 800a71e:	21ff      	movs	r1, #255	@ 0xff
 800a720:	4091      	lsls	r1, r2
 800a722:	000a      	movs	r2, r1
 800a724:	43d2      	mvns	r2, r2
 800a726:	401a      	ands	r2, r3
 800a728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	019b      	lsls	r3, r3, #6
 800a72e:	22ff      	movs	r2, #255	@ 0xff
 800a730:	401a      	ands	r2, r3
 800a732:	1dfb      	adds	r3, r7, #7
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	0018      	movs	r0, r3
 800a738:	2303      	movs	r3, #3
 800a73a:	4003      	ands	r3, r0
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a740:	4809      	ldr	r0, [pc, #36]	@ (800a768 <__NVIC_SetPriority+0xd8>)
 800a742:	1dfb      	adds	r3, r7, #7
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	001c      	movs	r4, r3
 800a748:	230f      	movs	r3, #15
 800a74a:	4023      	ands	r3, r4
 800a74c:	3b08      	subs	r3, #8
 800a74e:	089b      	lsrs	r3, r3, #2
 800a750:	430a      	orrs	r2, r1
 800a752:	3306      	adds	r3, #6
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	18c3      	adds	r3, r0, r3
 800a758:	3304      	adds	r3, #4
 800a75a:	601a      	str	r2, [r3, #0]
}
 800a75c:	46c0      	nop			@ (mov r8, r8)
 800a75e:	46bd      	mov	sp, r7
 800a760:	b003      	add	sp, #12
 800a762:	bd90      	pop	{r4, r7, pc}
 800a764:	e000e100 	.word	0xe000e100
 800a768:	e000ed00 	.word	0xe000ed00

0800a76c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	1e5a      	subs	r2, r3, #1
 800a778:	2380      	movs	r3, #128	@ 0x80
 800a77a:	045b      	lsls	r3, r3, #17
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d301      	bcc.n	800a784 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a780:	2301      	movs	r3, #1
 800a782:	e010      	b.n	800a7a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a784:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b0 <SysTick_Config+0x44>)
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	3a01      	subs	r2, #1
 800a78a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a78c:	2301      	movs	r3, #1
 800a78e:	425b      	negs	r3, r3
 800a790:	2103      	movs	r1, #3
 800a792:	0018      	movs	r0, r3
 800a794:	f7ff ff7c 	bl	800a690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a798:	4b05      	ldr	r3, [pc, #20]	@ (800a7b0 <SysTick_Config+0x44>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a79e:	4b04      	ldr	r3, [pc, #16]	@ (800a7b0 <SysTick_Config+0x44>)
 800a7a0:	2207      	movs	r2, #7
 800a7a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	b002      	add	sp, #8
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	46c0      	nop			@ (mov r8, r8)
 800a7b0:	e000e010 	.word	0xe000e010

0800a7b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	607a      	str	r2, [r7, #4]
 800a7be:	210f      	movs	r1, #15
 800a7c0:	187b      	adds	r3, r7, r1
 800a7c2:	1c02      	adds	r2, r0, #0
 800a7c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	187b      	adds	r3, r7, r1
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	b25b      	sxtb	r3, r3
 800a7ce:	0011      	movs	r1, r2
 800a7d0:	0018      	movs	r0, r3
 800a7d2:	f7ff ff5d 	bl	800a690 <__NVIC_SetPriority>
}
 800a7d6:	46c0      	nop			@ (mov r8, r8)
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	b004      	add	sp, #16
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	0002      	movs	r2, r0
 800a7e6:	1dfb      	adds	r3, r7, #7
 800a7e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a7ea:	1dfb      	adds	r3, r7, #7
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	b25b      	sxtb	r3, r3
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	f7ff ff33 	bl	800a65c <__NVIC_EnableIRQ>
}
 800a7f6:	46c0      	nop			@ (mov r8, r8)
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	b002      	add	sp, #8
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	0018      	movs	r0, r3
 800a80a:	f7ff ffaf 	bl	800a76c <SysTick_Config>
 800a80e:	0003      	movs	r3, r0
}
 800a810:	0018      	movs	r0, r3
 800a812:	46bd      	mov	sp, r7
 800a814:	b002      	add	sp, #8
 800a816:	bd80      	pop	{r7, pc}

0800a818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d101      	bne.n	800a82a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e061      	b.n	800a8ee <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a32      	ldr	r2, [pc, #200]	@ (800a8f8 <HAL_DMA_Init+0xe0>)
 800a830:	4694      	mov	ip, r2
 800a832:	4463      	add	r3, ip
 800a834:	2114      	movs	r1, #20
 800a836:	0018      	movs	r0, r3
 800a838:	f7f5 fc82 	bl	8000140 <__udivsi3>
 800a83c:	0003      	movs	r3, r0
 800a83e:	009a      	lsls	r2, r3, #2
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a2d      	ldr	r2, [pc, #180]	@ (800a8fc <HAL_DMA_Init+0xe4>)
 800a848:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2225      	movs	r2, #37	@ 0x25
 800a84e:	2102      	movs	r1, #2
 800a850:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	4a28      	ldr	r2, [pc, #160]	@ (800a900 <HAL_DMA_Init+0xe8>)
 800a85e:	4013      	ands	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a86a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	2380      	movs	r3, #128	@ 0x80
 800a89e:	01db      	lsls	r3, r3, #7
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d018      	beq.n	800a8d6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a8a4:	4b17      	ldr	r3, [pc, #92]	@ (800a904 <HAL_DMA_Init+0xec>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8ac:	211c      	movs	r1, #28
 800a8ae:	400b      	ands	r3, r1
 800a8b0:	210f      	movs	r1, #15
 800a8b2:	4099      	lsls	r1, r3
 800a8b4:	000b      	movs	r3, r1
 800a8b6:	43d9      	mvns	r1, r3
 800a8b8:	4b12      	ldr	r3, [pc, #72]	@ (800a904 <HAL_DMA_Init+0xec>)
 800a8ba:	400a      	ands	r2, r1
 800a8bc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a8be:	4b11      	ldr	r3, [pc, #68]	@ (800a904 <HAL_DMA_Init+0xec>)
 800a8c0:	6819      	ldr	r1, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8ca:	201c      	movs	r0, #28
 800a8cc:	4003      	ands	r3, r0
 800a8ce:	409a      	lsls	r2, r3
 800a8d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a904 <HAL_DMA_Init+0xec>)
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2225      	movs	r2, #37	@ 0x25
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2224      	movs	r2, #36	@ 0x24
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	b004      	add	sp, #16
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	46c0      	nop			@ (mov r8, r8)
 800a8f8:	bffdfff8 	.word	0xbffdfff8
 800a8fc:	40020000 	.word	0x40020000
 800a900:	ffff800f 	.word	0xffff800f
 800a904:	400200a8 	.word	0x400200a8

0800a908 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e04a      	b.n	800a9b0 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2101      	movs	r1, #1
 800a926:	438a      	bics	r2, r1
 800a928:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a22      	ldr	r2, [pc, #136]	@ (800a9b8 <HAL_DMA_DeInit+0xb0>)
 800a930:	4694      	mov	ip, r2
 800a932:	4463      	add	r3, ip
 800a934:	2114      	movs	r1, #20
 800a936:	0018      	movs	r0, r3
 800a938:	f7f5 fc02 	bl	8000140 <__udivsi3>
 800a93c:	0003      	movs	r3, r0
 800a93e:	009a      	lsls	r2, r3, #2
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a1d      	ldr	r2, [pc, #116]	@ (800a9bc <HAL_DMA_DeInit+0xb4>)
 800a948:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2200      	movs	r2, #0
 800a950:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a956:	221c      	movs	r2, #28
 800a958:	401a      	ands	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95e:	2101      	movs	r1, #1
 800a960:	4091      	lsls	r1, r2
 800a962:	000a      	movs	r2, r1
 800a964:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a966:	4b16      	ldr	r3, [pc, #88]	@ (800a9c0 <HAL_DMA_DeInit+0xb8>)
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a96e:	211c      	movs	r1, #28
 800a970:	400b      	ands	r3, r1
 800a972:	210f      	movs	r1, #15
 800a974:	4099      	lsls	r1, r3
 800a976:	000b      	movs	r3, r1
 800a978:	43d9      	mvns	r1, r3
 800a97a:	4b11      	ldr	r3, [pc, #68]	@ (800a9c0 <HAL_DMA_DeInit+0xb8>)
 800a97c:	400a      	ands	r2, r1
 800a97e:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2225      	movs	r2, #37	@ 0x25
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2224      	movs	r2, #36	@ 0x24
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	b002      	add	sp, #8
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	bffdfff8 	.word	0xbffdfff8
 800a9bc:	40020000 	.word	0x40020000
 800a9c0:	400200a8 	.word	0x400200a8

0800a9c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
 800a9d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9d2:	2317      	movs	r3, #23
 800a9d4:	18fb      	adds	r3, r7, r3
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2224      	movs	r2, #36	@ 0x24
 800a9de:	5c9b      	ldrb	r3, [r3, r2]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d101      	bne.n	800a9e8 <HAL_DMA_Start_IT+0x24>
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	e04f      	b.n	800aa88 <HAL_DMA_Start_IT+0xc4>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2224      	movs	r2, #36	@ 0x24
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2225      	movs	r2, #37	@ 0x25
 800a9f4:	5c9b      	ldrb	r3, [r3, r2]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d13a      	bne.n	800aa72 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2225      	movs	r2, #37	@ 0x25
 800aa00:	2102      	movs	r1, #2
 800aa02:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2101      	movs	r1, #1
 800aa16:	438a      	bics	r2, r1
 800aa18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	68b9      	ldr	r1, [r7, #8]
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f000 f976 	bl	800ad12 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d008      	beq.n	800aa40 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	210e      	movs	r1, #14
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	e00f      	b.n	800aa60 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2104      	movs	r1, #4
 800aa4c:	438a      	bics	r2, r1
 800aa4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	210a      	movs	r1, #10
 800aa5c:	430a      	orrs	r2, r1
 800aa5e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	e007      	b.n	800aa82 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2224      	movs	r2, #36	@ 0x24
 800aa76:	2100      	movs	r1, #0
 800aa78:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800aa7a:	2317      	movs	r3, #23
 800aa7c:	18fb      	adds	r3, r7, r3
 800aa7e:	2202      	movs	r2, #2
 800aa80:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800aa82:	2317      	movs	r3, #23
 800aa84:	18fb      	adds	r3, r7, r3
 800aa86:	781b      	ldrb	r3, [r3, #0]
}
 800aa88:	0018      	movs	r0, r3
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	b006      	add	sp, #24
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa98:	230f      	movs	r3, #15
 800aa9a:	18fb      	adds	r3, r7, r3
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2225      	movs	r2, #37	@ 0x25
 800aaa4:	5c9b      	ldrb	r3, [r3, r2]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d008      	beq.n	800aabe <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2204      	movs	r2, #4
 800aab0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2224      	movs	r2, #36	@ 0x24
 800aab6:	2100      	movs	r1, #0
 800aab8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e024      	b.n	800ab08 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	210e      	movs	r1, #14
 800aaca:	438a      	bics	r2, r1
 800aacc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2101      	movs	r1, #1
 800aada:	438a      	bics	r2, r1
 800aadc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aae2:	221c      	movs	r2, #28
 800aae4:	401a      	ands	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaea:	2101      	movs	r1, #1
 800aaec:	4091      	lsls	r1, r2
 800aaee:	000a      	movs	r2, r1
 800aaf0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2225      	movs	r2, #37	@ 0x25
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2224      	movs	r2, #36	@ 0x24
 800aafe:	2100      	movs	r1, #0
 800ab00:	5499      	strb	r1, [r3, r2]

    return status;
 800ab02:	230f      	movs	r3, #15
 800ab04:	18fb      	adds	r3, r7, r3
 800ab06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab08:	0018      	movs	r0, r3
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	b004      	add	sp, #16
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab18:	210f      	movs	r1, #15
 800ab1a:	187b      	adds	r3, r7, r1
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2225      	movs	r2, #37	@ 0x25
 800ab24:	5c9b      	ldrb	r3, [r3, r2]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d006      	beq.n	800ab3a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2204      	movs	r2, #4
 800ab30:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ab32:	187b      	adds	r3, r7, r1
 800ab34:	2201      	movs	r2, #1
 800ab36:	701a      	strb	r2, [r3, #0]
 800ab38:	e02a      	b.n	800ab90 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	210e      	movs	r1, #14
 800ab46:	438a      	bics	r2, r1
 800ab48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2101      	movs	r1, #1
 800ab56:	438a      	bics	r2, r1
 800ab58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab5e:	221c      	movs	r2, #28
 800ab60:	401a      	ands	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab66:	2101      	movs	r1, #1
 800ab68:	4091      	lsls	r1, r2
 800ab6a:	000a      	movs	r2, r1
 800ab6c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2225      	movs	r2, #37	@ 0x25
 800ab72:	2101      	movs	r1, #1
 800ab74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2224      	movs	r2, #36	@ 0x24
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	0010      	movs	r0, r2
 800ab8e:	4798      	blx	r3
    }
  }
  return status;
 800ab90:	230f      	movs	r3, #15
 800ab92:	18fb      	adds	r3, r7, r3
 800ab94:	781b      	ldrb	r3, [r3, #0]
}
 800ab96:	0018      	movs	r0, r3
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	b004      	add	sp, #16
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abba:	221c      	movs	r2, #28
 800abbc:	4013      	ands	r3, r2
 800abbe:	2204      	movs	r2, #4
 800abc0:	409a      	lsls	r2, r3
 800abc2:	0013      	movs	r3, r2
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4013      	ands	r3, r2
 800abc8:	d026      	beq.n	800ac18 <HAL_DMA_IRQHandler+0x7a>
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2204      	movs	r2, #4
 800abce:	4013      	ands	r3, r2
 800abd0:	d022      	beq.n	800ac18 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2220      	movs	r2, #32
 800abda:	4013      	ands	r3, r2
 800abdc:	d107      	bne.n	800abee <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2104      	movs	r1, #4
 800abea:	438a      	bics	r2, r1
 800abec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abf2:	221c      	movs	r2, #28
 800abf4:	401a      	ands	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abfa:	2104      	movs	r1, #4
 800abfc:	4091      	lsls	r1, r2
 800abfe:	000a      	movs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d100      	bne.n	800ac0c <HAL_DMA_IRQHandler+0x6e>
 800ac0a:	e071      	b.n	800acf0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	0010      	movs	r0, r2
 800ac14:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800ac16:	e06b      	b.n	800acf0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1c:	221c      	movs	r2, #28
 800ac1e:	4013      	ands	r3, r2
 800ac20:	2202      	movs	r2, #2
 800ac22:	409a      	lsls	r2, r3
 800ac24:	0013      	movs	r3, r2
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	4013      	ands	r3, r2
 800ac2a:	d02d      	beq.n	800ac88 <HAL_DMA_IRQHandler+0xea>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	4013      	ands	r3, r2
 800ac32:	d029      	beq.n	800ac88 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2220      	movs	r2, #32
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	d10b      	bne.n	800ac58 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	210a      	movs	r1, #10
 800ac4c:	438a      	bics	r2, r1
 800ac4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2225      	movs	r2, #37	@ 0x25
 800ac54:	2101      	movs	r1, #1
 800ac56:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac5c:	221c      	movs	r2, #28
 800ac5e:	401a      	ands	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac64:	2102      	movs	r1, #2
 800ac66:	4091      	lsls	r1, r2
 800ac68:	000a      	movs	r2, r1
 800ac6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2224      	movs	r2, #36	@ 0x24
 800ac70:	2100      	movs	r1, #0
 800ac72:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d039      	beq.n	800acf0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	0010      	movs	r0, r2
 800ac84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800ac86:	e033      	b.n	800acf0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8c:	221c      	movs	r2, #28
 800ac8e:	4013      	ands	r3, r2
 800ac90:	2208      	movs	r2, #8
 800ac92:	409a      	lsls	r2, r3
 800ac94:	0013      	movs	r3, r2
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	4013      	ands	r3, r2
 800ac9a:	d02a      	beq.n	800acf2 <HAL_DMA_IRQHandler+0x154>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2208      	movs	r2, #8
 800aca0:	4013      	ands	r3, r2
 800aca2:	d026      	beq.n	800acf2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	210e      	movs	r1, #14
 800acb0:	438a      	bics	r2, r1
 800acb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acb8:	221c      	movs	r2, #28
 800acba:	401a      	ands	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc0:	2101      	movs	r1, #1
 800acc2:	4091      	lsls	r1, r2
 800acc4:	000a      	movs	r2, r1
 800acc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2225      	movs	r2, #37	@ 0x25
 800acd2:	2101      	movs	r1, #1
 800acd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2224      	movs	r2, #36	@ 0x24
 800acda:	2100      	movs	r1, #0
 800acdc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d005      	beq.n	800acf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	0010      	movs	r0, r2
 800acee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800acf0:	46c0      	nop			@ (mov r8, r8)
 800acf2:	46c0      	nop			@ (mov r8, r8)
}
 800acf4:	46bd      	mov	sp, r7
 800acf6:	b004      	add	sp, #16
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2225      	movs	r2, #37	@ 0x25
 800ad06:	5c9b      	ldrb	r3, [r3, r2]
 800ad08:	b2db      	uxtb	r3, r3
}
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	b002      	add	sp, #8
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	607a      	str	r2, [r7, #4]
 800ad1e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad24:	221c      	movs	r2, #28
 800ad26:	401a      	ands	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	4091      	lsls	r1, r2
 800ad30:	000a      	movs	r2, r1
 800ad32:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	2b10      	cmp	r3, #16
 800ad42:	d108      	bne.n	800ad56 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ad54:	e007      	b.n	800ad66 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	60da      	str	r2, [r3, #12]
}
 800ad66:	46c0      	nop			@ (mov r8, r8)
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	b004      	add	sp, #16
 800ad6c:	bd80      	pop	{r7, pc}
	...

0800ad70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ad78:	f7ff f8a6 	bl	8009ec8 <HAL_GetTick>
 800ad7c:	0003      	movs	r3, r0
 800ad7e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ad80:	e00f      	b.n	800ada2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3301      	adds	r3, #1
 800ad86:	d00c      	beq.n	800ada2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d007      	beq.n	800ad9e <FLASH_WaitForLastOperation+0x2e>
 800ad8e:	f7ff f89b 	bl	8009ec8 <HAL_GetTick>
 800ad92:	0002      	movs	r2, r0
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d201      	bcs.n	800ada2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e052      	b.n	800ae48 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ada2:	4b2b      	ldr	r3, [pc, #172]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	2201      	movs	r2, #1
 800ada8:	4013      	ands	r3, r2
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d0e9      	beq.n	800ad82 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800adae:	4b28      	ldr	r3, [pc, #160]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	2202      	movs	r2, #2
 800adb4:	4013      	ands	r3, r2
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d102      	bne.n	800adc0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800adba:	4b25      	ldr	r3, [pc, #148]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800adbc:	2202      	movs	r2, #2
 800adbe:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800adc0:	4b23      	ldr	r3, [pc, #140]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800adc2:	699a      	ldr	r2, [r3, #24]
 800adc4:	2380      	movs	r3, #128	@ 0x80
 800adc6:	005b      	lsls	r3, r3, #1
 800adc8:	401a      	ands	r2, r3
 800adca:	2380      	movs	r3, #128	@ 0x80
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	429a      	cmp	r2, r3
 800add0:	d035      	beq.n	800ae3e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800add2:	4b1f      	ldr	r3, [pc, #124]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800add4:	699a      	ldr	r2, [r3, #24]
 800add6:	2380      	movs	r3, #128	@ 0x80
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800addc:	2380      	movs	r3, #128	@ 0x80
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d02c      	beq.n	800ae3e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ade4:	4b1a      	ldr	r3, [pc, #104]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800ade6:	699a      	ldr	r2, [r3, #24]
 800ade8:	2380      	movs	r3, #128	@ 0x80
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800adee:	2380      	movs	r3, #128	@ 0x80
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d023      	beq.n	800ae3e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800adf6:	4b16      	ldr	r3, [pc, #88]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800adf8:	699a      	ldr	r2, [r3, #24]
 800adfa:	2380      	movs	r3, #128	@ 0x80
 800adfc:	011b      	lsls	r3, r3, #4
 800adfe:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ae00:	2380      	movs	r3, #128	@ 0x80
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d01a      	beq.n	800ae3e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ae08:	4b11      	ldr	r3, [pc, #68]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800ae0a:	699a      	ldr	r2, [r3, #24]
 800ae0c:	2380      	movs	r3, #128	@ 0x80
 800ae0e:	019b      	lsls	r3, r3, #6
 800ae10:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ae12:	2380      	movs	r3, #128	@ 0x80
 800ae14:	019b      	lsls	r3, r3, #6
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d011      	beq.n	800ae3e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800ae1c:	699a      	ldr	r2, [r3, #24]
 800ae1e:	2380      	movs	r3, #128	@ 0x80
 800ae20:	029b      	lsls	r3, r3, #10
 800ae22:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ae24:	2380      	movs	r3, #128	@ 0x80
 800ae26:	029b      	lsls	r3, r3, #10
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d008      	beq.n	800ae3e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800ae2c:	4b08      	ldr	r3, [pc, #32]	@ (800ae50 <FLASH_WaitForLastOperation+0xe0>)
 800ae2e:	699a      	ldr	r2, [r3, #24]
 800ae30:	2380      	movs	r3, #128	@ 0x80
 800ae32:	025b      	lsls	r3, r3, #9
 800ae34:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ae36:	2380      	movs	r3, #128	@ 0x80
 800ae38:	025b      	lsls	r3, r3, #9
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d103      	bne.n	800ae46 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800ae3e:	f000 f809 	bl	800ae54 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e000      	b.n	800ae48 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	0018      	movs	r0, r3
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	b004      	add	sp, #16
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	40022000 	.word	0x40022000

0800ae54 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ae5e:	4b49      	ldr	r3, [pc, #292]	@ (800af84 <FLASH_SetErrorCode+0x130>)
 800ae60:	699a      	ldr	r2, [r3, #24]
 800ae62:	2380      	movs	r3, #128	@ 0x80
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	401a      	ands	r2, r3
 800ae68:	2380      	movs	r3, #128	@ 0x80
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d10a      	bne.n	800ae86 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ae70:	4b45      	ldr	r3, [pc, #276]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800ae72:	695b      	ldr	r3, [r3, #20]
 800ae74:	2202      	movs	r2, #2
 800ae76:	431a      	orrs	r2, r3
 800ae78:	4b43      	ldr	r3, [pc, #268]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800ae7a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2280      	movs	r2, #128	@ 0x80
 800ae80:	0052      	lsls	r2, r2, #1
 800ae82:	4313      	orrs	r3, r2
 800ae84:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800ae86:	4b3f      	ldr	r3, [pc, #252]	@ (800af84 <FLASH_SetErrorCode+0x130>)
 800ae88:	699a      	ldr	r2, [r3, #24]
 800ae8a:	2380      	movs	r3, #128	@ 0x80
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	401a      	ands	r2, r3
 800ae90:	2380      	movs	r3, #128	@ 0x80
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d10a      	bne.n	800aeae <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ae98:	4b3b      	ldr	r3, [pc, #236]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	4b39      	ldr	r3, [pc, #228]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800aea2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2280      	movs	r2, #128	@ 0x80
 800aea8:	0092      	lsls	r2, r2, #2
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800aeae:	4b35      	ldr	r3, [pc, #212]	@ (800af84 <FLASH_SetErrorCode+0x130>)
 800aeb0:	699a      	ldr	r2, [r3, #24]
 800aeb2:	2380      	movs	r3, #128	@ 0x80
 800aeb4:	00db      	lsls	r3, r3, #3
 800aeb6:	401a      	ands	r2, r3
 800aeb8:	2380      	movs	r3, #128	@ 0x80
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d10a      	bne.n	800aed6 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800aec0:	4b31      	ldr	r3, [pc, #196]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	2208      	movs	r2, #8
 800aec6:	431a      	orrs	r2, r3
 800aec8:	4b2f      	ldr	r3, [pc, #188]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800aeca:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2280      	movs	r2, #128	@ 0x80
 800aed0:	00d2      	lsls	r2, r2, #3
 800aed2:	4313      	orrs	r3, r2
 800aed4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800aed6:	4b2b      	ldr	r3, [pc, #172]	@ (800af84 <FLASH_SetErrorCode+0x130>)
 800aed8:	699a      	ldr	r2, [r3, #24]
 800aeda:	2380      	movs	r3, #128	@ 0x80
 800aedc:	011b      	lsls	r3, r3, #4
 800aede:	401a      	ands	r2, r3
 800aee0:	2380      	movs	r3, #128	@ 0x80
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d10a      	bne.n	800aefe <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800aee8:	4b27      	ldr	r3, [pc, #156]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	2204      	movs	r2, #4
 800aeee:	431a      	orrs	r2, r3
 800aef0:	4b25      	ldr	r3, [pc, #148]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800aef2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2280      	movs	r2, #128	@ 0x80
 800aef8:	0112      	lsls	r2, r2, #4
 800aefa:	4313      	orrs	r3, r2
 800aefc:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800aefe:	4b21      	ldr	r3, [pc, #132]	@ (800af84 <FLASH_SetErrorCode+0x130>)
 800af00:	699a      	ldr	r2, [r3, #24]
 800af02:	2380      	movs	r3, #128	@ 0x80
 800af04:	019b      	lsls	r3, r3, #6
 800af06:	401a      	ands	r2, r3
 800af08:	2380      	movs	r3, #128	@ 0x80
 800af0a:	019b      	lsls	r3, r3, #6
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d10a      	bne.n	800af26 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800af10:	4b1d      	ldr	r3, [pc, #116]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800af12:	695b      	ldr	r3, [r3, #20]
 800af14:	2210      	movs	r2, #16
 800af16:	431a      	orrs	r2, r3
 800af18:	4b1b      	ldr	r3, [pc, #108]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800af1a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2280      	movs	r2, #128	@ 0x80
 800af20:	0192      	lsls	r2, r2, #6
 800af22:	4313      	orrs	r3, r2
 800af24:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800af26:	4b17      	ldr	r3, [pc, #92]	@ (800af84 <FLASH_SetErrorCode+0x130>)
 800af28:	699a      	ldr	r2, [r3, #24]
 800af2a:	2380      	movs	r3, #128	@ 0x80
 800af2c:	029b      	lsls	r3, r3, #10
 800af2e:	401a      	ands	r2, r3
 800af30:	2380      	movs	r3, #128	@ 0x80
 800af32:	029b      	lsls	r3, r3, #10
 800af34:	429a      	cmp	r2, r3
 800af36:	d109      	bne.n	800af4c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800af38:	4b13      	ldr	r3, [pc, #76]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	2220      	movs	r2, #32
 800af3e:	431a      	orrs	r2, r3
 800af40:	4b11      	ldr	r3, [pc, #68]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800af42:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2220      	movs	r2, #32
 800af48:	4313      	orrs	r3, r2
 800af4a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800af4c:	4b0d      	ldr	r3, [pc, #52]	@ (800af84 <FLASH_SetErrorCode+0x130>)
 800af4e:	699a      	ldr	r2, [r3, #24]
 800af50:	2380      	movs	r3, #128	@ 0x80
 800af52:	025b      	lsls	r3, r3, #9
 800af54:	401a      	ands	r2, r3
 800af56:	2380      	movs	r3, #128	@ 0x80
 800af58:	025b      	lsls	r3, r3, #9
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d10a      	bne.n	800af74 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800af5e:	4b0a      	ldr	r3, [pc, #40]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	2240      	movs	r2, #64	@ 0x40
 800af64:	431a      	orrs	r2, r3
 800af66:	4b08      	ldr	r3, [pc, #32]	@ (800af88 <FLASH_SetErrorCode+0x134>)
 800af68:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2280      	movs	r2, #128	@ 0x80
 800af6e:	0252      	lsls	r2, r2, #9
 800af70:	4313      	orrs	r3, r2
 800af72:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800af74:	4b03      	ldr	r3, [pc, #12]	@ (800af84 <FLASH_SetErrorCode+0x130>)
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	619a      	str	r2, [r3, #24]
}  
 800af7a:	46c0      	nop			@ (mov r8, r8)
 800af7c:	46bd      	mov	sp, r7
 800af7e:	b002      	add	sp, #8
 800af80:	bd80      	pop	{r7, pc}
 800af82:	46c0      	nop			@ (mov r8, r8)
 800af84:	40022000 	.word	0x40022000
 800af88:	20002d0c 	.word	0x20002d0c

0800af8c <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800af92:	4b12      	ldr	r3, [pc, #72]	@ (800afdc <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	4013      	ands	r3, r2
 800af9a:	d019      	beq.n	800afd0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af9c:	f3ef 8310 	mrs	r3, PRIMASK
 800afa0:	607b      	str	r3, [r7, #4]
  return(result);
 800afa2:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800afa4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800afa6:	b672      	cpsid	i
}
 800afa8:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800afaa:	4b0c      	ldr	r3, [pc, #48]	@ (800afdc <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800afac:	4a0c      	ldr	r2, [pc, #48]	@ (800afe0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800afae:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800afb0:	4b0a      	ldr	r3, [pc, #40]	@ (800afdc <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800afb2:	4a0c      	ldr	r2, [pc, #48]	@ (800afe4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800afb4:	60da      	str	r2, [r3, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	f383 8810 	msr	PRIMASK, r3
}
 800afc0:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800afc2:	4b06      	ldr	r3, [pc, #24]	@ (800afdc <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	4013      	ands	r3, r2
 800afca:	d001      	beq.n	800afd0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e000      	b.n	800afd2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	0018      	movs	r0, r3
 800afd4:	46bd      	mov	sp, r7
 800afd6:	b004      	add	sp, #16
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	46c0      	nop			@ (mov r8, r8)
 800afdc:	40022000 	.word	0x40022000
 800afe0:	89abcdef 	.word	0x89abcdef
 800afe4:	02030405 	.word	0x02030405

0800afe8 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800afec:	4b04      	ldr	r3, [pc, #16]	@ (800b000 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	4b03      	ldr	r3, [pc, #12]	@ (800b000 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800aff2:	2101      	movs	r1, #1
 800aff4:	430a      	orrs	r2, r1
 800aff6:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	0018      	movs	r0, r3
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	40022000 	.word	0x40022000

0800b004 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800b004:	b5b0      	push	{r4, r5, r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b00c:	250f      	movs	r5, #15
 800b00e:	197b      	adds	r3, r7, r5
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b014:	197c      	adds	r4, r7, r5
 800b016:	4b0f      	ldr	r3, [pc, #60]	@ (800b054 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b018:	0018      	movs	r0, r3
 800b01a:	f7ff fea9 	bl	800ad70 <FLASH_WaitForLastOperation>
 800b01e:	0003      	movs	r3, r0
 800b020:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b022:	0029      	movs	r1, r5
 800b024:	187b      	adds	r3, r7, r1
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10c      	bne.n	800b046 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b02c:	4b0a      	ldr	r3, [pc, #40]	@ (800b058 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800b02e:	2200      	movs	r2, #0
 800b030:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b038:	187c      	adds	r4, r7, r1
 800b03a:	4b06      	ldr	r3, [pc, #24]	@ (800b054 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b03c:	0018      	movs	r0, r3
 800b03e:	f7ff fe97 	bl	800ad70 <FLASH_WaitForLastOperation>
 800b042:	0003      	movs	r3, r0
 800b044:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800b046:	230f      	movs	r3, #15
 800b048:	18fb      	adds	r3, r7, r3
 800b04a:	781b      	ldrb	r3, [r3, #0]
}  
 800b04c:	0018      	movs	r0, r3
 800b04e:	46bd      	mov	sp, r7
 800b050:	b004      	add	sp, #16
 800b052:	bdb0      	pop	{r4, r5, r7, pc}
 800b054:	0000c350 	.word	0x0000c350
 800b058:	20002d0c 	.word	0x20002d0c

0800b05c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800b05c:	b5b0      	push	{r4, r5, r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b068:	2317      	movs	r3, #23
 800b06a:	18fb      	adds	r3, r7, r3
 800b06c:	2201      	movs	r2, #1
 800b06e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b070:	4b24      	ldr	r3, [pc, #144]	@ (800b104 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b072:	7c1b      	ldrb	r3, [r3, #16]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d101      	bne.n	800b07c <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800b078:	2302      	movs	r3, #2
 800b07a:	e03e      	b.n	800b0fa <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800b07c:	4b21      	ldr	r3, [pc, #132]	@ (800b104 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b07e:	2201      	movs	r2, #1
 800b080:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b082:	2517      	movs	r5, #23
 800b084:	197c      	adds	r4, r7, r5
 800b086:	4b20      	ldr	r3, [pc, #128]	@ (800b108 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b088:	0018      	movs	r0, r3
 800b08a:	f7ff fe71 	bl	800ad70 <FLASH_WaitForLastOperation>
 800b08e:	0003      	movs	r3, r0
 800b090:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b092:	197b      	adds	r3, r7, r5
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d129      	bne.n	800b0ee <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b09a:	4b1a      	ldr	r3, [pc, #104]	@ (800b104 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d103      	bne.n	800b0ae <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	601a      	str	r2, [r3, #0]
 800b0ac:	e013      	b.n	800b0d6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d104      	bne.n	800b0be <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	b292      	uxth	r2, r2
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	e00b      	b.n	800b0d6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d104      	bne.n	800b0ce <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	b2d2      	uxtb	r2, r2
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	e003      	b.n	800b0d6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800b0ce:	2317      	movs	r3, #23
 800b0d0:	18fb      	adds	r3, r7, r3
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b0d6:	2217      	movs	r2, #23
 800b0d8:	18bb      	adds	r3, r7, r2
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d106      	bne.n	800b0ee <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b0e0:	18bc      	adds	r4, r7, r2
 800b0e2:	4b09      	ldr	r3, [pc, #36]	@ (800b108 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f7ff fe43 	bl	800ad70 <FLASH_WaitForLastOperation>
 800b0ea:	0003      	movs	r3, r0
 800b0ec:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b0ee:	4b05      	ldr	r3, [pc, #20]	@ (800b104 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	741a      	strb	r2, [r3, #16]

  return status;
 800b0f4:	2317      	movs	r3, #23
 800b0f6:	18fb      	adds	r3, r7, r3
 800b0f8:	781b      	ldrb	r3, [r3, #0]
}
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	b006      	add	sp, #24
 800b100:	bdb0      	pop	{r4, r5, r7, pc}
 800b102:	46c0      	nop			@ (mov r8, r8)
 800b104:	20002d0c 	.word	0x20002d0c
 800b108:	0000c350 	.word	0x0000c350

0800b10c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800b11e:	2300      	movs	r3, #0
 800b120:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800b122:	e155      	b.n	800b3d0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2101      	movs	r1, #1
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	4091      	lsls	r1, r2
 800b12e:	000a      	movs	r2, r1
 800b130:	4013      	ands	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d100      	bne.n	800b13c <HAL_GPIO_Init+0x30>
 800b13a:	e146      	b.n	800b3ca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	2203      	movs	r2, #3
 800b142:	4013      	ands	r3, r2
 800b144:	2b01      	cmp	r3, #1
 800b146:	d005      	beq.n	800b154 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	2203      	movs	r2, #3
 800b14e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b150:	2b02      	cmp	r3, #2
 800b152:	d130      	bne.n	800b1b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	005b      	lsls	r3, r3, #1
 800b15e:	2203      	movs	r2, #3
 800b160:	409a      	lsls	r2, r3
 800b162:	0013      	movs	r3, r2
 800b164:	43da      	mvns	r2, r3
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	4013      	ands	r3, r2
 800b16a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	409a      	lsls	r2, r3
 800b176:	0013      	movs	r3, r2
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b18a:	2201      	movs	r2, #1
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	409a      	lsls	r2, r3
 800b190:	0013      	movs	r3, r2
 800b192:	43da      	mvns	r2, r3
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	4013      	ands	r3, r2
 800b198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	091b      	lsrs	r3, r3, #4
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	401a      	ands	r2, r3
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	409a      	lsls	r2, r3
 800b1a8:	0013      	movs	r3, r2
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	2203      	movs	r2, #3
 800b1bc:	4013      	ands	r3, r2
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d017      	beq.n	800b1f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	2203      	movs	r2, #3
 800b1ce:	409a      	lsls	r2, r3
 800b1d0:	0013      	movs	r3, r2
 800b1d2:	43da      	mvns	r2, r3
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	689a      	ldr	r2, [r3, #8]
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	409a      	lsls	r2, r3
 800b1e4:	0013      	movs	r3, r2
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d123      	bne.n	800b246 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	08da      	lsrs	r2, r3, #3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3208      	adds	r2, #8
 800b206:	0092      	lsls	r2, r2, #2
 800b208:	58d3      	ldr	r3, [r2, r3]
 800b20a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	2207      	movs	r2, #7
 800b210:	4013      	ands	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	220f      	movs	r2, #15
 800b216:	409a      	lsls	r2, r3
 800b218:	0013      	movs	r3, r2
 800b21a:	43da      	mvns	r2, r3
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	4013      	ands	r3, r2
 800b220:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	691a      	ldr	r2, [r3, #16]
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2107      	movs	r1, #7
 800b22a:	400b      	ands	r3, r1
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	409a      	lsls	r2, r3
 800b230:	0013      	movs	r3, r2
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	4313      	orrs	r3, r2
 800b236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	08da      	lsrs	r2, r3, #3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3208      	adds	r2, #8
 800b240:	0092      	lsls	r2, r2, #2
 800b242:	6939      	ldr	r1, [r7, #16]
 800b244:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	005b      	lsls	r3, r3, #1
 800b250:	2203      	movs	r2, #3
 800b252:	409a      	lsls	r2, r3
 800b254:	0013      	movs	r3, r2
 800b256:	43da      	mvns	r2, r3
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	4013      	ands	r3, r2
 800b25c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	2203      	movs	r2, #3
 800b264:	401a      	ands	r2, r3
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	409a      	lsls	r2, r3
 800b26c:	0013      	movs	r3, r2
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	4313      	orrs	r3, r2
 800b272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	23c0      	movs	r3, #192	@ 0xc0
 800b280:	029b      	lsls	r3, r3, #10
 800b282:	4013      	ands	r3, r2
 800b284:	d100      	bne.n	800b288 <HAL_GPIO_Init+0x17c>
 800b286:	e0a0      	b.n	800b3ca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b288:	4b57      	ldr	r3, [pc, #348]	@ (800b3e8 <HAL_GPIO_Init+0x2dc>)
 800b28a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b28c:	4b56      	ldr	r3, [pc, #344]	@ (800b3e8 <HAL_GPIO_Init+0x2dc>)
 800b28e:	2101      	movs	r1, #1
 800b290:	430a      	orrs	r2, r1
 800b292:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800b294:	4a55      	ldr	r2, [pc, #340]	@ (800b3ec <HAL_GPIO_Init+0x2e0>)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	089b      	lsrs	r3, r3, #2
 800b29a:	3302      	adds	r3, #2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	589b      	ldr	r3, [r3, r2]
 800b2a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2203      	movs	r2, #3
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	220f      	movs	r2, #15
 800b2ac:	409a      	lsls	r2, r3
 800b2ae:	0013      	movs	r3, r2
 800b2b0:	43da      	mvns	r2, r3
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	23a0      	movs	r3, #160	@ 0xa0
 800b2bc:	05db      	lsls	r3, r3, #23
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d01f      	beq.n	800b302 <HAL_GPIO_Init+0x1f6>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a4a      	ldr	r2, [pc, #296]	@ (800b3f0 <HAL_GPIO_Init+0x2e4>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d019      	beq.n	800b2fe <HAL_GPIO_Init+0x1f2>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a49      	ldr	r2, [pc, #292]	@ (800b3f4 <HAL_GPIO_Init+0x2e8>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d013      	beq.n	800b2fa <HAL_GPIO_Init+0x1ee>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a48      	ldr	r2, [pc, #288]	@ (800b3f8 <HAL_GPIO_Init+0x2ec>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d00d      	beq.n	800b2f6 <HAL_GPIO_Init+0x1ea>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a47      	ldr	r2, [pc, #284]	@ (800b3fc <HAL_GPIO_Init+0x2f0>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d007      	beq.n	800b2f2 <HAL_GPIO_Init+0x1e6>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a46      	ldr	r2, [pc, #280]	@ (800b400 <HAL_GPIO_Init+0x2f4>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d101      	bne.n	800b2ee <HAL_GPIO_Init+0x1e2>
 800b2ea:	2305      	movs	r3, #5
 800b2ec:	e00a      	b.n	800b304 <HAL_GPIO_Init+0x1f8>
 800b2ee:	2306      	movs	r3, #6
 800b2f0:	e008      	b.n	800b304 <HAL_GPIO_Init+0x1f8>
 800b2f2:	2304      	movs	r3, #4
 800b2f4:	e006      	b.n	800b304 <HAL_GPIO_Init+0x1f8>
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e004      	b.n	800b304 <HAL_GPIO_Init+0x1f8>
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	e002      	b.n	800b304 <HAL_GPIO_Init+0x1f8>
 800b2fe:	2301      	movs	r3, #1
 800b300:	e000      	b.n	800b304 <HAL_GPIO_Init+0x1f8>
 800b302:	2300      	movs	r3, #0
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	2103      	movs	r1, #3
 800b308:	400a      	ands	r2, r1
 800b30a:	0092      	lsls	r2, r2, #2
 800b30c:	4093      	lsls	r3, r2
 800b30e:	693a      	ldr	r2, [r7, #16]
 800b310:	4313      	orrs	r3, r2
 800b312:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b314:	4935      	ldr	r1, [pc, #212]	@ (800b3ec <HAL_GPIO_Init+0x2e0>)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	089b      	lsrs	r3, r3, #2
 800b31a:	3302      	adds	r3, #2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b322:	4b38      	ldr	r3, [pc, #224]	@ (800b404 <HAL_GPIO_Init+0x2f8>)
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	43da      	mvns	r2, r3
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	4013      	ands	r3, r2
 800b330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	2380      	movs	r3, #128	@ 0x80
 800b338:	035b      	lsls	r3, r3, #13
 800b33a:	4013      	ands	r3, r2
 800b33c:	d003      	beq.n	800b346 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	4313      	orrs	r3, r2
 800b344:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b346:	4b2f      	ldr	r3, [pc, #188]	@ (800b404 <HAL_GPIO_Init+0x2f8>)
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b34c:	4b2d      	ldr	r3, [pc, #180]	@ (800b404 <HAL_GPIO_Init+0x2f8>)
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	43da      	mvns	r2, r3
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	4013      	ands	r3, r2
 800b35a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	2380      	movs	r3, #128	@ 0x80
 800b362:	039b      	lsls	r3, r3, #14
 800b364:	4013      	ands	r3, r2
 800b366:	d003      	beq.n	800b370 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b370:	4b24      	ldr	r3, [pc, #144]	@ (800b404 <HAL_GPIO_Init+0x2f8>)
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800b376:	4b23      	ldr	r3, [pc, #140]	@ (800b404 <HAL_GPIO_Init+0x2f8>)
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	43da      	mvns	r2, r3
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	4013      	ands	r3, r2
 800b384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	685a      	ldr	r2, [r3, #4]
 800b38a:	2380      	movs	r3, #128	@ 0x80
 800b38c:	029b      	lsls	r3, r3, #10
 800b38e:	4013      	ands	r3, r2
 800b390:	d003      	beq.n	800b39a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4313      	orrs	r3, r2
 800b398:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b39a:	4b1a      	ldr	r3, [pc, #104]	@ (800b404 <HAL_GPIO_Init+0x2f8>)
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b3a0:	4b18      	ldr	r3, [pc, #96]	@ (800b404 <HAL_GPIO_Init+0x2f8>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	43da      	mvns	r2, r3
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	2380      	movs	r3, #128	@ 0x80
 800b3b6:	025b      	lsls	r3, r3, #9
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	d003      	beq.n	800b3c4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b3c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b404 <HAL_GPIO_Init+0x2f8>)
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	40da      	lsrs	r2, r3
 800b3d8:	1e13      	subs	r3, r2, #0
 800b3da:	d000      	beq.n	800b3de <HAL_GPIO_Init+0x2d2>
 800b3dc:	e6a2      	b.n	800b124 <HAL_GPIO_Init+0x18>
  }
}
 800b3de:	46c0      	nop			@ (mov r8, r8)
 800b3e0:	46c0      	nop			@ (mov r8, r8)
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	b006      	add	sp, #24
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	40021000 	.word	0x40021000
 800b3ec:	40010000 	.word	0x40010000
 800b3f0:	50000400 	.word	0x50000400
 800b3f4:	50000800 	.word	0x50000800
 800b3f8:	50000c00 	.word	0x50000c00
 800b3fc:	50001000 	.word	0x50001000
 800b400:	50001c00 	.word	0x50001c00
 800b404:	40010400 	.word	0x40010400

0800b408 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b412:	2300      	movs	r3, #0
 800b414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b416:	2300      	movs	r3, #0
 800b418:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b41e:	e0bc      	b.n	800b59a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b420:	2201      	movs	r2, #1
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	409a      	lsls	r2, r3
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	4013      	ands	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d100      	bne.n	800b434 <HAL_GPIO_DeInit+0x2c>
 800b432:	e0af      	b.n	800b594 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800b434:	4a5e      	ldr	r2, [pc, #376]	@ (800b5b0 <HAL_GPIO_DeInit+0x1a8>)
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	089b      	lsrs	r3, r3, #2
 800b43a:	3302      	adds	r3, #2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	589b      	ldr	r3, [r3, r2]
 800b440:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2203      	movs	r2, #3
 800b446:	4013      	ands	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	220f      	movs	r2, #15
 800b44c:	409a      	lsls	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	4013      	ands	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	23a0      	movs	r3, #160	@ 0xa0
 800b458:	05db      	lsls	r3, r3, #23
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d01f      	beq.n	800b49e <HAL_GPIO_DeInit+0x96>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a54      	ldr	r2, [pc, #336]	@ (800b5b4 <HAL_GPIO_DeInit+0x1ac>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d019      	beq.n	800b49a <HAL_GPIO_DeInit+0x92>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a53      	ldr	r2, [pc, #332]	@ (800b5b8 <HAL_GPIO_DeInit+0x1b0>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d013      	beq.n	800b496 <HAL_GPIO_DeInit+0x8e>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a52      	ldr	r2, [pc, #328]	@ (800b5bc <HAL_GPIO_DeInit+0x1b4>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d00d      	beq.n	800b492 <HAL_GPIO_DeInit+0x8a>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a51      	ldr	r2, [pc, #324]	@ (800b5c0 <HAL_GPIO_DeInit+0x1b8>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d007      	beq.n	800b48e <HAL_GPIO_DeInit+0x86>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a50      	ldr	r2, [pc, #320]	@ (800b5c4 <HAL_GPIO_DeInit+0x1bc>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d101      	bne.n	800b48a <HAL_GPIO_DeInit+0x82>
 800b486:	2305      	movs	r3, #5
 800b488:	e00a      	b.n	800b4a0 <HAL_GPIO_DeInit+0x98>
 800b48a:	2306      	movs	r3, #6
 800b48c:	e008      	b.n	800b4a0 <HAL_GPIO_DeInit+0x98>
 800b48e:	2304      	movs	r3, #4
 800b490:	e006      	b.n	800b4a0 <HAL_GPIO_DeInit+0x98>
 800b492:	2303      	movs	r3, #3
 800b494:	e004      	b.n	800b4a0 <HAL_GPIO_DeInit+0x98>
 800b496:	2302      	movs	r3, #2
 800b498:	e002      	b.n	800b4a0 <HAL_GPIO_DeInit+0x98>
 800b49a:	2301      	movs	r3, #1
 800b49c:	e000      	b.n	800b4a0 <HAL_GPIO_DeInit+0x98>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	2103      	movs	r1, #3
 800b4a4:	400a      	ands	r2, r1
 800b4a6:	0092      	lsls	r2, r2, #2
 800b4a8:	4093      	lsls	r3, r2
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d132      	bne.n	800b516 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b4b0:	4b45      	ldr	r3, [pc, #276]	@ (800b5c8 <HAL_GPIO_DeInit+0x1c0>)
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	43d9      	mvns	r1, r3
 800b4b8:	4b43      	ldr	r3, [pc, #268]	@ (800b5c8 <HAL_GPIO_DeInit+0x1c0>)
 800b4ba:	400a      	ands	r2, r1
 800b4bc:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b4be:	4b42      	ldr	r3, [pc, #264]	@ (800b5c8 <HAL_GPIO_DeInit+0x1c0>)
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	43d9      	mvns	r1, r3
 800b4c6:	4b40      	ldr	r3, [pc, #256]	@ (800b5c8 <HAL_GPIO_DeInit+0x1c0>)
 800b4c8:	400a      	ands	r2, r1
 800b4ca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b4cc:	4b3e      	ldr	r3, [pc, #248]	@ (800b5c8 <HAL_GPIO_DeInit+0x1c0>)
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	43d9      	mvns	r1, r3
 800b4d4:	4b3c      	ldr	r3, [pc, #240]	@ (800b5c8 <HAL_GPIO_DeInit+0x1c0>)
 800b4d6:	400a      	ands	r2, r1
 800b4d8:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b4da:	4b3b      	ldr	r3, [pc, #236]	@ (800b5c8 <HAL_GPIO_DeInit+0x1c0>)
 800b4dc:	689a      	ldr	r2, [r3, #8]
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	43d9      	mvns	r1, r3
 800b4e2:	4b39      	ldr	r3, [pc, #228]	@ (800b5c8 <HAL_GPIO_DeInit+0x1c0>)
 800b4e4:	400a      	ands	r2, r1
 800b4e6:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2203      	movs	r2, #3
 800b4ec:	4013      	ands	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	220f      	movs	r2, #15
 800b4f2:	409a      	lsls	r2, r3
 800b4f4:	0013      	movs	r3, r2
 800b4f6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b4f8:	4a2d      	ldr	r2, [pc, #180]	@ (800b5b0 <HAL_GPIO_DeInit+0x1a8>)
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	089b      	lsrs	r3, r3, #2
 800b4fe:	3302      	adds	r3, #2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	589a      	ldr	r2, [r3, r2]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	43d9      	mvns	r1, r3
 800b508:	4829      	ldr	r0, [pc, #164]	@ (800b5b0 <HAL_GPIO_DeInit+0x1a8>)
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	089b      	lsrs	r3, r3, #2
 800b50e:	400a      	ands	r2, r1
 800b510:	3302      	adds	r3, #2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	005b      	lsls	r3, r3, #1
 800b51e:	2103      	movs	r1, #3
 800b520:	4099      	lsls	r1, r3
 800b522:	000b      	movs	r3, r1
 800b524:	431a      	orrs	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	08da      	lsrs	r2, r3, #3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3208      	adds	r2, #8
 800b532:	0092      	lsls	r2, r2, #2
 800b534:	58d3      	ldr	r3, [r2, r3]
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	2107      	movs	r1, #7
 800b53a:	400a      	ands	r2, r1
 800b53c:	0092      	lsls	r2, r2, #2
 800b53e:	210f      	movs	r1, #15
 800b540:	4091      	lsls	r1, r2
 800b542:	000a      	movs	r2, r1
 800b544:	43d1      	mvns	r1, r2
 800b546:	697a      	ldr	r2, [r7, #20]
 800b548:	08d2      	lsrs	r2, r2, #3
 800b54a:	4019      	ands	r1, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3208      	adds	r2, #8
 800b550:	0092      	lsls	r2, r2, #2
 800b552:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	0052      	lsls	r2, r2, #1
 800b55c:	2103      	movs	r1, #3
 800b55e:	4091      	lsls	r1, r2
 800b560:	000a      	movs	r2, r1
 800b562:	43d2      	mvns	r2, r2
 800b564:	401a      	ands	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	2101      	movs	r1, #1
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	4091      	lsls	r1, r2
 800b574:	000a      	movs	r2, r1
 800b576:	43d2      	mvns	r2, r2
 800b578:	401a      	ands	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	0052      	lsls	r2, r2, #1
 800b586:	2103      	movs	r1, #3
 800b588:	4091      	lsls	r1, r2
 800b58a:	000a      	movs	r2, r1
 800b58c:	43d2      	mvns	r2, r2
 800b58e:	401a      	ands	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	609a      	str	r2, [r3, #8]
    }
    position++;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	3301      	adds	r3, #1
 800b598:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	40da      	lsrs	r2, r3
 800b5a0:	1e13      	subs	r3, r2, #0
 800b5a2:	d000      	beq.n	800b5a6 <HAL_GPIO_DeInit+0x19e>
 800b5a4:	e73c      	b.n	800b420 <HAL_GPIO_DeInit+0x18>
  }
}
 800b5a6:	46c0      	nop			@ (mov r8, r8)
 800b5a8:	46c0      	nop			@ (mov r8, r8)
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	b006      	add	sp, #24
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	40010000 	.word	0x40010000
 800b5b4:	50000400 	.word	0x50000400
 800b5b8:	50000800 	.word	0x50000800
 800b5bc:	50000c00 	.word	0x50000c00
 800b5c0:	50001000 	.word	0x50001000
 800b5c4:	50001c00 	.word	0x50001c00
 800b5c8:	40010400 	.word	0x40010400

0800b5cc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	000a      	movs	r2, r1
 800b5d6:	1cbb      	adds	r3, r7, #2
 800b5d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	1cba      	adds	r2, r7, #2
 800b5e0:	8812      	ldrh	r2, [r2, #0]
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	d004      	beq.n	800b5f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b5e6:	230f      	movs	r3, #15
 800b5e8:	18fb      	adds	r3, r7, r3
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	701a      	strb	r2, [r3, #0]
 800b5ee:	e003      	b.n	800b5f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b5f0:	230f      	movs	r3, #15
 800b5f2:	18fb      	adds	r3, r7, r3
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b5f8:	230f      	movs	r3, #15
 800b5fa:	18fb      	adds	r3, r7, r3
 800b5fc:	781b      	ldrb	r3, [r3, #0]
}
 800b5fe:	0018      	movs	r0, r3
 800b600:	46bd      	mov	sp, r7
 800b602:	b004      	add	sp, #16
 800b604:	bd80      	pop	{r7, pc}

0800b606 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b082      	sub	sp, #8
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	0008      	movs	r0, r1
 800b610:	0011      	movs	r1, r2
 800b612:	1cbb      	adds	r3, r7, #2
 800b614:	1c02      	adds	r2, r0, #0
 800b616:	801a      	strh	r2, [r3, #0]
 800b618:	1c7b      	adds	r3, r7, #1
 800b61a:	1c0a      	adds	r2, r1, #0
 800b61c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b61e:	1c7b      	adds	r3, r7, #1
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d004      	beq.n	800b630 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b626:	1cbb      	adds	r3, r7, #2
 800b628:	881a      	ldrh	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800b62e:	e003      	b.n	800b638 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800b630:	1cbb      	adds	r3, r7, #2
 800b632:	881a      	ldrh	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b638:	46c0      	nop			@ (mov r8, r8)
 800b63a:	46bd      	mov	sp, r7
 800b63c:	b002      	add	sp, #8
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e082      	b.n	800b758 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2241      	movs	r2, #65	@ 0x41
 800b656:	5c9b      	ldrb	r3, [r3, r2]
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d107      	bne.n	800b66e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2240      	movs	r2, #64	@ 0x40
 800b662:	2100      	movs	r1, #0
 800b664:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	0018      	movs	r0, r3
 800b66a:	f7fa fbbb 	bl	8005de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2241      	movs	r2, #65	@ 0x41
 800b672:	2124      	movs	r1, #36	@ 0x24
 800b674:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2101      	movs	r1, #1
 800b682:	438a      	bics	r2, r1
 800b684:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4934      	ldr	r1, [pc, #208]	@ (800b760 <HAL_I2C_Init+0x120>)
 800b690:	400a      	ands	r2, r1
 800b692:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	689a      	ldr	r2, [r3, #8]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4931      	ldr	r1, [pc, #196]	@ (800b764 <HAL_I2C_Init+0x124>)
 800b6a0:	400a      	ands	r2, r1
 800b6a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d108      	bne.n	800b6be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	689a      	ldr	r2, [r3, #8]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2180      	movs	r1, #128	@ 0x80
 800b6b6:	0209      	lsls	r1, r1, #8
 800b6b8:	430a      	orrs	r2, r1
 800b6ba:	609a      	str	r2, [r3, #8]
 800b6bc:	e007      	b.n	800b6ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	689a      	ldr	r2, [r3, #8]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2184      	movs	r1, #132	@ 0x84
 800b6c8:	0209      	lsls	r1, r1, #8
 800b6ca:	430a      	orrs	r2, r1
 800b6cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d104      	bne.n	800b6e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2280      	movs	r2, #128	@ 0x80
 800b6dc:	0112      	lsls	r2, r2, #4
 800b6de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	491f      	ldr	r1, [pc, #124]	@ (800b768 <HAL_I2C_Init+0x128>)
 800b6ec:	430a      	orrs	r2, r1
 800b6ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68da      	ldr	r2, [r3, #12]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	491a      	ldr	r1, [pc, #104]	@ (800b764 <HAL_I2C_Init+0x124>)
 800b6fc:	400a      	ands	r2, r1
 800b6fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	691a      	ldr	r2, [r3, #16]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	695b      	ldr	r3, [r3, #20]
 800b708:	431a      	orrs	r2, r3
 800b70a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	430a      	orrs	r2, r1
 800b718:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	69d9      	ldr	r1, [r3, #28]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1a      	ldr	r2, [r3, #32]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	430a      	orrs	r2, r1
 800b728:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2101      	movs	r1, #1
 800b736:	430a      	orrs	r2, r1
 800b738:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2241      	movs	r2, #65	@ 0x41
 800b744:	2120      	movs	r1, #32
 800b746:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2242      	movs	r2, #66	@ 0x42
 800b752:	2100      	movs	r1, #0
 800b754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	0018      	movs	r0, r3
 800b75a:	46bd      	mov	sp, r7
 800b75c:	b002      	add	sp, #8
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	f0ffffff 	.word	0xf0ffffff
 800b764:	ffff7fff 	.word	0xffff7fff
 800b768:	02008000 	.word	0x02008000

0800b76c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b76c:	b5b0      	push	{r4, r5, r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af02      	add	r7, sp, #8
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	0008      	movs	r0, r1
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	0019      	movs	r1, r3
 800b77a:	230a      	movs	r3, #10
 800b77c:	18fb      	adds	r3, r7, r3
 800b77e:	1c02      	adds	r2, r0, #0
 800b780:	801a      	strh	r2, [r3, #0]
 800b782:	2308      	movs	r3, #8
 800b784:	18fb      	adds	r3, r7, r3
 800b786:	1c0a      	adds	r2, r1, #0
 800b788:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2241      	movs	r2, #65	@ 0x41
 800b78e:	5c9b      	ldrb	r3, [r3, r2]
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b20      	cmp	r3, #32
 800b794:	d000      	beq.n	800b798 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800b796:	e0dd      	b.n	800b954 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699a      	ldr	r2, [r3, #24]
 800b79e:	2380      	movs	r3, #128	@ 0x80
 800b7a0:	021b      	lsls	r3, r3, #8
 800b7a2:	401a      	ands	r2, r3
 800b7a4:	2380      	movs	r3, #128	@ 0x80
 800b7a6:	021b      	lsls	r3, r3, #8
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d101      	bne.n	800b7b0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e0d2      	b.n	800b956 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2240      	movs	r2, #64	@ 0x40
 800b7b4:	5c9b      	ldrb	r3, [r3, r2]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d101      	bne.n	800b7be <HAL_I2C_Master_Transmit_DMA+0x52>
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	e0cb      	b.n	800b956 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2240      	movs	r2, #64	@ 0x40
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2241      	movs	r2, #65	@ 0x41
 800b7ca:	2121      	movs	r1, #33	@ 0x21
 800b7cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2242      	movs	r2, #66	@ 0x42
 800b7d2:	2110      	movs	r1, #16
 800b7d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2208      	movs	r2, #8
 800b7e6:	18ba      	adds	r2, r7, r2
 800b7e8:	8812      	ldrh	r2, [r2, #0]
 800b7ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4a5c      	ldr	r2, [pc, #368]	@ (800b960 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800b7f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	4a5b      	ldr	r2, [pc, #364]	@ (800b964 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800b7f6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	2bff      	cmp	r3, #255	@ 0xff
 800b800:	d906      	bls.n	800b810 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	22ff      	movs	r2, #255	@ 0xff
 800b806:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b808:	2380      	movs	r3, #128	@ 0x80
 800b80a:	045b      	lsls	r3, r3, #17
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	e007      	b.n	800b820 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b814:	b29a      	uxth	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b81a:	2380      	movs	r3, #128	@ 0x80
 800b81c:	049b      	lsls	r3, r3, #18
 800b81e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b824:	2b00      	cmp	r3, #0
 800b826:	d100      	bne.n	800b82a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800b828:	e078      	b.n	800b91c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d023      	beq.n	800b87a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b836:	4a4c      	ldr	r2, [pc, #304]	@ (800b968 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800b838:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b83e:	4a4b      	ldr	r2, [pc, #300]	@ (800b96c <HAL_I2C_Master_Transmit_DMA+0x200>)
 800b840:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b846:	2200      	movs	r2, #0
 800b848:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b84e:	2200      	movs	r2, #0
 800b850:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b856:	6879      	ldr	r1, [r7, #4]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3328      	adds	r3, #40	@ 0x28
 800b85e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b864:	2513      	movs	r5, #19
 800b866:	197c      	adds	r4, r7, r5
 800b868:	f7ff f8ac 	bl	800a9c4 <HAL_DMA_Start_IT>
 800b86c:	0003      	movs	r3, r0
 800b86e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b870:	197b      	adds	r3, r7, r5
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d13d      	bne.n	800b8f4 <HAL_I2C_Master_Transmit_DMA+0x188>
 800b878:	e013      	b.n	800b8a2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2241      	movs	r2, #65	@ 0x41
 800b87e:	2120      	movs	r1, #32
 800b880:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2242      	movs	r2, #66	@ 0x42
 800b886:	2100      	movs	r1, #0
 800b888:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b88e:	2280      	movs	r2, #128	@ 0x80
 800b890:	431a      	orrs	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2240      	movs	r2, #64	@ 0x40
 800b89a:	2100      	movs	r1, #0
 800b89c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e059      	b.n	800b956 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	697c      	ldr	r4, [r7, #20]
 800b8aa:	230a      	movs	r3, #10
 800b8ac:	18fb      	adds	r3, r7, r3
 800b8ae:	8819      	ldrh	r1, [r3, #0]
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	4b2f      	ldr	r3, [pc, #188]	@ (800b970 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	0023      	movs	r3, r4
 800b8b8:	f001 fd0e 	bl	800d2d8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2240      	movs	r2, #64	@ 0x40
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2110      	movs	r1, #16
 800b8da:	0018      	movs	r0, r3
 800b8dc:	f001 fd36 	bl	800d34c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2180      	movs	r1, #128	@ 0x80
 800b8ec:	01c9      	lsls	r1, r1, #7
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	e02d      	b.n	800b950 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2241      	movs	r2, #65	@ 0x41
 800b8f8:	2120      	movs	r1, #32
 800b8fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2242      	movs	r2, #66	@ 0x42
 800b900:	2100      	movs	r1, #0
 800b902:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b908:	2210      	movs	r2, #16
 800b90a:	431a      	orrs	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2240      	movs	r2, #64	@ 0x40
 800b914:	2100      	movs	r1, #0
 800b916:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e01c      	b.n	800b956 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4a15      	ldr	r2, [pc, #84]	@ (800b974 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800b920:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b926:	b2da      	uxtb	r2, r3
 800b928:	2380      	movs	r3, #128	@ 0x80
 800b92a:	049c      	lsls	r4, r3, #18
 800b92c:	230a      	movs	r3, #10
 800b92e:	18fb      	adds	r3, r7, r3
 800b930:	8819      	ldrh	r1, [r3, #0]
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	4b0e      	ldr	r3, [pc, #56]	@ (800b970 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	0023      	movs	r3, r4
 800b93a:	f001 fccd 	bl	800d2d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2240      	movs	r2, #64	@ 0x40
 800b942:	2100      	movs	r1, #0
 800b944:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2101      	movs	r1, #1
 800b94a:	0018      	movs	r0, r3
 800b94c:	f001 fcfe 	bl	800d34c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	e000      	b.n	800b956 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b954:	2302      	movs	r3, #2
  }
}
 800b956:	0018      	movs	r0, r3
 800b958:	46bd      	mov	sp, r7
 800b95a:	b006      	add	sp, #24
 800b95c:	bdb0      	pop	{r4, r5, r7, pc}
 800b95e:	46c0      	nop			@ (mov r8, r8)
 800b960:	ffff0000 	.word	0xffff0000
 800b964:	0800c171 	.word	0x0800c171
 800b968:	0800d129 	.word	0x0800d129
 800b96c:	0800d269 	.word	0x0800d269
 800b970:	80002000 	.word	0x80002000
 800b974:	0800bd1d 	.word	0x0800bd1d

0800b978 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b978:	b5b0      	push	{r4, r5, r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	0008      	movs	r0, r1
 800b982:	607a      	str	r2, [r7, #4]
 800b984:	0019      	movs	r1, r3
 800b986:	230a      	movs	r3, #10
 800b988:	18fb      	adds	r3, r7, r3
 800b98a:	1c02      	adds	r2, r0, #0
 800b98c:	801a      	strh	r2, [r3, #0]
 800b98e:	2308      	movs	r3, #8
 800b990:	18fb      	adds	r3, r7, r3
 800b992:	1c0a      	adds	r2, r1, #0
 800b994:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2241      	movs	r2, #65	@ 0x41
 800b99a:	5c9b      	ldrb	r3, [r3, r2]
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b20      	cmp	r3, #32
 800b9a0:	d000      	beq.n	800b9a4 <HAL_I2C_Master_Receive_DMA+0x2c>
 800b9a2:	e0dd      	b.n	800bb60 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	699a      	ldr	r2, [r3, #24]
 800b9aa:	2380      	movs	r3, #128	@ 0x80
 800b9ac:	021b      	lsls	r3, r3, #8
 800b9ae:	401a      	ands	r2, r3
 800b9b0:	2380      	movs	r3, #128	@ 0x80
 800b9b2:	021b      	lsls	r3, r3, #8
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d101      	bne.n	800b9bc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e0d2      	b.n	800bb62 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2240      	movs	r2, #64	@ 0x40
 800b9c0:	5c9b      	ldrb	r3, [r3, r2]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d101      	bne.n	800b9ca <HAL_I2C_Master_Receive_DMA+0x52>
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e0cb      	b.n	800bb62 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2240      	movs	r2, #64	@ 0x40
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2241      	movs	r2, #65	@ 0x41
 800b9d6:	2122      	movs	r1, #34	@ 0x22
 800b9d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2242      	movs	r2, #66	@ 0x42
 800b9de:	2110      	movs	r1, #16
 800b9e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	18ba      	adds	r2, r7, r2
 800b9f4:	8812      	ldrh	r2, [r2, #0]
 800b9f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	4a5c      	ldr	r2, [pc, #368]	@ (800bb6c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800b9fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	4a5b      	ldr	r2, [pc, #364]	@ (800bb70 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800ba02:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	2bff      	cmp	r3, #255	@ 0xff
 800ba0c:	d906      	bls.n	800ba1c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	22ff      	movs	r2, #255	@ 0xff
 800ba12:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800ba14:	2380      	movs	r3, #128	@ 0x80
 800ba16:	045b      	lsls	r3, r3, #17
 800ba18:	617b      	str	r3, [r7, #20]
 800ba1a:	e007      	b.n	800ba2c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ba26:	2380      	movs	r3, #128	@ 0x80
 800ba28:	049b      	lsls	r3, r3, #18
 800ba2a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d100      	bne.n	800ba36 <HAL_I2C_Master_Receive_DMA+0xbe>
 800ba34:	e078      	b.n	800bb28 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d023      	beq.n	800ba86 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba42:	4a4c      	ldr	r2, [pc, #304]	@ (800bb74 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800ba44:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba4a:	4a4b      	ldr	r2, [pc, #300]	@ (800bb78 <HAL_I2C_Master_Receive_DMA+0x200>)
 800ba4c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba52:	2200      	movs	r2, #0
 800ba54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3324      	adds	r3, #36	@ 0x24
 800ba68:	0019      	movs	r1, r3
 800ba6a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ba70:	2513      	movs	r5, #19
 800ba72:	197c      	adds	r4, r7, r5
 800ba74:	f7fe ffa6 	bl	800a9c4 <HAL_DMA_Start_IT>
 800ba78:	0003      	movs	r3, r0
 800ba7a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ba7c:	197b      	adds	r3, r7, r5
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d13d      	bne.n	800bb00 <HAL_I2C_Master_Receive_DMA+0x188>
 800ba84:	e013      	b.n	800baae <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2241      	movs	r2, #65	@ 0x41
 800ba8a:	2120      	movs	r1, #32
 800ba8c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2242      	movs	r2, #66	@ 0x42
 800ba92:	2100      	movs	r1, #0
 800ba94:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba9a:	2280      	movs	r2, #128	@ 0x80
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2240      	movs	r2, #64	@ 0x40
 800baa6:	2100      	movs	r1, #0
 800baa8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e059      	b.n	800bb62 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	697c      	ldr	r4, [r7, #20]
 800bab6:	230a      	movs	r3, #10
 800bab8:	18fb      	adds	r3, r7, r3
 800baba:	8819      	ldrh	r1, [r3, #0]
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	4b2f      	ldr	r3, [pc, #188]	@ (800bb7c <HAL_I2C_Master_Receive_DMA+0x204>)
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	0023      	movs	r3, r4
 800bac4:	f001 fc08 	bl	800d2d8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2240      	movs	r2, #64	@ 0x40
 800bade:	2100      	movs	r1, #0
 800bae0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2110      	movs	r1, #16
 800bae6:	0018      	movs	r0, r3
 800bae8:	f001 fc30 	bl	800d34c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2180      	movs	r1, #128	@ 0x80
 800baf8:	0209      	lsls	r1, r1, #8
 800bafa:	430a      	orrs	r2, r1
 800bafc:	601a      	str	r2, [r3, #0]
 800bafe:	e02d      	b.n	800bb5c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2241      	movs	r2, #65	@ 0x41
 800bb04:	2120      	movs	r1, #32
 800bb06:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2242      	movs	r2, #66	@ 0x42
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb14:	2210      	movs	r2, #16
 800bb16:	431a      	orrs	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2240      	movs	r2, #64	@ 0x40
 800bb20:	2100      	movs	r1, #0
 800bb22:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	e01c      	b.n	800bb62 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4a15      	ldr	r2, [pc, #84]	@ (800bb80 <HAL_I2C_Master_Receive_DMA+0x208>)
 800bb2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	2380      	movs	r3, #128	@ 0x80
 800bb36:	049c      	lsls	r4, r3, #18
 800bb38:	230a      	movs	r3, #10
 800bb3a:	18fb      	adds	r3, r7, r3
 800bb3c:	8819      	ldrh	r1, [r3, #0]
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	4b0e      	ldr	r3, [pc, #56]	@ (800bb7c <HAL_I2C_Master_Receive_DMA+0x204>)
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	0023      	movs	r3, r4
 800bb46:	f001 fbc7 	bl	800d2d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2240      	movs	r2, #64	@ 0x40
 800bb4e:	2100      	movs	r1, #0
 800bb50:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2101      	movs	r1, #1
 800bb56:	0018      	movs	r0, r3
 800bb58:	f001 fbf8 	bl	800d34c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	e000      	b.n	800bb62 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bb60:	2302      	movs	r3, #2
  }
}
 800bb62:	0018      	movs	r0, r3
 800bb64:	46bd      	mov	sp, r7
 800bb66:	b006      	add	sp, #24
 800bb68:	bdb0      	pop	{r4, r5, r7, pc}
 800bb6a:	46c0      	nop			@ (mov r8, r8)
 800bb6c:	ffff0000 	.word	0xffff0000
 800bb70:	0800c171 	.word	0x0800c171
 800bb74:	0800d1c9 	.word	0x0800d1c9
 800bb78:	0800d269 	.word	0x0800d269
 800bb7c:	80002400 	.word	0x80002400
 800bb80:	0800bd1d 	.word	0x0800bd1d

0800bb84 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d005      	beq.n	800bbb0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	68f9      	ldr	r1, [r7, #12]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	4798      	blx	r3
  }
}
 800bbb0:	46c0      	nop			@ (mov r8, r8)
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	b004      	add	sp, #16
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	2380      	movs	r3, #128	@ 0x80
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	d00e      	beq.n	800bbf8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	2280      	movs	r2, #128	@ 0x80
 800bbde:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bbe0:	d00a      	beq.n	800bbf8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2280      	movs	r2, #128	@ 0x80
 800bbf4:	0052      	lsls	r2, r2, #1
 800bbf6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	2380      	movs	r3, #128	@ 0x80
 800bbfc:	00db      	lsls	r3, r3, #3
 800bbfe:	4013      	ands	r3, r2
 800bc00:	d00e      	beq.n	800bc20 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	2280      	movs	r2, #128	@ 0x80
 800bc06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bc08:	d00a      	beq.n	800bc20 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc0e:	2208      	movs	r2, #8
 800bc10:	431a      	orrs	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2280      	movs	r2, #128	@ 0x80
 800bc1c:	00d2      	lsls	r2, r2, #3
 800bc1e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	2380      	movs	r3, #128	@ 0x80
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4013      	ands	r3, r2
 800bc28:	d00e      	beq.n	800bc48 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2280      	movs	r2, #128	@ 0x80
 800bc2e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bc30:	d00a      	beq.n	800bc48 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc36:	2202      	movs	r2, #2
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2280      	movs	r2, #128	@ 0x80
 800bc44:	0092      	lsls	r2, r2, #2
 800bc46:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc4c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	220b      	movs	r2, #11
 800bc52:	4013      	ands	r3, r2
 800bc54:	d005      	beq.n	800bc62 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	0011      	movs	r1, r2
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	f001 f915 	bl	800ce8c <I2C_ITError>
  }
}
 800bc62:	46c0      	nop			@ (mov r8, r8)
 800bc64:	46bd      	mov	sp, r7
 800bc66:	b006      	add	sp, #24
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b082      	sub	sp, #8
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bc72:	46c0      	nop			@ (mov r8, r8)
 800bc74:	46bd      	mov	sp, r7
 800bc76:	b002      	add	sp, #8
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bc82:	46c0      	nop			@ (mov r8, r8)
 800bc84:	46bd      	mov	sp, r7
 800bc86:	b002      	add	sp, #8
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b082      	sub	sp, #8
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bc92:	46c0      	nop			@ (mov r8, r8)
 800bc94:	46bd      	mov	sp, r7
 800bc96:	b002      	add	sp, #8
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b082      	sub	sp, #8
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bca2:	46c0      	nop			@ (mov r8, r8)
 800bca4:	46bd      	mov	sp, r7
 800bca6:	b002      	add	sp, #8
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b082      	sub	sp, #8
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	0008      	movs	r0, r1
 800bcb4:	0011      	movs	r1, r2
 800bcb6:	1cfb      	adds	r3, r7, #3
 800bcb8:	1c02      	adds	r2, r0, #0
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	003b      	movs	r3, r7
 800bcbe:	1c0a      	adds	r2, r1, #0
 800bcc0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bcc2:	46c0      	nop			@ (mov r8, r8)
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	b002      	add	sp, #8
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b082      	sub	sp, #8
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bcd2:	46c0      	nop			@ (mov r8, r8)
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	b002      	add	sp, #8
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b082      	sub	sp, #8
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bce2:	46c0      	nop			@ (mov r8, r8)
 800bce4:	46bd      	mov	sp, r7
 800bce6:	b002      	add	sp, #8
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b082      	sub	sp, #8
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bcf2:	46c0      	nop			@ (mov r8, r8)
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	b002      	add	sp, #8
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b082      	sub	sp, #8
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bd02:	46c0      	nop			@ (mov r8, r8)
 800bd04:	46bd      	mov	sp, r7
 800bd06:	b002      	add	sp, #8
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bd12:	46c0      	nop			@ (mov r8, r8)
 800bd14:	46bd      	mov	sp, r7
 800bd16:	b002      	add	sp, #8
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bd1c:	b590      	push	{r4, r7, lr}
 800bd1e:	b089      	sub	sp, #36	@ 0x24
 800bd20:	af02      	add	r7, sp, #8
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2240      	movs	r2, #64	@ 0x40
 800bd30:	5c9b      	ldrb	r3, [r3, r2]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d101      	bne.n	800bd3a <I2C_Master_ISR_IT+0x1e>
 800bd36:	2302      	movs	r3, #2
 800bd38:	e113      	b.n	800bf62 <I2C_Master_ISR_IT+0x246>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2240      	movs	r2, #64	@ 0x40
 800bd3e:	2101      	movs	r1, #1
 800bd40:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2210      	movs	r2, #16
 800bd46:	4013      	ands	r3, r2
 800bd48:	d012      	beq.n	800bd70 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2210      	movs	r2, #16
 800bd4e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd50:	d00e      	beq.n	800bd70 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2210      	movs	r2, #16
 800bd58:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd5e:	2204      	movs	r2, #4
 800bd60:	431a      	orrs	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	0018      	movs	r0, r3
 800bd6a:	f001 f9ba 	bl	800d0e2 <I2C_Flush_TXDR>
 800bd6e:	e0e5      	b.n	800bf3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	2204      	movs	r2, #4
 800bd74:	4013      	ands	r3, r2
 800bd76:	d021      	beq.n	800bdbc <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2204      	movs	r2, #4
 800bd7c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bd7e:	d01d      	beq.n	800bdbc <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	2204      	movs	r2, #4
 800bd84:	4393      	bics	r3, r2
 800bd86:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd92:	b2d2      	uxtb	r2, r2
 800bd94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bda4:	3b01      	subs	r3, #1
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bdba:	e0bf      	b.n	800bf3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	d01c      	beq.n	800bdfe <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bdca:	d018      	beq.n	800bdfe <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd0:	781a      	ldrb	r2, [r3, #0]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bde6:	3b01      	subs	r3, #1
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	b29a      	uxth	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bdfc:	e09e      	b.n	800bf3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2280      	movs	r2, #128	@ 0x80
 800be02:	4013      	ands	r3, r2
 800be04:	d100      	bne.n	800be08 <I2C_Master_ISR_IT+0xec>
 800be06:	e069      	b.n	800bedc <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2240      	movs	r2, #64	@ 0x40
 800be0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800be0e:	d065      	beq.n	800bedc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be14:	b29b      	uxth	r3, r3
 800be16:	2b00      	cmp	r3, #0
 800be18:	d04a      	beq.n	800beb0 <I2C_Master_ISR_IT+0x194>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d146      	bne.n	800beb0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	b29a      	uxth	r2, r3
 800be2a:	2112      	movs	r1, #18
 800be2c:	187b      	adds	r3, r7, r1
 800be2e:	0592      	lsls	r2, r2, #22
 800be30:	0d92      	lsrs	r2, r2, #22
 800be32:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2bff      	cmp	r3, #255	@ 0xff
 800be3c:	d910      	bls.n	800be60 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	22ff      	movs	r2, #255	@ 0xff
 800be42:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	2380      	movs	r3, #128	@ 0x80
 800be4c:	045c      	lsls	r4, r3, #17
 800be4e:	187b      	adds	r3, r7, r1
 800be50:	8819      	ldrh	r1, [r3, #0]
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	2300      	movs	r3, #0
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	0023      	movs	r3, r4
 800be5a:	f001 fa3d 	bl	800d2d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be5e:	e03c      	b.n	800beda <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be64:	b29a      	uxth	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6e:	4a3f      	ldr	r2, [pc, #252]	@ (800bf6c <I2C_Master_ISR_IT+0x250>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d00e      	beq.n	800be92 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be78:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800be7e:	2312      	movs	r3, #18
 800be80:	18fb      	adds	r3, r7, r3
 800be82:	8819      	ldrh	r1, [r3, #0]
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	2300      	movs	r3, #0
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	0023      	movs	r3, r4
 800be8c:	f001 fa24 	bl	800d2d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be90:	e023      	b.n	800beda <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be96:	b2da      	uxtb	r2, r3
 800be98:	2380      	movs	r3, #128	@ 0x80
 800be9a:	049c      	lsls	r4, r3, #18
 800be9c:	2312      	movs	r3, #18
 800be9e:	18fb      	adds	r3, r7, r3
 800bea0:	8819      	ldrh	r1, [r3, #0]
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	2300      	movs	r3, #0
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	0023      	movs	r3, r4
 800beaa:	f001 fa15 	bl	800d2d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800beae:	e014      	b.n	800beda <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685a      	ldr	r2, [r3, #4]
 800beb6:	2380      	movs	r3, #128	@ 0x80
 800beb8:	049b      	lsls	r3, r3, #18
 800beba:	401a      	ands	r2, r3
 800bebc:	2380      	movs	r3, #128	@ 0x80
 800bebe:	049b      	lsls	r3, r3, #18
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d004      	beq.n	800bece <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	0018      	movs	r0, r3
 800bec8:	f000 fcf4 	bl	800c8b4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800becc:	e036      	b.n	800bf3c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2140      	movs	r1, #64	@ 0x40
 800bed2:	0018      	movs	r0, r3
 800bed4:	f000 ffda 	bl	800ce8c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bed8:	e030      	b.n	800bf3c <I2C_Master_ISR_IT+0x220>
 800beda:	e02f      	b.n	800bf3c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	2240      	movs	r2, #64	@ 0x40
 800bee0:	4013      	ands	r3, r2
 800bee2:	d02b      	beq.n	800bf3c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2240      	movs	r2, #64	@ 0x40
 800bee8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800beea:	d027      	beq.n	800bf3c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d11d      	bne.n	800bf32 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	2380      	movs	r3, #128	@ 0x80
 800befe:	049b      	lsls	r3, r3, #18
 800bf00:	401a      	ands	r2, r3
 800bf02:	2380      	movs	r3, #128	@ 0x80
 800bf04:	049b      	lsls	r3, r3, #18
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d018      	beq.n	800bf3c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf0e:	4a17      	ldr	r2, [pc, #92]	@ (800bf6c <I2C_Master_ISR_IT+0x250>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d109      	bne.n	800bf28 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685a      	ldr	r2, [r3, #4]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2180      	movs	r1, #128	@ 0x80
 800bf20:	01c9      	lsls	r1, r1, #7
 800bf22:	430a      	orrs	r2, r1
 800bf24:	605a      	str	r2, [r3, #4]
 800bf26:	e009      	b.n	800bf3c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	0018      	movs	r0, r3
 800bf2c:	f000 fcc2 	bl	800c8b4 <I2C_ITMasterSeqCplt>
 800bf30:	e004      	b.n	800bf3c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2140      	movs	r1, #64	@ 0x40
 800bf36:	0018      	movs	r0, r3
 800bf38:	f000 ffa8 	bl	800ce8c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2220      	movs	r2, #32
 800bf40:	4013      	ands	r3, r2
 800bf42:	d009      	beq.n	800bf58 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2220      	movs	r2, #32
 800bf48:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bf4a:	d005      	beq.n	800bf58 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bf4c:	697a      	ldr	r2, [r7, #20]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	0011      	movs	r1, r2
 800bf52:	0018      	movs	r0, r3
 800bf54:	f000 fd54 	bl	800ca00 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2240      	movs	r2, #64	@ 0x40
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	0018      	movs	r0, r3
 800bf64:	46bd      	mov	sp, r7
 800bf66:	b007      	add	sp, #28
 800bf68:	bd90      	pop	{r4, r7, pc}
 800bf6a:	46c0      	nop			@ (mov r8, r8)
 800bf6c:	ffff0000 	.word	0xffff0000

0800bf70 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf80:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2240      	movs	r2, #64	@ 0x40
 800bf8a:	5c9b      	ldrb	r3, [r3, r2]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d101      	bne.n	800bf94 <I2C_Slave_ISR_IT+0x24>
 800bf90:	2302      	movs	r3, #2
 800bf92:	e0e6      	b.n	800c162 <I2C_Slave_ISR_IT+0x1f2>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2240      	movs	r2, #64	@ 0x40
 800bf98:	2101      	movs	r1, #1
 800bf9a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2220      	movs	r2, #32
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	d009      	beq.n	800bfb8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2220      	movs	r2, #32
 800bfa8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfaa:	d005      	beq.n	800bfb8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	0011      	movs	r1, r2
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	f000 fdf2 	bl	800cb9c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	2210      	movs	r2, #16
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	d052      	beq.n	800c066 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2210      	movs	r2, #16
 800bfc4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bfc6:	d04e      	beq.n	800c066 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d12d      	bne.n	800c02e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2241      	movs	r2, #65	@ 0x41
 800bfd6:	5c9b      	ldrb	r3, [r3, r2]
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b28      	cmp	r3, #40	@ 0x28
 800bfdc:	d10b      	bne.n	800bff6 <I2C_Slave_ISR_IT+0x86>
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	2380      	movs	r3, #128	@ 0x80
 800bfe2:	049b      	lsls	r3, r3, #18
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d106      	bne.n	800bff6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	0011      	movs	r1, r2
 800bfee:	0018      	movs	r0, r3
 800bff0:	f000 fef4 	bl	800cddc <I2C_ITListenCplt>
 800bff4:	e036      	b.n	800c064 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2241      	movs	r2, #65	@ 0x41
 800bffa:	5c9b      	ldrb	r3, [r3, r2]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b29      	cmp	r3, #41	@ 0x29
 800c000:	d110      	bne.n	800c024 <I2C_Slave_ISR_IT+0xb4>
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	4a59      	ldr	r2, [pc, #356]	@ (800c16c <I2C_Slave_ISR_IT+0x1fc>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d00c      	beq.n	800c024 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2210      	movs	r2, #16
 800c010:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	0018      	movs	r0, r3
 800c016:	f001 f864 	bl	800d0e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	0018      	movs	r0, r3
 800c01e:	f000 fc8b 	bl	800c938 <I2C_ITSlaveSeqCplt>
 800c022:	e01f      	b.n	800c064 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2210      	movs	r2, #16
 800c02a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c02c:	e091      	b.n	800c152 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2210      	movs	r2, #16
 800c034:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c03a:	2204      	movs	r2, #4
 800c03c:	431a      	orrs	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d005      	beq.n	800c054 <I2C_Slave_ISR_IT+0xe4>
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	2380      	movs	r3, #128	@ 0x80
 800c04c:	045b      	lsls	r3, r3, #17
 800c04e:	429a      	cmp	r2, r3
 800c050:	d000      	beq.n	800c054 <I2C_Slave_ISR_IT+0xe4>
 800c052:	e07e      	b.n	800c152 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	0011      	movs	r1, r2
 800c05c:	0018      	movs	r0, r3
 800c05e:	f000 ff15 	bl	800ce8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c062:	e076      	b.n	800c152 <I2C_Slave_ISR_IT+0x1e2>
 800c064:	e075      	b.n	800c152 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	2204      	movs	r2, #4
 800c06a:	4013      	ands	r3, r2
 800c06c:	d02f      	beq.n	800c0ce <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2204      	movs	r2, #4
 800c072:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c074:	d02b      	beq.n	800c0ce <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d018      	beq.n	800c0b2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08a:	b2d2      	uxtb	r2, r2
 800c08c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c092:	1c5a      	adds	r2, r3, #1
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c09c:	3b01      	subs	r3, #1
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d14c      	bne.n	800c156 <I2C_Slave_ISR_IT+0x1e6>
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	4a2b      	ldr	r2, [pc, #172]	@ (800c16c <I2C_Slave_ISR_IT+0x1fc>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d048      	beq.n	800c156 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f000 fc36 	bl	800c938 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c0cc:	e043      	b.n	800c156 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	2208      	movs	r2, #8
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	d00a      	beq.n	800c0ec <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2208      	movs	r2, #8
 800c0da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c0dc:	d006      	beq.n	800c0ec <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	0011      	movs	r1, r2
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	f000 fb41 	bl	800c76c <I2C_ITAddrCplt>
 800c0ea:	e035      	b.n	800c158 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	d031      	beq.n	800c158 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c0fa:	d02d      	beq.n	800c158 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c100:	b29b      	uxth	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d018      	beq.n	800c138 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10a:	781a      	ldrb	r2, [r3, #0]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c116:	1c5a      	adds	r2, r3, #1
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c120:	b29b      	uxth	r3, r3
 800c122:	3b01      	subs	r3, #1
 800c124:	b29a      	uxth	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c12e:	3b01      	subs	r3, #1
 800c130:	b29a      	uxth	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c136:	e00f      	b.n	800c158 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c138:	697a      	ldr	r2, [r7, #20]
 800c13a:	2380      	movs	r3, #128	@ 0x80
 800c13c:	045b      	lsls	r3, r3, #17
 800c13e:	429a      	cmp	r2, r3
 800c140:	d002      	beq.n	800c148 <I2C_Slave_ISR_IT+0x1d8>
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d107      	bne.n	800c158 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	0018      	movs	r0, r3
 800c14c:	f000 fbf4 	bl	800c938 <I2C_ITSlaveSeqCplt>
 800c150:	e002      	b.n	800c158 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800c152:	46c0      	nop			@ (mov r8, r8)
 800c154:	e000      	b.n	800c158 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800c156:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2240      	movs	r2, #64	@ 0x40
 800c15c:	2100      	movs	r1, #0
 800c15e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c160:	2300      	movs	r3, #0
}
 800c162:	0018      	movs	r0, r3
 800c164:	46bd      	mov	sp, r7
 800c166:	b006      	add	sp, #24
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	46c0      	nop			@ (mov r8, r8)
 800c16c:	ffff0000 	.word	0xffff0000

0800c170 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c170:	b590      	push	{r4, r7, lr}
 800c172:	b089      	sub	sp, #36	@ 0x24
 800c174:	af02      	add	r7, sp, #8
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2240      	movs	r2, #64	@ 0x40
 800c180:	5c9b      	ldrb	r3, [r3, r2]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d101      	bne.n	800c18a <I2C_Master_ISR_DMA+0x1a>
 800c186:	2302      	movs	r3, #2
 800c188:	e0e7      	b.n	800c35a <I2C_Master_ISR_DMA+0x1ea>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2240      	movs	r2, #64	@ 0x40
 800c18e:	2101      	movs	r1, #1
 800c190:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2210      	movs	r2, #16
 800c196:	4013      	ands	r3, r2
 800c198:	d017      	beq.n	800c1ca <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2210      	movs	r2, #16
 800c19e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c1a0:	d013      	beq.n	800c1ca <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2210      	movs	r2, #16
 800c1a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1ae:	2204      	movs	r2, #4
 800c1b0:	431a      	orrs	r2, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2120      	movs	r1, #32
 800c1ba:	0018      	movs	r0, r3
 800c1bc:	f001 f8c6 	bl	800d34c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	0018      	movs	r0, r3
 800c1c4:	f000 ff8d 	bl	800d0e2 <I2C_Flush_TXDR>
 800c1c8:	e0c2      	b.n	800c350 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2280      	movs	r2, #128	@ 0x80
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	d100      	bne.n	800c1d4 <I2C_Master_ISR_DMA+0x64>
 800c1d2:	e07c      	b.n	800c2ce <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2240      	movs	r2, #64	@ 0x40
 800c1d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c1da:	d100      	bne.n	800c1de <I2C_Master_ISR_DMA+0x6e>
 800c1dc:	e077      	b.n	800c2ce <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2140      	movs	r1, #64	@ 0x40
 800c1ea:	438a      	bics	r2, r1
 800c1ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d055      	beq.n	800c2a4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	2312      	movs	r3, #18
 800c202:	18fb      	adds	r3, r7, r3
 800c204:	0592      	lsls	r2, r2, #22
 800c206:	0d92      	lsrs	r2, r2, #22
 800c208:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c20e:	b29b      	uxth	r3, r3
 800c210:	2bff      	cmp	r3, #255	@ 0xff
 800c212:	d906      	bls.n	800c222 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	22ff      	movs	r2, #255	@ 0xff
 800c218:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800c21a:	2380      	movs	r3, #128	@ 0x80
 800c21c:	045b      	lsls	r3, r3, #17
 800c21e:	617b      	str	r3, [r7, #20]
 800c220:	e010      	b.n	800c244 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c226:	b29a      	uxth	r2, r3
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c230:	4a4c      	ldr	r2, [pc, #304]	@ (800c364 <I2C_Master_ISR_DMA+0x1f4>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d003      	beq.n	800c23e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c23a:	617b      	str	r3, [r7, #20]
 800c23c:	e002      	b.n	800c244 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c23e:	2380      	movs	r3, #128	@ 0x80
 800c240:	049b      	lsls	r3, r3, #18
 800c242:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	697c      	ldr	r4, [r7, #20]
 800c24c:	2312      	movs	r3, #18
 800c24e:	18fb      	adds	r3, r7, r3
 800c250:	8819      	ldrh	r1, [r3, #0]
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	2300      	movs	r3, #0
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	0023      	movs	r3, r4
 800c25a:	f001 f83d 	bl	800d2d8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c262:	b29a      	uxth	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2241      	movs	r2, #65	@ 0x41
 800c274:	5c9b      	ldrb	r3, [r3, r2]
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b22      	cmp	r3, #34	@ 0x22
 800c27a:	d109      	bne.n	800c290 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2180      	movs	r1, #128	@ 0x80
 800c288:	0209      	lsls	r1, r1, #8
 800c28a:	430a      	orrs	r2, r1
 800c28c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c28e:	e05f      	b.n	800c350 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2180      	movs	r1, #128	@ 0x80
 800c29c:	01c9      	lsls	r1, r1, #7
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c2a2:	e055      	b.n	800c350 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	685a      	ldr	r2, [r3, #4]
 800c2aa:	2380      	movs	r3, #128	@ 0x80
 800c2ac:	049b      	lsls	r3, r3, #18
 800c2ae:	401a      	ands	r2, r3
 800c2b0:	2380      	movs	r3, #128	@ 0x80
 800c2b2:	049b      	lsls	r3, r3, #18
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d004      	beq.n	800c2c2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	f000 fafa 	bl	800c8b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c2c0:	e046      	b.n	800c350 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2140      	movs	r1, #64	@ 0x40
 800c2c6:	0018      	movs	r0, r3
 800c2c8:	f000 fde0 	bl	800ce8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c2cc:	e040      	b.n	800c350 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2240      	movs	r2, #64	@ 0x40
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	d02c      	beq.n	800c330 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2240      	movs	r2, #64	@ 0x40
 800c2da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c2dc:	d028      	beq.n	800c330 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d11d      	bne.n	800c324 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	2380      	movs	r3, #128	@ 0x80
 800c2f0:	049b      	lsls	r3, r3, #18
 800c2f2:	401a      	ands	r2, r3
 800c2f4:	2380      	movs	r3, #128	@ 0x80
 800c2f6:	049b      	lsls	r3, r3, #18
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d028      	beq.n	800c34e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c300:	4a18      	ldr	r2, [pc, #96]	@ (800c364 <I2C_Master_ISR_DMA+0x1f4>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d109      	bne.n	800c31a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2180      	movs	r1, #128	@ 0x80
 800c312:	01c9      	lsls	r1, r1, #7
 800c314:	430a      	orrs	r2, r1
 800c316:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c318:	e019      	b.n	800c34e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	0018      	movs	r0, r3
 800c31e:	f000 fac9 	bl	800c8b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c322:	e014      	b.n	800c34e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2140      	movs	r1, #64	@ 0x40
 800c328:	0018      	movs	r0, r3
 800c32a:	f000 fdaf 	bl	800ce8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c32e:	e00e      	b.n	800c34e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2220      	movs	r2, #32
 800c334:	4013      	ands	r3, r2
 800c336:	d00b      	beq.n	800c350 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2220      	movs	r2, #32
 800c33c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c33e:	d007      	beq.n	800c350 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	0011      	movs	r1, r2
 800c346:	0018      	movs	r0, r3
 800c348:	f000 fb5a 	bl	800ca00 <I2C_ITMasterCplt>
 800c34c:	e000      	b.n	800c350 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800c34e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2240      	movs	r2, #64	@ 0x40
 800c354:	2100      	movs	r1, #0
 800c356:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	0018      	movs	r0, r3
 800c35c:	46bd      	mov	sp, r7
 800c35e:	b007      	add	sp, #28
 800c360:	bd90      	pop	{r4, r7, pc}
 800c362:	46c0      	nop			@ (mov r8, r8)
 800c364:	ffff0000 	.word	0xffff0000

0800c368 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b089      	sub	sp, #36	@ 0x24
 800c36c:	af02      	add	r7, sp, #8
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c374:	4b88      	ldr	r3, [pc, #544]	@ (800c598 <I2C_Mem_ISR_DMA+0x230>)
 800c376:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2240      	movs	r2, #64	@ 0x40
 800c37c:	5c9b      	ldrb	r3, [r3, r2]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d101      	bne.n	800c386 <I2C_Mem_ISR_DMA+0x1e>
 800c382:	2302      	movs	r3, #2
 800c384:	e104      	b.n	800c590 <I2C_Mem_ISR_DMA+0x228>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2240      	movs	r2, #64	@ 0x40
 800c38a:	2101      	movs	r1, #1
 800c38c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2210      	movs	r2, #16
 800c392:	4013      	ands	r3, r2
 800c394:	d017      	beq.n	800c3c6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2210      	movs	r2, #16
 800c39a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c39c:	d013      	beq.n	800c3c6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2210      	movs	r2, #16
 800c3a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3aa:	2204      	movs	r2, #4
 800c3ac:	431a      	orrs	r2, r3
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2120      	movs	r1, #32
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	f000 ffc8 	bl	800d34c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	0018      	movs	r0, r3
 800c3c0:	f000 fe8f 	bl	800d0e2 <I2C_Flush_TXDR>
 800c3c4:	e0df      	b.n	800c586 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	d00d      	beq.n	800c3ea <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c3d4:	d009      	beq.n	800c3ea <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c3de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	4252      	negs	r2, r2
 800c3e6:	651a      	str	r2, [r3, #80]	@ 0x50
 800c3e8:	e0cd      	b.n	800c586 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2280      	movs	r2, #128	@ 0x80
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	d05e      	beq.n	800c4b0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2240      	movs	r2, #64	@ 0x40
 800c3f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c3f8:	d05a      	beq.n	800c4b0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2110      	movs	r1, #16
 800c3fe:	0018      	movs	r0, r3
 800c400:	f000 ffa4 	bl	800d34c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c408:	b29b      	uxth	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d04a      	beq.n	800c4a4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c412:	b29b      	uxth	r3, r3
 800c414:	2bff      	cmp	r3, #255	@ 0xff
 800c416:	d910      	bls.n	800c43a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	22ff      	movs	r2, #255	@ 0xff
 800c41c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c422:	b299      	uxth	r1, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	2380      	movs	r3, #128	@ 0x80
 800c42c:	045b      	lsls	r3, r3, #17
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	2400      	movs	r4, #0
 800c432:	9400      	str	r4, [sp, #0]
 800c434:	f000 ff50 	bl	800d2d8 <I2C_TransferConfig>
 800c438:	e011      	b.n	800c45e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c43e:	b29a      	uxth	r2, r3
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c448:	b299      	uxth	r1, r3
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	2380      	movs	r3, #128	@ 0x80
 800c452:	049b      	lsls	r3, r3, #18
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	2400      	movs	r4, #0
 800c458:	9400      	str	r4, [sp, #0]
 800c45a:	f000 ff3d 	bl	800d2d8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c462:	b29a      	uxth	r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2241      	movs	r2, #65	@ 0x41
 800c474:	5c9b      	ldrb	r3, [r3, r2]
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b22      	cmp	r3, #34	@ 0x22
 800c47a:	d109      	bne.n	800c490 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2180      	movs	r1, #128	@ 0x80
 800c488:	0209      	lsls	r1, r1, #8
 800c48a:	430a      	orrs	r2, r1
 800c48c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c48e:	e07a      	b.n	800c586 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2180      	movs	r1, #128	@ 0x80
 800c49c:	01c9      	lsls	r1, r1, #7
 800c49e:	430a      	orrs	r2, r1
 800c4a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c4a2:	e070      	b.n	800c586 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2140      	movs	r1, #64	@ 0x40
 800c4a8:	0018      	movs	r0, r3
 800c4aa:	f000 fcef 	bl	800ce8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c4ae:	e06a      	b.n	800c586 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2240      	movs	r2, #64	@ 0x40
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	d058      	beq.n	800c56a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2240      	movs	r2, #64	@ 0x40
 800c4bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4be:	d054      	beq.n	800c56a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2241      	movs	r2, #65	@ 0x41
 800c4c4:	5c9b      	ldrb	r3, [r3, r2]
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b22      	cmp	r3, #34	@ 0x22
 800c4ca:	d101      	bne.n	800c4d0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800c4cc:	4b33      	ldr	r3, [pc, #204]	@ (800c59c <I2C_Mem_ISR_DMA+0x234>)
 800c4ce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	2bff      	cmp	r3, #255	@ 0xff
 800c4d8:	d911      	bls.n	800c4fe <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	22ff      	movs	r2, #255	@ 0xff
 800c4de:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4e4:	b299      	uxth	r1, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	2380      	movs	r3, #128	@ 0x80
 800c4ee:	045c      	lsls	r4, r3, #17
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	0023      	movs	r3, r4
 800c4f8:	f000 feee 	bl	800d2d8 <I2C_TransferConfig>
 800c4fc:	e012      	b.n	800c524 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c502:	b29a      	uxth	r2, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c50c:	b299      	uxth	r1, r3
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c512:	b2da      	uxtb	r2, r3
 800c514:	2380      	movs	r3, #128	@ 0x80
 800c516:	049c      	lsls	r4, r3, #18
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	0023      	movs	r3, r4
 800c520:	f000 feda 	bl	800d2d8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c528:	b29a      	uxth	r2, r3
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	b29a      	uxth	r2, r3
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2241      	movs	r2, #65	@ 0x41
 800c53a:	5c9b      	ldrb	r3, [r3, r2]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	2b22      	cmp	r3, #34	@ 0x22
 800c540:	d109      	bne.n	800c556 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2180      	movs	r1, #128	@ 0x80
 800c54e:	0209      	lsls	r1, r1, #8
 800c550:	430a      	orrs	r2, r1
 800c552:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c554:	e017      	b.n	800c586 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2180      	movs	r1, #128	@ 0x80
 800c562:	01c9      	lsls	r1, r1, #7
 800c564:	430a      	orrs	r2, r1
 800c566:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c568:	e00d      	b.n	800c586 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	2220      	movs	r2, #32
 800c56e:	4013      	ands	r3, r2
 800c570:	d009      	beq.n	800c586 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2220      	movs	r2, #32
 800c576:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c578:	d005      	beq.n	800c586 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	0011      	movs	r1, r2
 800c580:	0018      	movs	r0, r3
 800c582:	f000 fa3d 	bl	800ca00 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2240      	movs	r2, #64	@ 0x40
 800c58a:	2100      	movs	r1, #0
 800c58c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	0018      	movs	r0, r3
 800c592:	46bd      	mov	sp, r7
 800c594:	b007      	add	sp, #28
 800c596:	bd90      	pop	{r4, r7, pc}
 800c598:	80002000 	.word	0x80002000
 800c59c:	80002400 	.word	0x80002400

0800c5a0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b088      	sub	sp, #32
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2240      	movs	r2, #64	@ 0x40
 800c5ba:	5c9b      	ldrb	r3, [r3, r2]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d101      	bne.n	800c5c4 <I2C_Slave_ISR_DMA+0x24>
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	e0cd      	b.n	800c760 <I2C_Slave_ISR_DMA+0x1c0>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2240      	movs	r2, #64	@ 0x40
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	d009      	beq.n	800c5e8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c5da:	d005      	beq.n	800c5e8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	0011      	movs	r1, r2
 800c5e2:	0018      	movs	r0, r3
 800c5e4:	f000 fada 	bl	800cb9c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	2210      	movs	r2, #16
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	d100      	bne.n	800c5f2 <I2C_Slave_ISR_DMA+0x52>
 800c5f0:	e0a3      	b.n	800c73a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2210      	movs	r2, #16
 800c5f6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c5f8:	d100      	bne.n	800c5fc <I2C_Slave_ISR_DMA+0x5c>
 800c5fa:	e09e      	b.n	800c73a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	2380      	movs	r3, #128	@ 0x80
 800c600:	01db      	lsls	r3, r3, #7
 800c602:	4013      	ands	r3, r2
 800c604:	d105      	bne.n	800c612 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	2380      	movs	r3, #128	@ 0x80
 800c60a:	021b      	lsls	r3, r3, #8
 800c60c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c60e:	d100      	bne.n	800c612 <I2C_Slave_ISR_DMA+0x72>
 800c610:	e08c      	b.n	800c72c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00c      	beq.n	800c634 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	2380      	movs	r3, #128	@ 0x80
 800c61e:	021b      	lsls	r3, r3, #8
 800c620:	4013      	ands	r3, r2
 800c622:	d007      	beq.n	800c634 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800c630:	2301      	movs	r3, #1
 800c632:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00c      	beq.n	800c656 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	2380      	movs	r3, #128	@ 0x80
 800c640:	01db      	lsls	r3, r3, #7
 800c642:	4013      	ands	r3, r2
 800c644:	d007      	beq.n	800c656 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800c652:	2301      	movs	r3, #1
 800c654:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d12d      	bne.n	800c6b8 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2241      	movs	r2, #65	@ 0x41
 800c660:	5c9b      	ldrb	r3, [r3, r2]
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b28      	cmp	r3, #40	@ 0x28
 800c666:	d10b      	bne.n	800c680 <I2C_Slave_ISR_DMA+0xe0>
 800c668:	69ba      	ldr	r2, [r7, #24]
 800c66a:	2380      	movs	r3, #128	@ 0x80
 800c66c:	049b      	lsls	r3, r3, #18
 800c66e:	429a      	cmp	r2, r3
 800c670:	d106      	bne.n	800c680 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	0011      	movs	r1, r2
 800c678:	0018      	movs	r0, r3
 800c67a:	f000 fbaf 	bl	800cddc <I2C_ITListenCplt>
 800c67e:	e054      	b.n	800c72a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2241      	movs	r2, #65	@ 0x41
 800c684:	5c9b      	ldrb	r3, [r3, r2]
 800c686:	b2db      	uxtb	r3, r3
 800c688:	2b29      	cmp	r3, #41	@ 0x29
 800c68a:	d110      	bne.n	800c6ae <I2C_Slave_ISR_DMA+0x10e>
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	4a36      	ldr	r2, [pc, #216]	@ (800c768 <I2C_Slave_ISR_DMA+0x1c8>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00c      	beq.n	800c6ae <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2210      	movs	r2, #16
 800c69a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	0018      	movs	r0, r3
 800c6a0:	f000 fd1f 	bl	800d0e2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	0018      	movs	r0, r3
 800c6a8:	f000 f946 	bl	800c938 <I2C_ITSlaveSeqCplt>
 800c6ac:	e03d      	b.n	800c72a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2210      	movs	r2, #16
 800c6b4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c6b6:	e03e      	b.n	800c736 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2210      	movs	r2, #16
 800c6be:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6c4:	2204      	movs	r2, #4
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c6cc:	2317      	movs	r3, #23
 800c6ce:	18fb      	adds	r3, r7, r3
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	2141      	movs	r1, #65	@ 0x41
 800c6d4:	5c52      	ldrb	r2, [r2, r1]
 800c6d6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d004      	beq.n	800c6e8 <I2C_Slave_ISR_DMA+0x148>
 800c6de:	69ba      	ldr	r2, [r7, #24]
 800c6e0:	2380      	movs	r3, #128	@ 0x80
 800c6e2:	045b      	lsls	r3, r3, #17
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d126      	bne.n	800c736 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c6e8:	2217      	movs	r2, #23
 800c6ea:	18bb      	adds	r3, r7, r2
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2b21      	cmp	r3, #33	@ 0x21
 800c6f0:	d003      	beq.n	800c6fa <I2C_Slave_ISR_DMA+0x15a>
 800c6f2:	18bb      	adds	r3, r7, r2
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	2b29      	cmp	r3, #41	@ 0x29
 800c6f8:	d103      	bne.n	800c702 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2221      	movs	r2, #33	@ 0x21
 800c6fe:	631a      	str	r2, [r3, #48]	@ 0x30
 800c700:	e00b      	b.n	800c71a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c702:	2217      	movs	r2, #23
 800c704:	18bb      	adds	r3, r7, r2
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2b22      	cmp	r3, #34	@ 0x22
 800c70a:	d003      	beq.n	800c714 <I2C_Slave_ISR_DMA+0x174>
 800c70c:	18bb      	adds	r3, r7, r2
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b2a      	cmp	r3, #42	@ 0x2a
 800c712:	d102      	bne.n	800c71a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2222      	movs	r2, #34	@ 0x22
 800c718:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	0011      	movs	r1, r2
 800c722:	0018      	movs	r0, r3
 800c724:	f000 fbb2 	bl	800ce8c <I2C_ITError>
      if (treatdmanack == 1U)
 800c728:	e005      	b.n	800c736 <I2C_Slave_ISR_DMA+0x196>
 800c72a:	e004      	b.n	800c736 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2210      	movs	r2, #16
 800c732:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c734:	e00f      	b.n	800c756 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800c736:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c738:	e00d      	b.n	800c756 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2208      	movs	r2, #8
 800c73e:	4013      	ands	r3, r2
 800c740:	d009      	beq.n	800c756 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2208      	movs	r2, #8
 800c746:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c748:	d005      	beq.n	800c756 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	0011      	movs	r1, r2
 800c750:	0018      	movs	r0, r3
 800c752:	f000 f80b 	bl	800c76c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2240      	movs	r2, #64	@ 0x40
 800c75a:	2100      	movs	r1, #0
 800c75c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c75e:	2300      	movs	r3, #0
}
 800c760:	0018      	movs	r0, r3
 800c762:	46bd      	mov	sp, r7
 800c764:	b008      	add	sp, #32
 800c766:	bd80      	pop	{r7, pc}
 800c768:	ffff0000 	.word	0xffff0000

0800c76c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c76c:	b5b0      	push	{r4, r5, r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2241      	movs	r2, #65	@ 0x41
 800c77a:	5c9b      	ldrb	r3, [r3, r2]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	001a      	movs	r2, r3
 800c780:	2328      	movs	r3, #40	@ 0x28
 800c782:	4013      	ands	r3, r2
 800c784:	2b28      	cmp	r3, #40	@ 0x28
 800c786:	d000      	beq.n	800c78a <I2C_ITAddrCplt+0x1e>
 800c788:	e088      	b.n	800c89c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	0c1b      	lsrs	r3, r3, #16
 800c792:	b2da      	uxtb	r2, r3
 800c794:	250f      	movs	r5, #15
 800c796:	197b      	adds	r3, r7, r5
 800c798:	2101      	movs	r1, #1
 800c79a:	400a      	ands	r2, r1
 800c79c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	699b      	ldr	r3, [r3, #24]
 800c7a4:	0c1b      	lsrs	r3, r3, #16
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	200c      	movs	r0, #12
 800c7aa:	183b      	adds	r3, r7, r0
 800c7ac:	21fe      	movs	r1, #254	@ 0xfe
 800c7ae:	400a      	ands	r2, r1
 800c7b0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	240a      	movs	r4, #10
 800c7bc:	193b      	adds	r3, r7, r4
 800c7be:	0592      	lsls	r2, r2, #22
 800c7c0:	0d92      	lsrs	r2, r2, #22
 800c7c2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	2308      	movs	r3, #8
 800c7ce:	18fb      	adds	r3, r7, r3
 800c7d0:	21fe      	movs	r1, #254	@ 0xfe
 800c7d2:	400a      	ands	r2, r1
 800c7d4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d148      	bne.n	800c870 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c7de:	0021      	movs	r1, r4
 800c7e0:	187b      	adds	r3, r7, r1
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	09db      	lsrs	r3, r3, #7
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	183b      	adds	r3, r7, r0
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	4053      	eors	r3, r2
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	001a      	movs	r2, r3
 800c7f2:	2306      	movs	r3, #6
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	d120      	bne.n	800c83a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800c7f8:	183b      	adds	r3, r7, r0
 800c7fa:	187a      	adds	r2, r7, r1
 800c7fc:	8812      	ldrh	r2, [r2, #0]
 800c7fe:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c804:	1c5a      	adds	r2, r3, #1
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d14c      	bne.n	800c8ac <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2208      	movs	r2, #8
 800c81e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2240      	movs	r2, #64	@ 0x40
 800c824:	2100      	movs	r1, #0
 800c826:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c828:	183b      	adds	r3, r7, r0
 800c82a:	881a      	ldrh	r2, [r3, #0]
 800c82c:	197b      	adds	r3, r7, r5
 800c82e:	7819      	ldrb	r1, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	0018      	movs	r0, r3
 800c834:	f7ff fa39 	bl	800bcaa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c838:	e038      	b.n	800c8ac <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800c83a:	240c      	movs	r4, #12
 800c83c:	193b      	adds	r3, r7, r4
 800c83e:	2208      	movs	r2, #8
 800c840:	18ba      	adds	r2, r7, r2
 800c842:	8812      	ldrh	r2, [r2, #0]
 800c844:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c846:	2380      	movs	r3, #128	@ 0x80
 800c848:	021a      	lsls	r2, r3, #8
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	0011      	movs	r1, r2
 800c84e:	0018      	movs	r0, r3
 800c850:	f000 fe0a 	bl	800d468 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2240      	movs	r2, #64	@ 0x40
 800c858:	2100      	movs	r1, #0
 800c85a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c85c:	193b      	adds	r3, r7, r4
 800c85e:	881a      	ldrh	r2, [r3, #0]
 800c860:	230f      	movs	r3, #15
 800c862:	18fb      	adds	r3, r7, r3
 800c864:	7819      	ldrb	r1, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	0018      	movs	r0, r3
 800c86a:	f7ff fa1e 	bl	800bcaa <HAL_I2C_AddrCallback>
}
 800c86e:	e01d      	b.n	800c8ac <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c870:	2380      	movs	r3, #128	@ 0x80
 800c872:	021a      	lsls	r2, r3, #8
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	0011      	movs	r1, r2
 800c878:	0018      	movs	r0, r3
 800c87a:	f000 fdf5 	bl	800d468 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2240      	movs	r2, #64	@ 0x40
 800c882:	2100      	movs	r1, #0
 800c884:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c886:	230c      	movs	r3, #12
 800c888:	18fb      	adds	r3, r7, r3
 800c88a:	881a      	ldrh	r2, [r3, #0]
 800c88c:	230f      	movs	r3, #15
 800c88e:	18fb      	adds	r3, r7, r3
 800c890:	7819      	ldrb	r1, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	0018      	movs	r0, r3
 800c896:	f7ff fa08 	bl	800bcaa <HAL_I2C_AddrCallback>
}
 800c89a:	e007      	b.n	800c8ac <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2208      	movs	r2, #8
 800c8a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2240      	movs	r2, #64	@ 0x40
 800c8a8:	2100      	movs	r1, #0
 800c8aa:	5499      	strb	r1, [r3, r2]
}
 800c8ac:	46c0      	nop			@ (mov r8, r8)
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	b004      	add	sp, #16
 800c8b2:	bdb0      	pop	{r4, r5, r7, pc}

0800c8b4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2242      	movs	r2, #66	@ 0x42
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2241      	movs	r2, #65	@ 0x41
 800c8c8:	5c9b      	ldrb	r3, [r3, r2]
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	2b21      	cmp	r3, #33	@ 0x21
 800c8ce:	d117      	bne.n	800c900 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2241      	movs	r2, #65	@ 0x41
 800c8d4:	2120      	movs	r1, #32
 800c8d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2211      	movs	r2, #17
 800c8dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	0018      	movs	r0, r3
 800c8ea:	f000 fdbd 	bl	800d468 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2240      	movs	r2, #64	@ 0x40
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	0018      	movs	r0, r3
 800c8fa:	f7ff f9b6 	bl	800bc6a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c8fe:	e016      	b.n	800c92e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2241      	movs	r2, #65	@ 0x41
 800c904:	2120      	movs	r1, #32
 800c906:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2212      	movs	r2, #18
 800c90c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2102      	movs	r1, #2
 800c918:	0018      	movs	r0, r3
 800c91a:	f000 fda5 	bl	800d468 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2240      	movs	r2, #64	@ 0x40
 800c922:	2100      	movs	r1, #0
 800c924:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	0018      	movs	r0, r3
 800c92a:	f7ff f9a6 	bl	800bc7a <HAL_I2C_MasterRxCpltCallback>
}
 800c92e:	46c0      	nop			@ (mov r8, r8)
 800c930:	46bd      	mov	sp, r7
 800c932:	b002      	add	sp, #8
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2242      	movs	r2, #66	@ 0x42
 800c94c:	2100      	movs	r1, #0
 800c94e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	2380      	movs	r3, #128	@ 0x80
 800c954:	01db      	lsls	r3, r3, #7
 800c956:	4013      	ands	r3, r2
 800c958:	d008      	beq.n	800c96c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4924      	ldr	r1, [pc, #144]	@ (800c9f8 <I2C_ITSlaveSeqCplt+0xc0>)
 800c966:	400a      	ands	r2, r1
 800c968:	601a      	str	r2, [r3, #0]
 800c96a:	e00c      	b.n	800c986 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	2380      	movs	r3, #128	@ 0x80
 800c970:	021b      	lsls	r3, r3, #8
 800c972:	4013      	ands	r3, r2
 800c974:	d007      	beq.n	800c986 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	491e      	ldr	r1, [pc, #120]	@ (800c9fc <I2C_ITSlaveSeqCplt+0xc4>)
 800c982:	400a      	ands	r2, r1
 800c984:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2241      	movs	r2, #65	@ 0x41
 800c98a:	5c9b      	ldrb	r3, [r3, r2]
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b29      	cmp	r3, #41	@ 0x29
 800c990:	d114      	bne.n	800c9bc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2241      	movs	r2, #65	@ 0x41
 800c996:	2128      	movs	r1, #40	@ 0x28
 800c998:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2221      	movs	r2, #33	@ 0x21
 800c99e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f000 fd5f 	bl	800d468 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2240      	movs	r2, #64	@ 0x40
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	0018      	movs	r0, r3
 800c9b6:	f7ff f968 	bl	800bc8a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c9ba:	e019      	b.n	800c9f0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2241      	movs	r2, #65	@ 0x41
 800c9c0:	5c9b      	ldrb	r3, [r3, r2]
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9c6:	d113      	bne.n	800c9f0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2241      	movs	r2, #65	@ 0x41
 800c9cc:	2128      	movs	r1, #40	@ 0x28
 800c9ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2222      	movs	r2, #34	@ 0x22
 800c9d4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2102      	movs	r1, #2
 800c9da:	0018      	movs	r0, r3
 800c9dc:	f000 fd44 	bl	800d468 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2240      	movs	r2, #64	@ 0x40
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	0018      	movs	r0, r3
 800c9ec:	f7ff f955 	bl	800bc9a <HAL_I2C_SlaveRxCpltCallback>
}
 800c9f0:	46c0      	nop			@ (mov r8, r8)
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	b004      	add	sp, #16
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	ffffbfff 	.word	0xffffbfff
 800c9fc:	ffff7fff 	.word	0xffff7fff

0800ca00 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2220      	movs	r2, #32
 800ca14:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2241      	movs	r2, #65	@ 0x41
 800ca1a:	5c9b      	ldrb	r3, [r3, r2]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b21      	cmp	r3, #33	@ 0x21
 800ca20:	d108      	bne.n	800ca34 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2101      	movs	r1, #1
 800ca26:	0018      	movs	r0, r3
 800ca28:	f000 fd1e 	bl	800d468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2211      	movs	r2, #17
 800ca30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca32:	e00d      	b.n	800ca50 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2241      	movs	r2, #65	@ 0x41
 800ca38:	5c9b      	ldrb	r3, [r3, r2]
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	2b22      	cmp	r3, #34	@ 0x22
 800ca3e:	d107      	bne.n	800ca50 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2102      	movs	r1, #2
 800ca44:	0018      	movs	r0, r3
 800ca46:	f000 fd0f 	bl	800d468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2212      	movs	r2, #18
 800ca4e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	494e      	ldr	r1, [pc, #312]	@ (800cb94 <I2C_ITMasterCplt+0x194>)
 800ca5c:	400a      	ands	r2, r1
 800ca5e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4a4b      	ldr	r2, [pc, #300]	@ (800cb98 <I2C_ITMasterCplt+0x198>)
 800ca6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	2210      	movs	r2, #16
 800ca70:	4013      	ands	r3, r2
 800ca72:	d009      	beq.n	800ca88 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2210      	movs	r2, #16
 800ca7a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca80:	2204      	movs	r2, #4
 800ca82:	431a      	orrs	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2241      	movs	r2, #65	@ 0x41
 800ca8c:	5c9b      	ldrb	r3, [r3, r2]
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	2b60      	cmp	r3, #96	@ 0x60
 800ca92:	d109      	bne.n	800caa8 <I2C_ITMasterCplt+0xa8>
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2204      	movs	r2, #4
 800ca98:	4013      	ands	r3, r2
 800ca9a:	d005      	beq.n	800caa8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800caa6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	0018      	movs	r0, r3
 800caac:	f000 fb19 	bl	800d0e2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cab4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2241      	movs	r2, #65	@ 0x41
 800caba:	5c9b      	ldrb	r3, [r3, r2]
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	2b60      	cmp	r3, #96	@ 0x60
 800cac0:	d002      	beq.n	800cac8 <I2C_ITMasterCplt+0xc8>
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d007      	beq.n	800cad8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	0011      	movs	r1, r2
 800cad0:	0018      	movs	r0, r3
 800cad2:	f000 f9db 	bl	800ce8c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cad6:	e058      	b.n	800cb8a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2241      	movs	r2, #65	@ 0x41
 800cadc:	5c9b      	ldrb	r3, [r3, r2]
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	2b21      	cmp	r3, #33	@ 0x21
 800cae2:	d126      	bne.n	800cb32 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2241      	movs	r2, #65	@ 0x41
 800cae8:	2120      	movs	r1, #32
 800caea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2242      	movs	r2, #66	@ 0x42
 800caf6:	5c9b      	ldrb	r3, [r3, r2]
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b40      	cmp	r3, #64	@ 0x40
 800cafc:	d10c      	bne.n	800cb18 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2242      	movs	r2, #66	@ 0x42
 800cb02:	2100      	movs	r1, #0
 800cb04:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2240      	movs	r2, #64	@ 0x40
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	0018      	movs	r0, r3
 800cb12:	f7ff f8e2 	bl	800bcda <HAL_I2C_MemTxCpltCallback>
}
 800cb16:	e038      	b.n	800cb8a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2242      	movs	r2, #66	@ 0x42
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2240      	movs	r2, #64	@ 0x40
 800cb24:	2100      	movs	r1, #0
 800cb26:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	0018      	movs	r0, r3
 800cb2c:	f7ff f89d 	bl	800bc6a <HAL_I2C_MasterTxCpltCallback>
}
 800cb30:	e02b      	b.n	800cb8a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2241      	movs	r2, #65	@ 0x41
 800cb36:	5c9b      	ldrb	r3, [r3, r2]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b22      	cmp	r3, #34	@ 0x22
 800cb3c:	d125      	bne.n	800cb8a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2241      	movs	r2, #65	@ 0x41
 800cb42:	2120      	movs	r1, #32
 800cb44:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2242      	movs	r2, #66	@ 0x42
 800cb50:	5c9b      	ldrb	r3, [r3, r2]
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b40      	cmp	r3, #64	@ 0x40
 800cb56:	d10c      	bne.n	800cb72 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2242      	movs	r2, #66	@ 0x42
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2240      	movs	r2, #64	@ 0x40
 800cb64:	2100      	movs	r1, #0
 800cb66:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	f7ff f8bd 	bl	800bcea <HAL_I2C_MemRxCpltCallback>
}
 800cb70:	e00b      	b.n	800cb8a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2242      	movs	r2, #66	@ 0x42
 800cb76:	2100      	movs	r1, #0
 800cb78:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2240      	movs	r2, #64	@ 0x40
 800cb7e:	2100      	movs	r1, #0
 800cb80:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	0018      	movs	r0, r3
 800cb86:	f7ff f878 	bl	800bc7a <HAL_I2C_MasterRxCpltCallback>
}
 800cb8a:	46c0      	nop			@ (mov r8, r8)
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	b006      	add	sp, #24
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	46c0      	nop			@ (mov r8, r8)
 800cb94:	fe00e800 	.word	0xfe00e800
 800cb98:	ffff0000 	.word	0xffff0000

0800cb9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cbb2:	200f      	movs	r0, #15
 800cbb4:	183b      	adds	r3, r7, r0
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	2141      	movs	r1, #65	@ 0x41
 800cbba:	5c52      	ldrb	r2, [r2, r1]
 800cbbc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2220      	movs	r2, #32
 800cbc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cbc6:	183b      	adds	r3, r7, r0
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	2b21      	cmp	r3, #33	@ 0x21
 800cbcc:	d003      	beq.n	800cbd6 <I2C_ITSlaveCplt+0x3a>
 800cbce:	183b      	adds	r3, r7, r0
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	2b29      	cmp	r3, #41	@ 0x29
 800cbd4:	d109      	bne.n	800cbea <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cbd6:	4a7b      	ldr	r2, [pc, #492]	@ (800cdc4 <I2C_ITSlaveCplt+0x228>)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	0011      	movs	r1, r2
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f000 fc43 	bl	800d468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2221      	movs	r2, #33	@ 0x21
 800cbe6:	631a      	str	r2, [r3, #48]	@ 0x30
 800cbe8:	e011      	b.n	800cc0e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cbea:	220f      	movs	r2, #15
 800cbec:	18bb      	adds	r3, r7, r2
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	2b22      	cmp	r3, #34	@ 0x22
 800cbf2:	d003      	beq.n	800cbfc <I2C_ITSlaveCplt+0x60>
 800cbf4:	18bb      	adds	r3, r7, r2
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbfa:	d108      	bne.n	800cc0e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cbfc:	4a72      	ldr	r2, [pc, #456]	@ (800cdc8 <I2C_ITSlaveCplt+0x22c>)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	0011      	movs	r1, r2
 800cc02:	0018      	movs	r0, r3
 800cc04:	f000 fc30 	bl	800d468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2222      	movs	r2, #34	@ 0x22
 800cc0c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	685a      	ldr	r2, [r3, #4]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2180      	movs	r1, #128	@ 0x80
 800cc1a:	0209      	lsls	r1, r1, #8
 800cc1c:	430a      	orrs	r2, r1
 800cc1e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4968      	ldr	r1, [pc, #416]	@ (800cdcc <I2C_ITSlaveCplt+0x230>)
 800cc2c:	400a      	ands	r2, r1
 800cc2e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	0018      	movs	r0, r3
 800cc34:	f000 fa55 	bl	800d0e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cc38:	693a      	ldr	r2, [r7, #16]
 800cc3a:	2380      	movs	r3, #128	@ 0x80
 800cc3c:	01db      	lsls	r3, r3, #7
 800cc3e:	4013      	ands	r3, r2
 800cc40:	d013      	beq.n	800cc6a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4960      	ldr	r1, [pc, #384]	@ (800cdd0 <I2C_ITSlaveCplt+0x234>)
 800cc4e:	400a      	ands	r2, r1
 800cc50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d01f      	beq.n	800cc9a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cc68:	e017      	b.n	800cc9a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cc6a:	693a      	ldr	r2, [r7, #16]
 800cc6c:	2380      	movs	r3, #128	@ 0x80
 800cc6e:	021b      	lsls	r3, r3, #8
 800cc70:	4013      	ands	r3, r2
 800cc72:	d012      	beq.n	800cc9a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4955      	ldr	r1, [pc, #340]	@ (800cdd4 <I2C_ITSlaveCplt+0x238>)
 800cc80:	400a      	ands	r2, r1
 800cc82:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d006      	beq.n	800cc9a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2204      	movs	r2, #4
 800cc9e:	4013      	ands	r3, r2
 800cca0:	d020      	beq.n	800cce4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2204      	movs	r2, #4
 800cca6:	4393      	bics	r3, r2
 800cca8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb4:	b2d2      	uxtb	r2, r2
 800ccb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00c      	beq.n	800cce4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d005      	beq.n	800ccfa <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf2:	2204      	movs	r2, #4
 800ccf4:	431a      	orrs	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2242      	movs	r2, #66	@ 0x42
 800ccfe:	2100      	movs	r1, #0
 800cd00:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d013      	beq.n	800cd38 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	0011      	movs	r1, r2
 800cd18:	0018      	movs	r0, r3
 800cd1a:	f000 f8b7 	bl	800ce8c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2241      	movs	r2, #65	@ 0x41
 800cd22:	5c9b      	ldrb	r3, [r3, r2]
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2b28      	cmp	r3, #40	@ 0x28
 800cd28:	d147      	bne.n	800cdba <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	0011      	movs	r1, r2
 800cd30:	0018      	movs	r0, r3
 800cd32:	f000 f853 	bl	800cddc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cd36:	e040      	b.n	800cdba <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd3c:	4a26      	ldr	r2, [pc, #152]	@ (800cdd8 <I2C_ITSlaveCplt+0x23c>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d016      	beq.n	800cd70 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	0018      	movs	r0, r3
 800cd46:	f7ff fdf7 	bl	800c938 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a22      	ldr	r2, [pc, #136]	@ (800cdd8 <I2C_ITSlaveCplt+0x23c>)
 800cd4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2241      	movs	r2, #65	@ 0x41
 800cd54:	2120      	movs	r1, #32
 800cd56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2240      	movs	r2, #64	@ 0x40
 800cd62:	2100      	movs	r1, #0
 800cd64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	0018      	movs	r0, r3
 800cd6a:	f7fe ffae 	bl	800bcca <HAL_I2C_ListenCpltCallback>
}
 800cd6e:	e024      	b.n	800cdba <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2241      	movs	r2, #65	@ 0x41
 800cd74:	5c9b      	ldrb	r3, [r3, r2]
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b22      	cmp	r3, #34	@ 0x22
 800cd7a:	d10f      	bne.n	800cd9c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2241      	movs	r2, #65	@ 0x41
 800cd80:	2120      	movs	r1, #32
 800cd82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2240      	movs	r2, #64	@ 0x40
 800cd8e:	2100      	movs	r1, #0
 800cd90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	0018      	movs	r0, r3
 800cd96:	f7fe ff80 	bl	800bc9a <HAL_I2C_SlaveRxCpltCallback>
}
 800cd9a:	e00e      	b.n	800cdba <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2241      	movs	r2, #65	@ 0x41
 800cda0:	2120      	movs	r1, #32
 800cda2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2240      	movs	r2, #64	@ 0x40
 800cdae:	2100      	movs	r1, #0
 800cdb0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	0018      	movs	r0, r3
 800cdb6:	f7fe ff68 	bl	800bc8a <HAL_I2C_SlaveTxCpltCallback>
}
 800cdba:	46c0      	nop			@ (mov r8, r8)
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	b006      	add	sp, #24
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	46c0      	nop			@ (mov r8, r8)
 800cdc4:	00008001 	.word	0x00008001
 800cdc8:	00008002 	.word	0x00008002
 800cdcc:	fe00e800 	.word	0xfe00e800
 800cdd0:	ffffbfff 	.word	0xffffbfff
 800cdd4:	ffff7fff 	.word	0xffff7fff
 800cdd8:	ffff0000 	.word	0xffff0000

0800cddc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4a26      	ldr	r2, [pc, #152]	@ (800ce84 <I2C_ITListenCplt+0xa8>)
 800cdea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2241      	movs	r2, #65	@ 0x41
 800cdf6:	2120      	movs	r1, #32
 800cdf8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2242      	movs	r2, #66	@ 0x42
 800cdfe:	2100      	movs	r1, #0
 800ce00:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	2204      	movs	r2, #4
 800ce0c:	4013      	ands	r3, r2
 800ce0e:	d022      	beq.n	800ce56 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce1a:	b2d2      	uxtb	r2, r2
 800ce1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce22:	1c5a      	adds	r2, r3, #1
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d012      	beq.n	800ce56 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce34:	3b01      	subs	r3, #1
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	3b01      	subs	r3, #1
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce4e:	2204      	movs	r2, #4
 800ce50:	431a      	orrs	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ce56:	4a0c      	ldr	r2, [pc, #48]	@ (800ce88 <I2C_ITListenCplt+0xac>)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	0011      	movs	r1, r2
 800ce5c:	0018      	movs	r0, r3
 800ce5e:	f000 fb03 	bl	800d468 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2210      	movs	r2, #16
 800ce68:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2240      	movs	r2, #64	@ 0x40
 800ce6e:	2100      	movs	r1, #0
 800ce70:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	0018      	movs	r0, r3
 800ce76:	f7fe ff28 	bl	800bcca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ce7a:	46c0      	nop			@ (mov r8, r8)
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	b002      	add	sp, #8
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	46c0      	nop			@ (mov r8, r8)
 800ce84:	ffff0000 	.word	0xffff0000
 800ce88:	00008003 	.word	0x00008003

0800ce8c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ce96:	200f      	movs	r0, #15
 800ce98:	183b      	adds	r3, r7, r0
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	2141      	movs	r1, #65	@ 0x41
 800ce9e:	5c52      	ldrb	r2, [r2, r1]
 800cea0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2242      	movs	r2, #66	@ 0x42
 800cea6:	2100      	movs	r1, #0
 800cea8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4a72      	ldr	r2, [pc, #456]	@ (800d078 <I2C_ITError+0x1ec>)
 800ceae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	431a      	orrs	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cec2:	183b      	adds	r3, r7, r0
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	2b28      	cmp	r3, #40	@ 0x28
 800cec8:	d007      	beq.n	800ceda <I2C_ITError+0x4e>
 800ceca:	183b      	adds	r3, r7, r0
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	2b29      	cmp	r3, #41	@ 0x29
 800ced0:	d003      	beq.n	800ceda <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ced2:	183b      	adds	r3, r7, r0
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ced8:	d10c      	bne.n	800cef4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2103      	movs	r1, #3
 800cede:	0018      	movs	r0, r3
 800cee0:	f000 fac2 	bl	800d468 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2241      	movs	r2, #65	@ 0x41
 800cee8:	2128      	movs	r1, #40	@ 0x28
 800ceea:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a63      	ldr	r2, [pc, #396]	@ (800d07c <I2C_ITError+0x1f0>)
 800cef0:	635a      	str	r2, [r3, #52]	@ 0x34
 800cef2:	e032      	b.n	800cf5a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cef4:	4a62      	ldr	r2, [pc, #392]	@ (800d080 <I2C_ITError+0x1f4>)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	0011      	movs	r1, r2
 800cefa:	0018      	movs	r0, r3
 800cefc:	f000 fab4 	bl	800d468 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	0018      	movs	r0, r3
 800cf04:	f000 f8ed 	bl	800d0e2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2241      	movs	r2, #65	@ 0x41
 800cf0c:	5c9b      	ldrb	r3, [r3, r2]
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b60      	cmp	r3, #96	@ 0x60
 800cf12:	d01f      	beq.n	800cf54 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2241      	movs	r2, #65	@ 0x41
 800cf18:	2120      	movs	r1, #32
 800cf1a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	699b      	ldr	r3, [r3, #24]
 800cf22:	2220      	movs	r2, #32
 800cf24:	4013      	ands	r3, r2
 800cf26:	2b20      	cmp	r3, #32
 800cf28:	d114      	bne.n	800cf54 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	2210      	movs	r2, #16
 800cf32:	4013      	ands	r3, r2
 800cf34:	2b10      	cmp	r3, #16
 800cf36:	d109      	bne.n	800cf4c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2210      	movs	r2, #16
 800cf3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf44:	2204      	movs	r2, #4
 800cf46:	431a      	orrs	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2220      	movs	r2, #32
 800cf52:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d03b      	beq.n	800cfe0 <I2C_ITError+0x154>
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	2b11      	cmp	r3, #17
 800cf6c:	d002      	beq.n	800cf74 <I2C_ITError+0xe8>
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b21      	cmp	r3, #33	@ 0x21
 800cf72:	d135      	bne.n	800cfe0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	2380      	movs	r3, #128	@ 0x80
 800cf7c:	01db      	lsls	r3, r3, #7
 800cf7e:	401a      	ands	r2, r3
 800cf80:	2380      	movs	r3, #128	@ 0x80
 800cf82:	01db      	lsls	r3, r3, #7
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d107      	bne.n	800cf98 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	493c      	ldr	r1, [pc, #240]	@ (800d084 <I2C_ITError+0x1f8>)
 800cf94:	400a      	ands	r2, r1
 800cf96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf9c:	0018      	movs	r0, r3
 800cf9e:	f7fd feac 	bl	800acfa <HAL_DMA_GetState>
 800cfa2:	0003      	movs	r3, r0
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d016      	beq.n	800cfd6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfac:	4a36      	ldr	r2, [pc, #216]	@ (800d088 <I2C_ITError+0x1fc>)
 800cfae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2240      	movs	r2, #64	@ 0x40
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfbc:	0018      	movs	r0, r3
 800cfbe:	f7fd fda7 	bl	800ab10 <HAL_DMA_Abort_IT>
 800cfc2:	1e03      	subs	r3, r0, #0
 800cfc4:	d051      	beq.n	800d06a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cfd4:	e049      	b.n	800d06a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	0018      	movs	r0, r3
 800cfda:	f000 f859 	bl	800d090 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cfde:	e044      	b.n	800d06a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d03b      	beq.n	800d060 <I2C_ITError+0x1d4>
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	2b12      	cmp	r3, #18
 800cfec:	d002      	beq.n	800cff4 <I2C_ITError+0x168>
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	2b22      	cmp	r3, #34	@ 0x22
 800cff2:	d135      	bne.n	800d060 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	2380      	movs	r3, #128	@ 0x80
 800cffc:	021b      	lsls	r3, r3, #8
 800cffe:	401a      	ands	r2, r3
 800d000:	2380      	movs	r3, #128	@ 0x80
 800d002:	021b      	lsls	r3, r3, #8
 800d004:	429a      	cmp	r2, r3
 800d006:	d107      	bne.n	800d018 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	491e      	ldr	r1, [pc, #120]	@ (800d08c <I2C_ITError+0x200>)
 800d014:	400a      	ands	r2, r1
 800d016:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d01c:	0018      	movs	r0, r3
 800d01e:	f7fd fe6c 	bl	800acfa <HAL_DMA_GetState>
 800d022:	0003      	movs	r3, r0
 800d024:	2b01      	cmp	r3, #1
 800d026:	d016      	beq.n	800d056 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d02c:	4a16      	ldr	r2, [pc, #88]	@ (800d088 <I2C_ITError+0x1fc>)
 800d02e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2240      	movs	r2, #64	@ 0x40
 800d034:	2100      	movs	r1, #0
 800d036:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d03c:	0018      	movs	r0, r3
 800d03e:	f7fd fd67 	bl	800ab10 <HAL_DMA_Abort_IT>
 800d042:	1e03      	subs	r3, r0, #0
 800d044:	d013      	beq.n	800d06e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d04a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d050:	0018      	movs	r0, r3
 800d052:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d054:	e00b      	b.n	800d06e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	0018      	movs	r0, r3
 800d05a:	f000 f819 	bl	800d090 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d05e:	e006      	b.n	800d06e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	0018      	movs	r0, r3
 800d064:	f000 f814 	bl	800d090 <I2C_TreatErrorCallback>
  }
}
 800d068:	e002      	b.n	800d070 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d06a:	46c0      	nop			@ (mov r8, r8)
 800d06c:	e000      	b.n	800d070 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d06e:	46c0      	nop			@ (mov r8, r8)
}
 800d070:	46c0      	nop			@ (mov r8, r8)
 800d072:	46bd      	mov	sp, r7
 800d074:	b004      	add	sp, #16
 800d076:	bd80      	pop	{r7, pc}
 800d078:	ffff0000 	.word	0xffff0000
 800d07c:	0800bf71 	.word	0x0800bf71
 800d080:	00008003 	.word	0x00008003
 800d084:	ffffbfff 	.word	0xffffbfff
 800d088:	0800d29b 	.word	0x0800d29b
 800d08c:	ffff7fff 	.word	0xffff7fff

0800d090 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2241      	movs	r2, #65	@ 0x41
 800d09c:	5c9b      	ldrb	r3, [r3, r2]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b60      	cmp	r3, #96	@ 0x60
 800d0a2:	d10f      	bne.n	800d0c4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2241      	movs	r2, #65	@ 0x41
 800d0a8:	2120      	movs	r1, #32
 800d0aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2240      	movs	r2, #64	@ 0x40
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	0018      	movs	r0, r3
 800d0be:	f7fe fe24 	bl	800bd0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d0c2:	e00a      	b.n	800d0da <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2240      	movs	r2, #64	@ 0x40
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	0018      	movs	r0, r3
 800d0d6:	f7fe fe10 	bl	800bcfa <HAL_I2C_ErrorCallback>
}
 800d0da:	46c0      	nop			@ (mov r8, r8)
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	b002      	add	sp, #8
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	699b      	ldr	r3, [r3, #24]
 800d0f0:	2202      	movs	r2, #2
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	d103      	bne.n	800d100 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	699b      	ldr	r3, [r3, #24]
 800d106:	2201      	movs	r2, #1
 800d108:	4013      	ands	r3, r2
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d007      	beq.n	800d11e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	699a      	ldr	r2, [r3, #24]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2101      	movs	r1, #1
 800d11a:	430a      	orrs	r2, r1
 800d11c:	619a      	str	r2, [r3, #24]
  }
}
 800d11e:	46c0      	nop			@ (mov r8, r8)
 800d120:	46bd      	mov	sp, r7
 800d122:	b002      	add	sp, #8
 800d124:	bd80      	pop	{r7, pc}
	...

0800d128 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d134:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4920      	ldr	r1, [pc, #128]	@ (800d1c4 <I2C_DMAMasterTransmitCplt+0x9c>)
 800d142:	400a      	ands	r2, r1
 800d144:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d105      	bne.n	800d15c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2120      	movs	r1, #32
 800d154:	0018      	movs	r0, r3
 800d156:	f000 f8f9 	bl	800d34c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d15a:	e02e      	b.n	800d1ba <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d164:	189a      	adds	r2, r3, r2
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d16e:	b29b      	uxth	r3, r3
 800d170:	2bff      	cmp	r3, #255	@ 0xff
 800d172:	d903      	bls.n	800d17c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	22ff      	movs	r2, #255	@ 0xff
 800d178:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d17a:	e004      	b.n	800d186 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d180:	b29a      	uxth	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d18e:	0019      	movs	r1, r3
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3328      	adds	r3, #40	@ 0x28
 800d196:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d19c:	f7fd fc12 	bl	800a9c4 <HAL_DMA_Start_IT>
 800d1a0:	1e03      	subs	r3, r0, #0
 800d1a2:	d005      	beq.n	800d1b0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2110      	movs	r1, #16
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	f7ff fe6f 	bl	800ce8c <I2C_ITError>
}
 800d1ae:	e004      	b.n	800d1ba <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2140      	movs	r1, #64	@ 0x40
 800d1b4:	0018      	movs	r0, r3
 800d1b6:	f000 f8c9 	bl	800d34c <I2C_Enable_IRQ>
}
 800d1ba:	46c0      	nop			@ (mov r8, r8)
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	b004      	add	sp, #16
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	46c0      	nop			@ (mov r8, r8)
 800d1c4:	ffffbfff 	.word	0xffffbfff

0800d1c8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1d4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4920      	ldr	r1, [pc, #128]	@ (800d264 <I2C_DMAMasterReceiveCplt+0x9c>)
 800d1e2:	400a      	ands	r2, r1
 800d1e4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d105      	bne.n	800d1fc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2120      	movs	r1, #32
 800d1f4:	0018      	movs	r0, r3
 800d1f6:	f000 f8a9 	bl	800d34c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d1fa:	e02e      	b.n	800d25a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d204:	189a      	adds	r2, r3, r2
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d20e:	b29b      	uxth	r3, r3
 800d210:	2bff      	cmp	r3, #255	@ 0xff
 800d212:	d903      	bls.n	800d21c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	22ff      	movs	r2, #255	@ 0xff
 800d218:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d21a:	e004      	b.n	800d226 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d220:	b29a      	uxth	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	3324      	adds	r3, #36	@ 0x24
 800d230:	0019      	movs	r1, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d236:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d23c:	f7fd fbc2 	bl	800a9c4 <HAL_DMA_Start_IT>
 800d240:	1e03      	subs	r3, r0, #0
 800d242:	d005      	beq.n	800d250 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2110      	movs	r1, #16
 800d248:	0018      	movs	r0, r3
 800d24a:	f7ff fe1f 	bl	800ce8c <I2C_ITError>
}
 800d24e:	e004      	b.n	800d25a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2140      	movs	r1, #64	@ 0x40
 800d254:	0018      	movs	r0, r3
 800d256:	f000 f879 	bl	800d34c <I2C_Enable_IRQ>
}
 800d25a:	46c0      	nop			@ (mov r8, r8)
 800d25c:	46bd      	mov	sp, r7
 800d25e:	b004      	add	sp, #16
 800d260:	bd80      	pop	{r7, pc}
 800d262:	46c0      	nop			@ (mov r8, r8)
 800d264:	ffff7fff 	.word	0xffff7fff

0800d268 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d274:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2180      	movs	r1, #128	@ 0x80
 800d282:	0209      	lsls	r1, r1, #8
 800d284:	430a      	orrs	r2, r1
 800d286:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2110      	movs	r1, #16
 800d28c:	0018      	movs	r0, r3
 800d28e:	f7ff fdfd 	bl	800ce8c <I2C_ITError>
}
 800d292:	46c0      	nop			@ (mov r8, r8)
 800d294:	46bd      	mov	sp, r7
 800d296:	b004      	add	sp, #16
 800d298:	bd80      	pop	{r7, pc}

0800d29a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b084      	sub	sp, #16
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d003      	beq.n	800d2b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d003      	beq.n	800d2c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	0018      	movs	r0, r3
 800d2cc:	f7ff fee0 	bl	800d090 <I2C_TreatErrorCallback>
}
 800d2d0:	46c0      	nop			@ (mov r8, r8)
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	b004      	add	sp, #16
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d2d8:	b590      	push	{r4, r7, lr}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	0008      	movs	r0, r1
 800d2e2:	0011      	movs	r1, r2
 800d2e4:	607b      	str	r3, [r7, #4]
 800d2e6:	240a      	movs	r4, #10
 800d2e8:	193b      	adds	r3, r7, r4
 800d2ea:	1c02      	adds	r2, r0, #0
 800d2ec:	801a      	strh	r2, [r3, #0]
 800d2ee:	2009      	movs	r0, #9
 800d2f0:	183b      	adds	r3, r7, r0
 800d2f2:	1c0a      	adds	r2, r1, #0
 800d2f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d2f6:	193b      	adds	r3, r7, r4
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	059b      	lsls	r3, r3, #22
 800d2fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d2fe:	183b      	adds	r3, r7, r0
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	0419      	lsls	r1, r3, #16
 800d304:	23ff      	movs	r3, #255	@ 0xff
 800d306:	041b      	lsls	r3, r3, #16
 800d308:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d30a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	4313      	orrs	r3, r2
 800d314:	005b      	lsls	r3, r3, #1
 800d316:	085b      	lsrs	r3, r3, #1
 800d318:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d322:	0d51      	lsrs	r1, r2, #21
 800d324:	2280      	movs	r2, #128	@ 0x80
 800d326:	00d2      	lsls	r2, r2, #3
 800d328:	400a      	ands	r2, r1
 800d32a:	4907      	ldr	r1, [pc, #28]	@ (800d348 <I2C_TransferConfig+0x70>)
 800d32c:	430a      	orrs	r2, r1
 800d32e:	43d2      	mvns	r2, r2
 800d330:	401a      	ands	r2, r3
 800d332:	0011      	movs	r1, r2
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	697a      	ldr	r2, [r7, #20]
 800d33a:	430a      	orrs	r2, r1
 800d33c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d33e:	46c0      	nop			@ (mov r8, r8)
 800d340:	46bd      	mov	sp, r7
 800d342:	b007      	add	sp, #28
 800d344:	bd90      	pop	{r4, r7, pc}
 800d346:	46c0      	nop			@ (mov r8, r8)
 800d348:	03ff63ff 	.word	0x03ff63ff

0800d34c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	000a      	movs	r2, r1
 800d356:	1cbb      	adds	r3, r7, #2
 800d358:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d362:	4b3e      	ldr	r3, [pc, #248]	@ (800d45c <I2C_Enable_IRQ+0x110>)
 800d364:	429a      	cmp	r2, r3
 800d366:	d035      	beq.n	800d3d4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d36c:	4b3c      	ldr	r3, [pc, #240]	@ (800d460 <I2C_Enable_IRQ+0x114>)
 800d36e:	429a      	cmp	r2, r3
 800d370:	d030      	beq.n	800d3d4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d376:	4b3b      	ldr	r3, [pc, #236]	@ (800d464 <I2C_Enable_IRQ+0x118>)
 800d378:	429a      	cmp	r2, r3
 800d37a:	d02b      	beq.n	800d3d4 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d37c:	1cbb      	adds	r3, r7, #2
 800d37e:	2200      	movs	r2, #0
 800d380:	5e9b      	ldrsh	r3, [r3, r2]
 800d382:	2b00      	cmp	r3, #0
 800d384:	da03      	bge.n	800d38e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	22b8      	movs	r2, #184	@ 0xb8
 800d38a:	4313      	orrs	r3, r2
 800d38c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d38e:	1cbb      	adds	r3, r7, #2
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	2201      	movs	r2, #1
 800d394:	4013      	ands	r3, r2
 800d396:	d003      	beq.n	800d3a0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	22f2      	movs	r2, #242	@ 0xf2
 800d39c:	4313      	orrs	r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d3a0:	1cbb      	adds	r3, r7, #2
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	d003      	beq.n	800d3b2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	22f4      	movs	r2, #244	@ 0xf4
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d3b2:	1cbb      	adds	r3, r7, #2
 800d3b4:	881b      	ldrh	r3, [r3, #0]
 800d3b6:	2b10      	cmp	r3, #16
 800d3b8:	d103      	bne.n	800d3c2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2290      	movs	r2, #144	@ 0x90
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d3c2:	1cbb      	adds	r3, r7, #2
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	2b20      	cmp	r3, #32
 800d3c8:	d13c      	bne.n	800d444 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d3d2:	e037      	b.n	800d444 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d3d4:	1cbb      	adds	r3, r7, #2
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	5e9b      	ldrsh	r3, [r3, r2]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	da03      	bge.n	800d3e6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	22b8      	movs	r2, #184	@ 0xb8
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d3e6:	1cbb      	adds	r3, r7, #2
 800d3e8:	881b      	ldrh	r3, [r3, #0]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	4013      	ands	r3, r2
 800d3ee:	d003      	beq.n	800d3f8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	22f2      	movs	r2, #242	@ 0xf2
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d3f8:	1cbb      	adds	r3, r7, #2
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	2202      	movs	r2, #2
 800d3fe:	4013      	ands	r3, r2
 800d400:	d003      	beq.n	800d40a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	22f4      	movs	r2, #244	@ 0xf4
 800d406:	4313      	orrs	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d40a:	1cbb      	adds	r3, r7, #2
 800d40c:	881b      	ldrh	r3, [r3, #0]
 800d40e:	2b10      	cmp	r3, #16
 800d410:	d103      	bne.n	800d41a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2290      	movs	r2, #144	@ 0x90
 800d416:	4313      	orrs	r3, r2
 800d418:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d41a:	1cbb      	adds	r3, r7, #2
 800d41c:	881b      	ldrh	r3, [r3, #0]
 800d41e:	2b20      	cmp	r3, #32
 800d420:	d103      	bne.n	800d42a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2260      	movs	r2, #96	@ 0x60
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d42e:	4b0d      	ldr	r3, [pc, #52]	@ (800d464 <I2C_Enable_IRQ+0x118>)
 800d430:	429a      	cmp	r2, r3
 800d432:	d007      	beq.n	800d444 <I2C_Enable_IRQ+0xf8>
 800d434:	1cbb      	adds	r3, r7, #2
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	2b40      	cmp	r3, #64	@ 0x40
 800d43a:	d103      	bne.n	800d444 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2240      	movs	r2, #64	@ 0x40
 800d440:	4313      	orrs	r3, r2
 800d442:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	6819      	ldr	r1, [r3, #0]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	430a      	orrs	r2, r1
 800d452:	601a      	str	r2, [r3, #0]
}
 800d454:	46c0      	nop			@ (mov r8, r8)
 800d456:	46bd      	mov	sp, r7
 800d458:	b004      	add	sp, #16
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	0800c171 	.word	0x0800c171
 800d460:	0800c5a1 	.word	0x0800c5a1
 800d464:	0800c369 	.word	0x0800c369

0800d468 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	000a      	movs	r2, r1
 800d472:	1cbb      	adds	r3, r7, #2
 800d474:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d476:	2300      	movs	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d47a:	1cbb      	adds	r3, r7, #2
 800d47c:	881b      	ldrh	r3, [r3, #0]
 800d47e:	2201      	movs	r2, #1
 800d480:	4013      	ands	r3, r2
 800d482:	d010      	beq.n	800d4a6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2242      	movs	r2, #66	@ 0x42
 800d488:	4313      	orrs	r3, r2
 800d48a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2241      	movs	r2, #65	@ 0x41
 800d490:	5c9b      	ldrb	r3, [r3, r2]
 800d492:	b2db      	uxtb	r3, r3
 800d494:	001a      	movs	r2, r3
 800d496:	2328      	movs	r3, #40	@ 0x28
 800d498:	4013      	ands	r3, r2
 800d49a:	2b28      	cmp	r3, #40	@ 0x28
 800d49c:	d003      	beq.n	800d4a6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	22b0      	movs	r2, #176	@ 0xb0
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d4a6:	1cbb      	adds	r3, r7, #2
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	2202      	movs	r2, #2
 800d4ac:	4013      	ands	r3, r2
 800d4ae:	d010      	beq.n	800d4d2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2244      	movs	r2, #68	@ 0x44
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2241      	movs	r2, #65	@ 0x41
 800d4bc:	5c9b      	ldrb	r3, [r3, r2]
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	001a      	movs	r2, r3
 800d4c2:	2328      	movs	r3, #40	@ 0x28
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	2b28      	cmp	r3, #40	@ 0x28
 800d4c8:	d003      	beq.n	800d4d2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	22b0      	movs	r2, #176	@ 0xb0
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d4d2:	1cbb      	adds	r3, r7, #2
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	5e9b      	ldrsh	r3, [r3, r2]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	da03      	bge.n	800d4e4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	22b8      	movs	r2, #184	@ 0xb8
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d4e4:	1cbb      	adds	r3, r7, #2
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	2b10      	cmp	r3, #16
 800d4ea:	d103      	bne.n	800d4f4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2290      	movs	r2, #144	@ 0x90
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d4f4:	1cbb      	adds	r3, r7, #2
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	2b20      	cmp	r3, #32
 800d4fa:	d103      	bne.n	800d504 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2220      	movs	r2, #32
 800d500:	4313      	orrs	r3, r2
 800d502:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d504:	1cbb      	adds	r3, r7, #2
 800d506:	881b      	ldrh	r3, [r3, #0]
 800d508:	2b40      	cmp	r3, #64	@ 0x40
 800d50a:	d103      	bne.n	800d514 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2240      	movs	r2, #64	@ 0x40
 800d510:	4313      	orrs	r3, r2
 800d512:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	43d9      	mvns	r1, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	400a      	ands	r2, r1
 800d524:	601a      	str	r2, [r3, #0]
}
 800d526:	46c0      	nop			@ (mov r8, r8)
 800d528:	46bd      	mov	sp, r7
 800d52a:	b004      	add	sp, #16
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2241      	movs	r2, #65	@ 0x41
 800d53e:	5c9b      	ldrb	r3, [r3, r2]
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b20      	cmp	r3, #32
 800d544:	d138      	bne.n	800d5b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2240      	movs	r2, #64	@ 0x40
 800d54a:	5c9b      	ldrb	r3, [r3, r2]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d101      	bne.n	800d554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d550:	2302      	movs	r3, #2
 800d552:	e032      	b.n	800d5ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2240      	movs	r2, #64	@ 0x40
 800d558:	2101      	movs	r1, #1
 800d55a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2241      	movs	r2, #65	@ 0x41
 800d560:	2124      	movs	r1, #36	@ 0x24
 800d562:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2101      	movs	r1, #1
 800d570:	438a      	bics	r2, r1
 800d572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4911      	ldr	r1, [pc, #68]	@ (800d5c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d580:	400a      	ands	r2, r1
 800d582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6819      	ldr	r1, [r3, #0]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	430a      	orrs	r2, r1
 800d592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2101      	movs	r1, #1
 800d5a0:	430a      	orrs	r2, r1
 800d5a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2241      	movs	r2, #65	@ 0x41
 800d5a8:	2120      	movs	r1, #32
 800d5aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2240      	movs	r2, #64	@ 0x40
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	e000      	b.n	800d5ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d5b8:	2302      	movs	r3, #2
  }
}
 800d5ba:	0018      	movs	r0, r3
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	b002      	add	sp, #8
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	46c0      	nop			@ (mov r8, r8)
 800d5c4:	ffffefff 	.word	0xffffefff

0800d5c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2241      	movs	r2, #65	@ 0x41
 800d5d6:	5c9b      	ldrb	r3, [r3, r2]
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b20      	cmp	r3, #32
 800d5dc:	d139      	bne.n	800d652 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2240      	movs	r2, #64	@ 0x40
 800d5e2:	5c9b      	ldrb	r3, [r3, r2]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d101      	bne.n	800d5ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d5e8:	2302      	movs	r3, #2
 800d5ea:	e033      	b.n	800d654 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2240      	movs	r2, #64	@ 0x40
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2241      	movs	r2, #65	@ 0x41
 800d5f8:	2124      	movs	r1, #36	@ 0x24
 800d5fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2101      	movs	r1, #1
 800d608:	438a      	bics	r2, r1
 800d60a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	4a11      	ldr	r2, [pc, #68]	@ (800d65c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d618:	4013      	ands	r3, r2
 800d61a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	021b      	lsls	r3, r3, #8
 800d620:	68fa      	ldr	r2, [r7, #12]
 800d622:	4313      	orrs	r3, r2
 800d624:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2101      	movs	r1, #1
 800d63a:	430a      	orrs	r2, r1
 800d63c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2241      	movs	r2, #65	@ 0x41
 800d642:	2120      	movs	r1, #32
 800d644:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2240      	movs	r2, #64	@ 0x40
 800d64a:	2100      	movs	r1, #0
 800d64c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	e000      	b.n	800d654 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d652:	2302      	movs	r3, #2
  }
}
 800d654:	0018      	movs	r0, r3
 800d656:	46bd      	mov	sp, r7
 800d658:	b004      	add	sp, #16
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	fffff0ff 	.word	0xfffff0ff

0800d660 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b088      	sub	sp, #32
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	e0e1      	b.n	800d836 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2235      	movs	r2, #53	@ 0x35
 800d676:	5c9b      	ldrb	r3, [r3, r2]
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d107      	bne.n	800d68e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2234      	movs	r2, #52	@ 0x34
 800d682:	2100      	movs	r1, #0
 800d684:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	0018      	movs	r0, r3
 800d68a:	f7f8 fcad 	bl	8005fe8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2235      	movs	r2, #53	@ 0x35
 800d692:	2102      	movs	r1, #2
 800d694:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	69da      	ldr	r2, [r3, #28]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4967      	ldr	r1, [pc, #412]	@ (800d840 <HAL_I2S_Init+0x1e0>)
 800d6a2:	400a      	ands	r2, r1
 800d6a4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	695b      	ldr	r3, [r3, #20]
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d073      	beq.n	800d79e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d102      	bne.n	800d6c4 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800d6be:	2310      	movs	r3, #16
 800d6c0:	617b      	str	r3, [r7, #20]
 800d6c2:	e001      	b.n	800d6c8 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800d6c4:	2320      	movs	r3, #32
 800d6c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	689b      	ldr	r3, [r3, #8]
 800d6cc:	2b20      	cmp	r3, #32
 800d6ce:	d802      	bhi.n	800d6d6 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800d6d6:	f002 fe8d 	bl	80103f4 <HAL_RCC_GetSysClockFreq>
 800d6da:	0003      	movs	r3, r0
 800d6dc:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	691a      	ldr	r2, [r3, #16]
 800d6e2:	2380      	movs	r3, #128	@ 0x80
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d131      	bne.n	800d74e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d016      	beq.n	800d720 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	0019      	movs	r1, r3
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f7f2 fd21 	bl	8000140 <__udivsi3>
 800d6fe:	0003      	movs	r3, r0
 800d700:	001a      	movs	r2, r3
 800d702:	0013      	movs	r3, r2
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	189b      	adds	r3, r3, r2
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	001a      	movs	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	695b      	ldr	r3, [r3, #20]
 800d710:	0019      	movs	r1, r3
 800d712:	0010      	movs	r0, r2
 800d714:	f7f2 fd14 	bl	8000140 <__udivsi3>
 800d718:	0003      	movs	r3, r0
 800d71a:	3305      	adds	r3, #5
 800d71c:	613b      	str	r3, [r7, #16]
 800d71e:	e02a      	b.n	800d776 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	0019      	movs	r1, r3
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f7f2 fd0a 	bl	8000140 <__udivsi3>
 800d72c:	0003      	movs	r3, r0
 800d72e:	001a      	movs	r2, r3
 800d730:	0013      	movs	r3, r2
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	189b      	adds	r3, r3, r2
 800d736:	005b      	lsls	r3, r3, #1
 800d738:	001a      	movs	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	695b      	ldr	r3, [r3, #20]
 800d73e:	0019      	movs	r1, r3
 800d740:	0010      	movs	r0, r2
 800d742:	f7f2 fcfd 	bl	8000140 <__udivsi3>
 800d746:	0003      	movs	r3, r0
 800d748:	3305      	adds	r3, #5
 800d74a:	613b      	str	r3, [r7, #16]
 800d74c:	e013      	b.n	800d776 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d74e:	6979      	ldr	r1, [r7, #20]
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7f2 fcf5 	bl	8000140 <__udivsi3>
 800d756:	0003      	movs	r3, r0
 800d758:	001a      	movs	r2, r3
 800d75a:	0013      	movs	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	189b      	adds	r3, r3, r2
 800d760:	005b      	lsls	r3, r3, #1
 800d762:	001a      	movs	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	0019      	movs	r1, r3
 800d76a:	0010      	movs	r0, r2
 800d76c:	f7f2 fce8 	bl	8000140 <__udivsi3>
 800d770:	0003      	movs	r3, r0
 800d772:	3305      	adds	r3, #5
 800d774:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	210a      	movs	r1, #10
 800d77a:	0018      	movs	r0, r3
 800d77c:	f7f2 fce0 	bl	8000140 <__udivsi3>
 800d780:	0003      	movs	r3, r0
 800d782:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	2201      	movs	r2, #1
 800d788:	4013      	ands	r3, r2
 800d78a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800d78c:	693a      	ldr	r2, [r7, #16]
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	085b      	lsrs	r3, r3, #1
 800d794:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	021b      	lsls	r3, r3, #8
 800d79a:	61bb      	str	r3, [r7, #24]
 800d79c:	e003      	b.n	800d7a6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800d79e:	2302      	movs	r3, #2
 800d7a0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d902      	bls.n	800d7b2 <HAL_I2S_Init+0x152>
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	2bff      	cmp	r3, #255	@ 0xff
 800d7b0:	d907      	bls.n	800d7c2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7b6:	2210      	movs	r2, #16
 800d7b8:	431a      	orrs	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e039      	b.n	800d836 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	691a      	ldr	r2, [r3, #16]
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	431a      	orrs	r2, r3
 800d7ca:	0011      	movs	r1, r2
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	69fa      	ldr	r2, [r7, #28]
 800d7d2:	430a      	orrs	r2, r1
 800d7d4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	69db      	ldr	r3, [r3, #28]
 800d7dc:	4a18      	ldr	r2, [pc, #96]	@ (800d840 <HAL_I2S_Init+0x1e0>)
 800d7de:	401a      	ands	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6859      	ldr	r1, [r3, #4]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	4319      	orrs	r1, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	4319      	orrs	r1, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	430b      	orrs	r3, r1
 800d7f6:	431a      	orrs	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2180      	movs	r1, #128	@ 0x80
 800d7fe:	0109      	lsls	r1, r1, #4
 800d800:	430a      	orrs	r2, r1
 800d802:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	2b30      	cmp	r3, #48	@ 0x30
 800d80a:	d003      	beq.n	800d814 <HAL_I2S_Init+0x1b4>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	2bb0      	cmp	r3, #176	@ 0xb0
 800d812:	d108      	bne.n	800d826 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	69da      	ldr	r2, [r3, #28]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2180      	movs	r1, #128	@ 0x80
 800d820:	0149      	lsls	r1, r1, #5
 800d822:	430a      	orrs	r2, r1
 800d824:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2235      	movs	r2, #53	@ 0x35
 800d830:	2101      	movs	r1, #1
 800d832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	0018      	movs	r0, r3
 800d838:	46bd      	mov	sp, r7
 800d83a:	b008      	add	sp, #32
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	46c0      	nop			@ (mov r8, r8)
 800d840:	fffff040 	.word	0xfffff040

0800d844 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d101      	bne.n	800d856 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	e01b      	b.n	800d88e <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2235      	movs	r2, #53	@ 0x35
 800d85a:	2102      	movs	r1, #2
 800d85c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	69da      	ldr	r2, [r3, #28]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	490b      	ldr	r1, [pc, #44]	@ (800d898 <HAL_I2S_DeInit+0x54>)
 800d86a:	400a      	ands	r2, r1
 800d86c:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	0018      	movs	r0, r3
 800d872:	f7f8 fc2d 	bl	80060d0 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2235      	movs	r2, #53	@ 0x35
 800d880:	2100      	movs	r1, #0
 800d882:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2234      	movs	r2, #52	@ 0x34
 800d888:	2100      	movs	r1, #0
 800d88a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d88c:	2300      	movs	r3, #0
}
 800d88e:	0018      	movs	r0, r3
 800d890:	46bd      	mov	sp, r7
 800d892:	b002      	add	sp, #8
 800d894:	bd80      	pop	{r7, pc}
 800d896:	46c0      	nop			@ (mov r8, r8)
 800d898:	fffffbff 	.word	0xfffffbff

0800d89c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	1dbb      	adds	r3, r7, #6
 800d8a8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d003      	beq.n	800d8b8 <HAL_I2S_Receive_DMA+0x1c>
 800d8b0:	1dbb      	adds	r3, r7, #6
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	e0a6      	b.n	800da0a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2234      	movs	r2, #52	@ 0x34
 800d8c0:	5c9b      	ldrb	r3, [r3, r2]
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d101      	bne.n	800d8cc <HAL_I2S_Receive_DMA+0x30>
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	e09e      	b.n	800da0a <HAL_I2S_Receive_DMA+0x16e>
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2234      	movs	r2, #52	@ 0x34
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2235      	movs	r2, #53	@ 0x35
 800d8d8:	5c9b      	ldrb	r3, [r3, r2]
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d005      	beq.n	800d8ec <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2234      	movs	r2, #52	@ 0x34
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	e08e      	b.n	800da0a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2235      	movs	r2, #53	@ 0x35
 800d8f0:	2104      	movs	r1, #4
 800d8f2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	69db      	ldr	r3, [r3, #28]
 800d906:	2207      	movs	r2, #7
 800d908:	4013      	ands	r3, r2
 800d90a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	2b03      	cmp	r3, #3
 800d910:	d002      	beq.n	800d918 <HAL_I2S_Receive_DMA+0x7c>
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2b05      	cmp	r3, #5
 800d916:	d10c      	bne.n	800d932 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800d918:	1dbb      	adds	r3, r7, #6
 800d91a:	881b      	ldrh	r3, [r3, #0]
 800d91c:	18db      	adds	r3, r3, r3
 800d91e:	b29a      	uxth	r2, r3
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800d924:	1dbb      	adds	r3, r7, #6
 800d926:	881b      	ldrh	r3, [r3, #0]
 800d928:	18db      	adds	r3, r3, r3
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d930:	e007      	b.n	800d942 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	1dba      	adds	r2, r7, #6
 800d936:	8812      	ldrh	r2, [r2, #0]
 800d938:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	1dba      	adds	r2, r7, #6
 800d93e:	8812      	ldrh	r2, [r2, #0]
 800d940:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d946:	4a33      	ldr	r2, [pc, #204]	@ (800da14 <HAL_I2S_Receive_DMA+0x178>)
 800d948:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d94e:	4a32      	ldr	r2, [pc, #200]	@ (800da18 <HAL_I2S_Receive_DMA+0x17c>)
 800d950:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d956:	4a31      	ldr	r2, [pc, #196]	@ (800da1c <HAL_I2S_Receive_DMA+0x180>)
 800d958:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	69da      	ldr	r2, [r3, #28]
 800d960:	23c0      	movs	r3, #192	@ 0xc0
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	401a      	ands	r2, r3
 800d966:	23c0      	movs	r3, #192	@ 0xc0
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d10a      	bne.n	800d984 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800d96e:	2300      	movs	r3, #0
 800d970:	613b      	str	r3, [r7, #16]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	613b      	str	r3, [r7, #16]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	613b      	str	r3, [r7, #16]
 800d982:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	330c      	adds	r3, #12
 800d98e:	0019      	movs	r1, r3
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d994:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d99a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d99c:	f7fd f812 	bl	800a9c4 <HAL_DMA_Start_IT>
 800d9a0:	1e03      	subs	r3, r0, #0
 800d9a2:	d00f      	beq.n	800d9c4 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9a8:	2208      	movs	r2, #8
 800d9aa:	431a      	orrs	r2, r3
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2235      	movs	r2, #53	@ 0x35
 800d9b4:	2101      	movs	r1, #1
 800d9b6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2234      	movs	r2, #52	@ 0x34
 800d9bc:	2100      	movs	r1, #0
 800d9be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e022      	b.n	800da0a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	69da      	ldr	r2, [r3, #28]
 800d9ca:	2380      	movs	r3, #128	@ 0x80
 800d9cc:	00db      	lsls	r3, r3, #3
 800d9ce:	4013      	ands	r3, r2
 800d9d0:	d108      	bne.n	800d9e4 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	69da      	ldr	r2, [r3, #28]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2180      	movs	r1, #128	@ 0x80
 800d9de:	00c9      	lsls	r1, r1, #3
 800d9e0:	430a      	orrs	r2, r1
 800d9e2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	d107      	bne.n	800da00 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	685a      	ldr	r2, [r3, #4]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	430a      	orrs	r2, r1
 800d9fe:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2234      	movs	r2, #52	@ 0x34
 800da04:	2100      	movs	r1, #0
 800da06:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	0018      	movs	r0, r3
 800da0c:	46bd      	mov	sp, r7
 800da0e:	b006      	add	sp, #24
 800da10:	bd80      	pop	{r7, pc}
 800da12:	46c0      	nop			@ (mov r8, r8)
 800da14:	0800dc1d 	.word	0x0800dc1d
 800da18:	0800dbd9 	.word	0x0800dbd9
 800da1c:	0800dc3b 	.word	0x0800dc3b

0800da20 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800da28:	2317      	movs	r3, #23
 800da2a:	18fb      	adds	r3, r7, r3
 800da2c:	2200      	movs	r2, #0
 800da2e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	685a      	ldr	r2, [r3, #4]
 800da34:	2380      	movs	r3, #128	@ 0x80
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	429a      	cmp	r2, r3
 800da3a:	d003      	beq.n	800da44 <HAL_I2S_DMAStop+0x24>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d158      	bne.n	800daf6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d010      	beq.n	800da6e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da50:	0018      	movs	r0, r3
 800da52:	f7fd f81d 	bl	800aa90 <HAL_DMA_Abort>
 800da56:	1e03      	subs	r3, r0, #0
 800da58:	d009      	beq.n	800da6e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da5e:	2208      	movs	r2, #8
 800da60:	431a      	orrs	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800da66:	2317      	movs	r3, #23
 800da68:	18fb      	adds	r3, r7, r3
 800da6a:	2201      	movs	r2, #1
 800da6c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	2364      	movs	r3, #100	@ 0x64
 800da72:	2201      	movs	r2, #1
 800da74:	2102      	movs	r1, #2
 800da76:	f000 f907 	bl	800dc88 <I2S_WaitFlagStateUntilTimeout>
 800da7a:	1e03      	subs	r3, r0, #0
 800da7c:	d00d      	beq.n	800da9a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da82:	2201      	movs	r2, #1
 800da84:	431a      	orrs	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2235      	movs	r2, #53	@ 0x35
 800da8e:	2101      	movs	r1, #1
 800da90:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800da92:	2317      	movs	r3, #23
 800da94:	18fb      	adds	r3, r7, r3
 800da96:	2201      	movs	r2, #1
 800da98:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	2364      	movs	r3, #100	@ 0x64
 800da9e:	2200      	movs	r2, #0
 800daa0:	2180      	movs	r1, #128	@ 0x80
 800daa2:	f000 f8f1 	bl	800dc88 <I2S_WaitFlagStateUntilTimeout>
 800daa6:	1e03      	subs	r3, r0, #0
 800daa8:	d00d      	beq.n	800dac6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daae:	2201      	movs	r2, #1
 800dab0:	431a      	orrs	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2235      	movs	r2, #53	@ 0x35
 800daba:	2101      	movs	r1, #1
 800dabc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800dabe:	2317      	movs	r3, #23
 800dac0:	18fb      	adds	r3, r7, r3
 800dac2:	2201      	movs	r2, #1
 800dac4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	69da      	ldr	r2, [r3, #28]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4938      	ldr	r1, [pc, #224]	@ (800dbb4 <HAL_I2S_DMAStop+0x194>)
 800dad2:	400a      	ands	r2, r1
 800dad4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800dad6:	2300      	movs	r3, #0
 800dad8:	613b      	str	r3, [r7, #16]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	613b      	str	r3, [r7, #16]
 800dae2:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	685a      	ldr	r2, [r3, #4]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2102      	movs	r1, #2
 800daf0:	438a      	bics	r2, r1
 800daf2:	605a      	str	r2, [r3, #4]
 800daf4:	e053      	b.n	800db9e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	685a      	ldr	r2, [r3, #4]
 800dafa:	23c0      	movs	r3, #192	@ 0xc0
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	429a      	cmp	r2, r3
 800db00:	d005      	beq.n	800db0e <HAL_I2S_DMAStop+0xee>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	2380      	movs	r3, #128	@ 0x80
 800db08:	005b      	lsls	r3, r3, #1
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d147      	bne.n	800db9e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db12:	2b00      	cmp	r3, #0
 800db14:	d010      	beq.n	800db38 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db1a:	0018      	movs	r0, r3
 800db1c:	f7fc ffb8 	bl	800aa90 <HAL_DMA_Abort>
 800db20:	1e03      	subs	r3, r0, #0
 800db22:	d009      	beq.n	800db38 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db28:	2208      	movs	r2, #8
 800db2a:	431a      	orrs	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800db30:	2317      	movs	r3, #23
 800db32:	18fb      	adds	r3, r7, r3
 800db34:	2201      	movs	r2, #1
 800db36:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	69da      	ldr	r2, [r3, #28]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	491c      	ldr	r1, [pc, #112]	@ (800dbb4 <HAL_I2S_DMAStop+0x194>)
 800db44:	400a      	ands	r2, r1
 800db46:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800db48:	2300      	movs	r3, #0
 800db4a:	60fb      	str	r3, [r7, #12]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	685a      	ldr	r2, [r3, #4]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2101      	movs	r1, #1
 800db6a:	438a      	bics	r2, r1
 800db6c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685a      	ldr	r2, [r3, #4]
 800db72:	2380      	movs	r3, #128	@ 0x80
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	429a      	cmp	r2, r3
 800db78:	d10e      	bne.n	800db98 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db7e:	2240      	movs	r2, #64	@ 0x40
 800db80:	431a      	orrs	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2235      	movs	r2, #53	@ 0x35
 800db8a:	2101      	movs	r1, #1
 800db8c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800db8e:	2317      	movs	r3, #23
 800db90:	18fb      	adds	r3, r7, r3
 800db92:	2201      	movs	r2, #1
 800db94:	701a      	strb	r2, [r3, #0]
 800db96:	e002      	b.n	800db9e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2235      	movs	r2, #53	@ 0x35
 800dba2:	2101      	movs	r1, #1
 800dba4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800dba6:	2317      	movs	r3, #23
 800dba8:	18fb      	adds	r3, r7, r3
 800dbaa:	781b      	ldrb	r3, [r3, #0]
}
 800dbac:	0018      	movs	r0, r3
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	b006      	add	sp, #24
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	fffffbff 	.word	0xfffffbff

0800dbb8 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800dbc0:	46c0      	nop			@ (mov r8, r8)
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	b002      	add	sp, #8
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800dbd0:	46c0      	nop			@ (mov r8, r8)
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	b002      	add	sp, #8
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	69db      	ldr	r3, [r3, #28]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10e      	bne.n	800dc0c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2101      	movs	r1, #1
 800dbfa:	438a      	bics	r2, r1
 800dbfc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2235      	movs	r2, #53	@ 0x35
 800dc08:	2101      	movs	r1, #1
 800dc0a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	0018      	movs	r0, r3
 800dc10:	f7f9 fa3a 	bl	8007088 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dc14:	46c0      	nop			@ (mov r8, r8)
 800dc16:	46bd      	mov	sp, r7
 800dc18:	b004      	add	sp, #16
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc28:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	0018      	movs	r0, r3
 800dc2e:	f7ff ffc3 	bl	800dbb8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dc32:	46c0      	nop			@ (mov r8, r8)
 800dc34:	46bd      	mov	sp, r7
 800dc36:	b004      	add	sp, #16
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b084      	sub	sp, #16
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc46:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2103      	movs	r1, #3
 800dc54:	438a      	bics	r2, r1
 800dc56:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2200      	movs	r2, #0
 800dc62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2235      	movs	r2, #53	@ 0x35
 800dc68:	2101      	movs	r1, #1
 800dc6a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc70:	2208      	movs	r2, #8
 800dc72:	431a      	orrs	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	0018      	movs	r0, r3
 800dc7c:	f7ff ffa4 	bl	800dbc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dc80:	46c0      	nop			@ (mov r8, r8)
 800dc82:	46bd      	mov	sp, r7
 800dc84:	b004      	add	sp, #16
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	603b      	str	r3, [r7, #0]
 800dc94:	1dfb      	adds	r3, r7, #7
 800dc96:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800dc98:	f7fc f916 	bl	8009ec8 <HAL_GetTick>
 800dc9c:	0003      	movs	r3, r0
 800dc9e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800dca0:	e017      	b.n	800dcd2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	3301      	adds	r3, #1
 800dca6:	d014      	beq.n	800dcd2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800dca8:	f7fc f90e 	bl	8009ec8 <HAL_GetTick>
 800dcac:	0002      	movs	r2, r0
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d902      	bls.n	800dcbe <I2S_WaitFlagStateUntilTimeout+0x36>
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d109      	bne.n	800dcd2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2235      	movs	r2, #53	@ 0x35
 800dcc2:	2101      	movs	r1, #1
 800dcc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2234      	movs	r2, #52	@ 0x34
 800dcca:	2100      	movs	r1, #0
 800dccc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800dcce:	2303      	movs	r3, #3
 800dcd0:	e00f      	b.n	800dcf2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	4013      	ands	r3, r2
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	1ad3      	subs	r3, r2, r3
 800dce0:	425a      	negs	r2, r3
 800dce2:	4153      	adcs	r3, r2
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	001a      	movs	r2, r3
 800dce8:	1dfb      	adds	r3, r7, #7
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d1d8      	bne.n	800dca2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	b006      	add	sp, #24
 800dcf8:	bd80      	pop	{r7, pc}
	...

0800dcfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800dcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcfe:	b08b      	sub	sp, #44	@ 0x2c
 800dd00:	af06      	add	r7, sp, #24
 800dd02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d101      	bne.n	800dd0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e0f0      	b.n	800def0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4a79      	ldr	r2, [pc, #484]	@ (800def8 <HAL_PCD_Init+0x1fc>)
 800dd12:	5c9b      	ldrb	r3, [r3, r2]
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d108      	bne.n	800dd2c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	23aa      	movs	r3, #170	@ 0xaa
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	2100      	movs	r1, #0
 800dd22:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	0018      	movs	r0, r3
 800dd28:	f009 f80c 	bl	8016d44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a72      	ldr	r2, [pc, #456]	@ (800def8 <HAL_PCD_Init+0x1fc>)
 800dd30:	2103      	movs	r1, #3
 800dd32:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	0018      	movs	r0, r3
 800dd3a:	f004 ffbf 	bl	8012cbc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dd3e:	230f      	movs	r3, #15
 800dd40:	18fb      	adds	r3, r7, r3
 800dd42:	2200      	movs	r2, #0
 800dd44:	701a      	strb	r2, [r3, #0]
 800dd46:	e049      	b.n	800dddc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dd48:	200f      	movs	r0, #15
 800dd4a:	183b      	adds	r3, r7, r0
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	6879      	ldr	r1, [r7, #4]
 800dd50:	1c5a      	adds	r2, r3, #1
 800dd52:	0013      	movs	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	189b      	adds	r3, r3, r2
 800dd58:	00db      	lsls	r3, r3, #3
 800dd5a:	18cb      	adds	r3, r1, r3
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	2201      	movs	r2, #1
 800dd60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800dd62:	183b      	adds	r3, r7, r0
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	6879      	ldr	r1, [r7, #4]
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	0013      	movs	r3, r2
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	189b      	adds	r3, r3, r2
 800dd70:	00db      	lsls	r3, r3, #3
 800dd72:	183a      	adds	r2, r7, r0
 800dd74:	7812      	ldrb	r2, [r2, #0]
 800dd76:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dd78:	183b      	adds	r3, r7, r0
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	6879      	ldr	r1, [r7, #4]
 800dd7e:	1c5a      	adds	r2, r3, #1
 800dd80:	0013      	movs	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	189b      	adds	r3, r3, r2
 800dd86:	00db      	lsls	r3, r3, #3
 800dd88:	18cb      	adds	r3, r1, r3
 800dd8a:	3303      	adds	r3, #3
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dd90:	183b      	adds	r3, r7, r0
 800dd92:	781a      	ldrb	r2, [r3, #0]
 800dd94:	6879      	ldr	r1, [r7, #4]
 800dd96:	0013      	movs	r3, r2
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	189b      	adds	r3, r3, r2
 800dd9c:	00db      	lsls	r3, r3, #3
 800dd9e:	18cb      	adds	r3, r1, r3
 800dda0:	3338      	adds	r3, #56	@ 0x38
 800dda2:	2200      	movs	r2, #0
 800dda4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dda6:	183b      	adds	r3, r7, r0
 800dda8:	781a      	ldrb	r2, [r3, #0]
 800ddaa:	6879      	ldr	r1, [r7, #4]
 800ddac:	0013      	movs	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	189b      	adds	r3, r3, r2
 800ddb2:	00db      	lsls	r3, r3, #3
 800ddb4:	18cb      	adds	r3, r1, r3
 800ddb6:	333c      	adds	r3, #60	@ 0x3c
 800ddb8:	2200      	movs	r2, #0
 800ddba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ddbc:	183b      	adds	r3, r7, r0
 800ddbe:	781a      	ldrb	r2, [r3, #0]
 800ddc0:	6879      	ldr	r1, [r7, #4]
 800ddc2:	0013      	movs	r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	189b      	adds	r3, r3, r2
 800ddc8:	00db      	lsls	r3, r3, #3
 800ddca:	18cb      	adds	r3, r1, r3
 800ddcc:	3340      	adds	r3, #64	@ 0x40
 800ddce:	2200      	movs	r2, #0
 800ddd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ddd2:	183b      	adds	r3, r7, r0
 800ddd4:	781a      	ldrb	r2, [r3, #0]
 800ddd6:	183b      	adds	r3, r7, r0
 800ddd8:	3201      	adds	r2, #1
 800ddda:	701a      	strb	r2, [r3, #0]
 800dddc:	210f      	movs	r1, #15
 800ddde:	187b      	adds	r3, r7, r1
 800dde0:	781a      	ldrb	r2, [r3, #0]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d3ae      	bcc.n	800dd48 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ddea:	187b      	adds	r3, r7, r1
 800ddec:	2200      	movs	r2, #0
 800ddee:	701a      	strb	r2, [r3, #0]
 800ddf0:	e056      	b.n	800dea0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ddf2:	240f      	movs	r4, #15
 800ddf4:	193b      	adds	r3, r7, r4
 800ddf6:	781a      	ldrb	r2, [r3, #0]
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	236a      	movs	r3, #106	@ 0x6a
 800ddfc:	33ff      	adds	r3, #255	@ 0xff
 800ddfe:	0019      	movs	r1, r3
 800de00:	0013      	movs	r3, r2
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	189b      	adds	r3, r3, r2
 800de06:	00db      	lsls	r3, r3, #3
 800de08:	18c3      	adds	r3, r0, r3
 800de0a:	185b      	adds	r3, r3, r1
 800de0c:	2200      	movs	r2, #0
 800de0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800de10:	193b      	adds	r3, r7, r4
 800de12:	781a      	ldrb	r2, [r3, #0]
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	23b4      	movs	r3, #180	@ 0xb4
 800de18:	0059      	lsls	r1, r3, #1
 800de1a:	0013      	movs	r3, r2
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	189b      	adds	r3, r3, r2
 800de20:	00db      	lsls	r3, r3, #3
 800de22:	18c3      	adds	r3, r0, r3
 800de24:	185b      	adds	r3, r3, r1
 800de26:	193a      	adds	r2, r7, r4
 800de28:	7812      	ldrb	r2, [r2, #0]
 800de2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800de2c:	193b      	adds	r3, r7, r4
 800de2e:	781a      	ldrb	r2, [r3, #0]
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	236c      	movs	r3, #108	@ 0x6c
 800de34:	33ff      	adds	r3, #255	@ 0xff
 800de36:	0019      	movs	r1, r3
 800de38:	0013      	movs	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	189b      	adds	r3, r3, r2
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	18c3      	adds	r3, r0, r3
 800de42:	185b      	adds	r3, r3, r1
 800de44:	2200      	movs	r2, #0
 800de46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800de48:	193b      	adds	r3, r7, r4
 800de4a:	781a      	ldrb	r2, [r3, #0]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	23bc      	movs	r3, #188	@ 0xbc
 800de50:	0059      	lsls	r1, r3, #1
 800de52:	0013      	movs	r3, r2
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	189b      	adds	r3, r3, r2
 800de58:	00db      	lsls	r3, r3, #3
 800de5a:	18c3      	adds	r3, r0, r3
 800de5c:	185b      	adds	r3, r3, r1
 800de5e:	2200      	movs	r2, #0
 800de60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800de62:	193b      	adds	r3, r7, r4
 800de64:	781a      	ldrb	r2, [r3, #0]
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	23be      	movs	r3, #190	@ 0xbe
 800de6a:	0059      	lsls	r1, r3, #1
 800de6c:	0013      	movs	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	189b      	adds	r3, r3, r2
 800de72:	00db      	lsls	r3, r3, #3
 800de74:	18c3      	adds	r3, r0, r3
 800de76:	185b      	adds	r3, r3, r1
 800de78:	2200      	movs	r2, #0
 800de7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800de7c:	193b      	adds	r3, r7, r4
 800de7e:	781a      	ldrb	r2, [r3, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	23c0      	movs	r3, #192	@ 0xc0
 800de84:	0059      	lsls	r1, r3, #1
 800de86:	0013      	movs	r3, r2
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	189b      	adds	r3, r3, r2
 800de8c:	00db      	lsls	r3, r3, #3
 800de8e:	18c3      	adds	r3, r0, r3
 800de90:	185b      	adds	r3, r3, r1
 800de92:	2200      	movs	r2, #0
 800de94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de96:	193b      	adds	r3, r7, r4
 800de98:	781a      	ldrb	r2, [r3, #0]
 800de9a:	193b      	adds	r3, r7, r4
 800de9c:	3201      	adds	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]
 800dea0:	230f      	movs	r3, #15
 800dea2:	18fb      	adds	r3, r7, r3
 800dea4:	781a      	ldrb	r2, [r3, #0]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d3a1      	bcc.n	800ddf2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6818      	ldr	r0, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	466a      	mov	r2, sp
 800deb6:	0011      	movs	r1, r2
 800deb8:	001a      	movs	r2, r3
 800deba:	3210      	adds	r2, #16
 800debc:	ca70      	ldmia	r2!, {r4, r5, r6}
 800debe:	c170      	stmia	r1!, {r4, r5, r6}
 800dec0:	ca30      	ldmia	r2!, {r4, r5}
 800dec2:	c130      	stmia	r1!, {r4, r5}
 800dec4:	6859      	ldr	r1, [r3, #4]
 800dec6:	689a      	ldr	r2, [r3, #8]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	f004 ff11 	bl	8012cf0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2224      	movs	r2, #36	@ 0x24
 800ded2:	2100      	movs	r1, #0
 800ded4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4a07      	ldr	r2, [pc, #28]	@ (800def8 <HAL_PCD_Init+0x1fc>)
 800deda:	2101      	movs	r1, #1
 800dedc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	69db      	ldr	r3, [r3, #28]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d103      	bne.n	800deee <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	0018      	movs	r0, r3
 800deea:	f001 fd23 	bl	800f934 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800deee:	2300      	movs	r3, #0
}
 800def0:	0018      	movs	r0, r3
 800def2:	46bd      	mov	sp, r7
 800def4:	b005      	add	sp, #20
 800def6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800def8:	000002a9 	.word	0x000002a9

0800defc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	23aa      	movs	r3, #170	@ 0xaa
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	5cd3      	ldrb	r3, [r2, r3]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d101      	bne.n	800df14 <HAL_PCD_Start+0x18>
 800df10:	2302      	movs	r3, #2
 800df12:	e014      	b.n	800df3e <HAL_PCD_Start+0x42>
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	23aa      	movs	r3, #170	@ 0xaa
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	2101      	movs	r1, #1
 800df1c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	0018      	movs	r0, r3
 800df24:	f004 feb4 	bl	8012c90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	0018      	movs	r0, r3
 800df2e:	f006 feb7 	bl	8014ca0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	23aa      	movs	r3, #170	@ 0xaa
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	2100      	movs	r1, #0
 800df3a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	0018      	movs	r0, r3
 800df40:	46bd      	mov	sp, r7
 800df42:	b002      	add	sp, #8
 800df44:	bd80      	pop	{r7, pc}
	...

0800df48 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	0018      	movs	r0, r3
 800df56:	f006 feb9 	bl	8014ccc <USB_ReadInterrupts>
 800df5a:	0003      	movs	r3, r0
 800df5c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	2380      	movs	r3, #128	@ 0x80
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	4013      	ands	r3, r2
 800df66:	d004      	beq.n	800df72 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	0018      	movs	r0, r3
 800df6c:	f000 fb62 	bl	800e634 <PCD_EP_ISR_Handler>

    return;
 800df70:	e11d      	b.n	800e1ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	2380      	movs	r3, #128	@ 0x80
 800df76:	00db      	lsls	r3, r3, #3
 800df78:	4013      	ands	r3, r2
 800df7a:	d015      	beq.n	800dfa8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2244      	movs	r2, #68	@ 0x44
 800df82:	5a9b      	ldrh	r3, [r3, r2]
 800df84:	b29a      	uxth	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	498a      	ldr	r1, [pc, #552]	@ (800e1b4 <HAL_PCD_IRQHandler+0x26c>)
 800df8c:	400a      	ands	r2, r1
 800df8e:	b291      	uxth	r1, r2
 800df90:	2244      	movs	r2, #68	@ 0x44
 800df92:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	0018      	movs	r0, r3
 800df98:	f008 ff57 	bl	8016e4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2100      	movs	r1, #0
 800dfa0:	0018      	movs	r0, r3
 800dfa2:	f000 f915 	bl	800e1d0 <HAL_PCD_SetAddress>

    return;
 800dfa6:	e102      	b.n	800e1ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	2380      	movs	r3, #128	@ 0x80
 800dfac:	01db      	lsls	r3, r3, #7
 800dfae:	4013      	ands	r3, r2
 800dfb0:	d00c      	beq.n	800dfcc <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2244      	movs	r2, #68	@ 0x44
 800dfb8:	5a9b      	ldrh	r3, [r3, r2]
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	497d      	ldr	r1, [pc, #500]	@ (800e1b8 <HAL_PCD_IRQHandler+0x270>)
 800dfc2:	400a      	ands	r2, r1
 800dfc4:	b291      	uxth	r1, r2
 800dfc6:	2244      	movs	r2, #68	@ 0x44
 800dfc8:	5299      	strh	r1, [r3, r2]

    return;
 800dfca:	e0f0      	b.n	800e1ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	2380      	movs	r3, #128	@ 0x80
 800dfd0:	019b      	lsls	r3, r3, #6
 800dfd2:	4013      	ands	r3, r2
 800dfd4:	d00c      	beq.n	800dff0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2244      	movs	r2, #68	@ 0x44
 800dfdc:	5a9b      	ldrh	r3, [r3, r2]
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4975      	ldr	r1, [pc, #468]	@ (800e1bc <HAL_PCD_IRQHandler+0x274>)
 800dfe6:	400a      	ands	r2, r1
 800dfe8:	b291      	uxth	r1, r2
 800dfea:	2244      	movs	r2, #68	@ 0x44
 800dfec:	5299      	strh	r1, [r3, r2]

    return;
 800dfee:	e0de      	b.n	800e1ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	2380      	movs	r3, #128	@ 0x80
 800dff4:	015b      	lsls	r3, r3, #5
 800dff6:	4013      	ands	r3, r2
 800dff8:	d038      	beq.n	800e06c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2240      	movs	r2, #64	@ 0x40
 800e000:	5a9b      	ldrh	r3, [r3, r2]
 800e002:	b29a      	uxth	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2104      	movs	r1, #4
 800e00a:	438a      	bics	r2, r1
 800e00c:	b291      	uxth	r1, r2
 800e00e:	2240      	movs	r2, #64	@ 0x40
 800e010:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2240      	movs	r2, #64	@ 0x40
 800e018:	5a9b      	ldrh	r3, [r3, r2]
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2108      	movs	r1, #8
 800e022:	438a      	bics	r2, r1
 800e024:	b291      	uxth	r1, r2
 800e026:	2240      	movs	r2, #64	@ 0x40
 800e028:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	23b8      	movs	r3, #184	@ 0xb8
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	5cd3      	ldrb	r3, [r2, r3]
 800e032:	2b01      	cmp	r3, #1
 800e034:	d109      	bne.n	800e04a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	23b8      	movs	r3, #184	@ 0xb8
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	2100      	movs	r1, #0
 800e03e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2100      	movs	r1, #0
 800e044:	0018      	movs	r0, r3
 800e046:	f001 fc9f 	bl	800f988 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	0018      	movs	r0, r3
 800e04e:	f008 ff3d 	bl	8016ecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2244      	movs	r2, #68	@ 0x44
 800e058:	5a9b      	ldrh	r3, [r3, r2]
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4957      	ldr	r1, [pc, #348]	@ (800e1c0 <HAL_PCD_IRQHandler+0x278>)
 800e062:	400a      	ands	r2, r1
 800e064:	b291      	uxth	r1, r2
 800e066:	2244      	movs	r2, #68	@ 0x44
 800e068:	5299      	strh	r1, [r3, r2]

    return;
 800e06a:	e0a0      	b.n	800e1ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	2380      	movs	r3, #128	@ 0x80
 800e070:	011b      	lsls	r3, r3, #4
 800e072:	4013      	ands	r3, r2
 800e074:	d028      	beq.n	800e0c8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2240      	movs	r2, #64	@ 0x40
 800e07c:	5a9b      	ldrh	r3, [r3, r2]
 800e07e:	b29a      	uxth	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2108      	movs	r1, #8
 800e086:	430a      	orrs	r2, r1
 800e088:	b291      	uxth	r1, r2
 800e08a:	2240      	movs	r2, #64	@ 0x40
 800e08c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2244      	movs	r2, #68	@ 0x44
 800e094:	5a9b      	ldrh	r3, [r3, r2]
 800e096:	b29a      	uxth	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4949      	ldr	r1, [pc, #292]	@ (800e1c4 <HAL_PCD_IRQHandler+0x27c>)
 800e09e:	400a      	ands	r2, r1
 800e0a0:	b291      	uxth	r1, r2
 800e0a2:	2244      	movs	r2, #68	@ 0x44
 800e0a4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2240      	movs	r2, #64	@ 0x40
 800e0ac:	5a9b      	ldrh	r3, [r3, r2]
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2104      	movs	r1, #4
 800e0b6:	430a      	orrs	r2, r1
 800e0b8:	b291      	uxth	r1, r2
 800e0ba:	2240      	movs	r2, #64	@ 0x40
 800e0bc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	0018      	movs	r0, r3
 800e0c2:	f008 fee7 	bl	8016e94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e0c6:	e072      	b.n	800e1ae <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2280      	movs	r2, #128	@ 0x80
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	d046      	beq.n	800e15e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2244      	movs	r2, #68	@ 0x44
 800e0d6:	5a9b      	ldrh	r3, [r3, r2]
 800e0d8:	b29a      	uxth	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2180      	movs	r1, #128	@ 0x80
 800e0e0:	438a      	bics	r2, r1
 800e0e2:	b291      	uxth	r1, r2
 800e0e4:	2244      	movs	r2, #68	@ 0x44
 800e0e6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	23b8      	movs	r3, #184	@ 0xb8
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	5cd3      	ldrb	r3, [r2, r3]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d12f      	bne.n	800e154 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2240      	movs	r2, #64	@ 0x40
 800e0fa:	5a9b      	ldrh	r3, [r3, r2]
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2104      	movs	r1, #4
 800e104:	430a      	orrs	r2, r1
 800e106:	b291      	uxth	r1, r2
 800e108:	2240      	movs	r2, #64	@ 0x40
 800e10a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2240      	movs	r2, #64	@ 0x40
 800e112:	5a9b      	ldrh	r3, [r3, r2]
 800e114:	b29a      	uxth	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2108      	movs	r1, #8
 800e11c:	430a      	orrs	r2, r1
 800e11e:	b291      	uxth	r1, r2
 800e120:	2240      	movs	r2, #64	@ 0x40
 800e122:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	23b8      	movs	r3, #184	@ 0xb8
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	2101      	movs	r1, #1
 800e12c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2254      	movs	r2, #84	@ 0x54
 800e134:	5a9b      	ldrh	r3, [r3, r2]
 800e136:	b29b      	uxth	r3, r3
 800e138:	089b      	lsrs	r3, r3, #2
 800e13a:	223c      	movs	r2, #60	@ 0x3c
 800e13c:	4013      	ands	r3, r2
 800e13e:	0019      	movs	r1, r3
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	23b9      	movs	r3, #185	@ 0xb9
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2101      	movs	r1, #1
 800e14c:	0018      	movs	r0, r3
 800e14e:	f001 fc1b 	bl	800f988 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800e152:	e02c      	b.n	800e1ae <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	0018      	movs	r0, r3
 800e158:	f008 fe9c 	bl	8016e94 <HAL_PCD_SuspendCallback>
    return;
 800e15c:	e027      	b.n	800e1ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	2380      	movs	r3, #128	@ 0x80
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	4013      	ands	r3, r2
 800e166:	d010      	beq.n	800e18a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2244      	movs	r2, #68	@ 0x44
 800e16e:	5a9b      	ldrh	r3, [r3, r2]
 800e170:	b29a      	uxth	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4914      	ldr	r1, [pc, #80]	@ (800e1c8 <HAL_PCD_IRQHandler+0x280>)
 800e178:	400a      	ands	r2, r1
 800e17a:	b291      	uxth	r1, r2
 800e17c:	2244      	movs	r2, #68	@ 0x44
 800e17e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	0018      	movs	r0, r3
 800e184:	f008 fe52 	bl	8016e2c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e188:	e011      	b.n	800e1ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	2380      	movs	r3, #128	@ 0x80
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	4013      	ands	r3, r2
 800e192:	d00c      	beq.n	800e1ae <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2244      	movs	r2, #68	@ 0x44
 800e19a:	5a9b      	ldrh	r3, [r3, r2]
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	490a      	ldr	r1, [pc, #40]	@ (800e1cc <HAL_PCD_IRQHandler+0x284>)
 800e1a4:	400a      	ands	r2, r1
 800e1a6:	b291      	uxth	r1, r2
 800e1a8:	2244      	movs	r2, #68	@ 0x44
 800e1aa:	5299      	strh	r1, [r3, r2]

    return;
 800e1ac:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	b004      	add	sp, #16
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	fffffbff 	.word	0xfffffbff
 800e1b8:	ffffbfff 	.word	0xffffbfff
 800e1bc:	ffffdfff 	.word	0xffffdfff
 800e1c0:	ffffefff 	.word	0xffffefff
 800e1c4:	fffff7ff 	.word	0xfffff7ff
 800e1c8:	fffffdff 	.word	0xfffffdff
 800e1cc:	fffffeff 	.word	0xfffffeff

0800e1d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	000a      	movs	r2, r1
 800e1da:	1cfb      	adds	r3, r7, #3
 800e1dc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	23aa      	movs	r3, #170	@ 0xaa
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	5cd3      	ldrb	r3, [r2, r3]
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d101      	bne.n	800e1ee <HAL_PCD_SetAddress+0x1e>
 800e1ea:	2302      	movs	r3, #2
 800e1ec:	e017      	b.n	800e21e <HAL_PCD_SetAddress+0x4e>
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	23aa      	movs	r3, #170	@ 0xaa
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	1cfa      	adds	r2, r7, #3
 800e1fc:	2124      	movs	r1, #36	@ 0x24
 800e1fe:	7812      	ldrb	r2, [r2, #0]
 800e200:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	1cfb      	adds	r3, r7, #3
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	0019      	movs	r1, r3
 800e20c:	0010      	movs	r0, r2
 800e20e:	f006 fd33 	bl	8014c78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	23aa      	movs	r3, #170	@ 0xaa
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	2100      	movs	r1, #0
 800e21a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	0018      	movs	r0, r3
 800e220:	46bd      	mov	sp, r7
 800e222:	b002      	add	sp, #8
 800e224:	bd80      	pop	{r7, pc}

0800e226 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e226:	b590      	push	{r4, r7, lr}
 800e228:	b085      	sub	sp, #20
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	000c      	movs	r4, r1
 800e230:	0010      	movs	r0, r2
 800e232:	0019      	movs	r1, r3
 800e234:	1cfb      	adds	r3, r7, #3
 800e236:	1c22      	adds	r2, r4, #0
 800e238:	701a      	strb	r2, [r3, #0]
 800e23a:	003b      	movs	r3, r7
 800e23c:	1c02      	adds	r2, r0, #0
 800e23e:	801a      	strh	r2, [r3, #0]
 800e240:	1cbb      	adds	r3, r7, #2
 800e242:	1c0a      	adds	r2, r1, #0
 800e244:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e246:	230b      	movs	r3, #11
 800e248:	18fb      	adds	r3, r7, r3
 800e24a:	2200      	movs	r2, #0
 800e24c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e24e:	1cfb      	adds	r3, r7, #3
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	b25b      	sxtb	r3, r3
 800e254:	2b00      	cmp	r3, #0
 800e256:	da0f      	bge.n	800e278 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e258:	1cfb      	adds	r3, r7, #3
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	2207      	movs	r2, #7
 800e25e:	4013      	ands	r3, r2
 800e260:	1c5a      	adds	r2, r3, #1
 800e262:	0013      	movs	r3, r2
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	189b      	adds	r3, r3, r2
 800e268:	00db      	lsls	r3, r3, #3
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	18d3      	adds	r3, r2, r3
 800e26e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2201      	movs	r2, #1
 800e274:	705a      	strb	r2, [r3, #1]
 800e276:	e00f      	b.n	800e298 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e278:	1cfb      	adds	r3, r7, #3
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	2207      	movs	r2, #7
 800e27e:	401a      	ands	r2, r3
 800e280:	0013      	movs	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	189b      	adds	r3, r3, r2
 800e286:	00db      	lsls	r3, r3, #3
 800e288:	3369      	adds	r3, #105	@ 0x69
 800e28a:	33ff      	adds	r3, #255	@ 0xff
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	18d3      	adds	r3, r2, r3
 800e290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e298:	1cfb      	adds	r3, r7, #3
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2207      	movs	r2, #7
 800e29e:	4013      	ands	r3, r2
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e2a6:	003b      	movs	r3, r7
 800e2a8:	881a      	ldrh	r2, [r3, #0]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	1cba      	adds	r2, r7, #2
 800e2b2:	7812      	ldrb	r2, [r2, #0]
 800e2b4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e2b6:	1cbb      	adds	r3, r7, #2
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2b02      	cmp	r3, #2
 800e2bc:	d102      	bne.n	800e2c4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	23aa      	movs	r3, #170	@ 0xaa
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	5cd3      	ldrb	r3, [r2, r3]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d101      	bne.n	800e2d4 <HAL_PCD_EP_Open+0xae>
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	e013      	b.n	800e2fc <HAL_PCD_EP_Open+0xd6>
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	23aa      	movs	r3, #170	@ 0xaa
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	2101      	movs	r1, #1
 800e2dc:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	0011      	movs	r1, r2
 800e2e6:	0018      	movs	r0, r3
 800e2e8:	f004 fd2a 	bl	8012d40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	23aa      	movs	r3, #170	@ 0xaa
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e2f6:	230b      	movs	r3, #11
 800e2f8:	18fb      	adds	r3, r7, r3
 800e2fa:	781b      	ldrb	r3, [r3, #0]
}
 800e2fc:	0018      	movs	r0, r3
 800e2fe:	46bd      	mov	sp, r7
 800e300:	b005      	add	sp, #20
 800e302:	bd90      	pop	{r4, r7, pc}

0800e304 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	000a      	movs	r2, r1
 800e30e:	1cfb      	adds	r3, r7, #3
 800e310:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e312:	1cfb      	adds	r3, r7, #3
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	b25b      	sxtb	r3, r3
 800e318:	2b00      	cmp	r3, #0
 800e31a:	da0f      	bge.n	800e33c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e31c:	1cfb      	adds	r3, r7, #3
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	2207      	movs	r2, #7
 800e322:	4013      	ands	r3, r2
 800e324:	1c5a      	adds	r2, r3, #1
 800e326:	0013      	movs	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	189b      	adds	r3, r3, r2
 800e32c:	00db      	lsls	r3, r3, #3
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	18d3      	adds	r3, r2, r3
 800e332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2201      	movs	r2, #1
 800e338:	705a      	strb	r2, [r3, #1]
 800e33a:	e00f      	b.n	800e35c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e33c:	1cfb      	adds	r3, r7, #3
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	2207      	movs	r2, #7
 800e342:	401a      	ands	r2, r3
 800e344:	0013      	movs	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	189b      	adds	r3, r3, r2
 800e34a:	00db      	lsls	r3, r3, #3
 800e34c:	3369      	adds	r3, #105	@ 0x69
 800e34e:	33ff      	adds	r3, #255	@ 0xff
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	18d3      	adds	r3, r2, r3
 800e354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2200      	movs	r2, #0
 800e35a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e35c:	1cfb      	adds	r3, r7, #3
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	2207      	movs	r2, #7
 800e362:	4013      	ands	r3, r2
 800e364:	b2da      	uxtb	r2, r3
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	23aa      	movs	r3, #170	@ 0xaa
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	5cd3      	ldrb	r3, [r2, r3]
 800e372:	2b01      	cmp	r3, #1
 800e374:	d101      	bne.n	800e37a <HAL_PCD_EP_Close+0x76>
 800e376:	2302      	movs	r3, #2
 800e378:	e011      	b.n	800e39e <HAL_PCD_EP_Close+0x9a>
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	23aa      	movs	r3, #170	@ 0xaa
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	2101      	movs	r1, #1
 800e382:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	0011      	movs	r1, r2
 800e38c:	0018      	movs	r0, r3
 800e38e:	f005 f879 	bl	8013484 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	23aa      	movs	r3, #170	@ 0xaa
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	2100      	movs	r1, #0
 800e39a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	0018      	movs	r0, r3
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	b004      	add	sp, #16
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b086      	sub	sp, #24
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	60f8      	str	r0, [r7, #12]
 800e3ae:	607a      	str	r2, [r7, #4]
 800e3b0:	603b      	str	r3, [r7, #0]
 800e3b2:	200b      	movs	r0, #11
 800e3b4:	183b      	adds	r3, r7, r0
 800e3b6:	1c0a      	adds	r2, r1, #0
 800e3b8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e3ba:	0001      	movs	r1, r0
 800e3bc:	187b      	adds	r3, r7, r1
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2207      	movs	r2, #7
 800e3c2:	401a      	ands	r2, r3
 800e3c4:	0013      	movs	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	189b      	adds	r3, r3, r2
 800e3ca:	00db      	lsls	r3, r3, #3
 800e3cc:	3369      	adds	r3, #105	@ 0x69
 800e3ce:	33ff      	adds	r3, #255	@ 0xff
 800e3d0:	68fa      	ldr	r2, [r7, #12]
 800e3d2:	18d3      	adds	r3, r2, r3
 800e3d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e3ee:	187b      	adds	r3, r7, r1
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	2207      	movs	r2, #7
 800e3f4:	4013      	ands	r3, r2
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	697a      	ldr	r2, [r7, #20]
 800e402:	0011      	movs	r1, r2
 800e404:	0018      	movs	r0, r3
 800e406:	f005 f9fd 	bl	8013804 <USB_EPStartXfer>

  return HAL_OK;
 800e40a:	2300      	movs	r3, #0
}
 800e40c:	0018      	movs	r0, r3
 800e40e:	46bd      	mov	sp, r7
 800e410:	b006      	add	sp, #24
 800e412:	bd80      	pop	{r7, pc}

0800e414 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	000a      	movs	r2, r1
 800e41e:	1cfb      	adds	r3, r7, #3
 800e420:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e422:	1cfb      	adds	r3, r7, #3
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2207      	movs	r2, #7
 800e428:	401a      	ands	r2, r3
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	23c2      	movs	r3, #194	@ 0xc2
 800e42e:	0059      	lsls	r1, r3, #1
 800e430:	0013      	movs	r3, r2
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	189b      	adds	r3, r3, r2
 800e436:	00db      	lsls	r3, r3, #3
 800e438:	18c3      	adds	r3, r0, r3
 800e43a:	185b      	adds	r3, r3, r1
 800e43c:	681b      	ldr	r3, [r3, #0]
}
 800e43e:	0018      	movs	r0, r3
 800e440:	46bd      	mov	sp, r7
 800e442:	b002      	add	sp, #8
 800e444:	bd80      	pop	{r7, pc}

0800e446 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b086      	sub	sp, #24
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	60f8      	str	r0, [r7, #12]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	603b      	str	r3, [r7, #0]
 800e452:	200b      	movs	r0, #11
 800e454:	183b      	adds	r3, r7, r0
 800e456:	1c0a      	adds	r2, r1, #0
 800e458:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e45a:	183b      	adds	r3, r7, r0
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	2207      	movs	r2, #7
 800e460:	4013      	ands	r3, r2
 800e462:	1c5a      	adds	r2, r3, #1
 800e464:	0013      	movs	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	189b      	adds	r3, r3, r2
 800e46a:	00db      	lsls	r3, r3, #3
 800e46c:	68fa      	ldr	r2, [r7, #12]
 800e46e:	18d3      	adds	r3, r2, r3
 800e470:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	683a      	ldr	r2, [r7, #0]
 800e47c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	2224      	movs	r2, #36	@ 0x24
 800e482:	2101      	movs	r1, #1
 800e484:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	2200      	movs	r2, #0
 800e490:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	2201      	movs	r2, #1
 800e496:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e498:	183b      	adds	r3, r7, r0
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	2207      	movs	r2, #7
 800e49e:	4013      	ands	r3, r2
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	697a      	ldr	r2, [r7, #20]
 800e4ac:	0011      	movs	r1, r2
 800e4ae:	0018      	movs	r0, r3
 800e4b0:	f005 f9a8 	bl	8013804 <USB_EPStartXfer>

  return HAL_OK;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	0018      	movs	r0, r3
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	b006      	add	sp, #24
 800e4bc:	bd80      	pop	{r7, pc}

0800e4be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e4be:	b580      	push	{r7, lr}
 800e4c0:	b084      	sub	sp, #16
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	6078      	str	r0, [r7, #4]
 800e4c6:	000a      	movs	r2, r1
 800e4c8:	1cfb      	adds	r3, r7, #3
 800e4ca:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e4cc:	1cfb      	adds	r3, r7, #3
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	2207      	movs	r2, #7
 800e4d2:	401a      	ands	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d901      	bls.n	800e4e0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e046      	b.n	800e56e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e4e0:	1cfb      	adds	r3, r7, #3
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	b25b      	sxtb	r3, r3
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	da0f      	bge.n	800e50a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4ea:	1cfb      	adds	r3, r7, #3
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	2207      	movs	r2, #7
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	1c5a      	adds	r2, r3, #1
 800e4f4:	0013      	movs	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	189b      	adds	r3, r3, r2
 800e4fa:	00db      	lsls	r3, r3, #3
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	18d3      	adds	r3, r2, r3
 800e500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2201      	movs	r2, #1
 800e506:	705a      	strb	r2, [r3, #1]
 800e508:	e00d      	b.n	800e526 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e50a:	1cfb      	adds	r3, r7, #3
 800e50c:	781a      	ldrb	r2, [r3, #0]
 800e50e:	0013      	movs	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	189b      	adds	r3, r3, r2
 800e514:	00db      	lsls	r3, r3, #3
 800e516:	3369      	adds	r3, #105	@ 0x69
 800e518:	33ff      	adds	r3, #255	@ 0xff
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	18d3      	adds	r3, r2, r3
 800e51e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2200      	movs	r2, #0
 800e524:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2201      	movs	r2, #1
 800e52a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e52c:	1cfb      	adds	r3, r7, #3
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2207      	movs	r2, #7
 800e532:	4013      	ands	r3, r2
 800e534:	b2da      	uxtb	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	23aa      	movs	r3, #170	@ 0xaa
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	5cd3      	ldrb	r3, [r2, r3]
 800e542:	2b01      	cmp	r3, #1
 800e544:	d101      	bne.n	800e54a <HAL_PCD_EP_SetStall+0x8c>
 800e546:	2302      	movs	r3, #2
 800e548:	e011      	b.n	800e56e <HAL_PCD_EP_SetStall+0xb0>
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	23aa      	movs	r3, #170	@ 0xaa
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	2101      	movs	r1, #1
 800e552:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	0011      	movs	r1, r2
 800e55c:	0018      	movs	r0, r3
 800e55e:	f006 fa89 	bl	8014a74 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	23aa      	movs	r3, #170	@ 0xaa
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	2100      	movs	r1, #0
 800e56a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e56c:	2300      	movs	r3, #0
}
 800e56e:	0018      	movs	r0, r3
 800e570:	46bd      	mov	sp, r7
 800e572:	b004      	add	sp, #16
 800e574:	bd80      	pop	{r7, pc}

0800e576 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b084      	sub	sp, #16
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	000a      	movs	r2, r1
 800e580:	1cfb      	adds	r3, r7, #3
 800e582:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e584:	1cfb      	adds	r3, r7, #3
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	220f      	movs	r2, #15
 800e58a:	401a      	ands	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	429a      	cmp	r2, r3
 800e592:	d901      	bls.n	800e598 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	e048      	b.n	800e62a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e598:	1cfb      	adds	r3, r7, #3
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	b25b      	sxtb	r3, r3
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	da0f      	bge.n	800e5c2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5a2:	1cfb      	adds	r3, r7, #3
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	2207      	movs	r2, #7
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	0013      	movs	r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	189b      	adds	r3, r3, r2
 800e5b2:	00db      	lsls	r3, r3, #3
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	18d3      	adds	r3, r2, r3
 800e5b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2201      	movs	r2, #1
 800e5be:	705a      	strb	r2, [r3, #1]
 800e5c0:	e00f      	b.n	800e5e2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e5c2:	1cfb      	adds	r3, r7, #3
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	2207      	movs	r2, #7
 800e5c8:	401a      	ands	r2, r3
 800e5ca:	0013      	movs	r3, r2
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	189b      	adds	r3, r3, r2
 800e5d0:	00db      	lsls	r3, r3, #3
 800e5d2:	3369      	adds	r3, #105	@ 0x69
 800e5d4:	33ff      	adds	r3, #255	@ 0xff
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	18d3      	adds	r3, r2, r3
 800e5da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e5e8:	1cfb      	adds	r3, r7, #3
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2207      	movs	r2, #7
 800e5ee:	4013      	ands	r3, r2
 800e5f0:	b2da      	uxtb	r2, r3
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	23aa      	movs	r3, #170	@ 0xaa
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	5cd3      	ldrb	r3, [r2, r3]
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d101      	bne.n	800e606 <HAL_PCD_EP_ClrStall+0x90>
 800e602:	2302      	movs	r3, #2
 800e604:	e011      	b.n	800e62a <HAL_PCD_EP_ClrStall+0xb4>
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	23aa      	movs	r3, #170	@ 0xaa
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	2101      	movs	r1, #1
 800e60e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	0011      	movs	r1, r2
 800e618:	0018      	movs	r0, r3
 800e61a:	f006 fa7b 	bl	8014b14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	23aa      	movs	r3, #170	@ 0xaa
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	2100      	movs	r1, #0
 800e626:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	0018      	movs	r0, r3
 800e62c:	46bd      	mov	sp, r7
 800e62e:	b004      	add	sp, #16
 800e630:	bd80      	pop	{r7, pc}
	...

0800e634 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e634:	b5b0      	push	{r4, r5, r7, lr}
 800e636:	b096      	sub	sp, #88	@ 0x58
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e63c:	f000 fbec 	bl	800ee18 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	204e      	movs	r0, #78	@ 0x4e
 800e646:	183b      	adds	r3, r7, r0
 800e648:	2144      	movs	r1, #68	@ 0x44
 800e64a:	5a52      	ldrh	r2, [r2, r1]
 800e64c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e64e:	183b      	adds	r3, r7, r0
 800e650:	881b      	ldrh	r3, [r3, #0]
 800e652:	b2da      	uxtb	r2, r3
 800e654:	244d      	movs	r4, #77	@ 0x4d
 800e656:	193b      	adds	r3, r7, r4
 800e658:	210f      	movs	r1, #15
 800e65a:	400a      	ands	r2, r1
 800e65c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800e65e:	193b      	adds	r3, r7, r4
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d000      	beq.n	800e668 <PCD_EP_ISR_Handler+0x34>
 800e666:	e18f      	b.n	800e988 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e668:	183b      	adds	r3, r7, r0
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	2210      	movs	r2, #16
 800e66e:	4013      	ands	r3, r2
 800e670:	d155      	bne.n	800e71e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	881b      	ldrh	r3, [r3, #0]
 800e678:	b29a      	uxth	r2, r3
 800e67a:	200e      	movs	r0, #14
 800e67c:	183b      	adds	r3, r7, r0
 800e67e:	49bb      	ldr	r1, [pc, #748]	@ (800e96c <PCD_EP_ISR_Handler+0x338>)
 800e680:	400a      	ands	r2, r1
 800e682:	801a      	strh	r2, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	183a      	adds	r2, r7, r0
 800e68a:	8812      	ldrh	r2, [r2, #0]
 800e68c:	49b8      	ldr	r1, [pc, #736]	@ (800e970 <PCD_EP_ISR_Handler+0x33c>)
 800e68e:	430a      	orrs	r2, r1
 800e690:	b292      	uxth	r2, r2
 800e692:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	3328      	adds	r3, #40	@ 0x28
 800e698:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2250      	movs	r2, #80	@ 0x50
 800e6a0:	5a9b      	ldrh	r3, [r3, r2]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	001a      	movs	r2, r3
 800e6a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	18d2      	adds	r2, r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	18d3      	adds	r3, r2, r3
 800e6b4:	4aaf      	ldr	r2, [pc, #700]	@ (800e974 <PCD_EP_ISR_Handler+0x340>)
 800e6b6:	4694      	mov	ip, r2
 800e6b8:	4463      	add	r3, ip
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	059b      	lsls	r3, r3, #22
 800e6be:	0d9a      	lsrs	r2, r3, #22
 800e6c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e6c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6c6:	695a      	ldr	r2, [r3, #20]
 800e6c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ca:	69db      	ldr	r3, [r3, #28]
 800e6cc:	18d2      	adds	r2, r2, r3
 800e6ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	0018      	movs	r0, r3
 800e6d8:	f008 fb8a 	bl	8016df0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2224      	movs	r2, #36	@ 0x24
 800e6e0:	5c9b      	ldrb	r3, [r3, r2]
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d101      	bne.n	800e6ec <PCD_EP_ISR_Handler+0xb8>
 800e6e8:	f000 fb96 	bl	800ee18 <PCD_EP_ISR_Handler+0x7e4>
 800e6ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ee:	699b      	ldr	r3, [r3, #24]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d001      	beq.n	800e6f8 <PCD_EP_ISR_Handler+0xc4>
 800e6f4:	f000 fb90 	bl	800ee18 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2224      	movs	r2, #36	@ 0x24
 800e6fc:	5c9b      	ldrb	r3, [r3, r2]
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	2280      	movs	r2, #128	@ 0x80
 800e702:	4252      	negs	r2, r2
 800e704:	4313      	orrs	r3, r2
 800e706:	b2da      	uxtb	r2, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	0011      	movs	r1, r2
 800e70e:	224c      	movs	r2, #76	@ 0x4c
 800e710:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2224      	movs	r2, #36	@ 0x24
 800e716:	2100      	movs	r1, #0
 800e718:	5499      	strb	r1, [r3, r2]
 800e71a:	f000 fb7d 	bl	800ee18 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	3369      	adds	r3, #105	@ 0x69
 800e722:	33ff      	adds	r3, #255	@ 0xff
 800e724:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	214a      	movs	r1, #74	@ 0x4a
 800e72c:	187b      	adds	r3, r7, r1
 800e72e:	8812      	ldrh	r2, [r2, #0]
 800e730:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800e732:	187b      	adds	r3, r7, r1
 800e734:	881a      	ldrh	r2, [r3, #0]
 800e736:	2380      	movs	r3, #128	@ 0x80
 800e738:	011b      	lsls	r3, r3, #4
 800e73a:	4013      	ands	r3, r2
 800e73c:	d037      	beq.n	800e7ae <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2250      	movs	r2, #80	@ 0x50
 800e744:	5a9b      	ldrh	r3, [r3, r2]
 800e746:	b29b      	uxth	r3, r3
 800e748:	001a      	movs	r2, r3
 800e74a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	00db      	lsls	r3, r3, #3
 800e750:	18d2      	adds	r2, r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	18d3      	adds	r3, r2, r3
 800e758:	4a87      	ldr	r2, [pc, #540]	@ (800e978 <PCD_EP_ISR_Handler+0x344>)
 800e75a:	4694      	mov	ip, r2
 800e75c:	4463      	add	r3, ip
 800e75e:	881b      	ldrh	r3, [r3, #0]
 800e760:	059b      	lsls	r3, r3, #22
 800e762:	0d9a      	lsrs	r2, r3, #22
 800e764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e766:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6818      	ldr	r0, [r3, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	22ac      	movs	r2, #172	@ 0xac
 800e770:	0092      	lsls	r2, r2, #2
 800e772:	1899      	adds	r1, r3, r2
 800e774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e776:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800e778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e77a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f006 fafc 	bl	8014d7a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	881b      	ldrh	r3, [r3, #0]
 800e788:	b29a      	uxth	r2, r3
 800e78a:	2010      	movs	r0, #16
 800e78c:	183b      	adds	r3, r7, r0
 800e78e:	497b      	ldr	r1, [pc, #492]	@ (800e97c <PCD_EP_ISR_Handler+0x348>)
 800e790:	400a      	ands	r2, r1
 800e792:	801a      	strh	r2, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	183a      	adds	r2, r7, r0
 800e79a:	8812      	ldrh	r2, [r2, #0]
 800e79c:	2180      	movs	r1, #128	@ 0x80
 800e79e:	430a      	orrs	r2, r1
 800e7a0:	b292      	uxth	r2, r2
 800e7a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	0018      	movs	r0, r3
 800e7a8:	f008 faec 	bl	8016d84 <HAL_PCD_SetupStageCallback>
 800e7ac:	e334      	b.n	800ee18 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e7ae:	234a      	movs	r3, #74	@ 0x4a
 800e7b0:	18fb      	adds	r3, r7, r3
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	5e9b      	ldrsh	r3, [r3, r2]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	db00      	blt.n	800e7bc <PCD_EP_ISR_Handler+0x188>
 800e7ba:	e32d      	b.n	800ee18 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	881b      	ldrh	r3, [r3, #0]
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	201e      	movs	r0, #30
 800e7c6:	183b      	adds	r3, r7, r0
 800e7c8:	496c      	ldr	r1, [pc, #432]	@ (800e97c <PCD_EP_ISR_Handler+0x348>)
 800e7ca:	400a      	ands	r2, r1
 800e7cc:	801a      	strh	r2, [r3, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	183a      	adds	r2, r7, r0
 800e7d4:	8812      	ldrh	r2, [r2, #0]
 800e7d6:	2180      	movs	r1, #128	@ 0x80
 800e7d8:	430a      	orrs	r2, r1
 800e7da:	b292      	uxth	r2, r2
 800e7dc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2250      	movs	r2, #80	@ 0x50
 800e7e4:	5a9b      	ldrh	r3, [r3, r2]
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	001a      	movs	r2, r3
 800e7ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	00db      	lsls	r3, r3, #3
 800e7f0:	18d2      	adds	r2, r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	18d3      	adds	r3, r2, r3
 800e7f8:	4a5f      	ldr	r2, [pc, #380]	@ (800e978 <PCD_EP_ISR_Handler+0x344>)
 800e7fa:	4694      	mov	ip, r2
 800e7fc:	4463      	add	r3, ip
 800e7fe:	881b      	ldrh	r3, [r3, #0]
 800e800:	059b      	lsls	r3, r3, #22
 800e802:	0d9a      	lsrs	r2, r3, #22
 800e804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e806:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800e808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e80a:	69db      	ldr	r3, [r3, #28]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d01a      	beq.n	800e846 <PCD_EP_ISR_Handler+0x212>
 800e810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e812:	695b      	ldr	r3, [r3, #20]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d016      	beq.n	800e846 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6818      	ldr	r0, [r3, #0]
 800e81c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e81e:	6959      	ldr	r1, [r3, #20]
 800e820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e822:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800e824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e826:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e828:	b29b      	uxth	r3, r3
 800e82a:	f006 faa6 	bl	8014d7a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800e82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e830:	695a      	ldr	r2, [r3, #20]
 800e832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e834:	69db      	ldr	r3, [r3, #28]
 800e836:	18d2      	adds	r2, r2, r3
 800e838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e83a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2100      	movs	r1, #0
 800e840:	0018      	movs	r0, r3
 800e842:	f008 fab4 	bl	8016dae <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	214a      	movs	r1, #74	@ 0x4a
 800e84c:	187b      	adds	r3, r7, r1
 800e84e:	8812      	ldrh	r2, [r2, #0]
 800e850:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800e852:	187b      	adds	r3, r7, r1
 800e854:	881a      	ldrh	r2, [r3, #0]
 800e856:	2380      	movs	r3, #128	@ 0x80
 800e858:	011b      	lsls	r3, r3, #4
 800e85a:	4013      	ands	r3, r2
 800e85c:	d000      	beq.n	800e860 <PCD_EP_ISR_Handler+0x22c>
 800e85e:	e2db      	b.n	800ee18 <PCD_EP_ISR_Handler+0x7e4>
 800e860:	187b      	adds	r3, r7, r1
 800e862:	881a      	ldrh	r2, [r3, #0]
 800e864:	23c0      	movs	r3, #192	@ 0xc0
 800e866:	019b      	lsls	r3, r3, #6
 800e868:	401a      	ands	r2, r3
 800e86a:	23c0      	movs	r3, #192	@ 0xc0
 800e86c:	019b      	lsls	r3, r3, #6
 800e86e:	429a      	cmp	r2, r3
 800e870:	d100      	bne.n	800e874 <PCD_EP_ISR_Handler+0x240>
 800e872:	e2d1      	b.n	800ee18 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	61bb      	str	r3, [r7, #24]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2250      	movs	r2, #80	@ 0x50
 800e880:	5a9b      	ldrh	r3, [r3, r2]
 800e882:	b29b      	uxth	r3, r3
 800e884:	001a      	movs	r2, r3
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	189b      	adds	r3, r3, r2
 800e88a:	61bb      	str	r3, [r7, #24]
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	4a3a      	ldr	r2, [pc, #232]	@ (800e978 <PCD_EP_ISR_Handler+0x344>)
 800e890:	4694      	mov	ip, r2
 800e892:	4463      	add	r3, ip
 800e894:	617b      	str	r3, [r7, #20]
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	059b      	lsls	r3, r3, #22
 800e89e:	0d9b      	lsrs	r3, r3, #22
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	801a      	strh	r2, [r3, #0]
 800e8a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800e8ac:	d91a      	bls.n	800e8e4 <PCD_EP_ISR_Handler+0x2b0>
 800e8ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8b0:	691b      	ldr	r3, [r3, #16]
 800e8b2:	095b      	lsrs	r3, r3, #5
 800e8b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	221f      	movs	r2, #31
 800e8bc:	4013      	ands	r3, r2
 800e8be:	d102      	bne.n	800e8c6 <PCD_EP_ISR_Handler+0x292>
 800e8c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	881b      	ldrh	r3, [r3, #0]
 800e8ca:	b29a      	uxth	r2, r3
 800e8cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	029b      	lsls	r3, r3, #10
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	4313      	orrs	r3, r2
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	4a25      	ldr	r2, [pc, #148]	@ (800e970 <PCD_EP_ISR_Handler+0x33c>)
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	801a      	strh	r2, [r3, #0]
 800e8e2:	e023      	b.n	800e92c <PCD_EP_ISR_Handler+0x2f8>
 800e8e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8e6:	691b      	ldr	r3, [r3, #16]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d108      	bne.n	800e8fe <PCD_EP_ISR_Handler+0x2ca>
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	881b      	ldrh	r3, [r3, #0]
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	4a1f      	ldr	r2, [pc, #124]	@ (800e970 <PCD_EP_ISR_Handler+0x33c>)
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	801a      	strh	r2, [r3, #0]
 800e8fc:	e016      	b.n	800e92c <PCD_EP_ISR_Handler+0x2f8>
 800e8fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e900:	691b      	ldr	r3, [r3, #16]
 800e902:	085b      	lsrs	r3, r3, #1
 800e904:	647b      	str	r3, [r7, #68]	@ 0x44
 800e906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e908:	691b      	ldr	r3, [r3, #16]
 800e90a:	2201      	movs	r2, #1
 800e90c:	4013      	ands	r3, r2
 800e90e:	d002      	beq.n	800e916 <PCD_EP_ISR_Handler+0x2e2>
 800e910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e912:	3301      	adds	r3, #1
 800e914:	647b      	str	r3, [r7, #68]	@ 0x44
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e91e:	b29b      	uxth	r3, r3
 800e920:	029b      	lsls	r3, r3, #10
 800e922:	b29b      	uxth	r3, r3
 800e924:	4313      	orrs	r3, r2
 800e926:	b29a      	uxth	r2, r3
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	881b      	ldrh	r3, [r3, #0]
 800e932:	b29a      	uxth	r2, r3
 800e934:	2012      	movs	r0, #18
 800e936:	183b      	adds	r3, r7, r0
 800e938:	4911      	ldr	r1, [pc, #68]	@ (800e980 <PCD_EP_ISR_Handler+0x34c>)
 800e93a:	400a      	ands	r2, r1
 800e93c:	801a      	strh	r2, [r3, #0]
 800e93e:	183b      	adds	r3, r7, r0
 800e940:	183a      	adds	r2, r7, r0
 800e942:	8812      	ldrh	r2, [r2, #0]
 800e944:	2180      	movs	r1, #128	@ 0x80
 800e946:	0149      	lsls	r1, r1, #5
 800e948:	404a      	eors	r2, r1
 800e94a:	801a      	strh	r2, [r3, #0]
 800e94c:	183b      	adds	r3, r7, r0
 800e94e:	183a      	adds	r2, r7, r0
 800e950:	8812      	ldrh	r2, [r2, #0]
 800e952:	2180      	movs	r1, #128	@ 0x80
 800e954:	0189      	lsls	r1, r1, #6
 800e956:	404a      	eors	r2, r1
 800e958:	801a      	strh	r2, [r3, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	183a      	adds	r2, r7, r0
 800e960:	8812      	ldrh	r2, [r2, #0]
 800e962:	4908      	ldr	r1, [pc, #32]	@ (800e984 <PCD_EP_ISR_Handler+0x350>)
 800e964:	430a      	orrs	r2, r1
 800e966:	b292      	uxth	r2, r2
 800e968:	801a      	strh	r2, [r3, #0]
 800e96a:	e255      	b.n	800ee18 <PCD_EP_ISR_Handler+0x7e4>
 800e96c:	ffff8f0f 	.word	0xffff8f0f
 800e970:	ffff8000 	.word	0xffff8000
 800e974:	00000402 	.word	0x00000402
 800e978:	00000406 	.word	0x00000406
 800e97c:	00000f8f 	.word	0x00000f8f
 800e980:	ffffbf8f 	.word	0xffffbf8f
 800e984:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	001a      	movs	r2, r3
 800e98e:	204d      	movs	r0, #77	@ 0x4d
 800e990:	183b      	adds	r3, r7, r0
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	18d2      	adds	r2, r2, r3
 800e998:	214a      	movs	r1, #74	@ 0x4a
 800e99a:	187b      	adds	r3, r7, r1
 800e99c:	8812      	ldrh	r2, [r2, #0]
 800e99e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e9a0:	187b      	adds	r3, r7, r1
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	5e9b      	ldrsh	r3, [r3, r2]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	db00      	blt.n	800e9ac <PCD_EP_ISR_Handler+0x378>
 800e9aa:	e0fa      	b.n	800eba2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	001a      	movs	r2, r3
 800e9b2:	183b      	adds	r3, r7, r0
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	009b      	lsls	r3, r3, #2
 800e9b8:	18d3      	adds	r3, r2, r3
 800e9ba:	881b      	ldrh	r3, [r3, #0]
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	2448      	movs	r4, #72	@ 0x48
 800e9c0:	193b      	adds	r3, r7, r4
 800e9c2:	49d1      	ldr	r1, [pc, #836]	@ (800ed08 <PCD_EP_ISR_Handler+0x6d4>)
 800e9c4:	400a      	ands	r2, r1
 800e9c6:	801a      	strh	r2, [r3, #0]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	001a      	movs	r2, r3
 800e9ce:	183b      	adds	r3, r7, r0
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	009b      	lsls	r3, r3, #2
 800e9d4:	18d3      	adds	r3, r2, r3
 800e9d6:	193a      	adds	r2, r7, r4
 800e9d8:	8812      	ldrh	r2, [r2, #0]
 800e9da:	2180      	movs	r1, #128	@ 0x80
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	b292      	uxth	r2, r2
 800e9e0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800e9e2:	183b      	adds	r3, r7, r0
 800e9e4:	781a      	ldrb	r2, [r3, #0]
 800e9e6:	0013      	movs	r3, r2
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	189b      	adds	r3, r3, r2
 800e9ec:	00db      	lsls	r3, r3, #3
 800e9ee:	3369      	adds	r3, #105	@ 0x69
 800e9f0:	33ff      	adds	r3, #255	@ 0xff
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	18d3      	adds	r3, r2, r3
 800e9f6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800e9f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9fa:	7b1b      	ldrb	r3, [r3, #12]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d125      	bne.n	800ea4c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2250      	movs	r2, #80	@ 0x50
 800ea06:	5a9b      	ldrh	r3, [r3, r2]
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	001a      	movs	r2, r3
 800ea0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	00db      	lsls	r3, r3, #3
 800ea12:	18d2      	adds	r2, r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	18d3      	adds	r3, r2, r3
 800ea1a:	4abc      	ldr	r2, [pc, #752]	@ (800ed0c <PCD_EP_ISR_Handler+0x6d8>)
 800ea1c:	4694      	mov	ip, r2
 800ea1e:	4463      	add	r3, ip
 800ea20:	881a      	ldrh	r2, [r3, #0]
 800ea22:	2450      	movs	r4, #80	@ 0x50
 800ea24:	193b      	adds	r3, r7, r4
 800ea26:	0592      	lsls	r2, r2, #22
 800ea28:	0d92      	lsrs	r2, r2, #22
 800ea2a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800ea2c:	193b      	adds	r3, r7, r4
 800ea2e:	881b      	ldrh	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d100      	bne.n	800ea36 <PCD_EP_ISR_Handler+0x402>
 800ea34:	e08d      	b.n	800eb52 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6818      	ldr	r0, [r3, #0]
 800ea3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea3c:	6959      	ldr	r1, [r3, #20]
 800ea3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea40:	88da      	ldrh	r2, [r3, #6]
 800ea42:	193b      	adds	r3, r7, r4
 800ea44:	881b      	ldrh	r3, [r3, #0]
 800ea46:	f006 f998 	bl	8014d7a <USB_ReadPMA>
 800ea4a:	e082      	b.n	800eb52 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ea4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea4e:	78db      	ldrb	r3, [r3, #3]
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d10c      	bne.n	800ea6e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ea54:	2350      	movs	r3, #80	@ 0x50
 800ea56:	18fc      	adds	r4, r7, r3
 800ea58:	234a      	movs	r3, #74	@ 0x4a
 800ea5a:	18fb      	adds	r3, r7, r3
 800ea5c:	881a      	ldrh	r2, [r3, #0]
 800ea5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	0018      	movs	r0, r3
 800ea64:	f000 f9ec 	bl	800ee40 <HAL_PCD_EP_DB_Receive>
 800ea68:	0003      	movs	r3, r0
 800ea6a:	8023      	strh	r3, [r4, #0]
 800ea6c:	e071      	b.n	800eb52 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	001a      	movs	r2, r3
 800ea74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	18d3      	adds	r3, r2, r3
 800ea7c:	881b      	ldrh	r3, [r3, #0]
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	2052      	movs	r0, #82	@ 0x52
 800ea82:	183b      	adds	r3, r7, r0
 800ea84:	49a2      	ldr	r1, [pc, #648]	@ (800ed10 <PCD_EP_ISR_Handler+0x6dc>)
 800ea86:	400a      	ands	r2, r1
 800ea88:	801a      	strh	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	001a      	movs	r2, r3
 800ea90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	18d3      	adds	r3, r2, r3
 800ea98:	183a      	adds	r2, r7, r0
 800ea9a:	8812      	ldrh	r2, [r2, #0]
 800ea9c:	499d      	ldr	r1, [pc, #628]	@ (800ed14 <PCD_EP_ISR_Handler+0x6e0>)
 800ea9e:	430a      	orrs	r2, r1
 800eaa0:	b292      	uxth	r2, r2
 800eaa2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	001a      	movs	r2, r3
 800eaaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	18d3      	adds	r3, r2, r3
 800eab2:	881b      	ldrh	r3, [r3, #0]
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	001a      	movs	r2, r3
 800eab8:	2380      	movs	r3, #128	@ 0x80
 800eaba:	01db      	lsls	r3, r3, #7
 800eabc:	4013      	ands	r3, r2
 800eabe:	d024      	beq.n	800eb0a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2250      	movs	r2, #80	@ 0x50
 800eac6:	5a9b      	ldrh	r3, [r3, r2]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	001a      	movs	r2, r3
 800eacc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	00db      	lsls	r3, r3, #3
 800ead2:	18d2      	adds	r2, r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	18d3      	adds	r3, r2, r3
 800eada:	4a8f      	ldr	r2, [pc, #572]	@ (800ed18 <PCD_EP_ISR_Handler+0x6e4>)
 800eadc:	4694      	mov	ip, r2
 800eade:	4463      	add	r3, ip
 800eae0:	881a      	ldrh	r2, [r3, #0]
 800eae2:	2450      	movs	r4, #80	@ 0x50
 800eae4:	193b      	adds	r3, r7, r4
 800eae6:	0592      	lsls	r2, r2, #22
 800eae8:	0d92      	lsrs	r2, r2, #22
 800eaea:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800eaec:	193b      	adds	r3, r7, r4
 800eaee:	881b      	ldrh	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d02e      	beq.n	800eb52 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6818      	ldr	r0, [r3, #0]
 800eaf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eafa:	6959      	ldr	r1, [r3, #20]
 800eafc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eafe:	891a      	ldrh	r2, [r3, #8]
 800eb00:	193b      	adds	r3, r7, r4
 800eb02:	881b      	ldrh	r3, [r3, #0]
 800eb04:	f006 f939 	bl	8014d7a <USB_ReadPMA>
 800eb08:	e023      	b.n	800eb52 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2250      	movs	r2, #80	@ 0x50
 800eb10:	5a9b      	ldrh	r3, [r3, r2]
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	001a      	movs	r2, r3
 800eb16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	00db      	lsls	r3, r3, #3
 800eb1c:	18d2      	adds	r2, r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	18d3      	adds	r3, r2, r3
 800eb24:	4a79      	ldr	r2, [pc, #484]	@ (800ed0c <PCD_EP_ISR_Handler+0x6d8>)
 800eb26:	4694      	mov	ip, r2
 800eb28:	4463      	add	r3, ip
 800eb2a:	881a      	ldrh	r2, [r3, #0]
 800eb2c:	2450      	movs	r4, #80	@ 0x50
 800eb2e:	193b      	adds	r3, r7, r4
 800eb30:	0592      	lsls	r2, r2, #22
 800eb32:	0d92      	lsrs	r2, r2, #22
 800eb34:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800eb36:	193b      	adds	r3, r7, r4
 800eb38:	881b      	ldrh	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d009      	beq.n	800eb52 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6818      	ldr	r0, [r3, #0]
 800eb42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb44:	6959      	ldr	r1, [r3, #20]
 800eb46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb48:	895a      	ldrh	r2, [r3, #10]
 800eb4a:	193b      	adds	r3, r7, r4
 800eb4c:	881b      	ldrh	r3, [r3, #0]
 800eb4e:	f006 f914 	bl	8014d7a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800eb52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb54:	69da      	ldr	r2, [r3, #28]
 800eb56:	2150      	movs	r1, #80	@ 0x50
 800eb58:	187b      	adds	r3, r7, r1
 800eb5a:	881b      	ldrh	r3, [r3, #0]
 800eb5c:	18d2      	adds	r2, r2, r3
 800eb5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800eb62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb64:	695a      	ldr	r2, [r3, #20]
 800eb66:	187b      	adds	r3, r7, r1
 800eb68:	881b      	ldrh	r3, [r3, #0]
 800eb6a:	18d2      	adds	r2, r2, r3
 800eb6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb6e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800eb70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d005      	beq.n	800eb84 <PCD_EP_ISR_Handler+0x550>
 800eb78:	187b      	adds	r3, r7, r1
 800eb7a:	881a      	ldrh	r2, [r3, #0]
 800eb7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb7e:	691b      	ldr	r3, [r3, #16]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d207      	bcs.n	800eb94 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800eb84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb86:	781a      	ldrb	r2, [r3, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	0011      	movs	r1, r2
 800eb8c:	0018      	movs	r0, r3
 800eb8e:	f008 f90e 	bl	8016dae <HAL_PCD_DataOutStageCallback>
 800eb92:	e006      	b.n	800eba2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eb9a:	0011      	movs	r1, r2
 800eb9c:	0018      	movs	r0, r3
 800eb9e:	f004 fe31 	bl	8013804 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800eba2:	244a      	movs	r4, #74	@ 0x4a
 800eba4:	193b      	adds	r3, r7, r4
 800eba6:	881b      	ldrh	r3, [r3, #0]
 800eba8:	2280      	movs	r2, #128	@ 0x80
 800ebaa:	4013      	ands	r3, r2
 800ebac:	d100      	bne.n	800ebb0 <PCD_EP_ISR_Handler+0x57c>
 800ebae:	e133      	b.n	800ee18 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800ebb0:	204d      	movs	r0, #77	@ 0x4d
 800ebb2:	183b      	adds	r3, r7, r0
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	1c5a      	adds	r2, r3, #1
 800ebb8:	0013      	movs	r3, r2
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	189b      	adds	r3, r3, r2
 800ebbe:	00db      	lsls	r3, r3, #3
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	18d3      	adds	r3, r2, r3
 800ebc4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	001a      	movs	r2, r3
 800ebcc:	183b      	adds	r3, r7, r0
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	18d3      	adds	r3, r2, r3
 800ebd4:	881b      	ldrh	r3, [r3, #0]
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	2542      	movs	r5, #66	@ 0x42
 800ebda:	197b      	adds	r3, r7, r5
 800ebdc:	494f      	ldr	r1, [pc, #316]	@ (800ed1c <PCD_EP_ISR_Handler+0x6e8>)
 800ebde:	400a      	ands	r2, r1
 800ebe0:	801a      	strh	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	001a      	movs	r2, r3
 800ebe8:	183b      	adds	r3, r7, r0
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	18d3      	adds	r3, r2, r3
 800ebf0:	197a      	adds	r2, r7, r5
 800ebf2:	8812      	ldrh	r2, [r2, #0]
 800ebf4:	494a      	ldr	r1, [pc, #296]	@ (800ed20 <PCD_EP_ISR_Handler+0x6ec>)
 800ebf6:	430a      	orrs	r2, r1
 800ebf8:	b292      	uxth	r2, r2
 800ebfa:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ebfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebfe:	78db      	ldrb	r3, [r3, #3]
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d000      	beq.n	800ec06 <PCD_EP_ISR_Handler+0x5d2>
 800ec04:	e0af      	b.n	800ed66 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800ec06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec08:	2200      	movs	r2, #0
 800ec0a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ec0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec0e:	7b1b      	ldrb	r3, [r3, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d100      	bne.n	800ec16 <PCD_EP_ISR_Handler+0x5e2>
 800ec14:	e09f      	b.n	800ed56 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ec16:	193b      	adds	r3, r7, r4
 800ec18:	881b      	ldrh	r3, [r3, #0]
 800ec1a:	2240      	movs	r2, #64	@ 0x40
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	d046      	beq.n	800ecae <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ec20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec22:	785b      	ldrb	r3, [r3, #1]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d125      	bne.n	800ec74 <PCD_EP_ISR_Handler+0x640>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2250      	movs	r2, #80	@ 0x50
 800ec34:	5a9b      	ldrh	r3, [r3, r2]
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	001a      	movs	r2, r3
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3c:	189b      	adds	r3, r3, r2
 800ec3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	00da      	lsls	r2, r3, #3
 800ec46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec48:	18d3      	adds	r3, r2, r3
 800ec4a:	4a33      	ldr	r2, [pc, #204]	@ (800ed18 <PCD_EP_ISR_Handler+0x6e4>)
 800ec4c:	4694      	mov	ip, r2
 800ec4e:	4463      	add	r3, ip
 800ec50:	623b      	str	r3, [r7, #32]
 800ec52:	6a3b      	ldr	r3, [r7, #32]
 800ec54:	881b      	ldrh	r3, [r3, #0]
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	059b      	lsls	r3, r3, #22
 800ec5a:	0d9b      	lsrs	r3, r3, #22
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	801a      	strh	r2, [r3, #0]
 800ec62:	6a3b      	ldr	r3, [r7, #32]
 800ec64:	881b      	ldrh	r3, [r3, #0]
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	4a2d      	ldr	r2, [pc, #180]	@ (800ed20 <PCD_EP_ISR_Handler+0x6ec>)
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	6a3b      	ldr	r3, [r7, #32]
 800ec70:	801a      	strh	r2, [r3, #0]
 800ec72:	e070      	b.n	800ed56 <PCD_EP_ISR_Handler+0x722>
 800ec74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec76:	785b      	ldrb	r3, [r3, #1]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d16c      	bne.n	800ed56 <PCD_EP_ISR_Handler+0x722>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2250      	movs	r2, #80	@ 0x50
 800ec88:	5a9b      	ldrh	r3, [r3, r2]
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	001a      	movs	r2, r3
 800ec8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec90:	189b      	adds	r3, r3, r2
 800ec92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	00da      	lsls	r2, r3, #3
 800ec9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9c:	18d3      	adds	r3, r2, r3
 800ec9e:	4a1e      	ldr	r2, [pc, #120]	@ (800ed18 <PCD_EP_ISR_Handler+0x6e4>)
 800eca0:	4694      	mov	ip, r2
 800eca2:	4463      	add	r3, ip
 800eca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca8:	2200      	movs	r2, #0
 800ecaa:	801a      	strh	r2, [r3, #0]
 800ecac:	e053      	b.n	800ed56 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecb6:	785b      	ldrb	r3, [r3, #1]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d133      	bne.n	800ed24 <PCD_EP_ISR_Handler+0x6f0>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2250      	movs	r2, #80	@ 0x50
 800ecc8:	5a9b      	ldrh	r3, [r3, r2]
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	001a      	movs	r2, r3
 800ecce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecd0:	189b      	adds	r3, r3, r2
 800ecd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	00da      	lsls	r2, r3, #3
 800ecda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecdc:	18d3      	adds	r3, r2, r3
 800ecde:	4a0b      	ldr	r2, [pc, #44]	@ (800ed0c <PCD_EP_ISR_Handler+0x6d8>)
 800ece0:	4694      	mov	ip, r2
 800ece2:	4463      	add	r3, ip
 800ece4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ece6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece8:	881b      	ldrh	r3, [r3, #0]
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	059b      	lsls	r3, r3, #22
 800ecee:	0d9b      	lsrs	r3, r3, #22
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf4:	801a      	strh	r2, [r3, #0]
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	4a08      	ldr	r2, [pc, #32]	@ (800ed20 <PCD_EP_ISR_Handler+0x6ec>)
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed04:	801a      	strh	r2, [r3, #0]
 800ed06:	e026      	b.n	800ed56 <PCD_EP_ISR_Handler+0x722>
 800ed08:	00000f8f 	.word	0x00000f8f
 800ed0c:	00000406 	.word	0x00000406
 800ed10:	ffff8f8f 	.word	0xffff8f8f
 800ed14:	ffff80c0 	.word	0xffff80c0
 800ed18:	00000402 	.word	0x00000402
 800ed1c:	ffff8f0f 	.word	0xffff8f0f
 800ed20:	ffff8000 	.word	0xffff8000
 800ed24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed26:	785b      	ldrb	r3, [r3, #1]
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d114      	bne.n	800ed56 <PCD_EP_ISR_Handler+0x722>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2250      	movs	r2, #80	@ 0x50
 800ed32:	5a9b      	ldrh	r3, [r3, r2]
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	001a      	movs	r2, r3
 800ed38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed3a:	189b      	adds	r3, r3, r2
 800ed3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	00da      	lsls	r2, r3, #3
 800ed44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed46:	18d3      	adds	r3, r2, r3
 800ed48:	4a3b      	ldr	r2, [pc, #236]	@ (800ee38 <PCD_EP_ISR_Handler+0x804>)
 800ed4a:	4694      	mov	ip, r2
 800ed4c:	4463      	add	r3, ip
 800ed4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ed50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed52:	2200      	movs	r2, #0
 800ed54:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ed56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed58:	781a      	ldrb	r2, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	0011      	movs	r1, r2
 800ed5e:	0018      	movs	r0, r3
 800ed60:	f008 f846 	bl	8016df0 <HAL_PCD_DataInStageCallback>
 800ed64:	e058      	b.n	800ee18 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ed66:	234a      	movs	r3, #74	@ 0x4a
 800ed68:	18fb      	adds	r3, r7, r3
 800ed6a:	881a      	ldrh	r2, [r3, #0]
 800ed6c:	2380      	movs	r3, #128	@ 0x80
 800ed6e:	005b      	lsls	r3, r3, #1
 800ed70:	4013      	ands	r3, r2
 800ed72:	d149      	bne.n	800ee08 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2250      	movs	r2, #80	@ 0x50
 800ed7a:	5a9b      	ldrh	r3, [r3, r2]
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	001a      	movs	r2, r3
 800ed80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	00db      	lsls	r3, r3, #3
 800ed86:	18d2      	adds	r2, r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	18d3      	adds	r3, r2, r3
 800ed8e:	4a2b      	ldr	r2, [pc, #172]	@ (800ee3c <PCD_EP_ISR_Handler+0x808>)
 800ed90:	4694      	mov	ip, r2
 800ed92:	4463      	add	r3, ip
 800ed94:	881a      	ldrh	r2, [r3, #0]
 800ed96:	2140      	movs	r1, #64	@ 0x40
 800ed98:	187b      	adds	r3, r7, r1
 800ed9a:	0592      	lsls	r2, r2, #22
 800ed9c:	0d92      	lsrs	r2, r2, #22
 800ed9e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800eda0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eda2:	699a      	ldr	r2, [r3, #24]
 800eda4:	187b      	adds	r3, r7, r1
 800eda6:	881b      	ldrh	r3, [r3, #0]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d907      	bls.n	800edbc <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800edac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edae:	699a      	ldr	r2, [r3, #24]
 800edb0:	187b      	adds	r3, r7, r1
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	1ad2      	subs	r2, r2, r3
 800edb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edb8:	619a      	str	r2, [r3, #24]
 800edba:	e002      	b.n	800edc2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800edbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edbe:	2200      	movs	r2, #0
 800edc0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800edc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edc4:	699b      	ldr	r3, [r3, #24]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d107      	bne.n	800edda <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800edca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edcc:	781a      	ldrb	r2, [r3, #0]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	0011      	movs	r1, r2
 800edd2:	0018      	movs	r0, r3
 800edd4:	f008 f80c 	bl	8016df0 <HAL_PCD_DataInStageCallback>
 800edd8:	e01e      	b.n	800ee18 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800edda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eddc:	695a      	ldr	r2, [r3, #20]
 800edde:	2140      	movs	r1, #64	@ 0x40
 800ede0:	187b      	adds	r3, r7, r1
 800ede2:	881b      	ldrh	r3, [r3, #0]
 800ede4:	18d2      	adds	r2, r2, r3
 800ede6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ede8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800edea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edec:	69da      	ldr	r2, [r3, #28]
 800edee:	187b      	adds	r3, r7, r1
 800edf0:	881b      	ldrh	r3, [r3, #0]
 800edf2:	18d2      	adds	r2, r2, r3
 800edf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edf6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800edfe:	0011      	movs	r1, r2
 800ee00:	0018      	movs	r0, r3
 800ee02:	f004 fcff 	bl	8013804 <USB_EPStartXfer>
 800ee06:	e007      	b.n	800ee18 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ee08:	234a      	movs	r3, #74	@ 0x4a
 800ee0a:	18fb      	adds	r3, r7, r3
 800ee0c:	881a      	ldrh	r2, [r3, #0]
 800ee0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	0018      	movs	r0, r3
 800ee14:	f000 f930 	bl	800f078 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2244      	movs	r2, #68	@ 0x44
 800ee1e:	5a9b      	ldrh	r3, [r3, r2]
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	b21b      	sxth	r3, r3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	da01      	bge.n	800ee2c <PCD_EP_ISR_Handler+0x7f8>
 800ee28:	f7ff fc0a 	bl	800e640 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800ee2c:	2300      	movs	r3, #0
}
 800ee2e:	0018      	movs	r0, r3
 800ee30:	46bd      	mov	sp, r7
 800ee32:	b016      	add	sp, #88	@ 0x58
 800ee34:	bdb0      	pop	{r4, r5, r7, pc}
 800ee36:	46c0      	nop			@ (mov r8, r8)
 800ee38:	00000406 	.word	0x00000406
 800ee3c:	00000402 	.word	0x00000402

0800ee40 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ee40:	b590      	push	{r4, r7, lr}
 800ee42:	b089      	sub	sp, #36	@ 0x24
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	1dbb      	adds	r3, r7, #6
 800ee4c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ee4e:	1dbb      	adds	r3, r7, #6
 800ee50:	881a      	ldrh	r2, [r3, #0]
 800ee52:	2380      	movs	r3, #128	@ 0x80
 800ee54:	01db      	lsls	r3, r3, #7
 800ee56:	4013      	ands	r3, r2
 800ee58:	d100      	bne.n	800ee5c <HAL_PCD_EP_DB_Receive+0x1c>
 800ee5a:	e07d      	b.n	800ef58 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2250      	movs	r2, #80	@ 0x50
 800ee62:	5a9b      	ldrh	r3, [r3, r2]
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	001a      	movs	r2, r3
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	00db      	lsls	r3, r3, #3
 800ee6e:	18d2      	adds	r2, r2, r3
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	18d3      	adds	r3, r2, r3
 800ee76:	4a7a      	ldr	r2, [pc, #488]	@ (800f060 <HAL_PCD_EP_DB_Receive+0x220>)
 800ee78:	4694      	mov	ip, r2
 800ee7a:	4463      	add	r3, ip
 800ee7c:	881a      	ldrh	r2, [r3, #0]
 800ee7e:	211a      	movs	r1, #26
 800ee80:	187b      	adds	r3, r7, r1
 800ee82:	0592      	lsls	r2, r2, #22
 800ee84:	0d92      	lsrs	r2, r2, #22
 800ee86:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	699a      	ldr	r2, [r3, #24]
 800ee8c:	187b      	adds	r3, r7, r1
 800ee8e:	881b      	ldrh	r3, [r3, #0]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d307      	bcc.n	800eea4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	699a      	ldr	r2, [r3, #24]
 800ee98:	187b      	adds	r3, r7, r1
 800ee9a:	881b      	ldrh	r3, [r3, #0]
 800ee9c:	1ad2      	subs	r2, r2, r3
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	619a      	str	r2, [r3, #24]
 800eea2:	e002      	b.n	800eeaa <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	2200      	movs	r2, #0
 800eea8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	699b      	ldr	r3, [r3, #24]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d121      	bne.n	800eef6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	001a      	movs	r2, r3
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	18d3      	adds	r3, r2, r3
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	2018      	movs	r0, #24
 800eec6:	183b      	adds	r3, r7, r0
 800eec8:	4966      	ldr	r1, [pc, #408]	@ (800f064 <HAL_PCD_EP_DB_Receive+0x224>)
 800eeca:	400a      	ands	r2, r1
 800eecc:	801a      	strh	r2, [r3, #0]
 800eece:	183b      	adds	r3, r7, r0
 800eed0:	183a      	adds	r2, r7, r0
 800eed2:	8812      	ldrh	r2, [r2, #0]
 800eed4:	2180      	movs	r1, #128	@ 0x80
 800eed6:	0189      	lsls	r1, r1, #6
 800eed8:	404a      	eors	r2, r1
 800eeda:	801a      	strh	r2, [r3, #0]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	001a      	movs	r2, r3
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	18d3      	adds	r3, r2, r3
 800eeea:	183a      	adds	r2, r7, r0
 800eeec:	8812      	ldrh	r2, [r2, #0]
 800eeee:	495e      	ldr	r1, [pc, #376]	@ (800f068 <HAL_PCD_EP_DB_Receive+0x228>)
 800eef0:	430a      	orrs	r2, r1
 800eef2:	b292      	uxth	r2, r2
 800eef4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800eef6:	1dbb      	adds	r3, r7, #6
 800eef8:	881b      	ldrh	r3, [r3, #0]
 800eefa:	2240      	movs	r2, #64	@ 0x40
 800eefc:	4013      	ands	r3, r2
 800eefe:	d01a      	beq.n	800ef36 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	001a      	movs	r2, r3
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	18d3      	adds	r3, r2, r3
 800ef0e:	881b      	ldrh	r3, [r3, #0]
 800ef10:	b29a      	uxth	r2, r3
 800ef12:	2016      	movs	r0, #22
 800ef14:	183b      	adds	r3, r7, r0
 800ef16:	4955      	ldr	r1, [pc, #340]	@ (800f06c <HAL_PCD_EP_DB_Receive+0x22c>)
 800ef18:	400a      	ands	r2, r1
 800ef1a:	801a      	strh	r2, [r3, #0]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	001a      	movs	r2, r3
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	18d3      	adds	r3, r2, r3
 800ef2a:	183a      	adds	r2, r7, r0
 800ef2c:	8812      	ldrh	r2, [r2, #0]
 800ef2e:	4950      	ldr	r1, [pc, #320]	@ (800f070 <HAL_PCD_EP_DB_Receive+0x230>)
 800ef30:	430a      	orrs	r2, r1
 800ef32:	b292      	uxth	r2, r2
 800ef34:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800ef36:	241a      	movs	r4, #26
 800ef38:	193b      	adds	r3, r7, r4
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d100      	bne.n	800ef42 <HAL_PCD_EP_DB_Receive+0x102>
 800ef40:	e086      	b.n	800f050 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6818      	ldr	r0, [r3, #0]
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	6959      	ldr	r1, [r3, #20]
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	891a      	ldrh	r2, [r3, #8]
 800ef4e:	193b      	adds	r3, r7, r4
 800ef50:	881b      	ldrh	r3, [r3, #0]
 800ef52:	f005 ff12 	bl	8014d7a <USB_ReadPMA>
 800ef56:	e07b      	b.n	800f050 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2250      	movs	r2, #80	@ 0x50
 800ef5e:	5a9b      	ldrh	r3, [r3, r2]
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	001a      	movs	r2, r3
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	00db      	lsls	r3, r3, #3
 800ef6a:	18d2      	adds	r2, r2, r3
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	18d3      	adds	r3, r2, r3
 800ef72:	4a40      	ldr	r2, [pc, #256]	@ (800f074 <HAL_PCD_EP_DB_Receive+0x234>)
 800ef74:	4694      	mov	ip, r2
 800ef76:	4463      	add	r3, ip
 800ef78:	881a      	ldrh	r2, [r3, #0]
 800ef7a:	211a      	movs	r1, #26
 800ef7c:	187b      	adds	r3, r7, r1
 800ef7e:	0592      	lsls	r2, r2, #22
 800ef80:	0d92      	lsrs	r2, r2, #22
 800ef82:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	699a      	ldr	r2, [r3, #24]
 800ef88:	187b      	adds	r3, r7, r1
 800ef8a:	881b      	ldrh	r3, [r3, #0]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d307      	bcc.n	800efa0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	699a      	ldr	r2, [r3, #24]
 800ef94:	187b      	adds	r3, r7, r1
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	1ad2      	subs	r2, r2, r3
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	619a      	str	r2, [r3, #24]
 800ef9e:	e002      	b.n	800efa6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	2200      	movs	r2, #0
 800efa4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	699b      	ldr	r3, [r3, #24]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d121      	bne.n	800eff2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	001a      	movs	r2, r3
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	18d3      	adds	r3, r2, r3
 800efbc:	881b      	ldrh	r3, [r3, #0]
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	201e      	movs	r0, #30
 800efc2:	183b      	adds	r3, r7, r0
 800efc4:	4927      	ldr	r1, [pc, #156]	@ (800f064 <HAL_PCD_EP_DB_Receive+0x224>)
 800efc6:	400a      	ands	r2, r1
 800efc8:	801a      	strh	r2, [r3, #0]
 800efca:	183b      	adds	r3, r7, r0
 800efcc:	183a      	adds	r2, r7, r0
 800efce:	8812      	ldrh	r2, [r2, #0]
 800efd0:	2180      	movs	r1, #128	@ 0x80
 800efd2:	0189      	lsls	r1, r1, #6
 800efd4:	404a      	eors	r2, r1
 800efd6:	801a      	strh	r2, [r3, #0]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	001a      	movs	r2, r3
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	18d3      	adds	r3, r2, r3
 800efe6:	183a      	adds	r2, r7, r0
 800efe8:	8812      	ldrh	r2, [r2, #0]
 800efea:	491f      	ldr	r1, [pc, #124]	@ (800f068 <HAL_PCD_EP_DB_Receive+0x228>)
 800efec:	430a      	orrs	r2, r1
 800efee:	b292      	uxth	r2, r2
 800eff0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800eff2:	1dbb      	adds	r3, r7, #6
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	2240      	movs	r2, #64	@ 0x40
 800eff8:	4013      	ands	r3, r2
 800effa:	d11a      	bne.n	800f032 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	001a      	movs	r2, r3
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	18d3      	adds	r3, r2, r3
 800f00a:	881b      	ldrh	r3, [r3, #0]
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	201c      	movs	r0, #28
 800f010:	183b      	adds	r3, r7, r0
 800f012:	4916      	ldr	r1, [pc, #88]	@ (800f06c <HAL_PCD_EP_DB_Receive+0x22c>)
 800f014:	400a      	ands	r2, r1
 800f016:	801a      	strh	r2, [r3, #0]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	001a      	movs	r2, r3
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	18d3      	adds	r3, r2, r3
 800f026:	183a      	adds	r2, r7, r0
 800f028:	8812      	ldrh	r2, [r2, #0]
 800f02a:	4911      	ldr	r1, [pc, #68]	@ (800f070 <HAL_PCD_EP_DB_Receive+0x230>)
 800f02c:	430a      	orrs	r2, r1
 800f02e:	b292      	uxth	r2, r2
 800f030:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f032:	241a      	movs	r4, #26
 800f034:	193b      	adds	r3, r7, r4
 800f036:	881b      	ldrh	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d009      	beq.n	800f050 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6818      	ldr	r0, [r3, #0]
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	6959      	ldr	r1, [r3, #20]
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	895a      	ldrh	r2, [r3, #10]
 800f048:	193b      	adds	r3, r7, r4
 800f04a:	881b      	ldrh	r3, [r3, #0]
 800f04c:	f005 fe95 	bl	8014d7a <USB_ReadPMA>
    }
  }

  return count;
 800f050:	231a      	movs	r3, #26
 800f052:	18fb      	adds	r3, r7, r3
 800f054:	881b      	ldrh	r3, [r3, #0]
}
 800f056:	0018      	movs	r0, r3
 800f058:	46bd      	mov	sp, r7
 800f05a:	b009      	add	sp, #36	@ 0x24
 800f05c:	bd90      	pop	{r4, r7, pc}
 800f05e:	46c0      	nop			@ (mov r8, r8)
 800f060:	00000402 	.word	0x00000402
 800f064:	ffffbf8f 	.word	0xffffbf8f
 800f068:	ffff8080 	.word	0xffff8080
 800f06c:	ffff8f8f 	.word	0xffff8f8f
 800f070:	ffff80c0 	.word	0xffff80c0
 800f074:	00000406 	.word	0x00000406

0800f078 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b0a4      	sub	sp, #144	@ 0x90
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	1dbb      	adds	r3, r7, #6
 800f084:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f086:	1dbb      	adds	r3, r7, #6
 800f088:	881b      	ldrh	r3, [r3, #0]
 800f08a:	2240      	movs	r2, #64	@ 0x40
 800f08c:	4013      	ands	r3, r2
 800f08e:	d100      	bne.n	800f092 <HAL_PCD_EP_DB_Transmit+0x1a>
 800f090:	e1e4      	b.n	800f45c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2250      	movs	r2, #80	@ 0x50
 800f098:	5a9b      	ldrh	r3, [r3, r2]
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	001a      	movs	r2, r3
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	18d2      	adds	r2, r2, r3
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	18d3      	adds	r3, r2, r3
 800f0ac:	4ad0      	ldr	r2, [pc, #832]	@ (800f3f0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f0ae:	4694      	mov	ip, r2
 800f0b0:	4463      	add	r3, ip
 800f0b2:	881a      	ldrh	r2, [r3, #0]
 800f0b4:	2186      	movs	r1, #134	@ 0x86
 800f0b6:	187b      	adds	r3, r7, r1
 800f0b8:	0592      	lsls	r2, r2, #22
 800f0ba:	0d92      	lsrs	r2, r2, #22
 800f0bc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	699a      	ldr	r2, [r3, #24]
 800f0c2:	187b      	adds	r3, r7, r1
 800f0c4:	881b      	ldrh	r3, [r3, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d907      	bls.n	800f0da <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	699a      	ldr	r2, [r3, #24]
 800f0ce:	187b      	adds	r3, r7, r1
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	1ad2      	subs	r2, r2, r3
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	619a      	str	r2, [r3, #24]
 800f0d8:	e002      	b.n	800f0e0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	699b      	ldr	r3, [r3, #24]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d000      	beq.n	800f0ea <HAL_PCD_EP_DB_Transmit+0x72>
 800f0e8:	e0b5      	b.n	800f256 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	785b      	ldrb	r3, [r3, #1]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d125      	bne.n	800f13e <HAL_PCD_EP_DB_Transmit+0xc6>
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2250      	movs	r2, #80	@ 0x50
 800f0fe:	5a9b      	ldrh	r3, [r3, r2]
 800f100:	b29b      	uxth	r3, r3
 800f102:	001a      	movs	r2, r3
 800f104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f106:	189b      	adds	r3, r3, r2
 800f108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	00da      	lsls	r2, r3, #3
 800f110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f112:	18d3      	adds	r3, r2, r3
 800f114:	4ab6      	ldr	r2, [pc, #728]	@ (800f3f0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f116:	4694      	mov	ip, r2
 800f118:	4463      	add	r3, ip
 800f11a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11e:	881b      	ldrh	r3, [r3, #0]
 800f120:	b29b      	uxth	r3, r3
 800f122:	059b      	lsls	r3, r3, #22
 800f124:	0d9b      	lsrs	r3, r3, #22
 800f126:	b29a      	uxth	r2, r3
 800f128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f12a:	801a      	strh	r2, [r3, #0]
 800f12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	b29b      	uxth	r3, r3
 800f132:	4ab0      	ldr	r2, [pc, #704]	@ (800f3f4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f134:	4313      	orrs	r3, r2
 800f136:	b29a      	uxth	r2, r3
 800f138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f13a:	801a      	strh	r2, [r3, #0]
 800f13c:	e01b      	b.n	800f176 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	785b      	ldrb	r3, [r3, #1]
 800f142:	2b01      	cmp	r3, #1
 800f144:	d117      	bne.n	800f176 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2250      	movs	r2, #80	@ 0x50
 800f152:	5a9b      	ldrh	r3, [r3, r2]
 800f154:	b29b      	uxth	r3, r3
 800f156:	001a      	movs	r2, r3
 800f158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f15a:	189b      	adds	r3, r3, r2
 800f15c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	00da      	lsls	r2, r3, #3
 800f164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f166:	18d3      	adds	r3, r2, r3
 800f168:	4aa1      	ldr	r2, [pc, #644]	@ (800f3f0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f16a:	4694      	mov	ip, r2
 800f16c:	4463      	add	r3, ip
 800f16e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f172:	2200      	movs	r2, #0
 800f174:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	785b      	ldrb	r3, [r3, #1]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d125      	bne.n	800f1d0 <HAL_PCD_EP_DB_Transmit+0x158>
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	61fb      	str	r3, [r7, #28]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2250      	movs	r2, #80	@ 0x50
 800f190:	5a9b      	ldrh	r3, [r3, r2]
 800f192:	b29b      	uxth	r3, r3
 800f194:	001a      	movs	r2, r3
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	189b      	adds	r3, r3, r2
 800f19a:	61fb      	str	r3, [r7, #28]
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	00da      	lsls	r2, r3, #3
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	18d3      	adds	r3, r2, r3
 800f1a6:	4a94      	ldr	r2, [pc, #592]	@ (800f3f8 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f1a8:	4694      	mov	ip, r2
 800f1aa:	4463      	add	r3, ip
 800f1ac:	61bb      	str	r3, [r7, #24]
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	881b      	ldrh	r3, [r3, #0]
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	059b      	lsls	r3, r3, #22
 800f1b6:	0d9b      	lsrs	r3, r3, #22
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	801a      	strh	r2, [r3, #0]
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	881b      	ldrh	r3, [r3, #0]
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	4a8b      	ldr	r2, [pc, #556]	@ (800f3f4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	801a      	strh	r2, [r3, #0]
 800f1ce:	e018      	b.n	800f202 <HAL_PCD_EP_DB_Transmit+0x18a>
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	785b      	ldrb	r3, [r3, #1]
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d114      	bne.n	800f202 <HAL_PCD_EP_DB_Transmit+0x18a>
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2250      	movs	r2, #80	@ 0x50
 800f1de:	5a9b      	ldrh	r3, [r3, r2]
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	001a      	movs	r2, r3
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e6:	189b      	adds	r3, r3, r2
 800f1e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	00da      	lsls	r2, r3, #3
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f2:	18d3      	adds	r3, r2, r3
 800f1f4:	4a80      	ldr	r2, [pc, #512]	@ (800f3f8 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f1f6:	4694      	mov	ip, r2
 800f1f8:	4463      	add	r3, ip
 800f1fa:	623b      	str	r3, [r7, #32]
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	2200      	movs	r2, #0
 800f200:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	781a      	ldrb	r2, [r3, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	0011      	movs	r1, r2
 800f20a:	0018      	movs	r0, r3
 800f20c:	f007 fdf0 	bl	8016df0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f210:	1dbb      	adds	r3, r7, #6
 800f212:	881a      	ldrh	r2, [r3, #0]
 800f214:	2380      	movs	r3, #128	@ 0x80
 800f216:	01db      	lsls	r3, r3, #7
 800f218:	4013      	ands	r3, r2
 800f21a:	d100      	bne.n	800f21e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f21c:	e309      	b.n	800f832 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	001a      	movs	r2, r3
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	18d3      	adds	r3, r2, r3
 800f22c:	881b      	ldrh	r3, [r3, #0]
 800f22e:	b29a      	uxth	r2, r3
 800f230:	2016      	movs	r0, #22
 800f232:	183b      	adds	r3, r7, r0
 800f234:	4971      	ldr	r1, [pc, #452]	@ (800f3fc <HAL_PCD_EP_DB_Transmit+0x384>)
 800f236:	400a      	ands	r2, r1
 800f238:	801a      	strh	r2, [r3, #0]
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	001a      	movs	r2, r3
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	18d3      	adds	r3, r2, r3
 800f248:	183a      	adds	r2, r7, r0
 800f24a:	8812      	ldrh	r2, [r2, #0]
 800f24c:	496c      	ldr	r1, [pc, #432]	@ (800f400 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f24e:	430a      	orrs	r2, r1
 800f250:	b292      	uxth	r2, r2
 800f252:	801a      	strh	r2, [r3, #0]
 800f254:	e2ed      	b.n	800f832 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f256:	1dbb      	adds	r3, r7, #6
 800f258:	881a      	ldrh	r2, [r3, #0]
 800f25a:	2380      	movs	r3, #128	@ 0x80
 800f25c:	01db      	lsls	r3, r3, #7
 800f25e:	4013      	ands	r3, r2
 800f260:	d01a      	beq.n	800f298 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	001a      	movs	r2, r3
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	18d3      	adds	r3, r2, r3
 800f270:	881b      	ldrh	r3, [r3, #0]
 800f272:	b29a      	uxth	r2, r3
 800f274:	208a      	movs	r0, #138	@ 0x8a
 800f276:	183b      	adds	r3, r7, r0
 800f278:	4960      	ldr	r1, [pc, #384]	@ (800f3fc <HAL_PCD_EP_DB_Transmit+0x384>)
 800f27a:	400a      	ands	r2, r1
 800f27c:	801a      	strh	r2, [r3, #0]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	001a      	movs	r2, r3
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	18d3      	adds	r3, r2, r3
 800f28c:	183a      	adds	r2, r7, r0
 800f28e:	8812      	ldrh	r2, [r2, #0]
 800f290:	495b      	ldr	r1, [pc, #364]	@ (800f400 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f292:	430a      	orrs	r2, r1
 800f294:	b292      	uxth	r2, r2
 800f296:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	2224      	movs	r2, #36	@ 0x24
 800f29c:	5c9b      	ldrb	r3, [r3, r2]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d000      	beq.n	800f2a4 <HAL_PCD_EP_DB_Transmit+0x22c>
 800f2a2:	e2c6      	b.n	800f832 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	695a      	ldr	r2, [r3, #20]
 800f2a8:	2186      	movs	r1, #134	@ 0x86
 800f2aa:	187b      	adds	r3, r7, r1
 800f2ac:	881b      	ldrh	r3, [r3, #0]
 800f2ae:	18d2      	adds	r2, r2, r3
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	69da      	ldr	r2, [r3, #28]
 800f2b8:	187b      	adds	r3, r7, r1
 800f2ba:	881b      	ldrh	r3, [r3, #0]
 800f2bc:	18d2      	adds	r2, r2, r3
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	6a1a      	ldr	r2, [r3, #32]
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	691b      	ldr	r3, [r3, #16]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d30c      	bcc.n	800f2e8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	218c      	movs	r1, #140	@ 0x8c
 800f2d4:	187a      	adds	r2, r7, r1
 800f2d6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	6a1a      	ldr	r2, [r3, #32]
 800f2dc:	187b      	adds	r3, r7, r1
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	1ad2      	subs	r2, r2, r3
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	621a      	str	r2, [r3, #32]
 800f2e6:	e01a      	b.n	800f31e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	6a1b      	ldr	r3, [r3, #32]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10a      	bne.n	800f306 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800f2f0:	2386      	movs	r3, #134	@ 0x86
 800f2f2:	18fb      	adds	r3, r7, r3
 800f2f4:	881b      	ldrh	r3, [r3, #0]
 800f2f6:	228c      	movs	r2, #140	@ 0x8c
 800f2f8:	18ba      	adds	r2, r7, r2
 800f2fa:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	2224      	movs	r2, #36	@ 0x24
 800f300:	2100      	movs	r1, #0
 800f302:	5499      	strb	r1, [r3, r2]
 800f304:	e00b      	b.n	800f31e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2224      	movs	r2, #36	@ 0x24
 800f30a:	2100      	movs	r1, #0
 800f30c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	6a1b      	ldr	r3, [r3, #32]
 800f312:	228c      	movs	r2, #140	@ 0x8c
 800f314:	18ba      	adds	r2, r7, r2
 800f316:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	2200      	movs	r2, #0
 800f31c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	785b      	ldrb	r3, [r3, #1]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d000      	beq.n	800f328 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800f326:	e06d      	b.n	800f404 <HAL_PCD_EP_DB_Transmit+0x38c>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2250      	movs	r2, #80	@ 0x50
 800f334:	5a9b      	ldrh	r3, [r3, r2]
 800f336:	b29b      	uxth	r3, r3
 800f338:	001a      	movs	r2, r3
 800f33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f33c:	189b      	adds	r3, r3, r2
 800f33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	00da      	lsls	r2, r3, #3
 800f346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f348:	18d3      	adds	r3, r2, r3
 800f34a:	4a29      	ldr	r2, [pc, #164]	@ (800f3f0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f34c:	4694      	mov	ip, r2
 800f34e:	4463      	add	r3, ip
 800f350:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f354:	881b      	ldrh	r3, [r3, #0]
 800f356:	b29b      	uxth	r3, r3
 800f358:	059b      	lsls	r3, r3, #22
 800f35a:	0d9b      	lsrs	r3, r3, #22
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f360:	801a      	strh	r2, [r3, #0]
 800f362:	228c      	movs	r2, #140	@ 0x8c
 800f364:	18bb      	adds	r3, r7, r2
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2b3e      	cmp	r3, #62	@ 0x3e
 800f36a:	d91a      	bls.n	800f3a2 <HAL_PCD_EP_DB_Transmit+0x32a>
 800f36c:	18bb      	adds	r3, r7, r2
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	095b      	lsrs	r3, r3, #5
 800f372:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f374:	18bb      	adds	r3, r7, r2
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	221f      	movs	r2, #31
 800f37a:	4013      	ands	r3, r2
 800f37c:	d102      	bne.n	800f384 <HAL_PCD_EP_DB_Transmit+0x30c>
 800f37e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f380:	3b01      	subs	r3, #1
 800f382:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f386:	881b      	ldrh	r3, [r3, #0]
 800f388:	b29a      	uxth	r2, r3
 800f38a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	029b      	lsls	r3, r3, #10
 800f390:	b29b      	uxth	r3, r3
 800f392:	4313      	orrs	r3, r2
 800f394:	b29b      	uxth	r3, r3
 800f396:	4a17      	ldr	r2, [pc, #92]	@ (800f3f4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f398:	4313      	orrs	r3, r2
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f39e:	801a      	strh	r2, [r3, #0]
 800f3a0:	e04f      	b.n	800f442 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f3a2:	238c      	movs	r3, #140	@ 0x8c
 800f3a4:	18fb      	adds	r3, r7, r3
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d108      	bne.n	800f3be <HAL_PCD_EP_DB_Transmit+0x346>
 800f3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	4a10      	ldr	r2, [pc, #64]	@ (800f3f4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	b29a      	uxth	r2, r3
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ba:	801a      	strh	r2, [r3, #0]
 800f3bc:	e041      	b.n	800f442 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f3be:	228c      	movs	r2, #140	@ 0x8c
 800f3c0:	18bb      	adds	r3, r7, r2
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	085b      	lsrs	r3, r3, #1
 800f3c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3c8:	18bb      	adds	r3, r7, r2
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	d002      	beq.n	800f3d8 <HAL_PCD_EP_DB_Transmit+0x360>
 800f3d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3da:	881b      	ldrh	r3, [r3, #0]
 800f3dc:	b29a      	uxth	r2, r3
 800f3de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	029b      	lsls	r3, r3, #10
 800f3e4:	b29b      	uxth	r3, r3
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ec:	801a      	strh	r2, [r3, #0]
 800f3ee:	e028      	b.n	800f442 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f3f0:	00000402 	.word	0x00000402
 800f3f4:	ffff8000 	.word	0xffff8000
 800f3f8:	00000406 	.word	0x00000406
 800f3fc:	ffff8f8f 	.word	0xffff8f8f
 800f400:	ffffc080 	.word	0xffffc080
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	785b      	ldrb	r3, [r3, #1]
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d11a      	bne.n	800f442 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	647b      	str	r3, [r7, #68]	@ 0x44
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2250      	movs	r2, #80	@ 0x50
 800f418:	5a9b      	ldrh	r3, [r3, r2]
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	001a      	movs	r2, r3
 800f41e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f420:	189b      	adds	r3, r3, r2
 800f422:	647b      	str	r3, [r7, #68]	@ 0x44
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	00da      	lsls	r2, r3, #3
 800f42a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f42c:	18d3      	adds	r3, r2, r3
 800f42e:	4adb      	ldr	r2, [pc, #876]	@ (800f79c <HAL_PCD_EP_DB_Transmit+0x724>)
 800f430:	4694      	mov	ip, r2
 800f432:	4463      	add	r3, ip
 800f434:	643b      	str	r3, [r7, #64]	@ 0x40
 800f436:	238c      	movs	r3, #140	@ 0x8c
 800f438:	18fb      	adds	r3, r7, r3
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f440:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	6818      	ldr	r0, [r3, #0]
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	6959      	ldr	r1, [r3, #20]
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	891a      	ldrh	r2, [r3, #8]
 800f44e:	238c      	movs	r3, #140	@ 0x8c
 800f450:	18fb      	adds	r3, r7, r3
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	b29b      	uxth	r3, r3
 800f456:	f005 fc47 	bl	8014ce8 <USB_WritePMA>
 800f45a:	e1ea      	b.n	800f832 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2250      	movs	r2, #80	@ 0x50
 800f462:	5a9b      	ldrh	r3, [r3, r2]
 800f464:	b29b      	uxth	r3, r3
 800f466:	001a      	movs	r2, r3
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	00db      	lsls	r3, r3, #3
 800f46e:	18d2      	adds	r2, r2, r3
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	18d3      	adds	r3, r2, r3
 800f476:	4aca      	ldr	r2, [pc, #808]	@ (800f7a0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f478:	4694      	mov	ip, r2
 800f47a:	4463      	add	r3, ip
 800f47c:	881a      	ldrh	r2, [r3, #0]
 800f47e:	2186      	movs	r1, #134	@ 0x86
 800f480:	187b      	adds	r3, r7, r1
 800f482:	0592      	lsls	r2, r2, #22
 800f484:	0d92      	lsrs	r2, r2, #22
 800f486:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	699a      	ldr	r2, [r3, #24]
 800f48c:	187b      	adds	r3, r7, r1
 800f48e:	881b      	ldrh	r3, [r3, #0]
 800f490:	429a      	cmp	r2, r3
 800f492:	d307      	bcc.n	800f4a4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	699a      	ldr	r2, [r3, #24]
 800f498:	187b      	adds	r3, r7, r1
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	1ad2      	subs	r2, r2, r3
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	619a      	str	r2, [r3, #24]
 800f4a2:	e002      	b.n	800f4aa <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	699b      	ldr	r3, [r3, #24]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d000      	beq.n	800f4b4 <HAL_PCD_EP_DB_Transmit+0x43c>
 800f4b2:	e0bb      	b.n	800f62c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	785b      	ldrb	r3, [r3, #1]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d125      	bne.n	800f508 <HAL_PCD_EP_DB_Transmit+0x490>
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2250      	movs	r2, #80	@ 0x50
 800f4c8:	5a9b      	ldrh	r3, [r3, r2]
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	001a      	movs	r2, r3
 800f4ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4d0:	189b      	adds	r3, r3, r2
 800f4d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	00da      	lsls	r2, r3, #3
 800f4da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4dc:	18d3      	adds	r3, r2, r3
 800f4de:	4aaf      	ldr	r2, [pc, #700]	@ (800f79c <HAL_PCD_EP_DB_Transmit+0x724>)
 800f4e0:	4694      	mov	ip, r2
 800f4e2:	4463      	add	r3, ip
 800f4e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f4e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f4e8:	881b      	ldrh	r3, [r3, #0]
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	059b      	lsls	r3, r3, #22
 800f4ee:	0d9b      	lsrs	r3, r3, #22
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f4f4:	801a      	strh	r2, [r3, #0]
 800f4f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	4aa9      	ldr	r2, [pc, #676]	@ (800f7a4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f4fe:	4313      	orrs	r3, r2
 800f500:	b29a      	uxth	r2, r3
 800f502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f504:	801a      	strh	r2, [r3, #0]
 800f506:	e01b      	b.n	800f540 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	785b      	ldrb	r3, [r3, #1]
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d117      	bne.n	800f540 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	667b      	str	r3, [r7, #100]	@ 0x64
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2250      	movs	r2, #80	@ 0x50
 800f51c:	5a9b      	ldrh	r3, [r3, r2]
 800f51e:	b29b      	uxth	r3, r3
 800f520:	001a      	movs	r2, r3
 800f522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f524:	189b      	adds	r3, r3, r2
 800f526:	667b      	str	r3, [r7, #100]	@ 0x64
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	00da      	lsls	r2, r3, #3
 800f52e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f530:	18d3      	adds	r3, r2, r3
 800f532:	4a9a      	ldr	r2, [pc, #616]	@ (800f79c <HAL_PCD_EP_DB_Transmit+0x724>)
 800f534:	4694      	mov	ip, r2
 800f536:	4463      	add	r3, ip
 800f538:	663b      	str	r3, [r7, #96]	@ 0x60
 800f53a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f53c:	2200      	movs	r2, #0
 800f53e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	677b      	str	r3, [r7, #116]	@ 0x74
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	785b      	ldrb	r3, [r3, #1]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d12b      	bne.n	800f5a6 <HAL_PCD_EP_DB_Transmit+0x52e>
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2250      	movs	r2, #80	@ 0x50
 800f55a:	5a9b      	ldrh	r3, [r3, r2]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	001a      	movs	r2, r3
 800f560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f562:	189b      	adds	r3, r3, r2
 800f564:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	00da      	lsls	r2, r3, #3
 800f56c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f56e:	18d3      	adds	r3, r2, r3
 800f570:	4a8b      	ldr	r2, [pc, #556]	@ (800f7a0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f572:	4694      	mov	ip, r2
 800f574:	4463      	add	r3, ip
 800f576:	2180      	movs	r1, #128	@ 0x80
 800f578:	187a      	adds	r2, r7, r1
 800f57a:	6013      	str	r3, [r2, #0]
 800f57c:	187b      	adds	r3, r7, r1
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	881b      	ldrh	r3, [r3, #0]
 800f582:	b29b      	uxth	r3, r3
 800f584:	059b      	lsls	r3, r3, #22
 800f586:	0d9b      	lsrs	r3, r3, #22
 800f588:	b29a      	uxth	r2, r3
 800f58a:	187b      	adds	r3, r7, r1
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	801a      	strh	r2, [r3, #0]
 800f590:	187b      	adds	r3, r7, r1
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	b29b      	uxth	r3, r3
 800f598:	4a82      	ldr	r2, [pc, #520]	@ (800f7a4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f59a:	4313      	orrs	r3, r2
 800f59c:	b29a      	uxth	r2, r3
 800f59e:	187b      	adds	r3, r7, r1
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	801a      	strh	r2, [r3, #0]
 800f5a4:	e018      	b.n	800f5d8 <HAL_PCD_EP_DB_Transmit+0x560>
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	785b      	ldrb	r3, [r3, #1]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d114      	bne.n	800f5d8 <HAL_PCD_EP_DB_Transmit+0x560>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2250      	movs	r2, #80	@ 0x50
 800f5b4:	5a9b      	ldrh	r3, [r3, r2]
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	001a      	movs	r2, r3
 800f5ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f5bc:	189b      	adds	r3, r3, r2
 800f5be:	677b      	str	r3, [r7, #116]	@ 0x74
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	00da      	lsls	r2, r3, #3
 800f5c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f5c8:	18d3      	adds	r3, r2, r3
 800f5ca:	4a75      	ldr	r2, [pc, #468]	@ (800f7a0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f5cc:	4694      	mov	ip, r2
 800f5ce:	4463      	add	r3, ip
 800f5d0:	673b      	str	r3, [r7, #112]	@ 0x70
 800f5d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	781a      	ldrb	r2, [r3, #0]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	0011      	movs	r1, r2
 800f5e0:	0018      	movs	r0, r3
 800f5e2:	f007 fc05 	bl	8016df0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f5e6:	1dbb      	adds	r3, r7, #6
 800f5e8:	881a      	ldrh	r2, [r3, #0]
 800f5ea:	2380      	movs	r3, #128	@ 0x80
 800f5ec:	01db      	lsls	r3, r3, #7
 800f5ee:	4013      	ands	r3, r2
 800f5f0:	d000      	beq.n	800f5f4 <HAL_PCD_EP_DB_Transmit+0x57c>
 800f5f2:	e11e      	b.n	800f832 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	001a      	movs	r2, r3
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	18d3      	adds	r3, r2, r3
 800f602:	881b      	ldrh	r3, [r3, #0]
 800f604:	b29a      	uxth	r2, r3
 800f606:	2088      	movs	r0, #136	@ 0x88
 800f608:	183b      	adds	r3, r7, r0
 800f60a:	4967      	ldr	r1, [pc, #412]	@ (800f7a8 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f60c:	400a      	ands	r2, r1
 800f60e:	801a      	strh	r2, [r3, #0]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	001a      	movs	r2, r3
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	18d3      	adds	r3, r2, r3
 800f61e:	183a      	adds	r2, r7, r0
 800f620:	8812      	ldrh	r2, [r2, #0]
 800f622:	4962      	ldr	r1, [pc, #392]	@ (800f7ac <HAL_PCD_EP_DB_Transmit+0x734>)
 800f624:	430a      	orrs	r2, r1
 800f626:	b292      	uxth	r2, r2
 800f628:	801a      	strh	r2, [r3, #0]
 800f62a:	e102      	b.n	800f832 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f62c:	1dbb      	adds	r3, r7, #6
 800f62e:	881a      	ldrh	r2, [r3, #0]
 800f630:	2380      	movs	r3, #128	@ 0x80
 800f632:	01db      	lsls	r3, r3, #7
 800f634:	4013      	ands	r3, r2
 800f636:	d11a      	bne.n	800f66e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	001a      	movs	r2, r3
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	18d3      	adds	r3, r2, r3
 800f646:	881b      	ldrh	r3, [r3, #0]
 800f648:	b29a      	uxth	r2, r3
 800f64a:	204e      	movs	r0, #78	@ 0x4e
 800f64c:	183b      	adds	r3, r7, r0
 800f64e:	4956      	ldr	r1, [pc, #344]	@ (800f7a8 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f650:	400a      	ands	r2, r1
 800f652:	801a      	strh	r2, [r3, #0]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	001a      	movs	r2, r3
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	18d3      	adds	r3, r2, r3
 800f662:	183a      	adds	r2, r7, r0
 800f664:	8812      	ldrh	r2, [r2, #0]
 800f666:	4951      	ldr	r1, [pc, #324]	@ (800f7ac <HAL_PCD_EP_DB_Transmit+0x734>)
 800f668:	430a      	orrs	r2, r1
 800f66a:	b292      	uxth	r2, r2
 800f66c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2224      	movs	r2, #36	@ 0x24
 800f672:	5c9b      	ldrb	r3, [r3, r2]
 800f674:	2b01      	cmp	r3, #1
 800f676:	d000      	beq.n	800f67a <HAL_PCD_EP_DB_Transmit+0x602>
 800f678:	e0db      	b.n	800f832 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	695a      	ldr	r2, [r3, #20]
 800f67e:	2186      	movs	r1, #134	@ 0x86
 800f680:	187b      	adds	r3, r7, r1
 800f682:	881b      	ldrh	r3, [r3, #0]
 800f684:	18d2      	adds	r2, r2, r3
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	69da      	ldr	r2, [r3, #28]
 800f68e:	187b      	adds	r3, r7, r1
 800f690:	881b      	ldrh	r3, [r3, #0]
 800f692:	18d2      	adds	r2, r2, r3
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	6a1a      	ldr	r2, [r3, #32]
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	691b      	ldr	r3, [r3, #16]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d30c      	bcc.n	800f6be <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	691b      	ldr	r3, [r3, #16]
 800f6a8:	218c      	movs	r1, #140	@ 0x8c
 800f6aa:	187a      	adds	r2, r7, r1
 800f6ac:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	6a1a      	ldr	r2, [r3, #32]
 800f6b2:	187b      	adds	r3, r7, r1
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	1ad2      	subs	r2, r2, r3
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	621a      	str	r2, [r3, #32]
 800f6bc:	e01a      	b.n	800f6f4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	6a1b      	ldr	r3, [r3, #32]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d10a      	bne.n	800f6dc <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800f6c6:	2386      	movs	r3, #134	@ 0x86
 800f6c8:	18fb      	adds	r3, r7, r3
 800f6ca:	881b      	ldrh	r3, [r3, #0]
 800f6cc:	228c      	movs	r2, #140	@ 0x8c
 800f6ce:	18ba      	adds	r2, r7, r2
 800f6d0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	2224      	movs	r2, #36	@ 0x24
 800f6d6:	2100      	movs	r1, #0
 800f6d8:	5499      	strb	r1, [r3, r2]
 800f6da:	e00b      	b.n	800f6f4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	6a1b      	ldr	r3, [r3, #32]
 800f6e0:	228c      	movs	r2, #140	@ 0x8c
 800f6e2:	18ba      	adds	r2, r7, r2
 800f6e4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	2224      	movs	r2, #36	@ 0x24
 800f6f0:	2100      	movs	r1, #0
 800f6f2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	657b      	str	r3, [r7, #84]	@ 0x54
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	785b      	ldrb	r3, [r3, #1]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d000      	beq.n	800f704 <HAL_PCD_EP_DB_Transmit+0x68c>
 800f702:	e06e      	b.n	800f7e2 <HAL_PCD_EP_DB_Transmit+0x76a>
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2250      	movs	r2, #80	@ 0x50
 800f710:	5a9b      	ldrh	r3, [r3, r2]
 800f712:	b29b      	uxth	r3, r3
 800f714:	001a      	movs	r2, r3
 800f716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f718:	189b      	adds	r3, r3, r2
 800f71a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	00da      	lsls	r2, r3, #3
 800f722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f724:	18d3      	adds	r3, r2, r3
 800f726:	4a1e      	ldr	r2, [pc, #120]	@ (800f7a0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f728:	4694      	mov	ip, r2
 800f72a:	4463      	add	r3, ip
 800f72c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f72e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	b29b      	uxth	r3, r3
 800f734:	059b      	lsls	r3, r3, #22
 800f736:	0d9b      	lsrs	r3, r3, #22
 800f738:	b29a      	uxth	r2, r3
 800f73a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f73c:	801a      	strh	r2, [r3, #0]
 800f73e:	228c      	movs	r2, #140	@ 0x8c
 800f740:	18bb      	adds	r3, r7, r2
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2b3e      	cmp	r3, #62	@ 0x3e
 800f746:	d91a      	bls.n	800f77e <HAL_PCD_EP_DB_Transmit+0x706>
 800f748:	18bb      	adds	r3, r7, r2
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	095b      	lsrs	r3, r3, #5
 800f74e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f750:	18bb      	adds	r3, r7, r2
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	221f      	movs	r2, #31
 800f756:	4013      	ands	r3, r2
 800f758:	d102      	bne.n	800f760 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800f75a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f75c:	3b01      	subs	r3, #1
 800f75e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	b29a      	uxth	r2, r3
 800f766:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f768:	b29b      	uxth	r3, r3
 800f76a:	029b      	lsls	r3, r3, #10
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4313      	orrs	r3, r2
 800f770:	b29b      	uxth	r3, r3
 800f772:	4a0c      	ldr	r2, [pc, #48]	@ (800f7a4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f774:	4313      	orrs	r3, r2
 800f776:	b29a      	uxth	r2, r3
 800f778:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f77a:	801a      	strh	r2, [r3, #0]
 800f77c:	e04d      	b.n	800f81a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f77e:	238c      	movs	r3, #140	@ 0x8c
 800f780:	18fb      	adds	r3, r7, r3
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d113      	bne.n	800f7b0 <HAL_PCD_EP_DB_Transmit+0x738>
 800f788:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	4a05      	ldr	r2, [pc, #20]	@ (800f7a4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f790:	4313      	orrs	r3, r2
 800f792:	b29a      	uxth	r2, r3
 800f794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f796:	801a      	strh	r2, [r3, #0]
 800f798:	e03f      	b.n	800f81a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f79a:	46c0      	nop			@ (mov r8, r8)
 800f79c:	00000402 	.word	0x00000402
 800f7a0:	00000406 	.word	0x00000406
 800f7a4:	ffff8000 	.word	0xffff8000
 800f7a8:	ffff8f8f 	.word	0xffff8f8f
 800f7ac:	ffffc080 	.word	0xffffc080
 800f7b0:	228c      	movs	r2, #140	@ 0x8c
 800f7b2:	18bb      	adds	r3, r7, r2
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	085b      	lsrs	r3, r3, #1
 800f7b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f7ba:	18bb      	adds	r3, r7, r2
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	d002      	beq.n	800f7ca <HAL_PCD_EP_DB_Transmit+0x752>
 800f7c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f7ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7cc:	881b      	ldrh	r3, [r3, #0]
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	029b      	lsls	r3, r3, #10
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7de:	801a      	strh	r2, [r3, #0]
 800f7e0:	e01b      	b.n	800f81a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	785b      	ldrb	r3, [r3, #1]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d117      	bne.n	800f81a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2250      	movs	r2, #80	@ 0x50
 800f7f0:	5a9b      	ldrh	r3, [r3, r2]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	001a      	movs	r2, r3
 800f7f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7f8:	189b      	adds	r3, r3, r2
 800f7fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	00da      	lsls	r2, r3, #3
 800f802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f804:	18d3      	adds	r3, r2, r3
 800f806:	4a21      	ldr	r2, [pc, #132]	@ (800f88c <HAL_PCD_EP_DB_Transmit+0x814>)
 800f808:	4694      	mov	ip, r2
 800f80a:	4463      	add	r3, ip
 800f80c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f80e:	238c      	movs	r3, #140	@ 0x8c
 800f810:	18fb      	adds	r3, r7, r3
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	b29a      	uxth	r2, r3
 800f816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f818:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6818      	ldr	r0, [r3, #0]
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	6959      	ldr	r1, [r3, #20]
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	895a      	ldrh	r2, [r3, #10]
 800f826:	238c      	movs	r3, #140	@ 0x8c
 800f828:	18fb      	adds	r3, r7, r3
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	f005 fa5b 	bl	8014ce8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	001a      	movs	r2, r3
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	18d3      	adds	r3, r2, r3
 800f840:	881b      	ldrh	r3, [r3, #0]
 800f842:	b29a      	uxth	r2, r3
 800f844:	2014      	movs	r0, #20
 800f846:	183b      	adds	r3, r7, r0
 800f848:	4911      	ldr	r1, [pc, #68]	@ (800f890 <HAL_PCD_EP_DB_Transmit+0x818>)
 800f84a:	400a      	ands	r2, r1
 800f84c:	801a      	strh	r2, [r3, #0]
 800f84e:	183b      	adds	r3, r7, r0
 800f850:	183a      	adds	r2, r7, r0
 800f852:	8812      	ldrh	r2, [r2, #0]
 800f854:	2110      	movs	r1, #16
 800f856:	404a      	eors	r2, r1
 800f858:	801a      	strh	r2, [r3, #0]
 800f85a:	183b      	adds	r3, r7, r0
 800f85c:	183a      	adds	r2, r7, r0
 800f85e:	8812      	ldrh	r2, [r2, #0]
 800f860:	2120      	movs	r1, #32
 800f862:	404a      	eors	r2, r1
 800f864:	801a      	strh	r2, [r3, #0]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	001a      	movs	r2, r3
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	18d3      	adds	r3, r2, r3
 800f874:	183a      	adds	r2, r7, r0
 800f876:	8812      	ldrh	r2, [r2, #0]
 800f878:	4906      	ldr	r1, [pc, #24]	@ (800f894 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800f87a:	430a      	orrs	r2, r1
 800f87c:	b292      	uxth	r2, r2
 800f87e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	0018      	movs	r0, r3
 800f884:	46bd      	mov	sp, r7
 800f886:	b024      	add	sp, #144	@ 0x90
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	46c0      	nop			@ (mov r8, r8)
 800f88c:	00000406 	.word	0x00000406
 800f890:	ffff8fbf 	.word	0xffff8fbf
 800f894:	ffff8080 	.word	0xffff8080

0800f898 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800f898:	b590      	push	{r4, r7, lr}
 800f89a:	b087      	sub	sp, #28
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	0008      	movs	r0, r1
 800f8a2:	0011      	movs	r1, r2
 800f8a4:	607b      	str	r3, [r7, #4]
 800f8a6:	240a      	movs	r4, #10
 800f8a8:	193b      	adds	r3, r7, r4
 800f8aa:	1c02      	adds	r2, r0, #0
 800f8ac:	801a      	strh	r2, [r3, #0]
 800f8ae:	2308      	movs	r3, #8
 800f8b0:	18fb      	adds	r3, r7, r3
 800f8b2:	1c0a      	adds	r2, r1, #0
 800f8b4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800f8b6:	0021      	movs	r1, r4
 800f8b8:	187b      	adds	r3, r7, r1
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	2280      	movs	r2, #128	@ 0x80
 800f8be:	4013      	ands	r3, r2
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d00c      	beq.n	800f8e0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f8c6:	187b      	adds	r3, r7, r1
 800f8c8:	881b      	ldrh	r3, [r3, #0]
 800f8ca:	2207      	movs	r2, #7
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	1c5a      	adds	r2, r3, #1
 800f8d0:	0013      	movs	r3, r2
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	189b      	adds	r3, r3, r2
 800f8d6:	00db      	lsls	r3, r3, #3
 800f8d8:	68fa      	ldr	r2, [r7, #12]
 800f8da:	18d3      	adds	r3, r2, r3
 800f8dc:	617b      	str	r3, [r7, #20]
 800f8de:	e00b      	b.n	800f8f8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f8e0:	230a      	movs	r3, #10
 800f8e2:	18fb      	adds	r3, r7, r3
 800f8e4:	881a      	ldrh	r2, [r3, #0]
 800f8e6:	0013      	movs	r3, r2
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	189b      	adds	r3, r3, r2
 800f8ec:	00db      	lsls	r3, r3, #3
 800f8ee:	3369      	adds	r3, #105	@ 0x69
 800f8f0:	33ff      	adds	r3, #255	@ 0xff
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	18d3      	adds	r3, r2, r3
 800f8f6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800f8f8:	2308      	movs	r3, #8
 800f8fa:	18fb      	adds	r3, r7, r3
 800f8fc:	881b      	ldrh	r3, [r3, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d107      	bne.n	800f912 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	2200      	movs	r2, #0
 800f906:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	80da      	strh	r2, [r3, #6]
 800f910:	e00b      	b.n	800f92a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	2201      	movs	r2, #1
 800f916:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	0c1b      	lsrs	r3, r3, #16
 800f924:	b29a      	uxth	r2, r3
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	0018      	movs	r0, r3
 800f92e:	46bd      	mov	sp, r7
 800f930:	b007      	add	sp, #28
 800f932:	bd90      	pop	{r4, r7, pc}

0800f934 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	23ba      	movs	r3, #186	@ 0xba
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	2101      	movs	r1, #1
 800f94a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	23b8      	movs	r3, #184	@ 0xb8
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	2100      	movs	r1, #0
 800f954:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2254      	movs	r2, #84	@ 0x54
 800f95a:	5a9b      	ldrh	r3, [r3, r2]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	2201      	movs	r2, #1
 800f960:	4313      	orrs	r3, r2
 800f962:	b299      	uxth	r1, r3
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2254      	movs	r2, #84	@ 0x54
 800f968:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2254      	movs	r2, #84	@ 0x54
 800f96e:	5a9b      	ldrh	r3, [r3, r2]
 800f970:	b29b      	uxth	r3, r3
 800f972:	2202      	movs	r2, #2
 800f974:	4313      	orrs	r3, r2
 800f976:	b299      	uxth	r1, r3
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2254      	movs	r2, #84	@ 0x54
 800f97c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f97e:	2300      	movs	r3, #0
}
 800f980:	0018      	movs	r0, r3
 800f982:	46bd      	mov	sp, r7
 800f984:	b004      	add	sp, #16
 800f986:	bd80      	pop	{r7, pc}

0800f988 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	000a      	movs	r2, r1
 800f992:	1cfb      	adds	r3, r7, #3
 800f994:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f996:	46c0      	nop			@ (mov r8, r8)
 800f998:	46bd      	mov	sp, r7
 800f99a:	b002      	add	sp, #8
 800f99c:	bd80      	pop	{r7, pc}
	...

0800f9a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800f9a4:	4b04      	ldr	r3, [pc, #16]	@ (800f9b8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	4b03      	ldr	r3, [pc, #12]	@ (800f9b8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f9aa:	2180      	movs	r1, #128	@ 0x80
 800f9ac:	0049      	lsls	r1, r1, #1
 800f9ae:	430a      	orrs	r2, r1
 800f9b0:	601a      	str	r2, [r3, #0]
}
 800f9b2:	46c0      	nop			@ (mov r8, r8)
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	40007000 	.word	0x40007000

0800f9bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f9bc:	b5b0      	push	{r4, r5, r7, lr}
 800f9be:	b08a      	sub	sp, #40	@ 0x28
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d102      	bne.n	800f9d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	f000 fbbf 	bl	801014e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f9d0:	4bc9      	ldr	r3, [pc, #804]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	220c      	movs	r2, #12
 800f9d6:	4013      	ands	r3, r2
 800f9d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f9da:	4bc7      	ldr	r3, [pc, #796]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800f9dc:	68da      	ldr	r2, [r3, #12]
 800f9de:	2380      	movs	r3, #128	@ 0x80
 800f9e0:	025b      	lsls	r3, r3, #9
 800f9e2:	4013      	ands	r3, r2
 800f9e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	4013      	ands	r3, r2
 800f9ee:	d100      	bne.n	800f9f2 <HAL_RCC_OscConfig+0x36>
 800f9f0:	e07e      	b.n	800faf0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	2b08      	cmp	r3, #8
 800f9f6:	d007      	beq.n	800fa08 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	2b0c      	cmp	r3, #12
 800f9fc:	d112      	bne.n	800fa24 <HAL_RCC_OscConfig+0x68>
 800f9fe:	69ba      	ldr	r2, [r7, #24]
 800fa00:	2380      	movs	r3, #128	@ 0x80
 800fa02:	025b      	lsls	r3, r3, #9
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d10d      	bne.n	800fa24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa08:	4bbb      	ldr	r3, [pc, #748]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	2380      	movs	r3, #128	@ 0x80
 800fa0e:	029b      	lsls	r3, r3, #10
 800fa10:	4013      	ands	r3, r2
 800fa12:	d100      	bne.n	800fa16 <HAL_RCC_OscConfig+0x5a>
 800fa14:	e06b      	b.n	800faee <HAL_RCC_OscConfig+0x132>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d167      	bne.n	800faee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	f000 fb95 	bl	801014e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	685a      	ldr	r2, [r3, #4]
 800fa28:	2380      	movs	r3, #128	@ 0x80
 800fa2a:	025b      	lsls	r3, r3, #9
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d107      	bne.n	800fa40 <HAL_RCC_OscConfig+0x84>
 800fa30:	4bb1      	ldr	r3, [pc, #708]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	4bb0      	ldr	r3, [pc, #704]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa36:	2180      	movs	r1, #128	@ 0x80
 800fa38:	0249      	lsls	r1, r1, #9
 800fa3a:	430a      	orrs	r2, r1
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	e027      	b.n	800fa90 <HAL_RCC_OscConfig+0xd4>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	685a      	ldr	r2, [r3, #4]
 800fa44:	23a0      	movs	r3, #160	@ 0xa0
 800fa46:	02db      	lsls	r3, r3, #11
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d10e      	bne.n	800fa6a <HAL_RCC_OscConfig+0xae>
 800fa4c:	4baa      	ldr	r3, [pc, #680]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	4ba9      	ldr	r3, [pc, #676]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa52:	2180      	movs	r1, #128	@ 0x80
 800fa54:	02c9      	lsls	r1, r1, #11
 800fa56:	430a      	orrs	r2, r1
 800fa58:	601a      	str	r2, [r3, #0]
 800fa5a:	4ba7      	ldr	r3, [pc, #668]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	4ba6      	ldr	r3, [pc, #664]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa60:	2180      	movs	r1, #128	@ 0x80
 800fa62:	0249      	lsls	r1, r1, #9
 800fa64:	430a      	orrs	r2, r1
 800fa66:	601a      	str	r2, [r3, #0]
 800fa68:	e012      	b.n	800fa90 <HAL_RCC_OscConfig+0xd4>
 800fa6a:	4ba3      	ldr	r3, [pc, #652]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	4ba2      	ldr	r3, [pc, #648]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa70:	49a2      	ldr	r1, [pc, #648]	@ (800fcfc <HAL_RCC_OscConfig+0x340>)
 800fa72:	400a      	ands	r2, r1
 800fa74:	601a      	str	r2, [r3, #0]
 800fa76:	4ba0      	ldr	r3, [pc, #640]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	2380      	movs	r3, #128	@ 0x80
 800fa7c:	025b      	lsls	r3, r3, #9
 800fa7e:	4013      	ands	r3, r2
 800fa80:	60fb      	str	r3, [r7, #12]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	4b9c      	ldr	r3, [pc, #624]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	4b9b      	ldr	r3, [pc, #620]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fa8a:	499d      	ldr	r1, [pc, #628]	@ (800fd00 <HAL_RCC_OscConfig+0x344>)
 800fa8c:	400a      	ands	r2, r1
 800fa8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d015      	beq.n	800fac4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa98:	f7fa fa16 	bl	8009ec8 <HAL_GetTick>
 800fa9c:	0003      	movs	r3, r0
 800fa9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800faa0:	e009      	b.n	800fab6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800faa2:	f7fa fa11 	bl	8009ec8 <HAL_GetTick>
 800faa6:	0002      	movs	r2, r0
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	2b64      	cmp	r3, #100	@ 0x64
 800faae:	d902      	bls.n	800fab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800fab0:	2303      	movs	r3, #3
 800fab2:	f000 fb4c 	bl	801014e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fab6:	4b90      	ldr	r3, [pc, #576]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	2380      	movs	r3, #128	@ 0x80
 800fabc:	029b      	lsls	r3, r3, #10
 800fabe:	4013      	ands	r3, r2
 800fac0:	d0ef      	beq.n	800faa2 <HAL_RCC_OscConfig+0xe6>
 800fac2:	e015      	b.n	800faf0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fac4:	f7fa fa00 	bl	8009ec8 <HAL_GetTick>
 800fac8:	0003      	movs	r3, r0
 800faca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800facc:	e008      	b.n	800fae0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800face:	f7fa f9fb 	bl	8009ec8 <HAL_GetTick>
 800fad2:	0002      	movs	r2, r0
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	2b64      	cmp	r3, #100	@ 0x64
 800fada:	d901      	bls.n	800fae0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800fadc:	2303      	movs	r3, #3
 800fade:	e336      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fae0:	4b85      	ldr	r3, [pc, #532]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	2380      	movs	r3, #128	@ 0x80
 800fae6:	029b      	lsls	r3, r3, #10
 800fae8:	4013      	ands	r3, r2
 800faea:	d1f0      	bne.n	800face <HAL_RCC_OscConfig+0x112>
 800faec:	e000      	b.n	800faf0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800faee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2202      	movs	r2, #2
 800faf6:	4013      	ands	r3, r2
 800faf8:	d100      	bne.n	800fafc <HAL_RCC_OscConfig+0x140>
 800fafa:	e099      	b.n	800fc30 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800fb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb04:	2220      	movs	r2, #32
 800fb06:	4013      	ands	r3, r2
 800fb08:	d009      	beq.n	800fb1e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800fb0a:	4b7b      	ldr	r3, [pc, #492]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	4b7a      	ldr	r3, [pc, #488]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fb10:	2120      	movs	r1, #32
 800fb12:	430a      	orrs	r2, r1
 800fb14:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800fb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb18:	2220      	movs	r2, #32
 800fb1a:	4393      	bics	r3, r2
 800fb1c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	2b04      	cmp	r3, #4
 800fb22:	d005      	beq.n	800fb30 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	2b0c      	cmp	r3, #12
 800fb28:	d13e      	bne.n	800fba8 <HAL_RCC_OscConfig+0x1ec>
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d13b      	bne.n	800fba8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800fb30:	4b71      	ldr	r3, [pc, #452]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2204      	movs	r2, #4
 800fb36:	4013      	ands	r3, r2
 800fb38:	d004      	beq.n	800fb44 <HAL_RCC_OscConfig+0x188>
 800fb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d101      	bne.n	800fb44 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800fb40:	2301      	movs	r3, #1
 800fb42:	e304      	b.n	801014e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fb44:	4b6c      	ldr	r3, [pc, #432]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	4a6e      	ldr	r2, [pc, #440]	@ (800fd04 <HAL_RCC_OscConfig+0x348>)
 800fb4a:	4013      	ands	r3, r2
 800fb4c:	0019      	movs	r1, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	691b      	ldr	r3, [r3, #16]
 800fb52:	021a      	lsls	r2, r3, #8
 800fb54:	4b68      	ldr	r3, [pc, #416]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fb56:	430a      	orrs	r2, r1
 800fb58:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800fb5a:	4b67      	ldr	r3, [pc, #412]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2209      	movs	r2, #9
 800fb60:	4393      	bics	r3, r2
 800fb62:	0019      	movs	r1, r3
 800fb64:	4b64      	ldr	r3, [pc, #400]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fb66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb68:	430a      	orrs	r2, r1
 800fb6a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fb6c:	f000 fc42 	bl	80103f4 <HAL_RCC_GetSysClockFreq>
 800fb70:	0001      	movs	r1, r0
 800fb72:	4b61      	ldr	r3, [pc, #388]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	091b      	lsrs	r3, r3, #4
 800fb78:	220f      	movs	r2, #15
 800fb7a:	4013      	ands	r3, r2
 800fb7c:	4a62      	ldr	r2, [pc, #392]	@ (800fd08 <HAL_RCC_OscConfig+0x34c>)
 800fb7e:	5cd3      	ldrb	r3, [r2, r3]
 800fb80:	000a      	movs	r2, r1
 800fb82:	40da      	lsrs	r2, r3
 800fb84:	4b61      	ldr	r3, [pc, #388]	@ (800fd0c <HAL_RCC_OscConfig+0x350>)
 800fb86:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800fb88:	4b61      	ldr	r3, [pc, #388]	@ (800fd10 <HAL_RCC_OscConfig+0x354>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2513      	movs	r5, #19
 800fb8e:	197c      	adds	r4, r7, r5
 800fb90:	0018      	movs	r0, r3
 800fb92:	f7fa f953 	bl	8009e3c <HAL_InitTick>
 800fb96:	0003      	movs	r3, r0
 800fb98:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800fb9a:	197b      	adds	r3, r7, r5
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d046      	beq.n	800fc30 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800fba2:	197b      	adds	r3, r7, r5
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	e2d2      	b.n	801014e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800fba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d027      	beq.n	800fbfe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800fbae:	4b52      	ldr	r3, [pc, #328]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2209      	movs	r2, #9
 800fbb4:	4393      	bics	r3, r2
 800fbb6:	0019      	movs	r1, r3
 800fbb8:	4b4f      	ldr	r3, [pc, #316]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fbba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbbc:	430a      	orrs	r2, r1
 800fbbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbc0:	f7fa f982 	bl	8009ec8 <HAL_GetTick>
 800fbc4:	0003      	movs	r3, r0
 800fbc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fbc8:	e008      	b.n	800fbdc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fbca:	f7fa f97d 	bl	8009ec8 <HAL_GetTick>
 800fbce:	0002      	movs	r2, r0
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	d901      	bls.n	800fbdc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800fbd8:	2303      	movs	r3, #3
 800fbda:	e2b8      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fbdc:	4b46      	ldr	r3, [pc, #280]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2204      	movs	r2, #4
 800fbe2:	4013      	ands	r3, r2
 800fbe4:	d0f1      	beq.n	800fbca <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fbe6:	4b44      	ldr	r3, [pc, #272]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	4a46      	ldr	r2, [pc, #280]	@ (800fd04 <HAL_RCC_OscConfig+0x348>)
 800fbec:	4013      	ands	r3, r2
 800fbee:	0019      	movs	r1, r3
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	691b      	ldr	r3, [r3, #16]
 800fbf4:	021a      	lsls	r2, r3, #8
 800fbf6:	4b40      	ldr	r3, [pc, #256]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fbf8:	430a      	orrs	r2, r1
 800fbfa:	605a      	str	r2, [r3, #4]
 800fbfc:	e018      	b.n	800fc30 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fbfe:	4b3e      	ldr	r3, [pc, #248]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	4b3d      	ldr	r3, [pc, #244]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fc04:	2101      	movs	r1, #1
 800fc06:	438a      	bics	r2, r1
 800fc08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc0a:	f7fa f95d 	bl	8009ec8 <HAL_GetTick>
 800fc0e:	0003      	movs	r3, r0
 800fc10:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fc12:	e008      	b.n	800fc26 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fc14:	f7fa f958 	bl	8009ec8 <HAL_GetTick>
 800fc18:	0002      	movs	r2, r0
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	1ad3      	subs	r3, r2, r3
 800fc1e:	2b02      	cmp	r3, #2
 800fc20:	d901      	bls.n	800fc26 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800fc22:	2303      	movs	r3, #3
 800fc24:	e293      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fc26:	4b34      	ldr	r3, [pc, #208]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2204      	movs	r2, #4
 800fc2c:	4013      	ands	r3, r2
 800fc2e:	d1f1      	bne.n	800fc14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2210      	movs	r2, #16
 800fc36:	4013      	ands	r3, r2
 800fc38:	d100      	bne.n	800fc3c <HAL_RCC_OscConfig+0x280>
 800fc3a:	e0a2      	b.n	800fd82 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d140      	bne.n	800fcc4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fc42:	4b2d      	ldr	r3, [pc, #180]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	2380      	movs	r3, #128	@ 0x80
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4013      	ands	r3, r2
 800fc4c:	d005      	beq.n	800fc5a <HAL_RCC_OscConfig+0x29e>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	69db      	ldr	r3, [r3, #28]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d101      	bne.n	800fc5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800fc56:	2301      	movs	r3, #1
 800fc58:	e279      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fc5a:	4b27      	ldr	r3, [pc, #156]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	4a2d      	ldr	r2, [pc, #180]	@ (800fd14 <HAL_RCC_OscConfig+0x358>)
 800fc60:	4013      	ands	r3, r2
 800fc62:	0019      	movs	r1, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc68:	4b23      	ldr	r3, [pc, #140]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fc6a:	430a      	orrs	r2, r1
 800fc6c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fc6e:	4b22      	ldr	r3, [pc, #136]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	021b      	lsls	r3, r3, #8
 800fc74:	0a19      	lsrs	r1, r3, #8
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6a1b      	ldr	r3, [r3, #32]
 800fc7a:	061a      	lsls	r2, r3, #24
 800fc7c:	4b1e      	ldr	r3, [pc, #120]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fc7e:	430a      	orrs	r2, r1
 800fc80:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc86:	0b5b      	lsrs	r3, r3, #13
 800fc88:	3301      	adds	r3, #1
 800fc8a:	2280      	movs	r2, #128	@ 0x80
 800fc8c:	0212      	lsls	r2, r2, #8
 800fc8e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800fc90:	4b19      	ldr	r3, [pc, #100]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	091b      	lsrs	r3, r3, #4
 800fc96:	210f      	movs	r1, #15
 800fc98:	400b      	ands	r3, r1
 800fc9a:	491b      	ldr	r1, [pc, #108]	@ (800fd08 <HAL_RCC_OscConfig+0x34c>)
 800fc9c:	5ccb      	ldrb	r3, [r1, r3]
 800fc9e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fca0:	4b1a      	ldr	r3, [pc, #104]	@ (800fd0c <HAL_RCC_OscConfig+0x350>)
 800fca2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800fca4:	4b1a      	ldr	r3, [pc, #104]	@ (800fd10 <HAL_RCC_OscConfig+0x354>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	2513      	movs	r5, #19
 800fcaa:	197c      	adds	r4, r7, r5
 800fcac:	0018      	movs	r0, r3
 800fcae:	f7fa f8c5 	bl	8009e3c <HAL_InitTick>
 800fcb2:	0003      	movs	r3, r0
 800fcb4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800fcb6:	197b      	adds	r3, r7, r5
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d061      	beq.n	800fd82 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800fcbe:	197b      	adds	r3, r7, r5
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	e244      	b.n	801014e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	69db      	ldr	r3, [r3, #28]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d040      	beq.n	800fd4e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fccc:	4b0a      	ldr	r3, [pc, #40]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fcce:	681a      	ldr	r2, [r3, #0]
 800fcd0:	4b09      	ldr	r3, [pc, #36]	@ (800fcf8 <HAL_RCC_OscConfig+0x33c>)
 800fcd2:	2180      	movs	r1, #128	@ 0x80
 800fcd4:	0049      	lsls	r1, r1, #1
 800fcd6:	430a      	orrs	r2, r1
 800fcd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fcda:	f7fa f8f5 	bl	8009ec8 <HAL_GetTick>
 800fcde:	0003      	movs	r3, r0
 800fce0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fce2:	e019      	b.n	800fd18 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fce4:	f7fa f8f0 	bl	8009ec8 <HAL_GetTick>
 800fce8:	0002      	movs	r2, r0
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	d912      	bls.n	800fd18 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800fcf2:	2303      	movs	r3, #3
 800fcf4:	e22b      	b.n	801014e <HAL_RCC_OscConfig+0x792>
 800fcf6:	46c0      	nop			@ (mov r8, r8)
 800fcf8:	40021000 	.word	0x40021000
 800fcfc:	fffeffff 	.word	0xfffeffff
 800fd00:	fffbffff 	.word	0xfffbffff
 800fd04:	ffffe0ff 	.word	0xffffe0ff
 800fd08:	0801bb50 	.word	0x0801bb50
 800fd0c:	20000058 	.word	0x20000058
 800fd10:	2000006c 	.word	0x2000006c
 800fd14:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fd18:	4bca      	ldr	r3, [pc, #808]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	2380      	movs	r3, #128	@ 0x80
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	4013      	ands	r3, r2
 800fd22:	d0df      	beq.n	800fce4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fd24:	4bc7      	ldr	r3, [pc, #796]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	4ac7      	ldr	r2, [pc, #796]	@ (8010048 <HAL_RCC_OscConfig+0x68c>)
 800fd2a:	4013      	ands	r3, r2
 800fd2c:	0019      	movs	r1, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd32:	4bc4      	ldr	r3, [pc, #784]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd34:	430a      	orrs	r2, r1
 800fd36:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fd38:	4bc2      	ldr	r3, [pc, #776]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	021b      	lsls	r3, r3, #8
 800fd3e:	0a19      	lsrs	r1, r3, #8
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6a1b      	ldr	r3, [r3, #32]
 800fd44:	061a      	lsls	r2, r3, #24
 800fd46:	4bbf      	ldr	r3, [pc, #764]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd48:	430a      	orrs	r2, r1
 800fd4a:	605a      	str	r2, [r3, #4]
 800fd4c:	e019      	b.n	800fd82 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fd4e:	4bbd      	ldr	r3, [pc, #756]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	4bbc      	ldr	r3, [pc, #752]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd54:	49bd      	ldr	r1, [pc, #756]	@ (801004c <HAL_RCC_OscConfig+0x690>)
 800fd56:	400a      	ands	r2, r1
 800fd58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd5a:	f7fa f8b5 	bl	8009ec8 <HAL_GetTick>
 800fd5e:	0003      	movs	r3, r0
 800fd60:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fd62:	e008      	b.n	800fd76 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fd64:	f7fa f8b0 	bl	8009ec8 <HAL_GetTick>
 800fd68:	0002      	movs	r2, r0
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	1ad3      	subs	r3, r2, r3
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	d901      	bls.n	800fd76 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800fd72:	2303      	movs	r3, #3
 800fd74:	e1eb      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fd76:	4bb3      	ldr	r3, [pc, #716]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	2380      	movs	r3, #128	@ 0x80
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	4013      	ands	r3, r2
 800fd80:	d1f0      	bne.n	800fd64 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2208      	movs	r2, #8
 800fd88:	4013      	ands	r3, r2
 800fd8a:	d036      	beq.n	800fdfa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	695b      	ldr	r3, [r3, #20]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d019      	beq.n	800fdc8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fd94:	4bab      	ldr	r3, [pc, #684]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd98:	4baa      	ldr	r3, [pc, #680]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fd9a:	2101      	movs	r1, #1
 800fd9c:	430a      	orrs	r2, r1
 800fd9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fda0:	f7fa f892 	bl	8009ec8 <HAL_GetTick>
 800fda4:	0003      	movs	r3, r0
 800fda6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fda8:	e008      	b.n	800fdbc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fdaa:	f7fa f88d 	bl	8009ec8 <HAL_GetTick>
 800fdae:	0002      	movs	r2, r0
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	1ad3      	subs	r3, r2, r3
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	d901      	bls.n	800fdbc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800fdb8:	2303      	movs	r3, #3
 800fdba:	e1c8      	b.n	801014e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fdbc:	4ba1      	ldr	r3, [pc, #644]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fdbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	d0f1      	beq.n	800fdaa <HAL_RCC_OscConfig+0x3ee>
 800fdc6:	e018      	b.n	800fdfa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fdc8:	4b9e      	ldr	r3, [pc, #632]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fdca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdcc:	4b9d      	ldr	r3, [pc, #628]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fdce:	2101      	movs	r1, #1
 800fdd0:	438a      	bics	r2, r1
 800fdd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fdd4:	f7fa f878 	bl	8009ec8 <HAL_GetTick>
 800fdd8:	0003      	movs	r3, r0
 800fdda:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fddc:	e008      	b.n	800fdf0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fdde:	f7fa f873 	bl	8009ec8 <HAL_GetTick>
 800fde2:	0002      	movs	r2, r0
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	2b02      	cmp	r3, #2
 800fdea:	d901      	bls.n	800fdf0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800fdec:	2303      	movs	r3, #3
 800fdee:	e1ae      	b.n	801014e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fdf0:	4b94      	ldr	r3, [pc, #592]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fdf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdf4:	2202      	movs	r2, #2
 800fdf6:	4013      	ands	r3, r2
 800fdf8:	d1f1      	bne.n	800fdde <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	2204      	movs	r2, #4
 800fe00:	4013      	ands	r3, r2
 800fe02:	d100      	bne.n	800fe06 <HAL_RCC_OscConfig+0x44a>
 800fe04:	e0ae      	b.n	800ff64 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fe06:	2023      	movs	r0, #35	@ 0x23
 800fe08:	183b      	adds	r3, r7, r0
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fe0e:	4b8d      	ldr	r3, [pc, #564]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fe10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe12:	2380      	movs	r3, #128	@ 0x80
 800fe14:	055b      	lsls	r3, r3, #21
 800fe16:	4013      	ands	r3, r2
 800fe18:	d109      	bne.n	800fe2e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fe1a:	4b8a      	ldr	r3, [pc, #552]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fe1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe1e:	4b89      	ldr	r3, [pc, #548]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fe20:	2180      	movs	r1, #128	@ 0x80
 800fe22:	0549      	lsls	r1, r1, #21
 800fe24:	430a      	orrs	r2, r1
 800fe26:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800fe28:	183b      	adds	r3, r7, r0
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe2e:	4b88      	ldr	r3, [pc, #544]	@ (8010050 <HAL_RCC_OscConfig+0x694>)
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	2380      	movs	r3, #128	@ 0x80
 800fe34:	005b      	lsls	r3, r3, #1
 800fe36:	4013      	ands	r3, r2
 800fe38:	d11a      	bne.n	800fe70 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fe3a:	4b85      	ldr	r3, [pc, #532]	@ (8010050 <HAL_RCC_OscConfig+0x694>)
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	4b84      	ldr	r3, [pc, #528]	@ (8010050 <HAL_RCC_OscConfig+0x694>)
 800fe40:	2180      	movs	r1, #128	@ 0x80
 800fe42:	0049      	lsls	r1, r1, #1
 800fe44:	430a      	orrs	r2, r1
 800fe46:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fe48:	f7fa f83e 	bl	8009ec8 <HAL_GetTick>
 800fe4c:	0003      	movs	r3, r0
 800fe4e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe50:	e008      	b.n	800fe64 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe52:	f7fa f839 	bl	8009ec8 <HAL_GetTick>
 800fe56:	0002      	movs	r2, r0
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	2b64      	cmp	r3, #100	@ 0x64
 800fe5e:	d901      	bls.n	800fe64 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800fe60:	2303      	movs	r3, #3
 800fe62:	e174      	b.n	801014e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe64:	4b7a      	ldr	r3, [pc, #488]	@ (8010050 <HAL_RCC_OscConfig+0x694>)
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	2380      	movs	r3, #128	@ 0x80
 800fe6a:	005b      	lsls	r3, r3, #1
 800fe6c:	4013      	ands	r3, r2
 800fe6e:	d0f0      	beq.n	800fe52 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	689a      	ldr	r2, [r3, #8]
 800fe74:	2380      	movs	r3, #128	@ 0x80
 800fe76:	005b      	lsls	r3, r3, #1
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d107      	bne.n	800fe8c <HAL_RCC_OscConfig+0x4d0>
 800fe7c:	4b71      	ldr	r3, [pc, #452]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fe7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe80:	4b70      	ldr	r3, [pc, #448]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fe82:	2180      	movs	r1, #128	@ 0x80
 800fe84:	0049      	lsls	r1, r1, #1
 800fe86:	430a      	orrs	r2, r1
 800fe88:	651a      	str	r2, [r3, #80]	@ 0x50
 800fe8a:	e031      	b.n	800fef0 <HAL_RCC_OscConfig+0x534>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d10c      	bne.n	800feae <HAL_RCC_OscConfig+0x4f2>
 800fe94:	4b6b      	ldr	r3, [pc, #428]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fe96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe98:	4b6a      	ldr	r3, [pc, #424]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fe9a:	496c      	ldr	r1, [pc, #432]	@ (801004c <HAL_RCC_OscConfig+0x690>)
 800fe9c:	400a      	ands	r2, r1
 800fe9e:	651a      	str	r2, [r3, #80]	@ 0x50
 800fea0:	4b68      	ldr	r3, [pc, #416]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fea2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fea4:	4b67      	ldr	r3, [pc, #412]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fea6:	496b      	ldr	r1, [pc, #428]	@ (8010054 <HAL_RCC_OscConfig+0x698>)
 800fea8:	400a      	ands	r2, r1
 800feaa:	651a      	str	r2, [r3, #80]	@ 0x50
 800feac:	e020      	b.n	800fef0 <HAL_RCC_OscConfig+0x534>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	689a      	ldr	r2, [r3, #8]
 800feb2:	23a0      	movs	r3, #160	@ 0xa0
 800feb4:	00db      	lsls	r3, r3, #3
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d10e      	bne.n	800fed8 <HAL_RCC_OscConfig+0x51c>
 800feba:	4b62      	ldr	r3, [pc, #392]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800febc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800febe:	4b61      	ldr	r3, [pc, #388]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fec0:	2180      	movs	r1, #128	@ 0x80
 800fec2:	00c9      	lsls	r1, r1, #3
 800fec4:	430a      	orrs	r2, r1
 800fec6:	651a      	str	r2, [r3, #80]	@ 0x50
 800fec8:	4b5e      	ldr	r3, [pc, #376]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800feca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fecc:	4b5d      	ldr	r3, [pc, #372]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fece:	2180      	movs	r1, #128	@ 0x80
 800fed0:	0049      	lsls	r1, r1, #1
 800fed2:	430a      	orrs	r2, r1
 800fed4:	651a      	str	r2, [r3, #80]	@ 0x50
 800fed6:	e00b      	b.n	800fef0 <HAL_RCC_OscConfig+0x534>
 800fed8:	4b5a      	ldr	r3, [pc, #360]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800feda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fedc:	4b59      	ldr	r3, [pc, #356]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fede:	495b      	ldr	r1, [pc, #364]	@ (801004c <HAL_RCC_OscConfig+0x690>)
 800fee0:	400a      	ands	r2, r1
 800fee2:	651a      	str	r2, [r3, #80]	@ 0x50
 800fee4:	4b57      	ldr	r3, [pc, #348]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fee6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fee8:	4b56      	ldr	r3, [pc, #344]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800feea:	495a      	ldr	r1, [pc, #360]	@ (8010054 <HAL_RCC_OscConfig+0x698>)
 800feec:	400a      	ands	r2, r1
 800feee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d015      	beq.n	800ff24 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fef8:	f7f9 ffe6 	bl	8009ec8 <HAL_GetTick>
 800fefc:	0003      	movs	r3, r0
 800fefe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ff00:	e009      	b.n	800ff16 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff02:	f7f9 ffe1 	bl	8009ec8 <HAL_GetTick>
 800ff06:	0002      	movs	r2, r0
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	4a52      	ldr	r2, [pc, #328]	@ (8010058 <HAL_RCC_OscConfig+0x69c>)
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d901      	bls.n	800ff16 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800ff12:	2303      	movs	r3, #3
 800ff14:	e11b      	b.n	801014e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ff16:	4b4b      	ldr	r3, [pc, #300]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ff18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff1a:	2380      	movs	r3, #128	@ 0x80
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	4013      	ands	r3, r2
 800ff20:	d0ef      	beq.n	800ff02 <HAL_RCC_OscConfig+0x546>
 800ff22:	e014      	b.n	800ff4e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ff24:	f7f9 ffd0 	bl	8009ec8 <HAL_GetTick>
 800ff28:	0003      	movs	r3, r0
 800ff2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ff2c:	e009      	b.n	800ff42 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff2e:	f7f9 ffcb 	bl	8009ec8 <HAL_GetTick>
 800ff32:	0002      	movs	r2, r0
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	1ad3      	subs	r3, r2, r3
 800ff38:	4a47      	ldr	r2, [pc, #284]	@ (8010058 <HAL_RCC_OscConfig+0x69c>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d901      	bls.n	800ff42 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800ff3e:	2303      	movs	r3, #3
 800ff40:	e105      	b.n	801014e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ff42:	4b40      	ldr	r3, [pc, #256]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ff44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff46:	2380      	movs	r3, #128	@ 0x80
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	4013      	ands	r3, r2
 800ff4c:	d1ef      	bne.n	800ff2e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ff4e:	2323      	movs	r3, #35	@ 0x23
 800ff50:	18fb      	adds	r3, r7, r3
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d105      	bne.n	800ff64 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ff58:	4b3a      	ldr	r3, [pc, #232]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ff5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff5c:	4b39      	ldr	r3, [pc, #228]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ff5e:	493f      	ldr	r1, [pc, #252]	@ (801005c <HAL_RCC_OscConfig+0x6a0>)
 800ff60:	400a      	ands	r2, r1
 800ff62:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2220      	movs	r2, #32
 800ff6a:	4013      	ands	r3, r2
 800ff6c:	d049      	beq.n	8010002 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	699b      	ldr	r3, [r3, #24]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d026      	beq.n	800ffc4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800ff76:	4b33      	ldr	r3, [pc, #204]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ff78:	689a      	ldr	r2, [r3, #8]
 800ff7a:	4b32      	ldr	r3, [pc, #200]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ff7c:	2101      	movs	r1, #1
 800ff7e:	430a      	orrs	r2, r1
 800ff80:	609a      	str	r2, [r3, #8]
 800ff82:	4b30      	ldr	r3, [pc, #192]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ff84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ff86:	4b2f      	ldr	r3, [pc, #188]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ff88:	2101      	movs	r1, #1
 800ff8a:	430a      	orrs	r2, r1
 800ff8c:	635a      	str	r2, [r3, #52]	@ 0x34
 800ff8e:	4b34      	ldr	r3, [pc, #208]	@ (8010060 <HAL_RCC_OscConfig+0x6a4>)
 800ff90:	6a1a      	ldr	r2, [r3, #32]
 800ff92:	4b33      	ldr	r3, [pc, #204]	@ (8010060 <HAL_RCC_OscConfig+0x6a4>)
 800ff94:	2180      	movs	r1, #128	@ 0x80
 800ff96:	0189      	lsls	r1, r1, #6
 800ff98:	430a      	orrs	r2, r1
 800ff9a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff9c:	f7f9 ff94 	bl	8009ec8 <HAL_GetTick>
 800ffa0:	0003      	movs	r3, r0
 800ffa2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ffa4:	e008      	b.n	800ffb8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ffa6:	f7f9 ff8f 	bl	8009ec8 <HAL_GetTick>
 800ffaa:	0002      	movs	r2, r0
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	2b02      	cmp	r3, #2
 800ffb2:	d901      	bls.n	800ffb8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800ffb4:	2303      	movs	r3, #3
 800ffb6:	e0ca      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ffb8:	4b22      	ldr	r3, [pc, #136]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ffba:	689b      	ldr	r3, [r3, #8]
 800ffbc:	2202      	movs	r2, #2
 800ffbe:	4013      	ands	r3, r2
 800ffc0:	d0f1      	beq.n	800ffa6 <HAL_RCC_OscConfig+0x5ea>
 800ffc2:	e01e      	b.n	8010002 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800ffc4:	4b1f      	ldr	r3, [pc, #124]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ffc6:	689a      	ldr	r2, [r3, #8]
 800ffc8:	4b1e      	ldr	r3, [pc, #120]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800ffca:	2101      	movs	r1, #1
 800ffcc:	438a      	bics	r2, r1
 800ffce:	609a      	str	r2, [r3, #8]
 800ffd0:	4b23      	ldr	r3, [pc, #140]	@ (8010060 <HAL_RCC_OscConfig+0x6a4>)
 800ffd2:	6a1a      	ldr	r2, [r3, #32]
 800ffd4:	4b22      	ldr	r3, [pc, #136]	@ (8010060 <HAL_RCC_OscConfig+0x6a4>)
 800ffd6:	4923      	ldr	r1, [pc, #140]	@ (8010064 <HAL_RCC_OscConfig+0x6a8>)
 800ffd8:	400a      	ands	r2, r1
 800ffda:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ffdc:	f7f9 ff74 	bl	8009ec8 <HAL_GetTick>
 800ffe0:	0003      	movs	r3, r0
 800ffe2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ffe4:	e008      	b.n	800fff8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ffe6:	f7f9 ff6f 	bl	8009ec8 <HAL_GetTick>
 800ffea:	0002      	movs	r2, r0
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	2b02      	cmp	r3, #2
 800fff2:	d901      	bls.n	800fff8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800fff4:	2303      	movs	r3, #3
 800fff6:	e0aa      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fff8:	4b12      	ldr	r3, [pc, #72]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	2202      	movs	r2, #2
 800fffe:	4013      	ands	r3, r2
 8010000:	d1f1      	bne.n	800ffe6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010006:	2b00      	cmp	r3, #0
 8010008:	d100      	bne.n	801000c <HAL_RCC_OscConfig+0x650>
 801000a:	e09f      	b.n	801014c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	2b0c      	cmp	r3, #12
 8010010:	d100      	bne.n	8010014 <HAL_RCC_OscConfig+0x658>
 8010012:	e078      	b.n	8010106 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010018:	2b02      	cmp	r3, #2
 801001a:	d159      	bne.n	80100d0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801001c:	4b09      	ldr	r3, [pc, #36]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	4b08      	ldr	r3, [pc, #32]	@ (8010044 <HAL_RCC_OscConfig+0x688>)
 8010022:	4911      	ldr	r1, [pc, #68]	@ (8010068 <HAL_RCC_OscConfig+0x6ac>)
 8010024:	400a      	ands	r2, r1
 8010026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010028:	f7f9 ff4e 	bl	8009ec8 <HAL_GetTick>
 801002c:	0003      	movs	r3, r0
 801002e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010030:	e01c      	b.n	801006c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010032:	f7f9 ff49 	bl	8009ec8 <HAL_GetTick>
 8010036:	0002      	movs	r2, r0
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	2b02      	cmp	r3, #2
 801003e:	d915      	bls.n	801006c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8010040:	2303      	movs	r3, #3
 8010042:	e084      	b.n	801014e <HAL_RCC_OscConfig+0x792>
 8010044:	40021000 	.word	0x40021000
 8010048:	ffff1fff 	.word	0xffff1fff
 801004c:	fffffeff 	.word	0xfffffeff
 8010050:	40007000 	.word	0x40007000
 8010054:	fffffbff 	.word	0xfffffbff
 8010058:	00001388 	.word	0x00001388
 801005c:	efffffff 	.word	0xefffffff
 8010060:	40010000 	.word	0x40010000
 8010064:	ffffdfff 	.word	0xffffdfff
 8010068:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801006c:	4b3a      	ldr	r3, [pc, #232]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	2380      	movs	r3, #128	@ 0x80
 8010072:	049b      	lsls	r3, r3, #18
 8010074:	4013      	ands	r3, r2
 8010076:	d1dc      	bne.n	8010032 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010078:	4b37      	ldr	r3, [pc, #220]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	4a37      	ldr	r2, [pc, #220]	@ (801015c <HAL_RCC_OscConfig+0x7a0>)
 801007e:	4013      	ands	r3, r2
 8010080:	0019      	movs	r1, r3
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801008a:	431a      	orrs	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010090:	431a      	orrs	r2, r3
 8010092:	4b31      	ldr	r3, [pc, #196]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 8010094:	430a      	orrs	r2, r1
 8010096:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010098:	4b2f      	ldr	r3, [pc, #188]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	4b2e      	ldr	r3, [pc, #184]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 801009e:	2180      	movs	r1, #128	@ 0x80
 80100a0:	0449      	lsls	r1, r1, #17
 80100a2:	430a      	orrs	r2, r1
 80100a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100a6:	f7f9 ff0f 	bl	8009ec8 <HAL_GetTick>
 80100aa:	0003      	movs	r3, r0
 80100ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80100ae:	e008      	b.n	80100c2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80100b0:	f7f9 ff0a 	bl	8009ec8 <HAL_GetTick>
 80100b4:	0002      	movs	r2, r0
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	d901      	bls.n	80100c2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80100be:	2303      	movs	r3, #3
 80100c0:	e045      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80100c2:	4b25      	ldr	r3, [pc, #148]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	2380      	movs	r3, #128	@ 0x80
 80100c8:	049b      	lsls	r3, r3, #18
 80100ca:	4013      	ands	r3, r2
 80100cc:	d0f0      	beq.n	80100b0 <HAL_RCC_OscConfig+0x6f4>
 80100ce:	e03d      	b.n	801014c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80100d0:	4b21      	ldr	r3, [pc, #132]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	4b20      	ldr	r3, [pc, #128]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 80100d6:	4922      	ldr	r1, [pc, #136]	@ (8010160 <HAL_RCC_OscConfig+0x7a4>)
 80100d8:	400a      	ands	r2, r1
 80100da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100dc:	f7f9 fef4 	bl	8009ec8 <HAL_GetTick>
 80100e0:	0003      	movs	r3, r0
 80100e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80100e4:	e008      	b.n	80100f8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80100e6:	f7f9 feef 	bl	8009ec8 <HAL_GetTick>
 80100ea:	0002      	movs	r2, r0
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	2b02      	cmp	r3, #2
 80100f2:	d901      	bls.n	80100f8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80100f4:	2303      	movs	r3, #3
 80100f6:	e02a      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80100f8:	4b17      	ldr	r3, [pc, #92]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	2380      	movs	r3, #128	@ 0x80
 80100fe:	049b      	lsls	r3, r3, #18
 8010100:	4013      	ands	r3, r2
 8010102:	d1f0      	bne.n	80100e6 <HAL_RCC_OscConfig+0x72a>
 8010104:	e022      	b.n	801014c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801010a:	2b01      	cmp	r3, #1
 801010c:	d101      	bne.n	8010112 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801010e:	2301      	movs	r3, #1
 8010110:	e01d      	b.n	801014e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8010112:	4b11      	ldr	r3, [pc, #68]	@ (8010158 <HAL_RCC_OscConfig+0x79c>)
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010118:	69ba      	ldr	r2, [r7, #24]
 801011a:	2380      	movs	r3, #128	@ 0x80
 801011c:	025b      	lsls	r3, r3, #9
 801011e:	401a      	ands	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010124:	429a      	cmp	r2, r3
 8010126:	d10f      	bne.n	8010148 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8010128:	69ba      	ldr	r2, [r7, #24]
 801012a:	23f0      	movs	r3, #240	@ 0xf0
 801012c:	039b      	lsls	r3, r3, #14
 801012e:	401a      	ands	r2, r3
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010134:	429a      	cmp	r2, r3
 8010136:	d107      	bne.n	8010148 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8010138:	69ba      	ldr	r2, [r7, #24]
 801013a:	23c0      	movs	r3, #192	@ 0xc0
 801013c:	041b      	lsls	r3, r3, #16
 801013e:	401a      	ands	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8010144:	429a      	cmp	r2, r3
 8010146:	d001      	beq.n	801014c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8010148:	2301      	movs	r3, #1
 801014a:	e000      	b.n	801014e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	0018      	movs	r0, r3
 8010150:	46bd      	mov	sp, r7
 8010152:	b00a      	add	sp, #40	@ 0x28
 8010154:	bdb0      	pop	{r4, r5, r7, pc}
 8010156:	46c0      	nop			@ (mov r8, r8)
 8010158:	40021000 	.word	0x40021000
 801015c:	ff02ffff 	.word	0xff02ffff
 8010160:	feffffff 	.word	0xfeffffff

08010164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010164:	b5b0      	push	{r4, r5, r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d101      	bne.n	8010178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010174:	2301      	movs	r3, #1
 8010176:	e128      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010178:	4b96      	ldr	r3, [pc, #600]	@ (80103d4 <HAL_RCC_ClockConfig+0x270>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	2201      	movs	r2, #1
 801017e:	4013      	ands	r3, r2
 8010180:	683a      	ldr	r2, [r7, #0]
 8010182:	429a      	cmp	r2, r3
 8010184:	d91e      	bls.n	80101c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010186:	4b93      	ldr	r3, [pc, #588]	@ (80103d4 <HAL_RCC_ClockConfig+0x270>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2201      	movs	r2, #1
 801018c:	4393      	bics	r3, r2
 801018e:	0019      	movs	r1, r3
 8010190:	4b90      	ldr	r3, [pc, #576]	@ (80103d4 <HAL_RCC_ClockConfig+0x270>)
 8010192:	683a      	ldr	r2, [r7, #0]
 8010194:	430a      	orrs	r2, r1
 8010196:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8010198:	f7f9 fe96 	bl	8009ec8 <HAL_GetTick>
 801019c:	0003      	movs	r3, r0
 801019e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80101a0:	e009      	b.n	80101b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101a2:	f7f9 fe91 	bl	8009ec8 <HAL_GetTick>
 80101a6:	0002      	movs	r2, r0
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	1ad3      	subs	r3, r2, r3
 80101ac:	4a8a      	ldr	r2, [pc, #552]	@ (80103d8 <HAL_RCC_ClockConfig+0x274>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d901      	bls.n	80101b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80101b2:	2303      	movs	r3, #3
 80101b4:	e109      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80101b6:	4b87      	ldr	r3, [pc, #540]	@ (80103d4 <HAL_RCC_ClockConfig+0x270>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2201      	movs	r2, #1
 80101bc:	4013      	ands	r3, r2
 80101be:	683a      	ldr	r2, [r7, #0]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d1ee      	bne.n	80101a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2202      	movs	r2, #2
 80101ca:	4013      	ands	r3, r2
 80101cc:	d009      	beq.n	80101e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101ce:	4b83      	ldr	r3, [pc, #524]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	22f0      	movs	r2, #240	@ 0xf0
 80101d4:	4393      	bics	r3, r2
 80101d6:	0019      	movs	r1, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	689a      	ldr	r2, [r3, #8]
 80101dc:	4b7f      	ldr	r3, [pc, #508]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 80101de:	430a      	orrs	r2, r1
 80101e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	2201      	movs	r2, #1
 80101e8:	4013      	ands	r3, r2
 80101ea:	d100      	bne.n	80101ee <HAL_RCC_ClockConfig+0x8a>
 80101ec:	e089      	b.n	8010302 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	2b02      	cmp	r3, #2
 80101f4:	d107      	bne.n	8010206 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80101f6:	4b79      	ldr	r3, [pc, #484]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	2380      	movs	r3, #128	@ 0x80
 80101fc:	029b      	lsls	r3, r3, #10
 80101fe:	4013      	ands	r3, r2
 8010200:	d120      	bne.n	8010244 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010202:	2301      	movs	r3, #1
 8010204:	e0e1      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	2b03      	cmp	r3, #3
 801020c:	d107      	bne.n	801021e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801020e:	4b73      	ldr	r3, [pc, #460]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	2380      	movs	r3, #128	@ 0x80
 8010214:	049b      	lsls	r3, r3, #18
 8010216:	4013      	ands	r3, r2
 8010218:	d114      	bne.n	8010244 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801021a:	2301      	movs	r3, #1
 801021c:	e0d5      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	2b01      	cmp	r3, #1
 8010224:	d106      	bne.n	8010234 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010226:	4b6d      	ldr	r3, [pc, #436]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2204      	movs	r2, #4
 801022c:	4013      	ands	r3, r2
 801022e:	d109      	bne.n	8010244 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010230:	2301      	movs	r3, #1
 8010232:	e0ca      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010234:	4b69      	ldr	r3, [pc, #420]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	2380      	movs	r3, #128	@ 0x80
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	4013      	ands	r3, r2
 801023e:	d101      	bne.n	8010244 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010240:	2301      	movs	r3, #1
 8010242:	e0c2      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010244:	4b65      	ldr	r3, [pc, #404]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	2203      	movs	r2, #3
 801024a:	4393      	bics	r3, r2
 801024c:	0019      	movs	r1, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	685a      	ldr	r2, [r3, #4]
 8010252:	4b62      	ldr	r3, [pc, #392]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010254:	430a      	orrs	r2, r1
 8010256:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010258:	f7f9 fe36 	bl	8009ec8 <HAL_GetTick>
 801025c:	0003      	movs	r3, r0
 801025e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	2b02      	cmp	r3, #2
 8010266:	d111      	bne.n	801028c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010268:	e009      	b.n	801027e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801026a:	f7f9 fe2d 	bl	8009ec8 <HAL_GetTick>
 801026e:	0002      	movs	r2, r0
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	1ad3      	subs	r3, r2, r3
 8010274:	4a58      	ldr	r2, [pc, #352]	@ (80103d8 <HAL_RCC_ClockConfig+0x274>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d901      	bls.n	801027e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801027a:	2303      	movs	r3, #3
 801027c:	e0a5      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801027e:	4b57      	ldr	r3, [pc, #348]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	220c      	movs	r2, #12
 8010284:	4013      	ands	r3, r2
 8010286:	2b08      	cmp	r3, #8
 8010288:	d1ef      	bne.n	801026a <HAL_RCC_ClockConfig+0x106>
 801028a:	e03a      	b.n	8010302 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	2b03      	cmp	r3, #3
 8010292:	d111      	bne.n	80102b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010294:	e009      	b.n	80102aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010296:	f7f9 fe17 	bl	8009ec8 <HAL_GetTick>
 801029a:	0002      	movs	r2, r0
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	4a4d      	ldr	r2, [pc, #308]	@ (80103d8 <HAL_RCC_ClockConfig+0x274>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d901      	bls.n	80102aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80102a6:	2303      	movs	r3, #3
 80102a8:	e08f      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80102aa:	4b4c      	ldr	r3, [pc, #304]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	220c      	movs	r2, #12
 80102b0:	4013      	ands	r3, r2
 80102b2:	2b0c      	cmp	r3, #12
 80102b4:	d1ef      	bne.n	8010296 <HAL_RCC_ClockConfig+0x132>
 80102b6:	e024      	b.n	8010302 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d11b      	bne.n	80102f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80102c0:	e009      	b.n	80102d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102c2:	f7f9 fe01 	bl	8009ec8 <HAL_GetTick>
 80102c6:	0002      	movs	r2, r0
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	1ad3      	subs	r3, r2, r3
 80102cc:	4a42      	ldr	r2, [pc, #264]	@ (80103d8 <HAL_RCC_ClockConfig+0x274>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d901      	bls.n	80102d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80102d2:	2303      	movs	r3, #3
 80102d4:	e079      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80102d6:	4b41      	ldr	r3, [pc, #260]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	220c      	movs	r2, #12
 80102dc:	4013      	ands	r3, r2
 80102de:	2b04      	cmp	r3, #4
 80102e0:	d1ef      	bne.n	80102c2 <HAL_RCC_ClockConfig+0x15e>
 80102e2:	e00e      	b.n	8010302 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102e4:	f7f9 fdf0 	bl	8009ec8 <HAL_GetTick>
 80102e8:	0002      	movs	r2, r0
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	1ad3      	subs	r3, r2, r3
 80102ee:	4a3a      	ldr	r2, [pc, #232]	@ (80103d8 <HAL_RCC_ClockConfig+0x274>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d901      	bls.n	80102f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80102f4:	2303      	movs	r3, #3
 80102f6:	e068      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80102f8:	4b38      	ldr	r3, [pc, #224]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	220c      	movs	r2, #12
 80102fe:	4013      	ands	r3, r2
 8010300:	d1f0      	bne.n	80102e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010302:	4b34      	ldr	r3, [pc, #208]	@ (80103d4 <HAL_RCC_ClockConfig+0x270>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2201      	movs	r2, #1
 8010308:	4013      	ands	r3, r2
 801030a:	683a      	ldr	r2, [r7, #0]
 801030c:	429a      	cmp	r2, r3
 801030e:	d21e      	bcs.n	801034e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010310:	4b30      	ldr	r3, [pc, #192]	@ (80103d4 <HAL_RCC_ClockConfig+0x270>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2201      	movs	r2, #1
 8010316:	4393      	bics	r3, r2
 8010318:	0019      	movs	r1, r3
 801031a:	4b2e      	ldr	r3, [pc, #184]	@ (80103d4 <HAL_RCC_ClockConfig+0x270>)
 801031c:	683a      	ldr	r2, [r7, #0]
 801031e:	430a      	orrs	r2, r1
 8010320:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8010322:	f7f9 fdd1 	bl	8009ec8 <HAL_GetTick>
 8010326:	0003      	movs	r3, r0
 8010328:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801032a:	e009      	b.n	8010340 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801032c:	f7f9 fdcc 	bl	8009ec8 <HAL_GetTick>
 8010330:	0002      	movs	r2, r0
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	1ad3      	subs	r3, r2, r3
 8010336:	4a28      	ldr	r2, [pc, #160]	@ (80103d8 <HAL_RCC_ClockConfig+0x274>)
 8010338:	4293      	cmp	r3, r2
 801033a:	d901      	bls.n	8010340 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801033c:	2303      	movs	r3, #3
 801033e:	e044      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010340:	4b24      	ldr	r3, [pc, #144]	@ (80103d4 <HAL_RCC_ClockConfig+0x270>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2201      	movs	r2, #1
 8010346:	4013      	ands	r3, r2
 8010348:	683a      	ldr	r2, [r7, #0]
 801034a:	429a      	cmp	r2, r3
 801034c:	d1ee      	bne.n	801032c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2204      	movs	r2, #4
 8010354:	4013      	ands	r3, r2
 8010356:	d009      	beq.n	801036c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010358:	4b20      	ldr	r3, [pc, #128]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	4a20      	ldr	r2, [pc, #128]	@ (80103e0 <HAL_RCC_ClockConfig+0x27c>)
 801035e:	4013      	ands	r3, r2
 8010360:	0019      	movs	r1, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	68da      	ldr	r2, [r3, #12]
 8010366:	4b1d      	ldr	r3, [pc, #116]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010368:	430a      	orrs	r2, r1
 801036a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	2208      	movs	r2, #8
 8010372:	4013      	ands	r3, r2
 8010374:	d00a      	beq.n	801038c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8010376:	4b19      	ldr	r3, [pc, #100]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	4a1a      	ldr	r2, [pc, #104]	@ (80103e4 <HAL_RCC_ClockConfig+0x280>)
 801037c:	4013      	ands	r3, r2
 801037e:	0019      	movs	r1, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	691b      	ldr	r3, [r3, #16]
 8010384:	00da      	lsls	r2, r3, #3
 8010386:	4b15      	ldr	r3, [pc, #84]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010388:	430a      	orrs	r2, r1
 801038a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801038c:	f000 f832 	bl	80103f4 <HAL_RCC_GetSysClockFreq>
 8010390:	0001      	movs	r1, r0
 8010392:	4b12      	ldr	r3, [pc, #72]	@ (80103dc <HAL_RCC_ClockConfig+0x278>)
 8010394:	68db      	ldr	r3, [r3, #12]
 8010396:	091b      	lsrs	r3, r3, #4
 8010398:	220f      	movs	r2, #15
 801039a:	4013      	ands	r3, r2
 801039c:	4a12      	ldr	r2, [pc, #72]	@ (80103e8 <HAL_RCC_ClockConfig+0x284>)
 801039e:	5cd3      	ldrb	r3, [r2, r3]
 80103a0:	000a      	movs	r2, r1
 80103a2:	40da      	lsrs	r2, r3
 80103a4:	4b11      	ldr	r3, [pc, #68]	@ (80103ec <HAL_RCC_ClockConfig+0x288>)
 80103a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80103a8:	4b11      	ldr	r3, [pc, #68]	@ (80103f0 <HAL_RCC_ClockConfig+0x28c>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	250b      	movs	r5, #11
 80103ae:	197c      	adds	r4, r7, r5
 80103b0:	0018      	movs	r0, r3
 80103b2:	f7f9 fd43 	bl	8009e3c <HAL_InitTick>
 80103b6:	0003      	movs	r3, r0
 80103b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80103ba:	197b      	adds	r3, r7, r5
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d002      	beq.n	80103c8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80103c2:	197b      	adds	r3, r7, r5
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	e000      	b.n	80103ca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	0018      	movs	r0, r3
 80103cc:	46bd      	mov	sp, r7
 80103ce:	b004      	add	sp, #16
 80103d0:	bdb0      	pop	{r4, r5, r7, pc}
 80103d2:	46c0      	nop			@ (mov r8, r8)
 80103d4:	40022000 	.word	0x40022000
 80103d8:	00001388 	.word	0x00001388
 80103dc:	40021000 	.word	0x40021000
 80103e0:	fffff8ff 	.word	0xfffff8ff
 80103e4:	ffffc7ff 	.word	0xffffc7ff
 80103e8:	0801bb50 	.word	0x0801bb50
 80103ec:	20000058 	.word	0x20000058
 80103f0:	2000006c 	.word	0x2000006c

080103f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80103f4:	b5b0      	push	{r4, r5, r7, lr}
 80103f6:	b08e      	sub	sp, #56	@ 0x38
 80103f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80103fa:	4b4c      	ldr	r3, [pc, #304]	@ (801052c <HAL_RCC_GetSysClockFreq+0x138>)
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010402:	230c      	movs	r3, #12
 8010404:	4013      	ands	r3, r2
 8010406:	2b0c      	cmp	r3, #12
 8010408:	d014      	beq.n	8010434 <HAL_RCC_GetSysClockFreq+0x40>
 801040a:	d900      	bls.n	801040e <HAL_RCC_GetSysClockFreq+0x1a>
 801040c:	e07b      	b.n	8010506 <HAL_RCC_GetSysClockFreq+0x112>
 801040e:	2b04      	cmp	r3, #4
 8010410:	d002      	beq.n	8010418 <HAL_RCC_GetSysClockFreq+0x24>
 8010412:	2b08      	cmp	r3, #8
 8010414:	d00b      	beq.n	801042e <HAL_RCC_GetSysClockFreq+0x3a>
 8010416:	e076      	b.n	8010506 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010418:	4b44      	ldr	r3, [pc, #272]	@ (801052c <HAL_RCC_GetSysClockFreq+0x138>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2210      	movs	r2, #16
 801041e:	4013      	ands	r3, r2
 8010420:	d002      	beq.n	8010428 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8010422:	4b43      	ldr	r3, [pc, #268]	@ (8010530 <HAL_RCC_GetSysClockFreq+0x13c>)
 8010424:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8010426:	e07c      	b.n	8010522 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8010428:	4b42      	ldr	r3, [pc, #264]	@ (8010534 <HAL_RCC_GetSysClockFreq+0x140>)
 801042a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801042c:	e079      	b.n	8010522 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801042e:	4b42      	ldr	r3, [pc, #264]	@ (8010538 <HAL_RCC_GetSysClockFreq+0x144>)
 8010430:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010432:	e076      	b.n	8010522 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8010434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010436:	0c9a      	lsrs	r2, r3, #18
 8010438:	230f      	movs	r3, #15
 801043a:	401a      	ands	r2, r3
 801043c:	4b3f      	ldr	r3, [pc, #252]	@ (801053c <HAL_RCC_GetSysClockFreq+0x148>)
 801043e:	5c9b      	ldrb	r3, [r3, r2]
 8010440:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8010442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010444:	0d9a      	lsrs	r2, r3, #22
 8010446:	2303      	movs	r3, #3
 8010448:	4013      	ands	r3, r2
 801044a:	3301      	adds	r3, #1
 801044c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801044e:	4b37      	ldr	r3, [pc, #220]	@ (801052c <HAL_RCC_GetSysClockFreq+0x138>)
 8010450:	68da      	ldr	r2, [r3, #12]
 8010452:	2380      	movs	r3, #128	@ 0x80
 8010454:	025b      	lsls	r3, r3, #9
 8010456:	4013      	ands	r3, r2
 8010458:	d01a      	beq.n	8010490 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801045a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801045c:	61bb      	str	r3, [r7, #24]
 801045e:	2300      	movs	r3, #0
 8010460:	61fb      	str	r3, [r7, #28]
 8010462:	4a35      	ldr	r2, [pc, #212]	@ (8010538 <HAL_RCC_GetSysClockFreq+0x144>)
 8010464:	2300      	movs	r3, #0
 8010466:	69b8      	ldr	r0, [r7, #24]
 8010468:	69f9      	ldr	r1, [r7, #28]
 801046a:	f7f0 f877 	bl	800055c <__aeabi_lmul>
 801046e:	0002      	movs	r2, r0
 8010470:	000b      	movs	r3, r1
 8010472:	0010      	movs	r0, r2
 8010474:	0019      	movs	r1, r3
 8010476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010478:	613b      	str	r3, [r7, #16]
 801047a:	2300      	movs	r3, #0
 801047c:	617b      	str	r3, [r7, #20]
 801047e:	693a      	ldr	r2, [r7, #16]
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	f7f0 f84b 	bl	800051c <__aeabi_uldivmod>
 8010486:	0002      	movs	r2, r0
 8010488:	000b      	movs	r3, r1
 801048a:	0013      	movs	r3, r2
 801048c:	637b      	str	r3, [r7, #52]	@ 0x34
 801048e:	e037      	b.n	8010500 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010490:	4b26      	ldr	r3, [pc, #152]	@ (801052c <HAL_RCC_GetSysClockFreq+0x138>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2210      	movs	r2, #16
 8010496:	4013      	ands	r3, r2
 8010498:	d01a      	beq.n	80104d0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801049a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801049c:	60bb      	str	r3, [r7, #8]
 801049e:	2300      	movs	r3, #0
 80104a0:	60fb      	str	r3, [r7, #12]
 80104a2:	4a23      	ldr	r2, [pc, #140]	@ (8010530 <HAL_RCC_GetSysClockFreq+0x13c>)
 80104a4:	2300      	movs	r3, #0
 80104a6:	68b8      	ldr	r0, [r7, #8]
 80104a8:	68f9      	ldr	r1, [r7, #12]
 80104aa:	f7f0 f857 	bl	800055c <__aeabi_lmul>
 80104ae:	0002      	movs	r2, r0
 80104b0:	000b      	movs	r3, r1
 80104b2:	0010      	movs	r0, r2
 80104b4:	0019      	movs	r1, r3
 80104b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104b8:	603b      	str	r3, [r7, #0]
 80104ba:	2300      	movs	r3, #0
 80104bc:	607b      	str	r3, [r7, #4]
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f7f0 f82b 	bl	800051c <__aeabi_uldivmod>
 80104c6:	0002      	movs	r2, r0
 80104c8:	000b      	movs	r3, r1
 80104ca:	0013      	movs	r3, r2
 80104cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80104ce:	e017      	b.n	8010500 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80104d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104d2:	0018      	movs	r0, r3
 80104d4:	2300      	movs	r3, #0
 80104d6:	0019      	movs	r1, r3
 80104d8:	4a16      	ldr	r2, [pc, #88]	@ (8010534 <HAL_RCC_GetSysClockFreq+0x140>)
 80104da:	2300      	movs	r3, #0
 80104dc:	f7f0 f83e 	bl	800055c <__aeabi_lmul>
 80104e0:	0002      	movs	r2, r0
 80104e2:	000b      	movs	r3, r1
 80104e4:	0010      	movs	r0, r2
 80104e6:	0019      	movs	r1, r3
 80104e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ea:	001c      	movs	r4, r3
 80104ec:	2300      	movs	r3, #0
 80104ee:	001d      	movs	r5, r3
 80104f0:	0022      	movs	r2, r4
 80104f2:	002b      	movs	r3, r5
 80104f4:	f7f0 f812 	bl	800051c <__aeabi_uldivmod>
 80104f8:	0002      	movs	r2, r0
 80104fa:	000b      	movs	r3, r1
 80104fc:	0013      	movs	r3, r2
 80104fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8010500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010502:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010504:	e00d      	b.n	8010522 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8010506:	4b09      	ldr	r3, [pc, #36]	@ (801052c <HAL_RCC_GetSysClockFreq+0x138>)
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	0b5b      	lsrs	r3, r3, #13
 801050c:	2207      	movs	r2, #7
 801050e:	4013      	ands	r3, r2
 8010510:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8010512:	6a3b      	ldr	r3, [r7, #32]
 8010514:	3301      	adds	r3, #1
 8010516:	2280      	movs	r2, #128	@ 0x80
 8010518:	0212      	lsls	r2, r2, #8
 801051a:	409a      	lsls	r2, r3
 801051c:	0013      	movs	r3, r2
 801051e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010520:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8010522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8010524:	0018      	movs	r0, r3
 8010526:	46bd      	mov	sp, r7
 8010528:	b00e      	add	sp, #56	@ 0x38
 801052a:	bdb0      	pop	{r4, r5, r7, pc}
 801052c:	40021000 	.word	0x40021000
 8010530:	003d0900 	.word	0x003d0900
 8010534:	00f42400 	.word	0x00f42400
 8010538:	007a1200 	.word	0x007a1200
 801053c:	0801bb68 	.word	0x0801bb68

08010540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010544:	4b02      	ldr	r3, [pc, #8]	@ (8010550 <HAL_RCC_GetHCLKFreq+0x10>)
 8010546:	681b      	ldr	r3, [r3, #0]
}
 8010548:	0018      	movs	r0, r3
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	46c0      	nop			@ (mov r8, r8)
 8010550:	20000058 	.word	0x20000058

08010554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010558:	f7ff fff2 	bl	8010540 <HAL_RCC_GetHCLKFreq>
 801055c:	0001      	movs	r1, r0
 801055e:	4b06      	ldr	r3, [pc, #24]	@ (8010578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	0a1b      	lsrs	r3, r3, #8
 8010564:	2207      	movs	r2, #7
 8010566:	4013      	ands	r3, r2
 8010568:	4a04      	ldr	r2, [pc, #16]	@ (801057c <HAL_RCC_GetPCLK1Freq+0x28>)
 801056a:	5cd3      	ldrb	r3, [r2, r3]
 801056c:	40d9      	lsrs	r1, r3
 801056e:	000b      	movs	r3, r1
}
 8010570:	0018      	movs	r0, r3
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	46c0      	nop			@ (mov r8, r8)
 8010578:	40021000 	.word	0x40021000
 801057c:	0801bb60 	.word	0x0801bb60

08010580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010584:	f7ff ffdc 	bl	8010540 <HAL_RCC_GetHCLKFreq>
 8010588:	0001      	movs	r1, r0
 801058a:	4b06      	ldr	r3, [pc, #24]	@ (80105a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	0adb      	lsrs	r3, r3, #11
 8010590:	2207      	movs	r2, #7
 8010592:	4013      	ands	r3, r2
 8010594:	4a04      	ldr	r2, [pc, #16]	@ (80105a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010596:	5cd3      	ldrb	r3, [r2, r3]
 8010598:	40d9      	lsrs	r1, r3
 801059a:	000b      	movs	r3, r1
}
 801059c:	0018      	movs	r0, r3
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	46c0      	nop			@ (mov r8, r8)
 80105a4:	40021000 	.word	0x40021000
 80105a8:	0801bb60 	.word	0x0801bb60

080105ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b086      	sub	sp, #24
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80105b4:	2017      	movs	r0, #23
 80105b6:	183b      	adds	r3, r7, r0
 80105b8:	2200      	movs	r2, #0
 80105ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2220      	movs	r2, #32
 80105c2:	4013      	ands	r3, r2
 80105c4:	d100      	bne.n	80105c8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80105c6:	e0c7      	b.n	8010758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80105c8:	4b9b      	ldr	r3, [pc, #620]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105cc:	2380      	movs	r3, #128	@ 0x80
 80105ce:	055b      	lsls	r3, r3, #21
 80105d0:	4013      	ands	r3, r2
 80105d2:	d109      	bne.n	80105e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80105d4:	4b98      	ldr	r3, [pc, #608]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105d8:	4b97      	ldr	r3, [pc, #604]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105da:	2180      	movs	r1, #128	@ 0x80
 80105dc:	0549      	lsls	r1, r1, #21
 80105de:	430a      	orrs	r2, r1
 80105e0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80105e2:	183b      	adds	r3, r7, r0
 80105e4:	2201      	movs	r2, #1
 80105e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80105e8:	4b94      	ldr	r3, [pc, #592]	@ (801083c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	2380      	movs	r3, #128	@ 0x80
 80105ee:	005b      	lsls	r3, r3, #1
 80105f0:	4013      	ands	r3, r2
 80105f2:	d11a      	bne.n	801062a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80105f4:	4b91      	ldr	r3, [pc, #580]	@ (801083c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	4b90      	ldr	r3, [pc, #576]	@ (801083c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80105fa:	2180      	movs	r1, #128	@ 0x80
 80105fc:	0049      	lsls	r1, r1, #1
 80105fe:	430a      	orrs	r2, r1
 8010600:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010602:	f7f9 fc61 	bl	8009ec8 <HAL_GetTick>
 8010606:	0003      	movs	r3, r0
 8010608:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801060a:	e008      	b.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801060c:	f7f9 fc5c 	bl	8009ec8 <HAL_GetTick>
 8010610:	0002      	movs	r2, r0
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	1ad3      	subs	r3, r2, r3
 8010616:	2b64      	cmp	r3, #100	@ 0x64
 8010618:	d901      	bls.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801061a:	2303      	movs	r3, #3
 801061c:	e107      	b.n	801082e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801061e:	4b87      	ldr	r3, [pc, #540]	@ (801083c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	2380      	movs	r3, #128	@ 0x80
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	4013      	ands	r3, r2
 8010628:	d0f0      	beq.n	801060c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801062a:	4b83      	ldr	r3, [pc, #524]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	23c0      	movs	r3, #192	@ 0xc0
 8010630:	039b      	lsls	r3, r3, #14
 8010632:	4013      	ands	r3, r2
 8010634:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	685a      	ldr	r2, [r3, #4]
 801063a:	23c0      	movs	r3, #192	@ 0xc0
 801063c:	039b      	lsls	r3, r3, #14
 801063e:	4013      	ands	r3, r2
 8010640:	68fa      	ldr	r2, [r7, #12]
 8010642:	429a      	cmp	r2, r3
 8010644:	d013      	beq.n	801066e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	685a      	ldr	r2, [r3, #4]
 801064a:	23c0      	movs	r3, #192	@ 0xc0
 801064c:	029b      	lsls	r3, r3, #10
 801064e:	401a      	ands	r2, r3
 8010650:	23c0      	movs	r3, #192	@ 0xc0
 8010652:	029b      	lsls	r3, r3, #10
 8010654:	429a      	cmp	r2, r3
 8010656:	d10a      	bne.n	801066e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010658:	4b77      	ldr	r3, [pc, #476]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	2380      	movs	r3, #128	@ 0x80
 801065e:	029b      	lsls	r3, r3, #10
 8010660:	401a      	ands	r2, r3
 8010662:	2380      	movs	r3, #128	@ 0x80
 8010664:	029b      	lsls	r3, r3, #10
 8010666:	429a      	cmp	r2, r3
 8010668:	d101      	bne.n	801066e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801066a:	2301      	movs	r3, #1
 801066c:	e0df      	b.n	801082e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801066e:	4b72      	ldr	r3, [pc, #456]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010670:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010672:	23c0      	movs	r3, #192	@ 0xc0
 8010674:	029b      	lsls	r3, r3, #10
 8010676:	4013      	ands	r3, r2
 8010678:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d03b      	beq.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	685a      	ldr	r2, [r3, #4]
 8010684:	23c0      	movs	r3, #192	@ 0xc0
 8010686:	029b      	lsls	r3, r3, #10
 8010688:	4013      	ands	r3, r2
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	429a      	cmp	r2, r3
 801068e:	d033      	beq.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2220      	movs	r2, #32
 8010696:	4013      	ands	r3, r2
 8010698:	d02e      	beq.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801069a:	4b67      	ldr	r3, [pc, #412]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801069c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801069e:	4a68      	ldr	r2, [pc, #416]	@ (8010840 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80106a0:	4013      	ands	r3, r2
 80106a2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80106a4:	4b64      	ldr	r3, [pc, #400]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106a8:	4b63      	ldr	r3, [pc, #396]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106aa:	2180      	movs	r1, #128	@ 0x80
 80106ac:	0309      	lsls	r1, r1, #12
 80106ae:	430a      	orrs	r2, r1
 80106b0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80106b2:	4b61      	ldr	r3, [pc, #388]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106b6:	4b60      	ldr	r3, [pc, #384]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106b8:	4962      	ldr	r1, [pc, #392]	@ (8010844 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80106ba:	400a      	ands	r2, r1
 80106bc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80106be:	4b5e      	ldr	r3, [pc, #376]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	2380      	movs	r3, #128	@ 0x80
 80106c8:	005b      	lsls	r3, r3, #1
 80106ca:	4013      	ands	r3, r2
 80106cc:	d014      	beq.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106ce:	f7f9 fbfb 	bl	8009ec8 <HAL_GetTick>
 80106d2:	0003      	movs	r3, r0
 80106d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80106d6:	e009      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80106d8:	f7f9 fbf6 	bl	8009ec8 <HAL_GetTick>
 80106dc:	0002      	movs	r2, r0
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	4a59      	ldr	r2, [pc, #356]	@ (8010848 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d901      	bls.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80106e8:	2303      	movs	r3, #3
 80106ea:	e0a0      	b.n	801082e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80106ec:	4b52      	ldr	r3, [pc, #328]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106f0:	2380      	movs	r3, #128	@ 0x80
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	4013      	ands	r3, r2
 80106f6:	d0ef      	beq.n	80106d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2220      	movs	r2, #32
 80106fe:	4013      	ands	r3, r2
 8010700:	d01f      	beq.n	8010742 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	685a      	ldr	r2, [r3, #4]
 8010706:	23c0      	movs	r3, #192	@ 0xc0
 8010708:	029b      	lsls	r3, r3, #10
 801070a:	401a      	ands	r2, r3
 801070c:	23c0      	movs	r3, #192	@ 0xc0
 801070e:	029b      	lsls	r3, r3, #10
 8010710:	429a      	cmp	r2, r3
 8010712:	d10c      	bne.n	801072e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8010714:	4b48      	ldr	r3, [pc, #288]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a4c      	ldr	r2, [pc, #304]	@ (801084c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801071a:	4013      	ands	r3, r2
 801071c:	0019      	movs	r1, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	685a      	ldr	r2, [r3, #4]
 8010722:	23c0      	movs	r3, #192	@ 0xc0
 8010724:	039b      	lsls	r3, r3, #14
 8010726:	401a      	ands	r2, r3
 8010728:	4b43      	ldr	r3, [pc, #268]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801072a:	430a      	orrs	r2, r1
 801072c:	601a      	str	r2, [r3, #0]
 801072e:	4b42      	ldr	r3, [pc, #264]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010730:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	685a      	ldr	r2, [r3, #4]
 8010736:	23c0      	movs	r3, #192	@ 0xc0
 8010738:	029b      	lsls	r3, r3, #10
 801073a:	401a      	ands	r2, r3
 801073c:	4b3e      	ldr	r3, [pc, #248]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801073e:	430a      	orrs	r2, r1
 8010740:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8010742:	2317      	movs	r3, #23
 8010744:	18fb      	adds	r3, r7, r3
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	2b01      	cmp	r3, #1
 801074a:	d105      	bne.n	8010758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801074c:	4b3a      	ldr	r3, [pc, #232]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801074e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010750:	4b39      	ldr	r3, [pc, #228]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010752:	493f      	ldr	r1, [pc, #252]	@ (8010850 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8010754:	400a      	ands	r2, r1
 8010756:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2201      	movs	r2, #1
 801075e:	4013      	ands	r3, r2
 8010760:	d009      	beq.n	8010776 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010762:	4b35      	ldr	r3, [pc, #212]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010766:	2203      	movs	r2, #3
 8010768:	4393      	bics	r3, r2
 801076a:	0019      	movs	r1, r3
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	689a      	ldr	r2, [r3, #8]
 8010770:	4b31      	ldr	r3, [pc, #196]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010772:	430a      	orrs	r2, r1
 8010774:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2202      	movs	r2, #2
 801077c:	4013      	ands	r3, r2
 801077e:	d009      	beq.n	8010794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010780:	4b2d      	ldr	r3, [pc, #180]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010784:	220c      	movs	r2, #12
 8010786:	4393      	bics	r3, r2
 8010788:	0019      	movs	r1, r3
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	68da      	ldr	r2, [r3, #12]
 801078e:	4b2a      	ldr	r3, [pc, #168]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010790:	430a      	orrs	r2, r1
 8010792:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2204      	movs	r2, #4
 801079a:	4013      	ands	r3, r2
 801079c:	d009      	beq.n	80107b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801079e:	4b26      	ldr	r3, [pc, #152]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107a2:	4a2c      	ldr	r2, [pc, #176]	@ (8010854 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80107a4:	4013      	ands	r3, r2
 80107a6:	0019      	movs	r1, r3
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	691a      	ldr	r2, [r3, #16]
 80107ac:	4b22      	ldr	r3, [pc, #136]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107ae:	430a      	orrs	r2, r1
 80107b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	2208      	movs	r2, #8
 80107b8:	4013      	ands	r3, r2
 80107ba:	d009      	beq.n	80107d0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80107bc:	4b1e      	ldr	r3, [pc, #120]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107c0:	4a25      	ldr	r2, [pc, #148]	@ (8010858 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80107c2:	4013      	ands	r3, r2
 80107c4:	0019      	movs	r1, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	695a      	ldr	r2, [r3, #20]
 80107ca:	4b1b      	ldr	r3, [pc, #108]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107cc:	430a      	orrs	r2, r1
 80107ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	2380      	movs	r3, #128	@ 0x80
 80107d6:	005b      	lsls	r3, r3, #1
 80107d8:	4013      	ands	r3, r2
 80107da:	d009      	beq.n	80107f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80107dc:	4b16      	ldr	r3, [pc, #88]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107e0:	4a17      	ldr	r2, [pc, #92]	@ (8010840 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80107e2:	4013      	ands	r3, r2
 80107e4:	0019      	movs	r1, r3
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	699a      	ldr	r2, [r3, #24]
 80107ea:	4b13      	ldr	r3, [pc, #76]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107ec:	430a      	orrs	r2, r1
 80107ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2240      	movs	r2, #64	@ 0x40
 80107f6:	4013      	ands	r3, r2
 80107f8:	d009      	beq.n	801080e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80107fa:	4b0f      	ldr	r3, [pc, #60]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107fe:	4a17      	ldr	r2, [pc, #92]	@ (801085c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8010800:	4013      	ands	r3, r2
 8010802:	0019      	movs	r1, r3
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6a1a      	ldr	r2, [r3, #32]
 8010808:	4b0b      	ldr	r3, [pc, #44]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801080a:	430a      	orrs	r2, r1
 801080c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2280      	movs	r2, #128	@ 0x80
 8010814:	4013      	ands	r3, r2
 8010816:	d009      	beq.n	801082c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8010818:	4b07      	ldr	r3, [pc, #28]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801081a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801081c:	4a10      	ldr	r2, [pc, #64]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801081e:	4013      	ands	r3, r2
 8010820:	0019      	movs	r1, r3
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	69da      	ldr	r2, [r3, #28]
 8010826:	4b04      	ldr	r3, [pc, #16]	@ (8010838 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010828:	430a      	orrs	r2, r1
 801082a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801082c:	2300      	movs	r3, #0
}
 801082e:	0018      	movs	r0, r3
 8010830:	46bd      	mov	sp, r7
 8010832:	b006      	add	sp, #24
 8010834:	bd80      	pop	{r7, pc}
 8010836:	46c0      	nop			@ (mov r8, r8)
 8010838:	40021000 	.word	0x40021000
 801083c:	40007000 	.word	0x40007000
 8010840:	fffcffff 	.word	0xfffcffff
 8010844:	fff7ffff 	.word	0xfff7ffff
 8010848:	00001388 	.word	0x00001388
 801084c:	ffcfffff 	.word	0xffcfffff
 8010850:	efffffff 	.word	0xefffffff
 8010854:	fffff3ff 	.word	0xfffff3ff
 8010858:	ffffcfff 	.word	0xffffcfff
 801085c:	fbffffff 	.word	0xfbffffff
 8010860:	fff3ffff 	.word	0xfff3ffff

08010864 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010864:	b5b0      	push	{r4, r5, r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801086c:	230f      	movs	r3, #15
 801086e:	18fb      	adds	r3, r7, r3
 8010870:	2201      	movs	r2, #1
 8010872:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d101      	bne.n	801087e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801087a:	2301      	movs	r3, #1
 801087c:	e088      	b.n	8010990 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2221      	movs	r2, #33	@ 0x21
 8010882:	5c9b      	ldrb	r3, [r3, r2]
 8010884:	b2db      	uxtb	r3, r3
 8010886:	2b00      	cmp	r3, #0
 8010888:	d107      	bne.n	801089a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2220      	movs	r2, #32
 801088e:	2100      	movs	r1, #0
 8010890:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	0018      	movs	r0, r3
 8010896:	f7f6 fcc7 	bl	8007228 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2221      	movs	r2, #33	@ 0x21
 801089e:	2102      	movs	r1, #2
 80108a0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	2210      	movs	r2, #16
 80108aa:	4013      	ands	r3, r2
 80108ac:	2b10      	cmp	r3, #16
 80108ae:	d05f      	beq.n	8010970 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	22ca      	movs	r2, #202	@ 0xca
 80108b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2253      	movs	r2, #83	@ 0x53
 80108be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80108c0:	250f      	movs	r5, #15
 80108c2:	197c      	adds	r4, r7, r5
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	0018      	movs	r0, r3
 80108c8:	f000 f890 	bl	80109ec <RTC_EnterInitMode>
 80108cc:	0003      	movs	r3, r0
 80108ce:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80108d0:	0028      	movs	r0, r5
 80108d2:	183b      	adds	r3, r7, r0
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d12c      	bne.n	8010934 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	689a      	ldr	r2, [r3, #8]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	492c      	ldr	r1, [pc, #176]	@ (8010998 <HAL_RTC_Init+0x134>)
 80108e6:	400a      	ands	r2, r1
 80108e8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	6899      	ldr	r1, [r3, #8]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	685a      	ldr	r2, [r3, #4]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	691b      	ldr	r3, [r3, #16]
 80108f8:	431a      	orrs	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	699b      	ldr	r3, [r3, #24]
 80108fe:	431a      	orrs	r2, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	430a      	orrs	r2, r1
 8010906:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	68d2      	ldr	r2, [r2, #12]
 8010910:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	6919      	ldr	r1, [r3, #16]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	041a      	lsls	r2, r3, #16
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	430a      	orrs	r2, r1
 8010924:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010926:	183c      	adds	r4, r7, r0
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	0018      	movs	r0, r3
 801092c:	f000 f8a2 	bl	8010a74 <RTC_ExitInitMode>
 8010930:	0003      	movs	r3, r0
 8010932:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8010934:	230f      	movs	r3, #15
 8010936:	18fb      	adds	r3, r7, r3
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d113      	bne.n	8010966 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2103      	movs	r1, #3
 801094a:	438a      	bics	r2, r1
 801094c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	69da      	ldr	r2, [r3, #28]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	695b      	ldr	r3, [r3, #20]
 801095c:	431a      	orrs	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	430a      	orrs	r2, r1
 8010964:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	22ff      	movs	r2, #255	@ 0xff
 801096c:	625a      	str	r2, [r3, #36]	@ 0x24
 801096e:	e003      	b.n	8010978 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8010970:	230f      	movs	r3, #15
 8010972:	18fb      	adds	r3, r7, r3
 8010974:	2200      	movs	r2, #0
 8010976:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8010978:	230f      	movs	r3, #15
 801097a:	18fb      	adds	r3, r7, r3
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d103      	bne.n	801098a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2221      	movs	r2, #33	@ 0x21
 8010986:	2101      	movs	r1, #1
 8010988:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801098a:	230f      	movs	r3, #15
 801098c:	18fb      	adds	r3, r7, r3
 801098e:	781b      	ldrb	r3, [r3, #0]
}
 8010990:	0018      	movs	r0, r3
 8010992:	46bd      	mov	sp, r7
 8010994:	b004      	add	sp, #16
 8010996:	bdb0      	pop	{r4, r5, r7, pc}
 8010998:	ff8fffbf 	.word	0xff8fffbf

0801099c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80109a4:	2300      	movs	r3, #0
 80109a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4a0e      	ldr	r2, [pc, #56]	@ (80109e8 <HAL_RTC_WaitForSynchro+0x4c>)
 80109ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80109b0:	f7f9 fa8a 	bl	8009ec8 <HAL_GetTick>
 80109b4:	0003      	movs	r3, r0
 80109b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80109b8:	e00a      	b.n	80109d0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80109ba:	f7f9 fa85 	bl	8009ec8 <HAL_GetTick>
 80109be:	0002      	movs	r2, r0
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	1ad2      	subs	r2, r2, r3
 80109c4:	23fa      	movs	r3, #250	@ 0xfa
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d901      	bls.n	80109d0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80109cc:	2303      	movs	r3, #3
 80109ce:	e006      	b.n	80109de <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	68db      	ldr	r3, [r3, #12]
 80109d6:	2220      	movs	r2, #32
 80109d8:	4013      	ands	r3, r2
 80109da:	d0ee      	beq.n	80109ba <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	0018      	movs	r0, r3
 80109e0:	46bd      	mov	sp, r7
 80109e2:	b004      	add	sp, #16
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	46c0      	nop			@ (mov r8, r8)
 80109e8:	0001ff5f 	.word	0x0001ff5f

080109ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80109f4:	2300      	movs	r3, #0
 80109f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80109f8:	230f      	movs	r3, #15
 80109fa:	18fb      	adds	r3, r7, r3
 80109fc:	2200      	movs	r2, #0
 80109fe:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	2240      	movs	r2, #64	@ 0x40
 8010a08:	4013      	ands	r3, r2
 8010a0a:	d12c      	bne.n	8010a66 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	68da      	ldr	r2, [r3, #12]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2180      	movs	r1, #128	@ 0x80
 8010a18:	430a      	orrs	r2, r1
 8010a1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010a1c:	f7f9 fa54 	bl	8009ec8 <HAL_GetTick>
 8010a20:	0003      	movs	r3, r0
 8010a22:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010a24:	e014      	b.n	8010a50 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010a26:	f7f9 fa4f 	bl	8009ec8 <HAL_GetTick>
 8010a2a:	0002      	movs	r2, r0
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	1ad2      	subs	r2, r2, r3
 8010a30:	200f      	movs	r0, #15
 8010a32:	183b      	adds	r3, r7, r0
 8010a34:	1839      	adds	r1, r7, r0
 8010a36:	7809      	ldrb	r1, [r1, #0]
 8010a38:	7019      	strb	r1, [r3, #0]
 8010a3a:	23fa      	movs	r3, #250	@ 0xfa
 8010a3c:	009b      	lsls	r3, r3, #2
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d906      	bls.n	8010a50 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2221      	movs	r2, #33	@ 0x21
 8010a46:	2104      	movs	r1, #4
 8010a48:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8010a4a:	183b      	adds	r3, r7, r0
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	68db      	ldr	r3, [r3, #12]
 8010a56:	2240      	movs	r2, #64	@ 0x40
 8010a58:	4013      	ands	r3, r2
 8010a5a:	d104      	bne.n	8010a66 <RTC_EnterInitMode+0x7a>
 8010a5c:	230f      	movs	r3, #15
 8010a5e:	18fb      	adds	r3, r7, r3
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d1df      	bne.n	8010a26 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8010a66:	230f      	movs	r3, #15
 8010a68:	18fb      	adds	r3, r7, r3
 8010a6a:	781b      	ldrb	r3, [r3, #0]
}
 8010a6c:	0018      	movs	r0, r3
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	b004      	add	sp, #16
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010a74:	b590      	push	{r4, r7, lr}
 8010a76:	b085      	sub	sp, #20
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010a7c:	240f      	movs	r4, #15
 8010a7e:	193b      	adds	r3, r7, r4
 8010a80:	2200      	movs	r2, #0
 8010a82:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	68da      	ldr	r2, [r3, #12]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2180      	movs	r1, #128	@ 0x80
 8010a90:	438a      	bics	r2, r1
 8010a92:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	2220      	movs	r2, #32
 8010a9c:	4013      	ands	r3, r2
 8010a9e:	d10c      	bne.n	8010aba <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	0018      	movs	r0, r3
 8010aa4:	f7ff ff7a 	bl	801099c <HAL_RTC_WaitForSynchro>
 8010aa8:	1e03      	subs	r3, r0, #0
 8010aaa:	d006      	beq.n	8010aba <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2221      	movs	r2, #33	@ 0x21
 8010ab0:	2104      	movs	r1, #4
 8010ab2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8010ab4:	193b      	adds	r3, r7, r4
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8010aba:	230f      	movs	r3, #15
 8010abc:	18fb      	adds	r3, r7, r3
 8010abe:	781b      	ldrb	r3, [r3, #0]
}
 8010ac0:	0018      	movs	r0, r3
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	b005      	add	sp, #20
 8010ac6:	bd90      	pop	{r4, r7, pc}

08010ac8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b086      	sub	sp, #24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2220      	movs	r2, #32
 8010adc:	5c9b      	ldrb	r3, [r3, r2]
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d101      	bne.n	8010ae6 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8010ae2:	2302      	movs	r3, #2
 8010ae4:	e096      	b.n	8010c14 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2220      	movs	r2, #32
 8010aea:	2101      	movs	r1, #1
 8010aec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2221      	movs	r2, #33	@ 0x21
 8010af2:	2102      	movs	r1, #2
 8010af4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	22ca      	movs	r2, #202	@ 0xca
 8010afc:	625a      	str	r2, [r3, #36]	@ 0x24
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2253      	movs	r2, #83	@ 0x53
 8010b04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	689a      	ldr	r2, [r3, #8]
 8010b0c:	2380      	movs	r3, #128	@ 0x80
 8010b0e:	00db      	lsls	r3, r3, #3
 8010b10:	4013      	ands	r3, r2
 8010b12:	d021      	beq.n	8010b58 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8010b14:	f7f9 f9d8 	bl	8009ec8 <HAL_GetTick>
 8010b18:	0003      	movs	r3, r0
 8010b1a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8010b1c:	e016      	b.n	8010b4c <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010b1e:	f7f9 f9d3 	bl	8009ec8 <HAL_GetTick>
 8010b22:	0002      	movs	r2, r0
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	1ad2      	subs	r2, r2, r3
 8010b28:	23fa      	movs	r3, #250	@ 0xfa
 8010b2a:	009b      	lsls	r3, r3, #2
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d90d      	bls.n	8010b4c <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	22ff      	movs	r2, #255	@ 0xff
 8010b36:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2221      	movs	r2, #33	@ 0x21
 8010b3c:	2103      	movs	r1, #3
 8010b3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2220      	movs	r2, #32
 8010b44:	2100      	movs	r1, #0
 8010b46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8010b48:	2303      	movs	r3, #3
 8010b4a:	e063      	b.n	8010c14 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	2204      	movs	r2, #4
 8010b54:	4013      	ands	r3, r2
 8010b56:	d1e2      	bne.n	8010b1e <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	689a      	ldr	r2, [r3, #8]
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	492e      	ldr	r1, [pc, #184]	@ (8010c1c <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8010b64:	400a      	ands	r2, r1
 8010b66:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	68db      	ldr	r3, [r3, #12]
 8010b6e:	22ff      	movs	r2, #255	@ 0xff
 8010b70:	401a      	ands	r2, r3
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	492a      	ldr	r1, [pc, #168]	@ (8010c20 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8010b78:	430a      	orrs	r2, r1
 8010b7a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010b7c:	f7f9 f9a4 	bl	8009ec8 <HAL_GetTick>
 8010b80:	0003      	movs	r3, r0
 8010b82:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8010b84:	e016      	b.n	8010bb4 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010b86:	f7f9 f99f 	bl	8009ec8 <HAL_GetTick>
 8010b8a:	0002      	movs	r2, r0
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	1ad2      	subs	r2, r2, r3
 8010b90:	23fa      	movs	r3, #250	@ 0xfa
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d90d      	bls.n	8010bb4 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	22ff      	movs	r2, #255	@ 0xff
 8010b9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2221      	movs	r2, #33	@ 0x21
 8010ba4:	2103      	movs	r1, #3
 8010ba6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	2220      	movs	r2, #32
 8010bac:	2100      	movs	r1, #0
 8010bae:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8010bb0:	2303      	movs	r3, #3
 8010bb2:	e02f      	b.n	8010c14 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	2204      	movs	r2, #4
 8010bbc:	4013      	ands	r3, r2
 8010bbe:	d0e2      	beq.n	8010b86 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	689a      	ldr	r2, [r3, #8]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2107      	movs	r1, #7
 8010bcc:	438a      	bics	r2, r1
 8010bce:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	6899      	ldr	r1, [r3, #8]
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	430a      	orrs	r2, r1
 8010bde:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	68ba      	ldr	r2, [r7, #8]
 8010be6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	689a      	ldr	r2, [r3, #8]
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	2180      	movs	r1, #128	@ 0x80
 8010bf4:	00c9      	lsls	r1, r1, #3
 8010bf6:	430a      	orrs	r2, r1
 8010bf8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	22ff      	movs	r2, #255	@ 0xff
 8010c00:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2221      	movs	r2, #33	@ 0x21
 8010c06:	2101      	movs	r1, #1
 8010c08:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2220      	movs	r2, #32
 8010c0e:	2100      	movs	r1, #0
 8010c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010c12:	2300      	movs	r3, #0
}
 8010c14:	0018      	movs	r0, r3
 8010c16:	46bd      	mov	sp, r7
 8010c18:	b006      	add	sp, #24
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	fffffbff 	.word	0xfffffbff
 8010c20:	fffffb7f 	.word	0xfffffb7f

08010c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d101      	bne.n	8010c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010c32:	2301      	movs	r3, #1
 8010c34:	e032      	b.n	8010c9c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2239      	movs	r2, #57	@ 0x39
 8010c3a:	5c9b      	ldrb	r3, [r3, r2]
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d107      	bne.n	8010c52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2238      	movs	r2, #56	@ 0x38
 8010c46:	2100      	movs	r1, #0
 8010c48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	0018      	movs	r0, r3
 8010c4e:	f7f8 fb09 	bl	8009264 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2239      	movs	r2, #57	@ 0x39
 8010c56:	2102      	movs	r1, #2
 8010c58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	3304      	adds	r3, #4
 8010c62:	0019      	movs	r1, r3
 8010c64:	0010      	movs	r0, r2
 8010c66:	f000 f975 	bl	8010f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	223e      	movs	r2, #62	@ 0x3e
 8010c6e:	2101      	movs	r1, #1
 8010c70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	223a      	movs	r2, #58	@ 0x3a
 8010c76:	2101      	movs	r1, #1
 8010c78:	5499      	strb	r1, [r3, r2]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	223b      	movs	r2, #59	@ 0x3b
 8010c7e:	2101      	movs	r1, #1
 8010c80:	5499      	strb	r1, [r3, r2]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	223c      	movs	r2, #60	@ 0x3c
 8010c86:	2101      	movs	r1, #1
 8010c88:	5499      	strb	r1, [r3, r2]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	223d      	movs	r2, #61	@ 0x3d
 8010c8e:	2101      	movs	r1, #1
 8010c90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2239      	movs	r2, #57	@ 0x39
 8010c96:	2101      	movs	r1, #1
 8010c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010c9a:	2300      	movs	r3, #0
}
 8010c9c:	0018      	movs	r0, r3
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	b002      	add	sp, #8
 8010ca2:	bd80      	pop	{r7, pc}

08010ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d108      	bne.n	8010cc6 <HAL_TIM_PWM_Start+0x22>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	223a      	movs	r2, #58	@ 0x3a
 8010cb8:	5c9b      	ldrb	r3, [r3, r2]
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	3b01      	subs	r3, #1
 8010cbe:	1e5a      	subs	r2, r3, #1
 8010cc0:	4193      	sbcs	r3, r2
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	e01f      	b.n	8010d06 <HAL_TIM_PWM_Start+0x62>
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	2b04      	cmp	r3, #4
 8010cca:	d108      	bne.n	8010cde <HAL_TIM_PWM_Start+0x3a>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	223b      	movs	r2, #59	@ 0x3b
 8010cd0:	5c9b      	ldrb	r3, [r3, r2]
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	3b01      	subs	r3, #1
 8010cd6:	1e5a      	subs	r2, r3, #1
 8010cd8:	4193      	sbcs	r3, r2
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	e013      	b.n	8010d06 <HAL_TIM_PWM_Start+0x62>
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	2b08      	cmp	r3, #8
 8010ce2:	d108      	bne.n	8010cf6 <HAL_TIM_PWM_Start+0x52>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	223c      	movs	r2, #60	@ 0x3c
 8010ce8:	5c9b      	ldrb	r3, [r3, r2]
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	3b01      	subs	r3, #1
 8010cee:	1e5a      	subs	r2, r3, #1
 8010cf0:	4193      	sbcs	r3, r2
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	e007      	b.n	8010d06 <HAL_TIM_PWM_Start+0x62>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	223d      	movs	r2, #61	@ 0x3d
 8010cfa:	5c9b      	ldrb	r3, [r3, r2]
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	3b01      	subs	r3, #1
 8010d00:	1e5a      	subs	r2, r3, #1
 8010d02:	4193      	sbcs	r3, r2
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d001      	beq.n	8010d0e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	e052      	b.n	8010db4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d104      	bne.n	8010d1e <HAL_TIM_PWM_Start+0x7a>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	223a      	movs	r2, #58	@ 0x3a
 8010d18:	2102      	movs	r1, #2
 8010d1a:	5499      	strb	r1, [r3, r2]
 8010d1c:	e013      	b.n	8010d46 <HAL_TIM_PWM_Start+0xa2>
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	2b04      	cmp	r3, #4
 8010d22:	d104      	bne.n	8010d2e <HAL_TIM_PWM_Start+0x8a>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	223b      	movs	r2, #59	@ 0x3b
 8010d28:	2102      	movs	r1, #2
 8010d2a:	5499      	strb	r1, [r3, r2]
 8010d2c:	e00b      	b.n	8010d46 <HAL_TIM_PWM_Start+0xa2>
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	2b08      	cmp	r3, #8
 8010d32:	d104      	bne.n	8010d3e <HAL_TIM_PWM_Start+0x9a>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	223c      	movs	r2, #60	@ 0x3c
 8010d38:	2102      	movs	r1, #2
 8010d3a:	5499      	strb	r1, [r3, r2]
 8010d3c:	e003      	b.n	8010d46 <HAL_TIM_PWM_Start+0xa2>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	223d      	movs	r2, #61	@ 0x3d
 8010d42:	2102      	movs	r1, #2
 8010d44:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	6839      	ldr	r1, [r7, #0]
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	0018      	movs	r0, r3
 8010d50:	f000 fa62 	bl	8011218 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681a      	ldr	r2, [r3, #0]
 8010d58:	2380      	movs	r3, #128	@ 0x80
 8010d5a:	05db      	lsls	r3, r3, #23
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d00e      	beq.n	8010d7e <HAL_TIM_PWM_Start+0xda>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4a15      	ldr	r2, [pc, #84]	@ (8010dbc <HAL_TIM_PWM_Start+0x118>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d009      	beq.n	8010d7e <HAL_TIM_PWM_Start+0xda>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4a14      	ldr	r2, [pc, #80]	@ (8010dc0 <HAL_TIM_PWM_Start+0x11c>)
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d004      	beq.n	8010d7e <HAL_TIM_PWM_Start+0xda>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4a12      	ldr	r2, [pc, #72]	@ (8010dc4 <HAL_TIM_PWM_Start+0x120>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d111      	bne.n	8010da2 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	689b      	ldr	r3, [r3, #8]
 8010d84:	2207      	movs	r2, #7
 8010d86:	4013      	ands	r3, r2
 8010d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2b06      	cmp	r3, #6
 8010d8e:	d010      	beq.n	8010db2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2101      	movs	r1, #1
 8010d9c:	430a      	orrs	r2, r1
 8010d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010da0:	e007      	b.n	8010db2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	681a      	ldr	r2, [r3, #0]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2101      	movs	r1, #1
 8010dae:	430a      	orrs	r2, r1
 8010db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010db2:	2300      	movs	r3, #0
}
 8010db4:	0018      	movs	r0, r3
 8010db6:	46bd      	mov	sp, r7
 8010db8:	b004      	add	sp, #16
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	40000400 	.word	0x40000400
 8010dc0:	40010800 	.word	0x40010800
 8010dc4:	40011400 	.word	0x40011400

08010dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b086      	sub	sp, #24
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010dd4:	2317      	movs	r3, #23
 8010dd6:	18fb      	adds	r3, r7, r3
 8010dd8:	2200      	movs	r2, #0
 8010dda:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2238      	movs	r2, #56	@ 0x38
 8010de0:	5c9b      	ldrb	r3, [r3, r2]
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d101      	bne.n	8010dea <HAL_TIM_PWM_ConfigChannel+0x22>
 8010de6:	2302      	movs	r3, #2
 8010de8:	e0ad      	b.n	8010f46 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2238      	movs	r2, #56	@ 0x38
 8010dee:	2101      	movs	r1, #1
 8010df0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2b0c      	cmp	r3, #12
 8010df6:	d100      	bne.n	8010dfa <HAL_TIM_PWM_ConfigChannel+0x32>
 8010df8:	e076      	b.n	8010ee8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2b0c      	cmp	r3, #12
 8010dfe:	d900      	bls.n	8010e02 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8010e00:	e095      	b.n	8010f2e <HAL_TIM_PWM_ConfigChannel+0x166>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2b08      	cmp	r3, #8
 8010e06:	d04e      	beq.n	8010ea6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b08      	cmp	r3, #8
 8010e0c:	d900      	bls.n	8010e10 <HAL_TIM_PWM_ConfigChannel+0x48>
 8010e0e:	e08e      	b.n	8010f2e <HAL_TIM_PWM_ConfigChannel+0x166>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d003      	beq.n	8010e1e <HAL_TIM_PWM_ConfigChannel+0x56>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2b04      	cmp	r3, #4
 8010e1a:	d021      	beq.n	8010e60 <HAL_TIM_PWM_ConfigChannel+0x98>
 8010e1c:	e087      	b.n	8010f2e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	68ba      	ldr	r2, [r7, #8]
 8010e24:	0011      	movs	r1, r2
 8010e26:	0018      	movs	r0, r3
 8010e28:	f000 f8f2 	bl	8011010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	699a      	ldr	r2, [r3, #24]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	2108      	movs	r1, #8
 8010e38:	430a      	orrs	r2, r1
 8010e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	699a      	ldr	r2, [r3, #24]
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2104      	movs	r1, #4
 8010e48:	438a      	bics	r2, r1
 8010e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	6999      	ldr	r1, [r3, #24]
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	68da      	ldr	r2, [r3, #12]
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	430a      	orrs	r2, r1
 8010e5c:	619a      	str	r2, [r3, #24]
      break;
 8010e5e:	e06b      	b.n	8010f38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	0011      	movs	r1, r2
 8010e68:	0018      	movs	r0, r3
 8010e6a:	f000 f90d 	bl	8011088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	699a      	ldr	r2, [r3, #24]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	2180      	movs	r1, #128	@ 0x80
 8010e7a:	0109      	lsls	r1, r1, #4
 8010e7c:	430a      	orrs	r2, r1
 8010e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	699a      	ldr	r2, [r3, #24]
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	4931      	ldr	r1, [pc, #196]	@ (8010f50 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8010e8c:	400a      	ands	r2, r1
 8010e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	6999      	ldr	r1, [r3, #24]
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	68db      	ldr	r3, [r3, #12]
 8010e9a:	021a      	lsls	r2, r3, #8
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	430a      	orrs	r2, r1
 8010ea2:	619a      	str	r2, [r3, #24]
      break;
 8010ea4:	e048      	b.n	8010f38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	68ba      	ldr	r2, [r7, #8]
 8010eac:	0011      	movs	r1, r2
 8010eae:	0018      	movs	r0, r3
 8010eb0:	f000 f92c 	bl	801110c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	69da      	ldr	r2, [r3, #28]
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	2108      	movs	r1, #8
 8010ec0:	430a      	orrs	r2, r1
 8010ec2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	69da      	ldr	r2, [r3, #28]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2104      	movs	r1, #4
 8010ed0:	438a      	bics	r2, r1
 8010ed2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	69d9      	ldr	r1, [r3, #28]
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	68da      	ldr	r2, [r3, #12]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	430a      	orrs	r2, r1
 8010ee4:	61da      	str	r2, [r3, #28]
      break;
 8010ee6:	e027      	b.n	8010f38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	0011      	movs	r1, r2
 8010ef0:	0018      	movs	r0, r3
 8010ef2:	f000 f94b 	bl	801118c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	69da      	ldr	r2, [r3, #28]
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2180      	movs	r1, #128	@ 0x80
 8010f02:	0109      	lsls	r1, r1, #4
 8010f04:	430a      	orrs	r2, r1
 8010f06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	69da      	ldr	r2, [r3, #28]
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	490f      	ldr	r1, [pc, #60]	@ (8010f50 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8010f14:	400a      	ands	r2, r1
 8010f16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	69d9      	ldr	r1, [r3, #28]
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	68db      	ldr	r3, [r3, #12]
 8010f22:	021a      	lsls	r2, r3, #8
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	430a      	orrs	r2, r1
 8010f2a:	61da      	str	r2, [r3, #28]
      break;
 8010f2c:	e004      	b.n	8010f38 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8010f2e:	2317      	movs	r3, #23
 8010f30:	18fb      	adds	r3, r7, r3
 8010f32:	2201      	movs	r2, #1
 8010f34:	701a      	strb	r2, [r3, #0]
      break;
 8010f36:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2238      	movs	r2, #56	@ 0x38
 8010f3c:	2100      	movs	r1, #0
 8010f3e:	5499      	strb	r1, [r3, r2]

  return status;
 8010f40:	2317      	movs	r3, #23
 8010f42:	18fb      	adds	r3, r7, r3
 8010f44:	781b      	ldrb	r3, [r3, #0]
}
 8010f46:	0018      	movs	r0, r3
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	b006      	add	sp, #24
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	46c0      	nop			@ (mov r8, r8)
 8010f50:	fffffbff 	.word	0xfffffbff

08010f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	2380      	movs	r3, #128	@ 0x80
 8010f68:	05db      	lsls	r3, r3, #23
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d00b      	beq.n	8010f86 <TIM_Base_SetConfig+0x32>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4a23      	ldr	r2, [pc, #140]	@ (8011000 <TIM_Base_SetConfig+0xac>)
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d007      	beq.n	8010f86 <TIM_Base_SetConfig+0x32>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4a22      	ldr	r2, [pc, #136]	@ (8011004 <TIM_Base_SetConfig+0xb0>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d003      	beq.n	8010f86 <TIM_Base_SetConfig+0x32>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	4a21      	ldr	r2, [pc, #132]	@ (8011008 <TIM_Base_SetConfig+0xb4>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d108      	bne.n	8010f98 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2270      	movs	r2, #112	@ 0x70
 8010f8a:	4393      	bics	r3, r2
 8010f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	4313      	orrs	r3, r2
 8010f96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	2380      	movs	r3, #128	@ 0x80
 8010f9c:	05db      	lsls	r3, r3, #23
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d00b      	beq.n	8010fba <TIM_Base_SetConfig+0x66>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4a16      	ldr	r2, [pc, #88]	@ (8011000 <TIM_Base_SetConfig+0xac>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d007      	beq.n	8010fba <TIM_Base_SetConfig+0x66>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	4a15      	ldr	r2, [pc, #84]	@ (8011004 <TIM_Base_SetConfig+0xb0>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d003      	beq.n	8010fba <TIM_Base_SetConfig+0x66>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4a14      	ldr	r2, [pc, #80]	@ (8011008 <TIM_Base_SetConfig+0xb4>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d108      	bne.n	8010fcc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	4a13      	ldr	r2, [pc, #76]	@ (801100c <TIM_Base_SetConfig+0xb8>)
 8010fbe:	4013      	ands	r3, r2
 8010fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	68fa      	ldr	r2, [r7, #12]
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	2280      	movs	r2, #128	@ 0x80
 8010fd0:	4393      	bics	r3, r2
 8010fd2:	001a      	movs	r2, r3
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	68fa      	ldr	r2, [r7, #12]
 8010fe0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	689a      	ldr	r2, [r3, #8]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	615a      	str	r2, [r3, #20]
}
 8010ff8:	46c0      	nop			@ (mov r8, r8)
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	b004      	add	sp, #16
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	40000400 	.word	0x40000400
 8011004:	40010800 	.word	0x40010800
 8011008:	40011400 	.word	0x40011400
 801100c:	fffffcff 	.word	0xfffffcff

08011010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b086      	sub	sp, #24
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6a1b      	ldr	r3, [r3, #32]
 801101e:	2201      	movs	r2, #1
 8011020:	4393      	bics	r3, r2
 8011022:	001a      	movs	r2, r3
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6a1b      	ldr	r3, [r3, #32]
 801102c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	699b      	ldr	r3, [r3, #24]
 8011038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2270      	movs	r2, #112	@ 0x70
 801103e:	4393      	bics	r3, r2
 8011040:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2203      	movs	r2, #3
 8011046:	4393      	bics	r3, r2
 8011048:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	4313      	orrs	r3, r2
 8011052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	2202      	movs	r2, #2
 8011058:	4393      	bics	r3, r2
 801105a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	689b      	ldr	r3, [r3, #8]
 8011060:	697a      	ldr	r2, [r7, #20]
 8011062:	4313      	orrs	r3, r2
 8011064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	693a      	ldr	r2, [r7, #16]
 801106a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	68fa      	ldr	r2, [r7, #12]
 8011070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	685a      	ldr	r2, [r3, #4]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	697a      	ldr	r2, [r7, #20]
 801107e:	621a      	str	r2, [r3, #32]
}
 8011080:	46c0      	nop			@ (mov r8, r8)
 8011082:	46bd      	mov	sp, r7
 8011084:	b006      	add	sp, #24
 8011086:	bd80      	pop	{r7, pc}

08011088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b086      	sub	sp, #24
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6a1b      	ldr	r3, [r3, #32]
 8011096:	2210      	movs	r2, #16
 8011098:	4393      	bics	r3, r2
 801109a:	001a      	movs	r2, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6a1b      	ldr	r3, [r3, #32]
 80110a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	699b      	ldr	r3, [r3, #24]
 80110b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	4a13      	ldr	r2, [pc, #76]	@ (8011104 <TIM_OC2_SetConfig+0x7c>)
 80110b6:	4013      	ands	r3, r2
 80110b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	4a12      	ldr	r2, [pc, #72]	@ (8011108 <TIM_OC2_SetConfig+0x80>)
 80110be:	4013      	ands	r3, r2
 80110c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	021b      	lsls	r3, r3, #8
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	2220      	movs	r2, #32
 80110d2:	4393      	bics	r3, r2
 80110d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	689b      	ldr	r3, [r3, #8]
 80110da:	011b      	lsls	r3, r3, #4
 80110dc:	697a      	ldr	r2, [r7, #20]
 80110de:	4313      	orrs	r3, r2
 80110e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	693a      	ldr	r2, [r7, #16]
 80110e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	685a      	ldr	r2, [r3, #4]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	697a      	ldr	r2, [r7, #20]
 80110fa:	621a      	str	r2, [r3, #32]
}
 80110fc:	46c0      	nop			@ (mov r8, r8)
 80110fe:	46bd      	mov	sp, r7
 8011100:	b006      	add	sp, #24
 8011102:	bd80      	pop	{r7, pc}
 8011104:	ffff8fff 	.word	0xffff8fff
 8011108:	fffffcff 	.word	0xfffffcff

0801110c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6a1b      	ldr	r3, [r3, #32]
 801111a:	4a1a      	ldr	r2, [pc, #104]	@ (8011184 <TIM_OC3_SetConfig+0x78>)
 801111c:	401a      	ands	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6a1b      	ldr	r3, [r3, #32]
 8011126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	69db      	ldr	r3, [r3, #28]
 8011132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2270      	movs	r2, #112	@ 0x70
 8011138:	4393      	bics	r3, r2
 801113a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2203      	movs	r2, #3
 8011140:	4393      	bics	r3, r2
 8011142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	68fa      	ldr	r2, [r7, #12]
 801114a:	4313      	orrs	r3, r2
 801114c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	4a0d      	ldr	r2, [pc, #52]	@ (8011188 <TIM_OC3_SetConfig+0x7c>)
 8011152:	4013      	ands	r3, r2
 8011154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	689b      	ldr	r3, [r3, #8]
 801115a:	021b      	lsls	r3, r3, #8
 801115c:	697a      	ldr	r2, [r7, #20]
 801115e:	4313      	orrs	r3, r2
 8011160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	693a      	ldr	r2, [r7, #16]
 8011166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	68fa      	ldr	r2, [r7, #12]
 801116c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	685a      	ldr	r2, [r3, #4]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	697a      	ldr	r2, [r7, #20]
 801117a:	621a      	str	r2, [r3, #32]
}
 801117c:	46c0      	nop			@ (mov r8, r8)
 801117e:	46bd      	mov	sp, r7
 8011180:	b006      	add	sp, #24
 8011182:	bd80      	pop	{r7, pc}
 8011184:	fffffeff 	.word	0xfffffeff
 8011188:	fffffdff 	.word	0xfffffdff

0801118c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6a1b      	ldr	r3, [r3, #32]
 801119a:	4a1b      	ldr	r2, [pc, #108]	@ (8011208 <TIM_OC4_SetConfig+0x7c>)
 801119c:	401a      	ands	r2, r3
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a1b      	ldr	r3, [r3, #32]
 80111a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	69db      	ldr	r3, [r3, #28]
 80111b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	4a15      	ldr	r2, [pc, #84]	@ (801120c <TIM_OC4_SetConfig+0x80>)
 80111b8:	4013      	ands	r3, r2
 80111ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	4a14      	ldr	r2, [pc, #80]	@ (8011210 <TIM_OC4_SetConfig+0x84>)
 80111c0:	4013      	ands	r3, r2
 80111c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	021b      	lsls	r3, r3, #8
 80111ca:	68fa      	ldr	r2, [r7, #12]
 80111cc:	4313      	orrs	r3, r2
 80111ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	4a10      	ldr	r2, [pc, #64]	@ (8011214 <TIM_OC4_SetConfig+0x88>)
 80111d4:	4013      	ands	r3, r2
 80111d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	689b      	ldr	r3, [r3, #8]
 80111dc:	031b      	lsls	r3, r3, #12
 80111de:	697a      	ldr	r2, [r7, #20]
 80111e0:	4313      	orrs	r3, r2
 80111e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	693a      	ldr	r2, [r7, #16]
 80111e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	68fa      	ldr	r2, [r7, #12]
 80111ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	685a      	ldr	r2, [r3, #4]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	697a      	ldr	r2, [r7, #20]
 80111fc:	621a      	str	r2, [r3, #32]
}
 80111fe:	46c0      	nop			@ (mov r8, r8)
 8011200:	46bd      	mov	sp, r7
 8011202:	b006      	add	sp, #24
 8011204:	bd80      	pop	{r7, pc}
 8011206:	46c0      	nop			@ (mov r8, r8)
 8011208:	ffffefff 	.word	0xffffefff
 801120c:	ffff8fff 	.word	0xffff8fff
 8011210:	fffffcff 	.word	0xfffffcff
 8011214:	ffffdfff 	.word	0xffffdfff

08011218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	221f      	movs	r2, #31
 8011228:	4013      	ands	r3, r2
 801122a:	2201      	movs	r2, #1
 801122c:	409a      	lsls	r2, r3
 801122e:	0013      	movs	r3, r2
 8011230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	6a1b      	ldr	r3, [r3, #32]
 8011236:	697a      	ldr	r2, [r7, #20]
 8011238:	43d2      	mvns	r2, r2
 801123a:	401a      	ands	r2, r3
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	6a1a      	ldr	r2, [r3, #32]
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	211f      	movs	r1, #31
 8011248:	400b      	ands	r3, r1
 801124a:	6879      	ldr	r1, [r7, #4]
 801124c:	4099      	lsls	r1, r3
 801124e:	000b      	movs	r3, r1
 8011250:	431a      	orrs	r2, r3
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	621a      	str	r2, [r3, #32]
}
 8011256:	46c0      	nop			@ (mov r8, r8)
 8011258:	46bd      	mov	sp, r7
 801125a:	b006      	add	sp, #24
 801125c:	bd80      	pop	{r7, pc}
	...

08011260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2238      	movs	r2, #56	@ 0x38
 801126e:	5c9b      	ldrb	r3, [r3, r2]
 8011270:	2b01      	cmp	r3, #1
 8011272:	d101      	bne.n	8011278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011274:	2302      	movs	r3, #2
 8011276:	e047      	b.n	8011308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2238      	movs	r2, #56	@ 0x38
 801127c:	2101      	movs	r1, #1
 801127e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2239      	movs	r2, #57	@ 0x39
 8011284:	2102      	movs	r1, #2
 8011286:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2270      	movs	r2, #112	@ 0x70
 801129c:	4393      	bics	r3, r2
 801129e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	4313      	orrs	r3, r2
 80112a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	68fa      	ldr	r2, [r7, #12]
 80112b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	2380      	movs	r3, #128	@ 0x80
 80112b8:	05db      	lsls	r3, r3, #23
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d00e      	beq.n	80112dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	4a13      	ldr	r2, [pc, #76]	@ (8011310 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d009      	beq.n	80112dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4a11      	ldr	r2, [pc, #68]	@ (8011314 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d004      	beq.n	80112dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4a10      	ldr	r2, [pc, #64]	@ (8011318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d10c      	bne.n	80112f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	2280      	movs	r2, #128	@ 0x80
 80112e0:	4393      	bics	r3, r2
 80112e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	685b      	ldr	r3, [r3, #4]
 80112e8:	68ba      	ldr	r2, [r7, #8]
 80112ea:	4313      	orrs	r3, r2
 80112ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	68ba      	ldr	r2, [r7, #8]
 80112f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2239      	movs	r2, #57	@ 0x39
 80112fa:	2101      	movs	r1, #1
 80112fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2238      	movs	r2, #56	@ 0x38
 8011302:	2100      	movs	r1, #0
 8011304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	0018      	movs	r0, r3
 801130a:	46bd      	mov	sp, r7
 801130c:	b004      	add	sp, #16
 801130e:	bd80      	pop	{r7, pc}
 8011310:	40000400 	.word	0x40000400
 8011314:	40010800 	.word	0x40010800
 8011318:	40011400 	.word	0x40011400

0801131c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2238      	movs	r2, #56	@ 0x38
 801132a:	5c9b      	ldrb	r3, [r3, r2]
 801132c:	2b01      	cmp	r3, #1
 801132e:	d101      	bne.n	8011334 <HAL_TIMEx_RemapConfig+0x18>
 8011330:	2302      	movs	r3, #2
 8011332:	e00c      	b.n	801134e <HAL_TIMEx_RemapConfig+0x32>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2238      	movs	r2, #56	@ 0x38
 8011338:	2101      	movs	r1, #1
 801133a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	683a      	ldr	r2, [r7, #0]
 8011342:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2238      	movs	r2, #56	@ 0x38
 8011348:	2100      	movs	r1, #0
 801134a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801134c:	2300      	movs	r3, #0
}
 801134e:	0018      	movs	r0, r3
 8011350:	46bd      	mov	sp, r7
 8011352:	b002      	add	sp, #8
 8011354:	bd80      	pop	{r7, pc}
	...

08011358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011366:	2301      	movs	r3, #1
 8011368:	e053      	b.n	8011412 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801136e:	2b00      	cmp	r3, #0
 8011370:	d116      	bne.n	80113a0 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2278      	movs	r2, #120	@ 0x78
 8011376:	2100      	movs	r1, #0
 8011378:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	0018      	movs	r0, r3
 801137e:	f000 fd07 	bl	8011d90 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	22b0      	movs	r2, #176	@ 0xb0
 8011386:	589b      	ldr	r3, [r3, r2]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d103      	bne.n	8011394 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	21b0      	movs	r1, #176	@ 0xb0
 8011390:	4a22      	ldr	r2, [pc, #136]	@ (801141c <HAL_UART_Init+0xc4>)
 8011392:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	22b0      	movs	r2, #176	@ 0xb0
 8011398:	589b      	ldr	r3, [r3, r2]
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	0010      	movs	r0, r2
 801139e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2224      	movs	r2, #36	@ 0x24
 80113a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	2101      	movs	r1, #1
 80113b2:	438a      	bics	r2, r1
 80113b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	0018      	movs	r0, r3
 80113ba:	f000 fd2d 	bl	8011e18 <UART_SetConfig>
 80113be:	0003      	movs	r3, r0
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d101      	bne.n	80113c8 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e024      	b.n	8011412 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d003      	beq.n	80113d8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	0018      	movs	r0, r3
 80113d4:	f000 ffbe 	bl	8012354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	685a      	ldr	r2, [r3, #4]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	490f      	ldr	r1, [pc, #60]	@ (8011420 <HAL_UART_Init+0xc8>)
 80113e4:	400a      	ands	r2, r1
 80113e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	689a      	ldr	r2, [r3, #8]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	212a      	movs	r1, #42	@ 0x2a
 80113f4:	438a      	bics	r2, r1
 80113f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2101      	movs	r1, #1
 8011404:	430a      	orrs	r2, r1
 8011406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	0018      	movs	r0, r3
 801140c:	f001 f856 	bl	80124bc <UART_CheckIdleState>
 8011410:	0003      	movs	r3, r0
}
 8011412:	0018      	movs	r0, r3
 8011414:	46bd      	mov	sp, r7
 8011416:	b002      	add	sp, #8
 8011418:	bd80      	pop	{r7, pc}
 801141a:	46c0      	nop			@ (mov r8, r8)
 801141c:	080094b1 	.word	0x080094b1
 8011420:	ffffb7ff 	.word	0xffffb7ff

08011424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b08a      	sub	sp, #40	@ 0x28
 8011428:	af02      	add	r7, sp, #8
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	603b      	str	r3, [r7, #0]
 8011430:	1dbb      	adds	r3, r7, #6
 8011432:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011438:	2b20      	cmp	r3, #32
 801143a:	d000      	beq.n	801143e <HAL_UART_Transmit+0x1a>
 801143c:	e08c      	b.n	8011558 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d003      	beq.n	801144c <HAL_UART_Transmit+0x28>
 8011444:	1dbb      	adds	r3, r7, #6
 8011446:	881b      	ldrh	r3, [r3, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d101      	bne.n	8011450 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801144c:	2301      	movs	r3, #1
 801144e:	e084      	b.n	801155a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	689a      	ldr	r2, [r3, #8]
 8011454:	2380      	movs	r3, #128	@ 0x80
 8011456:	015b      	lsls	r3, r3, #5
 8011458:	429a      	cmp	r2, r3
 801145a:	d109      	bne.n	8011470 <HAL_UART_Transmit+0x4c>
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	691b      	ldr	r3, [r3, #16]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d105      	bne.n	8011470 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	2201      	movs	r2, #1
 8011468:	4013      	ands	r3, r2
 801146a:	d001      	beq.n	8011470 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801146c:	2301      	movs	r3, #1
 801146e:	e074      	b.n	801155a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2284      	movs	r2, #132	@ 0x84
 8011474:	2100      	movs	r1, #0
 8011476:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2221      	movs	r2, #33	@ 0x21
 801147c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801147e:	f7f8 fd23 	bl	8009ec8 <HAL_GetTick>
 8011482:	0003      	movs	r3, r0
 8011484:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	1dba      	adds	r2, r7, #6
 801148a:	2150      	movs	r1, #80	@ 0x50
 801148c:	8812      	ldrh	r2, [r2, #0]
 801148e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	1dba      	adds	r2, r7, #6
 8011494:	2152      	movs	r1, #82	@ 0x52
 8011496:	8812      	ldrh	r2, [r2, #0]
 8011498:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	689a      	ldr	r2, [r3, #8]
 801149e:	2380      	movs	r3, #128	@ 0x80
 80114a0:	015b      	lsls	r3, r3, #5
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d108      	bne.n	80114b8 <HAL_UART_Transmit+0x94>
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	691b      	ldr	r3, [r3, #16]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d104      	bne.n	80114b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80114ae:	2300      	movs	r3, #0
 80114b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	61bb      	str	r3, [r7, #24]
 80114b6:	e003      	b.n	80114c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80114bc:	2300      	movs	r3, #0
 80114be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80114c0:	e02f      	b.n	8011522 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80114c2:	697a      	ldr	r2, [r7, #20]
 80114c4:	68f8      	ldr	r0, [r7, #12]
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	0013      	movs	r3, r2
 80114cc:	2200      	movs	r2, #0
 80114ce:	2180      	movs	r1, #128	@ 0x80
 80114d0:	f001 f89c 	bl	801260c <UART_WaitOnFlagUntilTimeout>
 80114d4:	1e03      	subs	r3, r0, #0
 80114d6:	d004      	beq.n	80114e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2220      	movs	r2, #32
 80114dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80114de:	2303      	movs	r3, #3
 80114e0:	e03b      	b.n	801155a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d10b      	bne.n	8011500 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80114e8:	69bb      	ldr	r3, [r7, #24]
 80114ea:	881b      	ldrh	r3, [r3, #0]
 80114ec:	001a      	movs	r2, r3
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	05d2      	lsls	r2, r2, #23
 80114f4:	0dd2      	lsrs	r2, r2, #23
 80114f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	3302      	adds	r3, #2
 80114fc:	61bb      	str	r3, [r7, #24]
 80114fe:	e007      	b.n	8011510 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011500:	69fb      	ldr	r3, [r7, #28]
 8011502:	781a      	ldrb	r2, [r3, #0]
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801150a:	69fb      	ldr	r3, [r7, #28]
 801150c:	3301      	adds	r3, #1
 801150e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	2252      	movs	r2, #82	@ 0x52
 8011514:	5a9b      	ldrh	r3, [r3, r2]
 8011516:	b29b      	uxth	r3, r3
 8011518:	3b01      	subs	r3, #1
 801151a:	b299      	uxth	r1, r3
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2252      	movs	r2, #82	@ 0x52
 8011520:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2252      	movs	r2, #82	@ 0x52
 8011526:	5a9b      	ldrh	r3, [r3, r2]
 8011528:	b29b      	uxth	r3, r3
 801152a:	2b00      	cmp	r3, #0
 801152c:	d1c9      	bne.n	80114c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801152e:	697a      	ldr	r2, [r7, #20]
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	9300      	str	r3, [sp, #0]
 8011536:	0013      	movs	r3, r2
 8011538:	2200      	movs	r2, #0
 801153a:	2140      	movs	r1, #64	@ 0x40
 801153c:	f001 f866 	bl	801260c <UART_WaitOnFlagUntilTimeout>
 8011540:	1e03      	subs	r3, r0, #0
 8011542:	d004      	beq.n	801154e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2220      	movs	r2, #32
 8011548:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801154a:	2303      	movs	r3, #3
 801154c:	e005      	b.n	801155a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2220      	movs	r2, #32
 8011552:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8011554:	2300      	movs	r3, #0
 8011556:	e000      	b.n	801155a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8011558:	2302      	movs	r3, #2
  }
}
 801155a:	0018      	movs	r0, r3
 801155c:	46bd      	mov	sp, r7
 801155e:	b008      	add	sp, #32
 8011560:	bd80      	pop	{r7, pc}
	...

08011564 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b088      	sub	sp, #32
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	1dbb      	adds	r3, r7, #6
 8011570:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011576:	2b20      	cmp	r3, #32
 8011578:	d000      	beq.n	801157c <HAL_UART_Transmit_DMA+0x18>
 801157a:	e077      	b.n	801166c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d003      	beq.n	801158a <HAL_UART_Transmit_DMA+0x26>
 8011582:	1dbb      	adds	r3, r7, #6
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d101      	bne.n	801158e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801158a:	2301      	movs	r3, #1
 801158c:	e06f      	b.n	801166e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	689a      	ldr	r2, [r3, #8]
 8011592:	2380      	movs	r3, #128	@ 0x80
 8011594:	015b      	lsls	r3, r3, #5
 8011596:	429a      	cmp	r2, r3
 8011598:	d109      	bne.n	80115ae <HAL_UART_Transmit_DMA+0x4a>
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	691b      	ldr	r3, [r3, #16]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d105      	bne.n	80115ae <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	2201      	movs	r2, #1
 80115a6:	4013      	ands	r3, r2
 80115a8:	d001      	beq.n	80115ae <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80115aa:	2301      	movs	r3, #1
 80115ac:	e05f      	b.n	801166e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	68ba      	ldr	r2, [r7, #8]
 80115b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	1dba      	adds	r2, r7, #6
 80115b8:	2150      	movs	r1, #80	@ 0x50
 80115ba:	8812      	ldrh	r2, [r2, #0]
 80115bc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	1dba      	adds	r2, r7, #6
 80115c2:	2152      	movs	r1, #82	@ 0x52
 80115c4:	8812      	ldrh	r2, [r2, #0]
 80115c6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2284      	movs	r2, #132	@ 0x84
 80115cc:	2100      	movs	r1, #0
 80115ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2221      	movs	r2, #33	@ 0x21
 80115d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d027      	beq.n	801162e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115e2:	4a25      	ldr	r2, [pc, #148]	@ (8011678 <HAL_UART_Transmit_DMA+0x114>)
 80115e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115ea:	4a24      	ldr	r2, [pc, #144]	@ (801167c <HAL_UART_Transmit_DMA+0x118>)
 80115ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115f2:	4a23      	ldr	r2, [pc, #140]	@ (8011680 <HAL_UART_Transmit_DMA+0x11c>)
 80115f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115fa:	2200      	movs	r2, #0
 80115fc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011606:	0019      	movs	r1, r3
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	3328      	adds	r3, #40	@ 0x28
 801160e:	001a      	movs	r2, r3
 8011610:	1dbb      	adds	r3, r7, #6
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	f7f9 f9d6 	bl	800a9c4 <HAL_DMA_Start_IT>
 8011618:	1e03      	subs	r3, r0, #0
 801161a:	d008      	beq.n	801162e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2284      	movs	r2, #132	@ 0x84
 8011620:	2110      	movs	r1, #16
 8011622:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2220      	movs	r2, #32
 8011628:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801162a:	2301      	movs	r3, #1
 801162c:	e01f      	b.n	801166e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2240      	movs	r2, #64	@ 0x40
 8011634:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011636:	f3ef 8310 	mrs	r3, PRIMASK
 801163a:	613b      	str	r3, [r7, #16]
  return(result);
 801163c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801163e:	61fb      	str	r3, [r7, #28]
 8011640:	2301      	movs	r3, #1
 8011642:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	f383 8810 	msr	PRIMASK, r3
}
 801164a:	46c0      	nop			@ (mov r8, r8)
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	689a      	ldr	r2, [r3, #8]
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	2180      	movs	r1, #128	@ 0x80
 8011658:	430a      	orrs	r2, r1
 801165a:	609a      	str	r2, [r3, #8]
 801165c:	69fb      	ldr	r3, [r7, #28]
 801165e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	f383 8810 	msr	PRIMASK, r3
}
 8011666:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8011668:	2300      	movs	r3, #0
 801166a:	e000      	b.n	801166e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801166c:	2302      	movs	r3, #2
  }
}
 801166e:	0018      	movs	r0, r3
 8011670:	46bd      	mov	sp, r7
 8011672:	b008      	add	sp, #32
 8011674:	bd80      	pop	{r7, pc}
 8011676:	46c0      	nop			@ (mov r8, r8)
 8011678:	08012931 	.word	0x08012931
 801167c:	080129cd 	.word	0x080129cd
 8011680:	08012b6d 	.word	0x08012b6d

08011684 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b088      	sub	sp, #32
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	1dbb      	adds	r3, r7, #6
 8011690:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2280      	movs	r2, #128	@ 0x80
 8011696:	589b      	ldr	r3, [r3, r2]
 8011698:	2b20      	cmp	r3, #32
 801169a:	d14a      	bne.n	8011732 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d003      	beq.n	80116aa <HAL_UART_Receive_DMA+0x26>
 80116a2:	1dbb      	adds	r3, r7, #6
 80116a4:	881b      	ldrh	r3, [r3, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d101      	bne.n	80116ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80116aa:	2301      	movs	r3, #1
 80116ac:	e042      	b.n	8011734 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	689a      	ldr	r2, [r3, #8]
 80116b2:	2380      	movs	r3, #128	@ 0x80
 80116b4:	015b      	lsls	r3, r3, #5
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d109      	bne.n	80116ce <HAL_UART_Receive_DMA+0x4a>
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	691b      	ldr	r3, [r3, #16]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d105      	bne.n	80116ce <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	2201      	movs	r2, #1
 80116c6:	4013      	ands	r3, r2
 80116c8:	d001      	beq.n	80116ce <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80116ca:	2301      	movs	r3, #1
 80116cc:	e032      	b.n	8011734 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2200      	movs	r2, #0
 80116d2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	4a18      	ldr	r2, [pc, #96]	@ (801173c <HAL_UART_Receive_DMA+0xb8>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d020      	beq.n	8011720 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	685a      	ldr	r2, [r3, #4]
 80116e4:	2380      	movs	r3, #128	@ 0x80
 80116e6:	041b      	lsls	r3, r3, #16
 80116e8:	4013      	ands	r3, r2
 80116ea:	d019      	beq.n	8011720 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116ec:	f3ef 8310 	mrs	r3, PRIMASK
 80116f0:	613b      	str	r3, [r7, #16]
  return(result);
 80116f2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80116f4:	61fb      	str	r3, [r7, #28]
 80116f6:	2301      	movs	r3, #1
 80116f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	f383 8810 	msr	PRIMASK, r3
}
 8011700:	46c0      	nop			@ (mov r8, r8)
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	2180      	movs	r1, #128	@ 0x80
 801170e:	04c9      	lsls	r1, r1, #19
 8011710:	430a      	orrs	r2, r1
 8011712:	601a      	str	r2, [r3, #0]
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	f383 8810 	msr	PRIMASK, r3
}
 801171e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011720:	1dbb      	adds	r3, r7, #6
 8011722:	881a      	ldrh	r2, [r3, #0]
 8011724:	68b9      	ldr	r1, [r7, #8]
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	0018      	movs	r0, r3
 801172a:	f000 ffd9 	bl	80126e0 <UART_Start_Receive_DMA>
 801172e:	0003      	movs	r3, r0
 8011730:	e000      	b.n	8011734 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8011732:	2302      	movs	r3, #2
  }
}
 8011734:	0018      	movs	r0, r3
 8011736:	46bd      	mov	sp, r7
 8011738:	b008      	add	sp, #32
 801173a:	bd80      	pop	{r7, pc}
 801173c:	40004800 	.word	0x40004800

08011740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011740:	b590      	push	{r4, r7, lr}
 8011742:	b0ab      	sub	sp, #172	@ 0xac
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	69db      	ldr	r3, [r3, #28]
 801174e:	22a4      	movs	r2, #164	@ 0xa4
 8011750:	18b9      	adds	r1, r7, r2
 8011752:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	20a0      	movs	r0, #160	@ 0xa0
 801175c:	1839      	adds	r1, r7, r0
 801175e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	689b      	ldr	r3, [r3, #8]
 8011766:	219c      	movs	r1, #156	@ 0x9c
 8011768:	1879      	adds	r1, r7, r1
 801176a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801176c:	0011      	movs	r1, r2
 801176e:	18bb      	adds	r3, r7, r2
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	4a9c      	ldr	r2, [pc, #624]	@ (80119e4 <HAL_UART_IRQHandler+0x2a4>)
 8011774:	4013      	ands	r3, r2
 8011776:	2298      	movs	r2, #152	@ 0x98
 8011778:	18bc      	adds	r4, r7, r2
 801177a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801177c:	18bb      	adds	r3, r7, r2
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d114      	bne.n	80117ae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011784:	187b      	adds	r3, r7, r1
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	2220      	movs	r2, #32
 801178a:	4013      	ands	r3, r2
 801178c:	d00f      	beq.n	80117ae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801178e:	183b      	adds	r3, r7, r0
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	2220      	movs	r2, #32
 8011794:	4013      	ands	r3, r2
 8011796:	d00a      	beq.n	80117ae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801179c:	2b00      	cmp	r3, #0
 801179e:	d100      	bne.n	80117a2 <HAL_UART_IRQHandler+0x62>
 80117a0:	e2aa      	b.n	8011cf8 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	0010      	movs	r0, r2
 80117aa:	4798      	blx	r3
      }
      return;
 80117ac:	e2a4      	b.n	8011cf8 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80117ae:	2398      	movs	r3, #152	@ 0x98
 80117b0:	18fb      	adds	r3, r7, r3
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d100      	bne.n	80117ba <HAL_UART_IRQHandler+0x7a>
 80117b8:	e11a      	b.n	80119f0 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80117ba:	239c      	movs	r3, #156	@ 0x9c
 80117bc:	18fb      	adds	r3, r7, r3
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2201      	movs	r2, #1
 80117c2:	4013      	ands	r3, r2
 80117c4:	d106      	bne.n	80117d4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80117c6:	23a0      	movs	r3, #160	@ 0xa0
 80117c8:	18fb      	adds	r3, r7, r3
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4a86      	ldr	r2, [pc, #536]	@ (80119e8 <HAL_UART_IRQHandler+0x2a8>)
 80117ce:	4013      	ands	r3, r2
 80117d0:	d100      	bne.n	80117d4 <HAL_UART_IRQHandler+0x94>
 80117d2:	e10d      	b.n	80119f0 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80117d4:	23a4      	movs	r3, #164	@ 0xa4
 80117d6:	18fb      	adds	r3, r7, r3
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	2201      	movs	r2, #1
 80117dc:	4013      	ands	r3, r2
 80117de:	d012      	beq.n	8011806 <HAL_UART_IRQHandler+0xc6>
 80117e0:	23a0      	movs	r3, #160	@ 0xa0
 80117e2:	18fb      	adds	r3, r7, r3
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	2380      	movs	r3, #128	@ 0x80
 80117e8:	005b      	lsls	r3, r3, #1
 80117ea:	4013      	ands	r3, r2
 80117ec:	d00b      	beq.n	8011806 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2201      	movs	r2, #1
 80117f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2284      	movs	r2, #132	@ 0x84
 80117fa:	589b      	ldr	r3, [r3, r2]
 80117fc:	2201      	movs	r2, #1
 80117fe:	431a      	orrs	r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2184      	movs	r1, #132	@ 0x84
 8011804:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011806:	23a4      	movs	r3, #164	@ 0xa4
 8011808:	18fb      	adds	r3, r7, r3
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2202      	movs	r2, #2
 801180e:	4013      	ands	r3, r2
 8011810:	d011      	beq.n	8011836 <HAL_UART_IRQHandler+0xf6>
 8011812:	239c      	movs	r3, #156	@ 0x9c
 8011814:	18fb      	adds	r3, r7, r3
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2201      	movs	r2, #1
 801181a:	4013      	ands	r3, r2
 801181c:	d00b      	beq.n	8011836 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	2202      	movs	r2, #2
 8011824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2284      	movs	r2, #132	@ 0x84
 801182a:	589b      	ldr	r3, [r3, r2]
 801182c:	2204      	movs	r2, #4
 801182e:	431a      	orrs	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2184      	movs	r1, #132	@ 0x84
 8011834:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011836:	23a4      	movs	r3, #164	@ 0xa4
 8011838:	18fb      	adds	r3, r7, r3
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	2204      	movs	r2, #4
 801183e:	4013      	ands	r3, r2
 8011840:	d011      	beq.n	8011866 <HAL_UART_IRQHandler+0x126>
 8011842:	239c      	movs	r3, #156	@ 0x9c
 8011844:	18fb      	adds	r3, r7, r3
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	2201      	movs	r2, #1
 801184a:	4013      	ands	r3, r2
 801184c:	d00b      	beq.n	8011866 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2204      	movs	r2, #4
 8011854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2284      	movs	r2, #132	@ 0x84
 801185a:	589b      	ldr	r3, [r3, r2]
 801185c:	2202      	movs	r2, #2
 801185e:	431a      	orrs	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2184      	movs	r1, #132	@ 0x84
 8011864:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011866:	23a4      	movs	r3, #164	@ 0xa4
 8011868:	18fb      	adds	r3, r7, r3
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	2208      	movs	r2, #8
 801186e:	4013      	ands	r3, r2
 8011870:	d017      	beq.n	80118a2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011872:	23a0      	movs	r3, #160	@ 0xa0
 8011874:	18fb      	adds	r3, r7, r3
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2220      	movs	r2, #32
 801187a:	4013      	ands	r3, r2
 801187c:	d105      	bne.n	801188a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801187e:	239c      	movs	r3, #156	@ 0x9c
 8011880:	18fb      	adds	r3, r7, r3
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2201      	movs	r2, #1
 8011886:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011888:	d00b      	beq.n	80118a2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2208      	movs	r2, #8
 8011890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2284      	movs	r2, #132	@ 0x84
 8011896:	589b      	ldr	r3, [r3, r2]
 8011898:	2208      	movs	r2, #8
 801189a:	431a      	orrs	r2, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2184      	movs	r1, #132	@ 0x84
 80118a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80118a2:	23a4      	movs	r3, #164	@ 0xa4
 80118a4:	18fb      	adds	r3, r7, r3
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	2380      	movs	r3, #128	@ 0x80
 80118aa:	011b      	lsls	r3, r3, #4
 80118ac:	4013      	ands	r3, r2
 80118ae:	d013      	beq.n	80118d8 <HAL_UART_IRQHandler+0x198>
 80118b0:	23a0      	movs	r3, #160	@ 0xa0
 80118b2:	18fb      	adds	r3, r7, r3
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	2380      	movs	r3, #128	@ 0x80
 80118b8:	04db      	lsls	r3, r3, #19
 80118ba:	4013      	ands	r3, r2
 80118bc:	d00c      	beq.n	80118d8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2280      	movs	r2, #128	@ 0x80
 80118c4:	0112      	lsls	r2, r2, #4
 80118c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2284      	movs	r2, #132	@ 0x84
 80118cc:	589b      	ldr	r3, [r3, r2]
 80118ce:	2220      	movs	r2, #32
 80118d0:	431a      	orrs	r2, r3
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2184      	movs	r1, #132	@ 0x84
 80118d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2284      	movs	r2, #132	@ 0x84
 80118dc:	589b      	ldr	r3, [r3, r2]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d100      	bne.n	80118e4 <HAL_UART_IRQHandler+0x1a4>
 80118e2:	e20b      	b.n	8011cfc <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80118e4:	23a4      	movs	r3, #164	@ 0xa4
 80118e6:	18fb      	adds	r3, r7, r3
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2220      	movs	r2, #32
 80118ec:	4013      	ands	r3, r2
 80118ee:	d00e      	beq.n	801190e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80118f0:	23a0      	movs	r3, #160	@ 0xa0
 80118f2:	18fb      	adds	r3, r7, r3
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	2220      	movs	r2, #32
 80118f8:	4013      	ands	r3, r2
 80118fa:	d008      	beq.n	801190e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011900:	2b00      	cmp	r3, #0
 8011902:	d004      	beq.n	801190e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	0010      	movs	r0, r2
 801190c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2284      	movs	r2, #132	@ 0x84
 8011912:	589b      	ldr	r3, [r3, r2]
 8011914:	2194      	movs	r1, #148	@ 0x94
 8011916:	187a      	adds	r2, r7, r1
 8011918:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	689b      	ldr	r3, [r3, #8]
 8011920:	2240      	movs	r2, #64	@ 0x40
 8011922:	4013      	ands	r3, r2
 8011924:	2b40      	cmp	r3, #64	@ 0x40
 8011926:	d004      	beq.n	8011932 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011928:	187b      	adds	r3, r7, r1
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2228      	movs	r2, #40	@ 0x28
 801192e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011930:	d04b      	beq.n	80119ca <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	0018      	movs	r0, r3
 8011936:	f000 ff97 	bl	8012868 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	689b      	ldr	r3, [r3, #8]
 8011940:	2240      	movs	r2, #64	@ 0x40
 8011942:	4013      	ands	r3, r2
 8011944:	2b40      	cmp	r3, #64	@ 0x40
 8011946:	d139      	bne.n	80119bc <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011948:	f3ef 8310 	mrs	r3, PRIMASK
 801194c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801194e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011950:	2090      	movs	r0, #144	@ 0x90
 8011952:	183a      	adds	r2, r7, r0
 8011954:	6013      	str	r3, [r2, #0]
 8011956:	2301      	movs	r3, #1
 8011958:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801195a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801195c:	f383 8810 	msr	PRIMASK, r3
}
 8011960:	46c0      	nop			@ (mov r8, r8)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	689a      	ldr	r2, [r3, #8]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2140      	movs	r1, #64	@ 0x40
 801196e:	438a      	bics	r2, r1
 8011970:	609a      	str	r2, [r3, #8]
 8011972:	183b      	adds	r3, r7, r0
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801197a:	f383 8810 	msr	PRIMASK, r3
}
 801197e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011984:	2b00      	cmp	r3, #0
 8011986:	d012      	beq.n	80119ae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801198c:	4a17      	ldr	r2, [pc, #92]	@ (80119ec <HAL_UART_IRQHandler+0x2ac>)
 801198e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011994:	0018      	movs	r0, r3
 8011996:	f7f9 f8bb 	bl	800ab10 <HAL_DMA_Abort_IT>
 801199a:	1e03      	subs	r3, r0, #0
 801199c:	d020      	beq.n	80119e0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119a8:	0018      	movs	r0, r3
 80119aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119ac:	e018      	b.n	80119e0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2298      	movs	r2, #152	@ 0x98
 80119b2:	589b      	ldr	r3, [r3, r2]
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	0010      	movs	r0, r2
 80119b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119ba:	e011      	b.n	80119e0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2298      	movs	r2, #152	@ 0x98
 80119c0:	589b      	ldr	r3, [r3, r2]
 80119c2:	687a      	ldr	r2, [r7, #4]
 80119c4:	0010      	movs	r0, r2
 80119c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119c8:	e00a      	b.n	80119e0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2298      	movs	r2, #152	@ 0x98
 80119ce:	589b      	ldr	r3, [r3, r2]
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	0010      	movs	r0, r2
 80119d4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2284      	movs	r2, #132	@ 0x84
 80119da:	2100      	movs	r1, #0
 80119dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80119de:	e18d      	b.n	8011cfc <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119e0:	46c0      	nop			@ (mov r8, r8)
    return;
 80119e2:	e18b      	b.n	8011cfc <HAL_UART_IRQHandler+0x5bc>
 80119e4:	0000080f 	.word	0x0000080f
 80119e8:	04000120 	.word	0x04000120
 80119ec:	08012bf5 	.word	0x08012bf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	d000      	beq.n	80119fa <HAL_UART_IRQHandler+0x2ba>
 80119f8:	e13d      	b.n	8011c76 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80119fa:	23a4      	movs	r3, #164	@ 0xa4
 80119fc:	18fb      	adds	r3, r7, r3
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2210      	movs	r2, #16
 8011a02:	4013      	ands	r3, r2
 8011a04:	d100      	bne.n	8011a08 <HAL_UART_IRQHandler+0x2c8>
 8011a06:	e136      	b.n	8011c76 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011a08:	23a0      	movs	r3, #160	@ 0xa0
 8011a0a:	18fb      	adds	r3, r7, r3
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2210      	movs	r2, #16
 8011a10:	4013      	ands	r3, r2
 8011a12:	d100      	bne.n	8011a16 <HAL_UART_IRQHandler+0x2d6>
 8011a14:	e12f      	b.n	8011c76 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2210      	movs	r2, #16
 8011a1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	2240      	movs	r2, #64	@ 0x40
 8011a26:	4013      	ands	r3, r2
 8011a28:	2b40      	cmp	r3, #64	@ 0x40
 8011a2a:	d000      	beq.n	8011a2e <HAL_UART_IRQHandler+0x2ee>
 8011a2c:	e0a2      	b.n	8011b74 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	685a      	ldr	r2, [r3, #4]
 8011a36:	217e      	movs	r1, #126	@ 0x7e
 8011a38:	187b      	adds	r3, r7, r1
 8011a3a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8011a3c:	187b      	adds	r3, r7, r1
 8011a3e:	881b      	ldrh	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d100      	bne.n	8011a46 <HAL_UART_IRQHandler+0x306>
 8011a44:	e15c      	b.n	8011d00 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2258      	movs	r2, #88	@ 0x58
 8011a4a:	5a9b      	ldrh	r3, [r3, r2]
 8011a4c:	187a      	adds	r2, r7, r1
 8011a4e:	8812      	ldrh	r2, [r2, #0]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d300      	bcc.n	8011a56 <HAL_UART_IRQHandler+0x316>
 8011a54:	e154      	b.n	8011d00 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	187a      	adds	r2, r7, r1
 8011a5a:	215a      	movs	r1, #90	@ 0x5a
 8011a5c:	8812      	ldrh	r2, [r2, #0]
 8011a5e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2220      	movs	r2, #32
 8011a6a:	4013      	ands	r3, r2
 8011a6c:	d16f      	bne.n	8011b4e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a72:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8011a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011a76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011a78:	2301      	movs	r3, #1
 8011a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a7e:	f383 8810 	msr	PRIMASK, r3
}
 8011a82:	46c0      	nop			@ (mov r8, r8)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	681a      	ldr	r2, [r3, #0]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	49a0      	ldr	r1, [pc, #640]	@ (8011d10 <HAL_UART_IRQHandler+0x5d0>)
 8011a90:	400a      	ands	r2, r1
 8011a92:	601a      	str	r2, [r3, #0]
 8011a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011a96:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a9a:	f383 8810 	msr	PRIMASK, r3
}
 8011a9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8011aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8011aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011aa8:	677b      	str	r3, [r7, #116]	@ 0x74
 8011aaa:	2301      	movs	r3, #1
 8011aac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ab0:	f383 8810 	msr	PRIMASK, r3
}
 8011ab4:	46c0      	nop			@ (mov r8, r8)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	689a      	ldr	r2, [r3, #8]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	2101      	movs	r1, #1
 8011ac2:	438a      	bics	r2, r1
 8011ac4:	609a      	str	r2, [r3, #8]
 8011ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011ac8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011acc:	f383 8810 	msr	PRIMASK, r3
}
 8011ad0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8011ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8011ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011ada:	673b      	str	r3, [r7, #112]	@ 0x70
 8011adc:	2301      	movs	r3, #1
 8011ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ae2:	f383 8810 	msr	PRIMASK, r3
}
 8011ae6:	46c0      	nop			@ (mov r8, r8)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	689a      	ldr	r2, [r3, #8]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2140      	movs	r1, #64	@ 0x40
 8011af4:	438a      	bics	r2, r1
 8011af6:	609a      	str	r2, [r3, #8]
 8011af8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011afa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011afe:	f383 8810 	msr	PRIMASK, r3
}
 8011b02:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2280      	movs	r2, #128	@ 0x80
 8011b08:	2120      	movs	r1, #32
 8011b0a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b12:	f3ef 8310 	mrs	r3, PRIMASK
 8011b16:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8011b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b22:	f383 8810 	msr	PRIMASK, r3
}
 8011b26:	46c0      	nop			@ (mov r8, r8)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	2110      	movs	r1, #16
 8011b34:	438a      	bics	r2, r1
 8011b36:	601a      	str	r2, [r3, #0]
 8011b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b3e:	f383 8810 	msr	PRIMASK, r3
}
 8011b42:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b48:	0018      	movs	r0, r3
 8011b4a:	f7f8 ffa1 	bl	800aa90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2202      	movs	r2, #2
 8011b52:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	22ac      	movs	r2, #172	@ 0xac
 8011b58:	589b      	ldr	r3, [r3, r2]
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	2158      	movs	r1, #88	@ 0x58
 8011b5e:	5a51      	ldrh	r1, [r2, r1]
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	205a      	movs	r0, #90	@ 0x5a
 8011b64:	5a12      	ldrh	r2, [r2, r0]
 8011b66:	b292      	uxth	r2, r2
 8011b68:	1a8a      	subs	r2, r1, r2
 8011b6a:	b291      	uxth	r1, r2
 8011b6c:	687a      	ldr	r2, [r7, #4]
 8011b6e:	0010      	movs	r0, r2
 8011b70:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011b72:	e0c5      	b.n	8011d00 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2258      	movs	r2, #88	@ 0x58
 8011b78:	5a99      	ldrh	r1, [r3, r2]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	225a      	movs	r2, #90	@ 0x5a
 8011b7e:	5a9b      	ldrh	r3, [r3, r2]
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	208e      	movs	r0, #142	@ 0x8e
 8011b84:	183b      	adds	r3, r7, r0
 8011b86:	1a8a      	subs	r2, r1, r2
 8011b88:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	225a      	movs	r2, #90	@ 0x5a
 8011b8e:	5a9b      	ldrh	r3, [r3, r2]
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d100      	bne.n	8011b98 <HAL_UART_IRQHandler+0x458>
 8011b96:	e0b5      	b.n	8011d04 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8011b98:	183b      	adds	r3, r7, r0
 8011b9a:	881b      	ldrh	r3, [r3, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d100      	bne.n	8011ba2 <HAL_UART_IRQHandler+0x462>
 8011ba0:	e0b0      	b.n	8011d04 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8011ba6:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011baa:	2488      	movs	r4, #136	@ 0x88
 8011bac:	193a      	adds	r2, r7, r4
 8011bae:	6013      	str	r3, [r2, #0]
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	f383 8810 	msr	PRIMASK, r3
}
 8011bba:	46c0      	nop			@ (mov r8, r8)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	681a      	ldr	r2, [r3, #0]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	4953      	ldr	r1, [pc, #332]	@ (8011d14 <HAL_UART_IRQHandler+0x5d4>)
 8011bc8:	400a      	ands	r2, r1
 8011bca:	601a      	str	r2, [r3, #0]
 8011bcc:	193b      	adds	r3, r7, r4
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	f383 8810 	msr	PRIMASK, r3
}
 8011bd8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bda:	f3ef 8310 	mrs	r3, PRIMASK
 8011bde:	61bb      	str	r3, [r7, #24]
  return(result);
 8011be0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011be2:	2484      	movs	r4, #132	@ 0x84
 8011be4:	193a      	adds	r2, r7, r4
 8011be6:	6013      	str	r3, [r2, #0]
 8011be8:	2301      	movs	r3, #1
 8011bea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	f383 8810 	msr	PRIMASK, r3
}
 8011bf2:	46c0      	nop			@ (mov r8, r8)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	689a      	ldr	r2, [r3, #8]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	2101      	movs	r1, #1
 8011c00:	438a      	bics	r2, r1
 8011c02:	609a      	str	r2, [r3, #8]
 8011c04:	193b      	adds	r3, r7, r4
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c0a:	6a3b      	ldr	r3, [r7, #32]
 8011c0c:	f383 8810 	msr	PRIMASK, r3
}
 8011c10:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2280      	movs	r2, #128	@ 0x80
 8011c16:	2120      	movs	r1, #32
 8011c18:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2200      	movs	r2, #0
 8011c24:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c26:	f3ef 8310 	mrs	r3, PRIMASK
 8011c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c2e:	2480      	movs	r4, #128	@ 0x80
 8011c30:	193a      	adds	r2, r7, r4
 8011c32:	6013      	str	r3, [r2, #0]
 8011c34:	2301      	movs	r3, #1
 8011c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c3a:	f383 8810 	msr	PRIMASK, r3
}
 8011c3e:	46c0      	nop			@ (mov r8, r8)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2110      	movs	r1, #16
 8011c4c:	438a      	bics	r2, r1
 8011c4e:	601a      	str	r2, [r3, #0]
 8011c50:	193b      	adds	r3, r7, r4
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c58:	f383 8810 	msr	PRIMASK, r3
}
 8011c5c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2202      	movs	r2, #2
 8011c62:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	22ac      	movs	r2, #172	@ 0xac
 8011c68:	589b      	ldr	r3, [r3, r2]
 8011c6a:	183a      	adds	r2, r7, r0
 8011c6c:	8811      	ldrh	r1, [r2, #0]
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	0010      	movs	r0, r2
 8011c72:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011c74:	e046      	b.n	8011d04 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011c76:	23a4      	movs	r3, #164	@ 0xa4
 8011c78:	18fb      	adds	r3, r7, r3
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	2380      	movs	r3, #128	@ 0x80
 8011c7e:	035b      	lsls	r3, r3, #13
 8011c80:	4013      	ands	r3, r2
 8011c82:	d012      	beq.n	8011caa <HAL_UART_IRQHandler+0x56a>
 8011c84:	239c      	movs	r3, #156	@ 0x9c
 8011c86:	18fb      	adds	r3, r7, r3
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	2380      	movs	r3, #128	@ 0x80
 8011c8c:	03db      	lsls	r3, r3, #15
 8011c8e:	4013      	ands	r3, r2
 8011c90:	d00b      	beq.n	8011caa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2280      	movs	r2, #128	@ 0x80
 8011c98:	0352      	lsls	r2, r2, #13
 8011c9a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	22a8      	movs	r2, #168	@ 0xa8
 8011ca0:	589b      	ldr	r3, [r3, r2]
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	0010      	movs	r0, r2
 8011ca6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011ca8:	e02f      	b.n	8011d0a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011caa:	23a4      	movs	r3, #164	@ 0xa4
 8011cac:	18fb      	adds	r3, r7, r3
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2280      	movs	r2, #128	@ 0x80
 8011cb2:	4013      	ands	r3, r2
 8011cb4:	d00f      	beq.n	8011cd6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011cb6:	23a0      	movs	r3, #160	@ 0xa0
 8011cb8:	18fb      	adds	r3, r7, r3
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	2280      	movs	r2, #128	@ 0x80
 8011cbe:	4013      	ands	r3, r2
 8011cc0:	d009      	beq.n	8011cd6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d01e      	beq.n	8011d08 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	0010      	movs	r0, r2
 8011cd2:	4798      	blx	r3
    }
    return;
 8011cd4:	e018      	b.n	8011d08 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011cd6:	23a4      	movs	r3, #164	@ 0xa4
 8011cd8:	18fb      	adds	r3, r7, r3
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	2240      	movs	r2, #64	@ 0x40
 8011cde:	4013      	ands	r3, r2
 8011ce0:	d013      	beq.n	8011d0a <HAL_UART_IRQHandler+0x5ca>
 8011ce2:	23a0      	movs	r3, #160	@ 0xa0
 8011ce4:	18fb      	adds	r3, r7, r3
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2240      	movs	r2, #64	@ 0x40
 8011cea:	4013      	ands	r3, r2
 8011cec:	d00d      	beq.n	8011d0a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	0018      	movs	r0, r3
 8011cf2:	f000 ff98 	bl	8012c26 <UART_EndTransmit_IT>
    return;
 8011cf6:	e008      	b.n	8011d0a <HAL_UART_IRQHandler+0x5ca>
      return;
 8011cf8:	46c0      	nop			@ (mov r8, r8)
 8011cfa:	e006      	b.n	8011d0a <HAL_UART_IRQHandler+0x5ca>
    return;
 8011cfc:	46c0      	nop			@ (mov r8, r8)
 8011cfe:	e004      	b.n	8011d0a <HAL_UART_IRQHandler+0x5ca>
      return;
 8011d00:	46c0      	nop			@ (mov r8, r8)
 8011d02:	e002      	b.n	8011d0a <HAL_UART_IRQHandler+0x5ca>
      return;
 8011d04:	46c0      	nop			@ (mov r8, r8)
 8011d06:	e000      	b.n	8011d0a <HAL_UART_IRQHandler+0x5ca>
    return;
 8011d08:	46c0      	nop			@ (mov r8, r8)
  }

}
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	b02b      	add	sp, #172	@ 0xac
 8011d0e:	bd90      	pop	{r4, r7, pc}
 8011d10:	fffffeff 	.word	0xfffffeff
 8011d14:	fffffedf 	.word	0xfffffedf

08011d18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011d20:	46c0      	nop			@ (mov r8, r8)
 8011d22:	46bd      	mov	sp, r7
 8011d24:	b002      	add	sp, #8
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011d30:	46c0      	nop			@ (mov r8, r8)
 8011d32:	46bd      	mov	sp, r7
 8011d34:	b002      	add	sp, #8
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011d40:	46c0      	nop			@ (mov r8, r8)
 8011d42:	46bd      	mov	sp, r7
 8011d44:	b002      	add	sp, #8
 8011d46:	bd80      	pop	{r7, pc}

08011d48 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8011d50:	46c0      	nop			@ (mov r8, r8)
 8011d52:	46bd      	mov	sp, r7
 8011d54:	b002      	add	sp, #8
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8011d60:	46c0      	nop			@ (mov r8, r8)
 8011d62:	46bd      	mov	sp, r7
 8011d64:	b002      	add	sp, #8
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8011d70:	46c0      	nop			@ (mov r8, r8)
 8011d72:	46bd      	mov	sp, r7
 8011d74:	b002      	add	sp, #8
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b082      	sub	sp, #8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	000a      	movs	r2, r1
 8011d82:	1cbb      	adds	r3, r7, #2
 8011d84:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011d86:	46c0      	nop			@ (mov r8, r8)
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	b002      	add	sp, #8
 8011d8c:	bd80      	pop	{r7, pc}
	...

08011d90 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2188      	movs	r1, #136	@ 0x88
 8011d9c:	4a14      	ldr	r2, [pc, #80]	@ (8011df0 <UART_InitCallbacksToDefault+0x60>)
 8011d9e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	218c      	movs	r1, #140	@ 0x8c
 8011da4:	4a13      	ldr	r2, [pc, #76]	@ (8011df4 <UART_InitCallbacksToDefault+0x64>)
 8011da6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2190      	movs	r1, #144	@ 0x90
 8011dac:	4a12      	ldr	r2, [pc, #72]	@ (8011df8 <UART_InitCallbacksToDefault+0x68>)
 8011dae:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2194      	movs	r1, #148	@ 0x94
 8011db4:	4a11      	ldr	r2, [pc, #68]	@ (8011dfc <UART_InitCallbacksToDefault+0x6c>)
 8011db6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2198      	movs	r1, #152	@ 0x98
 8011dbc:	4a10      	ldr	r2, [pc, #64]	@ (8011e00 <UART_InitCallbacksToDefault+0x70>)
 8011dbe:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	219c      	movs	r1, #156	@ 0x9c
 8011dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8011e04 <UART_InitCallbacksToDefault+0x74>)
 8011dc6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	21a0      	movs	r1, #160	@ 0xa0
 8011dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8011e08 <UART_InitCallbacksToDefault+0x78>)
 8011dce:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	21a4      	movs	r1, #164	@ 0xa4
 8011dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8011e0c <UART_InitCallbacksToDefault+0x7c>)
 8011dd6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	21a8      	movs	r1, #168	@ 0xa8
 8011ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8011e10 <UART_InitCallbacksToDefault+0x80>)
 8011dde:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	21ac      	movs	r1, #172	@ 0xac
 8011de4:	4a0b      	ldr	r2, [pc, #44]	@ (8011e14 <UART_InitCallbacksToDefault+0x84>)
 8011de6:	505a      	str	r2, [r3, r1]

}
 8011de8:	46c0      	nop			@ (mov r8, r8)
 8011dea:	46bd      	mov	sp, r7
 8011dec:	b002      	add	sp, #8
 8011dee:	bd80      	pop	{r7, pc}
 8011df0:	08011d29 	.word	0x08011d29
 8011df4:	08011d19 	.word	0x08011d19
 8011df8:	08011d39 	.word	0x08011d39
 8011dfc:	08003861 	.word	0x08003861
 8011e00:	0800389d 	.word	0x0800389d
 8011e04:	08011d49 	.word	0x08011d49
 8011e08:	08011d59 	.word	0x08011d59
 8011e0c:	08011d69 	.word	0x08011d69
 8011e10:	08012c81 	.word	0x08012c81
 8011e14:	08011d79 	.word	0x08011d79

08011e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011e18:	b5b0      	push	{r4, r5, r7, lr}
 8011e1a:	b08e      	sub	sp, #56	@ 0x38
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011e20:	231a      	movs	r3, #26
 8011e22:	2218      	movs	r2, #24
 8011e24:	189b      	adds	r3, r3, r2
 8011e26:	19db      	adds	r3, r3, r7
 8011e28:	2200      	movs	r2, #0
 8011e2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	689a      	ldr	r2, [r3, #8]
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	691b      	ldr	r3, [r3, #16]
 8011e34:	431a      	orrs	r2, r3
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	695b      	ldr	r3, [r3, #20]
 8011e3a:	431a      	orrs	r2, r3
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	69db      	ldr	r3, [r3, #28]
 8011e40:	4313      	orrs	r3, r2
 8011e42:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	4ac3      	ldr	r2, [pc, #780]	@ (8012158 <UART_SetConfig+0x340>)
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	0019      	movs	r1, r3
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e56:	430a      	orrs	r2, r1
 8011e58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	4abe      	ldr	r2, [pc, #760]	@ (801215c <UART_SetConfig+0x344>)
 8011e62:	4013      	ands	r3, r2
 8011e64:	0019      	movs	r1, r3
 8011e66:	69fb      	ldr	r3, [r7, #28]
 8011e68:	68da      	ldr	r2, [r3, #12]
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	430a      	orrs	r2, r1
 8011e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	699b      	ldr	r3, [r3, #24]
 8011e76:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4ab8      	ldr	r2, [pc, #736]	@ (8012160 <UART_SetConfig+0x348>)
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	d004      	beq.n	8011e8c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	6a1b      	ldr	r3, [r3, #32]
 8011e86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	689b      	ldr	r3, [r3, #8]
 8011e92:	4ab4      	ldr	r2, [pc, #720]	@ (8012164 <UART_SetConfig+0x34c>)
 8011e94:	4013      	ands	r3, r2
 8011e96:	0019      	movs	r1, r3
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e9e:	430a      	orrs	r2, r1
 8011ea0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011ea2:	69fb      	ldr	r3, [r7, #28]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	4ab0      	ldr	r2, [pc, #704]	@ (8012168 <UART_SetConfig+0x350>)
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d131      	bne.n	8011f10 <UART_SetConfig+0xf8>
 8011eac:	4baf      	ldr	r3, [pc, #700]	@ (801216c <UART_SetConfig+0x354>)
 8011eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011eb0:	2203      	movs	r2, #3
 8011eb2:	4013      	ands	r3, r2
 8011eb4:	2b03      	cmp	r3, #3
 8011eb6:	d01d      	beq.n	8011ef4 <UART_SetConfig+0xdc>
 8011eb8:	d823      	bhi.n	8011f02 <UART_SetConfig+0xea>
 8011eba:	2b02      	cmp	r3, #2
 8011ebc:	d00c      	beq.n	8011ed8 <UART_SetConfig+0xc0>
 8011ebe:	d820      	bhi.n	8011f02 <UART_SetConfig+0xea>
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d002      	beq.n	8011eca <UART_SetConfig+0xb2>
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	d00e      	beq.n	8011ee6 <UART_SetConfig+0xce>
 8011ec8:	e01b      	b.n	8011f02 <UART_SetConfig+0xea>
 8011eca:	231b      	movs	r3, #27
 8011ecc:	2218      	movs	r2, #24
 8011ece:	189b      	adds	r3, r3, r2
 8011ed0:	19db      	adds	r3, r3, r7
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	701a      	strb	r2, [r3, #0]
 8011ed6:	e0b4      	b.n	8012042 <UART_SetConfig+0x22a>
 8011ed8:	231b      	movs	r3, #27
 8011eda:	2218      	movs	r2, #24
 8011edc:	189b      	adds	r3, r3, r2
 8011ede:	19db      	adds	r3, r3, r7
 8011ee0:	2202      	movs	r2, #2
 8011ee2:	701a      	strb	r2, [r3, #0]
 8011ee4:	e0ad      	b.n	8012042 <UART_SetConfig+0x22a>
 8011ee6:	231b      	movs	r3, #27
 8011ee8:	2218      	movs	r2, #24
 8011eea:	189b      	adds	r3, r3, r2
 8011eec:	19db      	adds	r3, r3, r7
 8011eee:	2204      	movs	r2, #4
 8011ef0:	701a      	strb	r2, [r3, #0]
 8011ef2:	e0a6      	b.n	8012042 <UART_SetConfig+0x22a>
 8011ef4:	231b      	movs	r3, #27
 8011ef6:	2218      	movs	r2, #24
 8011ef8:	189b      	adds	r3, r3, r2
 8011efa:	19db      	adds	r3, r3, r7
 8011efc:	2208      	movs	r2, #8
 8011efe:	701a      	strb	r2, [r3, #0]
 8011f00:	e09f      	b.n	8012042 <UART_SetConfig+0x22a>
 8011f02:	231b      	movs	r3, #27
 8011f04:	2218      	movs	r2, #24
 8011f06:	189b      	adds	r3, r3, r2
 8011f08:	19db      	adds	r3, r3, r7
 8011f0a:	2210      	movs	r2, #16
 8011f0c:	701a      	strb	r2, [r3, #0]
 8011f0e:	e098      	b.n	8012042 <UART_SetConfig+0x22a>
 8011f10:	69fb      	ldr	r3, [r7, #28]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4a96      	ldr	r2, [pc, #600]	@ (8012170 <UART_SetConfig+0x358>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d131      	bne.n	8011f7e <UART_SetConfig+0x166>
 8011f1a:	4b94      	ldr	r3, [pc, #592]	@ (801216c <UART_SetConfig+0x354>)
 8011f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f1e:	220c      	movs	r2, #12
 8011f20:	4013      	ands	r3, r2
 8011f22:	2b0c      	cmp	r3, #12
 8011f24:	d01d      	beq.n	8011f62 <UART_SetConfig+0x14a>
 8011f26:	d823      	bhi.n	8011f70 <UART_SetConfig+0x158>
 8011f28:	2b08      	cmp	r3, #8
 8011f2a:	d00c      	beq.n	8011f46 <UART_SetConfig+0x12e>
 8011f2c:	d820      	bhi.n	8011f70 <UART_SetConfig+0x158>
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d002      	beq.n	8011f38 <UART_SetConfig+0x120>
 8011f32:	2b04      	cmp	r3, #4
 8011f34:	d00e      	beq.n	8011f54 <UART_SetConfig+0x13c>
 8011f36:	e01b      	b.n	8011f70 <UART_SetConfig+0x158>
 8011f38:	231b      	movs	r3, #27
 8011f3a:	2218      	movs	r2, #24
 8011f3c:	189b      	adds	r3, r3, r2
 8011f3e:	19db      	adds	r3, r3, r7
 8011f40:	2200      	movs	r2, #0
 8011f42:	701a      	strb	r2, [r3, #0]
 8011f44:	e07d      	b.n	8012042 <UART_SetConfig+0x22a>
 8011f46:	231b      	movs	r3, #27
 8011f48:	2218      	movs	r2, #24
 8011f4a:	189b      	adds	r3, r3, r2
 8011f4c:	19db      	adds	r3, r3, r7
 8011f4e:	2202      	movs	r2, #2
 8011f50:	701a      	strb	r2, [r3, #0]
 8011f52:	e076      	b.n	8012042 <UART_SetConfig+0x22a>
 8011f54:	231b      	movs	r3, #27
 8011f56:	2218      	movs	r2, #24
 8011f58:	189b      	adds	r3, r3, r2
 8011f5a:	19db      	adds	r3, r3, r7
 8011f5c:	2204      	movs	r2, #4
 8011f5e:	701a      	strb	r2, [r3, #0]
 8011f60:	e06f      	b.n	8012042 <UART_SetConfig+0x22a>
 8011f62:	231b      	movs	r3, #27
 8011f64:	2218      	movs	r2, #24
 8011f66:	189b      	adds	r3, r3, r2
 8011f68:	19db      	adds	r3, r3, r7
 8011f6a:	2208      	movs	r2, #8
 8011f6c:	701a      	strb	r2, [r3, #0]
 8011f6e:	e068      	b.n	8012042 <UART_SetConfig+0x22a>
 8011f70:	231b      	movs	r3, #27
 8011f72:	2218      	movs	r2, #24
 8011f74:	189b      	adds	r3, r3, r2
 8011f76:	19db      	adds	r3, r3, r7
 8011f78:	2210      	movs	r2, #16
 8011f7a:	701a      	strb	r2, [r3, #0]
 8011f7c:	e061      	b.n	8012042 <UART_SetConfig+0x22a>
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4a7c      	ldr	r2, [pc, #496]	@ (8012174 <UART_SetConfig+0x35c>)
 8011f84:	4293      	cmp	r3, r2
 8011f86:	d106      	bne.n	8011f96 <UART_SetConfig+0x17e>
 8011f88:	231b      	movs	r3, #27
 8011f8a:	2218      	movs	r2, #24
 8011f8c:	189b      	adds	r3, r3, r2
 8011f8e:	19db      	adds	r3, r3, r7
 8011f90:	2200      	movs	r2, #0
 8011f92:	701a      	strb	r2, [r3, #0]
 8011f94:	e055      	b.n	8012042 <UART_SetConfig+0x22a>
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	4a77      	ldr	r2, [pc, #476]	@ (8012178 <UART_SetConfig+0x360>)
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	d106      	bne.n	8011fae <UART_SetConfig+0x196>
 8011fa0:	231b      	movs	r3, #27
 8011fa2:	2218      	movs	r2, #24
 8011fa4:	189b      	adds	r3, r3, r2
 8011fa6:	19db      	adds	r3, r3, r7
 8011fa8:	2200      	movs	r2, #0
 8011faa:	701a      	strb	r2, [r3, #0]
 8011fac:	e049      	b.n	8012042 <UART_SetConfig+0x22a>
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a6b      	ldr	r2, [pc, #428]	@ (8012160 <UART_SetConfig+0x348>)
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d13e      	bne.n	8012036 <UART_SetConfig+0x21e>
 8011fb8:	4b6c      	ldr	r3, [pc, #432]	@ (801216c <UART_SetConfig+0x354>)
 8011fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011fbc:	23c0      	movs	r3, #192	@ 0xc0
 8011fbe:	011b      	lsls	r3, r3, #4
 8011fc0:	4013      	ands	r3, r2
 8011fc2:	22c0      	movs	r2, #192	@ 0xc0
 8011fc4:	0112      	lsls	r2, r2, #4
 8011fc6:	4293      	cmp	r3, r2
 8011fc8:	d027      	beq.n	801201a <UART_SetConfig+0x202>
 8011fca:	22c0      	movs	r2, #192	@ 0xc0
 8011fcc:	0112      	lsls	r2, r2, #4
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d82a      	bhi.n	8012028 <UART_SetConfig+0x210>
 8011fd2:	2280      	movs	r2, #128	@ 0x80
 8011fd4:	0112      	lsls	r2, r2, #4
 8011fd6:	4293      	cmp	r3, r2
 8011fd8:	d011      	beq.n	8011ffe <UART_SetConfig+0x1e6>
 8011fda:	2280      	movs	r2, #128	@ 0x80
 8011fdc:	0112      	lsls	r2, r2, #4
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	d822      	bhi.n	8012028 <UART_SetConfig+0x210>
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d004      	beq.n	8011ff0 <UART_SetConfig+0x1d8>
 8011fe6:	2280      	movs	r2, #128	@ 0x80
 8011fe8:	00d2      	lsls	r2, r2, #3
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d00e      	beq.n	801200c <UART_SetConfig+0x1f4>
 8011fee:	e01b      	b.n	8012028 <UART_SetConfig+0x210>
 8011ff0:	231b      	movs	r3, #27
 8011ff2:	2218      	movs	r2, #24
 8011ff4:	189b      	adds	r3, r3, r2
 8011ff6:	19db      	adds	r3, r3, r7
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	701a      	strb	r2, [r3, #0]
 8011ffc:	e021      	b.n	8012042 <UART_SetConfig+0x22a>
 8011ffe:	231b      	movs	r3, #27
 8012000:	2218      	movs	r2, #24
 8012002:	189b      	adds	r3, r3, r2
 8012004:	19db      	adds	r3, r3, r7
 8012006:	2202      	movs	r2, #2
 8012008:	701a      	strb	r2, [r3, #0]
 801200a:	e01a      	b.n	8012042 <UART_SetConfig+0x22a>
 801200c:	231b      	movs	r3, #27
 801200e:	2218      	movs	r2, #24
 8012010:	189b      	adds	r3, r3, r2
 8012012:	19db      	adds	r3, r3, r7
 8012014:	2204      	movs	r2, #4
 8012016:	701a      	strb	r2, [r3, #0]
 8012018:	e013      	b.n	8012042 <UART_SetConfig+0x22a>
 801201a:	231b      	movs	r3, #27
 801201c:	2218      	movs	r2, #24
 801201e:	189b      	adds	r3, r3, r2
 8012020:	19db      	adds	r3, r3, r7
 8012022:	2208      	movs	r2, #8
 8012024:	701a      	strb	r2, [r3, #0]
 8012026:	e00c      	b.n	8012042 <UART_SetConfig+0x22a>
 8012028:	231b      	movs	r3, #27
 801202a:	2218      	movs	r2, #24
 801202c:	189b      	adds	r3, r3, r2
 801202e:	19db      	adds	r3, r3, r7
 8012030:	2210      	movs	r2, #16
 8012032:	701a      	strb	r2, [r3, #0]
 8012034:	e005      	b.n	8012042 <UART_SetConfig+0x22a>
 8012036:	231b      	movs	r3, #27
 8012038:	2218      	movs	r2, #24
 801203a:	189b      	adds	r3, r3, r2
 801203c:	19db      	adds	r3, r3, r7
 801203e:	2210      	movs	r2, #16
 8012040:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012042:	69fb      	ldr	r3, [r7, #28]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	4a46      	ldr	r2, [pc, #280]	@ (8012160 <UART_SetConfig+0x348>)
 8012048:	4293      	cmp	r3, r2
 801204a:	d000      	beq.n	801204e <UART_SetConfig+0x236>
 801204c:	e09a      	b.n	8012184 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801204e:	231b      	movs	r3, #27
 8012050:	2218      	movs	r2, #24
 8012052:	189b      	adds	r3, r3, r2
 8012054:	19db      	adds	r3, r3, r7
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	2b08      	cmp	r3, #8
 801205a:	d01d      	beq.n	8012098 <UART_SetConfig+0x280>
 801205c:	dc20      	bgt.n	80120a0 <UART_SetConfig+0x288>
 801205e:	2b04      	cmp	r3, #4
 8012060:	d015      	beq.n	801208e <UART_SetConfig+0x276>
 8012062:	dc1d      	bgt.n	80120a0 <UART_SetConfig+0x288>
 8012064:	2b00      	cmp	r3, #0
 8012066:	d002      	beq.n	801206e <UART_SetConfig+0x256>
 8012068:	2b02      	cmp	r3, #2
 801206a:	d005      	beq.n	8012078 <UART_SetConfig+0x260>
 801206c:	e018      	b.n	80120a0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801206e:	f7fe fa71 	bl	8010554 <HAL_RCC_GetPCLK1Freq>
 8012072:	0003      	movs	r3, r0
 8012074:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012076:	e01c      	b.n	80120b2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012078:	4b3c      	ldr	r3, [pc, #240]	@ (801216c <UART_SetConfig+0x354>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2210      	movs	r2, #16
 801207e:	4013      	ands	r3, r2
 8012080:	d002      	beq.n	8012088 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8012082:	4b3e      	ldr	r3, [pc, #248]	@ (801217c <UART_SetConfig+0x364>)
 8012084:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012086:	e014      	b.n	80120b2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8012088:	4b3d      	ldr	r3, [pc, #244]	@ (8012180 <UART_SetConfig+0x368>)
 801208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801208c:	e011      	b.n	80120b2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801208e:	f7fe f9b1 	bl	80103f4 <HAL_RCC_GetSysClockFreq>
 8012092:	0003      	movs	r3, r0
 8012094:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012096:	e00c      	b.n	80120b2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012098:	2380      	movs	r3, #128	@ 0x80
 801209a:	021b      	lsls	r3, r3, #8
 801209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801209e:	e008      	b.n	80120b2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80120a0:	2300      	movs	r3, #0
 80120a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80120a4:	231a      	movs	r3, #26
 80120a6:	2218      	movs	r2, #24
 80120a8:	189b      	adds	r3, r3, r2
 80120aa:	19db      	adds	r3, r3, r7
 80120ac:	2201      	movs	r2, #1
 80120ae:	701a      	strb	r2, [r3, #0]
        break;
 80120b0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80120b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d100      	bne.n	80120ba <UART_SetConfig+0x2a2>
 80120b8:	e133      	b.n	8012322 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80120ba:	69fb      	ldr	r3, [r7, #28]
 80120bc:	685a      	ldr	r2, [r3, #4]
 80120be:	0013      	movs	r3, r2
 80120c0:	005b      	lsls	r3, r3, #1
 80120c2:	189b      	adds	r3, r3, r2
 80120c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d305      	bcc.n	80120d6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80120d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d906      	bls.n	80120e4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80120d6:	231a      	movs	r3, #26
 80120d8:	2218      	movs	r2, #24
 80120da:	189b      	adds	r3, r3, r2
 80120dc:	19db      	adds	r3, r3, r7
 80120de:	2201      	movs	r2, #1
 80120e0:	701a      	strb	r2, [r3, #0]
 80120e2:	e11e      	b.n	8012322 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80120e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120e6:	613b      	str	r3, [r7, #16]
 80120e8:	2300      	movs	r3, #0
 80120ea:	617b      	str	r3, [r7, #20]
 80120ec:	6939      	ldr	r1, [r7, #16]
 80120ee:	697a      	ldr	r2, [r7, #20]
 80120f0:	000b      	movs	r3, r1
 80120f2:	0e1b      	lsrs	r3, r3, #24
 80120f4:	0010      	movs	r0, r2
 80120f6:	0205      	lsls	r5, r0, #8
 80120f8:	431d      	orrs	r5, r3
 80120fa:	000b      	movs	r3, r1
 80120fc:	021c      	lsls	r4, r3, #8
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	085b      	lsrs	r3, r3, #1
 8012104:	60bb      	str	r3, [r7, #8]
 8012106:	2300      	movs	r3, #0
 8012108:	60fb      	str	r3, [r7, #12]
 801210a:	68b8      	ldr	r0, [r7, #8]
 801210c:	68f9      	ldr	r1, [r7, #12]
 801210e:	1900      	adds	r0, r0, r4
 8012110:	4169      	adcs	r1, r5
 8012112:	69fb      	ldr	r3, [r7, #28]
 8012114:	685b      	ldr	r3, [r3, #4]
 8012116:	603b      	str	r3, [r7, #0]
 8012118:	2300      	movs	r3, #0
 801211a:	607b      	str	r3, [r7, #4]
 801211c:	683a      	ldr	r2, [r7, #0]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f7ee f9fc 	bl	800051c <__aeabi_uldivmod>
 8012124:	0002      	movs	r2, r0
 8012126:	000b      	movs	r3, r1
 8012128:	0013      	movs	r3, r2
 801212a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801212c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801212e:	23c0      	movs	r3, #192	@ 0xc0
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	429a      	cmp	r2, r3
 8012134:	d309      	bcc.n	801214a <UART_SetConfig+0x332>
 8012136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012138:	2380      	movs	r3, #128	@ 0x80
 801213a:	035b      	lsls	r3, r3, #13
 801213c:	429a      	cmp	r2, r3
 801213e:	d204      	bcs.n	801214a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012146:	60da      	str	r2, [r3, #12]
 8012148:	e0eb      	b.n	8012322 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801214a:	231a      	movs	r3, #26
 801214c:	2218      	movs	r2, #24
 801214e:	189b      	adds	r3, r3, r2
 8012150:	19db      	adds	r3, r3, r7
 8012152:	2201      	movs	r2, #1
 8012154:	701a      	strb	r2, [r3, #0]
 8012156:	e0e4      	b.n	8012322 <UART_SetConfig+0x50a>
 8012158:	efff69f3 	.word	0xefff69f3
 801215c:	ffffcfff 	.word	0xffffcfff
 8012160:	40004800 	.word	0x40004800
 8012164:	fffff4ff 	.word	0xfffff4ff
 8012168:	40013800 	.word	0x40013800
 801216c:	40021000 	.word	0x40021000
 8012170:	40004400 	.word	0x40004400
 8012174:	40004c00 	.word	0x40004c00
 8012178:	40005000 	.word	0x40005000
 801217c:	003d0900 	.word	0x003d0900
 8012180:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	69da      	ldr	r2, [r3, #28]
 8012188:	2380      	movs	r3, #128	@ 0x80
 801218a:	021b      	lsls	r3, r3, #8
 801218c:	429a      	cmp	r2, r3
 801218e:	d000      	beq.n	8012192 <UART_SetConfig+0x37a>
 8012190:	e070      	b.n	8012274 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8012192:	231b      	movs	r3, #27
 8012194:	2218      	movs	r2, #24
 8012196:	189b      	adds	r3, r3, r2
 8012198:	19db      	adds	r3, r3, r7
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	2b08      	cmp	r3, #8
 801219e:	d822      	bhi.n	80121e6 <UART_SetConfig+0x3ce>
 80121a0:	009a      	lsls	r2, r3, #2
 80121a2:	4b67      	ldr	r3, [pc, #412]	@ (8012340 <UART_SetConfig+0x528>)
 80121a4:	18d3      	adds	r3, r2, r3
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80121aa:	f7fe f9d3 	bl	8010554 <HAL_RCC_GetPCLK1Freq>
 80121ae:	0003      	movs	r3, r0
 80121b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80121b2:	e021      	b.n	80121f8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80121b4:	f7fe f9e4 	bl	8010580 <HAL_RCC_GetPCLK2Freq>
 80121b8:	0003      	movs	r3, r0
 80121ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80121bc:	e01c      	b.n	80121f8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80121be:	4b61      	ldr	r3, [pc, #388]	@ (8012344 <UART_SetConfig+0x52c>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	2210      	movs	r2, #16
 80121c4:	4013      	ands	r3, r2
 80121c6:	d002      	beq.n	80121ce <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80121c8:	4b5f      	ldr	r3, [pc, #380]	@ (8012348 <UART_SetConfig+0x530>)
 80121ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80121cc:	e014      	b.n	80121f8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80121ce:	4b5f      	ldr	r3, [pc, #380]	@ (801234c <UART_SetConfig+0x534>)
 80121d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80121d2:	e011      	b.n	80121f8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80121d4:	f7fe f90e 	bl	80103f4 <HAL_RCC_GetSysClockFreq>
 80121d8:	0003      	movs	r3, r0
 80121da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80121dc:	e00c      	b.n	80121f8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80121de:	2380      	movs	r3, #128	@ 0x80
 80121e0:	021b      	lsls	r3, r3, #8
 80121e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80121e4:	e008      	b.n	80121f8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80121e6:	2300      	movs	r3, #0
 80121e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80121ea:	231a      	movs	r3, #26
 80121ec:	2218      	movs	r2, #24
 80121ee:	189b      	adds	r3, r3, r2
 80121f0:	19db      	adds	r3, r3, r7
 80121f2:	2201      	movs	r2, #1
 80121f4:	701a      	strb	r2, [r3, #0]
        break;
 80121f6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80121f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d100      	bne.n	8012200 <UART_SetConfig+0x3e8>
 80121fe:	e090      	b.n	8012322 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012202:	005a      	lsls	r2, r3, #1
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	085b      	lsrs	r3, r3, #1
 801220a:	18d2      	adds	r2, r2, r3
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	0019      	movs	r1, r3
 8012212:	0010      	movs	r0, r2
 8012214:	f7ed ff94 	bl	8000140 <__udivsi3>
 8012218:	0003      	movs	r3, r0
 801221a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801221c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801221e:	2b0f      	cmp	r3, #15
 8012220:	d921      	bls.n	8012266 <UART_SetConfig+0x44e>
 8012222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012224:	2380      	movs	r3, #128	@ 0x80
 8012226:	025b      	lsls	r3, r3, #9
 8012228:	429a      	cmp	r2, r3
 801222a:	d21c      	bcs.n	8012266 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801222c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801222e:	b29a      	uxth	r2, r3
 8012230:	200e      	movs	r0, #14
 8012232:	2418      	movs	r4, #24
 8012234:	1903      	adds	r3, r0, r4
 8012236:	19db      	adds	r3, r3, r7
 8012238:	210f      	movs	r1, #15
 801223a:	438a      	bics	r2, r1
 801223c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801223e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012240:	085b      	lsrs	r3, r3, #1
 8012242:	b29b      	uxth	r3, r3
 8012244:	2207      	movs	r2, #7
 8012246:	4013      	ands	r3, r2
 8012248:	b299      	uxth	r1, r3
 801224a:	1903      	adds	r3, r0, r4
 801224c:	19db      	adds	r3, r3, r7
 801224e:	1902      	adds	r2, r0, r4
 8012250:	19d2      	adds	r2, r2, r7
 8012252:	8812      	ldrh	r2, [r2, #0]
 8012254:	430a      	orrs	r2, r1
 8012256:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	1902      	adds	r2, r0, r4
 801225e:	19d2      	adds	r2, r2, r7
 8012260:	8812      	ldrh	r2, [r2, #0]
 8012262:	60da      	str	r2, [r3, #12]
 8012264:	e05d      	b.n	8012322 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8012266:	231a      	movs	r3, #26
 8012268:	2218      	movs	r2, #24
 801226a:	189b      	adds	r3, r3, r2
 801226c:	19db      	adds	r3, r3, r7
 801226e:	2201      	movs	r2, #1
 8012270:	701a      	strb	r2, [r3, #0]
 8012272:	e056      	b.n	8012322 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012274:	231b      	movs	r3, #27
 8012276:	2218      	movs	r2, #24
 8012278:	189b      	adds	r3, r3, r2
 801227a:	19db      	adds	r3, r3, r7
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	2b08      	cmp	r3, #8
 8012280:	d822      	bhi.n	80122c8 <UART_SetConfig+0x4b0>
 8012282:	009a      	lsls	r2, r3, #2
 8012284:	4b32      	ldr	r3, [pc, #200]	@ (8012350 <UART_SetConfig+0x538>)
 8012286:	18d3      	adds	r3, r2, r3
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801228c:	f7fe f962 	bl	8010554 <HAL_RCC_GetPCLK1Freq>
 8012290:	0003      	movs	r3, r0
 8012292:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012294:	e021      	b.n	80122da <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012296:	f7fe f973 	bl	8010580 <HAL_RCC_GetPCLK2Freq>
 801229a:	0003      	movs	r3, r0
 801229c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801229e:	e01c      	b.n	80122da <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80122a0:	4b28      	ldr	r3, [pc, #160]	@ (8012344 <UART_SetConfig+0x52c>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	2210      	movs	r2, #16
 80122a6:	4013      	ands	r3, r2
 80122a8:	d002      	beq.n	80122b0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80122aa:	4b27      	ldr	r3, [pc, #156]	@ (8012348 <UART_SetConfig+0x530>)
 80122ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80122ae:	e014      	b.n	80122da <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80122b0:	4b26      	ldr	r3, [pc, #152]	@ (801234c <UART_SetConfig+0x534>)
 80122b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80122b4:	e011      	b.n	80122da <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80122b6:	f7fe f89d 	bl	80103f4 <HAL_RCC_GetSysClockFreq>
 80122ba:	0003      	movs	r3, r0
 80122bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80122be:	e00c      	b.n	80122da <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80122c0:	2380      	movs	r3, #128	@ 0x80
 80122c2:	021b      	lsls	r3, r3, #8
 80122c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80122c6:	e008      	b.n	80122da <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80122c8:	2300      	movs	r3, #0
 80122ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80122cc:	231a      	movs	r3, #26
 80122ce:	2218      	movs	r2, #24
 80122d0:	189b      	adds	r3, r3, r2
 80122d2:	19db      	adds	r3, r3, r7
 80122d4:	2201      	movs	r2, #1
 80122d6:	701a      	strb	r2, [r3, #0]
        break;
 80122d8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80122da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d020      	beq.n	8012322 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	085a      	lsrs	r2, r3, #1
 80122e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122e8:	18d2      	adds	r2, r2, r3
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	0019      	movs	r1, r3
 80122f0:	0010      	movs	r0, r2
 80122f2:	f7ed ff25 	bl	8000140 <__udivsi3>
 80122f6:	0003      	movs	r3, r0
 80122f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80122fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122fc:	2b0f      	cmp	r3, #15
 80122fe:	d90a      	bls.n	8012316 <UART_SetConfig+0x4fe>
 8012300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012302:	2380      	movs	r3, #128	@ 0x80
 8012304:	025b      	lsls	r3, r3, #9
 8012306:	429a      	cmp	r2, r3
 8012308:	d205      	bcs.n	8012316 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801230a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801230c:	b29a      	uxth	r2, r3
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	60da      	str	r2, [r3, #12]
 8012314:	e005      	b.n	8012322 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8012316:	231a      	movs	r3, #26
 8012318:	2218      	movs	r2, #24
 801231a:	189b      	adds	r3, r3, r2
 801231c:	19db      	adds	r3, r3, r7
 801231e:	2201      	movs	r2, #1
 8012320:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012322:	69fb      	ldr	r3, [r7, #28]
 8012324:	2200      	movs	r2, #0
 8012326:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8012328:	69fb      	ldr	r3, [r7, #28]
 801232a:	2200      	movs	r2, #0
 801232c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801232e:	231a      	movs	r3, #26
 8012330:	2218      	movs	r2, #24
 8012332:	189b      	adds	r3, r3, r2
 8012334:	19db      	adds	r3, r3, r7
 8012336:	781b      	ldrb	r3, [r3, #0]
}
 8012338:	0018      	movs	r0, r3
 801233a:	46bd      	mov	sp, r7
 801233c:	b00e      	add	sp, #56	@ 0x38
 801233e:	bdb0      	pop	{r4, r5, r7, pc}
 8012340:	0801bb74 	.word	0x0801bb74
 8012344:	40021000 	.word	0x40021000
 8012348:	003d0900 	.word	0x003d0900
 801234c:	00f42400 	.word	0x00f42400
 8012350:	0801bb98 	.word	0x0801bb98

08012354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012360:	2201      	movs	r2, #1
 8012362:	4013      	ands	r3, r2
 8012364:	d00b      	beq.n	801237e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	4a4a      	ldr	r2, [pc, #296]	@ (8012498 <UART_AdvFeatureConfig+0x144>)
 801236e:	4013      	ands	r3, r2
 8012370:	0019      	movs	r1, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	430a      	orrs	r2, r1
 801237c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012382:	2202      	movs	r2, #2
 8012384:	4013      	ands	r3, r2
 8012386:	d00b      	beq.n	80123a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	4a43      	ldr	r2, [pc, #268]	@ (801249c <UART_AdvFeatureConfig+0x148>)
 8012390:	4013      	ands	r3, r2
 8012392:	0019      	movs	r1, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	430a      	orrs	r2, r1
 801239e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123a4:	2204      	movs	r2, #4
 80123a6:	4013      	ands	r3, r2
 80123a8:	d00b      	beq.n	80123c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	4a3b      	ldr	r2, [pc, #236]	@ (80124a0 <UART_AdvFeatureConfig+0x14c>)
 80123b2:	4013      	ands	r3, r2
 80123b4:	0019      	movs	r1, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	430a      	orrs	r2, r1
 80123c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123c6:	2208      	movs	r2, #8
 80123c8:	4013      	ands	r3, r2
 80123ca:	d00b      	beq.n	80123e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	4a34      	ldr	r2, [pc, #208]	@ (80124a4 <UART_AdvFeatureConfig+0x150>)
 80123d4:	4013      	ands	r3, r2
 80123d6:	0019      	movs	r1, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	430a      	orrs	r2, r1
 80123e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123e8:	2210      	movs	r2, #16
 80123ea:	4013      	ands	r3, r2
 80123ec:	d00b      	beq.n	8012406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	689b      	ldr	r3, [r3, #8]
 80123f4:	4a2c      	ldr	r2, [pc, #176]	@ (80124a8 <UART_AdvFeatureConfig+0x154>)
 80123f6:	4013      	ands	r3, r2
 80123f8:	0019      	movs	r1, r3
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	430a      	orrs	r2, r1
 8012404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801240a:	2220      	movs	r2, #32
 801240c:	4013      	ands	r3, r2
 801240e:	d00b      	beq.n	8012428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	689b      	ldr	r3, [r3, #8]
 8012416:	4a25      	ldr	r2, [pc, #148]	@ (80124ac <UART_AdvFeatureConfig+0x158>)
 8012418:	4013      	ands	r3, r2
 801241a:	0019      	movs	r1, r3
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	430a      	orrs	r2, r1
 8012426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801242c:	2240      	movs	r2, #64	@ 0x40
 801242e:	4013      	ands	r3, r2
 8012430:	d01d      	beq.n	801246e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	4a1d      	ldr	r2, [pc, #116]	@ (80124b0 <UART_AdvFeatureConfig+0x15c>)
 801243a:	4013      	ands	r3, r2
 801243c:	0019      	movs	r1, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	430a      	orrs	r2, r1
 8012448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801244e:	2380      	movs	r3, #128	@ 0x80
 8012450:	035b      	lsls	r3, r3, #13
 8012452:	429a      	cmp	r2, r3
 8012454:	d10b      	bne.n	801246e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	4a15      	ldr	r2, [pc, #84]	@ (80124b4 <UART_AdvFeatureConfig+0x160>)
 801245e:	4013      	ands	r3, r2
 8012460:	0019      	movs	r1, r3
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	430a      	orrs	r2, r1
 801246c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012472:	2280      	movs	r2, #128	@ 0x80
 8012474:	4013      	ands	r3, r2
 8012476:	d00b      	beq.n	8012490 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	4a0e      	ldr	r2, [pc, #56]	@ (80124b8 <UART_AdvFeatureConfig+0x164>)
 8012480:	4013      	ands	r3, r2
 8012482:	0019      	movs	r1, r3
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	430a      	orrs	r2, r1
 801248e:	605a      	str	r2, [r3, #4]
  }
}
 8012490:	46c0      	nop			@ (mov r8, r8)
 8012492:	46bd      	mov	sp, r7
 8012494:	b002      	add	sp, #8
 8012496:	bd80      	pop	{r7, pc}
 8012498:	fffdffff 	.word	0xfffdffff
 801249c:	fffeffff 	.word	0xfffeffff
 80124a0:	fffbffff 	.word	0xfffbffff
 80124a4:	ffff7fff 	.word	0xffff7fff
 80124a8:	ffffefff 	.word	0xffffefff
 80124ac:	ffffdfff 	.word	0xffffdfff
 80124b0:	ffefffff 	.word	0xffefffff
 80124b4:	ff9fffff 	.word	0xff9fffff
 80124b8:	fff7ffff 	.word	0xfff7ffff

080124bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b092      	sub	sp, #72	@ 0x48
 80124c0:	af02      	add	r7, sp, #8
 80124c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2284      	movs	r2, #132	@ 0x84
 80124c8:	2100      	movs	r1, #0
 80124ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80124cc:	f7f7 fcfc 	bl	8009ec8 <HAL_GetTick>
 80124d0:	0003      	movs	r3, r0
 80124d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2208      	movs	r2, #8
 80124dc:	4013      	ands	r3, r2
 80124de:	2b08      	cmp	r3, #8
 80124e0:	d12c      	bne.n	801253c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80124e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124e4:	2280      	movs	r2, #128	@ 0x80
 80124e6:	0391      	lsls	r1, r2, #14
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	4a46      	ldr	r2, [pc, #280]	@ (8012604 <UART_CheckIdleState+0x148>)
 80124ec:	9200      	str	r2, [sp, #0]
 80124ee:	2200      	movs	r2, #0
 80124f0:	f000 f88c 	bl	801260c <UART_WaitOnFlagUntilTimeout>
 80124f4:	1e03      	subs	r3, r0, #0
 80124f6:	d021      	beq.n	801253c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124f8:	f3ef 8310 	mrs	r3, PRIMASK
 80124fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80124fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8012500:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012502:	2301      	movs	r3, #1
 8012504:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012508:	f383 8810 	msr	PRIMASK, r3
}
 801250c:	46c0      	nop			@ (mov r8, r8)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	2180      	movs	r1, #128	@ 0x80
 801251a:	438a      	bics	r2, r1
 801251c:	601a      	str	r2, [r3, #0]
 801251e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012524:	f383 8810 	msr	PRIMASK, r3
}
 8012528:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2220      	movs	r2, #32
 801252e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2278      	movs	r2, #120	@ 0x78
 8012534:	2100      	movs	r1, #0
 8012536:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012538:	2303      	movs	r3, #3
 801253a:	e05f      	b.n	80125fc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2204      	movs	r2, #4
 8012544:	4013      	ands	r3, r2
 8012546:	2b04      	cmp	r3, #4
 8012548:	d146      	bne.n	80125d8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801254a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801254c:	2280      	movs	r2, #128	@ 0x80
 801254e:	03d1      	lsls	r1, r2, #15
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	4a2c      	ldr	r2, [pc, #176]	@ (8012604 <UART_CheckIdleState+0x148>)
 8012554:	9200      	str	r2, [sp, #0]
 8012556:	2200      	movs	r2, #0
 8012558:	f000 f858 	bl	801260c <UART_WaitOnFlagUntilTimeout>
 801255c:	1e03      	subs	r3, r0, #0
 801255e:	d03b      	beq.n	80125d8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012560:	f3ef 8310 	mrs	r3, PRIMASK
 8012564:	60fb      	str	r3, [r7, #12]
  return(result);
 8012566:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012568:	637b      	str	r3, [r7, #52]	@ 0x34
 801256a:	2301      	movs	r3, #1
 801256c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	f383 8810 	msr	PRIMASK, r3
}
 8012574:	46c0      	nop			@ (mov r8, r8)
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	4921      	ldr	r1, [pc, #132]	@ (8012608 <UART_CheckIdleState+0x14c>)
 8012582:	400a      	ands	r2, r1
 8012584:	601a      	str	r2, [r3, #0]
 8012586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	f383 8810 	msr	PRIMASK, r3
}
 8012590:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012592:	f3ef 8310 	mrs	r3, PRIMASK
 8012596:	61bb      	str	r3, [r7, #24]
  return(result);
 8012598:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801259a:	633b      	str	r3, [r7, #48]	@ 0x30
 801259c:	2301      	movs	r3, #1
 801259e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	f383 8810 	msr	PRIMASK, r3
}
 80125a6:	46c0      	nop			@ (mov r8, r8)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	689a      	ldr	r2, [r3, #8]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	2101      	movs	r1, #1
 80125b4:	438a      	bics	r2, r1
 80125b6:	609a      	str	r2, [r3, #8]
 80125b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125bc:	6a3b      	ldr	r3, [r7, #32]
 80125be:	f383 8810 	msr	PRIMASK, r3
}
 80125c2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2280      	movs	r2, #128	@ 0x80
 80125c8:	2120      	movs	r1, #32
 80125ca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2278      	movs	r2, #120	@ 0x78
 80125d0:	2100      	movs	r1, #0
 80125d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80125d4:	2303      	movs	r3, #3
 80125d6:	e011      	b.n	80125fc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2220      	movs	r2, #32
 80125dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2280      	movs	r2, #128	@ 0x80
 80125e2:	2120      	movs	r1, #32
 80125e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2200      	movs	r2, #0
 80125ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2278      	movs	r2, #120	@ 0x78
 80125f6:	2100      	movs	r1, #0
 80125f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80125fa:	2300      	movs	r3, #0
}
 80125fc:	0018      	movs	r0, r3
 80125fe:	46bd      	mov	sp, r7
 8012600:	b010      	add	sp, #64	@ 0x40
 8012602:	bd80      	pop	{r7, pc}
 8012604:	01ffffff 	.word	0x01ffffff
 8012608:	fffffedf 	.word	0xfffffedf

0801260c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b084      	sub	sp, #16
 8012610:	af00      	add	r7, sp, #0
 8012612:	60f8      	str	r0, [r7, #12]
 8012614:	60b9      	str	r1, [r7, #8]
 8012616:	603b      	str	r3, [r7, #0]
 8012618:	1dfb      	adds	r3, r7, #7
 801261a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801261c:	e04b      	b.n	80126b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801261e:	69bb      	ldr	r3, [r7, #24]
 8012620:	3301      	adds	r3, #1
 8012622:	d048      	beq.n	80126b6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012624:	f7f7 fc50 	bl	8009ec8 <HAL_GetTick>
 8012628:	0002      	movs	r2, r0
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	1ad3      	subs	r3, r2, r3
 801262e:	69ba      	ldr	r2, [r7, #24]
 8012630:	429a      	cmp	r2, r3
 8012632:	d302      	bcc.n	801263a <UART_WaitOnFlagUntilTimeout+0x2e>
 8012634:	69bb      	ldr	r3, [r7, #24]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d101      	bne.n	801263e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801263a:	2303      	movs	r3, #3
 801263c:	e04b      	b.n	80126d6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2204      	movs	r2, #4
 8012646:	4013      	ands	r3, r2
 8012648:	d035      	beq.n	80126b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	69db      	ldr	r3, [r3, #28]
 8012650:	2208      	movs	r2, #8
 8012652:	4013      	ands	r3, r2
 8012654:	2b08      	cmp	r3, #8
 8012656:	d111      	bne.n	801267c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2208      	movs	r2, #8
 801265e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	0018      	movs	r0, r3
 8012664:	f000 f900 	bl	8012868 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	2284      	movs	r2, #132	@ 0x84
 801266c:	2108      	movs	r1, #8
 801266e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	2278      	movs	r2, #120	@ 0x78
 8012674:	2100      	movs	r1, #0
 8012676:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8012678:	2301      	movs	r3, #1
 801267a:	e02c      	b.n	80126d6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	69da      	ldr	r2, [r3, #28]
 8012682:	2380      	movs	r3, #128	@ 0x80
 8012684:	011b      	lsls	r3, r3, #4
 8012686:	401a      	ands	r2, r3
 8012688:	2380      	movs	r3, #128	@ 0x80
 801268a:	011b      	lsls	r3, r3, #4
 801268c:	429a      	cmp	r2, r3
 801268e:	d112      	bne.n	80126b6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	2280      	movs	r2, #128	@ 0x80
 8012696:	0112      	lsls	r2, r2, #4
 8012698:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	0018      	movs	r0, r3
 801269e:	f000 f8e3 	bl	8012868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	2284      	movs	r2, #132	@ 0x84
 80126a6:	2120      	movs	r1, #32
 80126a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2278      	movs	r2, #120	@ 0x78
 80126ae:	2100      	movs	r1, #0
 80126b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80126b2:	2303      	movs	r3, #3
 80126b4:	e00f      	b.n	80126d6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	69db      	ldr	r3, [r3, #28]
 80126bc:	68ba      	ldr	r2, [r7, #8]
 80126be:	4013      	ands	r3, r2
 80126c0:	68ba      	ldr	r2, [r7, #8]
 80126c2:	1ad3      	subs	r3, r2, r3
 80126c4:	425a      	negs	r2, r3
 80126c6:	4153      	adcs	r3, r2
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	001a      	movs	r2, r3
 80126cc:	1dfb      	adds	r3, r7, #7
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d0a4      	beq.n	801261e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80126d4:	2300      	movs	r3, #0
}
 80126d6:	0018      	movs	r0, r3
 80126d8:	46bd      	mov	sp, r7
 80126da:	b004      	add	sp, #16
 80126dc:	bd80      	pop	{r7, pc}
	...

080126e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b090      	sub	sp, #64	@ 0x40
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	1dbb      	adds	r3, r7, #6
 80126ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	68ba      	ldr	r2, [r7, #8]
 80126f2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	1dba      	adds	r2, r7, #6
 80126f8:	2158      	movs	r1, #88	@ 0x58
 80126fa:	8812      	ldrh	r2, [r2, #0]
 80126fc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	2284      	movs	r2, #132	@ 0x84
 8012702:	2100      	movs	r1, #0
 8012704:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	2280      	movs	r2, #128	@ 0x80
 801270a:	2122      	movs	r1, #34	@ 0x22
 801270c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012712:	2b00      	cmp	r3, #0
 8012714:	d028      	beq.n	8012768 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801271a:	4a3e      	ldr	r2, [pc, #248]	@ (8012814 <UART_Start_Receive_DMA+0x134>)
 801271c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012722:	4a3d      	ldr	r2, [pc, #244]	@ (8012818 <UART_Start_Receive_DMA+0x138>)
 8012724:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801272a:	4a3c      	ldr	r2, [pc, #240]	@ (801281c <UART_Start_Receive_DMA+0x13c>)
 801272c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012732:	2200      	movs	r2, #0
 8012734:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	3324      	adds	r3, #36	@ 0x24
 8012740:	0019      	movs	r1, r3
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012746:	001a      	movs	r2, r3
 8012748:	1dbb      	adds	r3, r7, #6
 801274a:	881b      	ldrh	r3, [r3, #0]
 801274c:	f7f8 f93a 	bl	800a9c4 <HAL_DMA_Start_IT>
 8012750:	1e03      	subs	r3, r0, #0
 8012752:	d009      	beq.n	8012768 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	2284      	movs	r2, #132	@ 0x84
 8012758:	2110      	movs	r1, #16
 801275a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2280      	movs	r2, #128	@ 0x80
 8012760:	2120      	movs	r1, #32
 8012762:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8012764:	2301      	movs	r3, #1
 8012766:	e050      	b.n	801280a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	691b      	ldr	r3, [r3, #16]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d019      	beq.n	80127a4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012770:	f3ef 8310 	mrs	r3, PRIMASK
 8012774:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8012776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801277a:	2301      	movs	r3, #1
 801277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012780:	f383 8810 	msr	PRIMASK, r3
}
 8012784:	46c0      	nop			@ (mov r8, r8)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	681a      	ldr	r2, [r3, #0]
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2180      	movs	r1, #128	@ 0x80
 8012792:	0049      	lsls	r1, r1, #1
 8012794:	430a      	orrs	r2, r1
 8012796:	601a      	str	r2, [r3, #0]
 8012798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801279a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801279e:	f383 8810 	msr	PRIMASK, r3
}
 80127a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127a4:	f3ef 8310 	mrs	r3, PRIMASK
 80127a8:	613b      	str	r3, [r7, #16]
  return(result);
 80127aa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80127ae:	2301      	movs	r3, #1
 80127b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	f383 8810 	msr	PRIMASK, r3
}
 80127b8:	46c0      	nop			@ (mov r8, r8)
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	689a      	ldr	r2, [r3, #8]
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2101      	movs	r1, #1
 80127c6:	430a      	orrs	r2, r1
 80127c8:	609a      	str	r2, [r3, #8]
 80127ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127ce:	69bb      	ldr	r3, [r7, #24]
 80127d0:	f383 8810 	msr	PRIMASK, r3
}
 80127d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127d6:	f3ef 8310 	mrs	r3, PRIMASK
 80127da:	61fb      	str	r3, [r7, #28]
  return(result);
 80127dc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80127de:	637b      	str	r3, [r7, #52]	@ 0x34
 80127e0:	2301      	movs	r3, #1
 80127e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127e4:	6a3b      	ldr	r3, [r7, #32]
 80127e6:	f383 8810 	msr	PRIMASK, r3
}
 80127ea:	46c0      	nop			@ (mov r8, r8)
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	689a      	ldr	r2, [r3, #8]
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	2140      	movs	r1, #64	@ 0x40
 80127f8:	430a      	orrs	r2, r1
 80127fa:	609a      	str	r2, [r3, #8]
 80127fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012802:	f383 8810 	msr	PRIMASK, r3
}
 8012806:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8012808:	2300      	movs	r3, #0
}
 801280a:	0018      	movs	r0, r3
 801280c:	46bd      	mov	sp, r7
 801280e:	b010      	add	sp, #64	@ 0x40
 8012810:	bd80      	pop	{r7, pc}
 8012812:	46c0      	nop			@ (mov r8, r8)
 8012814:	080129f1 	.word	0x080129f1
 8012818:	08012b25 	.word	0x08012b25
 801281c:	08012b6d 	.word	0x08012b6d

08012820 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b086      	sub	sp, #24
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012828:	f3ef 8310 	mrs	r3, PRIMASK
 801282c:	60bb      	str	r3, [r7, #8]
  return(result);
 801282e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012830:	617b      	str	r3, [r7, #20]
 8012832:	2301      	movs	r3, #1
 8012834:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	f383 8810 	msr	PRIMASK, r3
}
 801283c:	46c0      	nop			@ (mov r8, r8)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	681a      	ldr	r2, [r3, #0]
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	21c0      	movs	r1, #192	@ 0xc0
 801284a:	438a      	bics	r2, r1
 801284c:	601a      	str	r2, [r3, #0]
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	f383 8810 	msr	PRIMASK, r3
}
 8012858:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2220      	movs	r2, #32
 801285e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8012860:	46c0      	nop			@ (mov r8, r8)
 8012862:	46bd      	mov	sp, r7
 8012864:	b006      	add	sp, #24
 8012866:	bd80      	pop	{r7, pc}

08012868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b08e      	sub	sp, #56	@ 0x38
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012870:	f3ef 8310 	mrs	r3, PRIMASK
 8012874:	617b      	str	r3, [r7, #20]
  return(result);
 8012876:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012878:	637b      	str	r3, [r7, #52]	@ 0x34
 801287a:	2301      	movs	r3, #1
 801287c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	f383 8810 	msr	PRIMASK, r3
}
 8012884:	46c0      	nop			@ (mov r8, r8)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4926      	ldr	r1, [pc, #152]	@ (801292c <UART_EndRxTransfer+0xc4>)
 8012892:	400a      	ands	r2, r1
 8012894:	601a      	str	r2, [r3, #0]
 8012896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	f383 8810 	msr	PRIMASK, r3
}
 80128a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128a2:	f3ef 8310 	mrs	r3, PRIMASK
 80128a6:	623b      	str	r3, [r7, #32]
  return(result);
 80128a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80128ac:	2301      	movs	r3, #1
 80128ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128b2:	f383 8810 	msr	PRIMASK, r3
}
 80128b6:	46c0      	nop			@ (mov r8, r8)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	689a      	ldr	r2, [r3, #8]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2101      	movs	r1, #1
 80128c4:	438a      	bics	r2, r1
 80128c6:	609a      	str	r2, [r3, #8]
 80128c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128ce:	f383 8810 	msr	PRIMASK, r3
}
 80128d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d118      	bne.n	801290e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128dc:	f3ef 8310 	mrs	r3, PRIMASK
 80128e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80128e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128e6:	2301      	movs	r3, #1
 80128e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f383 8810 	msr	PRIMASK, r3
}
 80128f0:	46c0      	nop			@ (mov r8, r8)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2110      	movs	r1, #16
 80128fe:	438a      	bics	r2, r1
 8012900:	601a      	str	r2, [r3, #0]
 8012902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	f383 8810 	msr	PRIMASK, r3
}
 801290c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2280      	movs	r2, #128	@ 0x80
 8012912:	2120      	movs	r1, #32
 8012914:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2200      	movs	r2, #0
 801291a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012922:	46c0      	nop			@ (mov r8, r8)
 8012924:	46bd      	mov	sp, r7
 8012926:	b00e      	add	sp, #56	@ 0x38
 8012928:	bd80      	pop	{r7, pc}
 801292a:	46c0      	nop			@ (mov r8, r8)
 801292c:	fffffedf 	.word	0xfffffedf

08012930 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b08c      	sub	sp, #48	@ 0x30
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801293c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2220      	movs	r2, #32
 8012946:	4013      	ands	r3, r2
 8012948:	d135      	bne.n	80129b6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801294a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801294c:	2252      	movs	r2, #82	@ 0x52
 801294e:	2100      	movs	r1, #0
 8012950:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012952:	f3ef 8310 	mrs	r3, PRIMASK
 8012956:	60fb      	str	r3, [r7, #12]
  return(result);
 8012958:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801295a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801295c:	2301      	movs	r3, #1
 801295e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	f383 8810 	msr	PRIMASK, r3
}
 8012966:	46c0      	nop			@ (mov r8, r8)
 8012968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	689a      	ldr	r2, [r3, #8]
 801296e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	2180      	movs	r1, #128	@ 0x80
 8012974:	438a      	bics	r2, r1
 8012976:	609a      	str	r2, [r3, #8]
 8012978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801297a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	f383 8810 	msr	PRIMASK, r3
}
 8012982:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012984:	f3ef 8310 	mrs	r3, PRIMASK
 8012988:	61bb      	str	r3, [r7, #24]
  return(result);
 801298a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801298c:	627b      	str	r3, [r7, #36]	@ 0x24
 801298e:	2301      	movs	r3, #1
 8012990:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012992:	69fb      	ldr	r3, [r7, #28]
 8012994:	f383 8810 	msr	PRIMASK, r3
}
 8012998:	46c0      	nop			@ (mov r8, r8)
 801299a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	681a      	ldr	r2, [r3, #0]
 80129a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2140      	movs	r1, #64	@ 0x40
 80129a6:	430a      	orrs	r2, r1
 80129a8:	601a      	str	r2, [r3, #0]
 80129aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129ae:	6a3b      	ldr	r3, [r7, #32]
 80129b0:	f383 8810 	msr	PRIMASK, r3
}
 80129b4:	e006      	b.n	80129c4 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 80129b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129b8:	228c      	movs	r2, #140	@ 0x8c
 80129ba:	589b      	ldr	r3, [r3, r2]
 80129bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129be:	0010      	movs	r0, r2
 80129c0:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80129c2:	46c0      	nop			@ (mov r8, r8)
 80129c4:	46c0      	nop			@ (mov r8, r8)
 80129c6:	46bd      	mov	sp, r7
 80129c8:	b00c      	add	sp, #48	@ 0x30
 80129ca:	bd80      	pop	{r7, pc}

080129cc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2288      	movs	r2, #136	@ 0x88
 80129de:	589b      	ldr	r3, [r3, r2]
 80129e0:	68fa      	ldr	r2, [r7, #12]
 80129e2:	0010      	movs	r0, r2
 80129e4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80129e6:	46c0      	nop			@ (mov r8, r8)
 80129e8:	46bd      	mov	sp, r7
 80129ea:	b004      	add	sp, #16
 80129ec:	bd80      	pop	{r7, pc}
	...

080129f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b094      	sub	sp, #80	@ 0x50
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	2220      	movs	r2, #32
 8012a06:	4013      	ands	r3, r2
 8012a08:	d16f      	bne.n	8012aea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8012a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a0c:	225a      	movs	r2, #90	@ 0x5a
 8012a0e:	2100      	movs	r1, #0
 8012a10:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a12:	f3ef 8310 	mrs	r3, PRIMASK
 8012a16:	61bb      	str	r3, [r7, #24]
  return(result);
 8012a18:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	f383 8810 	msr	PRIMASK, r3
}
 8012a26:	46c0      	nop			@ (mov r8, r8)
 8012a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	681a      	ldr	r2, [r3, #0]
 8012a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	493b      	ldr	r1, [pc, #236]	@ (8012b20 <UART_DMAReceiveCplt+0x130>)
 8012a34:	400a      	ands	r2, r1
 8012a36:	601a      	str	r2, [r3, #0]
 8012a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a3c:	6a3b      	ldr	r3, [r7, #32]
 8012a3e:	f383 8810 	msr	PRIMASK, r3
}
 8012a42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a44:	f3ef 8310 	mrs	r3, PRIMASK
 8012a48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8012a4e:	2301      	movs	r3, #1
 8012a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a54:	f383 8810 	msr	PRIMASK, r3
}
 8012a58:	46c0      	nop			@ (mov r8, r8)
 8012a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	689a      	ldr	r2, [r3, #8]
 8012a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	2101      	movs	r1, #1
 8012a66:	438a      	bics	r2, r1
 8012a68:	609a      	str	r2, [r3, #8]
 8012a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a70:	f383 8810 	msr	PRIMASK, r3
}
 8012a74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a76:	f3ef 8310 	mrs	r3, PRIMASK
 8012a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8012a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012a80:	2301      	movs	r3, #1
 8012a82:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a86:	f383 8810 	msr	PRIMASK, r3
}
 8012a8a:	46c0      	nop			@ (mov r8, r8)
 8012a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	689a      	ldr	r2, [r3, #8]
 8012a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2140      	movs	r1, #64	@ 0x40
 8012a98:	438a      	bics	r2, r1
 8012a9a:	609a      	str	r2, [r3, #8]
 8012a9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aa2:	f383 8810 	msr	PRIMASK, r3
}
 8012aa6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012aaa:	2280      	movs	r2, #128	@ 0x80
 8012aac:	2120      	movs	r1, #32
 8012aae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d118      	bne.n	8012aea <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8012abc:	60fb      	str	r3, [r7, #12]
  return(result);
 8012abe:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	f383 8810 	msr	PRIMASK, r3
}
 8012acc:	46c0      	nop			@ (mov r8, r8)
 8012ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	681a      	ldr	r2, [r3, #0]
 8012ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2110      	movs	r1, #16
 8012ada:	438a      	bics	r2, r1
 8012adc:	601a      	str	r2, [r3, #0]
 8012ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ae0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	f383 8810 	msr	PRIMASK, r3
}
 8012ae8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012aec:	2200      	movs	r2, #0
 8012aee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d109      	bne.n	8012b0c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8012af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012afa:	22ac      	movs	r2, #172	@ 0xac
 8012afc:	589b      	ldr	r3, [r3, r2]
 8012afe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012b00:	2158      	movs	r1, #88	@ 0x58
 8012b02:	5a51      	ldrh	r1, [r2, r1]
 8012b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012b06:	0010      	movs	r0, r2
 8012b08:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012b0a:	e005      	b.n	8012b18 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8012b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b0e:	2294      	movs	r2, #148	@ 0x94
 8012b10:	589b      	ldr	r3, [r3, r2]
 8012b12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012b14:	0010      	movs	r0, r2
 8012b16:	4798      	blx	r3
}
 8012b18:	46c0      	nop			@ (mov r8, r8)
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	b014      	add	sp, #80	@ 0x50
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	fffffeff 	.word	0xfffffeff

08012b24 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b084      	sub	sp, #16
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b30:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2201      	movs	r2, #1
 8012b36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d10b      	bne.n	8012b58 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	22ac      	movs	r2, #172	@ 0xac
 8012b44:	589b      	ldr	r3, [r3, r2]
 8012b46:	68fa      	ldr	r2, [r7, #12]
 8012b48:	2158      	movs	r1, #88	@ 0x58
 8012b4a:	5a52      	ldrh	r2, [r2, r1]
 8012b4c:	0852      	lsrs	r2, r2, #1
 8012b4e:	b291      	uxth	r1, r2
 8012b50:	68fa      	ldr	r2, [r7, #12]
 8012b52:	0010      	movs	r0, r2
 8012b54:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012b56:	e005      	b.n	8012b64 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2290      	movs	r2, #144	@ 0x90
 8012b5c:	589b      	ldr	r3, [r3, r2]
 8012b5e:	68fa      	ldr	r2, [r7, #12]
 8012b60:	0010      	movs	r0, r2
 8012b62:	4798      	blx	r3
}
 8012b64:	46c0      	nop			@ (mov r8, r8)
 8012b66:	46bd      	mov	sp, r7
 8012b68:	b004      	add	sp, #16
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b086      	sub	sp, #24
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b78:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012b7e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	2280      	movs	r2, #128	@ 0x80
 8012b84:	589b      	ldr	r3, [r3, r2]
 8012b86:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012b88:	697b      	ldr	r3, [r7, #20]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	689b      	ldr	r3, [r3, #8]
 8012b8e:	2280      	movs	r2, #128	@ 0x80
 8012b90:	4013      	ands	r3, r2
 8012b92:	2b80      	cmp	r3, #128	@ 0x80
 8012b94:	d10a      	bne.n	8012bac <UART_DMAError+0x40>
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	2b21      	cmp	r3, #33	@ 0x21
 8012b9a:	d107      	bne.n	8012bac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	2252      	movs	r2, #82	@ 0x52
 8012ba0:	2100      	movs	r1, #0
 8012ba2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	0018      	movs	r0, r3
 8012ba8:	f7ff fe3a 	bl	8012820 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	2240      	movs	r2, #64	@ 0x40
 8012bb4:	4013      	ands	r3, r2
 8012bb6:	2b40      	cmp	r3, #64	@ 0x40
 8012bb8:	d10a      	bne.n	8012bd0 <UART_DMAError+0x64>
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2b22      	cmp	r3, #34	@ 0x22
 8012bbe:	d107      	bne.n	8012bd0 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	225a      	movs	r2, #90	@ 0x5a
 8012bc4:	2100      	movs	r1, #0
 8012bc6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	0018      	movs	r0, r3
 8012bcc:	f7ff fe4c 	bl	8012868 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	2284      	movs	r2, #132	@ 0x84
 8012bd4:	589b      	ldr	r3, [r3, r2]
 8012bd6:	2210      	movs	r2, #16
 8012bd8:	431a      	orrs	r2, r3
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	2184      	movs	r1, #132	@ 0x84
 8012bde:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	2298      	movs	r2, #152	@ 0x98
 8012be4:	589b      	ldr	r3, [r3, r2]
 8012be6:	697a      	ldr	r2, [r7, #20]
 8012be8:	0010      	movs	r0, r2
 8012bea:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012bec:	46c0      	nop			@ (mov r8, r8)
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	b006      	add	sp, #24
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	225a      	movs	r2, #90	@ 0x5a
 8012c06:	2100      	movs	r1, #0
 8012c08:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2252      	movs	r2, #82	@ 0x52
 8012c0e:	2100      	movs	r1, #0
 8012c10:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	2298      	movs	r2, #152	@ 0x98
 8012c16:	589b      	ldr	r3, [r3, r2]
 8012c18:	68fa      	ldr	r2, [r7, #12]
 8012c1a:	0010      	movs	r0, r2
 8012c1c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012c1e:	46c0      	nop			@ (mov r8, r8)
 8012c20:	46bd      	mov	sp, r7
 8012c22:	b004      	add	sp, #16
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012c26:	b580      	push	{r7, lr}
 8012c28:	b086      	sub	sp, #24
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8012c32:	60bb      	str	r3, [r7, #8]
  return(result);
 8012c34:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012c36:	617b      	str	r3, [r7, #20]
 8012c38:	2301      	movs	r3, #1
 8012c3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f383 8810 	msr	PRIMASK, r3
}
 8012c42:	46c0      	nop			@ (mov r8, r8)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	681a      	ldr	r2, [r3, #0]
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	2140      	movs	r1, #64	@ 0x40
 8012c50:	438a      	bics	r2, r1
 8012c52:	601a      	str	r2, [r3, #0]
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c58:	693b      	ldr	r3, [r7, #16]
 8012c5a:	f383 8810 	msr	PRIMASK, r3
}
 8012c5e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2220      	movs	r2, #32
 8012c64:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	228c      	movs	r2, #140	@ 0x8c
 8012c70:	589b      	ldr	r3, [r3, r2]
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	0010      	movs	r0, r2
 8012c76:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012c78:	46c0      	nop			@ (mov r8, r8)
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	b006      	add	sp, #24
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012c88:	46c0      	nop			@ (mov r8, r8)
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	b002      	add	sp, #8
 8012c8e:	bd80      	pop	{r7, pc}

08012c90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b084      	sub	sp, #16
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2244      	movs	r2, #68	@ 0x44
 8012c9c:	2100      	movs	r1, #0
 8012c9e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012ca0:	4b05      	ldr	r3, [pc, #20]	@ (8012cb8 <USB_EnableGlobalInt+0x28>)
 8012ca2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	b299      	uxth	r1, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2240      	movs	r2, #64	@ 0x40
 8012cac:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012cae:	2300      	movs	r3, #0
}
 8012cb0:	0018      	movs	r0, r3
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	b004      	add	sp, #16
 8012cb6:	bd80      	pop	{r7, pc}
 8012cb8:	0000bf80 	.word	0x0000bf80

08012cbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012cc4:	4b09      	ldr	r3, [pc, #36]	@ (8012cec <USB_DisableGlobalInt+0x30>)
 8012cc6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2240      	movs	r2, #64	@ 0x40
 8012ccc:	5a9b      	ldrh	r3, [r3, r2]
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	68fa      	ldr	r2, [r7, #12]
 8012cd2:	b292      	uxth	r2, r2
 8012cd4:	43d2      	mvns	r2, r2
 8012cd6:	b292      	uxth	r2, r2
 8012cd8:	4013      	ands	r3, r2
 8012cda:	b299      	uxth	r1, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2240      	movs	r2, #64	@ 0x40
 8012ce0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012ce2:	2300      	movs	r3, #0
}
 8012ce4:	0018      	movs	r0, r3
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	b004      	add	sp, #16
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	0000bf80 	.word	0x0000bf80

08012cf0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012cf0:	b084      	sub	sp, #16
 8012cf2:	b590      	push	{r4, r7, lr}
 8012cf4:	b083      	sub	sp, #12
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
 8012cfa:	2004      	movs	r0, #4
 8012cfc:	2410      	movs	r4, #16
 8012cfe:	1900      	adds	r0, r0, r4
 8012d00:	2408      	movs	r4, #8
 8012d02:	46a4      	mov	ip, r4
 8012d04:	44bc      	add	ip, r7
 8012d06:	4460      	add	r0, ip
 8012d08:	6001      	str	r1, [r0, #0]
 8012d0a:	6042      	str	r2, [r0, #4]
 8012d0c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2240      	movs	r2, #64	@ 0x40
 8012d12:	2101      	movs	r1, #1
 8012d14:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2240      	movs	r2, #64	@ 0x40
 8012d1a:	2100      	movs	r1, #0
 8012d1c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2244      	movs	r2, #68	@ 0x44
 8012d22:	2100      	movs	r1, #0
 8012d24:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2250      	movs	r2, #80	@ 0x50
 8012d2a:	2100      	movs	r1, #0
 8012d2c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012d2e:	2300      	movs	r3, #0
}
 8012d30:	0018      	movs	r0, r3
 8012d32:	46bd      	mov	sp, r7
 8012d34:	b003      	add	sp, #12
 8012d36:	bc90      	pop	{r4, r7}
 8012d38:	bc08      	pop	{r3}
 8012d3a:	b004      	add	sp, #16
 8012d3c:	4718      	bx	r3
	...

08012d40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b09c      	sub	sp, #112	@ 0x70
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012d4a:	236f      	movs	r3, #111	@ 0x6f
 8012d4c:	18fb      	adds	r3, r7, r3
 8012d4e:	2200      	movs	r2, #0
 8012d50:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012d52:	687a      	ldr	r2, [r7, #4]
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	18d3      	adds	r3, r2, r3
 8012d5c:	881b      	ldrh	r3, [r3, #0]
 8012d5e:	b29a      	uxth	r2, r3
 8012d60:	236c      	movs	r3, #108	@ 0x6c
 8012d62:	18fb      	adds	r3, r7, r3
 8012d64:	49a3      	ldr	r1, [pc, #652]	@ (8012ff4 <USB_ActivateEndpoint+0x2b4>)
 8012d66:	400a      	ands	r2, r1
 8012d68:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	78db      	ldrb	r3, [r3, #3]
 8012d6e:	2b03      	cmp	r3, #3
 8012d70:	d017      	beq.n	8012da2 <USB_ActivateEndpoint+0x62>
 8012d72:	dc28      	bgt.n	8012dc6 <USB_ActivateEndpoint+0x86>
 8012d74:	2b02      	cmp	r3, #2
 8012d76:	d00e      	beq.n	8012d96 <USB_ActivateEndpoint+0x56>
 8012d78:	dc25      	bgt.n	8012dc6 <USB_ActivateEndpoint+0x86>
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d002      	beq.n	8012d84 <USB_ActivateEndpoint+0x44>
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d018      	beq.n	8012db4 <USB_ActivateEndpoint+0x74>
 8012d82:	e020      	b.n	8012dc6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012d84:	226c      	movs	r2, #108	@ 0x6c
 8012d86:	18bb      	adds	r3, r7, r2
 8012d88:	18ba      	adds	r2, r7, r2
 8012d8a:	8812      	ldrh	r2, [r2, #0]
 8012d8c:	2180      	movs	r1, #128	@ 0x80
 8012d8e:	0089      	lsls	r1, r1, #2
 8012d90:	430a      	orrs	r2, r1
 8012d92:	801a      	strh	r2, [r3, #0]
      break;
 8012d94:	e01c      	b.n	8012dd0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8012d96:	226c      	movs	r2, #108	@ 0x6c
 8012d98:	18bb      	adds	r3, r7, r2
 8012d9a:	18ba      	adds	r2, r7, r2
 8012d9c:	8812      	ldrh	r2, [r2, #0]
 8012d9e:	801a      	strh	r2, [r3, #0]
      break;
 8012da0:	e016      	b.n	8012dd0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012da2:	226c      	movs	r2, #108	@ 0x6c
 8012da4:	18bb      	adds	r3, r7, r2
 8012da6:	18ba      	adds	r2, r7, r2
 8012da8:	8812      	ldrh	r2, [r2, #0]
 8012daa:	21c0      	movs	r1, #192	@ 0xc0
 8012dac:	00c9      	lsls	r1, r1, #3
 8012dae:	430a      	orrs	r2, r1
 8012db0:	801a      	strh	r2, [r3, #0]
      break;
 8012db2:	e00d      	b.n	8012dd0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012db4:	226c      	movs	r2, #108	@ 0x6c
 8012db6:	18bb      	adds	r3, r7, r2
 8012db8:	18ba      	adds	r2, r7, r2
 8012dba:	8812      	ldrh	r2, [r2, #0]
 8012dbc:	2180      	movs	r1, #128	@ 0x80
 8012dbe:	00c9      	lsls	r1, r1, #3
 8012dc0:	430a      	orrs	r2, r1
 8012dc2:	801a      	strh	r2, [r3, #0]
      break;
 8012dc4:	e004      	b.n	8012dd0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8012dc6:	236f      	movs	r3, #111	@ 0x6f
 8012dc8:	18fb      	adds	r3, r7, r3
 8012dca:	2201      	movs	r2, #1
 8012dcc:	701a      	strb	r2, [r3, #0]
      break;
 8012dce:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012dd0:	687a      	ldr	r2, [r7, #4]
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	18d3      	adds	r3, r2, r3
 8012dda:	226c      	movs	r2, #108	@ 0x6c
 8012ddc:	18ba      	adds	r2, r7, r2
 8012dde:	8812      	ldrh	r2, [r2, #0]
 8012de0:	4985      	ldr	r1, [pc, #532]	@ (8012ff8 <USB_ActivateEndpoint+0x2b8>)
 8012de2:	430a      	orrs	r2, r1
 8012de4:	b292      	uxth	r2, r2
 8012de6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	009b      	lsls	r3, r3, #2
 8012df0:	18d3      	adds	r3, r2, r3
 8012df2:	881b      	ldrh	r3, [r3, #0]
 8012df4:	b29b      	uxth	r3, r3
 8012df6:	b21b      	sxth	r3, r3
 8012df8:	4a80      	ldr	r2, [pc, #512]	@ (8012ffc <USB_ActivateEndpoint+0x2bc>)
 8012dfa:	4013      	ands	r3, r2
 8012dfc:	b21a      	sxth	r2, r3
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	b21b      	sxth	r3, r3
 8012e04:	4313      	orrs	r3, r2
 8012e06:	b21a      	sxth	r2, r3
 8012e08:	2166      	movs	r1, #102	@ 0x66
 8012e0a:	187b      	adds	r3, r7, r1
 8012e0c:	801a      	strh	r2, [r3, #0]
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	18d3      	adds	r3, r2, r3
 8012e18:	187a      	adds	r2, r7, r1
 8012e1a:	8812      	ldrh	r2, [r2, #0]
 8012e1c:	4976      	ldr	r1, [pc, #472]	@ (8012ff8 <USB_ActivateEndpoint+0x2b8>)
 8012e1e:	430a      	orrs	r2, r1
 8012e20:	b292      	uxth	r2, r2
 8012e22:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	7b1b      	ldrb	r3, [r3, #12]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d000      	beq.n	8012e2e <USB_ActivateEndpoint+0xee>
 8012e2c:	e178      	b.n	8013120 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	785b      	ldrb	r3, [r3, #1]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d100      	bne.n	8012e38 <USB_ActivateEndpoint+0xf8>
 8012e36:	e07a      	b.n	8012f2e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	61bb      	str	r3, [r7, #24]
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2250      	movs	r2, #80	@ 0x50
 8012e40:	5a9b      	ldrh	r3, [r3, r2]
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	001a      	movs	r2, r3
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	189b      	adds	r3, r3, r2
 8012e4a:	61bb      	str	r3, [r7, #24]
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	781b      	ldrb	r3, [r3, #0]
 8012e50:	00da      	lsls	r2, r3, #3
 8012e52:	69bb      	ldr	r3, [r7, #24]
 8012e54:	18d3      	adds	r3, r2, r3
 8012e56:	2280      	movs	r2, #128	@ 0x80
 8012e58:	00d2      	lsls	r2, r2, #3
 8012e5a:	4694      	mov	ip, r2
 8012e5c:	4463      	add	r3, ip
 8012e5e:	617b      	str	r3, [r7, #20]
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	88db      	ldrh	r3, [r3, #6]
 8012e64:	085b      	lsrs	r3, r3, #1
 8012e66:	b29b      	uxth	r3, r3
 8012e68:	18db      	adds	r3, r3, r3
 8012e6a:	b29a      	uxth	r2, r3
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	009b      	lsls	r3, r3, #2
 8012e78:	18d2      	adds	r2, r2, r3
 8012e7a:	2112      	movs	r1, #18
 8012e7c:	187b      	adds	r3, r7, r1
 8012e7e:	8812      	ldrh	r2, [r2, #0]
 8012e80:	801a      	strh	r2, [r3, #0]
 8012e82:	187b      	adds	r3, r7, r1
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	2240      	movs	r2, #64	@ 0x40
 8012e88:	4013      	ands	r3, r2
 8012e8a:	d016      	beq.n	8012eba <USB_ActivateEndpoint+0x17a>
 8012e8c:	687a      	ldr	r2, [r7, #4]
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	009b      	lsls	r3, r3, #2
 8012e94:	18d3      	adds	r3, r2, r3
 8012e96:	881b      	ldrh	r3, [r3, #0]
 8012e98:	b29a      	uxth	r2, r3
 8012e9a:	2010      	movs	r0, #16
 8012e9c:	183b      	adds	r3, r7, r0
 8012e9e:	4957      	ldr	r1, [pc, #348]	@ (8012ffc <USB_ActivateEndpoint+0x2bc>)
 8012ea0:	400a      	ands	r2, r1
 8012ea2:	801a      	strh	r2, [r3, #0]
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	009b      	lsls	r3, r3, #2
 8012eac:	18d3      	adds	r3, r2, r3
 8012eae:	183a      	adds	r2, r7, r0
 8012eb0:	8812      	ldrh	r2, [r2, #0]
 8012eb2:	4953      	ldr	r1, [pc, #332]	@ (8013000 <USB_ActivateEndpoint+0x2c0>)
 8012eb4:	430a      	orrs	r2, r1
 8012eb6:	b292      	uxth	r2, r2
 8012eb8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	78db      	ldrb	r3, [r3, #3]
 8012ebe:	2b01      	cmp	r3, #1
 8012ec0:	d01d      	beq.n	8012efe <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	009b      	lsls	r3, r3, #2
 8012eca:	18d3      	adds	r3, r2, r3
 8012ecc:	881b      	ldrh	r3, [r3, #0]
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	200c      	movs	r0, #12
 8012ed2:	183b      	adds	r3, r7, r0
 8012ed4:	494b      	ldr	r1, [pc, #300]	@ (8013004 <USB_ActivateEndpoint+0x2c4>)
 8012ed6:	400a      	ands	r2, r1
 8012ed8:	801a      	strh	r2, [r3, #0]
 8012eda:	183b      	adds	r3, r7, r0
 8012edc:	183a      	adds	r2, r7, r0
 8012ede:	8812      	ldrh	r2, [r2, #0]
 8012ee0:	2120      	movs	r1, #32
 8012ee2:	404a      	eors	r2, r1
 8012ee4:	801a      	strh	r2, [r3, #0]
 8012ee6:	687a      	ldr	r2, [r7, #4]
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	18d3      	adds	r3, r2, r3
 8012ef0:	183a      	adds	r2, r7, r0
 8012ef2:	8812      	ldrh	r2, [r2, #0]
 8012ef4:	4940      	ldr	r1, [pc, #256]	@ (8012ff8 <USB_ActivateEndpoint+0x2b8>)
 8012ef6:	430a      	orrs	r2, r1
 8012ef8:	b292      	uxth	r2, r2
 8012efa:	801a      	strh	r2, [r3, #0]
 8012efc:	e2b4      	b.n	8013468 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	009b      	lsls	r3, r3, #2
 8012f06:	18d3      	adds	r3, r2, r3
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	b29a      	uxth	r2, r3
 8012f0c:	200e      	movs	r0, #14
 8012f0e:	183b      	adds	r3, r7, r0
 8012f10:	493c      	ldr	r1, [pc, #240]	@ (8013004 <USB_ActivateEndpoint+0x2c4>)
 8012f12:	400a      	ands	r2, r1
 8012f14:	801a      	strh	r2, [r3, #0]
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	009b      	lsls	r3, r3, #2
 8012f1e:	18d3      	adds	r3, r2, r3
 8012f20:	183a      	adds	r2, r7, r0
 8012f22:	8812      	ldrh	r2, [r2, #0]
 8012f24:	4934      	ldr	r1, [pc, #208]	@ (8012ff8 <USB_ActivateEndpoint+0x2b8>)
 8012f26:	430a      	orrs	r2, r1
 8012f28:	b292      	uxth	r2, r2
 8012f2a:	801a      	strh	r2, [r3, #0]
 8012f2c:	e29c      	b.n	8013468 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2250      	movs	r2, #80	@ 0x50
 8012f36:	5a9b      	ldrh	r3, [r3, r2]
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	001a      	movs	r2, r3
 8012f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f3e:	189b      	adds	r3, r3, r2
 8012f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	00da      	lsls	r2, r3, #3
 8012f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f4a:	18d3      	adds	r3, r2, r3
 8012f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8013008 <USB_ActivateEndpoint+0x2c8>)
 8012f4e:	4694      	mov	ip, r2
 8012f50:	4463      	add	r3, ip
 8012f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	88db      	ldrh	r3, [r3, #6]
 8012f58:	085b      	lsrs	r3, r3, #1
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	18db      	adds	r3, r3, r3
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f62:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2250      	movs	r2, #80	@ 0x50
 8012f6c:	5a9b      	ldrh	r3, [r3, r2]
 8012f6e:	b29b      	uxth	r3, r3
 8012f70:	001a      	movs	r2, r3
 8012f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f74:	189b      	adds	r3, r3, r2
 8012f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	00da      	lsls	r2, r3, #3
 8012f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f80:	18d3      	adds	r3, r2, r3
 8012f82:	4a22      	ldr	r2, [pc, #136]	@ (801300c <USB_ActivateEndpoint+0x2cc>)
 8012f84:	4694      	mov	ip, r2
 8012f86:	4463      	add	r3, ip
 8012f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f8c:	881b      	ldrh	r3, [r3, #0]
 8012f8e:	b29b      	uxth	r3, r3
 8012f90:	059b      	lsls	r3, r3, #22
 8012f92:	0d9b      	lsrs	r3, r3, #22
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f98:	801a      	strh	r2, [r3, #0]
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	691b      	ldr	r3, [r3, #16]
 8012f9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012fa0:	d91a      	bls.n	8012fd8 <USB_ActivateEndpoint+0x298>
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	691b      	ldr	r3, [r3, #16]
 8012fa6:	095b      	lsrs	r3, r3, #5
 8012fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	691b      	ldr	r3, [r3, #16]
 8012fae:	221f      	movs	r2, #31
 8012fb0:	4013      	ands	r3, r2
 8012fb2:	d102      	bne.n	8012fba <USB_ActivateEndpoint+0x27a>
 8012fb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012fb6:	3b01      	subs	r3, #1
 8012fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fbc:	881b      	ldrh	r3, [r3, #0]
 8012fbe:	b29a      	uxth	r2, r3
 8012fc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	029b      	lsls	r3, r3, #10
 8012fc6:	b29b      	uxth	r3, r3
 8012fc8:	4313      	orrs	r3, r2
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	4a10      	ldr	r2, [pc, #64]	@ (8013010 <USB_ActivateEndpoint+0x2d0>)
 8012fce:	4313      	orrs	r3, r2
 8012fd0:	b29a      	uxth	r2, r3
 8012fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fd4:	801a      	strh	r2, [r3, #0]
 8012fd6:	e034      	b.n	8013042 <USB_ActivateEndpoint+0x302>
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	691b      	ldr	r3, [r3, #16]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d119      	bne.n	8013014 <USB_ActivateEndpoint+0x2d4>
 8012fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fe2:	881b      	ldrh	r3, [r3, #0]
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8013010 <USB_ActivateEndpoint+0x2d0>)
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fee:	801a      	strh	r2, [r3, #0]
 8012ff0:	e027      	b.n	8013042 <USB_ActivateEndpoint+0x302>
 8012ff2:	46c0      	nop			@ (mov r8, r8)
 8012ff4:	ffff898f 	.word	0xffff898f
 8012ff8:	ffff8080 	.word	0xffff8080
 8012ffc:	ffff8f8f 	.word	0xffff8f8f
 8013000:	ffff80c0 	.word	0xffff80c0
 8013004:	ffff8fbf 	.word	0xffff8fbf
 8013008:	00000404 	.word	0x00000404
 801300c:	00000406 	.word	0x00000406
 8013010:	ffff8000 	.word	0xffff8000
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	691b      	ldr	r3, [r3, #16]
 8013018:	085b      	lsrs	r3, r3, #1
 801301a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	691b      	ldr	r3, [r3, #16]
 8013020:	2201      	movs	r2, #1
 8013022:	4013      	ands	r3, r2
 8013024:	d002      	beq.n	801302c <USB_ActivateEndpoint+0x2ec>
 8013026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013028:	3301      	adds	r3, #1
 801302a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801302e:	881b      	ldrh	r3, [r3, #0]
 8013030:	b29a      	uxth	r2, r3
 8013032:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013034:	b29b      	uxth	r3, r3
 8013036:	029b      	lsls	r3, r3, #10
 8013038:	b29b      	uxth	r3, r3
 801303a:	4313      	orrs	r3, r2
 801303c:	b29a      	uxth	r2, r3
 801303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013040:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013042:	687a      	ldr	r2, [r7, #4]
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	18d2      	adds	r2, r2, r3
 801304c:	2122      	movs	r1, #34	@ 0x22
 801304e:	187b      	adds	r3, r7, r1
 8013050:	8812      	ldrh	r2, [r2, #0]
 8013052:	801a      	strh	r2, [r3, #0]
 8013054:	187b      	adds	r3, r7, r1
 8013056:	881a      	ldrh	r2, [r3, #0]
 8013058:	2380      	movs	r3, #128	@ 0x80
 801305a:	01db      	lsls	r3, r3, #7
 801305c:	4013      	ands	r3, r2
 801305e:	d016      	beq.n	801308e <USB_ActivateEndpoint+0x34e>
 8013060:	687a      	ldr	r2, [r7, #4]
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	009b      	lsls	r3, r3, #2
 8013068:	18d3      	adds	r3, r2, r3
 801306a:	881b      	ldrh	r3, [r3, #0]
 801306c:	b29a      	uxth	r2, r3
 801306e:	2020      	movs	r0, #32
 8013070:	183b      	adds	r3, r7, r0
 8013072:	49dd      	ldr	r1, [pc, #884]	@ (80133e8 <USB_ActivateEndpoint+0x6a8>)
 8013074:	400a      	ands	r2, r1
 8013076:	801a      	strh	r2, [r3, #0]
 8013078:	687a      	ldr	r2, [r7, #4]
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	18d3      	adds	r3, r2, r3
 8013082:	183a      	adds	r2, r7, r0
 8013084:	8812      	ldrh	r2, [r2, #0]
 8013086:	49d9      	ldr	r1, [pc, #868]	@ (80133ec <USB_ActivateEndpoint+0x6ac>)
 8013088:	430a      	orrs	r2, r1
 801308a:	b292      	uxth	r2, r2
 801308c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d125      	bne.n	80130e2 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	009b      	lsls	r3, r3, #2
 801309e:	18d3      	adds	r3, r2, r3
 80130a0:	881b      	ldrh	r3, [r3, #0]
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	201c      	movs	r0, #28
 80130a6:	183b      	adds	r3, r7, r0
 80130a8:	49d1      	ldr	r1, [pc, #836]	@ (80133f0 <USB_ActivateEndpoint+0x6b0>)
 80130aa:	400a      	ands	r2, r1
 80130ac:	801a      	strh	r2, [r3, #0]
 80130ae:	183b      	adds	r3, r7, r0
 80130b0:	183a      	adds	r2, r7, r0
 80130b2:	8812      	ldrh	r2, [r2, #0]
 80130b4:	2180      	movs	r1, #128	@ 0x80
 80130b6:	0149      	lsls	r1, r1, #5
 80130b8:	404a      	eors	r2, r1
 80130ba:	801a      	strh	r2, [r3, #0]
 80130bc:	183b      	adds	r3, r7, r0
 80130be:	183a      	adds	r2, r7, r0
 80130c0:	8812      	ldrh	r2, [r2, #0]
 80130c2:	2180      	movs	r1, #128	@ 0x80
 80130c4:	0189      	lsls	r1, r1, #6
 80130c6:	404a      	eors	r2, r1
 80130c8:	801a      	strh	r2, [r3, #0]
 80130ca:	687a      	ldr	r2, [r7, #4]
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	009b      	lsls	r3, r3, #2
 80130d2:	18d3      	adds	r3, r2, r3
 80130d4:	183a      	adds	r2, r7, r0
 80130d6:	8812      	ldrh	r2, [r2, #0]
 80130d8:	49c6      	ldr	r1, [pc, #792]	@ (80133f4 <USB_ActivateEndpoint+0x6b4>)
 80130da:	430a      	orrs	r2, r1
 80130dc:	b292      	uxth	r2, r2
 80130de:	801a      	strh	r2, [r3, #0]
 80130e0:	e1c2      	b.n	8013468 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	009b      	lsls	r3, r3, #2
 80130ea:	18d3      	adds	r3, r2, r3
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	b29a      	uxth	r2, r3
 80130f0:	201e      	movs	r0, #30
 80130f2:	183b      	adds	r3, r7, r0
 80130f4:	49be      	ldr	r1, [pc, #760]	@ (80133f0 <USB_ActivateEndpoint+0x6b0>)
 80130f6:	400a      	ands	r2, r1
 80130f8:	801a      	strh	r2, [r3, #0]
 80130fa:	183b      	adds	r3, r7, r0
 80130fc:	183a      	adds	r2, r7, r0
 80130fe:	8812      	ldrh	r2, [r2, #0]
 8013100:	2180      	movs	r1, #128	@ 0x80
 8013102:	0189      	lsls	r1, r1, #6
 8013104:	404a      	eors	r2, r1
 8013106:	801a      	strh	r2, [r3, #0]
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	18d3      	adds	r3, r2, r3
 8013112:	183a      	adds	r2, r7, r0
 8013114:	8812      	ldrh	r2, [r2, #0]
 8013116:	49b7      	ldr	r1, [pc, #732]	@ (80133f4 <USB_ActivateEndpoint+0x6b4>)
 8013118:	430a      	orrs	r2, r1
 801311a:	b292      	uxth	r2, r2
 801311c:	801a      	strh	r2, [r3, #0]
 801311e:	e1a3      	b.n	8013468 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	78db      	ldrb	r3, [r3, #3]
 8013124:	2b02      	cmp	r3, #2
 8013126:	d117      	bne.n	8013158 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013128:	687a      	ldr	r2, [r7, #4]
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	18d3      	adds	r3, r2, r3
 8013132:	881b      	ldrh	r3, [r3, #0]
 8013134:	b29a      	uxth	r2, r3
 8013136:	2062      	movs	r0, #98	@ 0x62
 8013138:	183b      	adds	r3, r7, r0
 801313a:	49ab      	ldr	r1, [pc, #684]	@ (80133e8 <USB_ActivateEndpoint+0x6a8>)
 801313c:	400a      	ands	r2, r1
 801313e:	801a      	strh	r2, [r3, #0]
 8013140:	687a      	ldr	r2, [r7, #4]
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	18d3      	adds	r3, r2, r3
 801314a:	183a      	adds	r2, r7, r0
 801314c:	8812      	ldrh	r2, [r2, #0]
 801314e:	49aa      	ldr	r1, [pc, #680]	@ (80133f8 <USB_ActivateEndpoint+0x6b8>)
 8013150:	430a      	orrs	r2, r1
 8013152:	b292      	uxth	r2, r2
 8013154:	801a      	strh	r2, [r3, #0]
 8013156:	e016      	b.n	8013186 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	18d3      	adds	r3, r2, r3
 8013162:	881b      	ldrh	r3, [r3, #0]
 8013164:	b29a      	uxth	r2, r3
 8013166:	2064      	movs	r0, #100	@ 0x64
 8013168:	183b      	adds	r3, r7, r0
 801316a:	49a4      	ldr	r1, [pc, #656]	@ (80133fc <USB_ActivateEndpoint+0x6bc>)
 801316c:	400a      	ands	r2, r1
 801316e:	801a      	strh	r2, [r3, #0]
 8013170:	687a      	ldr	r2, [r7, #4]
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	009b      	lsls	r3, r3, #2
 8013178:	18d3      	adds	r3, r2, r3
 801317a:	183a      	adds	r2, r7, r0
 801317c:	8812      	ldrh	r2, [r2, #0]
 801317e:	499d      	ldr	r1, [pc, #628]	@ (80133f4 <USB_ActivateEndpoint+0x6b4>)
 8013180:	430a      	orrs	r2, r1
 8013182:	b292      	uxth	r2, r2
 8013184:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2250      	movs	r2, #80	@ 0x50
 801318e:	5a9b      	ldrh	r3, [r3, r2]
 8013190:	b29b      	uxth	r3, r3
 8013192:	001a      	movs	r2, r3
 8013194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013196:	189b      	adds	r3, r3, r2
 8013198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	00da      	lsls	r2, r3, #3
 80131a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80131a2:	18d3      	adds	r3, r2, r3
 80131a4:	2280      	movs	r2, #128	@ 0x80
 80131a6:	00d2      	lsls	r2, r2, #3
 80131a8:	4694      	mov	ip, r2
 80131aa:	4463      	add	r3, ip
 80131ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	891b      	ldrh	r3, [r3, #8]
 80131b2:	085b      	lsrs	r3, r3, #1
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	18db      	adds	r3, r3, r3
 80131b8:	b29a      	uxth	r2, r3
 80131ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80131bc:	801a      	strh	r2, [r3, #0]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2250      	movs	r2, #80	@ 0x50
 80131c6:	5a9b      	ldrh	r3, [r3, r2]
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	001a      	movs	r2, r3
 80131cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131ce:	189b      	adds	r3, r3, r2
 80131d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	00da      	lsls	r2, r3, #3
 80131d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131da:	18d3      	adds	r3, r2, r3
 80131dc:	4a88      	ldr	r2, [pc, #544]	@ (8013400 <USB_ActivateEndpoint+0x6c0>)
 80131de:	4694      	mov	ip, r2
 80131e0:	4463      	add	r3, ip
 80131e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	895b      	ldrh	r3, [r3, #10]
 80131e8:	085b      	lsrs	r3, r3, #1
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	18db      	adds	r3, r3, r3
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	785b      	ldrb	r3, [r3, #1]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d000      	beq.n	80131fe <USB_ActivateEndpoint+0x4be>
 80131fc:	e087      	b.n	801330e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	18d2      	adds	r2, r2, r3
 8013208:	2140      	movs	r1, #64	@ 0x40
 801320a:	187b      	adds	r3, r7, r1
 801320c:	8812      	ldrh	r2, [r2, #0]
 801320e:	801a      	strh	r2, [r3, #0]
 8013210:	187b      	adds	r3, r7, r1
 8013212:	881a      	ldrh	r2, [r3, #0]
 8013214:	2380      	movs	r3, #128	@ 0x80
 8013216:	01db      	lsls	r3, r3, #7
 8013218:	4013      	ands	r3, r2
 801321a:	d016      	beq.n	801324a <USB_ActivateEndpoint+0x50a>
 801321c:	687a      	ldr	r2, [r7, #4]
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	009b      	lsls	r3, r3, #2
 8013224:	18d3      	adds	r3, r2, r3
 8013226:	881b      	ldrh	r3, [r3, #0]
 8013228:	b29a      	uxth	r2, r3
 801322a:	203e      	movs	r0, #62	@ 0x3e
 801322c:	183b      	adds	r3, r7, r0
 801322e:	496e      	ldr	r1, [pc, #440]	@ (80133e8 <USB_ActivateEndpoint+0x6a8>)
 8013230:	400a      	ands	r2, r1
 8013232:	801a      	strh	r2, [r3, #0]
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	009b      	lsls	r3, r3, #2
 801323c:	18d3      	adds	r3, r2, r3
 801323e:	183a      	adds	r2, r7, r0
 8013240:	8812      	ldrh	r2, [r2, #0]
 8013242:	496a      	ldr	r1, [pc, #424]	@ (80133ec <USB_ActivateEndpoint+0x6ac>)
 8013244:	430a      	orrs	r2, r1
 8013246:	b292      	uxth	r2, r2
 8013248:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801324a:	687a      	ldr	r2, [r7, #4]
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	009b      	lsls	r3, r3, #2
 8013252:	18d2      	adds	r2, r2, r3
 8013254:	213c      	movs	r1, #60	@ 0x3c
 8013256:	187b      	adds	r3, r7, r1
 8013258:	8812      	ldrh	r2, [r2, #0]
 801325a:	801a      	strh	r2, [r3, #0]
 801325c:	187b      	adds	r3, r7, r1
 801325e:	881b      	ldrh	r3, [r3, #0]
 8013260:	2240      	movs	r2, #64	@ 0x40
 8013262:	4013      	ands	r3, r2
 8013264:	d016      	beq.n	8013294 <USB_ActivateEndpoint+0x554>
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	009b      	lsls	r3, r3, #2
 801326e:	18d3      	adds	r3, r2, r3
 8013270:	881b      	ldrh	r3, [r3, #0]
 8013272:	b29a      	uxth	r2, r3
 8013274:	203a      	movs	r0, #58	@ 0x3a
 8013276:	183b      	adds	r3, r7, r0
 8013278:	495b      	ldr	r1, [pc, #364]	@ (80133e8 <USB_ActivateEndpoint+0x6a8>)
 801327a:	400a      	ands	r2, r1
 801327c:	801a      	strh	r2, [r3, #0]
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	009b      	lsls	r3, r3, #2
 8013286:	18d3      	adds	r3, r2, r3
 8013288:	183a      	adds	r2, r7, r0
 801328a:	8812      	ldrh	r2, [r2, #0]
 801328c:	495d      	ldr	r1, [pc, #372]	@ (8013404 <USB_ActivateEndpoint+0x6c4>)
 801328e:	430a      	orrs	r2, r1
 8013290:	b292      	uxth	r2, r2
 8013292:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013294:	687a      	ldr	r2, [r7, #4]
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	18d3      	adds	r3, r2, r3
 801329e:	881b      	ldrh	r3, [r3, #0]
 80132a0:	b29a      	uxth	r2, r3
 80132a2:	2038      	movs	r0, #56	@ 0x38
 80132a4:	183b      	adds	r3, r7, r0
 80132a6:	4952      	ldr	r1, [pc, #328]	@ (80133f0 <USB_ActivateEndpoint+0x6b0>)
 80132a8:	400a      	ands	r2, r1
 80132aa:	801a      	strh	r2, [r3, #0]
 80132ac:	183b      	adds	r3, r7, r0
 80132ae:	183a      	adds	r2, r7, r0
 80132b0:	8812      	ldrh	r2, [r2, #0]
 80132b2:	2180      	movs	r1, #128	@ 0x80
 80132b4:	0149      	lsls	r1, r1, #5
 80132b6:	404a      	eors	r2, r1
 80132b8:	801a      	strh	r2, [r3, #0]
 80132ba:	183b      	adds	r3, r7, r0
 80132bc:	183a      	adds	r2, r7, r0
 80132be:	8812      	ldrh	r2, [r2, #0]
 80132c0:	2180      	movs	r1, #128	@ 0x80
 80132c2:	0189      	lsls	r1, r1, #6
 80132c4:	404a      	eors	r2, r1
 80132c6:	801a      	strh	r2, [r3, #0]
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	009b      	lsls	r3, r3, #2
 80132d0:	18d3      	adds	r3, r2, r3
 80132d2:	183a      	adds	r2, r7, r0
 80132d4:	8812      	ldrh	r2, [r2, #0]
 80132d6:	4947      	ldr	r1, [pc, #284]	@ (80133f4 <USB_ActivateEndpoint+0x6b4>)
 80132d8:	430a      	orrs	r2, r1
 80132da:	b292      	uxth	r2, r2
 80132dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80132de:	687a      	ldr	r2, [r7, #4]
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	009b      	lsls	r3, r3, #2
 80132e6:	18d3      	adds	r3, r2, r3
 80132e8:	881b      	ldrh	r3, [r3, #0]
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	2036      	movs	r0, #54	@ 0x36
 80132ee:	183b      	adds	r3, r7, r0
 80132f0:	4945      	ldr	r1, [pc, #276]	@ (8013408 <USB_ActivateEndpoint+0x6c8>)
 80132f2:	400a      	ands	r2, r1
 80132f4:	801a      	strh	r2, [r3, #0]
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	18d3      	adds	r3, r2, r3
 8013300:	183a      	adds	r2, r7, r0
 8013302:	8812      	ldrh	r2, [r2, #0]
 8013304:	493b      	ldr	r1, [pc, #236]	@ (80133f4 <USB_ActivateEndpoint+0x6b4>)
 8013306:	430a      	orrs	r2, r1
 8013308:	b292      	uxth	r2, r2
 801330a:	801a      	strh	r2, [r3, #0]
 801330c:	e0ac      	b.n	8013468 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	009b      	lsls	r3, r3, #2
 8013316:	18d2      	adds	r2, r2, r3
 8013318:	214e      	movs	r1, #78	@ 0x4e
 801331a:	187b      	adds	r3, r7, r1
 801331c:	8812      	ldrh	r2, [r2, #0]
 801331e:	801a      	strh	r2, [r3, #0]
 8013320:	187b      	adds	r3, r7, r1
 8013322:	881a      	ldrh	r2, [r3, #0]
 8013324:	2380      	movs	r3, #128	@ 0x80
 8013326:	01db      	lsls	r3, r3, #7
 8013328:	4013      	ands	r3, r2
 801332a:	d016      	beq.n	801335a <USB_ActivateEndpoint+0x61a>
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	009b      	lsls	r3, r3, #2
 8013334:	18d3      	adds	r3, r2, r3
 8013336:	881b      	ldrh	r3, [r3, #0]
 8013338:	b29a      	uxth	r2, r3
 801333a:	204c      	movs	r0, #76	@ 0x4c
 801333c:	183b      	adds	r3, r7, r0
 801333e:	492a      	ldr	r1, [pc, #168]	@ (80133e8 <USB_ActivateEndpoint+0x6a8>)
 8013340:	400a      	ands	r2, r1
 8013342:	801a      	strh	r2, [r3, #0]
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	18d3      	adds	r3, r2, r3
 801334e:	183a      	adds	r2, r7, r0
 8013350:	8812      	ldrh	r2, [r2, #0]
 8013352:	4926      	ldr	r1, [pc, #152]	@ (80133ec <USB_ActivateEndpoint+0x6ac>)
 8013354:	430a      	orrs	r2, r1
 8013356:	b292      	uxth	r2, r2
 8013358:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	18d2      	adds	r2, r2, r3
 8013364:	214a      	movs	r1, #74	@ 0x4a
 8013366:	187b      	adds	r3, r7, r1
 8013368:	8812      	ldrh	r2, [r2, #0]
 801336a:	801a      	strh	r2, [r3, #0]
 801336c:	187b      	adds	r3, r7, r1
 801336e:	881b      	ldrh	r3, [r3, #0]
 8013370:	2240      	movs	r2, #64	@ 0x40
 8013372:	4013      	ands	r3, r2
 8013374:	d016      	beq.n	80133a4 <USB_ActivateEndpoint+0x664>
 8013376:	687a      	ldr	r2, [r7, #4]
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	781b      	ldrb	r3, [r3, #0]
 801337c:	009b      	lsls	r3, r3, #2
 801337e:	18d3      	adds	r3, r2, r3
 8013380:	881b      	ldrh	r3, [r3, #0]
 8013382:	b29a      	uxth	r2, r3
 8013384:	2048      	movs	r0, #72	@ 0x48
 8013386:	183b      	adds	r3, r7, r0
 8013388:	4917      	ldr	r1, [pc, #92]	@ (80133e8 <USB_ActivateEndpoint+0x6a8>)
 801338a:	400a      	ands	r2, r1
 801338c:	801a      	strh	r2, [r3, #0]
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	18d3      	adds	r3, r2, r3
 8013398:	183a      	adds	r2, r7, r0
 801339a:	8812      	ldrh	r2, [r2, #0]
 801339c:	4919      	ldr	r1, [pc, #100]	@ (8013404 <USB_ActivateEndpoint+0x6c4>)
 801339e:	430a      	orrs	r2, r1
 80133a0:	b292      	uxth	r2, r2
 80133a2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	78db      	ldrb	r3, [r3, #3]
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d02f      	beq.n	801340c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80133ac:	687a      	ldr	r2, [r7, #4]
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	009b      	lsls	r3, r3, #2
 80133b4:	18d3      	adds	r3, r2, r3
 80133b6:	881b      	ldrh	r3, [r3, #0]
 80133b8:	b29a      	uxth	r2, r3
 80133ba:	2044      	movs	r0, #68	@ 0x44
 80133bc:	183b      	adds	r3, r7, r0
 80133be:	4912      	ldr	r1, [pc, #72]	@ (8013408 <USB_ActivateEndpoint+0x6c8>)
 80133c0:	400a      	ands	r2, r1
 80133c2:	801a      	strh	r2, [r3, #0]
 80133c4:	183b      	adds	r3, r7, r0
 80133c6:	183a      	adds	r2, r7, r0
 80133c8:	8812      	ldrh	r2, [r2, #0]
 80133ca:	2120      	movs	r1, #32
 80133cc:	404a      	eors	r2, r1
 80133ce:	801a      	strh	r2, [r3, #0]
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	18d3      	adds	r3, r2, r3
 80133da:	183a      	adds	r2, r7, r0
 80133dc:	8812      	ldrh	r2, [r2, #0]
 80133de:	4905      	ldr	r1, [pc, #20]	@ (80133f4 <USB_ActivateEndpoint+0x6b4>)
 80133e0:	430a      	orrs	r2, r1
 80133e2:	b292      	uxth	r2, r2
 80133e4:	801a      	strh	r2, [r3, #0]
 80133e6:	e028      	b.n	801343a <USB_ActivateEndpoint+0x6fa>
 80133e8:	ffff8f8f 	.word	0xffff8f8f
 80133ec:	ffffc080 	.word	0xffffc080
 80133f0:	ffffbf8f 	.word	0xffffbf8f
 80133f4:	ffff8080 	.word	0xffff8080
 80133f8:	ffff8180 	.word	0xffff8180
 80133fc:	ffff8e8f 	.word	0xffff8e8f
 8013400:	00000404 	.word	0x00000404
 8013404:	ffff80c0 	.word	0xffff80c0
 8013408:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801340c:	687a      	ldr	r2, [r7, #4]
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	009b      	lsls	r3, r3, #2
 8013414:	18d3      	adds	r3, r2, r3
 8013416:	881b      	ldrh	r3, [r3, #0]
 8013418:	b29a      	uxth	r2, r3
 801341a:	2046      	movs	r0, #70	@ 0x46
 801341c:	183b      	adds	r3, r7, r0
 801341e:	4916      	ldr	r1, [pc, #88]	@ (8013478 <USB_ActivateEndpoint+0x738>)
 8013420:	400a      	ands	r2, r1
 8013422:	801a      	strh	r2, [r3, #0]
 8013424:	687a      	ldr	r2, [r7, #4]
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	18d3      	adds	r3, r2, r3
 801342e:	183a      	adds	r2, r7, r0
 8013430:	8812      	ldrh	r2, [r2, #0]
 8013432:	4912      	ldr	r1, [pc, #72]	@ (801347c <USB_ActivateEndpoint+0x73c>)
 8013434:	430a      	orrs	r2, r1
 8013436:	b292      	uxth	r2, r2
 8013438:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801343a:	687a      	ldr	r2, [r7, #4]
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	18d3      	adds	r3, r2, r3
 8013444:	881b      	ldrh	r3, [r3, #0]
 8013446:	b29a      	uxth	r2, r3
 8013448:	2042      	movs	r0, #66	@ 0x42
 801344a:	183b      	adds	r3, r7, r0
 801344c:	490c      	ldr	r1, [pc, #48]	@ (8013480 <USB_ActivateEndpoint+0x740>)
 801344e:	400a      	ands	r2, r1
 8013450:	801a      	strh	r2, [r3, #0]
 8013452:	687a      	ldr	r2, [r7, #4]
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	009b      	lsls	r3, r3, #2
 801345a:	18d3      	adds	r3, r2, r3
 801345c:	183a      	adds	r2, r7, r0
 801345e:	8812      	ldrh	r2, [r2, #0]
 8013460:	4906      	ldr	r1, [pc, #24]	@ (801347c <USB_ActivateEndpoint+0x73c>)
 8013462:	430a      	orrs	r2, r1
 8013464:	b292      	uxth	r2, r2
 8013466:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8013468:	236f      	movs	r3, #111	@ 0x6f
 801346a:	18fb      	adds	r3, r7, r3
 801346c:	781b      	ldrb	r3, [r3, #0]
}
 801346e:	0018      	movs	r0, r3
 8013470:	46bd      	mov	sp, r7
 8013472:	b01c      	add	sp, #112	@ 0x70
 8013474:	bd80      	pop	{r7, pc}
 8013476:	46c0      	nop			@ (mov r8, r8)
 8013478:	ffff8fbf 	.word	0xffff8fbf
 801347c:	ffff8080 	.word	0xffff8080
 8013480:	ffffbf8f 	.word	0xffffbf8f

08013484 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b08c      	sub	sp, #48	@ 0x30
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
 801348c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	7b1b      	ldrb	r3, [r3, #12]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d000      	beq.n	8013498 <USB_DeactivateEndpoint+0x14>
 8013496:	e07e      	b.n	8013596 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	785b      	ldrb	r3, [r3, #1]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d03c      	beq.n	801351a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80134a0:	687a      	ldr	r2, [r7, #4]
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	009b      	lsls	r3, r3, #2
 80134a8:	18d2      	adds	r2, r2, r3
 80134aa:	210c      	movs	r1, #12
 80134ac:	187b      	adds	r3, r7, r1
 80134ae:	8812      	ldrh	r2, [r2, #0]
 80134b0:	801a      	strh	r2, [r3, #0]
 80134b2:	187b      	adds	r3, r7, r1
 80134b4:	881b      	ldrh	r3, [r3, #0]
 80134b6:	2240      	movs	r2, #64	@ 0x40
 80134b8:	4013      	ands	r3, r2
 80134ba:	d016      	beq.n	80134ea <USB_DeactivateEndpoint+0x66>
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	009b      	lsls	r3, r3, #2
 80134c4:	18d3      	adds	r3, r2, r3
 80134c6:	881b      	ldrh	r3, [r3, #0]
 80134c8:	b29a      	uxth	r2, r3
 80134ca:	200a      	movs	r0, #10
 80134cc:	183b      	adds	r3, r7, r0
 80134ce:	49c7      	ldr	r1, [pc, #796]	@ (80137ec <USB_DeactivateEndpoint+0x368>)
 80134d0:	400a      	ands	r2, r1
 80134d2:	801a      	strh	r2, [r3, #0]
 80134d4:	687a      	ldr	r2, [r7, #4]
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	18d3      	adds	r3, r2, r3
 80134de:	183a      	adds	r2, r7, r0
 80134e0:	8812      	ldrh	r2, [r2, #0]
 80134e2:	49c3      	ldr	r1, [pc, #780]	@ (80137f0 <USB_DeactivateEndpoint+0x36c>)
 80134e4:	430a      	orrs	r2, r1
 80134e6:	b292      	uxth	r2, r2
 80134e8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	18d3      	adds	r3, r2, r3
 80134f4:	881b      	ldrh	r3, [r3, #0]
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	2008      	movs	r0, #8
 80134fa:	183b      	adds	r3, r7, r0
 80134fc:	49bd      	ldr	r1, [pc, #756]	@ (80137f4 <USB_DeactivateEndpoint+0x370>)
 80134fe:	400a      	ands	r2, r1
 8013500:	801a      	strh	r2, [r3, #0]
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	009b      	lsls	r3, r3, #2
 801350a:	18d3      	adds	r3, r2, r3
 801350c:	183a      	adds	r2, r7, r0
 801350e:	8812      	ldrh	r2, [r2, #0]
 8013510:	49b9      	ldr	r1, [pc, #740]	@ (80137f8 <USB_DeactivateEndpoint+0x374>)
 8013512:	430a      	orrs	r2, r1
 8013514:	b292      	uxth	r2, r2
 8013516:	801a      	strh	r2, [r3, #0]
 8013518:	e163      	b.n	80137e2 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	009b      	lsls	r3, r3, #2
 8013522:	18d2      	adds	r2, r2, r3
 8013524:	2112      	movs	r1, #18
 8013526:	187b      	adds	r3, r7, r1
 8013528:	8812      	ldrh	r2, [r2, #0]
 801352a:	801a      	strh	r2, [r3, #0]
 801352c:	187b      	adds	r3, r7, r1
 801352e:	881a      	ldrh	r2, [r3, #0]
 8013530:	2380      	movs	r3, #128	@ 0x80
 8013532:	01db      	lsls	r3, r3, #7
 8013534:	4013      	ands	r3, r2
 8013536:	d016      	beq.n	8013566 <USB_DeactivateEndpoint+0xe2>
 8013538:	687a      	ldr	r2, [r7, #4]
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	009b      	lsls	r3, r3, #2
 8013540:	18d3      	adds	r3, r2, r3
 8013542:	881b      	ldrh	r3, [r3, #0]
 8013544:	b29a      	uxth	r2, r3
 8013546:	2010      	movs	r0, #16
 8013548:	183b      	adds	r3, r7, r0
 801354a:	49a8      	ldr	r1, [pc, #672]	@ (80137ec <USB_DeactivateEndpoint+0x368>)
 801354c:	400a      	ands	r2, r1
 801354e:	801a      	strh	r2, [r3, #0]
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	009b      	lsls	r3, r3, #2
 8013558:	18d3      	adds	r3, r2, r3
 801355a:	183a      	adds	r2, r7, r0
 801355c:	8812      	ldrh	r2, [r2, #0]
 801355e:	49a7      	ldr	r1, [pc, #668]	@ (80137fc <USB_DeactivateEndpoint+0x378>)
 8013560:	430a      	orrs	r2, r1
 8013562:	b292      	uxth	r2, r2
 8013564:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	18d3      	adds	r3, r2, r3
 8013570:	881b      	ldrh	r3, [r3, #0]
 8013572:	b29a      	uxth	r2, r3
 8013574:	200e      	movs	r0, #14
 8013576:	183b      	adds	r3, r7, r0
 8013578:	49a1      	ldr	r1, [pc, #644]	@ (8013800 <USB_DeactivateEndpoint+0x37c>)
 801357a:	400a      	ands	r2, r1
 801357c:	801a      	strh	r2, [r3, #0]
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	009b      	lsls	r3, r3, #2
 8013586:	18d3      	adds	r3, r2, r3
 8013588:	183a      	adds	r2, r7, r0
 801358a:	8812      	ldrh	r2, [r2, #0]
 801358c:	499a      	ldr	r1, [pc, #616]	@ (80137f8 <USB_DeactivateEndpoint+0x374>)
 801358e:	430a      	orrs	r2, r1
 8013590:	b292      	uxth	r2, r2
 8013592:	801a      	strh	r2, [r3, #0]
 8013594:	e125      	b.n	80137e2 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	785b      	ldrb	r3, [r3, #1]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d000      	beq.n	80135a0 <USB_DeactivateEndpoint+0x11c>
 801359e:	e090      	b.n	80136c2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	18d2      	adds	r2, r2, r3
 80135aa:	2120      	movs	r1, #32
 80135ac:	187b      	adds	r3, r7, r1
 80135ae:	8812      	ldrh	r2, [r2, #0]
 80135b0:	801a      	strh	r2, [r3, #0]
 80135b2:	187b      	adds	r3, r7, r1
 80135b4:	881a      	ldrh	r2, [r3, #0]
 80135b6:	2380      	movs	r3, #128	@ 0x80
 80135b8:	01db      	lsls	r3, r3, #7
 80135ba:	4013      	ands	r3, r2
 80135bc:	d016      	beq.n	80135ec <USB_DeactivateEndpoint+0x168>
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	009b      	lsls	r3, r3, #2
 80135c6:	18d3      	adds	r3, r2, r3
 80135c8:	881b      	ldrh	r3, [r3, #0]
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	201e      	movs	r0, #30
 80135ce:	183b      	adds	r3, r7, r0
 80135d0:	4986      	ldr	r1, [pc, #536]	@ (80137ec <USB_DeactivateEndpoint+0x368>)
 80135d2:	400a      	ands	r2, r1
 80135d4:	801a      	strh	r2, [r3, #0]
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	009b      	lsls	r3, r3, #2
 80135de:	18d3      	adds	r3, r2, r3
 80135e0:	183a      	adds	r2, r7, r0
 80135e2:	8812      	ldrh	r2, [r2, #0]
 80135e4:	4985      	ldr	r1, [pc, #532]	@ (80137fc <USB_DeactivateEndpoint+0x378>)
 80135e6:	430a      	orrs	r2, r1
 80135e8:	b292      	uxth	r2, r2
 80135ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	18d2      	adds	r2, r2, r3
 80135f6:	211c      	movs	r1, #28
 80135f8:	187b      	adds	r3, r7, r1
 80135fa:	8812      	ldrh	r2, [r2, #0]
 80135fc:	801a      	strh	r2, [r3, #0]
 80135fe:	187b      	adds	r3, r7, r1
 8013600:	881b      	ldrh	r3, [r3, #0]
 8013602:	2240      	movs	r2, #64	@ 0x40
 8013604:	4013      	ands	r3, r2
 8013606:	d016      	beq.n	8013636 <USB_DeactivateEndpoint+0x1b2>
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	18d3      	adds	r3, r2, r3
 8013612:	881b      	ldrh	r3, [r3, #0]
 8013614:	b29a      	uxth	r2, r3
 8013616:	201a      	movs	r0, #26
 8013618:	183b      	adds	r3, r7, r0
 801361a:	4974      	ldr	r1, [pc, #464]	@ (80137ec <USB_DeactivateEndpoint+0x368>)
 801361c:	400a      	ands	r2, r1
 801361e:	801a      	strh	r2, [r3, #0]
 8013620:	687a      	ldr	r2, [r7, #4]
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	18d3      	adds	r3, r2, r3
 801362a:	183a      	adds	r2, r7, r0
 801362c:	8812      	ldrh	r2, [r2, #0]
 801362e:	4970      	ldr	r1, [pc, #448]	@ (80137f0 <USB_DeactivateEndpoint+0x36c>)
 8013630:	430a      	orrs	r2, r1
 8013632:	b292      	uxth	r2, r2
 8013634:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	009b      	lsls	r3, r3, #2
 801363e:	18d3      	adds	r3, r2, r3
 8013640:	881b      	ldrh	r3, [r3, #0]
 8013642:	b29a      	uxth	r2, r3
 8013644:	2018      	movs	r0, #24
 8013646:	183b      	adds	r3, r7, r0
 8013648:	4968      	ldr	r1, [pc, #416]	@ (80137ec <USB_DeactivateEndpoint+0x368>)
 801364a:	400a      	ands	r2, r1
 801364c:	801a      	strh	r2, [r3, #0]
 801364e:	687a      	ldr	r2, [r7, #4]
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	18d3      	adds	r3, r2, r3
 8013658:	183a      	adds	r2, r7, r0
 801365a:	8812      	ldrh	r2, [r2, #0]
 801365c:	4964      	ldr	r1, [pc, #400]	@ (80137f0 <USB_DeactivateEndpoint+0x36c>)
 801365e:	430a      	orrs	r2, r1
 8013660:	b292      	uxth	r2, r2
 8013662:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	009b      	lsls	r3, r3, #2
 801366c:	18d3      	adds	r3, r2, r3
 801366e:	881b      	ldrh	r3, [r3, #0]
 8013670:	b29a      	uxth	r2, r3
 8013672:	2016      	movs	r0, #22
 8013674:	183b      	adds	r3, r7, r0
 8013676:	4962      	ldr	r1, [pc, #392]	@ (8013800 <USB_DeactivateEndpoint+0x37c>)
 8013678:	400a      	ands	r2, r1
 801367a:	801a      	strh	r2, [r3, #0]
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	009b      	lsls	r3, r3, #2
 8013684:	18d3      	adds	r3, r2, r3
 8013686:	183a      	adds	r2, r7, r0
 8013688:	8812      	ldrh	r2, [r2, #0]
 801368a:	495b      	ldr	r1, [pc, #364]	@ (80137f8 <USB_DeactivateEndpoint+0x374>)
 801368c:	430a      	orrs	r2, r1
 801368e:	b292      	uxth	r2, r2
 8013690:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013692:	687a      	ldr	r2, [r7, #4]
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	009b      	lsls	r3, r3, #2
 801369a:	18d3      	adds	r3, r2, r3
 801369c:	881b      	ldrh	r3, [r3, #0]
 801369e:	b29a      	uxth	r2, r3
 80136a0:	2014      	movs	r0, #20
 80136a2:	183b      	adds	r3, r7, r0
 80136a4:	4953      	ldr	r1, [pc, #332]	@ (80137f4 <USB_DeactivateEndpoint+0x370>)
 80136a6:	400a      	ands	r2, r1
 80136a8:	801a      	strh	r2, [r3, #0]
 80136aa:	687a      	ldr	r2, [r7, #4]
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	781b      	ldrb	r3, [r3, #0]
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	18d3      	adds	r3, r2, r3
 80136b4:	183a      	adds	r2, r7, r0
 80136b6:	8812      	ldrh	r2, [r2, #0]
 80136b8:	494f      	ldr	r1, [pc, #316]	@ (80137f8 <USB_DeactivateEndpoint+0x374>)
 80136ba:	430a      	orrs	r2, r1
 80136bc:	b292      	uxth	r2, r2
 80136be:	801a      	strh	r2, [r3, #0]
 80136c0:	e08f      	b.n	80137e2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	009b      	lsls	r3, r3, #2
 80136ca:	18d2      	adds	r2, r2, r3
 80136cc:	212e      	movs	r1, #46	@ 0x2e
 80136ce:	187b      	adds	r3, r7, r1
 80136d0:	8812      	ldrh	r2, [r2, #0]
 80136d2:	801a      	strh	r2, [r3, #0]
 80136d4:	187b      	adds	r3, r7, r1
 80136d6:	881a      	ldrh	r2, [r3, #0]
 80136d8:	2380      	movs	r3, #128	@ 0x80
 80136da:	01db      	lsls	r3, r3, #7
 80136dc:	4013      	ands	r3, r2
 80136de:	d016      	beq.n	801370e <USB_DeactivateEndpoint+0x28a>
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	18d3      	adds	r3, r2, r3
 80136ea:	881b      	ldrh	r3, [r3, #0]
 80136ec:	b29a      	uxth	r2, r3
 80136ee:	202c      	movs	r0, #44	@ 0x2c
 80136f0:	183b      	adds	r3, r7, r0
 80136f2:	493e      	ldr	r1, [pc, #248]	@ (80137ec <USB_DeactivateEndpoint+0x368>)
 80136f4:	400a      	ands	r2, r1
 80136f6:	801a      	strh	r2, [r3, #0]
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	009b      	lsls	r3, r3, #2
 8013700:	18d3      	adds	r3, r2, r3
 8013702:	183a      	adds	r2, r7, r0
 8013704:	8812      	ldrh	r2, [r2, #0]
 8013706:	493d      	ldr	r1, [pc, #244]	@ (80137fc <USB_DeactivateEndpoint+0x378>)
 8013708:	430a      	orrs	r2, r1
 801370a:	b292      	uxth	r2, r2
 801370c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801370e:	687a      	ldr	r2, [r7, #4]
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	009b      	lsls	r3, r3, #2
 8013716:	18d2      	adds	r2, r2, r3
 8013718:	212a      	movs	r1, #42	@ 0x2a
 801371a:	187b      	adds	r3, r7, r1
 801371c:	8812      	ldrh	r2, [r2, #0]
 801371e:	801a      	strh	r2, [r3, #0]
 8013720:	187b      	adds	r3, r7, r1
 8013722:	881b      	ldrh	r3, [r3, #0]
 8013724:	2240      	movs	r2, #64	@ 0x40
 8013726:	4013      	ands	r3, r2
 8013728:	d016      	beq.n	8013758 <USB_DeactivateEndpoint+0x2d4>
 801372a:	687a      	ldr	r2, [r7, #4]
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	18d3      	adds	r3, r2, r3
 8013734:	881b      	ldrh	r3, [r3, #0]
 8013736:	b29a      	uxth	r2, r3
 8013738:	2028      	movs	r0, #40	@ 0x28
 801373a:	183b      	adds	r3, r7, r0
 801373c:	492b      	ldr	r1, [pc, #172]	@ (80137ec <USB_DeactivateEndpoint+0x368>)
 801373e:	400a      	ands	r2, r1
 8013740:	801a      	strh	r2, [r3, #0]
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	18d3      	adds	r3, r2, r3
 801374c:	183a      	adds	r2, r7, r0
 801374e:	8812      	ldrh	r2, [r2, #0]
 8013750:	4927      	ldr	r1, [pc, #156]	@ (80137f0 <USB_DeactivateEndpoint+0x36c>)
 8013752:	430a      	orrs	r2, r1
 8013754:	b292      	uxth	r2, r2
 8013756:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	009b      	lsls	r3, r3, #2
 8013760:	18d3      	adds	r3, r2, r3
 8013762:	881b      	ldrh	r3, [r3, #0]
 8013764:	b29a      	uxth	r2, r3
 8013766:	2026      	movs	r0, #38	@ 0x26
 8013768:	183b      	adds	r3, r7, r0
 801376a:	4920      	ldr	r1, [pc, #128]	@ (80137ec <USB_DeactivateEndpoint+0x368>)
 801376c:	400a      	ands	r2, r1
 801376e:	801a      	strh	r2, [r3, #0]
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	18d3      	adds	r3, r2, r3
 801377a:	183a      	adds	r2, r7, r0
 801377c:	8812      	ldrh	r2, [r2, #0]
 801377e:	491f      	ldr	r1, [pc, #124]	@ (80137fc <USB_DeactivateEndpoint+0x378>)
 8013780:	430a      	orrs	r2, r1
 8013782:	b292      	uxth	r2, r2
 8013784:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	009b      	lsls	r3, r3, #2
 801378e:	18d3      	adds	r3, r2, r3
 8013790:	881b      	ldrh	r3, [r3, #0]
 8013792:	b29a      	uxth	r2, r3
 8013794:	2024      	movs	r0, #36	@ 0x24
 8013796:	183b      	adds	r3, r7, r0
 8013798:	4916      	ldr	r1, [pc, #88]	@ (80137f4 <USB_DeactivateEndpoint+0x370>)
 801379a:	400a      	ands	r2, r1
 801379c:	801a      	strh	r2, [r3, #0]
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	781b      	ldrb	r3, [r3, #0]
 80137a4:	009b      	lsls	r3, r3, #2
 80137a6:	18d3      	adds	r3, r2, r3
 80137a8:	183a      	adds	r2, r7, r0
 80137aa:	8812      	ldrh	r2, [r2, #0]
 80137ac:	4912      	ldr	r1, [pc, #72]	@ (80137f8 <USB_DeactivateEndpoint+0x374>)
 80137ae:	430a      	orrs	r2, r1
 80137b0:	b292      	uxth	r2, r2
 80137b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	009b      	lsls	r3, r3, #2
 80137bc:	18d3      	adds	r3, r2, r3
 80137be:	881b      	ldrh	r3, [r3, #0]
 80137c0:	b29a      	uxth	r2, r3
 80137c2:	2022      	movs	r0, #34	@ 0x22
 80137c4:	183b      	adds	r3, r7, r0
 80137c6:	490e      	ldr	r1, [pc, #56]	@ (8013800 <USB_DeactivateEndpoint+0x37c>)
 80137c8:	400a      	ands	r2, r1
 80137ca:	801a      	strh	r2, [r3, #0]
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	009b      	lsls	r3, r3, #2
 80137d4:	18d3      	adds	r3, r2, r3
 80137d6:	183a      	adds	r2, r7, r0
 80137d8:	8812      	ldrh	r2, [r2, #0]
 80137da:	4907      	ldr	r1, [pc, #28]	@ (80137f8 <USB_DeactivateEndpoint+0x374>)
 80137dc:	430a      	orrs	r2, r1
 80137de:	b292      	uxth	r2, r2
 80137e0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80137e2:	2300      	movs	r3, #0
}
 80137e4:	0018      	movs	r0, r3
 80137e6:	46bd      	mov	sp, r7
 80137e8:	b00c      	add	sp, #48	@ 0x30
 80137ea:	bd80      	pop	{r7, pc}
 80137ec:	ffff8f8f 	.word	0xffff8f8f
 80137f0:	ffff80c0 	.word	0xffff80c0
 80137f4:	ffff8fbf 	.word	0xffff8fbf
 80137f8:	ffff8080 	.word	0xffff8080
 80137fc:	ffffc080 	.word	0xffffc080
 8013800:	ffffbf8f 	.word	0xffffbf8f

08013804 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013804:	b590      	push	{r4, r7, lr}
 8013806:	b0c3      	sub	sp, #268	@ 0x10c
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	785b      	ldrb	r3, [r3, #1]
 8013812:	2b01      	cmp	r3, #1
 8013814:	d001      	beq.n	801381a <USB_EPStartXfer+0x16>
 8013816:	f000 fd2d 	bl	8014274 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	699a      	ldr	r2, [r3, #24]
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	691b      	ldr	r3, [r3, #16]
 8013822:	429a      	cmp	r2, r3
 8013824:	d905      	bls.n	8013832 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	691b      	ldr	r3, [r3, #16]
 801382a:	1d7a      	adds	r2, r7, #5
 801382c:	32ff      	adds	r2, #255	@ 0xff
 801382e:	6013      	str	r3, [r2, #0]
 8013830:	e004      	b.n	801383c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	699b      	ldr	r3, [r3, #24]
 8013836:	1d7a      	adds	r2, r7, #5
 8013838:	32ff      	adds	r2, #255	@ 0xff
 801383a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	7b1b      	ldrb	r3, [r3, #12]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d125      	bne.n	8013890 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	6959      	ldr	r1, [r3, #20]
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	88da      	ldrh	r2, [r3, #6]
 801384c:	1d7b      	adds	r3, r7, #5
 801384e:	33ff      	adds	r3, #255	@ 0xff
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	b29b      	uxth	r3, r3
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f001 fa47 	bl	8014ce8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	613b      	str	r3, [r7, #16]
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2250      	movs	r2, #80	@ 0x50
 8013862:	5a9b      	ldrh	r3, [r3, r2]
 8013864:	b29b      	uxth	r3, r3
 8013866:	001a      	movs	r2, r3
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	189b      	adds	r3, r3, r2
 801386c:	613b      	str	r3, [r7, #16]
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	00da      	lsls	r2, r3, #3
 8013874:	693b      	ldr	r3, [r7, #16]
 8013876:	18d3      	adds	r3, r2, r3
 8013878:	4ad7      	ldr	r2, [pc, #860]	@ (8013bd8 <USB_EPStartXfer+0x3d4>)
 801387a:	4694      	mov	ip, r2
 801387c:	4463      	add	r3, ip
 801387e:	60fb      	str	r3, [r7, #12]
 8013880:	1d7b      	adds	r3, r7, #5
 8013882:	33ff      	adds	r3, #255	@ 0xff
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	b29a      	uxth	r2, r3
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	801a      	strh	r2, [r3, #0]
 801388c:	f000 fccd 	bl	801422a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	78db      	ldrb	r3, [r3, #3]
 8013894:	2b02      	cmp	r3, #2
 8013896:	d000      	beq.n	801389a <USB_EPStartXfer+0x96>
 8013898:	e362      	b.n	8013f60 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	6a1a      	ldr	r2, [r3, #32]
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	691b      	ldr	r3, [r3, #16]
 80138a2:	429a      	cmp	r2, r3
 80138a4:	d800      	bhi.n	80138a8 <USB_EPStartXfer+0xa4>
 80138a6:	e309      	b.n	8013ebc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	009b      	lsls	r3, r3, #2
 80138b0:	18d3      	adds	r3, r2, r3
 80138b2:	881b      	ldrh	r3, [r3, #0]
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	2056      	movs	r0, #86	@ 0x56
 80138b8:	183b      	adds	r3, r7, r0
 80138ba:	49c8      	ldr	r1, [pc, #800]	@ (8013bdc <USB_EPStartXfer+0x3d8>)
 80138bc:	400a      	ands	r2, r1
 80138be:	801a      	strh	r2, [r3, #0]
 80138c0:	687a      	ldr	r2, [r7, #4]
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	18d3      	adds	r3, r2, r3
 80138ca:	183a      	adds	r2, r7, r0
 80138cc:	8812      	ldrh	r2, [r2, #0]
 80138ce:	49c4      	ldr	r1, [pc, #784]	@ (8013be0 <USB_EPStartXfer+0x3dc>)
 80138d0:	430a      	orrs	r2, r1
 80138d2:	b292      	uxth	r2, r2
 80138d4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	6a1a      	ldr	r2, [r3, #32]
 80138da:	1d7b      	adds	r3, r7, #5
 80138dc:	33ff      	adds	r3, #255	@ 0xff
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	1ad2      	subs	r2, r2, r3
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80138e6:	687a      	ldr	r2, [r7, #4]
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	009b      	lsls	r3, r3, #2
 80138ee:	18d3      	adds	r3, r2, r3
 80138f0:	881b      	ldrh	r3, [r3, #0]
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	001a      	movs	r2, r3
 80138f6:	2340      	movs	r3, #64	@ 0x40
 80138f8:	4013      	ands	r3, r2
 80138fa:	d100      	bne.n	80138fe <USB_EPStartXfer+0xfa>
 80138fc:	e176      	b.n	8013bec <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	633b      	str	r3, [r7, #48]	@ 0x30
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	785b      	ldrb	r3, [r3, #1]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d000      	beq.n	801390c <USB_EPStartXfer+0x108>
 801390a:	e074      	b.n	80139f6 <USB_EPStartXfer+0x1f2>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2250      	movs	r2, #80	@ 0x50
 8013914:	5a9b      	ldrh	r3, [r3, r2]
 8013916:	b29b      	uxth	r3, r3
 8013918:	001a      	movs	r2, r3
 801391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801391c:	189b      	adds	r3, r3, r2
 801391e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	00da      	lsls	r2, r3, #3
 8013926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013928:	18d3      	adds	r3, r2, r3
 801392a:	4aae      	ldr	r2, [pc, #696]	@ (8013be4 <USB_EPStartXfer+0x3e0>)
 801392c:	4694      	mov	ip, r2
 801392e:	4463      	add	r3, ip
 8013930:	627b      	str	r3, [r7, #36]	@ 0x24
 8013932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013934:	881b      	ldrh	r3, [r3, #0]
 8013936:	b29b      	uxth	r3, r3
 8013938:	059b      	lsls	r3, r3, #22
 801393a:	0d9b      	lsrs	r3, r3, #22
 801393c:	b29a      	uxth	r2, r3
 801393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013940:	801a      	strh	r2, [r3, #0]
 8013942:	1d7b      	adds	r3, r7, #5
 8013944:	33ff      	adds	r3, #255	@ 0xff
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	2b3e      	cmp	r3, #62	@ 0x3e
 801394a:	d924      	bls.n	8013996 <USB_EPStartXfer+0x192>
 801394c:	1d7b      	adds	r3, r7, #5
 801394e:	33ff      	adds	r3, #255	@ 0xff
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	095b      	lsrs	r3, r3, #5
 8013954:	1c7a      	adds	r2, r7, #1
 8013956:	32ff      	adds	r2, #255	@ 0xff
 8013958:	6013      	str	r3, [r2, #0]
 801395a:	1d7b      	adds	r3, r7, #5
 801395c:	33ff      	adds	r3, #255	@ 0xff
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	221f      	movs	r2, #31
 8013962:	4013      	ands	r3, r2
 8013964:	d106      	bne.n	8013974 <USB_EPStartXfer+0x170>
 8013966:	1c7b      	adds	r3, r7, #1
 8013968:	33ff      	adds	r3, #255	@ 0xff
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	3b01      	subs	r3, #1
 801396e:	1c7a      	adds	r2, r7, #1
 8013970:	32ff      	adds	r2, #255	@ 0xff
 8013972:	6013      	str	r3, [r2, #0]
 8013974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013976:	881b      	ldrh	r3, [r3, #0]
 8013978:	b29a      	uxth	r2, r3
 801397a:	1c7b      	adds	r3, r7, #1
 801397c:	33ff      	adds	r3, #255	@ 0xff
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	b29b      	uxth	r3, r3
 8013982:	029b      	lsls	r3, r3, #10
 8013984:	b29b      	uxth	r3, r3
 8013986:	4313      	orrs	r3, r2
 8013988:	b29b      	uxth	r3, r3
 801398a:	4a97      	ldr	r2, [pc, #604]	@ (8013be8 <USB_EPStartXfer+0x3e4>)
 801398c:	4313      	orrs	r3, r2
 801398e:	b29a      	uxth	r2, r3
 8013990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013992:	801a      	strh	r2, [r3, #0]
 8013994:	e04a      	b.n	8013a2c <USB_EPStartXfer+0x228>
 8013996:	1d7b      	adds	r3, r7, #5
 8013998:	33ff      	adds	r3, #255	@ 0xff
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d108      	bne.n	80139b2 <USB_EPStartXfer+0x1ae>
 80139a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139a2:	881b      	ldrh	r3, [r3, #0]
 80139a4:	b29b      	uxth	r3, r3
 80139a6:	4a90      	ldr	r2, [pc, #576]	@ (8013be8 <USB_EPStartXfer+0x3e4>)
 80139a8:	4313      	orrs	r3, r2
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ae:	801a      	strh	r2, [r3, #0]
 80139b0:	e03c      	b.n	8013a2c <USB_EPStartXfer+0x228>
 80139b2:	1d7b      	adds	r3, r7, #5
 80139b4:	33ff      	adds	r3, #255	@ 0xff
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	085b      	lsrs	r3, r3, #1
 80139ba:	1c7a      	adds	r2, r7, #1
 80139bc:	32ff      	adds	r2, #255	@ 0xff
 80139be:	6013      	str	r3, [r2, #0]
 80139c0:	1d7b      	adds	r3, r7, #5
 80139c2:	33ff      	adds	r3, #255	@ 0xff
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	2201      	movs	r2, #1
 80139c8:	4013      	ands	r3, r2
 80139ca:	d006      	beq.n	80139da <USB_EPStartXfer+0x1d6>
 80139cc:	1c7b      	adds	r3, r7, #1
 80139ce:	33ff      	adds	r3, #255	@ 0xff
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	3301      	adds	r3, #1
 80139d4:	1c7a      	adds	r2, r7, #1
 80139d6:	32ff      	adds	r2, #255	@ 0xff
 80139d8:	6013      	str	r3, [r2, #0]
 80139da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139dc:	881b      	ldrh	r3, [r3, #0]
 80139de:	b29a      	uxth	r2, r3
 80139e0:	1c7b      	adds	r3, r7, #1
 80139e2:	33ff      	adds	r3, #255	@ 0xff
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	029b      	lsls	r3, r3, #10
 80139ea:	b29b      	uxth	r3, r3
 80139ec:	4313      	orrs	r3, r2
 80139ee:	b29a      	uxth	r2, r3
 80139f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139f2:	801a      	strh	r2, [r3, #0]
 80139f4:	e01a      	b.n	8013a2c <USB_EPStartXfer+0x228>
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	785b      	ldrb	r3, [r3, #1]
 80139fa:	2b01      	cmp	r3, #1
 80139fc:	d116      	bne.n	8013a2c <USB_EPStartXfer+0x228>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2250      	movs	r2, #80	@ 0x50
 8013a02:	5a9b      	ldrh	r3, [r3, r2]
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	001a      	movs	r2, r3
 8013a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0a:	189b      	adds	r3, r3, r2
 8013a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	781b      	ldrb	r3, [r3, #0]
 8013a12:	00da      	lsls	r2, r3, #3
 8013a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a16:	18d3      	adds	r3, r2, r3
 8013a18:	4a72      	ldr	r2, [pc, #456]	@ (8013be4 <USB_EPStartXfer+0x3e0>)
 8013a1a:	4694      	mov	ip, r2
 8013a1c:	4463      	add	r3, ip
 8013a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a20:	1d7b      	adds	r3, r7, #5
 8013a22:	33ff      	adds	r3, #255	@ 0xff
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	b29a      	uxth	r2, r3
 8013a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013a2c:	2076      	movs	r0, #118	@ 0x76
 8013a2e:	183b      	adds	r3, r7, r0
 8013a30:	683a      	ldr	r2, [r7, #0]
 8013a32:	8952      	ldrh	r2, [r2, #10]
 8013a34:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	6959      	ldr	r1, [r3, #20]
 8013a3a:	1d7b      	adds	r3, r7, #5
 8013a3c:	33ff      	adds	r3, #255	@ 0xff
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	b29c      	uxth	r4, r3
 8013a42:	183b      	adds	r3, r7, r0
 8013a44:	881a      	ldrh	r2, [r3, #0]
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	0023      	movs	r3, r4
 8013a4a:	f001 f94d 	bl	8014ce8 <USB_WritePMA>
            ep->xfer_buff += len;
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	695a      	ldr	r2, [r3, #20]
 8013a52:	1d7b      	adds	r3, r7, #5
 8013a54:	33ff      	adds	r3, #255	@ 0xff
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	18d2      	adds	r2, r2, r3
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	6a1a      	ldr	r2, [r3, #32]
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	691b      	ldr	r3, [r3, #16]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d908      	bls.n	8013a7c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	6a1a      	ldr	r2, [r3, #32]
 8013a6e:	1d7b      	adds	r3, r7, #5
 8013a70:	33ff      	adds	r3, #255	@ 0xff
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	1ad2      	subs	r2, r2, r3
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	621a      	str	r2, [r3, #32]
 8013a7a:	e007      	b.n	8013a8c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	6a1b      	ldr	r3, [r3, #32]
 8013a80:	1d7a      	adds	r2, r7, #5
 8013a82:	32ff      	adds	r2, #255	@ 0xff
 8013a84:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	785b      	ldrb	r3, [r3, #1]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d000      	beq.n	8013a96 <USB_EPStartXfer+0x292>
 8013a94:	e070      	b.n	8013b78 <USB_EPStartXfer+0x374>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	61bb      	str	r3, [r7, #24]
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2250      	movs	r2, #80	@ 0x50
 8013a9e:	5a9b      	ldrh	r3, [r3, r2]
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	001a      	movs	r2, r3
 8013aa4:	69bb      	ldr	r3, [r7, #24]
 8013aa6:	189b      	adds	r3, r3, r2
 8013aa8:	61bb      	str	r3, [r7, #24]
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	00da      	lsls	r2, r3, #3
 8013ab0:	69bb      	ldr	r3, [r7, #24]
 8013ab2:	18d3      	adds	r3, r2, r3
 8013ab4:	4a48      	ldr	r2, [pc, #288]	@ (8013bd8 <USB_EPStartXfer+0x3d4>)
 8013ab6:	4694      	mov	ip, r2
 8013ab8:	4463      	add	r3, ip
 8013aba:	617b      	str	r3, [r7, #20]
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	881b      	ldrh	r3, [r3, #0]
 8013ac0:	b29b      	uxth	r3, r3
 8013ac2:	059b      	lsls	r3, r3, #22
 8013ac4:	0d9b      	lsrs	r3, r3, #22
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	801a      	strh	r2, [r3, #0]
 8013acc:	1d7b      	adds	r3, r7, #5
 8013ace:	33ff      	adds	r3, #255	@ 0xff
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2b3e      	cmp	r3, #62	@ 0x3e
 8013ad4:	d922      	bls.n	8013b1c <USB_EPStartXfer+0x318>
 8013ad6:	1d7b      	adds	r3, r7, #5
 8013ad8:	33ff      	adds	r3, #255	@ 0xff
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	095b      	lsrs	r3, r3, #5
 8013ade:	21fc      	movs	r1, #252	@ 0xfc
 8013ae0:	187a      	adds	r2, r7, r1
 8013ae2:	6013      	str	r3, [r2, #0]
 8013ae4:	1d7b      	adds	r3, r7, #5
 8013ae6:	33ff      	adds	r3, #255	@ 0xff
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	221f      	movs	r2, #31
 8013aec:	4013      	ands	r3, r2
 8013aee:	d104      	bne.n	8013afa <USB_EPStartXfer+0x2f6>
 8013af0:	187b      	adds	r3, r7, r1
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	3b01      	subs	r3, #1
 8013af6:	187a      	adds	r2, r7, r1
 8013af8:	6013      	str	r3, [r2, #0]
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	881b      	ldrh	r3, [r3, #0]
 8013afe:	b29a      	uxth	r2, r3
 8013b00:	23fc      	movs	r3, #252	@ 0xfc
 8013b02:	18fb      	adds	r3, r7, r3
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	029b      	lsls	r3, r3, #10
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	4313      	orrs	r3, r2
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	4a35      	ldr	r2, [pc, #212]	@ (8013be8 <USB_EPStartXfer+0x3e4>)
 8013b12:	4313      	orrs	r3, r2
 8013b14:	b29a      	uxth	r2, r3
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	801a      	strh	r2, [r3, #0]
 8013b1a:	e04a      	b.n	8013bb2 <USB_EPStartXfer+0x3ae>
 8013b1c:	1d7b      	adds	r3, r7, #5
 8013b1e:	33ff      	adds	r3, #255	@ 0xff
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d108      	bne.n	8013b38 <USB_EPStartXfer+0x334>
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8013be8 <USB_EPStartXfer+0x3e4>)
 8013b2e:	4313      	orrs	r3, r2
 8013b30:	b29a      	uxth	r2, r3
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	801a      	strh	r2, [r3, #0]
 8013b36:	e03c      	b.n	8013bb2 <USB_EPStartXfer+0x3ae>
 8013b38:	1d7b      	adds	r3, r7, #5
 8013b3a:	33ff      	adds	r3, #255	@ 0xff
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	085b      	lsrs	r3, r3, #1
 8013b40:	21fc      	movs	r1, #252	@ 0xfc
 8013b42:	187a      	adds	r2, r7, r1
 8013b44:	6013      	str	r3, [r2, #0]
 8013b46:	1d7b      	adds	r3, r7, #5
 8013b48:	33ff      	adds	r3, #255	@ 0xff
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	4013      	ands	r3, r2
 8013b50:	d004      	beq.n	8013b5c <USB_EPStartXfer+0x358>
 8013b52:	187b      	adds	r3, r7, r1
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	3301      	adds	r3, #1
 8013b58:	187a      	adds	r2, r7, r1
 8013b5a:	6013      	str	r3, [r2, #0]
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	881b      	ldrh	r3, [r3, #0]
 8013b60:	b29a      	uxth	r2, r3
 8013b62:	23fc      	movs	r3, #252	@ 0xfc
 8013b64:	18fb      	adds	r3, r7, r3
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	029b      	lsls	r3, r3, #10
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	4313      	orrs	r3, r2
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	801a      	strh	r2, [r3, #0]
 8013b76:	e01c      	b.n	8013bb2 <USB_EPStartXfer+0x3ae>
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	785b      	ldrb	r3, [r3, #1]
 8013b7c:	2b01      	cmp	r3, #1
 8013b7e:	d118      	bne.n	8013bb2 <USB_EPStartXfer+0x3ae>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	623b      	str	r3, [r7, #32]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2250      	movs	r2, #80	@ 0x50
 8013b88:	5a9b      	ldrh	r3, [r3, r2]
 8013b8a:	b29b      	uxth	r3, r3
 8013b8c:	001a      	movs	r2, r3
 8013b8e:	6a3b      	ldr	r3, [r7, #32]
 8013b90:	189b      	adds	r3, r3, r2
 8013b92:	623b      	str	r3, [r7, #32]
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	00da      	lsls	r2, r3, #3
 8013b9a:	6a3b      	ldr	r3, [r7, #32]
 8013b9c:	18d3      	adds	r3, r2, r3
 8013b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8013bd8 <USB_EPStartXfer+0x3d4>)
 8013ba0:	4694      	mov	ip, r2
 8013ba2:	4463      	add	r3, ip
 8013ba4:	61fb      	str	r3, [r7, #28]
 8013ba6:	1d7b      	adds	r3, r7, #5
 8013ba8:	33ff      	adds	r3, #255	@ 0xff
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	b29a      	uxth	r2, r3
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013bb2:	2076      	movs	r0, #118	@ 0x76
 8013bb4:	183b      	adds	r3, r7, r0
 8013bb6:	683a      	ldr	r2, [r7, #0]
 8013bb8:	8912      	ldrh	r2, [r2, #8]
 8013bba:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	6959      	ldr	r1, [r3, #20]
 8013bc0:	1d7b      	adds	r3, r7, #5
 8013bc2:	33ff      	adds	r3, #255	@ 0xff
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	b29c      	uxth	r4, r3
 8013bc8:	183b      	adds	r3, r7, r0
 8013bca:	881a      	ldrh	r2, [r3, #0]
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	0023      	movs	r3, r4
 8013bd0:	f001 f88a 	bl	8014ce8 <USB_WritePMA>
 8013bd4:	e329      	b.n	801422a <USB_EPStartXfer+0xa26>
 8013bd6:	46c0      	nop			@ (mov r8, r8)
 8013bd8:	00000402 	.word	0x00000402
 8013bdc:	ffff8f8f 	.word	0xffff8f8f
 8013be0:	ffff8180 	.word	0xffff8180
 8013be4:	00000406 	.word	0x00000406
 8013be8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	785b      	ldrb	r3, [r3, #1]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d000      	beq.n	8013bf6 <USB_EPStartXfer+0x3f2>
 8013bf4:	e070      	b.n	8013cd8 <USB_EPStartXfer+0x4d4>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2250      	movs	r2, #80	@ 0x50
 8013bfe:	5a9b      	ldrh	r3, [r3, r2]
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	001a      	movs	r2, r3
 8013c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c06:	189b      	adds	r3, r3, r2
 8013c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	00da      	lsls	r2, r3, #3
 8013c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c12:	18d3      	adds	r3, r2, r3
 8013c14:	4acd      	ldr	r2, [pc, #820]	@ (8013f4c <USB_EPStartXfer+0x748>)
 8013c16:	4694      	mov	ip, r2
 8013c18:	4463      	add	r3, ip
 8013c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c1e:	881b      	ldrh	r3, [r3, #0]
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	059b      	lsls	r3, r3, #22
 8013c24:	0d9b      	lsrs	r3, r3, #22
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c2a:	801a      	strh	r2, [r3, #0]
 8013c2c:	1d7b      	adds	r3, r7, #5
 8013c2e:	33ff      	adds	r3, #255	@ 0xff
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	2b3e      	cmp	r3, #62	@ 0x3e
 8013c34:	d922      	bls.n	8013c7c <USB_EPStartXfer+0x478>
 8013c36:	1d7b      	adds	r3, r7, #5
 8013c38:	33ff      	adds	r3, #255	@ 0xff
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	095b      	lsrs	r3, r3, #5
 8013c3e:	21f8      	movs	r1, #248	@ 0xf8
 8013c40:	187a      	adds	r2, r7, r1
 8013c42:	6013      	str	r3, [r2, #0]
 8013c44:	1d7b      	adds	r3, r7, #5
 8013c46:	33ff      	adds	r3, #255	@ 0xff
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	221f      	movs	r2, #31
 8013c4c:	4013      	ands	r3, r2
 8013c4e:	d104      	bne.n	8013c5a <USB_EPStartXfer+0x456>
 8013c50:	187b      	adds	r3, r7, r1
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	3b01      	subs	r3, #1
 8013c56:	187a      	adds	r2, r7, r1
 8013c58:	6013      	str	r3, [r2, #0]
 8013c5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c5c:	881b      	ldrh	r3, [r3, #0]
 8013c5e:	b29a      	uxth	r2, r3
 8013c60:	23f8      	movs	r3, #248	@ 0xf8
 8013c62:	18fb      	adds	r3, r7, r3
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	029b      	lsls	r3, r3, #10
 8013c6a:	b29b      	uxth	r3, r3
 8013c6c:	4313      	orrs	r3, r2
 8013c6e:	b29b      	uxth	r3, r3
 8013c70:	4ab7      	ldr	r2, [pc, #732]	@ (8013f50 <USB_EPStartXfer+0x74c>)
 8013c72:	4313      	orrs	r3, r2
 8013c74:	b29a      	uxth	r2, r3
 8013c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c78:	801a      	strh	r2, [r3, #0]
 8013c7a:	e04a      	b.n	8013d12 <USB_EPStartXfer+0x50e>
 8013c7c:	1d7b      	adds	r3, r7, #5
 8013c7e:	33ff      	adds	r3, #255	@ 0xff
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d108      	bne.n	8013c98 <USB_EPStartXfer+0x494>
 8013c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c88:	881b      	ldrh	r3, [r3, #0]
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	4ab0      	ldr	r2, [pc, #704]	@ (8013f50 <USB_EPStartXfer+0x74c>)
 8013c8e:	4313      	orrs	r3, r2
 8013c90:	b29a      	uxth	r2, r3
 8013c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c94:	801a      	strh	r2, [r3, #0]
 8013c96:	e03c      	b.n	8013d12 <USB_EPStartXfer+0x50e>
 8013c98:	1d7b      	adds	r3, r7, #5
 8013c9a:	33ff      	adds	r3, #255	@ 0xff
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	085b      	lsrs	r3, r3, #1
 8013ca0:	21f8      	movs	r1, #248	@ 0xf8
 8013ca2:	187a      	adds	r2, r7, r1
 8013ca4:	6013      	str	r3, [r2, #0]
 8013ca6:	1d7b      	adds	r3, r7, #5
 8013ca8:	33ff      	adds	r3, #255	@ 0xff
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	2201      	movs	r2, #1
 8013cae:	4013      	ands	r3, r2
 8013cb0:	d004      	beq.n	8013cbc <USB_EPStartXfer+0x4b8>
 8013cb2:	187b      	adds	r3, r7, r1
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	187a      	adds	r2, r7, r1
 8013cba:	6013      	str	r3, [r2, #0]
 8013cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cbe:	881b      	ldrh	r3, [r3, #0]
 8013cc0:	b29a      	uxth	r2, r3
 8013cc2:	23f8      	movs	r3, #248	@ 0xf8
 8013cc4:	18fb      	adds	r3, r7, r3
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	029b      	lsls	r3, r3, #10
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	4313      	orrs	r3, r2
 8013cd0:	b29a      	uxth	r2, r3
 8013cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cd4:	801a      	strh	r2, [r3, #0]
 8013cd6:	e01c      	b.n	8013d12 <USB_EPStartXfer+0x50e>
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	785b      	ldrb	r3, [r3, #1]
 8013cdc:	2b01      	cmp	r3, #1
 8013cde:	d118      	bne.n	8013d12 <USB_EPStartXfer+0x50e>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2250      	movs	r2, #80	@ 0x50
 8013ce8:	5a9b      	ldrh	r3, [r3, r2]
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	001a      	movs	r2, r3
 8013cee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cf0:	189b      	adds	r3, r3, r2
 8013cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	00da      	lsls	r2, r3, #3
 8013cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cfc:	18d3      	adds	r3, r2, r3
 8013cfe:	4a93      	ldr	r2, [pc, #588]	@ (8013f4c <USB_EPStartXfer+0x748>)
 8013d00:	4694      	mov	ip, r2
 8013d02:	4463      	add	r3, ip
 8013d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013d06:	1d7b      	adds	r3, r7, #5
 8013d08:	33ff      	adds	r3, #255	@ 0xff
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	b29a      	uxth	r2, r3
 8013d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013d12:	2076      	movs	r0, #118	@ 0x76
 8013d14:	183b      	adds	r3, r7, r0
 8013d16:	683a      	ldr	r2, [r7, #0]
 8013d18:	8912      	ldrh	r2, [r2, #8]
 8013d1a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	6959      	ldr	r1, [r3, #20]
 8013d20:	1d7b      	adds	r3, r7, #5
 8013d22:	33ff      	adds	r3, #255	@ 0xff
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	b29c      	uxth	r4, r3
 8013d28:	183b      	adds	r3, r7, r0
 8013d2a:	881a      	ldrh	r2, [r3, #0]
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	0023      	movs	r3, r4
 8013d30:	f000 ffda 	bl	8014ce8 <USB_WritePMA>
            ep->xfer_buff += len;
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	695a      	ldr	r2, [r3, #20]
 8013d38:	1d7b      	adds	r3, r7, #5
 8013d3a:	33ff      	adds	r3, #255	@ 0xff
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	18d2      	adds	r2, r2, r3
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	6a1a      	ldr	r2, [r3, #32]
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	691b      	ldr	r3, [r3, #16]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d908      	bls.n	8013d62 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	6a1a      	ldr	r2, [r3, #32]
 8013d54:	1d7b      	adds	r3, r7, #5
 8013d56:	33ff      	adds	r3, #255	@ 0xff
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	1ad2      	subs	r2, r2, r3
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	621a      	str	r2, [r3, #32]
 8013d60:	e007      	b.n	8013d72 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	6a1b      	ldr	r3, [r3, #32]
 8013d66:	1d7a      	adds	r2, r7, #5
 8013d68:	32ff      	adds	r2, #255	@ 0xff
 8013d6a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	785b      	ldrb	r3, [r3, #1]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d000      	beq.n	8013d80 <USB_EPStartXfer+0x57c>
 8013d7e:	e070      	b.n	8013e62 <USB_EPStartXfer+0x65e>
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2250      	movs	r2, #80	@ 0x50
 8013d88:	5a9b      	ldrh	r3, [r3, r2]
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	001a      	movs	r2, r3
 8013d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d90:	189b      	adds	r3, r3, r2
 8013d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	00da      	lsls	r2, r3, #3
 8013d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d9c:	18d3      	adds	r3, r2, r3
 8013d9e:	4a6d      	ldr	r2, [pc, #436]	@ (8013f54 <USB_EPStartXfer+0x750>)
 8013da0:	4694      	mov	ip, r2
 8013da2:	4463      	add	r3, ip
 8013da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8013da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013da8:	881b      	ldrh	r3, [r3, #0]
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	059b      	lsls	r3, r3, #22
 8013dae:	0d9b      	lsrs	r3, r3, #22
 8013db0:	b29a      	uxth	r2, r3
 8013db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013db4:	801a      	strh	r2, [r3, #0]
 8013db6:	1d7b      	adds	r3, r7, #5
 8013db8:	33ff      	adds	r3, #255	@ 0xff
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8013dbe:	d922      	bls.n	8013e06 <USB_EPStartXfer+0x602>
 8013dc0:	1d7b      	adds	r3, r7, #5
 8013dc2:	33ff      	adds	r3, #255	@ 0xff
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	095b      	lsrs	r3, r3, #5
 8013dc8:	21f4      	movs	r1, #244	@ 0xf4
 8013dca:	187a      	adds	r2, r7, r1
 8013dcc:	6013      	str	r3, [r2, #0]
 8013dce:	1d7b      	adds	r3, r7, #5
 8013dd0:	33ff      	adds	r3, #255	@ 0xff
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	221f      	movs	r2, #31
 8013dd6:	4013      	ands	r3, r2
 8013dd8:	d104      	bne.n	8013de4 <USB_EPStartXfer+0x5e0>
 8013dda:	187b      	adds	r3, r7, r1
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	3b01      	subs	r3, #1
 8013de0:	187a      	adds	r2, r7, r1
 8013de2:	6013      	str	r3, [r2, #0]
 8013de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013de6:	881b      	ldrh	r3, [r3, #0]
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	23f4      	movs	r3, #244	@ 0xf4
 8013dec:	18fb      	adds	r3, r7, r3
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	029b      	lsls	r3, r3, #10
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	4313      	orrs	r3, r2
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	4a55      	ldr	r2, [pc, #340]	@ (8013f50 <USB_EPStartXfer+0x74c>)
 8013dfc:	4313      	orrs	r3, r2
 8013dfe:	b29a      	uxth	r2, r3
 8013e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e02:	801a      	strh	r2, [r3, #0]
 8013e04:	e048      	b.n	8013e98 <USB_EPStartXfer+0x694>
 8013e06:	1d7b      	adds	r3, r7, #5
 8013e08:	33ff      	adds	r3, #255	@ 0xff
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d108      	bne.n	8013e22 <USB_EPStartXfer+0x61e>
 8013e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e12:	881b      	ldrh	r3, [r3, #0]
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	4a4e      	ldr	r2, [pc, #312]	@ (8013f50 <USB_EPStartXfer+0x74c>)
 8013e18:	4313      	orrs	r3, r2
 8013e1a:	b29a      	uxth	r2, r3
 8013e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e1e:	801a      	strh	r2, [r3, #0]
 8013e20:	e03a      	b.n	8013e98 <USB_EPStartXfer+0x694>
 8013e22:	1d7b      	adds	r3, r7, #5
 8013e24:	33ff      	adds	r3, #255	@ 0xff
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	085b      	lsrs	r3, r3, #1
 8013e2a:	21f4      	movs	r1, #244	@ 0xf4
 8013e2c:	187a      	adds	r2, r7, r1
 8013e2e:	6013      	str	r3, [r2, #0]
 8013e30:	1d7b      	adds	r3, r7, #5
 8013e32:	33ff      	adds	r3, #255	@ 0xff
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	2201      	movs	r2, #1
 8013e38:	4013      	ands	r3, r2
 8013e3a:	d004      	beq.n	8013e46 <USB_EPStartXfer+0x642>
 8013e3c:	187b      	adds	r3, r7, r1
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	3301      	adds	r3, #1
 8013e42:	187a      	adds	r2, r7, r1
 8013e44:	6013      	str	r3, [r2, #0]
 8013e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e48:	881b      	ldrh	r3, [r3, #0]
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	23f4      	movs	r3, #244	@ 0xf4
 8013e4e:	18fb      	adds	r3, r7, r3
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	b29b      	uxth	r3, r3
 8013e54:	029b      	lsls	r3, r3, #10
 8013e56:	b29b      	uxth	r3, r3
 8013e58:	4313      	orrs	r3, r2
 8013e5a:	b29a      	uxth	r2, r3
 8013e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e5e:	801a      	strh	r2, [r3, #0]
 8013e60:	e01a      	b.n	8013e98 <USB_EPStartXfer+0x694>
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	785b      	ldrb	r3, [r3, #1]
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d116      	bne.n	8013e98 <USB_EPStartXfer+0x694>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2250      	movs	r2, #80	@ 0x50
 8013e6e:	5a9b      	ldrh	r3, [r3, r2]
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	001a      	movs	r2, r3
 8013e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e76:	189b      	adds	r3, r3, r2
 8013e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	781b      	ldrb	r3, [r3, #0]
 8013e7e:	00da      	lsls	r2, r3, #3
 8013e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e82:	18d3      	adds	r3, r2, r3
 8013e84:	4a33      	ldr	r2, [pc, #204]	@ (8013f54 <USB_EPStartXfer+0x750>)
 8013e86:	4694      	mov	ip, r2
 8013e88:	4463      	add	r3, ip
 8013e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e8c:	1d7b      	adds	r3, r7, #5
 8013e8e:	33ff      	adds	r3, #255	@ 0xff
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	b29a      	uxth	r2, r3
 8013e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013e98:	2076      	movs	r0, #118	@ 0x76
 8013e9a:	183b      	adds	r3, r7, r0
 8013e9c:	683a      	ldr	r2, [r7, #0]
 8013e9e:	8952      	ldrh	r2, [r2, #10]
 8013ea0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	6959      	ldr	r1, [r3, #20]
 8013ea6:	1d7b      	adds	r3, r7, #5
 8013ea8:	33ff      	adds	r3, #255	@ 0xff
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	b29c      	uxth	r4, r3
 8013eae:	183b      	adds	r3, r7, r0
 8013eb0:	881a      	ldrh	r2, [r3, #0]
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	0023      	movs	r3, r4
 8013eb6:	f000 ff17 	bl	8014ce8 <USB_WritePMA>
 8013eba:	e1b6      	b.n	801422a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	6a1b      	ldr	r3, [r3, #32]
 8013ec0:	1d7a      	adds	r2, r7, #5
 8013ec2:	32ff      	adds	r2, #255	@ 0xff
 8013ec4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	18d3      	adds	r3, r2, r3
 8013ed0:	881b      	ldrh	r3, [r3, #0]
 8013ed2:	b29a      	uxth	r2, r3
 8013ed4:	2062      	movs	r0, #98	@ 0x62
 8013ed6:	183b      	adds	r3, r7, r0
 8013ed8:	491f      	ldr	r1, [pc, #124]	@ (8013f58 <USB_EPStartXfer+0x754>)
 8013eda:	400a      	ands	r2, r1
 8013edc:	801a      	strh	r2, [r3, #0]
 8013ede:	687a      	ldr	r2, [r7, #4]
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	009b      	lsls	r3, r3, #2
 8013ee6:	18d3      	adds	r3, r2, r3
 8013ee8:	183a      	adds	r2, r7, r0
 8013eea:	8812      	ldrh	r2, [r2, #0]
 8013eec:	491b      	ldr	r1, [pc, #108]	@ (8013f5c <USB_EPStartXfer+0x758>)
 8013eee:	430a      	orrs	r2, r1
 8013ef0:	b292      	uxth	r2, r2
 8013ef2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2250      	movs	r2, #80	@ 0x50
 8013efc:	5a9b      	ldrh	r3, [r3, r2]
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	001a      	movs	r2, r3
 8013f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f04:	189b      	adds	r3, r3, r2
 8013f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	00da      	lsls	r2, r3, #3
 8013f0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f10:	18d3      	adds	r3, r2, r3
 8013f12:	4a0e      	ldr	r2, [pc, #56]	@ (8013f4c <USB_EPStartXfer+0x748>)
 8013f14:	4694      	mov	ip, r2
 8013f16:	4463      	add	r3, ip
 8013f18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013f1a:	1d7b      	adds	r3, r7, #5
 8013f1c:	33ff      	adds	r3, #255	@ 0xff
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	b29a      	uxth	r2, r3
 8013f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013f26:	2076      	movs	r0, #118	@ 0x76
 8013f28:	183b      	adds	r3, r7, r0
 8013f2a:	683a      	ldr	r2, [r7, #0]
 8013f2c:	8912      	ldrh	r2, [r2, #8]
 8013f2e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	6959      	ldr	r1, [r3, #20]
 8013f34:	1d7b      	adds	r3, r7, #5
 8013f36:	33ff      	adds	r3, #255	@ 0xff
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	b29c      	uxth	r4, r3
 8013f3c:	183b      	adds	r3, r7, r0
 8013f3e:	881a      	ldrh	r2, [r3, #0]
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	0023      	movs	r3, r4
 8013f44:	f000 fed0 	bl	8014ce8 <USB_WritePMA>
 8013f48:	e16f      	b.n	801422a <USB_EPStartXfer+0xa26>
 8013f4a:	46c0      	nop			@ (mov r8, r8)
 8013f4c:	00000402 	.word	0x00000402
 8013f50:	ffff8000 	.word	0xffff8000
 8013f54:	00000406 	.word	0x00000406
 8013f58:	ffff8e8f 	.word	0xffff8e8f
 8013f5c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	6a1a      	ldr	r2, [r3, #32]
 8013f64:	1d7b      	adds	r3, r7, #5
 8013f66:	33ff      	adds	r3, #255	@ 0xff
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	1ad2      	subs	r2, r2, r3
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	781b      	ldrb	r3, [r3, #0]
 8013f76:	009b      	lsls	r3, r3, #2
 8013f78:	18d3      	adds	r3, r2, r3
 8013f7a:	881b      	ldrh	r3, [r3, #0]
 8013f7c:	b29b      	uxth	r3, r3
 8013f7e:	001a      	movs	r2, r3
 8013f80:	2340      	movs	r3, #64	@ 0x40
 8013f82:	4013      	ands	r3, r2
 8013f84:	d100      	bne.n	8013f88 <USB_EPStartXfer+0x784>
 8013f86:	e0a4      	b.n	80140d2 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	785b      	ldrb	r3, [r3, #1]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d000      	beq.n	8013f96 <USB_EPStartXfer+0x792>
 8013f94:	e070      	b.n	8014078 <USB_EPStartXfer+0x874>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	2250      	movs	r2, #80	@ 0x50
 8013f9e:	5a9b      	ldrh	r3, [r3, r2]
 8013fa0:	b29b      	uxth	r3, r3
 8013fa2:	001a      	movs	r2, r3
 8013fa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013fa6:	189b      	adds	r3, r3, r2
 8013fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	00da      	lsls	r2, r3, #3
 8013fb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013fb2:	18d3      	adds	r3, r2, r3
 8013fb4:	4abc      	ldr	r2, [pc, #752]	@ (80142a8 <USB_EPStartXfer+0xaa4>)
 8013fb6:	4694      	mov	ip, r2
 8013fb8:	4463      	add	r3, ip
 8013fba:	667b      	str	r3, [r7, #100]	@ 0x64
 8013fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013fbe:	881b      	ldrh	r3, [r3, #0]
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	059b      	lsls	r3, r3, #22
 8013fc4:	0d9b      	lsrs	r3, r3, #22
 8013fc6:	b29a      	uxth	r2, r3
 8013fc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013fca:	801a      	strh	r2, [r3, #0]
 8013fcc:	1d7b      	adds	r3, r7, #5
 8013fce:	33ff      	adds	r3, #255	@ 0xff
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8013fd4:	d922      	bls.n	801401c <USB_EPStartXfer+0x818>
 8013fd6:	1d7b      	adds	r3, r7, #5
 8013fd8:	33ff      	adds	r3, #255	@ 0xff
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	095b      	lsrs	r3, r3, #5
 8013fde:	21f0      	movs	r1, #240	@ 0xf0
 8013fe0:	187a      	adds	r2, r7, r1
 8013fe2:	6013      	str	r3, [r2, #0]
 8013fe4:	1d7b      	adds	r3, r7, #5
 8013fe6:	33ff      	adds	r3, #255	@ 0xff
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	221f      	movs	r2, #31
 8013fec:	4013      	ands	r3, r2
 8013fee:	d104      	bne.n	8013ffa <USB_EPStartXfer+0x7f6>
 8013ff0:	187b      	adds	r3, r7, r1
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	3b01      	subs	r3, #1
 8013ff6:	187a      	adds	r2, r7, r1
 8013ff8:	6013      	str	r3, [r2, #0]
 8013ffa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ffc:	881b      	ldrh	r3, [r3, #0]
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	23f0      	movs	r3, #240	@ 0xf0
 8014002:	18fb      	adds	r3, r7, r3
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	b29b      	uxth	r3, r3
 8014008:	029b      	lsls	r3, r3, #10
 801400a:	b29b      	uxth	r3, r3
 801400c:	4313      	orrs	r3, r2
 801400e:	b29b      	uxth	r3, r3
 8014010:	4aa6      	ldr	r2, [pc, #664]	@ (80142ac <USB_EPStartXfer+0xaa8>)
 8014012:	4313      	orrs	r3, r2
 8014014:	b29a      	uxth	r2, r3
 8014016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014018:	801a      	strh	r2, [r3, #0]
 801401a:	e048      	b.n	80140ae <USB_EPStartXfer+0x8aa>
 801401c:	1d7b      	adds	r3, r7, #5
 801401e:	33ff      	adds	r3, #255	@ 0xff
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d108      	bne.n	8014038 <USB_EPStartXfer+0x834>
 8014026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014028:	881b      	ldrh	r3, [r3, #0]
 801402a:	b29b      	uxth	r3, r3
 801402c:	4a9f      	ldr	r2, [pc, #636]	@ (80142ac <USB_EPStartXfer+0xaa8>)
 801402e:	4313      	orrs	r3, r2
 8014030:	b29a      	uxth	r2, r3
 8014032:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014034:	801a      	strh	r2, [r3, #0]
 8014036:	e03a      	b.n	80140ae <USB_EPStartXfer+0x8aa>
 8014038:	1d7b      	adds	r3, r7, #5
 801403a:	33ff      	adds	r3, #255	@ 0xff
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	085b      	lsrs	r3, r3, #1
 8014040:	21f0      	movs	r1, #240	@ 0xf0
 8014042:	187a      	adds	r2, r7, r1
 8014044:	6013      	str	r3, [r2, #0]
 8014046:	1d7b      	adds	r3, r7, #5
 8014048:	33ff      	adds	r3, #255	@ 0xff
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2201      	movs	r2, #1
 801404e:	4013      	ands	r3, r2
 8014050:	d004      	beq.n	801405c <USB_EPStartXfer+0x858>
 8014052:	187b      	adds	r3, r7, r1
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	3301      	adds	r3, #1
 8014058:	187a      	adds	r2, r7, r1
 801405a:	6013      	str	r3, [r2, #0]
 801405c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801405e:	881b      	ldrh	r3, [r3, #0]
 8014060:	b29a      	uxth	r2, r3
 8014062:	23f0      	movs	r3, #240	@ 0xf0
 8014064:	18fb      	adds	r3, r7, r3
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	b29b      	uxth	r3, r3
 801406a:	029b      	lsls	r3, r3, #10
 801406c:	b29b      	uxth	r3, r3
 801406e:	4313      	orrs	r3, r2
 8014070:	b29a      	uxth	r2, r3
 8014072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014074:	801a      	strh	r2, [r3, #0]
 8014076:	e01a      	b.n	80140ae <USB_EPStartXfer+0x8aa>
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	785b      	ldrb	r3, [r3, #1]
 801407c:	2b01      	cmp	r3, #1
 801407e:	d116      	bne.n	80140ae <USB_EPStartXfer+0x8aa>
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2250      	movs	r2, #80	@ 0x50
 8014084:	5a9b      	ldrh	r3, [r3, r2]
 8014086:	b29b      	uxth	r3, r3
 8014088:	001a      	movs	r2, r3
 801408a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801408c:	189b      	adds	r3, r3, r2
 801408e:	673b      	str	r3, [r7, #112]	@ 0x70
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	00da      	lsls	r2, r3, #3
 8014096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014098:	18d3      	adds	r3, r2, r3
 801409a:	4a83      	ldr	r2, [pc, #524]	@ (80142a8 <USB_EPStartXfer+0xaa4>)
 801409c:	4694      	mov	ip, r2
 801409e:	4463      	add	r3, ip
 80140a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80140a2:	1d7b      	adds	r3, r7, #5
 80140a4:	33ff      	adds	r3, #255	@ 0xff
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80140ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80140ae:	2076      	movs	r0, #118	@ 0x76
 80140b0:	183b      	adds	r3, r7, r0
 80140b2:	683a      	ldr	r2, [r7, #0]
 80140b4:	8952      	ldrh	r2, [r2, #10]
 80140b6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	6959      	ldr	r1, [r3, #20]
 80140bc:	1d7b      	adds	r3, r7, #5
 80140be:	33ff      	adds	r3, #255	@ 0xff
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	b29c      	uxth	r4, r3
 80140c4:	183b      	adds	r3, r7, r0
 80140c6:	881a      	ldrh	r2, [r3, #0]
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	0023      	movs	r3, r4
 80140cc:	f000 fe0c 	bl	8014ce8 <USB_WritePMA>
 80140d0:	e0ab      	b.n	801422a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	785b      	ldrb	r3, [r3, #1]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d000      	beq.n	80140dc <USB_EPStartXfer+0x8d8>
 80140da:	e070      	b.n	80141be <USB_EPStartXfer+0x9ba>
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2250      	movs	r2, #80	@ 0x50
 80140e4:	5a9b      	ldrh	r3, [r3, r2]
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	001a      	movs	r2, r3
 80140ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80140ec:	189b      	adds	r3, r3, r2
 80140ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	781b      	ldrb	r3, [r3, #0]
 80140f4:	00da      	lsls	r2, r3, #3
 80140f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80140f8:	18d3      	adds	r3, r2, r3
 80140fa:	4a6d      	ldr	r2, [pc, #436]	@ (80142b0 <USB_EPStartXfer+0xaac>)
 80140fc:	4694      	mov	ip, r2
 80140fe:	4463      	add	r3, ip
 8014100:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014102:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014104:	881b      	ldrh	r3, [r3, #0]
 8014106:	b29b      	uxth	r3, r3
 8014108:	059b      	lsls	r3, r3, #22
 801410a:	0d9b      	lsrs	r3, r3, #22
 801410c:	b29a      	uxth	r2, r3
 801410e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014110:	801a      	strh	r2, [r3, #0]
 8014112:	1d7b      	adds	r3, r7, #5
 8014114:	33ff      	adds	r3, #255	@ 0xff
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b3e      	cmp	r3, #62	@ 0x3e
 801411a:	d922      	bls.n	8014162 <USB_EPStartXfer+0x95e>
 801411c:	1d7b      	adds	r3, r7, #5
 801411e:	33ff      	adds	r3, #255	@ 0xff
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	095b      	lsrs	r3, r3, #5
 8014124:	21ec      	movs	r1, #236	@ 0xec
 8014126:	187a      	adds	r2, r7, r1
 8014128:	6013      	str	r3, [r2, #0]
 801412a:	1d7b      	adds	r3, r7, #5
 801412c:	33ff      	adds	r3, #255	@ 0xff
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	221f      	movs	r2, #31
 8014132:	4013      	ands	r3, r2
 8014134:	d104      	bne.n	8014140 <USB_EPStartXfer+0x93c>
 8014136:	187b      	adds	r3, r7, r1
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	3b01      	subs	r3, #1
 801413c:	187a      	adds	r2, r7, r1
 801413e:	6013      	str	r3, [r2, #0]
 8014140:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014142:	881b      	ldrh	r3, [r3, #0]
 8014144:	b29a      	uxth	r2, r3
 8014146:	23ec      	movs	r3, #236	@ 0xec
 8014148:	18fb      	adds	r3, r7, r3
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	b29b      	uxth	r3, r3
 801414e:	029b      	lsls	r3, r3, #10
 8014150:	b29b      	uxth	r3, r3
 8014152:	4313      	orrs	r3, r2
 8014154:	b29b      	uxth	r3, r3
 8014156:	4a55      	ldr	r2, [pc, #340]	@ (80142ac <USB_EPStartXfer+0xaa8>)
 8014158:	4313      	orrs	r3, r2
 801415a:	b29a      	uxth	r2, r3
 801415c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801415e:	801a      	strh	r2, [r3, #0]
 8014160:	e052      	b.n	8014208 <USB_EPStartXfer+0xa04>
 8014162:	1d7b      	adds	r3, r7, #5
 8014164:	33ff      	adds	r3, #255	@ 0xff
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d108      	bne.n	801417e <USB_EPStartXfer+0x97a>
 801416c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801416e:	881b      	ldrh	r3, [r3, #0]
 8014170:	b29b      	uxth	r3, r3
 8014172:	4a4e      	ldr	r2, [pc, #312]	@ (80142ac <USB_EPStartXfer+0xaa8>)
 8014174:	4313      	orrs	r3, r2
 8014176:	b29a      	uxth	r2, r3
 8014178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801417a:	801a      	strh	r2, [r3, #0]
 801417c:	e044      	b.n	8014208 <USB_EPStartXfer+0xa04>
 801417e:	1d7b      	adds	r3, r7, #5
 8014180:	33ff      	adds	r3, #255	@ 0xff
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	085b      	lsrs	r3, r3, #1
 8014186:	21ec      	movs	r1, #236	@ 0xec
 8014188:	187a      	adds	r2, r7, r1
 801418a:	6013      	str	r3, [r2, #0]
 801418c:	1d7b      	adds	r3, r7, #5
 801418e:	33ff      	adds	r3, #255	@ 0xff
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	2201      	movs	r2, #1
 8014194:	4013      	ands	r3, r2
 8014196:	d004      	beq.n	80141a2 <USB_EPStartXfer+0x99e>
 8014198:	187b      	adds	r3, r7, r1
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	3301      	adds	r3, #1
 801419e:	187a      	adds	r2, r7, r1
 80141a0:	6013      	str	r3, [r2, #0]
 80141a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80141a4:	881b      	ldrh	r3, [r3, #0]
 80141a6:	b29a      	uxth	r2, r3
 80141a8:	23ec      	movs	r3, #236	@ 0xec
 80141aa:	18fb      	adds	r3, r7, r3
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	029b      	lsls	r3, r3, #10
 80141b2:	b29b      	uxth	r3, r3
 80141b4:	4313      	orrs	r3, r2
 80141b6:	b29a      	uxth	r2, r3
 80141b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80141ba:	801a      	strh	r2, [r3, #0]
 80141bc:	e024      	b.n	8014208 <USB_EPStartXfer+0xa04>
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	785b      	ldrb	r3, [r3, #1]
 80141c2:	2b01      	cmp	r3, #1
 80141c4:	d120      	bne.n	8014208 <USB_EPStartXfer+0xa04>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2184      	movs	r1, #132	@ 0x84
 80141ca:	187a      	adds	r2, r7, r1
 80141cc:	6013      	str	r3, [r2, #0]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2250      	movs	r2, #80	@ 0x50
 80141d2:	5a9b      	ldrh	r3, [r3, r2]
 80141d4:	b29b      	uxth	r3, r3
 80141d6:	001a      	movs	r2, r3
 80141d8:	187b      	adds	r3, r7, r1
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	189b      	adds	r3, r3, r2
 80141de:	187a      	adds	r2, r7, r1
 80141e0:	6013      	str	r3, [r2, #0]
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	781b      	ldrb	r3, [r3, #0]
 80141e6:	00da      	lsls	r2, r3, #3
 80141e8:	187b      	adds	r3, r7, r1
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	18d3      	adds	r3, r2, r3
 80141ee:	4a30      	ldr	r2, [pc, #192]	@ (80142b0 <USB_EPStartXfer+0xaac>)
 80141f0:	4694      	mov	ip, r2
 80141f2:	4463      	add	r3, ip
 80141f4:	2180      	movs	r1, #128	@ 0x80
 80141f6:	187a      	adds	r2, r7, r1
 80141f8:	6013      	str	r3, [r2, #0]
 80141fa:	1d7b      	adds	r3, r7, #5
 80141fc:	33ff      	adds	r3, #255	@ 0xff
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	b29a      	uxth	r2, r3
 8014202:	187b      	adds	r3, r7, r1
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014208:	2076      	movs	r0, #118	@ 0x76
 801420a:	183b      	adds	r3, r7, r0
 801420c:	683a      	ldr	r2, [r7, #0]
 801420e:	8912      	ldrh	r2, [r2, #8]
 8014210:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	6959      	ldr	r1, [r3, #20]
 8014216:	1d7b      	adds	r3, r7, #5
 8014218:	33ff      	adds	r3, #255	@ 0xff
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	b29c      	uxth	r4, r3
 801421e:	183b      	adds	r3, r7, r0
 8014220:	881a      	ldrh	r2, [r3, #0]
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	0023      	movs	r3, r4
 8014226:	f000 fd5f 	bl	8014ce8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801422a:	687a      	ldr	r2, [r7, #4]
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	781b      	ldrb	r3, [r3, #0]
 8014230:	009b      	lsls	r3, r3, #2
 8014232:	18d3      	adds	r3, r2, r3
 8014234:	881b      	ldrh	r3, [r3, #0]
 8014236:	b29a      	uxth	r2, r3
 8014238:	200a      	movs	r0, #10
 801423a:	183b      	adds	r3, r7, r0
 801423c:	491d      	ldr	r1, [pc, #116]	@ (80142b4 <USB_EPStartXfer+0xab0>)
 801423e:	400a      	ands	r2, r1
 8014240:	801a      	strh	r2, [r3, #0]
 8014242:	183b      	adds	r3, r7, r0
 8014244:	183a      	adds	r2, r7, r0
 8014246:	8812      	ldrh	r2, [r2, #0]
 8014248:	2110      	movs	r1, #16
 801424a:	404a      	eors	r2, r1
 801424c:	801a      	strh	r2, [r3, #0]
 801424e:	183b      	adds	r3, r7, r0
 8014250:	183a      	adds	r2, r7, r0
 8014252:	8812      	ldrh	r2, [r2, #0]
 8014254:	2120      	movs	r1, #32
 8014256:	404a      	eors	r2, r1
 8014258:	801a      	strh	r2, [r3, #0]
 801425a:	687a      	ldr	r2, [r7, #4]
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	009b      	lsls	r3, r3, #2
 8014262:	18d3      	adds	r3, r2, r3
 8014264:	183a      	adds	r2, r7, r0
 8014266:	8812      	ldrh	r2, [r2, #0]
 8014268:	4913      	ldr	r1, [pc, #76]	@ (80142b8 <USB_EPStartXfer+0xab4>)
 801426a:	430a      	orrs	r2, r1
 801426c:	b292      	uxth	r2, r2
 801426e:	801a      	strh	r2, [r3, #0]
 8014270:	f000 fbf4 	bl	8014a5c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	7b1b      	ldrb	r3, [r3, #12]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d000      	beq.n	801427e <USB_EPStartXfer+0xa7a>
 801427c:	e0a9      	b.n	80143d2 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	699a      	ldr	r2, [r3, #24]
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	691b      	ldr	r3, [r3, #16]
 8014286:	429a      	cmp	r2, r3
 8014288:	d918      	bls.n	80142bc <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	691b      	ldr	r3, [r3, #16]
 801428e:	1d7a      	adds	r2, r7, #5
 8014290:	32ff      	adds	r2, #255	@ 0xff
 8014292:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	699a      	ldr	r2, [r3, #24]
 8014298:	1d7b      	adds	r3, r7, #5
 801429a:	33ff      	adds	r3, #255	@ 0xff
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	1ad2      	subs	r2, r2, r3
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	619a      	str	r2, [r3, #24]
 80142a4:	e012      	b.n	80142cc <USB_EPStartXfer+0xac8>
 80142a6:	46c0      	nop			@ (mov r8, r8)
 80142a8:	00000406 	.word	0x00000406
 80142ac:	ffff8000 	.word	0xffff8000
 80142b0:	00000402 	.word	0x00000402
 80142b4:	ffff8fbf 	.word	0xffff8fbf
 80142b8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	699b      	ldr	r3, [r3, #24]
 80142c0:	1d7a      	adds	r2, r7, #5
 80142c2:	32ff      	adds	r2, #255	@ 0xff
 80142c4:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	2200      	movs	r2, #0
 80142ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2190      	movs	r1, #144	@ 0x90
 80142d0:	187a      	adds	r2, r7, r1
 80142d2:	6013      	str	r3, [r2, #0]
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2250      	movs	r2, #80	@ 0x50
 80142d8:	5a9b      	ldrh	r3, [r3, r2]
 80142da:	b29b      	uxth	r3, r3
 80142dc:	001a      	movs	r2, r3
 80142de:	187b      	adds	r3, r7, r1
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	189b      	adds	r3, r3, r2
 80142e4:	187a      	adds	r2, r7, r1
 80142e6:	6013      	str	r3, [r2, #0]
 80142e8:	683b      	ldr	r3, [r7, #0]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	00da      	lsls	r2, r3, #3
 80142ee:	187b      	adds	r3, r7, r1
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	18d3      	adds	r3, r2, r3
 80142f4:	4acf      	ldr	r2, [pc, #828]	@ (8014634 <USB_EPStartXfer+0xe30>)
 80142f6:	4694      	mov	ip, r2
 80142f8:	4463      	add	r3, ip
 80142fa:	218c      	movs	r1, #140	@ 0x8c
 80142fc:	187a      	adds	r2, r7, r1
 80142fe:	6013      	str	r3, [r2, #0]
 8014300:	187b      	adds	r3, r7, r1
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	881b      	ldrh	r3, [r3, #0]
 8014306:	b29b      	uxth	r3, r3
 8014308:	059b      	lsls	r3, r3, #22
 801430a:	0d9b      	lsrs	r3, r3, #22
 801430c:	b29a      	uxth	r2, r3
 801430e:	187b      	adds	r3, r7, r1
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	801a      	strh	r2, [r3, #0]
 8014314:	1d7b      	adds	r3, r7, #5
 8014316:	33ff      	adds	r3, #255	@ 0xff
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	2b3e      	cmp	r3, #62	@ 0x3e
 801431c:	d925      	bls.n	801436a <USB_EPStartXfer+0xb66>
 801431e:	1d7b      	adds	r3, r7, #5
 8014320:	33ff      	adds	r3, #255	@ 0xff
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	095b      	lsrs	r3, r3, #5
 8014326:	21e8      	movs	r1, #232	@ 0xe8
 8014328:	187a      	adds	r2, r7, r1
 801432a:	6013      	str	r3, [r2, #0]
 801432c:	1d7b      	adds	r3, r7, #5
 801432e:	33ff      	adds	r3, #255	@ 0xff
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	221f      	movs	r2, #31
 8014334:	4013      	ands	r3, r2
 8014336:	d104      	bne.n	8014342 <USB_EPStartXfer+0xb3e>
 8014338:	187b      	adds	r3, r7, r1
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	3b01      	subs	r3, #1
 801433e:	187a      	adds	r2, r7, r1
 8014340:	6013      	str	r3, [r2, #0]
 8014342:	218c      	movs	r1, #140	@ 0x8c
 8014344:	187b      	adds	r3, r7, r1
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	881b      	ldrh	r3, [r3, #0]
 801434a:	b29a      	uxth	r2, r3
 801434c:	23e8      	movs	r3, #232	@ 0xe8
 801434e:	18fb      	adds	r3, r7, r3
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	b29b      	uxth	r3, r3
 8014354:	029b      	lsls	r3, r3, #10
 8014356:	b29b      	uxth	r3, r3
 8014358:	4313      	orrs	r3, r2
 801435a:	b29b      	uxth	r3, r3
 801435c:	4ab6      	ldr	r2, [pc, #728]	@ (8014638 <USB_EPStartXfer+0xe34>)
 801435e:	4313      	orrs	r3, r2
 8014360:	b29a      	uxth	r2, r3
 8014362:	187b      	adds	r3, r7, r1
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	801a      	strh	r2, [r3, #0]
 8014368:	e353      	b.n	8014a12 <USB_EPStartXfer+0x120e>
 801436a:	1d7b      	adds	r3, r7, #5
 801436c:	33ff      	adds	r3, #255	@ 0xff
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d10b      	bne.n	801438c <USB_EPStartXfer+0xb88>
 8014374:	218c      	movs	r1, #140	@ 0x8c
 8014376:	187b      	adds	r3, r7, r1
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	881b      	ldrh	r3, [r3, #0]
 801437c:	b29b      	uxth	r3, r3
 801437e:	4aae      	ldr	r2, [pc, #696]	@ (8014638 <USB_EPStartXfer+0xe34>)
 8014380:	4313      	orrs	r3, r2
 8014382:	b29a      	uxth	r2, r3
 8014384:	187b      	adds	r3, r7, r1
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	801a      	strh	r2, [r3, #0]
 801438a:	e342      	b.n	8014a12 <USB_EPStartXfer+0x120e>
 801438c:	1d7b      	adds	r3, r7, #5
 801438e:	33ff      	adds	r3, #255	@ 0xff
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	085b      	lsrs	r3, r3, #1
 8014394:	21e8      	movs	r1, #232	@ 0xe8
 8014396:	187a      	adds	r2, r7, r1
 8014398:	6013      	str	r3, [r2, #0]
 801439a:	1d7b      	adds	r3, r7, #5
 801439c:	33ff      	adds	r3, #255	@ 0xff
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	2201      	movs	r2, #1
 80143a2:	4013      	ands	r3, r2
 80143a4:	d004      	beq.n	80143b0 <USB_EPStartXfer+0xbac>
 80143a6:	187b      	adds	r3, r7, r1
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	3301      	adds	r3, #1
 80143ac:	187a      	adds	r2, r7, r1
 80143ae:	6013      	str	r3, [r2, #0]
 80143b0:	218c      	movs	r1, #140	@ 0x8c
 80143b2:	187b      	adds	r3, r7, r1
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	881b      	ldrh	r3, [r3, #0]
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	23e8      	movs	r3, #232	@ 0xe8
 80143bc:	18fb      	adds	r3, r7, r3
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	029b      	lsls	r3, r3, #10
 80143c4:	b29b      	uxth	r3, r3
 80143c6:	4313      	orrs	r3, r2
 80143c8:	b29a      	uxth	r2, r3
 80143ca:	187b      	adds	r3, r7, r1
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	801a      	strh	r2, [r3, #0]
 80143d0:	e31f      	b.n	8014a12 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	78db      	ldrb	r3, [r3, #3]
 80143d6:	2b02      	cmp	r3, #2
 80143d8:	d000      	beq.n	80143dc <USB_EPStartXfer+0xbd8>
 80143da:	e191      	b.n	8014700 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	785b      	ldrb	r3, [r3, #1]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d000      	beq.n	80143e6 <USB_EPStartXfer+0xbe2>
 80143e4:	e07c      	b.n	80144e0 <USB_EPStartXfer+0xcdc>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	21ac      	movs	r1, #172	@ 0xac
 80143ea:	187a      	adds	r2, r7, r1
 80143ec:	6013      	str	r3, [r2, #0]
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2250      	movs	r2, #80	@ 0x50
 80143f2:	5a9b      	ldrh	r3, [r3, r2]
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	001a      	movs	r2, r3
 80143f8:	187b      	adds	r3, r7, r1
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	189b      	adds	r3, r3, r2
 80143fe:	187a      	adds	r2, r7, r1
 8014400:	6013      	str	r3, [r2, #0]
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	781b      	ldrb	r3, [r3, #0]
 8014406:	00da      	lsls	r2, r3, #3
 8014408:	187b      	adds	r3, r7, r1
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	18d3      	adds	r3, r2, r3
 801440e:	4a8b      	ldr	r2, [pc, #556]	@ (801463c <USB_EPStartXfer+0xe38>)
 8014410:	4694      	mov	ip, r2
 8014412:	4463      	add	r3, ip
 8014414:	21a8      	movs	r1, #168	@ 0xa8
 8014416:	187a      	adds	r2, r7, r1
 8014418:	6013      	str	r3, [r2, #0]
 801441a:	187b      	adds	r3, r7, r1
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	b29b      	uxth	r3, r3
 8014422:	059b      	lsls	r3, r3, #22
 8014424:	0d9b      	lsrs	r3, r3, #22
 8014426:	b29a      	uxth	r2, r3
 8014428:	187b      	adds	r3, r7, r1
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	801a      	strh	r2, [r3, #0]
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	691b      	ldr	r3, [r3, #16]
 8014432:	2b3e      	cmp	r3, #62	@ 0x3e
 8014434:	d923      	bls.n	801447e <USB_EPStartXfer+0xc7a>
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	691b      	ldr	r3, [r3, #16]
 801443a:	095b      	lsrs	r3, r3, #5
 801443c:	21e4      	movs	r1, #228	@ 0xe4
 801443e:	187a      	adds	r2, r7, r1
 8014440:	6013      	str	r3, [r2, #0]
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	691b      	ldr	r3, [r3, #16]
 8014446:	221f      	movs	r2, #31
 8014448:	4013      	ands	r3, r2
 801444a:	d104      	bne.n	8014456 <USB_EPStartXfer+0xc52>
 801444c:	187b      	adds	r3, r7, r1
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	3b01      	subs	r3, #1
 8014452:	187a      	adds	r2, r7, r1
 8014454:	6013      	str	r3, [r2, #0]
 8014456:	21a8      	movs	r1, #168	@ 0xa8
 8014458:	187b      	adds	r3, r7, r1
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	881b      	ldrh	r3, [r3, #0]
 801445e:	b29a      	uxth	r2, r3
 8014460:	23e4      	movs	r3, #228	@ 0xe4
 8014462:	18fb      	adds	r3, r7, r3
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	b29b      	uxth	r3, r3
 8014468:	029b      	lsls	r3, r3, #10
 801446a:	b29b      	uxth	r3, r3
 801446c:	4313      	orrs	r3, r2
 801446e:	b29b      	uxth	r3, r3
 8014470:	4a71      	ldr	r2, [pc, #452]	@ (8014638 <USB_EPStartXfer+0xe34>)
 8014472:	4313      	orrs	r3, r2
 8014474:	b29a      	uxth	r2, r3
 8014476:	187b      	adds	r3, r7, r1
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	801a      	strh	r2, [r3, #0]
 801447c:	e054      	b.n	8014528 <USB_EPStartXfer+0xd24>
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	691b      	ldr	r3, [r3, #16]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d10b      	bne.n	801449e <USB_EPStartXfer+0xc9a>
 8014486:	21a8      	movs	r1, #168	@ 0xa8
 8014488:	187b      	adds	r3, r7, r1
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	881b      	ldrh	r3, [r3, #0]
 801448e:	b29b      	uxth	r3, r3
 8014490:	4a69      	ldr	r2, [pc, #420]	@ (8014638 <USB_EPStartXfer+0xe34>)
 8014492:	4313      	orrs	r3, r2
 8014494:	b29a      	uxth	r2, r3
 8014496:	187b      	adds	r3, r7, r1
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	801a      	strh	r2, [r3, #0]
 801449c:	e044      	b.n	8014528 <USB_EPStartXfer+0xd24>
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	691b      	ldr	r3, [r3, #16]
 80144a2:	085b      	lsrs	r3, r3, #1
 80144a4:	21e4      	movs	r1, #228	@ 0xe4
 80144a6:	187a      	adds	r2, r7, r1
 80144a8:	6013      	str	r3, [r2, #0]
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	691b      	ldr	r3, [r3, #16]
 80144ae:	2201      	movs	r2, #1
 80144b0:	4013      	ands	r3, r2
 80144b2:	d004      	beq.n	80144be <USB_EPStartXfer+0xcba>
 80144b4:	187b      	adds	r3, r7, r1
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	3301      	adds	r3, #1
 80144ba:	187a      	adds	r2, r7, r1
 80144bc:	6013      	str	r3, [r2, #0]
 80144be:	21a8      	movs	r1, #168	@ 0xa8
 80144c0:	187b      	adds	r3, r7, r1
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	881b      	ldrh	r3, [r3, #0]
 80144c6:	b29a      	uxth	r2, r3
 80144c8:	23e4      	movs	r3, #228	@ 0xe4
 80144ca:	18fb      	adds	r3, r7, r3
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	029b      	lsls	r3, r3, #10
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	4313      	orrs	r3, r2
 80144d6:	b29a      	uxth	r2, r3
 80144d8:	187b      	adds	r3, r7, r1
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	801a      	strh	r2, [r3, #0]
 80144de:	e023      	b.n	8014528 <USB_EPStartXfer+0xd24>
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	785b      	ldrb	r3, [r3, #1]
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d11f      	bne.n	8014528 <USB_EPStartXfer+0xd24>
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	21b4      	movs	r1, #180	@ 0xb4
 80144ec:	187a      	adds	r2, r7, r1
 80144ee:	6013      	str	r3, [r2, #0]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2250      	movs	r2, #80	@ 0x50
 80144f4:	5a9b      	ldrh	r3, [r3, r2]
 80144f6:	b29b      	uxth	r3, r3
 80144f8:	001a      	movs	r2, r3
 80144fa:	187b      	adds	r3, r7, r1
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	189b      	adds	r3, r3, r2
 8014500:	187a      	adds	r2, r7, r1
 8014502:	6013      	str	r3, [r2, #0]
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	00da      	lsls	r2, r3, #3
 801450a:	187b      	adds	r3, r7, r1
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	18d3      	adds	r3, r2, r3
 8014510:	4a4a      	ldr	r2, [pc, #296]	@ (801463c <USB_EPStartXfer+0xe38>)
 8014512:	4694      	mov	ip, r2
 8014514:	4463      	add	r3, ip
 8014516:	21b0      	movs	r1, #176	@ 0xb0
 8014518:	187a      	adds	r2, r7, r1
 801451a:	6013      	str	r3, [r2, #0]
 801451c:	683b      	ldr	r3, [r7, #0]
 801451e:	691b      	ldr	r3, [r3, #16]
 8014520:	b29a      	uxth	r2, r3
 8014522:	187b      	adds	r3, r7, r1
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	801a      	strh	r2, [r3, #0]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	22a4      	movs	r2, #164	@ 0xa4
 801452c:	18ba      	adds	r2, r7, r2
 801452e:	6013      	str	r3, [r2, #0]
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	785b      	ldrb	r3, [r3, #1]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d000      	beq.n	801453a <USB_EPStartXfer+0xd36>
 8014538:	e082      	b.n	8014640 <USB_EPStartXfer+0xe3c>
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	219c      	movs	r1, #156	@ 0x9c
 801453e:	187a      	adds	r2, r7, r1
 8014540:	6013      	str	r3, [r2, #0]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2250      	movs	r2, #80	@ 0x50
 8014546:	5a9b      	ldrh	r3, [r3, r2]
 8014548:	b29b      	uxth	r3, r3
 801454a:	001a      	movs	r2, r3
 801454c:	187b      	adds	r3, r7, r1
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	189b      	adds	r3, r3, r2
 8014552:	187a      	adds	r2, r7, r1
 8014554:	6013      	str	r3, [r2, #0]
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	00da      	lsls	r2, r3, #3
 801455c:	187b      	adds	r3, r7, r1
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	18d3      	adds	r3, r2, r3
 8014562:	4a34      	ldr	r2, [pc, #208]	@ (8014634 <USB_EPStartXfer+0xe30>)
 8014564:	4694      	mov	ip, r2
 8014566:	4463      	add	r3, ip
 8014568:	2198      	movs	r1, #152	@ 0x98
 801456a:	187a      	adds	r2, r7, r1
 801456c:	6013      	str	r3, [r2, #0]
 801456e:	187b      	adds	r3, r7, r1
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	b29b      	uxth	r3, r3
 8014576:	059b      	lsls	r3, r3, #22
 8014578:	0d9b      	lsrs	r3, r3, #22
 801457a:	b29a      	uxth	r2, r3
 801457c:	187b      	adds	r3, r7, r1
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	801a      	strh	r2, [r3, #0]
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	691b      	ldr	r3, [r3, #16]
 8014586:	2b3e      	cmp	r3, #62	@ 0x3e
 8014588:	d923      	bls.n	80145d2 <USB_EPStartXfer+0xdce>
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	691b      	ldr	r3, [r3, #16]
 801458e:	095b      	lsrs	r3, r3, #5
 8014590:	21e0      	movs	r1, #224	@ 0xe0
 8014592:	187a      	adds	r2, r7, r1
 8014594:	6013      	str	r3, [r2, #0]
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	691b      	ldr	r3, [r3, #16]
 801459a:	221f      	movs	r2, #31
 801459c:	4013      	ands	r3, r2
 801459e:	d104      	bne.n	80145aa <USB_EPStartXfer+0xda6>
 80145a0:	187b      	adds	r3, r7, r1
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	3b01      	subs	r3, #1
 80145a6:	187a      	adds	r2, r7, r1
 80145a8:	6013      	str	r3, [r2, #0]
 80145aa:	2198      	movs	r1, #152	@ 0x98
 80145ac:	187b      	adds	r3, r7, r1
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	881b      	ldrh	r3, [r3, #0]
 80145b2:	b29a      	uxth	r2, r3
 80145b4:	23e0      	movs	r3, #224	@ 0xe0
 80145b6:	18fb      	adds	r3, r7, r3
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	029b      	lsls	r3, r3, #10
 80145be:	b29b      	uxth	r3, r3
 80145c0:	4313      	orrs	r3, r2
 80145c2:	b29b      	uxth	r3, r3
 80145c4:	4a1c      	ldr	r2, [pc, #112]	@ (8014638 <USB_EPStartXfer+0xe34>)
 80145c6:	4313      	orrs	r3, r2
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	187b      	adds	r3, r7, r1
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	801a      	strh	r2, [r3, #0]
 80145d0:	e057      	b.n	8014682 <USB_EPStartXfer+0xe7e>
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	691b      	ldr	r3, [r3, #16]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d10b      	bne.n	80145f2 <USB_EPStartXfer+0xdee>
 80145da:	2198      	movs	r1, #152	@ 0x98
 80145dc:	187b      	adds	r3, r7, r1
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	881b      	ldrh	r3, [r3, #0]
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	4a14      	ldr	r2, [pc, #80]	@ (8014638 <USB_EPStartXfer+0xe34>)
 80145e6:	4313      	orrs	r3, r2
 80145e8:	b29a      	uxth	r2, r3
 80145ea:	187b      	adds	r3, r7, r1
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	801a      	strh	r2, [r3, #0]
 80145f0:	e047      	b.n	8014682 <USB_EPStartXfer+0xe7e>
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	691b      	ldr	r3, [r3, #16]
 80145f6:	085b      	lsrs	r3, r3, #1
 80145f8:	21e0      	movs	r1, #224	@ 0xe0
 80145fa:	187a      	adds	r2, r7, r1
 80145fc:	6013      	str	r3, [r2, #0]
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	691b      	ldr	r3, [r3, #16]
 8014602:	2201      	movs	r2, #1
 8014604:	4013      	ands	r3, r2
 8014606:	d004      	beq.n	8014612 <USB_EPStartXfer+0xe0e>
 8014608:	187b      	adds	r3, r7, r1
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	3301      	adds	r3, #1
 801460e:	187a      	adds	r2, r7, r1
 8014610:	6013      	str	r3, [r2, #0]
 8014612:	2198      	movs	r1, #152	@ 0x98
 8014614:	187b      	adds	r3, r7, r1
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	881b      	ldrh	r3, [r3, #0]
 801461a:	b29a      	uxth	r2, r3
 801461c:	23e0      	movs	r3, #224	@ 0xe0
 801461e:	18fb      	adds	r3, r7, r3
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	b29b      	uxth	r3, r3
 8014624:	029b      	lsls	r3, r3, #10
 8014626:	b29b      	uxth	r3, r3
 8014628:	4313      	orrs	r3, r2
 801462a:	b29a      	uxth	r2, r3
 801462c:	187b      	adds	r3, r7, r1
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	801a      	strh	r2, [r3, #0]
 8014632:	e026      	b.n	8014682 <USB_EPStartXfer+0xe7e>
 8014634:	00000406 	.word	0x00000406
 8014638:	ffff8000 	.word	0xffff8000
 801463c:	00000402 	.word	0x00000402
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	785b      	ldrb	r3, [r3, #1]
 8014644:	2b01      	cmp	r3, #1
 8014646:	d11c      	bne.n	8014682 <USB_EPStartXfer+0xe7e>
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2250      	movs	r2, #80	@ 0x50
 801464c:	5a9b      	ldrh	r3, [r3, r2]
 801464e:	b29b      	uxth	r3, r3
 8014650:	001a      	movs	r2, r3
 8014652:	21a4      	movs	r1, #164	@ 0xa4
 8014654:	187b      	adds	r3, r7, r1
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	189b      	adds	r3, r3, r2
 801465a:	187a      	adds	r2, r7, r1
 801465c:	6013      	str	r3, [r2, #0]
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	00da      	lsls	r2, r3, #3
 8014664:	187b      	adds	r3, r7, r1
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	18d3      	adds	r3, r2, r3
 801466a:	4ad2      	ldr	r2, [pc, #840]	@ (80149b4 <USB_EPStartXfer+0x11b0>)
 801466c:	4694      	mov	ip, r2
 801466e:	4463      	add	r3, ip
 8014670:	21a0      	movs	r1, #160	@ 0xa0
 8014672:	187a      	adds	r2, r7, r1
 8014674:	6013      	str	r3, [r2, #0]
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	691b      	ldr	r3, [r3, #16]
 801467a:	b29a      	uxth	r2, r3
 801467c:	187b      	adds	r3, r7, r1
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	69db      	ldr	r3, [r3, #28]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d100      	bne.n	801468c <USB_EPStartXfer+0xe88>
 801468a:	e1c2      	b.n	8014a12 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801468c:	687a      	ldr	r2, [r7, #4]
 801468e:	683b      	ldr	r3, [r7, #0]
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	009b      	lsls	r3, r3, #2
 8014694:	18d2      	adds	r2, r2, r3
 8014696:	2196      	movs	r1, #150	@ 0x96
 8014698:	187b      	adds	r3, r7, r1
 801469a:	8812      	ldrh	r2, [r2, #0]
 801469c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801469e:	187b      	adds	r3, r7, r1
 80146a0:	881a      	ldrh	r2, [r3, #0]
 80146a2:	2380      	movs	r3, #128	@ 0x80
 80146a4:	01db      	lsls	r3, r3, #7
 80146a6:	4013      	ands	r3, r2
 80146a8:	d004      	beq.n	80146b4 <USB_EPStartXfer+0xeb0>
 80146aa:	187b      	adds	r3, r7, r1
 80146ac:	881b      	ldrh	r3, [r3, #0]
 80146ae:	2240      	movs	r2, #64	@ 0x40
 80146b0:	4013      	ands	r3, r2
 80146b2:	d10d      	bne.n	80146d0 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80146b4:	2196      	movs	r1, #150	@ 0x96
 80146b6:	187b      	adds	r3, r7, r1
 80146b8:	881a      	ldrh	r2, [r3, #0]
 80146ba:	2380      	movs	r3, #128	@ 0x80
 80146bc:	01db      	lsls	r3, r3, #7
 80146be:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80146c0:	d000      	beq.n	80146c4 <USB_EPStartXfer+0xec0>
 80146c2:	e1a6      	b.n	8014a12 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80146c4:	187b      	adds	r3, r7, r1
 80146c6:	881b      	ldrh	r3, [r3, #0]
 80146c8:	2240      	movs	r2, #64	@ 0x40
 80146ca:	4013      	ands	r3, r2
 80146cc:	d000      	beq.n	80146d0 <USB_EPStartXfer+0xecc>
 80146ce:	e1a0      	b.n	8014a12 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	009b      	lsls	r3, r3, #2
 80146d8:	18d3      	adds	r3, r2, r3
 80146da:	881b      	ldrh	r3, [r3, #0]
 80146dc:	b29a      	uxth	r2, r3
 80146de:	2094      	movs	r0, #148	@ 0x94
 80146e0:	183b      	adds	r3, r7, r0
 80146e2:	49b5      	ldr	r1, [pc, #724]	@ (80149b8 <USB_EPStartXfer+0x11b4>)
 80146e4:	400a      	ands	r2, r1
 80146e6:	801a      	strh	r2, [r3, #0]
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	18d3      	adds	r3, r2, r3
 80146f2:	183a      	adds	r2, r7, r0
 80146f4:	8812      	ldrh	r2, [r2, #0]
 80146f6:	49b1      	ldr	r1, [pc, #708]	@ (80149bc <USB_EPStartXfer+0x11b8>)
 80146f8:	430a      	orrs	r2, r1
 80146fa:	b292      	uxth	r2, r2
 80146fc:	801a      	strh	r2, [r3, #0]
 80146fe:	e188      	b.n	8014a12 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	78db      	ldrb	r3, [r3, #3]
 8014704:	2b01      	cmp	r3, #1
 8014706:	d000      	beq.n	801470a <USB_EPStartXfer+0xf06>
 8014708:	e181      	b.n	8014a0e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	699a      	ldr	r2, [r3, #24]
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	691b      	ldr	r3, [r3, #16]
 8014712:	429a      	cmp	r2, r3
 8014714:	d90d      	bls.n	8014732 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	691b      	ldr	r3, [r3, #16]
 801471a:	1d7a      	adds	r2, r7, #5
 801471c:	32ff      	adds	r2, #255	@ 0xff
 801471e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	699a      	ldr	r2, [r3, #24]
 8014724:	1d7b      	adds	r3, r7, #5
 8014726:	33ff      	adds	r3, #255	@ 0xff
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	1ad2      	subs	r2, r2, r3
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	619a      	str	r2, [r3, #24]
 8014730:	e007      	b.n	8014742 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	699b      	ldr	r3, [r3, #24]
 8014736:	1d7a      	adds	r2, r7, #5
 8014738:	32ff      	adds	r2, #255	@ 0xff
 801473a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	2200      	movs	r2, #0
 8014740:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	785b      	ldrb	r3, [r3, #1]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d000      	beq.n	801474c <USB_EPStartXfer+0xf48>
 801474a:	e082      	b.n	8014852 <USB_EPStartXfer+0x104e>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	21cc      	movs	r1, #204	@ 0xcc
 8014750:	187a      	adds	r2, r7, r1
 8014752:	6013      	str	r3, [r2, #0]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2250      	movs	r2, #80	@ 0x50
 8014758:	5a9b      	ldrh	r3, [r3, r2]
 801475a:	b29b      	uxth	r3, r3
 801475c:	001a      	movs	r2, r3
 801475e:	187b      	adds	r3, r7, r1
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	189b      	adds	r3, r3, r2
 8014764:	187a      	adds	r2, r7, r1
 8014766:	6013      	str	r3, [r2, #0]
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	00da      	lsls	r2, r3, #3
 801476e:	187b      	adds	r3, r7, r1
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	18d3      	adds	r3, r2, r3
 8014774:	4a92      	ldr	r2, [pc, #584]	@ (80149c0 <USB_EPStartXfer+0x11bc>)
 8014776:	4694      	mov	ip, r2
 8014778:	4463      	add	r3, ip
 801477a:	21c8      	movs	r1, #200	@ 0xc8
 801477c:	187a      	adds	r2, r7, r1
 801477e:	6013      	str	r3, [r2, #0]
 8014780:	187b      	adds	r3, r7, r1
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	881b      	ldrh	r3, [r3, #0]
 8014786:	b29b      	uxth	r3, r3
 8014788:	059b      	lsls	r3, r3, #22
 801478a:	0d9b      	lsrs	r3, r3, #22
 801478c:	b29a      	uxth	r2, r3
 801478e:	187b      	adds	r3, r7, r1
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	801a      	strh	r2, [r3, #0]
 8014794:	1d7b      	adds	r3, r7, #5
 8014796:	33ff      	adds	r3, #255	@ 0xff
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2b3e      	cmp	r3, #62	@ 0x3e
 801479c:	d925      	bls.n	80147ea <USB_EPStartXfer+0xfe6>
 801479e:	1d7b      	adds	r3, r7, #5
 80147a0:	33ff      	adds	r3, #255	@ 0xff
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	095b      	lsrs	r3, r3, #5
 80147a6:	21dc      	movs	r1, #220	@ 0xdc
 80147a8:	187a      	adds	r2, r7, r1
 80147aa:	6013      	str	r3, [r2, #0]
 80147ac:	1d7b      	adds	r3, r7, #5
 80147ae:	33ff      	adds	r3, #255	@ 0xff
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	221f      	movs	r2, #31
 80147b4:	4013      	ands	r3, r2
 80147b6:	d104      	bne.n	80147c2 <USB_EPStartXfer+0xfbe>
 80147b8:	187b      	adds	r3, r7, r1
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	3b01      	subs	r3, #1
 80147be:	187a      	adds	r2, r7, r1
 80147c0:	6013      	str	r3, [r2, #0]
 80147c2:	21c8      	movs	r1, #200	@ 0xc8
 80147c4:	187b      	adds	r3, r7, r1
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	881b      	ldrh	r3, [r3, #0]
 80147ca:	b29a      	uxth	r2, r3
 80147cc:	23dc      	movs	r3, #220	@ 0xdc
 80147ce:	18fb      	adds	r3, r7, r3
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	029b      	lsls	r3, r3, #10
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	4313      	orrs	r3, r2
 80147da:	b29b      	uxth	r3, r3
 80147dc:	4a79      	ldr	r2, [pc, #484]	@ (80149c4 <USB_EPStartXfer+0x11c0>)
 80147de:	4313      	orrs	r3, r2
 80147e0:	b29a      	uxth	r2, r3
 80147e2:	187b      	adds	r3, r7, r1
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	801a      	strh	r2, [r3, #0]
 80147e8:	e058      	b.n	801489c <USB_EPStartXfer+0x1098>
 80147ea:	1d7b      	adds	r3, r7, #5
 80147ec:	33ff      	adds	r3, #255	@ 0xff
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d10b      	bne.n	801480c <USB_EPStartXfer+0x1008>
 80147f4:	21c8      	movs	r1, #200	@ 0xc8
 80147f6:	187b      	adds	r3, r7, r1
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	881b      	ldrh	r3, [r3, #0]
 80147fc:	b29b      	uxth	r3, r3
 80147fe:	4a71      	ldr	r2, [pc, #452]	@ (80149c4 <USB_EPStartXfer+0x11c0>)
 8014800:	4313      	orrs	r3, r2
 8014802:	b29a      	uxth	r2, r3
 8014804:	187b      	adds	r3, r7, r1
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	801a      	strh	r2, [r3, #0]
 801480a:	e047      	b.n	801489c <USB_EPStartXfer+0x1098>
 801480c:	1d7b      	adds	r3, r7, #5
 801480e:	33ff      	adds	r3, #255	@ 0xff
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	085b      	lsrs	r3, r3, #1
 8014814:	21dc      	movs	r1, #220	@ 0xdc
 8014816:	187a      	adds	r2, r7, r1
 8014818:	6013      	str	r3, [r2, #0]
 801481a:	1d7b      	adds	r3, r7, #5
 801481c:	33ff      	adds	r3, #255	@ 0xff
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	2201      	movs	r2, #1
 8014822:	4013      	ands	r3, r2
 8014824:	d004      	beq.n	8014830 <USB_EPStartXfer+0x102c>
 8014826:	187b      	adds	r3, r7, r1
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	3301      	adds	r3, #1
 801482c:	187a      	adds	r2, r7, r1
 801482e:	6013      	str	r3, [r2, #0]
 8014830:	21c8      	movs	r1, #200	@ 0xc8
 8014832:	187b      	adds	r3, r7, r1
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	881b      	ldrh	r3, [r3, #0]
 8014838:	b29a      	uxth	r2, r3
 801483a:	23dc      	movs	r3, #220	@ 0xdc
 801483c:	18fb      	adds	r3, r7, r3
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	b29b      	uxth	r3, r3
 8014842:	029b      	lsls	r3, r3, #10
 8014844:	b29b      	uxth	r3, r3
 8014846:	4313      	orrs	r3, r2
 8014848:	b29a      	uxth	r2, r3
 801484a:	187b      	adds	r3, r7, r1
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	801a      	strh	r2, [r3, #0]
 8014850:	e024      	b.n	801489c <USB_EPStartXfer+0x1098>
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	785b      	ldrb	r3, [r3, #1]
 8014856:	2b01      	cmp	r3, #1
 8014858:	d120      	bne.n	801489c <USB_EPStartXfer+0x1098>
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	21d4      	movs	r1, #212	@ 0xd4
 801485e:	187a      	adds	r2, r7, r1
 8014860:	6013      	str	r3, [r2, #0]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2250      	movs	r2, #80	@ 0x50
 8014866:	5a9b      	ldrh	r3, [r3, r2]
 8014868:	b29b      	uxth	r3, r3
 801486a:	001a      	movs	r2, r3
 801486c:	187b      	adds	r3, r7, r1
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	189b      	adds	r3, r3, r2
 8014872:	187a      	adds	r2, r7, r1
 8014874:	6013      	str	r3, [r2, #0]
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	00da      	lsls	r2, r3, #3
 801487c:	187b      	adds	r3, r7, r1
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	18d3      	adds	r3, r2, r3
 8014882:	4a4f      	ldr	r2, [pc, #316]	@ (80149c0 <USB_EPStartXfer+0x11bc>)
 8014884:	4694      	mov	ip, r2
 8014886:	4463      	add	r3, ip
 8014888:	21d0      	movs	r1, #208	@ 0xd0
 801488a:	187a      	adds	r2, r7, r1
 801488c:	6013      	str	r3, [r2, #0]
 801488e:	1d7b      	adds	r3, r7, #5
 8014890:	33ff      	adds	r3, #255	@ 0xff
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	b29a      	uxth	r2, r3
 8014896:	187b      	adds	r3, r7, r1
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	801a      	strh	r2, [r3, #0]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	22c4      	movs	r2, #196	@ 0xc4
 80148a0:	18ba      	adds	r2, r7, r2
 80148a2:	6013      	str	r3, [r2, #0]
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	785b      	ldrb	r3, [r3, #1]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d000      	beq.n	80148ae <USB_EPStartXfer+0x10aa>
 80148ac:	e08c      	b.n	80149c8 <USB_EPStartXfer+0x11c4>
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	21bc      	movs	r1, #188	@ 0xbc
 80148b2:	187a      	adds	r2, r7, r1
 80148b4:	6013      	str	r3, [r2, #0]
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2250      	movs	r2, #80	@ 0x50
 80148ba:	5a9b      	ldrh	r3, [r3, r2]
 80148bc:	b29b      	uxth	r3, r3
 80148be:	001a      	movs	r2, r3
 80148c0:	187b      	adds	r3, r7, r1
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	189b      	adds	r3, r3, r2
 80148c6:	187a      	adds	r2, r7, r1
 80148c8:	6013      	str	r3, [r2, #0]
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	781b      	ldrb	r3, [r3, #0]
 80148ce:	00da      	lsls	r2, r3, #3
 80148d0:	187b      	adds	r3, r7, r1
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	18d3      	adds	r3, r2, r3
 80148d6:	4a37      	ldr	r2, [pc, #220]	@ (80149b4 <USB_EPStartXfer+0x11b0>)
 80148d8:	4694      	mov	ip, r2
 80148da:	4463      	add	r3, ip
 80148dc:	21b8      	movs	r1, #184	@ 0xb8
 80148de:	187a      	adds	r2, r7, r1
 80148e0:	6013      	str	r3, [r2, #0]
 80148e2:	187b      	adds	r3, r7, r1
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	881b      	ldrh	r3, [r3, #0]
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	059b      	lsls	r3, r3, #22
 80148ec:	0d9b      	lsrs	r3, r3, #22
 80148ee:	b29a      	uxth	r2, r3
 80148f0:	187b      	adds	r3, r7, r1
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	801a      	strh	r2, [r3, #0]
 80148f6:	1d7b      	adds	r3, r7, #5
 80148f8:	33ff      	adds	r3, #255	@ 0xff
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80148fe:	d925      	bls.n	801494c <USB_EPStartXfer+0x1148>
 8014900:	1d7b      	adds	r3, r7, #5
 8014902:	33ff      	adds	r3, #255	@ 0xff
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	095b      	lsrs	r3, r3, #5
 8014908:	21d8      	movs	r1, #216	@ 0xd8
 801490a:	187a      	adds	r2, r7, r1
 801490c:	6013      	str	r3, [r2, #0]
 801490e:	1d7b      	adds	r3, r7, #5
 8014910:	33ff      	adds	r3, #255	@ 0xff
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	221f      	movs	r2, #31
 8014916:	4013      	ands	r3, r2
 8014918:	d104      	bne.n	8014924 <USB_EPStartXfer+0x1120>
 801491a:	187b      	adds	r3, r7, r1
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	3b01      	subs	r3, #1
 8014920:	187a      	adds	r2, r7, r1
 8014922:	6013      	str	r3, [r2, #0]
 8014924:	21b8      	movs	r1, #184	@ 0xb8
 8014926:	187b      	adds	r3, r7, r1
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	881b      	ldrh	r3, [r3, #0]
 801492c:	b29a      	uxth	r2, r3
 801492e:	23d8      	movs	r3, #216	@ 0xd8
 8014930:	18fb      	adds	r3, r7, r3
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	b29b      	uxth	r3, r3
 8014936:	029b      	lsls	r3, r3, #10
 8014938:	b29b      	uxth	r3, r3
 801493a:	4313      	orrs	r3, r2
 801493c:	b29b      	uxth	r3, r3
 801493e:	4a21      	ldr	r2, [pc, #132]	@ (80149c4 <USB_EPStartXfer+0x11c0>)
 8014940:	4313      	orrs	r3, r2
 8014942:	b29a      	uxth	r2, r3
 8014944:	187b      	adds	r3, r7, r1
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	801a      	strh	r2, [r3, #0]
 801494a:	e062      	b.n	8014a12 <USB_EPStartXfer+0x120e>
 801494c:	1d7b      	adds	r3, r7, #5
 801494e:	33ff      	adds	r3, #255	@ 0xff
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d10b      	bne.n	801496e <USB_EPStartXfer+0x116a>
 8014956:	21b8      	movs	r1, #184	@ 0xb8
 8014958:	187b      	adds	r3, r7, r1
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	881b      	ldrh	r3, [r3, #0]
 801495e:	b29b      	uxth	r3, r3
 8014960:	4a18      	ldr	r2, [pc, #96]	@ (80149c4 <USB_EPStartXfer+0x11c0>)
 8014962:	4313      	orrs	r3, r2
 8014964:	b29a      	uxth	r2, r3
 8014966:	187b      	adds	r3, r7, r1
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	801a      	strh	r2, [r3, #0]
 801496c:	e051      	b.n	8014a12 <USB_EPStartXfer+0x120e>
 801496e:	1d7b      	adds	r3, r7, #5
 8014970:	33ff      	adds	r3, #255	@ 0xff
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	085b      	lsrs	r3, r3, #1
 8014976:	21d8      	movs	r1, #216	@ 0xd8
 8014978:	187a      	adds	r2, r7, r1
 801497a:	6013      	str	r3, [r2, #0]
 801497c:	1d7b      	adds	r3, r7, #5
 801497e:	33ff      	adds	r3, #255	@ 0xff
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	2201      	movs	r2, #1
 8014984:	4013      	ands	r3, r2
 8014986:	d004      	beq.n	8014992 <USB_EPStartXfer+0x118e>
 8014988:	187b      	adds	r3, r7, r1
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	3301      	adds	r3, #1
 801498e:	187a      	adds	r2, r7, r1
 8014990:	6013      	str	r3, [r2, #0]
 8014992:	21b8      	movs	r1, #184	@ 0xb8
 8014994:	187b      	adds	r3, r7, r1
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	881b      	ldrh	r3, [r3, #0]
 801499a:	b29a      	uxth	r2, r3
 801499c:	23d8      	movs	r3, #216	@ 0xd8
 801499e:	18fb      	adds	r3, r7, r3
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	b29b      	uxth	r3, r3
 80149a4:	029b      	lsls	r3, r3, #10
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	4313      	orrs	r3, r2
 80149aa:	b29a      	uxth	r2, r3
 80149ac:	187b      	adds	r3, r7, r1
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	801a      	strh	r2, [r3, #0]
 80149b2:	e02e      	b.n	8014a12 <USB_EPStartXfer+0x120e>
 80149b4:	00000406 	.word	0x00000406
 80149b8:	ffff8f8f 	.word	0xffff8f8f
 80149bc:	ffff80c0 	.word	0xffff80c0
 80149c0:	00000402 	.word	0x00000402
 80149c4:	ffff8000 	.word	0xffff8000
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	785b      	ldrb	r3, [r3, #1]
 80149cc:	2b01      	cmp	r3, #1
 80149ce:	d120      	bne.n	8014a12 <USB_EPStartXfer+0x120e>
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2250      	movs	r2, #80	@ 0x50
 80149d4:	5a9b      	ldrh	r3, [r3, r2]
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	001a      	movs	r2, r3
 80149da:	21c4      	movs	r1, #196	@ 0xc4
 80149dc:	187b      	adds	r3, r7, r1
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	189b      	adds	r3, r3, r2
 80149e2:	187a      	adds	r2, r7, r1
 80149e4:	6013      	str	r3, [r2, #0]
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	00da      	lsls	r2, r3, #3
 80149ec:	187b      	adds	r3, r7, r1
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	18d3      	adds	r3, r2, r3
 80149f2:	4a1d      	ldr	r2, [pc, #116]	@ (8014a68 <USB_EPStartXfer+0x1264>)
 80149f4:	4694      	mov	ip, r2
 80149f6:	4463      	add	r3, ip
 80149f8:	21c0      	movs	r1, #192	@ 0xc0
 80149fa:	187a      	adds	r2, r7, r1
 80149fc:	6013      	str	r3, [r2, #0]
 80149fe:	1d7b      	adds	r3, r7, #5
 8014a00:	33ff      	adds	r3, #255	@ 0xff
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	187b      	adds	r3, r7, r1
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	801a      	strh	r2, [r3, #0]
 8014a0c:	e001      	b.n	8014a12 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8014a0e:	2301      	movs	r3, #1
 8014a10:	e025      	b.n	8014a5e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	009b      	lsls	r3, r3, #2
 8014a1a:	18d3      	adds	r3, r2, r3
 8014a1c:	881b      	ldrh	r3, [r3, #0]
 8014a1e:	b29a      	uxth	r2, r3
 8014a20:	208a      	movs	r0, #138	@ 0x8a
 8014a22:	183b      	adds	r3, r7, r0
 8014a24:	4911      	ldr	r1, [pc, #68]	@ (8014a6c <USB_EPStartXfer+0x1268>)
 8014a26:	400a      	ands	r2, r1
 8014a28:	801a      	strh	r2, [r3, #0]
 8014a2a:	183b      	adds	r3, r7, r0
 8014a2c:	183a      	adds	r2, r7, r0
 8014a2e:	8812      	ldrh	r2, [r2, #0]
 8014a30:	2180      	movs	r1, #128	@ 0x80
 8014a32:	0149      	lsls	r1, r1, #5
 8014a34:	404a      	eors	r2, r1
 8014a36:	801a      	strh	r2, [r3, #0]
 8014a38:	183b      	adds	r3, r7, r0
 8014a3a:	183a      	adds	r2, r7, r0
 8014a3c:	8812      	ldrh	r2, [r2, #0]
 8014a3e:	2180      	movs	r1, #128	@ 0x80
 8014a40:	0189      	lsls	r1, r1, #6
 8014a42:	404a      	eors	r2, r1
 8014a44:	801a      	strh	r2, [r3, #0]
 8014a46:	687a      	ldr	r2, [r7, #4]
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	18d3      	adds	r3, r2, r3
 8014a50:	183a      	adds	r2, r7, r0
 8014a52:	8812      	ldrh	r2, [r2, #0]
 8014a54:	4906      	ldr	r1, [pc, #24]	@ (8014a70 <USB_EPStartXfer+0x126c>)
 8014a56:	430a      	orrs	r2, r1
 8014a58:	b292      	uxth	r2, r2
 8014a5a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8014a5c:	2300      	movs	r3, #0
}
 8014a5e:	0018      	movs	r0, r3
 8014a60:	46bd      	mov	sp, r7
 8014a62:	b043      	add	sp, #268	@ 0x10c
 8014a64:	bd90      	pop	{r4, r7, pc}
 8014a66:	46c0      	nop			@ (mov r8, r8)
 8014a68:	00000406 	.word	0x00000406
 8014a6c:	ffffbf8f 	.word	0xffffbf8f
 8014a70:	ffff8080 	.word	0xffff8080

08014a74 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b084      	sub	sp, #16
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	785b      	ldrb	r3, [r3, #1]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d01d      	beq.n	8014ac2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	781b      	ldrb	r3, [r3, #0]
 8014a8c:	009b      	lsls	r3, r3, #2
 8014a8e:	18d3      	adds	r3, r2, r3
 8014a90:	881b      	ldrh	r3, [r3, #0]
 8014a92:	b29a      	uxth	r2, r3
 8014a94:	200c      	movs	r0, #12
 8014a96:	183b      	adds	r3, r7, r0
 8014a98:	491b      	ldr	r1, [pc, #108]	@ (8014b08 <USB_EPSetStall+0x94>)
 8014a9a:	400a      	ands	r2, r1
 8014a9c:	801a      	strh	r2, [r3, #0]
 8014a9e:	183b      	adds	r3, r7, r0
 8014aa0:	183a      	adds	r2, r7, r0
 8014aa2:	8812      	ldrh	r2, [r2, #0]
 8014aa4:	2110      	movs	r1, #16
 8014aa6:	404a      	eors	r2, r1
 8014aa8:	801a      	strh	r2, [r3, #0]
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	18d3      	adds	r3, r2, r3
 8014ab4:	183a      	adds	r2, r7, r0
 8014ab6:	8812      	ldrh	r2, [r2, #0]
 8014ab8:	4914      	ldr	r1, [pc, #80]	@ (8014b0c <USB_EPSetStall+0x98>)
 8014aba:	430a      	orrs	r2, r1
 8014abc:	b292      	uxth	r2, r2
 8014abe:	801a      	strh	r2, [r3, #0]
 8014ac0:	e01d      	b.n	8014afe <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	18d3      	adds	r3, r2, r3
 8014acc:	881b      	ldrh	r3, [r3, #0]
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	200e      	movs	r0, #14
 8014ad2:	183b      	adds	r3, r7, r0
 8014ad4:	490e      	ldr	r1, [pc, #56]	@ (8014b10 <USB_EPSetStall+0x9c>)
 8014ad6:	400a      	ands	r2, r1
 8014ad8:	801a      	strh	r2, [r3, #0]
 8014ada:	183b      	adds	r3, r7, r0
 8014adc:	183a      	adds	r2, r7, r0
 8014ade:	8812      	ldrh	r2, [r2, #0]
 8014ae0:	2180      	movs	r1, #128	@ 0x80
 8014ae2:	0149      	lsls	r1, r1, #5
 8014ae4:	404a      	eors	r2, r1
 8014ae6:	801a      	strh	r2, [r3, #0]
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	009b      	lsls	r3, r3, #2
 8014af0:	18d3      	adds	r3, r2, r3
 8014af2:	183a      	adds	r2, r7, r0
 8014af4:	8812      	ldrh	r2, [r2, #0]
 8014af6:	4905      	ldr	r1, [pc, #20]	@ (8014b0c <USB_EPSetStall+0x98>)
 8014af8:	430a      	orrs	r2, r1
 8014afa:	b292      	uxth	r2, r2
 8014afc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8014afe:	2300      	movs	r3, #0
}
 8014b00:	0018      	movs	r0, r3
 8014b02:	46bd      	mov	sp, r7
 8014b04:	b004      	add	sp, #16
 8014b06:	bd80      	pop	{r7, pc}
 8014b08:	ffff8fbf 	.word	0xffff8fbf
 8014b0c:	ffff8080 	.word	0xffff8080
 8014b10:	ffffbf8f 	.word	0xffffbf8f

08014b14 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b086      	sub	sp, #24
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	7b1b      	ldrb	r3, [r3, #12]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d000      	beq.n	8014b28 <USB_EPClearStall+0x14>
 8014b26:	e095      	b.n	8014c54 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	785b      	ldrb	r3, [r3, #1]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d046      	beq.n	8014bbe <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014b30:	687a      	ldr	r2, [r7, #4]
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	009b      	lsls	r3, r3, #2
 8014b38:	18d2      	adds	r2, r2, r3
 8014b3a:	2110      	movs	r1, #16
 8014b3c:	187b      	adds	r3, r7, r1
 8014b3e:	8812      	ldrh	r2, [r2, #0]
 8014b40:	801a      	strh	r2, [r3, #0]
 8014b42:	187b      	adds	r3, r7, r1
 8014b44:	881b      	ldrh	r3, [r3, #0]
 8014b46:	2240      	movs	r2, #64	@ 0x40
 8014b48:	4013      	ands	r3, r2
 8014b4a:	d016      	beq.n	8014b7a <USB_EPClearStall+0x66>
 8014b4c:	687a      	ldr	r2, [r7, #4]
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	18d3      	adds	r3, r2, r3
 8014b56:	881b      	ldrh	r3, [r3, #0]
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	200e      	movs	r0, #14
 8014b5c:	183b      	adds	r3, r7, r0
 8014b5e:	4940      	ldr	r1, [pc, #256]	@ (8014c60 <USB_EPClearStall+0x14c>)
 8014b60:	400a      	ands	r2, r1
 8014b62:	801a      	strh	r2, [r3, #0]
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	009b      	lsls	r3, r3, #2
 8014b6c:	18d3      	adds	r3, r2, r3
 8014b6e:	183a      	adds	r2, r7, r0
 8014b70:	8812      	ldrh	r2, [r2, #0]
 8014b72:	493c      	ldr	r1, [pc, #240]	@ (8014c64 <USB_EPClearStall+0x150>)
 8014b74:	430a      	orrs	r2, r1
 8014b76:	b292      	uxth	r2, r2
 8014b78:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	78db      	ldrb	r3, [r3, #3]
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	d068      	beq.n	8014c54 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	009b      	lsls	r3, r3, #2
 8014b8a:	18d3      	adds	r3, r2, r3
 8014b8c:	881b      	ldrh	r3, [r3, #0]
 8014b8e:	b29a      	uxth	r2, r3
 8014b90:	200c      	movs	r0, #12
 8014b92:	183b      	adds	r3, r7, r0
 8014b94:	4934      	ldr	r1, [pc, #208]	@ (8014c68 <USB_EPClearStall+0x154>)
 8014b96:	400a      	ands	r2, r1
 8014b98:	801a      	strh	r2, [r3, #0]
 8014b9a:	183b      	adds	r3, r7, r0
 8014b9c:	183a      	adds	r2, r7, r0
 8014b9e:	8812      	ldrh	r2, [r2, #0]
 8014ba0:	2120      	movs	r1, #32
 8014ba2:	404a      	eors	r2, r1
 8014ba4:	801a      	strh	r2, [r3, #0]
 8014ba6:	687a      	ldr	r2, [r7, #4]
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	781b      	ldrb	r3, [r3, #0]
 8014bac:	009b      	lsls	r3, r3, #2
 8014bae:	18d3      	adds	r3, r2, r3
 8014bb0:	183a      	adds	r2, r7, r0
 8014bb2:	8812      	ldrh	r2, [r2, #0]
 8014bb4:	492d      	ldr	r1, [pc, #180]	@ (8014c6c <USB_EPClearStall+0x158>)
 8014bb6:	430a      	orrs	r2, r1
 8014bb8:	b292      	uxth	r2, r2
 8014bba:	801a      	strh	r2, [r3, #0]
 8014bbc:	e04a      	b.n	8014c54 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	009b      	lsls	r3, r3, #2
 8014bc6:	18d2      	adds	r2, r2, r3
 8014bc8:	2116      	movs	r1, #22
 8014bca:	187b      	adds	r3, r7, r1
 8014bcc:	8812      	ldrh	r2, [r2, #0]
 8014bce:	801a      	strh	r2, [r3, #0]
 8014bd0:	187b      	adds	r3, r7, r1
 8014bd2:	881a      	ldrh	r2, [r3, #0]
 8014bd4:	2380      	movs	r3, #128	@ 0x80
 8014bd6:	01db      	lsls	r3, r3, #7
 8014bd8:	4013      	ands	r3, r2
 8014bda:	d016      	beq.n	8014c0a <USB_EPClearStall+0xf6>
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	781b      	ldrb	r3, [r3, #0]
 8014be2:	009b      	lsls	r3, r3, #2
 8014be4:	18d3      	adds	r3, r2, r3
 8014be6:	881b      	ldrh	r3, [r3, #0]
 8014be8:	b29a      	uxth	r2, r3
 8014bea:	2014      	movs	r0, #20
 8014bec:	183b      	adds	r3, r7, r0
 8014bee:	491c      	ldr	r1, [pc, #112]	@ (8014c60 <USB_EPClearStall+0x14c>)
 8014bf0:	400a      	ands	r2, r1
 8014bf2:	801a      	strh	r2, [r3, #0]
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	18d3      	adds	r3, r2, r3
 8014bfe:	183a      	adds	r2, r7, r0
 8014c00:	8812      	ldrh	r2, [r2, #0]
 8014c02:	491b      	ldr	r1, [pc, #108]	@ (8014c70 <USB_EPClearStall+0x15c>)
 8014c04:	430a      	orrs	r2, r1
 8014c06:	b292      	uxth	r2, r2
 8014c08:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014c0a:	687a      	ldr	r2, [r7, #4]
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	18d3      	adds	r3, r2, r3
 8014c14:	881b      	ldrh	r3, [r3, #0]
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	2012      	movs	r0, #18
 8014c1a:	183b      	adds	r3, r7, r0
 8014c1c:	4915      	ldr	r1, [pc, #84]	@ (8014c74 <USB_EPClearStall+0x160>)
 8014c1e:	400a      	ands	r2, r1
 8014c20:	801a      	strh	r2, [r3, #0]
 8014c22:	183b      	adds	r3, r7, r0
 8014c24:	183a      	adds	r2, r7, r0
 8014c26:	8812      	ldrh	r2, [r2, #0]
 8014c28:	2180      	movs	r1, #128	@ 0x80
 8014c2a:	0149      	lsls	r1, r1, #5
 8014c2c:	404a      	eors	r2, r1
 8014c2e:	801a      	strh	r2, [r3, #0]
 8014c30:	183b      	adds	r3, r7, r0
 8014c32:	183a      	adds	r2, r7, r0
 8014c34:	8812      	ldrh	r2, [r2, #0]
 8014c36:	2180      	movs	r1, #128	@ 0x80
 8014c38:	0189      	lsls	r1, r1, #6
 8014c3a:	404a      	eors	r2, r1
 8014c3c:	801a      	strh	r2, [r3, #0]
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	009b      	lsls	r3, r3, #2
 8014c46:	18d3      	adds	r3, r2, r3
 8014c48:	183a      	adds	r2, r7, r0
 8014c4a:	8812      	ldrh	r2, [r2, #0]
 8014c4c:	4907      	ldr	r1, [pc, #28]	@ (8014c6c <USB_EPClearStall+0x158>)
 8014c4e:	430a      	orrs	r2, r1
 8014c50:	b292      	uxth	r2, r2
 8014c52:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8014c54:	2300      	movs	r3, #0
}
 8014c56:	0018      	movs	r0, r3
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	b006      	add	sp, #24
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	46c0      	nop			@ (mov r8, r8)
 8014c60:	ffff8f8f 	.word	0xffff8f8f
 8014c64:	ffff80c0 	.word	0xffff80c0
 8014c68:	ffff8fbf 	.word	0xffff8fbf
 8014c6c:	ffff8080 	.word	0xffff8080
 8014c70:	ffffc080 	.word	0xffffc080
 8014c74:	ffffbf8f 	.word	0xffffbf8f

08014c78 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	000a      	movs	r2, r1
 8014c82:	1cfb      	adds	r3, r7, #3
 8014c84:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8014c86:	1cfb      	adds	r3, r7, #3
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d103      	bne.n	8014c96 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	224c      	movs	r2, #76	@ 0x4c
 8014c92:	2180      	movs	r1, #128	@ 0x80
 8014c94:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8014c96:	2300      	movs	r3, #0
}
 8014c98:	0018      	movs	r0, r3
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	b002      	add	sp, #8
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2258      	movs	r2, #88	@ 0x58
 8014cac:	5a9b      	ldrh	r3, [r3, r2]
 8014cae:	b29b      	uxth	r3, r3
 8014cb0:	4a05      	ldr	r2, [pc, #20]	@ (8014cc8 <USB_DevConnect+0x28>)
 8014cb2:	4313      	orrs	r3, r2
 8014cb4:	b299      	uxth	r1, r3
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	2258      	movs	r2, #88	@ 0x58
 8014cba:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014cbc:	2300      	movs	r3, #0
}
 8014cbe:	0018      	movs	r0, r3
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	b002      	add	sp, #8
 8014cc4:	bd80      	pop	{r7, pc}
 8014cc6:	46c0      	nop			@ (mov r8, r8)
 8014cc8:	ffff8000 	.word	0xffff8000

08014ccc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b084      	sub	sp, #16
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2244      	movs	r2, #68	@ 0x44
 8014cd8:	5a9b      	ldrh	r3, [r3, r2]
 8014cda:	b29b      	uxth	r3, r3
 8014cdc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8014cde:	68fb      	ldr	r3, [r7, #12]
}
 8014ce0:	0018      	movs	r0, r3
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	b004      	add	sp, #16
 8014ce6:	bd80      	pop	{r7, pc}

08014ce8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b08a      	sub	sp, #40	@ 0x28
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	60f8      	str	r0, [r7, #12]
 8014cf0:	60b9      	str	r1, [r7, #8]
 8014cf2:	0019      	movs	r1, r3
 8014cf4:	1dbb      	adds	r3, r7, #6
 8014cf6:	801a      	strh	r2, [r3, #0]
 8014cf8:	1d3b      	adds	r3, r7, #4
 8014cfa:	1c0a      	adds	r2, r1, #0
 8014cfc:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8014cfe:	1d3b      	adds	r3, r7, #4
 8014d00:	881b      	ldrh	r3, [r3, #0]
 8014d02:	3301      	adds	r3, #1
 8014d04:	085b      	lsrs	r3, r3, #1
 8014d06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014d10:	1dbb      	adds	r3, r7, #6
 8014d12:	881a      	ldrh	r2, [r3, #0]
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	18d3      	adds	r3, r2, r3
 8014d18:	2280      	movs	r2, #128	@ 0x80
 8014d1a:	00d2      	lsls	r2, r2, #3
 8014d1c:	4694      	mov	ip, r2
 8014d1e:	4463      	add	r3, ip
 8014d20:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014d22:	69bb      	ldr	r3, [r7, #24]
 8014d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8014d26:	e020      	b.n	8014d6a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8014d28:	69fb      	ldr	r3, [r7, #28]
 8014d2a:	781a      	ldrb	r2, [r3, #0]
 8014d2c:	2112      	movs	r1, #18
 8014d2e:	187b      	adds	r3, r7, r1
 8014d30:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8014d32:	69fb      	ldr	r3, [r7, #28]
 8014d34:	3301      	adds	r3, #1
 8014d36:	781b      	ldrb	r3, [r3, #0]
 8014d38:	021b      	lsls	r3, r3, #8
 8014d3a:	b21a      	sxth	r2, r3
 8014d3c:	187b      	adds	r3, r7, r1
 8014d3e:	2000      	movs	r0, #0
 8014d40:	5e1b      	ldrsh	r3, [r3, r0]
 8014d42:	4313      	orrs	r3, r2
 8014d44:	b21a      	sxth	r2, r3
 8014d46:	187b      	adds	r3, r7, r1
 8014d48:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8014d4a:	6a3b      	ldr	r3, [r7, #32]
 8014d4c:	187a      	adds	r2, r7, r1
 8014d4e:	8812      	ldrh	r2, [r2, #0]
 8014d50:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8014d52:	6a3b      	ldr	r3, [r7, #32]
 8014d54:	3302      	adds	r3, #2
 8014d56:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8014d58:	69fb      	ldr	r3, [r7, #28]
 8014d5a:	3301      	adds	r3, #1
 8014d5c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8014d5e:	69fb      	ldr	r3, [r7, #28]
 8014d60:	3301      	adds	r3, #1
 8014d62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d66:	3b01      	subs	r3, #1
 8014d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8014d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d1db      	bne.n	8014d28 <USB_WritePMA+0x40>
  }
}
 8014d70:	46c0      	nop			@ (mov r8, r8)
 8014d72:	46c0      	nop			@ (mov r8, r8)
 8014d74:	46bd      	mov	sp, r7
 8014d76:	b00a      	add	sp, #40	@ 0x28
 8014d78:	bd80      	pop	{r7, pc}

08014d7a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014d7a:	b580      	push	{r7, lr}
 8014d7c:	b08a      	sub	sp, #40	@ 0x28
 8014d7e:	af00      	add	r7, sp, #0
 8014d80:	60f8      	str	r0, [r7, #12]
 8014d82:	60b9      	str	r1, [r7, #8]
 8014d84:	0019      	movs	r1, r3
 8014d86:	1dbb      	adds	r3, r7, #6
 8014d88:	801a      	strh	r2, [r3, #0]
 8014d8a:	1d3b      	adds	r3, r7, #4
 8014d8c:	1c0a      	adds	r2, r1, #0
 8014d8e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8014d90:	1d3b      	adds	r3, r7, #4
 8014d92:	881b      	ldrh	r3, [r3, #0]
 8014d94:	085b      	lsrs	r3, r3, #1
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014d9e:	68bb      	ldr	r3, [r7, #8]
 8014da0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014da2:	1dbb      	adds	r3, r7, #6
 8014da4:	881a      	ldrh	r2, [r3, #0]
 8014da6:	697b      	ldr	r3, [r7, #20]
 8014da8:	18d3      	adds	r3, r2, r3
 8014daa:	2280      	movs	r2, #128	@ 0x80
 8014dac:	00d2      	lsls	r2, r2, #3
 8014dae:	4694      	mov	ip, r2
 8014db0:	4463      	add	r3, ip
 8014db2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014db4:	69bb      	ldr	r3, [r7, #24]
 8014db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8014db8:	e018      	b.n	8014dec <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8014dba:	6a3b      	ldr	r3, [r7, #32]
 8014dbc:	881b      	ldrh	r3, [r3, #0]
 8014dbe:	b29b      	uxth	r3, r3
 8014dc0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8014dc2:	6a3b      	ldr	r3, [r7, #32]
 8014dc4:	3302      	adds	r3, #2
 8014dc6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014dc8:	693b      	ldr	r3, [r7, #16]
 8014dca:	b2da      	uxtb	r2, r3
 8014dcc:	69fb      	ldr	r3, [r7, #28]
 8014dce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	0a1b      	lsrs	r3, r3, #8
 8014dda:	b2da      	uxtb	r2, r3
 8014ddc:	69fb      	ldr	r3, [r7, #28]
 8014dde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014de0:	69fb      	ldr	r3, [r7, #28]
 8014de2:	3301      	adds	r3, #1
 8014de4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014de8:	3b01      	subs	r3, #1
 8014dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8014dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d1e3      	bne.n	8014dba <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8014df2:	1d3b      	adds	r3, r7, #4
 8014df4:	881b      	ldrh	r3, [r3, #0]
 8014df6:	2201      	movs	r2, #1
 8014df8:	4013      	ands	r3, r2
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d007      	beq.n	8014e10 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8014e00:	6a3b      	ldr	r3, [r7, #32]
 8014e02:	881b      	ldrh	r3, [r3, #0]
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	b2da      	uxtb	r2, r3
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	701a      	strb	r2, [r3, #0]
  }
}
 8014e10:	46c0      	nop			@ (mov r8, r8)
 8014e12:	46bd      	mov	sp, r7
 8014e14:	b00a      	add	sp, #40	@ 0x28
 8014e16:	bd80      	pop	{r7, pc}

08014e18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b084      	sub	sp, #16
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
 8014e20:	000a      	movs	r2, r1
 8014e22:	1cfb      	adds	r3, r7, #3
 8014e24:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014e26:	230f      	movs	r3, #15
 8014e28:	18fb      	adds	r3, r7, r3
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	7c1b      	ldrb	r3, [r3, #16]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d116      	bne.n	8014e64 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014e36:	2380      	movs	r3, #128	@ 0x80
 8014e38:	009b      	lsls	r3, r3, #2
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	2202      	movs	r2, #2
 8014e3e:	2181      	movs	r1, #129	@ 0x81
 8014e40:	f002 f8eb 	bl	801701a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2201      	movs	r2, #1
 8014e48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014e4a:	2380      	movs	r3, #128	@ 0x80
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	2202      	movs	r2, #2
 8014e52:	2101      	movs	r1, #1
 8014e54:	f002 f8e1 	bl	801701a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014e58:	687a      	ldr	r2, [r7, #4]
 8014e5a:	23b6      	movs	r3, #182	@ 0xb6
 8014e5c:	005b      	lsls	r3, r3, #1
 8014e5e:	2101      	movs	r1, #1
 8014e60:	50d1      	str	r1, [r2, r3]
 8014e62:	e013      	b.n	8014e8c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	2340      	movs	r3, #64	@ 0x40
 8014e68:	2202      	movs	r2, #2
 8014e6a:	2181      	movs	r1, #129	@ 0x81
 8014e6c:	f002 f8d5 	bl	801701a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2201      	movs	r2, #1
 8014e74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	2340      	movs	r3, #64	@ 0x40
 8014e7a:	2202      	movs	r2, #2
 8014e7c:	2101      	movs	r1, #1
 8014e7e:	f002 f8cc 	bl	801701a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	23b6      	movs	r3, #182	@ 0xb6
 8014e86:	005b      	lsls	r3, r3, #1
 8014e88:	2101      	movs	r1, #1
 8014e8a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	2308      	movs	r3, #8
 8014e90:	2203      	movs	r2, #3
 8014e92:	2182      	movs	r1, #130	@ 0x82
 8014e94:	f002 f8c1 	bl	801701a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014e9e:	2387      	movs	r3, #135	@ 0x87
 8014ea0:	009b      	lsls	r3, r3, #2
 8014ea2:	0018      	movs	r0, r3
 8014ea4:	f002 fa52 	bl	801734c <USBD_static_malloc>
 8014ea8:	0001      	movs	r1, r0
 8014eaa:	687a      	ldr	r2, [r7, #4]
 8014eac:	23ae      	movs	r3, #174	@ 0xae
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	23ae      	movs	r3, #174	@ 0xae
 8014eb6:	009b      	lsls	r3, r3, #2
 8014eb8:	58d3      	ldr	r3, [r2, r3]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d104      	bne.n	8014ec8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8014ebe:	230f      	movs	r3, #15
 8014ec0:	18fb      	adds	r3, r7, r3
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	701a      	strb	r2, [r3, #0]
 8014ec6:	e02c      	b.n	8014f22 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	23ae      	movs	r3, #174	@ 0xae
 8014ecc:	009b      	lsls	r3, r3, #2
 8014ece:	58d3      	ldr	r3, [r2, r3]
 8014ed0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	23af      	movs	r3, #175	@ 0xaf
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	58d3      	ldr	r3, [r2, r3]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8014ede:	68ba      	ldr	r2, [r7, #8]
 8014ee0:	2385      	movs	r3, #133	@ 0x85
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8014ee8:	68ba      	ldr	r2, [r7, #8]
 8014eea:	2386      	movs	r3, #134	@ 0x86
 8014eec:	009b      	lsls	r3, r3, #2
 8014eee:	2100      	movs	r1, #0
 8014ef0:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	7c1b      	ldrb	r3, [r3, #16]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d10a      	bne.n	8014f10 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014efa:	68ba      	ldr	r2, [r7, #8]
 8014efc:	2381      	movs	r3, #129	@ 0x81
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	58d2      	ldr	r2, [r2, r3]
 8014f02:	2380      	movs	r3, #128	@ 0x80
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	2101      	movs	r1, #1
 8014f0a:	f002 f9d1 	bl	80172b0 <USBD_LL_PrepareReceive>
 8014f0e:	e008      	b.n	8014f22 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014f10:	68ba      	ldr	r2, [r7, #8]
 8014f12:	2381      	movs	r3, #129	@ 0x81
 8014f14:	009b      	lsls	r3, r3, #2
 8014f16:	58d2      	ldr	r2, [r2, r3]
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	2340      	movs	r3, #64	@ 0x40
 8014f1c:	2101      	movs	r1, #1
 8014f1e:	f002 f9c7 	bl	80172b0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8014f22:	230f      	movs	r3, #15
 8014f24:	18fb      	adds	r3, r7, r3
 8014f26:	781b      	ldrb	r3, [r3, #0]
}
 8014f28:	0018      	movs	r0, r3
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	b004      	add	sp, #16
 8014f2e:	bd80      	pop	{r7, pc}

08014f30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b084      	sub	sp, #16
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	000a      	movs	r2, r1
 8014f3a:	1cfb      	adds	r3, r7, #3
 8014f3c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014f3e:	230f      	movs	r3, #15
 8014f40:	18fb      	adds	r3, r7, r3
 8014f42:	2200      	movs	r2, #0
 8014f44:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2181      	movs	r1, #129	@ 0x81
 8014f4a:	0018      	movs	r0, r3
 8014f4c:	f002 f89c 	bl	8017088 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	2101      	movs	r1, #1
 8014f5a:	0018      	movs	r0, r3
 8014f5c:	f002 f894 	bl	8017088 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014f60:	687a      	ldr	r2, [r7, #4]
 8014f62:	23b6      	movs	r3, #182	@ 0xb6
 8014f64:	005b      	lsls	r3, r3, #1
 8014f66:	2100      	movs	r1, #0
 8014f68:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2182      	movs	r1, #130	@ 0x82
 8014f6e:	0018      	movs	r0, r3
 8014f70:	f002 f88a 	bl	8017088 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2200      	movs	r2, #0
 8014f78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014f7a:	687a      	ldr	r2, [r7, #4]
 8014f7c:	23ae      	movs	r3, #174	@ 0xae
 8014f7e:	009b      	lsls	r3, r3, #2
 8014f80:	58d3      	ldr	r3, [r2, r3]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d011      	beq.n	8014faa <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014f86:	687a      	ldr	r2, [r7, #4]
 8014f88:	23af      	movs	r3, #175	@ 0xaf
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	58d3      	ldr	r3, [r2, r3]
 8014f8e:	685b      	ldr	r3, [r3, #4]
 8014f90:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	23ae      	movs	r3, #174	@ 0xae
 8014f96:	009b      	lsls	r3, r3, #2
 8014f98:	58d3      	ldr	r3, [r2, r3]
 8014f9a:	0018      	movs	r0, r3
 8014f9c:	f002 f9e2 	bl	8017364 <USBD_static_free>
    pdev->pClassData = NULL;
 8014fa0:	687a      	ldr	r2, [r7, #4]
 8014fa2:	23ae      	movs	r3, #174	@ 0xae
 8014fa4:	009b      	lsls	r3, r3, #2
 8014fa6:	2100      	movs	r1, #0
 8014fa8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8014faa:	230f      	movs	r3, #15
 8014fac:	18fb      	adds	r3, r7, r3
 8014fae:	781b      	ldrb	r3, [r3, #0]
}
 8014fb0:	0018      	movs	r0, r3
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	b004      	add	sp, #16
 8014fb6:	bd80      	pop	{r7, pc}

08014fb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b086      	sub	sp, #24
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	23ae      	movs	r3, #174	@ 0xae
 8014fc6:	009b      	lsls	r3, r3, #2
 8014fc8:	58d3      	ldr	r3, [r2, r3]
 8014fca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8014fcc:	230f      	movs	r3, #15
 8014fce:	18fb      	adds	r3, r7, r3
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8014fd4:	230c      	movs	r3, #12
 8014fd6:	18fb      	adds	r3, r7, r3
 8014fd8:	2200      	movs	r2, #0
 8014fda:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8014fdc:	2317      	movs	r3, #23
 8014fde:	18fb      	adds	r3, r7, r3
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	001a      	movs	r2, r3
 8014fea:	2360      	movs	r3, #96	@ 0x60
 8014fec:	4013      	ands	r3, r2
 8014fee:	d03d      	beq.n	801506c <USBD_CDC_Setup+0xb4>
 8014ff0:	2b20      	cmp	r3, #32
 8014ff2:	d000      	beq.n	8014ff6 <USBD_CDC_Setup+0x3e>
 8014ff4:	e094      	b.n	8015120 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	88db      	ldrh	r3, [r3, #6]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d02b      	beq.n	8015056 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	b25b      	sxtb	r3, r3
 8015004:	2b00      	cmp	r3, #0
 8015006:	da12      	bge.n	801502e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015008:	687a      	ldr	r2, [r7, #4]
 801500a:	23af      	movs	r3, #175	@ 0xaf
 801500c:	009b      	lsls	r3, r3, #2
 801500e:	58d3      	ldr	r3, [r2, r3]
 8015010:	689b      	ldr	r3, [r3, #8]
 8015012:	683a      	ldr	r2, [r7, #0]
 8015014:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8015016:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015018:	683a      	ldr	r2, [r7, #0]
 801501a:	88d2      	ldrh	r2, [r2, #6]
 801501c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801501e:	6939      	ldr	r1, [r7, #16]
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	88da      	ldrh	r2, [r3, #6]
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	0018      	movs	r0, r3
 8015028:	f001 fbaf 	bl	801678a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801502c:	e083      	b.n	8015136 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	7859      	ldrb	r1, [r3, #1]
 8015032:	693a      	ldr	r2, [r7, #16]
 8015034:	2380      	movs	r3, #128	@ 0x80
 8015036:	009b      	lsls	r3, r3, #2
 8015038:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	88db      	ldrh	r3, [r3, #6]
 801503e:	b2d9      	uxtb	r1, r3
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	4a40      	ldr	r2, [pc, #256]	@ (8015144 <USBD_CDC_Setup+0x18c>)
 8015044:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8015046:	6939      	ldr	r1, [r7, #16]
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	88da      	ldrh	r2, [r3, #6]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	0018      	movs	r0, r3
 8015050:	f001 fbce 	bl	80167f0 <USBD_CtlPrepareRx>
      break;
 8015054:	e06f      	b.n	8015136 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015056:	687a      	ldr	r2, [r7, #4]
 8015058:	23af      	movs	r3, #175	@ 0xaf
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	58d3      	ldr	r3, [r2, r3]
 801505e:	689b      	ldr	r3, [r3, #8]
 8015060:	683a      	ldr	r2, [r7, #0]
 8015062:	7850      	ldrb	r0, [r2, #1]
 8015064:	6839      	ldr	r1, [r7, #0]
 8015066:	2200      	movs	r2, #0
 8015068:	4798      	blx	r3
      break;
 801506a:	e064      	b.n	8015136 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	785b      	ldrb	r3, [r3, #1]
 8015070:	2b0b      	cmp	r3, #11
 8015072:	d037      	beq.n	80150e4 <USBD_CDC_Setup+0x12c>
 8015074:	dc47      	bgt.n	8015106 <USBD_CDC_Setup+0x14e>
 8015076:	2b00      	cmp	r3, #0
 8015078:	d002      	beq.n	8015080 <USBD_CDC_Setup+0xc8>
 801507a:	2b0a      	cmp	r3, #10
 801507c:	d019      	beq.n	80150b2 <USBD_CDC_Setup+0xfa>
 801507e:	e042      	b.n	8015106 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015080:	687a      	ldr	r2, [r7, #4]
 8015082:	23a7      	movs	r3, #167	@ 0xa7
 8015084:	009b      	lsls	r3, r3, #2
 8015086:	5cd3      	ldrb	r3, [r2, r3]
 8015088:	2b03      	cmp	r3, #3
 801508a:	d107      	bne.n	801509c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801508c:	230c      	movs	r3, #12
 801508e:	18f9      	adds	r1, r7, r3
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2202      	movs	r2, #2
 8015094:	0018      	movs	r0, r3
 8015096:	f001 fb78 	bl	801678a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801509a:	e040      	b.n	801511e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801509c:	683a      	ldr	r2, [r7, #0]
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	0011      	movs	r1, r2
 80150a2:	0018      	movs	r0, r3
 80150a4:	f001 faf3 	bl	801668e <USBD_CtlError>
            ret = USBD_FAIL;
 80150a8:	2317      	movs	r3, #23
 80150aa:	18fb      	adds	r3, r7, r3
 80150ac:	2202      	movs	r2, #2
 80150ae:	701a      	strb	r2, [r3, #0]
          break;
 80150b0:	e035      	b.n	801511e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150b2:	687a      	ldr	r2, [r7, #4]
 80150b4:	23a7      	movs	r3, #167	@ 0xa7
 80150b6:	009b      	lsls	r3, r3, #2
 80150b8:	5cd3      	ldrb	r3, [r2, r3]
 80150ba:	2b03      	cmp	r3, #3
 80150bc:	d107      	bne.n	80150ce <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80150be:	230f      	movs	r3, #15
 80150c0:	18f9      	adds	r1, r7, r3
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	2201      	movs	r2, #1
 80150c6:	0018      	movs	r0, r3
 80150c8:	f001 fb5f 	bl	801678a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80150cc:	e027      	b.n	801511e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80150ce:	683a      	ldr	r2, [r7, #0]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	0011      	movs	r1, r2
 80150d4:	0018      	movs	r0, r3
 80150d6:	f001 fada 	bl	801668e <USBD_CtlError>
            ret = USBD_FAIL;
 80150da:	2317      	movs	r3, #23
 80150dc:	18fb      	adds	r3, r7, r3
 80150de:	2202      	movs	r2, #2
 80150e0:	701a      	strb	r2, [r3, #0]
          break;
 80150e2:	e01c      	b.n	801511e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80150e4:	687a      	ldr	r2, [r7, #4]
 80150e6:	23a7      	movs	r3, #167	@ 0xa7
 80150e8:	009b      	lsls	r3, r3, #2
 80150ea:	5cd3      	ldrb	r3, [r2, r3]
 80150ec:	2b03      	cmp	r3, #3
 80150ee:	d015      	beq.n	801511c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80150f0:	683a      	ldr	r2, [r7, #0]
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	0011      	movs	r1, r2
 80150f6:	0018      	movs	r0, r3
 80150f8:	f001 fac9 	bl	801668e <USBD_CtlError>
            ret = USBD_FAIL;
 80150fc:	2317      	movs	r3, #23
 80150fe:	18fb      	adds	r3, r7, r3
 8015100:	2202      	movs	r2, #2
 8015102:	701a      	strb	r2, [r3, #0]
          }
          break;
 8015104:	e00a      	b.n	801511c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8015106:	683a      	ldr	r2, [r7, #0]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	0011      	movs	r1, r2
 801510c:	0018      	movs	r0, r3
 801510e:	f001 fabe 	bl	801668e <USBD_CtlError>
          ret = USBD_FAIL;
 8015112:	2317      	movs	r3, #23
 8015114:	18fb      	adds	r3, r7, r3
 8015116:	2202      	movs	r2, #2
 8015118:	701a      	strb	r2, [r3, #0]
          break;
 801511a:	e000      	b.n	801511e <USBD_CDC_Setup+0x166>
          break;
 801511c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801511e:	e00a      	b.n	8015136 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8015120:	683a      	ldr	r2, [r7, #0]
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	0011      	movs	r1, r2
 8015126:	0018      	movs	r0, r3
 8015128:	f001 fab1 	bl	801668e <USBD_CtlError>
      ret = USBD_FAIL;
 801512c:	2317      	movs	r3, #23
 801512e:	18fb      	adds	r3, r7, r3
 8015130:	2202      	movs	r2, #2
 8015132:	701a      	strb	r2, [r3, #0]
      break;
 8015134:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015136:	2317      	movs	r3, #23
 8015138:	18fb      	adds	r3, r7, r3
 801513a:	781b      	ldrb	r3, [r3, #0]
}
 801513c:	0018      	movs	r0, r3
 801513e:	46bd      	mov	sp, r7
 8015140:	b006      	add	sp, #24
 8015142:	bd80      	pop	{r7, pc}
 8015144:	00000201 	.word	0x00000201

08015148 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	000a      	movs	r2, r1
 8015152:	1cfb      	adds	r3, r7, #3
 8015154:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	23ae      	movs	r3, #174	@ 0xae
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	58d3      	ldr	r3, [r2, r3]
 801515e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	23b0      	movs	r3, #176	@ 0xb0
 8015164:	009b      	lsls	r3, r3, #2
 8015166:	58d3      	ldr	r3, [r2, r3]
 8015168:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	23ae      	movs	r3, #174	@ 0xae
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	58d3      	ldr	r3, [r2, r3]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d03e      	beq.n	80151f4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8015176:	1cfb      	adds	r3, r7, #3
 8015178:	781a      	ldrb	r2, [r3, #0]
 801517a:	6879      	ldr	r1, [r7, #4]
 801517c:	0013      	movs	r3, r2
 801517e:	009b      	lsls	r3, r3, #2
 8015180:	189b      	adds	r3, r3, r2
 8015182:	009b      	lsls	r3, r3, #2
 8015184:	18cb      	adds	r3, r1, r3
 8015186:	331c      	adds	r3, #28
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d02b      	beq.n	80151e6 <USBD_CDC_DataIn+0x9e>
 801518e:	1cfb      	adds	r3, r7, #3
 8015190:	781a      	ldrb	r2, [r3, #0]
 8015192:	6879      	ldr	r1, [r7, #4]
 8015194:	0013      	movs	r3, r2
 8015196:	009b      	lsls	r3, r3, #2
 8015198:	189b      	adds	r3, r3, r2
 801519a:	009b      	lsls	r3, r3, #2
 801519c:	18cb      	adds	r3, r1, r3
 801519e:	331c      	adds	r3, #28
 80151a0:	6818      	ldr	r0, [r3, #0]
 80151a2:	1cfb      	adds	r3, r7, #3
 80151a4:	781a      	ldrb	r2, [r3, #0]
 80151a6:	68b9      	ldr	r1, [r7, #8]
 80151a8:	0013      	movs	r3, r2
 80151aa:	009b      	lsls	r3, r3, #2
 80151ac:	189b      	adds	r3, r3, r2
 80151ae:	00db      	lsls	r3, r3, #3
 80151b0:	18cb      	adds	r3, r1, r3
 80151b2:	3338      	adds	r3, #56	@ 0x38
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	0019      	movs	r1, r3
 80151b8:	f7eb f848 	bl	800024c <__aeabi_uidivmod>
 80151bc:	1e0b      	subs	r3, r1, #0
 80151be:	d112      	bne.n	80151e6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80151c0:	1cfb      	adds	r3, r7, #3
 80151c2:	781a      	ldrb	r2, [r3, #0]
 80151c4:	6879      	ldr	r1, [r7, #4]
 80151c6:	0013      	movs	r3, r2
 80151c8:	009b      	lsls	r3, r3, #2
 80151ca:	189b      	adds	r3, r3, r2
 80151cc:	009b      	lsls	r3, r3, #2
 80151ce:	18cb      	adds	r3, r1, r3
 80151d0:	331c      	adds	r3, #28
 80151d2:	2200      	movs	r2, #0
 80151d4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80151d6:	1cfb      	adds	r3, r7, #3
 80151d8:	7819      	ldrb	r1, [r3, #0]
 80151da:	6878      	ldr	r0, [r7, #4]
 80151dc:	2300      	movs	r3, #0
 80151de:	2200      	movs	r2, #0
 80151e0:	f002 f82f 	bl	8017242 <USBD_LL_Transmit>
 80151e4:	e004      	b.n	80151f0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80151e6:	68fa      	ldr	r2, [r7, #12]
 80151e8:	2385      	movs	r3, #133	@ 0x85
 80151ea:	009b      	lsls	r3, r3, #2
 80151ec:	2100      	movs	r1, #0
 80151ee:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80151f0:	2300      	movs	r3, #0
 80151f2:	e000      	b.n	80151f6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80151f4:	2302      	movs	r3, #2
  }
}
 80151f6:	0018      	movs	r0, r3
 80151f8:	46bd      	mov	sp, r7
 80151fa:	b004      	add	sp, #16
 80151fc:	bd80      	pop	{r7, pc}

080151fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80151fe:	b580      	push	{r7, lr}
 8015200:	b084      	sub	sp, #16
 8015202:	af00      	add	r7, sp, #0
 8015204:	6078      	str	r0, [r7, #4]
 8015206:	000a      	movs	r2, r1
 8015208:	1cfb      	adds	r3, r7, #3
 801520a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	23ae      	movs	r3, #174	@ 0xae
 8015210:	009b      	lsls	r3, r3, #2
 8015212:	58d3      	ldr	r3, [r2, r3]
 8015214:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015216:	1cfb      	adds	r3, r7, #3
 8015218:	781a      	ldrb	r2, [r3, #0]
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	0011      	movs	r1, r2
 801521e:	0018      	movs	r0, r3
 8015220:	f002 f87d 	bl	801731e <USBD_LL_GetRxDataSize>
 8015224:	0001      	movs	r1, r0
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	2383      	movs	r3, #131	@ 0x83
 801522a:	009b      	lsls	r3, r3, #2
 801522c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801522e:	687a      	ldr	r2, [r7, #4]
 8015230:	23ae      	movs	r3, #174	@ 0xae
 8015232:	009b      	lsls	r3, r3, #2
 8015234:	58d3      	ldr	r3, [r2, r3]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d011      	beq.n	801525e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801523a:	687a      	ldr	r2, [r7, #4]
 801523c:	23af      	movs	r3, #175	@ 0xaf
 801523e:	009b      	lsls	r3, r3, #2
 8015240:	58d3      	ldr	r3, [r2, r3]
 8015242:	68da      	ldr	r2, [r3, #12]
 8015244:	68f9      	ldr	r1, [r7, #12]
 8015246:	2381      	movs	r3, #129	@ 0x81
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	58c8      	ldr	r0, [r1, r3]
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2183      	movs	r1, #131	@ 0x83
 8015250:	0089      	lsls	r1, r1, #2
 8015252:	468c      	mov	ip, r1
 8015254:	4463      	add	r3, ip
 8015256:	0019      	movs	r1, r3
 8015258:	4790      	blx	r2

    return USBD_OK;
 801525a:	2300      	movs	r3, #0
 801525c:	e000      	b.n	8015260 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801525e:	2302      	movs	r3, #2
  }
}
 8015260:	0018      	movs	r0, r3
 8015262:	46bd      	mov	sp, r7
 8015264:	b004      	add	sp, #16
 8015266:	bd80      	pop	{r7, pc}

08015268 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015268:	b590      	push	{r4, r7, lr}
 801526a:	b085      	sub	sp, #20
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015270:	687a      	ldr	r2, [r7, #4]
 8015272:	23ae      	movs	r3, #174	@ 0xae
 8015274:	009b      	lsls	r3, r3, #2
 8015276:	58d3      	ldr	r3, [r2, r3]
 8015278:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801527a:	687a      	ldr	r2, [r7, #4]
 801527c:	23af      	movs	r3, #175	@ 0xaf
 801527e:	009b      	lsls	r3, r3, #2
 8015280:	58d3      	ldr	r3, [r2, r3]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d018      	beq.n	80152b8 <USBD_CDC_EP0_RxReady+0x50>
 8015286:	68fa      	ldr	r2, [r7, #12]
 8015288:	2380      	movs	r3, #128	@ 0x80
 801528a:	009b      	lsls	r3, r3, #2
 801528c:	5cd3      	ldrb	r3, [r2, r3]
 801528e:	2bff      	cmp	r3, #255	@ 0xff
 8015290:	d012      	beq.n	80152b8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015292:	687a      	ldr	r2, [r7, #4]
 8015294:	23af      	movs	r3, #175	@ 0xaf
 8015296:	009b      	lsls	r3, r3, #2
 8015298:	58d3      	ldr	r3, [r2, r3]
 801529a:	689b      	ldr	r3, [r3, #8]
 801529c:	68f9      	ldr	r1, [r7, #12]
 801529e:	2280      	movs	r2, #128	@ 0x80
 80152a0:	0092      	lsls	r2, r2, #2
 80152a2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80152a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80152a6:	68fa      	ldr	r2, [r7, #12]
 80152a8:	4c06      	ldr	r4, [pc, #24]	@ (80152c4 <USBD_CDC_EP0_RxReady+0x5c>)
 80152aa:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80152ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80152ae:	68fa      	ldr	r2, [r7, #12]
 80152b0:	2380      	movs	r3, #128	@ 0x80
 80152b2:	009b      	lsls	r3, r3, #2
 80152b4:	21ff      	movs	r1, #255	@ 0xff
 80152b6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80152b8:	2300      	movs	r3, #0
}
 80152ba:	0018      	movs	r0, r3
 80152bc:	46bd      	mov	sp, r7
 80152be:	b005      	add	sp, #20
 80152c0:	bd90      	pop	{r4, r7, pc}
 80152c2:	46c0      	nop			@ (mov r8, r8)
 80152c4:	00000201 	.word	0x00000201

080152c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2243      	movs	r2, #67	@ 0x43
 80152d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80152d6:	4b02      	ldr	r3, [pc, #8]	@ (80152e0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80152d8:	0018      	movs	r0, r3
 80152da:	46bd      	mov	sp, r7
 80152dc:	b002      	add	sp, #8
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	200000fc 	.word	0x200000fc

080152e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2243      	movs	r2, #67	@ 0x43
 80152f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80152f2:	4b02      	ldr	r3, [pc, #8]	@ (80152fc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80152f4:	0018      	movs	r0, r3
 80152f6:	46bd      	mov	sp, r7
 80152f8:	b002      	add	sp, #8
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	200000b8 	.word	0x200000b8

08015300 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2243      	movs	r2, #67	@ 0x43
 801530c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801530e:	4b02      	ldr	r3, [pc, #8]	@ (8015318 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8015310:	0018      	movs	r0, r3
 8015312:	46bd      	mov	sp, r7
 8015314:	b002      	add	sp, #8
 8015316:	bd80      	pop	{r7, pc}
 8015318:	20000140 	.word	0x20000140

0801531c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	220a      	movs	r2, #10
 8015328:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801532a:	4b02      	ldr	r3, [pc, #8]	@ (8015334 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801532c:	0018      	movs	r0, r3
 801532e:	46bd      	mov	sp, r7
 8015330:	b002      	add	sp, #8
 8015332:	bd80      	pop	{r7, pc}
 8015334:	20000074 	.word	0x20000074

08015338 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b084      	sub	sp, #16
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8015342:	200f      	movs	r0, #15
 8015344:	183b      	adds	r3, r7, r0
 8015346:	2202      	movs	r2, #2
 8015348:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d007      	beq.n	8015360 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8015350:	687a      	ldr	r2, [r7, #4]
 8015352:	23af      	movs	r3, #175	@ 0xaf
 8015354:	009b      	lsls	r3, r3, #2
 8015356:	6839      	ldr	r1, [r7, #0]
 8015358:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801535a:	183b      	adds	r3, r7, r0
 801535c:	2200      	movs	r2, #0
 801535e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8015360:	230f      	movs	r3, #15
 8015362:	18fb      	adds	r3, r7, r3
 8015364:	781b      	ldrb	r3, [r3, #0]
}
 8015366:	0018      	movs	r0, r3
 8015368:	46bd      	mov	sp, r7
 801536a:	b004      	add	sp, #16
 801536c:	bd80      	pop	{r7, pc}

0801536e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801536e:	b580      	push	{r7, lr}
 8015370:	b086      	sub	sp, #24
 8015372:	af00      	add	r7, sp, #0
 8015374:	60f8      	str	r0, [r7, #12]
 8015376:	60b9      	str	r1, [r7, #8]
 8015378:	1dbb      	adds	r3, r7, #6
 801537a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801537c:	68fa      	ldr	r2, [r7, #12]
 801537e:	23ae      	movs	r3, #174	@ 0xae
 8015380:	009b      	lsls	r3, r3, #2
 8015382:	58d3      	ldr	r3, [r2, r3]
 8015384:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8015386:	697a      	ldr	r2, [r7, #20]
 8015388:	2382      	movs	r3, #130	@ 0x82
 801538a:	009b      	lsls	r3, r3, #2
 801538c:	68b9      	ldr	r1, [r7, #8]
 801538e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8015390:	1dbb      	adds	r3, r7, #6
 8015392:	8819      	ldrh	r1, [r3, #0]
 8015394:	697a      	ldr	r2, [r7, #20]
 8015396:	2384      	movs	r3, #132	@ 0x84
 8015398:	009b      	lsls	r3, r3, #2
 801539a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801539c:	2300      	movs	r3, #0
}
 801539e:	0018      	movs	r0, r3
 80153a0:	46bd      	mov	sp, r7
 80153a2:	b006      	add	sp, #24
 80153a4:	bd80      	pop	{r7, pc}

080153a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80153a6:	b580      	push	{r7, lr}
 80153a8:	b084      	sub	sp, #16
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	6078      	str	r0, [r7, #4]
 80153ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80153b0:	687a      	ldr	r2, [r7, #4]
 80153b2:	23ae      	movs	r3, #174	@ 0xae
 80153b4:	009b      	lsls	r3, r3, #2
 80153b6:	58d3      	ldr	r3, [r2, r3]
 80153b8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80153ba:	68fa      	ldr	r2, [r7, #12]
 80153bc:	2381      	movs	r3, #129	@ 0x81
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	6839      	ldr	r1, [r7, #0]
 80153c2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80153c4:	2300      	movs	r3, #0
}
 80153c6:	0018      	movs	r0, r3
 80153c8:	46bd      	mov	sp, r7
 80153ca:	b004      	add	sp, #16
 80153cc:	bd80      	pop	{r7, pc}

080153ce <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80153ce:	b580      	push	{r7, lr}
 80153d0:	b084      	sub	sp, #16
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80153d6:	687a      	ldr	r2, [r7, #4]
 80153d8:	23ae      	movs	r3, #174	@ 0xae
 80153da:	009b      	lsls	r3, r3, #2
 80153dc:	58d3      	ldr	r3, [r2, r3]
 80153de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80153e0:	687a      	ldr	r2, [r7, #4]
 80153e2:	23ae      	movs	r3, #174	@ 0xae
 80153e4:	009b      	lsls	r3, r3, #2
 80153e6:	58d3      	ldr	r3, [r2, r3]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d022      	beq.n	8015432 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80153ec:	68fa      	ldr	r2, [r7, #12]
 80153ee:	2385      	movs	r3, #133	@ 0x85
 80153f0:	009b      	lsls	r3, r3, #2
 80153f2:	58d3      	ldr	r3, [r2, r3]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d11a      	bne.n	801542e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80153f8:	68fa      	ldr	r2, [r7, #12]
 80153fa:	2385      	movs	r3, #133	@ 0x85
 80153fc:	009b      	lsls	r3, r3, #2
 80153fe:	2101      	movs	r1, #1
 8015400:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8015402:	68fa      	ldr	r2, [r7, #12]
 8015404:	2384      	movs	r3, #132	@ 0x84
 8015406:	009b      	lsls	r3, r3, #2
 8015408:	58d2      	ldr	r2, [r2, r3]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801540e:	68fa      	ldr	r2, [r7, #12]
 8015410:	2382      	movs	r3, #130	@ 0x82
 8015412:	009b      	lsls	r3, r3, #2
 8015414:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8015416:	68fa      	ldr	r2, [r7, #12]
 8015418:	2384      	movs	r3, #132	@ 0x84
 801541a:	009b      	lsls	r3, r3, #2
 801541c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801541e:	b29b      	uxth	r3, r3
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	000a      	movs	r2, r1
 8015424:	2181      	movs	r1, #129	@ 0x81
 8015426:	f001 ff0c 	bl	8017242 <USBD_LL_Transmit>

      return USBD_OK;
 801542a:	2300      	movs	r3, #0
 801542c:	e002      	b.n	8015434 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801542e:	2301      	movs	r3, #1
 8015430:	e000      	b.n	8015434 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8015432:	2302      	movs	r3, #2
  }
}
 8015434:	0018      	movs	r0, r3
 8015436:	46bd      	mov	sp, r7
 8015438:	b004      	add	sp, #16
 801543a:	bd80      	pop	{r7, pc}

0801543c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b084      	sub	sp, #16
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015444:	687a      	ldr	r2, [r7, #4]
 8015446:	23ae      	movs	r3, #174	@ 0xae
 8015448:	009b      	lsls	r3, r3, #2
 801544a:	58d3      	ldr	r3, [r2, r3]
 801544c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801544e:	687a      	ldr	r2, [r7, #4]
 8015450:	23ae      	movs	r3, #174	@ 0xae
 8015452:	009b      	lsls	r3, r3, #2
 8015454:	58d3      	ldr	r3, [r2, r3]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d019      	beq.n	801548e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	7c1b      	ldrb	r3, [r3, #16]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d10a      	bne.n	8015478 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015462:	68fa      	ldr	r2, [r7, #12]
 8015464:	2381      	movs	r3, #129	@ 0x81
 8015466:	009b      	lsls	r3, r3, #2
 8015468:	58d2      	ldr	r2, [r2, r3]
 801546a:	2380      	movs	r3, #128	@ 0x80
 801546c:	009b      	lsls	r3, r3, #2
 801546e:	6878      	ldr	r0, [r7, #4]
 8015470:	2101      	movs	r1, #1
 8015472:	f001 ff1d 	bl	80172b0 <USBD_LL_PrepareReceive>
 8015476:	e008      	b.n	801548a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015478:	68fa      	ldr	r2, [r7, #12]
 801547a:	2381      	movs	r3, #129	@ 0x81
 801547c:	009b      	lsls	r3, r3, #2
 801547e:	58d2      	ldr	r2, [r2, r3]
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	2340      	movs	r3, #64	@ 0x40
 8015484:	2101      	movs	r1, #1
 8015486:	f001 ff13 	bl	80172b0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801548a:	2300      	movs	r3, #0
 801548c:	e000      	b.n	8015490 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801548e:	2302      	movs	r3, #2
  }
}
 8015490:	0018      	movs	r0, r3
 8015492:	46bd      	mov	sp, r7
 8015494:	b004      	add	sp, #16
 8015496:	bd80      	pop	{r7, pc}

08015498 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b084      	sub	sp, #16
 801549c:	af00      	add	r7, sp, #0
 801549e:	60f8      	str	r0, [r7, #12]
 80154a0:	60b9      	str	r1, [r7, #8]
 80154a2:	1dfb      	adds	r3, r7, #7
 80154a4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d101      	bne.n	80154b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80154ac:	2302      	movs	r3, #2
 80154ae:	e020      	b.n	80154f2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80154b0:	68fa      	ldr	r2, [r7, #12]
 80154b2:	23ad      	movs	r3, #173	@ 0xad
 80154b4:	009b      	lsls	r3, r3, #2
 80154b6:	58d3      	ldr	r3, [r2, r3]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d004      	beq.n	80154c6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80154bc:	68fa      	ldr	r2, [r7, #12]
 80154be:	23ad      	movs	r3, #173	@ 0xad
 80154c0:	009b      	lsls	r3, r3, #2
 80154c2:	2100      	movs	r1, #0
 80154c4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d004      	beq.n	80154d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80154cc:	68fa      	ldr	r2, [r7, #12]
 80154ce:	23ac      	movs	r3, #172	@ 0xac
 80154d0:	009b      	lsls	r3, r3, #2
 80154d2:	68b9      	ldr	r1, [r7, #8]
 80154d4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80154d6:	68fa      	ldr	r2, [r7, #12]
 80154d8:	23a7      	movs	r3, #167	@ 0xa7
 80154da:	009b      	lsls	r3, r3, #2
 80154dc:	2101      	movs	r1, #1
 80154de:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	1dfa      	adds	r2, r7, #7
 80154e4:	7812      	ldrb	r2, [r2, #0]
 80154e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	0018      	movs	r0, r3
 80154ec:	f001 fd0c 	bl	8016f08 <USBD_LL_Init>

  return USBD_OK;
 80154f0:	2300      	movs	r3, #0
}
 80154f2:	0018      	movs	r0, r3
 80154f4:	46bd      	mov	sp, r7
 80154f6:	b004      	add	sp, #16
 80154f8:	bd80      	pop	{r7, pc}

080154fa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80154fa:	b580      	push	{r7, lr}
 80154fc:	b084      	sub	sp, #16
 80154fe:	af00      	add	r7, sp, #0
 8015500:	6078      	str	r0, [r7, #4]
 8015502:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8015504:	200f      	movs	r0, #15
 8015506:	183b      	adds	r3, r7, r0
 8015508:	2200      	movs	r2, #0
 801550a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d008      	beq.n	8015524 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	23ad      	movs	r3, #173	@ 0xad
 8015516:	009b      	lsls	r3, r3, #2
 8015518:	6839      	ldr	r1, [r7, #0]
 801551a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801551c:	183b      	adds	r3, r7, r0
 801551e:	2200      	movs	r2, #0
 8015520:	701a      	strb	r2, [r3, #0]
 8015522:	e003      	b.n	801552c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8015524:	230f      	movs	r3, #15
 8015526:	18fb      	adds	r3, r7, r3
 8015528:	2202      	movs	r2, #2
 801552a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801552c:	230f      	movs	r3, #15
 801552e:	18fb      	adds	r3, r7, r3
 8015530:	781b      	ldrb	r3, [r3, #0]
}
 8015532:	0018      	movs	r0, r3
 8015534:	46bd      	mov	sp, r7
 8015536:	b004      	add	sp, #16
 8015538:	bd80      	pop	{r7, pc}

0801553a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801553a:	b580      	push	{r7, lr}
 801553c:	b082      	sub	sp, #8
 801553e:	af00      	add	r7, sp, #0
 8015540:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	0018      	movs	r0, r3
 8015546:	f001 fd43 	bl	8016fd0 <USBD_LL_Start>

  return USBD_OK;
 801554a:	2300      	movs	r3, #0
}
 801554c:	0018      	movs	r0, r3
 801554e:	46bd      	mov	sp, r7
 8015550:	b002      	add	sp, #8
 8015552:	bd80      	pop	{r7, pc}

08015554 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801555c:	2300      	movs	r3, #0
}
 801555e:	0018      	movs	r0, r3
 8015560:	46bd      	mov	sp, r7
 8015562:	b002      	add	sp, #8
 8015564:	bd80      	pop	{r7, pc}

08015566 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015566:	b590      	push	{r4, r7, lr}
 8015568:	b085      	sub	sp, #20
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
 801556e:	000a      	movs	r2, r1
 8015570:	1cfb      	adds	r3, r7, #3
 8015572:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015574:	240f      	movs	r4, #15
 8015576:	193b      	adds	r3, r7, r4
 8015578:	2202      	movs	r2, #2
 801557a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	23ad      	movs	r3, #173	@ 0xad
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	58d3      	ldr	r3, [r2, r3]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d00e      	beq.n	80155a6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8015588:	687a      	ldr	r2, [r7, #4]
 801558a:	23ad      	movs	r3, #173	@ 0xad
 801558c:	009b      	lsls	r3, r3, #2
 801558e:	58d3      	ldr	r3, [r2, r3]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	1cfa      	adds	r2, r7, #3
 8015594:	7811      	ldrb	r1, [r2, #0]
 8015596:	687a      	ldr	r2, [r7, #4]
 8015598:	0010      	movs	r0, r2
 801559a:	4798      	blx	r3
 801559c:	1e03      	subs	r3, r0, #0
 801559e:	d102      	bne.n	80155a6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80155a0:	193b      	adds	r3, r7, r4
 80155a2:	2200      	movs	r2, #0
 80155a4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80155a6:	230f      	movs	r3, #15
 80155a8:	18fb      	adds	r3, r7, r3
 80155aa:	781b      	ldrb	r3, [r3, #0]
}
 80155ac:	0018      	movs	r0, r3
 80155ae:	46bd      	mov	sp, r7
 80155b0:	b005      	add	sp, #20
 80155b2:	bd90      	pop	{r4, r7, pc}

080155b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	000a      	movs	r2, r1
 80155be:	1cfb      	adds	r3, r7, #3
 80155c0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80155c2:	687a      	ldr	r2, [r7, #4]
 80155c4:	23ad      	movs	r3, #173	@ 0xad
 80155c6:	009b      	lsls	r3, r3, #2
 80155c8:	58d3      	ldr	r3, [r2, r3]
 80155ca:	685b      	ldr	r3, [r3, #4]
 80155cc:	1cfa      	adds	r2, r7, #3
 80155ce:	7811      	ldrb	r1, [r2, #0]
 80155d0:	687a      	ldr	r2, [r7, #4]
 80155d2:	0010      	movs	r0, r2
 80155d4:	4798      	blx	r3

  return USBD_OK;
 80155d6:	2300      	movs	r3, #0
}
 80155d8:	0018      	movs	r0, r3
 80155da:	46bd      	mov	sp, r7
 80155dc:	b002      	add	sp, #8
 80155de:	bd80      	pop	{r7, pc}

080155e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	22aa      	movs	r2, #170	@ 0xaa
 80155ee:	0092      	lsls	r2, r2, #2
 80155f0:	4694      	mov	ip, r2
 80155f2:	4463      	add	r3, ip
 80155f4:	683a      	ldr	r2, [r7, #0]
 80155f6:	0011      	movs	r1, r2
 80155f8:	0018      	movs	r0, r3
 80155fa:	f001 f810 	bl	801661e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80155fe:	687a      	ldr	r2, [r7, #4]
 8015600:	23a5      	movs	r3, #165	@ 0xa5
 8015602:	009b      	lsls	r3, r3, #2
 8015604:	2101      	movs	r1, #1
 8015606:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	4a23      	ldr	r2, [pc, #140]	@ (8015698 <USBD_LL_SetupStage+0xb8>)
 801560c:	5a9b      	ldrh	r3, [r3, r2]
 801560e:	0019      	movs	r1, r3
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	23a6      	movs	r3, #166	@ 0xa6
 8015614:	009b      	lsls	r3, r3, #2
 8015616:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	23aa      	movs	r3, #170	@ 0xaa
 801561c:	009b      	lsls	r3, r3, #2
 801561e:	5cd3      	ldrb	r3, [r2, r3]
 8015620:	001a      	movs	r2, r3
 8015622:	231f      	movs	r3, #31
 8015624:	4013      	ands	r3, r2
 8015626:	2b02      	cmp	r3, #2
 8015628:	d019      	beq.n	801565e <USBD_LL_SetupStage+0x7e>
 801562a:	d822      	bhi.n	8015672 <USBD_LL_SetupStage+0x92>
 801562c:	2b00      	cmp	r3, #0
 801562e:	d002      	beq.n	8015636 <USBD_LL_SetupStage+0x56>
 8015630:	2b01      	cmp	r3, #1
 8015632:	d00a      	beq.n	801564a <USBD_LL_SetupStage+0x6a>
 8015634:	e01d      	b.n	8015672 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	22aa      	movs	r2, #170	@ 0xaa
 801563a:	0092      	lsls	r2, r2, #2
 801563c:	189a      	adds	r2, r3, r2
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	0011      	movs	r1, r2
 8015642:	0018      	movs	r0, r3
 8015644:	f000 fa10 	bl	8015a68 <USBD_StdDevReq>
      break;
 8015648:	e020      	b.n	801568c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	22aa      	movs	r2, #170	@ 0xaa
 801564e:	0092      	lsls	r2, r2, #2
 8015650:	189a      	adds	r2, r3, r2
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	0011      	movs	r1, r2
 8015656:	0018      	movs	r0, r3
 8015658:	f000 fa78 	bl	8015b4c <USBD_StdItfReq>
      break;
 801565c:	e016      	b.n	801568c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	22aa      	movs	r2, #170	@ 0xaa
 8015662:	0092      	lsls	r2, r2, #2
 8015664:	189a      	adds	r2, r3, r2
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	0011      	movs	r1, r2
 801566a:	0018      	movs	r0, r3
 801566c:	f000 fac5 	bl	8015bfa <USBD_StdEPReq>
      break;
 8015670:	e00c      	b.n	801568c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015672:	687a      	ldr	r2, [r7, #4]
 8015674:	23aa      	movs	r3, #170	@ 0xaa
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	5cd3      	ldrb	r3, [r2, r3]
 801567a:	227f      	movs	r2, #127	@ 0x7f
 801567c:	4393      	bics	r3, r2
 801567e:	b2da      	uxtb	r2, r3
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	0011      	movs	r1, r2
 8015684:	0018      	movs	r0, r3
 8015686:	f001 fd2a 	bl	80170de <USBD_LL_StallEP>
      break;
 801568a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801568c:	2300      	movs	r3, #0
}
 801568e:	0018      	movs	r0, r3
 8015690:	46bd      	mov	sp, r7
 8015692:	b002      	add	sp, #8
 8015694:	bd80      	pop	{r7, pc}
 8015696:	46c0      	nop			@ (mov r8, r8)
 8015698:	000002ae 	.word	0x000002ae

0801569c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b086      	sub	sp, #24
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	60f8      	str	r0, [r7, #12]
 80156a4:	607a      	str	r2, [r7, #4]
 80156a6:	200b      	movs	r0, #11
 80156a8:	183b      	adds	r3, r7, r0
 80156aa:	1c0a      	adds	r2, r1, #0
 80156ac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80156ae:	183b      	adds	r3, r7, r0
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d154      	bne.n	8015760 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	3355      	adds	r3, #85	@ 0x55
 80156ba:	33ff      	adds	r3, #255	@ 0xff
 80156bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80156be:	68fa      	ldr	r2, [r7, #12]
 80156c0:	23a5      	movs	r3, #165	@ 0xa5
 80156c2:	009b      	lsls	r3, r3, #2
 80156c4:	58d3      	ldr	r3, [r2, r3]
 80156c6:	2b03      	cmp	r3, #3
 80156c8:	d139      	bne.n	801573e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	68da      	ldr	r2, [r3, #12]
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	691b      	ldr	r3, [r3, #16]
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d919      	bls.n	801570a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	68da      	ldr	r2, [r3, #12]
 80156da:	697b      	ldr	r3, [r7, #20]
 80156dc:	691b      	ldr	r3, [r3, #16]
 80156de:	1ad2      	subs	r2, r2, r3
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80156e4:	697b      	ldr	r3, [r7, #20]
 80156e6:	68da      	ldr	r2, [r3, #12]
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d203      	bcs.n	80156f8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	e002      	b.n	80156fe <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80156fc:	b29b      	uxth	r3, r3
 80156fe:	6879      	ldr	r1, [r7, #4]
 8015700:	68f8      	ldr	r0, [r7, #12]
 8015702:	001a      	movs	r2, r3
 8015704:	f001 f898 	bl	8016838 <USBD_CtlContinueRx>
 8015708:	e045      	b.n	8015796 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	23ad      	movs	r3, #173	@ 0xad
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	58d3      	ldr	r3, [r2, r3]
 8015712:	691b      	ldr	r3, [r3, #16]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d00d      	beq.n	8015734 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015718:	68fa      	ldr	r2, [r7, #12]
 801571a:	23a7      	movs	r3, #167	@ 0xa7
 801571c:	009b      	lsls	r3, r3, #2
 801571e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015720:	2b03      	cmp	r3, #3
 8015722:	d107      	bne.n	8015734 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015724:	68fa      	ldr	r2, [r7, #12]
 8015726:	23ad      	movs	r3, #173	@ 0xad
 8015728:	009b      	lsls	r3, r3, #2
 801572a:	58d3      	ldr	r3, [r2, r3]
 801572c:	691b      	ldr	r3, [r3, #16]
 801572e:	68fa      	ldr	r2, [r7, #12]
 8015730:	0010      	movs	r0, r2
 8015732:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	0018      	movs	r0, r3
 8015738:	f001 f891 	bl	801685e <USBD_CtlSendStatus>
 801573c:	e02b      	b.n	8015796 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801573e:	68fa      	ldr	r2, [r7, #12]
 8015740:	23a5      	movs	r3, #165	@ 0xa5
 8015742:	009b      	lsls	r3, r3, #2
 8015744:	58d3      	ldr	r3, [r2, r3]
 8015746:	2b05      	cmp	r3, #5
 8015748:	d125      	bne.n	8015796 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801574a:	68fa      	ldr	r2, [r7, #12]
 801574c:	23a5      	movs	r3, #165	@ 0xa5
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	2100      	movs	r1, #0
 8015752:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2100      	movs	r1, #0
 8015758:	0018      	movs	r0, r3
 801575a:	f001 fcc0 	bl	80170de <USBD_LL_StallEP>
 801575e:	e01a      	b.n	8015796 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015760:	68fa      	ldr	r2, [r7, #12]
 8015762:	23ad      	movs	r3, #173	@ 0xad
 8015764:	009b      	lsls	r3, r3, #2
 8015766:	58d3      	ldr	r3, [r2, r3]
 8015768:	699b      	ldr	r3, [r3, #24]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d011      	beq.n	8015792 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801576e:	68fa      	ldr	r2, [r7, #12]
 8015770:	23a7      	movs	r3, #167	@ 0xa7
 8015772:	009b      	lsls	r3, r3, #2
 8015774:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8015776:	2b03      	cmp	r3, #3
 8015778:	d10b      	bne.n	8015792 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801577a:	68fa      	ldr	r2, [r7, #12]
 801577c:	23ad      	movs	r3, #173	@ 0xad
 801577e:	009b      	lsls	r3, r3, #2
 8015780:	58d3      	ldr	r3, [r2, r3]
 8015782:	699b      	ldr	r3, [r3, #24]
 8015784:	220b      	movs	r2, #11
 8015786:	18ba      	adds	r2, r7, r2
 8015788:	7811      	ldrb	r1, [r2, #0]
 801578a:	68fa      	ldr	r2, [r7, #12]
 801578c:	0010      	movs	r0, r2
 801578e:	4798      	blx	r3
 8015790:	e001      	b.n	8015796 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015792:	2302      	movs	r3, #2
 8015794:	e000      	b.n	8015798 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8015796:	2300      	movs	r3, #0
}
 8015798:	0018      	movs	r0, r3
 801579a:	46bd      	mov	sp, r7
 801579c:	b006      	add	sp, #24
 801579e:	bd80      	pop	{r7, pc}

080157a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b086      	sub	sp, #24
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	60f8      	str	r0, [r7, #12]
 80157a8:	607a      	str	r2, [r7, #4]
 80157aa:	200b      	movs	r0, #11
 80157ac:	183b      	adds	r3, r7, r0
 80157ae:	1c0a      	adds	r2, r1, #0
 80157b0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80157b2:	183b      	adds	r3, r7, r0
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d000      	beq.n	80157bc <USBD_LL_DataInStage+0x1c>
 80157ba:	e08e      	b.n	80158da <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	3314      	adds	r3, #20
 80157c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80157c2:	68fa      	ldr	r2, [r7, #12]
 80157c4:	23a5      	movs	r3, #165	@ 0xa5
 80157c6:	009b      	lsls	r3, r3, #2
 80157c8:	58d3      	ldr	r3, [r2, r3]
 80157ca:	2b02      	cmp	r3, #2
 80157cc:	d164      	bne.n	8015898 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	68da      	ldr	r2, [r3, #12]
 80157d2:	697b      	ldr	r3, [r7, #20]
 80157d4:	691b      	ldr	r3, [r3, #16]
 80157d6:	429a      	cmp	r2, r3
 80157d8:	d915      	bls.n	8015806 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	68da      	ldr	r2, [r3, #12]
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	691b      	ldr	r3, [r3, #16]
 80157e2:	1ad2      	subs	r2, r2, r3
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	b29a      	uxth	r2, r3
 80157ee:	6879      	ldr	r1, [r7, #4]
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	0018      	movs	r0, r3
 80157f4:	f000 ffe9 	bl	80167ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80157f8:	68f8      	ldr	r0, [r7, #12]
 80157fa:	2300      	movs	r3, #0
 80157fc:	2200      	movs	r2, #0
 80157fe:	2100      	movs	r1, #0
 8015800:	f001 fd56 	bl	80172b0 <USBD_LL_PrepareReceive>
 8015804:	e059      	b.n	80158ba <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	689a      	ldr	r2, [r3, #8]
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	691b      	ldr	r3, [r3, #16]
 801580e:	0019      	movs	r1, r3
 8015810:	0010      	movs	r0, r2
 8015812:	f7ea fd1b 	bl	800024c <__aeabi_uidivmod>
 8015816:	1e0b      	subs	r3, r1, #0
 8015818:	d11f      	bne.n	801585a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	689a      	ldr	r2, [r3, #8]
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015822:	429a      	cmp	r2, r3
 8015824:	d319      	bcc.n	801585a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	689a      	ldr	r2, [r3, #8]
 801582a:	68f9      	ldr	r1, [r7, #12]
 801582c:	23a6      	movs	r3, #166	@ 0xa6
 801582e:	009b      	lsls	r3, r3, #2
 8015830:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8015832:	429a      	cmp	r2, r3
 8015834:	d211      	bcs.n	801585a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	2200      	movs	r2, #0
 801583a:	2100      	movs	r1, #0
 801583c:	0018      	movs	r0, r3
 801583e:	f000 ffc4 	bl	80167ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015842:	68fa      	ldr	r2, [r7, #12]
 8015844:	23a6      	movs	r3, #166	@ 0xa6
 8015846:	009b      	lsls	r3, r3, #2
 8015848:	2100      	movs	r1, #0
 801584a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801584c:	68f8      	ldr	r0, [r7, #12]
 801584e:	2300      	movs	r3, #0
 8015850:	2200      	movs	r2, #0
 8015852:	2100      	movs	r1, #0
 8015854:	f001 fd2c 	bl	80172b0 <USBD_LL_PrepareReceive>
 8015858:	e02f      	b.n	80158ba <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801585a:	68fa      	ldr	r2, [r7, #12]
 801585c:	23ad      	movs	r3, #173	@ 0xad
 801585e:	009b      	lsls	r3, r3, #2
 8015860:	58d3      	ldr	r3, [r2, r3]
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d00d      	beq.n	8015884 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015868:	68fa      	ldr	r2, [r7, #12]
 801586a:	23a7      	movs	r3, #167	@ 0xa7
 801586c:	009b      	lsls	r3, r3, #2
 801586e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015870:	2b03      	cmp	r3, #3
 8015872:	d107      	bne.n	8015884 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015874:	68fa      	ldr	r2, [r7, #12]
 8015876:	23ad      	movs	r3, #173	@ 0xad
 8015878:	009b      	lsls	r3, r3, #2
 801587a:	58d3      	ldr	r3, [r2, r3]
 801587c:	68db      	ldr	r3, [r3, #12]
 801587e:	68fa      	ldr	r2, [r7, #12]
 8015880:	0010      	movs	r0, r2
 8015882:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2180      	movs	r1, #128	@ 0x80
 8015888:	0018      	movs	r0, r3
 801588a:	f001 fc28 	bl	80170de <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	0018      	movs	r0, r3
 8015892:	f000 fff8 	bl	8016886 <USBD_CtlReceiveStatus>
 8015896:	e010      	b.n	80158ba <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015898:	68fa      	ldr	r2, [r7, #12]
 801589a:	23a5      	movs	r3, #165	@ 0xa5
 801589c:	009b      	lsls	r3, r3, #2
 801589e:	58d3      	ldr	r3, [r2, r3]
 80158a0:	2b04      	cmp	r3, #4
 80158a2:	d005      	beq.n	80158b0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80158a4:	68fa      	ldr	r2, [r7, #12]
 80158a6:	23a5      	movs	r3, #165	@ 0xa5
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d104      	bne.n	80158ba <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2180      	movs	r1, #128	@ 0x80
 80158b4:	0018      	movs	r0, r3
 80158b6:	f001 fc12 	bl	80170de <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80158ba:	68fa      	ldr	r2, [r7, #12]
 80158bc:	23a8      	movs	r3, #168	@ 0xa8
 80158be:	009b      	lsls	r3, r3, #2
 80158c0:	5cd3      	ldrb	r3, [r2, r3]
 80158c2:	2b01      	cmp	r3, #1
 80158c4:	d124      	bne.n	8015910 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	0018      	movs	r0, r3
 80158ca:	f7ff fe43 	bl	8015554 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80158ce:	68fa      	ldr	r2, [r7, #12]
 80158d0:	23a8      	movs	r3, #168	@ 0xa8
 80158d2:	009b      	lsls	r3, r3, #2
 80158d4:	2100      	movs	r1, #0
 80158d6:	54d1      	strb	r1, [r2, r3]
 80158d8:	e01a      	b.n	8015910 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80158da:	68fa      	ldr	r2, [r7, #12]
 80158dc:	23ad      	movs	r3, #173	@ 0xad
 80158de:	009b      	lsls	r3, r3, #2
 80158e0:	58d3      	ldr	r3, [r2, r3]
 80158e2:	695b      	ldr	r3, [r3, #20]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d011      	beq.n	801590c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80158e8:	68fa      	ldr	r2, [r7, #12]
 80158ea:	23a7      	movs	r3, #167	@ 0xa7
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80158f0:	2b03      	cmp	r3, #3
 80158f2:	d10b      	bne.n	801590c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80158f4:	68fa      	ldr	r2, [r7, #12]
 80158f6:	23ad      	movs	r3, #173	@ 0xad
 80158f8:	009b      	lsls	r3, r3, #2
 80158fa:	58d3      	ldr	r3, [r2, r3]
 80158fc:	695b      	ldr	r3, [r3, #20]
 80158fe:	220b      	movs	r2, #11
 8015900:	18ba      	adds	r2, r7, r2
 8015902:	7811      	ldrb	r1, [r2, #0]
 8015904:	68fa      	ldr	r2, [r7, #12]
 8015906:	0010      	movs	r0, r2
 8015908:	4798      	blx	r3
 801590a:	e001      	b.n	8015910 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801590c:	2302      	movs	r3, #2
 801590e:	e000      	b.n	8015912 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8015910:	2300      	movs	r3, #0
}
 8015912:	0018      	movs	r0, r3
 8015914:	46bd      	mov	sp, r7
 8015916:	b006      	add	sp, #24
 8015918:	bd80      	pop	{r7, pc}

0801591a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801591a:	b580      	push	{r7, lr}
 801591c:	b082      	sub	sp, #8
 801591e:	af00      	add	r7, sp, #0
 8015920:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	2340      	movs	r3, #64	@ 0x40
 8015926:	2200      	movs	r2, #0
 8015928:	2100      	movs	r1, #0
 801592a:	f001 fb76 	bl	801701a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801592e:	687a      	ldr	r2, [r7, #4]
 8015930:	23ac      	movs	r3, #172	@ 0xac
 8015932:	005b      	lsls	r3, r3, #1
 8015934:	2101      	movs	r1, #1
 8015936:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	23b2      	movs	r3, #178	@ 0xb2
 801593c:	005b      	lsls	r3, r3, #1
 801593e:	2140      	movs	r1, #64	@ 0x40
 8015940:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	2340      	movs	r3, #64	@ 0x40
 8015946:	2200      	movs	r2, #0
 8015948:	2180      	movs	r1, #128	@ 0x80
 801594a:	f001 fb66 	bl	801701a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	2201      	movs	r2, #1
 8015952:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2240      	movs	r2, #64	@ 0x40
 8015958:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801595a:	687a      	ldr	r2, [r7, #4]
 801595c:	23a7      	movs	r3, #167	@ 0xa7
 801595e:	009b      	lsls	r3, r3, #2
 8015960:	2101      	movs	r1, #1
 8015962:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8015964:	687a      	ldr	r2, [r7, #4]
 8015966:	23a5      	movs	r3, #165	@ 0xa5
 8015968:	009b      	lsls	r3, r3, #2
 801596a:	2100      	movs	r1, #0
 801596c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2200      	movs	r2, #0
 8015972:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015974:	687a      	ldr	r2, [r7, #4]
 8015976:	23a9      	movs	r3, #169	@ 0xa9
 8015978:	009b      	lsls	r3, r3, #2
 801597a:	2100      	movs	r1, #0
 801597c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801597e:	687a      	ldr	r2, [r7, #4]
 8015980:	23ae      	movs	r3, #174	@ 0xae
 8015982:	009b      	lsls	r3, r3, #2
 8015984:	58d3      	ldr	r3, [r2, r3]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d00a      	beq.n	80159a0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801598a:	687a      	ldr	r2, [r7, #4]
 801598c:	23ad      	movs	r3, #173	@ 0xad
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	58d3      	ldr	r3, [r2, r3]
 8015992:	685a      	ldr	r2, [r3, #4]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	b2d9      	uxtb	r1, r3
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	0018      	movs	r0, r3
 801599e:	4790      	blx	r2
  }

  return USBD_OK;
 80159a0:	2300      	movs	r3, #0
}
 80159a2:	0018      	movs	r0, r3
 80159a4:	46bd      	mov	sp, r7
 80159a6:	b002      	add	sp, #8
 80159a8:	bd80      	pop	{r7, pc}

080159aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80159aa:	b580      	push	{r7, lr}
 80159ac:	b082      	sub	sp, #8
 80159ae:	af00      	add	r7, sp, #0
 80159b0:	6078      	str	r0, [r7, #4]
 80159b2:	000a      	movs	r2, r1
 80159b4:	1cfb      	adds	r3, r7, #3
 80159b6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	1cfa      	adds	r2, r7, #3
 80159bc:	7812      	ldrb	r2, [r2, #0]
 80159be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80159c0:	2300      	movs	r3, #0
}
 80159c2:	0018      	movs	r0, r3
 80159c4:	46bd      	mov	sp, r7
 80159c6:	b002      	add	sp, #8
 80159c8:	bd80      	pop	{r7, pc}
	...

080159cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80159d4:	687a      	ldr	r2, [r7, #4]
 80159d6:	23a7      	movs	r3, #167	@ 0xa7
 80159d8:	009b      	lsls	r3, r3, #2
 80159da:	5cd1      	ldrb	r1, [r2, r3]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	4a06      	ldr	r2, [pc, #24]	@ (80159f8 <USBD_LL_Suspend+0x2c>)
 80159e0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80159e2:	687a      	ldr	r2, [r7, #4]
 80159e4:	23a7      	movs	r3, #167	@ 0xa7
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	2104      	movs	r1, #4
 80159ea:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80159ec:	2300      	movs	r3, #0
}
 80159ee:	0018      	movs	r0, r3
 80159f0:	46bd      	mov	sp, r7
 80159f2:	b002      	add	sp, #8
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	46c0      	nop			@ (mov r8, r8)
 80159f8:	0000029d 	.word	0x0000029d

080159fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	23a7      	movs	r3, #167	@ 0xa7
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	5cd3      	ldrb	r3, [r2, r3]
 8015a0c:	2b04      	cmp	r3, #4
 8015a0e:	d106      	bne.n	8015a1e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	4a05      	ldr	r2, [pc, #20]	@ (8015a28 <USBD_LL_Resume+0x2c>)
 8015a14:	5c99      	ldrb	r1, [r3, r2]
 8015a16:	687a      	ldr	r2, [r7, #4]
 8015a18:	23a7      	movs	r3, #167	@ 0xa7
 8015a1a:	009b      	lsls	r3, r3, #2
 8015a1c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8015a1e:	2300      	movs	r3, #0
}
 8015a20:	0018      	movs	r0, r3
 8015a22:	46bd      	mov	sp, r7
 8015a24:	b002      	add	sp, #8
 8015a26:	bd80      	pop	{r7, pc}
 8015a28:	0000029d 	.word	0x0000029d

08015a2c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b082      	sub	sp, #8
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a34:	687a      	ldr	r2, [r7, #4]
 8015a36:	23a7      	movs	r3, #167	@ 0xa7
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	5cd3      	ldrb	r3, [r2, r3]
 8015a3c:	2b03      	cmp	r3, #3
 8015a3e:	d10e      	bne.n	8015a5e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8015a40:	687a      	ldr	r2, [r7, #4]
 8015a42:	23ad      	movs	r3, #173	@ 0xad
 8015a44:	009b      	lsls	r3, r3, #2
 8015a46:	58d3      	ldr	r3, [r2, r3]
 8015a48:	69db      	ldr	r3, [r3, #28]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d007      	beq.n	8015a5e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	23ad      	movs	r3, #173	@ 0xad
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	58d3      	ldr	r3, [r2, r3]
 8015a56:	69db      	ldr	r3, [r3, #28]
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	0010      	movs	r0, r2
 8015a5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015a5e:	2300      	movs	r3, #0
}
 8015a60:	0018      	movs	r0, r3
 8015a62:	46bd      	mov	sp, r7
 8015a64:	b002      	add	sp, #8
 8015a66:	bd80      	pop	{r7, pc}

08015a68 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a72:	230f      	movs	r3, #15
 8015a74:	18fb      	adds	r3, r7, r3
 8015a76:	2200      	movs	r2, #0
 8015a78:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	781b      	ldrb	r3, [r3, #0]
 8015a7e:	001a      	movs	r2, r3
 8015a80:	2360      	movs	r3, #96	@ 0x60
 8015a82:	4013      	ands	r3, r2
 8015a84:	2b40      	cmp	r3, #64	@ 0x40
 8015a86:	d004      	beq.n	8015a92 <USBD_StdDevReq+0x2a>
 8015a88:	d84f      	bhi.n	8015b2a <USBD_StdDevReq+0xc2>
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d00b      	beq.n	8015aa6 <USBD_StdDevReq+0x3e>
 8015a8e:	2b20      	cmp	r3, #32
 8015a90:	d14b      	bne.n	8015b2a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8015a92:	687a      	ldr	r2, [r7, #4]
 8015a94:	23ad      	movs	r3, #173	@ 0xad
 8015a96:	009b      	lsls	r3, r3, #2
 8015a98:	58d3      	ldr	r3, [r2, r3]
 8015a9a:	689b      	ldr	r3, [r3, #8]
 8015a9c:	6839      	ldr	r1, [r7, #0]
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	0010      	movs	r0, r2
 8015aa2:	4798      	blx	r3
      break;
 8015aa4:	e048      	b.n	8015b38 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015aa6:	683b      	ldr	r3, [r7, #0]
 8015aa8:	785b      	ldrb	r3, [r3, #1]
 8015aaa:	2b09      	cmp	r3, #9
 8015aac:	d835      	bhi.n	8015b1a <USBD_StdDevReq+0xb2>
 8015aae:	009a      	lsls	r2, r3, #2
 8015ab0:	4b25      	ldr	r3, [pc, #148]	@ (8015b48 <USBD_StdDevReq+0xe0>)
 8015ab2:	18d3      	adds	r3, r2, r3
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015ab8:	683a      	ldr	r2, [r7, #0]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	0011      	movs	r1, r2
 8015abe:	0018      	movs	r0, r3
 8015ac0:	f000 fa52 	bl	8015f68 <USBD_GetDescriptor>
          break;
 8015ac4:	e030      	b.n	8015b28 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015ac6:	683a      	ldr	r2, [r7, #0]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	0011      	movs	r1, r2
 8015acc:	0018      	movs	r0, r3
 8015ace:	f000 fbfd 	bl	80162cc <USBD_SetAddress>
          break;
 8015ad2:	e029      	b.n	8015b28 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8015ad4:	683a      	ldr	r2, [r7, #0]
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	0011      	movs	r1, r2
 8015ada:	0018      	movs	r0, r3
 8015adc:	f000 fc4a 	bl	8016374 <USBD_SetConfig>
          break;
 8015ae0:	e022      	b.n	8015b28 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	0011      	movs	r1, r2
 8015ae8:	0018      	movs	r0, r3
 8015aea:	f000 fce7 	bl	80164bc <USBD_GetConfig>
          break;
 8015aee:	e01b      	b.n	8015b28 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015af0:	683a      	ldr	r2, [r7, #0]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	0011      	movs	r1, r2
 8015af6:	0018      	movs	r0, r3
 8015af8:	f000 fd1b 	bl	8016532 <USBD_GetStatus>
          break;
 8015afc:	e014      	b.n	8015b28 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015afe:	683a      	ldr	r2, [r7, #0]
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	0011      	movs	r1, r2
 8015b04:	0018      	movs	r0, r3
 8015b06:	f000 fd4e 	bl	80165a6 <USBD_SetFeature>
          break;
 8015b0a:	e00d      	b.n	8015b28 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015b0c:	683a      	ldr	r2, [r7, #0]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	0011      	movs	r1, r2
 8015b12:	0018      	movs	r0, r3
 8015b14:	f000 fd5d 	bl	80165d2 <USBD_ClrFeature>
          break;
 8015b18:	e006      	b.n	8015b28 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015b1a:	683a      	ldr	r2, [r7, #0]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	0011      	movs	r1, r2
 8015b20:	0018      	movs	r0, r3
 8015b22:	f000 fdb4 	bl	801668e <USBD_CtlError>
          break;
 8015b26:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015b28:	e006      	b.n	8015b38 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8015b2a:	683a      	ldr	r2, [r7, #0]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	0011      	movs	r1, r2
 8015b30:	0018      	movs	r0, r3
 8015b32:	f000 fdac 	bl	801668e <USBD_CtlError>
      break;
 8015b36:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015b38:	230f      	movs	r3, #15
 8015b3a:	18fb      	adds	r3, r7, r3
 8015b3c:	781b      	ldrb	r3, [r3, #0]
}
 8015b3e:	0018      	movs	r0, r3
 8015b40:	46bd      	mov	sp, r7
 8015b42:	b004      	add	sp, #16
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	46c0      	nop			@ (mov r8, r8)
 8015b48:	0801bbbc 	.word	0x0801bbbc

08015b4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8015b4c:	b5b0      	push	{r4, r5, r7, lr}
 8015b4e:	b084      	sub	sp, #16
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b56:	230f      	movs	r3, #15
 8015b58:	18fb      	adds	r3, r7, r3
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	001a      	movs	r2, r3
 8015b64:	2360      	movs	r3, #96	@ 0x60
 8015b66:	4013      	ands	r3, r2
 8015b68:	2b40      	cmp	r3, #64	@ 0x40
 8015b6a:	d004      	beq.n	8015b76 <USBD_StdItfReq+0x2a>
 8015b6c:	d839      	bhi.n	8015be2 <USBD_StdItfReq+0x96>
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d001      	beq.n	8015b76 <USBD_StdItfReq+0x2a>
 8015b72:	2b20      	cmp	r3, #32
 8015b74:	d135      	bne.n	8015be2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015b76:	687a      	ldr	r2, [r7, #4]
 8015b78:	23a7      	movs	r3, #167	@ 0xa7
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	5cd3      	ldrb	r3, [r2, r3]
 8015b7e:	3b01      	subs	r3, #1
 8015b80:	2b02      	cmp	r3, #2
 8015b82:	d825      	bhi.n	8015bd0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	889b      	ldrh	r3, [r3, #4]
 8015b88:	b2db      	uxtb	r3, r3
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d819      	bhi.n	8015bc2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	23ad      	movs	r3, #173	@ 0xad
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	58d3      	ldr	r3, [r2, r3]
 8015b96:	689b      	ldr	r3, [r3, #8]
 8015b98:	250f      	movs	r5, #15
 8015b9a:	197c      	adds	r4, r7, r5
 8015b9c:	6839      	ldr	r1, [r7, #0]
 8015b9e:	687a      	ldr	r2, [r7, #4]
 8015ba0:	0010      	movs	r0, r2
 8015ba2:	4798      	blx	r3
 8015ba4:	0003      	movs	r3, r0
 8015ba6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	88db      	ldrh	r3, [r3, #6]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d116      	bne.n	8015bde <USBD_StdItfReq+0x92>
 8015bb0:	197b      	adds	r3, r7, r5
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d112      	bne.n	8015bde <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	0018      	movs	r0, r3
 8015bbc:	f000 fe4f 	bl	801685e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015bc0:	e00d      	b.n	8015bde <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8015bc2:	683a      	ldr	r2, [r7, #0]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	0011      	movs	r1, r2
 8015bc8:	0018      	movs	r0, r3
 8015bca:	f000 fd60 	bl	801668e <USBD_CtlError>
          break;
 8015bce:	e006      	b.n	8015bde <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8015bd0:	683a      	ldr	r2, [r7, #0]
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	0011      	movs	r1, r2
 8015bd6:	0018      	movs	r0, r3
 8015bd8:	f000 fd59 	bl	801668e <USBD_CtlError>
          break;
 8015bdc:	e000      	b.n	8015be0 <USBD_StdItfReq+0x94>
          break;
 8015bde:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015be0:	e006      	b.n	8015bf0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8015be2:	683a      	ldr	r2, [r7, #0]
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	0011      	movs	r1, r2
 8015be8:	0018      	movs	r0, r3
 8015bea:	f000 fd50 	bl	801668e <USBD_CtlError>
      break;
 8015bee:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015bf0:	2300      	movs	r3, #0
}
 8015bf2:	0018      	movs	r0, r3
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	b004      	add	sp, #16
 8015bf8:	bdb0      	pop	{r4, r5, r7, pc}

08015bfa <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8015bfa:	b5b0      	push	{r4, r5, r7, lr}
 8015bfc:	b084      	sub	sp, #16
 8015bfe:	af00      	add	r7, sp, #0
 8015c00:	6078      	str	r0, [r7, #4]
 8015c02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015c04:	230f      	movs	r3, #15
 8015c06:	18fb      	adds	r3, r7, r3
 8015c08:	2200      	movs	r2, #0
 8015c0a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	889a      	ldrh	r2, [r3, #4]
 8015c10:	230e      	movs	r3, #14
 8015c12:	18fb      	adds	r3, r7, r3
 8015c14:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c16:	683b      	ldr	r3, [r7, #0]
 8015c18:	781b      	ldrb	r3, [r3, #0]
 8015c1a:	001a      	movs	r2, r3
 8015c1c:	2360      	movs	r3, #96	@ 0x60
 8015c1e:	4013      	ands	r3, r2
 8015c20:	2b40      	cmp	r3, #64	@ 0x40
 8015c22:	d006      	beq.n	8015c32 <USBD_StdEPReq+0x38>
 8015c24:	d900      	bls.n	8015c28 <USBD_StdEPReq+0x2e>
 8015c26:	e190      	b.n	8015f4a <USBD_StdEPReq+0x350>
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d00c      	beq.n	8015c46 <USBD_StdEPReq+0x4c>
 8015c2c:	2b20      	cmp	r3, #32
 8015c2e:	d000      	beq.n	8015c32 <USBD_StdEPReq+0x38>
 8015c30:	e18b      	b.n	8015f4a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8015c32:	687a      	ldr	r2, [r7, #4]
 8015c34:	23ad      	movs	r3, #173	@ 0xad
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	58d3      	ldr	r3, [r2, r3]
 8015c3a:	689b      	ldr	r3, [r3, #8]
 8015c3c:	6839      	ldr	r1, [r7, #0]
 8015c3e:	687a      	ldr	r2, [r7, #4]
 8015c40:	0010      	movs	r0, r2
 8015c42:	4798      	blx	r3
      break;
 8015c44:	e188      	b.n	8015f58 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	001a      	movs	r2, r3
 8015c4c:	2360      	movs	r3, #96	@ 0x60
 8015c4e:	4013      	ands	r3, r2
 8015c50:	2b20      	cmp	r3, #32
 8015c52:	d10f      	bne.n	8015c74 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015c54:	687a      	ldr	r2, [r7, #4]
 8015c56:	23ad      	movs	r3, #173	@ 0xad
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	58d3      	ldr	r3, [r2, r3]
 8015c5c:	689b      	ldr	r3, [r3, #8]
 8015c5e:	250f      	movs	r5, #15
 8015c60:	197c      	adds	r4, r7, r5
 8015c62:	6839      	ldr	r1, [r7, #0]
 8015c64:	687a      	ldr	r2, [r7, #4]
 8015c66:	0010      	movs	r0, r2
 8015c68:	4798      	blx	r3
 8015c6a:	0003      	movs	r3, r0
 8015c6c:	7023      	strb	r3, [r4, #0]

        return ret;
 8015c6e:	197b      	adds	r3, r7, r5
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	e174      	b.n	8015f5e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	785b      	ldrb	r3, [r3, #1]
 8015c78:	2b03      	cmp	r3, #3
 8015c7a:	d007      	beq.n	8015c8c <USBD_StdEPReq+0x92>
 8015c7c:	dd00      	ble.n	8015c80 <USBD_StdEPReq+0x86>
 8015c7e:	e15c      	b.n	8015f3a <USBD_StdEPReq+0x340>
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d100      	bne.n	8015c86 <USBD_StdEPReq+0x8c>
 8015c84:	e092      	b.n	8015dac <USBD_StdEPReq+0x1b2>
 8015c86:	2b01      	cmp	r3, #1
 8015c88:	d04b      	beq.n	8015d22 <USBD_StdEPReq+0x128>
 8015c8a:	e156      	b.n	8015f3a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015c8c:	687a      	ldr	r2, [r7, #4]
 8015c8e:	23a7      	movs	r3, #167	@ 0xa7
 8015c90:	009b      	lsls	r3, r3, #2
 8015c92:	5cd3      	ldrb	r3, [r2, r3]
 8015c94:	2b02      	cmp	r3, #2
 8015c96:	d002      	beq.n	8015c9e <USBD_StdEPReq+0xa4>
 8015c98:	2b03      	cmp	r3, #3
 8015c9a:	d01d      	beq.n	8015cd8 <USBD_StdEPReq+0xde>
 8015c9c:	e039      	b.n	8015d12 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c9e:	220e      	movs	r2, #14
 8015ca0:	18bb      	adds	r3, r7, r2
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d010      	beq.n	8015cca <USBD_StdEPReq+0xd0>
 8015ca8:	18bb      	adds	r3, r7, r2
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	2b80      	cmp	r3, #128	@ 0x80
 8015cae:	d00c      	beq.n	8015cca <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015cb0:	18bb      	adds	r3, r7, r2
 8015cb2:	781a      	ldrb	r2, [r3, #0]
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	0011      	movs	r1, r2
 8015cb8:	0018      	movs	r0, r3
 8015cba:	f001 fa10 	bl	80170de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	2180      	movs	r1, #128	@ 0x80
 8015cc2:	0018      	movs	r0, r3
 8015cc4:	f001 fa0b 	bl	80170de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015cc8:	e02a      	b.n	8015d20 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8015cca:	683a      	ldr	r2, [r7, #0]
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	0011      	movs	r1, r2
 8015cd0:	0018      	movs	r0, r3
 8015cd2:	f000 fcdc 	bl	801668e <USBD_CtlError>
              break;
 8015cd6:	e023      	b.n	8015d20 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	885b      	ldrh	r3, [r3, #2]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d113      	bne.n	8015d08 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8015ce0:	220e      	movs	r2, #14
 8015ce2:	18bb      	adds	r3, r7, r2
 8015ce4:	781b      	ldrb	r3, [r3, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d00e      	beq.n	8015d08 <USBD_StdEPReq+0x10e>
 8015cea:	18bb      	adds	r3, r7, r2
 8015cec:	781b      	ldrb	r3, [r3, #0]
 8015cee:	2b80      	cmp	r3, #128	@ 0x80
 8015cf0:	d00a      	beq.n	8015d08 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	88db      	ldrh	r3, [r3, #6]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d106      	bne.n	8015d08 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8015cfa:	18bb      	adds	r3, r7, r2
 8015cfc:	781a      	ldrb	r2, [r3, #0]
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	0011      	movs	r1, r2
 8015d02:	0018      	movs	r0, r3
 8015d04:	f001 f9eb 	bl	80170de <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	0018      	movs	r0, r3
 8015d0c:	f000 fda7 	bl	801685e <USBD_CtlSendStatus>

              break;
 8015d10:	e006      	b.n	8015d20 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8015d12:	683a      	ldr	r2, [r7, #0]
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	0011      	movs	r1, r2
 8015d18:	0018      	movs	r0, r3
 8015d1a:	f000 fcb8 	bl	801668e <USBD_CtlError>
              break;
 8015d1e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015d20:	e112      	b.n	8015f48 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015d22:	687a      	ldr	r2, [r7, #4]
 8015d24:	23a7      	movs	r3, #167	@ 0xa7
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	5cd3      	ldrb	r3, [r2, r3]
 8015d2a:	2b02      	cmp	r3, #2
 8015d2c:	d002      	beq.n	8015d34 <USBD_StdEPReq+0x13a>
 8015d2e:	2b03      	cmp	r3, #3
 8015d30:	d01d      	beq.n	8015d6e <USBD_StdEPReq+0x174>
 8015d32:	e032      	b.n	8015d9a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015d34:	220e      	movs	r2, #14
 8015d36:	18bb      	adds	r3, r7, r2
 8015d38:	781b      	ldrb	r3, [r3, #0]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d010      	beq.n	8015d60 <USBD_StdEPReq+0x166>
 8015d3e:	18bb      	adds	r3, r7, r2
 8015d40:	781b      	ldrb	r3, [r3, #0]
 8015d42:	2b80      	cmp	r3, #128	@ 0x80
 8015d44:	d00c      	beq.n	8015d60 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015d46:	18bb      	adds	r3, r7, r2
 8015d48:	781a      	ldrb	r2, [r3, #0]
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	0011      	movs	r1, r2
 8015d4e:	0018      	movs	r0, r3
 8015d50:	f001 f9c5 	bl	80170de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	2180      	movs	r1, #128	@ 0x80
 8015d58:	0018      	movs	r0, r3
 8015d5a:	f001 f9c0 	bl	80170de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015d5e:	e024      	b.n	8015daa <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8015d60:	683a      	ldr	r2, [r7, #0]
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	0011      	movs	r1, r2
 8015d66:	0018      	movs	r0, r3
 8015d68:	f000 fc91 	bl	801668e <USBD_CtlError>
              break;
 8015d6c:	e01d      	b.n	8015daa <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	885b      	ldrh	r3, [r3, #2]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d118      	bne.n	8015da8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015d76:	210e      	movs	r1, #14
 8015d78:	187b      	adds	r3, r7, r1
 8015d7a:	781b      	ldrb	r3, [r3, #0]
 8015d7c:	227f      	movs	r2, #127	@ 0x7f
 8015d7e:	4013      	ands	r3, r2
 8015d80:	d006      	beq.n	8015d90 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8015d82:	187b      	adds	r3, r7, r1
 8015d84:	781a      	ldrb	r2, [r3, #0]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	0011      	movs	r1, r2
 8015d8a:	0018      	movs	r0, r3
 8015d8c:	f001 f9d2 	bl	8017134 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	0018      	movs	r0, r3
 8015d94:	f000 fd63 	bl	801685e <USBD_CtlSendStatus>
              }
              break;
 8015d98:	e006      	b.n	8015da8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8015d9a:	683a      	ldr	r2, [r7, #0]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	0011      	movs	r1, r2
 8015da0:	0018      	movs	r0, r3
 8015da2:	f000 fc74 	bl	801668e <USBD_CtlError>
              break;
 8015da6:	e000      	b.n	8015daa <USBD_StdEPReq+0x1b0>
              break;
 8015da8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015daa:	e0cd      	b.n	8015f48 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	23a7      	movs	r3, #167	@ 0xa7
 8015db0:	009b      	lsls	r3, r3, #2
 8015db2:	5cd3      	ldrb	r3, [r2, r3]
 8015db4:	2b02      	cmp	r3, #2
 8015db6:	d002      	beq.n	8015dbe <USBD_StdEPReq+0x1c4>
 8015db8:	2b03      	cmp	r3, #3
 8015dba:	d03c      	beq.n	8015e36 <USBD_StdEPReq+0x23c>
 8015dbc:	e0b5      	b.n	8015f2a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015dbe:	220e      	movs	r2, #14
 8015dc0:	18bb      	adds	r3, r7, r2
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d00a      	beq.n	8015dde <USBD_StdEPReq+0x1e4>
 8015dc8:	18bb      	adds	r3, r7, r2
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	2b80      	cmp	r3, #128	@ 0x80
 8015dce:	d006      	beq.n	8015dde <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8015dd0:	683a      	ldr	r2, [r7, #0]
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	0011      	movs	r1, r2
 8015dd6:	0018      	movs	r0, r3
 8015dd8:	f000 fc59 	bl	801668e <USBD_CtlError>
                break;
 8015ddc:	e0ac      	b.n	8015f38 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015dde:	220e      	movs	r2, #14
 8015de0:	18bb      	adds	r3, r7, r2
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	b25b      	sxtb	r3, r3
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	da0c      	bge.n	8015e04 <USBD_StdEPReq+0x20a>
 8015dea:	18bb      	adds	r3, r7, r2
 8015dec:	781b      	ldrb	r3, [r3, #0]
 8015dee:	227f      	movs	r2, #127	@ 0x7f
 8015df0:	401a      	ands	r2, r3
 8015df2:	0013      	movs	r3, r2
 8015df4:	009b      	lsls	r3, r3, #2
 8015df6:	189b      	adds	r3, r3, r2
 8015df8:	009b      	lsls	r3, r3, #2
 8015dfa:	3310      	adds	r3, #16
 8015dfc:	687a      	ldr	r2, [r7, #4]
 8015dfe:	18d3      	adds	r3, r2, r3
 8015e00:	3304      	adds	r3, #4
 8015e02:	e00d      	b.n	8015e20 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015e04:	230e      	movs	r3, #14
 8015e06:	18fb      	adds	r3, r7, r3
 8015e08:	781b      	ldrb	r3, [r3, #0]
 8015e0a:	227f      	movs	r2, #127	@ 0x7f
 8015e0c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015e0e:	0013      	movs	r3, r2
 8015e10:	009b      	lsls	r3, r3, #2
 8015e12:	189b      	adds	r3, r3, r2
 8015e14:	009b      	lsls	r3, r3, #2
 8015e16:	3351      	adds	r3, #81	@ 0x51
 8015e18:	33ff      	adds	r3, #255	@ 0xff
 8015e1a:	687a      	ldr	r2, [r7, #4]
 8015e1c:	18d3      	adds	r3, r2, r3
 8015e1e:	3304      	adds	r3, #4
 8015e20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015e22:	68bb      	ldr	r3, [r7, #8]
 8015e24:	2200      	movs	r2, #0
 8015e26:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015e28:	68b9      	ldr	r1, [r7, #8]
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2202      	movs	r2, #2
 8015e2e:	0018      	movs	r0, r3
 8015e30:	f000 fcab 	bl	801678a <USBD_CtlSendData>
              break;
 8015e34:	e080      	b.n	8015f38 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015e36:	220e      	movs	r2, #14
 8015e38:	18bb      	adds	r3, r7, r2
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	b25b      	sxtb	r3, r3
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	da14      	bge.n	8015e6c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015e42:	18bb      	adds	r3, r7, r2
 8015e44:	781b      	ldrb	r3, [r3, #0]
 8015e46:	220f      	movs	r2, #15
 8015e48:	401a      	ands	r2, r3
 8015e4a:	6879      	ldr	r1, [r7, #4]
 8015e4c:	0013      	movs	r3, r2
 8015e4e:	009b      	lsls	r3, r3, #2
 8015e50:	189b      	adds	r3, r3, r2
 8015e52:	009b      	lsls	r3, r3, #2
 8015e54:	18cb      	adds	r3, r1, r3
 8015e56:	3318      	adds	r3, #24
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d11e      	bne.n	8015e9c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015e5e:	683a      	ldr	r2, [r7, #0]
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	0011      	movs	r1, r2
 8015e64:	0018      	movs	r0, r3
 8015e66:	f000 fc12 	bl	801668e <USBD_CtlError>
                  break;
 8015e6a:	e065      	b.n	8015f38 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015e6c:	230e      	movs	r3, #14
 8015e6e:	18fb      	adds	r3, r7, r3
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	220f      	movs	r2, #15
 8015e74:	401a      	ands	r2, r3
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	23ac      	movs	r3, #172	@ 0xac
 8015e7a:	0059      	lsls	r1, r3, #1
 8015e7c:	0013      	movs	r3, r2
 8015e7e:	009b      	lsls	r3, r3, #2
 8015e80:	189b      	adds	r3, r3, r2
 8015e82:	009b      	lsls	r3, r3, #2
 8015e84:	18c3      	adds	r3, r0, r3
 8015e86:	185b      	adds	r3, r3, r1
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d106      	bne.n	8015e9c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015e8e:	683a      	ldr	r2, [r7, #0]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	0011      	movs	r1, r2
 8015e94:	0018      	movs	r0, r3
 8015e96:	f000 fbfa 	bl	801668e <USBD_CtlError>
                  break;
 8015e9a:	e04d      	b.n	8015f38 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015e9c:	220e      	movs	r2, #14
 8015e9e:	18bb      	adds	r3, r7, r2
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	b25b      	sxtb	r3, r3
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	da0c      	bge.n	8015ec2 <USBD_StdEPReq+0x2c8>
 8015ea8:	18bb      	adds	r3, r7, r2
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	227f      	movs	r2, #127	@ 0x7f
 8015eae:	401a      	ands	r2, r3
 8015eb0:	0013      	movs	r3, r2
 8015eb2:	009b      	lsls	r3, r3, #2
 8015eb4:	189b      	adds	r3, r3, r2
 8015eb6:	009b      	lsls	r3, r3, #2
 8015eb8:	3310      	adds	r3, #16
 8015eba:	687a      	ldr	r2, [r7, #4]
 8015ebc:	18d3      	adds	r3, r2, r3
 8015ebe:	3304      	adds	r3, #4
 8015ec0:	e00d      	b.n	8015ede <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015ec2:	230e      	movs	r3, #14
 8015ec4:	18fb      	adds	r3, r7, r3
 8015ec6:	781b      	ldrb	r3, [r3, #0]
 8015ec8:	227f      	movs	r2, #127	@ 0x7f
 8015eca:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ecc:	0013      	movs	r3, r2
 8015ece:	009b      	lsls	r3, r3, #2
 8015ed0:	189b      	adds	r3, r3, r2
 8015ed2:	009b      	lsls	r3, r3, #2
 8015ed4:	3351      	adds	r3, #81	@ 0x51
 8015ed6:	33ff      	adds	r3, #255	@ 0xff
 8015ed8:	687a      	ldr	r2, [r7, #4]
 8015eda:	18d3      	adds	r3, r2, r3
 8015edc:	3304      	adds	r3, #4
 8015ede:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ee0:	220e      	movs	r2, #14
 8015ee2:	18bb      	adds	r3, r7, r2
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d003      	beq.n	8015ef2 <USBD_StdEPReq+0x2f8>
 8015eea:	18bb      	adds	r3, r7, r2
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	2b80      	cmp	r3, #128	@ 0x80
 8015ef0:	d103      	bne.n	8015efa <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	601a      	str	r2, [r3, #0]
 8015ef8:	e010      	b.n	8015f1c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8015efa:	230e      	movs	r3, #14
 8015efc:	18fb      	adds	r3, r7, r3
 8015efe:	781a      	ldrb	r2, [r3, #0]
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	0011      	movs	r1, r2
 8015f04:	0018      	movs	r0, r3
 8015f06:	f001 f940 	bl	801718a <USBD_LL_IsStallEP>
 8015f0a:	1e03      	subs	r3, r0, #0
 8015f0c:	d003      	beq.n	8015f16 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8015f0e:	68bb      	ldr	r3, [r7, #8]
 8015f10:	2201      	movs	r2, #1
 8015f12:	601a      	str	r2, [r3, #0]
 8015f14:	e002      	b.n	8015f1c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8015f16:	68bb      	ldr	r3, [r7, #8]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015f1c:	68b9      	ldr	r1, [r7, #8]
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2202      	movs	r2, #2
 8015f22:	0018      	movs	r0, r3
 8015f24:	f000 fc31 	bl	801678a <USBD_CtlSendData>
              break;
 8015f28:	e006      	b.n	8015f38 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8015f2a:	683a      	ldr	r2, [r7, #0]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	0011      	movs	r1, r2
 8015f30:	0018      	movs	r0, r3
 8015f32:	f000 fbac 	bl	801668e <USBD_CtlError>
              break;
 8015f36:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015f38:	e006      	b.n	8015f48 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8015f3a:	683a      	ldr	r2, [r7, #0]
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	0011      	movs	r1, r2
 8015f40:	0018      	movs	r0, r3
 8015f42:	f000 fba4 	bl	801668e <USBD_CtlError>
          break;
 8015f46:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015f48:	e006      	b.n	8015f58 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8015f4a:	683a      	ldr	r2, [r7, #0]
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	0011      	movs	r1, r2
 8015f50:	0018      	movs	r0, r3
 8015f52:	f000 fb9c 	bl	801668e <USBD_CtlError>
      break;
 8015f56:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015f58:	230f      	movs	r3, #15
 8015f5a:	18fb      	adds	r3, r7, r3
 8015f5c:	781b      	ldrb	r3, [r3, #0]
}
 8015f5e:	0018      	movs	r0, r3
 8015f60:	46bd      	mov	sp, r7
 8015f62:	b004      	add	sp, #16
 8015f64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015f68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b084      	sub	sp, #16
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015f72:	2308      	movs	r3, #8
 8015f74:	18fb      	adds	r3, r7, r3
 8015f76:	2200      	movs	r2, #0
 8015f78:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015f7e:	230b      	movs	r3, #11
 8015f80:	18fb      	adds	r3, r7, r3
 8015f82:	2200      	movs	r2, #0
 8015f84:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8015f86:	683b      	ldr	r3, [r7, #0]
 8015f88:	885b      	ldrh	r3, [r3, #2]
 8015f8a:	0a1b      	lsrs	r3, r3, #8
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	2b07      	cmp	r3, #7
 8015f90:	d900      	bls.n	8015f94 <USBD_GetDescriptor+0x2c>
 8015f92:	e159      	b.n	8016248 <USBD_GetDescriptor+0x2e0>
 8015f94:	009a      	lsls	r2, r3, #2
 8015f96:	4bcb      	ldr	r3, [pc, #812]	@ (80162c4 <USBD_GetDescriptor+0x35c>)
 8015f98:	18d3      	adds	r3, r2, r3
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015f9e:	687a      	ldr	r2, [r7, #4]
 8015fa0:	23ac      	movs	r3, #172	@ 0xac
 8015fa2:	009b      	lsls	r3, r3, #2
 8015fa4:	58d3      	ldr	r3, [r2, r3]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	7c12      	ldrb	r2, [r2, #16]
 8015fac:	2108      	movs	r1, #8
 8015fae:	1879      	adds	r1, r7, r1
 8015fb0:	0010      	movs	r0, r2
 8015fb2:	4798      	blx	r3
 8015fb4:	0003      	movs	r3, r0
 8015fb6:	60fb      	str	r3, [r7, #12]
      break;
 8015fb8:	e153      	b.n	8016262 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	7c1b      	ldrb	r3, [r3, #16]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d10f      	bne.n	8015fe2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	23ad      	movs	r3, #173	@ 0xad
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	58d3      	ldr	r3, [r2, r3]
 8015fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fcc:	2208      	movs	r2, #8
 8015fce:	18ba      	adds	r2, r7, r2
 8015fd0:	0010      	movs	r0, r2
 8015fd2:	4798      	blx	r3
 8015fd4:	0003      	movs	r3, r0
 8015fd6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	3301      	adds	r3, #1
 8015fdc:	2202      	movs	r2, #2
 8015fde:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015fe0:	e13f      	b.n	8016262 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015fe2:	687a      	ldr	r2, [r7, #4]
 8015fe4:	23ad      	movs	r3, #173	@ 0xad
 8015fe6:	009b      	lsls	r3, r3, #2
 8015fe8:	58d3      	ldr	r3, [r2, r3]
 8015fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fec:	2208      	movs	r2, #8
 8015fee:	18ba      	adds	r2, r7, r2
 8015ff0:	0010      	movs	r0, r2
 8015ff2:	4798      	blx	r3
 8015ff4:	0003      	movs	r3, r0
 8015ff6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	3301      	adds	r3, #1
 8015ffc:	2202      	movs	r2, #2
 8015ffe:	701a      	strb	r2, [r3, #0]
      break;
 8016000:	e12f      	b.n	8016262 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	885b      	ldrh	r3, [r3, #2]
 8016006:	b2db      	uxtb	r3, r3
 8016008:	2b05      	cmp	r3, #5
 801600a:	d900      	bls.n	801600e <USBD_GetDescriptor+0xa6>
 801600c:	e0d0      	b.n	80161b0 <USBD_GetDescriptor+0x248>
 801600e:	009a      	lsls	r2, r3, #2
 8016010:	4bad      	ldr	r3, [pc, #692]	@ (80162c8 <USBD_GetDescriptor+0x360>)
 8016012:	18d3      	adds	r3, r2, r3
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016018:	687a      	ldr	r2, [r7, #4]
 801601a:	23ac      	movs	r3, #172	@ 0xac
 801601c:	009b      	lsls	r3, r3, #2
 801601e:	58d3      	ldr	r3, [r2, r3]
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d00d      	beq.n	8016042 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016026:	687a      	ldr	r2, [r7, #4]
 8016028:	23ac      	movs	r3, #172	@ 0xac
 801602a:	009b      	lsls	r3, r3, #2
 801602c:	58d3      	ldr	r3, [r2, r3]
 801602e:	685b      	ldr	r3, [r3, #4]
 8016030:	687a      	ldr	r2, [r7, #4]
 8016032:	7c12      	ldrb	r2, [r2, #16]
 8016034:	2108      	movs	r1, #8
 8016036:	1879      	adds	r1, r7, r1
 8016038:	0010      	movs	r0, r2
 801603a:	4798      	blx	r3
 801603c:	0003      	movs	r3, r0
 801603e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016040:	e0c3      	b.n	80161ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016042:	683a      	ldr	r2, [r7, #0]
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	0011      	movs	r1, r2
 8016048:	0018      	movs	r0, r3
 801604a:	f000 fb20 	bl	801668e <USBD_CtlError>
            err++;
 801604e:	210b      	movs	r1, #11
 8016050:	187b      	adds	r3, r7, r1
 8016052:	781a      	ldrb	r2, [r3, #0]
 8016054:	187b      	adds	r3, r7, r1
 8016056:	3201      	adds	r2, #1
 8016058:	701a      	strb	r2, [r3, #0]
          break;
 801605a:	e0b6      	b.n	80161ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801605c:	687a      	ldr	r2, [r7, #4]
 801605e:	23ac      	movs	r3, #172	@ 0xac
 8016060:	009b      	lsls	r3, r3, #2
 8016062:	58d3      	ldr	r3, [r2, r3]
 8016064:	689b      	ldr	r3, [r3, #8]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d00d      	beq.n	8016086 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801606a:	687a      	ldr	r2, [r7, #4]
 801606c:	23ac      	movs	r3, #172	@ 0xac
 801606e:	009b      	lsls	r3, r3, #2
 8016070:	58d3      	ldr	r3, [r2, r3]
 8016072:	689b      	ldr	r3, [r3, #8]
 8016074:	687a      	ldr	r2, [r7, #4]
 8016076:	7c12      	ldrb	r2, [r2, #16]
 8016078:	2108      	movs	r1, #8
 801607a:	1879      	adds	r1, r7, r1
 801607c:	0010      	movs	r0, r2
 801607e:	4798      	blx	r3
 8016080:	0003      	movs	r3, r0
 8016082:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016084:	e0a1      	b.n	80161ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016086:	683a      	ldr	r2, [r7, #0]
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	0011      	movs	r1, r2
 801608c:	0018      	movs	r0, r3
 801608e:	f000 fafe 	bl	801668e <USBD_CtlError>
            err++;
 8016092:	210b      	movs	r1, #11
 8016094:	187b      	adds	r3, r7, r1
 8016096:	781a      	ldrb	r2, [r3, #0]
 8016098:	187b      	adds	r3, r7, r1
 801609a:	3201      	adds	r2, #1
 801609c:	701a      	strb	r2, [r3, #0]
          break;
 801609e:	e094      	b.n	80161ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80160a0:	687a      	ldr	r2, [r7, #4]
 80160a2:	23ac      	movs	r3, #172	@ 0xac
 80160a4:	009b      	lsls	r3, r3, #2
 80160a6:	58d3      	ldr	r3, [r2, r3]
 80160a8:	68db      	ldr	r3, [r3, #12]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d00d      	beq.n	80160ca <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	23ac      	movs	r3, #172	@ 0xac
 80160b2:	009b      	lsls	r3, r3, #2
 80160b4:	58d3      	ldr	r3, [r2, r3]
 80160b6:	68db      	ldr	r3, [r3, #12]
 80160b8:	687a      	ldr	r2, [r7, #4]
 80160ba:	7c12      	ldrb	r2, [r2, #16]
 80160bc:	2108      	movs	r1, #8
 80160be:	1879      	adds	r1, r7, r1
 80160c0:	0010      	movs	r0, r2
 80160c2:	4798      	blx	r3
 80160c4:	0003      	movs	r3, r0
 80160c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160c8:	e07f      	b.n	80161ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80160ca:	683a      	ldr	r2, [r7, #0]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	0011      	movs	r1, r2
 80160d0:	0018      	movs	r0, r3
 80160d2:	f000 fadc 	bl	801668e <USBD_CtlError>
            err++;
 80160d6:	210b      	movs	r1, #11
 80160d8:	187b      	adds	r3, r7, r1
 80160da:	781a      	ldrb	r2, [r3, #0]
 80160dc:	187b      	adds	r3, r7, r1
 80160de:	3201      	adds	r2, #1
 80160e0:	701a      	strb	r2, [r3, #0]
          break;
 80160e2:	e072      	b.n	80161ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80160e4:	687a      	ldr	r2, [r7, #4]
 80160e6:	23ac      	movs	r3, #172	@ 0xac
 80160e8:	009b      	lsls	r3, r3, #2
 80160ea:	58d3      	ldr	r3, [r2, r3]
 80160ec:	691b      	ldr	r3, [r3, #16]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d00d      	beq.n	801610e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80160f2:	687a      	ldr	r2, [r7, #4]
 80160f4:	23ac      	movs	r3, #172	@ 0xac
 80160f6:	009b      	lsls	r3, r3, #2
 80160f8:	58d3      	ldr	r3, [r2, r3]
 80160fa:	691b      	ldr	r3, [r3, #16]
 80160fc:	687a      	ldr	r2, [r7, #4]
 80160fe:	7c12      	ldrb	r2, [r2, #16]
 8016100:	2108      	movs	r1, #8
 8016102:	1879      	adds	r1, r7, r1
 8016104:	0010      	movs	r0, r2
 8016106:	4798      	blx	r3
 8016108:	0003      	movs	r3, r0
 801610a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801610c:	e05d      	b.n	80161ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801610e:	683a      	ldr	r2, [r7, #0]
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	0011      	movs	r1, r2
 8016114:	0018      	movs	r0, r3
 8016116:	f000 faba 	bl	801668e <USBD_CtlError>
            err++;
 801611a:	210b      	movs	r1, #11
 801611c:	187b      	adds	r3, r7, r1
 801611e:	781a      	ldrb	r2, [r3, #0]
 8016120:	187b      	adds	r3, r7, r1
 8016122:	3201      	adds	r2, #1
 8016124:	701a      	strb	r2, [r3, #0]
          break;
 8016126:	e050      	b.n	80161ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016128:	687a      	ldr	r2, [r7, #4]
 801612a:	23ac      	movs	r3, #172	@ 0xac
 801612c:	009b      	lsls	r3, r3, #2
 801612e:	58d3      	ldr	r3, [r2, r3]
 8016130:	695b      	ldr	r3, [r3, #20]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d00d      	beq.n	8016152 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016136:	687a      	ldr	r2, [r7, #4]
 8016138:	23ac      	movs	r3, #172	@ 0xac
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	58d3      	ldr	r3, [r2, r3]
 801613e:	695b      	ldr	r3, [r3, #20]
 8016140:	687a      	ldr	r2, [r7, #4]
 8016142:	7c12      	ldrb	r2, [r2, #16]
 8016144:	2108      	movs	r1, #8
 8016146:	1879      	adds	r1, r7, r1
 8016148:	0010      	movs	r0, r2
 801614a:	4798      	blx	r3
 801614c:	0003      	movs	r3, r0
 801614e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016150:	e03b      	b.n	80161ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016152:	683a      	ldr	r2, [r7, #0]
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	0011      	movs	r1, r2
 8016158:	0018      	movs	r0, r3
 801615a:	f000 fa98 	bl	801668e <USBD_CtlError>
            err++;
 801615e:	210b      	movs	r1, #11
 8016160:	187b      	adds	r3, r7, r1
 8016162:	781a      	ldrb	r2, [r3, #0]
 8016164:	187b      	adds	r3, r7, r1
 8016166:	3201      	adds	r2, #1
 8016168:	701a      	strb	r2, [r3, #0]
          break;
 801616a:	e02e      	b.n	80161ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801616c:	687a      	ldr	r2, [r7, #4]
 801616e:	23ac      	movs	r3, #172	@ 0xac
 8016170:	009b      	lsls	r3, r3, #2
 8016172:	58d3      	ldr	r3, [r2, r3]
 8016174:	699b      	ldr	r3, [r3, #24]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00d      	beq.n	8016196 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801617a:	687a      	ldr	r2, [r7, #4]
 801617c:	23ac      	movs	r3, #172	@ 0xac
 801617e:	009b      	lsls	r3, r3, #2
 8016180:	58d3      	ldr	r3, [r2, r3]
 8016182:	699b      	ldr	r3, [r3, #24]
 8016184:	687a      	ldr	r2, [r7, #4]
 8016186:	7c12      	ldrb	r2, [r2, #16]
 8016188:	2108      	movs	r1, #8
 801618a:	1879      	adds	r1, r7, r1
 801618c:	0010      	movs	r0, r2
 801618e:	4798      	blx	r3
 8016190:	0003      	movs	r3, r0
 8016192:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016194:	e019      	b.n	80161ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016196:	683a      	ldr	r2, [r7, #0]
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	0011      	movs	r1, r2
 801619c:	0018      	movs	r0, r3
 801619e:	f000 fa76 	bl	801668e <USBD_CtlError>
            err++;
 80161a2:	210b      	movs	r1, #11
 80161a4:	187b      	adds	r3, r7, r1
 80161a6:	781a      	ldrb	r2, [r3, #0]
 80161a8:	187b      	adds	r3, r7, r1
 80161aa:	3201      	adds	r2, #1
 80161ac:	701a      	strb	r2, [r3, #0]
          break;
 80161ae:	e00c      	b.n	80161ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80161b0:	683a      	ldr	r2, [r7, #0]
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	0011      	movs	r1, r2
 80161b6:	0018      	movs	r0, r3
 80161b8:	f000 fa69 	bl	801668e <USBD_CtlError>
          err++;
 80161bc:	210b      	movs	r1, #11
 80161be:	187b      	adds	r3, r7, r1
 80161c0:	781a      	ldrb	r2, [r3, #0]
 80161c2:	187b      	adds	r3, r7, r1
 80161c4:	3201      	adds	r2, #1
 80161c6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80161c8:	e04b      	b.n	8016262 <USBD_GetDescriptor+0x2fa>
 80161ca:	e04a      	b.n	8016262 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	7c1b      	ldrb	r3, [r3, #16]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d10b      	bne.n	80161ec <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80161d4:	687a      	ldr	r2, [r7, #4]
 80161d6:	23ad      	movs	r3, #173	@ 0xad
 80161d8:	009b      	lsls	r3, r3, #2
 80161da:	58d3      	ldr	r3, [r2, r3]
 80161dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80161de:	2208      	movs	r2, #8
 80161e0:	18ba      	adds	r2, r7, r2
 80161e2:	0010      	movs	r0, r2
 80161e4:	4798      	blx	r3
 80161e6:	0003      	movs	r3, r0
 80161e8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80161ea:	e03a      	b.n	8016262 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80161ec:	683a      	ldr	r2, [r7, #0]
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	0011      	movs	r1, r2
 80161f2:	0018      	movs	r0, r3
 80161f4:	f000 fa4b 	bl	801668e <USBD_CtlError>
        err++;
 80161f8:	210b      	movs	r1, #11
 80161fa:	187b      	adds	r3, r7, r1
 80161fc:	781a      	ldrb	r2, [r3, #0]
 80161fe:	187b      	adds	r3, r7, r1
 8016200:	3201      	adds	r2, #1
 8016202:	701a      	strb	r2, [r3, #0]
      break;
 8016204:	e02d      	b.n	8016262 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	7c1b      	ldrb	r3, [r3, #16]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d10f      	bne.n	801622e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801620e:	687a      	ldr	r2, [r7, #4]
 8016210:	23ad      	movs	r3, #173	@ 0xad
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	58d3      	ldr	r3, [r2, r3]
 8016216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016218:	2208      	movs	r2, #8
 801621a:	18ba      	adds	r2, r7, r2
 801621c:	0010      	movs	r0, r2
 801621e:	4798      	blx	r3
 8016220:	0003      	movs	r3, r0
 8016222:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	3301      	adds	r3, #1
 8016228:	2207      	movs	r2, #7
 801622a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801622c:	e019      	b.n	8016262 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801622e:	683a      	ldr	r2, [r7, #0]
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	0011      	movs	r1, r2
 8016234:	0018      	movs	r0, r3
 8016236:	f000 fa2a 	bl	801668e <USBD_CtlError>
        err++;
 801623a:	210b      	movs	r1, #11
 801623c:	187b      	adds	r3, r7, r1
 801623e:	781a      	ldrb	r2, [r3, #0]
 8016240:	187b      	adds	r3, r7, r1
 8016242:	3201      	adds	r2, #1
 8016244:	701a      	strb	r2, [r3, #0]
      break;
 8016246:	e00c      	b.n	8016262 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8016248:	683a      	ldr	r2, [r7, #0]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	0011      	movs	r1, r2
 801624e:	0018      	movs	r0, r3
 8016250:	f000 fa1d 	bl	801668e <USBD_CtlError>
      err++;
 8016254:	210b      	movs	r1, #11
 8016256:	187b      	adds	r3, r7, r1
 8016258:	781a      	ldrb	r2, [r3, #0]
 801625a:	187b      	adds	r3, r7, r1
 801625c:	3201      	adds	r2, #1
 801625e:	701a      	strb	r2, [r3, #0]
      break;
 8016260:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8016262:	230b      	movs	r3, #11
 8016264:	18fb      	adds	r3, r7, r3
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d127      	bne.n	80162bc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801626c:	2108      	movs	r1, #8
 801626e:	187b      	adds	r3, r7, r1
 8016270:	881b      	ldrh	r3, [r3, #0]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d019      	beq.n	80162aa <USBD_GetDescriptor+0x342>
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	88db      	ldrh	r3, [r3, #6]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d015      	beq.n	80162aa <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	88da      	ldrh	r2, [r3, #6]
 8016282:	187b      	adds	r3, r7, r1
 8016284:	881b      	ldrh	r3, [r3, #0]
 8016286:	1c18      	adds	r0, r3, #0
 8016288:	1c11      	adds	r1, r2, #0
 801628a:	b28a      	uxth	r2, r1
 801628c:	b283      	uxth	r3, r0
 801628e:	429a      	cmp	r2, r3
 8016290:	d900      	bls.n	8016294 <USBD_GetDescriptor+0x32c>
 8016292:	1c01      	adds	r1, r0, #0
 8016294:	b28a      	uxth	r2, r1
 8016296:	2108      	movs	r1, #8
 8016298:	187b      	adds	r3, r7, r1
 801629a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801629c:	187b      	adds	r3, r7, r1
 801629e:	881a      	ldrh	r2, [r3, #0]
 80162a0:	68f9      	ldr	r1, [r7, #12]
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	0018      	movs	r0, r3
 80162a6:	f000 fa70 	bl	801678a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	88db      	ldrh	r3, [r3, #6]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d105      	bne.n	80162be <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	0018      	movs	r0, r3
 80162b6:	f000 fad2 	bl	801685e <USBD_CtlSendStatus>
 80162ba:	e000      	b.n	80162be <USBD_GetDescriptor+0x356>
    return;
 80162bc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80162be:	46bd      	mov	sp, r7
 80162c0:	b004      	add	sp, #16
 80162c2:	bd80      	pop	{r7, pc}
 80162c4:	0801bbe4 	.word	0x0801bbe4
 80162c8:	0801bc04 	.word	0x0801bc04

080162cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80162cc:	b590      	push	{r4, r7, lr}
 80162ce:	b085      	sub	sp, #20
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80162d6:	683b      	ldr	r3, [r7, #0]
 80162d8:	889b      	ldrh	r3, [r3, #4]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d13d      	bne.n	801635a <USBD_SetAddress+0x8e>
 80162de:	683b      	ldr	r3, [r7, #0]
 80162e0:	88db      	ldrh	r3, [r3, #6]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d139      	bne.n	801635a <USBD_SetAddress+0x8e>
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	885b      	ldrh	r3, [r3, #2]
 80162ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80162ec:	d835      	bhi.n	801635a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	885b      	ldrh	r3, [r3, #2]
 80162f2:	b2da      	uxtb	r2, r3
 80162f4:	230f      	movs	r3, #15
 80162f6:	18fb      	adds	r3, r7, r3
 80162f8:	217f      	movs	r1, #127	@ 0x7f
 80162fa:	400a      	ands	r2, r1
 80162fc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162fe:	687a      	ldr	r2, [r7, #4]
 8016300:	23a7      	movs	r3, #167	@ 0xa7
 8016302:	009b      	lsls	r3, r3, #2
 8016304:	5cd3      	ldrb	r3, [r2, r3]
 8016306:	2b03      	cmp	r3, #3
 8016308:	d106      	bne.n	8016318 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801630a:	683a      	ldr	r2, [r7, #0]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	0011      	movs	r1, r2
 8016310:	0018      	movs	r0, r3
 8016312:	f000 f9bc 	bl	801668e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016316:	e027      	b.n	8016368 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	240f      	movs	r4, #15
 801631c:	193a      	adds	r2, r7, r4
 801631e:	4914      	ldr	r1, [pc, #80]	@ (8016370 <USBD_SetAddress+0xa4>)
 8016320:	7812      	ldrb	r2, [r2, #0]
 8016322:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016324:	193b      	adds	r3, r7, r4
 8016326:	781a      	ldrb	r2, [r3, #0]
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	0011      	movs	r1, r2
 801632c:	0018      	movs	r0, r3
 801632e:	f000 ff5d 	bl	80171ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	0018      	movs	r0, r3
 8016336:	f000 fa92 	bl	801685e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801633a:	193b      	adds	r3, r7, r4
 801633c:	781b      	ldrb	r3, [r3, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d005      	beq.n	801634e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016342:	687a      	ldr	r2, [r7, #4]
 8016344:	23a7      	movs	r3, #167	@ 0xa7
 8016346:	009b      	lsls	r3, r3, #2
 8016348:	2102      	movs	r1, #2
 801634a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801634c:	e00c      	b.n	8016368 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	23a7      	movs	r3, #167	@ 0xa7
 8016352:	009b      	lsls	r3, r3, #2
 8016354:	2101      	movs	r1, #1
 8016356:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016358:	e006      	b.n	8016368 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801635a:	683a      	ldr	r2, [r7, #0]
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	0011      	movs	r1, r2
 8016360:	0018      	movs	r0, r3
 8016362:	f000 f994 	bl	801668e <USBD_CtlError>
  }
}
 8016366:	46c0      	nop			@ (mov r8, r8)
 8016368:	46c0      	nop			@ (mov r8, r8)
 801636a:	46bd      	mov	sp, r7
 801636c:	b005      	add	sp, #20
 801636e:	bd90      	pop	{r4, r7, pc}
 8016370:	0000029e 	.word	0x0000029e

08016374 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016374:	b580      	push	{r7, lr}
 8016376:	b082      	sub	sp, #8
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
 801637c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	885b      	ldrh	r3, [r3, #2]
 8016382:	b2da      	uxtb	r2, r3
 8016384:	4b4c      	ldr	r3, [pc, #304]	@ (80164b8 <USBD_SetConfig+0x144>)
 8016386:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016388:	4b4b      	ldr	r3, [pc, #300]	@ (80164b8 <USBD_SetConfig+0x144>)
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	2b01      	cmp	r3, #1
 801638e:	d906      	bls.n	801639e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8016390:	683a      	ldr	r2, [r7, #0]
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	0011      	movs	r1, r2
 8016396:	0018      	movs	r0, r3
 8016398:	f000 f979 	bl	801668e <USBD_CtlError>
 801639c:	e088      	b.n	80164b0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801639e:	687a      	ldr	r2, [r7, #4]
 80163a0:	23a7      	movs	r3, #167	@ 0xa7
 80163a2:	009b      	lsls	r3, r3, #2
 80163a4:	5cd3      	ldrb	r3, [r2, r3]
 80163a6:	2b02      	cmp	r3, #2
 80163a8:	d002      	beq.n	80163b0 <USBD_SetConfig+0x3c>
 80163aa:	2b03      	cmp	r3, #3
 80163ac:	d029      	beq.n	8016402 <USBD_SetConfig+0x8e>
 80163ae:	e071      	b.n	8016494 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80163b0:	4b41      	ldr	r3, [pc, #260]	@ (80164b8 <USBD_SetConfig+0x144>)
 80163b2:	781b      	ldrb	r3, [r3, #0]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d01f      	beq.n	80163f8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80163b8:	4b3f      	ldr	r3, [pc, #252]	@ (80164b8 <USBD_SetConfig+0x144>)
 80163ba:	781b      	ldrb	r3, [r3, #0]
 80163bc:	001a      	movs	r2, r3
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80163c2:	687a      	ldr	r2, [r7, #4]
 80163c4:	23a7      	movs	r3, #167	@ 0xa7
 80163c6:	009b      	lsls	r3, r3, #2
 80163c8:	2103      	movs	r1, #3
 80163ca:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80163cc:	4b3a      	ldr	r3, [pc, #232]	@ (80164b8 <USBD_SetConfig+0x144>)
 80163ce:	781a      	ldrb	r2, [r3, #0]
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	0011      	movs	r1, r2
 80163d4:	0018      	movs	r0, r3
 80163d6:	f7ff f8c6 	bl	8015566 <USBD_SetClassConfig>
 80163da:	0003      	movs	r3, r0
 80163dc:	2b02      	cmp	r3, #2
 80163de:	d106      	bne.n	80163ee <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80163e0:	683a      	ldr	r2, [r7, #0]
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	0011      	movs	r1, r2
 80163e6:	0018      	movs	r0, r3
 80163e8:	f000 f951 	bl	801668e <USBD_CtlError>
            return;
 80163ec:	e060      	b.n	80164b0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	0018      	movs	r0, r3
 80163f2:	f000 fa34 	bl	801685e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80163f6:	e05b      	b.n	80164b0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	0018      	movs	r0, r3
 80163fc:	f000 fa2f 	bl	801685e <USBD_CtlSendStatus>
        break;
 8016400:	e056      	b.n	80164b0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8016402:	4b2d      	ldr	r3, [pc, #180]	@ (80164b8 <USBD_SetConfig+0x144>)
 8016404:	781b      	ldrb	r3, [r3, #0]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d115      	bne.n	8016436 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801640a:	687a      	ldr	r2, [r7, #4]
 801640c:	23a7      	movs	r3, #167	@ 0xa7
 801640e:	009b      	lsls	r3, r3, #2
 8016410:	2102      	movs	r1, #2
 8016412:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8016414:	4b28      	ldr	r3, [pc, #160]	@ (80164b8 <USBD_SetConfig+0x144>)
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	001a      	movs	r2, r3
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801641e:	4b26      	ldr	r3, [pc, #152]	@ (80164b8 <USBD_SetConfig+0x144>)
 8016420:	781a      	ldrb	r2, [r3, #0]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	0011      	movs	r1, r2
 8016426:	0018      	movs	r0, r3
 8016428:	f7ff f8c4 	bl	80155b4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	0018      	movs	r0, r3
 8016430:	f000 fa15 	bl	801685e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8016434:	e03c      	b.n	80164b0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8016436:	4b20      	ldr	r3, [pc, #128]	@ (80164b8 <USBD_SetConfig+0x144>)
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	001a      	movs	r2, r3
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	429a      	cmp	r2, r3
 8016442:	d022      	beq.n	801648a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	685b      	ldr	r3, [r3, #4]
 8016448:	b2da      	uxtb	r2, r3
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	0011      	movs	r1, r2
 801644e:	0018      	movs	r0, r3
 8016450:	f7ff f8b0 	bl	80155b4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8016454:	4b18      	ldr	r3, [pc, #96]	@ (80164b8 <USBD_SetConfig+0x144>)
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	001a      	movs	r2, r3
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801645e:	4b16      	ldr	r3, [pc, #88]	@ (80164b8 <USBD_SetConfig+0x144>)
 8016460:	781a      	ldrb	r2, [r3, #0]
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	0011      	movs	r1, r2
 8016466:	0018      	movs	r0, r3
 8016468:	f7ff f87d 	bl	8015566 <USBD_SetClassConfig>
 801646c:	0003      	movs	r3, r0
 801646e:	2b02      	cmp	r3, #2
 8016470:	d106      	bne.n	8016480 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8016472:	683a      	ldr	r2, [r7, #0]
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	0011      	movs	r1, r2
 8016478:	0018      	movs	r0, r3
 801647a:	f000 f908 	bl	801668e <USBD_CtlError>
            return;
 801647e:	e017      	b.n	80164b0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	0018      	movs	r0, r3
 8016484:	f000 f9eb 	bl	801685e <USBD_CtlSendStatus>
        break;
 8016488:	e012      	b.n	80164b0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	0018      	movs	r0, r3
 801648e:	f000 f9e6 	bl	801685e <USBD_CtlSendStatus>
        break;
 8016492:	e00d      	b.n	80164b0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8016494:	683a      	ldr	r2, [r7, #0]
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	0011      	movs	r1, r2
 801649a:	0018      	movs	r0, r3
 801649c:	f000 f8f7 	bl	801668e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80164a0:	4b05      	ldr	r3, [pc, #20]	@ (80164b8 <USBD_SetConfig+0x144>)
 80164a2:	781a      	ldrb	r2, [r3, #0]
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	0011      	movs	r1, r2
 80164a8:	0018      	movs	r0, r3
 80164aa:	f7ff f883 	bl	80155b4 <USBD_ClrClassConfig>
        break;
 80164ae:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80164b0:	46bd      	mov	sp, r7
 80164b2:	b002      	add	sp, #8
 80164b4:	bd80      	pop	{r7, pc}
 80164b6:	46c0      	nop			@ (mov r8, r8)
 80164b8:	20002d24 	.word	0x20002d24

080164bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b082      	sub	sp, #8
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
 80164c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	88db      	ldrh	r3, [r3, #6]
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	d006      	beq.n	80164dc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80164ce:	683a      	ldr	r2, [r7, #0]
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	0011      	movs	r1, r2
 80164d4:	0018      	movs	r0, r3
 80164d6:	f000 f8da 	bl	801668e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80164da:	e026      	b.n	801652a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80164dc:	687a      	ldr	r2, [r7, #4]
 80164de:	23a7      	movs	r3, #167	@ 0xa7
 80164e0:	009b      	lsls	r3, r3, #2
 80164e2:	5cd3      	ldrb	r3, [r2, r3]
 80164e4:	2b02      	cmp	r3, #2
 80164e6:	dc02      	bgt.n	80164ee <USBD_GetConfig+0x32>
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	dc03      	bgt.n	80164f4 <USBD_GetConfig+0x38>
 80164ec:	e016      	b.n	801651c <USBD_GetConfig+0x60>
 80164ee:	2b03      	cmp	r3, #3
 80164f0:	d00c      	beq.n	801650c <USBD_GetConfig+0x50>
 80164f2:	e013      	b.n	801651c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2200      	movs	r2, #0
 80164f8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	3308      	adds	r3, #8
 80164fe:	0019      	movs	r1, r3
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2201      	movs	r2, #1
 8016504:	0018      	movs	r0, r3
 8016506:	f000 f940 	bl	801678a <USBD_CtlSendData>
        break;
 801650a:	e00e      	b.n	801652a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	1d19      	adds	r1, r3, #4
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	2201      	movs	r2, #1
 8016514:	0018      	movs	r0, r3
 8016516:	f000 f938 	bl	801678a <USBD_CtlSendData>
        break;
 801651a:	e006      	b.n	801652a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801651c:	683a      	ldr	r2, [r7, #0]
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	0011      	movs	r1, r2
 8016522:	0018      	movs	r0, r3
 8016524:	f000 f8b3 	bl	801668e <USBD_CtlError>
        break;
 8016528:	46c0      	nop			@ (mov r8, r8)
}
 801652a:	46c0      	nop			@ (mov r8, r8)
 801652c:	46bd      	mov	sp, r7
 801652e:	b002      	add	sp, #8
 8016530:	bd80      	pop	{r7, pc}

08016532 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016532:	b580      	push	{r7, lr}
 8016534:	b082      	sub	sp, #8
 8016536:	af00      	add	r7, sp, #0
 8016538:	6078      	str	r0, [r7, #4]
 801653a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801653c:	687a      	ldr	r2, [r7, #4]
 801653e:	23a7      	movs	r3, #167	@ 0xa7
 8016540:	009b      	lsls	r3, r3, #2
 8016542:	5cd3      	ldrb	r3, [r2, r3]
 8016544:	3b01      	subs	r3, #1
 8016546:	2b02      	cmp	r3, #2
 8016548:	d822      	bhi.n	8016590 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	88db      	ldrh	r3, [r3, #6]
 801654e:	2b02      	cmp	r3, #2
 8016550:	d006      	beq.n	8016560 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8016552:	683a      	ldr	r2, [r7, #0]
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	0011      	movs	r1, r2
 8016558:	0018      	movs	r0, r3
 801655a:	f000 f898 	bl	801668e <USBD_CtlError>
        break;
 801655e:	e01e      	b.n	801659e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2201      	movs	r2, #1
 8016564:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8016566:	687a      	ldr	r2, [r7, #4]
 8016568:	23a9      	movs	r3, #169	@ 0xa9
 801656a:	009b      	lsls	r3, r3, #2
 801656c:	58d3      	ldr	r3, [r2, r3]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d005      	beq.n	801657e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	68db      	ldr	r3, [r3, #12]
 8016576:	2202      	movs	r2, #2
 8016578:	431a      	orrs	r2, r3
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	330c      	adds	r3, #12
 8016582:	0019      	movs	r1, r3
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	2202      	movs	r2, #2
 8016588:	0018      	movs	r0, r3
 801658a:	f000 f8fe 	bl	801678a <USBD_CtlSendData>
      break;
 801658e:	e006      	b.n	801659e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8016590:	683a      	ldr	r2, [r7, #0]
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	0011      	movs	r1, r2
 8016596:	0018      	movs	r0, r3
 8016598:	f000 f879 	bl	801668e <USBD_CtlError>
      break;
 801659c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801659e:	46c0      	nop			@ (mov r8, r8)
 80165a0:	46bd      	mov	sp, r7
 80165a2:	b002      	add	sp, #8
 80165a4:	bd80      	pop	{r7, pc}

080165a6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80165a6:	b580      	push	{r7, lr}
 80165a8:	b082      	sub	sp, #8
 80165aa:	af00      	add	r7, sp, #0
 80165ac:	6078      	str	r0, [r7, #4]
 80165ae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	885b      	ldrh	r3, [r3, #2]
 80165b4:	2b01      	cmp	r3, #1
 80165b6:	d108      	bne.n	80165ca <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80165b8:	687a      	ldr	r2, [r7, #4]
 80165ba:	23a9      	movs	r3, #169	@ 0xa9
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	2101      	movs	r1, #1
 80165c0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	0018      	movs	r0, r3
 80165c6:	f000 f94a 	bl	801685e <USBD_CtlSendStatus>
  }
}
 80165ca:	46c0      	nop			@ (mov r8, r8)
 80165cc:	46bd      	mov	sp, r7
 80165ce:	b002      	add	sp, #8
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80165d2:	b580      	push	{r7, lr}
 80165d4:	b082      	sub	sp, #8
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80165dc:	687a      	ldr	r2, [r7, #4]
 80165de:	23a7      	movs	r3, #167	@ 0xa7
 80165e0:	009b      	lsls	r3, r3, #2
 80165e2:	5cd3      	ldrb	r3, [r2, r3]
 80165e4:	3b01      	subs	r3, #1
 80165e6:	2b02      	cmp	r3, #2
 80165e8:	d80d      	bhi.n	8016606 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	885b      	ldrh	r3, [r3, #2]
 80165ee:	2b01      	cmp	r3, #1
 80165f0:	d110      	bne.n	8016614 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80165f2:	687a      	ldr	r2, [r7, #4]
 80165f4:	23a9      	movs	r3, #169	@ 0xa9
 80165f6:	009b      	lsls	r3, r3, #2
 80165f8:	2100      	movs	r1, #0
 80165fa:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	0018      	movs	r0, r3
 8016600:	f000 f92d 	bl	801685e <USBD_CtlSendStatus>
      }
      break;
 8016604:	e006      	b.n	8016614 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8016606:	683a      	ldr	r2, [r7, #0]
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	0011      	movs	r1, r2
 801660c:	0018      	movs	r0, r3
 801660e:	f000 f83e 	bl	801668e <USBD_CtlError>
      break;
 8016612:	e000      	b.n	8016616 <USBD_ClrFeature+0x44>
      break;
 8016614:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016616:	46c0      	nop			@ (mov r8, r8)
 8016618:	46bd      	mov	sp, r7
 801661a:	b002      	add	sp, #8
 801661c:	bd80      	pop	{r7, pc}

0801661e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801661e:	b580      	push	{r7, lr}
 8016620:	b082      	sub	sp, #8
 8016622:	af00      	add	r7, sp, #0
 8016624:	6078      	str	r0, [r7, #4]
 8016626:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	781a      	ldrb	r2, [r3, #0]
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8016630:	683b      	ldr	r3, [r7, #0]
 8016632:	785a      	ldrb	r2, [r3, #1]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	3302      	adds	r3, #2
 801663c:	781b      	ldrb	r3, [r3, #0]
 801663e:	001a      	movs	r2, r3
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	3303      	adds	r3, #3
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	021b      	lsls	r3, r3, #8
 8016648:	b29b      	uxth	r3, r3
 801664a:	18d3      	adds	r3, r2, r3
 801664c:	b29a      	uxth	r2, r3
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8016652:	683b      	ldr	r3, [r7, #0]
 8016654:	3304      	adds	r3, #4
 8016656:	781b      	ldrb	r3, [r3, #0]
 8016658:	001a      	movs	r2, r3
 801665a:	683b      	ldr	r3, [r7, #0]
 801665c:	3305      	adds	r3, #5
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	021b      	lsls	r3, r3, #8
 8016662:	b29b      	uxth	r3, r3
 8016664:	18d3      	adds	r3, r2, r3
 8016666:	b29a      	uxth	r2, r3
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	3306      	adds	r3, #6
 8016670:	781b      	ldrb	r3, [r3, #0]
 8016672:	001a      	movs	r2, r3
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	3307      	adds	r3, #7
 8016678:	781b      	ldrb	r3, [r3, #0]
 801667a:	021b      	lsls	r3, r3, #8
 801667c:	b29b      	uxth	r3, r3
 801667e:	18d3      	adds	r3, r2, r3
 8016680:	b29a      	uxth	r2, r3
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	80da      	strh	r2, [r3, #6]

}
 8016686:	46c0      	nop			@ (mov r8, r8)
 8016688:	46bd      	mov	sp, r7
 801668a:	b002      	add	sp, #8
 801668c:	bd80      	pop	{r7, pc}

0801668e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801668e:	b580      	push	{r7, lr}
 8016690:	b082      	sub	sp, #8
 8016692:	af00      	add	r7, sp, #0
 8016694:	6078      	str	r0, [r7, #4]
 8016696:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2180      	movs	r1, #128	@ 0x80
 801669c:	0018      	movs	r0, r3
 801669e:	f000 fd1e 	bl	80170de <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2100      	movs	r1, #0
 80166a6:	0018      	movs	r0, r3
 80166a8:	f000 fd19 	bl	80170de <USBD_LL_StallEP>
}
 80166ac:	46c0      	nop			@ (mov r8, r8)
 80166ae:	46bd      	mov	sp, r7
 80166b0:	b002      	add	sp, #8
 80166b2:	bd80      	pop	{r7, pc}

080166b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80166b4:	b590      	push	{r4, r7, lr}
 80166b6:	b087      	sub	sp, #28
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	60f8      	str	r0, [r7, #12]
 80166bc:	60b9      	str	r1, [r7, #8]
 80166be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80166c0:	2417      	movs	r4, #23
 80166c2:	193b      	adds	r3, r7, r4
 80166c4:	2200      	movs	r2, #0
 80166c6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d03c      	beq.n	8016748 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	0018      	movs	r0, r3
 80166d2:	f000 f83d 	bl	8016750 <USBD_GetLen>
 80166d6:	0003      	movs	r3, r0
 80166d8:	3301      	adds	r3, #1
 80166da:	b29b      	uxth	r3, r3
 80166dc:	18db      	adds	r3, r3, r3
 80166de:	b29a      	uxth	r2, r3
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80166e4:	193b      	adds	r3, r7, r4
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	193a      	adds	r2, r7, r4
 80166ea:	1c59      	adds	r1, r3, #1
 80166ec:	7011      	strb	r1, [r2, #0]
 80166ee:	001a      	movs	r2, r3
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	189b      	adds	r3, r3, r2
 80166f4:	687a      	ldr	r2, [r7, #4]
 80166f6:	7812      	ldrb	r2, [r2, #0]
 80166f8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80166fa:	193b      	adds	r3, r7, r4
 80166fc:	781b      	ldrb	r3, [r3, #0]
 80166fe:	193a      	adds	r2, r7, r4
 8016700:	1c59      	adds	r1, r3, #1
 8016702:	7011      	strb	r1, [r2, #0]
 8016704:	001a      	movs	r2, r3
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	189b      	adds	r3, r3, r2
 801670a:	2203      	movs	r2, #3
 801670c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801670e:	e017      	b.n	8016740 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	1c5a      	adds	r2, r3, #1
 8016714:	60fa      	str	r2, [r7, #12]
 8016716:	2417      	movs	r4, #23
 8016718:	193a      	adds	r2, r7, r4
 801671a:	7812      	ldrb	r2, [r2, #0]
 801671c:	1939      	adds	r1, r7, r4
 801671e:	1c50      	adds	r0, r2, #1
 8016720:	7008      	strb	r0, [r1, #0]
 8016722:	0011      	movs	r1, r2
 8016724:	68ba      	ldr	r2, [r7, #8]
 8016726:	1852      	adds	r2, r2, r1
 8016728:	781b      	ldrb	r3, [r3, #0]
 801672a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801672c:	193b      	adds	r3, r7, r4
 801672e:	781b      	ldrb	r3, [r3, #0]
 8016730:	193a      	adds	r2, r7, r4
 8016732:	1c59      	adds	r1, r3, #1
 8016734:	7011      	strb	r1, [r2, #0]
 8016736:	001a      	movs	r2, r3
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	189b      	adds	r3, r3, r2
 801673c:	2200      	movs	r2, #0
 801673e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d1e3      	bne.n	8016710 <USBD_GetString+0x5c>
    }
  }
}
 8016748:	46c0      	nop			@ (mov r8, r8)
 801674a:	46bd      	mov	sp, r7
 801674c:	b007      	add	sp, #28
 801674e:	bd90      	pop	{r4, r7, pc}

08016750 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016758:	230f      	movs	r3, #15
 801675a:	18fb      	adds	r3, r7, r3
 801675c:	2200      	movs	r2, #0
 801675e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8016760:	e008      	b.n	8016774 <USBD_GetLen+0x24>
  {
    len++;
 8016762:	210f      	movs	r1, #15
 8016764:	187b      	adds	r3, r7, r1
 8016766:	781a      	ldrb	r2, [r3, #0]
 8016768:	187b      	adds	r3, r7, r1
 801676a:	3201      	adds	r2, #1
 801676c:	701a      	strb	r2, [r3, #0]
    buf++;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	3301      	adds	r3, #1
 8016772:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d1f2      	bne.n	8016762 <USBD_GetLen+0x12>
  }

  return len;
 801677c:	230f      	movs	r3, #15
 801677e:	18fb      	adds	r3, r7, r3
 8016780:	781b      	ldrb	r3, [r3, #0]
}
 8016782:	0018      	movs	r0, r3
 8016784:	46bd      	mov	sp, r7
 8016786:	b004      	add	sp, #16
 8016788:	bd80      	pop	{r7, pc}

0801678a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801678a:	b580      	push	{r7, lr}
 801678c:	b084      	sub	sp, #16
 801678e:	af00      	add	r7, sp, #0
 8016790:	60f8      	str	r0, [r7, #12]
 8016792:	60b9      	str	r1, [r7, #8]
 8016794:	1dbb      	adds	r3, r7, #6
 8016796:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016798:	68fa      	ldr	r2, [r7, #12]
 801679a:	23a5      	movs	r3, #165	@ 0xa5
 801679c:	009b      	lsls	r3, r3, #2
 801679e:	2102      	movs	r1, #2
 80167a0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80167a2:	1dbb      	adds	r3, r7, #6
 80167a4:	881a      	ldrh	r2, [r3, #0]
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80167aa:	1dbb      	adds	r3, r7, #6
 80167ac:	881a      	ldrh	r2, [r3, #0]
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80167b2:	1dbb      	adds	r3, r7, #6
 80167b4:	881b      	ldrh	r3, [r3, #0]
 80167b6:	68ba      	ldr	r2, [r7, #8]
 80167b8:	68f8      	ldr	r0, [r7, #12]
 80167ba:	2100      	movs	r1, #0
 80167bc:	f000 fd41 	bl	8017242 <USBD_LL_Transmit>

  return USBD_OK;
 80167c0:	2300      	movs	r3, #0
}
 80167c2:	0018      	movs	r0, r3
 80167c4:	46bd      	mov	sp, r7
 80167c6:	b004      	add	sp, #16
 80167c8:	bd80      	pop	{r7, pc}

080167ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80167ca:	b580      	push	{r7, lr}
 80167cc:	b084      	sub	sp, #16
 80167ce:	af00      	add	r7, sp, #0
 80167d0:	60f8      	str	r0, [r7, #12]
 80167d2:	60b9      	str	r1, [r7, #8]
 80167d4:	1dbb      	adds	r3, r7, #6
 80167d6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80167d8:	1dbb      	adds	r3, r7, #6
 80167da:	881b      	ldrh	r3, [r3, #0]
 80167dc:	68ba      	ldr	r2, [r7, #8]
 80167de:	68f8      	ldr	r0, [r7, #12]
 80167e0:	2100      	movs	r1, #0
 80167e2:	f000 fd2e 	bl	8017242 <USBD_LL_Transmit>

  return USBD_OK;
 80167e6:	2300      	movs	r3, #0
}
 80167e8:	0018      	movs	r0, r3
 80167ea:	46bd      	mov	sp, r7
 80167ec:	b004      	add	sp, #16
 80167ee:	bd80      	pop	{r7, pc}

080167f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b084      	sub	sp, #16
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	60f8      	str	r0, [r7, #12]
 80167f8:	60b9      	str	r1, [r7, #8]
 80167fa:	1dbb      	adds	r3, r7, #6
 80167fc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80167fe:	68fa      	ldr	r2, [r7, #12]
 8016800:	23a5      	movs	r3, #165	@ 0xa5
 8016802:	009b      	lsls	r3, r3, #2
 8016804:	2103      	movs	r1, #3
 8016806:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8016808:	1dbb      	adds	r3, r7, #6
 801680a:	8819      	ldrh	r1, [r3, #0]
 801680c:	68fa      	ldr	r2, [r7, #12]
 801680e:	23ae      	movs	r3, #174	@ 0xae
 8016810:	005b      	lsls	r3, r3, #1
 8016812:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8016814:	1dbb      	adds	r3, r7, #6
 8016816:	8819      	ldrh	r1, [r3, #0]
 8016818:	68fa      	ldr	r2, [r7, #12]
 801681a:	23b0      	movs	r3, #176	@ 0xb0
 801681c:	005b      	lsls	r3, r3, #1
 801681e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016820:	1dbb      	adds	r3, r7, #6
 8016822:	881b      	ldrh	r3, [r3, #0]
 8016824:	68ba      	ldr	r2, [r7, #8]
 8016826:	68f8      	ldr	r0, [r7, #12]
 8016828:	2100      	movs	r1, #0
 801682a:	f000 fd41 	bl	80172b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801682e:	2300      	movs	r3, #0
}
 8016830:	0018      	movs	r0, r3
 8016832:	46bd      	mov	sp, r7
 8016834:	b004      	add	sp, #16
 8016836:	bd80      	pop	{r7, pc}

08016838 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b084      	sub	sp, #16
 801683c:	af00      	add	r7, sp, #0
 801683e:	60f8      	str	r0, [r7, #12]
 8016840:	60b9      	str	r1, [r7, #8]
 8016842:	1dbb      	adds	r3, r7, #6
 8016844:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016846:	1dbb      	adds	r3, r7, #6
 8016848:	881b      	ldrh	r3, [r3, #0]
 801684a:	68ba      	ldr	r2, [r7, #8]
 801684c:	68f8      	ldr	r0, [r7, #12]
 801684e:	2100      	movs	r1, #0
 8016850:	f000 fd2e 	bl	80172b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016854:	2300      	movs	r3, #0
}
 8016856:	0018      	movs	r0, r3
 8016858:	46bd      	mov	sp, r7
 801685a:	b004      	add	sp, #16
 801685c:	bd80      	pop	{r7, pc}

0801685e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801685e:	b580      	push	{r7, lr}
 8016860:	b082      	sub	sp, #8
 8016862:	af00      	add	r7, sp, #0
 8016864:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016866:	687a      	ldr	r2, [r7, #4]
 8016868:	23a5      	movs	r3, #165	@ 0xa5
 801686a:	009b      	lsls	r3, r3, #2
 801686c:	2104      	movs	r1, #4
 801686e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016870:	6878      	ldr	r0, [r7, #4]
 8016872:	2300      	movs	r3, #0
 8016874:	2200      	movs	r2, #0
 8016876:	2100      	movs	r1, #0
 8016878:	f000 fce3 	bl	8017242 <USBD_LL_Transmit>

  return USBD_OK;
 801687c:	2300      	movs	r3, #0
}
 801687e:	0018      	movs	r0, r3
 8016880:	46bd      	mov	sp, r7
 8016882:	b002      	add	sp, #8
 8016884:	bd80      	pop	{r7, pc}

08016886 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016886:	b580      	push	{r7, lr}
 8016888:	b082      	sub	sp, #8
 801688a:	af00      	add	r7, sp, #0
 801688c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	23a5      	movs	r3, #165	@ 0xa5
 8016892:	009b      	lsls	r3, r3, #2
 8016894:	2105      	movs	r1, #5
 8016896:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	2300      	movs	r3, #0
 801689c:	2200      	movs	r2, #0
 801689e:	2100      	movs	r1, #0
 80168a0:	f000 fd06 	bl	80172b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80168a4:	2300      	movs	r3, #0
}
 80168a6:	0018      	movs	r0, r3
 80168a8:	46bd      	mov	sp, r7
 80168aa:	b002      	add	sp, #8
 80168ac:	bd80      	pop	{r7, pc}
	...

080168b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80168b4:	4914      	ldr	r1, [pc, #80]	@ (8016908 <MX_USB_DEVICE_Init+0x58>)
 80168b6:	4b15      	ldr	r3, [pc, #84]	@ (801690c <MX_USB_DEVICE_Init+0x5c>)
 80168b8:	2200      	movs	r2, #0
 80168ba:	0018      	movs	r0, r3
 80168bc:	f7fe fdec 	bl	8015498 <USBD_Init>
 80168c0:	1e03      	subs	r3, r0, #0
 80168c2:	d001      	beq.n	80168c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80168c4:	f7ef fd60 	bl	8006388 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80168c8:	4a11      	ldr	r2, [pc, #68]	@ (8016910 <MX_USB_DEVICE_Init+0x60>)
 80168ca:	4b10      	ldr	r3, [pc, #64]	@ (801690c <MX_USB_DEVICE_Init+0x5c>)
 80168cc:	0011      	movs	r1, r2
 80168ce:	0018      	movs	r0, r3
 80168d0:	f7fe fe13 	bl	80154fa <USBD_RegisterClass>
 80168d4:	1e03      	subs	r3, r0, #0
 80168d6:	d001      	beq.n	80168dc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80168d8:	f7ef fd56 	bl	8006388 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80168dc:	4a0d      	ldr	r2, [pc, #52]	@ (8016914 <MX_USB_DEVICE_Init+0x64>)
 80168de:	4b0b      	ldr	r3, [pc, #44]	@ (801690c <MX_USB_DEVICE_Init+0x5c>)
 80168e0:	0011      	movs	r1, r2
 80168e2:	0018      	movs	r0, r3
 80168e4:	f7fe fd28 	bl	8015338 <USBD_CDC_RegisterInterface>
 80168e8:	1e03      	subs	r3, r0, #0
 80168ea:	d001      	beq.n	80168f0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80168ec:	f7ef fd4c 	bl	8006388 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80168f0:	4b06      	ldr	r3, [pc, #24]	@ (801690c <MX_USB_DEVICE_Init+0x5c>)
 80168f2:	0018      	movs	r0, r3
 80168f4:	f7fe fe21 	bl	801553a <USBD_Start>
 80168f8:	1e03      	subs	r3, r0, #0
 80168fa:	d001      	beq.n	8016900 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80168fc:	f7ef fd44 	bl	8006388 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016900:	46c0      	nop			@ (mov r8, r8)
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	46c0      	nop			@ (mov r8, r8)
 8016908:	20000194 	.word	0x20000194
 801690c:	20002d28 	.word	0x20002d28
 8016910:	20000080 	.word	0x20000080
 8016914:	20000184 	.word	0x20000184

08016918 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801691c:	4907      	ldr	r1, [pc, #28]	@ (801693c <CDC_Init_FS+0x24>)
 801691e:	4b08      	ldr	r3, [pc, #32]	@ (8016940 <CDC_Init_FS+0x28>)
 8016920:	2200      	movs	r2, #0
 8016922:	0018      	movs	r0, r3
 8016924:	f7fe fd23 	bl	801536e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016928:	4a06      	ldr	r2, [pc, #24]	@ (8016944 <CDC_Init_FS+0x2c>)
 801692a:	4b05      	ldr	r3, [pc, #20]	@ (8016940 <CDC_Init_FS+0x28>)
 801692c:	0011      	movs	r1, r2
 801692e:	0018      	movs	r0, r3
 8016930:	f7fe fd39 	bl	80153a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016934:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016936:	0018      	movs	r0, r3
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}
 801693c:	200034ac 	.word	0x200034ac
 8016940:	20002d28 	.word	0x20002d28
 8016944:	200030ac 	.word	0x200030ac

08016948 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801694c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801694e:	0018      	movs	r0, r3
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
 801695a:	6039      	str	r1, [r7, #0]
 801695c:	0011      	movs	r1, r2
 801695e:	1dfb      	adds	r3, r7, #7
 8016960:	1c02      	adds	r2, r0, #0
 8016962:	701a      	strb	r2, [r3, #0]
 8016964:	1d3b      	adds	r3, r7, #4
 8016966:	1c0a      	adds	r2, r1, #0
 8016968:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801696a:	1dfb      	adds	r3, r7, #7
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	2b23      	cmp	r3, #35	@ 0x23
 8016970:	d804      	bhi.n	801697c <CDC_Control_FS+0x28>
 8016972:	009a      	lsls	r2, r3, #2
 8016974:	4b04      	ldr	r3, [pc, #16]	@ (8016988 <CDC_Control_FS+0x34>)
 8016976:	18d3      	adds	r3, r2, r3
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801697c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801697e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016980:	0018      	movs	r0, r3
 8016982:	46bd      	mov	sp, r7
 8016984:	b002      	add	sp, #8
 8016986:	bd80      	pop	{r7, pc}
 8016988:	0801bc1c 	.word	0x0801bc1c

0801698c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8016996:	4b12      	ldr	r3, [pc, #72]	@ (80169e0 <CDC_Receive_FS+0x54>)
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d013      	beq.n	80169c6 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	b29a      	uxth	r2, r3
 80169a4:	2301      	movs	r3, #1
 80169a6:	425b      	negs	r3, r3
 80169a8:	6879      	ldr	r1, [r7, #4]
 80169aa:	480e      	ldr	r0, [pc, #56]	@ (80169e4 <CDC_Receive_FS+0x58>)
 80169ac:	f7fa fd3a 	bl	8011424 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80169b0:	687a      	ldr	r2, [r7, #4]
 80169b2:	4b0d      	ldr	r3, [pc, #52]	@ (80169e8 <CDC_Receive_FS+0x5c>)
 80169b4:	0011      	movs	r1, r2
 80169b6:	0018      	movs	r0, r3
 80169b8:	f7fe fcf5 	bl	80153a6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80169bc:	4b0a      	ldr	r3, [pc, #40]	@ (80169e8 <CDC_Receive_FS+0x5c>)
 80169be:	0018      	movs	r0, r3
 80169c0:	f7fe fd3c 	bl	801543c <USBD_CDC_ReceivePacket>
 80169c4:	e006      	b.n	80169d4 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	4b08      	ldr	r3, [pc, #32]	@ (80169ec <CDC_Receive_FS+0x60>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	18d2      	adds	r2, r2, r3
 80169d0:	4b06      	ldr	r3, [pc, #24]	@ (80169ec <CDC_Receive_FS+0x60>)
 80169d2:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 80169d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80169d6:	0018      	movs	r0, r3
 80169d8:	46bd      	mov	sp, r7
 80169da:	b002      	add	sp, #8
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	46c0      	nop			@ (mov r8, r8)
 80169e0:	20002fec 	.word	0x20002fec
 80169e4:	20002ff0 	.word	0x20002ff0
 80169e8:	20002d28 	.word	0x20002d28
 80169ec:	200030a8 	.word	0x200030a8

080169f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80169f0:	b5b0      	push	{r4, r5, r7, lr}
 80169f2:	b084      	sub	sp, #16
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
 80169f8:	000a      	movs	r2, r1
 80169fa:	1cbb      	adds	r3, r7, #2
 80169fc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80169fe:	230f      	movs	r3, #15
 8016a00:	18fb      	adds	r3, r7, r3
 8016a02:	2200      	movs	r2, #0
 8016a04:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016a06:	4a11      	ldr	r2, [pc, #68]	@ (8016a4c <CDC_Transmit_FS+0x5c>)
 8016a08:	23ae      	movs	r3, #174	@ 0xae
 8016a0a:	009b      	lsls	r3, r3, #2
 8016a0c:	58d3      	ldr	r3, [r2, r3]
 8016a0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016a10:	68ba      	ldr	r2, [r7, #8]
 8016a12:	2385      	movs	r3, #133	@ 0x85
 8016a14:	009b      	lsls	r3, r3, #2
 8016a16:	58d3      	ldr	r3, [r2, r3]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d001      	beq.n	8016a20 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	e010      	b.n	8016a42 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016a20:	1cbb      	adds	r3, r7, #2
 8016a22:	881a      	ldrh	r2, [r3, #0]
 8016a24:	6879      	ldr	r1, [r7, #4]
 8016a26:	4b09      	ldr	r3, [pc, #36]	@ (8016a4c <CDC_Transmit_FS+0x5c>)
 8016a28:	0018      	movs	r0, r3
 8016a2a:	f7fe fca0 	bl	801536e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016a2e:	250f      	movs	r5, #15
 8016a30:	197c      	adds	r4, r7, r5
 8016a32:	4b06      	ldr	r3, [pc, #24]	@ (8016a4c <CDC_Transmit_FS+0x5c>)
 8016a34:	0018      	movs	r0, r3
 8016a36:	f7fe fcca 	bl	80153ce <USBD_CDC_TransmitPacket>
 8016a3a:	0003      	movs	r3, r0
 8016a3c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8016a3e:	197b      	adds	r3, r7, r5
 8016a40:	781b      	ldrb	r3, [r3, #0]
}
 8016a42:	0018      	movs	r0, r3
 8016a44:	46bd      	mov	sp, r7
 8016a46:	b004      	add	sp, #16
 8016a48:	bdb0      	pop	{r4, r5, r7, pc}
 8016a4a:	46c0      	nop			@ (mov r8, r8)
 8016a4c:	20002d28 	.word	0x20002d28

08016a50 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8016a50:	b580      	push	{r7, lr}
 8016a52:	af00      	add	r7, sp, #0
  ESPProg = true;
 8016a54:	4b02      	ldr	r3, [pc, #8]	@ (8016a60 <EnableESPProg+0x10>)
 8016a56:	2201      	movs	r2, #1
 8016a58:	701a      	strb	r2, [r3, #0]
}
 8016a5a:	46c0      	nop			@ (mov r8, r8)
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	bd80      	pop	{r7, pc}
 8016a60:	20002fec 	.word	0x20002fec

08016a64 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8016a68:	4b01      	ldr	r3, [pc, #4]	@ (8016a70 <GetUsbRxPointer+0xc>)
}
 8016a6a:	0018      	movs	r0, r3
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}
 8016a70:	200030ac 	.word	0x200030ac

08016a74 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8016a78:	4b07      	ldr	r3, [pc, #28]	@ (8016a98 <ResetUsbRxDataSize+0x24>)
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8016a7e:	4a07      	ldr	r2, [pc, #28]	@ (8016a9c <ResetUsbRxDataSize+0x28>)
 8016a80:	4b07      	ldr	r3, [pc, #28]	@ (8016aa0 <ResetUsbRxDataSize+0x2c>)
 8016a82:	0011      	movs	r1, r2
 8016a84:	0018      	movs	r0, r3
 8016a86:	f7fe fc8e 	bl	80153a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016a8a:	4b05      	ldr	r3, [pc, #20]	@ (8016aa0 <ResetUsbRxDataSize+0x2c>)
 8016a8c:	0018      	movs	r0, r3
 8016a8e:	f7fe fcd5 	bl	801543c <USBD_CDC_ReceivePacket>
}
 8016a92:	46c0      	nop			@ (mov r8, r8)
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}
 8016a98:	200030a8 	.word	0x200030a8
 8016a9c:	200030ac 	.word	0x200030ac
 8016aa0:	20002d28 	.word	0x20002d28

08016aa4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8016aa8:	4b02      	ldr	r3, [pc, #8]	@ (8016ab4 <GetUsbRxDataSize+0x10>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
}
 8016aac:	0018      	movs	r0, r3
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}
 8016ab2:	46c0      	nop			@ (mov r8, r8)
 8016ab4:	200030a8 	.word	0x200030a8

08016ab8 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8016ac0:	687a      	ldr	r2, [r7, #4]
 8016ac2:	4b07      	ldr	r3, [pc, #28]	@ (8016ae0 <GetUsbRxNextChunk+0x28>)
 8016ac4:	18d2      	adds	r2, r2, r3
 8016ac6:	4b07      	ldr	r3, [pc, #28]	@ (8016ae4 <GetUsbRxNextChunk+0x2c>)
 8016ac8:	0011      	movs	r1, r2
 8016aca:	0018      	movs	r0, r3
 8016acc:	f7fe fc6b 	bl	80153a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016ad0:	4b04      	ldr	r3, [pc, #16]	@ (8016ae4 <GetUsbRxNextChunk+0x2c>)
 8016ad2:	0018      	movs	r0, r3
 8016ad4:	f7fe fcb2 	bl	801543c <USBD_CDC_ReceivePacket>
}
 8016ad8:	46c0      	nop			@ (mov r8, r8)
 8016ada:	46bd      	mov	sp, r7
 8016adc:	b002      	add	sp, #8
 8016ade:	bd80      	pop	{r7, pc}
 8016ae0:	200030ac 	.word	0x200030ac
 8016ae4:	20002d28 	.word	0x20002d28

08016ae8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	0002      	movs	r2, r0
 8016af0:	6039      	str	r1, [r7, #0]
 8016af2:	1dfb      	adds	r3, r7, #7
 8016af4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016af6:	683b      	ldr	r3, [r7, #0]
 8016af8:	2212      	movs	r2, #18
 8016afa:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016afc:	4b02      	ldr	r3, [pc, #8]	@ (8016b08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016afe:	0018      	movs	r0, r3
 8016b00:	46bd      	mov	sp, r7
 8016b02:	b002      	add	sp, #8
 8016b04:	bd80      	pop	{r7, pc}
 8016b06:	46c0      	nop			@ (mov r8, r8)
 8016b08:	200001b0 	.word	0x200001b0

08016b0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b082      	sub	sp, #8
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	0002      	movs	r2, r0
 8016b14:	6039      	str	r1, [r7, #0]
 8016b16:	1dfb      	adds	r3, r7, #7
 8016b18:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	2204      	movs	r2, #4
 8016b1e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016b20:	4b02      	ldr	r3, [pc, #8]	@ (8016b2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016b22:	0018      	movs	r0, r3
 8016b24:	46bd      	mov	sp, r7
 8016b26:	b002      	add	sp, #8
 8016b28:	bd80      	pop	{r7, pc}
 8016b2a:	46c0      	nop			@ (mov r8, r8)
 8016b2c:	200001c4 	.word	0x200001c4

08016b30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b082      	sub	sp, #8
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	0002      	movs	r2, r0
 8016b38:	6039      	str	r1, [r7, #0]
 8016b3a:	1dfb      	adds	r3, r7, #7
 8016b3c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8016b3e:	1dfb      	adds	r3, r7, #7
 8016b40:	781b      	ldrb	r3, [r3, #0]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d106      	bne.n	8016b54 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016b46:	683a      	ldr	r2, [r7, #0]
 8016b48:	4908      	ldr	r1, [pc, #32]	@ (8016b6c <USBD_FS_ProductStrDescriptor+0x3c>)
 8016b4a:	4b09      	ldr	r3, [pc, #36]	@ (8016b70 <USBD_FS_ProductStrDescriptor+0x40>)
 8016b4c:	0018      	movs	r0, r3
 8016b4e:	f7ff fdb1 	bl	80166b4 <USBD_GetString>
 8016b52:	e005      	b.n	8016b60 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016b54:	683a      	ldr	r2, [r7, #0]
 8016b56:	4905      	ldr	r1, [pc, #20]	@ (8016b6c <USBD_FS_ProductStrDescriptor+0x3c>)
 8016b58:	4b05      	ldr	r3, [pc, #20]	@ (8016b70 <USBD_FS_ProductStrDescriptor+0x40>)
 8016b5a:	0018      	movs	r0, r3
 8016b5c:	f7ff fdaa 	bl	80166b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b60:	4b02      	ldr	r3, [pc, #8]	@ (8016b6c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8016b62:	0018      	movs	r0, r3
 8016b64:	46bd      	mov	sp, r7
 8016b66:	b002      	add	sp, #8
 8016b68:	bd80      	pop	{r7, pc}
 8016b6a:	46c0      	nop			@ (mov r8, r8)
 8016b6c:	200038ac 	.word	0x200038ac
 8016b70:	0801b8e0 	.word	0x0801b8e0

08016b74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b082      	sub	sp, #8
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	0002      	movs	r2, r0
 8016b7c:	6039      	str	r1, [r7, #0]
 8016b7e:	1dfb      	adds	r3, r7, #7
 8016b80:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016b82:	683a      	ldr	r2, [r7, #0]
 8016b84:	4904      	ldr	r1, [pc, #16]	@ (8016b98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016b86:	4b05      	ldr	r3, [pc, #20]	@ (8016b9c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8016b88:	0018      	movs	r0, r3
 8016b8a:	f7ff fd93 	bl	80166b4 <USBD_GetString>
  return USBD_StrDesc;
 8016b8e:	4b02      	ldr	r3, [pc, #8]	@ (8016b98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8016b90:	0018      	movs	r0, r3
 8016b92:	46bd      	mov	sp, r7
 8016b94:	b002      	add	sp, #8
 8016b96:	bd80      	pop	{r7, pc}
 8016b98:	200038ac 	.word	0x200038ac
 8016b9c:	0801b8f8 	.word	0x0801b8f8

08016ba0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b082      	sub	sp, #8
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	0002      	movs	r2, r0
 8016ba8:	6039      	str	r1, [r7, #0]
 8016baa:	1dfb      	adds	r3, r7, #7
 8016bac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	221a      	movs	r2, #26
 8016bb2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016bb4:	f000 f84c 	bl	8016c50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016bb8:	4b02      	ldr	r3, [pc, #8]	@ (8016bc4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8016bba:	0018      	movs	r0, r3
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	b002      	add	sp, #8
 8016bc0:	bd80      	pop	{r7, pc}
 8016bc2:	46c0      	nop			@ (mov r8, r8)
 8016bc4:	200001c8 	.word	0x200001c8

08016bc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b082      	sub	sp, #8
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	0002      	movs	r2, r0
 8016bd0:	6039      	str	r1, [r7, #0]
 8016bd2:	1dfb      	adds	r3, r7, #7
 8016bd4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8016bd6:	1dfb      	adds	r3, r7, #7
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d106      	bne.n	8016bec <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016bde:	683a      	ldr	r2, [r7, #0]
 8016be0:	4908      	ldr	r1, [pc, #32]	@ (8016c04 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8016be2:	4b09      	ldr	r3, [pc, #36]	@ (8016c08 <USBD_FS_ConfigStrDescriptor+0x40>)
 8016be4:	0018      	movs	r0, r3
 8016be6:	f7ff fd65 	bl	80166b4 <USBD_GetString>
 8016bea:	e005      	b.n	8016bf8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016bec:	683a      	ldr	r2, [r7, #0]
 8016bee:	4905      	ldr	r1, [pc, #20]	@ (8016c04 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8016bf0:	4b05      	ldr	r3, [pc, #20]	@ (8016c08 <USBD_FS_ConfigStrDescriptor+0x40>)
 8016bf2:	0018      	movs	r0, r3
 8016bf4:	f7ff fd5e 	bl	80166b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016bf8:	4b02      	ldr	r3, [pc, #8]	@ (8016c04 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8016bfa:	0018      	movs	r0, r3
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	b002      	add	sp, #8
 8016c00:	bd80      	pop	{r7, pc}
 8016c02:	46c0      	nop			@ (mov r8, r8)
 8016c04:	200038ac 	.word	0x200038ac
 8016c08:	0801b90c 	.word	0x0801b90c

08016c0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b082      	sub	sp, #8
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	0002      	movs	r2, r0
 8016c14:	6039      	str	r1, [r7, #0]
 8016c16:	1dfb      	adds	r3, r7, #7
 8016c18:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8016c1a:	1dfb      	adds	r3, r7, #7
 8016c1c:	781b      	ldrb	r3, [r3, #0]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d106      	bne.n	8016c30 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016c22:	683a      	ldr	r2, [r7, #0]
 8016c24:	4908      	ldr	r1, [pc, #32]	@ (8016c48 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016c26:	4b09      	ldr	r3, [pc, #36]	@ (8016c4c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016c28:	0018      	movs	r0, r3
 8016c2a:	f7ff fd43 	bl	80166b4 <USBD_GetString>
 8016c2e:	e005      	b.n	8016c3c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016c30:	683a      	ldr	r2, [r7, #0]
 8016c32:	4905      	ldr	r1, [pc, #20]	@ (8016c48 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016c34:	4b05      	ldr	r3, [pc, #20]	@ (8016c4c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016c36:	0018      	movs	r0, r3
 8016c38:	f7ff fd3c 	bl	80166b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c3c:	4b02      	ldr	r3, [pc, #8]	@ (8016c48 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8016c3e:	0018      	movs	r0, r3
 8016c40:	46bd      	mov	sp, r7
 8016c42:	b002      	add	sp, #8
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	46c0      	nop			@ (mov r8, r8)
 8016c48:	200038ac 	.word	0x200038ac
 8016c4c:	0801b918 	.word	0x0801b918

08016c50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b084      	sub	sp, #16
 8016c54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016c56:	4b10      	ldr	r3, [pc, #64]	@ (8016c98 <Get_SerialNum+0x48>)
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8016c9c <Get_SerialNum+0x4c>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016c62:	4b0f      	ldr	r3, [pc, #60]	@ (8016ca0 <Get_SerialNum+0x50>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016c68:	68fa      	ldr	r2, [r7, #12]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	18d3      	adds	r3, r2, r3
 8016c6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d00b      	beq.n	8016c8e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016c76:	490b      	ldr	r1, [pc, #44]	@ (8016ca4 <Get_SerialNum+0x54>)
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	2208      	movs	r2, #8
 8016c7c:	0018      	movs	r0, r3
 8016c7e:	f000 f815 	bl	8016cac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016c82:	4909      	ldr	r1, [pc, #36]	@ (8016ca8 <Get_SerialNum+0x58>)
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	2204      	movs	r2, #4
 8016c88:	0018      	movs	r0, r3
 8016c8a:	f000 f80f 	bl	8016cac <IntToUnicode>
  }
}
 8016c8e:	46c0      	nop			@ (mov r8, r8)
 8016c90:	46bd      	mov	sp, r7
 8016c92:	b004      	add	sp, #16
 8016c94:	bd80      	pop	{r7, pc}
 8016c96:	46c0      	nop			@ (mov r8, r8)
 8016c98:	1ff80050 	.word	0x1ff80050
 8016c9c:	1ff80054 	.word	0x1ff80054
 8016ca0:	1ff80058 	.word	0x1ff80058
 8016ca4:	200001ca 	.word	0x200001ca
 8016ca8:	200001da 	.word	0x200001da

08016cac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b086      	sub	sp, #24
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	60f8      	str	r0, [r7, #12]
 8016cb4:	60b9      	str	r1, [r7, #8]
 8016cb6:	1dfb      	adds	r3, r7, #7
 8016cb8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8016cba:	2117      	movs	r1, #23
 8016cbc:	187b      	adds	r3, r7, r1
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8016cc2:	187b      	adds	r3, r7, r1
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	701a      	strb	r2, [r3, #0]
 8016cc8:	e02f      	b.n	8016d2a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	0f1b      	lsrs	r3, r3, #28
 8016cce:	2b09      	cmp	r3, #9
 8016cd0:	d80d      	bhi.n	8016cee <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	0f1b      	lsrs	r3, r3, #28
 8016cd6:	b2da      	uxtb	r2, r3
 8016cd8:	2317      	movs	r3, #23
 8016cda:	18fb      	adds	r3, r7, r3
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	005b      	lsls	r3, r3, #1
 8016ce0:	0019      	movs	r1, r3
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	185b      	adds	r3, r3, r1
 8016ce6:	3230      	adds	r2, #48	@ 0x30
 8016ce8:	b2d2      	uxtb	r2, r2
 8016cea:	701a      	strb	r2, [r3, #0]
 8016cec:	e00c      	b.n	8016d08 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	0f1b      	lsrs	r3, r3, #28
 8016cf2:	b2da      	uxtb	r2, r3
 8016cf4:	2317      	movs	r3, #23
 8016cf6:	18fb      	adds	r3, r7, r3
 8016cf8:	781b      	ldrb	r3, [r3, #0]
 8016cfa:	005b      	lsls	r3, r3, #1
 8016cfc:	0019      	movs	r1, r3
 8016cfe:	68bb      	ldr	r3, [r7, #8]
 8016d00:	185b      	adds	r3, r3, r1
 8016d02:	3237      	adds	r2, #55	@ 0x37
 8016d04:	b2d2      	uxtb	r2, r2
 8016d06:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	011b      	lsls	r3, r3, #4
 8016d0c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016d0e:	2117      	movs	r1, #23
 8016d10:	187b      	adds	r3, r7, r1
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	005b      	lsls	r3, r3, #1
 8016d16:	3301      	adds	r3, #1
 8016d18:	68ba      	ldr	r2, [r7, #8]
 8016d1a:	18d3      	adds	r3, r2, r3
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016d20:	187b      	adds	r3, r7, r1
 8016d22:	781a      	ldrb	r2, [r3, #0]
 8016d24:	187b      	adds	r3, r7, r1
 8016d26:	3201      	adds	r2, #1
 8016d28:	701a      	strb	r2, [r3, #0]
 8016d2a:	2317      	movs	r3, #23
 8016d2c:	18fa      	adds	r2, r7, r3
 8016d2e:	1dfb      	adds	r3, r7, #7
 8016d30:	7812      	ldrb	r2, [r2, #0]
 8016d32:	781b      	ldrb	r3, [r3, #0]
 8016d34:	429a      	cmp	r2, r3
 8016d36:	d3c8      	bcc.n	8016cca <IntToUnicode+0x1e>
  }
}
 8016d38:	46c0      	nop			@ (mov r8, r8)
 8016d3a:	46c0      	nop			@ (mov r8, r8)
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	b006      	add	sp, #24
 8016d40:	bd80      	pop	{r7, pc}
	...

08016d44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b082      	sub	sp, #8
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	4a0a      	ldr	r2, [pc, #40]	@ (8016d7c <HAL_PCD_MspInit+0x38>)
 8016d52:	4293      	cmp	r3, r2
 8016d54:	d10e      	bne.n	8016d74 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016d56:	4b0a      	ldr	r3, [pc, #40]	@ (8016d80 <HAL_PCD_MspInit+0x3c>)
 8016d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016d5a:	4b09      	ldr	r3, [pc, #36]	@ (8016d80 <HAL_PCD_MspInit+0x3c>)
 8016d5c:	2180      	movs	r1, #128	@ 0x80
 8016d5e:	0409      	lsls	r1, r1, #16
 8016d60:	430a      	orrs	r2, r1
 8016d62:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8016d64:	2200      	movs	r2, #0
 8016d66:	2100      	movs	r1, #0
 8016d68:	201f      	movs	r0, #31
 8016d6a:	f7f3 fd23 	bl	800a7b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8016d6e:	201f      	movs	r0, #31
 8016d70:	f7f3 fd35 	bl	800a7de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016d74:	46c0      	nop			@ (mov r8, r8)
 8016d76:	46bd      	mov	sp, r7
 8016d78:	b002      	add	sp, #8
 8016d7a:	bd80      	pop	{r7, pc}
 8016d7c:	40005c00 	.word	0x40005c00
 8016d80:	40021000 	.word	0x40021000

08016d84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b082      	sub	sp, #8
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016d8c:	687a      	ldr	r2, [r7, #4]
 8016d8e:	23bc      	movs	r3, #188	@ 0xbc
 8016d90:	009b      	lsls	r3, r3, #2
 8016d92:	58d2      	ldr	r2, [r2, r3]
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	21ac      	movs	r1, #172	@ 0xac
 8016d98:	0089      	lsls	r1, r1, #2
 8016d9a:	468c      	mov	ip, r1
 8016d9c:	4463      	add	r3, ip
 8016d9e:	0019      	movs	r1, r3
 8016da0:	0010      	movs	r0, r2
 8016da2:	f7fe fc1d 	bl	80155e0 <USBD_LL_SetupStage>
}
 8016da6:	46c0      	nop			@ (mov r8, r8)
 8016da8:	46bd      	mov	sp, r7
 8016daa:	b002      	add	sp, #8
 8016dac:	bd80      	pop	{r7, pc}

08016dae <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016dae:	b590      	push	{r4, r7, lr}
 8016db0:	b083      	sub	sp, #12
 8016db2:	af00      	add	r7, sp, #0
 8016db4:	6078      	str	r0, [r7, #4]
 8016db6:	000a      	movs	r2, r1
 8016db8:	1cfb      	adds	r3, r7, #3
 8016dba:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016dbc:	687a      	ldr	r2, [r7, #4]
 8016dbe:	23bc      	movs	r3, #188	@ 0xbc
 8016dc0:	009b      	lsls	r3, r3, #2
 8016dc2:	58d4      	ldr	r4, [r2, r3]
 8016dc4:	1cfb      	adds	r3, r7, #3
 8016dc6:	781a      	ldrb	r2, [r3, #0]
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	23be      	movs	r3, #190	@ 0xbe
 8016dcc:	0059      	lsls	r1, r3, #1
 8016dce:	0013      	movs	r3, r2
 8016dd0:	009b      	lsls	r3, r3, #2
 8016dd2:	189b      	adds	r3, r3, r2
 8016dd4:	00db      	lsls	r3, r3, #3
 8016dd6:	18c3      	adds	r3, r0, r3
 8016dd8:	185b      	adds	r3, r3, r1
 8016dda:	681a      	ldr	r2, [r3, #0]
 8016ddc:	1cfb      	adds	r3, r7, #3
 8016dde:	781b      	ldrb	r3, [r3, #0]
 8016de0:	0019      	movs	r1, r3
 8016de2:	0020      	movs	r0, r4
 8016de4:	f7fe fc5a 	bl	801569c <USBD_LL_DataOutStage>
}
 8016de8:	46c0      	nop			@ (mov r8, r8)
 8016dea:	46bd      	mov	sp, r7
 8016dec:	b003      	add	sp, #12
 8016dee:	bd90      	pop	{r4, r7, pc}

08016df0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	000a      	movs	r2, r1
 8016dfa:	1cfb      	adds	r3, r7, #3
 8016dfc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016dfe:	687a      	ldr	r2, [r7, #4]
 8016e00:	23bc      	movs	r3, #188	@ 0xbc
 8016e02:	009b      	lsls	r3, r3, #2
 8016e04:	58d0      	ldr	r0, [r2, r3]
 8016e06:	1cfb      	adds	r3, r7, #3
 8016e08:	781a      	ldrb	r2, [r3, #0]
 8016e0a:	6879      	ldr	r1, [r7, #4]
 8016e0c:	0013      	movs	r3, r2
 8016e0e:	009b      	lsls	r3, r3, #2
 8016e10:	189b      	adds	r3, r3, r2
 8016e12:	00db      	lsls	r3, r3, #3
 8016e14:	18cb      	adds	r3, r1, r3
 8016e16:	333c      	adds	r3, #60	@ 0x3c
 8016e18:	681a      	ldr	r2, [r3, #0]
 8016e1a:	1cfb      	adds	r3, r7, #3
 8016e1c:	781b      	ldrb	r3, [r3, #0]
 8016e1e:	0019      	movs	r1, r3
 8016e20:	f7fe fcbe 	bl	80157a0 <USBD_LL_DataInStage>
}
 8016e24:	46c0      	nop			@ (mov r8, r8)
 8016e26:	46bd      	mov	sp, r7
 8016e28:	b002      	add	sp, #8
 8016e2a:	bd80      	pop	{r7, pc}

08016e2c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b082      	sub	sp, #8
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	23bc      	movs	r3, #188	@ 0xbc
 8016e38:	009b      	lsls	r3, r3, #2
 8016e3a:	58d3      	ldr	r3, [r2, r3]
 8016e3c:	0018      	movs	r0, r3
 8016e3e:	f7fe fdf5 	bl	8015a2c <USBD_LL_SOF>
}
 8016e42:	46c0      	nop			@ (mov r8, r8)
 8016e44:	46bd      	mov	sp, r7
 8016e46:	b002      	add	sp, #8
 8016e48:	bd80      	pop	{r7, pc}

08016e4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e4a:	b580      	push	{r7, lr}
 8016e4c:	b084      	sub	sp, #16
 8016e4e:	af00      	add	r7, sp, #0
 8016e50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016e52:	230f      	movs	r3, #15
 8016e54:	18fb      	adds	r3, r7, r3
 8016e56:	2201      	movs	r2, #1
 8016e58:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	689b      	ldr	r3, [r3, #8]
 8016e5e:	2b02      	cmp	r3, #2
 8016e60:	d001      	beq.n	8016e66 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8016e62:	f7ef fa91 	bl	8006388 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016e66:	687a      	ldr	r2, [r7, #4]
 8016e68:	23bc      	movs	r3, #188	@ 0xbc
 8016e6a:	009b      	lsls	r3, r3, #2
 8016e6c:	58d2      	ldr	r2, [r2, r3]
 8016e6e:	230f      	movs	r3, #15
 8016e70:	18fb      	adds	r3, r7, r3
 8016e72:	781b      	ldrb	r3, [r3, #0]
 8016e74:	0019      	movs	r1, r3
 8016e76:	0010      	movs	r0, r2
 8016e78:	f7fe fd97 	bl	80159aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	23bc      	movs	r3, #188	@ 0xbc
 8016e80:	009b      	lsls	r3, r3, #2
 8016e82:	58d3      	ldr	r3, [r2, r3]
 8016e84:	0018      	movs	r0, r3
 8016e86:	f7fe fd48 	bl	801591a <USBD_LL_Reset>
}
 8016e8a:	46c0      	nop			@ (mov r8, r8)
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	b004      	add	sp, #16
 8016e90:	bd80      	pop	{r7, pc}
	...

08016e94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b082      	sub	sp, #8
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016e9c:	687a      	ldr	r2, [r7, #4]
 8016e9e:	23bc      	movs	r3, #188	@ 0xbc
 8016ea0:	009b      	lsls	r3, r3, #2
 8016ea2:	58d3      	ldr	r3, [r2, r3]
 8016ea4:	0018      	movs	r0, r3
 8016ea6:	f7fe fd91 	bl	80159cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	699b      	ldr	r3, [r3, #24]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d005      	beq.n	8016ebe <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016eb2:	4b05      	ldr	r3, [pc, #20]	@ (8016ec8 <HAL_PCD_SuspendCallback+0x34>)
 8016eb4:	691a      	ldr	r2, [r3, #16]
 8016eb6:	4b04      	ldr	r3, [pc, #16]	@ (8016ec8 <HAL_PCD_SuspendCallback+0x34>)
 8016eb8:	2106      	movs	r1, #6
 8016eba:	430a      	orrs	r2, r1
 8016ebc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8016ebe:	46c0      	nop			@ (mov r8, r8)
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	b002      	add	sp, #8
 8016ec4:	bd80      	pop	{r7, pc}
 8016ec6:	46c0      	nop			@ (mov r8, r8)
 8016ec8:	e000ed00 	.word	0xe000ed00

08016ecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b082      	sub	sp, #8
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	699b      	ldr	r3, [r3, #24]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d007      	beq.n	8016eec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016edc:	4b09      	ldr	r3, [pc, #36]	@ (8016f04 <HAL_PCD_ResumeCallback+0x38>)
 8016ede:	691a      	ldr	r2, [r3, #16]
 8016ee0:	4b08      	ldr	r3, [pc, #32]	@ (8016f04 <HAL_PCD_ResumeCallback+0x38>)
 8016ee2:	2106      	movs	r1, #6
 8016ee4:	438a      	bics	r2, r1
 8016ee6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8016ee8:	f000 fa44 	bl	8017374 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016eec:	687a      	ldr	r2, [r7, #4]
 8016eee:	23bc      	movs	r3, #188	@ 0xbc
 8016ef0:	009b      	lsls	r3, r3, #2
 8016ef2:	58d3      	ldr	r3, [r2, r3]
 8016ef4:	0018      	movs	r0, r3
 8016ef6:	f7fe fd81 	bl	80159fc <USBD_LL_Resume>
}
 8016efa:	46c0      	nop			@ (mov r8, r8)
 8016efc:	46bd      	mov	sp, r7
 8016efe:	b002      	add	sp, #8
 8016f00:	bd80      	pop	{r7, pc}
 8016f02:	46c0      	nop			@ (mov r8, r8)
 8016f04:	e000ed00 	.word	0xe000ed00

08016f08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b082      	sub	sp, #8
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8016f10:	4a2d      	ldr	r2, [pc, #180]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f12:	23bc      	movs	r3, #188	@ 0xbc
 8016f14:	009b      	lsls	r3, r3, #2
 8016f16:	6879      	ldr	r1, [r7, #4]
 8016f18:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8016f1a:	687a      	ldr	r2, [r7, #4]
 8016f1c:	23b0      	movs	r3, #176	@ 0xb0
 8016f1e:	009b      	lsls	r3, r3, #2
 8016f20:	4929      	ldr	r1, [pc, #164]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f22:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8016f24:	4b28      	ldr	r3, [pc, #160]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f26:	4a29      	ldr	r2, [pc, #164]	@ (8016fcc <USBD_LL_Init+0xc4>)
 8016f28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8016f2a:	4b27      	ldr	r3, [pc, #156]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f2c:	2208      	movs	r2, #8
 8016f2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016f30:	4b25      	ldr	r3, [pc, #148]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f32:	2202      	movs	r2, #2
 8016f34:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016f36:	4b24      	ldr	r3, [pc, #144]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f38:	2202      	movs	r2, #2
 8016f3a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016f3c:	4b22      	ldr	r3, [pc, #136]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f3e:	2200      	movs	r2, #0
 8016f40:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016f42:	4b21      	ldr	r3, [pc, #132]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f44:	2200      	movs	r2, #0
 8016f46:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016f48:	4b1f      	ldr	r3, [pc, #124]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8016fc8 <USBD_LL_Init+0xc0>)
 8016f50:	0018      	movs	r0, r3
 8016f52:	f7f6 fed3 	bl	800dcfc <HAL_PCD_Init>
 8016f56:	1e03      	subs	r3, r0, #0
 8016f58:	d001      	beq.n	8016f5e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8016f5a:	f7ef fa15 	bl	8006388 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016f5e:	687a      	ldr	r2, [r7, #4]
 8016f60:	23b0      	movs	r3, #176	@ 0xb0
 8016f62:	009b      	lsls	r3, r3, #2
 8016f64:	58d0      	ldr	r0, [r2, r3]
 8016f66:	2318      	movs	r3, #24
 8016f68:	2200      	movs	r2, #0
 8016f6a:	2100      	movs	r1, #0
 8016f6c:	f7f8 fc94 	bl	800f898 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016f70:	687a      	ldr	r2, [r7, #4]
 8016f72:	23b0      	movs	r3, #176	@ 0xb0
 8016f74:	009b      	lsls	r3, r3, #2
 8016f76:	58d0      	ldr	r0, [r2, r3]
 8016f78:	2358      	movs	r3, #88	@ 0x58
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	2180      	movs	r1, #128	@ 0x80
 8016f7e:	f7f8 fc8b 	bl	800f898 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016f82:	687a      	ldr	r2, [r7, #4]
 8016f84:	23b0      	movs	r3, #176	@ 0xb0
 8016f86:	009b      	lsls	r3, r3, #2
 8016f88:	58d0      	ldr	r0, [r2, r3]
 8016f8a:	23c0      	movs	r3, #192	@ 0xc0
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	2181      	movs	r1, #129	@ 0x81
 8016f90:	f7f8 fc82 	bl	800f898 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	23b0      	movs	r3, #176	@ 0xb0
 8016f98:	009b      	lsls	r3, r3, #2
 8016f9a:	58d0      	ldr	r0, [r2, r3]
 8016f9c:	2388      	movs	r3, #136	@ 0x88
 8016f9e:	005b      	lsls	r3, r3, #1
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	2101      	movs	r1, #1
 8016fa4:	f7f8 fc78 	bl	800f898 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016fa8:	687a      	ldr	r2, [r7, #4]
 8016faa:	23b0      	movs	r3, #176	@ 0xb0
 8016fac:	009b      	lsls	r3, r3, #2
 8016fae:	58d0      	ldr	r0, [r2, r3]
 8016fb0:	2380      	movs	r3, #128	@ 0x80
 8016fb2:	005b      	lsls	r3, r3, #1
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	2182      	movs	r1, #130	@ 0x82
 8016fb8:	f7f8 fc6e 	bl	800f898 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016fbc:	2300      	movs	r3, #0
}
 8016fbe:	0018      	movs	r0, r3
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	b002      	add	sp, #8
 8016fc4:	bd80      	pop	{r7, pc}
 8016fc6:	46c0      	nop			@ (mov r8, r8)
 8016fc8:	20003aac 	.word	0x20003aac
 8016fcc:	40005c00 	.word	0x40005c00

08016fd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd2:	b085      	sub	sp, #20
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fd8:	210f      	movs	r1, #15
 8016fda:	187b      	adds	r3, r7, r1
 8016fdc:	2200      	movs	r2, #0
 8016fde:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fe0:	260e      	movs	r6, #14
 8016fe2:	19bb      	adds	r3, r7, r6
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016fe8:	687a      	ldr	r2, [r7, #4]
 8016fea:	23b0      	movs	r3, #176	@ 0xb0
 8016fec:	009b      	lsls	r3, r3, #2
 8016fee:	58d3      	ldr	r3, [r2, r3]
 8016ff0:	000d      	movs	r5, r1
 8016ff2:	187c      	adds	r4, r7, r1
 8016ff4:	0018      	movs	r0, r3
 8016ff6:	f7f6 ff81 	bl	800defc <HAL_PCD_Start>
 8016ffa:	0003      	movs	r3, r0
 8016ffc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ffe:	19bc      	adds	r4, r7, r6
 8017000:	197b      	adds	r3, r7, r5
 8017002:	781b      	ldrb	r3, [r3, #0]
 8017004:	0018      	movs	r0, r3
 8017006:	f000 f9bc 	bl	8017382 <USBD_Get_USB_Status>
 801700a:	0003      	movs	r3, r0
 801700c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801700e:	19bb      	adds	r3, r7, r6
 8017010:	781b      	ldrb	r3, [r3, #0]
}
 8017012:	0018      	movs	r0, r3
 8017014:	46bd      	mov	sp, r7
 8017016:	b005      	add	sp, #20
 8017018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801701a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801701a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801701c:	b085      	sub	sp, #20
 801701e:	af00      	add	r7, sp, #0
 8017020:	6078      	str	r0, [r7, #4]
 8017022:	000c      	movs	r4, r1
 8017024:	0010      	movs	r0, r2
 8017026:	0019      	movs	r1, r3
 8017028:	1cfb      	adds	r3, r7, #3
 801702a:	1c22      	adds	r2, r4, #0
 801702c:	701a      	strb	r2, [r3, #0]
 801702e:	1cbb      	adds	r3, r7, #2
 8017030:	1c02      	adds	r2, r0, #0
 8017032:	701a      	strb	r2, [r3, #0]
 8017034:	003b      	movs	r3, r7
 8017036:	1c0a      	adds	r2, r1, #0
 8017038:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801703a:	260f      	movs	r6, #15
 801703c:	19bb      	adds	r3, r7, r6
 801703e:	2200      	movs	r2, #0
 8017040:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017042:	250e      	movs	r5, #14
 8017044:	197b      	adds	r3, r7, r5
 8017046:	2200      	movs	r2, #0
 8017048:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801704a:	687a      	ldr	r2, [r7, #4]
 801704c:	23b0      	movs	r3, #176	@ 0xb0
 801704e:	009b      	lsls	r3, r3, #2
 8017050:	58d0      	ldr	r0, [r2, r3]
 8017052:	19bc      	adds	r4, r7, r6
 8017054:	1cbb      	adds	r3, r7, #2
 8017056:	781d      	ldrb	r5, [r3, #0]
 8017058:	003b      	movs	r3, r7
 801705a:	881a      	ldrh	r2, [r3, #0]
 801705c:	1cfb      	adds	r3, r7, #3
 801705e:	7819      	ldrb	r1, [r3, #0]
 8017060:	002b      	movs	r3, r5
 8017062:	f7f7 f8e0 	bl	800e226 <HAL_PCD_EP_Open>
 8017066:	0003      	movs	r3, r0
 8017068:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801706a:	250e      	movs	r5, #14
 801706c:	197c      	adds	r4, r7, r5
 801706e:	19bb      	adds	r3, r7, r6
 8017070:	781b      	ldrb	r3, [r3, #0]
 8017072:	0018      	movs	r0, r3
 8017074:	f000 f985 	bl	8017382 <USBD_Get_USB_Status>
 8017078:	0003      	movs	r3, r0
 801707a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801707c:	197b      	adds	r3, r7, r5
 801707e:	781b      	ldrb	r3, [r3, #0]
}
 8017080:	0018      	movs	r0, r3
 8017082:	46bd      	mov	sp, r7
 8017084:	b005      	add	sp, #20
 8017086:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017088 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801708a:	b085      	sub	sp, #20
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
 8017090:	000a      	movs	r2, r1
 8017092:	1cfb      	adds	r3, r7, #3
 8017094:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017096:	210f      	movs	r1, #15
 8017098:	187b      	adds	r3, r7, r1
 801709a:	2200      	movs	r2, #0
 801709c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801709e:	260e      	movs	r6, #14
 80170a0:	19bb      	adds	r3, r7, r6
 80170a2:	2200      	movs	r2, #0
 80170a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80170a6:	687a      	ldr	r2, [r7, #4]
 80170a8:	23b0      	movs	r3, #176	@ 0xb0
 80170aa:	009b      	lsls	r3, r3, #2
 80170ac:	58d2      	ldr	r2, [r2, r3]
 80170ae:	000d      	movs	r5, r1
 80170b0:	187c      	adds	r4, r7, r1
 80170b2:	1cfb      	adds	r3, r7, #3
 80170b4:	781b      	ldrb	r3, [r3, #0]
 80170b6:	0019      	movs	r1, r3
 80170b8:	0010      	movs	r0, r2
 80170ba:	f7f7 f923 	bl	800e304 <HAL_PCD_EP_Close>
 80170be:	0003      	movs	r3, r0
 80170c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80170c2:	19bc      	adds	r4, r7, r6
 80170c4:	197b      	adds	r3, r7, r5
 80170c6:	781b      	ldrb	r3, [r3, #0]
 80170c8:	0018      	movs	r0, r3
 80170ca:	f000 f95a 	bl	8017382 <USBD_Get_USB_Status>
 80170ce:	0003      	movs	r3, r0
 80170d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80170d2:	19bb      	adds	r3, r7, r6
 80170d4:	781b      	ldrb	r3, [r3, #0]
}
 80170d6:	0018      	movs	r0, r3
 80170d8:	46bd      	mov	sp, r7
 80170da:	b005      	add	sp, #20
 80170dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170de <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80170de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170e0:	b085      	sub	sp, #20
 80170e2:	af00      	add	r7, sp, #0
 80170e4:	6078      	str	r0, [r7, #4]
 80170e6:	000a      	movs	r2, r1
 80170e8:	1cfb      	adds	r3, r7, #3
 80170ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170ec:	210f      	movs	r1, #15
 80170ee:	187b      	adds	r3, r7, r1
 80170f0:	2200      	movs	r2, #0
 80170f2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170f4:	260e      	movs	r6, #14
 80170f6:	19bb      	adds	r3, r7, r6
 80170f8:	2200      	movs	r2, #0
 80170fa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80170fc:	687a      	ldr	r2, [r7, #4]
 80170fe:	23b0      	movs	r3, #176	@ 0xb0
 8017100:	009b      	lsls	r3, r3, #2
 8017102:	58d2      	ldr	r2, [r2, r3]
 8017104:	000d      	movs	r5, r1
 8017106:	187c      	adds	r4, r7, r1
 8017108:	1cfb      	adds	r3, r7, #3
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	0019      	movs	r1, r3
 801710e:	0010      	movs	r0, r2
 8017110:	f7f7 f9d5 	bl	800e4be <HAL_PCD_EP_SetStall>
 8017114:	0003      	movs	r3, r0
 8017116:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017118:	19bc      	adds	r4, r7, r6
 801711a:	197b      	adds	r3, r7, r5
 801711c:	781b      	ldrb	r3, [r3, #0]
 801711e:	0018      	movs	r0, r3
 8017120:	f000 f92f 	bl	8017382 <USBD_Get_USB_Status>
 8017124:	0003      	movs	r3, r0
 8017126:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017128:	19bb      	adds	r3, r7, r6
 801712a:	781b      	ldrb	r3, [r3, #0]
}
 801712c:	0018      	movs	r0, r3
 801712e:	46bd      	mov	sp, r7
 8017130:	b005      	add	sp, #20
 8017132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017134 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017136:	b085      	sub	sp, #20
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
 801713c:	000a      	movs	r2, r1
 801713e:	1cfb      	adds	r3, r7, #3
 8017140:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017142:	210f      	movs	r1, #15
 8017144:	187b      	adds	r3, r7, r1
 8017146:	2200      	movs	r2, #0
 8017148:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801714a:	260e      	movs	r6, #14
 801714c:	19bb      	adds	r3, r7, r6
 801714e:	2200      	movs	r2, #0
 8017150:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017152:	687a      	ldr	r2, [r7, #4]
 8017154:	23b0      	movs	r3, #176	@ 0xb0
 8017156:	009b      	lsls	r3, r3, #2
 8017158:	58d2      	ldr	r2, [r2, r3]
 801715a:	000d      	movs	r5, r1
 801715c:	187c      	adds	r4, r7, r1
 801715e:	1cfb      	adds	r3, r7, #3
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	0019      	movs	r1, r3
 8017164:	0010      	movs	r0, r2
 8017166:	f7f7 fa06 	bl	800e576 <HAL_PCD_EP_ClrStall>
 801716a:	0003      	movs	r3, r0
 801716c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801716e:	19bc      	adds	r4, r7, r6
 8017170:	197b      	adds	r3, r7, r5
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	0018      	movs	r0, r3
 8017176:	f000 f904 	bl	8017382 <USBD_Get_USB_Status>
 801717a:	0003      	movs	r3, r0
 801717c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801717e:	19bb      	adds	r3, r7, r6
 8017180:	781b      	ldrb	r3, [r3, #0]
}
 8017182:	0018      	movs	r0, r3
 8017184:	46bd      	mov	sp, r7
 8017186:	b005      	add	sp, #20
 8017188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801718a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801718a:	b580      	push	{r7, lr}
 801718c:	b084      	sub	sp, #16
 801718e:	af00      	add	r7, sp, #0
 8017190:	6078      	str	r0, [r7, #4]
 8017192:	000a      	movs	r2, r1
 8017194:	1cfb      	adds	r3, r7, #3
 8017196:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017198:	687a      	ldr	r2, [r7, #4]
 801719a:	23b0      	movs	r3, #176	@ 0xb0
 801719c:	009b      	lsls	r3, r3, #2
 801719e:	58d3      	ldr	r3, [r2, r3]
 80171a0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80171a2:	1cfb      	adds	r3, r7, #3
 80171a4:	781b      	ldrb	r3, [r3, #0]
 80171a6:	b25b      	sxtb	r3, r3
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	da0d      	bge.n	80171c8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80171ac:	1cfb      	adds	r3, r7, #3
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	227f      	movs	r2, #127	@ 0x7f
 80171b2:	4013      	ands	r3, r2
 80171b4:	68f9      	ldr	r1, [r7, #12]
 80171b6:	1c5a      	adds	r2, r3, #1
 80171b8:	0013      	movs	r3, r2
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	189b      	adds	r3, r3, r2
 80171be:	00db      	lsls	r3, r3, #3
 80171c0:	18cb      	adds	r3, r1, r3
 80171c2:	3302      	adds	r3, #2
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	e00d      	b.n	80171e4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80171c8:	1cfb      	adds	r3, r7, #3
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	227f      	movs	r2, #127	@ 0x7f
 80171ce:	401a      	ands	r2, r3
 80171d0:	68f8      	ldr	r0, [r7, #12]
 80171d2:	23b5      	movs	r3, #181	@ 0xb5
 80171d4:	0059      	lsls	r1, r3, #1
 80171d6:	0013      	movs	r3, r2
 80171d8:	009b      	lsls	r3, r3, #2
 80171da:	189b      	adds	r3, r3, r2
 80171dc:	00db      	lsls	r3, r3, #3
 80171de:	18c3      	adds	r3, r0, r3
 80171e0:	185b      	adds	r3, r3, r1
 80171e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80171e4:	0018      	movs	r0, r3
 80171e6:	46bd      	mov	sp, r7
 80171e8:	b004      	add	sp, #16
 80171ea:	bd80      	pop	{r7, pc}

080171ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80171ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171ee:	b085      	sub	sp, #20
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	000a      	movs	r2, r1
 80171f6:	1cfb      	adds	r3, r7, #3
 80171f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171fa:	210f      	movs	r1, #15
 80171fc:	187b      	adds	r3, r7, r1
 80171fe:	2200      	movs	r2, #0
 8017200:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017202:	260e      	movs	r6, #14
 8017204:	19bb      	adds	r3, r7, r6
 8017206:	2200      	movs	r2, #0
 8017208:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801720a:	687a      	ldr	r2, [r7, #4]
 801720c:	23b0      	movs	r3, #176	@ 0xb0
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	58d2      	ldr	r2, [r2, r3]
 8017212:	000d      	movs	r5, r1
 8017214:	187c      	adds	r4, r7, r1
 8017216:	1cfb      	adds	r3, r7, #3
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	0019      	movs	r1, r3
 801721c:	0010      	movs	r0, r2
 801721e:	f7f6 ffd7 	bl	800e1d0 <HAL_PCD_SetAddress>
 8017222:	0003      	movs	r3, r0
 8017224:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017226:	19bc      	adds	r4, r7, r6
 8017228:	197b      	adds	r3, r7, r5
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	0018      	movs	r0, r3
 801722e:	f000 f8a8 	bl	8017382 <USBD_Get_USB_Status>
 8017232:	0003      	movs	r3, r0
 8017234:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017236:	19bb      	adds	r3, r7, r6
 8017238:	781b      	ldrb	r3, [r3, #0]
}
 801723a:	0018      	movs	r0, r3
 801723c:	46bd      	mov	sp, r7
 801723e:	b005      	add	sp, #20
 8017240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017242 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017244:	b087      	sub	sp, #28
 8017246:	af00      	add	r7, sp, #0
 8017248:	60f8      	str	r0, [r7, #12]
 801724a:	0008      	movs	r0, r1
 801724c:	607a      	str	r2, [r7, #4]
 801724e:	0019      	movs	r1, r3
 8017250:	230b      	movs	r3, #11
 8017252:	18fb      	adds	r3, r7, r3
 8017254:	1c02      	adds	r2, r0, #0
 8017256:	701a      	strb	r2, [r3, #0]
 8017258:	2408      	movs	r4, #8
 801725a:	193b      	adds	r3, r7, r4
 801725c:	1c0a      	adds	r2, r1, #0
 801725e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017260:	2117      	movs	r1, #23
 8017262:	187b      	adds	r3, r7, r1
 8017264:	2200      	movs	r2, #0
 8017266:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017268:	2516      	movs	r5, #22
 801726a:	197b      	adds	r3, r7, r5
 801726c:	2200      	movs	r2, #0
 801726e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017270:	68fa      	ldr	r2, [r7, #12]
 8017272:	23b0      	movs	r3, #176	@ 0xb0
 8017274:	009b      	lsls	r3, r3, #2
 8017276:	58d0      	ldr	r0, [r2, r3]
 8017278:	193b      	adds	r3, r7, r4
 801727a:	881d      	ldrh	r5, [r3, #0]
 801727c:	000e      	movs	r6, r1
 801727e:	187c      	adds	r4, r7, r1
 8017280:	687a      	ldr	r2, [r7, #4]
 8017282:	230b      	movs	r3, #11
 8017284:	18fb      	adds	r3, r7, r3
 8017286:	7819      	ldrb	r1, [r3, #0]
 8017288:	002b      	movs	r3, r5
 801728a:	f7f7 f8dc 	bl	800e446 <HAL_PCD_EP_Transmit>
 801728e:	0003      	movs	r3, r0
 8017290:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017292:	2516      	movs	r5, #22
 8017294:	197c      	adds	r4, r7, r5
 8017296:	19bb      	adds	r3, r7, r6
 8017298:	781b      	ldrb	r3, [r3, #0]
 801729a:	0018      	movs	r0, r3
 801729c:	f000 f871 	bl	8017382 <USBD_Get_USB_Status>
 80172a0:	0003      	movs	r3, r0
 80172a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80172a4:	197b      	adds	r3, r7, r5
 80172a6:	781b      	ldrb	r3, [r3, #0]
}
 80172a8:	0018      	movs	r0, r3
 80172aa:	46bd      	mov	sp, r7
 80172ac:	b007      	add	sp, #28
 80172ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080172b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80172b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172b2:	b087      	sub	sp, #28
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	60f8      	str	r0, [r7, #12]
 80172b8:	0008      	movs	r0, r1
 80172ba:	607a      	str	r2, [r7, #4]
 80172bc:	0019      	movs	r1, r3
 80172be:	230b      	movs	r3, #11
 80172c0:	18fb      	adds	r3, r7, r3
 80172c2:	1c02      	adds	r2, r0, #0
 80172c4:	701a      	strb	r2, [r3, #0]
 80172c6:	2408      	movs	r4, #8
 80172c8:	193b      	adds	r3, r7, r4
 80172ca:	1c0a      	adds	r2, r1, #0
 80172cc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172ce:	2117      	movs	r1, #23
 80172d0:	187b      	adds	r3, r7, r1
 80172d2:	2200      	movs	r2, #0
 80172d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172d6:	2516      	movs	r5, #22
 80172d8:	197b      	adds	r3, r7, r5
 80172da:	2200      	movs	r2, #0
 80172dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80172de:	68fa      	ldr	r2, [r7, #12]
 80172e0:	23b0      	movs	r3, #176	@ 0xb0
 80172e2:	009b      	lsls	r3, r3, #2
 80172e4:	58d0      	ldr	r0, [r2, r3]
 80172e6:	193b      	adds	r3, r7, r4
 80172e8:	881d      	ldrh	r5, [r3, #0]
 80172ea:	000e      	movs	r6, r1
 80172ec:	187c      	adds	r4, r7, r1
 80172ee:	687a      	ldr	r2, [r7, #4]
 80172f0:	230b      	movs	r3, #11
 80172f2:	18fb      	adds	r3, r7, r3
 80172f4:	7819      	ldrb	r1, [r3, #0]
 80172f6:	002b      	movs	r3, r5
 80172f8:	f7f7 f855 	bl	800e3a6 <HAL_PCD_EP_Receive>
 80172fc:	0003      	movs	r3, r0
 80172fe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017300:	2516      	movs	r5, #22
 8017302:	197c      	adds	r4, r7, r5
 8017304:	19bb      	adds	r3, r7, r6
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	0018      	movs	r0, r3
 801730a:	f000 f83a 	bl	8017382 <USBD_Get_USB_Status>
 801730e:	0003      	movs	r3, r0
 8017310:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017312:	197b      	adds	r3, r7, r5
 8017314:	781b      	ldrb	r3, [r3, #0]
}
 8017316:	0018      	movs	r0, r3
 8017318:	46bd      	mov	sp, r7
 801731a:	b007      	add	sp, #28
 801731c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801731e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801731e:	b580      	push	{r7, lr}
 8017320:	b082      	sub	sp, #8
 8017322:	af00      	add	r7, sp, #0
 8017324:	6078      	str	r0, [r7, #4]
 8017326:	000a      	movs	r2, r1
 8017328:	1cfb      	adds	r3, r7, #3
 801732a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801732c:	687a      	ldr	r2, [r7, #4]
 801732e:	23b0      	movs	r3, #176	@ 0xb0
 8017330:	009b      	lsls	r3, r3, #2
 8017332:	58d2      	ldr	r2, [r2, r3]
 8017334:	1cfb      	adds	r3, r7, #3
 8017336:	781b      	ldrb	r3, [r3, #0]
 8017338:	0019      	movs	r1, r3
 801733a:	0010      	movs	r0, r2
 801733c:	f7f7 f86a 	bl	800e414 <HAL_PCD_EP_GetRxCount>
 8017340:	0003      	movs	r3, r0
}
 8017342:	0018      	movs	r0, r3
 8017344:	46bd      	mov	sp, r7
 8017346:	b002      	add	sp, #8
 8017348:	bd80      	pop	{r7, pc}
	...

0801734c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b082      	sub	sp, #8
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017354:	4b02      	ldr	r3, [pc, #8]	@ (8017360 <USBD_static_malloc+0x14>)
}
 8017356:	0018      	movs	r0, r3
 8017358:	46bd      	mov	sp, r7
 801735a:	b002      	add	sp, #8
 801735c:	bd80      	pop	{r7, pc}
 801735e:	46c0      	nop			@ (mov r8, r8)
 8017360:	20003da0 	.word	0x20003da0

08017364 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]

}
 801736c:	46c0      	nop			@ (mov r8, r8)
 801736e:	46bd      	mov	sp, r7
 8017370:	b002      	add	sp, #8
 8017372:	bd80      	pop	{r7, pc}

08017374 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017378:	f7ee ff80 	bl	800627c <SystemClock_Config>
}
 801737c:	46c0      	nop			@ (mov r8, r8)
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}

08017382 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017382:	b580      	push	{r7, lr}
 8017384:	b084      	sub	sp, #16
 8017386:	af00      	add	r7, sp, #0
 8017388:	0002      	movs	r2, r0
 801738a:	1dfb      	adds	r3, r7, #7
 801738c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801738e:	230f      	movs	r3, #15
 8017390:	18fb      	adds	r3, r7, r3
 8017392:	2200      	movs	r2, #0
 8017394:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8017396:	1dfb      	adds	r3, r7, #7
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	2b03      	cmp	r3, #3
 801739c:	d017      	beq.n	80173ce <USBD_Get_USB_Status+0x4c>
 801739e:	dc1b      	bgt.n	80173d8 <USBD_Get_USB_Status+0x56>
 80173a0:	2b02      	cmp	r3, #2
 80173a2:	d00f      	beq.n	80173c4 <USBD_Get_USB_Status+0x42>
 80173a4:	dc18      	bgt.n	80173d8 <USBD_Get_USB_Status+0x56>
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d002      	beq.n	80173b0 <USBD_Get_USB_Status+0x2e>
 80173aa:	2b01      	cmp	r3, #1
 80173ac:	d005      	beq.n	80173ba <USBD_Get_USB_Status+0x38>
 80173ae:	e013      	b.n	80173d8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80173b0:	230f      	movs	r3, #15
 80173b2:	18fb      	adds	r3, r7, r3
 80173b4:	2200      	movs	r2, #0
 80173b6:	701a      	strb	r2, [r3, #0]
    break;
 80173b8:	e013      	b.n	80173e2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80173ba:	230f      	movs	r3, #15
 80173bc:	18fb      	adds	r3, r7, r3
 80173be:	2202      	movs	r2, #2
 80173c0:	701a      	strb	r2, [r3, #0]
    break;
 80173c2:	e00e      	b.n	80173e2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80173c4:	230f      	movs	r3, #15
 80173c6:	18fb      	adds	r3, r7, r3
 80173c8:	2201      	movs	r2, #1
 80173ca:	701a      	strb	r2, [r3, #0]
    break;
 80173cc:	e009      	b.n	80173e2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80173ce:	230f      	movs	r3, #15
 80173d0:	18fb      	adds	r3, r7, r3
 80173d2:	2202      	movs	r2, #2
 80173d4:	701a      	strb	r2, [r3, #0]
    break;
 80173d6:	e004      	b.n	80173e2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80173d8:	230f      	movs	r3, #15
 80173da:	18fb      	adds	r3, r7, r3
 80173dc:	2202      	movs	r2, #2
 80173de:	701a      	strb	r2, [r3, #0]
    break;
 80173e0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80173e2:	230f      	movs	r3, #15
 80173e4:	18fb      	adds	r3, r7, r3
 80173e6:	781b      	ldrb	r3, [r3, #0]
}
 80173e8:	0018      	movs	r0, r3
 80173ea:	46bd      	mov	sp, r7
 80173ec:	b004      	add	sp, #16
 80173ee:	bd80      	pop	{r7, pc}

080173f0 <__cvt>:
 80173f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173f2:	001f      	movs	r7, r3
 80173f4:	2300      	movs	r3, #0
 80173f6:	0016      	movs	r6, r2
 80173f8:	b08b      	sub	sp, #44	@ 0x2c
 80173fa:	429f      	cmp	r7, r3
 80173fc:	da04      	bge.n	8017408 <__cvt+0x18>
 80173fe:	2180      	movs	r1, #128	@ 0x80
 8017400:	0609      	lsls	r1, r1, #24
 8017402:	187b      	adds	r3, r7, r1
 8017404:	001f      	movs	r7, r3
 8017406:	232d      	movs	r3, #45	@ 0x2d
 8017408:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801740a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801740c:	7013      	strb	r3, [r2, #0]
 801740e:	2320      	movs	r3, #32
 8017410:	2203      	movs	r2, #3
 8017412:	439d      	bics	r5, r3
 8017414:	2d46      	cmp	r5, #70	@ 0x46
 8017416:	d007      	beq.n	8017428 <__cvt+0x38>
 8017418:	002b      	movs	r3, r5
 801741a:	3b45      	subs	r3, #69	@ 0x45
 801741c:	4259      	negs	r1, r3
 801741e:	414b      	adcs	r3, r1
 8017420:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017422:	3a01      	subs	r2, #1
 8017424:	18cb      	adds	r3, r1, r3
 8017426:	9310      	str	r3, [sp, #64]	@ 0x40
 8017428:	ab09      	add	r3, sp, #36	@ 0x24
 801742a:	9304      	str	r3, [sp, #16]
 801742c:	ab08      	add	r3, sp, #32
 801742e:	9303      	str	r3, [sp, #12]
 8017430:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017432:	9200      	str	r2, [sp, #0]
 8017434:	9302      	str	r3, [sp, #8]
 8017436:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017438:	0032      	movs	r2, r6
 801743a:	9301      	str	r3, [sp, #4]
 801743c:	003b      	movs	r3, r7
 801743e:	f000 ff13 	bl	8018268 <_dtoa_r>
 8017442:	0004      	movs	r4, r0
 8017444:	2d47      	cmp	r5, #71	@ 0x47
 8017446:	d11b      	bne.n	8017480 <__cvt+0x90>
 8017448:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801744a:	07db      	lsls	r3, r3, #31
 801744c:	d511      	bpl.n	8017472 <__cvt+0x82>
 801744e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017450:	18c3      	adds	r3, r0, r3
 8017452:	9307      	str	r3, [sp, #28]
 8017454:	2200      	movs	r2, #0
 8017456:	2300      	movs	r3, #0
 8017458:	0030      	movs	r0, r6
 801745a:	0039      	movs	r1, r7
 801745c:	f7e8 fff6 	bl	800044c <__aeabi_dcmpeq>
 8017460:	2800      	cmp	r0, #0
 8017462:	d001      	beq.n	8017468 <__cvt+0x78>
 8017464:	9b07      	ldr	r3, [sp, #28]
 8017466:	9309      	str	r3, [sp, #36]	@ 0x24
 8017468:	2230      	movs	r2, #48	@ 0x30
 801746a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801746c:	9907      	ldr	r1, [sp, #28]
 801746e:	428b      	cmp	r3, r1
 8017470:	d320      	bcc.n	80174b4 <__cvt+0xc4>
 8017472:	0020      	movs	r0, r4
 8017474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017476:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017478:	1b1b      	subs	r3, r3, r4
 801747a:	6013      	str	r3, [r2, #0]
 801747c:	b00b      	add	sp, #44	@ 0x2c
 801747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017480:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017482:	18c3      	adds	r3, r0, r3
 8017484:	9307      	str	r3, [sp, #28]
 8017486:	2d46      	cmp	r5, #70	@ 0x46
 8017488:	d1e4      	bne.n	8017454 <__cvt+0x64>
 801748a:	7803      	ldrb	r3, [r0, #0]
 801748c:	2b30      	cmp	r3, #48	@ 0x30
 801748e:	d10c      	bne.n	80174aa <__cvt+0xba>
 8017490:	2200      	movs	r2, #0
 8017492:	2300      	movs	r3, #0
 8017494:	0030      	movs	r0, r6
 8017496:	0039      	movs	r1, r7
 8017498:	f7e8 ffd8 	bl	800044c <__aeabi_dcmpeq>
 801749c:	2800      	cmp	r0, #0
 801749e:	d104      	bne.n	80174aa <__cvt+0xba>
 80174a0:	2301      	movs	r3, #1
 80174a2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80174a4:	1a9b      	subs	r3, r3, r2
 80174a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80174a8:	6013      	str	r3, [r2, #0]
 80174aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80174ac:	9a07      	ldr	r2, [sp, #28]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	18d3      	adds	r3, r2, r3
 80174b2:	e7ce      	b.n	8017452 <__cvt+0x62>
 80174b4:	1c59      	adds	r1, r3, #1
 80174b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80174b8:	701a      	strb	r2, [r3, #0]
 80174ba:	e7d6      	b.n	801746a <__cvt+0x7a>

080174bc <__exponent>:
 80174bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174be:	232b      	movs	r3, #43	@ 0x2b
 80174c0:	0005      	movs	r5, r0
 80174c2:	000c      	movs	r4, r1
 80174c4:	b085      	sub	sp, #20
 80174c6:	7002      	strb	r2, [r0, #0]
 80174c8:	2900      	cmp	r1, #0
 80174ca:	da01      	bge.n	80174d0 <__exponent+0x14>
 80174cc:	424c      	negs	r4, r1
 80174ce:	3302      	adds	r3, #2
 80174d0:	706b      	strb	r3, [r5, #1]
 80174d2:	2c09      	cmp	r4, #9
 80174d4:	dd2c      	ble.n	8017530 <__exponent+0x74>
 80174d6:	ab02      	add	r3, sp, #8
 80174d8:	1dde      	adds	r6, r3, #7
 80174da:	0020      	movs	r0, r4
 80174dc:	210a      	movs	r1, #10
 80174de:	f7e8 ff9f 	bl	8000420 <__aeabi_idivmod>
 80174e2:	0037      	movs	r7, r6
 80174e4:	3130      	adds	r1, #48	@ 0x30
 80174e6:	3e01      	subs	r6, #1
 80174e8:	0020      	movs	r0, r4
 80174ea:	7031      	strb	r1, [r6, #0]
 80174ec:	210a      	movs	r1, #10
 80174ee:	9401      	str	r4, [sp, #4]
 80174f0:	f7e8 feb0 	bl	8000254 <__divsi3>
 80174f4:	9b01      	ldr	r3, [sp, #4]
 80174f6:	0004      	movs	r4, r0
 80174f8:	2b63      	cmp	r3, #99	@ 0x63
 80174fa:	dcee      	bgt.n	80174da <__exponent+0x1e>
 80174fc:	1eba      	subs	r2, r7, #2
 80174fe:	1ca8      	adds	r0, r5, #2
 8017500:	0001      	movs	r1, r0
 8017502:	0013      	movs	r3, r2
 8017504:	3430      	adds	r4, #48	@ 0x30
 8017506:	7014      	strb	r4, [r2, #0]
 8017508:	ac02      	add	r4, sp, #8
 801750a:	3407      	adds	r4, #7
 801750c:	429c      	cmp	r4, r3
 801750e:	d80a      	bhi.n	8017526 <__exponent+0x6a>
 8017510:	2300      	movs	r3, #0
 8017512:	42a2      	cmp	r2, r4
 8017514:	d803      	bhi.n	801751e <__exponent+0x62>
 8017516:	3309      	adds	r3, #9
 8017518:	aa02      	add	r2, sp, #8
 801751a:	189b      	adds	r3, r3, r2
 801751c:	1bdb      	subs	r3, r3, r7
 801751e:	18c0      	adds	r0, r0, r3
 8017520:	1b40      	subs	r0, r0, r5
 8017522:	b005      	add	sp, #20
 8017524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017526:	781c      	ldrb	r4, [r3, #0]
 8017528:	3301      	adds	r3, #1
 801752a:	700c      	strb	r4, [r1, #0]
 801752c:	3101      	adds	r1, #1
 801752e:	e7eb      	b.n	8017508 <__exponent+0x4c>
 8017530:	2330      	movs	r3, #48	@ 0x30
 8017532:	18e4      	adds	r4, r4, r3
 8017534:	70ab      	strb	r3, [r5, #2]
 8017536:	1d28      	adds	r0, r5, #4
 8017538:	70ec      	strb	r4, [r5, #3]
 801753a:	e7f1      	b.n	8017520 <__exponent+0x64>

0801753c <_printf_float>:
 801753c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801753e:	b097      	sub	sp, #92	@ 0x5c
 8017540:	000d      	movs	r5, r1
 8017542:	920a      	str	r2, [sp, #40]	@ 0x28
 8017544:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017546:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017548:	9009      	str	r0, [sp, #36]	@ 0x24
 801754a:	f000 fd6b 	bl	8018024 <_localeconv_r>
 801754e:	6803      	ldr	r3, [r0, #0]
 8017550:	0018      	movs	r0, r3
 8017552:	930d      	str	r3, [sp, #52]	@ 0x34
 8017554:	f7e8 fdd8 	bl	8000108 <strlen>
 8017558:	2300      	movs	r3, #0
 801755a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801755c:	9314      	str	r3, [sp, #80]	@ 0x50
 801755e:	7e2b      	ldrb	r3, [r5, #24]
 8017560:	2207      	movs	r2, #7
 8017562:	930c      	str	r3, [sp, #48]	@ 0x30
 8017564:	682b      	ldr	r3, [r5, #0]
 8017566:	930e      	str	r3, [sp, #56]	@ 0x38
 8017568:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801756a:	6823      	ldr	r3, [r4, #0]
 801756c:	05c9      	lsls	r1, r1, #23
 801756e:	d545      	bpl.n	80175fc <_printf_float+0xc0>
 8017570:	189b      	adds	r3, r3, r2
 8017572:	4393      	bics	r3, r2
 8017574:	001a      	movs	r2, r3
 8017576:	3208      	adds	r2, #8
 8017578:	6022      	str	r2, [r4, #0]
 801757a:	2201      	movs	r2, #1
 801757c:	681e      	ldr	r6, [r3, #0]
 801757e:	685f      	ldr	r7, [r3, #4]
 8017580:	007b      	lsls	r3, r7, #1
 8017582:	085b      	lsrs	r3, r3, #1
 8017584:	9311      	str	r3, [sp, #68]	@ 0x44
 8017586:	9610      	str	r6, [sp, #64]	@ 0x40
 8017588:	64ae      	str	r6, [r5, #72]	@ 0x48
 801758a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801758c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801758e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017590:	4ba7      	ldr	r3, [pc, #668]	@ (8017830 <_printf_float+0x2f4>)
 8017592:	4252      	negs	r2, r2
 8017594:	f7eb fe34 	bl	8003200 <__aeabi_dcmpun>
 8017598:	2800      	cmp	r0, #0
 801759a:	d131      	bne.n	8017600 <_printf_float+0xc4>
 801759c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801759e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80175a0:	2201      	movs	r2, #1
 80175a2:	4ba3      	ldr	r3, [pc, #652]	@ (8017830 <_printf_float+0x2f4>)
 80175a4:	4252      	negs	r2, r2
 80175a6:	f7e8 ff61 	bl	800046c <__aeabi_dcmple>
 80175aa:	2800      	cmp	r0, #0
 80175ac:	d128      	bne.n	8017600 <_printf_float+0xc4>
 80175ae:	2200      	movs	r2, #0
 80175b0:	2300      	movs	r3, #0
 80175b2:	0030      	movs	r0, r6
 80175b4:	0039      	movs	r1, r7
 80175b6:	f7e8 ff4f 	bl	8000458 <__aeabi_dcmplt>
 80175ba:	2800      	cmp	r0, #0
 80175bc:	d003      	beq.n	80175c6 <_printf_float+0x8a>
 80175be:	002b      	movs	r3, r5
 80175c0:	222d      	movs	r2, #45	@ 0x2d
 80175c2:	3343      	adds	r3, #67	@ 0x43
 80175c4:	701a      	strb	r2, [r3, #0]
 80175c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175c8:	4f9a      	ldr	r7, [pc, #616]	@ (8017834 <_printf_float+0x2f8>)
 80175ca:	2b47      	cmp	r3, #71	@ 0x47
 80175cc:	d900      	bls.n	80175d0 <_printf_float+0x94>
 80175ce:	4f9a      	ldr	r7, [pc, #616]	@ (8017838 <_printf_float+0x2fc>)
 80175d0:	2303      	movs	r3, #3
 80175d2:	2400      	movs	r4, #0
 80175d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80175d6:	612b      	str	r3, [r5, #16]
 80175d8:	3301      	adds	r3, #1
 80175da:	439a      	bics	r2, r3
 80175dc:	602a      	str	r2, [r5, #0]
 80175de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80175e0:	0029      	movs	r1, r5
 80175e2:	9300      	str	r3, [sp, #0]
 80175e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80175e8:	aa15      	add	r2, sp, #84	@ 0x54
 80175ea:	f000 f9e5 	bl	80179b8 <_printf_common>
 80175ee:	3001      	adds	r0, #1
 80175f0:	d000      	beq.n	80175f4 <_printf_float+0xb8>
 80175f2:	e09f      	b.n	8017734 <_printf_float+0x1f8>
 80175f4:	2001      	movs	r0, #1
 80175f6:	4240      	negs	r0, r0
 80175f8:	b017      	add	sp, #92	@ 0x5c
 80175fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175fc:	3307      	adds	r3, #7
 80175fe:	e7b8      	b.n	8017572 <_printf_float+0x36>
 8017600:	0032      	movs	r2, r6
 8017602:	003b      	movs	r3, r7
 8017604:	0030      	movs	r0, r6
 8017606:	0039      	movs	r1, r7
 8017608:	f7eb fdfa 	bl	8003200 <__aeabi_dcmpun>
 801760c:	2800      	cmp	r0, #0
 801760e:	d00b      	beq.n	8017628 <_printf_float+0xec>
 8017610:	2f00      	cmp	r7, #0
 8017612:	da03      	bge.n	801761c <_printf_float+0xe0>
 8017614:	002b      	movs	r3, r5
 8017616:	222d      	movs	r2, #45	@ 0x2d
 8017618:	3343      	adds	r3, #67	@ 0x43
 801761a:	701a      	strb	r2, [r3, #0]
 801761c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801761e:	4f87      	ldr	r7, [pc, #540]	@ (801783c <_printf_float+0x300>)
 8017620:	2b47      	cmp	r3, #71	@ 0x47
 8017622:	d9d5      	bls.n	80175d0 <_printf_float+0x94>
 8017624:	4f86      	ldr	r7, [pc, #536]	@ (8017840 <_printf_float+0x304>)
 8017626:	e7d3      	b.n	80175d0 <_printf_float+0x94>
 8017628:	2220      	movs	r2, #32
 801762a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801762c:	686b      	ldr	r3, [r5, #4]
 801762e:	4394      	bics	r4, r2
 8017630:	1c5a      	adds	r2, r3, #1
 8017632:	d146      	bne.n	80176c2 <_printf_float+0x186>
 8017634:	3307      	adds	r3, #7
 8017636:	606b      	str	r3, [r5, #4]
 8017638:	2380      	movs	r3, #128	@ 0x80
 801763a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801763c:	00db      	lsls	r3, r3, #3
 801763e:	4313      	orrs	r3, r2
 8017640:	2200      	movs	r2, #0
 8017642:	602b      	str	r3, [r5, #0]
 8017644:	9206      	str	r2, [sp, #24]
 8017646:	aa14      	add	r2, sp, #80	@ 0x50
 8017648:	9205      	str	r2, [sp, #20]
 801764a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801764c:	a90a      	add	r1, sp, #40	@ 0x28
 801764e:	9204      	str	r2, [sp, #16]
 8017650:	aa13      	add	r2, sp, #76	@ 0x4c
 8017652:	9203      	str	r2, [sp, #12]
 8017654:	2223      	movs	r2, #35	@ 0x23
 8017656:	1852      	adds	r2, r2, r1
 8017658:	9202      	str	r2, [sp, #8]
 801765a:	9301      	str	r3, [sp, #4]
 801765c:	686b      	ldr	r3, [r5, #4]
 801765e:	0032      	movs	r2, r6
 8017660:	9300      	str	r3, [sp, #0]
 8017662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017664:	003b      	movs	r3, r7
 8017666:	f7ff fec3 	bl	80173f0 <__cvt>
 801766a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801766c:	0007      	movs	r7, r0
 801766e:	2c47      	cmp	r4, #71	@ 0x47
 8017670:	d12d      	bne.n	80176ce <_printf_float+0x192>
 8017672:	1cd3      	adds	r3, r2, #3
 8017674:	db02      	blt.n	801767c <_printf_float+0x140>
 8017676:	686b      	ldr	r3, [r5, #4]
 8017678:	429a      	cmp	r2, r3
 801767a:	dd48      	ble.n	801770e <_printf_float+0x1d2>
 801767c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801767e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017680:	3b02      	subs	r3, #2
 8017682:	b2db      	uxtb	r3, r3
 8017684:	930c      	str	r3, [sp, #48]	@ 0x30
 8017686:	0028      	movs	r0, r5
 8017688:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801768a:	3901      	subs	r1, #1
 801768c:	3050      	adds	r0, #80	@ 0x50
 801768e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017690:	f7ff ff14 	bl	80174bc <__exponent>
 8017694:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017696:	0004      	movs	r4, r0
 8017698:	1813      	adds	r3, r2, r0
 801769a:	612b      	str	r3, [r5, #16]
 801769c:	2a01      	cmp	r2, #1
 801769e:	dc02      	bgt.n	80176a6 <_printf_float+0x16a>
 80176a0:	682a      	ldr	r2, [r5, #0]
 80176a2:	07d2      	lsls	r2, r2, #31
 80176a4:	d501      	bpl.n	80176aa <_printf_float+0x16e>
 80176a6:	3301      	adds	r3, #1
 80176a8:	612b      	str	r3, [r5, #16]
 80176aa:	2323      	movs	r3, #35	@ 0x23
 80176ac:	aa0a      	add	r2, sp, #40	@ 0x28
 80176ae:	189b      	adds	r3, r3, r2
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d100      	bne.n	80176b8 <_printf_float+0x17c>
 80176b6:	e792      	b.n	80175de <_printf_float+0xa2>
 80176b8:	002b      	movs	r3, r5
 80176ba:	222d      	movs	r2, #45	@ 0x2d
 80176bc:	3343      	adds	r3, #67	@ 0x43
 80176be:	701a      	strb	r2, [r3, #0]
 80176c0:	e78d      	b.n	80175de <_printf_float+0xa2>
 80176c2:	2c47      	cmp	r4, #71	@ 0x47
 80176c4:	d1b8      	bne.n	8017638 <_printf_float+0xfc>
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d1b6      	bne.n	8017638 <_printf_float+0xfc>
 80176ca:	3301      	adds	r3, #1
 80176cc:	e7b3      	b.n	8017636 <_printf_float+0xfa>
 80176ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176d0:	0011      	movs	r1, r2
 80176d2:	2b65      	cmp	r3, #101	@ 0x65
 80176d4:	d9d7      	bls.n	8017686 <_printf_float+0x14a>
 80176d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176d8:	2b66      	cmp	r3, #102	@ 0x66
 80176da:	d11a      	bne.n	8017712 <_printf_float+0x1d6>
 80176dc:	686b      	ldr	r3, [r5, #4]
 80176de:	2a00      	cmp	r2, #0
 80176e0:	dd09      	ble.n	80176f6 <_printf_float+0x1ba>
 80176e2:	612a      	str	r2, [r5, #16]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d102      	bne.n	80176ee <_printf_float+0x1b2>
 80176e8:	6829      	ldr	r1, [r5, #0]
 80176ea:	07c9      	lsls	r1, r1, #31
 80176ec:	d50b      	bpl.n	8017706 <_printf_float+0x1ca>
 80176ee:	3301      	adds	r3, #1
 80176f0:	189b      	adds	r3, r3, r2
 80176f2:	612b      	str	r3, [r5, #16]
 80176f4:	e007      	b.n	8017706 <_printf_float+0x1ca>
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d103      	bne.n	8017702 <_printf_float+0x1c6>
 80176fa:	2201      	movs	r2, #1
 80176fc:	6829      	ldr	r1, [r5, #0]
 80176fe:	4211      	tst	r1, r2
 8017700:	d000      	beq.n	8017704 <_printf_float+0x1c8>
 8017702:	1c9a      	adds	r2, r3, #2
 8017704:	612a      	str	r2, [r5, #16]
 8017706:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017708:	2400      	movs	r4, #0
 801770a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801770c:	e7cd      	b.n	80176aa <_printf_float+0x16e>
 801770e:	2367      	movs	r3, #103	@ 0x67
 8017710:	930c      	str	r3, [sp, #48]	@ 0x30
 8017712:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017714:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017716:	4299      	cmp	r1, r3
 8017718:	db06      	blt.n	8017728 <_printf_float+0x1ec>
 801771a:	682b      	ldr	r3, [r5, #0]
 801771c:	6129      	str	r1, [r5, #16]
 801771e:	07db      	lsls	r3, r3, #31
 8017720:	d5f1      	bpl.n	8017706 <_printf_float+0x1ca>
 8017722:	3101      	adds	r1, #1
 8017724:	6129      	str	r1, [r5, #16]
 8017726:	e7ee      	b.n	8017706 <_printf_float+0x1ca>
 8017728:	2201      	movs	r2, #1
 801772a:	2900      	cmp	r1, #0
 801772c:	dce0      	bgt.n	80176f0 <_printf_float+0x1b4>
 801772e:	1892      	adds	r2, r2, r2
 8017730:	1a52      	subs	r2, r2, r1
 8017732:	e7dd      	b.n	80176f0 <_printf_float+0x1b4>
 8017734:	682a      	ldr	r2, [r5, #0]
 8017736:	0553      	lsls	r3, r2, #21
 8017738:	d408      	bmi.n	801774c <_printf_float+0x210>
 801773a:	692b      	ldr	r3, [r5, #16]
 801773c:	003a      	movs	r2, r7
 801773e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017740:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017742:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017744:	47a0      	blx	r4
 8017746:	3001      	adds	r0, #1
 8017748:	d129      	bne.n	801779e <_printf_float+0x262>
 801774a:	e753      	b.n	80175f4 <_printf_float+0xb8>
 801774c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801774e:	2b65      	cmp	r3, #101	@ 0x65
 8017750:	d800      	bhi.n	8017754 <_printf_float+0x218>
 8017752:	e0da      	b.n	801790a <_printf_float+0x3ce>
 8017754:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017756:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017758:	2200      	movs	r2, #0
 801775a:	2300      	movs	r3, #0
 801775c:	f7e8 fe76 	bl	800044c <__aeabi_dcmpeq>
 8017760:	2800      	cmp	r0, #0
 8017762:	d033      	beq.n	80177cc <_printf_float+0x290>
 8017764:	2301      	movs	r3, #1
 8017766:	4a37      	ldr	r2, [pc, #220]	@ (8017844 <_printf_float+0x308>)
 8017768:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801776a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801776c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801776e:	47a0      	blx	r4
 8017770:	3001      	adds	r0, #1
 8017772:	d100      	bne.n	8017776 <_printf_float+0x23a>
 8017774:	e73e      	b.n	80175f4 <_printf_float+0xb8>
 8017776:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017778:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801777a:	42b3      	cmp	r3, r6
 801777c:	db02      	blt.n	8017784 <_printf_float+0x248>
 801777e:	682b      	ldr	r3, [r5, #0]
 8017780:	07db      	lsls	r3, r3, #31
 8017782:	d50c      	bpl.n	801779e <_printf_float+0x262>
 8017784:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017786:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017788:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801778a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801778c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801778e:	47a0      	blx	r4
 8017790:	2400      	movs	r4, #0
 8017792:	3001      	adds	r0, #1
 8017794:	d100      	bne.n	8017798 <_printf_float+0x25c>
 8017796:	e72d      	b.n	80175f4 <_printf_float+0xb8>
 8017798:	1e73      	subs	r3, r6, #1
 801779a:	42a3      	cmp	r3, r4
 801779c:	dc0a      	bgt.n	80177b4 <_printf_float+0x278>
 801779e:	682b      	ldr	r3, [r5, #0]
 80177a0:	079b      	lsls	r3, r3, #30
 80177a2:	d500      	bpl.n	80177a6 <_printf_float+0x26a>
 80177a4:	e105      	b.n	80179b2 <_printf_float+0x476>
 80177a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80177a8:	68e8      	ldr	r0, [r5, #12]
 80177aa:	4298      	cmp	r0, r3
 80177ac:	db00      	blt.n	80177b0 <_printf_float+0x274>
 80177ae:	e723      	b.n	80175f8 <_printf_float+0xbc>
 80177b0:	0018      	movs	r0, r3
 80177b2:	e721      	b.n	80175f8 <_printf_float+0xbc>
 80177b4:	002a      	movs	r2, r5
 80177b6:	2301      	movs	r3, #1
 80177b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80177ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80177be:	321a      	adds	r2, #26
 80177c0:	47b8      	blx	r7
 80177c2:	3001      	adds	r0, #1
 80177c4:	d100      	bne.n	80177c8 <_printf_float+0x28c>
 80177c6:	e715      	b.n	80175f4 <_printf_float+0xb8>
 80177c8:	3401      	adds	r4, #1
 80177ca:	e7e5      	b.n	8017798 <_printf_float+0x25c>
 80177cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	dc3a      	bgt.n	8017848 <_printf_float+0x30c>
 80177d2:	2301      	movs	r3, #1
 80177d4:	4a1b      	ldr	r2, [pc, #108]	@ (8017844 <_printf_float+0x308>)
 80177d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80177d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80177dc:	47a0      	blx	r4
 80177de:	3001      	adds	r0, #1
 80177e0:	d100      	bne.n	80177e4 <_printf_float+0x2a8>
 80177e2:	e707      	b.n	80175f4 <_printf_float+0xb8>
 80177e4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80177e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80177e8:	4333      	orrs	r3, r6
 80177ea:	d102      	bne.n	80177f2 <_printf_float+0x2b6>
 80177ec:	682b      	ldr	r3, [r5, #0]
 80177ee:	07db      	lsls	r3, r3, #31
 80177f0:	d5d5      	bpl.n	801779e <_printf_float+0x262>
 80177f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80177f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80177f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80177f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80177fc:	47a0      	blx	r4
 80177fe:	2300      	movs	r3, #0
 8017800:	3001      	adds	r0, #1
 8017802:	d100      	bne.n	8017806 <_printf_float+0x2ca>
 8017804:	e6f6      	b.n	80175f4 <_printf_float+0xb8>
 8017806:	930c      	str	r3, [sp, #48]	@ 0x30
 8017808:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801780a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801780c:	425b      	negs	r3, r3
 801780e:	4293      	cmp	r3, r2
 8017810:	dc01      	bgt.n	8017816 <_printf_float+0x2da>
 8017812:	0033      	movs	r3, r6
 8017814:	e792      	b.n	801773c <_printf_float+0x200>
 8017816:	002a      	movs	r2, r5
 8017818:	2301      	movs	r3, #1
 801781a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801781c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801781e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017820:	321a      	adds	r2, #26
 8017822:	47a0      	blx	r4
 8017824:	3001      	adds	r0, #1
 8017826:	d100      	bne.n	801782a <_printf_float+0x2ee>
 8017828:	e6e4      	b.n	80175f4 <_printf_float+0xb8>
 801782a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801782c:	3301      	adds	r3, #1
 801782e:	e7ea      	b.n	8017806 <_printf_float+0x2ca>
 8017830:	7fefffff 	.word	0x7fefffff
 8017834:	0801bcac 	.word	0x0801bcac
 8017838:	0801bcb0 	.word	0x0801bcb0
 801783c:	0801bcb4 	.word	0x0801bcb4
 8017840:	0801bcb8 	.word	0x0801bcb8
 8017844:	0801bcbc 	.word	0x0801bcbc
 8017848:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801784a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801784c:	930c      	str	r3, [sp, #48]	@ 0x30
 801784e:	429e      	cmp	r6, r3
 8017850:	dd00      	ble.n	8017854 <_printf_float+0x318>
 8017852:	001e      	movs	r6, r3
 8017854:	2e00      	cmp	r6, #0
 8017856:	dc31      	bgt.n	80178bc <_printf_float+0x380>
 8017858:	43f3      	mvns	r3, r6
 801785a:	2400      	movs	r4, #0
 801785c:	17db      	asrs	r3, r3, #31
 801785e:	4033      	ands	r3, r6
 8017860:	930e      	str	r3, [sp, #56]	@ 0x38
 8017862:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017866:	1af3      	subs	r3, r6, r3
 8017868:	42a3      	cmp	r3, r4
 801786a:	dc30      	bgt.n	80178ce <_printf_float+0x392>
 801786c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801786e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017870:	429a      	cmp	r2, r3
 8017872:	dc38      	bgt.n	80178e6 <_printf_float+0x3aa>
 8017874:	682b      	ldr	r3, [r5, #0]
 8017876:	07db      	lsls	r3, r3, #31
 8017878:	d435      	bmi.n	80178e6 <_printf_float+0x3aa>
 801787a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801787c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801787e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017880:	1b9b      	subs	r3, r3, r6
 8017882:	1b14      	subs	r4, r2, r4
 8017884:	429c      	cmp	r4, r3
 8017886:	dd00      	ble.n	801788a <_printf_float+0x34e>
 8017888:	001c      	movs	r4, r3
 801788a:	2c00      	cmp	r4, #0
 801788c:	dc34      	bgt.n	80178f8 <_printf_float+0x3bc>
 801788e:	43e3      	mvns	r3, r4
 8017890:	2600      	movs	r6, #0
 8017892:	17db      	asrs	r3, r3, #31
 8017894:	401c      	ands	r4, r3
 8017896:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017898:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801789a:	1ad3      	subs	r3, r2, r3
 801789c:	1b1b      	subs	r3, r3, r4
 801789e:	42b3      	cmp	r3, r6
 80178a0:	dc00      	bgt.n	80178a4 <_printf_float+0x368>
 80178a2:	e77c      	b.n	801779e <_printf_float+0x262>
 80178a4:	002a      	movs	r2, r5
 80178a6:	2301      	movs	r3, #1
 80178a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80178aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80178ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80178ae:	321a      	adds	r2, #26
 80178b0:	47b8      	blx	r7
 80178b2:	3001      	adds	r0, #1
 80178b4:	d100      	bne.n	80178b8 <_printf_float+0x37c>
 80178b6:	e69d      	b.n	80175f4 <_printf_float+0xb8>
 80178b8:	3601      	adds	r6, #1
 80178ba:	e7ec      	b.n	8017896 <_printf_float+0x35a>
 80178bc:	0033      	movs	r3, r6
 80178be:	003a      	movs	r2, r7
 80178c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80178c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80178c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80178c6:	47a0      	blx	r4
 80178c8:	3001      	adds	r0, #1
 80178ca:	d1c5      	bne.n	8017858 <_printf_float+0x31c>
 80178cc:	e692      	b.n	80175f4 <_printf_float+0xb8>
 80178ce:	002a      	movs	r2, r5
 80178d0:	2301      	movs	r3, #1
 80178d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80178d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80178d6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80178d8:	321a      	adds	r2, #26
 80178da:	47b0      	blx	r6
 80178dc:	3001      	adds	r0, #1
 80178de:	d100      	bne.n	80178e2 <_printf_float+0x3a6>
 80178e0:	e688      	b.n	80175f4 <_printf_float+0xb8>
 80178e2:	3401      	adds	r4, #1
 80178e4:	e7bd      	b.n	8017862 <_printf_float+0x326>
 80178e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80178e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80178ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80178ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80178ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80178f0:	47a0      	blx	r4
 80178f2:	3001      	adds	r0, #1
 80178f4:	d1c1      	bne.n	801787a <_printf_float+0x33e>
 80178f6:	e67d      	b.n	80175f4 <_printf_float+0xb8>
 80178f8:	19ba      	adds	r2, r7, r6
 80178fa:	0023      	movs	r3, r4
 80178fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80178fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017900:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017902:	47b0      	blx	r6
 8017904:	3001      	adds	r0, #1
 8017906:	d1c2      	bne.n	801788e <_printf_float+0x352>
 8017908:	e674      	b.n	80175f4 <_printf_float+0xb8>
 801790a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801790c:	930c      	str	r3, [sp, #48]	@ 0x30
 801790e:	2b01      	cmp	r3, #1
 8017910:	dc02      	bgt.n	8017918 <_printf_float+0x3dc>
 8017912:	2301      	movs	r3, #1
 8017914:	421a      	tst	r2, r3
 8017916:	d039      	beq.n	801798c <_printf_float+0x450>
 8017918:	2301      	movs	r3, #1
 801791a:	003a      	movs	r2, r7
 801791c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801791e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017920:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017922:	47b0      	blx	r6
 8017924:	3001      	adds	r0, #1
 8017926:	d100      	bne.n	801792a <_printf_float+0x3ee>
 8017928:	e664      	b.n	80175f4 <_printf_float+0xb8>
 801792a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801792c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801792e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017930:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017932:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017934:	47b0      	blx	r6
 8017936:	3001      	adds	r0, #1
 8017938:	d100      	bne.n	801793c <_printf_float+0x400>
 801793a:	e65b      	b.n	80175f4 <_printf_float+0xb8>
 801793c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801793e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017942:	2200      	movs	r2, #0
 8017944:	3b01      	subs	r3, #1
 8017946:	930c      	str	r3, [sp, #48]	@ 0x30
 8017948:	2300      	movs	r3, #0
 801794a:	f7e8 fd7f 	bl	800044c <__aeabi_dcmpeq>
 801794e:	2800      	cmp	r0, #0
 8017950:	d11a      	bne.n	8017988 <_printf_float+0x44c>
 8017952:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017954:	1c7a      	adds	r2, r7, #1
 8017956:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017958:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801795a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801795c:	47b0      	blx	r6
 801795e:	3001      	adds	r0, #1
 8017960:	d10e      	bne.n	8017980 <_printf_float+0x444>
 8017962:	e647      	b.n	80175f4 <_printf_float+0xb8>
 8017964:	002a      	movs	r2, r5
 8017966:	2301      	movs	r3, #1
 8017968:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801796a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801796c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801796e:	321a      	adds	r2, #26
 8017970:	47b8      	blx	r7
 8017972:	3001      	adds	r0, #1
 8017974:	d100      	bne.n	8017978 <_printf_float+0x43c>
 8017976:	e63d      	b.n	80175f4 <_printf_float+0xb8>
 8017978:	3601      	adds	r6, #1
 801797a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801797c:	429e      	cmp	r6, r3
 801797e:	dbf1      	blt.n	8017964 <_printf_float+0x428>
 8017980:	002a      	movs	r2, r5
 8017982:	0023      	movs	r3, r4
 8017984:	3250      	adds	r2, #80	@ 0x50
 8017986:	e6da      	b.n	801773e <_printf_float+0x202>
 8017988:	2600      	movs	r6, #0
 801798a:	e7f6      	b.n	801797a <_printf_float+0x43e>
 801798c:	003a      	movs	r2, r7
 801798e:	e7e2      	b.n	8017956 <_printf_float+0x41a>
 8017990:	002a      	movs	r2, r5
 8017992:	2301      	movs	r3, #1
 8017994:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017998:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801799a:	3219      	adds	r2, #25
 801799c:	47b0      	blx	r6
 801799e:	3001      	adds	r0, #1
 80179a0:	d100      	bne.n	80179a4 <_printf_float+0x468>
 80179a2:	e627      	b.n	80175f4 <_printf_float+0xb8>
 80179a4:	3401      	adds	r4, #1
 80179a6:	68eb      	ldr	r3, [r5, #12]
 80179a8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80179aa:	1a9b      	subs	r3, r3, r2
 80179ac:	42a3      	cmp	r3, r4
 80179ae:	dcef      	bgt.n	8017990 <_printf_float+0x454>
 80179b0:	e6f9      	b.n	80177a6 <_printf_float+0x26a>
 80179b2:	2400      	movs	r4, #0
 80179b4:	e7f7      	b.n	80179a6 <_printf_float+0x46a>
 80179b6:	46c0      	nop			@ (mov r8, r8)

080179b8 <_printf_common>:
 80179b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179ba:	0016      	movs	r6, r2
 80179bc:	9301      	str	r3, [sp, #4]
 80179be:	688a      	ldr	r2, [r1, #8]
 80179c0:	690b      	ldr	r3, [r1, #16]
 80179c2:	000c      	movs	r4, r1
 80179c4:	9000      	str	r0, [sp, #0]
 80179c6:	4293      	cmp	r3, r2
 80179c8:	da00      	bge.n	80179cc <_printf_common+0x14>
 80179ca:	0013      	movs	r3, r2
 80179cc:	0022      	movs	r2, r4
 80179ce:	6033      	str	r3, [r6, #0]
 80179d0:	3243      	adds	r2, #67	@ 0x43
 80179d2:	7812      	ldrb	r2, [r2, #0]
 80179d4:	2a00      	cmp	r2, #0
 80179d6:	d001      	beq.n	80179dc <_printf_common+0x24>
 80179d8:	3301      	adds	r3, #1
 80179da:	6033      	str	r3, [r6, #0]
 80179dc:	6823      	ldr	r3, [r4, #0]
 80179de:	069b      	lsls	r3, r3, #26
 80179e0:	d502      	bpl.n	80179e8 <_printf_common+0x30>
 80179e2:	6833      	ldr	r3, [r6, #0]
 80179e4:	3302      	adds	r3, #2
 80179e6:	6033      	str	r3, [r6, #0]
 80179e8:	6822      	ldr	r2, [r4, #0]
 80179ea:	2306      	movs	r3, #6
 80179ec:	0015      	movs	r5, r2
 80179ee:	401d      	ands	r5, r3
 80179f0:	421a      	tst	r2, r3
 80179f2:	d027      	beq.n	8017a44 <_printf_common+0x8c>
 80179f4:	0023      	movs	r3, r4
 80179f6:	3343      	adds	r3, #67	@ 0x43
 80179f8:	781b      	ldrb	r3, [r3, #0]
 80179fa:	1e5a      	subs	r2, r3, #1
 80179fc:	4193      	sbcs	r3, r2
 80179fe:	6822      	ldr	r2, [r4, #0]
 8017a00:	0692      	lsls	r2, r2, #26
 8017a02:	d430      	bmi.n	8017a66 <_printf_common+0xae>
 8017a04:	0022      	movs	r2, r4
 8017a06:	9901      	ldr	r1, [sp, #4]
 8017a08:	9800      	ldr	r0, [sp, #0]
 8017a0a:	9d08      	ldr	r5, [sp, #32]
 8017a0c:	3243      	adds	r2, #67	@ 0x43
 8017a0e:	47a8      	blx	r5
 8017a10:	3001      	adds	r0, #1
 8017a12:	d025      	beq.n	8017a60 <_printf_common+0xa8>
 8017a14:	2206      	movs	r2, #6
 8017a16:	6823      	ldr	r3, [r4, #0]
 8017a18:	2500      	movs	r5, #0
 8017a1a:	4013      	ands	r3, r2
 8017a1c:	2b04      	cmp	r3, #4
 8017a1e:	d105      	bne.n	8017a2c <_printf_common+0x74>
 8017a20:	6833      	ldr	r3, [r6, #0]
 8017a22:	68e5      	ldr	r5, [r4, #12]
 8017a24:	1aed      	subs	r5, r5, r3
 8017a26:	43eb      	mvns	r3, r5
 8017a28:	17db      	asrs	r3, r3, #31
 8017a2a:	401d      	ands	r5, r3
 8017a2c:	68a3      	ldr	r3, [r4, #8]
 8017a2e:	6922      	ldr	r2, [r4, #16]
 8017a30:	4293      	cmp	r3, r2
 8017a32:	dd01      	ble.n	8017a38 <_printf_common+0x80>
 8017a34:	1a9b      	subs	r3, r3, r2
 8017a36:	18ed      	adds	r5, r5, r3
 8017a38:	2600      	movs	r6, #0
 8017a3a:	42b5      	cmp	r5, r6
 8017a3c:	d120      	bne.n	8017a80 <_printf_common+0xc8>
 8017a3e:	2000      	movs	r0, #0
 8017a40:	e010      	b.n	8017a64 <_printf_common+0xac>
 8017a42:	3501      	adds	r5, #1
 8017a44:	68e3      	ldr	r3, [r4, #12]
 8017a46:	6832      	ldr	r2, [r6, #0]
 8017a48:	1a9b      	subs	r3, r3, r2
 8017a4a:	42ab      	cmp	r3, r5
 8017a4c:	ddd2      	ble.n	80179f4 <_printf_common+0x3c>
 8017a4e:	0022      	movs	r2, r4
 8017a50:	2301      	movs	r3, #1
 8017a52:	9901      	ldr	r1, [sp, #4]
 8017a54:	9800      	ldr	r0, [sp, #0]
 8017a56:	9f08      	ldr	r7, [sp, #32]
 8017a58:	3219      	adds	r2, #25
 8017a5a:	47b8      	blx	r7
 8017a5c:	3001      	adds	r0, #1
 8017a5e:	d1f0      	bne.n	8017a42 <_printf_common+0x8a>
 8017a60:	2001      	movs	r0, #1
 8017a62:	4240      	negs	r0, r0
 8017a64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017a66:	2030      	movs	r0, #48	@ 0x30
 8017a68:	18e1      	adds	r1, r4, r3
 8017a6a:	3143      	adds	r1, #67	@ 0x43
 8017a6c:	7008      	strb	r0, [r1, #0]
 8017a6e:	0021      	movs	r1, r4
 8017a70:	1c5a      	adds	r2, r3, #1
 8017a72:	3145      	adds	r1, #69	@ 0x45
 8017a74:	7809      	ldrb	r1, [r1, #0]
 8017a76:	18a2      	adds	r2, r4, r2
 8017a78:	3243      	adds	r2, #67	@ 0x43
 8017a7a:	3302      	adds	r3, #2
 8017a7c:	7011      	strb	r1, [r2, #0]
 8017a7e:	e7c1      	b.n	8017a04 <_printf_common+0x4c>
 8017a80:	0022      	movs	r2, r4
 8017a82:	2301      	movs	r3, #1
 8017a84:	9901      	ldr	r1, [sp, #4]
 8017a86:	9800      	ldr	r0, [sp, #0]
 8017a88:	9f08      	ldr	r7, [sp, #32]
 8017a8a:	321a      	adds	r2, #26
 8017a8c:	47b8      	blx	r7
 8017a8e:	3001      	adds	r0, #1
 8017a90:	d0e6      	beq.n	8017a60 <_printf_common+0xa8>
 8017a92:	3601      	adds	r6, #1
 8017a94:	e7d1      	b.n	8017a3a <_printf_common+0x82>
	...

08017a98 <_printf_i>:
 8017a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a9a:	b08b      	sub	sp, #44	@ 0x2c
 8017a9c:	9206      	str	r2, [sp, #24]
 8017a9e:	000a      	movs	r2, r1
 8017aa0:	3243      	adds	r2, #67	@ 0x43
 8017aa2:	9307      	str	r3, [sp, #28]
 8017aa4:	9005      	str	r0, [sp, #20]
 8017aa6:	9203      	str	r2, [sp, #12]
 8017aa8:	7e0a      	ldrb	r2, [r1, #24]
 8017aaa:	000c      	movs	r4, r1
 8017aac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017aae:	2a78      	cmp	r2, #120	@ 0x78
 8017ab0:	d809      	bhi.n	8017ac6 <_printf_i+0x2e>
 8017ab2:	2a62      	cmp	r2, #98	@ 0x62
 8017ab4:	d80b      	bhi.n	8017ace <_printf_i+0x36>
 8017ab6:	2a00      	cmp	r2, #0
 8017ab8:	d100      	bne.n	8017abc <_printf_i+0x24>
 8017aba:	e0bc      	b.n	8017c36 <_printf_i+0x19e>
 8017abc:	497b      	ldr	r1, [pc, #492]	@ (8017cac <_printf_i+0x214>)
 8017abe:	9104      	str	r1, [sp, #16]
 8017ac0:	2a58      	cmp	r2, #88	@ 0x58
 8017ac2:	d100      	bne.n	8017ac6 <_printf_i+0x2e>
 8017ac4:	e090      	b.n	8017be8 <_printf_i+0x150>
 8017ac6:	0025      	movs	r5, r4
 8017ac8:	3542      	adds	r5, #66	@ 0x42
 8017aca:	702a      	strb	r2, [r5, #0]
 8017acc:	e022      	b.n	8017b14 <_printf_i+0x7c>
 8017ace:	0010      	movs	r0, r2
 8017ad0:	3863      	subs	r0, #99	@ 0x63
 8017ad2:	2815      	cmp	r0, #21
 8017ad4:	d8f7      	bhi.n	8017ac6 <_printf_i+0x2e>
 8017ad6:	f7e8 fb29 	bl	800012c <__gnu_thumb1_case_shi>
 8017ada:	0016      	.short	0x0016
 8017adc:	fff6001f 	.word	0xfff6001f
 8017ae0:	fff6fff6 	.word	0xfff6fff6
 8017ae4:	001ffff6 	.word	0x001ffff6
 8017ae8:	fff6fff6 	.word	0xfff6fff6
 8017aec:	fff6fff6 	.word	0xfff6fff6
 8017af0:	003600a1 	.word	0x003600a1
 8017af4:	fff60080 	.word	0xfff60080
 8017af8:	00b2fff6 	.word	0x00b2fff6
 8017afc:	0036fff6 	.word	0x0036fff6
 8017b00:	fff6fff6 	.word	0xfff6fff6
 8017b04:	0084      	.short	0x0084
 8017b06:	0025      	movs	r5, r4
 8017b08:	681a      	ldr	r2, [r3, #0]
 8017b0a:	3542      	adds	r5, #66	@ 0x42
 8017b0c:	1d11      	adds	r1, r2, #4
 8017b0e:	6019      	str	r1, [r3, #0]
 8017b10:	6813      	ldr	r3, [r2, #0]
 8017b12:	702b      	strb	r3, [r5, #0]
 8017b14:	2301      	movs	r3, #1
 8017b16:	e0a0      	b.n	8017c5a <_printf_i+0x1c2>
 8017b18:	6818      	ldr	r0, [r3, #0]
 8017b1a:	6809      	ldr	r1, [r1, #0]
 8017b1c:	1d02      	adds	r2, r0, #4
 8017b1e:	060d      	lsls	r5, r1, #24
 8017b20:	d50b      	bpl.n	8017b3a <_printf_i+0xa2>
 8017b22:	6806      	ldr	r6, [r0, #0]
 8017b24:	601a      	str	r2, [r3, #0]
 8017b26:	2e00      	cmp	r6, #0
 8017b28:	da03      	bge.n	8017b32 <_printf_i+0x9a>
 8017b2a:	232d      	movs	r3, #45	@ 0x2d
 8017b2c:	9a03      	ldr	r2, [sp, #12]
 8017b2e:	4276      	negs	r6, r6
 8017b30:	7013      	strb	r3, [r2, #0]
 8017b32:	4b5e      	ldr	r3, [pc, #376]	@ (8017cac <_printf_i+0x214>)
 8017b34:	270a      	movs	r7, #10
 8017b36:	9304      	str	r3, [sp, #16]
 8017b38:	e018      	b.n	8017b6c <_printf_i+0xd4>
 8017b3a:	6806      	ldr	r6, [r0, #0]
 8017b3c:	601a      	str	r2, [r3, #0]
 8017b3e:	0649      	lsls	r1, r1, #25
 8017b40:	d5f1      	bpl.n	8017b26 <_printf_i+0x8e>
 8017b42:	b236      	sxth	r6, r6
 8017b44:	e7ef      	b.n	8017b26 <_printf_i+0x8e>
 8017b46:	6808      	ldr	r0, [r1, #0]
 8017b48:	6819      	ldr	r1, [r3, #0]
 8017b4a:	c940      	ldmia	r1!, {r6}
 8017b4c:	0605      	lsls	r5, r0, #24
 8017b4e:	d402      	bmi.n	8017b56 <_printf_i+0xbe>
 8017b50:	0640      	lsls	r0, r0, #25
 8017b52:	d500      	bpl.n	8017b56 <_printf_i+0xbe>
 8017b54:	b2b6      	uxth	r6, r6
 8017b56:	6019      	str	r1, [r3, #0]
 8017b58:	4b54      	ldr	r3, [pc, #336]	@ (8017cac <_printf_i+0x214>)
 8017b5a:	270a      	movs	r7, #10
 8017b5c:	9304      	str	r3, [sp, #16]
 8017b5e:	2a6f      	cmp	r2, #111	@ 0x6f
 8017b60:	d100      	bne.n	8017b64 <_printf_i+0xcc>
 8017b62:	3f02      	subs	r7, #2
 8017b64:	0023      	movs	r3, r4
 8017b66:	2200      	movs	r2, #0
 8017b68:	3343      	adds	r3, #67	@ 0x43
 8017b6a:	701a      	strb	r2, [r3, #0]
 8017b6c:	6863      	ldr	r3, [r4, #4]
 8017b6e:	60a3      	str	r3, [r4, #8]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	db03      	blt.n	8017b7c <_printf_i+0xe4>
 8017b74:	2104      	movs	r1, #4
 8017b76:	6822      	ldr	r2, [r4, #0]
 8017b78:	438a      	bics	r2, r1
 8017b7a:	6022      	str	r2, [r4, #0]
 8017b7c:	2e00      	cmp	r6, #0
 8017b7e:	d102      	bne.n	8017b86 <_printf_i+0xee>
 8017b80:	9d03      	ldr	r5, [sp, #12]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d00c      	beq.n	8017ba0 <_printf_i+0x108>
 8017b86:	9d03      	ldr	r5, [sp, #12]
 8017b88:	0030      	movs	r0, r6
 8017b8a:	0039      	movs	r1, r7
 8017b8c:	f7e8 fb5e 	bl	800024c <__aeabi_uidivmod>
 8017b90:	9b04      	ldr	r3, [sp, #16]
 8017b92:	3d01      	subs	r5, #1
 8017b94:	5c5b      	ldrb	r3, [r3, r1]
 8017b96:	702b      	strb	r3, [r5, #0]
 8017b98:	0033      	movs	r3, r6
 8017b9a:	0006      	movs	r6, r0
 8017b9c:	429f      	cmp	r7, r3
 8017b9e:	d9f3      	bls.n	8017b88 <_printf_i+0xf0>
 8017ba0:	2f08      	cmp	r7, #8
 8017ba2:	d109      	bne.n	8017bb8 <_printf_i+0x120>
 8017ba4:	6823      	ldr	r3, [r4, #0]
 8017ba6:	07db      	lsls	r3, r3, #31
 8017ba8:	d506      	bpl.n	8017bb8 <_printf_i+0x120>
 8017baa:	6862      	ldr	r2, [r4, #4]
 8017bac:	6923      	ldr	r3, [r4, #16]
 8017bae:	429a      	cmp	r2, r3
 8017bb0:	dc02      	bgt.n	8017bb8 <_printf_i+0x120>
 8017bb2:	2330      	movs	r3, #48	@ 0x30
 8017bb4:	3d01      	subs	r5, #1
 8017bb6:	702b      	strb	r3, [r5, #0]
 8017bb8:	9b03      	ldr	r3, [sp, #12]
 8017bba:	1b5b      	subs	r3, r3, r5
 8017bbc:	6123      	str	r3, [r4, #16]
 8017bbe:	9b07      	ldr	r3, [sp, #28]
 8017bc0:	0021      	movs	r1, r4
 8017bc2:	9300      	str	r3, [sp, #0]
 8017bc4:	9805      	ldr	r0, [sp, #20]
 8017bc6:	9b06      	ldr	r3, [sp, #24]
 8017bc8:	aa09      	add	r2, sp, #36	@ 0x24
 8017bca:	f7ff fef5 	bl	80179b8 <_printf_common>
 8017bce:	3001      	adds	r0, #1
 8017bd0:	d148      	bne.n	8017c64 <_printf_i+0x1cc>
 8017bd2:	2001      	movs	r0, #1
 8017bd4:	4240      	negs	r0, r0
 8017bd6:	b00b      	add	sp, #44	@ 0x2c
 8017bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bda:	2220      	movs	r2, #32
 8017bdc:	6809      	ldr	r1, [r1, #0]
 8017bde:	430a      	orrs	r2, r1
 8017be0:	6022      	str	r2, [r4, #0]
 8017be2:	2278      	movs	r2, #120	@ 0x78
 8017be4:	4932      	ldr	r1, [pc, #200]	@ (8017cb0 <_printf_i+0x218>)
 8017be6:	9104      	str	r1, [sp, #16]
 8017be8:	0021      	movs	r1, r4
 8017bea:	3145      	adds	r1, #69	@ 0x45
 8017bec:	700a      	strb	r2, [r1, #0]
 8017bee:	6819      	ldr	r1, [r3, #0]
 8017bf0:	6822      	ldr	r2, [r4, #0]
 8017bf2:	c940      	ldmia	r1!, {r6}
 8017bf4:	0610      	lsls	r0, r2, #24
 8017bf6:	d402      	bmi.n	8017bfe <_printf_i+0x166>
 8017bf8:	0650      	lsls	r0, r2, #25
 8017bfa:	d500      	bpl.n	8017bfe <_printf_i+0x166>
 8017bfc:	b2b6      	uxth	r6, r6
 8017bfe:	6019      	str	r1, [r3, #0]
 8017c00:	07d3      	lsls	r3, r2, #31
 8017c02:	d502      	bpl.n	8017c0a <_printf_i+0x172>
 8017c04:	2320      	movs	r3, #32
 8017c06:	4313      	orrs	r3, r2
 8017c08:	6023      	str	r3, [r4, #0]
 8017c0a:	2e00      	cmp	r6, #0
 8017c0c:	d001      	beq.n	8017c12 <_printf_i+0x17a>
 8017c0e:	2710      	movs	r7, #16
 8017c10:	e7a8      	b.n	8017b64 <_printf_i+0xcc>
 8017c12:	2220      	movs	r2, #32
 8017c14:	6823      	ldr	r3, [r4, #0]
 8017c16:	4393      	bics	r3, r2
 8017c18:	6023      	str	r3, [r4, #0]
 8017c1a:	e7f8      	b.n	8017c0e <_printf_i+0x176>
 8017c1c:	681a      	ldr	r2, [r3, #0]
 8017c1e:	680d      	ldr	r5, [r1, #0]
 8017c20:	1d10      	adds	r0, r2, #4
 8017c22:	6949      	ldr	r1, [r1, #20]
 8017c24:	6018      	str	r0, [r3, #0]
 8017c26:	6813      	ldr	r3, [r2, #0]
 8017c28:	062e      	lsls	r6, r5, #24
 8017c2a:	d501      	bpl.n	8017c30 <_printf_i+0x198>
 8017c2c:	6019      	str	r1, [r3, #0]
 8017c2e:	e002      	b.n	8017c36 <_printf_i+0x19e>
 8017c30:	066d      	lsls	r5, r5, #25
 8017c32:	d5fb      	bpl.n	8017c2c <_printf_i+0x194>
 8017c34:	8019      	strh	r1, [r3, #0]
 8017c36:	2300      	movs	r3, #0
 8017c38:	9d03      	ldr	r5, [sp, #12]
 8017c3a:	6123      	str	r3, [r4, #16]
 8017c3c:	e7bf      	b.n	8017bbe <_printf_i+0x126>
 8017c3e:	681a      	ldr	r2, [r3, #0]
 8017c40:	1d11      	adds	r1, r2, #4
 8017c42:	6019      	str	r1, [r3, #0]
 8017c44:	6815      	ldr	r5, [r2, #0]
 8017c46:	2100      	movs	r1, #0
 8017c48:	0028      	movs	r0, r5
 8017c4a:	6862      	ldr	r2, [r4, #4]
 8017c4c:	f000 fa69 	bl	8018122 <memchr>
 8017c50:	2800      	cmp	r0, #0
 8017c52:	d001      	beq.n	8017c58 <_printf_i+0x1c0>
 8017c54:	1b40      	subs	r0, r0, r5
 8017c56:	6060      	str	r0, [r4, #4]
 8017c58:	6863      	ldr	r3, [r4, #4]
 8017c5a:	6123      	str	r3, [r4, #16]
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	9a03      	ldr	r2, [sp, #12]
 8017c60:	7013      	strb	r3, [r2, #0]
 8017c62:	e7ac      	b.n	8017bbe <_printf_i+0x126>
 8017c64:	002a      	movs	r2, r5
 8017c66:	6923      	ldr	r3, [r4, #16]
 8017c68:	9906      	ldr	r1, [sp, #24]
 8017c6a:	9805      	ldr	r0, [sp, #20]
 8017c6c:	9d07      	ldr	r5, [sp, #28]
 8017c6e:	47a8      	blx	r5
 8017c70:	3001      	adds	r0, #1
 8017c72:	d0ae      	beq.n	8017bd2 <_printf_i+0x13a>
 8017c74:	6823      	ldr	r3, [r4, #0]
 8017c76:	079b      	lsls	r3, r3, #30
 8017c78:	d415      	bmi.n	8017ca6 <_printf_i+0x20e>
 8017c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c7c:	68e0      	ldr	r0, [r4, #12]
 8017c7e:	4298      	cmp	r0, r3
 8017c80:	daa9      	bge.n	8017bd6 <_printf_i+0x13e>
 8017c82:	0018      	movs	r0, r3
 8017c84:	e7a7      	b.n	8017bd6 <_printf_i+0x13e>
 8017c86:	0022      	movs	r2, r4
 8017c88:	2301      	movs	r3, #1
 8017c8a:	9906      	ldr	r1, [sp, #24]
 8017c8c:	9805      	ldr	r0, [sp, #20]
 8017c8e:	9e07      	ldr	r6, [sp, #28]
 8017c90:	3219      	adds	r2, #25
 8017c92:	47b0      	blx	r6
 8017c94:	3001      	adds	r0, #1
 8017c96:	d09c      	beq.n	8017bd2 <_printf_i+0x13a>
 8017c98:	3501      	adds	r5, #1
 8017c9a:	68e3      	ldr	r3, [r4, #12]
 8017c9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017c9e:	1a9b      	subs	r3, r3, r2
 8017ca0:	42ab      	cmp	r3, r5
 8017ca2:	dcf0      	bgt.n	8017c86 <_printf_i+0x1ee>
 8017ca4:	e7e9      	b.n	8017c7a <_printf_i+0x1e2>
 8017ca6:	2500      	movs	r5, #0
 8017ca8:	e7f7      	b.n	8017c9a <_printf_i+0x202>
 8017caa:	46c0      	nop			@ (mov r8, r8)
 8017cac:	0801bcbe 	.word	0x0801bcbe
 8017cb0:	0801bccf 	.word	0x0801bccf

08017cb4 <std>:
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	b510      	push	{r4, lr}
 8017cb8:	0004      	movs	r4, r0
 8017cba:	6003      	str	r3, [r0, #0]
 8017cbc:	6043      	str	r3, [r0, #4]
 8017cbe:	6083      	str	r3, [r0, #8]
 8017cc0:	8181      	strh	r1, [r0, #12]
 8017cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8017cc4:	81c2      	strh	r2, [r0, #14]
 8017cc6:	6103      	str	r3, [r0, #16]
 8017cc8:	6143      	str	r3, [r0, #20]
 8017cca:	6183      	str	r3, [r0, #24]
 8017ccc:	0019      	movs	r1, r3
 8017cce:	2208      	movs	r2, #8
 8017cd0:	305c      	adds	r0, #92	@ 0x5c
 8017cd2:	f000 f967 	bl	8017fa4 <memset>
 8017cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8017d04 <std+0x50>)
 8017cd8:	6224      	str	r4, [r4, #32]
 8017cda:	6263      	str	r3, [r4, #36]	@ 0x24
 8017cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8017d08 <std+0x54>)
 8017cde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8017d0c <std+0x58>)
 8017ce2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8017d10 <std+0x5c>)
 8017ce6:	6323      	str	r3, [r4, #48]	@ 0x30
 8017ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8017d14 <std+0x60>)
 8017cea:	429c      	cmp	r4, r3
 8017cec:	d005      	beq.n	8017cfa <std+0x46>
 8017cee:	4b0a      	ldr	r3, [pc, #40]	@ (8017d18 <std+0x64>)
 8017cf0:	429c      	cmp	r4, r3
 8017cf2:	d002      	beq.n	8017cfa <std+0x46>
 8017cf4:	4b09      	ldr	r3, [pc, #36]	@ (8017d1c <std+0x68>)
 8017cf6:	429c      	cmp	r4, r3
 8017cf8:	d103      	bne.n	8017d02 <std+0x4e>
 8017cfa:	0020      	movs	r0, r4
 8017cfc:	3058      	adds	r0, #88	@ 0x58
 8017cfe:	f000 fa0d 	bl	801811c <__retarget_lock_init_recursive>
 8017d02:	bd10      	pop	{r4, pc}
 8017d04:	08017e9d 	.word	0x08017e9d
 8017d08:	08017ec5 	.word	0x08017ec5
 8017d0c:	08017efd 	.word	0x08017efd
 8017d10:	08017f29 	.word	0x08017f29
 8017d14:	20003fc0 	.word	0x20003fc0
 8017d18:	20004028 	.word	0x20004028
 8017d1c:	20004090 	.word	0x20004090

08017d20 <stdio_exit_handler>:
 8017d20:	b510      	push	{r4, lr}
 8017d22:	4a03      	ldr	r2, [pc, #12]	@ (8017d30 <stdio_exit_handler+0x10>)
 8017d24:	4903      	ldr	r1, [pc, #12]	@ (8017d34 <stdio_exit_handler+0x14>)
 8017d26:	4804      	ldr	r0, [pc, #16]	@ (8017d38 <stdio_exit_handler+0x18>)
 8017d28:	f000 f86c 	bl	8017e04 <_fwalk_sglue>
 8017d2c:	bd10      	pop	{r4, pc}
 8017d2e:	46c0      	nop			@ (mov r8, r8)
 8017d30:	200001e4 	.word	0x200001e4
 8017d34:	08019df5 	.word	0x08019df5
 8017d38:	200001f4 	.word	0x200001f4

08017d3c <cleanup_stdio>:
 8017d3c:	6841      	ldr	r1, [r0, #4]
 8017d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8017d6c <cleanup_stdio+0x30>)
 8017d40:	b510      	push	{r4, lr}
 8017d42:	0004      	movs	r4, r0
 8017d44:	4299      	cmp	r1, r3
 8017d46:	d001      	beq.n	8017d4c <cleanup_stdio+0x10>
 8017d48:	f002 f854 	bl	8019df4 <_fflush_r>
 8017d4c:	68a1      	ldr	r1, [r4, #8]
 8017d4e:	4b08      	ldr	r3, [pc, #32]	@ (8017d70 <cleanup_stdio+0x34>)
 8017d50:	4299      	cmp	r1, r3
 8017d52:	d002      	beq.n	8017d5a <cleanup_stdio+0x1e>
 8017d54:	0020      	movs	r0, r4
 8017d56:	f002 f84d 	bl	8019df4 <_fflush_r>
 8017d5a:	68e1      	ldr	r1, [r4, #12]
 8017d5c:	4b05      	ldr	r3, [pc, #20]	@ (8017d74 <cleanup_stdio+0x38>)
 8017d5e:	4299      	cmp	r1, r3
 8017d60:	d002      	beq.n	8017d68 <cleanup_stdio+0x2c>
 8017d62:	0020      	movs	r0, r4
 8017d64:	f002 f846 	bl	8019df4 <_fflush_r>
 8017d68:	bd10      	pop	{r4, pc}
 8017d6a:	46c0      	nop			@ (mov r8, r8)
 8017d6c:	20003fc0 	.word	0x20003fc0
 8017d70:	20004028 	.word	0x20004028
 8017d74:	20004090 	.word	0x20004090

08017d78 <global_stdio_init.part.0>:
 8017d78:	b510      	push	{r4, lr}
 8017d7a:	4b09      	ldr	r3, [pc, #36]	@ (8017da0 <global_stdio_init.part.0+0x28>)
 8017d7c:	4a09      	ldr	r2, [pc, #36]	@ (8017da4 <global_stdio_init.part.0+0x2c>)
 8017d7e:	2104      	movs	r1, #4
 8017d80:	601a      	str	r2, [r3, #0]
 8017d82:	4809      	ldr	r0, [pc, #36]	@ (8017da8 <global_stdio_init.part.0+0x30>)
 8017d84:	2200      	movs	r2, #0
 8017d86:	f7ff ff95 	bl	8017cb4 <std>
 8017d8a:	2201      	movs	r2, #1
 8017d8c:	2109      	movs	r1, #9
 8017d8e:	4807      	ldr	r0, [pc, #28]	@ (8017dac <global_stdio_init.part.0+0x34>)
 8017d90:	f7ff ff90 	bl	8017cb4 <std>
 8017d94:	2202      	movs	r2, #2
 8017d96:	2112      	movs	r1, #18
 8017d98:	4805      	ldr	r0, [pc, #20]	@ (8017db0 <global_stdio_init.part.0+0x38>)
 8017d9a:	f7ff ff8b 	bl	8017cb4 <std>
 8017d9e:	bd10      	pop	{r4, pc}
 8017da0:	200040f8 	.word	0x200040f8
 8017da4:	08017d21 	.word	0x08017d21
 8017da8:	20003fc0 	.word	0x20003fc0
 8017dac:	20004028 	.word	0x20004028
 8017db0:	20004090 	.word	0x20004090

08017db4 <__sfp_lock_acquire>:
 8017db4:	b510      	push	{r4, lr}
 8017db6:	4802      	ldr	r0, [pc, #8]	@ (8017dc0 <__sfp_lock_acquire+0xc>)
 8017db8:	f000 f9b1 	bl	801811e <__retarget_lock_acquire_recursive>
 8017dbc:	bd10      	pop	{r4, pc}
 8017dbe:	46c0      	nop			@ (mov r8, r8)
 8017dc0:	20004101 	.word	0x20004101

08017dc4 <__sfp_lock_release>:
 8017dc4:	b510      	push	{r4, lr}
 8017dc6:	4802      	ldr	r0, [pc, #8]	@ (8017dd0 <__sfp_lock_release+0xc>)
 8017dc8:	f000 f9aa 	bl	8018120 <__retarget_lock_release_recursive>
 8017dcc:	bd10      	pop	{r4, pc}
 8017dce:	46c0      	nop			@ (mov r8, r8)
 8017dd0:	20004101 	.word	0x20004101

08017dd4 <__sinit>:
 8017dd4:	b510      	push	{r4, lr}
 8017dd6:	0004      	movs	r4, r0
 8017dd8:	f7ff ffec 	bl	8017db4 <__sfp_lock_acquire>
 8017ddc:	6a23      	ldr	r3, [r4, #32]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d002      	beq.n	8017de8 <__sinit+0x14>
 8017de2:	f7ff ffef 	bl	8017dc4 <__sfp_lock_release>
 8017de6:	bd10      	pop	{r4, pc}
 8017de8:	4b04      	ldr	r3, [pc, #16]	@ (8017dfc <__sinit+0x28>)
 8017dea:	6223      	str	r3, [r4, #32]
 8017dec:	4b04      	ldr	r3, [pc, #16]	@ (8017e00 <__sinit+0x2c>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d1f6      	bne.n	8017de2 <__sinit+0xe>
 8017df4:	f7ff ffc0 	bl	8017d78 <global_stdio_init.part.0>
 8017df8:	e7f3      	b.n	8017de2 <__sinit+0xe>
 8017dfa:	46c0      	nop			@ (mov r8, r8)
 8017dfc:	08017d3d 	.word	0x08017d3d
 8017e00:	200040f8 	.word	0x200040f8

08017e04 <_fwalk_sglue>:
 8017e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e06:	0014      	movs	r4, r2
 8017e08:	2600      	movs	r6, #0
 8017e0a:	9000      	str	r0, [sp, #0]
 8017e0c:	9101      	str	r1, [sp, #4]
 8017e0e:	68a5      	ldr	r5, [r4, #8]
 8017e10:	6867      	ldr	r7, [r4, #4]
 8017e12:	3f01      	subs	r7, #1
 8017e14:	d504      	bpl.n	8017e20 <_fwalk_sglue+0x1c>
 8017e16:	6824      	ldr	r4, [r4, #0]
 8017e18:	2c00      	cmp	r4, #0
 8017e1a:	d1f8      	bne.n	8017e0e <_fwalk_sglue+0xa>
 8017e1c:	0030      	movs	r0, r6
 8017e1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017e20:	89ab      	ldrh	r3, [r5, #12]
 8017e22:	2b01      	cmp	r3, #1
 8017e24:	d908      	bls.n	8017e38 <_fwalk_sglue+0x34>
 8017e26:	220e      	movs	r2, #14
 8017e28:	5eab      	ldrsh	r3, [r5, r2]
 8017e2a:	3301      	adds	r3, #1
 8017e2c:	d004      	beq.n	8017e38 <_fwalk_sglue+0x34>
 8017e2e:	0029      	movs	r1, r5
 8017e30:	9800      	ldr	r0, [sp, #0]
 8017e32:	9b01      	ldr	r3, [sp, #4]
 8017e34:	4798      	blx	r3
 8017e36:	4306      	orrs	r6, r0
 8017e38:	3568      	adds	r5, #104	@ 0x68
 8017e3a:	e7ea      	b.n	8017e12 <_fwalk_sglue+0xe>

08017e3c <iprintf>:
 8017e3c:	b40f      	push	{r0, r1, r2, r3}
 8017e3e:	b507      	push	{r0, r1, r2, lr}
 8017e40:	4905      	ldr	r1, [pc, #20]	@ (8017e58 <iprintf+0x1c>)
 8017e42:	ab04      	add	r3, sp, #16
 8017e44:	6808      	ldr	r0, [r1, #0]
 8017e46:	cb04      	ldmia	r3!, {r2}
 8017e48:	6881      	ldr	r1, [r0, #8]
 8017e4a:	9301      	str	r3, [sp, #4]
 8017e4c:	f001 fe30 	bl	8019ab0 <_vfiprintf_r>
 8017e50:	b003      	add	sp, #12
 8017e52:	bc08      	pop	{r3}
 8017e54:	b004      	add	sp, #16
 8017e56:	4718      	bx	r3
 8017e58:	200001f0 	.word	0x200001f0

08017e5c <siprintf>:
 8017e5c:	b40e      	push	{r1, r2, r3}
 8017e5e:	b500      	push	{lr}
 8017e60:	490b      	ldr	r1, [pc, #44]	@ (8017e90 <siprintf+0x34>)
 8017e62:	b09c      	sub	sp, #112	@ 0x70
 8017e64:	ab1d      	add	r3, sp, #116	@ 0x74
 8017e66:	9002      	str	r0, [sp, #8]
 8017e68:	9006      	str	r0, [sp, #24]
 8017e6a:	9107      	str	r1, [sp, #28]
 8017e6c:	9104      	str	r1, [sp, #16]
 8017e6e:	4809      	ldr	r0, [pc, #36]	@ (8017e94 <siprintf+0x38>)
 8017e70:	4909      	ldr	r1, [pc, #36]	@ (8017e98 <siprintf+0x3c>)
 8017e72:	cb04      	ldmia	r3!, {r2}
 8017e74:	9105      	str	r1, [sp, #20]
 8017e76:	6800      	ldr	r0, [r0, #0]
 8017e78:	a902      	add	r1, sp, #8
 8017e7a:	9301      	str	r3, [sp, #4]
 8017e7c:	f001 fcf2 	bl	8019864 <_svfiprintf_r>
 8017e80:	2200      	movs	r2, #0
 8017e82:	9b02      	ldr	r3, [sp, #8]
 8017e84:	701a      	strb	r2, [r3, #0]
 8017e86:	b01c      	add	sp, #112	@ 0x70
 8017e88:	bc08      	pop	{r3}
 8017e8a:	b003      	add	sp, #12
 8017e8c:	4718      	bx	r3
 8017e8e:	46c0      	nop			@ (mov r8, r8)
 8017e90:	7fffffff 	.word	0x7fffffff
 8017e94:	200001f0 	.word	0x200001f0
 8017e98:	ffff0208 	.word	0xffff0208

08017e9c <__sread>:
 8017e9c:	b570      	push	{r4, r5, r6, lr}
 8017e9e:	000c      	movs	r4, r1
 8017ea0:	250e      	movs	r5, #14
 8017ea2:	5f49      	ldrsh	r1, [r1, r5]
 8017ea4:	f000 f8e8 	bl	8018078 <_read_r>
 8017ea8:	2800      	cmp	r0, #0
 8017eaa:	db03      	blt.n	8017eb4 <__sread+0x18>
 8017eac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017eae:	181b      	adds	r3, r3, r0
 8017eb0:	6563      	str	r3, [r4, #84]	@ 0x54
 8017eb2:	bd70      	pop	{r4, r5, r6, pc}
 8017eb4:	89a3      	ldrh	r3, [r4, #12]
 8017eb6:	4a02      	ldr	r2, [pc, #8]	@ (8017ec0 <__sread+0x24>)
 8017eb8:	4013      	ands	r3, r2
 8017eba:	81a3      	strh	r3, [r4, #12]
 8017ebc:	e7f9      	b.n	8017eb2 <__sread+0x16>
 8017ebe:	46c0      	nop			@ (mov r8, r8)
 8017ec0:	ffffefff 	.word	0xffffefff

08017ec4 <__swrite>:
 8017ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ec6:	001f      	movs	r7, r3
 8017ec8:	898b      	ldrh	r3, [r1, #12]
 8017eca:	0005      	movs	r5, r0
 8017ecc:	000c      	movs	r4, r1
 8017ece:	0016      	movs	r6, r2
 8017ed0:	05db      	lsls	r3, r3, #23
 8017ed2:	d505      	bpl.n	8017ee0 <__swrite+0x1c>
 8017ed4:	230e      	movs	r3, #14
 8017ed6:	5ec9      	ldrsh	r1, [r1, r3]
 8017ed8:	2200      	movs	r2, #0
 8017eda:	2302      	movs	r3, #2
 8017edc:	f000 f8b8 	bl	8018050 <_lseek_r>
 8017ee0:	89a3      	ldrh	r3, [r4, #12]
 8017ee2:	4a05      	ldr	r2, [pc, #20]	@ (8017ef8 <__swrite+0x34>)
 8017ee4:	0028      	movs	r0, r5
 8017ee6:	4013      	ands	r3, r2
 8017ee8:	81a3      	strh	r3, [r4, #12]
 8017eea:	0032      	movs	r2, r6
 8017eec:	230e      	movs	r3, #14
 8017eee:	5ee1      	ldrsh	r1, [r4, r3]
 8017ef0:	003b      	movs	r3, r7
 8017ef2:	f000 f8d5 	bl	80180a0 <_write_r>
 8017ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ef8:	ffffefff 	.word	0xffffefff

08017efc <__sseek>:
 8017efc:	b570      	push	{r4, r5, r6, lr}
 8017efe:	000c      	movs	r4, r1
 8017f00:	250e      	movs	r5, #14
 8017f02:	5f49      	ldrsh	r1, [r1, r5]
 8017f04:	f000 f8a4 	bl	8018050 <_lseek_r>
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	1c42      	adds	r2, r0, #1
 8017f0c:	d103      	bne.n	8017f16 <__sseek+0x1a>
 8017f0e:	4a05      	ldr	r2, [pc, #20]	@ (8017f24 <__sseek+0x28>)
 8017f10:	4013      	ands	r3, r2
 8017f12:	81a3      	strh	r3, [r4, #12]
 8017f14:	bd70      	pop	{r4, r5, r6, pc}
 8017f16:	2280      	movs	r2, #128	@ 0x80
 8017f18:	0152      	lsls	r2, r2, #5
 8017f1a:	4313      	orrs	r3, r2
 8017f1c:	81a3      	strh	r3, [r4, #12]
 8017f1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017f20:	e7f8      	b.n	8017f14 <__sseek+0x18>
 8017f22:	46c0      	nop			@ (mov r8, r8)
 8017f24:	ffffefff 	.word	0xffffefff

08017f28 <__sclose>:
 8017f28:	b510      	push	{r4, lr}
 8017f2a:	230e      	movs	r3, #14
 8017f2c:	5ec9      	ldrsh	r1, [r1, r3]
 8017f2e:	f000 f87d 	bl	801802c <_close_r>
 8017f32:	bd10      	pop	{r4, pc}

08017f34 <_vsniprintf_r>:
 8017f34:	b530      	push	{r4, r5, lr}
 8017f36:	0014      	movs	r4, r2
 8017f38:	0005      	movs	r5, r0
 8017f3a:	001a      	movs	r2, r3
 8017f3c:	b09b      	sub	sp, #108	@ 0x6c
 8017f3e:	2c00      	cmp	r4, #0
 8017f40:	da05      	bge.n	8017f4e <_vsniprintf_r+0x1a>
 8017f42:	238b      	movs	r3, #139	@ 0x8b
 8017f44:	6003      	str	r3, [r0, #0]
 8017f46:	2001      	movs	r0, #1
 8017f48:	4240      	negs	r0, r0
 8017f4a:	b01b      	add	sp, #108	@ 0x6c
 8017f4c:	bd30      	pop	{r4, r5, pc}
 8017f4e:	2382      	movs	r3, #130	@ 0x82
 8017f50:	4668      	mov	r0, sp
 8017f52:	009b      	lsls	r3, r3, #2
 8017f54:	8183      	strh	r3, [r0, #12]
 8017f56:	2300      	movs	r3, #0
 8017f58:	9100      	str	r1, [sp, #0]
 8017f5a:	9104      	str	r1, [sp, #16]
 8017f5c:	429c      	cmp	r4, r3
 8017f5e:	d000      	beq.n	8017f62 <_vsniprintf_r+0x2e>
 8017f60:	1e63      	subs	r3, r4, #1
 8017f62:	9302      	str	r3, [sp, #8]
 8017f64:	9305      	str	r3, [sp, #20]
 8017f66:	2301      	movs	r3, #1
 8017f68:	4669      	mov	r1, sp
 8017f6a:	425b      	negs	r3, r3
 8017f6c:	81cb      	strh	r3, [r1, #14]
 8017f6e:	0028      	movs	r0, r5
 8017f70:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017f72:	f001 fc77 	bl	8019864 <_svfiprintf_r>
 8017f76:	1c43      	adds	r3, r0, #1
 8017f78:	da01      	bge.n	8017f7e <_vsniprintf_r+0x4a>
 8017f7a:	238b      	movs	r3, #139	@ 0x8b
 8017f7c:	602b      	str	r3, [r5, #0]
 8017f7e:	2c00      	cmp	r4, #0
 8017f80:	d0e3      	beq.n	8017f4a <_vsniprintf_r+0x16>
 8017f82:	2200      	movs	r2, #0
 8017f84:	9b00      	ldr	r3, [sp, #0]
 8017f86:	701a      	strb	r2, [r3, #0]
 8017f88:	e7df      	b.n	8017f4a <_vsniprintf_r+0x16>
	...

08017f8c <vsniprintf>:
 8017f8c:	b513      	push	{r0, r1, r4, lr}
 8017f8e:	4c04      	ldr	r4, [pc, #16]	@ (8017fa0 <vsniprintf+0x14>)
 8017f90:	9300      	str	r3, [sp, #0]
 8017f92:	0013      	movs	r3, r2
 8017f94:	000a      	movs	r2, r1
 8017f96:	0001      	movs	r1, r0
 8017f98:	6820      	ldr	r0, [r4, #0]
 8017f9a:	f7ff ffcb 	bl	8017f34 <_vsniprintf_r>
 8017f9e:	bd16      	pop	{r1, r2, r4, pc}
 8017fa0:	200001f0 	.word	0x200001f0

08017fa4 <memset>:
 8017fa4:	0003      	movs	r3, r0
 8017fa6:	1882      	adds	r2, r0, r2
 8017fa8:	4293      	cmp	r3, r2
 8017faa:	d100      	bne.n	8017fae <memset+0xa>
 8017fac:	4770      	bx	lr
 8017fae:	7019      	strb	r1, [r3, #0]
 8017fb0:	3301      	adds	r3, #1
 8017fb2:	e7f9      	b.n	8017fa8 <memset+0x4>

08017fb4 <strchr>:
 8017fb4:	b2c9      	uxtb	r1, r1
 8017fb6:	7803      	ldrb	r3, [r0, #0]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d004      	beq.n	8017fc6 <strchr+0x12>
 8017fbc:	428b      	cmp	r3, r1
 8017fbe:	d100      	bne.n	8017fc2 <strchr+0xe>
 8017fc0:	4770      	bx	lr
 8017fc2:	3001      	adds	r0, #1
 8017fc4:	e7f7      	b.n	8017fb6 <strchr+0x2>
 8017fc6:	424b      	negs	r3, r1
 8017fc8:	4159      	adcs	r1, r3
 8017fca:	4249      	negs	r1, r1
 8017fcc:	4008      	ands	r0, r1
 8017fce:	e7f7      	b.n	8017fc0 <strchr+0xc>

08017fd0 <strncpy>:
 8017fd0:	0003      	movs	r3, r0
 8017fd2:	b530      	push	{r4, r5, lr}
 8017fd4:	001d      	movs	r5, r3
 8017fd6:	2a00      	cmp	r2, #0
 8017fd8:	d006      	beq.n	8017fe8 <strncpy+0x18>
 8017fda:	780c      	ldrb	r4, [r1, #0]
 8017fdc:	3a01      	subs	r2, #1
 8017fde:	3301      	adds	r3, #1
 8017fe0:	702c      	strb	r4, [r5, #0]
 8017fe2:	3101      	adds	r1, #1
 8017fe4:	2c00      	cmp	r4, #0
 8017fe6:	d1f5      	bne.n	8017fd4 <strncpy+0x4>
 8017fe8:	2100      	movs	r1, #0
 8017fea:	189a      	adds	r2, r3, r2
 8017fec:	4293      	cmp	r3, r2
 8017fee:	d100      	bne.n	8017ff2 <strncpy+0x22>
 8017ff0:	bd30      	pop	{r4, r5, pc}
 8017ff2:	7019      	strb	r1, [r3, #0]
 8017ff4:	3301      	adds	r3, #1
 8017ff6:	e7f9      	b.n	8017fec <strncpy+0x1c>

08017ff8 <strstr>:
 8017ff8:	780a      	ldrb	r2, [r1, #0]
 8017ffa:	b530      	push	{r4, r5, lr}
 8017ffc:	2a00      	cmp	r2, #0
 8017ffe:	d10c      	bne.n	801801a <strstr+0x22>
 8018000:	bd30      	pop	{r4, r5, pc}
 8018002:	429a      	cmp	r2, r3
 8018004:	d108      	bne.n	8018018 <strstr+0x20>
 8018006:	2301      	movs	r3, #1
 8018008:	5ccc      	ldrb	r4, [r1, r3]
 801800a:	2c00      	cmp	r4, #0
 801800c:	d0f8      	beq.n	8018000 <strstr+0x8>
 801800e:	5cc5      	ldrb	r5, [r0, r3]
 8018010:	42a5      	cmp	r5, r4
 8018012:	d101      	bne.n	8018018 <strstr+0x20>
 8018014:	3301      	adds	r3, #1
 8018016:	e7f7      	b.n	8018008 <strstr+0x10>
 8018018:	3001      	adds	r0, #1
 801801a:	7803      	ldrb	r3, [r0, #0]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d1f0      	bne.n	8018002 <strstr+0xa>
 8018020:	0018      	movs	r0, r3
 8018022:	e7ed      	b.n	8018000 <strstr+0x8>

08018024 <_localeconv_r>:
 8018024:	4800      	ldr	r0, [pc, #0]	@ (8018028 <_localeconv_r+0x4>)
 8018026:	4770      	bx	lr
 8018028:	20000330 	.word	0x20000330

0801802c <_close_r>:
 801802c:	2300      	movs	r3, #0
 801802e:	b570      	push	{r4, r5, r6, lr}
 8018030:	4d06      	ldr	r5, [pc, #24]	@ (801804c <_close_r+0x20>)
 8018032:	0004      	movs	r4, r0
 8018034:	0008      	movs	r0, r1
 8018036:	602b      	str	r3, [r5, #0]
 8018038:	f7f0 ffba 	bl	8008fb0 <_close>
 801803c:	1c43      	adds	r3, r0, #1
 801803e:	d103      	bne.n	8018048 <_close_r+0x1c>
 8018040:	682b      	ldr	r3, [r5, #0]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d000      	beq.n	8018048 <_close_r+0x1c>
 8018046:	6023      	str	r3, [r4, #0]
 8018048:	bd70      	pop	{r4, r5, r6, pc}
 801804a:	46c0      	nop			@ (mov r8, r8)
 801804c:	200040fc 	.word	0x200040fc

08018050 <_lseek_r>:
 8018050:	b570      	push	{r4, r5, r6, lr}
 8018052:	0004      	movs	r4, r0
 8018054:	0008      	movs	r0, r1
 8018056:	0011      	movs	r1, r2
 8018058:	001a      	movs	r2, r3
 801805a:	2300      	movs	r3, #0
 801805c:	4d05      	ldr	r5, [pc, #20]	@ (8018074 <_lseek_r+0x24>)
 801805e:	602b      	str	r3, [r5, #0]
 8018060:	f7f0 ffc7 	bl	8008ff2 <_lseek>
 8018064:	1c43      	adds	r3, r0, #1
 8018066:	d103      	bne.n	8018070 <_lseek_r+0x20>
 8018068:	682b      	ldr	r3, [r5, #0]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d000      	beq.n	8018070 <_lseek_r+0x20>
 801806e:	6023      	str	r3, [r4, #0]
 8018070:	bd70      	pop	{r4, r5, r6, pc}
 8018072:	46c0      	nop			@ (mov r8, r8)
 8018074:	200040fc 	.word	0x200040fc

08018078 <_read_r>:
 8018078:	b570      	push	{r4, r5, r6, lr}
 801807a:	0004      	movs	r4, r0
 801807c:	0008      	movs	r0, r1
 801807e:	0011      	movs	r1, r2
 8018080:	001a      	movs	r2, r3
 8018082:	2300      	movs	r3, #0
 8018084:	4d05      	ldr	r5, [pc, #20]	@ (801809c <_read_r+0x24>)
 8018086:	602b      	str	r3, [r5, #0]
 8018088:	f7f0 ff75 	bl	8008f76 <_read>
 801808c:	1c43      	adds	r3, r0, #1
 801808e:	d103      	bne.n	8018098 <_read_r+0x20>
 8018090:	682b      	ldr	r3, [r5, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d000      	beq.n	8018098 <_read_r+0x20>
 8018096:	6023      	str	r3, [r4, #0]
 8018098:	bd70      	pop	{r4, r5, r6, pc}
 801809a:	46c0      	nop			@ (mov r8, r8)
 801809c:	200040fc 	.word	0x200040fc

080180a0 <_write_r>:
 80180a0:	b570      	push	{r4, r5, r6, lr}
 80180a2:	0004      	movs	r4, r0
 80180a4:	0008      	movs	r0, r1
 80180a6:	0011      	movs	r1, r2
 80180a8:	001a      	movs	r2, r3
 80180aa:	2300      	movs	r3, #0
 80180ac:	4d05      	ldr	r5, [pc, #20]	@ (80180c4 <_write_r+0x24>)
 80180ae:	602b      	str	r3, [r5, #0]
 80180b0:	f7f1 fbd2 	bl	8009858 <_write>
 80180b4:	1c43      	adds	r3, r0, #1
 80180b6:	d103      	bne.n	80180c0 <_write_r+0x20>
 80180b8:	682b      	ldr	r3, [r5, #0]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d000      	beq.n	80180c0 <_write_r+0x20>
 80180be:	6023      	str	r3, [r4, #0]
 80180c0:	bd70      	pop	{r4, r5, r6, pc}
 80180c2:	46c0      	nop			@ (mov r8, r8)
 80180c4:	200040fc 	.word	0x200040fc

080180c8 <__errno>:
 80180c8:	4b01      	ldr	r3, [pc, #4]	@ (80180d0 <__errno+0x8>)
 80180ca:	6818      	ldr	r0, [r3, #0]
 80180cc:	4770      	bx	lr
 80180ce:	46c0      	nop			@ (mov r8, r8)
 80180d0:	200001f0 	.word	0x200001f0

080180d4 <__libc_init_array>:
 80180d4:	b570      	push	{r4, r5, r6, lr}
 80180d6:	2600      	movs	r6, #0
 80180d8:	4c0c      	ldr	r4, [pc, #48]	@ (801810c <__libc_init_array+0x38>)
 80180da:	4d0d      	ldr	r5, [pc, #52]	@ (8018110 <__libc_init_array+0x3c>)
 80180dc:	1b64      	subs	r4, r4, r5
 80180de:	10a4      	asrs	r4, r4, #2
 80180e0:	42a6      	cmp	r6, r4
 80180e2:	d109      	bne.n	80180f8 <__libc_init_array+0x24>
 80180e4:	2600      	movs	r6, #0
 80180e6:	f002 fe57 	bl	801ad98 <_init>
 80180ea:	4c0a      	ldr	r4, [pc, #40]	@ (8018114 <__libc_init_array+0x40>)
 80180ec:	4d0a      	ldr	r5, [pc, #40]	@ (8018118 <__libc_init_array+0x44>)
 80180ee:	1b64      	subs	r4, r4, r5
 80180f0:	10a4      	asrs	r4, r4, #2
 80180f2:	42a6      	cmp	r6, r4
 80180f4:	d105      	bne.n	8018102 <__libc_init_array+0x2e>
 80180f6:	bd70      	pop	{r4, r5, r6, pc}
 80180f8:	00b3      	lsls	r3, r6, #2
 80180fa:	58eb      	ldr	r3, [r5, r3]
 80180fc:	4798      	blx	r3
 80180fe:	3601      	adds	r6, #1
 8018100:	e7ee      	b.n	80180e0 <__libc_init_array+0xc>
 8018102:	00b3      	lsls	r3, r6, #2
 8018104:	58eb      	ldr	r3, [r5, r3]
 8018106:	4798      	blx	r3
 8018108:	3601      	adds	r6, #1
 801810a:	e7f2      	b.n	80180f2 <__libc_init_array+0x1e>
 801810c:	0801c040 	.word	0x0801c040
 8018110:	0801c040 	.word	0x0801c040
 8018114:	0801c044 	.word	0x0801c044
 8018118:	0801c040 	.word	0x0801c040

0801811c <__retarget_lock_init_recursive>:
 801811c:	4770      	bx	lr

0801811e <__retarget_lock_acquire_recursive>:
 801811e:	4770      	bx	lr

08018120 <__retarget_lock_release_recursive>:
 8018120:	4770      	bx	lr

08018122 <memchr>:
 8018122:	b2c9      	uxtb	r1, r1
 8018124:	1882      	adds	r2, r0, r2
 8018126:	4290      	cmp	r0, r2
 8018128:	d101      	bne.n	801812e <memchr+0xc>
 801812a:	2000      	movs	r0, #0
 801812c:	4770      	bx	lr
 801812e:	7803      	ldrb	r3, [r0, #0]
 8018130:	428b      	cmp	r3, r1
 8018132:	d0fb      	beq.n	801812c <memchr+0xa>
 8018134:	3001      	adds	r0, #1
 8018136:	e7f6      	b.n	8018126 <memchr+0x4>

08018138 <memcpy>:
 8018138:	2300      	movs	r3, #0
 801813a:	b510      	push	{r4, lr}
 801813c:	429a      	cmp	r2, r3
 801813e:	d100      	bne.n	8018142 <memcpy+0xa>
 8018140:	bd10      	pop	{r4, pc}
 8018142:	5ccc      	ldrb	r4, [r1, r3]
 8018144:	54c4      	strb	r4, [r0, r3]
 8018146:	3301      	adds	r3, #1
 8018148:	e7f8      	b.n	801813c <memcpy+0x4>

0801814a <quorem>:
 801814a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801814c:	6902      	ldr	r2, [r0, #16]
 801814e:	690f      	ldr	r7, [r1, #16]
 8018150:	b087      	sub	sp, #28
 8018152:	0006      	movs	r6, r0
 8018154:	000b      	movs	r3, r1
 8018156:	2000      	movs	r0, #0
 8018158:	9102      	str	r1, [sp, #8]
 801815a:	42ba      	cmp	r2, r7
 801815c:	db6d      	blt.n	801823a <quorem+0xf0>
 801815e:	3f01      	subs	r7, #1
 8018160:	00bc      	lsls	r4, r7, #2
 8018162:	3314      	adds	r3, #20
 8018164:	9305      	str	r3, [sp, #20]
 8018166:	191b      	adds	r3, r3, r4
 8018168:	9303      	str	r3, [sp, #12]
 801816a:	0033      	movs	r3, r6
 801816c:	3314      	adds	r3, #20
 801816e:	191c      	adds	r4, r3, r4
 8018170:	9301      	str	r3, [sp, #4]
 8018172:	6823      	ldr	r3, [r4, #0]
 8018174:	9304      	str	r3, [sp, #16]
 8018176:	9b03      	ldr	r3, [sp, #12]
 8018178:	9804      	ldr	r0, [sp, #16]
 801817a:	681d      	ldr	r5, [r3, #0]
 801817c:	3501      	adds	r5, #1
 801817e:	0029      	movs	r1, r5
 8018180:	f7e7 ffde 	bl	8000140 <__udivsi3>
 8018184:	9b04      	ldr	r3, [sp, #16]
 8018186:	9000      	str	r0, [sp, #0]
 8018188:	42ab      	cmp	r3, r5
 801818a:	d32b      	bcc.n	80181e4 <quorem+0x9a>
 801818c:	9b05      	ldr	r3, [sp, #20]
 801818e:	9d01      	ldr	r5, [sp, #4]
 8018190:	469c      	mov	ip, r3
 8018192:	2300      	movs	r3, #0
 8018194:	9305      	str	r3, [sp, #20]
 8018196:	9304      	str	r3, [sp, #16]
 8018198:	4662      	mov	r2, ip
 801819a:	ca08      	ldmia	r2!, {r3}
 801819c:	6828      	ldr	r0, [r5, #0]
 801819e:	4694      	mov	ip, r2
 80181a0:	9a00      	ldr	r2, [sp, #0]
 80181a2:	b299      	uxth	r1, r3
 80181a4:	4351      	muls	r1, r2
 80181a6:	9a05      	ldr	r2, [sp, #20]
 80181a8:	0c1b      	lsrs	r3, r3, #16
 80181aa:	1889      	adds	r1, r1, r2
 80181ac:	9a00      	ldr	r2, [sp, #0]
 80181ae:	4353      	muls	r3, r2
 80181b0:	0c0a      	lsrs	r2, r1, #16
 80181b2:	189b      	adds	r3, r3, r2
 80181b4:	0c1a      	lsrs	r2, r3, #16
 80181b6:	b289      	uxth	r1, r1
 80181b8:	9205      	str	r2, [sp, #20]
 80181ba:	b282      	uxth	r2, r0
 80181bc:	1a52      	subs	r2, r2, r1
 80181be:	9904      	ldr	r1, [sp, #16]
 80181c0:	0c00      	lsrs	r0, r0, #16
 80181c2:	1852      	adds	r2, r2, r1
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	1411      	asrs	r1, r2, #16
 80181c8:	1ac3      	subs	r3, r0, r3
 80181ca:	185b      	adds	r3, r3, r1
 80181cc:	1419      	asrs	r1, r3, #16
 80181ce:	b292      	uxth	r2, r2
 80181d0:	041b      	lsls	r3, r3, #16
 80181d2:	431a      	orrs	r2, r3
 80181d4:	9b03      	ldr	r3, [sp, #12]
 80181d6:	9104      	str	r1, [sp, #16]
 80181d8:	c504      	stmia	r5!, {r2}
 80181da:	4563      	cmp	r3, ip
 80181dc:	d2dc      	bcs.n	8018198 <quorem+0x4e>
 80181de:	6823      	ldr	r3, [r4, #0]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d030      	beq.n	8018246 <quorem+0xfc>
 80181e4:	0030      	movs	r0, r6
 80181e6:	9902      	ldr	r1, [sp, #8]
 80181e8:	f001 f9c6 	bl	8019578 <__mcmp>
 80181ec:	2800      	cmp	r0, #0
 80181ee:	db23      	blt.n	8018238 <quorem+0xee>
 80181f0:	0034      	movs	r4, r6
 80181f2:	2500      	movs	r5, #0
 80181f4:	9902      	ldr	r1, [sp, #8]
 80181f6:	3414      	adds	r4, #20
 80181f8:	3114      	adds	r1, #20
 80181fa:	6823      	ldr	r3, [r4, #0]
 80181fc:	c901      	ldmia	r1!, {r0}
 80181fe:	9302      	str	r3, [sp, #8]
 8018200:	466b      	mov	r3, sp
 8018202:	891b      	ldrh	r3, [r3, #8]
 8018204:	b282      	uxth	r2, r0
 8018206:	1a9a      	subs	r2, r3, r2
 8018208:	9b02      	ldr	r3, [sp, #8]
 801820a:	1952      	adds	r2, r2, r5
 801820c:	0c00      	lsrs	r0, r0, #16
 801820e:	0c1b      	lsrs	r3, r3, #16
 8018210:	1a1b      	subs	r3, r3, r0
 8018212:	1410      	asrs	r0, r2, #16
 8018214:	181b      	adds	r3, r3, r0
 8018216:	141d      	asrs	r5, r3, #16
 8018218:	b292      	uxth	r2, r2
 801821a:	041b      	lsls	r3, r3, #16
 801821c:	431a      	orrs	r2, r3
 801821e:	9b03      	ldr	r3, [sp, #12]
 8018220:	c404      	stmia	r4!, {r2}
 8018222:	428b      	cmp	r3, r1
 8018224:	d2e9      	bcs.n	80181fa <quorem+0xb0>
 8018226:	9a01      	ldr	r2, [sp, #4]
 8018228:	00bb      	lsls	r3, r7, #2
 801822a:	18d3      	adds	r3, r2, r3
 801822c:	681a      	ldr	r2, [r3, #0]
 801822e:	2a00      	cmp	r2, #0
 8018230:	d013      	beq.n	801825a <quorem+0x110>
 8018232:	9b00      	ldr	r3, [sp, #0]
 8018234:	3301      	adds	r3, #1
 8018236:	9300      	str	r3, [sp, #0]
 8018238:	9800      	ldr	r0, [sp, #0]
 801823a:	b007      	add	sp, #28
 801823c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801823e:	6823      	ldr	r3, [r4, #0]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d104      	bne.n	801824e <quorem+0x104>
 8018244:	3f01      	subs	r7, #1
 8018246:	9b01      	ldr	r3, [sp, #4]
 8018248:	3c04      	subs	r4, #4
 801824a:	42a3      	cmp	r3, r4
 801824c:	d3f7      	bcc.n	801823e <quorem+0xf4>
 801824e:	6137      	str	r7, [r6, #16]
 8018250:	e7c8      	b.n	80181e4 <quorem+0x9a>
 8018252:	681a      	ldr	r2, [r3, #0]
 8018254:	2a00      	cmp	r2, #0
 8018256:	d104      	bne.n	8018262 <quorem+0x118>
 8018258:	3f01      	subs	r7, #1
 801825a:	9a01      	ldr	r2, [sp, #4]
 801825c:	3b04      	subs	r3, #4
 801825e:	429a      	cmp	r2, r3
 8018260:	d3f7      	bcc.n	8018252 <quorem+0x108>
 8018262:	6137      	str	r7, [r6, #16]
 8018264:	e7e5      	b.n	8018232 <quorem+0xe8>
	...

08018268 <_dtoa_r>:
 8018268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801826a:	0014      	movs	r4, r2
 801826c:	001d      	movs	r5, r3
 801826e:	69c6      	ldr	r6, [r0, #28]
 8018270:	b09d      	sub	sp, #116	@ 0x74
 8018272:	940a      	str	r4, [sp, #40]	@ 0x28
 8018274:	950b      	str	r5, [sp, #44]	@ 0x2c
 8018276:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8018278:	9003      	str	r0, [sp, #12]
 801827a:	2e00      	cmp	r6, #0
 801827c:	d10f      	bne.n	801829e <_dtoa_r+0x36>
 801827e:	2010      	movs	r0, #16
 8018280:	f000 fe30 	bl	8018ee4 <malloc>
 8018284:	9b03      	ldr	r3, [sp, #12]
 8018286:	1e02      	subs	r2, r0, #0
 8018288:	61d8      	str	r0, [r3, #28]
 801828a:	d104      	bne.n	8018296 <_dtoa_r+0x2e>
 801828c:	21ef      	movs	r1, #239	@ 0xef
 801828e:	4bc7      	ldr	r3, [pc, #796]	@ (80185ac <_dtoa_r+0x344>)
 8018290:	48c7      	ldr	r0, [pc, #796]	@ (80185b0 <_dtoa_r+0x348>)
 8018292:	f001 fea1 	bl	8019fd8 <__assert_func>
 8018296:	6046      	str	r6, [r0, #4]
 8018298:	6086      	str	r6, [r0, #8]
 801829a:	6006      	str	r6, [r0, #0]
 801829c:	60c6      	str	r6, [r0, #12]
 801829e:	9b03      	ldr	r3, [sp, #12]
 80182a0:	69db      	ldr	r3, [r3, #28]
 80182a2:	6819      	ldr	r1, [r3, #0]
 80182a4:	2900      	cmp	r1, #0
 80182a6:	d00b      	beq.n	80182c0 <_dtoa_r+0x58>
 80182a8:	685a      	ldr	r2, [r3, #4]
 80182aa:	2301      	movs	r3, #1
 80182ac:	4093      	lsls	r3, r2
 80182ae:	604a      	str	r2, [r1, #4]
 80182b0:	608b      	str	r3, [r1, #8]
 80182b2:	9803      	ldr	r0, [sp, #12]
 80182b4:	f000 ff16 	bl	80190e4 <_Bfree>
 80182b8:	2200      	movs	r2, #0
 80182ba:	9b03      	ldr	r3, [sp, #12]
 80182bc:	69db      	ldr	r3, [r3, #28]
 80182be:	601a      	str	r2, [r3, #0]
 80182c0:	2d00      	cmp	r5, #0
 80182c2:	da1e      	bge.n	8018302 <_dtoa_r+0x9a>
 80182c4:	2301      	movs	r3, #1
 80182c6:	603b      	str	r3, [r7, #0]
 80182c8:	006b      	lsls	r3, r5, #1
 80182ca:	085b      	lsrs	r3, r3, #1
 80182cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182ce:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80182d0:	4bb8      	ldr	r3, [pc, #736]	@ (80185b4 <_dtoa_r+0x34c>)
 80182d2:	4ab8      	ldr	r2, [pc, #736]	@ (80185b4 <_dtoa_r+0x34c>)
 80182d4:	403b      	ands	r3, r7
 80182d6:	4293      	cmp	r3, r2
 80182d8:	d116      	bne.n	8018308 <_dtoa_r+0xa0>
 80182da:	4bb7      	ldr	r3, [pc, #732]	@ (80185b8 <_dtoa_r+0x350>)
 80182dc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80182de:	6013      	str	r3, [r2, #0]
 80182e0:	033b      	lsls	r3, r7, #12
 80182e2:	0b1b      	lsrs	r3, r3, #12
 80182e4:	4323      	orrs	r3, r4
 80182e6:	d101      	bne.n	80182ec <_dtoa_r+0x84>
 80182e8:	f000 fd83 	bl	8018df2 <_dtoa_r+0xb8a>
 80182ec:	4bb3      	ldr	r3, [pc, #716]	@ (80185bc <_dtoa_r+0x354>)
 80182ee:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80182f0:	9308      	str	r3, [sp, #32]
 80182f2:	2a00      	cmp	r2, #0
 80182f4:	d002      	beq.n	80182fc <_dtoa_r+0x94>
 80182f6:	4bb2      	ldr	r3, [pc, #712]	@ (80185c0 <_dtoa_r+0x358>)
 80182f8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80182fa:	6013      	str	r3, [r2, #0]
 80182fc:	9808      	ldr	r0, [sp, #32]
 80182fe:	b01d      	add	sp, #116	@ 0x74
 8018300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018302:	2300      	movs	r3, #0
 8018304:	603b      	str	r3, [r7, #0]
 8018306:	e7e2      	b.n	80182ce <_dtoa_r+0x66>
 8018308:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801830a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801830c:	9212      	str	r2, [sp, #72]	@ 0x48
 801830e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018310:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018312:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018314:	2200      	movs	r2, #0
 8018316:	2300      	movs	r3, #0
 8018318:	f7e8 f898 	bl	800044c <__aeabi_dcmpeq>
 801831c:	1e06      	subs	r6, r0, #0
 801831e:	d00b      	beq.n	8018338 <_dtoa_r+0xd0>
 8018320:	2301      	movs	r3, #1
 8018322:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018324:	6013      	str	r3, [r2, #0]
 8018326:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018328:	2b00      	cmp	r3, #0
 801832a:	d002      	beq.n	8018332 <_dtoa_r+0xca>
 801832c:	4ba5      	ldr	r3, [pc, #660]	@ (80185c4 <_dtoa_r+0x35c>)
 801832e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018330:	6013      	str	r3, [r2, #0]
 8018332:	4ba5      	ldr	r3, [pc, #660]	@ (80185c8 <_dtoa_r+0x360>)
 8018334:	9308      	str	r3, [sp, #32]
 8018336:	e7e1      	b.n	80182fc <_dtoa_r+0x94>
 8018338:	ab1a      	add	r3, sp, #104	@ 0x68
 801833a:	9301      	str	r3, [sp, #4]
 801833c:	ab1b      	add	r3, sp, #108	@ 0x6c
 801833e:	9300      	str	r3, [sp, #0]
 8018340:	9803      	ldr	r0, [sp, #12]
 8018342:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018346:	f001 f9cd 	bl	80196e4 <__d2b>
 801834a:	007a      	lsls	r2, r7, #1
 801834c:	9005      	str	r0, [sp, #20]
 801834e:	0d52      	lsrs	r2, r2, #21
 8018350:	d100      	bne.n	8018354 <_dtoa_r+0xec>
 8018352:	e07b      	b.n	801844c <_dtoa_r+0x1e4>
 8018354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018356:	9618      	str	r6, [sp, #96]	@ 0x60
 8018358:	0319      	lsls	r1, r3, #12
 801835a:	4b9c      	ldr	r3, [pc, #624]	@ (80185cc <_dtoa_r+0x364>)
 801835c:	0b09      	lsrs	r1, r1, #12
 801835e:	430b      	orrs	r3, r1
 8018360:	499b      	ldr	r1, [pc, #620]	@ (80185d0 <_dtoa_r+0x368>)
 8018362:	1857      	adds	r7, r2, r1
 8018364:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018366:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018368:	0019      	movs	r1, r3
 801836a:	2200      	movs	r2, #0
 801836c:	4b99      	ldr	r3, [pc, #612]	@ (80185d4 <_dtoa_r+0x36c>)
 801836e:	f7ea fbab 	bl	8002ac8 <__aeabi_dsub>
 8018372:	4a99      	ldr	r2, [pc, #612]	@ (80185d8 <_dtoa_r+0x370>)
 8018374:	4b99      	ldr	r3, [pc, #612]	@ (80185dc <_dtoa_r+0x374>)
 8018376:	f7ea f8df 	bl	8002538 <__aeabi_dmul>
 801837a:	4a99      	ldr	r2, [pc, #612]	@ (80185e0 <_dtoa_r+0x378>)
 801837c:	4b99      	ldr	r3, [pc, #612]	@ (80185e4 <_dtoa_r+0x37c>)
 801837e:	f7e9 f933 	bl	80015e8 <__aeabi_dadd>
 8018382:	0004      	movs	r4, r0
 8018384:	0038      	movs	r0, r7
 8018386:	000d      	movs	r5, r1
 8018388:	f7ea ff98 	bl	80032bc <__aeabi_i2d>
 801838c:	4a96      	ldr	r2, [pc, #600]	@ (80185e8 <_dtoa_r+0x380>)
 801838e:	4b97      	ldr	r3, [pc, #604]	@ (80185ec <_dtoa_r+0x384>)
 8018390:	f7ea f8d2 	bl	8002538 <__aeabi_dmul>
 8018394:	0002      	movs	r2, r0
 8018396:	000b      	movs	r3, r1
 8018398:	0020      	movs	r0, r4
 801839a:	0029      	movs	r1, r5
 801839c:	f7e9 f924 	bl	80015e8 <__aeabi_dadd>
 80183a0:	0004      	movs	r4, r0
 80183a2:	000d      	movs	r5, r1
 80183a4:	f7ea ff4e 	bl	8003244 <__aeabi_d2iz>
 80183a8:	2200      	movs	r2, #0
 80183aa:	9004      	str	r0, [sp, #16]
 80183ac:	2300      	movs	r3, #0
 80183ae:	0020      	movs	r0, r4
 80183b0:	0029      	movs	r1, r5
 80183b2:	f7e8 f851 	bl	8000458 <__aeabi_dcmplt>
 80183b6:	2800      	cmp	r0, #0
 80183b8:	d00b      	beq.n	80183d2 <_dtoa_r+0x16a>
 80183ba:	9804      	ldr	r0, [sp, #16]
 80183bc:	f7ea ff7e 	bl	80032bc <__aeabi_i2d>
 80183c0:	002b      	movs	r3, r5
 80183c2:	0022      	movs	r2, r4
 80183c4:	f7e8 f842 	bl	800044c <__aeabi_dcmpeq>
 80183c8:	4243      	negs	r3, r0
 80183ca:	4158      	adcs	r0, r3
 80183cc:	9b04      	ldr	r3, [sp, #16]
 80183ce:	1a1b      	subs	r3, r3, r0
 80183d0:	9304      	str	r3, [sp, #16]
 80183d2:	2301      	movs	r3, #1
 80183d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80183d6:	9b04      	ldr	r3, [sp, #16]
 80183d8:	2b16      	cmp	r3, #22
 80183da:	d810      	bhi.n	80183fe <_dtoa_r+0x196>
 80183dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80183de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80183e0:	9a04      	ldr	r2, [sp, #16]
 80183e2:	4b83      	ldr	r3, [pc, #524]	@ (80185f0 <_dtoa_r+0x388>)
 80183e4:	00d2      	lsls	r2, r2, #3
 80183e6:	189b      	adds	r3, r3, r2
 80183e8:	681a      	ldr	r2, [r3, #0]
 80183ea:	685b      	ldr	r3, [r3, #4]
 80183ec:	f7e8 f834 	bl	8000458 <__aeabi_dcmplt>
 80183f0:	2800      	cmp	r0, #0
 80183f2:	d047      	beq.n	8018484 <_dtoa_r+0x21c>
 80183f4:	9b04      	ldr	r3, [sp, #16]
 80183f6:	3b01      	subs	r3, #1
 80183f8:	9304      	str	r3, [sp, #16]
 80183fa:	2300      	movs	r3, #0
 80183fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80183fe:	2200      	movs	r2, #0
 8018400:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8018402:	9206      	str	r2, [sp, #24]
 8018404:	1bdb      	subs	r3, r3, r7
 8018406:	1e5a      	subs	r2, r3, #1
 8018408:	d53e      	bpl.n	8018488 <_dtoa_r+0x220>
 801840a:	2201      	movs	r2, #1
 801840c:	1ad3      	subs	r3, r2, r3
 801840e:	9306      	str	r3, [sp, #24]
 8018410:	2300      	movs	r3, #0
 8018412:	930d      	str	r3, [sp, #52]	@ 0x34
 8018414:	9b04      	ldr	r3, [sp, #16]
 8018416:	2b00      	cmp	r3, #0
 8018418:	db38      	blt.n	801848c <_dtoa_r+0x224>
 801841a:	9a04      	ldr	r2, [sp, #16]
 801841c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801841e:	4694      	mov	ip, r2
 8018420:	4463      	add	r3, ip
 8018422:	930d      	str	r3, [sp, #52]	@ 0x34
 8018424:	2300      	movs	r3, #0
 8018426:	9214      	str	r2, [sp, #80]	@ 0x50
 8018428:	930f      	str	r3, [sp, #60]	@ 0x3c
 801842a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801842c:	2401      	movs	r4, #1
 801842e:	2b09      	cmp	r3, #9
 8018430:	d867      	bhi.n	8018502 <_dtoa_r+0x29a>
 8018432:	2b05      	cmp	r3, #5
 8018434:	dd02      	ble.n	801843c <_dtoa_r+0x1d4>
 8018436:	2400      	movs	r4, #0
 8018438:	3b04      	subs	r3, #4
 801843a:	9322      	str	r3, [sp, #136]	@ 0x88
 801843c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801843e:	1e98      	subs	r0, r3, #2
 8018440:	2803      	cmp	r0, #3
 8018442:	d867      	bhi.n	8018514 <_dtoa_r+0x2ac>
 8018444:	f7e7 fe68 	bl	8000118 <__gnu_thumb1_case_uqi>
 8018448:	5b383a2b 	.word	0x5b383a2b
 801844c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801844e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018450:	18f6      	adds	r6, r6, r3
 8018452:	4b68      	ldr	r3, [pc, #416]	@ (80185f4 <_dtoa_r+0x38c>)
 8018454:	18f2      	adds	r2, r6, r3
 8018456:	2a20      	cmp	r2, #32
 8018458:	dd0f      	ble.n	801847a <_dtoa_r+0x212>
 801845a:	2340      	movs	r3, #64	@ 0x40
 801845c:	1a9b      	subs	r3, r3, r2
 801845e:	409f      	lsls	r7, r3
 8018460:	4b65      	ldr	r3, [pc, #404]	@ (80185f8 <_dtoa_r+0x390>)
 8018462:	0038      	movs	r0, r7
 8018464:	18f3      	adds	r3, r6, r3
 8018466:	40dc      	lsrs	r4, r3
 8018468:	4320      	orrs	r0, r4
 801846a:	f7ea ff55 	bl	8003318 <__aeabi_ui2d>
 801846e:	2201      	movs	r2, #1
 8018470:	4b62      	ldr	r3, [pc, #392]	@ (80185fc <_dtoa_r+0x394>)
 8018472:	1e77      	subs	r7, r6, #1
 8018474:	18cb      	adds	r3, r1, r3
 8018476:	9218      	str	r2, [sp, #96]	@ 0x60
 8018478:	e776      	b.n	8018368 <_dtoa_r+0x100>
 801847a:	2320      	movs	r3, #32
 801847c:	0020      	movs	r0, r4
 801847e:	1a9b      	subs	r3, r3, r2
 8018480:	4098      	lsls	r0, r3
 8018482:	e7f2      	b.n	801846a <_dtoa_r+0x202>
 8018484:	9015      	str	r0, [sp, #84]	@ 0x54
 8018486:	e7ba      	b.n	80183fe <_dtoa_r+0x196>
 8018488:	920d      	str	r2, [sp, #52]	@ 0x34
 801848a:	e7c3      	b.n	8018414 <_dtoa_r+0x1ac>
 801848c:	9b06      	ldr	r3, [sp, #24]
 801848e:	9a04      	ldr	r2, [sp, #16]
 8018490:	1a9b      	subs	r3, r3, r2
 8018492:	9306      	str	r3, [sp, #24]
 8018494:	4253      	negs	r3, r2
 8018496:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018498:	2300      	movs	r3, #0
 801849a:	9314      	str	r3, [sp, #80]	@ 0x50
 801849c:	e7c5      	b.n	801842a <_dtoa_r+0x1c2>
 801849e:	2300      	movs	r3, #0
 80184a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80184a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80184a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80184a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	dc13      	bgt.n	80184d4 <_dtoa_r+0x26c>
 80184ac:	2301      	movs	r3, #1
 80184ae:	001a      	movs	r2, r3
 80184b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80184b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80184b4:	9223      	str	r2, [sp, #140]	@ 0x8c
 80184b6:	e00d      	b.n	80184d4 <_dtoa_r+0x26c>
 80184b8:	2301      	movs	r3, #1
 80184ba:	e7f1      	b.n	80184a0 <_dtoa_r+0x238>
 80184bc:	2300      	movs	r3, #0
 80184be:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80184c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80184c2:	4694      	mov	ip, r2
 80184c4:	9b04      	ldr	r3, [sp, #16]
 80184c6:	4463      	add	r3, ip
 80184c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80184ca:	3301      	adds	r3, #1
 80184cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	dc00      	bgt.n	80184d4 <_dtoa_r+0x26c>
 80184d2:	2301      	movs	r3, #1
 80184d4:	9a03      	ldr	r2, [sp, #12]
 80184d6:	2100      	movs	r1, #0
 80184d8:	69d0      	ldr	r0, [r2, #28]
 80184da:	2204      	movs	r2, #4
 80184dc:	0015      	movs	r5, r2
 80184de:	3514      	adds	r5, #20
 80184e0:	429d      	cmp	r5, r3
 80184e2:	d91b      	bls.n	801851c <_dtoa_r+0x2b4>
 80184e4:	6041      	str	r1, [r0, #4]
 80184e6:	9803      	ldr	r0, [sp, #12]
 80184e8:	f000 fdb8 	bl	801905c <_Balloc>
 80184ec:	9008      	str	r0, [sp, #32]
 80184ee:	2800      	cmp	r0, #0
 80184f0:	d117      	bne.n	8018522 <_dtoa_r+0x2ba>
 80184f2:	21b0      	movs	r1, #176	@ 0xb0
 80184f4:	4b42      	ldr	r3, [pc, #264]	@ (8018600 <_dtoa_r+0x398>)
 80184f6:	482e      	ldr	r0, [pc, #184]	@ (80185b0 <_dtoa_r+0x348>)
 80184f8:	9a08      	ldr	r2, [sp, #32]
 80184fa:	31ff      	adds	r1, #255	@ 0xff
 80184fc:	e6c9      	b.n	8018292 <_dtoa_r+0x2a>
 80184fe:	2301      	movs	r3, #1
 8018500:	e7dd      	b.n	80184be <_dtoa_r+0x256>
 8018502:	2300      	movs	r3, #0
 8018504:	9410      	str	r4, [sp, #64]	@ 0x40
 8018506:	9322      	str	r3, [sp, #136]	@ 0x88
 8018508:	3b01      	subs	r3, #1
 801850a:	930e      	str	r3, [sp, #56]	@ 0x38
 801850c:	9309      	str	r3, [sp, #36]	@ 0x24
 801850e:	2200      	movs	r2, #0
 8018510:	3313      	adds	r3, #19
 8018512:	e7cf      	b.n	80184b4 <_dtoa_r+0x24c>
 8018514:	2301      	movs	r3, #1
 8018516:	9310      	str	r3, [sp, #64]	@ 0x40
 8018518:	3b02      	subs	r3, #2
 801851a:	e7f6      	b.n	801850a <_dtoa_r+0x2a2>
 801851c:	3101      	adds	r1, #1
 801851e:	0052      	lsls	r2, r2, #1
 8018520:	e7dc      	b.n	80184dc <_dtoa_r+0x274>
 8018522:	9b03      	ldr	r3, [sp, #12]
 8018524:	9a08      	ldr	r2, [sp, #32]
 8018526:	69db      	ldr	r3, [r3, #28]
 8018528:	601a      	str	r2, [r3, #0]
 801852a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801852c:	2b0e      	cmp	r3, #14
 801852e:	d900      	bls.n	8018532 <_dtoa_r+0x2ca>
 8018530:	e0d9      	b.n	80186e6 <_dtoa_r+0x47e>
 8018532:	2c00      	cmp	r4, #0
 8018534:	d100      	bne.n	8018538 <_dtoa_r+0x2d0>
 8018536:	e0d6      	b.n	80186e6 <_dtoa_r+0x47e>
 8018538:	9b04      	ldr	r3, [sp, #16]
 801853a:	2b00      	cmp	r3, #0
 801853c:	dd64      	ble.n	8018608 <_dtoa_r+0x3a0>
 801853e:	210f      	movs	r1, #15
 8018540:	9a04      	ldr	r2, [sp, #16]
 8018542:	4b2b      	ldr	r3, [pc, #172]	@ (80185f0 <_dtoa_r+0x388>)
 8018544:	400a      	ands	r2, r1
 8018546:	00d2      	lsls	r2, r2, #3
 8018548:	189b      	adds	r3, r3, r2
 801854a:	681e      	ldr	r6, [r3, #0]
 801854c:	685f      	ldr	r7, [r3, #4]
 801854e:	9b04      	ldr	r3, [sp, #16]
 8018550:	2402      	movs	r4, #2
 8018552:	111d      	asrs	r5, r3, #4
 8018554:	05db      	lsls	r3, r3, #23
 8018556:	d50a      	bpl.n	801856e <_dtoa_r+0x306>
 8018558:	4b2a      	ldr	r3, [pc, #168]	@ (8018604 <_dtoa_r+0x39c>)
 801855a:	400d      	ands	r5, r1
 801855c:	6a1a      	ldr	r2, [r3, #32]
 801855e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018560:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018562:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018564:	f7e9 fba4 	bl	8001cb0 <__aeabi_ddiv>
 8018568:	900a      	str	r0, [sp, #40]	@ 0x28
 801856a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801856c:	3401      	adds	r4, #1
 801856e:	4b25      	ldr	r3, [pc, #148]	@ (8018604 <_dtoa_r+0x39c>)
 8018570:	930c      	str	r3, [sp, #48]	@ 0x30
 8018572:	2d00      	cmp	r5, #0
 8018574:	d108      	bne.n	8018588 <_dtoa_r+0x320>
 8018576:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801857a:	0032      	movs	r2, r6
 801857c:	003b      	movs	r3, r7
 801857e:	f7e9 fb97 	bl	8001cb0 <__aeabi_ddiv>
 8018582:	900a      	str	r0, [sp, #40]	@ 0x28
 8018584:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018586:	e05a      	b.n	801863e <_dtoa_r+0x3d6>
 8018588:	2301      	movs	r3, #1
 801858a:	421d      	tst	r5, r3
 801858c:	d009      	beq.n	80185a2 <_dtoa_r+0x33a>
 801858e:	18e4      	adds	r4, r4, r3
 8018590:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018592:	0030      	movs	r0, r6
 8018594:	681a      	ldr	r2, [r3, #0]
 8018596:	685b      	ldr	r3, [r3, #4]
 8018598:	0039      	movs	r1, r7
 801859a:	f7e9 ffcd 	bl	8002538 <__aeabi_dmul>
 801859e:	0006      	movs	r6, r0
 80185a0:	000f      	movs	r7, r1
 80185a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80185a4:	106d      	asrs	r5, r5, #1
 80185a6:	3308      	adds	r3, #8
 80185a8:	e7e2      	b.n	8018570 <_dtoa_r+0x308>
 80185aa:	46c0      	nop			@ (mov r8, r8)
 80185ac:	0801bced 	.word	0x0801bced
 80185b0:	0801bd04 	.word	0x0801bd04
 80185b4:	7ff00000 	.word	0x7ff00000
 80185b8:	0000270f 	.word	0x0000270f
 80185bc:	0801bce9 	.word	0x0801bce9
 80185c0:	0801bcec 	.word	0x0801bcec
 80185c4:	0801bcbd 	.word	0x0801bcbd
 80185c8:	0801bcbc 	.word	0x0801bcbc
 80185cc:	3ff00000 	.word	0x3ff00000
 80185d0:	fffffc01 	.word	0xfffffc01
 80185d4:	3ff80000 	.word	0x3ff80000
 80185d8:	636f4361 	.word	0x636f4361
 80185dc:	3fd287a7 	.word	0x3fd287a7
 80185e0:	8b60c8b3 	.word	0x8b60c8b3
 80185e4:	3fc68a28 	.word	0x3fc68a28
 80185e8:	509f79fb 	.word	0x509f79fb
 80185ec:	3fd34413 	.word	0x3fd34413
 80185f0:	0801be00 	.word	0x0801be00
 80185f4:	00000432 	.word	0x00000432
 80185f8:	00000412 	.word	0x00000412
 80185fc:	fe100000 	.word	0xfe100000
 8018600:	0801bd5c 	.word	0x0801bd5c
 8018604:	0801bdd8 	.word	0x0801bdd8
 8018608:	9b04      	ldr	r3, [sp, #16]
 801860a:	2402      	movs	r4, #2
 801860c:	2b00      	cmp	r3, #0
 801860e:	d016      	beq.n	801863e <_dtoa_r+0x3d6>
 8018610:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018612:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018614:	220f      	movs	r2, #15
 8018616:	425d      	negs	r5, r3
 8018618:	402a      	ands	r2, r5
 801861a:	4bd7      	ldr	r3, [pc, #860]	@ (8018978 <_dtoa_r+0x710>)
 801861c:	00d2      	lsls	r2, r2, #3
 801861e:	189b      	adds	r3, r3, r2
 8018620:	681a      	ldr	r2, [r3, #0]
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	f7e9 ff88 	bl	8002538 <__aeabi_dmul>
 8018628:	2701      	movs	r7, #1
 801862a:	2300      	movs	r3, #0
 801862c:	900a      	str	r0, [sp, #40]	@ 0x28
 801862e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018630:	4ed2      	ldr	r6, [pc, #840]	@ (801897c <_dtoa_r+0x714>)
 8018632:	112d      	asrs	r5, r5, #4
 8018634:	2d00      	cmp	r5, #0
 8018636:	d000      	beq.n	801863a <_dtoa_r+0x3d2>
 8018638:	e0ba      	b.n	80187b0 <_dtoa_r+0x548>
 801863a:	2b00      	cmp	r3, #0
 801863c:	d1a1      	bne.n	8018582 <_dtoa_r+0x31a>
 801863e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018640:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018642:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018644:	2b00      	cmp	r3, #0
 8018646:	d100      	bne.n	801864a <_dtoa_r+0x3e2>
 8018648:	e0bd      	b.n	80187c6 <_dtoa_r+0x55e>
 801864a:	2200      	movs	r2, #0
 801864c:	0030      	movs	r0, r6
 801864e:	0039      	movs	r1, r7
 8018650:	4bcb      	ldr	r3, [pc, #812]	@ (8018980 <_dtoa_r+0x718>)
 8018652:	f7e7 ff01 	bl	8000458 <__aeabi_dcmplt>
 8018656:	2800      	cmp	r0, #0
 8018658:	d100      	bne.n	801865c <_dtoa_r+0x3f4>
 801865a:	e0b4      	b.n	80187c6 <_dtoa_r+0x55e>
 801865c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801865e:	2b00      	cmp	r3, #0
 8018660:	d100      	bne.n	8018664 <_dtoa_r+0x3fc>
 8018662:	e0b0      	b.n	80187c6 <_dtoa_r+0x55e>
 8018664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018666:	2b00      	cmp	r3, #0
 8018668:	dd39      	ble.n	80186de <_dtoa_r+0x476>
 801866a:	9b04      	ldr	r3, [sp, #16]
 801866c:	2200      	movs	r2, #0
 801866e:	3b01      	subs	r3, #1
 8018670:	930c      	str	r3, [sp, #48]	@ 0x30
 8018672:	0030      	movs	r0, r6
 8018674:	4bc3      	ldr	r3, [pc, #780]	@ (8018984 <_dtoa_r+0x71c>)
 8018676:	0039      	movs	r1, r7
 8018678:	f7e9 ff5e 	bl	8002538 <__aeabi_dmul>
 801867c:	900a      	str	r0, [sp, #40]	@ 0x28
 801867e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018680:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018682:	3401      	adds	r4, #1
 8018684:	0020      	movs	r0, r4
 8018686:	9311      	str	r3, [sp, #68]	@ 0x44
 8018688:	f7ea fe18 	bl	80032bc <__aeabi_i2d>
 801868c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801868e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018690:	f7e9 ff52 	bl	8002538 <__aeabi_dmul>
 8018694:	4bbc      	ldr	r3, [pc, #752]	@ (8018988 <_dtoa_r+0x720>)
 8018696:	2200      	movs	r2, #0
 8018698:	f7e8 ffa6 	bl	80015e8 <__aeabi_dadd>
 801869c:	4bbb      	ldr	r3, [pc, #748]	@ (801898c <_dtoa_r+0x724>)
 801869e:	0006      	movs	r6, r0
 80186a0:	18cf      	adds	r7, r1, r3
 80186a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d000      	beq.n	80186aa <_dtoa_r+0x442>
 80186a8:	e091      	b.n	80187ce <_dtoa_r+0x566>
 80186aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80186ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80186ae:	2200      	movs	r2, #0
 80186b0:	4bb7      	ldr	r3, [pc, #732]	@ (8018990 <_dtoa_r+0x728>)
 80186b2:	f7ea fa09 	bl	8002ac8 <__aeabi_dsub>
 80186b6:	0032      	movs	r2, r6
 80186b8:	003b      	movs	r3, r7
 80186ba:	0004      	movs	r4, r0
 80186bc:	000d      	movs	r5, r1
 80186be:	f7e7 fedf 	bl	8000480 <__aeabi_dcmpgt>
 80186c2:	2800      	cmp	r0, #0
 80186c4:	d000      	beq.n	80186c8 <_dtoa_r+0x460>
 80186c6:	e29d      	b.n	8018c04 <_dtoa_r+0x99c>
 80186c8:	2180      	movs	r1, #128	@ 0x80
 80186ca:	0609      	lsls	r1, r1, #24
 80186cc:	187b      	adds	r3, r7, r1
 80186ce:	0032      	movs	r2, r6
 80186d0:	0020      	movs	r0, r4
 80186d2:	0029      	movs	r1, r5
 80186d4:	f7e7 fec0 	bl	8000458 <__aeabi_dcmplt>
 80186d8:	2800      	cmp	r0, #0
 80186da:	d000      	beq.n	80186de <_dtoa_r+0x476>
 80186dc:	e130      	b.n	8018940 <_dtoa_r+0x6d8>
 80186de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80186e0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80186e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80186e4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80186e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	da00      	bge.n	80186ee <_dtoa_r+0x486>
 80186ec:	e177      	b.n	80189de <_dtoa_r+0x776>
 80186ee:	9a04      	ldr	r2, [sp, #16]
 80186f0:	2a0e      	cmp	r2, #14
 80186f2:	dd00      	ble.n	80186f6 <_dtoa_r+0x48e>
 80186f4:	e173      	b.n	80189de <_dtoa_r+0x776>
 80186f6:	4ba0      	ldr	r3, [pc, #640]	@ (8018978 <_dtoa_r+0x710>)
 80186f8:	00d2      	lsls	r2, r2, #3
 80186fa:	189b      	adds	r3, r3, r2
 80186fc:	685c      	ldr	r4, [r3, #4]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	9306      	str	r3, [sp, #24]
 8018702:	9407      	str	r4, [sp, #28]
 8018704:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018706:	2b00      	cmp	r3, #0
 8018708:	da03      	bge.n	8018712 <_dtoa_r+0x4aa>
 801870a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801870c:	2b00      	cmp	r3, #0
 801870e:	dc00      	bgt.n	8018712 <_dtoa_r+0x4aa>
 8018710:	e106      	b.n	8018920 <_dtoa_r+0x6b8>
 8018712:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018714:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018718:	9d08      	ldr	r5, [sp, #32]
 801871a:	3b01      	subs	r3, #1
 801871c:	195b      	adds	r3, r3, r5
 801871e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018720:	9a06      	ldr	r2, [sp, #24]
 8018722:	9b07      	ldr	r3, [sp, #28]
 8018724:	0030      	movs	r0, r6
 8018726:	0039      	movs	r1, r7
 8018728:	f7e9 fac2 	bl	8001cb0 <__aeabi_ddiv>
 801872c:	f7ea fd8a 	bl	8003244 <__aeabi_d2iz>
 8018730:	9009      	str	r0, [sp, #36]	@ 0x24
 8018732:	f7ea fdc3 	bl	80032bc <__aeabi_i2d>
 8018736:	9a06      	ldr	r2, [sp, #24]
 8018738:	9b07      	ldr	r3, [sp, #28]
 801873a:	f7e9 fefd 	bl	8002538 <__aeabi_dmul>
 801873e:	0002      	movs	r2, r0
 8018740:	000b      	movs	r3, r1
 8018742:	0030      	movs	r0, r6
 8018744:	0039      	movs	r1, r7
 8018746:	f7ea f9bf 	bl	8002ac8 <__aeabi_dsub>
 801874a:	002b      	movs	r3, r5
 801874c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801874e:	3501      	adds	r5, #1
 8018750:	3230      	adds	r2, #48	@ 0x30
 8018752:	701a      	strb	r2, [r3, #0]
 8018754:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018756:	002c      	movs	r4, r5
 8018758:	429a      	cmp	r2, r3
 801875a:	d000      	beq.n	801875e <_dtoa_r+0x4f6>
 801875c:	e131      	b.n	80189c2 <_dtoa_r+0x75a>
 801875e:	0002      	movs	r2, r0
 8018760:	000b      	movs	r3, r1
 8018762:	f7e8 ff41 	bl	80015e8 <__aeabi_dadd>
 8018766:	9a06      	ldr	r2, [sp, #24]
 8018768:	9b07      	ldr	r3, [sp, #28]
 801876a:	0006      	movs	r6, r0
 801876c:	000f      	movs	r7, r1
 801876e:	f7e7 fe87 	bl	8000480 <__aeabi_dcmpgt>
 8018772:	2800      	cmp	r0, #0
 8018774:	d000      	beq.n	8018778 <_dtoa_r+0x510>
 8018776:	e10f      	b.n	8018998 <_dtoa_r+0x730>
 8018778:	9a06      	ldr	r2, [sp, #24]
 801877a:	9b07      	ldr	r3, [sp, #28]
 801877c:	0030      	movs	r0, r6
 801877e:	0039      	movs	r1, r7
 8018780:	f7e7 fe64 	bl	800044c <__aeabi_dcmpeq>
 8018784:	2800      	cmp	r0, #0
 8018786:	d003      	beq.n	8018790 <_dtoa_r+0x528>
 8018788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801878a:	07dd      	lsls	r5, r3, #31
 801878c:	d500      	bpl.n	8018790 <_dtoa_r+0x528>
 801878e:	e103      	b.n	8018998 <_dtoa_r+0x730>
 8018790:	9905      	ldr	r1, [sp, #20]
 8018792:	9803      	ldr	r0, [sp, #12]
 8018794:	f000 fca6 	bl	80190e4 <_Bfree>
 8018798:	2300      	movs	r3, #0
 801879a:	7023      	strb	r3, [r4, #0]
 801879c:	9b04      	ldr	r3, [sp, #16]
 801879e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80187a0:	3301      	adds	r3, #1
 80187a2:	6013      	str	r3, [r2, #0]
 80187a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d100      	bne.n	80187ac <_dtoa_r+0x544>
 80187aa:	e5a7      	b.n	80182fc <_dtoa_r+0x94>
 80187ac:	601c      	str	r4, [r3, #0]
 80187ae:	e5a5      	b.n	80182fc <_dtoa_r+0x94>
 80187b0:	423d      	tst	r5, r7
 80187b2:	d005      	beq.n	80187c0 <_dtoa_r+0x558>
 80187b4:	6832      	ldr	r2, [r6, #0]
 80187b6:	6873      	ldr	r3, [r6, #4]
 80187b8:	f7e9 febe 	bl	8002538 <__aeabi_dmul>
 80187bc:	003b      	movs	r3, r7
 80187be:	3401      	adds	r4, #1
 80187c0:	106d      	asrs	r5, r5, #1
 80187c2:	3608      	adds	r6, #8
 80187c4:	e736      	b.n	8018634 <_dtoa_r+0x3cc>
 80187c6:	9b04      	ldr	r3, [sp, #16]
 80187c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80187ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187cc:	e75a      	b.n	8018684 <_dtoa_r+0x41c>
 80187ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80187d0:	4b69      	ldr	r3, [pc, #420]	@ (8018978 <_dtoa_r+0x710>)
 80187d2:	3a01      	subs	r2, #1
 80187d4:	00d2      	lsls	r2, r2, #3
 80187d6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80187d8:	189b      	adds	r3, r3, r2
 80187da:	681a      	ldr	r2, [r3, #0]
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	2900      	cmp	r1, #0
 80187e0:	d04c      	beq.n	801887c <_dtoa_r+0x614>
 80187e2:	2000      	movs	r0, #0
 80187e4:	496b      	ldr	r1, [pc, #428]	@ (8018994 <_dtoa_r+0x72c>)
 80187e6:	f7e9 fa63 	bl	8001cb0 <__aeabi_ddiv>
 80187ea:	0032      	movs	r2, r6
 80187ec:	003b      	movs	r3, r7
 80187ee:	f7ea f96b 	bl	8002ac8 <__aeabi_dsub>
 80187f2:	9a08      	ldr	r2, [sp, #32]
 80187f4:	0006      	movs	r6, r0
 80187f6:	4694      	mov	ip, r2
 80187f8:	000f      	movs	r7, r1
 80187fa:	9b08      	ldr	r3, [sp, #32]
 80187fc:	9316      	str	r3, [sp, #88]	@ 0x58
 80187fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018800:	4463      	add	r3, ip
 8018802:	9311      	str	r3, [sp, #68]	@ 0x44
 8018804:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018806:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018808:	f7ea fd1c 	bl	8003244 <__aeabi_d2iz>
 801880c:	0005      	movs	r5, r0
 801880e:	f7ea fd55 	bl	80032bc <__aeabi_i2d>
 8018812:	0002      	movs	r2, r0
 8018814:	000b      	movs	r3, r1
 8018816:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018818:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801881a:	f7ea f955 	bl	8002ac8 <__aeabi_dsub>
 801881e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018820:	3530      	adds	r5, #48	@ 0x30
 8018822:	1c5c      	adds	r4, r3, #1
 8018824:	701d      	strb	r5, [r3, #0]
 8018826:	0032      	movs	r2, r6
 8018828:	003b      	movs	r3, r7
 801882a:	900a      	str	r0, [sp, #40]	@ 0x28
 801882c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801882e:	f7e7 fe13 	bl	8000458 <__aeabi_dcmplt>
 8018832:	2800      	cmp	r0, #0
 8018834:	d16a      	bne.n	801890c <_dtoa_r+0x6a4>
 8018836:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801883a:	2000      	movs	r0, #0
 801883c:	4950      	ldr	r1, [pc, #320]	@ (8018980 <_dtoa_r+0x718>)
 801883e:	f7ea f943 	bl	8002ac8 <__aeabi_dsub>
 8018842:	0032      	movs	r2, r6
 8018844:	003b      	movs	r3, r7
 8018846:	f7e7 fe07 	bl	8000458 <__aeabi_dcmplt>
 801884a:	2800      	cmp	r0, #0
 801884c:	d000      	beq.n	8018850 <_dtoa_r+0x5e8>
 801884e:	e0a5      	b.n	801899c <_dtoa_r+0x734>
 8018850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018852:	42a3      	cmp	r3, r4
 8018854:	d100      	bne.n	8018858 <_dtoa_r+0x5f0>
 8018856:	e742      	b.n	80186de <_dtoa_r+0x476>
 8018858:	2200      	movs	r2, #0
 801885a:	0030      	movs	r0, r6
 801885c:	0039      	movs	r1, r7
 801885e:	4b49      	ldr	r3, [pc, #292]	@ (8018984 <_dtoa_r+0x71c>)
 8018860:	f7e9 fe6a 	bl	8002538 <__aeabi_dmul>
 8018864:	2200      	movs	r2, #0
 8018866:	0006      	movs	r6, r0
 8018868:	000f      	movs	r7, r1
 801886a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801886c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801886e:	4b45      	ldr	r3, [pc, #276]	@ (8018984 <_dtoa_r+0x71c>)
 8018870:	f7e9 fe62 	bl	8002538 <__aeabi_dmul>
 8018874:	9416      	str	r4, [sp, #88]	@ 0x58
 8018876:	900a      	str	r0, [sp, #40]	@ 0x28
 8018878:	910b      	str	r1, [sp, #44]	@ 0x2c
 801887a:	e7c3      	b.n	8018804 <_dtoa_r+0x59c>
 801887c:	0030      	movs	r0, r6
 801887e:	0039      	movs	r1, r7
 8018880:	f7e9 fe5a 	bl	8002538 <__aeabi_dmul>
 8018884:	9d08      	ldr	r5, [sp, #32]
 8018886:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018888:	002b      	movs	r3, r5
 801888a:	4694      	mov	ip, r2
 801888c:	9016      	str	r0, [sp, #88]	@ 0x58
 801888e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018890:	4463      	add	r3, ip
 8018892:	9319      	str	r3, [sp, #100]	@ 0x64
 8018894:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018896:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018898:	f7ea fcd4 	bl	8003244 <__aeabi_d2iz>
 801889c:	0004      	movs	r4, r0
 801889e:	f7ea fd0d 	bl	80032bc <__aeabi_i2d>
 80188a2:	000b      	movs	r3, r1
 80188a4:	0002      	movs	r2, r0
 80188a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80188a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80188aa:	f7ea f90d 	bl	8002ac8 <__aeabi_dsub>
 80188ae:	3430      	adds	r4, #48	@ 0x30
 80188b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80188b2:	702c      	strb	r4, [r5, #0]
 80188b4:	3501      	adds	r5, #1
 80188b6:	0006      	movs	r6, r0
 80188b8:	000f      	movs	r7, r1
 80188ba:	42ab      	cmp	r3, r5
 80188bc:	d129      	bne.n	8018912 <_dtoa_r+0x6aa>
 80188be:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80188c0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80188c2:	9b08      	ldr	r3, [sp, #32]
 80188c4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80188c6:	469c      	mov	ip, r3
 80188c8:	2200      	movs	r2, #0
 80188ca:	4b32      	ldr	r3, [pc, #200]	@ (8018994 <_dtoa_r+0x72c>)
 80188cc:	4464      	add	r4, ip
 80188ce:	f7e8 fe8b 	bl	80015e8 <__aeabi_dadd>
 80188d2:	0002      	movs	r2, r0
 80188d4:	000b      	movs	r3, r1
 80188d6:	0030      	movs	r0, r6
 80188d8:	0039      	movs	r1, r7
 80188da:	f7e7 fdd1 	bl	8000480 <__aeabi_dcmpgt>
 80188de:	2800      	cmp	r0, #0
 80188e0:	d15c      	bne.n	801899c <_dtoa_r+0x734>
 80188e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80188e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80188e6:	2000      	movs	r0, #0
 80188e8:	492a      	ldr	r1, [pc, #168]	@ (8018994 <_dtoa_r+0x72c>)
 80188ea:	f7ea f8ed 	bl	8002ac8 <__aeabi_dsub>
 80188ee:	0002      	movs	r2, r0
 80188f0:	000b      	movs	r3, r1
 80188f2:	0030      	movs	r0, r6
 80188f4:	0039      	movs	r1, r7
 80188f6:	f7e7 fdaf 	bl	8000458 <__aeabi_dcmplt>
 80188fa:	2800      	cmp	r0, #0
 80188fc:	d100      	bne.n	8018900 <_dtoa_r+0x698>
 80188fe:	e6ee      	b.n	80186de <_dtoa_r+0x476>
 8018900:	0023      	movs	r3, r4
 8018902:	3c01      	subs	r4, #1
 8018904:	7822      	ldrb	r2, [r4, #0]
 8018906:	2a30      	cmp	r2, #48	@ 0x30
 8018908:	d0fa      	beq.n	8018900 <_dtoa_r+0x698>
 801890a:	001c      	movs	r4, r3
 801890c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801890e:	9304      	str	r3, [sp, #16]
 8018910:	e73e      	b.n	8018790 <_dtoa_r+0x528>
 8018912:	2200      	movs	r2, #0
 8018914:	4b1b      	ldr	r3, [pc, #108]	@ (8018984 <_dtoa_r+0x71c>)
 8018916:	f7e9 fe0f 	bl	8002538 <__aeabi_dmul>
 801891a:	900a      	str	r0, [sp, #40]	@ 0x28
 801891c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801891e:	e7b9      	b.n	8018894 <_dtoa_r+0x62c>
 8018920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018922:	2b00      	cmp	r3, #0
 8018924:	d10c      	bne.n	8018940 <_dtoa_r+0x6d8>
 8018926:	9806      	ldr	r0, [sp, #24]
 8018928:	9907      	ldr	r1, [sp, #28]
 801892a:	2200      	movs	r2, #0
 801892c:	4b18      	ldr	r3, [pc, #96]	@ (8018990 <_dtoa_r+0x728>)
 801892e:	f7e9 fe03 	bl	8002538 <__aeabi_dmul>
 8018932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018936:	f7e7 fdad 	bl	8000494 <__aeabi_dcmpge>
 801893a:	2800      	cmp	r0, #0
 801893c:	d100      	bne.n	8018940 <_dtoa_r+0x6d8>
 801893e:	e164      	b.n	8018c0a <_dtoa_r+0x9a2>
 8018940:	2600      	movs	r6, #0
 8018942:	0037      	movs	r7, r6
 8018944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018946:	9c08      	ldr	r4, [sp, #32]
 8018948:	43db      	mvns	r3, r3
 801894a:	930c      	str	r3, [sp, #48]	@ 0x30
 801894c:	2300      	movs	r3, #0
 801894e:	9304      	str	r3, [sp, #16]
 8018950:	0031      	movs	r1, r6
 8018952:	9803      	ldr	r0, [sp, #12]
 8018954:	f000 fbc6 	bl	80190e4 <_Bfree>
 8018958:	2f00      	cmp	r7, #0
 801895a:	d0d7      	beq.n	801890c <_dtoa_r+0x6a4>
 801895c:	9b04      	ldr	r3, [sp, #16]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d005      	beq.n	801896e <_dtoa_r+0x706>
 8018962:	42bb      	cmp	r3, r7
 8018964:	d003      	beq.n	801896e <_dtoa_r+0x706>
 8018966:	0019      	movs	r1, r3
 8018968:	9803      	ldr	r0, [sp, #12]
 801896a:	f000 fbbb 	bl	80190e4 <_Bfree>
 801896e:	0039      	movs	r1, r7
 8018970:	9803      	ldr	r0, [sp, #12]
 8018972:	f000 fbb7 	bl	80190e4 <_Bfree>
 8018976:	e7c9      	b.n	801890c <_dtoa_r+0x6a4>
 8018978:	0801be00 	.word	0x0801be00
 801897c:	0801bdd8 	.word	0x0801bdd8
 8018980:	3ff00000 	.word	0x3ff00000
 8018984:	40240000 	.word	0x40240000
 8018988:	401c0000 	.word	0x401c0000
 801898c:	fcc00000 	.word	0xfcc00000
 8018990:	40140000 	.word	0x40140000
 8018994:	3fe00000 	.word	0x3fe00000
 8018998:	9b04      	ldr	r3, [sp, #16]
 801899a:	930c      	str	r3, [sp, #48]	@ 0x30
 801899c:	0023      	movs	r3, r4
 801899e:	001c      	movs	r4, r3
 80189a0:	3b01      	subs	r3, #1
 80189a2:	781a      	ldrb	r2, [r3, #0]
 80189a4:	2a39      	cmp	r2, #57	@ 0x39
 80189a6:	d108      	bne.n	80189ba <_dtoa_r+0x752>
 80189a8:	9a08      	ldr	r2, [sp, #32]
 80189aa:	429a      	cmp	r2, r3
 80189ac:	d1f7      	bne.n	801899e <_dtoa_r+0x736>
 80189ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80189b0:	9908      	ldr	r1, [sp, #32]
 80189b2:	3201      	adds	r2, #1
 80189b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80189b6:	2230      	movs	r2, #48	@ 0x30
 80189b8:	700a      	strb	r2, [r1, #0]
 80189ba:	781a      	ldrb	r2, [r3, #0]
 80189bc:	3201      	adds	r2, #1
 80189be:	701a      	strb	r2, [r3, #0]
 80189c0:	e7a4      	b.n	801890c <_dtoa_r+0x6a4>
 80189c2:	2200      	movs	r2, #0
 80189c4:	4bc6      	ldr	r3, [pc, #792]	@ (8018ce0 <_dtoa_r+0xa78>)
 80189c6:	f7e9 fdb7 	bl	8002538 <__aeabi_dmul>
 80189ca:	2200      	movs	r2, #0
 80189cc:	2300      	movs	r3, #0
 80189ce:	0006      	movs	r6, r0
 80189d0:	000f      	movs	r7, r1
 80189d2:	f7e7 fd3b 	bl	800044c <__aeabi_dcmpeq>
 80189d6:	2800      	cmp	r0, #0
 80189d8:	d100      	bne.n	80189dc <_dtoa_r+0x774>
 80189da:	e6a1      	b.n	8018720 <_dtoa_r+0x4b8>
 80189dc:	e6d8      	b.n	8018790 <_dtoa_r+0x528>
 80189de:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80189e0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80189e2:	9c06      	ldr	r4, [sp, #24]
 80189e4:	2f00      	cmp	r7, #0
 80189e6:	d014      	beq.n	8018a12 <_dtoa_r+0x7aa>
 80189e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80189ea:	2a01      	cmp	r2, #1
 80189ec:	dd00      	ble.n	80189f0 <_dtoa_r+0x788>
 80189ee:	e0c8      	b.n	8018b82 <_dtoa_r+0x91a>
 80189f0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80189f2:	2a00      	cmp	r2, #0
 80189f4:	d100      	bne.n	80189f8 <_dtoa_r+0x790>
 80189f6:	e0be      	b.n	8018b76 <_dtoa_r+0x90e>
 80189f8:	4aba      	ldr	r2, [pc, #744]	@ (8018ce4 <_dtoa_r+0xa7c>)
 80189fa:	189b      	adds	r3, r3, r2
 80189fc:	9a06      	ldr	r2, [sp, #24]
 80189fe:	2101      	movs	r1, #1
 8018a00:	18d2      	adds	r2, r2, r3
 8018a02:	9206      	str	r2, [sp, #24]
 8018a04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018a06:	9803      	ldr	r0, [sp, #12]
 8018a08:	18d3      	adds	r3, r2, r3
 8018a0a:	930d      	str	r3, [sp, #52]	@ 0x34
 8018a0c:	f000 fc22 	bl	8019254 <__i2b>
 8018a10:	0007      	movs	r7, r0
 8018a12:	2c00      	cmp	r4, #0
 8018a14:	d00e      	beq.n	8018a34 <_dtoa_r+0x7cc>
 8018a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	dd0b      	ble.n	8018a34 <_dtoa_r+0x7cc>
 8018a1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018a1e:	0023      	movs	r3, r4
 8018a20:	4294      	cmp	r4, r2
 8018a22:	dd00      	ble.n	8018a26 <_dtoa_r+0x7be>
 8018a24:	0013      	movs	r3, r2
 8018a26:	9a06      	ldr	r2, [sp, #24]
 8018a28:	1ae4      	subs	r4, r4, r3
 8018a2a:	1ad2      	subs	r2, r2, r3
 8018a2c:	9206      	str	r2, [sp, #24]
 8018a2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018a30:	1ad3      	subs	r3, r2, r3
 8018a32:	930d      	str	r3, [sp, #52]	@ 0x34
 8018a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d01f      	beq.n	8018a7a <_dtoa_r+0x812>
 8018a3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d100      	bne.n	8018a42 <_dtoa_r+0x7da>
 8018a40:	e0b5      	b.n	8018bae <_dtoa_r+0x946>
 8018a42:	2d00      	cmp	r5, #0
 8018a44:	d010      	beq.n	8018a68 <_dtoa_r+0x800>
 8018a46:	0039      	movs	r1, r7
 8018a48:	002a      	movs	r2, r5
 8018a4a:	9803      	ldr	r0, [sp, #12]
 8018a4c:	f000 fccc 	bl	80193e8 <__pow5mult>
 8018a50:	9a05      	ldr	r2, [sp, #20]
 8018a52:	0001      	movs	r1, r0
 8018a54:	0007      	movs	r7, r0
 8018a56:	9803      	ldr	r0, [sp, #12]
 8018a58:	f000 fc14 	bl	8019284 <__multiply>
 8018a5c:	0006      	movs	r6, r0
 8018a5e:	9905      	ldr	r1, [sp, #20]
 8018a60:	9803      	ldr	r0, [sp, #12]
 8018a62:	f000 fb3f 	bl	80190e4 <_Bfree>
 8018a66:	9605      	str	r6, [sp, #20]
 8018a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a6a:	1b5a      	subs	r2, r3, r5
 8018a6c:	42ab      	cmp	r3, r5
 8018a6e:	d004      	beq.n	8018a7a <_dtoa_r+0x812>
 8018a70:	9905      	ldr	r1, [sp, #20]
 8018a72:	9803      	ldr	r0, [sp, #12]
 8018a74:	f000 fcb8 	bl	80193e8 <__pow5mult>
 8018a78:	9005      	str	r0, [sp, #20]
 8018a7a:	2101      	movs	r1, #1
 8018a7c:	9803      	ldr	r0, [sp, #12]
 8018a7e:	f000 fbe9 	bl	8019254 <__i2b>
 8018a82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018a84:	0006      	movs	r6, r0
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d100      	bne.n	8018a8c <_dtoa_r+0x824>
 8018a8a:	e1bc      	b.n	8018e06 <_dtoa_r+0xb9e>
 8018a8c:	001a      	movs	r2, r3
 8018a8e:	0001      	movs	r1, r0
 8018a90:	9803      	ldr	r0, [sp, #12]
 8018a92:	f000 fca9 	bl	80193e8 <__pow5mult>
 8018a96:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018a98:	0006      	movs	r6, r0
 8018a9a:	2500      	movs	r5, #0
 8018a9c:	2b01      	cmp	r3, #1
 8018a9e:	dc16      	bgt.n	8018ace <_dtoa_r+0x866>
 8018aa0:	2500      	movs	r5, #0
 8018aa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018aa4:	42ab      	cmp	r3, r5
 8018aa6:	d10e      	bne.n	8018ac6 <_dtoa_r+0x85e>
 8018aa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018aaa:	031b      	lsls	r3, r3, #12
 8018aac:	42ab      	cmp	r3, r5
 8018aae:	d10a      	bne.n	8018ac6 <_dtoa_r+0x85e>
 8018ab0:	4b8d      	ldr	r3, [pc, #564]	@ (8018ce8 <_dtoa_r+0xa80>)
 8018ab2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018ab4:	4213      	tst	r3, r2
 8018ab6:	d006      	beq.n	8018ac6 <_dtoa_r+0x85e>
 8018ab8:	9b06      	ldr	r3, [sp, #24]
 8018aba:	3501      	adds	r5, #1
 8018abc:	3301      	adds	r3, #1
 8018abe:	9306      	str	r3, [sp, #24]
 8018ac0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ac2:	3301      	adds	r3, #1
 8018ac4:	930d      	str	r3, [sp, #52]	@ 0x34
 8018ac6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018ac8:	2001      	movs	r0, #1
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d008      	beq.n	8018ae0 <_dtoa_r+0x878>
 8018ace:	6933      	ldr	r3, [r6, #16]
 8018ad0:	3303      	adds	r3, #3
 8018ad2:	009b      	lsls	r3, r3, #2
 8018ad4:	18f3      	adds	r3, r6, r3
 8018ad6:	6858      	ldr	r0, [r3, #4]
 8018ad8:	f000 fb6c 	bl	80191b4 <__hi0bits>
 8018adc:	2320      	movs	r3, #32
 8018ade:	1a18      	subs	r0, r3, r0
 8018ae0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ae2:	1818      	adds	r0, r3, r0
 8018ae4:	0002      	movs	r2, r0
 8018ae6:	231f      	movs	r3, #31
 8018ae8:	401a      	ands	r2, r3
 8018aea:	4218      	tst	r0, r3
 8018aec:	d065      	beq.n	8018bba <_dtoa_r+0x952>
 8018aee:	3301      	adds	r3, #1
 8018af0:	1a9b      	subs	r3, r3, r2
 8018af2:	2b04      	cmp	r3, #4
 8018af4:	dd5d      	ble.n	8018bb2 <_dtoa_r+0x94a>
 8018af6:	231c      	movs	r3, #28
 8018af8:	1a9b      	subs	r3, r3, r2
 8018afa:	9a06      	ldr	r2, [sp, #24]
 8018afc:	18e4      	adds	r4, r4, r3
 8018afe:	18d2      	adds	r2, r2, r3
 8018b00:	9206      	str	r2, [sp, #24]
 8018b02:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018b04:	18d3      	adds	r3, r2, r3
 8018b06:	930d      	str	r3, [sp, #52]	@ 0x34
 8018b08:	9b06      	ldr	r3, [sp, #24]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	dd05      	ble.n	8018b1a <_dtoa_r+0x8b2>
 8018b0e:	001a      	movs	r2, r3
 8018b10:	9905      	ldr	r1, [sp, #20]
 8018b12:	9803      	ldr	r0, [sp, #12]
 8018b14:	f000 fcc4 	bl	80194a0 <__lshift>
 8018b18:	9005      	str	r0, [sp, #20]
 8018b1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	dd05      	ble.n	8018b2c <_dtoa_r+0x8c4>
 8018b20:	0031      	movs	r1, r6
 8018b22:	001a      	movs	r2, r3
 8018b24:	9803      	ldr	r0, [sp, #12]
 8018b26:	f000 fcbb 	bl	80194a0 <__lshift>
 8018b2a:	0006      	movs	r6, r0
 8018b2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d045      	beq.n	8018bbe <_dtoa_r+0x956>
 8018b32:	0031      	movs	r1, r6
 8018b34:	9805      	ldr	r0, [sp, #20]
 8018b36:	f000 fd1f 	bl	8019578 <__mcmp>
 8018b3a:	2800      	cmp	r0, #0
 8018b3c:	da3f      	bge.n	8018bbe <_dtoa_r+0x956>
 8018b3e:	9b04      	ldr	r3, [sp, #16]
 8018b40:	220a      	movs	r2, #10
 8018b42:	3b01      	subs	r3, #1
 8018b44:	930c      	str	r3, [sp, #48]	@ 0x30
 8018b46:	9905      	ldr	r1, [sp, #20]
 8018b48:	2300      	movs	r3, #0
 8018b4a:	9803      	ldr	r0, [sp, #12]
 8018b4c:	f000 faee 	bl	801912c <__multadd>
 8018b50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018b52:	9005      	str	r0, [sp, #20]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d100      	bne.n	8018b5a <_dtoa_r+0x8f2>
 8018b58:	e15c      	b.n	8018e14 <_dtoa_r+0xbac>
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	0039      	movs	r1, r7
 8018b5e:	220a      	movs	r2, #10
 8018b60:	9803      	ldr	r0, [sp, #12]
 8018b62:	f000 fae3 	bl	801912c <__multadd>
 8018b66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b68:	0007      	movs	r7, r0
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	dc55      	bgt.n	8018c1a <_dtoa_r+0x9b2>
 8018b6e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018b70:	2b02      	cmp	r3, #2
 8018b72:	dc2d      	bgt.n	8018bd0 <_dtoa_r+0x968>
 8018b74:	e051      	b.n	8018c1a <_dtoa_r+0x9b2>
 8018b76:	2336      	movs	r3, #54	@ 0x36
 8018b78:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8018b7a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018b7c:	9c06      	ldr	r4, [sp, #24]
 8018b7e:	1a9b      	subs	r3, r3, r2
 8018b80:	e73c      	b.n	80189fc <_dtoa_r+0x794>
 8018b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b84:	1e5d      	subs	r5, r3, #1
 8018b86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b88:	42ab      	cmp	r3, r5
 8018b8a:	db08      	blt.n	8018b9e <_dtoa_r+0x936>
 8018b8c:	1b5d      	subs	r5, r3, r5
 8018b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b90:	9c06      	ldr	r4, [sp, #24]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	db00      	blt.n	8018b98 <_dtoa_r+0x930>
 8018b96:	e731      	b.n	80189fc <_dtoa_r+0x794>
 8018b98:	1ae4      	subs	r4, r4, r3
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	e72e      	b.n	80189fc <_dtoa_r+0x794>
 8018b9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018ba0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018ba2:	1aeb      	subs	r3, r5, r3
 8018ba4:	18d3      	adds	r3, r2, r3
 8018ba6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018ba8:	9314      	str	r3, [sp, #80]	@ 0x50
 8018baa:	2500      	movs	r5, #0
 8018bac:	e7ef      	b.n	8018b8e <_dtoa_r+0x926>
 8018bae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018bb0:	e75e      	b.n	8018a70 <_dtoa_r+0x808>
 8018bb2:	2b04      	cmp	r3, #4
 8018bb4:	d0a8      	beq.n	8018b08 <_dtoa_r+0x8a0>
 8018bb6:	331c      	adds	r3, #28
 8018bb8:	e79f      	b.n	8018afa <_dtoa_r+0x892>
 8018bba:	0013      	movs	r3, r2
 8018bbc:	e7fb      	b.n	8018bb6 <_dtoa_r+0x94e>
 8018bbe:	9b04      	ldr	r3, [sp, #16]
 8018bc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8018bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bc4:	930e      	str	r3, [sp, #56]	@ 0x38
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	dc23      	bgt.n	8018c12 <_dtoa_r+0x9aa>
 8018bca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018bcc:	2b02      	cmp	r3, #2
 8018bce:	dd20      	ble.n	8018c12 <_dtoa_r+0x9aa>
 8018bd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d000      	beq.n	8018bd8 <_dtoa_r+0x970>
 8018bd6:	e6b5      	b.n	8018944 <_dtoa_r+0x6dc>
 8018bd8:	0031      	movs	r1, r6
 8018bda:	2205      	movs	r2, #5
 8018bdc:	9803      	ldr	r0, [sp, #12]
 8018bde:	f000 faa5 	bl	801912c <__multadd>
 8018be2:	0006      	movs	r6, r0
 8018be4:	0001      	movs	r1, r0
 8018be6:	9805      	ldr	r0, [sp, #20]
 8018be8:	f000 fcc6 	bl	8019578 <__mcmp>
 8018bec:	2800      	cmp	r0, #0
 8018bee:	dc00      	bgt.n	8018bf2 <_dtoa_r+0x98a>
 8018bf0:	e6a8      	b.n	8018944 <_dtoa_r+0x6dc>
 8018bf2:	9b08      	ldr	r3, [sp, #32]
 8018bf4:	9a08      	ldr	r2, [sp, #32]
 8018bf6:	1c5c      	adds	r4, r3, #1
 8018bf8:	2331      	movs	r3, #49	@ 0x31
 8018bfa:	7013      	strb	r3, [r2, #0]
 8018bfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bfe:	3301      	adds	r3, #1
 8018c00:	930c      	str	r3, [sp, #48]	@ 0x30
 8018c02:	e6a3      	b.n	801894c <_dtoa_r+0x6e4>
 8018c04:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018c06:	0037      	movs	r7, r6
 8018c08:	e7f3      	b.n	8018bf2 <_dtoa_r+0x98a>
 8018c0a:	9b04      	ldr	r3, [sp, #16]
 8018c0c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8018c0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8018c10:	e7f9      	b.n	8018c06 <_dtoa_r+0x99e>
 8018c12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d100      	bne.n	8018c1a <_dtoa_r+0x9b2>
 8018c18:	e100      	b.n	8018e1c <_dtoa_r+0xbb4>
 8018c1a:	2c00      	cmp	r4, #0
 8018c1c:	dd05      	ble.n	8018c2a <_dtoa_r+0x9c2>
 8018c1e:	0039      	movs	r1, r7
 8018c20:	0022      	movs	r2, r4
 8018c22:	9803      	ldr	r0, [sp, #12]
 8018c24:	f000 fc3c 	bl	80194a0 <__lshift>
 8018c28:	0007      	movs	r7, r0
 8018c2a:	0038      	movs	r0, r7
 8018c2c:	2d00      	cmp	r5, #0
 8018c2e:	d018      	beq.n	8018c62 <_dtoa_r+0x9fa>
 8018c30:	6879      	ldr	r1, [r7, #4]
 8018c32:	9803      	ldr	r0, [sp, #12]
 8018c34:	f000 fa12 	bl	801905c <_Balloc>
 8018c38:	1e04      	subs	r4, r0, #0
 8018c3a:	d105      	bne.n	8018c48 <_dtoa_r+0x9e0>
 8018c3c:	0022      	movs	r2, r4
 8018c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8018cec <_dtoa_r+0xa84>)
 8018c40:	482b      	ldr	r0, [pc, #172]	@ (8018cf0 <_dtoa_r+0xa88>)
 8018c42:	492c      	ldr	r1, [pc, #176]	@ (8018cf4 <_dtoa_r+0xa8c>)
 8018c44:	f7ff fb25 	bl	8018292 <_dtoa_r+0x2a>
 8018c48:	0039      	movs	r1, r7
 8018c4a:	693a      	ldr	r2, [r7, #16]
 8018c4c:	310c      	adds	r1, #12
 8018c4e:	3202      	adds	r2, #2
 8018c50:	0092      	lsls	r2, r2, #2
 8018c52:	300c      	adds	r0, #12
 8018c54:	f7ff fa70 	bl	8018138 <memcpy>
 8018c58:	2201      	movs	r2, #1
 8018c5a:	0021      	movs	r1, r4
 8018c5c:	9803      	ldr	r0, [sp, #12]
 8018c5e:	f000 fc1f 	bl	80194a0 <__lshift>
 8018c62:	9b08      	ldr	r3, [sp, #32]
 8018c64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018c66:	9306      	str	r3, [sp, #24]
 8018c68:	3b01      	subs	r3, #1
 8018c6a:	189b      	adds	r3, r3, r2
 8018c6c:	2201      	movs	r2, #1
 8018c6e:	9704      	str	r7, [sp, #16]
 8018c70:	0007      	movs	r7, r0
 8018c72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018c76:	4013      	ands	r3, r2
 8018c78:	930e      	str	r3, [sp, #56]	@ 0x38
 8018c7a:	0031      	movs	r1, r6
 8018c7c:	9805      	ldr	r0, [sp, #20]
 8018c7e:	f7ff fa64 	bl	801814a <quorem>
 8018c82:	9904      	ldr	r1, [sp, #16]
 8018c84:	0005      	movs	r5, r0
 8018c86:	900a      	str	r0, [sp, #40]	@ 0x28
 8018c88:	9805      	ldr	r0, [sp, #20]
 8018c8a:	f000 fc75 	bl	8019578 <__mcmp>
 8018c8e:	003a      	movs	r2, r7
 8018c90:	900d      	str	r0, [sp, #52]	@ 0x34
 8018c92:	0031      	movs	r1, r6
 8018c94:	9803      	ldr	r0, [sp, #12]
 8018c96:	f000 fc8b 	bl	80195b0 <__mdiff>
 8018c9a:	2201      	movs	r2, #1
 8018c9c:	68c3      	ldr	r3, [r0, #12]
 8018c9e:	0004      	movs	r4, r0
 8018ca0:	3530      	adds	r5, #48	@ 0x30
 8018ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d104      	bne.n	8018cb2 <_dtoa_r+0xa4a>
 8018ca8:	0001      	movs	r1, r0
 8018caa:	9805      	ldr	r0, [sp, #20]
 8018cac:	f000 fc64 	bl	8019578 <__mcmp>
 8018cb0:	9009      	str	r0, [sp, #36]	@ 0x24
 8018cb2:	0021      	movs	r1, r4
 8018cb4:	9803      	ldr	r0, [sp, #12]
 8018cb6:	f000 fa15 	bl	80190e4 <_Bfree>
 8018cba:	9b06      	ldr	r3, [sp, #24]
 8018cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018cbe:	1c5c      	adds	r4, r3, #1
 8018cc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018cc2:	4313      	orrs	r3, r2
 8018cc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018cc6:	4313      	orrs	r3, r2
 8018cc8:	d116      	bne.n	8018cf8 <_dtoa_r+0xa90>
 8018cca:	2d39      	cmp	r5, #57	@ 0x39
 8018ccc:	d02f      	beq.n	8018d2e <_dtoa_r+0xac6>
 8018cce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	dd01      	ble.n	8018cd8 <_dtoa_r+0xa70>
 8018cd4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018cd6:	3531      	adds	r5, #49	@ 0x31
 8018cd8:	9b06      	ldr	r3, [sp, #24]
 8018cda:	701d      	strb	r5, [r3, #0]
 8018cdc:	e638      	b.n	8018950 <_dtoa_r+0x6e8>
 8018cde:	46c0      	nop			@ (mov r8, r8)
 8018ce0:	40240000 	.word	0x40240000
 8018ce4:	00000433 	.word	0x00000433
 8018ce8:	7ff00000 	.word	0x7ff00000
 8018cec:	0801bd5c 	.word	0x0801bd5c
 8018cf0:	0801bd04 	.word	0x0801bd04
 8018cf4:	000002ef 	.word	0x000002ef
 8018cf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	db04      	blt.n	8018d08 <_dtoa_r+0xaa0>
 8018cfe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018d00:	4313      	orrs	r3, r2
 8018d02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018d04:	4313      	orrs	r3, r2
 8018d06:	d11e      	bne.n	8018d46 <_dtoa_r+0xade>
 8018d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	dde4      	ble.n	8018cd8 <_dtoa_r+0xa70>
 8018d0e:	9905      	ldr	r1, [sp, #20]
 8018d10:	2201      	movs	r2, #1
 8018d12:	9803      	ldr	r0, [sp, #12]
 8018d14:	f000 fbc4 	bl	80194a0 <__lshift>
 8018d18:	0031      	movs	r1, r6
 8018d1a:	9005      	str	r0, [sp, #20]
 8018d1c:	f000 fc2c 	bl	8019578 <__mcmp>
 8018d20:	2800      	cmp	r0, #0
 8018d22:	dc02      	bgt.n	8018d2a <_dtoa_r+0xac2>
 8018d24:	d1d8      	bne.n	8018cd8 <_dtoa_r+0xa70>
 8018d26:	07eb      	lsls	r3, r5, #31
 8018d28:	d5d6      	bpl.n	8018cd8 <_dtoa_r+0xa70>
 8018d2a:	2d39      	cmp	r5, #57	@ 0x39
 8018d2c:	d1d2      	bne.n	8018cd4 <_dtoa_r+0xa6c>
 8018d2e:	2339      	movs	r3, #57	@ 0x39
 8018d30:	9a06      	ldr	r2, [sp, #24]
 8018d32:	7013      	strb	r3, [r2, #0]
 8018d34:	0023      	movs	r3, r4
 8018d36:	001c      	movs	r4, r3
 8018d38:	3b01      	subs	r3, #1
 8018d3a:	781a      	ldrb	r2, [r3, #0]
 8018d3c:	2a39      	cmp	r2, #57	@ 0x39
 8018d3e:	d04f      	beq.n	8018de0 <_dtoa_r+0xb78>
 8018d40:	3201      	adds	r2, #1
 8018d42:	701a      	strb	r2, [r3, #0]
 8018d44:	e604      	b.n	8018950 <_dtoa_r+0x6e8>
 8018d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	dd03      	ble.n	8018d54 <_dtoa_r+0xaec>
 8018d4c:	2d39      	cmp	r5, #57	@ 0x39
 8018d4e:	d0ee      	beq.n	8018d2e <_dtoa_r+0xac6>
 8018d50:	3501      	adds	r5, #1
 8018d52:	e7c1      	b.n	8018cd8 <_dtoa_r+0xa70>
 8018d54:	9b06      	ldr	r3, [sp, #24]
 8018d56:	9a06      	ldr	r2, [sp, #24]
 8018d58:	701d      	strb	r5, [r3, #0]
 8018d5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d5c:	4293      	cmp	r3, r2
 8018d5e:	d02a      	beq.n	8018db6 <_dtoa_r+0xb4e>
 8018d60:	2300      	movs	r3, #0
 8018d62:	220a      	movs	r2, #10
 8018d64:	9905      	ldr	r1, [sp, #20]
 8018d66:	9803      	ldr	r0, [sp, #12]
 8018d68:	f000 f9e0 	bl	801912c <__multadd>
 8018d6c:	9b04      	ldr	r3, [sp, #16]
 8018d6e:	9005      	str	r0, [sp, #20]
 8018d70:	42bb      	cmp	r3, r7
 8018d72:	d109      	bne.n	8018d88 <_dtoa_r+0xb20>
 8018d74:	2300      	movs	r3, #0
 8018d76:	220a      	movs	r2, #10
 8018d78:	9904      	ldr	r1, [sp, #16]
 8018d7a:	9803      	ldr	r0, [sp, #12]
 8018d7c:	f000 f9d6 	bl	801912c <__multadd>
 8018d80:	9004      	str	r0, [sp, #16]
 8018d82:	0007      	movs	r7, r0
 8018d84:	9406      	str	r4, [sp, #24]
 8018d86:	e778      	b.n	8018c7a <_dtoa_r+0xa12>
 8018d88:	9904      	ldr	r1, [sp, #16]
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	220a      	movs	r2, #10
 8018d8e:	9803      	ldr	r0, [sp, #12]
 8018d90:	f000 f9cc 	bl	801912c <__multadd>
 8018d94:	2300      	movs	r3, #0
 8018d96:	9004      	str	r0, [sp, #16]
 8018d98:	220a      	movs	r2, #10
 8018d9a:	0039      	movs	r1, r7
 8018d9c:	9803      	ldr	r0, [sp, #12]
 8018d9e:	f000 f9c5 	bl	801912c <__multadd>
 8018da2:	e7ee      	b.n	8018d82 <_dtoa_r+0xb1a>
 8018da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018da6:	2401      	movs	r4, #1
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	dd00      	ble.n	8018dae <_dtoa_r+0xb46>
 8018dac:	001c      	movs	r4, r3
 8018dae:	9b08      	ldr	r3, [sp, #32]
 8018db0:	191c      	adds	r4, r3, r4
 8018db2:	2300      	movs	r3, #0
 8018db4:	9304      	str	r3, [sp, #16]
 8018db6:	9905      	ldr	r1, [sp, #20]
 8018db8:	2201      	movs	r2, #1
 8018dba:	9803      	ldr	r0, [sp, #12]
 8018dbc:	f000 fb70 	bl	80194a0 <__lshift>
 8018dc0:	0031      	movs	r1, r6
 8018dc2:	9005      	str	r0, [sp, #20]
 8018dc4:	f000 fbd8 	bl	8019578 <__mcmp>
 8018dc8:	2800      	cmp	r0, #0
 8018dca:	dcb3      	bgt.n	8018d34 <_dtoa_r+0xacc>
 8018dcc:	d101      	bne.n	8018dd2 <_dtoa_r+0xb6a>
 8018dce:	07ed      	lsls	r5, r5, #31
 8018dd0:	d4b0      	bmi.n	8018d34 <_dtoa_r+0xacc>
 8018dd2:	0023      	movs	r3, r4
 8018dd4:	001c      	movs	r4, r3
 8018dd6:	3b01      	subs	r3, #1
 8018dd8:	781a      	ldrb	r2, [r3, #0]
 8018dda:	2a30      	cmp	r2, #48	@ 0x30
 8018ddc:	d0fa      	beq.n	8018dd4 <_dtoa_r+0xb6c>
 8018dde:	e5b7      	b.n	8018950 <_dtoa_r+0x6e8>
 8018de0:	9a08      	ldr	r2, [sp, #32]
 8018de2:	429a      	cmp	r2, r3
 8018de4:	d1a7      	bne.n	8018d36 <_dtoa_r+0xace>
 8018de6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018de8:	3301      	adds	r3, #1
 8018dea:	930c      	str	r3, [sp, #48]	@ 0x30
 8018dec:	2331      	movs	r3, #49	@ 0x31
 8018dee:	7013      	strb	r3, [r2, #0]
 8018df0:	e5ae      	b.n	8018950 <_dtoa_r+0x6e8>
 8018df2:	4b15      	ldr	r3, [pc, #84]	@ (8018e48 <_dtoa_r+0xbe0>)
 8018df4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018df6:	9308      	str	r3, [sp, #32]
 8018df8:	4b14      	ldr	r3, [pc, #80]	@ (8018e4c <_dtoa_r+0xbe4>)
 8018dfa:	2a00      	cmp	r2, #0
 8018dfc:	d001      	beq.n	8018e02 <_dtoa_r+0xb9a>
 8018dfe:	f7ff fa7b 	bl	80182f8 <_dtoa_r+0x90>
 8018e02:	f7ff fa7b 	bl	80182fc <_dtoa_r+0x94>
 8018e06:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018e08:	2b01      	cmp	r3, #1
 8018e0a:	dc00      	bgt.n	8018e0e <_dtoa_r+0xba6>
 8018e0c:	e648      	b.n	8018aa0 <_dtoa_r+0x838>
 8018e0e:	2001      	movs	r0, #1
 8018e10:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8018e12:	e665      	b.n	8018ae0 <_dtoa_r+0x878>
 8018e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	dc00      	bgt.n	8018e1c <_dtoa_r+0xbb4>
 8018e1a:	e6d6      	b.n	8018bca <_dtoa_r+0x962>
 8018e1c:	2400      	movs	r4, #0
 8018e1e:	0031      	movs	r1, r6
 8018e20:	9805      	ldr	r0, [sp, #20]
 8018e22:	f7ff f992 	bl	801814a <quorem>
 8018e26:	9b08      	ldr	r3, [sp, #32]
 8018e28:	3030      	adds	r0, #48	@ 0x30
 8018e2a:	5518      	strb	r0, [r3, r4]
 8018e2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e2e:	3401      	adds	r4, #1
 8018e30:	0005      	movs	r5, r0
 8018e32:	429c      	cmp	r4, r3
 8018e34:	dab6      	bge.n	8018da4 <_dtoa_r+0xb3c>
 8018e36:	2300      	movs	r3, #0
 8018e38:	220a      	movs	r2, #10
 8018e3a:	9905      	ldr	r1, [sp, #20]
 8018e3c:	9803      	ldr	r0, [sp, #12]
 8018e3e:	f000 f975 	bl	801912c <__multadd>
 8018e42:	9005      	str	r0, [sp, #20]
 8018e44:	e7eb      	b.n	8018e1e <_dtoa_r+0xbb6>
 8018e46:	46c0      	nop			@ (mov r8, r8)
 8018e48:	0801bce0 	.word	0x0801bce0
 8018e4c:	0801bce8 	.word	0x0801bce8

08018e50 <_free_r>:
 8018e50:	b570      	push	{r4, r5, r6, lr}
 8018e52:	0005      	movs	r5, r0
 8018e54:	1e0c      	subs	r4, r1, #0
 8018e56:	d010      	beq.n	8018e7a <_free_r+0x2a>
 8018e58:	3c04      	subs	r4, #4
 8018e5a:	6823      	ldr	r3, [r4, #0]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	da00      	bge.n	8018e62 <_free_r+0x12>
 8018e60:	18e4      	adds	r4, r4, r3
 8018e62:	0028      	movs	r0, r5
 8018e64:	f000 f8ea 	bl	801903c <__malloc_lock>
 8018e68:	4a1d      	ldr	r2, [pc, #116]	@ (8018ee0 <_free_r+0x90>)
 8018e6a:	6813      	ldr	r3, [r2, #0]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d105      	bne.n	8018e7c <_free_r+0x2c>
 8018e70:	6063      	str	r3, [r4, #4]
 8018e72:	6014      	str	r4, [r2, #0]
 8018e74:	0028      	movs	r0, r5
 8018e76:	f000 f8e9 	bl	801904c <__malloc_unlock>
 8018e7a:	bd70      	pop	{r4, r5, r6, pc}
 8018e7c:	42a3      	cmp	r3, r4
 8018e7e:	d908      	bls.n	8018e92 <_free_r+0x42>
 8018e80:	6820      	ldr	r0, [r4, #0]
 8018e82:	1821      	adds	r1, r4, r0
 8018e84:	428b      	cmp	r3, r1
 8018e86:	d1f3      	bne.n	8018e70 <_free_r+0x20>
 8018e88:	6819      	ldr	r1, [r3, #0]
 8018e8a:	685b      	ldr	r3, [r3, #4]
 8018e8c:	1809      	adds	r1, r1, r0
 8018e8e:	6021      	str	r1, [r4, #0]
 8018e90:	e7ee      	b.n	8018e70 <_free_r+0x20>
 8018e92:	001a      	movs	r2, r3
 8018e94:	685b      	ldr	r3, [r3, #4]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d001      	beq.n	8018e9e <_free_r+0x4e>
 8018e9a:	42a3      	cmp	r3, r4
 8018e9c:	d9f9      	bls.n	8018e92 <_free_r+0x42>
 8018e9e:	6811      	ldr	r1, [r2, #0]
 8018ea0:	1850      	adds	r0, r2, r1
 8018ea2:	42a0      	cmp	r0, r4
 8018ea4:	d10b      	bne.n	8018ebe <_free_r+0x6e>
 8018ea6:	6820      	ldr	r0, [r4, #0]
 8018ea8:	1809      	adds	r1, r1, r0
 8018eaa:	1850      	adds	r0, r2, r1
 8018eac:	6011      	str	r1, [r2, #0]
 8018eae:	4283      	cmp	r3, r0
 8018eb0:	d1e0      	bne.n	8018e74 <_free_r+0x24>
 8018eb2:	6818      	ldr	r0, [r3, #0]
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	1841      	adds	r1, r0, r1
 8018eb8:	6011      	str	r1, [r2, #0]
 8018eba:	6053      	str	r3, [r2, #4]
 8018ebc:	e7da      	b.n	8018e74 <_free_r+0x24>
 8018ebe:	42a0      	cmp	r0, r4
 8018ec0:	d902      	bls.n	8018ec8 <_free_r+0x78>
 8018ec2:	230c      	movs	r3, #12
 8018ec4:	602b      	str	r3, [r5, #0]
 8018ec6:	e7d5      	b.n	8018e74 <_free_r+0x24>
 8018ec8:	6820      	ldr	r0, [r4, #0]
 8018eca:	1821      	adds	r1, r4, r0
 8018ecc:	428b      	cmp	r3, r1
 8018ece:	d103      	bne.n	8018ed8 <_free_r+0x88>
 8018ed0:	6819      	ldr	r1, [r3, #0]
 8018ed2:	685b      	ldr	r3, [r3, #4]
 8018ed4:	1809      	adds	r1, r1, r0
 8018ed6:	6021      	str	r1, [r4, #0]
 8018ed8:	6063      	str	r3, [r4, #4]
 8018eda:	6054      	str	r4, [r2, #4]
 8018edc:	e7ca      	b.n	8018e74 <_free_r+0x24>
 8018ede:	46c0      	nop			@ (mov r8, r8)
 8018ee0:	20004108 	.word	0x20004108

08018ee4 <malloc>:
 8018ee4:	b510      	push	{r4, lr}
 8018ee6:	4b03      	ldr	r3, [pc, #12]	@ (8018ef4 <malloc+0x10>)
 8018ee8:	0001      	movs	r1, r0
 8018eea:	6818      	ldr	r0, [r3, #0]
 8018eec:	f000 f826 	bl	8018f3c <_malloc_r>
 8018ef0:	bd10      	pop	{r4, pc}
 8018ef2:	46c0      	nop			@ (mov r8, r8)
 8018ef4:	200001f0 	.word	0x200001f0

08018ef8 <sbrk_aligned>:
 8018ef8:	b570      	push	{r4, r5, r6, lr}
 8018efa:	4e0f      	ldr	r6, [pc, #60]	@ (8018f38 <sbrk_aligned+0x40>)
 8018efc:	000d      	movs	r5, r1
 8018efe:	6831      	ldr	r1, [r6, #0]
 8018f00:	0004      	movs	r4, r0
 8018f02:	2900      	cmp	r1, #0
 8018f04:	d102      	bne.n	8018f0c <sbrk_aligned+0x14>
 8018f06:	f001 f855 	bl	8019fb4 <_sbrk_r>
 8018f0a:	6030      	str	r0, [r6, #0]
 8018f0c:	0029      	movs	r1, r5
 8018f0e:	0020      	movs	r0, r4
 8018f10:	f001 f850 	bl	8019fb4 <_sbrk_r>
 8018f14:	1c43      	adds	r3, r0, #1
 8018f16:	d103      	bne.n	8018f20 <sbrk_aligned+0x28>
 8018f18:	2501      	movs	r5, #1
 8018f1a:	426d      	negs	r5, r5
 8018f1c:	0028      	movs	r0, r5
 8018f1e:	bd70      	pop	{r4, r5, r6, pc}
 8018f20:	2303      	movs	r3, #3
 8018f22:	1cc5      	adds	r5, r0, #3
 8018f24:	439d      	bics	r5, r3
 8018f26:	42a8      	cmp	r0, r5
 8018f28:	d0f8      	beq.n	8018f1c <sbrk_aligned+0x24>
 8018f2a:	1a29      	subs	r1, r5, r0
 8018f2c:	0020      	movs	r0, r4
 8018f2e:	f001 f841 	bl	8019fb4 <_sbrk_r>
 8018f32:	3001      	adds	r0, #1
 8018f34:	d1f2      	bne.n	8018f1c <sbrk_aligned+0x24>
 8018f36:	e7ef      	b.n	8018f18 <sbrk_aligned+0x20>
 8018f38:	20004104 	.word	0x20004104

08018f3c <_malloc_r>:
 8018f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f3e:	2203      	movs	r2, #3
 8018f40:	1ccb      	adds	r3, r1, #3
 8018f42:	4393      	bics	r3, r2
 8018f44:	3308      	adds	r3, #8
 8018f46:	0005      	movs	r5, r0
 8018f48:	001f      	movs	r7, r3
 8018f4a:	2b0c      	cmp	r3, #12
 8018f4c:	d234      	bcs.n	8018fb8 <_malloc_r+0x7c>
 8018f4e:	270c      	movs	r7, #12
 8018f50:	42b9      	cmp	r1, r7
 8018f52:	d833      	bhi.n	8018fbc <_malloc_r+0x80>
 8018f54:	0028      	movs	r0, r5
 8018f56:	f000 f871 	bl	801903c <__malloc_lock>
 8018f5a:	4e37      	ldr	r6, [pc, #220]	@ (8019038 <_malloc_r+0xfc>)
 8018f5c:	6833      	ldr	r3, [r6, #0]
 8018f5e:	001c      	movs	r4, r3
 8018f60:	2c00      	cmp	r4, #0
 8018f62:	d12f      	bne.n	8018fc4 <_malloc_r+0x88>
 8018f64:	0039      	movs	r1, r7
 8018f66:	0028      	movs	r0, r5
 8018f68:	f7ff ffc6 	bl	8018ef8 <sbrk_aligned>
 8018f6c:	0004      	movs	r4, r0
 8018f6e:	1c43      	adds	r3, r0, #1
 8018f70:	d15f      	bne.n	8019032 <_malloc_r+0xf6>
 8018f72:	6834      	ldr	r4, [r6, #0]
 8018f74:	9400      	str	r4, [sp, #0]
 8018f76:	9b00      	ldr	r3, [sp, #0]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d14a      	bne.n	8019012 <_malloc_r+0xd6>
 8018f7c:	2c00      	cmp	r4, #0
 8018f7e:	d052      	beq.n	8019026 <_malloc_r+0xea>
 8018f80:	6823      	ldr	r3, [r4, #0]
 8018f82:	0028      	movs	r0, r5
 8018f84:	18e3      	adds	r3, r4, r3
 8018f86:	9900      	ldr	r1, [sp, #0]
 8018f88:	9301      	str	r3, [sp, #4]
 8018f8a:	f001 f813 	bl	8019fb4 <_sbrk_r>
 8018f8e:	9b01      	ldr	r3, [sp, #4]
 8018f90:	4283      	cmp	r3, r0
 8018f92:	d148      	bne.n	8019026 <_malloc_r+0xea>
 8018f94:	6823      	ldr	r3, [r4, #0]
 8018f96:	0028      	movs	r0, r5
 8018f98:	1aff      	subs	r7, r7, r3
 8018f9a:	0039      	movs	r1, r7
 8018f9c:	f7ff ffac 	bl	8018ef8 <sbrk_aligned>
 8018fa0:	3001      	adds	r0, #1
 8018fa2:	d040      	beq.n	8019026 <_malloc_r+0xea>
 8018fa4:	6823      	ldr	r3, [r4, #0]
 8018fa6:	19db      	adds	r3, r3, r7
 8018fa8:	6023      	str	r3, [r4, #0]
 8018faa:	6833      	ldr	r3, [r6, #0]
 8018fac:	685a      	ldr	r2, [r3, #4]
 8018fae:	2a00      	cmp	r2, #0
 8018fb0:	d133      	bne.n	801901a <_malloc_r+0xde>
 8018fb2:	9b00      	ldr	r3, [sp, #0]
 8018fb4:	6033      	str	r3, [r6, #0]
 8018fb6:	e019      	b.n	8018fec <_malloc_r+0xb0>
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	dac9      	bge.n	8018f50 <_malloc_r+0x14>
 8018fbc:	230c      	movs	r3, #12
 8018fbe:	602b      	str	r3, [r5, #0]
 8018fc0:	2000      	movs	r0, #0
 8018fc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018fc4:	6821      	ldr	r1, [r4, #0]
 8018fc6:	1bc9      	subs	r1, r1, r7
 8018fc8:	d420      	bmi.n	801900c <_malloc_r+0xd0>
 8018fca:	290b      	cmp	r1, #11
 8018fcc:	d90a      	bls.n	8018fe4 <_malloc_r+0xa8>
 8018fce:	19e2      	adds	r2, r4, r7
 8018fd0:	6027      	str	r7, [r4, #0]
 8018fd2:	42a3      	cmp	r3, r4
 8018fd4:	d104      	bne.n	8018fe0 <_malloc_r+0xa4>
 8018fd6:	6032      	str	r2, [r6, #0]
 8018fd8:	6863      	ldr	r3, [r4, #4]
 8018fda:	6011      	str	r1, [r2, #0]
 8018fdc:	6053      	str	r3, [r2, #4]
 8018fde:	e005      	b.n	8018fec <_malloc_r+0xb0>
 8018fe0:	605a      	str	r2, [r3, #4]
 8018fe2:	e7f9      	b.n	8018fd8 <_malloc_r+0x9c>
 8018fe4:	6862      	ldr	r2, [r4, #4]
 8018fe6:	42a3      	cmp	r3, r4
 8018fe8:	d10e      	bne.n	8019008 <_malloc_r+0xcc>
 8018fea:	6032      	str	r2, [r6, #0]
 8018fec:	0028      	movs	r0, r5
 8018fee:	f000 f82d 	bl	801904c <__malloc_unlock>
 8018ff2:	0020      	movs	r0, r4
 8018ff4:	2207      	movs	r2, #7
 8018ff6:	300b      	adds	r0, #11
 8018ff8:	1d23      	adds	r3, r4, #4
 8018ffa:	4390      	bics	r0, r2
 8018ffc:	1ac2      	subs	r2, r0, r3
 8018ffe:	4298      	cmp	r0, r3
 8019000:	d0df      	beq.n	8018fc2 <_malloc_r+0x86>
 8019002:	1a1b      	subs	r3, r3, r0
 8019004:	50a3      	str	r3, [r4, r2]
 8019006:	e7dc      	b.n	8018fc2 <_malloc_r+0x86>
 8019008:	605a      	str	r2, [r3, #4]
 801900a:	e7ef      	b.n	8018fec <_malloc_r+0xb0>
 801900c:	0023      	movs	r3, r4
 801900e:	6864      	ldr	r4, [r4, #4]
 8019010:	e7a6      	b.n	8018f60 <_malloc_r+0x24>
 8019012:	9c00      	ldr	r4, [sp, #0]
 8019014:	6863      	ldr	r3, [r4, #4]
 8019016:	9300      	str	r3, [sp, #0]
 8019018:	e7ad      	b.n	8018f76 <_malloc_r+0x3a>
 801901a:	001a      	movs	r2, r3
 801901c:	685b      	ldr	r3, [r3, #4]
 801901e:	42a3      	cmp	r3, r4
 8019020:	d1fb      	bne.n	801901a <_malloc_r+0xde>
 8019022:	2300      	movs	r3, #0
 8019024:	e7da      	b.n	8018fdc <_malloc_r+0xa0>
 8019026:	230c      	movs	r3, #12
 8019028:	0028      	movs	r0, r5
 801902a:	602b      	str	r3, [r5, #0]
 801902c:	f000 f80e 	bl	801904c <__malloc_unlock>
 8019030:	e7c6      	b.n	8018fc0 <_malloc_r+0x84>
 8019032:	6007      	str	r7, [r0, #0]
 8019034:	e7da      	b.n	8018fec <_malloc_r+0xb0>
 8019036:	46c0      	nop			@ (mov r8, r8)
 8019038:	20004108 	.word	0x20004108

0801903c <__malloc_lock>:
 801903c:	b510      	push	{r4, lr}
 801903e:	4802      	ldr	r0, [pc, #8]	@ (8019048 <__malloc_lock+0xc>)
 8019040:	f7ff f86d 	bl	801811e <__retarget_lock_acquire_recursive>
 8019044:	bd10      	pop	{r4, pc}
 8019046:	46c0      	nop			@ (mov r8, r8)
 8019048:	20004100 	.word	0x20004100

0801904c <__malloc_unlock>:
 801904c:	b510      	push	{r4, lr}
 801904e:	4802      	ldr	r0, [pc, #8]	@ (8019058 <__malloc_unlock+0xc>)
 8019050:	f7ff f866 	bl	8018120 <__retarget_lock_release_recursive>
 8019054:	bd10      	pop	{r4, pc}
 8019056:	46c0      	nop			@ (mov r8, r8)
 8019058:	20004100 	.word	0x20004100

0801905c <_Balloc>:
 801905c:	b570      	push	{r4, r5, r6, lr}
 801905e:	69c5      	ldr	r5, [r0, #28]
 8019060:	0006      	movs	r6, r0
 8019062:	000c      	movs	r4, r1
 8019064:	2d00      	cmp	r5, #0
 8019066:	d10e      	bne.n	8019086 <_Balloc+0x2a>
 8019068:	2010      	movs	r0, #16
 801906a:	f7ff ff3b 	bl	8018ee4 <malloc>
 801906e:	1e02      	subs	r2, r0, #0
 8019070:	61f0      	str	r0, [r6, #28]
 8019072:	d104      	bne.n	801907e <_Balloc+0x22>
 8019074:	216b      	movs	r1, #107	@ 0x6b
 8019076:	4b19      	ldr	r3, [pc, #100]	@ (80190dc <_Balloc+0x80>)
 8019078:	4819      	ldr	r0, [pc, #100]	@ (80190e0 <_Balloc+0x84>)
 801907a:	f000 ffad 	bl	8019fd8 <__assert_func>
 801907e:	6045      	str	r5, [r0, #4]
 8019080:	6085      	str	r5, [r0, #8]
 8019082:	6005      	str	r5, [r0, #0]
 8019084:	60c5      	str	r5, [r0, #12]
 8019086:	69f5      	ldr	r5, [r6, #28]
 8019088:	68eb      	ldr	r3, [r5, #12]
 801908a:	2b00      	cmp	r3, #0
 801908c:	d013      	beq.n	80190b6 <_Balloc+0x5a>
 801908e:	69f3      	ldr	r3, [r6, #28]
 8019090:	00a2      	lsls	r2, r4, #2
 8019092:	68db      	ldr	r3, [r3, #12]
 8019094:	189b      	adds	r3, r3, r2
 8019096:	6818      	ldr	r0, [r3, #0]
 8019098:	2800      	cmp	r0, #0
 801909a:	d118      	bne.n	80190ce <_Balloc+0x72>
 801909c:	2101      	movs	r1, #1
 801909e:	000d      	movs	r5, r1
 80190a0:	40a5      	lsls	r5, r4
 80190a2:	1d6a      	adds	r2, r5, #5
 80190a4:	0030      	movs	r0, r6
 80190a6:	0092      	lsls	r2, r2, #2
 80190a8:	f000 ffb4 	bl	801a014 <_calloc_r>
 80190ac:	2800      	cmp	r0, #0
 80190ae:	d00c      	beq.n	80190ca <_Balloc+0x6e>
 80190b0:	6044      	str	r4, [r0, #4]
 80190b2:	6085      	str	r5, [r0, #8]
 80190b4:	e00d      	b.n	80190d2 <_Balloc+0x76>
 80190b6:	2221      	movs	r2, #33	@ 0x21
 80190b8:	2104      	movs	r1, #4
 80190ba:	0030      	movs	r0, r6
 80190bc:	f000 ffaa 	bl	801a014 <_calloc_r>
 80190c0:	69f3      	ldr	r3, [r6, #28]
 80190c2:	60e8      	str	r0, [r5, #12]
 80190c4:	68db      	ldr	r3, [r3, #12]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d1e1      	bne.n	801908e <_Balloc+0x32>
 80190ca:	2000      	movs	r0, #0
 80190cc:	bd70      	pop	{r4, r5, r6, pc}
 80190ce:	6802      	ldr	r2, [r0, #0]
 80190d0:	601a      	str	r2, [r3, #0]
 80190d2:	2300      	movs	r3, #0
 80190d4:	6103      	str	r3, [r0, #16]
 80190d6:	60c3      	str	r3, [r0, #12]
 80190d8:	e7f8      	b.n	80190cc <_Balloc+0x70>
 80190da:	46c0      	nop			@ (mov r8, r8)
 80190dc:	0801bced 	.word	0x0801bced
 80190e0:	0801bd6d 	.word	0x0801bd6d

080190e4 <_Bfree>:
 80190e4:	b570      	push	{r4, r5, r6, lr}
 80190e6:	69c6      	ldr	r6, [r0, #28]
 80190e8:	0005      	movs	r5, r0
 80190ea:	000c      	movs	r4, r1
 80190ec:	2e00      	cmp	r6, #0
 80190ee:	d10e      	bne.n	801910e <_Bfree+0x2a>
 80190f0:	2010      	movs	r0, #16
 80190f2:	f7ff fef7 	bl	8018ee4 <malloc>
 80190f6:	1e02      	subs	r2, r0, #0
 80190f8:	61e8      	str	r0, [r5, #28]
 80190fa:	d104      	bne.n	8019106 <_Bfree+0x22>
 80190fc:	218f      	movs	r1, #143	@ 0x8f
 80190fe:	4b09      	ldr	r3, [pc, #36]	@ (8019124 <_Bfree+0x40>)
 8019100:	4809      	ldr	r0, [pc, #36]	@ (8019128 <_Bfree+0x44>)
 8019102:	f000 ff69 	bl	8019fd8 <__assert_func>
 8019106:	6046      	str	r6, [r0, #4]
 8019108:	6086      	str	r6, [r0, #8]
 801910a:	6006      	str	r6, [r0, #0]
 801910c:	60c6      	str	r6, [r0, #12]
 801910e:	2c00      	cmp	r4, #0
 8019110:	d007      	beq.n	8019122 <_Bfree+0x3e>
 8019112:	69eb      	ldr	r3, [r5, #28]
 8019114:	6862      	ldr	r2, [r4, #4]
 8019116:	68db      	ldr	r3, [r3, #12]
 8019118:	0092      	lsls	r2, r2, #2
 801911a:	189b      	adds	r3, r3, r2
 801911c:	681a      	ldr	r2, [r3, #0]
 801911e:	6022      	str	r2, [r4, #0]
 8019120:	601c      	str	r4, [r3, #0]
 8019122:	bd70      	pop	{r4, r5, r6, pc}
 8019124:	0801bced 	.word	0x0801bced
 8019128:	0801bd6d 	.word	0x0801bd6d

0801912c <__multadd>:
 801912c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801912e:	000f      	movs	r7, r1
 8019130:	9001      	str	r0, [sp, #4]
 8019132:	000c      	movs	r4, r1
 8019134:	001e      	movs	r6, r3
 8019136:	2000      	movs	r0, #0
 8019138:	690d      	ldr	r5, [r1, #16]
 801913a:	3714      	adds	r7, #20
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	3001      	adds	r0, #1
 8019140:	b299      	uxth	r1, r3
 8019142:	4351      	muls	r1, r2
 8019144:	0c1b      	lsrs	r3, r3, #16
 8019146:	4353      	muls	r3, r2
 8019148:	1989      	adds	r1, r1, r6
 801914a:	0c0e      	lsrs	r6, r1, #16
 801914c:	199b      	adds	r3, r3, r6
 801914e:	0c1e      	lsrs	r6, r3, #16
 8019150:	b289      	uxth	r1, r1
 8019152:	041b      	lsls	r3, r3, #16
 8019154:	185b      	adds	r3, r3, r1
 8019156:	c708      	stmia	r7!, {r3}
 8019158:	4285      	cmp	r5, r0
 801915a:	dcef      	bgt.n	801913c <__multadd+0x10>
 801915c:	2e00      	cmp	r6, #0
 801915e:	d022      	beq.n	80191a6 <__multadd+0x7a>
 8019160:	68a3      	ldr	r3, [r4, #8]
 8019162:	42ab      	cmp	r3, r5
 8019164:	dc19      	bgt.n	801919a <__multadd+0x6e>
 8019166:	6861      	ldr	r1, [r4, #4]
 8019168:	9801      	ldr	r0, [sp, #4]
 801916a:	3101      	adds	r1, #1
 801916c:	f7ff ff76 	bl	801905c <_Balloc>
 8019170:	1e07      	subs	r7, r0, #0
 8019172:	d105      	bne.n	8019180 <__multadd+0x54>
 8019174:	003a      	movs	r2, r7
 8019176:	21ba      	movs	r1, #186	@ 0xba
 8019178:	4b0c      	ldr	r3, [pc, #48]	@ (80191ac <__multadd+0x80>)
 801917a:	480d      	ldr	r0, [pc, #52]	@ (80191b0 <__multadd+0x84>)
 801917c:	f000 ff2c 	bl	8019fd8 <__assert_func>
 8019180:	0021      	movs	r1, r4
 8019182:	6922      	ldr	r2, [r4, #16]
 8019184:	310c      	adds	r1, #12
 8019186:	3202      	adds	r2, #2
 8019188:	0092      	lsls	r2, r2, #2
 801918a:	300c      	adds	r0, #12
 801918c:	f7fe ffd4 	bl	8018138 <memcpy>
 8019190:	0021      	movs	r1, r4
 8019192:	9801      	ldr	r0, [sp, #4]
 8019194:	f7ff ffa6 	bl	80190e4 <_Bfree>
 8019198:	003c      	movs	r4, r7
 801919a:	1d2b      	adds	r3, r5, #4
 801919c:	009b      	lsls	r3, r3, #2
 801919e:	18e3      	adds	r3, r4, r3
 80191a0:	3501      	adds	r5, #1
 80191a2:	605e      	str	r6, [r3, #4]
 80191a4:	6125      	str	r5, [r4, #16]
 80191a6:	0020      	movs	r0, r4
 80191a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80191aa:	46c0      	nop			@ (mov r8, r8)
 80191ac:	0801bd5c 	.word	0x0801bd5c
 80191b0:	0801bd6d 	.word	0x0801bd6d

080191b4 <__hi0bits>:
 80191b4:	2280      	movs	r2, #128	@ 0x80
 80191b6:	0003      	movs	r3, r0
 80191b8:	0252      	lsls	r2, r2, #9
 80191ba:	2000      	movs	r0, #0
 80191bc:	4293      	cmp	r3, r2
 80191be:	d201      	bcs.n	80191c4 <__hi0bits+0x10>
 80191c0:	041b      	lsls	r3, r3, #16
 80191c2:	3010      	adds	r0, #16
 80191c4:	2280      	movs	r2, #128	@ 0x80
 80191c6:	0452      	lsls	r2, r2, #17
 80191c8:	4293      	cmp	r3, r2
 80191ca:	d201      	bcs.n	80191d0 <__hi0bits+0x1c>
 80191cc:	3008      	adds	r0, #8
 80191ce:	021b      	lsls	r3, r3, #8
 80191d0:	2280      	movs	r2, #128	@ 0x80
 80191d2:	0552      	lsls	r2, r2, #21
 80191d4:	4293      	cmp	r3, r2
 80191d6:	d201      	bcs.n	80191dc <__hi0bits+0x28>
 80191d8:	3004      	adds	r0, #4
 80191da:	011b      	lsls	r3, r3, #4
 80191dc:	2280      	movs	r2, #128	@ 0x80
 80191de:	05d2      	lsls	r2, r2, #23
 80191e0:	4293      	cmp	r3, r2
 80191e2:	d201      	bcs.n	80191e8 <__hi0bits+0x34>
 80191e4:	3002      	adds	r0, #2
 80191e6:	009b      	lsls	r3, r3, #2
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	db03      	blt.n	80191f4 <__hi0bits+0x40>
 80191ec:	3001      	adds	r0, #1
 80191ee:	4213      	tst	r3, r2
 80191f0:	d100      	bne.n	80191f4 <__hi0bits+0x40>
 80191f2:	2020      	movs	r0, #32
 80191f4:	4770      	bx	lr

080191f6 <__lo0bits>:
 80191f6:	6803      	ldr	r3, [r0, #0]
 80191f8:	0001      	movs	r1, r0
 80191fa:	2207      	movs	r2, #7
 80191fc:	0018      	movs	r0, r3
 80191fe:	4010      	ands	r0, r2
 8019200:	4213      	tst	r3, r2
 8019202:	d00d      	beq.n	8019220 <__lo0bits+0x2a>
 8019204:	3a06      	subs	r2, #6
 8019206:	2000      	movs	r0, #0
 8019208:	4213      	tst	r3, r2
 801920a:	d105      	bne.n	8019218 <__lo0bits+0x22>
 801920c:	3002      	adds	r0, #2
 801920e:	4203      	tst	r3, r0
 8019210:	d003      	beq.n	801921a <__lo0bits+0x24>
 8019212:	40d3      	lsrs	r3, r2
 8019214:	0010      	movs	r0, r2
 8019216:	600b      	str	r3, [r1, #0]
 8019218:	4770      	bx	lr
 801921a:	089b      	lsrs	r3, r3, #2
 801921c:	600b      	str	r3, [r1, #0]
 801921e:	e7fb      	b.n	8019218 <__lo0bits+0x22>
 8019220:	b29a      	uxth	r2, r3
 8019222:	2a00      	cmp	r2, #0
 8019224:	d101      	bne.n	801922a <__lo0bits+0x34>
 8019226:	2010      	movs	r0, #16
 8019228:	0c1b      	lsrs	r3, r3, #16
 801922a:	b2da      	uxtb	r2, r3
 801922c:	2a00      	cmp	r2, #0
 801922e:	d101      	bne.n	8019234 <__lo0bits+0x3e>
 8019230:	3008      	adds	r0, #8
 8019232:	0a1b      	lsrs	r3, r3, #8
 8019234:	071a      	lsls	r2, r3, #28
 8019236:	d101      	bne.n	801923c <__lo0bits+0x46>
 8019238:	3004      	adds	r0, #4
 801923a:	091b      	lsrs	r3, r3, #4
 801923c:	079a      	lsls	r2, r3, #30
 801923e:	d101      	bne.n	8019244 <__lo0bits+0x4e>
 8019240:	3002      	adds	r0, #2
 8019242:	089b      	lsrs	r3, r3, #2
 8019244:	07da      	lsls	r2, r3, #31
 8019246:	d4e9      	bmi.n	801921c <__lo0bits+0x26>
 8019248:	3001      	adds	r0, #1
 801924a:	085b      	lsrs	r3, r3, #1
 801924c:	d1e6      	bne.n	801921c <__lo0bits+0x26>
 801924e:	2020      	movs	r0, #32
 8019250:	e7e2      	b.n	8019218 <__lo0bits+0x22>
	...

08019254 <__i2b>:
 8019254:	b510      	push	{r4, lr}
 8019256:	000c      	movs	r4, r1
 8019258:	2101      	movs	r1, #1
 801925a:	f7ff feff 	bl	801905c <_Balloc>
 801925e:	2800      	cmp	r0, #0
 8019260:	d107      	bne.n	8019272 <__i2b+0x1e>
 8019262:	2146      	movs	r1, #70	@ 0x46
 8019264:	4c05      	ldr	r4, [pc, #20]	@ (801927c <__i2b+0x28>)
 8019266:	0002      	movs	r2, r0
 8019268:	4b05      	ldr	r3, [pc, #20]	@ (8019280 <__i2b+0x2c>)
 801926a:	0020      	movs	r0, r4
 801926c:	31ff      	adds	r1, #255	@ 0xff
 801926e:	f000 feb3 	bl	8019fd8 <__assert_func>
 8019272:	2301      	movs	r3, #1
 8019274:	6144      	str	r4, [r0, #20]
 8019276:	6103      	str	r3, [r0, #16]
 8019278:	bd10      	pop	{r4, pc}
 801927a:	46c0      	nop			@ (mov r8, r8)
 801927c:	0801bd6d 	.word	0x0801bd6d
 8019280:	0801bd5c 	.word	0x0801bd5c

08019284 <__multiply>:
 8019284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019286:	0014      	movs	r4, r2
 8019288:	690a      	ldr	r2, [r1, #16]
 801928a:	6923      	ldr	r3, [r4, #16]
 801928c:	000d      	movs	r5, r1
 801928e:	b08b      	sub	sp, #44	@ 0x2c
 8019290:	429a      	cmp	r2, r3
 8019292:	db02      	blt.n	801929a <__multiply+0x16>
 8019294:	0023      	movs	r3, r4
 8019296:	000c      	movs	r4, r1
 8019298:	001d      	movs	r5, r3
 801929a:	6927      	ldr	r7, [r4, #16]
 801929c:	692e      	ldr	r6, [r5, #16]
 801929e:	6861      	ldr	r1, [r4, #4]
 80192a0:	19bb      	adds	r3, r7, r6
 80192a2:	9303      	str	r3, [sp, #12]
 80192a4:	68a3      	ldr	r3, [r4, #8]
 80192a6:	19ba      	adds	r2, r7, r6
 80192a8:	4293      	cmp	r3, r2
 80192aa:	da00      	bge.n	80192ae <__multiply+0x2a>
 80192ac:	3101      	adds	r1, #1
 80192ae:	f7ff fed5 	bl	801905c <_Balloc>
 80192b2:	9002      	str	r0, [sp, #8]
 80192b4:	2800      	cmp	r0, #0
 80192b6:	d106      	bne.n	80192c6 <__multiply+0x42>
 80192b8:	21b1      	movs	r1, #177	@ 0xb1
 80192ba:	4b49      	ldr	r3, [pc, #292]	@ (80193e0 <__multiply+0x15c>)
 80192bc:	4849      	ldr	r0, [pc, #292]	@ (80193e4 <__multiply+0x160>)
 80192be:	9a02      	ldr	r2, [sp, #8]
 80192c0:	0049      	lsls	r1, r1, #1
 80192c2:	f000 fe89 	bl	8019fd8 <__assert_func>
 80192c6:	9b02      	ldr	r3, [sp, #8]
 80192c8:	2200      	movs	r2, #0
 80192ca:	3314      	adds	r3, #20
 80192cc:	469c      	mov	ip, r3
 80192ce:	19bb      	adds	r3, r7, r6
 80192d0:	009b      	lsls	r3, r3, #2
 80192d2:	4463      	add	r3, ip
 80192d4:	9304      	str	r3, [sp, #16]
 80192d6:	4663      	mov	r3, ip
 80192d8:	9904      	ldr	r1, [sp, #16]
 80192da:	428b      	cmp	r3, r1
 80192dc:	d32a      	bcc.n	8019334 <__multiply+0xb0>
 80192de:	0023      	movs	r3, r4
 80192e0:	00bf      	lsls	r7, r7, #2
 80192e2:	3314      	adds	r3, #20
 80192e4:	3514      	adds	r5, #20
 80192e6:	9308      	str	r3, [sp, #32]
 80192e8:	00b6      	lsls	r6, r6, #2
 80192ea:	19db      	adds	r3, r3, r7
 80192ec:	9305      	str	r3, [sp, #20]
 80192ee:	19ab      	adds	r3, r5, r6
 80192f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80192f2:	2304      	movs	r3, #4
 80192f4:	9306      	str	r3, [sp, #24]
 80192f6:	0023      	movs	r3, r4
 80192f8:	9a05      	ldr	r2, [sp, #20]
 80192fa:	3315      	adds	r3, #21
 80192fc:	9501      	str	r5, [sp, #4]
 80192fe:	429a      	cmp	r2, r3
 8019300:	d305      	bcc.n	801930e <__multiply+0x8a>
 8019302:	1b13      	subs	r3, r2, r4
 8019304:	3b15      	subs	r3, #21
 8019306:	089b      	lsrs	r3, r3, #2
 8019308:	3301      	adds	r3, #1
 801930a:	009b      	lsls	r3, r3, #2
 801930c:	9306      	str	r3, [sp, #24]
 801930e:	9b01      	ldr	r3, [sp, #4]
 8019310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019312:	4293      	cmp	r3, r2
 8019314:	d310      	bcc.n	8019338 <__multiply+0xb4>
 8019316:	9b03      	ldr	r3, [sp, #12]
 8019318:	2b00      	cmp	r3, #0
 801931a:	dd05      	ble.n	8019328 <__multiply+0xa4>
 801931c:	9b04      	ldr	r3, [sp, #16]
 801931e:	3b04      	subs	r3, #4
 8019320:	9304      	str	r3, [sp, #16]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d056      	beq.n	80193d6 <__multiply+0x152>
 8019328:	9b02      	ldr	r3, [sp, #8]
 801932a:	9a03      	ldr	r2, [sp, #12]
 801932c:	0018      	movs	r0, r3
 801932e:	611a      	str	r2, [r3, #16]
 8019330:	b00b      	add	sp, #44	@ 0x2c
 8019332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019334:	c304      	stmia	r3!, {r2}
 8019336:	e7cf      	b.n	80192d8 <__multiply+0x54>
 8019338:	9b01      	ldr	r3, [sp, #4]
 801933a:	6818      	ldr	r0, [r3, #0]
 801933c:	b280      	uxth	r0, r0
 801933e:	2800      	cmp	r0, #0
 8019340:	d01e      	beq.n	8019380 <__multiply+0xfc>
 8019342:	4667      	mov	r7, ip
 8019344:	2500      	movs	r5, #0
 8019346:	9e08      	ldr	r6, [sp, #32]
 8019348:	ce02      	ldmia	r6!, {r1}
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	9307      	str	r3, [sp, #28]
 801934e:	b28b      	uxth	r3, r1
 8019350:	4343      	muls	r3, r0
 8019352:	001a      	movs	r2, r3
 8019354:	466b      	mov	r3, sp
 8019356:	0c09      	lsrs	r1, r1, #16
 8019358:	8b9b      	ldrh	r3, [r3, #28]
 801935a:	4341      	muls	r1, r0
 801935c:	18d3      	adds	r3, r2, r3
 801935e:	9a07      	ldr	r2, [sp, #28]
 8019360:	195b      	adds	r3, r3, r5
 8019362:	0c12      	lsrs	r2, r2, #16
 8019364:	1889      	adds	r1, r1, r2
 8019366:	0c1a      	lsrs	r2, r3, #16
 8019368:	188a      	adds	r2, r1, r2
 801936a:	b29b      	uxth	r3, r3
 801936c:	0c15      	lsrs	r5, r2, #16
 801936e:	0412      	lsls	r2, r2, #16
 8019370:	431a      	orrs	r2, r3
 8019372:	9b05      	ldr	r3, [sp, #20]
 8019374:	c704      	stmia	r7!, {r2}
 8019376:	42b3      	cmp	r3, r6
 8019378:	d8e6      	bhi.n	8019348 <__multiply+0xc4>
 801937a:	4663      	mov	r3, ip
 801937c:	9a06      	ldr	r2, [sp, #24]
 801937e:	509d      	str	r5, [r3, r2]
 8019380:	9b01      	ldr	r3, [sp, #4]
 8019382:	6818      	ldr	r0, [r3, #0]
 8019384:	0c00      	lsrs	r0, r0, #16
 8019386:	d020      	beq.n	80193ca <__multiply+0x146>
 8019388:	4663      	mov	r3, ip
 801938a:	0025      	movs	r5, r4
 801938c:	4661      	mov	r1, ip
 801938e:	2700      	movs	r7, #0
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	3514      	adds	r5, #20
 8019394:	682a      	ldr	r2, [r5, #0]
 8019396:	680e      	ldr	r6, [r1, #0]
 8019398:	b292      	uxth	r2, r2
 801939a:	4342      	muls	r2, r0
 801939c:	0c36      	lsrs	r6, r6, #16
 801939e:	1992      	adds	r2, r2, r6
 80193a0:	19d2      	adds	r2, r2, r7
 80193a2:	0416      	lsls	r6, r2, #16
 80193a4:	b29b      	uxth	r3, r3
 80193a6:	431e      	orrs	r6, r3
 80193a8:	600e      	str	r6, [r1, #0]
 80193aa:	cd40      	ldmia	r5!, {r6}
 80193ac:	684b      	ldr	r3, [r1, #4]
 80193ae:	0c36      	lsrs	r6, r6, #16
 80193b0:	4346      	muls	r6, r0
 80193b2:	b29b      	uxth	r3, r3
 80193b4:	0c12      	lsrs	r2, r2, #16
 80193b6:	18f3      	adds	r3, r6, r3
 80193b8:	189b      	adds	r3, r3, r2
 80193ba:	9a05      	ldr	r2, [sp, #20]
 80193bc:	0c1f      	lsrs	r7, r3, #16
 80193be:	3104      	adds	r1, #4
 80193c0:	42aa      	cmp	r2, r5
 80193c2:	d8e7      	bhi.n	8019394 <__multiply+0x110>
 80193c4:	4662      	mov	r2, ip
 80193c6:	9906      	ldr	r1, [sp, #24]
 80193c8:	5053      	str	r3, [r2, r1]
 80193ca:	9b01      	ldr	r3, [sp, #4]
 80193cc:	3304      	adds	r3, #4
 80193ce:	9301      	str	r3, [sp, #4]
 80193d0:	2304      	movs	r3, #4
 80193d2:	449c      	add	ip, r3
 80193d4:	e79b      	b.n	801930e <__multiply+0x8a>
 80193d6:	9b03      	ldr	r3, [sp, #12]
 80193d8:	3b01      	subs	r3, #1
 80193da:	9303      	str	r3, [sp, #12]
 80193dc:	e79b      	b.n	8019316 <__multiply+0x92>
 80193de:	46c0      	nop			@ (mov r8, r8)
 80193e0:	0801bd5c 	.word	0x0801bd5c
 80193e4:	0801bd6d 	.word	0x0801bd6d

080193e8 <__pow5mult>:
 80193e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80193ea:	2303      	movs	r3, #3
 80193ec:	0015      	movs	r5, r2
 80193ee:	0007      	movs	r7, r0
 80193f0:	000e      	movs	r6, r1
 80193f2:	401a      	ands	r2, r3
 80193f4:	421d      	tst	r5, r3
 80193f6:	d008      	beq.n	801940a <__pow5mult+0x22>
 80193f8:	4925      	ldr	r1, [pc, #148]	@ (8019490 <__pow5mult+0xa8>)
 80193fa:	3a01      	subs	r2, #1
 80193fc:	0092      	lsls	r2, r2, #2
 80193fe:	5852      	ldr	r2, [r2, r1]
 8019400:	2300      	movs	r3, #0
 8019402:	0031      	movs	r1, r6
 8019404:	f7ff fe92 	bl	801912c <__multadd>
 8019408:	0006      	movs	r6, r0
 801940a:	10ad      	asrs	r5, r5, #2
 801940c:	d03d      	beq.n	801948a <__pow5mult+0xa2>
 801940e:	69fc      	ldr	r4, [r7, #28]
 8019410:	2c00      	cmp	r4, #0
 8019412:	d10f      	bne.n	8019434 <__pow5mult+0x4c>
 8019414:	2010      	movs	r0, #16
 8019416:	f7ff fd65 	bl	8018ee4 <malloc>
 801941a:	1e02      	subs	r2, r0, #0
 801941c:	61f8      	str	r0, [r7, #28]
 801941e:	d105      	bne.n	801942c <__pow5mult+0x44>
 8019420:	21b4      	movs	r1, #180	@ 0xb4
 8019422:	4b1c      	ldr	r3, [pc, #112]	@ (8019494 <__pow5mult+0xac>)
 8019424:	481c      	ldr	r0, [pc, #112]	@ (8019498 <__pow5mult+0xb0>)
 8019426:	31ff      	adds	r1, #255	@ 0xff
 8019428:	f000 fdd6 	bl	8019fd8 <__assert_func>
 801942c:	6044      	str	r4, [r0, #4]
 801942e:	6084      	str	r4, [r0, #8]
 8019430:	6004      	str	r4, [r0, #0]
 8019432:	60c4      	str	r4, [r0, #12]
 8019434:	69fb      	ldr	r3, [r7, #28]
 8019436:	689c      	ldr	r4, [r3, #8]
 8019438:	9301      	str	r3, [sp, #4]
 801943a:	2c00      	cmp	r4, #0
 801943c:	d108      	bne.n	8019450 <__pow5mult+0x68>
 801943e:	0038      	movs	r0, r7
 8019440:	4916      	ldr	r1, [pc, #88]	@ (801949c <__pow5mult+0xb4>)
 8019442:	f7ff ff07 	bl	8019254 <__i2b>
 8019446:	9b01      	ldr	r3, [sp, #4]
 8019448:	0004      	movs	r4, r0
 801944a:	6098      	str	r0, [r3, #8]
 801944c:	2300      	movs	r3, #0
 801944e:	6003      	str	r3, [r0, #0]
 8019450:	2301      	movs	r3, #1
 8019452:	421d      	tst	r5, r3
 8019454:	d00a      	beq.n	801946c <__pow5mult+0x84>
 8019456:	0031      	movs	r1, r6
 8019458:	0022      	movs	r2, r4
 801945a:	0038      	movs	r0, r7
 801945c:	f7ff ff12 	bl	8019284 <__multiply>
 8019460:	0031      	movs	r1, r6
 8019462:	9001      	str	r0, [sp, #4]
 8019464:	0038      	movs	r0, r7
 8019466:	f7ff fe3d 	bl	80190e4 <_Bfree>
 801946a:	9e01      	ldr	r6, [sp, #4]
 801946c:	106d      	asrs	r5, r5, #1
 801946e:	d00c      	beq.n	801948a <__pow5mult+0xa2>
 8019470:	6820      	ldr	r0, [r4, #0]
 8019472:	2800      	cmp	r0, #0
 8019474:	d107      	bne.n	8019486 <__pow5mult+0x9e>
 8019476:	0022      	movs	r2, r4
 8019478:	0021      	movs	r1, r4
 801947a:	0038      	movs	r0, r7
 801947c:	f7ff ff02 	bl	8019284 <__multiply>
 8019480:	2300      	movs	r3, #0
 8019482:	6020      	str	r0, [r4, #0]
 8019484:	6003      	str	r3, [r0, #0]
 8019486:	0004      	movs	r4, r0
 8019488:	e7e2      	b.n	8019450 <__pow5mult+0x68>
 801948a:	0030      	movs	r0, r6
 801948c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801948e:	46c0      	nop			@ (mov r8, r8)
 8019490:	0801bdc8 	.word	0x0801bdc8
 8019494:	0801bced 	.word	0x0801bced
 8019498:	0801bd6d 	.word	0x0801bd6d
 801949c:	00000271 	.word	0x00000271

080194a0 <__lshift>:
 80194a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194a2:	000c      	movs	r4, r1
 80194a4:	0016      	movs	r6, r2
 80194a6:	6923      	ldr	r3, [r4, #16]
 80194a8:	1157      	asrs	r7, r2, #5
 80194aa:	b085      	sub	sp, #20
 80194ac:	18fb      	adds	r3, r7, r3
 80194ae:	9301      	str	r3, [sp, #4]
 80194b0:	3301      	adds	r3, #1
 80194b2:	9300      	str	r3, [sp, #0]
 80194b4:	6849      	ldr	r1, [r1, #4]
 80194b6:	68a3      	ldr	r3, [r4, #8]
 80194b8:	9002      	str	r0, [sp, #8]
 80194ba:	9a00      	ldr	r2, [sp, #0]
 80194bc:	4293      	cmp	r3, r2
 80194be:	db10      	blt.n	80194e2 <__lshift+0x42>
 80194c0:	9802      	ldr	r0, [sp, #8]
 80194c2:	f7ff fdcb 	bl	801905c <_Balloc>
 80194c6:	2300      	movs	r3, #0
 80194c8:	0001      	movs	r1, r0
 80194ca:	0005      	movs	r5, r0
 80194cc:	001a      	movs	r2, r3
 80194ce:	3114      	adds	r1, #20
 80194d0:	4298      	cmp	r0, r3
 80194d2:	d10c      	bne.n	80194ee <__lshift+0x4e>
 80194d4:	21ef      	movs	r1, #239	@ 0xef
 80194d6:	002a      	movs	r2, r5
 80194d8:	4b25      	ldr	r3, [pc, #148]	@ (8019570 <__lshift+0xd0>)
 80194da:	4826      	ldr	r0, [pc, #152]	@ (8019574 <__lshift+0xd4>)
 80194dc:	0049      	lsls	r1, r1, #1
 80194de:	f000 fd7b 	bl	8019fd8 <__assert_func>
 80194e2:	3101      	adds	r1, #1
 80194e4:	005b      	lsls	r3, r3, #1
 80194e6:	e7e8      	b.n	80194ba <__lshift+0x1a>
 80194e8:	0098      	lsls	r0, r3, #2
 80194ea:	500a      	str	r2, [r1, r0]
 80194ec:	3301      	adds	r3, #1
 80194ee:	42bb      	cmp	r3, r7
 80194f0:	dbfa      	blt.n	80194e8 <__lshift+0x48>
 80194f2:	43fb      	mvns	r3, r7
 80194f4:	17db      	asrs	r3, r3, #31
 80194f6:	401f      	ands	r7, r3
 80194f8:	00bf      	lsls	r7, r7, #2
 80194fa:	0023      	movs	r3, r4
 80194fc:	201f      	movs	r0, #31
 80194fe:	19c9      	adds	r1, r1, r7
 8019500:	0037      	movs	r7, r6
 8019502:	6922      	ldr	r2, [r4, #16]
 8019504:	3314      	adds	r3, #20
 8019506:	0092      	lsls	r2, r2, #2
 8019508:	189a      	adds	r2, r3, r2
 801950a:	4007      	ands	r7, r0
 801950c:	4206      	tst	r6, r0
 801950e:	d029      	beq.n	8019564 <__lshift+0xc4>
 8019510:	3001      	adds	r0, #1
 8019512:	1bc0      	subs	r0, r0, r7
 8019514:	9003      	str	r0, [sp, #12]
 8019516:	468c      	mov	ip, r1
 8019518:	2000      	movs	r0, #0
 801951a:	681e      	ldr	r6, [r3, #0]
 801951c:	40be      	lsls	r6, r7
 801951e:	4306      	orrs	r6, r0
 8019520:	4660      	mov	r0, ip
 8019522:	c040      	stmia	r0!, {r6}
 8019524:	4684      	mov	ip, r0
 8019526:	9e03      	ldr	r6, [sp, #12]
 8019528:	cb01      	ldmia	r3!, {r0}
 801952a:	40f0      	lsrs	r0, r6
 801952c:	429a      	cmp	r2, r3
 801952e:	d8f4      	bhi.n	801951a <__lshift+0x7a>
 8019530:	0026      	movs	r6, r4
 8019532:	3615      	adds	r6, #21
 8019534:	2304      	movs	r3, #4
 8019536:	42b2      	cmp	r2, r6
 8019538:	d304      	bcc.n	8019544 <__lshift+0xa4>
 801953a:	1b13      	subs	r3, r2, r4
 801953c:	3b15      	subs	r3, #21
 801953e:	089b      	lsrs	r3, r3, #2
 8019540:	3301      	adds	r3, #1
 8019542:	009b      	lsls	r3, r3, #2
 8019544:	50c8      	str	r0, [r1, r3]
 8019546:	2800      	cmp	r0, #0
 8019548:	d002      	beq.n	8019550 <__lshift+0xb0>
 801954a:	9b01      	ldr	r3, [sp, #4]
 801954c:	3302      	adds	r3, #2
 801954e:	9300      	str	r3, [sp, #0]
 8019550:	9b00      	ldr	r3, [sp, #0]
 8019552:	9802      	ldr	r0, [sp, #8]
 8019554:	3b01      	subs	r3, #1
 8019556:	0021      	movs	r1, r4
 8019558:	612b      	str	r3, [r5, #16]
 801955a:	f7ff fdc3 	bl	80190e4 <_Bfree>
 801955e:	0028      	movs	r0, r5
 8019560:	b005      	add	sp, #20
 8019562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019564:	cb01      	ldmia	r3!, {r0}
 8019566:	c101      	stmia	r1!, {r0}
 8019568:	429a      	cmp	r2, r3
 801956a:	d8fb      	bhi.n	8019564 <__lshift+0xc4>
 801956c:	e7f0      	b.n	8019550 <__lshift+0xb0>
 801956e:	46c0      	nop			@ (mov r8, r8)
 8019570:	0801bd5c 	.word	0x0801bd5c
 8019574:	0801bd6d 	.word	0x0801bd6d

08019578 <__mcmp>:
 8019578:	b530      	push	{r4, r5, lr}
 801957a:	690b      	ldr	r3, [r1, #16]
 801957c:	6904      	ldr	r4, [r0, #16]
 801957e:	0002      	movs	r2, r0
 8019580:	1ae0      	subs	r0, r4, r3
 8019582:	429c      	cmp	r4, r3
 8019584:	d10f      	bne.n	80195a6 <__mcmp+0x2e>
 8019586:	3214      	adds	r2, #20
 8019588:	009b      	lsls	r3, r3, #2
 801958a:	3114      	adds	r1, #20
 801958c:	0014      	movs	r4, r2
 801958e:	18c9      	adds	r1, r1, r3
 8019590:	18d2      	adds	r2, r2, r3
 8019592:	3a04      	subs	r2, #4
 8019594:	3904      	subs	r1, #4
 8019596:	6815      	ldr	r5, [r2, #0]
 8019598:	680b      	ldr	r3, [r1, #0]
 801959a:	429d      	cmp	r5, r3
 801959c:	d004      	beq.n	80195a8 <__mcmp+0x30>
 801959e:	2001      	movs	r0, #1
 80195a0:	429d      	cmp	r5, r3
 80195a2:	d200      	bcs.n	80195a6 <__mcmp+0x2e>
 80195a4:	3802      	subs	r0, #2
 80195a6:	bd30      	pop	{r4, r5, pc}
 80195a8:	4294      	cmp	r4, r2
 80195aa:	d3f2      	bcc.n	8019592 <__mcmp+0x1a>
 80195ac:	e7fb      	b.n	80195a6 <__mcmp+0x2e>
	...

080195b0 <__mdiff>:
 80195b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195b2:	000c      	movs	r4, r1
 80195b4:	b087      	sub	sp, #28
 80195b6:	9000      	str	r0, [sp, #0]
 80195b8:	0011      	movs	r1, r2
 80195ba:	0020      	movs	r0, r4
 80195bc:	0017      	movs	r7, r2
 80195be:	f7ff ffdb 	bl	8019578 <__mcmp>
 80195c2:	1e05      	subs	r5, r0, #0
 80195c4:	d110      	bne.n	80195e8 <__mdiff+0x38>
 80195c6:	0001      	movs	r1, r0
 80195c8:	9800      	ldr	r0, [sp, #0]
 80195ca:	f7ff fd47 	bl	801905c <_Balloc>
 80195ce:	1e02      	subs	r2, r0, #0
 80195d0:	d104      	bne.n	80195dc <__mdiff+0x2c>
 80195d2:	4b40      	ldr	r3, [pc, #256]	@ (80196d4 <__mdiff+0x124>)
 80195d4:	4840      	ldr	r0, [pc, #256]	@ (80196d8 <__mdiff+0x128>)
 80195d6:	4941      	ldr	r1, [pc, #260]	@ (80196dc <__mdiff+0x12c>)
 80195d8:	f000 fcfe 	bl	8019fd8 <__assert_func>
 80195dc:	2301      	movs	r3, #1
 80195de:	6145      	str	r5, [r0, #20]
 80195e0:	6103      	str	r3, [r0, #16]
 80195e2:	0010      	movs	r0, r2
 80195e4:	b007      	add	sp, #28
 80195e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195e8:	2600      	movs	r6, #0
 80195ea:	42b0      	cmp	r0, r6
 80195ec:	da03      	bge.n	80195f6 <__mdiff+0x46>
 80195ee:	0023      	movs	r3, r4
 80195f0:	003c      	movs	r4, r7
 80195f2:	001f      	movs	r7, r3
 80195f4:	3601      	adds	r6, #1
 80195f6:	6861      	ldr	r1, [r4, #4]
 80195f8:	9800      	ldr	r0, [sp, #0]
 80195fa:	f7ff fd2f 	bl	801905c <_Balloc>
 80195fe:	1e02      	subs	r2, r0, #0
 8019600:	d103      	bne.n	801960a <__mdiff+0x5a>
 8019602:	4b34      	ldr	r3, [pc, #208]	@ (80196d4 <__mdiff+0x124>)
 8019604:	4834      	ldr	r0, [pc, #208]	@ (80196d8 <__mdiff+0x128>)
 8019606:	4936      	ldr	r1, [pc, #216]	@ (80196e0 <__mdiff+0x130>)
 8019608:	e7e6      	b.n	80195d8 <__mdiff+0x28>
 801960a:	6923      	ldr	r3, [r4, #16]
 801960c:	3414      	adds	r4, #20
 801960e:	9300      	str	r3, [sp, #0]
 8019610:	009b      	lsls	r3, r3, #2
 8019612:	18e3      	adds	r3, r4, r3
 8019614:	0021      	movs	r1, r4
 8019616:	9401      	str	r4, [sp, #4]
 8019618:	003c      	movs	r4, r7
 801961a:	9302      	str	r3, [sp, #8]
 801961c:	693b      	ldr	r3, [r7, #16]
 801961e:	3414      	adds	r4, #20
 8019620:	009b      	lsls	r3, r3, #2
 8019622:	18e3      	adds	r3, r4, r3
 8019624:	9303      	str	r3, [sp, #12]
 8019626:	0003      	movs	r3, r0
 8019628:	60c6      	str	r6, [r0, #12]
 801962a:	468c      	mov	ip, r1
 801962c:	2000      	movs	r0, #0
 801962e:	3314      	adds	r3, #20
 8019630:	9304      	str	r3, [sp, #16]
 8019632:	9305      	str	r3, [sp, #20]
 8019634:	4663      	mov	r3, ip
 8019636:	cb20      	ldmia	r3!, {r5}
 8019638:	b2a9      	uxth	r1, r5
 801963a:	000e      	movs	r6, r1
 801963c:	469c      	mov	ip, r3
 801963e:	cc08      	ldmia	r4!, {r3}
 8019640:	0c2d      	lsrs	r5, r5, #16
 8019642:	b299      	uxth	r1, r3
 8019644:	1a71      	subs	r1, r6, r1
 8019646:	1809      	adds	r1, r1, r0
 8019648:	0c1b      	lsrs	r3, r3, #16
 801964a:	1408      	asrs	r0, r1, #16
 801964c:	1aeb      	subs	r3, r5, r3
 801964e:	181b      	adds	r3, r3, r0
 8019650:	1418      	asrs	r0, r3, #16
 8019652:	b289      	uxth	r1, r1
 8019654:	041b      	lsls	r3, r3, #16
 8019656:	4319      	orrs	r1, r3
 8019658:	9b05      	ldr	r3, [sp, #20]
 801965a:	c302      	stmia	r3!, {r1}
 801965c:	9305      	str	r3, [sp, #20]
 801965e:	9b03      	ldr	r3, [sp, #12]
 8019660:	42a3      	cmp	r3, r4
 8019662:	d8e7      	bhi.n	8019634 <__mdiff+0x84>
 8019664:	0039      	movs	r1, r7
 8019666:	9c03      	ldr	r4, [sp, #12]
 8019668:	3115      	adds	r1, #21
 801966a:	2304      	movs	r3, #4
 801966c:	428c      	cmp	r4, r1
 801966e:	d304      	bcc.n	801967a <__mdiff+0xca>
 8019670:	1be3      	subs	r3, r4, r7
 8019672:	3b15      	subs	r3, #21
 8019674:	089b      	lsrs	r3, r3, #2
 8019676:	3301      	adds	r3, #1
 8019678:	009b      	lsls	r3, r3, #2
 801967a:	9901      	ldr	r1, [sp, #4]
 801967c:	18cd      	adds	r5, r1, r3
 801967e:	9904      	ldr	r1, [sp, #16]
 8019680:	002e      	movs	r6, r5
 8019682:	18cb      	adds	r3, r1, r3
 8019684:	001f      	movs	r7, r3
 8019686:	9902      	ldr	r1, [sp, #8]
 8019688:	428e      	cmp	r6, r1
 801968a:	d311      	bcc.n	80196b0 <__mdiff+0x100>
 801968c:	9c02      	ldr	r4, [sp, #8]
 801968e:	1ee9      	subs	r1, r5, #3
 8019690:	2000      	movs	r0, #0
 8019692:	428c      	cmp	r4, r1
 8019694:	d304      	bcc.n	80196a0 <__mdiff+0xf0>
 8019696:	0021      	movs	r1, r4
 8019698:	3103      	adds	r1, #3
 801969a:	1b49      	subs	r1, r1, r5
 801969c:	0889      	lsrs	r1, r1, #2
 801969e:	0088      	lsls	r0, r1, #2
 80196a0:	181b      	adds	r3, r3, r0
 80196a2:	3b04      	subs	r3, #4
 80196a4:	6819      	ldr	r1, [r3, #0]
 80196a6:	2900      	cmp	r1, #0
 80196a8:	d010      	beq.n	80196cc <__mdiff+0x11c>
 80196aa:	9b00      	ldr	r3, [sp, #0]
 80196ac:	6113      	str	r3, [r2, #16]
 80196ae:	e798      	b.n	80195e2 <__mdiff+0x32>
 80196b0:	4684      	mov	ip, r0
 80196b2:	ce02      	ldmia	r6!, {r1}
 80196b4:	b288      	uxth	r0, r1
 80196b6:	4460      	add	r0, ip
 80196b8:	1400      	asrs	r0, r0, #16
 80196ba:	0c0c      	lsrs	r4, r1, #16
 80196bc:	1904      	adds	r4, r0, r4
 80196be:	4461      	add	r1, ip
 80196c0:	1420      	asrs	r0, r4, #16
 80196c2:	b289      	uxth	r1, r1
 80196c4:	0424      	lsls	r4, r4, #16
 80196c6:	4321      	orrs	r1, r4
 80196c8:	c702      	stmia	r7!, {r1}
 80196ca:	e7dc      	b.n	8019686 <__mdiff+0xd6>
 80196cc:	9900      	ldr	r1, [sp, #0]
 80196ce:	3901      	subs	r1, #1
 80196d0:	9100      	str	r1, [sp, #0]
 80196d2:	e7e6      	b.n	80196a2 <__mdiff+0xf2>
 80196d4:	0801bd5c 	.word	0x0801bd5c
 80196d8:	0801bd6d 	.word	0x0801bd6d
 80196dc:	00000237 	.word	0x00000237
 80196e0:	00000245 	.word	0x00000245

080196e4 <__d2b>:
 80196e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80196e6:	2101      	movs	r1, #1
 80196e8:	0016      	movs	r6, r2
 80196ea:	001f      	movs	r7, r3
 80196ec:	f7ff fcb6 	bl	801905c <_Balloc>
 80196f0:	1e04      	subs	r4, r0, #0
 80196f2:	d105      	bne.n	8019700 <__d2b+0x1c>
 80196f4:	0022      	movs	r2, r4
 80196f6:	4b25      	ldr	r3, [pc, #148]	@ (801978c <__d2b+0xa8>)
 80196f8:	4825      	ldr	r0, [pc, #148]	@ (8019790 <__d2b+0xac>)
 80196fa:	4926      	ldr	r1, [pc, #152]	@ (8019794 <__d2b+0xb0>)
 80196fc:	f000 fc6c 	bl	8019fd8 <__assert_func>
 8019700:	033b      	lsls	r3, r7, #12
 8019702:	007d      	lsls	r5, r7, #1
 8019704:	0b1b      	lsrs	r3, r3, #12
 8019706:	0d6d      	lsrs	r5, r5, #21
 8019708:	d002      	beq.n	8019710 <__d2b+0x2c>
 801970a:	2280      	movs	r2, #128	@ 0x80
 801970c:	0352      	lsls	r2, r2, #13
 801970e:	4313      	orrs	r3, r2
 8019710:	9301      	str	r3, [sp, #4]
 8019712:	2e00      	cmp	r6, #0
 8019714:	d025      	beq.n	8019762 <__d2b+0x7e>
 8019716:	4668      	mov	r0, sp
 8019718:	9600      	str	r6, [sp, #0]
 801971a:	f7ff fd6c 	bl	80191f6 <__lo0bits>
 801971e:	9b01      	ldr	r3, [sp, #4]
 8019720:	9900      	ldr	r1, [sp, #0]
 8019722:	2800      	cmp	r0, #0
 8019724:	d01b      	beq.n	801975e <__d2b+0x7a>
 8019726:	2220      	movs	r2, #32
 8019728:	001e      	movs	r6, r3
 801972a:	1a12      	subs	r2, r2, r0
 801972c:	4096      	lsls	r6, r2
 801972e:	0032      	movs	r2, r6
 8019730:	40c3      	lsrs	r3, r0
 8019732:	430a      	orrs	r2, r1
 8019734:	6162      	str	r2, [r4, #20]
 8019736:	9301      	str	r3, [sp, #4]
 8019738:	9e01      	ldr	r6, [sp, #4]
 801973a:	61a6      	str	r6, [r4, #24]
 801973c:	1e73      	subs	r3, r6, #1
 801973e:	419e      	sbcs	r6, r3
 8019740:	3601      	adds	r6, #1
 8019742:	6126      	str	r6, [r4, #16]
 8019744:	2d00      	cmp	r5, #0
 8019746:	d014      	beq.n	8019772 <__d2b+0x8e>
 8019748:	2635      	movs	r6, #53	@ 0x35
 801974a:	4b13      	ldr	r3, [pc, #76]	@ (8019798 <__d2b+0xb4>)
 801974c:	18ed      	adds	r5, r5, r3
 801974e:	9b08      	ldr	r3, [sp, #32]
 8019750:	182d      	adds	r5, r5, r0
 8019752:	601d      	str	r5, [r3, #0]
 8019754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019756:	1a36      	subs	r6, r6, r0
 8019758:	601e      	str	r6, [r3, #0]
 801975a:	0020      	movs	r0, r4
 801975c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801975e:	6161      	str	r1, [r4, #20]
 8019760:	e7ea      	b.n	8019738 <__d2b+0x54>
 8019762:	a801      	add	r0, sp, #4
 8019764:	f7ff fd47 	bl	80191f6 <__lo0bits>
 8019768:	9b01      	ldr	r3, [sp, #4]
 801976a:	2601      	movs	r6, #1
 801976c:	6163      	str	r3, [r4, #20]
 801976e:	3020      	adds	r0, #32
 8019770:	e7e7      	b.n	8019742 <__d2b+0x5e>
 8019772:	4b0a      	ldr	r3, [pc, #40]	@ (801979c <__d2b+0xb8>)
 8019774:	18c0      	adds	r0, r0, r3
 8019776:	9b08      	ldr	r3, [sp, #32]
 8019778:	6018      	str	r0, [r3, #0]
 801977a:	4b09      	ldr	r3, [pc, #36]	@ (80197a0 <__d2b+0xbc>)
 801977c:	18f3      	adds	r3, r6, r3
 801977e:	009b      	lsls	r3, r3, #2
 8019780:	18e3      	adds	r3, r4, r3
 8019782:	6958      	ldr	r0, [r3, #20]
 8019784:	f7ff fd16 	bl	80191b4 <__hi0bits>
 8019788:	0176      	lsls	r6, r6, #5
 801978a:	e7e3      	b.n	8019754 <__d2b+0x70>
 801978c:	0801bd5c 	.word	0x0801bd5c
 8019790:	0801bd6d 	.word	0x0801bd6d
 8019794:	0000030f 	.word	0x0000030f
 8019798:	fffffbcd 	.word	0xfffffbcd
 801979c:	fffffbce 	.word	0xfffffbce
 80197a0:	3fffffff 	.word	0x3fffffff

080197a4 <__ssputs_r>:
 80197a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197a6:	688e      	ldr	r6, [r1, #8]
 80197a8:	b085      	sub	sp, #20
 80197aa:	001f      	movs	r7, r3
 80197ac:	000c      	movs	r4, r1
 80197ae:	680b      	ldr	r3, [r1, #0]
 80197b0:	9002      	str	r0, [sp, #8]
 80197b2:	9203      	str	r2, [sp, #12]
 80197b4:	42be      	cmp	r6, r7
 80197b6:	d830      	bhi.n	801981a <__ssputs_r+0x76>
 80197b8:	210c      	movs	r1, #12
 80197ba:	5e62      	ldrsh	r2, [r4, r1]
 80197bc:	2190      	movs	r1, #144	@ 0x90
 80197be:	00c9      	lsls	r1, r1, #3
 80197c0:	420a      	tst	r2, r1
 80197c2:	d028      	beq.n	8019816 <__ssputs_r+0x72>
 80197c4:	2003      	movs	r0, #3
 80197c6:	6921      	ldr	r1, [r4, #16]
 80197c8:	1a5b      	subs	r3, r3, r1
 80197ca:	9301      	str	r3, [sp, #4]
 80197cc:	6963      	ldr	r3, [r4, #20]
 80197ce:	4343      	muls	r3, r0
 80197d0:	9801      	ldr	r0, [sp, #4]
 80197d2:	0fdd      	lsrs	r5, r3, #31
 80197d4:	18ed      	adds	r5, r5, r3
 80197d6:	1c7b      	adds	r3, r7, #1
 80197d8:	181b      	adds	r3, r3, r0
 80197da:	106d      	asrs	r5, r5, #1
 80197dc:	42ab      	cmp	r3, r5
 80197de:	d900      	bls.n	80197e2 <__ssputs_r+0x3e>
 80197e0:	001d      	movs	r5, r3
 80197e2:	0552      	lsls	r2, r2, #21
 80197e4:	d528      	bpl.n	8019838 <__ssputs_r+0x94>
 80197e6:	0029      	movs	r1, r5
 80197e8:	9802      	ldr	r0, [sp, #8]
 80197ea:	f7ff fba7 	bl	8018f3c <_malloc_r>
 80197ee:	1e06      	subs	r6, r0, #0
 80197f0:	d02c      	beq.n	801984c <__ssputs_r+0xa8>
 80197f2:	9a01      	ldr	r2, [sp, #4]
 80197f4:	6921      	ldr	r1, [r4, #16]
 80197f6:	f7fe fc9f 	bl	8018138 <memcpy>
 80197fa:	89a2      	ldrh	r2, [r4, #12]
 80197fc:	4b18      	ldr	r3, [pc, #96]	@ (8019860 <__ssputs_r+0xbc>)
 80197fe:	401a      	ands	r2, r3
 8019800:	2380      	movs	r3, #128	@ 0x80
 8019802:	4313      	orrs	r3, r2
 8019804:	81a3      	strh	r3, [r4, #12]
 8019806:	9b01      	ldr	r3, [sp, #4]
 8019808:	6126      	str	r6, [r4, #16]
 801980a:	18f6      	adds	r6, r6, r3
 801980c:	6026      	str	r6, [r4, #0]
 801980e:	003e      	movs	r6, r7
 8019810:	6165      	str	r5, [r4, #20]
 8019812:	1aed      	subs	r5, r5, r3
 8019814:	60a5      	str	r5, [r4, #8]
 8019816:	42be      	cmp	r6, r7
 8019818:	d900      	bls.n	801981c <__ssputs_r+0x78>
 801981a:	003e      	movs	r6, r7
 801981c:	0032      	movs	r2, r6
 801981e:	9903      	ldr	r1, [sp, #12]
 8019820:	6820      	ldr	r0, [r4, #0]
 8019822:	f000 fbb3 	bl	8019f8c <memmove>
 8019826:	2000      	movs	r0, #0
 8019828:	68a3      	ldr	r3, [r4, #8]
 801982a:	1b9b      	subs	r3, r3, r6
 801982c:	60a3      	str	r3, [r4, #8]
 801982e:	6823      	ldr	r3, [r4, #0]
 8019830:	199b      	adds	r3, r3, r6
 8019832:	6023      	str	r3, [r4, #0]
 8019834:	b005      	add	sp, #20
 8019836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019838:	002a      	movs	r2, r5
 801983a:	9802      	ldr	r0, [sp, #8]
 801983c:	f000 fc29 	bl	801a092 <_realloc_r>
 8019840:	1e06      	subs	r6, r0, #0
 8019842:	d1e0      	bne.n	8019806 <__ssputs_r+0x62>
 8019844:	6921      	ldr	r1, [r4, #16]
 8019846:	9802      	ldr	r0, [sp, #8]
 8019848:	f7ff fb02 	bl	8018e50 <_free_r>
 801984c:	230c      	movs	r3, #12
 801984e:	2001      	movs	r0, #1
 8019850:	9a02      	ldr	r2, [sp, #8]
 8019852:	4240      	negs	r0, r0
 8019854:	6013      	str	r3, [r2, #0]
 8019856:	89a2      	ldrh	r2, [r4, #12]
 8019858:	3334      	adds	r3, #52	@ 0x34
 801985a:	4313      	orrs	r3, r2
 801985c:	81a3      	strh	r3, [r4, #12]
 801985e:	e7e9      	b.n	8019834 <__ssputs_r+0x90>
 8019860:	fffffb7f 	.word	0xfffffb7f

08019864 <_svfiprintf_r>:
 8019864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019866:	b0a1      	sub	sp, #132	@ 0x84
 8019868:	9003      	str	r0, [sp, #12]
 801986a:	001d      	movs	r5, r3
 801986c:	898b      	ldrh	r3, [r1, #12]
 801986e:	000f      	movs	r7, r1
 8019870:	0016      	movs	r6, r2
 8019872:	061b      	lsls	r3, r3, #24
 8019874:	d511      	bpl.n	801989a <_svfiprintf_r+0x36>
 8019876:	690b      	ldr	r3, [r1, #16]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d10e      	bne.n	801989a <_svfiprintf_r+0x36>
 801987c:	2140      	movs	r1, #64	@ 0x40
 801987e:	f7ff fb5d 	bl	8018f3c <_malloc_r>
 8019882:	6038      	str	r0, [r7, #0]
 8019884:	6138      	str	r0, [r7, #16]
 8019886:	2800      	cmp	r0, #0
 8019888:	d105      	bne.n	8019896 <_svfiprintf_r+0x32>
 801988a:	230c      	movs	r3, #12
 801988c:	9a03      	ldr	r2, [sp, #12]
 801988e:	6013      	str	r3, [r2, #0]
 8019890:	2001      	movs	r0, #1
 8019892:	4240      	negs	r0, r0
 8019894:	e0cf      	b.n	8019a36 <_svfiprintf_r+0x1d2>
 8019896:	2340      	movs	r3, #64	@ 0x40
 8019898:	617b      	str	r3, [r7, #20]
 801989a:	2300      	movs	r3, #0
 801989c:	ac08      	add	r4, sp, #32
 801989e:	6163      	str	r3, [r4, #20]
 80198a0:	3320      	adds	r3, #32
 80198a2:	7663      	strb	r3, [r4, #25]
 80198a4:	3310      	adds	r3, #16
 80198a6:	76a3      	strb	r3, [r4, #26]
 80198a8:	9507      	str	r5, [sp, #28]
 80198aa:	0035      	movs	r5, r6
 80198ac:	782b      	ldrb	r3, [r5, #0]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d001      	beq.n	80198b6 <_svfiprintf_r+0x52>
 80198b2:	2b25      	cmp	r3, #37	@ 0x25
 80198b4:	d148      	bne.n	8019948 <_svfiprintf_r+0xe4>
 80198b6:	1bab      	subs	r3, r5, r6
 80198b8:	9305      	str	r3, [sp, #20]
 80198ba:	42b5      	cmp	r5, r6
 80198bc:	d00b      	beq.n	80198d6 <_svfiprintf_r+0x72>
 80198be:	0032      	movs	r2, r6
 80198c0:	0039      	movs	r1, r7
 80198c2:	9803      	ldr	r0, [sp, #12]
 80198c4:	f7ff ff6e 	bl	80197a4 <__ssputs_r>
 80198c8:	3001      	adds	r0, #1
 80198ca:	d100      	bne.n	80198ce <_svfiprintf_r+0x6a>
 80198cc:	e0ae      	b.n	8019a2c <_svfiprintf_r+0x1c8>
 80198ce:	6963      	ldr	r3, [r4, #20]
 80198d0:	9a05      	ldr	r2, [sp, #20]
 80198d2:	189b      	adds	r3, r3, r2
 80198d4:	6163      	str	r3, [r4, #20]
 80198d6:	782b      	ldrb	r3, [r5, #0]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d100      	bne.n	80198de <_svfiprintf_r+0x7a>
 80198dc:	e0a6      	b.n	8019a2c <_svfiprintf_r+0x1c8>
 80198de:	2201      	movs	r2, #1
 80198e0:	2300      	movs	r3, #0
 80198e2:	4252      	negs	r2, r2
 80198e4:	6062      	str	r2, [r4, #4]
 80198e6:	a904      	add	r1, sp, #16
 80198e8:	3254      	adds	r2, #84	@ 0x54
 80198ea:	1852      	adds	r2, r2, r1
 80198ec:	1c6e      	adds	r6, r5, #1
 80198ee:	6023      	str	r3, [r4, #0]
 80198f0:	60e3      	str	r3, [r4, #12]
 80198f2:	60a3      	str	r3, [r4, #8]
 80198f4:	7013      	strb	r3, [r2, #0]
 80198f6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80198f8:	4b54      	ldr	r3, [pc, #336]	@ (8019a4c <_svfiprintf_r+0x1e8>)
 80198fa:	2205      	movs	r2, #5
 80198fc:	0018      	movs	r0, r3
 80198fe:	7831      	ldrb	r1, [r6, #0]
 8019900:	9305      	str	r3, [sp, #20]
 8019902:	f7fe fc0e 	bl	8018122 <memchr>
 8019906:	1c75      	adds	r5, r6, #1
 8019908:	2800      	cmp	r0, #0
 801990a:	d11f      	bne.n	801994c <_svfiprintf_r+0xe8>
 801990c:	6822      	ldr	r2, [r4, #0]
 801990e:	06d3      	lsls	r3, r2, #27
 8019910:	d504      	bpl.n	801991c <_svfiprintf_r+0xb8>
 8019912:	2353      	movs	r3, #83	@ 0x53
 8019914:	a904      	add	r1, sp, #16
 8019916:	185b      	adds	r3, r3, r1
 8019918:	2120      	movs	r1, #32
 801991a:	7019      	strb	r1, [r3, #0]
 801991c:	0713      	lsls	r3, r2, #28
 801991e:	d504      	bpl.n	801992a <_svfiprintf_r+0xc6>
 8019920:	2353      	movs	r3, #83	@ 0x53
 8019922:	a904      	add	r1, sp, #16
 8019924:	185b      	adds	r3, r3, r1
 8019926:	212b      	movs	r1, #43	@ 0x2b
 8019928:	7019      	strb	r1, [r3, #0]
 801992a:	7833      	ldrb	r3, [r6, #0]
 801992c:	2b2a      	cmp	r3, #42	@ 0x2a
 801992e:	d016      	beq.n	801995e <_svfiprintf_r+0xfa>
 8019930:	0035      	movs	r5, r6
 8019932:	2100      	movs	r1, #0
 8019934:	200a      	movs	r0, #10
 8019936:	68e3      	ldr	r3, [r4, #12]
 8019938:	782a      	ldrb	r2, [r5, #0]
 801993a:	1c6e      	adds	r6, r5, #1
 801993c:	3a30      	subs	r2, #48	@ 0x30
 801993e:	2a09      	cmp	r2, #9
 8019940:	d950      	bls.n	80199e4 <_svfiprintf_r+0x180>
 8019942:	2900      	cmp	r1, #0
 8019944:	d111      	bne.n	801996a <_svfiprintf_r+0x106>
 8019946:	e017      	b.n	8019978 <_svfiprintf_r+0x114>
 8019948:	3501      	adds	r5, #1
 801994a:	e7af      	b.n	80198ac <_svfiprintf_r+0x48>
 801994c:	9b05      	ldr	r3, [sp, #20]
 801994e:	6822      	ldr	r2, [r4, #0]
 8019950:	1ac0      	subs	r0, r0, r3
 8019952:	2301      	movs	r3, #1
 8019954:	4083      	lsls	r3, r0
 8019956:	4313      	orrs	r3, r2
 8019958:	002e      	movs	r6, r5
 801995a:	6023      	str	r3, [r4, #0]
 801995c:	e7cc      	b.n	80198f8 <_svfiprintf_r+0x94>
 801995e:	9b07      	ldr	r3, [sp, #28]
 8019960:	1d19      	adds	r1, r3, #4
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	9107      	str	r1, [sp, #28]
 8019966:	2b00      	cmp	r3, #0
 8019968:	db01      	blt.n	801996e <_svfiprintf_r+0x10a>
 801996a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801996c:	e004      	b.n	8019978 <_svfiprintf_r+0x114>
 801996e:	425b      	negs	r3, r3
 8019970:	60e3      	str	r3, [r4, #12]
 8019972:	2302      	movs	r3, #2
 8019974:	4313      	orrs	r3, r2
 8019976:	6023      	str	r3, [r4, #0]
 8019978:	782b      	ldrb	r3, [r5, #0]
 801997a:	2b2e      	cmp	r3, #46	@ 0x2e
 801997c:	d10c      	bne.n	8019998 <_svfiprintf_r+0x134>
 801997e:	786b      	ldrb	r3, [r5, #1]
 8019980:	2b2a      	cmp	r3, #42	@ 0x2a
 8019982:	d134      	bne.n	80199ee <_svfiprintf_r+0x18a>
 8019984:	9b07      	ldr	r3, [sp, #28]
 8019986:	3502      	adds	r5, #2
 8019988:	1d1a      	adds	r2, r3, #4
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	9207      	str	r2, [sp, #28]
 801998e:	2b00      	cmp	r3, #0
 8019990:	da01      	bge.n	8019996 <_svfiprintf_r+0x132>
 8019992:	2301      	movs	r3, #1
 8019994:	425b      	negs	r3, r3
 8019996:	9309      	str	r3, [sp, #36]	@ 0x24
 8019998:	4e2d      	ldr	r6, [pc, #180]	@ (8019a50 <_svfiprintf_r+0x1ec>)
 801999a:	2203      	movs	r2, #3
 801999c:	0030      	movs	r0, r6
 801999e:	7829      	ldrb	r1, [r5, #0]
 80199a0:	f7fe fbbf 	bl	8018122 <memchr>
 80199a4:	2800      	cmp	r0, #0
 80199a6:	d006      	beq.n	80199b6 <_svfiprintf_r+0x152>
 80199a8:	2340      	movs	r3, #64	@ 0x40
 80199aa:	1b80      	subs	r0, r0, r6
 80199ac:	4083      	lsls	r3, r0
 80199ae:	6822      	ldr	r2, [r4, #0]
 80199b0:	3501      	adds	r5, #1
 80199b2:	4313      	orrs	r3, r2
 80199b4:	6023      	str	r3, [r4, #0]
 80199b6:	7829      	ldrb	r1, [r5, #0]
 80199b8:	2206      	movs	r2, #6
 80199ba:	4826      	ldr	r0, [pc, #152]	@ (8019a54 <_svfiprintf_r+0x1f0>)
 80199bc:	1c6e      	adds	r6, r5, #1
 80199be:	7621      	strb	r1, [r4, #24]
 80199c0:	f7fe fbaf 	bl	8018122 <memchr>
 80199c4:	2800      	cmp	r0, #0
 80199c6:	d038      	beq.n	8019a3a <_svfiprintf_r+0x1d6>
 80199c8:	4b23      	ldr	r3, [pc, #140]	@ (8019a58 <_svfiprintf_r+0x1f4>)
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d122      	bne.n	8019a14 <_svfiprintf_r+0x1b0>
 80199ce:	2207      	movs	r2, #7
 80199d0:	9b07      	ldr	r3, [sp, #28]
 80199d2:	3307      	adds	r3, #7
 80199d4:	4393      	bics	r3, r2
 80199d6:	3308      	adds	r3, #8
 80199d8:	9307      	str	r3, [sp, #28]
 80199da:	6963      	ldr	r3, [r4, #20]
 80199dc:	9a04      	ldr	r2, [sp, #16]
 80199de:	189b      	adds	r3, r3, r2
 80199e0:	6163      	str	r3, [r4, #20]
 80199e2:	e762      	b.n	80198aa <_svfiprintf_r+0x46>
 80199e4:	4343      	muls	r3, r0
 80199e6:	0035      	movs	r5, r6
 80199e8:	2101      	movs	r1, #1
 80199ea:	189b      	adds	r3, r3, r2
 80199ec:	e7a4      	b.n	8019938 <_svfiprintf_r+0xd4>
 80199ee:	2300      	movs	r3, #0
 80199f0:	200a      	movs	r0, #10
 80199f2:	0019      	movs	r1, r3
 80199f4:	3501      	adds	r5, #1
 80199f6:	6063      	str	r3, [r4, #4]
 80199f8:	782a      	ldrb	r2, [r5, #0]
 80199fa:	1c6e      	adds	r6, r5, #1
 80199fc:	3a30      	subs	r2, #48	@ 0x30
 80199fe:	2a09      	cmp	r2, #9
 8019a00:	d903      	bls.n	8019a0a <_svfiprintf_r+0x1a6>
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d0c8      	beq.n	8019998 <_svfiprintf_r+0x134>
 8019a06:	9109      	str	r1, [sp, #36]	@ 0x24
 8019a08:	e7c6      	b.n	8019998 <_svfiprintf_r+0x134>
 8019a0a:	4341      	muls	r1, r0
 8019a0c:	0035      	movs	r5, r6
 8019a0e:	2301      	movs	r3, #1
 8019a10:	1889      	adds	r1, r1, r2
 8019a12:	e7f1      	b.n	80199f8 <_svfiprintf_r+0x194>
 8019a14:	aa07      	add	r2, sp, #28
 8019a16:	9200      	str	r2, [sp, #0]
 8019a18:	0021      	movs	r1, r4
 8019a1a:	003a      	movs	r2, r7
 8019a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8019a5c <_svfiprintf_r+0x1f8>)
 8019a1e:	9803      	ldr	r0, [sp, #12]
 8019a20:	f7fd fd8c 	bl	801753c <_printf_float>
 8019a24:	9004      	str	r0, [sp, #16]
 8019a26:	9b04      	ldr	r3, [sp, #16]
 8019a28:	3301      	adds	r3, #1
 8019a2a:	d1d6      	bne.n	80199da <_svfiprintf_r+0x176>
 8019a2c:	89bb      	ldrh	r3, [r7, #12]
 8019a2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019a30:	065b      	lsls	r3, r3, #25
 8019a32:	d500      	bpl.n	8019a36 <_svfiprintf_r+0x1d2>
 8019a34:	e72c      	b.n	8019890 <_svfiprintf_r+0x2c>
 8019a36:	b021      	add	sp, #132	@ 0x84
 8019a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a3a:	aa07      	add	r2, sp, #28
 8019a3c:	9200      	str	r2, [sp, #0]
 8019a3e:	0021      	movs	r1, r4
 8019a40:	003a      	movs	r2, r7
 8019a42:	4b06      	ldr	r3, [pc, #24]	@ (8019a5c <_svfiprintf_r+0x1f8>)
 8019a44:	9803      	ldr	r0, [sp, #12]
 8019a46:	f7fe f827 	bl	8017a98 <_printf_i>
 8019a4a:	e7eb      	b.n	8019a24 <_svfiprintf_r+0x1c0>
 8019a4c:	0801bec8 	.word	0x0801bec8
 8019a50:	0801bece 	.word	0x0801bece
 8019a54:	0801bed2 	.word	0x0801bed2
 8019a58:	0801753d 	.word	0x0801753d
 8019a5c:	080197a5 	.word	0x080197a5

08019a60 <__sfputc_r>:
 8019a60:	6893      	ldr	r3, [r2, #8]
 8019a62:	b510      	push	{r4, lr}
 8019a64:	3b01      	subs	r3, #1
 8019a66:	6093      	str	r3, [r2, #8]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	da04      	bge.n	8019a76 <__sfputc_r+0x16>
 8019a6c:	6994      	ldr	r4, [r2, #24]
 8019a6e:	42a3      	cmp	r3, r4
 8019a70:	db07      	blt.n	8019a82 <__sfputc_r+0x22>
 8019a72:	290a      	cmp	r1, #10
 8019a74:	d005      	beq.n	8019a82 <__sfputc_r+0x22>
 8019a76:	6813      	ldr	r3, [r2, #0]
 8019a78:	1c58      	adds	r0, r3, #1
 8019a7a:	6010      	str	r0, [r2, #0]
 8019a7c:	7019      	strb	r1, [r3, #0]
 8019a7e:	0008      	movs	r0, r1
 8019a80:	bd10      	pop	{r4, pc}
 8019a82:	f000 f9e2 	bl	8019e4a <__swbuf_r>
 8019a86:	0001      	movs	r1, r0
 8019a88:	e7f9      	b.n	8019a7e <__sfputc_r+0x1e>

08019a8a <__sfputs_r>:
 8019a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a8c:	0006      	movs	r6, r0
 8019a8e:	000f      	movs	r7, r1
 8019a90:	0014      	movs	r4, r2
 8019a92:	18d5      	adds	r5, r2, r3
 8019a94:	42ac      	cmp	r4, r5
 8019a96:	d101      	bne.n	8019a9c <__sfputs_r+0x12>
 8019a98:	2000      	movs	r0, #0
 8019a9a:	e007      	b.n	8019aac <__sfputs_r+0x22>
 8019a9c:	7821      	ldrb	r1, [r4, #0]
 8019a9e:	003a      	movs	r2, r7
 8019aa0:	0030      	movs	r0, r6
 8019aa2:	f7ff ffdd 	bl	8019a60 <__sfputc_r>
 8019aa6:	3401      	adds	r4, #1
 8019aa8:	1c43      	adds	r3, r0, #1
 8019aaa:	d1f3      	bne.n	8019a94 <__sfputs_r+0xa>
 8019aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019ab0 <_vfiprintf_r>:
 8019ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ab2:	b0a1      	sub	sp, #132	@ 0x84
 8019ab4:	000f      	movs	r7, r1
 8019ab6:	0015      	movs	r5, r2
 8019ab8:	001e      	movs	r6, r3
 8019aba:	9003      	str	r0, [sp, #12]
 8019abc:	2800      	cmp	r0, #0
 8019abe:	d004      	beq.n	8019aca <_vfiprintf_r+0x1a>
 8019ac0:	6a03      	ldr	r3, [r0, #32]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d101      	bne.n	8019aca <_vfiprintf_r+0x1a>
 8019ac6:	f7fe f985 	bl	8017dd4 <__sinit>
 8019aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019acc:	07db      	lsls	r3, r3, #31
 8019ace:	d405      	bmi.n	8019adc <_vfiprintf_r+0x2c>
 8019ad0:	89bb      	ldrh	r3, [r7, #12]
 8019ad2:	059b      	lsls	r3, r3, #22
 8019ad4:	d402      	bmi.n	8019adc <_vfiprintf_r+0x2c>
 8019ad6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019ad8:	f7fe fb21 	bl	801811e <__retarget_lock_acquire_recursive>
 8019adc:	89bb      	ldrh	r3, [r7, #12]
 8019ade:	071b      	lsls	r3, r3, #28
 8019ae0:	d502      	bpl.n	8019ae8 <_vfiprintf_r+0x38>
 8019ae2:	693b      	ldr	r3, [r7, #16]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d113      	bne.n	8019b10 <_vfiprintf_r+0x60>
 8019ae8:	0039      	movs	r1, r7
 8019aea:	9803      	ldr	r0, [sp, #12]
 8019aec:	f000 f9f0 	bl	8019ed0 <__swsetup_r>
 8019af0:	2800      	cmp	r0, #0
 8019af2:	d00d      	beq.n	8019b10 <_vfiprintf_r+0x60>
 8019af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019af6:	07db      	lsls	r3, r3, #31
 8019af8:	d503      	bpl.n	8019b02 <_vfiprintf_r+0x52>
 8019afa:	2001      	movs	r0, #1
 8019afc:	4240      	negs	r0, r0
 8019afe:	b021      	add	sp, #132	@ 0x84
 8019b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b02:	89bb      	ldrh	r3, [r7, #12]
 8019b04:	059b      	lsls	r3, r3, #22
 8019b06:	d4f8      	bmi.n	8019afa <_vfiprintf_r+0x4a>
 8019b08:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019b0a:	f7fe fb09 	bl	8018120 <__retarget_lock_release_recursive>
 8019b0e:	e7f4      	b.n	8019afa <_vfiprintf_r+0x4a>
 8019b10:	2300      	movs	r3, #0
 8019b12:	ac08      	add	r4, sp, #32
 8019b14:	6163      	str	r3, [r4, #20]
 8019b16:	3320      	adds	r3, #32
 8019b18:	7663      	strb	r3, [r4, #25]
 8019b1a:	3310      	adds	r3, #16
 8019b1c:	76a3      	strb	r3, [r4, #26]
 8019b1e:	9607      	str	r6, [sp, #28]
 8019b20:	002e      	movs	r6, r5
 8019b22:	7833      	ldrb	r3, [r6, #0]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d001      	beq.n	8019b2c <_vfiprintf_r+0x7c>
 8019b28:	2b25      	cmp	r3, #37	@ 0x25
 8019b2a:	d148      	bne.n	8019bbe <_vfiprintf_r+0x10e>
 8019b2c:	1b73      	subs	r3, r6, r5
 8019b2e:	9305      	str	r3, [sp, #20]
 8019b30:	42ae      	cmp	r6, r5
 8019b32:	d00b      	beq.n	8019b4c <_vfiprintf_r+0x9c>
 8019b34:	002a      	movs	r2, r5
 8019b36:	0039      	movs	r1, r7
 8019b38:	9803      	ldr	r0, [sp, #12]
 8019b3a:	f7ff ffa6 	bl	8019a8a <__sfputs_r>
 8019b3e:	3001      	adds	r0, #1
 8019b40:	d100      	bne.n	8019b44 <_vfiprintf_r+0x94>
 8019b42:	e0ae      	b.n	8019ca2 <_vfiprintf_r+0x1f2>
 8019b44:	6963      	ldr	r3, [r4, #20]
 8019b46:	9a05      	ldr	r2, [sp, #20]
 8019b48:	189b      	adds	r3, r3, r2
 8019b4a:	6163      	str	r3, [r4, #20]
 8019b4c:	7833      	ldrb	r3, [r6, #0]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d100      	bne.n	8019b54 <_vfiprintf_r+0xa4>
 8019b52:	e0a6      	b.n	8019ca2 <_vfiprintf_r+0x1f2>
 8019b54:	2201      	movs	r2, #1
 8019b56:	2300      	movs	r3, #0
 8019b58:	4252      	negs	r2, r2
 8019b5a:	6062      	str	r2, [r4, #4]
 8019b5c:	a904      	add	r1, sp, #16
 8019b5e:	3254      	adds	r2, #84	@ 0x54
 8019b60:	1852      	adds	r2, r2, r1
 8019b62:	1c75      	adds	r5, r6, #1
 8019b64:	6023      	str	r3, [r4, #0]
 8019b66:	60e3      	str	r3, [r4, #12]
 8019b68:	60a3      	str	r3, [r4, #8]
 8019b6a:	7013      	strb	r3, [r2, #0]
 8019b6c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019b6e:	4b59      	ldr	r3, [pc, #356]	@ (8019cd4 <_vfiprintf_r+0x224>)
 8019b70:	2205      	movs	r2, #5
 8019b72:	0018      	movs	r0, r3
 8019b74:	7829      	ldrb	r1, [r5, #0]
 8019b76:	9305      	str	r3, [sp, #20]
 8019b78:	f7fe fad3 	bl	8018122 <memchr>
 8019b7c:	1c6e      	adds	r6, r5, #1
 8019b7e:	2800      	cmp	r0, #0
 8019b80:	d11f      	bne.n	8019bc2 <_vfiprintf_r+0x112>
 8019b82:	6822      	ldr	r2, [r4, #0]
 8019b84:	06d3      	lsls	r3, r2, #27
 8019b86:	d504      	bpl.n	8019b92 <_vfiprintf_r+0xe2>
 8019b88:	2353      	movs	r3, #83	@ 0x53
 8019b8a:	a904      	add	r1, sp, #16
 8019b8c:	185b      	adds	r3, r3, r1
 8019b8e:	2120      	movs	r1, #32
 8019b90:	7019      	strb	r1, [r3, #0]
 8019b92:	0713      	lsls	r3, r2, #28
 8019b94:	d504      	bpl.n	8019ba0 <_vfiprintf_r+0xf0>
 8019b96:	2353      	movs	r3, #83	@ 0x53
 8019b98:	a904      	add	r1, sp, #16
 8019b9a:	185b      	adds	r3, r3, r1
 8019b9c:	212b      	movs	r1, #43	@ 0x2b
 8019b9e:	7019      	strb	r1, [r3, #0]
 8019ba0:	782b      	ldrb	r3, [r5, #0]
 8019ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8019ba4:	d016      	beq.n	8019bd4 <_vfiprintf_r+0x124>
 8019ba6:	002e      	movs	r6, r5
 8019ba8:	2100      	movs	r1, #0
 8019baa:	200a      	movs	r0, #10
 8019bac:	68e3      	ldr	r3, [r4, #12]
 8019bae:	7832      	ldrb	r2, [r6, #0]
 8019bb0:	1c75      	adds	r5, r6, #1
 8019bb2:	3a30      	subs	r2, #48	@ 0x30
 8019bb4:	2a09      	cmp	r2, #9
 8019bb6:	d950      	bls.n	8019c5a <_vfiprintf_r+0x1aa>
 8019bb8:	2900      	cmp	r1, #0
 8019bba:	d111      	bne.n	8019be0 <_vfiprintf_r+0x130>
 8019bbc:	e017      	b.n	8019bee <_vfiprintf_r+0x13e>
 8019bbe:	3601      	adds	r6, #1
 8019bc0:	e7af      	b.n	8019b22 <_vfiprintf_r+0x72>
 8019bc2:	9b05      	ldr	r3, [sp, #20]
 8019bc4:	6822      	ldr	r2, [r4, #0]
 8019bc6:	1ac0      	subs	r0, r0, r3
 8019bc8:	2301      	movs	r3, #1
 8019bca:	4083      	lsls	r3, r0
 8019bcc:	4313      	orrs	r3, r2
 8019bce:	0035      	movs	r5, r6
 8019bd0:	6023      	str	r3, [r4, #0]
 8019bd2:	e7cc      	b.n	8019b6e <_vfiprintf_r+0xbe>
 8019bd4:	9b07      	ldr	r3, [sp, #28]
 8019bd6:	1d19      	adds	r1, r3, #4
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	9107      	str	r1, [sp, #28]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	db01      	blt.n	8019be4 <_vfiprintf_r+0x134>
 8019be0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019be2:	e004      	b.n	8019bee <_vfiprintf_r+0x13e>
 8019be4:	425b      	negs	r3, r3
 8019be6:	60e3      	str	r3, [r4, #12]
 8019be8:	2302      	movs	r3, #2
 8019bea:	4313      	orrs	r3, r2
 8019bec:	6023      	str	r3, [r4, #0]
 8019bee:	7833      	ldrb	r3, [r6, #0]
 8019bf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8019bf2:	d10c      	bne.n	8019c0e <_vfiprintf_r+0x15e>
 8019bf4:	7873      	ldrb	r3, [r6, #1]
 8019bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8019bf8:	d134      	bne.n	8019c64 <_vfiprintf_r+0x1b4>
 8019bfa:	9b07      	ldr	r3, [sp, #28]
 8019bfc:	3602      	adds	r6, #2
 8019bfe:	1d1a      	adds	r2, r3, #4
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	9207      	str	r2, [sp, #28]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	da01      	bge.n	8019c0c <_vfiprintf_r+0x15c>
 8019c08:	2301      	movs	r3, #1
 8019c0a:	425b      	negs	r3, r3
 8019c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c0e:	4d32      	ldr	r5, [pc, #200]	@ (8019cd8 <_vfiprintf_r+0x228>)
 8019c10:	2203      	movs	r2, #3
 8019c12:	0028      	movs	r0, r5
 8019c14:	7831      	ldrb	r1, [r6, #0]
 8019c16:	f7fe fa84 	bl	8018122 <memchr>
 8019c1a:	2800      	cmp	r0, #0
 8019c1c:	d006      	beq.n	8019c2c <_vfiprintf_r+0x17c>
 8019c1e:	2340      	movs	r3, #64	@ 0x40
 8019c20:	1b40      	subs	r0, r0, r5
 8019c22:	4083      	lsls	r3, r0
 8019c24:	6822      	ldr	r2, [r4, #0]
 8019c26:	3601      	adds	r6, #1
 8019c28:	4313      	orrs	r3, r2
 8019c2a:	6023      	str	r3, [r4, #0]
 8019c2c:	7831      	ldrb	r1, [r6, #0]
 8019c2e:	2206      	movs	r2, #6
 8019c30:	482a      	ldr	r0, [pc, #168]	@ (8019cdc <_vfiprintf_r+0x22c>)
 8019c32:	1c75      	adds	r5, r6, #1
 8019c34:	7621      	strb	r1, [r4, #24]
 8019c36:	f7fe fa74 	bl	8018122 <memchr>
 8019c3a:	2800      	cmp	r0, #0
 8019c3c:	d040      	beq.n	8019cc0 <_vfiprintf_r+0x210>
 8019c3e:	4b28      	ldr	r3, [pc, #160]	@ (8019ce0 <_vfiprintf_r+0x230>)
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d122      	bne.n	8019c8a <_vfiprintf_r+0x1da>
 8019c44:	2207      	movs	r2, #7
 8019c46:	9b07      	ldr	r3, [sp, #28]
 8019c48:	3307      	adds	r3, #7
 8019c4a:	4393      	bics	r3, r2
 8019c4c:	3308      	adds	r3, #8
 8019c4e:	9307      	str	r3, [sp, #28]
 8019c50:	6963      	ldr	r3, [r4, #20]
 8019c52:	9a04      	ldr	r2, [sp, #16]
 8019c54:	189b      	adds	r3, r3, r2
 8019c56:	6163      	str	r3, [r4, #20]
 8019c58:	e762      	b.n	8019b20 <_vfiprintf_r+0x70>
 8019c5a:	4343      	muls	r3, r0
 8019c5c:	002e      	movs	r6, r5
 8019c5e:	2101      	movs	r1, #1
 8019c60:	189b      	adds	r3, r3, r2
 8019c62:	e7a4      	b.n	8019bae <_vfiprintf_r+0xfe>
 8019c64:	2300      	movs	r3, #0
 8019c66:	200a      	movs	r0, #10
 8019c68:	0019      	movs	r1, r3
 8019c6a:	3601      	adds	r6, #1
 8019c6c:	6063      	str	r3, [r4, #4]
 8019c6e:	7832      	ldrb	r2, [r6, #0]
 8019c70:	1c75      	adds	r5, r6, #1
 8019c72:	3a30      	subs	r2, #48	@ 0x30
 8019c74:	2a09      	cmp	r2, #9
 8019c76:	d903      	bls.n	8019c80 <_vfiprintf_r+0x1d0>
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d0c8      	beq.n	8019c0e <_vfiprintf_r+0x15e>
 8019c7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8019c7e:	e7c6      	b.n	8019c0e <_vfiprintf_r+0x15e>
 8019c80:	4341      	muls	r1, r0
 8019c82:	002e      	movs	r6, r5
 8019c84:	2301      	movs	r3, #1
 8019c86:	1889      	adds	r1, r1, r2
 8019c88:	e7f1      	b.n	8019c6e <_vfiprintf_r+0x1be>
 8019c8a:	aa07      	add	r2, sp, #28
 8019c8c:	9200      	str	r2, [sp, #0]
 8019c8e:	0021      	movs	r1, r4
 8019c90:	003a      	movs	r2, r7
 8019c92:	4b14      	ldr	r3, [pc, #80]	@ (8019ce4 <_vfiprintf_r+0x234>)
 8019c94:	9803      	ldr	r0, [sp, #12]
 8019c96:	f7fd fc51 	bl	801753c <_printf_float>
 8019c9a:	9004      	str	r0, [sp, #16]
 8019c9c:	9b04      	ldr	r3, [sp, #16]
 8019c9e:	3301      	adds	r3, #1
 8019ca0:	d1d6      	bne.n	8019c50 <_vfiprintf_r+0x1a0>
 8019ca2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019ca4:	07db      	lsls	r3, r3, #31
 8019ca6:	d405      	bmi.n	8019cb4 <_vfiprintf_r+0x204>
 8019ca8:	89bb      	ldrh	r3, [r7, #12]
 8019caa:	059b      	lsls	r3, r3, #22
 8019cac:	d402      	bmi.n	8019cb4 <_vfiprintf_r+0x204>
 8019cae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019cb0:	f7fe fa36 	bl	8018120 <__retarget_lock_release_recursive>
 8019cb4:	89bb      	ldrh	r3, [r7, #12]
 8019cb6:	065b      	lsls	r3, r3, #25
 8019cb8:	d500      	bpl.n	8019cbc <_vfiprintf_r+0x20c>
 8019cba:	e71e      	b.n	8019afa <_vfiprintf_r+0x4a>
 8019cbc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019cbe:	e71e      	b.n	8019afe <_vfiprintf_r+0x4e>
 8019cc0:	aa07      	add	r2, sp, #28
 8019cc2:	9200      	str	r2, [sp, #0]
 8019cc4:	0021      	movs	r1, r4
 8019cc6:	003a      	movs	r2, r7
 8019cc8:	4b06      	ldr	r3, [pc, #24]	@ (8019ce4 <_vfiprintf_r+0x234>)
 8019cca:	9803      	ldr	r0, [sp, #12]
 8019ccc:	f7fd fee4 	bl	8017a98 <_printf_i>
 8019cd0:	e7e3      	b.n	8019c9a <_vfiprintf_r+0x1ea>
 8019cd2:	46c0      	nop			@ (mov r8, r8)
 8019cd4:	0801bec8 	.word	0x0801bec8
 8019cd8:	0801bece 	.word	0x0801bece
 8019cdc:	0801bed2 	.word	0x0801bed2
 8019ce0:	0801753d 	.word	0x0801753d
 8019ce4:	08019a8b 	.word	0x08019a8b

08019ce8 <__sflush_r>:
 8019ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019cea:	220c      	movs	r2, #12
 8019cec:	5e8b      	ldrsh	r3, [r1, r2]
 8019cee:	0005      	movs	r5, r0
 8019cf0:	000c      	movs	r4, r1
 8019cf2:	071a      	lsls	r2, r3, #28
 8019cf4:	d456      	bmi.n	8019da4 <__sflush_r+0xbc>
 8019cf6:	684a      	ldr	r2, [r1, #4]
 8019cf8:	2a00      	cmp	r2, #0
 8019cfa:	dc02      	bgt.n	8019d02 <__sflush_r+0x1a>
 8019cfc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8019cfe:	2a00      	cmp	r2, #0
 8019d00:	dd4e      	ble.n	8019da0 <__sflush_r+0xb8>
 8019d02:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019d04:	2f00      	cmp	r7, #0
 8019d06:	d04b      	beq.n	8019da0 <__sflush_r+0xb8>
 8019d08:	2200      	movs	r2, #0
 8019d0a:	2080      	movs	r0, #128	@ 0x80
 8019d0c:	682e      	ldr	r6, [r5, #0]
 8019d0e:	602a      	str	r2, [r5, #0]
 8019d10:	001a      	movs	r2, r3
 8019d12:	0140      	lsls	r0, r0, #5
 8019d14:	6a21      	ldr	r1, [r4, #32]
 8019d16:	4002      	ands	r2, r0
 8019d18:	4203      	tst	r3, r0
 8019d1a:	d033      	beq.n	8019d84 <__sflush_r+0x9c>
 8019d1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019d1e:	89a3      	ldrh	r3, [r4, #12]
 8019d20:	075b      	lsls	r3, r3, #29
 8019d22:	d506      	bpl.n	8019d32 <__sflush_r+0x4a>
 8019d24:	6863      	ldr	r3, [r4, #4]
 8019d26:	1ad2      	subs	r2, r2, r3
 8019d28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d001      	beq.n	8019d32 <__sflush_r+0x4a>
 8019d2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019d30:	1ad2      	subs	r2, r2, r3
 8019d32:	2300      	movs	r3, #0
 8019d34:	0028      	movs	r0, r5
 8019d36:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019d38:	6a21      	ldr	r1, [r4, #32]
 8019d3a:	47b8      	blx	r7
 8019d3c:	89a2      	ldrh	r2, [r4, #12]
 8019d3e:	1c43      	adds	r3, r0, #1
 8019d40:	d106      	bne.n	8019d50 <__sflush_r+0x68>
 8019d42:	6829      	ldr	r1, [r5, #0]
 8019d44:	291d      	cmp	r1, #29
 8019d46:	d846      	bhi.n	8019dd6 <__sflush_r+0xee>
 8019d48:	4b29      	ldr	r3, [pc, #164]	@ (8019df0 <__sflush_r+0x108>)
 8019d4a:	410b      	asrs	r3, r1
 8019d4c:	07db      	lsls	r3, r3, #31
 8019d4e:	d442      	bmi.n	8019dd6 <__sflush_r+0xee>
 8019d50:	2300      	movs	r3, #0
 8019d52:	6063      	str	r3, [r4, #4]
 8019d54:	6923      	ldr	r3, [r4, #16]
 8019d56:	6023      	str	r3, [r4, #0]
 8019d58:	04d2      	lsls	r2, r2, #19
 8019d5a:	d505      	bpl.n	8019d68 <__sflush_r+0x80>
 8019d5c:	1c43      	adds	r3, r0, #1
 8019d5e:	d102      	bne.n	8019d66 <__sflush_r+0x7e>
 8019d60:	682b      	ldr	r3, [r5, #0]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d100      	bne.n	8019d68 <__sflush_r+0x80>
 8019d66:	6560      	str	r0, [r4, #84]	@ 0x54
 8019d68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019d6a:	602e      	str	r6, [r5, #0]
 8019d6c:	2900      	cmp	r1, #0
 8019d6e:	d017      	beq.n	8019da0 <__sflush_r+0xb8>
 8019d70:	0023      	movs	r3, r4
 8019d72:	3344      	adds	r3, #68	@ 0x44
 8019d74:	4299      	cmp	r1, r3
 8019d76:	d002      	beq.n	8019d7e <__sflush_r+0x96>
 8019d78:	0028      	movs	r0, r5
 8019d7a:	f7ff f869 	bl	8018e50 <_free_r>
 8019d7e:	2300      	movs	r3, #0
 8019d80:	6363      	str	r3, [r4, #52]	@ 0x34
 8019d82:	e00d      	b.n	8019da0 <__sflush_r+0xb8>
 8019d84:	2301      	movs	r3, #1
 8019d86:	0028      	movs	r0, r5
 8019d88:	47b8      	blx	r7
 8019d8a:	0002      	movs	r2, r0
 8019d8c:	1c43      	adds	r3, r0, #1
 8019d8e:	d1c6      	bne.n	8019d1e <__sflush_r+0x36>
 8019d90:	682b      	ldr	r3, [r5, #0]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d0c3      	beq.n	8019d1e <__sflush_r+0x36>
 8019d96:	2b1d      	cmp	r3, #29
 8019d98:	d001      	beq.n	8019d9e <__sflush_r+0xb6>
 8019d9a:	2b16      	cmp	r3, #22
 8019d9c:	d11a      	bne.n	8019dd4 <__sflush_r+0xec>
 8019d9e:	602e      	str	r6, [r5, #0]
 8019da0:	2000      	movs	r0, #0
 8019da2:	e01e      	b.n	8019de2 <__sflush_r+0xfa>
 8019da4:	690e      	ldr	r6, [r1, #16]
 8019da6:	2e00      	cmp	r6, #0
 8019da8:	d0fa      	beq.n	8019da0 <__sflush_r+0xb8>
 8019daa:	680f      	ldr	r7, [r1, #0]
 8019dac:	600e      	str	r6, [r1, #0]
 8019dae:	1bba      	subs	r2, r7, r6
 8019db0:	9201      	str	r2, [sp, #4]
 8019db2:	2200      	movs	r2, #0
 8019db4:	079b      	lsls	r3, r3, #30
 8019db6:	d100      	bne.n	8019dba <__sflush_r+0xd2>
 8019db8:	694a      	ldr	r2, [r1, #20]
 8019dba:	60a2      	str	r2, [r4, #8]
 8019dbc:	9b01      	ldr	r3, [sp, #4]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	ddee      	ble.n	8019da0 <__sflush_r+0xb8>
 8019dc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019dc4:	0032      	movs	r2, r6
 8019dc6:	001f      	movs	r7, r3
 8019dc8:	0028      	movs	r0, r5
 8019dca:	9b01      	ldr	r3, [sp, #4]
 8019dcc:	6a21      	ldr	r1, [r4, #32]
 8019dce:	47b8      	blx	r7
 8019dd0:	2800      	cmp	r0, #0
 8019dd2:	dc07      	bgt.n	8019de4 <__sflush_r+0xfc>
 8019dd4:	89a2      	ldrh	r2, [r4, #12]
 8019dd6:	2340      	movs	r3, #64	@ 0x40
 8019dd8:	2001      	movs	r0, #1
 8019dda:	4313      	orrs	r3, r2
 8019ddc:	b21b      	sxth	r3, r3
 8019dde:	81a3      	strh	r3, [r4, #12]
 8019de0:	4240      	negs	r0, r0
 8019de2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019de4:	9b01      	ldr	r3, [sp, #4]
 8019de6:	1836      	adds	r6, r6, r0
 8019de8:	1a1b      	subs	r3, r3, r0
 8019dea:	9301      	str	r3, [sp, #4]
 8019dec:	e7e6      	b.n	8019dbc <__sflush_r+0xd4>
 8019dee:	46c0      	nop			@ (mov r8, r8)
 8019df0:	dfbffffe 	.word	0xdfbffffe

08019df4 <_fflush_r>:
 8019df4:	690b      	ldr	r3, [r1, #16]
 8019df6:	b570      	push	{r4, r5, r6, lr}
 8019df8:	0005      	movs	r5, r0
 8019dfa:	000c      	movs	r4, r1
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d102      	bne.n	8019e06 <_fflush_r+0x12>
 8019e00:	2500      	movs	r5, #0
 8019e02:	0028      	movs	r0, r5
 8019e04:	bd70      	pop	{r4, r5, r6, pc}
 8019e06:	2800      	cmp	r0, #0
 8019e08:	d004      	beq.n	8019e14 <_fflush_r+0x20>
 8019e0a:	6a03      	ldr	r3, [r0, #32]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d101      	bne.n	8019e14 <_fflush_r+0x20>
 8019e10:	f7fd ffe0 	bl	8017dd4 <__sinit>
 8019e14:	220c      	movs	r2, #12
 8019e16:	5ea3      	ldrsh	r3, [r4, r2]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d0f1      	beq.n	8019e00 <_fflush_r+0xc>
 8019e1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019e1e:	07d2      	lsls	r2, r2, #31
 8019e20:	d404      	bmi.n	8019e2c <_fflush_r+0x38>
 8019e22:	059b      	lsls	r3, r3, #22
 8019e24:	d402      	bmi.n	8019e2c <_fflush_r+0x38>
 8019e26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019e28:	f7fe f979 	bl	801811e <__retarget_lock_acquire_recursive>
 8019e2c:	0028      	movs	r0, r5
 8019e2e:	0021      	movs	r1, r4
 8019e30:	f7ff ff5a 	bl	8019ce8 <__sflush_r>
 8019e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019e36:	0005      	movs	r5, r0
 8019e38:	07db      	lsls	r3, r3, #31
 8019e3a:	d4e2      	bmi.n	8019e02 <_fflush_r+0xe>
 8019e3c:	89a3      	ldrh	r3, [r4, #12]
 8019e3e:	059b      	lsls	r3, r3, #22
 8019e40:	d4df      	bmi.n	8019e02 <_fflush_r+0xe>
 8019e42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019e44:	f7fe f96c 	bl	8018120 <__retarget_lock_release_recursive>
 8019e48:	e7db      	b.n	8019e02 <_fflush_r+0xe>

08019e4a <__swbuf_r>:
 8019e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e4c:	0006      	movs	r6, r0
 8019e4e:	000d      	movs	r5, r1
 8019e50:	0014      	movs	r4, r2
 8019e52:	2800      	cmp	r0, #0
 8019e54:	d004      	beq.n	8019e60 <__swbuf_r+0x16>
 8019e56:	6a03      	ldr	r3, [r0, #32]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d101      	bne.n	8019e60 <__swbuf_r+0x16>
 8019e5c:	f7fd ffba 	bl	8017dd4 <__sinit>
 8019e60:	69a3      	ldr	r3, [r4, #24]
 8019e62:	60a3      	str	r3, [r4, #8]
 8019e64:	89a3      	ldrh	r3, [r4, #12]
 8019e66:	071b      	lsls	r3, r3, #28
 8019e68:	d502      	bpl.n	8019e70 <__swbuf_r+0x26>
 8019e6a:	6923      	ldr	r3, [r4, #16]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d109      	bne.n	8019e84 <__swbuf_r+0x3a>
 8019e70:	0021      	movs	r1, r4
 8019e72:	0030      	movs	r0, r6
 8019e74:	f000 f82c 	bl	8019ed0 <__swsetup_r>
 8019e78:	2800      	cmp	r0, #0
 8019e7a:	d003      	beq.n	8019e84 <__swbuf_r+0x3a>
 8019e7c:	2501      	movs	r5, #1
 8019e7e:	426d      	negs	r5, r5
 8019e80:	0028      	movs	r0, r5
 8019e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e84:	6923      	ldr	r3, [r4, #16]
 8019e86:	6820      	ldr	r0, [r4, #0]
 8019e88:	b2ef      	uxtb	r7, r5
 8019e8a:	1ac0      	subs	r0, r0, r3
 8019e8c:	6963      	ldr	r3, [r4, #20]
 8019e8e:	b2ed      	uxtb	r5, r5
 8019e90:	4283      	cmp	r3, r0
 8019e92:	dc05      	bgt.n	8019ea0 <__swbuf_r+0x56>
 8019e94:	0021      	movs	r1, r4
 8019e96:	0030      	movs	r0, r6
 8019e98:	f7ff ffac 	bl	8019df4 <_fflush_r>
 8019e9c:	2800      	cmp	r0, #0
 8019e9e:	d1ed      	bne.n	8019e7c <__swbuf_r+0x32>
 8019ea0:	68a3      	ldr	r3, [r4, #8]
 8019ea2:	3001      	adds	r0, #1
 8019ea4:	3b01      	subs	r3, #1
 8019ea6:	60a3      	str	r3, [r4, #8]
 8019ea8:	6823      	ldr	r3, [r4, #0]
 8019eaa:	1c5a      	adds	r2, r3, #1
 8019eac:	6022      	str	r2, [r4, #0]
 8019eae:	701f      	strb	r7, [r3, #0]
 8019eb0:	6963      	ldr	r3, [r4, #20]
 8019eb2:	4283      	cmp	r3, r0
 8019eb4:	d004      	beq.n	8019ec0 <__swbuf_r+0x76>
 8019eb6:	89a3      	ldrh	r3, [r4, #12]
 8019eb8:	07db      	lsls	r3, r3, #31
 8019eba:	d5e1      	bpl.n	8019e80 <__swbuf_r+0x36>
 8019ebc:	2d0a      	cmp	r5, #10
 8019ebe:	d1df      	bne.n	8019e80 <__swbuf_r+0x36>
 8019ec0:	0021      	movs	r1, r4
 8019ec2:	0030      	movs	r0, r6
 8019ec4:	f7ff ff96 	bl	8019df4 <_fflush_r>
 8019ec8:	2800      	cmp	r0, #0
 8019eca:	d0d9      	beq.n	8019e80 <__swbuf_r+0x36>
 8019ecc:	e7d6      	b.n	8019e7c <__swbuf_r+0x32>
	...

08019ed0 <__swsetup_r>:
 8019ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8019f88 <__swsetup_r+0xb8>)
 8019ed2:	b570      	push	{r4, r5, r6, lr}
 8019ed4:	0005      	movs	r5, r0
 8019ed6:	6818      	ldr	r0, [r3, #0]
 8019ed8:	000c      	movs	r4, r1
 8019eda:	2800      	cmp	r0, #0
 8019edc:	d004      	beq.n	8019ee8 <__swsetup_r+0x18>
 8019ede:	6a03      	ldr	r3, [r0, #32]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d101      	bne.n	8019ee8 <__swsetup_r+0x18>
 8019ee4:	f7fd ff76 	bl	8017dd4 <__sinit>
 8019ee8:	230c      	movs	r3, #12
 8019eea:	5ee2      	ldrsh	r2, [r4, r3]
 8019eec:	0713      	lsls	r3, r2, #28
 8019eee:	d423      	bmi.n	8019f38 <__swsetup_r+0x68>
 8019ef0:	06d3      	lsls	r3, r2, #27
 8019ef2:	d407      	bmi.n	8019f04 <__swsetup_r+0x34>
 8019ef4:	2309      	movs	r3, #9
 8019ef6:	602b      	str	r3, [r5, #0]
 8019ef8:	2340      	movs	r3, #64	@ 0x40
 8019efa:	2001      	movs	r0, #1
 8019efc:	4313      	orrs	r3, r2
 8019efe:	81a3      	strh	r3, [r4, #12]
 8019f00:	4240      	negs	r0, r0
 8019f02:	e03a      	b.n	8019f7a <__swsetup_r+0xaa>
 8019f04:	0752      	lsls	r2, r2, #29
 8019f06:	d513      	bpl.n	8019f30 <__swsetup_r+0x60>
 8019f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019f0a:	2900      	cmp	r1, #0
 8019f0c:	d008      	beq.n	8019f20 <__swsetup_r+0x50>
 8019f0e:	0023      	movs	r3, r4
 8019f10:	3344      	adds	r3, #68	@ 0x44
 8019f12:	4299      	cmp	r1, r3
 8019f14:	d002      	beq.n	8019f1c <__swsetup_r+0x4c>
 8019f16:	0028      	movs	r0, r5
 8019f18:	f7fe ff9a 	bl	8018e50 <_free_r>
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019f20:	2224      	movs	r2, #36	@ 0x24
 8019f22:	89a3      	ldrh	r3, [r4, #12]
 8019f24:	4393      	bics	r3, r2
 8019f26:	81a3      	strh	r3, [r4, #12]
 8019f28:	2300      	movs	r3, #0
 8019f2a:	6063      	str	r3, [r4, #4]
 8019f2c:	6923      	ldr	r3, [r4, #16]
 8019f2e:	6023      	str	r3, [r4, #0]
 8019f30:	2308      	movs	r3, #8
 8019f32:	89a2      	ldrh	r2, [r4, #12]
 8019f34:	4313      	orrs	r3, r2
 8019f36:	81a3      	strh	r3, [r4, #12]
 8019f38:	6923      	ldr	r3, [r4, #16]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d10b      	bne.n	8019f56 <__swsetup_r+0x86>
 8019f3e:	21a0      	movs	r1, #160	@ 0xa0
 8019f40:	2280      	movs	r2, #128	@ 0x80
 8019f42:	89a3      	ldrh	r3, [r4, #12]
 8019f44:	0089      	lsls	r1, r1, #2
 8019f46:	0092      	lsls	r2, r2, #2
 8019f48:	400b      	ands	r3, r1
 8019f4a:	4293      	cmp	r3, r2
 8019f4c:	d003      	beq.n	8019f56 <__swsetup_r+0x86>
 8019f4e:	0021      	movs	r1, r4
 8019f50:	0028      	movs	r0, r5
 8019f52:	f000 f915 	bl	801a180 <__smakebuf_r>
 8019f56:	230c      	movs	r3, #12
 8019f58:	5ee2      	ldrsh	r2, [r4, r3]
 8019f5a:	2101      	movs	r1, #1
 8019f5c:	0013      	movs	r3, r2
 8019f5e:	400b      	ands	r3, r1
 8019f60:	420a      	tst	r2, r1
 8019f62:	d00b      	beq.n	8019f7c <__swsetup_r+0xac>
 8019f64:	2300      	movs	r3, #0
 8019f66:	60a3      	str	r3, [r4, #8]
 8019f68:	6963      	ldr	r3, [r4, #20]
 8019f6a:	425b      	negs	r3, r3
 8019f6c:	61a3      	str	r3, [r4, #24]
 8019f6e:	2000      	movs	r0, #0
 8019f70:	6923      	ldr	r3, [r4, #16]
 8019f72:	4283      	cmp	r3, r0
 8019f74:	d101      	bne.n	8019f7a <__swsetup_r+0xaa>
 8019f76:	0613      	lsls	r3, r2, #24
 8019f78:	d4be      	bmi.n	8019ef8 <__swsetup_r+0x28>
 8019f7a:	bd70      	pop	{r4, r5, r6, pc}
 8019f7c:	0791      	lsls	r1, r2, #30
 8019f7e:	d400      	bmi.n	8019f82 <__swsetup_r+0xb2>
 8019f80:	6963      	ldr	r3, [r4, #20]
 8019f82:	60a3      	str	r3, [r4, #8]
 8019f84:	e7f3      	b.n	8019f6e <__swsetup_r+0x9e>
 8019f86:	46c0      	nop			@ (mov r8, r8)
 8019f88:	200001f0 	.word	0x200001f0

08019f8c <memmove>:
 8019f8c:	b510      	push	{r4, lr}
 8019f8e:	4288      	cmp	r0, r1
 8019f90:	d806      	bhi.n	8019fa0 <memmove+0x14>
 8019f92:	2300      	movs	r3, #0
 8019f94:	429a      	cmp	r2, r3
 8019f96:	d008      	beq.n	8019faa <memmove+0x1e>
 8019f98:	5ccc      	ldrb	r4, [r1, r3]
 8019f9a:	54c4      	strb	r4, [r0, r3]
 8019f9c:	3301      	adds	r3, #1
 8019f9e:	e7f9      	b.n	8019f94 <memmove+0x8>
 8019fa0:	188b      	adds	r3, r1, r2
 8019fa2:	4298      	cmp	r0, r3
 8019fa4:	d2f5      	bcs.n	8019f92 <memmove+0x6>
 8019fa6:	3a01      	subs	r2, #1
 8019fa8:	d200      	bcs.n	8019fac <memmove+0x20>
 8019faa:	bd10      	pop	{r4, pc}
 8019fac:	5c8b      	ldrb	r3, [r1, r2]
 8019fae:	5483      	strb	r3, [r0, r2]
 8019fb0:	e7f9      	b.n	8019fa6 <memmove+0x1a>
	...

08019fb4 <_sbrk_r>:
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	b570      	push	{r4, r5, r6, lr}
 8019fb8:	4d06      	ldr	r5, [pc, #24]	@ (8019fd4 <_sbrk_r+0x20>)
 8019fba:	0004      	movs	r4, r0
 8019fbc:	0008      	movs	r0, r1
 8019fbe:	602b      	str	r3, [r5, #0]
 8019fc0:	f7ef f822 	bl	8009008 <_sbrk>
 8019fc4:	1c43      	adds	r3, r0, #1
 8019fc6:	d103      	bne.n	8019fd0 <_sbrk_r+0x1c>
 8019fc8:	682b      	ldr	r3, [r5, #0]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d000      	beq.n	8019fd0 <_sbrk_r+0x1c>
 8019fce:	6023      	str	r3, [r4, #0]
 8019fd0:	bd70      	pop	{r4, r5, r6, pc}
 8019fd2:	46c0      	nop			@ (mov r8, r8)
 8019fd4:	200040fc 	.word	0x200040fc

08019fd8 <__assert_func>:
 8019fd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019fda:	0014      	movs	r4, r2
 8019fdc:	001a      	movs	r2, r3
 8019fde:	4b09      	ldr	r3, [pc, #36]	@ (801a004 <__assert_func+0x2c>)
 8019fe0:	0005      	movs	r5, r0
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	000e      	movs	r6, r1
 8019fe6:	68d8      	ldr	r0, [r3, #12]
 8019fe8:	4b07      	ldr	r3, [pc, #28]	@ (801a008 <__assert_func+0x30>)
 8019fea:	2c00      	cmp	r4, #0
 8019fec:	d101      	bne.n	8019ff2 <__assert_func+0x1a>
 8019fee:	4b07      	ldr	r3, [pc, #28]	@ (801a00c <__assert_func+0x34>)
 8019ff0:	001c      	movs	r4, r3
 8019ff2:	4907      	ldr	r1, [pc, #28]	@ (801a010 <__assert_func+0x38>)
 8019ff4:	9301      	str	r3, [sp, #4]
 8019ff6:	9402      	str	r4, [sp, #8]
 8019ff8:	002b      	movs	r3, r5
 8019ffa:	9600      	str	r6, [sp, #0]
 8019ffc:	f000 f886 	bl	801a10c <fiprintf>
 801a000:	f000 f924 	bl	801a24c <abort>
 801a004:	200001f0 	.word	0x200001f0
 801a008:	0801bee3 	.word	0x0801bee3
 801a00c:	0801bf1e 	.word	0x0801bf1e
 801a010:	0801bef0 	.word	0x0801bef0

0801a014 <_calloc_r>:
 801a014:	b570      	push	{r4, r5, r6, lr}
 801a016:	0c0b      	lsrs	r3, r1, #16
 801a018:	0c15      	lsrs	r5, r2, #16
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d11e      	bne.n	801a05c <_calloc_r+0x48>
 801a01e:	2d00      	cmp	r5, #0
 801a020:	d10c      	bne.n	801a03c <_calloc_r+0x28>
 801a022:	b289      	uxth	r1, r1
 801a024:	b294      	uxth	r4, r2
 801a026:	434c      	muls	r4, r1
 801a028:	0021      	movs	r1, r4
 801a02a:	f7fe ff87 	bl	8018f3c <_malloc_r>
 801a02e:	1e05      	subs	r5, r0, #0
 801a030:	d01a      	beq.n	801a068 <_calloc_r+0x54>
 801a032:	0022      	movs	r2, r4
 801a034:	2100      	movs	r1, #0
 801a036:	f7fd ffb5 	bl	8017fa4 <memset>
 801a03a:	e016      	b.n	801a06a <_calloc_r+0x56>
 801a03c:	1c2b      	adds	r3, r5, #0
 801a03e:	1c0c      	adds	r4, r1, #0
 801a040:	b289      	uxth	r1, r1
 801a042:	b292      	uxth	r2, r2
 801a044:	434a      	muls	r2, r1
 801a046:	b29b      	uxth	r3, r3
 801a048:	b2a1      	uxth	r1, r4
 801a04a:	4359      	muls	r1, r3
 801a04c:	0c14      	lsrs	r4, r2, #16
 801a04e:	190c      	adds	r4, r1, r4
 801a050:	0c23      	lsrs	r3, r4, #16
 801a052:	d107      	bne.n	801a064 <_calloc_r+0x50>
 801a054:	0424      	lsls	r4, r4, #16
 801a056:	b292      	uxth	r2, r2
 801a058:	4314      	orrs	r4, r2
 801a05a:	e7e5      	b.n	801a028 <_calloc_r+0x14>
 801a05c:	2d00      	cmp	r5, #0
 801a05e:	d101      	bne.n	801a064 <_calloc_r+0x50>
 801a060:	1c14      	adds	r4, r2, #0
 801a062:	e7ed      	b.n	801a040 <_calloc_r+0x2c>
 801a064:	230c      	movs	r3, #12
 801a066:	6003      	str	r3, [r0, #0]
 801a068:	2500      	movs	r5, #0
 801a06a:	0028      	movs	r0, r5
 801a06c:	bd70      	pop	{r4, r5, r6, pc}

0801a06e <__ascii_mbtowc>:
 801a06e:	b082      	sub	sp, #8
 801a070:	2900      	cmp	r1, #0
 801a072:	d100      	bne.n	801a076 <__ascii_mbtowc+0x8>
 801a074:	a901      	add	r1, sp, #4
 801a076:	1e10      	subs	r0, r2, #0
 801a078:	d006      	beq.n	801a088 <__ascii_mbtowc+0x1a>
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d006      	beq.n	801a08c <__ascii_mbtowc+0x1e>
 801a07e:	7813      	ldrb	r3, [r2, #0]
 801a080:	600b      	str	r3, [r1, #0]
 801a082:	7810      	ldrb	r0, [r2, #0]
 801a084:	1e43      	subs	r3, r0, #1
 801a086:	4198      	sbcs	r0, r3
 801a088:	b002      	add	sp, #8
 801a08a:	4770      	bx	lr
 801a08c:	2002      	movs	r0, #2
 801a08e:	4240      	negs	r0, r0
 801a090:	e7fa      	b.n	801a088 <__ascii_mbtowc+0x1a>

0801a092 <_realloc_r>:
 801a092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a094:	0006      	movs	r6, r0
 801a096:	000c      	movs	r4, r1
 801a098:	0015      	movs	r5, r2
 801a09a:	2900      	cmp	r1, #0
 801a09c:	d105      	bne.n	801a0aa <_realloc_r+0x18>
 801a09e:	0011      	movs	r1, r2
 801a0a0:	f7fe ff4c 	bl	8018f3c <_malloc_r>
 801a0a4:	0004      	movs	r4, r0
 801a0a6:	0020      	movs	r0, r4
 801a0a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a0aa:	2a00      	cmp	r2, #0
 801a0ac:	d103      	bne.n	801a0b6 <_realloc_r+0x24>
 801a0ae:	f7fe fecf 	bl	8018e50 <_free_r>
 801a0b2:	2400      	movs	r4, #0
 801a0b4:	e7f7      	b.n	801a0a6 <_realloc_r+0x14>
 801a0b6:	f000 f8d0 	bl	801a25a <_malloc_usable_size_r>
 801a0ba:	0007      	movs	r7, r0
 801a0bc:	4285      	cmp	r5, r0
 801a0be:	d802      	bhi.n	801a0c6 <_realloc_r+0x34>
 801a0c0:	0843      	lsrs	r3, r0, #1
 801a0c2:	42ab      	cmp	r3, r5
 801a0c4:	d3ef      	bcc.n	801a0a6 <_realloc_r+0x14>
 801a0c6:	0029      	movs	r1, r5
 801a0c8:	0030      	movs	r0, r6
 801a0ca:	f7fe ff37 	bl	8018f3c <_malloc_r>
 801a0ce:	9001      	str	r0, [sp, #4]
 801a0d0:	2800      	cmp	r0, #0
 801a0d2:	d0ee      	beq.n	801a0b2 <_realloc_r+0x20>
 801a0d4:	002a      	movs	r2, r5
 801a0d6:	42bd      	cmp	r5, r7
 801a0d8:	d900      	bls.n	801a0dc <_realloc_r+0x4a>
 801a0da:	003a      	movs	r2, r7
 801a0dc:	0021      	movs	r1, r4
 801a0de:	9801      	ldr	r0, [sp, #4]
 801a0e0:	f7fe f82a 	bl	8018138 <memcpy>
 801a0e4:	0021      	movs	r1, r4
 801a0e6:	0030      	movs	r0, r6
 801a0e8:	f7fe feb2 	bl	8018e50 <_free_r>
 801a0ec:	9c01      	ldr	r4, [sp, #4]
 801a0ee:	e7da      	b.n	801a0a6 <_realloc_r+0x14>

0801a0f0 <__ascii_wctomb>:
 801a0f0:	0003      	movs	r3, r0
 801a0f2:	1e08      	subs	r0, r1, #0
 801a0f4:	d005      	beq.n	801a102 <__ascii_wctomb+0x12>
 801a0f6:	2aff      	cmp	r2, #255	@ 0xff
 801a0f8:	d904      	bls.n	801a104 <__ascii_wctomb+0x14>
 801a0fa:	228a      	movs	r2, #138	@ 0x8a
 801a0fc:	2001      	movs	r0, #1
 801a0fe:	601a      	str	r2, [r3, #0]
 801a100:	4240      	negs	r0, r0
 801a102:	4770      	bx	lr
 801a104:	2001      	movs	r0, #1
 801a106:	700a      	strb	r2, [r1, #0]
 801a108:	e7fb      	b.n	801a102 <__ascii_wctomb+0x12>
	...

0801a10c <fiprintf>:
 801a10c:	b40e      	push	{r1, r2, r3}
 801a10e:	b517      	push	{r0, r1, r2, r4, lr}
 801a110:	4c05      	ldr	r4, [pc, #20]	@ (801a128 <fiprintf+0x1c>)
 801a112:	ab05      	add	r3, sp, #20
 801a114:	cb04      	ldmia	r3!, {r2}
 801a116:	0001      	movs	r1, r0
 801a118:	6820      	ldr	r0, [r4, #0]
 801a11a:	9301      	str	r3, [sp, #4]
 801a11c:	f7ff fcc8 	bl	8019ab0 <_vfiprintf_r>
 801a120:	bc1e      	pop	{r1, r2, r3, r4}
 801a122:	bc08      	pop	{r3}
 801a124:	b003      	add	sp, #12
 801a126:	4718      	bx	r3
 801a128:	200001f0 	.word	0x200001f0

0801a12c <__swhatbuf_r>:
 801a12c:	b570      	push	{r4, r5, r6, lr}
 801a12e:	000e      	movs	r6, r1
 801a130:	001d      	movs	r5, r3
 801a132:	230e      	movs	r3, #14
 801a134:	5ec9      	ldrsh	r1, [r1, r3]
 801a136:	0014      	movs	r4, r2
 801a138:	b096      	sub	sp, #88	@ 0x58
 801a13a:	2900      	cmp	r1, #0
 801a13c:	da0c      	bge.n	801a158 <__swhatbuf_r+0x2c>
 801a13e:	89b2      	ldrh	r2, [r6, #12]
 801a140:	2380      	movs	r3, #128	@ 0x80
 801a142:	0011      	movs	r1, r2
 801a144:	4019      	ands	r1, r3
 801a146:	421a      	tst	r2, r3
 801a148:	d114      	bne.n	801a174 <__swhatbuf_r+0x48>
 801a14a:	2380      	movs	r3, #128	@ 0x80
 801a14c:	00db      	lsls	r3, r3, #3
 801a14e:	2000      	movs	r0, #0
 801a150:	6029      	str	r1, [r5, #0]
 801a152:	6023      	str	r3, [r4, #0]
 801a154:	b016      	add	sp, #88	@ 0x58
 801a156:	bd70      	pop	{r4, r5, r6, pc}
 801a158:	466a      	mov	r2, sp
 801a15a:	f000 f853 	bl	801a204 <_fstat_r>
 801a15e:	2800      	cmp	r0, #0
 801a160:	dbed      	blt.n	801a13e <__swhatbuf_r+0x12>
 801a162:	23f0      	movs	r3, #240	@ 0xf0
 801a164:	9901      	ldr	r1, [sp, #4]
 801a166:	021b      	lsls	r3, r3, #8
 801a168:	4019      	ands	r1, r3
 801a16a:	4b04      	ldr	r3, [pc, #16]	@ (801a17c <__swhatbuf_r+0x50>)
 801a16c:	18c9      	adds	r1, r1, r3
 801a16e:	424b      	negs	r3, r1
 801a170:	4159      	adcs	r1, r3
 801a172:	e7ea      	b.n	801a14a <__swhatbuf_r+0x1e>
 801a174:	2100      	movs	r1, #0
 801a176:	2340      	movs	r3, #64	@ 0x40
 801a178:	e7e9      	b.n	801a14e <__swhatbuf_r+0x22>
 801a17a:	46c0      	nop			@ (mov r8, r8)
 801a17c:	ffffe000 	.word	0xffffe000

0801a180 <__smakebuf_r>:
 801a180:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a182:	2602      	movs	r6, #2
 801a184:	898b      	ldrh	r3, [r1, #12]
 801a186:	0005      	movs	r5, r0
 801a188:	000c      	movs	r4, r1
 801a18a:	b085      	sub	sp, #20
 801a18c:	4233      	tst	r3, r6
 801a18e:	d007      	beq.n	801a1a0 <__smakebuf_r+0x20>
 801a190:	0023      	movs	r3, r4
 801a192:	3347      	adds	r3, #71	@ 0x47
 801a194:	6023      	str	r3, [r4, #0]
 801a196:	6123      	str	r3, [r4, #16]
 801a198:	2301      	movs	r3, #1
 801a19a:	6163      	str	r3, [r4, #20]
 801a19c:	b005      	add	sp, #20
 801a19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1a0:	ab03      	add	r3, sp, #12
 801a1a2:	aa02      	add	r2, sp, #8
 801a1a4:	f7ff ffc2 	bl	801a12c <__swhatbuf_r>
 801a1a8:	9f02      	ldr	r7, [sp, #8]
 801a1aa:	9001      	str	r0, [sp, #4]
 801a1ac:	0039      	movs	r1, r7
 801a1ae:	0028      	movs	r0, r5
 801a1b0:	f7fe fec4 	bl	8018f3c <_malloc_r>
 801a1b4:	2800      	cmp	r0, #0
 801a1b6:	d108      	bne.n	801a1ca <__smakebuf_r+0x4a>
 801a1b8:	220c      	movs	r2, #12
 801a1ba:	5ea3      	ldrsh	r3, [r4, r2]
 801a1bc:	059a      	lsls	r2, r3, #22
 801a1be:	d4ed      	bmi.n	801a19c <__smakebuf_r+0x1c>
 801a1c0:	2203      	movs	r2, #3
 801a1c2:	4393      	bics	r3, r2
 801a1c4:	431e      	orrs	r6, r3
 801a1c6:	81a6      	strh	r6, [r4, #12]
 801a1c8:	e7e2      	b.n	801a190 <__smakebuf_r+0x10>
 801a1ca:	2380      	movs	r3, #128	@ 0x80
 801a1cc:	89a2      	ldrh	r2, [r4, #12]
 801a1ce:	6020      	str	r0, [r4, #0]
 801a1d0:	4313      	orrs	r3, r2
 801a1d2:	81a3      	strh	r3, [r4, #12]
 801a1d4:	9b03      	ldr	r3, [sp, #12]
 801a1d6:	6120      	str	r0, [r4, #16]
 801a1d8:	6167      	str	r7, [r4, #20]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d00c      	beq.n	801a1f8 <__smakebuf_r+0x78>
 801a1de:	0028      	movs	r0, r5
 801a1e0:	230e      	movs	r3, #14
 801a1e2:	5ee1      	ldrsh	r1, [r4, r3]
 801a1e4:	f000 f820 	bl	801a228 <_isatty_r>
 801a1e8:	2800      	cmp	r0, #0
 801a1ea:	d005      	beq.n	801a1f8 <__smakebuf_r+0x78>
 801a1ec:	2303      	movs	r3, #3
 801a1ee:	89a2      	ldrh	r2, [r4, #12]
 801a1f0:	439a      	bics	r2, r3
 801a1f2:	3b02      	subs	r3, #2
 801a1f4:	4313      	orrs	r3, r2
 801a1f6:	81a3      	strh	r3, [r4, #12]
 801a1f8:	89a3      	ldrh	r3, [r4, #12]
 801a1fa:	9a01      	ldr	r2, [sp, #4]
 801a1fc:	4313      	orrs	r3, r2
 801a1fe:	81a3      	strh	r3, [r4, #12]
 801a200:	e7cc      	b.n	801a19c <__smakebuf_r+0x1c>
	...

0801a204 <_fstat_r>:
 801a204:	2300      	movs	r3, #0
 801a206:	b570      	push	{r4, r5, r6, lr}
 801a208:	4d06      	ldr	r5, [pc, #24]	@ (801a224 <_fstat_r+0x20>)
 801a20a:	0004      	movs	r4, r0
 801a20c:	0008      	movs	r0, r1
 801a20e:	0011      	movs	r1, r2
 801a210:	602b      	str	r3, [r5, #0]
 801a212:	f7ee fed7 	bl	8008fc4 <_fstat>
 801a216:	1c43      	adds	r3, r0, #1
 801a218:	d103      	bne.n	801a222 <_fstat_r+0x1e>
 801a21a:	682b      	ldr	r3, [r5, #0]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d000      	beq.n	801a222 <_fstat_r+0x1e>
 801a220:	6023      	str	r3, [r4, #0]
 801a222:	bd70      	pop	{r4, r5, r6, pc}
 801a224:	200040fc 	.word	0x200040fc

0801a228 <_isatty_r>:
 801a228:	2300      	movs	r3, #0
 801a22a:	b570      	push	{r4, r5, r6, lr}
 801a22c:	4d06      	ldr	r5, [pc, #24]	@ (801a248 <_isatty_r+0x20>)
 801a22e:	0004      	movs	r4, r0
 801a230:	0008      	movs	r0, r1
 801a232:	602b      	str	r3, [r5, #0]
 801a234:	f7ee fed4 	bl	8008fe0 <_isatty>
 801a238:	1c43      	adds	r3, r0, #1
 801a23a:	d103      	bne.n	801a244 <_isatty_r+0x1c>
 801a23c:	682b      	ldr	r3, [r5, #0]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d000      	beq.n	801a244 <_isatty_r+0x1c>
 801a242:	6023      	str	r3, [r4, #0]
 801a244:	bd70      	pop	{r4, r5, r6, pc}
 801a246:	46c0      	nop			@ (mov r8, r8)
 801a248:	200040fc 	.word	0x200040fc

0801a24c <abort>:
 801a24c:	2006      	movs	r0, #6
 801a24e:	b510      	push	{r4, lr}
 801a250:	f000 f834 	bl	801a2bc <raise>
 801a254:	2001      	movs	r0, #1
 801a256:	f7ee fe81 	bl	8008f5c <_exit>

0801a25a <_malloc_usable_size_r>:
 801a25a:	1f0b      	subs	r3, r1, #4
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	1f18      	subs	r0, r3, #4
 801a260:	2b00      	cmp	r3, #0
 801a262:	da01      	bge.n	801a268 <_malloc_usable_size_r+0xe>
 801a264:	580b      	ldr	r3, [r1, r0]
 801a266:	18c0      	adds	r0, r0, r3
 801a268:	4770      	bx	lr

0801a26a <_raise_r>:
 801a26a:	b570      	push	{r4, r5, r6, lr}
 801a26c:	0004      	movs	r4, r0
 801a26e:	000d      	movs	r5, r1
 801a270:	291f      	cmp	r1, #31
 801a272:	d904      	bls.n	801a27e <_raise_r+0x14>
 801a274:	2316      	movs	r3, #22
 801a276:	6003      	str	r3, [r0, #0]
 801a278:	2001      	movs	r0, #1
 801a27a:	4240      	negs	r0, r0
 801a27c:	bd70      	pop	{r4, r5, r6, pc}
 801a27e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a280:	2b00      	cmp	r3, #0
 801a282:	d004      	beq.n	801a28e <_raise_r+0x24>
 801a284:	008a      	lsls	r2, r1, #2
 801a286:	189b      	adds	r3, r3, r2
 801a288:	681a      	ldr	r2, [r3, #0]
 801a28a:	2a00      	cmp	r2, #0
 801a28c:	d108      	bne.n	801a2a0 <_raise_r+0x36>
 801a28e:	0020      	movs	r0, r4
 801a290:	f000 f830 	bl	801a2f4 <_getpid_r>
 801a294:	002a      	movs	r2, r5
 801a296:	0001      	movs	r1, r0
 801a298:	0020      	movs	r0, r4
 801a29a:	f000 f819 	bl	801a2d0 <_kill_r>
 801a29e:	e7ed      	b.n	801a27c <_raise_r+0x12>
 801a2a0:	2a01      	cmp	r2, #1
 801a2a2:	d009      	beq.n	801a2b8 <_raise_r+0x4e>
 801a2a4:	1c51      	adds	r1, r2, #1
 801a2a6:	d103      	bne.n	801a2b0 <_raise_r+0x46>
 801a2a8:	2316      	movs	r3, #22
 801a2aa:	6003      	str	r3, [r0, #0]
 801a2ac:	2001      	movs	r0, #1
 801a2ae:	e7e5      	b.n	801a27c <_raise_r+0x12>
 801a2b0:	2100      	movs	r1, #0
 801a2b2:	0028      	movs	r0, r5
 801a2b4:	6019      	str	r1, [r3, #0]
 801a2b6:	4790      	blx	r2
 801a2b8:	2000      	movs	r0, #0
 801a2ba:	e7df      	b.n	801a27c <_raise_r+0x12>

0801a2bc <raise>:
 801a2bc:	b510      	push	{r4, lr}
 801a2be:	4b03      	ldr	r3, [pc, #12]	@ (801a2cc <raise+0x10>)
 801a2c0:	0001      	movs	r1, r0
 801a2c2:	6818      	ldr	r0, [r3, #0]
 801a2c4:	f7ff ffd1 	bl	801a26a <_raise_r>
 801a2c8:	bd10      	pop	{r4, pc}
 801a2ca:	46c0      	nop			@ (mov r8, r8)
 801a2cc:	200001f0 	.word	0x200001f0

0801a2d0 <_kill_r>:
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	b570      	push	{r4, r5, r6, lr}
 801a2d4:	4d06      	ldr	r5, [pc, #24]	@ (801a2f0 <_kill_r+0x20>)
 801a2d6:	0004      	movs	r4, r0
 801a2d8:	0008      	movs	r0, r1
 801a2da:	0011      	movs	r1, r2
 801a2dc:	602b      	str	r3, [r5, #0]
 801a2de:	f7ee fe2d 	bl	8008f3c <_kill>
 801a2e2:	1c43      	adds	r3, r0, #1
 801a2e4:	d103      	bne.n	801a2ee <_kill_r+0x1e>
 801a2e6:	682b      	ldr	r3, [r5, #0]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d000      	beq.n	801a2ee <_kill_r+0x1e>
 801a2ec:	6023      	str	r3, [r4, #0]
 801a2ee:	bd70      	pop	{r4, r5, r6, pc}
 801a2f0:	200040fc 	.word	0x200040fc

0801a2f4 <_getpid_r>:
 801a2f4:	b510      	push	{r4, lr}
 801a2f6:	f7ee fe1b 	bl	8008f30 <_getpid>
 801a2fa:	bd10      	pop	{r4, pc}

0801a2fc <log10>:
 801a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2fe:	0004      	movs	r4, r0
 801a300:	000d      	movs	r5, r1
 801a302:	f000 fa0b 	bl	801a71c <__ieee754_log10>
 801a306:	0022      	movs	r2, r4
 801a308:	0006      	movs	r6, r0
 801a30a:	000f      	movs	r7, r1
 801a30c:	002b      	movs	r3, r5
 801a30e:	0020      	movs	r0, r4
 801a310:	0029      	movs	r1, r5
 801a312:	f7e8 ff75 	bl	8003200 <__aeabi_dcmpun>
 801a316:	2800      	cmp	r0, #0
 801a318:	d115      	bne.n	801a346 <log10+0x4a>
 801a31a:	2200      	movs	r2, #0
 801a31c:	2300      	movs	r3, #0
 801a31e:	0020      	movs	r0, r4
 801a320:	0029      	movs	r1, r5
 801a322:	f7e6 f8a3 	bl	800046c <__aeabi_dcmple>
 801a326:	2800      	cmp	r0, #0
 801a328:	d00d      	beq.n	801a346 <log10+0x4a>
 801a32a:	2200      	movs	r2, #0
 801a32c:	2300      	movs	r3, #0
 801a32e:	0020      	movs	r0, r4
 801a330:	0029      	movs	r1, r5
 801a332:	f7e6 f88b 	bl	800044c <__aeabi_dcmpeq>
 801a336:	2800      	cmp	r0, #0
 801a338:	d008      	beq.n	801a34c <log10+0x50>
 801a33a:	f7fd fec5 	bl	80180c8 <__errno>
 801a33e:	2322      	movs	r3, #34	@ 0x22
 801a340:	2600      	movs	r6, #0
 801a342:	4f07      	ldr	r7, [pc, #28]	@ (801a360 <log10+0x64>)
 801a344:	6003      	str	r3, [r0, #0]
 801a346:	0030      	movs	r0, r6
 801a348:	0039      	movs	r1, r7
 801a34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a34c:	f7fd febc 	bl	80180c8 <__errno>
 801a350:	2321      	movs	r3, #33	@ 0x21
 801a352:	6003      	str	r3, [r0, #0]
 801a354:	4803      	ldr	r0, [pc, #12]	@ (801a364 <log10+0x68>)
 801a356:	f000 f871 	bl	801a43c <nan>
 801a35a:	0006      	movs	r6, r0
 801a35c:	000f      	movs	r7, r1
 801a35e:	e7f2      	b.n	801a346 <log10+0x4a>
 801a360:	fff00000 	.word	0xfff00000
 801a364:	0801bf1e 	.word	0x0801bf1e

0801a368 <sqrt>:
 801a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a36a:	0004      	movs	r4, r0
 801a36c:	000d      	movs	r5, r1
 801a36e:	f000 f875 	bl	801a45c <__ieee754_sqrt>
 801a372:	0022      	movs	r2, r4
 801a374:	0006      	movs	r6, r0
 801a376:	000f      	movs	r7, r1
 801a378:	002b      	movs	r3, r5
 801a37a:	0020      	movs	r0, r4
 801a37c:	0029      	movs	r1, r5
 801a37e:	f7e8 ff3f 	bl	8003200 <__aeabi_dcmpun>
 801a382:	2800      	cmp	r0, #0
 801a384:	d113      	bne.n	801a3ae <sqrt+0x46>
 801a386:	2200      	movs	r2, #0
 801a388:	2300      	movs	r3, #0
 801a38a:	0020      	movs	r0, r4
 801a38c:	0029      	movs	r1, r5
 801a38e:	f7e6 f863 	bl	8000458 <__aeabi_dcmplt>
 801a392:	2800      	cmp	r0, #0
 801a394:	d00b      	beq.n	801a3ae <sqrt+0x46>
 801a396:	f7fd fe97 	bl	80180c8 <__errno>
 801a39a:	2321      	movs	r3, #33	@ 0x21
 801a39c:	2200      	movs	r2, #0
 801a39e:	6003      	str	r3, [r0, #0]
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	0010      	movs	r0, r2
 801a3a4:	0019      	movs	r1, r3
 801a3a6:	f7e7 fc83 	bl	8001cb0 <__aeabi_ddiv>
 801a3aa:	0006      	movs	r6, r0
 801a3ac:	000f      	movs	r7, r1
 801a3ae:	0030      	movs	r0, r6
 801a3b0:	0039      	movs	r1, r7
 801a3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a3b4 <expf>:
 801a3b4:	b570      	push	{r4, r5, r6, lr}
 801a3b6:	1c04      	adds	r4, r0, #0
 801a3b8:	f000 fa2a 	bl	801a810 <__ieee754_expf>
 801a3bc:	1c05      	adds	r5, r0, #0
 801a3be:	1c20      	adds	r0, r4, #0
 801a3c0:	f000 f842 	bl	801a448 <finitef>
 801a3c4:	2800      	cmp	r0, #0
 801a3c6:	d00b      	beq.n	801a3e0 <expf+0x2c>
 801a3c8:	490c      	ldr	r1, [pc, #48]	@ (801a3fc <expf+0x48>)
 801a3ca:	1c20      	adds	r0, r4, #0
 801a3cc:	f7e6 f892 	bl	80004f4 <__aeabi_fcmpgt>
 801a3d0:	2800      	cmp	r0, #0
 801a3d2:	d007      	beq.n	801a3e4 <expf+0x30>
 801a3d4:	f7fd fe78 	bl	80180c8 <__errno>
 801a3d8:	25ff      	movs	r5, #255	@ 0xff
 801a3da:	2322      	movs	r3, #34	@ 0x22
 801a3dc:	05ed      	lsls	r5, r5, #23
 801a3de:	6003      	str	r3, [r0, #0]
 801a3e0:	1c28      	adds	r0, r5, #0
 801a3e2:	bd70      	pop	{r4, r5, r6, pc}
 801a3e4:	4906      	ldr	r1, [pc, #24]	@ (801a400 <expf+0x4c>)
 801a3e6:	1c20      	adds	r0, r4, #0
 801a3e8:	f7e6 f870 	bl	80004cc <__aeabi_fcmplt>
 801a3ec:	2800      	cmp	r0, #0
 801a3ee:	d0f7      	beq.n	801a3e0 <expf+0x2c>
 801a3f0:	f7fd fe6a 	bl	80180c8 <__errno>
 801a3f4:	2322      	movs	r3, #34	@ 0x22
 801a3f6:	2500      	movs	r5, #0
 801a3f8:	6003      	str	r3, [r0, #0]
 801a3fa:	e7f1      	b.n	801a3e0 <expf+0x2c>
 801a3fc:	42b17217 	.word	0x42b17217
 801a400:	c2cff1b5 	.word	0xc2cff1b5

0801a404 <sqrtf>:
 801a404:	b570      	push	{r4, r5, r6, lr}
 801a406:	1c05      	adds	r5, r0, #0
 801a408:	f000 f910 	bl	801a62c <__ieee754_sqrtf>
 801a40c:	1c29      	adds	r1, r5, #0
 801a40e:	1c04      	adds	r4, r0, #0
 801a410:	1c28      	adds	r0, r5, #0
 801a412:	f7e7 f825 	bl	8001460 <__aeabi_fcmpun>
 801a416:	2800      	cmp	r0, #0
 801a418:	d10e      	bne.n	801a438 <sqrtf+0x34>
 801a41a:	2100      	movs	r1, #0
 801a41c:	1c28      	adds	r0, r5, #0
 801a41e:	f7e6 f855 	bl	80004cc <__aeabi_fcmplt>
 801a422:	2800      	cmp	r0, #0
 801a424:	d008      	beq.n	801a438 <sqrtf+0x34>
 801a426:	f7fd fe4f 	bl	80180c8 <__errno>
 801a42a:	2321      	movs	r3, #33	@ 0x21
 801a42c:	2100      	movs	r1, #0
 801a42e:	6003      	str	r3, [r0, #0]
 801a430:	1c08      	adds	r0, r1, #0
 801a432:	f7e6 fb4d 	bl	8000ad0 <__aeabi_fdiv>
 801a436:	1c04      	adds	r4, r0, #0
 801a438:	1c20      	adds	r0, r4, #0
 801a43a:	bd70      	pop	{r4, r5, r6, pc}

0801a43c <nan>:
 801a43c:	2000      	movs	r0, #0
 801a43e:	4901      	ldr	r1, [pc, #4]	@ (801a444 <nan+0x8>)
 801a440:	4770      	bx	lr
 801a442:	46c0      	nop			@ (mov r8, r8)
 801a444:	7ff80000 	.word	0x7ff80000

0801a448 <finitef>:
 801a448:	22ff      	movs	r2, #255	@ 0xff
 801a44a:	0043      	lsls	r3, r0, #1
 801a44c:	085b      	lsrs	r3, r3, #1
 801a44e:	2001      	movs	r0, #1
 801a450:	05d2      	lsls	r2, r2, #23
 801a452:	4293      	cmp	r3, r2
 801a454:	db00      	blt.n	801a458 <finitef+0x10>
 801a456:	2000      	movs	r0, #0
 801a458:	4770      	bx	lr
	...

0801a45c <__ieee754_sqrt>:
 801a45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a45e:	000a      	movs	r2, r1
 801a460:	000d      	movs	r5, r1
 801a462:	496d      	ldr	r1, [pc, #436]	@ (801a618 <__ieee754_sqrt+0x1bc>)
 801a464:	0004      	movs	r4, r0
 801a466:	0003      	movs	r3, r0
 801a468:	0008      	movs	r0, r1
 801a46a:	b087      	sub	sp, #28
 801a46c:	4028      	ands	r0, r5
 801a46e:	4288      	cmp	r0, r1
 801a470:	d111      	bne.n	801a496 <__ieee754_sqrt+0x3a>
 801a472:	0022      	movs	r2, r4
 801a474:	002b      	movs	r3, r5
 801a476:	0020      	movs	r0, r4
 801a478:	0029      	movs	r1, r5
 801a47a:	f7e8 f85d 	bl	8002538 <__aeabi_dmul>
 801a47e:	0002      	movs	r2, r0
 801a480:	000b      	movs	r3, r1
 801a482:	0020      	movs	r0, r4
 801a484:	0029      	movs	r1, r5
 801a486:	f7e7 f8af 	bl	80015e8 <__aeabi_dadd>
 801a48a:	0004      	movs	r4, r0
 801a48c:	000d      	movs	r5, r1
 801a48e:	0020      	movs	r0, r4
 801a490:	0029      	movs	r1, r5
 801a492:	b007      	add	sp, #28
 801a494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a496:	2d00      	cmp	r5, #0
 801a498:	dc11      	bgt.n	801a4be <__ieee754_sqrt+0x62>
 801a49a:	0069      	lsls	r1, r5, #1
 801a49c:	0849      	lsrs	r1, r1, #1
 801a49e:	4321      	orrs	r1, r4
 801a4a0:	d0f5      	beq.n	801a48e <__ieee754_sqrt+0x32>
 801a4a2:	2000      	movs	r0, #0
 801a4a4:	4285      	cmp	r5, r0
 801a4a6:	d010      	beq.n	801a4ca <__ieee754_sqrt+0x6e>
 801a4a8:	0022      	movs	r2, r4
 801a4aa:	002b      	movs	r3, r5
 801a4ac:	0020      	movs	r0, r4
 801a4ae:	0029      	movs	r1, r5
 801a4b0:	f7e8 fb0a 	bl	8002ac8 <__aeabi_dsub>
 801a4b4:	0002      	movs	r2, r0
 801a4b6:	000b      	movs	r3, r1
 801a4b8:	f7e7 fbfa 	bl	8001cb0 <__aeabi_ddiv>
 801a4bc:	e7e5      	b.n	801a48a <__ieee754_sqrt+0x2e>
 801a4be:	1528      	asrs	r0, r5, #20
 801a4c0:	d115      	bne.n	801a4ee <__ieee754_sqrt+0x92>
 801a4c2:	2480      	movs	r4, #128	@ 0x80
 801a4c4:	2100      	movs	r1, #0
 801a4c6:	0364      	lsls	r4, r4, #13
 801a4c8:	e007      	b.n	801a4da <__ieee754_sqrt+0x7e>
 801a4ca:	0ada      	lsrs	r2, r3, #11
 801a4cc:	3815      	subs	r0, #21
 801a4ce:	055b      	lsls	r3, r3, #21
 801a4d0:	2a00      	cmp	r2, #0
 801a4d2:	d0fa      	beq.n	801a4ca <__ieee754_sqrt+0x6e>
 801a4d4:	e7f5      	b.n	801a4c2 <__ieee754_sqrt+0x66>
 801a4d6:	0052      	lsls	r2, r2, #1
 801a4d8:	3101      	adds	r1, #1
 801a4da:	4222      	tst	r2, r4
 801a4dc:	d0fb      	beq.n	801a4d6 <__ieee754_sqrt+0x7a>
 801a4de:	1e4c      	subs	r4, r1, #1
 801a4e0:	1b00      	subs	r0, r0, r4
 801a4e2:	2420      	movs	r4, #32
 801a4e4:	001d      	movs	r5, r3
 801a4e6:	1a64      	subs	r4, r4, r1
 801a4e8:	40e5      	lsrs	r5, r4
 801a4ea:	408b      	lsls	r3, r1
 801a4ec:	432a      	orrs	r2, r5
 801a4ee:	494b      	ldr	r1, [pc, #300]	@ (801a61c <__ieee754_sqrt+0x1c0>)
 801a4f0:	0312      	lsls	r2, r2, #12
 801a4f2:	1844      	adds	r4, r0, r1
 801a4f4:	2180      	movs	r1, #128	@ 0x80
 801a4f6:	0b12      	lsrs	r2, r2, #12
 801a4f8:	0349      	lsls	r1, r1, #13
 801a4fa:	4311      	orrs	r1, r2
 801a4fc:	07c0      	lsls	r0, r0, #31
 801a4fe:	d403      	bmi.n	801a508 <__ieee754_sqrt+0xac>
 801a500:	0fda      	lsrs	r2, r3, #31
 801a502:	0049      	lsls	r1, r1, #1
 801a504:	1851      	adds	r1, r2, r1
 801a506:	005b      	lsls	r3, r3, #1
 801a508:	2500      	movs	r5, #0
 801a50a:	1062      	asrs	r2, r4, #1
 801a50c:	0049      	lsls	r1, r1, #1
 801a50e:	2480      	movs	r4, #128	@ 0x80
 801a510:	9205      	str	r2, [sp, #20]
 801a512:	0fda      	lsrs	r2, r3, #31
 801a514:	1852      	adds	r2, r2, r1
 801a516:	2016      	movs	r0, #22
 801a518:	0029      	movs	r1, r5
 801a51a:	005b      	lsls	r3, r3, #1
 801a51c:	03a4      	lsls	r4, r4, #14
 801a51e:	190e      	adds	r6, r1, r4
 801a520:	4296      	cmp	r6, r2
 801a522:	dc02      	bgt.n	801a52a <__ieee754_sqrt+0xce>
 801a524:	1931      	adds	r1, r6, r4
 801a526:	1b92      	subs	r2, r2, r6
 801a528:	192d      	adds	r5, r5, r4
 801a52a:	0fde      	lsrs	r6, r3, #31
 801a52c:	0052      	lsls	r2, r2, #1
 801a52e:	3801      	subs	r0, #1
 801a530:	1992      	adds	r2, r2, r6
 801a532:	005b      	lsls	r3, r3, #1
 801a534:	0864      	lsrs	r4, r4, #1
 801a536:	2800      	cmp	r0, #0
 801a538:	d1f1      	bne.n	801a51e <__ieee754_sqrt+0xc2>
 801a53a:	2620      	movs	r6, #32
 801a53c:	2780      	movs	r7, #128	@ 0x80
 801a53e:	0004      	movs	r4, r0
 801a540:	9604      	str	r6, [sp, #16]
 801a542:	063f      	lsls	r7, r7, #24
 801a544:	19c6      	adds	r6, r0, r7
 801a546:	46b4      	mov	ip, r6
 801a548:	4291      	cmp	r1, r2
 801a54a:	db02      	blt.n	801a552 <__ieee754_sqrt+0xf6>
 801a54c:	d114      	bne.n	801a578 <__ieee754_sqrt+0x11c>
 801a54e:	429e      	cmp	r6, r3
 801a550:	d812      	bhi.n	801a578 <__ieee754_sqrt+0x11c>
 801a552:	4660      	mov	r0, ip
 801a554:	4666      	mov	r6, ip
 801a556:	19c0      	adds	r0, r0, r7
 801a558:	9100      	str	r1, [sp, #0]
 801a55a:	2e00      	cmp	r6, #0
 801a55c:	da03      	bge.n	801a566 <__ieee754_sqrt+0x10a>
 801a55e:	43c6      	mvns	r6, r0
 801a560:	0ff6      	lsrs	r6, r6, #31
 801a562:	198e      	adds	r6, r1, r6
 801a564:	9600      	str	r6, [sp, #0]
 801a566:	1a52      	subs	r2, r2, r1
 801a568:	4563      	cmp	r3, ip
 801a56a:	4189      	sbcs	r1, r1
 801a56c:	4249      	negs	r1, r1
 801a56e:	1a52      	subs	r2, r2, r1
 801a570:	4661      	mov	r1, ip
 801a572:	1a5b      	subs	r3, r3, r1
 801a574:	9900      	ldr	r1, [sp, #0]
 801a576:	19e4      	adds	r4, r4, r7
 801a578:	0fde      	lsrs	r6, r3, #31
 801a57a:	0052      	lsls	r2, r2, #1
 801a57c:	1992      	adds	r2, r2, r6
 801a57e:	9e04      	ldr	r6, [sp, #16]
 801a580:	005b      	lsls	r3, r3, #1
 801a582:	3e01      	subs	r6, #1
 801a584:	087f      	lsrs	r7, r7, #1
 801a586:	9604      	str	r6, [sp, #16]
 801a588:	2e00      	cmp	r6, #0
 801a58a:	d1db      	bne.n	801a544 <__ieee754_sqrt+0xe8>
 801a58c:	431a      	orrs	r2, r3
 801a58e:	d01f      	beq.n	801a5d0 <__ieee754_sqrt+0x174>
 801a590:	4e23      	ldr	r6, [pc, #140]	@ (801a620 <__ieee754_sqrt+0x1c4>)
 801a592:	4f24      	ldr	r7, [pc, #144]	@ (801a624 <__ieee754_sqrt+0x1c8>)
 801a594:	6830      	ldr	r0, [r6, #0]
 801a596:	6871      	ldr	r1, [r6, #4]
 801a598:	683a      	ldr	r2, [r7, #0]
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	9200      	str	r2, [sp, #0]
 801a59e:	9301      	str	r3, [sp, #4]
 801a5a0:	6832      	ldr	r2, [r6, #0]
 801a5a2:	6873      	ldr	r3, [r6, #4]
 801a5a4:	9202      	str	r2, [sp, #8]
 801a5a6:	9303      	str	r3, [sp, #12]
 801a5a8:	9a00      	ldr	r2, [sp, #0]
 801a5aa:	9b01      	ldr	r3, [sp, #4]
 801a5ac:	f7e8 fa8c 	bl	8002ac8 <__aeabi_dsub>
 801a5b0:	0002      	movs	r2, r0
 801a5b2:	000b      	movs	r3, r1
 801a5b4:	9802      	ldr	r0, [sp, #8]
 801a5b6:	9903      	ldr	r1, [sp, #12]
 801a5b8:	f7e5 ff58 	bl	800046c <__aeabi_dcmple>
 801a5bc:	2800      	cmp	r0, #0
 801a5be:	d007      	beq.n	801a5d0 <__ieee754_sqrt+0x174>
 801a5c0:	6830      	ldr	r0, [r6, #0]
 801a5c2:	6871      	ldr	r1, [r6, #4]
 801a5c4:	683a      	ldr	r2, [r7, #0]
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	1c67      	adds	r7, r4, #1
 801a5ca:	d10f      	bne.n	801a5ec <__ieee754_sqrt+0x190>
 801a5cc:	9c04      	ldr	r4, [sp, #16]
 801a5ce:	3501      	adds	r5, #1
 801a5d0:	4b15      	ldr	r3, [pc, #84]	@ (801a628 <__ieee754_sqrt+0x1cc>)
 801a5d2:	106a      	asrs	r2, r5, #1
 801a5d4:	18d2      	adds	r2, r2, r3
 801a5d6:	0863      	lsrs	r3, r4, #1
 801a5d8:	07ed      	lsls	r5, r5, #31
 801a5da:	d502      	bpl.n	801a5e2 <__ieee754_sqrt+0x186>
 801a5dc:	2180      	movs	r1, #128	@ 0x80
 801a5de:	0609      	lsls	r1, r1, #24
 801a5e0:	430b      	orrs	r3, r1
 801a5e2:	9905      	ldr	r1, [sp, #20]
 801a5e4:	001c      	movs	r4, r3
 801a5e6:	0509      	lsls	r1, r1, #20
 801a5e8:	188d      	adds	r5, r1, r2
 801a5ea:	e750      	b.n	801a48e <__ieee754_sqrt+0x32>
 801a5ec:	f7e6 fffc 	bl	80015e8 <__aeabi_dadd>
 801a5f0:	6877      	ldr	r7, [r6, #4]
 801a5f2:	6836      	ldr	r6, [r6, #0]
 801a5f4:	0002      	movs	r2, r0
 801a5f6:	000b      	movs	r3, r1
 801a5f8:	0030      	movs	r0, r6
 801a5fa:	0039      	movs	r1, r7
 801a5fc:	f7e5 ff2c 	bl	8000458 <__aeabi_dcmplt>
 801a600:	2800      	cmp	r0, #0
 801a602:	d004      	beq.n	801a60e <__ieee754_sqrt+0x1b2>
 801a604:	3402      	adds	r4, #2
 801a606:	4263      	negs	r3, r4
 801a608:	4163      	adcs	r3, r4
 801a60a:	18ed      	adds	r5, r5, r3
 801a60c:	e7e0      	b.n	801a5d0 <__ieee754_sqrt+0x174>
 801a60e:	2301      	movs	r3, #1
 801a610:	3401      	adds	r4, #1
 801a612:	439c      	bics	r4, r3
 801a614:	e7dc      	b.n	801a5d0 <__ieee754_sqrt+0x174>
 801a616:	46c0      	nop			@ (mov r8, r8)
 801a618:	7ff00000 	.word	0x7ff00000
 801a61c:	fffffc01 	.word	0xfffffc01
 801a620:	200003b8 	.word	0x200003b8
 801a624:	200003b0 	.word	0x200003b0
 801a628:	3fe00000 	.word	0x3fe00000

0801a62c <__ieee754_sqrtf>:
 801a62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a62e:	0003      	movs	r3, r0
 801a630:	0042      	lsls	r2, r0, #1
 801a632:	1c04      	adds	r4, r0, #0
 801a634:	20ff      	movs	r0, #255	@ 0xff
 801a636:	0852      	lsrs	r2, r2, #1
 801a638:	05c0      	lsls	r0, r0, #23
 801a63a:	4282      	cmp	r2, r0
 801a63c:	d30a      	bcc.n	801a654 <__ieee754_sqrtf+0x28>
 801a63e:	1c21      	adds	r1, r4, #0
 801a640:	1c20      	adds	r0, r4, #0
 801a642:	f7e6 fc2b 	bl	8000e9c <__aeabi_fmul>
 801a646:	1c01      	adds	r1, r0, #0
 801a648:	1c20      	adds	r0, r4, #0
 801a64a:	f7e6 f8b7 	bl	80007bc <__aeabi_fadd>
 801a64e:	1c04      	adds	r4, r0, #0
 801a650:	1c20      	adds	r0, r4, #0
 801a652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a654:	2a00      	cmp	r2, #0
 801a656:	d0fb      	beq.n	801a650 <__ieee754_sqrtf+0x24>
 801a658:	2c00      	cmp	r4, #0
 801a65a:	da07      	bge.n	801a66c <__ieee754_sqrtf+0x40>
 801a65c:	1c21      	adds	r1, r4, #0
 801a65e:	1c20      	adds	r0, r4, #0
 801a660:	f7e6 fd5a 	bl	8001118 <__aeabi_fsub>
 801a664:	1c01      	adds	r1, r0, #0
 801a666:	f7e6 fa33 	bl	8000ad0 <__aeabi_fdiv>
 801a66a:	e7f0      	b.n	801a64e <__ieee754_sqrtf+0x22>
 801a66c:	0022      	movs	r2, r4
 801a66e:	15e1      	asrs	r1, r4, #23
 801a670:	4002      	ands	r2, r0
 801a672:	4204      	tst	r4, r0
 801a674:	d046      	beq.n	801a704 <__ieee754_sqrtf+0xd8>
 801a676:	2280      	movs	r2, #128	@ 0x80
 801a678:	000f      	movs	r7, r1
 801a67a:	025b      	lsls	r3, r3, #9
 801a67c:	0a5b      	lsrs	r3, r3, #9
 801a67e:	0412      	lsls	r2, r2, #16
 801a680:	3f7f      	subs	r7, #127	@ 0x7f
 801a682:	4313      	orrs	r3, r2
 801a684:	07c9      	lsls	r1, r1, #31
 801a686:	d400      	bmi.n	801a68a <__ieee754_sqrtf+0x5e>
 801a688:	005b      	lsls	r3, r3, #1
 801a68a:	2400      	movs	r4, #0
 801a68c:	2180      	movs	r1, #128	@ 0x80
 801a68e:	2019      	movs	r0, #25
 801a690:	0026      	movs	r6, r4
 801a692:	107f      	asrs	r7, r7, #1
 801a694:	005b      	lsls	r3, r3, #1
 801a696:	0449      	lsls	r1, r1, #17
 801a698:	1875      	adds	r5, r6, r1
 801a69a:	001a      	movs	r2, r3
 801a69c:	429d      	cmp	r5, r3
 801a69e:	dc02      	bgt.n	801a6a6 <__ieee754_sqrtf+0x7a>
 801a6a0:	186e      	adds	r6, r5, r1
 801a6a2:	1b5a      	subs	r2, r3, r5
 801a6a4:	1864      	adds	r4, r4, r1
 801a6a6:	3801      	subs	r0, #1
 801a6a8:	0053      	lsls	r3, r2, #1
 801a6aa:	0849      	lsrs	r1, r1, #1
 801a6ac:	2800      	cmp	r0, #0
 801a6ae:	d1f3      	bne.n	801a698 <__ieee754_sqrtf+0x6c>
 801a6b0:	2a00      	cmp	r2, #0
 801a6b2:	d019      	beq.n	801a6e8 <__ieee754_sqrtf+0xbc>
 801a6b4:	4d17      	ldr	r5, [pc, #92]	@ (801a714 <__ieee754_sqrtf+0xe8>)
 801a6b6:	4e18      	ldr	r6, [pc, #96]	@ (801a718 <__ieee754_sqrtf+0xec>)
 801a6b8:	6828      	ldr	r0, [r5, #0]
 801a6ba:	6831      	ldr	r1, [r6, #0]
 801a6bc:	682b      	ldr	r3, [r5, #0]
 801a6be:	9301      	str	r3, [sp, #4]
 801a6c0:	f7e6 fd2a 	bl	8001118 <__aeabi_fsub>
 801a6c4:	1c01      	adds	r1, r0, #0
 801a6c6:	9801      	ldr	r0, [sp, #4]
 801a6c8:	f7e5 ff0a 	bl	80004e0 <__aeabi_fcmple>
 801a6cc:	2800      	cmp	r0, #0
 801a6ce:	d00b      	beq.n	801a6e8 <__ieee754_sqrtf+0xbc>
 801a6d0:	6828      	ldr	r0, [r5, #0]
 801a6d2:	6831      	ldr	r1, [r6, #0]
 801a6d4:	f7e6 f872 	bl	80007bc <__aeabi_fadd>
 801a6d8:	682d      	ldr	r5, [r5, #0]
 801a6da:	1c01      	adds	r1, r0, #0
 801a6dc:	1c28      	adds	r0, r5, #0
 801a6de:	f7e5 fef5 	bl	80004cc <__aeabi_fcmplt>
 801a6e2:	2800      	cmp	r0, #0
 801a6e4:	d011      	beq.n	801a70a <__ieee754_sqrtf+0xde>
 801a6e6:	3402      	adds	r4, #2
 801a6e8:	23fc      	movs	r3, #252	@ 0xfc
 801a6ea:	1064      	asrs	r4, r4, #1
 801a6ec:	059b      	lsls	r3, r3, #22
 801a6ee:	18e3      	adds	r3, r4, r3
 801a6f0:	05fc      	lsls	r4, r7, #23
 801a6f2:	18e4      	adds	r4, r4, r3
 801a6f4:	e7ac      	b.n	801a650 <__ieee754_sqrtf+0x24>
 801a6f6:	005b      	lsls	r3, r3, #1
 801a6f8:	3201      	adds	r2, #1
 801a6fa:	4203      	tst	r3, r0
 801a6fc:	d0fb      	beq.n	801a6f6 <__ieee754_sqrtf+0xca>
 801a6fe:	3a01      	subs	r2, #1
 801a700:	1a89      	subs	r1, r1, r2
 801a702:	e7b8      	b.n	801a676 <__ieee754_sqrtf+0x4a>
 801a704:	2080      	movs	r0, #128	@ 0x80
 801a706:	0400      	lsls	r0, r0, #16
 801a708:	e7f7      	b.n	801a6fa <__ieee754_sqrtf+0xce>
 801a70a:	2301      	movs	r3, #1
 801a70c:	3401      	adds	r4, #1
 801a70e:	439c      	bics	r4, r3
 801a710:	e7ea      	b.n	801a6e8 <__ieee754_sqrtf+0xbc>
 801a712:	46c0      	nop			@ (mov r8, r8)
 801a714:	200003c4 	.word	0x200003c4
 801a718:	200003c0 	.word	0x200003c0

0801a71c <__ieee754_log10>:
 801a71c:	2280      	movs	r2, #128	@ 0x80
 801a71e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a720:	000b      	movs	r3, r1
 801a722:	0004      	movs	r4, r0
 801a724:	000d      	movs	r5, r1
 801a726:	b085      	sub	sp, #20
 801a728:	0352      	lsls	r2, r2, #13
 801a72a:	4291      	cmp	r1, r2
 801a72c:	da26      	bge.n	801a77c <__ieee754_log10+0x60>
 801a72e:	004a      	lsls	r2, r1, #1
 801a730:	0852      	lsrs	r2, r2, #1
 801a732:	4302      	orrs	r2, r0
 801a734:	d107      	bne.n	801a746 <__ieee754_log10+0x2a>
 801a736:	2200      	movs	r2, #0
 801a738:	2300      	movs	r3, #0
 801a73a:	2000      	movs	r0, #0
 801a73c:	4929      	ldr	r1, [pc, #164]	@ (801a7e4 <__ieee754_log10+0xc8>)
 801a73e:	f7e7 fab7 	bl	8001cb0 <__aeabi_ddiv>
 801a742:	b005      	add	sp, #20
 801a744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a746:	2900      	cmp	r1, #0
 801a748:	da05      	bge.n	801a756 <__ieee754_log10+0x3a>
 801a74a:	0002      	movs	r2, r0
 801a74c:	f7e8 f9bc 	bl	8002ac8 <__aeabi_dsub>
 801a750:	2200      	movs	r2, #0
 801a752:	2300      	movs	r3, #0
 801a754:	e7f3      	b.n	801a73e <__ieee754_log10+0x22>
 801a756:	2200      	movs	r2, #0
 801a758:	4b23      	ldr	r3, [pc, #140]	@ (801a7e8 <__ieee754_log10+0xcc>)
 801a75a:	f7e7 feed 	bl	8002538 <__aeabi_dmul>
 801a75e:	2236      	movs	r2, #54	@ 0x36
 801a760:	0004      	movs	r4, r0
 801a762:	000d      	movs	r5, r1
 801a764:	000b      	movs	r3, r1
 801a766:	4252      	negs	r2, r2
 801a768:	4920      	ldr	r1, [pc, #128]	@ (801a7ec <__ieee754_log10+0xd0>)
 801a76a:	428b      	cmp	r3, r1
 801a76c:	dd08      	ble.n	801a780 <__ieee754_log10+0x64>
 801a76e:	0022      	movs	r2, r4
 801a770:	002b      	movs	r3, r5
 801a772:	0020      	movs	r0, r4
 801a774:	0029      	movs	r1, r5
 801a776:	f7e6 ff37 	bl	80015e8 <__aeabi_dadd>
 801a77a:	e7e2      	b.n	801a742 <__ieee754_log10+0x26>
 801a77c:	2200      	movs	r2, #0
 801a77e:	e7f3      	b.n	801a768 <__ieee754_log10+0x4c>
 801a780:	491b      	ldr	r1, [pc, #108]	@ (801a7f0 <__ieee754_log10+0xd4>)
 801a782:	1518      	asrs	r0, r3, #20
 801a784:	1840      	adds	r0, r0, r1
 801a786:	1880      	adds	r0, r0, r2
 801a788:	0fc2      	lsrs	r2, r0, #31
 801a78a:	031b      	lsls	r3, r3, #12
 801a78c:	0b1b      	lsrs	r3, r3, #12
 801a78e:	1880      	adds	r0, r0, r2
 801a790:	9203      	str	r2, [sp, #12]
 801a792:	9300      	str	r3, [sp, #0]
 801a794:	f7e8 fd92 	bl	80032bc <__aeabi_i2d>
 801a798:	9a03      	ldr	r2, [sp, #12]
 801a79a:	4b16      	ldr	r3, [pc, #88]	@ (801a7f4 <__ieee754_log10+0xd8>)
 801a79c:	0006      	movs	r6, r0
 801a79e:	1a9b      	subs	r3, r3, r2
 801a7a0:	9a00      	ldr	r2, [sp, #0]
 801a7a2:	051b      	lsls	r3, r3, #20
 801a7a4:	431a      	orrs	r2, r3
 801a7a6:	0015      	movs	r5, r2
 801a7a8:	4b13      	ldr	r3, [pc, #76]	@ (801a7f8 <__ieee754_log10+0xdc>)
 801a7aa:	4a14      	ldr	r2, [pc, #80]	@ (801a7fc <__ieee754_log10+0xe0>)
 801a7ac:	000f      	movs	r7, r1
 801a7ae:	f7e7 fec3 	bl	8002538 <__aeabi_dmul>
 801a7b2:	9000      	str	r0, [sp, #0]
 801a7b4:	9101      	str	r1, [sp, #4]
 801a7b6:	0020      	movs	r0, r4
 801a7b8:	0029      	movs	r1, r5
 801a7ba:	f000 f93b 	bl	801aa34 <__ieee754_log>
 801a7be:	4a10      	ldr	r2, [pc, #64]	@ (801a800 <__ieee754_log10+0xe4>)
 801a7c0:	4b10      	ldr	r3, [pc, #64]	@ (801a804 <__ieee754_log10+0xe8>)
 801a7c2:	f7e7 feb9 	bl	8002538 <__aeabi_dmul>
 801a7c6:	9a00      	ldr	r2, [sp, #0]
 801a7c8:	9b01      	ldr	r3, [sp, #4]
 801a7ca:	f7e6 ff0d 	bl	80015e8 <__aeabi_dadd>
 801a7ce:	4a0e      	ldr	r2, [pc, #56]	@ (801a808 <__ieee754_log10+0xec>)
 801a7d0:	4b0e      	ldr	r3, [pc, #56]	@ (801a80c <__ieee754_log10+0xf0>)
 801a7d2:	0004      	movs	r4, r0
 801a7d4:	000d      	movs	r5, r1
 801a7d6:	0030      	movs	r0, r6
 801a7d8:	0039      	movs	r1, r7
 801a7da:	f7e7 fead 	bl	8002538 <__aeabi_dmul>
 801a7de:	0002      	movs	r2, r0
 801a7e0:	000b      	movs	r3, r1
 801a7e2:	e7c6      	b.n	801a772 <__ieee754_log10+0x56>
 801a7e4:	c3500000 	.word	0xc3500000
 801a7e8:	43500000 	.word	0x43500000
 801a7ec:	7fefffff 	.word	0x7fefffff
 801a7f0:	fffffc01 	.word	0xfffffc01
 801a7f4:	000003ff 	.word	0x000003ff
 801a7f8:	3d59fef3 	.word	0x3d59fef3
 801a7fc:	11f12b36 	.word	0x11f12b36
 801a800:	1526e50e 	.word	0x1526e50e
 801a804:	3fdbcb7b 	.word	0x3fdbcb7b
 801a808:	509f6000 	.word	0x509f6000
 801a80c:	3fd34413 	.word	0x3fd34413

0801a810 <__ieee754_expf>:
 801a810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a812:	21ff      	movs	r1, #255	@ 0xff
 801a814:	0043      	lsls	r3, r0, #1
 801a816:	1c04      	adds	r4, r0, #0
 801a818:	085b      	lsrs	r3, r3, #1
 801a81a:	05c9      	lsls	r1, r1, #23
 801a81c:	428b      	cmp	r3, r1
 801a81e:	d904      	bls.n	801a82a <__ieee754_expf+0x1a>
 801a820:	1c01      	adds	r1, r0, #0
 801a822:	1c20      	adds	r0, r4, #0
 801a824:	f7e5 ffca 	bl	80007bc <__aeabi_fadd>
 801a828:	e00d      	b.n	801a846 <__ieee754_expf+0x36>
 801a82a:	0fc6      	lsrs	r6, r0, #31
 801a82c:	428b      	cmp	r3, r1
 801a82e:	d104      	bne.n	801a83a <__ieee754_expf+0x2a>
 801a830:	2e00      	cmp	r6, #0
 801a832:	d000      	beq.n	801a836 <__ieee754_expf+0x26>
 801a834:	e0ba      	b.n	801a9ac <__ieee754_expf+0x19c>
 801a836:	1c20      	adds	r0, r4, #0
 801a838:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a83a:	495d      	ldr	r1, [pc, #372]	@ (801a9b0 <__ieee754_expf+0x1a0>)
 801a83c:	4288      	cmp	r0, r1
 801a83e:	dd04      	ble.n	801a84a <__ieee754_expf+0x3a>
 801a840:	2000      	movs	r0, #0
 801a842:	f000 f8f1 	bl	801aa28 <__math_oflowf>
 801a846:	1c04      	adds	r4, r0, #0
 801a848:	e7f5      	b.n	801a836 <__ieee754_expf+0x26>
 801a84a:	2800      	cmp	r0, #0
 801a84c:	da06      	bge.n	801a85c <__ieee754_expf+0x4c>
 801a84e:	4a59      	ldr	r2, [pc, #356]	@ (801a9b4 <__ieee754_expf+0x1a4>)
 801a850:	4293      	cmp	r3, r2
 801a852:	d903      	bls.n	801a85c <__ieee754_expf+0x4c>
 801a854:	2000      	movs	r0, #0
 801a856:	f000 f8e1 	bl	801aa1c <__math_uflowf>
 801a85a:	e7f4      	b.n	801a846 <__ieee754_expf+0x36>
 801a85c:	4a56      	ldr	r2, [pc, #344]	@ (801a9b8 <__ieee754_expf+0x1a8>)
 801a85e:	4293      	cmp	r3, r2
 801a860:	d96e      	bls.n	801a940 <__ieee754_expf+0x130>
 801a862:	4a56      	ldr	r2, [pc, #344]	@ (801a9bc <__ieee754_expf+0x1ac>)
 801a864:	00b5      	lsls	r5, r6, #2
 801a866:	4293      	cmp	r3, r2
 801a868:	d84e      	bhi.n	801a908 <__ieee754_expf+0xf8>
 801a86a:	4b55      	ldr	r3, [pc, #340]	@ (801a9c0 <__ieee754_expf+0x1b0>)
 801a86c:	1c20      	adds	r0, r4, #0
 801a86e:	5959      	ldr	r1, [r3, r5]
 801a870:	f7e6 fc52 	bl	8001118 <__aeabi_fsub>
 801a874:	4b53      	ldr	r3, [pc, #332]	@ (801a9c4 <__ieee754_expf+0x1b4>)
 801a876:	1c07      	adds	r7, r0, #0
 801a878:	595b      	ldr	r3, [r3, r5]
 801a87a:	2501      	movs	r5, #1
 801a87c:	1bad      	subs	r5, r5, r6
 801a87e:	9300      	str	r3, [sp, #0]
 801a880:	1bad      	subs	r5, r5, r6
 801a882:	9900      	ldr	r1, [sp, #0]
 801a884:	1c38      	adds	r0, r7, #0
 801a886:	f7e6 fc47 	bl	8001118 <__aeabi_fsub>
 801a88a:	1c04      	adds	r4, r0, #0
 801a88c:	1c21      	adds	r1, r4, #0
 801a88e:	1c20      	adds	r0, r4, #0
 801a890:	f7e6 fb04 	bl	8000e9c <__aeabi_fmul>
 801a894:	494c      	ldr	r1, [pc, #304]	@ (801a9c8 <__ieee754_expf+0x1b8>)
 801a896:	1c06      	adds	r6, r0, #0
 801a898:	f7e6 fb00 	bl	8000e9c <__aeabi_fmul>
 801a89c:	494b      	ldr	r1, [pc, #300]	@ (801a9cc <__ieee754_expf+0x1bc>)
 801a89e:	f7e6 fc3b 	bl	8001118 <__aeabi_fsub>
 801a8a2:	1c31      	adds	r1, r6, #0
 801a8a4:	f7e6 fafa 	bl	8000e9c <__aeabi_fmul>
 801a8a8:	4949      	ldr	r1, [pc, #292]	@ (801a9d0 <__ieee754_expf+0x1c0>)
 801a8aa:	f7e5 ff87 	bl	80007bc <__aeabi_fadd>
 801a8ae:	1c31      	adds	r1, r6, #0
 801a8b0:	f7e6 faf4 	bl	8000e9c <__aeabi_fmul>
 801a8b4:	4947      	ldr	r1, [pc, #284]	@ (801a9d4 <__ieee754_expf+0x1c4>)
 801a8b6:	f7e6 fc2f 	bl	8001118 <__aeabi_fsub>
 801a8ba:	1c31      	adds	r1, r6, #0
 801a8bc:	f7e6 faee 	bl	8000e9c <__aeabi_fmul>
 801a8c0:	4945      	ldr	r1, [pc, #276]	@ (801a9d8 <__ieee754_expf+0x1c8>)
 801a8c2:	f7e5 ff7b 	bl	80007bc <__aeabi_fadd>
 801a8c6:	1c31      	adds	r1, r6, #0
 801a8c8:	f7e6 fae8 	bl	8000e9c <__aeabi_fmul>
 801a8cc:	1c01      	adds	r1, r0, #0
 801a8ce:	1c20      	adds	r0, r4, #0
 801a8d0:	f7e6 fc22 	bl	8001118 <__aeabi_fsub>
 801a8d4:	1c01      	adds	r1, r0, #0
 801a8d6:	1c06      	adds	r6, r0, #0
 801a8d8:	1c20      	adds	r0, r4, #0
 801a8da:	f7e6 fadf 	bl	8000e9c <__aeabi_fmul>
 801a8de:	9001      	str	r0, [sp, #4]
 801a8e0:	2d00      	cmp	r5, #0
 801a8e2:	d140      	bne.n	801a966 <__ieee754_expf+0x156>
 801a8e4:	2180      	movs	r1, #128	@ 0x80
 801a8e6:	1c30      	adds	r0, r6, #0
 801a8e8:	05c9      	lsls	r1, r1, #23
 801a8ea:	f7e6 fc15 	bl	8001118 <__aeabi_fsub>
 801a8ee:	1c01      	adds	r1, r0, #0
 801a8f0:	9801      	ldr	r0, [sp, #4]
 801a8f2:	f7e6 f8ed 	bl	8000ad0 <__aeabi_fdiv>
 801a8f6:	1c21      	adds	r1, r4, #0
 801a8f8:	f7e6 fc0e 	bl	8001118 <__aeabi_fsub>
 801a8fc:	1c01      	adds	r1, r0, #0
 801a8fe:	20fe      	movs	r0, #254	@ 0xfe
 801a900:	0580      	lsls	r0, r0, #22
 801a902:	f7e6 fc09 	bl	8001118 <__aeabi_fsub>
 801a906:	e79e      	b.n	801a846 <__ieee754_expf+0x36>
 801a908:	4934      	ldr	r1, [pc, #208]	@ (801a9dc <__ieee754_expf+0x1cc>)
 801a90a:	1c20      	adds	r0, r4, #0
 801a90c:	f7e6 fac6 	bl	8000e9c <__aeabi_fmul>
 801a910:	4b33      	ldr	r3, [pc, #204]	@ (801a9e0 <__ieee754_expf+0x1d0>)
 801a912:	5959      	ldr	r1, [r3, r5]
 801a914:	f7e5 ff52 	bl	80007bc <__aeabi_fadd>
 801a918:	f7e6 fdb8 	bl	800148c <__aeabi_f2iz>
 801a91c:	0005      	movs	r5, r0
 801a91e:	f7e6 fdd5 	bl	80014cc <__aeabi_i2f>
 801a922:	4930      	ldr	r1, [pc, #192]	@ (801a9e4 <__ieee754_expf+0x1d4>)
 801a924:	1c06      	adds	r6, r0, #0
 801a926:	f7e6 fab9 	bl	8000e9c <__aeabi_fmul>
 801a92a:	1c01      	adds	r1, r0, #0
 801a92c:	1c20      	adds	r0, r4, #0
 801a92e:	f7e6 fbf3 	bl	8001118 <__aeabi_fsub>
 801a932:	492d      	ldr	r1, [pc, #180]	@ (801a9e8 <__ieee754_expf+0x1d8>)
 801a934:	1c07      	adds	r7, r0, #0
 801a936:	1c30      	adds	r0, r6, #0
 801a938:	f7e6 fab0 	bl	8000e9c <__aeabi_fmul>
 801a93c:	9000      	str	r0, [sp, #0]
 801a93e:	e7a0      	b.n	801a882 <__ieee754_expf+0x72>
 801a940:	22d0      	movs	r2, #208	@ 0xd0
 801a942:	0592      	lsls	r2, r2, #22
 801a944:	4293      	cmp	r3, r2
 801a946:	d20c      	bcs.n	801a962 <__ieee754_expf+0x152>
 801a948:	4928      	ldr	r1, [pc, #160]	@ (801a9ec <__ieee754_expf+0x1dc>)
 801a94a:	1c20      	adds	r0, r4, #0
 801a94c:	f7e5 ff36 	bl	80007bc <__aeabi_fadd>
 801a950:	21fe      	movs	r1, #254	@ 0xfe
 801a952:	0589      	lsls	r1, r1, #22
 801a954:	f7e5 fdce 	bl	80004f4 <__aeabi_fcmpgt>
 801a958:	1e05      	subs	r5, r0, #0
 801a95a:	d097      	beq.n	801a88c <__ieee754_expf+0x7c>
 801a95c:	21fe      	movs	r1, #254	@ 0xfe
 801a95e:	0589      	lsls	r1, r1, #22
 801a960:	e75f      	b.n	801a822 <__ieee754_expf+0x12>
 801a962:	2500      	movs	r5, #0
 801a964:	e792      	b.n	801a88c <__ieee754_expf+0x7c>
 801a966:	2080      	movs	r0, #128	@ 0x80
 801a968:	1c31      	adds	r1, r6, #0
 801a96a:	05c0      	lsls	r0, r0, #23
 801a96c:	f7e6 fbd4 	bl	8001118 <__aeabi_fsub>
 801a970:	1c01      	adds	r1, r0, #0
 801a972:	9801      	ldr	r0, [sp, #4]
 801a974:	f7e6 f8ac 	bl	8000ad0 <__aeabi_fdiv>
 801a978:	1c01      	adds	r1, r0, #0
 801a97a:	9800      	ldr	r0, [sp, #0]
 801a97c:	f7e6 fbcc 	bl	8001118 <__aeabi_fsub>
 801a980:	1c39      	adds	r1, r7, #0
 801a982:	f7e6 fbc9 	bl	8001118 <__aeabi_fsub>
 801a986:	1c01      	adds	r1, r0, #0
 801a988:	20fe      	movs	r0, #254	@ 0xfe
 801a98a:	0580      	lsls	r0, r0, #22
 801a98c:	f7e6 fbc4 	bl	8001118 <__aeabi_fsub>
 801a990:	002b      	movs	r3, r5
 801a992:	337d      	adds	r3, #125	@ 0x7d
 801a994:	db02      	blt.n	801a99c <__ieee754_expf+0x18c>
 801a996:	05ec      	lsls	r4, r5, #23
 801a998:	1824      	adds	r4, r4, r0
 801a99a:	e74c      	b.n	801a836 <__ieee754_expf+0x26>
 801a99c:	21d8      	movs	r1, #216	@ 0xd8
 801a99e:	3564      	adds	r5, #100	@ 0x64
 801a9a0:	05ed      	lsls	r5, r5, #23
 801a9a2:	1828      	adds	r0, r5, r0
 801a9a4:	0509      	lsls	r1, r1, #20
 801a9a6:	f7e6 fa79 	bl	8000e9c <__aeabi_fmul>
 801a9aa:	e74c      	b.n	801a846 <__ieee754_expf+0x36>
 801a9ac:	2400      	movs	r4, #0
 801a9ae:	e742      	b.n	801a836 <__ieee754_expf+0x26>
 801a9b0:	42b17217 	.word	0x42b17217
 801a9b4:	42cff1b5 	.word	0x42cff1b5
 801a9b8:	3eb17218 	.word	0x3eb17218
 801a9bc:	3f851591 	.word	0x3f851591
 801a9c0:	0801c028 	.word	0x0801c028
 801a9c4:	0801c020 	.word	0x0801c020
 801a9c8:	3331bb4c 	.word	0x3331bb4c
 801a9cc:	35ddea0e 	.word	0x35ddea0e
 801a9d0:	388ab355 	.word	0x388ab355
 801a9d4:	3b360b61 	.word	0x3b360b61
 801a9d8:	3e2aaaab 	.word	0x3e2aaaab
 801a9dc:	3fb8aa3b 	.word	0x3fb8aa3b
 801a9e0:	0801c030 	.word	0x0801c030
 801a9e4:	3f317180 	.word	0x3f317180
 801a9e8:	3717f7d1 	.word	0x3717f7d1
 801a9ec:	7149f2ca 	.word	0x7149f2ca

0801a9f0 <with_errnof>:
 801a9f0:	b570      	push	{r4, r5, r6, lr}
 801a9f2:	000d      	movs	r5, r1
 801a9f4:	1c04      	adds	r4, r0, #0
 801a9f6:	f7fd fb67 	bl	80180c8 <__errno>
 801a9fa:	6005      	str	r5, [r0, #0]
 801a9fc:	1c20      	adds	r0, r4, #0
 801a9fe:	bd70      	pop	{r4, r5, r6, pc}

0801aa00 <xflowf>:
 801aa00:	b510      	push	{r4, lr}
 801aa02:	1c0b      	adds	r3, r1, #0
 801aa04:	2800      	cmp	r0, #0
 801aa06:	d002      	beq.n	801aa0e <xflowf+0xe>
 801aa08:	2380      	movs	r3, #128	@ 0x80
 801aa0a:	061b      	lsls	r3, r3, #24
 801aa0c:	18cb      	adds	r3, r1, r3
 801aa0e:	1c18      	adds	r0, r3, #0
 801aa10:	f7e6 fa44 	bl	8000e9c <__aeabi_fmul>
 801aa14:	2122      	movs	r1, #34	@ 0x22
 801aa16:	f7ff ffeb 	bl	801a9f0 <with_errnof>
 801aa1a:	bd10      	pop	{r4, pc}

0801aa1c <__math_uflowf>:
 801aa1c:	2180      	movs	r1, #128	@ 0x80
 801aa1e:	b510      	push	{r4, lr}
 801aa20:	0549      	lsls	r1, r1, #21
 801aa22:	f7ff ffed 	bl	801aa00 <xflowf>
 801aa26:	bd10      	pop	{r4, pc}

0801aa28 <__math_oflowf>:
 801aa28:	21e0      	movs	r1, #224	@ 0xe0
 801aa2a:	b510      	push	{r4, lr}
 801aa2c:	05c9      	lsls	r1, r1, #23
 801aa2e:	f7ff ffe7 	bl	801aa00 <xflowf>
 801aa32:	bd10      	pop	{r4, pc}

0801aa34 <__ieee754_log>:
 801aa34:	2380      	movs	r3, #128	@ 0x80
 801aa36:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa38:	035b      	lsls	r3, r3, #13
 801aa3a:	000e      	movs	r6, r1
 801aa3c:	b08d      	sub	sp, #52	@ 0x34
 801aa3e:	4299      	cmp	r1, r3
 801aa40:	da23      	bge.n	801aa8a <__ieee754_log+0x56>
 801aa42:	004b      	lsls	r3, r1, #1
 801aa44:	085b      	lsrs	r3, r3, #1
 801aa46:	4303      	orrs	r3, r0
 801aa48:	d107      	bne.n	801aa5a <__ieee754_log+0x26>
 801aa4a:	2200      	movs	r2, #0
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	2000      	movs	r0, #0
 801aa50:	49b4      	ldr	r1, [pc, #720]	@ (801ad24 <__ieee754_log+0x2f0>)
 801aa52:	f7e7 f92d 	bl	8001cb0 <__aeabi_ddiv>
 801aa56:	b00d      	add	sp, #52	@ 0x34
 801aa58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa5a:	2900      	cmp	r1, #0
 801aa5c:	da06      	bge.n	801aa6c <__ieee754_log+0x38>
 801aa5e:	0002      	movs	r2, r0
 801aa60:	000b      	movs	r3, r1
 801aa62:	f7e8 f831 	bl	8002ac8 <__aeabi_dsub>
 801aa66:	2200      	movs	r2, #0
 801aa68:	2300      	movs	r3, #0
 801aa6a:	e7f2      	b.n	801aa52 <__ieee754_log+0x1e>
 801aa6c:	4bae      	ldr	r3, [pc, #696]	@ (801ad28 <__ieee754_log+0x2f4>)
 801aa6e:	2200      	movs	r2, #0
 801aa70:	f7e7 fd62 	bl	8002538 <__aeabi_dmul>
 801aa74:	2336      	movs	r3, #54	@ 0x36
 801aa76:	000e      	movs	r6, r1
 801aa78:	425b      	negs	r3, r3
 801aa7a:	4aac      	ldr	r2, [pc, #688]	@ (801ad2c <__ieee754_log+0x2f8>)
 801aa7c:	4296      	cmp	r6, r2
 801aa7e:	dd06      	ble.n	801aa8e <__ieee754_log+0x5a>
 801aa80:	0002      	movs	r2, r0
 801aa82:	000b      	movs	r3, r1
 801aa84:	f7e6 fdb0 	bl	80015e8 <__aeabi_dadd>
 801aa88:	e7e5      	b.n	801aa56 <__ieee754_log+0x22>
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	e7f5      	b.n	801aa7a <__ieee754_log+0x46>
 801aa8e:	4ca8      	ldr	r4, [pc, #672]	@ (801ad30 <__ieee754_log+0x2fc>)
 801aa90:	1532      	asrs	r2, r6, #20
 801aa92:	1912      	adds	r2, r2, r4
 801aa94:	0336      	lsls	r6, r6, #12
 801aa96:	4ca7      	ldr	r4, [pc, #668]	@ (801ad34 <__ieee754_log+0x300>)
 801aa98:	18d2      	adds	r2, r2, r3
 801aa9a:	0b33      	lsrs	r3, r6, #12
 801aa9c:	9302      	str	r3, [sp, #8]
 801aa9e:	191b      	adds	r3, r3, r4
 801aaa0:	2480      	movs	r4, #128	@ 0x80
 801aaa2:	0364      	lsls	r4, r4, #13
 801aaa4:	4023      	ands	r3, r4
 801aaa6:	4ca4      	ldr	r4, [pc, #656]	@ (801ad38 <__ieee754_log+0x304>)
 801aaa8:	9d02      	ldr	r5, [sp, #8]
 801aaaa:	405c      	eors	r4, r3
 801aaac:	151b      	asrs	r3, r3, #20
 801aaae:	189b      	adds	r3, r3, r2
 801aab0:	4325      	orrs	r5, r4
 801aab2:	2200      	movs	r2, #0
 801aab4:	9300      	str	r3, [sp, #0]
 801aab6:	0029      	movs	r1, r5
 801aab8:	4b9f      	ldr	r3, [pc, #636]	@ (801ad38 <__ieee754_log+0x304>)
 801aaba:	f7e8 f805 	bl	8002ac8 <__aeabi_dsub>
 801aabe:	9b02      	ldr	r3, [sp, #8]
 801aac0:	0006      	movs	r6, r0
 801aac2:	3302      	adds	r3, #2
 801aac4:	031b      	lsls	r3, r3, #12
 801aac6:	000f      	movs	r7, r1
 801aac8:	2200      	movs	r2, #0
 801aaca:	0b1b      	lsrs	r3, r3, #12
 801aacc:	2b02      	cmp	r3, #2
 801aace:	dc64      	bgt.n	801ab9a <__ieee754_log+0x166>
 801aad0:	2300      	movs	r3, #0
 801aad2:	f7e5 fcbb 	bl	800044c <__aeabi_dcmpeq>
 801aad6:	2800      	cmp	r0, #0
 801aad8:	d019      	beq.n	801ab0e <__ieee754_log+0xda>
 801aada:	9b00      	ldr	r3, [sp, #0]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d100      	bne.n	801aae2 <__ieee754_log+0xae>
 801aae0:	e11c      	b.n	801ad1c <__ieee754_log+0x2e8>
 801aae2:	0018      	movs	r0, r3
 801aae4:	f7e8 fbea 	bl	80032bc <__aeabi_i2d>
 801aae8:	4a94      	ldr	r2, [pc, #592]	@ (801ad3c <__ieee754_log+0x308>)
 801aaea:	4b95      	ldr	r3, [pc, #596]	@ (801ad40 <__ieee754_log+0x30c>)
 801aaec:	0004      	movs	r4, r0
 801aaee:	000d      	movs	r5, r1
 801aaf0:	f7e7 fd22 	bl	8002538 <__aeabi_dmul>
 801aaf4:	4a93      	ldr	r2, [pc, #588]	@ (801ad44 <__ieee754_log+0x310>)
 801aaf6:	0006      	movs	r6, r0
 801aaf8:	000f      	movs	r7, r1
 801aafa:	4b93      	ldr	r3, [pc, #588]	@ (801ad48 <__ieee754_log+0x314>)
 801aafc:	0020      	movs	r0, r4
 801aafe:	0029      	movs	r1, r5
 801ab00:	f7e7 fd1a 	bl	8002538 <__aeabi_dmul>
 801ab04:	0002      	movs	r2, r0
 801ab06:	000b      	movs	r3, r1
 801ab08:	0030      	movs	r0, r6
 801ab0a:	0039      	movs	r1, r7
 801ab0c:	e7ba      	b.n	801aa84 <__ieee754_log+0x50>
 801ab0e:	4a8f      	ldr	r2, [pc, #572]	@ (801ad4c <__ieee754_log+0x318>)
 801ab10:	4b8f      	ldr	r3, [pc, #572]	@ (801ad50 <__ieee754_log+0x31c>)
 801ab12:	0030      	movs	r0, r6
 801ab14:	0039      	movs	r1, r7
 801ab16:	f7e7 fd0f 	bl	8002538 <__aeabi_dmul>
 801ab1a:	0002      	movs	r2, r0
 801ab1c:	000b      	movs	r3, r1
 801ab1e:	2000      	movs	r0, #0
 801ab20:	498c      	ldr	r1, [pc, #560]	@ (801ad54 <__ieee754_log+0x320>)
 801ab22:	f7e7 ffd1 	bl	8002ac8 <__aeabi_dsub>
 801ab26:	0032      	movs	r2, r6
 801ab28:	0004      	movs	r4, r0
 801ab2a:	000d      	movs	r5, r1
 801ab2c:	003b      	movs	r3, r7
 801ab2e:	0030      	movs	r0, r6
 801ab30:	0039      	movs	r1, r7
 801ab32:	f7e7 fd01 	bl	8002538 <__aeabi_dmul>
 801ab36:	000b      	movs	r3, r1
 801ab38:	0002      	movs	r2, r0
 801ab3a:	0029      	movs	r1, r5
 801ab3c:	0020      	movs	r0, r4
 801ab3e:	f7e7 fcfb 	bl	8002538 <__aeabi_dmul>
 801ab42:	9b00      	ldr	r3, [sp, #0]
 801ab44:	9002      	str	r0, [sp, #8]
 801ab46:	9103      	str	r1, [sp, #12]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d106      	bne.n	801ab5a <__ieee754_log+0x126>
 801ab4c:	0002      	movs	r2, r0
 801ab4e:	000b      	movs	r3, r1
 801ab50:	0030      	movs	r0, r6
 801ab52:	0039      	movs	r1, r7
 801ab54:	f7e7 ffb8 	bl	8002ac8 <__aeabi_dsub>
 801ab58:	e77d      	b.n	801aa56 <__ieee754_log+0x22>
 801ab5a:	9800      	ldr	r0, [sp, #0]
 801ab5c:	f7e8 fbae 	bl	80032bc <__aeabi_i2d>
 801ab60:	4a76      	ldr	r2, [pc, #472]	@ (801ad3c <__ieee754_log+0x308>)
 801ab62:	4b77      	ldr	r3, [pc, #476]	@ (801ad40 <__ieee754_log+0x30c>)
 801ab64:	0004      	movs	r4, r0
 801ab66:	000d      	movs	r5, r1
 801ab68:	f7e7 fce6 	bl	8002538 <__aeabi_dmul>
 801ab6c:	4a75      	ldr	r2, [pc, #468]	@ (801ad44 <__ieee754_log+0x310>)
 801ab6e:	9000      	str	r0, [sp, #0]
 801ab70:	9101      	str	r1, [sp, #4]
 801ab72:	4b75      	ldr	r3, [pc, #468]	@ (801ad48 <__ieee754_log+0x314>)
 801ab74:	0020      	movs	r0, r4
 801ab76:	0029      	movs	r1, r5
 801ab78:	f7e7 fcde 	bl	8002538 <__aeabi_dmul>
 801ab7c:	0002      	movs	r2, r0
 801ab7e:	000b      	movs	r3, r1
 801ab80:	9802      	ldr	r0, [sp, #8]
 801ab82:	9903      	ldr	r1, [sp, #12]
 801ab84:	f7e7 ffa0 	bl	8002ac8 <__aeabi_dsub>
 801ab88:	0032      	movs	r2, r6
 801ab8a:	003b      	movs	r3, r7
 801ab8c:	f7e7 ff9c 	bl	8002ac8 <__aeabi_dsub>
 801ab90:	0002      	movs	r2, r0
 801ab92:	000b      	movs	r3, r1
 801ab94:	9800      	ldr	r0, [sp, #0]
 801ab96:	9901      	ldr	r1, [sp, #4]
 801ab98:	e7dc      	b.n	801ab54 <__ieee754_log+0x120>
 801ab9a:	2380      	movs	r3, #128	@ 0x80
 801ab9c:	05db      	lsls	r3, r3, #23
 801ab9e:	f7e6 fd23 	bl	80015e8 <__aeabi_dadd>
 801aba2:	0002      	movs	r2, r0
 801aba4:	000b      	movs	r3, r1
 801aba6:	0030      	movs	r0, r6
 801aba8:	0039      	movs	r1, r7
 801abaa:	f7e7 f881 	bl	8001cb0 <__aeabi_ddiv>
 801abae:	9004      	str	r0, [sp, #16]
 801abb0:	9105      	str	r1, [sp, #20]
 801abb2:	9800      	ldr	r0, [sp, #0]
 801abb4:	f7e8 fb82 	bl	80032bc <__aeabi_i2d>
 801abb8:	9a04      	ldr	r2, [sp, #16]
 801abba:	9b05      	ldr	r3, [sp, #20]
 801abbc:	9006      	str	r0, [sp, #24]
 801abbe:	9107      	str	r1, [sp, #28]
 801abc0:	0010      	movs	r0, r2
 801abc2:	0019      	movs	r1, r3
 801abc4:	f7e7 fcb8 	bl	8002538 <__aeabi_dmul>
 801abc8:	4a63      	ldr	r2, [pc, #396]	@ (801ad58 <__ieee754_log+0x324>)
 801abca:	9b02      	ldr	r3, [sp, #8]
 801abcc:	4694      	mov	ip, r2
 801abce:	4463      	add	r3, ip
 801abd0:	0002      	movs	r2, r0
 801abd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801abd4:	000b      	movs	r3, r1
 801abd6:	9008      	str	r0, [sp, #32]
 801abd8:	9109      	str	r1, [sp, #36]	@ 0x24
 801abda:	f7e7 fcad 	bl	8002538 <__aeabi_dmul>
 801abde:	0004      	movs	r4, r0
 801abe0:	000d      	movs	r5, r1
 801abe2:	4a5e      	ldr	r2, [pc, #376]	@ (801ad5c <__ieee754_log+0x328>)
 801abe4:	4b5e      	ldr	r3, [pc, #376]	@ (801ad60 <__ieee754_log+0x32c>)
 801abe6:	f7e7 fca7 	bl	8002538 <__aeabi_dmul>
 801abea:	4a5e      	ldr	r2, [pc, #376]	@ (801ad64 <__ieee754_log+0x330>)
 801abec:	4b5e      	ldr	r3, [pc, #376]	@ (801ad68 <__ieee754_log+0x334>)
 801abee:	f7e6 fcfb 	bl	80015e8 <__aeabi_dadd>
 801abf2:	0022      	movs	r2, r4
 801abf4:	002b      	movs	r3, r5
 801abf6:	f7e7 fc9f 	bl	8002538 <__aeabi_dmul>
 801abfa:	4a5c      	ldr	r2, [pc, #368]	@ (801ad6c <__ieee754_log+0x338>)
 801abfc:	4b5c      	ldr	r3, [pc, #368]	@ (801ad70 <__ieee754_log+0x33c>)
 801abfe:	f7e6 fcf3 	bl	80015e8 <__aeabi_dadd>
 801ac02:	0022      	movs	r2, r4
 801ac04:	002b      	movs	r3, r5
 801ac06:	f7e7 fc97 	bl	8002538 <__aeabi_dmul>
 801ac0a:	4a5a      	ldr	r2, [pc, #360]	@ (801ad74 <__ieee754_log+0x340>)
 801ac0c:	4b5a      	ldr	r3, [pc, #360]	@ (801ad78 <__ieee754_log+0x344>)
 801ac0e:	f7e6 fceb 	bl	80015e8 <__aeabi_dadd>
 801ac12:	9a08      	ldr	r2, [sp, #32]
 801ac14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac16:	f7e7 fc8f 	bl	8002538 <__aeabi_dmul>
 801ac1a:	4a58      	ldr	r2, [pc, #352]	@ (801ad7c <__ieee754_log+0x348>)
 801ac1c:	9008      	str	r0, [sp, #32]
 801ac1e:	9109      	str	r1, [sp, #36]	@ 0x24
 801ac20:	4b57      	ldr	r3, [pc, #348]	@ (801ad80 <__ieee754_log+0x34c>)
 801ac22:	0020      	movs	r0, r4
 801ac24:	0029      	movs	r1, r5
 801ac26:	f7e7 fc87 	bl	8002538 <__aeabi_dmul>
 801ac2a:	4a56      	ldr	r2, [pc, #344]	@ (801ad84 <__ieee754_log+0x350>)
 801ac2c:	4b56      	ldr	r3, [pc, #344]	@ (801ad88 <__ieee754_log+0x354>)
 801ac2e:	f7e6 fcdb 	bl	80015e8 <__aeabi_dadd>
 801ac32:	0022      	movs	r2, r4
 801ac34:	002b      	movs	r3, r5
 801ac36:	f7e7 fc7f 	bl	8002538 <__aeabi_dmul>
 801ac3a:	4a54      	ldr	r2, [pc, #336]	@ (801ad8c <__ieee754_log+0x358>)
 801ac3c:	4b54      	ldr	r3, [pc, #336]	@ (801ad90 <__ieee754_log+0x35c>)
 801ac3e:	f7e6 fcd3 	bl	80015e8 <__aeabi_dadd>
 801ac42:	0022      	movs	r2, r4
 801ac44:	002b      	movs	r3, r5
 801ac46:	f7e7 fc77 	bl	8002538 <__aeabi_dmul>
 801ac4a:	0002      	movs	r2, r0
 801ac4c:	000b      	movs	r3, r1
 801ac4e:	9808      	ldr	r0, [sp, #32]
 801ac50:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ac52:	f7e6 fcc9 	bl	80015e8 <__aeabi_dadd>
 801ac56:	9a02      	ldr	r2, [sp, #8]
 801ac58:	4b4e      	ldr	r3, [pc, #312]	@ (801ad94 <__ieee754_log+0x360>)
 801ac5a:	0004      	movs	r4, r0
 801ac5c:	1a9b      	subs	r3, r3, r2
 801ac5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ac60:	000d      	movs	r5, r1
 801ac62:	4313      	orrs	r3, r2
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	dd34      	ble.n	801acd2 <__ieee754_log+0x29e>
 801ac68:	2200      	movs	r2, #0
 801ac6a:	4b3a      	ldr	r3, [pc, #232]	@ (801ad54 <__ieee754_log+0x320>)
 801ac6c:	0030      	movs	r0, r6
 801ac6e:	0039      	movs	r1, r7
 801ac70:	f7e7 fc62 	bl	8002538 <__aeabi_dmul>
 801ac74:	0032      	movs	r2, r6
 801ac76:	003b      	movs	r3, r7
 801ac78:	f7e7 fc5e 	bl	8002538 <__aeabi_dmul>
 801ac7c:	0002      	movs	r2, r0
 801ac7e:	000b      	movs	r3, r1
 801ac80:	9002      	str	r0, [sp, #8]
 801ac82:	9103      	str	r1, [sp, #12]
 801ac84:	0020      	movs	r0, r4
 801ac86:	0029      	movs	r1, r5
 801ac88:	f7e6 fcae 	bl	80015e8 <__aeabi_dadd>
 801ac8c:	9a04      	ldr	r2, [sp, #16]
 801ac8e:	9b05      	ldr	r3, [sp, #20]
 801ac90:	f7e7 fc52 	bl	8002538 <__aeabi_dmul>
 801ac94:	9b00      	ldr	r3, [sp, #0]
 801ac96:	0004      	movs	r4, r0
 801ac98:	000d      	movs	r5, r1
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d106      	bne.n	801acac <__ieee754_log+0x278>
 801ac9e:	0002      	movs	r2, r0
 801aca0:	000b      	movs	r3, r1
 801aca2:	9802      	ldr	r0, [sp, #8]
 801aca4:	9903      	ldr	r1, [sp, #12]
 801aca6:	f7e7 ff0f 	bl	8002ac8 <__aeabi_dsub>
 801acaa:	e74f      	b.n	801ab4c <__ieee754_log+0x118>
 801acac:	4a23      	ldr	r2, [pc, #140]	@ (801ad3c <__ieee754_log+0x308>)
 801acae:	4b24      	ldr	r3, [pc, #144]	@ (801ad40 <__ieee754_log+0x30c>)
 801acb0:	9806      	ldr	r0, [sp, #24]
 801acb2:	9907      	ldr	r1, [sp, #28]
 801acb4:	f7e7 fc40 	bl	8002538 <__aeabi_dmul>
 801acb8:	4a22      	ldr	r2, [pc, #136]	@ (801ad44 <__ieee754_log+0x310>)
 801acba:	9000      	str	r0, [sp, #0]
 801acbc:	9101      	str	r1, [sp, #4]
 801acbe:	9806      	ldr	r0, [sp, #24]
 801acc0:	9907      	ldr	r1, [sp, #28]
 801acc2:	4b21      	ldr	r3, [pc, #132]	@ (801ad48 <__ieee754_log+0x314>)
 801acc4:	f7e7 fc38 	bl	8002538 <__aeabi_dmul>
 801acc8:	0022      	movs	r2, r4
 801acca:	002b      	movs	r3, r5
 801accc:	f7e6 fc8c 	bl	80015e8 <__aeabi_dadd>
 801acd0:	e754      	b.n	801ab7c <__ieee754_log+0x148>
 801acd2:	0002      	movs	r2, r0
 801acd4:	000b      	movs	r3, r1
 801acd6:	0030      	movs	r0, r6
 801acd8:	0039      	movs	r1, r7
 801acda:	f7e7 fef5 	bl	8002ac8 <__aeabi_dsub>
 801acde:	9a04      	ldr	r2, [sp, #16]
 801ace0:	9b05      	ldr	r3, [sp, #20]
 801ace2:	f7e7 fc29 	bl	8002538 <__aeabi_dmul>
 801ace6:	9b00      	ldr	r3, [sp, #0]
 801ace8:	0004      	movs	r4, r0
 801acea:	000d      	movs	r5, r1
 801acec:	2b00      	cmp	r3, #0
 801acee:	d102      	bne.n	801acf6 <__ieee754_log+0x2c2>
 801acf0:	0002      	movs	r2, r0
 801acf2:	000b      	movs	r3, r1
 801acf4:	e72c      	b.n	801ab50 <__ieee754_log+0x11c>
 801acf6:	4a11      	ldr	r2, [pc, #68]	@ (801ad3c <__ieee754_log+0x308>)
 801acf8:	4b11      	ldr	r3, [pc, #68]	@ (801ad40 <__ieee754_log+0x30c>)
 801acfa:	9806      	ldr	r0, [sp, #24]
 801acfc:	9907      	ldr	r1, [sp, #28]
 801acfe:	f7e7 fc1b 	bl	8002538 <__aeabi_dmul>
 801ad02:	4a10      	ldr	r2, [pc, #64]	@ (801ad44 <__ieee754_log+0x310>)
 801ad04:	9000      	str	r0, [sp, #0]
 801ad06:	9101      	str	r1, [sp, #4]
 801ad08:	9806      	ldr	r0, [sp, #24]
 801ad0a:	9907      	ldr	r1, [sp, #28]
 801ad0c:	4b0e      	ldr	r3, [pc, #56]	@ (801ad48 <__ieee754_log+0x314>)
 801ad0e:	f7e7 fc13 	bl	8002538 <__aeabi_dmul>
 801ad12:	0002      	movs	r2, r0
 801ad14:	000b      	movs	r3, r1
 801ad16:	0020      	movs	r0, r4
 801ad18:	0029      	movs	r1, r5
 801ad1a:	e733      	b.n	801ab84 <__ieee754_log+0x150>
 801ad1c:	2000      	movs	r0, #0
 801ad1e:	2100      	movs	r1, #0
 801ad20:	e699      	b.n	801aa56 <__ieee754_log+0x22>
 801ad22:	46c0      	nop			@ (mov r8, r8)
 801ad24:	c3500000 	.word	0xc3500000
 801ad28:	43500000 	.word	0x43500000
 801ad2c:	7fefffff 	.word	0x7fefffff
 801ad30:	fffffc01 	.word	0xfffffc01
 801ad34:	00095f64 	.word	0x00095f64
 801ad38:	3ff00000 	.word	0x3ff00000
 801ad3c:	fee00000 	.word	0xfee00000
 801ad40:	3fe62e42 	.word	0x3fe62e42
 801ad44:	35793c76 	.word	0x35793c76
 801ad48:	3dea39ef 	.word	0x3dea39ef
 801ad4c:	55555555 	.word	0x55555555
 801ad50:	3fd55555 	.word	0x3fd55555
 801ad54:	3fe00000 	.word	0x3fe00000
 801ad58:	fff9eb86 	.word	0xfff9eb86
 801ad5c:	df3e5244 	.word	0xdf3e5244
 801ad60:	3fc2f112 	.word	0x3fc2f112
 801ad64:	96cb03de 	.word	0x96cb03de
 801ad68:	3fc74664 	.word	0x3fc74664
 801ad6c:	94229359 	.word	0x94229359
 801ad70:	3fd24924 	.word	0x3fd24924
 801ad74:	55555593 	.word	0x55555593
 801ad78:	3fe55555 	.word	0x3fe55555
 801ad7c:	d078c69f 	.word	0xd078c69f
 801ad80:	3fc39a09 	.word	0x3fc39a09
 801ad84:	1d8e78af 	.word	0x1d8e78af
 801ad88:	3fcc71c5 	.word	0x3fcc71c5
 801ad8c:	9997fa04 	.word	0x9997fa04
 801ad90:	3fd99999 	.word	0x3fd99999
 801ad94:	0006b851 	.word	0x0006b851

0801ad98 <_init>:
 801ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad9a:	46c0      	nop			@ (mov r8, r8)
 801ad9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad9e:	bc08      	pop	{r3}
 801ada0:	469e      	mov	lr, r3
 801ada2:	4770      	bx	lr

0801ada4 <_fini>:
 801ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ada6:	46c0      	nop			@ (mov r8, r8)
 801ada8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adaa:	bc08      	pop	{r3}
 801adac:	469e      	mov	lr, r3
 801adae:	4770      	bx	lr
